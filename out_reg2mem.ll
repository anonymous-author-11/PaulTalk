; ModuleID = '<stdin>'
source_filename = "llvm-link"

@_parameterization_Nothing = linkonce_odr constant [1 x ptr] [ptr @nothing_typ]
@_parameterization_Nil = linkonce_odr constant [1 x ptr] [ptr @nil_typ]
@_parameterization_Nil_or_Ptri32 = linkonce_odr constant [3 x ptr] [ptr @union_typ, ptr @_parameterization_Nil, ptr @_parameterization_Ptri32]
@lywol_bigtingstxt = internal constant [12 x i8] c"bigtings.txt"
@xmrwq_thisnis_hownwe_donit = internal constant [20 x i8] c"this\0Ais how\0Awe do\0Ait"
@dtohd_bigtingstxt = internal constant [12 x i8] c"bigtings.txt"
@_parameterization_FunctionPtri32_to_Nothing = linkonce_odr constant [3 x ptr] [ptr @function_typ, ptr @_parameterization_Nothing, ptr @_parameterization_Ptri32]
@_parameterization_FunctionPtri32._Ptri32_to_Ptri32 = linkonce_odr constant [4 x ptr] [ptr @function_typ, ptr @_parameterization_Ptri32, ptr @_parameterization_Ptri32, ptr @_parameterization_Ptri32]
@_parameterization_Integer2 = linkonce_odr constant [1 x ptr] [ptr @Integer2]
@_parameterization_Character = linkonce_odr constant [1 x ptr] [ptr @Character]
@trtae_boom = internal constant [5 x i8] c"boom!"
@_parameterization_Ptri64 = linkonce_odr constant [1 x ptr] [ptr @i64_typ]
@hlult_so_it_is_true = internal constant [14 x i8] c"so it is true!"
@whuhm_barrys_color_is = internal constant [16 x i8] c"barry's color is"
@_parameterization_Beaver = linkonce_odr constant [1 x ptr] [ptr @Beaver]
@_parameterization_Animal = linkonce_odr constant [1 x ptr] [ptr @Animal]
@ntrdo_did_get_here = internal constant [13 x i8] c"did get here!"
@mlrho_start = internal constant [5 x i8] c"start"
@_parameterization_Ptrf64_or_Ptri32 = linkonce_odr constant [3 x ptr] [ptr @union_typ, ptr @_parameterization_Ptrf64, ptr @_parameterization_Ptri32]
@_parameterization_Ptri1 = linkonce_odr constant [1 x ptr] [ptr @bool_typ]
@tkyaw_Hello_World = internal constant [13 x i8] c"Hello, World!"
@jhfck_w = internal constant [1 x i8] c"w"
@xeepl_r = internal constant [1 x i8] c"r"
@gllgh_one = internal constant [3 x i8] c"one"
@jnfsf_testsmini = internal constant [10 x i8] c"tests.mini"
@nvfvo_beaver = internal constant [7 x i8] c"beaver!"
@vqhpi_animal = internal constant [7 x i8] c"animal!"
@_parameterization_ListNode = linkonce_odr constant [1 x ptr] [ptr @ListNode]
@_parameterization_Ptrf64 = linkonce_odr constant [1 x ptr] [ptr @f64_typ]
@fecbn_Integer = internal constant [8 x i8] c"Integer2"
@ectfw_Here_I_am = internal constant [10 x i8] c"Here I am!"
@kzfde_number = internal constant [6 x i8] c"number"
@yevvg_testsmini = internal constant [10 x i8] c"tests.mini"
@_parameterization_IntArray = linkonce_odr constant [1 x ptr] [ptr @IntArray]
@kjmph_testsmini = internal constant [10 x i8] c"tests.mini"
@rwlwl_testsmini = internal constant [10 x i8] c"tests.mini"
@_parameterization_BufferPtri32 = linkonce_odr constant [1 x ptr] [ptr @buffer_typ]
@qtlis_An_outofbounds_error_occurred_while_indexing_into_a_collection = internal constant [65 x i8] c"An out-of-bounds error occurred while indexing into a collection."
@niago_The_indexing_argument_was = internal constant [25 x i8] c"The indexing argument was"
@mnqtc_The_size_of_the_collection_being_indexed_was = internal constant [44 x i8] c"The size of the collection being indexed was"
@_parameterization_IntIterator = linkonce_odr constant [1 x ptr] [ptr @IntIterator]
@_parameterization_FunctionPtri32_to_Ptri1 = linkonce_odr constant [3 x ptr] [ptr @function_typ, ptr @_parameterization_Ptri1, ptr @_parameterization_Ptri32]
@_parameterization_FunctionPtri32_to_Ptri32 = linkonce_odr constant [3 x ptr] [ptr @function_typ, ptr @_parameterization_Ptri32, ptr @_parameterization_Ptri32]
@_parameterization_IntIterable = linkonce_odr constant [1 x ptr] [ptr @IntIterable]
@ftrzr_false = internal constant [5 x i8] c"false"
@ijspu_true = internal constant [4 x i8] c"true"
@nxvqe_nil = internal constant [3 x i8] c"nil"
@nxicq_ = internal constant [9 x i8] c"---------"
@qukmt_With_message = internal constant [12 x i8] c"With message"
@hdgjd_At_line = internal constant [7 x i8] c"At line"
@uocaj_Exception_thrown_from_file = internal constant [26 x i8] c"Exception thrown from file"
@remgx_ = internal constant [9 x i8] c"---------"
@zagqw_None = internal constant [6 x i8] c"<None>"
@_parameterization_Ptri8 = linkonce_odr constant [1 x ptr] [ptr @i8_typ]
@_parameterization_String = linkonce_odr constant [1 x ptr] [ptr @String]
@_parameterization_Ptri32 = linkonce_odr constant [1 x ptr] [ptr @i32_typ]
@_parameterization_BufferPtri8 = linkonce_odr constant [1 x ptr] [ptr @buffer_typ]
@clshj_Object = internal constant [6 x i8] c"Object"
@i32_string = linkonce_odr constant [4 x i8] c"%d\0A\00"
@i64_string = linkonce_odr constant [6 x i8] c"%lld\0A\00"
@float_string = linkonce_odr constant [4 x i8] c"%f\0A\00"
@string_string = linkonce_odr constant [4 x i8] c"%s\0A\00"
@bool_typ_hashtbl = linkonce_odr constant [2 x ptr] [ptr @Object, ptr @bool_typ]
@bool_typ_offset_tbl = linkonce_odr constant [2 x i32] [i32 7, i32 7]
@bool_typ = linkonce_odr constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 5801531371504802705, i64 4611686018427388081, i64 1], [4 x ptr] [ptr @subtype_test, ptr @bool_typ_hashtbl, ptr @bool_typ_offset_tbl, ptr getelementptr (i1, ptr null, i32 1)], [0 x ptr] undef }
@i8_typ_hashtbl = linkonce_odr constant [2 x ptr] [ptr @Object, ptr @i8_typ]
@i8_typ_offset_tbl = linkonce_odr constant [2 x i32] [i32 7, i32 7]
@i8_typ = linkonce_odr constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 2582149688529881115, i64 4611686018427388073, i64 1], [4 x ptr] [ptr @subtype_test, ptr @i8_typ_hashtbl, ptr @i8_typ_offset_tbl, ptr getelementptr (i8, ptr null, i32 1)], [0 x ptr] undef }
@i32_typ_hashtbl = linkonce_odr constant [2 x ptr] [ptr @i32_typ, ptr @Object]
@i32_typ_offset_tbl = linkonce_odr constant [2 x i32] [i32 7, i32 7]
@i32_typ = linkonce_odr constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 -2253724949814257982, i64 4611686018427388093, i64 1], [4 x ptr] [ptr @subtype_test, ptr @i32_typ_hashtbl, ptr @i32_typ_offset_tbl, ptr getelementptr (i32, ptr null, i32 1)], [0 x ptr] undef }
@i64_typ_hashtbl = linkonce_odr constant [2 x ptr] [ptr @Object, ptr @i64_typ]
@i64_typ_offset_tbl = linkonce_odr constant [2 x i32] [i32 7, i32 7]
@i64_typ = linkonce_odr constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 -7469797244461771922, i64 4611686018427388073, i64 1], [4 x ptr] [ptr @subtype_test, ptr @i64_typ_hashtbl, ptr @i64_typ_offset_tbl, ptr getelementptr (i64, ptr null, i32 1)], [0 x ptr] undef }
@f64_typ_hashtbl = linkonce_odr constant [2 x ptr] [ptr @Object, ptr @f64_typ]
@f64_typ_offset_tbl = linkonce_odr constant [2 x i32] [i32 7, i32 7]
@f64_typ = linkonce_odr constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 -757315540097298781, i64 4611686018427388073, i64 1], [4 x ptr] [ptr @subtype_test, ptr @f64_typ_hashtbl, ptr @f64_typ_offset_tbl, ptr getelementptr (double, ptr null, i32 1)], [0 x ptr] undef }
@nil_typ_hashtbl = linkonce_odr constant [2 x ptr] zeroinitializer
@nil_typ_offset_tbl = linkonce_odr constant [2 x i32] zeroinitializer
@nil_typ = linkonce_odr constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 -5126806859456325683, i64 4611686018427388073, i64 1], [4 x ptr] [ptr @subtype_test, ptr @nil_typ_hashtbl, ptr @nil_typ_offset_tbl, ptr getelementptr ([0 x i8], ptr null, i32 1)], [0 x ptr] undef }
@nothing_typ_hashtbl = linkonce_odr constant [2 x ptr] [ptr @nothing_typ, ptr @Object]
@nothing_typ_offset_tbl = linkonce_odr constant [2 x i32] [i32 7, i32 7]
@nothing_typ = linkonce_odr constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 -3334456163433371378, i64 4611686018427388093, i64 1], [4 x ptr] [ptr @subtype_test, ptr @nothing_typ_hashtbl, ptr @nothing_typ_offset_tbl, ptr getelementptr ([0 x i8], ptr null, i32 1)], [0 x ptr] undef }
@function_typ_hashtbl = linkonce_odr constant [2 x ptr] [ptr @function_typ, ptr @Object]
@function_typ_offset_tbl = linkonce_odr constant [2 x i32] [i32 7, i32 7]
@function_typ = linkonce_odr constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 7927147055246173914, i64 4611686018427388157, i64 1], [4 x ptr] [ptr @subtype_test, ptr @function_typ_hashtbl, ptr @function_typ_offset_tbl, ptr getelementptr ({ ptr }, ptr null, i32 1)], [0 x ptr] undef }
@buffer_typ_hashtbl = linkonce_odr constant [2 x ptr] [ptr @Object, ptr @buffer_typ]
@buffer_typ_offset_tbl = linkonce_odr constant [2 x i32] [i32 7, i32 7]
@buffer_typ = linkonce_odr constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 -318192747195410237, i64 4611686018427388081, i64 1], [4 x ptr] [ptr @subtype_test, ptr @buffer_typ_hashtbl, ptr @buffer_typ_offset_tbl, ptr getelementptr ({ ptr }, ptr null, i32 1)], [0 x ptr] undef }
@tuple_typ_hashtbl = linkonce_odr constant [2 x ptr] [ptr @Object, ptr @tuple_typ]
@tuple_typ_offset_tbl = linkonce_odr constant [2 x i32] [i32 7, i32 7]
@tuple_typ = linkonce_odr constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 3422634369532007740, i64 4611686018427388073, i64 1], [4 x ptr] [ptr @subtype_test, ptr @tuple_typ_hashtbl, ptr @tuple_typ_offset_tbl, ptr getelementptr ({}, ptr null, i32 1)], [0 x ptr] undef }
@union_typ_hashtbl = linkonce_odr constant [2 x ptr] [ptr @union_typ, ptr @Object]
@union_typ_offset_tbl = linkonce_odr constant [2 x i32] [i32 7, i32 7]
@union_typ = linkonce_odr constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 -7543233778997666740, i64 4611686018427388093, i64 1], [4 x ptr] [ptr @subtype_test, ptr @union_typ_hashtbl, ptr @union_typ_offset_tbl, ptr getelementptr ({ ptr, i8 }, ptr null, i32 1)], [0 x ptr] undef }
@Object_hashtbl = linkonce_odr constant [1 x ptr] [ptr @Object]
@Object_offset_tbl = linkonce_odr constant [1 x i32] [i32 7]
@Object = constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 3282773614056351330, i64 4611686018427388073, i64 0], [4 x ptr] [ptr @subtype_test, ptr @Object_hashtbl, ptr @Object_offset_tbl, ptr getelementptr ({}, ptr null, i32 1)], [0 x ptr] undef }
@Iterator_hashtbl = linkonce_odr constant [2 x ptr] [ptr @Object, ptr @Iterator]
@Iterator_offset_tbl = linkonce_odr constant [2 x i32] [i32 7, i32 7]
@Iterator = constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 8673632051301757104, i64 4611686018427388073, i64 1], [4 x ptr] [ptr @subtype_test, ptr @Iterator_hashtbl, ptr @Iterator_offset_tbl, ptr getelementptr ({}, ptr null, i32 1)], [0 x ptr] undef }
@Iterable_hashtbl = linkonce_odr constant [2 x ptr] [ptr @Object, ptr @Iterable]
@Iterable_offset_tbl = linkonce_odr constant [2 x i32] [i32 9, i32 7]
@Iterable = constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 3037712219555723519, i64 4611686018427388073, i64 1], [4 x ptr] [ptr @subtype_test, ptr @Iterable_hashtbl, ptr @Iterable_offset_tbl, ptr getelementptr ({}, ptr null, i32 1)], [0 x ptr] undef }
@Representable_hashtbl = linkonce_odr constant [2 x ptr] [ptr @Object, ptr @Representable]
@Representable_offset_tbl = linkonce_odr constant [2 x i32] [i32 9, i32 7]
@Representable = constant { [3 x i64], [4 x ptr], [2 x ptr] } { [3 x i64] [i64 -7260840641129990118, i64 4611686018427388073, i64 1], [4 x ptr] [ptr @subtype_test, ptr @Representable_hashtbl, ptr @Representable_offset_tbl, ptr getelementptr ({}, ptr null, i32 1)], [2 x ptr] [ptr @Representable_B_repr_, ptr @Representable_repr_] }
@String_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Iterable, ptr @String, ptr @Object, ptr @Representable]
@String_offset_tbl = linkonce_odr constant [4 x i32] [i32 38, i32 7, i32 40, i32 40]
@String = constant { [3 x i64], [4 x ptr], [35 x ptr] } { [3 x i64] [i64 6499063144389013426, i64 4611686018427388273, i64 3], [4 x ptr] [ptr @subtype_test, ptr @String_hashtbl, ptr @String_offset_tbl, ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1)], [35 x ptr] [ptr @String_field_bytes, ptr @String_field_length, ptr @String_field_capacity, ptr @String_B_init_, ptr @String_B_init_bytesBufferPtri8_lengthPtri32_capacityPtri32, ptr @String_B_length_, ptr @String_B_capacity_, ptr @String_B_bytes_, ptr @String_B_append_xPtri8, ptr @String_B_extend_strString, ptr @String_B__index_xPtri32, ptr @String_B__EQ_otherString, ptr @String_B_pop_, ptr @String_B_copy_, ptr @String_B_c_string_, ptr @String_B_iterator_, ptr @String_B_repr_, ptr @String_init_, ptr @String_init_bytesBufferPtri8_lengthPtri32_capacityPtri32, ptr @String_length_, ptr @String_capacity_, ptr @String_bytes_, ptr @String_append_xPtri8, ptr @String_extend_strString, ptr @String__index_xPtri32, ptr @String__EQ_otherString, ptr @String_pop_, ptr @String_copy_, ptr @String_c_string_, ptr @String_iterator_, ptr @String_repr_, ptr @String_B_iterator_, ptr @String_iterator_, ptr @String_B_repr_, ptr @String_repr_] }
@Character_hashtbl = linkonce_odr constant [2 x ptr] [ptr @Object, ptr @Character]
@Character_offset_tbl = linkonce_odr constant [2 x i32] [i32 12, i32 7]
@Character = constant { [3 x i64], [4 x ptr], [5 x ptr] } { [3 x i64] [i64 6681222582356018452, i64 4611686018427388073, i64 1], [4 x ptr] [ptr @subtype_test, ptr @Character_hashtbl, ptr @Character_offset_tbl, ptr getelementptr ({ i8 }, ptr null, i32 1)], [5 x ptr] [ptr @Character_field_byte, ptr @Character_B_byte_, ptr @Character_B_init_bytePtri8, ptr @Character_byte_, ptr @Character_init_bytePtri8] }
@StringIterator_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @Iterator, ptr @StringIterator, ptr null]
@StringIterator_offset_tbl = linkonce_odr constant [4 x i32] [i32 13, i32 13, i32 7, i32 0]
@StringIterator = constant { [3 x i64], [4 x ptr], [6 x ptr] } { [3 x i64] [i64 -7260570988945952630, i64 4611686018427388081, i64 3], [4 x ptr] [ptr @subtype_test, ptr @StringIterator_hashtbl, ptr @StringIterator_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, i32 }, ptr null, i32 1)], [6 x ptr] [ptr @StringIterator_field_str, ptr @StringIterator_field_index, ptr @StringIterator_B_init_strString, ptr @StringIterator_B_next_, ptr @StringIterator_init_strString, ptr @StringIterator_next_] }
@Exception_hashtbl = linkonce_odr constant [2 x ptr] [ptr @Object, ptr @Exception]
@Exception_offset_tbl = linkonce_odr constant [2 x i32] [i32 20, i32 7]
@Exception = constant { [3 x i64], [4 x ptr], [13 x ptr] } { [3 x i64] [i64 9027164862567808692, i64 4611686018427388073, i64 1], [4 x ptr] [ptr @subtype_test, ptr @Exception_hashtbl, ptr @Exception_offset_tbl, ptr getelementptr ({ i32, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr null, i32 1)], [13 x ptr] [ptr @Exception_field_line_number, ptr @Exception_field_file_name, ptr @Exception_field_message, ptr @Exception_B_init_messageString, ptr @Exception_B_init_, ptr @Exception_B_set_info_line_numberPtri32_file_nameString, ptr @Exception_B_report_, ptr @Exception_B_print_message_, ptr @Exception_init_messageString, ptr @Exception_init_, ptr @Exception_set_info_line_numberPtri32_file_nameString, ptr @Exception_report_, ptr @Exception_print_message_] }
@IO_hashtbl = linkonce_odr constant [2 x ptr] [ptr @Object, ptr @IO]
@IO_offset_tbl = linkonce_odr constant [2 x i32] [i32 17, i32 7]
@IO = constant { [3 x i64], [4 x ptr], [10 x ptr] } { [3 x i64] [i64 5359822646784595218, i64 4611686018427388073, i64 1], [4 x ptr] [ptr @subtype_test, ptr @IO_hashtbl, ptr @IO_offset_tbl, ptr getelementptr ({}, ptr null, i32 1)], [10 x ptr] [ptr @IO_B__Self_print_xPtri8__Self_print_xPtri64__Self_print_xPtrf64__Self_print_xNil__Self_print_xString__Self_print_xPtri32__Self_print_xCharacter__Self_print_xPtri1__Self_print_xRepresentable, ptr @IO__Self_print_xPtri8, ptr @IO__Self_print_xPtri64, ptr @IO__Self_print_xPtrf64, ptr @IO__Self_print_xNil, ptr @IO__Self_print_xString, ptr @IO__Self_print_xPtri32, ptr @IO__Self_print_xCharacter, ptr @IO__Self_print_xPtri1, ptr @IO__Self_print_xRepresentable] }
@Blocking_hashtbl = linkonce_odr constant [2 x ptr] [ptr @Blocking, ptr @Object]
@Blocking_offset_tbl = linkonce_odr constant [2 x i32] [i32 7, i32 9]
@Blocking = constant { [3 x i64], [4 x ptr], [2 x ptr] } { [3 x i64] [i64 847773162914674935, i64 4611686018427388093, i64 1], [4 x ptr] [ptr @subtype_test, ptr @Blocking_hashtbl, ptr @Blocking_offset_tbl, ptr getelementptr ({}, ptr null, i32 1)], [2 x ptr] [ptr @Blocking_B_init_, ptr @Blocking_init_] }
@Channel_hashtbl = linkonce_odr constant [2 x ptr] [ptr @Object, ptr @Channel]
@Channel_offset_tbl = linkonce_odr constant [2 x i32] [i32 14, i32 7]
@Channel = constant { [3 x i64], [4 x ptr], [7 x ptr] } { [3 x i64] [i64 -3668118116639750450, i64 4611686018427388073, i64 1], [4 x ptr] [ptr @subtype_test, ptr @Channel_hashtbl, ptr @Channel_offset_tbl, ptr getelementptr ({ { ptr, i32 } }, ptr null, i32 1)], [7 x ptr] [ptr @Channel_field_value, ptr @Channel_B_init_, ptr @Channel_B_get_, ptr @Channel_B_put_new_valuePtri32, ptr @Channel_init_, ptr @Channel_get_, ptr @Channel_put_new_valuePtri32] }
@IntIterator_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @Iterator, ptr null, ptr @IntIterator]
@IntIterator_offset_tbl = linkonce_odr constant [4 x i32] [i32 9, i32 9, i32 0, i32 7]
@IntIterator = constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 -933084275656658555, i64 4611686018427388081, i64 3], [4 x ptr] [ptr @subtype_test, ptr @IntIterator_hashtbl, ptr @IntIterator_offset_tbl, ptr getelementptr ({}, ptr null, i32 1)], [0 x ptr] undef }
@IntIterable_hashtbl = linkonce_odr constant [4 x ptr] [ptr null, ptr @Iterable, ptr @IntIterable, ptr @Object]
@IntIterable_offset_tbl = linkonce_odr constant [4 x i32] [i32 0, i32 29, i32 7, i32 31]
@IntIterable = constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 -7984962120415158575, i64 4611686018427388247, i64 3], [4 x ptr] [ptr @subtype_test, ptr @IntIterable_hashtbl, ptr @IntIterable_offset_tbl, ptr getelementptr ({}, ptr null, i32 1)], [0 x ptr] undef }
@MapIterable_hashtbl = linkonce_odr constant [4 x ptr] [ptr @IntIterable, ptr @MapIterable, ptr @Object, ptr @Iterable]
@MapIterable_offset_tbl = linkonce_odr constant [4 x i32] [i32 33, i32 7, i32 59, i32 57]
@MapIterable = constant { [3 x i64], [4 x ptr], [52 x ptr] } { [3 x i64] [i64 -7488770571603291722, i64 4611686018427388291, i64 3], [4 x ptr] [ptr @subtype_test, ptr @MapIterable_hashtbl, ptr @MapIterable_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr } }, ptr null, i32 1)], [52 x ptr] [ptr @MapIterable_field_iterable, ptr @MapIterable_field_f, ptr @MapIterable_B_init_iterableIntIterable_fFunctionPtri32_to_Ptri32, ptr @MapIterable_B_each_fFunctionPtri32_to_Nothing, ptr @MapIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @MapIterable_B_all_fFunctionPtri32_to_Ptri1, ptr @MapIterable_B_any_fFunctionPtri32_to_Ptri1, ptr @MapIterable_B_map_fFunctionPtri32_to_Ptri32, ptr @MapIterable_B_filter_fFunctionPtri32_to_Ptri1, ptr @MapIterable_B_chain_otherIntIterable, ptr @MapIterable_B_interleave_otherIntIterable, ptr @MapIterable_B_zip_otherIntIterable, ptr @MapIterable_B_product_otherIntIterable, ptr @MapIterable_B_iterator_, ptr @MapIterable_init_iterableIntIterable_fFunctionPtri32_to_Ptri32, ptr @IntIterable_each_fFunctionPtri32_to_Nothing, ptr @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntIterable_all_fFunctionPtri32_to_Ptri1, ptr @IntIterable_any_fFunctionPtri32_to_Ptri1, ptr @IntIterable_map_fFunctionPtri32_to_Ptri32, ptr @IntIterable_filter_fFunctionPtri32_to_Ptri1, ptr @IntIterable_chain_otherIntIterable, ptr @IntIterable_interleave_otherIntIterable, ptr @IntIterable_zip_otherIntIterable, ptr @IntIterable_product_otherIntIterable, ptr @MapIterable_iterator_, ptr @MapIterable_B_each_fFunctionPtri32_to_Nothing, ptr @MapIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @MapIterable_B_all_fFunctionPtri32_to_Ptri1, ptr @MapIterable_B_any_fFunctionPtri32_to_Ptri1, ptr @MapIterable_B_map_fFunctionPtri32_to_Ptri32, ptr @MapIterable_B_filter_fFunctionPtri32_to_Ptri1, ptr @MapIterable_B_chain_otherIntIterable, ptr @MapIterable_B_interleave_otherIntIterable, ptr @MapIterable_B_zip_otherIntIterable, ptr @MapIterable_B_product_otherIntIterable, ptr @MapIterable_B_iterator_, ptr @IntIterable_each_fFunctionPtri32_to_Nothing, ptr @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntIterable_all_fFunctionPtri32_to_Ptri1, ptr @IntIterable_any_fFunctionPtri32_to_Ptri1, ptr @IntIterable_map_fFunctionPtri32_to_Ptri32, ptr @IntIterable_filter_fFunctionPtri32_to_Ptri1, ptr @IntIterable_chain_otherIntIterable, ptr @IntIterable_interleave_otherIntIterable, ptr @IntIterable_zip_otherIntIterable, ptr @IntIterable_product_otherIntIterable, ptr @MapIterable_iterator_, ptr @MapIterable_B_iterator_, ptr @MapIterable_iterator_, ptr @MapIterable_B_iterator_, ptr @MapIterable_iterator_] }
@MapIterator_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @Iterator, ptr @MapIterator, ptr @IntIterator]
@MapIterator_offset_tbl = linkonce_odr constant [4 x i32] [i32 15, i32 15, i32 7, i32 13]
@MapIterator = constant { [3 x i64], [4 x ptr], [8 x ptr] } { [3 x i64] [i64 -146553482626734782, i64 4611686018427388081, i64 3], [4 x ptr] [ptr @subtype_test, ptr @MapIterator_hashtbl, ptr @MapIterator_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr } }, ptr null, i32 1)], [8 x ptr] [ptr @MapIterator_field_iterator, ptr @MapIterator_field_f, ptr @MapIterator_B_init_iteratorIntIterator_fFunctionPtri32_to_Ptri32, ptr @MapIterator_B_next_, ptr @MapIterator_init_iteratorIntIterator_fFunctionPtri32_to_Ptri32, ptr @MapIterator_next_, ptr @MapIterator_B_next_, ptr @MapIterator_next_] }
@FilterIterable_hashtbl = linkonce_odr constant [4 x ptr] [ptr @FilterIterable, ptr @Iterable, ptr @IntIterable, ptr @Object]
@FilterIterable_offset_tbl = linkonce_odr constant [4 x i32] [i32 7, i32 57, i32 33, i32 59]
@FilterIterable = constant { [3 x i64], [4 x ptr], [52 x ptr] } { [3 x i64] [i64 8498466713076104350, i64 4611686018427388247, i64 3], [4 x ptr] [ptr @subtype_test, ptr @FilterIterable_hashtbl, ptr @FilterIterable_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr } }, ptr null, i32 1)], [52 x ptr] [ptr @FilterIterable_field_iterable, ptr @FilterIterable_field_f, ptr @FilterIterable_B_init_iterableIntIterable_fFunctionPtri32_to_Ptri1, ptr @FilterIterable_B_each_fFunctionPtri32_to_Nothing, ptr @FilterIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @FilterIterable_B_all_fFunctionPtri32_to_Ptri1, ptr @FilterIterable_B_any_fFunctionPtri32_to_Ptri1, ptr @FilterIterable_B_map_fFunctionPtri32_to_Ptri32, ptr @FilterIterable_B_filter_fFunctionPtri32_to_Ptri1, ptr @FilterIterable_B_chain_otherIntIterable, ptr @FilterIterable_B_interleave_otherIntIterable, ptr @FilterIterable_B_zip_otherIntIterable, ptr @FilterIterable_B_product_otherIntIterable, ptr @FilterIterable_B_iterator_, ptr @FilterIterable_init_iterableIntIterable_fFunctionPtri32_to_Ptri1, ptr @IntIterable_each_fFunctionPtri32_to_Nothing, ptr @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntIterable_all_fFunctionPtri32_to_Ptri1, ptr @IntIterable_any_fFunctionPtri32_to_Ptri1, ptr @IntIterable_map_fFunctionPtri32_to_Ptri32, ptr @IntIterable_filter_fFunctionPtri32_to_Ptri1, ptr @IntIterable_chain_otherIntIterable, ptr @IntIterable_interleave_otherIntIterable, ptr @IntIterable_zip_otherIntIterable, ptr @IntIterable_product_otherIntIterable, ptr @FilterIterable_iterator_, ptr @FilterIterable_B_each_fFunctionPtri32_to_Nothing, ptr @FilterIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @FilterIterable_B_all_fFunctionPtri32_to_Ptri1, ptr @FilterIterable_B_any_fFunctionPtri32_to_Ptri1, ptr @FilterIterable_B_map_fFunctionPtri32_to_Ptri32, ptr @FilterIterable_B_filter_fFunctionPtri32_to_Ptri1, ptr @FilterIterable_B_chain_otherIntIterable, ptr @FilterIterable_B_interleave_otherIntIterable, ptr @FilterIterable_B_zip_otherIntIterable, ptr @FilterIterable_B_product_otherIntIterable, ptr @FilterIterable_B_iterator_, ptr @IntIterable_each_fFunctionPtri32_to_Nothing, ptr @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntIterable_all_fFunctionPtri32_to_Ptri1, ptr @IntIterable_any_fFunctionPtri32_to_Ptri1, ptr @IntIterable_map_fFunctionPtri32_to_Ptri32, ptr @IntIterable_filter_fFunctionPtri32_to_Ptri1, ptr @IntIterable_chain_otherIntIterable, ptr @IntIterable_interleave_otherIntIterable, ptr @IntIterable_zip_otherIntIterable, ptr @IntIterable_product_otherIntIterable, ptr @FilterIterable_iterator_, ptr @FilterIterable_B_iterator_, ptr @FilterIterable_iterator_, ptr @FilterIterable_B_iterator_, ptr @FilterIterable_iterator_] }
@FilterIterator_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @Iterator, ptr @FilterIterator, ptr @IntIterator]
@FilterIterator_offset_tbl = linkonce_odr constant [4 x i32] [i32 15, i32 15, i32 7, i32 13]
@FilterIterator = constant { [3 x i64], [4 x ptr], [8 x ptr] } { [3 x i64] [i64 -1221365496900303883, i64 4611686018427388081, i64 3], [4 x ptr] [ptr @subtype_test, ptr @FilterIterator_hashtbl, ptr @FilterIterator_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr } }, ptr null, i32 1)], [8 x ptr] [ptr @FilterIterator_field_iterator, ptr @FilterIterator_field_f, ptr @FilterIterator_B_init_iteratorIntIterator_fFunctionPtri32_to_Ptri1, ptr @FilterIterator_B_next_, ptr @FilterIterator_init_iteratorIntIterator_fFunctionPtri32_to_Ptri1, ptr @FilterIterator_next_, ptr @FilterIterator_B_next_, ptr @FilterIterator_next_] }
@ChainIterable_hashtbl = linkonce_odr constant [4 x ptr] [ptr @IntIterable, ptr @ChainIterable, ptr @Object, ptr @Iterable]
@ChainIterable_offset_tbl = linkonce_odr constant [4 x i32] [i32 33, i32 7, i32 59, i32 57]
@ChainIterable = constant { [3 x i64], [4 x ptr], [52 x ptr] } { [3 x i64] [i64 -2370247058431047815, i64 4611686018427388699, i64 3], [4 x ptr] [ptr @subtype_test, ptr @ChainIterable_hashtbl, ptr @ChainIterable_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr null, i32 1)], [52 x ptr] [ptr @ChainIterable_field_first, ptr @ChainIterable_field_second, ptr @ChainIterable_B_init_firstIntIterable_secondIntIterable, ptr @ChainIterable_B_each_fFunctionPtri32_to_Nothing, ptr @ChainIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @ChainIterable_B_all_fFunctionPtri32_to_Ptri1, ptr @ChainIterable_B_any_fFunctionPtri32_to_Ptri1, ptr @ChainIterable_B_map_fFunctionPtri32_to_Ptri32, ptr @ChainIterable_B_filter_fFunctionPtri32_to_Ptri1, ptr @ChainIterable_B_chain_otherIntIterable, ptr @ChainIterable_B_interleave_otherIntIterable, ptr @ChainIterable_B_zip_otherIntIterable, ptr @ChainIterable_B_product_otherIntIterable, ptr @ChainIterable_B_iterator_, ptr @ChainIterable_init_firstIntIterable_secondIntIterable, ptr @IntIterable_each_fFunctionPtri32_to_Nothing, ptr @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntIterable_all_fFunctionPtri32_to_Ptri1, ptr @IntIterable_any_fFunctionPtri32_to_Ptri1, ptr @IntIterable_map_fFunctionPtri32_to_Ptri32, ptr @IntIterable_filter_fFunctionPtri32_to_Ptri1, ptr @IntIterable_chain_otherIntIterable, ptr @IntIterable_interleave_otherIntIterable, ptr @IntIterable_zip_otherIntIterable, ptr @IntIterable_product_otherIntIterable, ptr @ChainIterable_iterator_, ptr @ChainIterable_B_each_fFunctionPtri32_to_Nothing, ptr @ChainIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @ChainIterable_B_all_fFunctionPtri32_to_Ptri1, ptr @ChainIterable_B_any_fFunctionPtri32_to_Ptri1, ptr @ChainIterable_B_map_fFunctionPtri32_to_Ptri32, ptr @ChainIterable_B_filter_fFunctionPtri32_to_Ptri1, ptr @ChainIterable_B_chain_otherIntIterable, ptr @ChainIterable_B_interleave_otherIntIterable, ptr @ChainIterable_B_zip_otherIntIterable, ptr @ChainIterable_B_product_otherIntIterable, ptr @ChainIterable_B_iterator_, ptr @IntIterable_each_fFunctionPtri32_to_Nothing, ptr @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntIterable_all_fFunctionPtri32_to_Ptri1, ptr @IntIterable_any_fFunctionPtri32_to_Ptri1, ptr @IntIterable_map_fFunctionPtri32_to_Ptri32, ptr @IntIterable_filter_fFunctionPtri32_to_Ptri1, ptr @IntIterable_chain_otherIntIterable, ptr @IntIterable_interleave_otherIntIterable, ptr @IntIterable_zip_otherIntIterable, ptr @IntIterable_product_otherIntIterable, ptr @ChainIterable_iterator_, ptr @ChainIterable_B_iterator_, ptr @ChainIterable_iterator_, ptr @ChainIterable_B_iterator_, ptr @ChainIterable_iterator_] }
@ChainIterator_hashtbl = linkonce_odr constant [4 x ptr] [ptr @ChainIterator, ptr @Object, ptr @Iterator, ptr @IntIterator]
@ChainIterator_offset_tbl = linkonce_odr constant [4 x i32] [i32 7, i32 16, i32 16, i32 14]
@ChainIterator = constant { [3 x i64], [4 x ptr], [9 x ptr] } { [3 x i64] [i64 6043157723929225452, i64 4611686018427388787, i64 3], [4 x ptr] [ptr @subtype_test, ptr @ChainIterator_hashtbl, ptr @ChainIterator_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, i1 }, ptr null, i32 1)], [9 x ptr] [ptr @ChainIterator_field_first, ptr @ChainIterator_field_second, ptr @ChainIterator_field_on_first, ptr @ChainIterator_B_init_firstIntIterator_secondIntIterator, ptr @ChainIterator_B_next_, ptr @ChainIterator_init_firstIntIterator_secondIntIterator, ptr @ChainIterator_next_, ptr @ChainIterator_B_next_, ptr @ChainIterator_next_] }
@InterleaveIterable_hashtbl = linkonce_odr constant [4 x ptr] [ptr @InterleaveIterable, ptr @Iterable, ptr @IntIterable, ptr @Object]
@InterleaveIterable_offset_tbl = linkonce_odr constant [4 x i32] [i32 7, i32 57, i32 33, i32 59]
@InterleaveIterable = constant { [3 x i64], [4 x ptr], [52 x ptr] } { [3 x i64] [i64 4936782714255954462, i64 4611686018427388247, i64 3], [4 x ptr] [ptr @subtype_test, ptr @InterleaveIterable_hashtbl, ptr @InterleaveIterable_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr null, i32 1)], [52 x ptr] [ptr @InterleaveIterable_field_first, ptr @InterleaveIterable_field_second, ptr @InterleaveIterable_B_init_firstIntIterable_secondIntIterable, ptr @InterleaveIterable_B_each_fFunctionPtri32_to_Nothing, ptr @InterleaveIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @InterleaveIterable_B_all_fFunctionPtri32_to_Ptri1, ptr @InterleaveIterable_B_any_fFunctionPtri32_to_Ptri1, ptr @InterleaveIterable_B_map_fFunctionPtri32_to_Ptri32, ptr @InterleaveIterable_B_filter_fFunctionPtri32_to_Ptri1, ptr @InterleaveIterable_B_chain_otherIntIterable, ptr @InterleaveIterable_B_interleave_otherIntIterable, ptr @InterleaveIterable_B_zip_otherIntIterable, ptr @InterleaveIterable_B_product_otherIntIterable, ptr @InterleaveIterable_B_iterator_, ptr @InterleaveIterable_init_firstIntIterable_secondIntIterable, ptr @IntIterable_each_fFunctionPtri32_to_Nothing, ptr @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntIterable_all_fFunctionPtri32_to_Ptri1, ptr @IntIterable_any_fFunctionPtri32_to_Ptri1, ptr @IntIterable_map_fFunctionPtri32_to_Ptri32, ptr @IntIterable_filter_fFunctionPtri32_to_Ptri1, ptr @IntIterable_chain_otherIntIterable, ptr @IntIterable_interleave_otherIntIterable, ptr @IntIterable_zip_otherIntIterable, ptr @IntIterable_product_otherIntIterable, ptr @InterleaveIterable_iterator_, ptr @InterleaveIterable_B_each_fFunctionPtri32_to_Nothing, ptr @InterleaveIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @InterleaveIterable_B_all_fFunctionPtri32_to_Ptri1, ptr @InterleaveIterable_B_any_fFunctionPtri32_to_Ptri1, ptr @InterleaveIterable_B_map_fFunctionPtri32_to_Ptri32, ptr @InterleaveIterable_B_filter_fFunctionPtri32_to_Ptri1, ptr @InterleaveIterable_B_chain_otherIntIterable, ptr @InterleaveIterable_B_interleave_otherIntIterable, ptr @InterleaveIterable_B_zip_otherIntIterable, ptr @InterleaveIterable_B_product_otherIntIterable, ptr @InterleaveIterable_B_iterator_, ptr @IntIterable_each_fFunctionPtri32_to_Nothing, ptr @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntIterable_all_fFunctionPtri32_to_Ptri1, ptr @IntIterable_any_fFunctionPtri32_to_Ptri1, ptr @IntIterable_map_fFunctionPtri32_to_Ptri32, ptr @IntIterable_filter_fFunctionPtri32_to_Ptri1, ptr @IntIterable_chain_otherIntIterable, ptr @IntIterable_interleave_otherIntIterable, ptr @IntIterable_zip_otherIntIterable, ptr @IntIterable_product_otherIntIterable, ptr @InterleaveIterable_iterator_, ptr @InterleaveIterable_B_iterator_, ptr @InterleaveIterable_iterator_, ptr @InterleaveIterable_B_iterator_, ptr @InterleaveIterable_iterator_] }
@InterleaveIterator_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Iterator, ptr @IntIterator, ptr @Object, ptr @InterleaveIterator]
@InterleaveIterator_offset_tbl = linkonce_odr constant [4 x i32] [i32 16, i32 14, i32 16, i32 7]
@InterleaveIterator = constant { [3 x i64], [4 x ptr], [9 x ptr] } { [3 x i64] [i64 -3924664358248524505, i64 4611686018427388513, i64 3], [4 x ptr] [ptr @subtype_test, ptr @InterleaveIterator_hashtbl, ptr @InterleaveIterator_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, i1 }, ptr null, i32 1)], [9 x ptr] [ptr @InterleaveIterator_field_first, ptr @InterleaveIterator_field_second, ptr @InterleaveIterator_field_on_first, ptr @InterleaveIterator_B_init_firstIntIterator_secondIntIterator, ptr @InterleaveIterator_B_next_, ptr @InterleaveIterator_init_firstIntIterator_secondIntIterator, ptr @InterleaveIterator_next_, ptr @InterleaveIterator_B_next_, ptr @InterleaveIterator_next_] }
@IntTupleIterable_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr null, ptr @IntTupleIterable, ptr @Iterable]
@IntTupleIterable_offset_tbl = linkonce_odr constant [4 x i32] [i32 11, i32 0, i32 7, i32 9]
@IntTupleIterable = constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 1135628454346210518, i64 4611686018427388073, i64 3], [4 x ptr] [ptr @subtype_test, ptr @IntTupleIterable_hashtbl, ptr @IntTupleIterable_offset_tbl, ptr getelementptr ({}, ptr null, i32 1)], [0 x ptr] undef }
@IntTupleIterator_hashtbl = linkonce_odr constant [4 x ptr] [ptr null, ptr @Iterator, ptr @IntTupleIterator, ptr @Object]
@IntTupleIterator_offset_tbl = linkonce_odr constant [4 x i32] [i32 0, i32 9, i32 7, i32 9]
@IntTupleIterator = constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 8926924731480624460, i64 4611686018427388093, i64 3], [4 x ptr] [ptr @subtype_test, ptr @IntTupleIterator_hashtbl, ptr @IntTupleIterator_offset_tbl, ptr getelementptr ({}, ptr null, i32 1)], [0 x ptr] undef }
@ZipIterable_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @ZipIterable, ptr @IntTupleIterable, ptr @Iterable]
@ZipIterable_offset_tbl = linkonce_odr constant [4 x i32] [i32 19, i32 7, i32 13, i32 17]
@ZipIterable = constant { [3 x i64], [4 x ptr], [12 x ptr] } { [3 x i64] [i64 35232740166152944, i64 4611686018427388073, i64 3], [4 x ptr] [ptr @subtype_test, ptr @ZipIterable_hashtbl, ptr @ZipIterable_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr null, i32 1)], [12 x ptr] [ptr @ZipIterable_field_first, ptr @ZipIterable_field_second, ptr @ZipIterable_B_init_firstIntIterable_secondIntIterable, ptr @ZipIterable_B_iterator_, ptr @ZipIterable_init_firstIntIterable_secondIntIterable, ptr @ZipIterable_iterator_, ptr @ZipIterable_B_iterator_, ptr @ZipIterable_iterator_, ptr @ZipIterable_B_iterator_, ptr @ZipIterable_iterator_, ptr @ZipIterable_B_iterator_, ptr @ZipIterable_iterator_] }
@ZipIterator_hashtbl = linkonce_odr constant [4 x ptr] [ptr @ZipIterator, ptr @Object, ptr @IntTupleIterator, ptr @Iterator]
@ZipIterator_offset_tbl = linkonce_odr constant [4 x i32] [i32 7, i32 15, i32 13, i32 15]
@ZipIterator = constant { [3 x i64], [4 x ptr], [8 x ptr] } { [3 x i64] [i64 -2141114445739585318, i64 4611686018427388097, i64 3], [4 x ptr] [ptr @subtype_test, ptr @ZipIterator_hashtbl, ptr @ZipIterator_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr null, i32 1)], [8 x ptr] [ptr @ZipIterator_field_first, ptr @ZipIterator_field_second, ptr @ZipIterator_B_init_firstIntIterator_secondIntIterator, ptr @ZipIterator_B_next_, ptr @ZipIterator_init_firstIntIterator_secondIntIterator, ptr @ZipIterator_next_, ptr @ZipIterator_B_next_, ptr @ZipIterator_next_] }
@ProductIterable_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @ProductIterable, ptr @IntTupleIterable, ptr @Iterable]
@ProductIterable_offset_tbl = linkonce_odr constant [4 x i32] [i32 19, i32 7, i32 13, i32 17]
@ProductIterable = constant { [3 x i64], [4 x ptr], [12 x ptr] } { [3 x i64] [i64 4128338911757318636, i64 4611686018427388073, i64 3], [4 x ptr] [ptr @subtype_test, ptr @ProductIterable_hashtbl, ptr @ProductIterable_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr null, i32 1)], [12 x ptr] [ptr @ProductIterable_field_first, ptr @ProductIterable_field_second, ptr @ProductIterable_B_init_firstIntIterable_secondIntIterable, ptr @ProductIterable_B_iterator_, ptr @ProductIterable_init_firstIntIterable_secondIntIterable, ptr @ProductIterable_iterator_, ptr @ProductIterable_B_iterator_, ptr @ProductIterable_iterator_, ptr @ProductIterable_B_iterator_, ptr @ProductIterable_iterator_, ptr @ProductIterable_B_iterator_, ptr @ProductIterable_iterator_] }
@ProductIterator_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr null, ptr @ProductIterator, ptr @Iterator]
@ProductIterator_offset_tbl = linkonce_odr constant [4 x i32] [i32 15, i32 0, i32 7, i32 15]
@ProductIterator = constant { [3 x i64], [4 x ptr], [8 x ptr] } { [3 x i64] [i64 1697250377212095568, i64 4611686018427388073, i64 3], [4 x ptr] [ptr @subtype_test, ptr @ProductIterator_hashtbl, ptr @ProductIterator_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, i32 } }, ptr null, i32 1)], [8 x ptr] [ptr @ProductIterator_field_first_iterator, ptr @ProductIterator_field_second_iterator, ptr @ProductIterator_field_second_iterable, ptr @ProductIterator_field_current_first, ptr @ProductIterator_B_init_first_iterableIntIterable_second_iterableIntIterable, ptr @ProductIterator_B_next_, ptr @ProductIterator_init_first_iterableIntIterable_second_iterableIntIterable, ptr @ProductIterator_next_] }
@Range_hashtbl = linkonce_odr constant [4 x ptr] [ptr @IntIterable, ptr @Range, ptr @Object, ptr @Iterable]
@Range_offset_tbl = linkonce_odr constant [4 x i32] [i32 38, i32 7, i32 64, i32 62]
@Range = constant { [3 x i64], [4 x ptr], [57 x ptr] } { [3 x i64] [i64 5490049236840671069, i64 4611686018427388291, i64 3], [4 x ptr] [ptr @subtype_test, ptr @Range_hashtbl, ptr @Range_offset_tbl, ptr getelementptr ({ i32, i32, i32 }, ptr null, i32 1)], [57 x ptr] [ptr @Range_field_start, ptr @Range_field_end, ptr @Range_field_step, ptr @Range_B_init_endPtri32, ptr @Range_B_init_startPtri32_endPtri32, ptr @Range_B_step_stepPtri32, ptr @Range_B_each_fFunctionPtri32_to_Nothing, ptr @Range_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @Range_B_all_fFunctionPtri32_to_Ptri1, ptr @Range_B_any_fFunctionPtri32_to_Ptri1, ptr @Range_B_map_fFunctionPtri32_to_Ptri32, ptr @Range_B_filter_fFunctionPtri32_to_Ptri1, ptr @Range_B_chain_otherIntIterable, ptr @Range_B_interleave_otherIntIterable, ptr @Range_B_zip_otherIntIterable, ptr @Range_B_product_otherIntIterable, ptr @Range_B_iterator_, ptr @Range_init_endPtri32, ptr @Range_init_startPtri32_endPtri32, ptr @Range_step_stepPtri32, ptr @IntIterable_each_fFunctionPtri32_to_Nothing, ptr @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntIterable_all_fFunctionPtri32_to_Ptri1, ptr @IntIterable_any_fFunctionPtri32_to_Ptri1, ptr @IntIterable_map_fFunctionPtri32_to_Ptri32, ptr @IntIterable_filter_fFunctionPtri32_to_Ptri1, ptr @IntIterable_chain_otherIntIterable, ptr @IntIterable_interleave_otherIntIterable, ptr @IntIterable_zip_otherIntIterable, ptr @IntIterable_product_otherIntIterable, ptr @Range_iterator_, ptr @Range_B_each_fFunctionPtri32_to_Nothing, ptr @Range_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @Range_B_all_fFunctionPtri32_to_Ptri1, ptr @Range_B_any_fFunctionPtri32_to_Ptri1, ptr @Range_B_map_fFunctionPtri32_to_Ptri32, ptr @Range_B_filter_fFunctionPtri32_to_Ptri1, ptr @Range_B_chain_otherIntIterable, ptr @Range_B_interleave_otherIntIterable, ptr @Range_B_zip_otherIntIterable, ptr @Range_B_product_otherIntIterable, ptr @Range_B_iterator_, ptr @IntIterable_each_fFunctionPtri32_to_Nothing, ptr @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntIterable_all_fFunctionPtri32_to_Ptri1, ptr @IntIterable_any_fFunctionPtri32_to_Ptri1, ptr @IntIterable_map_fFunctionPtri32_to_Ptri32, ptr @IntIterable_filter_fFunctionPtri32_to_Ptri1, ptr @IntIterable_chain_otherIntIterable, ptr @IntIterable_interleave_otherIntIterable, ptr @IntIterable_zip_otherIntIterable, ptr @IntIterable_product_otherIntIterable, ptr @Range_iterator_, ptr @Range_B_iterator_, ptr @Range_iterator_, ptr @Range_B_iterator_, ptr @Range_iterator_] }
@RangeIterator_hashtbl = linkonce_odr constant [4 x ptr] [ptr @IntIterator, ptr @Object, ptr @Iterator, ptr @RangeIterator]
@RangeIterator_offset_tbl = linkonce_odr constant [4 x i32] [i32 14, i32 16, i32 16, i32 7]
@RangeIterator = constant { [3 x i64], [4 x ptr], [9 x ptr] } { [3 x i64] [i64 -913562485944406675, i64 4611686018427388157, i64 3], [4 x ptr] [ptr @subtype_test, ptr @RangeIterator_hashtbl, ptr @RangeIterator_offset_tbl, ptr getelementptr ({ i32, i32, i32 }, ptr null, i32 1)], [9 x ptr] [ptr @RangeIterator_field_counter, ptr @RangeIterator_field_end, ptr @RangeIterator_field_step, ptr @RangeIterator_B_init_counterPtri32_endPtri32_stepPtri32, ptr @RangeIterator_B_next_, ptr @RangeIterator_init_counterPtri32_endPtri32_stepPtri32, ptr @RangeIterator_next_, ptr @RangeIterator_B_next_, ptr @RangeIterator_next_] }
@OutOfBoundsDetails_hashtbl = linkonce_odr constant [2 x ptr] [ptr @Object, ptr @OutOfBoundsDetails]
@OutOfBoundsDetails_offset_tbl = linkonce_odr constant [2 x i32] [i32 13, i32 7]
@OutOfBoundsDetails = constant { [3 x i64], [4 x ptr], [6 x ptr] } { [3 x i64] [i64 4650630525701360429, i64 4611686018427388091, i64 1], [4 x ptr] [ptr @subtype_test, ptr @OutOfBoundsDetails_hashtbl, ptr @OutOfBoundsDetails_offset_tbl, ptr getelementptr ({ i32, i32 }, ptr null, i32 1)], [6 x ptr] [ptr @OutOfBoundsDetails_field_bounds, ptr @OutOfBoundsDetails_field_index, ptr @OutOfBoundsDetails_B_init_boundsPtri32_indexPtri32, ptr @OutOfBoundsDetails_B_report_, ptr @OutOfBoundsDetails_init_boundsPtri32_indexPtri32, ptr @OutOfBoundsDetails_report_] }
@OutOfBounds_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr null, ptr @OutOfBounds, ptr @Exception]
@OutOfBounds_offset_tbl = linkonce_odr constant [4 x i32] [i32 36, i32 0, i32 7, i32 23]
@OutOfBounds = constant { [3 x i64], [4 x ptr], [29 x ptr] } { [3 x i64] [i64 5348403617834207535, i64 4611686018427388073, i64 3], [4 x ptr] [ptr @subtype_test, ptr @OutOfBounds_hashtbl, ptr @OutOfBounds_offset_tbl, ptr getelementptr ({ { ptr, i160 }, i32, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr null, i32 1)], [29 x ptr] [ptr @OutOfBounds_field_details, ptr @OutOfBounds_field_line_number, ptr @OutOfBounds_field_file_name, ptr @OutOfBounds_field_message, ptr @OutOfBounds_B_init_boundsPtri32_indexPtri32, ptr @OutOfBounds_B_init_messageString, ptr @OutOfBounds_B_init_, ptr @OutOfBounds_B_set_info_line_numberPtri32_file_nameString, ptr @OutOfBounds_B_report_, ptr @OutOfBounds_B_print_message_, ptr @OutOfBounds_init_boundsPtri32_indexPtri32, ptr @Exception_init_messageString, ptr @Exception_init_, ptr @Exception_set_info_line_numberPtri32_file_nameString, ptr @Exception_report_, ptr @OutOfBounds_print_message_, ptr @OutOfBounds_field_line_number, ptr @OutOfBounds_field_file_name, ptr @OutOfBounds_field_message, ptr @OutOfBounds_B_init_messageString, ptr @OutOfBounds_B_init_, ptr @OutOfBounds_B_set_info_line_numberPtri32_file_nameString, ptr @OutOfBounds_B_report_, ptr @OutOfBounds_B_print_message_, ptr @Exception_init_messageString, ptr @Exception_init_, ptr @Exception_set_info_line_numberPtri32_file_nameString, ptr @Exception_report_, ptr @OutOfBounds_print_message_] }
@IntArray_hashtbl = linkonce_odr constant [8 x ptr] [ptr @Representable, ptr @Iterable, ptr null, ptr null, ptr null, ptr @IntIterable, ptr @IntArray, ptr @Object]
@IntArray_offset_tbl = linkonce_odr constant [8 x i32] [i32 82, i32 80, i32 0, i32 0, i32 0, i32 56, i32 7, i32 82]
@IntArray = constant { [3 x i64], [4 x ptr], [77 x ptr] } { [3 x i64] [i64 7629948565578263212, i64 4611686018427388093, i64 7], [4 x ptr] [ptr @subtype_test, ptr @IntArray_hashtbl, ptr @IntArray_offset_tbl, ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1)], [77 x ptr] [ptr @IntArray_field_buffer, ptr @IntArray_field_length, ptr @IntArray_field_capacity, ptr @IntArray_B__Self_from_iterable_iterableIntIterable, ptr @IntArray_B_init_, ptr @IntArray_B_init_bufferBufferPtri32_lengthPtri32_capacityPtri32, ptr @IntArray_B_length_, ptr @IntArray_B_capacity_, ptr @IntArray_B_buffer_, ptr @IntArray_B_append_xPtri32, ptr @IntArray_B_extend_aryIntArray, ptr @IntArray_B__index_xPtri32, ptr @IntArray_B_pop_, ptr @IntArray_B_copy_, ptr @IntArray_B_each_fFunctionPtri32_to_Nothing, ptr @IntArray_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntArray_B_all_fFunctionPtri32_to_Ptri1, ptr @IntArray_B_any_fFunctionPtri32_to_Ptri1, ptr @IntArray_B_map_fFunctionPtri32_to_Ptri32, ptr @IntArray_B_filter_fFunctionPtri32_to_Ptri1, ptr @IntArray_B_chain_otherIntIterable, ptr @IntArray_B_interleave_otherIntIterable, ptr @IntArray_B_zip_otherIntIterable, ptr @IntArray_B_product_otherIntIterable, ptr @IntArray_B_iterator_, ptr @IntArray_B_repr_, ptr @IntArray__Self_from_iterable_iterableIntIterable, ptr @IntArray_init_, ptr @IntArray_init_bufferBufferPtri32_lengthPtri32_capacityPtri32, ptr @IntArray_length_, ptr @IntArray_capacity_, ptr @IntArray_buffer_, ptr @IntArray_append_xPtri32, ptr @IntArray_extend_aryIntArray, ptr @IntArray__index_xPtri32, ptr @IntArray_pop_, ptr @IntArray_copy_, ptr @IntIterable_each_fFunctionPtri32_to_Nothing, ptr @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntIterable_all_fFunctionPtri32_to_Ptri1, ptr @IntIterable_any_fFunctionPtri32_to_Ptri1, ptr @IntArray_map_fFunctionPtri32_to_Ptri32, ptr @IntIterable_filter_fFunctionPtri32_to_Ptri1, ptr @IntIterable_chain_otherIntIterable, ptr @IntIterable_interleave_otherIntIterable, ptr @IntIterable_zip_otherIntIterable, ptr @IntIterable_product_otherIntIterable, ptr @IntArray_iterator_, ptr @Representable_repr_, ptr @IntArray_B_each_fFunctionPtri32_to_Nothing, ptr @IntArray_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntArray_B_all_fFunctionPtri32_to_Ptri1, ptr @IntArray_B_any_fFunctionPtri32_to_Ptri1, ptr @IntArray_B_map_fFunctionPtri32_to_Ptri32, ptr @IntArray_B_filter_fFunctionPtri32_to_Ptri1, ptr @IntArray_B_chain_otherIntIterable, ptr @IntArray_B_interleave_otherIntIterable, ptr @IntArray_B_zip_otherIntIterable, ptr @IntArray_B_product_otherIntIterable, ptr @IntArray_B_iterator_, ptr @IntIterable_each_fFunctionPtri32_to_Nothing, ptr @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntIterable_all_fFunctionPtri32_to_Ptri1, ptr @IntIterable_any_fFunctionPtri32_to_Ptri1, ptr @IntArray_map_fFunctionPtri32_to_Ptri32, ptr @IntIterable_filter_fFunctionPtri32_to_Ptri1, ptr @IntIterable_chain_otherIntIterable, ptr @IntIterable_interleave_otherIntIterable, ptr @IntIterable_zip_otherIntIterable, ptr @IntIterable_product_otherIntIterable, ptr @IntArray_iterator_, ptr @IntArray_B_iterator_, ptr @IntArray_iterator_, ptr @IntArray_B_iterator_, ptr @IntArray_iterator_, ptr @IntArray_B_repr_, ptr @Representable_repr_] }
@IntArrayIterator_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @IntArrayIterator, ptr @IntIterator, ptr @Iterator]
@IntArrayIterator_offset_tbl = linkonce_odr constant [4 x i32] [i32 15, i32 7, i32 13, i32 15]
@IntArrayIterator = constant { [3 x i64], [4 x ptr], [8 x ptr] } { [3 x i64] [i64 5577199879563532693, i64 4611686018427388091, i64 3], [4 x ptr] [ptr @subtype_test, ptr @IntArrayIterator_hashtbl, ptr @IntArrayIterator_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, i32 }, ptr null, i32 1)], [8 x ptr] [ptr @IntArrayIterator_field_array, ptr @IntArrayIterator_field_index, ptr @IntArrayIterator_B_init_arrayIntArray, ptr @IntArrayIterator_B_next_, ptr @IntArrayIterator_init_arrayIntArray, ptr @IntArrayIterator_next_, ptr @IntArrayIterator_B_next_, ptr @IntArrayIterator_next_] }
@Pair_hashtbl = linkonce_odr constant [2 x ptr] [ptr @Object, ptr @Pair]
@Pair_offset_tbl = linkonce_odr constant [2 x i32] [i32 17, i32 7]
@Pair = constant { [3 x i64], [4 x ptr], [10 x ptr] } { [3 x i64] [i64 9197944775169318296, i64 4611686018427388073, i64 1], [4 x ptr] [ptr @subtype_test, ptr @Pair_hashtbl, ptr @Pair_offset_tbl, ptr getelementptr ({ { ptr, i160 }, { ptr, i160 }, ptr, ptr }, ptr null, i32 1)], [10 x ptr] [ptr @Pair_field_first, ptr @Pair_field_second, ptr @Pair_field_Pair_0, ptr @Pair_field_Pair_1, ptr @Pair_B_init_firstT_secondU, ptr @Pair_B_first_, ptr @Pair_B_second_, ptr @Pair_init_firstT_secondU, ptr @Pair_first_, ptr @Pair_second_] }
@Iterator2_hashtbl = linkonce_odr constant [2 x ptr] [ptr @Iterator2, ptr @Object]
@Iterator2_offset_tbl = linkonce_odr constant [2 x i32] [i32 7, i32 10]
@Iterator2 = constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 4189192806087951739, i64 4611686018427388207, i64 1], [4 x ptr] [ptr @subtype_test, ptr @Iterator2_hashtbl, ptr @Iterator2_offset_tbl, ptr getelementptr ({ ptr }, ptr null, i32 1)], [0 x ptr] undef }
@Iterable2_hashtbl = linkonce_odr constant [2 x ptr] [ptr @Object, ptr @Iterable2]
@Iterable2_offset_tbl = linkonce_odr constant [2 x i32] [i32 30, i32 7]
@Iterable2 = constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 5693646204635713916, i64 4611686018427388073, i64 1], [4 x ptr] [ptr @subtype_test, ptr @Iterable2_hashtbl, ptr @Iterable2_offset_tbl, ptr getelementptr ({ ptr }, ptr null, i32 1)], [0 x ptr] undef }
@Array_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @Iterable2, ptr null, ptr @Array]
@Array_offset_tbl = linkonce_odr constant [4 x i32] [i32 76, i32 53, i32 0, i32 7]
@Array = constant { [3 x i64], [4 x ptr], [69 x ptr] } { [3 x i64] [i64 -5261542750394134544, i64 4611686018427388073, i64 3], [4 x ptr] [ptr @subtype_test, ptr @Array_hashtbl, ptr @Array_offset_tbl, ptr getelementptr ({ { ptr }, i32, i32, ptr }, ptr null, i32 1)], [69 x ptr] [ptr @Array_field_buffer, ptr @Array_field_length, ptr @Array_field_capacity, ptr @Array_field_Array_0, ptr @Array_B__Self_from_iterable_iterableIterable2T, ptr @Array_B_init_, ptr @Array_B_init_capacityPtri32, ptr @Array_B_length_, ptr @Array_B_capacity_, ptr @Array_B_append_xT, ptr @Array_B_grow_, ptr @Array_B__index_xPtri32, ptr @Array_B_throw_oob_xPtri32, ptr @Array_B_unsafe_index_xPtri32, ptr @Array_B_iterator_, ptr @Array_B_each_fFunctionT_to_Nothing, ptr @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Array_B_all_fFunctionT_to_Ptri1, ptr @Array_B_any_fFunctionT_to_Ptri1, ptr @Array_B_map_fFunctionT_to_U, ptr @Array_B_filter_fFunctionT_to_Ptri1, ptr @Array_B_chain_otherIterable2T, ptr @Array_B_interleave_otherIterable2T, ptr @Array_B_zip_otherIterable2U, ptr @Array_B_product_otherIterable2U, ptr @Array__Self_from_iterable_iterableIterable2T, ptr @Array_init_, ptr @Array_init_capacityPtri32, ptr @Array_length_, ptr @Array_capacity_, ptr @Array_append_xT, ptr @Array_grow_, ptr @Array__index_xPtri32, ptr @Array_throw_oob_xPtri32, ptr @Array_unsafe_index_xPtri32, ptr @Array_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U, ptr @Array_field_Array_0, ptr @Array_B_iterator_, ptr @Array_B_each_fFunctionT_to_Nothing, ptr @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Array_B_all_fFunctionT_to_Ptri1, ptr @Array_B_any_fFunctionT_to_Ptri1, ptr @Array_B_map_fFunctionT_to_U, ptr @Array_B_filter_fFunctionT_to_Ptri1, ptr @Array_B_chain_otherIterable2T, ptr @Array_B_interleave_otherIterable2T, ptr @Array_B_zip_otherIterable2U, ptr @Array_B_product_otherIterable2U, ptr @Array_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U] }
@ArrayIterator_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr null, ptr @Iterator2, ptr @ArrayIterator]
@ArrayIterator_offset_tbl = linkonce_odr constant [4 x i32] [i32 17, i32 0, i32 14, i32 7]
@ArrayIterator = constant { [3 x i64], [4 x ptr], [10 x ptr] } { [3 x i64] [i64 3447345754186651411, i64 4611686018427388073, i64 3], [4 x ptr] [ptr @subtype_test, ptr @ArrayIterator_hashtbl, ptr @ArrayIterator_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, i32, ptr }, ptr null, i32 1)], [10 x ptr] [ptr @ArrayIterator_field_array, ptr @ArrayIterator_field_index, ptr @ArrayIterator_field_ArrayIterator_0, ptr @ArrayIterator_B_init_arrayArrayT, ptr @ArrayIterator_B_next_, ptr @ArrayIterator_init_arrayArrayT, ptr @ArrayIterator_next_, ptr @ArrayIterator_field_ArrayIterator_0, ptr @ArrayIterator_B_next_, ptr @ArrayIterator_next_] }
@MapIterable2_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @Iterable2, ptr @MapIterable2, ptr null]
@MapIterable2_offset_tbl = linkonce_odr constant [4 x i32] [i32 58, i32 35, i32 7, i32 0]
@MapIterable2 = constant { [3 x i64], [4 x ptr], [51 x ptr] } { [3 x i64] [i64 -1724859134596891929, i64 4611686018427388081, i64 3], [4 x ptr] [ptr @subtype_test, ptr @MapIterable2_hashtbl, ptr @MapIterable2_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr }, ptr, ptr }, ptr null, i32 1)], [51 x ptr] [ptr @MapIterable2_field_iterable, ptr @MapIterable2_field_f, ptr @MapIterable2_field_MapIterable2_0, ptr @MapIterable2_field_MapIterable2_1, ptr @MapIterable2_B_init_iterableIterable2T_fFunctionT_to_U, ptr @MapIterable2_B_iterator_, ptr @MapIterable2_B_each_fFunctionT_to_Nothing, ptr @MapIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @MapIterable2_B_all_fFunctionT_to_Ptri1, ptr @MapIterable2_B_any_fFunctionT_to_Ptri1, ptr @MapIterable2_B_map_fFunctionT_to_U, ptr @MapIterable2_B_filter_fFunctionT_to_Ptri1, ptr @MapIterable2_B_chain_otherIterable2T, ptr @MapIterable2_B_interleave_otherIterable2T, ptr @MapIterable2_B_zip_otherIterable2U, ptr @MapIterable2_B_product_otherIterable2U, ptr @MapIterable2_init_iterableIterable2T_fFunctionT_to_U, ptr @MapIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U, ptr @MapIterable2_field_MapIterable2_1, ptr @MapIterable2_B_iterator_, ptr @MapIterable2_B_each_fFunctionT_to_Nothing, ptr @MapIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @MapIterable2_B_all_fFunctionT_to_Ptri1, ptr @MapIterable2_B_any_fFunctionT_to_Ptri1, ptr @MapIterable2_B_map_fFunctionT_to_U, ptr @MapIterable2_B_filter_fFunctionT_to_Ptri1, ptr @MapIterable2_B_chain_otherIterable2T, ptr @MapIterable2_B_interleave_otherIterable2T, ptr @MapIterable2_B_zip_otherIterable2U, ptr @MapIterable2_B_product_otherIterable2U, ptr @MapIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U] }
@MapIterator2_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @MapIterator2, ptr @Iterator2, ptr null]
@MapIterator2_offset_tbl = linkonce_odr constant [4 x i32] [i32 18, i32 7, i32 15, i32 0]
@MapIterator2 = constant { [3 x i64], [4 x ptr], [11 x ptr] } { [3 x i64] [i64 -10255947709272500, i64 4611686018427388081, i64 3], [4 x ptr] [ptr @subtype_test, ptr @MapIterator2_hashtbl, ptr @MapIterator2_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr }, ptr, ptr }, ptr null, i32 1)], [11 x ptr] [ptr @MapIterator2_field_iterator, ptr @MapIterator2_field_f, ptr @MapIterator2_field_MapIterator2_0, ptr @MapIterator2_field_MapIterator2_1, ptr @MapIterator2_B_init_iteratorIterator2T_fFunctionT_to_U, ptr @MapIterator2_B_next_, ptr @MapIterator2_init_iteratorIterator2T_fFunctionT_to_U, ptr @MapIterator2_next_, ptr @MapIterator2_field_MapIterator2_1, ptr @MapIterator2_B_next_, ptr @MapIterator2_next_] }
@FilterIterable2_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @Iterable2, ptr @FilterIterable2, ptr null]
@FilterIterable2_offset_tbl = linkonce_odr constant [4 x i32] [i32 57, i32 34, i32 7, i32 0]
@FilterIterable2 = constant { [3 x i64], [4 x ptr], [50 x ptr] } { [3 x i64] [i64 1178467452958968374, i64 4611686018427388081, i64 3], [4 x ptr] [ptr @subtype_test, ptr @FilterIterable2_hashtbl, ptr @FilterIterable2_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr }, ptr }, ptr null, i32 1)], [50 x ptr] [ptr @FilterIterable2_field_iterable, ptr @FilterIterable2_field_f, ptr @FilterIterable2_field_FilterIterable2_0, ptr @FilterIterable2_B_init_iterableIterable2T_fFunctionT_to_Ptri1, ptr @FilterIterable2_B_iterator_, ptr @FilterIterable2_B_each_fFunctionT_to_Nothing, ptr @FilterIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @FilterIterable2_B_all_fFunctionT_to_Ptri1, ptr @FilterIterable2_B_any_fFunctionT_to_Ptri1, ptr @FilterIterable2_B_map_fFunctionT_to_U, ptr @FilterIterable2_B_filter_fFunctionT_to_Ptri1, ptr @FilterIterable2_B_chain_otherIterable2T, ptr @FilterIterable2_B_interleave_otherIterable2T, ptr @FilterIterable2_B_zip_otherIterable2U, ptr @FilterIterable2_B_product_otherIterable2U, ptr @FilterIterable2_init_iterableIterable2T_fFunctionT_to_Ptri1, ptr @FilterIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U, ptr @FilterIterable2_field_FilterIterable2_0, ptr @FilterIterable2_B_iterator_, ptr @FilterIterable2_B_each_fFunctionT_to_Nothing, ptr @FilterIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @FilterIterable2_B_all_fFunctionT_to_Ptri1, ptr @FilterIterable2_B_any_fFunctionT_to_Ptri1, ptr @FilterIterable2_B_map_fFunctionT_to_U, ptr @FilterIterable2_B_filter_fFunctionT_to_Ptri1, ptr @FilterIterable2_B_chain_otherIterable2T, ptr @FilterIterable2_B_interleave_otherIterable2T, ptr @FilterIterable2_B_zip_otherIterable2U, ptr @FilterIterable2_B_product_otherIterable2U, ptr @FilterIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U] }
@FilterIterator2_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr null, ptr @Iterator2, ptr @FilterIterator2]
@FilterIterator2_offset_tbl = linkonce_odr constant [4 x i32] [i32 17, i32 0, i32 14, i32 7]
@FilterIterator2 = constant { [3 x i64], [4 x ptr], [10 x ptr] } { [3 x i64] [i64 8213847504843366470, i64 4611686018427388073, i64 3], [4 x ptr] [ptr @subtype_test, ptr @FilterIterator2_hashtbl, ptr @FilterIterator2_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr }, ptr }, ptr null, i32 1)], [10 x ptr] [ptr @FilterIterator2_field_iterator, ptr @FilterIterator2_field_f, ptr @FilterIterator2_field_FilterIterator2_0, ptr @FilterIterator2_B_init_iteratorIterator2T_fFunctionT_to_Ptri1, ptr @FilterIterator2_B_next_, ptr @FilterIterator2_init_iteratorIterator2T_fFunctionT_to_Ptri1, ptr @FilterIterator2_next_, ptr @FilterIterator2_field_FilterIterator2_0, ptr @FilterIterator2_B_next_, ptr @FilterIterator2_next_] }
@ChainIterable2_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @Iterable2, ptr @ChainIterable2, ptr null]
@ChainIterable2_offset_tbl = linkonce_odr constant [4 x i32] [i32 57, i32 34, i32 7, i32 0]
@ChainIterable2 = constant { [3 x i64], [4 x ptr], [50 x ptr] } { [3 x i64] [i64 -5233298072945030060, i64 4611686018427388073, i64 3], [4 x ptr] [ptr @subtype_test, ptr @ChainIterable2_hashtbl, ptr @ChainIterable2_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, ptr }, ptr null, i32 1)], [50 x ptr] [ptr @ChainIterable2_field_first, ptr @ChainIterable2_field_second, ptr @ChainIterable2_field_ChainIterable2_0, ptr @ChainIterable2_B_init_firstIterable2T_secondIterable2T, ptr @ChainIterable2_B_iterator_, ptr @ChainIterable2_B_each_fFunctionT_to_Nothing, ptr @ChainIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ChainIterable2_B_all_fFunctionT_to_Ptri1, ptr @ChainIterable2_B_any_fFunctionT_to_Ptri1, ptr @ChainIterable2_B_map_fFunctionT_to_U, ptr @ChainIterable2_B_filter_fFunctionT_to_Ptri1, ptr @ChainIterable2_B_chain_otherIterable2T, ptr @ChainIterable2_B_interleave_otherIterable2T, ptr @ChainIterable2_B_zip_otherIterable2U, ptr @ChainIterable2_B_product_otherIterable2U, ptr @ChainIterable2_init_firstIterable2T_secondIterable2T, ptr @ChainIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U, ptr @ChainIterable2_field_ChainIterable2_0, ptr @ChainIterable2_B_iterator_, ptr @ChainIterable2_B_each_fFunctionT_to_Nothing, ptr @ChainIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ChainIterable2_B_all_fFunctionT_to_Ptri1, ptr @ChainIterable2_B_any_fFunctionT_to_Ptri1, ptr @ChainIterable2_B_map_fFunctionT_to_U, ptr @ChainIterable2_B_filter_fFunctionT_to_Ptri1, ptr @ChainIterable2_B_chain_otherIterable2T, ptr @ChainIterable2_B_interleave_otherIterable2T, ptr @ChainIterable2_B_zip_otherIterable2U, ptr @ChainIterable2_B_product_otherIterable2U, ptr @ChainIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U] }
@ChainIterator2_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr null, ptr @Iterator2, ptr @ChainIterator2]
@ChainIterator2_offset_tbl = linkonce_odr constant [4 x i32] [i32 18, i32 0, i32 15, i32 7]
@ChainIterator2 = constant { [3 x i64], [4 x ptr], [11 x ptr] } { [3 x i64] [i64 -228267985060461774, i64 4611686018427388073, i64 3], [4 x ptr] [ptr @subtype_test, ptr @ChainIterator2_hashtbl, ptr @ChainIterator2_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, i1, ptr }, ptr null, i32 1)], [11 x ptr] [ptr @ChainIterator2_field_first, ptr @ChainIterator2_field_second, ptr @ChainIterator2_field_on_first, ptr @ChainIterator2_field_ChainIterator2_0, ptr @ChainIterator2_B_init_firstIterator2T_secondIterator2T, ptr @ChainIterator2_B_next_, ptr @ChainIterator2_init_firstIterator2T_secondIterator2T, ptr @ChainIterator2_next_, ptr @ChainIterator2_field_ChainIterator2_0, ptr @ChainIterator2_B_next_, ptr @ChainIterator2_next_] }
@InterleaveIterable2_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Iterable2, ptr @InterleaveIterable2, ptr null, ptr @Object]
@InterleaveIterable2_offset_tbl = linkonce_odr constant [4 x i32] [i32 34, i32 7, i32 0, i32 57]
@InterleaveIterable2 = constant { [3 x i64], [4 x ptr], [50 x ptr] } { [3 x i64] [i64 -6258231685215461775, i64 4611686018427388093, i64 3], [4 x ptr] [ptr @subtype_test, ptr @InterleaveIterable2_hashtbl, ptr @InterleaveIterable2_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, ptr }, ptr null, i32 1)], [50 x ptr] [ptr @InterleaveIterable2_field_first, ptr @InterleaveIterable2_field_second, ptr @InterleaveIterable2_field_InterleaveIterable2_0, ptr @InterleaveIterable2_B_init_firstIterable2T_secondIterable2T, ptr @InterleaveIterable2_B_iterator_, ptr @InterleaveIterable2_B_each_fFunctionT_to_Nothing, ptr @InterleaveIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @InterleaveIterable2_B_all_fFunctionT_to_Ptri1, ptr @InterleaveIterable2_B_any_fFunctionT_to_Ptri1, ptr @InterleaveIterable2_B_map_fFunctionT_to_U, ptr @InterleaveIterable2_B_filter_fFunctionT_to_Ptri1, ptr @InterleaveIterable2_B_chain_otherIterable2T, ptr @InterleaveIterable2_B_interleave_otherIterable2T, ptr @InterleaveIterable2_B_zip_otherIterable2U, ptr @InterleaveIterable2_B_product_otherIterable2U, ptr @InterleaveIterable2_init_firstIterable2T_secondIterable2T, ptr @InterleaveIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U, ptr @InterleaveIterable2_field_InterleaveIterable2_0, ptr @InterleaveIterable2_B_iterator_, ptr @InterleaveIterable2_B_each_fFunctionT_to_Nothing, ptr @InterleaveIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @InterleaveIterable2_B_all_fFunctionT_to_Ptri1, ptr @InterleaveIterable2_B_any_fFunctionT_to_Ptri1, ptr @InterleaveIterable2_B_map_fFunctionT_to_U, ptr @InterleaveIterable2_B_filter_fFunctionT_to_Ptri1, ptr @InterleaveIterable2_B_chain_otherIterable2T, ptr @InterleaveIterable2_B_interleave_otherIterable2T, ptr @InterleaveIterable2_B_zip_otherIterable2U, ptr @InterleaveIterable2_B_product_otherIterable2U, ptr @InterleaveIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U] }
@InterleaveIterator2_hashtbl = linkonce_odr constant [4 x ptr] [ptr null, ptr @Object, ptr @InterleaveIterator2, ptr @Iterator2]
@InterleaveIterator2_offset_tbl = linkonce_odr constant [4 x i32] [i32 0, i32 18, i32 7, i32 15]
@InterleaveIterator2 = constant { [3 x i64], [4 x ptr], [11 x ptr] } { [3 x i64] [i64 6709847746581360093, i64 4611686018427388097, i64 3], [4 x ptr] [ptr @subtype_test, ptr @InterleaveIterator2_hashtbl, ptr @InterleaveIterator2_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, i1, ptr }, ptr null, i32 1)], [11 x ptr] [ptr @InterleaveIterator2_field_first, ptr @InterleaveIterator2_field_second, ptr @InterleaveIterator2_field_on_first, ptr @InterleaveIterator2_field_InterleaveIterator2_0, ptr @InterleaveIterator2_B_init_firstIterator2T_secondIterator2T, ptr @InterleaveIterator2_B_next_, ptr @InterleaveIterator2_init_firstIterator2T_secondIterator2T, ptr @InterleaveIterator2_next_, ptr @InterleaveIterator2_field_InterleaveIterator2_0, ptr @InterleaveIterator2_B_next_, ptr @InterleaveIterator2_next_] }
@ZipIterable2_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @Iterable2, ptr @ZipIterable2, ptr null]
@ZipIterable2_offset_tbl = linkonce_odr constant [4 x i32] [i32 59, i32 36, i32 7, i32 0]
@ZipIterable2 = constant { [3 x i64], [4 x ptr], [52 x ptr] } { [3 x i64] [i64 -3218950579047519815, i64 4611686018427388081, i64 3], [4 x ptr] [ptr @subtype_test, ptr @ZipIterable2_hashtbl, ptr @ZipIterable2_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, ptr, ptr, ptr }, ptr null, i32 1)], [52 x ptr] [ptr @ZipIterable2_field_first, ptr @ZipIterable2_field_second, ptr @ZipIterable2_field_ZipIterable2_0, ptr @ZipIterable2_field_ZipIterable2_1, ptr @ZipIterable2_field_ZipIterable2_2, ptr @ZipIterable2_B_init_firstIterable2T_secondIterable2U, ptr @ZipIterable2_B_iterator_, ptr @ZipIterable2_B_each_fFunctionT_to_Nothing, ptr @ZipIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ZipIterable2_B_all_fFunctionT_to_Ptri1, ptr @ZipIterable2_B_any_fFunctionT_to_Ptri1, ptr @ZipIterable2_B_map_fFunctionT_to_U, ptr @ZipIterable2_B_filter_fFunctionT_to_Ptri1, ptr @ZipIterable2_B_chain_otherIterable2T, ptr @ZipIterable2_B_interleave_otherIterable2T, ptr @ZipIterable2_B_zip_otherIterable2U, ptr @ZipIterable2_B_product_otherIterable2U, ptr @ZipIterable2_init_firstIterable2T_secondIterable2U, ptr @ZipIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U, ptr @ZipIterable2_field_ZipIterable2_2, ptr @ZipIterable2_B_iterator_, ptr @ZipIterable2_B_each_fFunctionT_to_Nothing, ptr @ZipIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ZipIterable2_B_all_fFunctionT_to_Ptri1, ptr @ZipIterable2_B_any_fFunctionT_to_Ptri1, ptr @ZipIterable2_B_map_fFunctionT_to_U, ptr @ZipIterable2_B_filter_fFunctionT_to_Ptri1, ptr @ZipIterable2_B_chain_otherIterable2T, ptr @ZipIterable2_B_interleave_otherIterable2T, ptr @ZipIterable2_B_zip_otherIterable2U, ptr @ZipIterable2_B_product_otherIterable2U, ptr @ZipIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U] }
@ZipIterator2_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr null, ptr @Iterator2, ptr @ZipIterator2]
@ZipIterator2_offset_tbl = linkonce_odr constant [4 x i32] [i32 19, i32 0, i32 16, i32 7]
@ZipIterator2 = constant { [3 x i64], [4 x ptr], [12 x ptr] } { [3 x i64] [i64 5502728639611621286, i64 4611686018427388073, i64 3], [4 x ptr] [ptr @subtype_test, ptr @ZipIterator2_hashtbl, ptr @ZipIterator2_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, ptr, ptr, ptr }, ptr null, i32 1)], [12 x ptr] [ptr @ZipIterator2_field_first, ptr @ZipIterator2_field_second, ptr @ZipIterator2_field_ZipIterator2_0, ptr @ZipIterator2_field_ZipIterator2_1, ptr @ZipIterator2_field_ZipIterator2_2, ptr @ZipIterator2_B_init_firstIterator2T_secondIterator2U, ptr @ZipIterator2_B_next_, ptr @ZipIterator2_init_firstIterator2T_secondIterator2U, ptr @ZipIterator2_next_, ptr @ZipIterator2_field_ZipIterator2_2, ptr @ZipIterator2_B_next_, ptr @ZipIterator2_next_] }
@ProductIterable2_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @Iterable2, ptr @ProductIterable2, ptr null]
@ProductIterable2_offset_tbl = linkonce_odr constant [4 x i32] [i32 59, i32 36, i32 7, i32 0]
@ProductIterable2 = constant { [3 x i64], [4 x ptr], [52 x ptr] } { [3 x i64] [i64 7827074759551300494, i64 4611686018427388081, i64 3], [4 x ptr] [ptr @subtype_test, ptr @ProductIterable2_hashtbl, ptr @ProductIterable2_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, ptr, ptr, ptr }, ptr null, i32 1)], [52 x ptr] [ptr @ProductIterable2_field_first, ptr @ProductIterable2_field_second, ptr @ProductIterable2_field_ProductIterable2_0, ptr @ProductIterable2_field_ProductIterable2_1, ptr @ProductIterable2_field_ProductIterable2_2, ptr @ProductIterable2_B_init_firstIterable2T_secondIterable2U, ptr @ProductIterable2_B_iterator_, ptr @ProductIterable2_B_each_fFunctionT_to_Nothing, ptr @ProductIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ProductIterable2_B_all_fFunctionT_to_Ptri1, ptr @ProductIterable2_B_any_fFunctionT_to_Ptri1, ptr @ProductIterable2_B_map_fFunctionT_to_U, ptr @ProductIterable2_B_filter_fFunctionT_to_Ptri1, ptr @ProductIterable2_B_chain_otherIterable2T, ptr @ProductIterable2_B_interleave_otherIterable2T, ptr @ProductIterable2_B_zip_otherIterable2U, ptr @ProductIterable2_B_product_otherIterable2U, ptr @ProductIterable2_init_firstIterable2T_secondIterable2U, ptr @ProductIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U, ptr @ProductIterable2_field_ProductIterable2_2, ptr @ProductIterable2_B_iterator_, ptr @ProductIterable2_B_each_fFunctionT_to_Nothing, ptr @ProductIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ProductIterable2_B_all_fFunctionT_to_Ptri1, ptr @ProductIterable2_B_any_fFunctionT_to_Ptri1, ptr @ProductIterable2_B_map_fFunctionT_to_U, ptr @ProductIterable2_B_filter_fFunctionT_to_Ptri1, ptr @ProductIterable2_B_chain_otherIterable2T, ptr @ProductIterable2_B_interleave_otherIterable2T, ptr @ProductIterable2_B_zip_otherIterable2U, ptr @ProductIterable2_B_product_otherIterable2U, ptr @ProductIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U] }
@ProductIterator2_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr null, ptr @Iterator2, ptr @ProductIterator2]
@ProductIterator2_offset_tbl = linkonce_odr constant [4 x i32] [i32 21, i32 0, i32 18, i32 7]
@ProductIterator2 = constant { [3 x i64], [4 x ptr], [14 x ptr] } { [3 x i64] [i64 4440657219728359865, i64 4611686018427388073, i64 3], [4 x ptr] [ptr @subtype_test, ptr @ProductIterator2_hashtbl, ptr @ProductIterator2_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, i160 }, ptr, ptr, ptr }, ptr null, i32 1)], [14 x ptr] [ptr @ProductIterator2_field_first_iterator, ptr @ProductIterator2_field_second_iterator, ptr @ProductIterator2_field_second_iterable, ptr @ProductIterator2_field_current_first, ptr @ProductIterator2_field_ProductIterator2_0, ptr @ProductIterator2_field_ProductIterator2_1, ptr @ProductIterator2_field_ProductIterator2_2, ptr @ProductIterator2_B_init_first_iterableIterable2T_second_iterableIterable2U, ptr @ProductIterator2_B_next_, ptr @ProductIterator2_init_first_iterableIterable2T_second_iterableIterable2U, ptr @ProductIterator2_next_, ptr @ProductIterator2_field_ProductIterator2_2, ptr @ProductIterator2_B_next_, ptr @ProductIterator2_next_] }
@Math_hashtbl = linkonce_odr constant [2 x ptr] [ptr @Object, ptr @Math]
@Math_offset_tbl = linkonce_odr constant [2 x i32] [i32 24, i32 7]
@Math = constant { [3 x i64], [4 x ptr], [17 x ptr] } { [3 x i64] [i64 8094150130346788308, i64 4611686018427388091, i64 1], [4 x ptr] [ptr @subtype_test, ptr @Math_hashtbl, ptr @Math_offset_tbl, ptr getelementptr ({}, ptr null, i32 1)], [17 x ptr] [ptr @Math_B__Self_sqrt_xPtrf64, ptr @Math_B__Self_abs_xPtri32__Self_abs_xPtrf64, ptr @Math_B__Self_max_aPtri32_bPtri32__Self_max_aPtrf64_bPtrf64, ptr @Math_B__Self_min_aPtri32_bPtri32__Self_min_aPtrf64_bPtrf64, ptr @Math_B__Self_round_xPtrf64, ptr @Math_B__Self_floor_xPtrf64, ptr @Math_B__Self_ceiling_xPtrf64, ptr @Math__Self_sqrt_xPtrf64, ptr @Math__Self_abs_xPtri32, ptr @Math__Self_abs_xPtrf64, ptr @Math__Self_max_aPtri32_bPtri32, ptr @Math__Self_max_aPtrf64_bPtrf64, ptr @Math__Self_min_aPtri32_bPtri32, ptr @Math__Self_min_aPtrf64_bPtrf64, ptr @Math__Self_round_xPtrf64, ptr @Math__Self_floor_xPtrf64, ptr @Math__Self_ceiling_xPtrf64] }
@Integer_hashtbl = linkonce_odr constant [2 x ptr] [ptr @Object, ptr @Integer]
@Integer_offset_tbl = linkonce_odr constant [2 x i32] [i32 20, i32 7]
@Integer = constant { [3 x i64], [4 x ptr], [13 x ptr] } { [3 x i64] [i64 -735147942809078232, i64 4611686018427388081, i64 1], [4 x ptr] [ptr @subtype_test, ptr @Integer_hashtbl, ptr @Integer_offset_tbl, ptr getelementptr ({ i32 }, ptr null, i32 1)], [13 x ptr] [ptr @Integer_field_value, ptr @Integer_B_init_valuePtri32, ptr @Integer_B__ADD_otherPtri32, ptr @Integer_B__SUB_otherPtri32, ptr @Integer_B__MUL_otherPtri32, ptr @Integer_B__DIV_otherPtri32, ptr @Integer_B_print_, ptr @Integer_init_valuePtri32, ptr @Integer__ADD_otherPtri32, ptr @Integer__SUB_otherPtri32, ptr @Integer__MUL_otherPtri32, ptr @Integer__DIV_otherPtri32, ptr @Integer_print_] }
@BigBoy_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @BigBoy, ptr null, ptr @Representable]
@BigBoy_offset_tbl = linkonce_odr constant [4 x i32] [i32 13, i32 7, i32 0, i32 11]
@BigBoy = constant { [3 x i64], [4 x ptr], [6 x ptr] } { [3 x i64] [i64 3069357308562348185, i64 4611686018427388073, i64 3], [4 x ptr] [ptr @subtype_test, ptr @BigBoy_hashtbl, ptr @BigBoy_offset_tbl, ptr getelementptr ({}, ptr null, i32 1)], [6 x ptr] [ptr @BigBoy_B_introduce_, ptr @BigBoy_B_repr_, ptr @BigBoy_introduce_, ptr @Representable_repr_, ptr @BigBoy_B_repr_, ptr @Representable_repr_] }
@Integer2_hashtbl = linkonce_odr constant [8 x ptr] [ptr @Integer, ptr null, ptr null, ptr @Representable, ptr @Object, ptr @BigBoy, ptr null, ptr @Integer2]
@Integer2_offset_tbl = linkonce_odr constant [8 x i32] [i32 26, i32 0, i32 0, i32 45, i32 39, i32 39, i32 0, i32 7]
@Integer2 = constant { [3 x i64], [4 x ptr], [40 x ptr] } { [3 x i64] [i64 1844024195090879880, i64 4611686018427388073, i64 7], [4 x ptr] [ptr @subtype_test, ptr @Integer2_hashtbl, ptr @Integer2_offset_tbl, ptr getelementptr ({ i32 }, ptr null, i32 1)], [40 x ptr] [ptr @Integer2_field_value, ptr @Integer2_B_value_, ptr @Integer2_B_init_valuePtri32, ptr @Integer2_B__ADD_otherPtri32, ptr @Integer2_B__SUB_otherPtri32, ptr @Integer2_B__MUL_otherPtri32, ptr @Integer2_B__DIV_otherPtri32, ptr @Integer2_B_print_, ptr @Integer2_B_introduce_, ptr @Integer2_B_repr_, ptr @Integer2_value_, ptr @Integer_init_valuePtri32, ptr @Integer__ADD_otherPtri32, ptr @Integer__SUB_otherPtri32, ptr @Integer__MUL_otherPtri32, ptr @Integer__DIV_otherPtri32, ptr @Integer_print_, ptr @BigBoy_introduce_, ptr @Integer2_repr_, ptr @Integer2_field_value, ptr @Integer2_B_init_valuePtri32, ptr @Integer2_B__ADD_otherPtri32, ptr @Integer2_B__SUB_otherPtri32, ptr @Integer2_B__MUL_otherPtri32, ptr @Integer2_B__DIV_otherPtri32, ptr @Integer2_B_print_, ptr @Integer_init_valuePtri32, ptr @Integer__ADD_otherPtri32, ptr @Integer__SUB_otherPtri32, ptr @Integer__MUL_otherPtri32, ptr @Integer__DIV_otherPtri32, ptr @Integer_print_, ptr @Integer2_B_introduce_, ptr @Integer2_B_repr_, ptr @BigBoy_introduce_, ptr @Integer2_repr_, ptr @Integer2_B_repr_, ptr @Integer2_repr_, ptr @Integer2_B_repr_, ptr @Integer2_repr_] }
@Animal_hashtbl = linkonce_odr constant [2 x ptr] [ptr @Object, ptr @Animal]
@Animal_offset_tbl = linkonce_odr constant [2 x i32] [i32 20, i32 7]
@Animal = constant { [3 x i64], [4 x ptr], [13 x ptr] } { [3 x i64] [i64 1075018126824711487, i64 4611686018427388073, i64 1], [4 x ptr] [ptr @subtype_test, ptr @Animal_hashtbl, ptr @Animal_offset_tbl, ptr getelementptr ({ i32, double, i32 }, ptr null, i32 1)], [13 x ptr] [ptr @Animal_field_age, ptr @Animal_field_hp, ptr @Animal_field_skill, ptr @Animal_B_init_agePtri32_hpPtrf64_skillPtri32, ptr @Animal_B_say_age_, ptr @Animal_B_say_skill_, ptr @Animal_B_say_messagePtri32, ptr @Animal_B_do_nothing_, ptr @Animal_init_agePtri32_hpPtrf64_skillPtri32, ptr @Animal_say_age_, ptr @Animal_say_skill_, ptr @Animal_say_messagePtri32, ptr @Animal_do_nothing_] }
@Beaver_hashtbl = linkonce_odr constant [2 x ptr] [ptr @Object, ptr @Beaver]
@Beaver_offset_tbl = linkonce_odr constant [2 x i32] [i32 15, i32 7]
@Beaver = constant { [3 x i64], [4 x ptr], [8 x ptr] } { [3 x i64] [i64 -6124772949900838462, i64 4611686018427388073, i64 1], [4 x ptr] [ptr @subtype_test, ptr @Beaver_hashtbl, ptr @Beaver_offset_tbl, ptr getelementptr ({ i32, double }, ptr null, i32 1)], [8 x ptr] [ptr @Beaver_field_color, ptr @Beaver_field_name, ptr @Beaver_B_init_colorPtri32_namePtrf64, ptr @Beaver_B__ADD_xPtri32, ptr @Beaver_B_say_color_, ptr @Beaver_init_colorPtri32_namePtrf64, ptr @Beaver__ADD_xPtri32, ptr @Beaver_say_color_] }
@ListNode_hashtbl = linkonce_odr constant [2 x ptr] [ptr @Object, ptr @ListNode]
@ListNode_offset_tbl = linkonce_odr constant [2 x i32] [i32 19, i32 7]
@ListNode = constant { [3 x i64], [4 x ptr], [12 x ptr] } { [3 x i64] [i64 -1756024950533091476, i64 4611686018427388073, i64 1], [4 x ptr] [ptr @subtype_test, ptr @ListNode_hashtbl, ptr @ListNode_offset_tbl, ptr getelementptr ({ i32, { ptr, i160 } }, ptr null, i32 1)], [12 x ptr] [ptr @ListNode_field_data, ptr @ListNode_field_next, ptr @ListNode_B_init_dataPtri32, ptr @ListNode_B_push_nextListNode, ptr @ListNode_B_next_, ptr @ListNode_B_data_, ptr @ListNode_B_iterator_, ptr @ListNode_init_dataPtri32, ptr @ListNode_push_nextListNode, ptr @ListNode_next_, ptr @ListNode_data_, ptr @ListNode_iterator_] }
@ListIterator_hashtbl = linkonce_odr constant [2 x ptr] [ptr @Object, ptr @ListIterator]
@ListIterator_offset_tbl = linkonce_odr constant [2 x i32] [i32 12, i32 7]
@ListIterator = constant { [3 x i64], [4 x ptr], [5 x ptr] } { [3 x i64] [i64 -5838699946612561379, i64 4611686018427388073, i64 1], [4 x ptr] [ptr @subtype_test, ptr @ListIterator_hashtbl, ptr @ListIterator_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 } }, ptr null, i32 1)], [5 x ptr] [ptr @ListIterator_field_node, ptr @ListIterator_B_init_nodeListNode, ptr @ListIterator_B_next_, ptr @ListIterator_init_nodeListNode, ptr @ListIterator_next_] }
@Bard_hashtbl = linkonce_odr constant [2 x ptr] [ptr @Bard, ptr @Object]
@Bard_offset_tbl = linkonce_odr constant [2 x i32] [i32 7, i32 14]
@Bard = constant { [3 x i64], [4 x ptr], [7 x ptr] } { [3 x i64] [i64 -7979915337087193093, i64 4611686018427388093, i64 1], [4 x ptr] [ptr @subtype_test, ptr @Bard_hashtbl, ptr @Bard_offset_tbl, ptr getelementptr ({}, ptr null, i32 1)], [7 x ptr] [ptr @Bard_B_init_, ptr @Bard_B_take_aPtri32_bPtrf64_take_aPtri32_bPtri32_take_aPtrf64_bPtrf64_take_aAnimal_bBeaver, ptr @Bard_init_, ptr @Bard_take_aPtri32_bPtrf64, ptr @Bard_take_aPtri32_bPtri32, ptr @Bard_take_aPtrf64_bPtrf64, ptr @Bard_take_aAnimal_bBeaver] }
@string_string.5 = internal constant [4 x i8] c"%s\0A\00"
@exception_message = internal constant [45 x i8] c"Error: uncaught exception. Program aborted.\0A\00"
@into_caller_buf = internal thread_local global [3 x ptr] zeroinitializer
@current_coroutine = internal thread_local global ptr null
@always_one = linkonce thread_local global i1 true

define ptr @Representable_B_repr_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [2 x ptr], ptr %4, i32 0, i32 1
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define { ptr, ptr, ptr, i32 } @Representable_repr_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Representable)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = call ptr @malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 7) to i64))
  %21 = alloca ptr, align 8
  store ptr %20, ptr %21, align 8
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %34 = load i32, ptr %32, align 4
  store i32 %34, ptr %33, align 4
  %35 = call ptr @llvm.invariant.start.p0(i64 16, ptr %22)
  %36 = load ptr, ptr %22, align 8
  %37 = getelementptr i8, ptr %36, i64 0
  %38 = load i48, ptr @clshj_Object, align 4
  store i48 %38, ptr %37, align 4
  %39 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 1
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 3
  store ptr @String, ptr %40, align 8
  store ptr %39, ptr %41, align 8
  store i32 7, ptr %42, align 4
  %43 = call ptr @llvm.invariant.start.p0(i64 16, ptr %40)
  %44 = getelementptr { ptr }, ptr %22, i32 0, i32 0
  %45 = load ptr, ptr %44, align 8
  %46 = insertvalue { ptr } undef, ptr %45, 0
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 0
  %48 = load ptr, ptr %47, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %48, 0
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } %49, ptr %51, 1
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 2
  %54 = load ptr, ptr %53, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %54, 2
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 3
  %57 = load i32, ptr %56, align 4
  %58 = insertvalue { ptr, ptr, ptr, i32 } %55, i32 %57, 3
  %59 = alloca [3 x ptr], align 8
  %60 = call ptr @llvm.invariant.start.p0(i64 24, ptr %59)
  %61 = getelementptr [3 x ptr], ptr %59, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %61, align 8
  %62 = getelementptr [3 x ptr], ptr %59, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %62, align 8
  %63 = getelementptr [3 x ptr], ptr %59, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %63, align 8
  %64 = call ptr @llvm.invariant.start.p0(i64 280, ptr %48)
  %65 = getelementptr ptr, ptr %48, i32 %57
  %66 = getelementptr ptr, ptr %65, i32 4
  %67 = load ptr, ptr %66, align 8
  %68 = alloca [3 x ptr], align 8
  %69 = getelementptr [3 x ptr], ptr %68, i32 0, i32 0
  store ptr @buffer_typ, ptr %69, align 8
  %70 = getelementptr [3 x ptr], ptr %68, i32 0, i32 1
  store ptr @i32_typ, ptr %70, align 8
  %71 = getelementptr [3 x ptr], ptr %68, i32 0, i32 2
  store ptr @i32_typ, ptr %71, align 8
  %72 = call ptr %67({ ptr, ptr, ptr, i32 } %58, ptr %68, { ptr } %46, i32 6, i32 7)
  call void %72({ ptr, ptr, ptr, i32 } %58, { ptr, ptr, ptr, i32 } %58, ptr %59, { ptr } %46, i32 6, i32 7)
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 0
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %76 = load ptr, ptr %74, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 1
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %79 = load ptr, ptr %77, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 2
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %82 = load ptr, ptr %80, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 3
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %85 = load i32, ptr %83, align 4
  store i32 %85, ptr %84, align 4
  call void @set_offset(ptr %73, ptr @String)
  %86 = call ptr @llvm.invariant.start.p0(i64 24, ptr %73)
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %88 = load ptr, ptr %87, align 8
  %89 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %88, 0
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } %89, ptr %91, 1
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %94 = load ptr, ptr %93, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %94, 2
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %97 = load i32, ptr %96, align 4
  %98 = insertvalue { ptr, ptr, ptr, i32 } %95, i32 %97, 3
  ret { ptr, ptr, ptr, i32 } %98
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare ptr @llvm.invariant.start.p0(i64 immarg, ptr nocapture) #0

declare ptr @malloc(i64)

define ptr @String_field_bytes(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr }, i32, i32 }, ptr %0, i32 0, i32 0
  ret ptr %2
}

define ptr @String_field_length(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr }, i32, i32 }, ptr %0, i32 0, i32 1
  ret ptr %2
}

define ptr @String_field_capacity(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr }, i32, i32 }, ptr %0, i32 0, i32 2
  ret ptr %2
}

define ptr @String_B_init_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [35 x ptr], ptr %4, i32 0, i32 17
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @String_B_init_bytesBufferPtri8_lengthPtri32_capacityPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2, i32 %3, i32 %4) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %6 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1)
  %7 = getelementptr [3 x ptr], ptr %1, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr ptr, ptr %8, i32 1
  %10 = getelementptr ptr, ptr %8, i32 2
  %11 = getelementptr ptr, ptr %8, i32 3
  %12 = getelementptr ptr, ptr %8, i32 4
  %13 = load i64, ptr %9, align 4
  %14 = load i64, ptr %10, align 4
  %15 = load ptr, ptr %11, align 8
  %16 = load ptr, ptr %12, align 8
  %17 = call i1 @subtype_test_wrapper(ptr %15, i64 %14, i64 %13, i64 -318192747195410237, i64 ptrtoint (ptr @buffer_typ to i64), ptr %16)
  %18 = getelementptr [3 x ptr], ptr %1, i32 0, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr ptr, ptr %19, i32 1
  %21 = getelementptr ptr, ptr %19, i32 2
  %22 = getelementptr ptr, ptr %19, i32 3
  %23 = getelementptr ptr, ptr %19, i32 4
  %24 = load i64, ptr %20, align 4
  %25 = load i64, ptr %21, align 4
  %26 = load ptr, ptr %22, align 8
  %27 = load ptr, ptr %23, align 8
  %28 = call i1 @subtype_test_wrapper(ptr %26, i64 %25, i64 %24, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %27)
  %29 = getelementptr [3 x ptr], ptr %1, i32 0, i32 2
  %30 = load ptr, ptr %29, align 8
  %31 = getelementptr ptr, ptr %30, i32 1
  %32 = getelementptr ptr, ptr %30, i32 2
  %33 = getelementptr ptr, ptr %30, i32 3
  %34 = getelementptr ptr, ptr %30, i32 4
  %35 = load i64, ptr %31, align 4
  %36 = load i64, ptr %32, align 4
  %37 = load ptr, ptr %33, align 8
  %38 = load ptr, ptr %34, align 8
  %39 = call i1 @subtype_test_wrapper(ptr %37, i64 %36, i64 %35, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %38)
  %40 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %41 = getelementptr [35 x ptr], ptr %40, i32 0, i32 18
  %42 = getelementptr ptr, ptr %41, i32 7
  %43 = load ptr, ptr %42, align 8
  ret ptr %43
}

define ptr @String_B_length_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [35 x ptr], ptr %4, i32 0, i32 19
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @String_B_capacity_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [35 x ptr], ptr %4, i32 0, i32 20
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @String_B_bytes_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [35 x ptr], ptr %4, i32 0, i32 21
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @String_B_append_xPtri8({ ptr, ptr, ptr, i32 } %0, ptr %1, i8 %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 2582149688529881115, i64 ptrtoint (ptr @i8_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [35 x ptr], ptr %16, i32 0, i32 22
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @String_B_extend_strString({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [35 x ptr], ptr %16, i32 0, i32 23
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @String_B__index_xPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1, i32 %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [35 x ptr], ptr %16, i32 0, i32 24
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @String_B__EQ_otherString({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [35 x ptr], ptr %16, i32 0, i32 25
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @String_B_pop_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [35 x ptr], ptr %4, i32 0, i32 26
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @String_B_copy_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [35 x ptr], ptr %4, i32 0, i32 27
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @String_B_c_string_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [35 x ptr], ptr %4, i32 0, i32 28
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @String_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [35 x ptr], ptr %4, i32 0, i32 29
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @String_B_repr_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [35 x ptr], ptr %4, i32 0, i32 30
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @String_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @String)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = call ptr @malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64))
  %21 = alloca ptr, align 8
  store ptr %20, ptr %21, align 8
  %22 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %23 = extractvalue { ptr, ptr, ptr, i32 } %22, 0
  %24 = call ptr @llvm.invariant.start.p0(i64 280, ptr %23)
  %25 = extractvalue { ptr, ptr, ptr, i32 } %22, 3
  %26 = getelementptr ptr, ptr %23, i32 %25
  %27 = load ptr, ptr %26, align 8
  %28 = extractvalue { ptr, ptr, ptr, i32 } %22, 1
  %29 = call ptr %27(ptr %28)
  %30 = getelementptr { ptr }, ptr %21, i32 0, i32 0
  %31 = getelementptr { ptr }, ptr %29, i32 0, i32 0
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %34 = extractvalue { ptr, ptr, ptr, i32 } %33, 0
  %35 = call ptr @llvm.invariant.start.p0(i64 280, ptr %34)
  %36 = extractvalue { ptr, ptr, ptr, i32 } %33, 3
  %37 = getelementptr ptr, ptr %34, i32 %36
  %38 = getelementptr ptr, ptr %37, i32 2
  %39 = load ptr, ptr %38, align 8
  %40 = extractvalue { ptr, ptr, ptr, i32 } %33, 1
  %41 = call ptr %39(ptr %40)
  store i32 1, ptr %41, align 4
  %42 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %43 = extractvalue { ptr, ptr, ptr, i32 } %42, 0
  %44 = call ptr @llvm.invariant.start.p0(i64 280, ptr %43)
  %45 = extractvalue { ptr, ptr, ptr, i32 } %42, 3
  %46 = getelementptr ptr, ptr %43, i32 %45
  %47 = getelementptr ptr, ptr %46, i32 1
  %48 = load ptr, ptr %47, align 8
  %49 = extractvalue { ptr, ptr, ptr, i32 } %42, 1
  %50 = call ptr %48(ptr %49)
  store i32 0, ptr %50, align 4
  ret void
}

define void @String_init_bytesBufferPtri8_lengthPtri32_capacityPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3, i32 %4, i32 %5) {
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %7, align 8
  %8 = call ptr @llvm.invariant.start.p0(i64 16, ptr %7)
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  call void @set_offset(ptr %9, ptr @String)
  %22 = call ptr @llvm.invariant.start.p0(i64 24, ptr %9)
  %23 = alloca ptr, align 8
  store { ptr } %3, ptr %23, align 8
  %24 = load { ptr, ptr, ptr, i32 }, ptr %9, align 8
  %25 = extractvalue { ptr, ptr, ptr, i32 } %24, 0
  %26 = call ptr @llvm.invariant.start.p0(i64 280, ptr %25)
  %27 = extractvalue { ptr, ptr, ptr, i32 } %24, 3
  %28 = getelementptr ptr, ptr %25, i32 %27
  %29 = load ptr, ptr %28, align 8
  %30 = extractvalue { ptr, ptr, ptr, i32 } %24, 1
  %31 = call ptr %29(ptr %30)
  %32 = getelementptr { ptr }, ptr %31, i32 0, i32 0
  %33 = load ptr, ptr %23, align 8
  store ptr %33, ptr %32, align 8
  %34 = load { ptr, ptr, ptr, i32 }, ptr %9, align 8
  %35 = extractvalue { ptr, ptr, ptr, i32 } %34, 0
  %36 = call ptr @llvm.invariant.start.p0(i64 280, ptr %35)
  %37 = extractvalue { ptr, ptr, ptr, i32 } %34, 3
  %38 = getelementptr ptr, ptr %35, i32 %37
  %39 = getelementptr ptr, ptr %38, i32 1
  %40 = load ptr, ptr %39, align 8
  %41 = extractvalue { ptr, ptr, ptr, i32 } %34, 1
  %42 = call ptr %40(ptr %41)
  store i32 %4, ptr %42, align 4
  %43 = load { ptr, ptr, ptr, i32 }, ptr %9, align 8
  %44 = extractvalue { ptr, ptr, ptr, i32 } %43, 0
  %45 = call ptr @llvm.invariant.start.p0(i64 280, ptr %44)
  %46 = extractvalue { ptr, ptr, ptr, i32 } %43, 3
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = getelementptr ptr, ptr %47, i32 2
  %49 = load ptr, ptr %48, align 8
  %50 = extractvalue { ptr, ptr, ptr, i32 } %43, 1
  %51 = call ptr %49(ptr %50)
  store i32 %5, ptr %51, align 4
  ret void
}

define i32 @String_length_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @String)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 280, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 1
  %26 = load ptr, ptr %25, align 8
  %27 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %28 = call ptr %26(ptr %27)
  %29 = load i32, ptr %28, align 4
  ret i32 %29
}

define i32 @String_capacity_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @String)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 280, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 2
  %26 = load ptr, ptr %25, align 8
  %27 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %28 = call ptr %26(ptr %27)
  %29 = load i32, ptr %28, align 4
  ret i32 %29
}

define { ptr } @String_bytes_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @String)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 280, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %27 = call ptr %25(ptr %26)
  %28 = getelementptr { ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = insertvalue { ptr } undef, ptr %29, 0
  ret { ptr } %30
}

define { ptr, ptr, ptr, i32 } @String_append_xPtri8({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i8 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @String)
  %20 = call ptr @llvm.invariant.start.p0(i64 24, ptr %7)
  %21 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %22 = extractvalue { ptr, ptr, ptr, i32 } %21, 0
  %23 = call ptr @llvm.invariant.start.p0(i64 280, ptr %22)
  %24 = extractvalue { ptr, ptr, ptr, i32 } %21, 3
  %25 = getelementptr ptr, ptr %22, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 1
  %27 = load ptr, ptr %26, align 8
  %28 = extractvalue { ptr, ptr, ptr, i32 } %21, 1
  %29 = call ptr %27(ptr %28)
  %30 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %31 = extractvalue { ptr, ptr, ptr, i32 } %30, 0
  %32 = call ptr @llvm.invariant.start.p0(i64 280, ptr %31)
  %33 = extractvalue { ptr, ptr, ptr, i32 } %30, 3
  %34 = getelementptr ptr, ptr %31, i32 %33
  %35 = getelementptr ptr, ptr %34, i32 2
  %36 = load ptr, ptr %35, align 8
  %37 = extractvalue { ptr, ptr, ptr, i32 } %30, 1
  %38 = call ptr %36(ptr %37)
  %39 = load i32, ptr %29, align 4
  %40 = load i32, ptr %38, align 4
  %41 = icmp slt i32 %39, %40
  %42 = alloca i32, align 4
  %43 = alloca i32, align 4
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = alloca ptr, align 8
  %46 = alloca i32, align 4
  %47 = alloca i1, align 1
  %48 = alloca i32, align 4
  %49 = alloca i32, align 4
  %50 = alloca i32, align 4
  %51 = alloca i32, align 4
  %52 = alloca { ptr, ptr, ptr, i32 }, align 8
  br i1 %41, label %53, label %54

53:                                               ; preds = %4
  br label %162

54:                                               ; preds = %4
  %55 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %56 = extractvalue { ptr, ptr, ptr, i32 } %55, 0
  %57 = call ptr @llvm.invariant.start.p0(i64 280, ptr %56)
  %58 = extractvalue { ptr, ptr, ptr, i32 } %55, 3
  %59 = getelementptr ptr, ptr %56, i32 %58
  %60 = getelementptr ptr, ptr %59, i32 2
  %61 = load ptr, ptr %60, align 8
  %62 = extractvalue { ptr, ptr, ptr, i32 } %55, 1
  %63 = call ptr %61(ptr %62)
  store i32 2, ptr %42, align 4
  %64 = load i32, ptr %63, align 4
  %65 = load i32, ptr %42, align 4
  %66 = mul i32 %64, %65
  store i32 %66, ptr %43, align 4
  %67 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %68 = extractvalue { ptr, ptr, ptr, i32 } %67, 0
  %69 = call ptr @llvm.invariant.start.p0(i64 280, ptr %68)
  %70 = extractvalue { ptr, ptr, ptr, i32 } %67, 3
  %71 = getelementptr ptr, ptr %68, i32 %70
  %72 = getelementptr ptr, ptr %71, i32 2
  %73 = load ptr, ptr %72, align 8
  %74 = extractvalue { ptr, ptr, ptr, i32 } %67, 1
  %75 = call ptr %73(ptr %74)
  %76 = load i32, ptr %43, align 4
  store i32 %76, ptr %75, align 4
  %77 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %78 = extractvalue { ptr, ptr, ptr, i32 } %77, 0
  %79 = call ptr @llvm.invariant.start.p0(i64 280, ptr %78)
  %80 = extractvalue { ptr, ptr, ptr, i32 } %77, 3
  %81 = getelementptr ptr, ptr %78, i32 %80
  %82 = load ptr, ptr %81, align 8
  %83 = extractvalue { ptr, ptr, ptr, i32 } %77, 1
  %84 = call ptr %82(ptr %83)
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %84, i32 0, i32 0
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 0
  %87 = load ptr, ptr %85, align 8
  store ptr %87, ptr %86, align 8
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %84, i32 0, i32 1
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 1
  %90 = load ptr, ptr %88, align 8
  store ptr %90, ptr %89, align 8
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %84, i32 0, i32 2
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 2
  %93 = load ptr, ptr %91, align 8
  store ptr %93, ptr %92, align 8
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %84, i32 0, i32 3
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 3
  %96 = load i32, ptr %94, align 4
  store i32 %96, ptr %95, align 4
  %97 = call ptr @llvm.invariant.start.p0(i64 16, ptr %44)
  %98 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %99 = extractvalue { ptr, ptr, ptr, i32 } %98, 0
  %100 = call ptr @llvm.invariant.start.p0(i64 280, ptr %99)
  %101 = extractvalue { ptr, ptr, ptr, i32 } %98, 3
  %102 = getelementptr ptr, ptr %99, i32 %101
  %103 = getelementptr ptr, ptr %102, i32 2
  %104 = load ptr, ptr %103, align 8
  %105 = extractvalue { ptr, ptr, ptr, i32 } %98, 1
  %106 = call ptr %104(ptr %105)
  %107 = load i32, ptr %106, align 4
  %108 = getelementptr i8, ptr null, i32 %107
  %109 = ptrtoint ptr %108 to i64
  %110 = call ptr @malloc(i64 %109)
  store ptr %110, ptr %45, align 8
  %111 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %112 = extractvalue { ptr, ptr, ptr, i32 } %111, 0
  %113 = call ptr @llvm.invariant.start.p0(i64 280, ptr %112)
  %114 = extractvalue { ptr, ptr, ptr, i32 } %111, 3
  %115 = getelementptr ptr, ptr %112, i32 %114
  %116 = load ptr, ptr %115, align 8
  %117 = extractvalue { ptr, ptr, ptr, i32 } %111, 1
  %118 = call ptr %116(ptr %117)
  %119 = getelementptr { ptr }, ptr %45, i32 0, i32 0
  %120 = getelementptr { ptr }, ptr %118, i32 0, i32 0
  %121 = load ptr, ptr %119, align 8
  store ptr %121, ptr %120, align 8
  store i32 0, ptr %46, align 4
  br label %122

122:                                              ; preds = %._crit_edge1, %54
  %123 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %124 = extractvalue { ptr, ptr, ptr, i32 } %123, 0
  %125 = call ptr @llvm.invariant.start.p0(i64 280, ptr %124)
  %126 = extractvalue { ptr, ptr, ptr, i32 } %123, 3
  %127 = getelementptr ptr, ptr %124, i32 %126
  %128 = getelementptr ptr, ptr %127, i32 1
  %129 = load ptr, ptr %128, align 8
  %130 = extractvalue { ptr, ptr, ptr, i32 } %123, 1
  %131 = call ptr %129(ptr %130)
  %132 = load i32, ptr %46, align 4
  %133 = load i32, ptr %131, align 4
  %134 = icmp slt i32 %132, %133
  store i1 %134, ptr %47, align 1
  %135 = load i1, ptr %47, align 1
  store i1 %135, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %136, label %._crit_edge

._crit_edge:                                      ; preds = %122
  br label %160

136:                                              ; preds = %122
  %137 = load ptr, ptr %44, align 8
  %138 = load i32, ptr %46, align 4
  %139 = getelementptr i8, ptr null, i32 %138
  %140 = ptrtoint ptr %139 to i64
  %141 = getelementptr i8, ptr %137, i64 %140
  %142 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %143 = extractvalue { ptr, ptr, ptr, i32 } %142, 0
  %144 = call ptr @llvm.invariant.start.p0(i64 280, ptr %143)
  %145 = extractvalue { ptr, ptr, ptr, i32 } %142, 3
  %146 = getelementptr ptr, ptr %143, i32 %145
  %147 = load ptr, ptr %146, align 8
  %148 = extractvalue { ptr, ptr, ptr, i32 } %142, 1
  %149 = call ptr %147(ptr %148)
  %150 = load ptr, ptr %149, align 8
  %151 = load i32, ptr %46, align 4
  %152 = getelementptr i8, ptr null, i32 %151
  %153 = ptrtoint ptr %152 to i64
  %154 = getelementptr i8, ptr %150, i64 %153
  %155 = load i8, ptr %141, align 1
  store i8 %155, ptr %154, align 1
  store i32 1, ptr %48, align 4
  %156 = load i32, ptr %46, align 4
  %157 = load i32, ptr %48, align 4
  %158 = add i32 %156, %157
  store i32 %158, ptr %49, align 4
  %159 = load i32, ptr %49, align 4
  store i32 %159, ptr %46, align 4
  br label %160

160:                                              ; preds = %._crit_edge, %136
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %161

._crit_edge1:                                     ; preds = %160
  br label %122

161:                                              ; preds = %160
  br label %162

162:                                              ; preds = %161, %53
  %163 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %164 = extractvalue { ptr, ptr, ptr, i32 } %163, 0
  %165 = call ptr @llvm.invariant.start.p0(i64 280, ptr %164)
  %166 = extractvalue { ptr, ptr, ptr, i32 } %163, 3
  %167 = getelementptr ptr, ptr %164, i32 %166
  %168 = load ptr, ptr %167, align 8
  %169 = extractvalue { ptr, ptr, ptr, i32 } %163, 1
  %170 = call ptr %168(ptr %169)
  %171 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %172 = extractvalue { ptr, ptr, ptr, i32 } %171, 0
  %173 = call ptr @llvm.invariant.start.p0(i64 280, ptr %172)
  %174 = extractvalue { ptr, ptr, ptr, i32 } %171, 3
  %175 = getelementptr ptr, ptr %172, i32 %174
  %176 = getelementptr ptr, ptr %175, i32 1
  %177 = load ptr, ptr %176, align 8
  %178 = extractvalue { ptr, ptr, ptr, i32 } %171, 1
  %179 = call ptr %177(ptr %178)
  %180 = load ptr, ptr %170, align 8
  %181 = load i32, ptr %179, align 4
  %182 = getelementptr i8, ptr null, i32 %181
  %183 = ptrtoint ptr %182 to i64
  %184 = getelementptr i8, ptr %180, i64 %183
  store i8 %3, ptr %184, align 1
  %185 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %186 = extractvalue { ptr, ptr, ptr, i32 } %185, 0
  %187 = call ptr @llvm.invariant.start.p0(i64 280, ptr %186)
  %188 = extractvalue { ptr, ptr, ptr, i32 } %185, 3
  %189 = getelementptr ptr, ptr %186, i32 %188
  %190 = getelementptr ptr, ptr %189, i32 1
  %191 = load ptr, ptr %190, align 8
  %192 = extractvalue { ptr, ptr, ptr, i32 } %185, 1
  %193 = call ptr %191(ptr %192)
  store i32 1, ptr %50, align 4
  %194 = load i32, ptr %193, align 4
  %195 = load i32, ptr %50, align 4
  %196 = add i32 %194, %195
  store i32 %196, ptr %51, align 4
  %197 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %198 = extractvalue { ptr, ptr, ptr, i32 } %197, 0
  %199 = call ptr @llvm.invariant.start.p0(i64 280, ptr %198)
  %200 = extractvalue { ptr, ptr, ptr, i32 } %197, 3
  %201 = getelementptr ptr, ptr %198, i32 %200
  %202 = getelementptr ptr, ptr %201, i32 1
  %203 = load ptr, ptr %202, align 8
  %204 = extractvalue { ptr, ptr, ptr, i32 } %197, 1
  %205 = call ptr %203(ptr %204)
  %206 = load i32, ptr %51, align 4
  store i32 %206, ptr %205, align 4
  %207 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %208 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 0
  %209 = load ptr, ptr %207, align 8
  store ptr %209, ptr %208, align 8
  %210 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %211 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 1
  %212 = load ptr, ptr %210, align 8
  store ptr %212, ptr %211, align 8
  %213 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %214 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 2
  %215 = load ptr, ptr %213, align 8
  store ptr %215, ptr %214, align 8
  %216 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 3
  %218 = load i32, ptr %216, align 4
  store i32 %218, ptr %217, align 4
  call void @set_offset(ptr %52, ptr @String)
  %219 = call ptr @llvm.invariant.start.p0(i64 24, ptr %52)
  %220 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 0
  %221 = load ptr, ptr %220, align 8
  %222 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %221, 0
  %223 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 1
  %224 = load ptr, ptr %223, align 8
  %225 = insertvalue { ptr, ptr, ptr, i32 } %222, ptr %224, 1
  %226 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 2
  %227 = load ptr, ptr %226, align 8
  %228 = insertvalue { ptr, ptr, ptr, i32 } %225, ptr %227, 2
  %229 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 3
  %230 = load i32, ptr %229, align 4
  %231 = insertvalue { ptr, ptr, ptr, i32 } %228, i32 %230, 3
  ret { ptr, ptr, ptr, i32 } %231
}

define { ptr, ptr, ptr, i32 } @String_extend_strString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem5 = alloca i1, align 1
  %.reg2mem8 = alloca ptr, align 8
  %.reg2mem13 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @String)
  %20 = call ptr @llvm.invariant.start.p0(i64 24, ptr %7)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @String)
  %36 = call ptr @llvm.invariant.start.p0(i64 24, ptr %23)
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %38 = load ptr, ptr %37, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %38, 0
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %41 = load ptr, ptr %40, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } %39, ptr %41, 1
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %44 = load ptr, ptr %43, align 8
  %45 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %44, 2
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %47 = load i32, ptr %46, align 4
  %48 = insertvalue { ptr, ptr, ptr, i32 } %45, i32 %47, 3
  %49 = alloca [0 x ptr], align 8
  %50 = call ptr @llvm.invariant.start.p0(i64 0, ptr %49)
  %51 = call ptr @llvm.invariant.start.p0(i64 280, ptr %38)
  %52 = getelementptr ptr, ptr %38, i32 %47
  %53 = getelementptr ptr, ptr %52, i32 7
  %54 = load ptr, ptr %53, align 8
  %55 = alloca [0 x ptr], align 8
  %56 = call ptr %54({ ptr, ptr, ptr, i32 } %48, ptr %55)
  %57 = call { ptr } %56({ ptr, ptr, ptr, i32 } %48, { ptr, ptr, ptr, i32 } %48, ptr %49)
  %58 = alloca { ptr }, align 8
  store { ptr } %57, ptr %58, align 8
  %59 = alloca { ptr, ptr, ptr, i32 }, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 0
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 0
  %62 = load ptr, ptr %60, align 8
  store ptr %62, ptr %61, align 8
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 1
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 1
  %65 = load ptr, ptr %63, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 2
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 2
  %68 = load ptr, ptr %66, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 3
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 3
  %71 = load i32, ptr %69, align 4
  store i32 %71, ptr %70, align 4
  %72 = call ptr @llvm.invariant.start.p0(i64 16, ptr %59)
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %74 = load ptr, ptr %73, align 8
  %75 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %74, 0
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %77 = load ptr, ptr %76, align 8
  %78 = insertvalue { ptr, ptr, ptr, i32 } %75, ptr %77, 1
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %80 = load ptr, ptr %79, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } %78, ptr %80, 2
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %83 = load i32, ptr %82, align 4
  %84 = insertvalue { ptr, ptr, ptr, i32 } %81, i32 %83, 3
  %85 = alloca [0 x ptr], align 8
  %86 = call ptr @llvm.invariant.start.p0(i64 0, ptr %85)
  %87 = call ptr @llvm.invariant.start.p0(i64 280, ptr %74)
  %88 = getelementptr ptr, ptr %74, i32 %83
  %89 = getelementptr ptr, ptr %88, i32 5
  %90 = load ptr, ptr %89, align 8
  %91 = alloca [0 x ptr], align 8
  %92 = call ptr %90({ ptr, ptr, ptr, i32 } %84, ptr %91)
  %93 = call i32 %92({ ptr, ptr, ptr, i32 } %84, { ptr, ptr, ptr, i32 } %84, ptr %85)
  store i32 %93, ptr %.reg2mem13, align 4
  %94 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %95 = extractvalue { ptr, ptr, ptr, i32 } %94, 0
  %96 = call ptr @llvm.invariant.start.p0(i64 280, ptr %95)
  %97 = extractvalue { ptr, ptr, ptr, i32 } %94, 3
  %98 = getelementptr ptr, ptr %95, i32 %97
  %99 = getelementptr ptr, ptr %98, i32 1
  %100 = load ptr, ptr %99, align 8
  %101 = extractvalue { ptr, ptr, ptr, i32 } %94, 1
  %102 = call ptr %100(ptr %101)
  %103 = load i32, ptr %102, align 4
  %.reload18 = load i32, ptr %.reg2mem13, align 4
  %104 = add i32 %103, %.reload18
  %105 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %106 = extractvalue { ptr, ptr, ptr, i32 } %105, 0
  %107 = call ptr @llvm.invariant.start.p0(i64 280, ptr %106)
  %108 = extractvalue { ptr, ptr, ptr, i32 } %105, 3
  %109 = getelementptr ptr, ptr %106, i32 %108
  %110 = getelementptr ptr, ptr %109, i32 2
  %111 = load ptr, ptr %110, align 8
  %112 = extractvalue { ptr, ptr, ptr, i32 } %105, 1
  %113 = call ptr %111(ptr %112)
  %114 = load i32, ptr %113, align 4
  %115 = icmp slt i32 %104, %114
  %116 = alloca i32, align 4
  %117 = alloca i32, align 4
  %118 = alloca i1, align 1
  %119 = alloca i32, align 4
  %120 = alloca i32, align 4
  %121 = alloca i32, align 4
  %122 = alloca i32, align 4
  %123 = alloca i32, align 4
  %124 = alloca { ptr, ptr, ptr, i32 }, align 8
  %125 = alloca ptr, align 8
  %126 = alloca i32, align 4
  %127 = alloca i32, align 4
  %128 = alloca i32, align 4
  %129 = alloca i1, align 1
  %130 = alloca i1, align 1
  %131 = alloca i32, align 4
  %132 = alloca i32, align 4
  %133 = alloca i32, align 4
  %134 = alloca i32, align 4
  %135 = alloca i32, align 4
  %136 = alloca i32, align 4
  %137 = alloca i32, align 4
  %138 = alloca { ptr, ptr, ptr, i32 }, align 8
  br i1 %115, label %139, label %195

139:                                              ; preds = %4
  %140 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %141 = extractvalue { ptr, ptr, ptr, i32 } %140, 0
  %142 = call ptr @llvm.invariant.start.p0(i64 280, ptr %141)
  %143 = extractvalue { ptr, ptr, ptr, i32 } %140, 3
  %144 = getelementptr ptr, ptr %141, i32 %143
  %145 = getelementptr ptr, ptr %144, i32 1
  %146 = load ptr, ptr %145, align 8
  %147 = extractvalue { ptr, ptr, ptr, i32 } %140, 1
  %148 = call ptr %146(ptr %147)
  store ptr %148, ptr %.reg2mem8, align 8
  store i32 0, ptr %116, align 4
  br label %149

149:                                              ; preds = %._crit_edge1, %139
  %150 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %151 = extractvalue { ptr, ptr, ptr, i32 } %150, 0
  %152 = call ptr @llvm.invariant.start.p0(i64 280, ptr %151)
  %153 = extractvalue { ptr, ptr, ptr, i32 } %150, 3
  %154 = getelementptr ptr, ptr %151, i32 %153
  %155 = getelementptr ptr, ptr %154, i32 1
  %156 = load ptr, ptr %155, align 8
  %157 = extractvalue { ptr, ptr, ptr, i32 } %150, 1
  %158 = call ptr %156(ptr %157)
  %159 = load i32, ptr %158, align 4
  %.reload17 = load i32, ptr %.reg2mem13, align 4
  %160 = add i32 %159, %.reload17
  store i32 %160, ptr %117, align 4
  %.reload12 = load ptr, ptr %.reg2mem8, align 8
  %161 = load i32, ptr %.reload12, align 4
  %162 = load i32, ptr %117, align 4
  %163 = icmp slt i32 %161, %162
  store i1 %163, ptr %118, align 1
  %164 = load i1, ptr %118, align 1
  store i1 %164, ptr %.reg2mem5, align 1
  %.reload7 = load i1, ptr %.reg2mem5, align 1
  br i1 %.reload7, label %165, label %._crit_edge

._crit_edge:                                      ; preds = %149
  br label %193

165:                                              ; preds = %149
  %166 = load ptr, ptr %59, align 8
  %167 = load i32, ptr %116, align 4
  %168 = getelementptr i8, ptr null, i32 %167
  %169 = ptrtoint ptr %168 to i64
  %170 = getelementptr i8, ptr %166, i64 %169
  %171 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %172 = extractvalue { ptr, ptr, ptr, i32 } %171, 0
  %173 = call ptr @llvm.invariant.start.p0(i64 280, ptr %172)
  %174 = extractvalue { ptr, ptr, ptr, i32 } %171, 3
  %175 = getelementptr ptr, ptr %172, i32 %174
  %176 = load ptr, ptr %175, align 8
  %177 = extractvalue { ptr, ptr, ptr, i32 } %171, 1
  %178 = call ptr %176(ptr %177)
  %179 = load ptr, ptr %178, align 8
  %.reload11 = load ptr, ptr %.reg2mem8, align 8
  %180 = load i32, ptr %.reload11, align 4
  %181 = getelementptr i8, ptr null, i32 %180
  %182 = ptrtoint ptr %181 to i64
  %183 = getelementptr i8, ptr %179, i64 %182
  %184 = load i8, ptr %170, align 1
  store i8 %184, ptr %183, align 1
  store i32 1, ptr %119, align 4
  %.reload10 = load ptr, ptr %.reg2mem8, align 8
  %185 = load i32, ptr %.reload10, align 4
  %186 = load i32, ptr %119, align 4
  %187 = add i32 %185, %186
  store i32 %187, ptr %120, align 4
  %188 = load i32, ptr %120, align 4
  %.reload9 = load ptr, ptr %.reg2mem8, align 8
  store i32 %188, ptr %.reload9, align 4
  store i32 1, ptr %121, align 4
  %189 = load i32, ptr %116, align 4
  %190 = load i32, ptr %121, align 4
  %191 = add i32 %189, %190
  store i32 %191, ptr %122, align 4
  %192 = load i32, ptr %122, align 4
  store i32 %192, ptr %116, align 4
  br label %193

193:                                              ; preds = %._crit_edge, %165
  %.reload6 = load i1, ptr %.reg2mem5, align 1
  br i1 %.reload6, label %._crit_edge1, label %194

._crit_edge1:                                     ; preds = %193
  br label %149

194:                                              ; preds = %193
  br label %347

195:                                              ; preds = %4
  %196 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %197 = extractvalue { ptr, ptr, ptr, i32 } %196, 0
  %198 = call ptr @llvm.invariant.start.p0(i64 280, ptr %197)
  %199 = extractvalue { ptr, ptr, ptr, i32 } %196, 3
  %200 = getelementptr ptr, ptr %197, i32 %199
  %201 = getelementptr ptr, ptr %200, i32 1
  %202 = load ptr, ptr %201, align 8
  %203 = extractvalue { ptr, ptr, ptr, i32 } %196, 1
  %204 = call ptr %202(ptr %203)
  %205 = load i32, ptr %204, align 4
  %.reload16 = load i32, ptr %.reg2mem13, align 4
  %206 = add i32 %205, %.reload16
  store i32 %206, ptr %123, align 4
  %207 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %208 = extractvalue { ptr, ptr, ptr, i32 } %207, 0
  %209 = call ptr @llvm.invariant.start.p0(i64 280, ptr %208)
  %210 = extractvalue { ptr, ptr, ptr, i32 } %207, 3
  %211 = getelementptr ptr, ptr %208, i32 %210
  %212 = getelementptr ptr, ptr %211, i32 2
  %213 = load ptr, ptr %212, align 8
  %214 = extractvalue { ptr, ptr, ptr, i32 } %207, 1
  %215 = call ptr %213(ptr %214)
  %216 = load i32, ptr %123, align 4
  store i32 %216, ptr %215, align 4
  %217 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %218 = extractvalue { ptr, ptr, ptr, i32 } %217, 0
  %219 = call ptr @llvm.invariant.start.p0(i64 280, ptr %218)
  %220 = extractvalue { ptr, ptr, ptr, i32 } %217, 3
  %221 = getelementptr ptr, ptr %218, i32 %220
  %222 = load ptr, ptr %221, align 8
  %223 = extractvalue { ptr, ptr, ptr, i32 } %217, 1
  %224 = call ptr %222(ptr %223)
  %225 = getelementptr { ptr, ptr, ptr, i32 }, ptr %224, i32 0, i32 0
  %226 = getelementptr { ptr, ptr, ptr, i32 }, ptr %124, i32 0, i32 0
  %227 = load ptr, ptr %225, align 8
  store ptr %227, ptr %226, align 8
  %228 = getelementptr { ptr, ptr, ptr, i32 }, ptr %224, i32 0, i32 1
  %229 = getelementptr { ptr, ptr, ptr, i32 }, ptr %124, i32 0, i32 1
  %230 = load ptr, ptr %228, align 8
  store ptr %230, ptr %229, align 8
  %231 = getelementptr { ptr, ptr, ptr, i32 }, ptr %224, i32 0, i32 2
  %232 = getelementptr { ptr, ptr, ptr, i32 }, ptr %124, i32 0, i32 2
  %233 = load ptr, ptr %231, align 8
  store ptr %233, ptr %232, align 8
  %234 = getelementptr { ptr, ptr, ptr, i32 }, ptr %224, i32 0, i32 3
  %235 = getelementptr { ptr, ptr, ptr, i32 }, ptr %124, i32 0, i32 3
  %236 = load i32, ptr %234, align 4
  store i32 %236, ptr %235, align 4
  %237 = call ptr @llvm.invariant.start.p0(i64 16, ptr %124)
  %238 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %239 = extractvalue { ptr, ptr, ptr, i32 } %238, 0
  %240 = call ptr @llvm.invariant.start.p0(i64 280, ptr %239)
  %241 = extractvalue { ptr, ptr, ptr, i32 } %238, 3
  %242 = getelementptr ptr, ptr %239, i32 %241
  %243 = getelementptr ptr, ptr %242, i32 2
  %244 = load ptr, ptr %243, align 8
  %245 = extractvalue { ptr, ptr, ptr, i32 } %238, 1
  %246 = call ptr %244(ptr %245)
  %247 = load i32, ptr %246, align 4
  %248 = getelementptr i8, ptr null, i32 %247
  %249 = ptrtoint ptr %248 to i64
  %250 = call ptr @malloc(i64 %249)
  store ptr %250, ptr %125, align 8
  %251 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %252 = extractvalue { ptr, ptr, ptr, i32 } %251, 0
  %253 = call ptr @llvm.invariant.start.p0(i64 280, ptr %252)
  %254 = extractvalue { ptr, ptr, ptr, i32 } %251, 3
  %255 = getelementptr ptr, ptr %252, i32 %254
  %256 = load ptr, ptr %255, align 8
  %257 = extractvalue { ptr, ptr, ptr, i32 } %251, 1
  %258 = call ptr %256(ptr %257)
  %259 = getelementptr { ptr }, ptr %125, i32 0, i32 0
  %260 = getelementptr { ptr }, ptr %258, i32 0, i32 0
  %261 = load ptr, ptr %259, align 8
  store ptr %261, ptr %260, align 8
  store i32 0, ptr %126, align 4
  store i32 0, ptr %127, align 4
  br label %262

262:                                              ; preds = %._crit_edge3, %195
  %263 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %264 = extractvalue { ptr, ptr, ptr, i32 } %263, 0
  %265 = call ptr @llvm.invariant.start.p0(i64 280, ptr %264)
  %266 = extractvalue { ptr, ptr, ptr, i32 } %263, 3
  %267 = getelementptr ptr, ptr %264, i32 %266
  %268 = getelementptr ptr, ptr %267, i32 1
  %269 = load ptr, ptr %268, align 8
  %270 = extractvalue { ptr, ptr, ptr, i32 } %263, 1
  %271 = call ptr %269(ptr %270)
  %272 = load i32, ptr %271, align 4
  %.reload15 = load i32, ptr %.reg2mem13, align 4
  %273 = add i32 %272, %.reload15
  store i32 %273, ptr %128, align 4
  %274 = load i32, ptr %126, align 4
  %275 = load i32, ptr %128, align 4
  %276 = icmp slt i32 %274, %275
  store i1 %276, ptr %129, align 1
  %277 = load i1, ptr %129, align 1
  store i1 %277, ptr %.reg2mem, align 1
  %.reload4 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload4, label %278, label %._crit_edge2

._crit_edge2:                                     ; preds = %262
  br label %345

278:                                              ; preds = %262
  %279 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %280 = extractvalue { ptr, ptr, ptr, i32 } %279, 0
  %281 = call ptr @llvm.invariant.start.p0(i64 280, ptr %280)
  %282 = extractvalue { ptr, ptr, ptr, i32 } %279, 3
  %283 = getelementptr ptr, ptr %280, i32 %282
  %284 = getelementptr ptr, ptr %283, i32 1
  %285 = load ptr, ptr %284, align 8
  %286 = extractvalue { ptr, ptr, ptr, i32 } %279, 1
  %287 = call ptr %285(ptr %286)
  %288 = load i32, ptr %126, align 4
  %289 = load i32, ptr %287, align 4
  %290 = icmp slt i32 %288, %289
  store i1 %290, ptr %130, align 1
  %291 = load i1, ptr %130, align 1
  br i1 %291, label %292, label %316

292:                                              ; preds = %278
  %293 = load ptr, ptr %124, align 8
  %294 = load i32, ptr %126, align 4
  %295 = getelementptr i8, ptr null, i32 %294
  %296 = ptrtoint ptr %295 to i64
  %297 = getelementptr i8, ptr %293, i64 %296
  %298 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %299 = extractvalue { ptr, ptr, ptr, i32 } %298, 0
  %300 = call ptr @llvm.invariant.start.p0(i64 280, ptr %299)
  %301 = extractvalue { ptr, ptr, ptr, i32 } %298, 3
  %302 = getelementptr ptr, ptr %299, i32 %301
  %303 = load ptr, ptr %302, align 8
  %304 = extractvalue { ptr, ptr, ptr, i32 } %298, 1
  %305 = call ptr %303(ptr %304)
  %306 = load ptr, ptr %305, align 8
  %307 = load i32, ptr %126, align 4
  %308 = getelementptr i8, ptr null, i32 %307
  %309 = ptrtoint ptr %308 to i64
  %310 = getelementptr i8, ptr %306, i64 %309
  %311 = load i8, ptr %297, align 1
  store i8 %311, ptr %310, align 1
  store i32 1, ptr %131, align 4
  %312 = load i32, ptr %126, align 4
  %313 = load i32, ptr %131, align 4
  %314 = add i32 %312, %313
  store i32 %314, ptr %132, align 4
  %315 = load i32, ptr %132, align 4
  store i32 %315, ptr %126, align 4
  br label %344

316:                                              ; preds = %278
  %317 = load ptr, ptr %59, align 8
  %318 = load i32, ptr %127, align 4
  %319 = getelementptr i8, ptr null, i32 %318
  %320 = ptrtoint ptr %319 to i64
  %321 = getelementptr i8, ptr %317, i64 %320
  %322 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %323 = extractvalue { ptr, ptr, ptr, i32 } %322, 0
  %324 = call ptr @llvm.invariant.start.p0(i64 280, ptr %323)
  %325 = extractvalue { ptr, ptr, ptr, i32 } %322, 3
  %326 = getelementptr ptr, ptr %323, i32 %325
  %327 = load ptr, ptr %326, align 8
  %328 = extractvalue { ptr, ptr, ptr, i32 } %322, 1
  %329 = call ptr %327(ptr %328)
  %330 = load ptr, ptr %329, align 8
  %331 = load i32, ptr %126, align 4
  %332 = getelementptr i8, ptr null, i32 %331
  %333 = ptrtoint ptr %332 to i64
  %334 = getelementptr i8, ptr %330, i64 %333
  %335 = load i8, ptr %321, align 1
  store i8 %335, ptr %334, align 1
  store i32 1, ptr %133, align 4
  %336 = load i32, ptr %126, align 4
  %337 = load i32, ptr %133, align 4
  %338 = add i32 %336, %337
  store i32 %338, ptr %134, align 4
  %339 = load i32, ptr %134, align 4
  store i32 %339, ptr %126, align 4
  store i32 1, ptr %135, align 4
  %340 = load i32, ptr %127, align 4
  %341 = load i32, ptr %135, align 4
  %342 = add i32 %340, %341
  store i32 %342, ptr %136, align 4
  %343 = load i32, ptr %136, align 4
  store i32 %343, ptr %127, align 4
  br label %344

344:                                              ; preds = %316, %292
  br label %345

345:                                              ; preds = %._crit_edge2, %344
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge3, label %346

._crit_edge3:                                     ; preds = %345
  br label %262

346:                                              ; preds = %345
  br label %347

347:                                              ; preds = %346, %194
  %348 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %349 = extractvalue { ptr, ptr, ptr, i32 } %348, 0
  %350 = call ptr @llvm.invariant.start.p0(i64 280, ptr %349)
  %351 = extractvalue { ptr, ptr, ptr, i32 } %348, 3
  %352 = getelementptr ptr, ptr %349, i32 %351
  %353 = getelementptr ptr, ptr %352, i32 1
  %354 = load ptr, ptr %353, align 8
  %355 = extractvalue { ptr, ptr, ptr, i32 } %348, 1
  %356 = call ptr %354(ptr %355)
  %357 = load i32, ptr %356, align 4
  %.reload14 = load i32, ptr %.reg2mem13, align 4
  %358 = add i32 %357, %.reload14
  store i32 %358, ptr %137, align 4
  %359 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %360 = extractvalue { ptr, ptr, ptr, i32 } %359, 0
  %361 = call ptr @llvm.invariant.start.p0(i64 280, ptr %360)
  %362 = extractvalue { ptr, ptr, ptr, i32 } %359, 3
  %363 = getelementptr ptr, ptr %360, i32 %362
  %364 = getelementptr ptr, ptr %363, i32 1
  %365 = load ptr, ptr %364, align 8
  %366 = extractvalue { ptr, ptr, ptr, i32 } %359, 1
  %367 = call ptr %365(ptr %366)
  %368 = load i32, ptr %137, align 4
  store i32 %368, ptr %367, align 4
  %369 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %370 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 0
  %371 = load ptr, ptr %369, align 8
  store ptr %371, ptr %370, align 8
  %372 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %373 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 1
  %374 = load ptr, ptr %372, align 8
  store ptr %374, ptr %373, align 8
  %375 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %376 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 2
  %377 = load ptr, ptr %375, align 8
  store ptr %377, ptr %376, align 8
  %378 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %379 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 3
  %380 = load i32, ptr %378, align 4
  store i32 %380, ptr %379, align 4
  call void @set_offset(ptr %138, ptr @String)
  %381 = call ptr @llvm.invariant.start.p0(i64 24, ptr %138)
  %382 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 0
  %383 = load ptr, ptr %382, align 8
  %384 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %383, 0
  %385 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 1
  %386 = load ptr, ptr %385, align 8
  %387 = insertvalue { ptr, ptr, ptr, i32 } %384, ptr %386, 1
  %388 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 2
  %389 = load ptr, ptr %388, align 8
  %390 = insertvalue { ptr, ptr, ptr, i32 } %387, ptr %389, 2
  %391 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 3
  %392 = load i32, ptr %391, align 4
  %393 = insertvalue { ptr, ptr, ptr, i32 } %390, i32 %392, 3
  ret { ptr, ptr, ptr, i32 } %393
}

define i8 @String__index_xPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i8, align 1
  %.reg2mem2 = alloca i8, align 1
  %.reg2mem4 = alloca i8, align 1
  %.reg2mem6 = alloca i8, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @String)
  %20 = call ptr @llvm.invariant.start.p0(i64 24, ptr %7)
  %21 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %22 = extractvalue { ptr, ptr, ptr, i32 } %21, 0
  %23 = call ptr @llvm.invariant.start.p0(i64 280, ptr %22)
  %24 = extractvalue { ptr, ptr, ptr, i32 } %21, 3
  %25 = getelementptr ptr, ptr %22, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 1
  %27 = load ptr, ptr %26, align 8
  %28 = extractvalue { ptr, ptr, ptr, i32 } %21, 1
  %29 = call ptr %27(ptr %28)
  %30 = load i32, ptr %29, align 4
  %31 = sub i32 %30, 1
  %32 = icmp sgt i32 %3, %31
  %33 = alloca i32, align 4
  %34 = alloca i1, align 1
  %35 = alloca i32, align 4
  %36 = alloca i32, align 4
  %37 = alloca i1, align 1
  %38 = alloca i32, align 4
  br i1 %32, label %39, label %._crit_edge

._crit_edge:                                      ; preds = %4
  br label %41

39:                                               ; preds = %4
  %40 = call ptr @get_current_coroutine()
  call void @coroutine_yield(ptr %40)
  br label %41

41:                                               ; preds = %._crit_edge, %39
  store i32 0, ptr %33, align 4
  %42 = load i32, ptr %33, align 4
  %43 = icmp sge i32 %3, %42
  store i1 %43, ptr %34, align 1
  %44 = load i1, ptr %34, align 1
  br i1 %44, label %45, label %59

45:                                               ; preds = %41
  %46 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %47 = extractvalue { ptr, ptr, ptr, i32 } %46, 0
  %48 = call ptr @llvm.invariant.start.p0(i64 280, ptr %47)
  %49 = extractvalue { ptr, ptr, ptr, i32 } %46, 3
  %50 = getelementptr ptr, ptr %47, i32 %49
  %51 = load ptr, ptr %50, align 8
  %52 = extractvalue { ptr, ptr, ptr, i32 } %46, 1
  %53 = call ptr %51(ptr %52)
  %54 = load ptr, ptr %53, align 8
  %55 = getelementptr i8, ptr null, i32 %3
  %56 = ptrtoint ptr %55 to i64
  %57 = getelementptr i8, ptr %54, i64 %56
  %58 = load i8, ptr %57, align 1
  store i8 %58, ptr %.reg2mem4, align 1
  %.reload5 = load i8, ptr %.reg2mem4, align 1
  store i8 %.reload5, ptr %.reg2mem6, align 1
  br label %103

59:                                               ; preds = %41
  %60 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %61 = extractvalue { ptr, ptr, ptr, i32 } %60, 0
  %62 = call ptr @llvm.invariant.start.p0(i64 280, ptr %61)
  %63 = extractvalue { ptr, ptr, ptr, i32 } %60, 3
  %64 = getelementptr ptr, ptr %61, i32 %63
  %65 = getelementptr ptr, ptr %64, i32 1
  %66 = load ptr, ptr %65, align 8
  %67 = extractvalue { ptr, ptr, ptr, i32 } %60, 1
  %68 = call ptr %66(ptr %67)
  %69 = load i32, ptr %68, align 4
  %70 = add i32 %69, %3
  store i32 %70, ptr %35, align 4
  store i32 0, ptr %36, align 4
  %71 = load i32, ptr %35, align 4
  %72 = load i32, ptr %36, align 4
  %73 = icmp slt i32 %71, %72
  store i1 %73, ptr %37, align 1
  %74 = load i1, ptr %37, align 1
  br i1 %74, label %75, label %._crit_edge1

._crit_edge1:                                     ; preds = %59
  br label %77

75:                                               ; preds = %59
  %76 = call ptr @get_current_coroutine()
  call void @coroutine_yield(ptr %76)
  br label %77

77:                                               ; preds = %._crit_edge1, %75
  %78 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %79 = extractvalue { ptr, ptr, ptr, i32 } %78, 0
  %80 = call ptr @llvm.invariant.start.p0(i64 280, ptr %79)
  %81 = extractvalue { ptr, ptr, ptr, i32 } %78, 3
  %82 = getelementptr ptr, ptr %79, i32 %81
  %83 = load ptr, ptr %82, align 8
  %84 = extractvalue { ptr, ptr, ptr, i32 } %78, 1
  %85 = call ptr %83(ptr %84)
  %86 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %87 = extractvalue { ptr, ptr, ptr, i32 } %86, 0
  %88 = call ptr @llvm.invariant.start.p0(i64 280, ptr %87)
  %89 = extractvalue { ptr, ptr, ptr, i32 } %86, 3
  %90 = getelementptr ptr, ptr %87, i32 %89
  %91 = getelementptr ptr, ptr %90, i32 1
  %92 = load ptr, ptr %91, align 8
  %93 = extractvalue { ptr, ptr, ptr, i32 } %86, 1
  %94 = call ptr %92(ptr %93)
  %95 = load i32, ptr %94, align 4
  %96 = add i32 %95, %3
  store i32 %96, ptr %38, align 4
  %97 = load ptr, ptr %85, align 8
  %98 = load i32, ptr %38, align 4
  %99 = getelementptr i8, ptr null, i32 %98
  %100 = ptrtoint ptr %99 to i64
  %101 = getelementptr i8, ptr %97, i64 %100
  %102 = load i8, ptr %101, align 1
  store i8 %102, ptr %.reg2mem2, align 1
  %.reload3 = load i8, ptr %.reg2mem2, align 1
  store i8 %.reload3, ptr %.reg2mem6, align 1
  br label %103

103:                                              ; preds = %77, %45
  %.reload7 = load i8, ptr %.reg2mem6, align 1
  store i8 %.reload7, ptr %.reg2mem, align 1
  br label %104

104:                                              ; preds = %103
  %.reload = load i8, ptr %.reg2mem, align 1
  ret i8 %.reload
}

define i1 @String__EQ_otherString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i32, align 4
  %.reg2mem5 = alloca i1, align 1
  %.reg2mem8 = alloca i1, align 1
  %.reg2mem10 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @String)
  %20 = call ptr @llvm.invariant.start.p0(i64 24, ptr %7)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @String)
  %36 = call ptr @llvm.invariant.start.p0(i64 24, ptr %23)
  %37 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %38 = extractvalue { ptr, ptr, ptr, i32 } %37, 0
  %39 = call ptr @llvm.invariant.start.p0(i64 280, ptr %38)
  %40 = extractvalue { ptr, ptr, ptr, i32 } %37, 3
  %41 = getelementptr ptr, ptr %38, i32 %40
  %42 = getelementptr ptr, ptr %41, i32 1
  %43 = load ptr, ptr %42, align 8
  %44 = extractvalue { ptr, ptr, ptr, i32 } %37, 1
  %45 = call ptr %43(ptr %44)
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %47 = load ptr, ptr %46, align 8
  %48 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %47, 0
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } %48, ptr %50, 1
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %53 = load ptr, ptr %52, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %51, ptr %53, 2
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %56 = load i32, ptr %55, align 4
  %57 = insertvalue { ptr, ptr, ptr, i32 } %54, i32 %56, 3
  %58 = alloca [0 x ptr], align 8
  %59 = call ptr @llvm.invariant.start.p0(i64 0, ptr %58)
  %60 = call ptr @llvm.invariant.start.p0(i64 280, ptr %47)
  %61 = getelementptr ptr, ptr %47, i32 %56
  %62 = getelementptr ptr, ptr %61, i32 5
  %63 = load ptr, ptr %62, align 8
  %64 = alloca [0 x ptr], align 8
  %65 = call ptr %63({ ptr, ptr, ptr, i32 } %57, ptr %64)
  %66 = call i32 %65({ ptr, ptr, ptr, i32 } %57, { ptr, ptr, ptr, i32 } %57, ptr %58)
  %67 = load i32, ptr %45, align 4
  %68 = icmp ne i32 %67, %66
  %69 = alloca i32, align 4
  %70 = alloca i1, align 1
  %71 = alloca [0 x ptr], align 8
  %72 = alloca [0 x ptr], align 8
  %73 = alloca ptr, align 8
  %74 = alloca i1, align 1
  %75 = alloca i32, align 4
  %76 = alloca i32, align 4
  %77 = alloca i1, align 1
  br i1 %68, label %78, label %79

78:                                               ; preds = %4
  store i1 false, ptr %.reg2mem8, align 1
  br label %152

79:                                               ; preds = %4
  store i32 0, ptr %69, align 4
  br label %80

80:                                               ; preds = %150, %79
  %81 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %82 = extractvalue { ptr, ptr, ptr, i32 } %81, 0
  %83 = call ptr @llvm.invariant.start.p0(i64 280, ptr %82)
  %84 = extractvalue { ptr, ptr, ptr, i32 } %81, 3
  %85 = getelementptr ptr, ptr %82, i32 %84
  %86 = getelementptr ptr, ptr %85, i32 1
  %87 = load ptr, ptr %86, align 8
  %88 = extractvalue { ptr, ptr, ptr, i32 } %81, 1
  %89 = call ptr %87(ptr %88)
  %90 = load i32, ptr %69, align 4
  %91 = load i32, ptr %89, align 4
  %92 = icmp slt i32 %90, %91
  store i1 %92, ptr %70, align 1
  %93 = load i1, ptr %70, align 1
  %94 = xor i1 %93, true
  store i1 %94, ptr %.reg2mem5, align 1
  br i1 %93, label %95, label %146

95:                                               ; preds = %80
  %96 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %97 = extractvalue { ptr, ptr, ptr, i32 } %96, 0
  %98 = call ptr @llvm.invariant.start.p0(i64 280, ptr %97)
  %99 = extractvalue { ptr, ptr, ptr, i32 } %96, 3
  %100 = getelementptr ptr, ptr %97, i32 %99
  %101 = load ptr, ptr %100, align 8
  %102 = extractvalue { ptr, ptr, ptr, i32 } %96, 1
  %103 = call ptr %101(ptr %102)
  %104 = load ptr, ptr %103, align 8
  %105 = load i32, ptr %69, align 4
  %106 = getelementptr i8, ptr null, i32 %105
  %107 = ptrtoint ptr %106 to i64
  %108 = getelementptr i8, ptr %104, i64 %107
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %110 = load ptr, ptr %109, align 8
  %111 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %110, 0
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %113 = load ptr, ptr %112, align 8
  %114 = insertvalue { ptr, ptr, ptr, i32 } %111, ptr %113, 1
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %116 = load ptr, ptr %115, align 8
  %117 = insertvalue { ptr, ptr, ptr, i32 } %114, ptr %116, 2
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %119 = load i32, ptr %118, align 4
  %120 = insertvalue { ptr, ptr, ptr, i32 } %117, i32 %119, 3
  %121 = call ptr @llvm.invariant.start.p0(i64 0, ptr %71)
  %122 = call ptr @llvm.invariant.start.p0(i64 280, ptr %110)
  %123 = getelementptr ptr, ptr %110, i32 %119
  %124 = getelementptr ptr, ptr %123, i32 7
  %125 = load ptr, ptr %124, align 8
  %126 = call ptr %125({ ptr, ptr, ptr, i32 } %120, ptr %72)
  %127 = call { ptr } %126({ ptr, ptr, ptr, i32 } %120, { ptr, ptr, ptr, i32 } %120, ptr %71)
  store { ptr } %127, ptr %73, align 8
  %128 = load ptr, ptr %73, align 8
  %129 = load i32, ptr %69, align 4
  %130 = getelementptr i8, ptr null, i32 %129
  %131 = ptrtoint ptr %130 to i64
  %132 = getelementptr i8, ptr %128, i64 %131
  %133 = load i8, ptr %108, align 1
  %134 = load i8, ptr %132, align 1
  %135 = icmp ne i8 %133, %134
  store i1 %135, ptr %74, align 1
  %136 = load i1, ptr %74, align 1
  %137 = xor i1 %136, true
  %138 = zext i1 %137 to i32
  store i32 %138, ptr %.reg2mem3, align 4
  br i1 %136, label %139, label %140

139:                                              ; preds = %95
  br label %145

140:                                              ; preds = %95
  store i32 1, ptr %75, align 4
  %141 = load i32, ptr %69, align 4
  %142 = load i32, ptr %75, align 4
  %143 = add i32 %141, %142
  store i32 %143, ptr %76, align 4
  %144 = load i32, ptr %76, align 4
  store i32 %144, ptr %69, align 4
  br label %145

145:                                              ; preds = %140, %139
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  store i32 %.reload4, ptr %.reg2mem10, align 4
  br label %147

146:                                              ; preds = %80
  store i32 0, ptr %.reg2mem10, align 4
  br label %147

147:                                              ; preds = %146, %145
  %.reload11 = load i32, ptr %.reg2mem10, align 4
  store i32 %.reload11, ptr %.reg2mem1, align 4
  br label %148

148:                                              ; preds = %147
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  %149 = trunc i32 %.reload2 to i1
  %.reload7 = load i1, ptr %.reg2mem5, align 1
  br i1 %149, label %150, label %151

150:                                              ; preds = %148
  br label %80

151:                                              ; preds = %148
  %.reload6 = load i1, ptr %.reg2mem5, align 1
  store i1 %.reload6, ptr %.reg2mem8, align 1
  br label %152

152:                                              ; preds = %151, %78
  %.reload9 = load i1, ptr %.reg2mem8, align 1
  store i1 %.reload9, ptr %.reg2mem, align 1
  br label %153

153:                                              ; preds = %152
  %.reload = load i1, ptr %.reg2mem, align 1
  store i1 %.reload, ptr %77, align 1
  %154 = load i1, ptr %77, align 1
  ret i1 %154
}

define { ptr, i8 } @String_pop_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i8 }, align 8
  %.reg2mem1 = alloca { ptr, i8 }, align 8
  %.reg2mem3 = alloca { ptr, i8 }, align 8
  %.reg2mem5 = alloca { ptr, i8 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @String)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 280, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 1
  %26 = load ptr, ptr %25, align 8
  %27 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %28 = call ptr %26(ptr %27)
  %29 = load i32, ptr %28, align 4
  %30 = icmp eq i32 %29, 0
  %31 = alloca i8, align 1
  %32 = alloca ptr, align 8
  %33 = alloca i64, align 8
  %34 = alloca i32, align 4
  %35 = alloca i32, align 4
  %36 = alloca i8, align 1
  %37 = alloca ptr, align 8
  %38 = alloca i64, align 8
  br i1 %30, label %39, label %45

39:                                               ; preds = %3
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %33, align 4
  %40 = load i64, ptr %33, align 4
  store i64 %40, ptr %32, align 4
  %41 = load ptr, ptr %32, align 8
  %42 = insertvalue { ptr, i8 } undef, ptr %41, 0
  %43 = load i8, ptr %31, align 1
  %44 = insertvalue { ptr, i8 } %42, i8 %43, 1
  store { ptr, i8 } %44, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i8 }, ptr %.reg2mem3, align 8
  store { ptr, i8 } %.reload4, ptr %.reg2mem5, align 8
  br label %96

45:                                               ; preds = %3
  %46 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %47 = extractvalue { ptr, ptr, ptr, i32 } %46, 0
  %48 = call ptr @llvm.invariant.start.p0(i64 280, ptr %47)
  %49 = extractvalue { ptr, ptr, ptr, i32 } %46, 3
  %50 = getelementptr ptr, ptr %47, i32 %49
  %51 = getelementptr ptr, ptr %50, i32 1
  %52 = load ptr, ptr %51, align 8
  %53 = extractvalue { ptr, ptr, ptr, i32 } %46, 1
  %54 = call ptr %52(ptr %53)
  store i32 1, ptr %34, align 4
  %55 = load i32, ptr %54, align 4
  %56 = load i32, ptr %34, align 4
  %57 = sub i32 %55, %56
  store i32 %57, ptr %35, align 4
  %58 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %59 = extractvalue { ptr, ptr, ptr, i32 } %58, 0
  %60 = call ptr @llvm.invariant.start.p0(i64 280, ptr %59)
  %61 = extractvalue { ptr, ptr, ptr, i32 } %58, 3
  %62 = getelementptr ptr, ptr %59, i32 %61
  %63 = getelementptr ptr, ptr %62, i32 1
  %64 = load ptr, ptr %63, align 8
  %65 = extractvalue { ptr, ptr, ptr, i32 } %58, 1
  %66 = call ptr %64(ptr %65)
  %67 = load i32, ptr %35, align 4
  store i32 %67, ptr %66, align 4
  %68 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %69 = extractvalue { ptr, ptr, ptr, i32 } %68, 0
  %70 = call ptr @llvm.invariant.start.p0(i64 280, ptr %69)
  %71 = extractvalue { ptr, ptr, ptr, i32 } %68, 3
  %72 = getelementptr ptr, ptr %69, i32 %71
  %73 = load ptr, ptr %72, align 8
  %74 = extractvalue { ptr, ptr, ptr, i32 } %68, 1
  %75 = call ptr %73(ptr %74)
  %76 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %77 = extractvalue { ptr, ptr, ptr, i32 } %76, 0
  %78 = call ptr @llvm.invariant.start.p0(i64 280, ptr %77)
  %79 = extractvalue { ptr, ptr, ptr, i32 } %76, 3
  %80 = getelementptr ptr, ptr %77, i32 %79
  %81 = getelementptr ptr, ptr %80, i32 1
  %82 = load ptr, ptr %81, align 8
  %83 = extractvalue { ptr, ptr, ptr, i32 } %76, 1
  %84 = call ptr %82(ptr %83)
  %85 = load ptr, ptr %75, align 8
  %86 = load i32, ptr %84, align 4
  %87 = getelementptr i8, ptr null, i32 %86
  %88 = ptrtoint ptr %87 to i64
  %89 = getelementptr i8, ptr %85, i64 %88
  %90 = load i8, ptr %89, align 1
  store i8 %90, ptr %36, align 1
  store i64 ptrtoint (ptr @i8_typ to i64), ptr %38, align 4
  %91 = load i64, ptr %38, align 4
  store i64 %91, ptr %37, align 4
  %92 = load ptr, ptr %37, align 8
  %93 = insertvalue { ptr, i8 } undef, ptr %92, 0
  %94 = load i8, ptr %36, align 1
  %95 = insertvalue { ptr, i8 } %93, i8 %94, 1
  store { ptr, i8 } %95, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i8 }, ptr %.reg2mem1, align 8
  store { ptr, i8 } %.reload2, ptr %.reg2mem5, align 8
  br label %96

96:                                               ; preds = %45, %39
  %.reload6 = load { ptr, i8 }, ptr %.reg2mem5, align 8
  store { ptr, i8 } %.reload6, ptr %.reg2mem, align 8
  br label %97

97:                                               ; preds = %96
  %.reload = load { ptr, i8 }, ptr %.reg2mem, align 8
  ret { ptr, i8 } %.reload
}

define { ptr, ptr, ptr, i32 } @String_copy_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i1, align 1
  %.reg2mem6 = alloca i32, align 4
  %.reg2mem11 = alloca i32, align 4
  %.reg2mem13 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @String)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 280, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 1
  %26 = load ptr, ptr %25, align 8
  %27 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %28 = call ptr %26(ptr %27)
  %29 = load i32, ptr %28, align 4
  %30 = getelementptr i8, ptr null, i32 %29
  %31 = ptrtoint ptr %30 to i64
  %32 = call ptr @malloc(i64 %31)
  %33 = alloca ptr, align 8
  store ptr %32, ptr %33, align 8
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 0
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %37 = load ptr, ptr %35, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 1
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %40 = load ptr, ptr %38, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 2
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %43 = load ptr, ptr %41, align 8
  store ptr %43, ptr %42, align 8
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 3
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %46 = load i32, ptr %44, align 4
  store i32 %46, ptr %45, align 4
  %47 = call ptr @llvm.invariant.start.p0(i64 16, ptr %34)
  %48 = alloca i1, align 1
  %49 = alloca i32, align 4
  %50 = alloca i32, align 4
  %51 = alloca { ptr, ptr, ptr, i32 }, align 8
  %52 = alloca [3 x ptr], align 8
  %53 = alloca [3 x ptr], align 8
  %54 = alloca { ptr, ptr, ptr, i32 }, align 8
  %55 = alloca { ptr, ptr, ptr, i32 }, align 8
  %56 = alloca { ptr, ptr, ptr, i32 }, align 8
  store i32 0, ptr %.reg2mem13, align 4
  br label %57

57:                                               ; preds = %._crit_edge, %3
  %.reload14 = load i32, ptr %.reg2mem13, align 4
  store i32 %.reload14, ptr %.reg2mem6, align 4
  %58 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %59 = extractvalue { ptr, ptr, ptr, i32 } %58, 0
  %60 = call ptr @llvm.invariant.start.p0(i64 280, ptr %59)
  %61 = extractvalue { ptr, ptr, ptr, i32 } %58, 3
  %62 = getelementptr ptr, ptr %59, i32 %61
  %63 = getelementptr ptr, ptr %62, i32 1
  %64 = load ptr, ptr %63, align 8
  %65 = extractvalue { ptr, ptr, ptr, i32 } %58, 1
  %66 = call ptr %64(ptr %65)
  %67 = load i32, ptr %66, align 4
  %.reload10 = load i32, ptr %.reg2mem6, align 4
  %68 = icmp slt i32 %.reload10, %67
  store i1 %68, ptr %48, align 1
  %69 = load i1, ptr %48, align 1
  store i1 %69, ptr %.reg2mem3, align 1
  %.reload5 = load i1, ptr %.reg2mem3, align 1
  br i1 %.reload5, label %70, label %91

70:                                               ; preds = %57
  %71 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %72 = extractvalue { ptr, ptr, ptr, i32 } %71, 0
  %73 = call ptr @llvm.invariant.start.p0(i64 280, ptr %72)
  %74 = extractvalue { ptr, ptr, ptr, i32 } %71, 3
  %75 = getelementptr ptr, ptr %72, i32 %74
  %76 = load ptr, ptr %75, align 8
  %77 = extractvalue { ptr, ptr, ptr, i32 } %71, 1
  %78 = call ptr %76(ptr %77)
  %79 = load ptr, ptr %78, align 8
  %.reload9 = load i32, ptr %.reg2mem6, align 4
  %80 = getelementptr i8, ptr null, i32 %.reload9
  %81 = ptrtoint ptr %80 to i64
  %82 = getelementptr i8, ptr %79, i64 %81
  %83 = load ptr, ptr %34, align 8
  %.reload8 = load i32, ptr %.reg2mem6, align 4
  %84 = getelementptr i8, ptr null, i32 %.reload8
  %85 = ptrtoint ptr %84 to i64
  %86 = getelementptr i8, ptr %83, i64 %85
  %87 = load i8, ptr %82, align 1
  store i8 %87, ptr %86, align 1
  store i32 1, ptr %49, align 4
  %88 = load i32, ptr %49, align 4
  %.reload7 = load i32, ptr %.reg2mem6, align 4
  %89 = add i32 %.reload7, %88
  store i32 %89, ptr %50, align 4
  %90 = load i32, ptr %50, align 4
  store i32 %90, ptr %.reg2mem1, align 4
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem11, align 4
  br label %92

91:                                               ; preds = %57
  store i32 poison, ptr %.reg2mem11, align 4
  br label %92

92:                                               ; preds = %91, %70
  %.reload12 = load i32, ptr %.reg2mem11, align 4
  store i32 %.reload12, ptr %.reg2mem, align 4
  br label %93

93:                                               ; preds = %92
  %.reload4 = load i1, ptr %.reg2mem3, align 1
  br i1 %.reload4, label %._crit_edge, label %94

._crit_edge:                                      ; preds = %93
  %.reload = load i32, ptr %.reg2mem, align 4
  store i32 %.reload, ptr %.reg2mem13, align 4
  br label %57

94:                                               ; preds = %93
  %95 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %96 = extractvalue { ptr, ptr, ptr, i32 } %95, 0
  %97 = call ptr @llvm.invariant.start.p0(i64 280, ptr %96)
  %98 = extractvalue { ptr, ptr, ptr, i32 } %95, 3
  %99 = getelementptr ptr, ptr %96, i32 %98
  %100 = getelementptr ptr, ptr %99, i32 1
  %101 = load ptr, ptr %100, align 8
  %102 = extractvalue { ptr, ptr, ptr, i32 } %95, 1
  %103 = call ptr %101(ptr %102)
  %104 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %105 = extractvalue { ptr, ptr, ptr, i32 } %104, 0
  %106 = call ptr @llvm.invariant.start.p0(i64 280, ptr %105)
  %107 = extractvalue { ptr, ptr, ptr, i32 } %104, 3
  %108 = getelementptr ptr, ptr %105, i32 %107
  %109 = getelementptr ptr, ptr %108, i32 1
  %110 = load ptr, ptr %109, align 8
  %111 = extractvalue { ptr, ptr, ptr, i32 } %104, 1
  %112 = call ptr %110(ptr %111)
  %113 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 1
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 3
  store ptr @String, ptr %51, align 8
  store ptr %113, ptr %114, align 8
  store i32 7, ptr %115, align 4
  %116 = call ptr @llvm.invariant.start.p0(i64 16, ptr %51)
  %117 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %118 = extractvalue { ptr, ptr, ptr, i32 } %117, 0
  %119 = call ptr @llvm.invariant.start.p0(i64 280, ptr %118)
  %120 = extractvalue { ptr, ptr, ptr, i32 } %117, 3
  %121 = getelementptr ptr, ptr %118, i32 %120
  %122 = getelementptr ptr, ptr %121, i32 1
  %123 = load ptr, ptr %122, align 8
  %124 = extractvalue { ptr, ptr, ptr, i32 } %117, 1
  %125 = call ptr %123(ptr %124)
  %126 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %127 = extractvalue { ptr, ptr, ptr, i32 } %126, 0
  %128 = call ptr @llvm.invariant.start.p0(i64 280, ptr %127)
  %129 = extractvalue { ptr, ptr, ptr, i32 } %126, 3
  %130 = getelementptr ptr, ptr %127, i32 %129
  %131 = getelementptr ptr, ptr %130, i32 1
  %132 = load ptr, ptr %131, align 8
  %133 = extractvalue { ptr, ptr, ptr, i32 } %126, 1
  %134 = call ptr %132(ptr %133)
  %135 = getelementptr { ptr }, ptr %34, i32 0, i32 0
  %136 = load ptr, ptr %135, align 8
  %137 = insertvalue { ptr } undef, ptr %136, 0
  %138 = load i32, ptr %125, align 4
  %139 = load i32, ptr %134, align 4
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 0
  %141 = load ptr, ptr %140, align 8
  %142 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %141, 0
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 1
  %144 = load ptr, ptr %143, align 8
  %145 = insertvalue { ptr, ptr, ptr, i32 } %142, ptr %144, 1
  %146 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 2
  %147 = load ptr, ptr %146, align 8
  %148 = insertvalue { ptr, ptr, ptr, i32 } %145, ptr %147, 2
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 3
  %150 = load i32, ptr %149, align 4
  %151 = insertvalue { ptr, ptr, ptr, i32 } %148, i32 %150, 3
  %152 = call ptr @llvm.invariant.start.p0(i64 24, ptr %52)
  %153 = getelementptr [3 x ptr], ptr %52, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %153, align 8
  %154 = getelementptr [3 x ptr], ptr %52, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %154, align 8
  %155 = getelementptr [3 x ptr], ptr %52, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %155, align 8
  %156 = call ptr @llvm.invariant.start.p0(i64 280, ptr %141)
  %157 = getelementptr ptr, ptr %141, i32 %150
  %158 = getelementptr ptr, ptr %157, i32 4
  %159 = load ptr, ptr %158, align 8
  %160 = getelementptr [3 x ptr], ptr %53, i32 0, i32 0
  store ptr @buffer_typ, ptr %160, align 8
  %161 = getelementptr [3 x ptr], ptr %53, i32 0, i32 1
  store ptr @i32_typ, ptr %161, align 8
  %162 = getelementptr [3 x ptr], ptr %53, i32 0, i32 2
  store ptr @i32_typ, ptr %162, align 8
  %163 = call ptr %159({ ptr, ptr, ptr, i32 } %151, ptr %53, { ptr } %137, i32 %138, i32 %139)
  call void %163({ ptr, ptr, ptr, i32 } %151, { ptr, ptr, ptr, i32 } %151, ptr %52, { ptr } %137, i32 %138, i32 %139)
  %164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 0
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 0
  %166 = load ptr, ptr %164, align 8
  store ptr %166, ptr %165, align 8
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 1
  %168 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 1
  %169 = load ptr, ptr %167, align 8
  store ptr %169, ptr %168, align 8
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 2
  %171 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 2
  %172 = load ptr, ptr %170, align 8
  store ptr %172, ptr %171, align 8
  %173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 3
  %174 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 3
  %175 = load i32, ptr %173, align 4
  store i32 %175, ptr %174, align 4
  call void @set_offset(ptr %54, ptr @String)
  %176 = call ptr @llvm.invariant.start.p0(i64 24, ptr %54)
  %177 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 0
  %178 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 0
  %179 = load ptr, ptr %177, align 8
  store ptr %179, ptr %178, align 8
  %180 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 1
  %181 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  %182 = load ptr, ptr %180, align 8
  store ptr %182, ptr %181, align 8
  %183 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 2
  %184 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 2
  %185 = load ptr, ptr %183, align 8
  store ptr %185, ptr %184, align 8
  %186 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 3
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  %188 = load i32, ptr %186, align 4
  store i32 %188, ptr %187, align 4
  %189 = call ptr @llvm.invariant.start.p0(i64 16, ptr %55)
  %190 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 0
  %191 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 0
  %192 = load ptr, ptr %190, align 8
  store ptr %192, ptr %191, align 8
  %193 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  %194 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 1
  %195 = load ptr, ptr %193, align 8
  store ptr %195, ptr %194, align 8
  %196 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 2
  %197 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 2
  %198 = load ptr, ptr %196, align 8
  store ptr %198, ptr %197, align 8
  %199 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  %200 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 3
  %201 = load i32, ptr %199, align 4
  store i32 %201, ptr %200, align 4
  call void @set_offset(ptr %56, ptr @String)
  %202 = call ptr @llvm.invariant.start.p0(i64 24, ptr %56)
  %203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 0
  %204 = load ptr, ptr %203, align 8
  %205 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %204, 0
  %206 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 1
  %207 = load ptr, ptr %206, align 8
  %208 = insertvalue { ptr, ptr, ptr, i32 } %205, ptr %207, 1
  %209 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 2
  %210 = load ptr, ptr %209, align 8
  %211 = insertvalue { ptr, ptr, ptr, i32 } %208, ptr %210, 2
  %212 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 3
  %213 = load i32, ptr %212, align 4
  %214 = insertvalue { ptr, ptr, ptr, i32 } %211, i32 %213, 3
  ret { ptr, ptr, ptr, i32 } %214
}

define { ptr } @String_c_string_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i1, align 1
  %.reg2mem6 = alloca i32, align 4
  %.reg2mem11 = alloca i32, align 4
  %.reg2mem13 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @String)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 280, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 1
  %26 = load ptr, ptr %25, align 8
  %27 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %28 = call ptr %26(ptr %27)
  %29 = load i32, ptr %28, align 4
  %30 = add i32 %29, 1
  %31 = getelementptr i8, ptr null, i32 %30
  %32 = ptrtoint ptr %31 to i64
  %33 = call ptr @malloc(i64 %32)
  %34 = alloca ptr, align 8
  store ptr %33, ptr %34, align 8
  %35 = alloca { ptr, ptr, ptr, i32 }, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %38 = load ptr, ptr %36, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %41 = load ptr, ptr %39, align 8
  store ptr %41, ptr %40, align 8
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %44 = load ptr, ptr %42, align 8
  store ptr %44, ptr %43, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %47 = load i32, ptr %45, align 4
  store i32 %47, ptr %46, align 4
  %48 = call ptr @llvm.invariant.start.p0(i64 16, ptr %35)
  %49 = alloca i1, align 1
  %50 = alloca i32, align 4
  %51 = alloca i32, align 4
  %52 = alloca i8, align 1
  store i32 0, ptr %.reg2mem13, align 4
  br label %53

53:                                               ; preds = %._crit_edge, %3
  %.reload14 = load i32, ptr %.reg2mem13, align 4
  store i32 %.reload14, ptr %.reg2mem6, align 4
  %54 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %55 = extractvalue { ptr, ptr, ptr, i32 } %54, 0
  %56 = call ptr @llvm.invariant.start.p0(i64 280, ptr %55)
  %57 = extractvalue { ptr, ptr, ptr, i32 } %54, 3
  %58 = getelementptr ptr, ptr %55, i32 %57
  %59 = getelementptr ptr, ptr %58, i32 1
  %60 = load ptr, ptr %59, align 8
  %61 = extractvalue { ptr, ptr, ptr, i32 } %54, 1
  %62 = call ptr %60(ptr %61)
  %63 = load i32, ptr %62, align 4
  %.reload10 = load i32, ptr %.reg2mem6, align 4
  %64 = icmp slt i32 %.reload10, %63
  store i1 %64, ptr %49, align 1
  %65 = load i1, ptr %49, align 1
  store i1 %65, ptr %.reg2mem3, align 1
  %.reload5 = load i1, ptr %.reg2mem3, align 1
  br i1 %.reload5, label %66, label %87

66:                                               ; preds = %53
  %67 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %68 = extractvalue { ptr, ptr, ptr, i32 } %67, 0
  %69 = call ptr @llvm.invariant.start.p0(i64 280, ptr %68)
  %70 = extractvalue { ptr, ptr, ptr, i32 } %67, 3
  %71 = getelementptr ptr, ptr %68, i32 %70
  %72 = load ptr, ptr %71, align 8
  %73 = extractvalue { ptr, ptr, ptr, i32 } %67, 1
  %74 = call ptr %72(ptr %73)
  %75 = load ptr, ptr %74, align 8
  %.reload9 = load i32, ptr %.reg2mem6, align 4
  %76 = getelementptr i8, ptr null, i32 %.reload9
  %77 = ptrtoint ptr %76 to i64
  %78 = getelementptr i8, ptr %75, i64 %77
  %79 = load ptr, ptr %35, align 8
  %.reload8 = load i32, ptr %.reg2mem6, align 4
  %80 = getelementptr i8, ptr null, i32 %.reload8
  %81 = ptrtoint ptr %80 to i64
  %82 = getelementptr i8, ptr %79, i64 %81
  %83 = load i8, ptr %78, align 1
  store i8 %83, ptr %82, align 1
  store i32 1, ptr %50, align 4
  %84 = load i32, ptr %50, align 4
  %.reload7 = load i32, ptr %.reg2mem6, align 4
  %85 = add i32 %.reload7, %84
  store i32 %85, ptr %51, align 4
  %86 = load i32, ptr %51, align 4
  store i32 %86, ptr %.reg2mem1, align 4
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem11, align 4
  br label %88

87:                                               ; preds = %53
  store i32 poison, ptr %.reg2mem11, align 4
  br label %88

88:                                               ; preds = %87, %66
  %.reload12 = load i32, ptr %.reg2mem11, align 4
  store i32 %.reload12, ptr %.reg2mem, align 4
  br label %89

89:                                               ; preds = %88
  %.reload4 = load i1, ptr %.reg2mem3, align 1
  br i1 %.reload4, label %._crit_edge, label %90

._crit_edge:                                      ; preds = %89
  %.reload = load i32, ptr %.reg2mem, align 4
  store i32 %.reload, ptr %.reg2mem13, align 4
  br label %53

90:                                               ; preds = %89
  store i8 0, ptr %52, align 1
  %91 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %92 = extractvalue { ptr, ptr, ptr, i32 } %91, 0
  %93 = call ptr @llvm.invariant.start.p0(i64 280, ptr %92)
  %94 = extractvalue { ptr, ptr, ptr, i32 } %91, 3
  %95 = getelementptr ptr, ptr %92, i32 %94
  %96 = getelementptr ptr, ptr %95, i32 1
  %97 = load ptr, ptr %96, align 8
  %98 = extractvalue { ptr, ptr, ptr, i32 } %91, 1
  %99 = call ptr %97(ptr %98)
  %100 = load ptr, ptr %35, align 8
  %101 = load i32, ptr %99, align 4
  %102 = getelementptr i8, ptr null, i32 %101
  %103 = ptrtoint ptr %102 to i64
  %104 = getelementptr i8, ptr %100, i64 %103
  %105 = load i8, ptr %52, align 1
  store i8 %105, ptr %104, align 1
  %106 = getelementptr { ptr }, ptr %35, i32 0, i32 0
  %107 = load ptr, ptr %106, align 8
  %108 = insertvalue { ptr } undef, ptr %107, 0
  ret { ptr } %108
}

define { ptr, ptr, ptr, i32 } @String_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @String)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr, ptr, ptr, i32 }, i32 }, ptr null, i32 1) to i64))
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  store ptr @StringIterator, ptr %21, align 8
  store ptr %20, ptr %22, align 8
  store i32 7, ptr %23, align 4
  %24 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %25 = alloca { ptr, ptr, ptr, i32 }, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 0
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 1
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 2
  %34 = load ptr, ptr %32, align 8
  store ptr %34, ptr %33, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 3
  %37 = load i32, ptr %35, align 4
  store i32 %37, ptr %36, align 4
  call void @set_offset(ptr %25, ptr @String)
  %38 = call ptr @llvm.invariant.start.p0(i64 24, ptr %25)
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 0
  %40 = load ptr, ptr %39, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %40, 0
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 1
  %43 = load ptr, ptr %42, align 8
  %44 = insertvalue { ptr, ptr, ptr, i32 } %41, ptr %43, 1
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 2
  %46 = load ptr, ptr %45, align 8
  %47 = insertvalue { ptr, ptr, ptr, i32 } %44, ptr %46, 2
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 3
  %49 = load i32, ptr %48, align 4
  %50 = insertvalue { ptr, ptr, ptr, i32 } %47, i32 %49, 3
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %52 = load ptr, ptr %51, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %52, 0
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %55 = load ptr, ptr %54, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %55, 1
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %58 = load ptr, ptr %57, align 8
  %59 = insertvalue { ptr, ptr, ptr, i32 } %56, ptr %58, 2
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %61 = load i32, ptr %60, align 4
  %62 = insertvalue { ptr, ptr, ptr, i32 } %59, i32 %61, 3
  %63 = alloca [1 x ptr], align 8
  %64 = call ptr @llvm.invariant.start.p0(i64 8, ptr %63)
  %65 = getelementptr [1 x ptr], ptr %63, i32 0, i32 0
  store ptr @_parameterization_String, ptr %65, align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 48, ptr %52)
  %67 = getelementptr ptr, ptr %52, i32 %61
  %68 = getelementptr ptr, ptr %67, i32 2
  %69 = load ptr, ptr %68, align 8
  %70 = alloca [1 x ptr], align 8
  %71 = getelementptr [1 x ptr], ptr %70, i32 0, i32 0
  store ptr %40, ptr %71, align 8
  %72 = call ptr %69({ ptr, ptr, ptr, i32 } %62, ptr %70, { ptr, ptr, ptr, i32 } %50)
  call void %72({ ptr, ptr, ptr, i32 } %62, { ptr, ptr, ptr, i32 } %62, ptr %63, { ptr, ptr, ptr, i32 } %50)
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %76 = load ptr, ptr %74, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %79 = load ptr, ptr %77, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %82 = load ptr, ptr %80, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %85 = load i32, ptr %83, align 4
  store i32 %85, ptr %84, align 4
  call void @set_offset(ptr %73, ptr @Iterator)
  %86 = call ptr @llvm.invariant.start.p0(i64 24, ptr %73)
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %88 = load ptr, ptr %87, align 8
  %89 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %88, 0
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } %89, ptr %91, 1
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %94 = load ptr, ptr %93, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %94, 2
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %97 = load i32, ptr %96, align 4
  %98 = insertvalue { ptr, ptr, ptr, i32 } %95, i32 %97, 3
  ret { ptr, ptr, ptr, i32 } %98
}

define { ptr, ptr, ptr, i32 } @String_repr_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @String)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = load i32, ptr %30, align 4
  store i32 %32, ptr %31, align 4
  call void @set_offset(ptr %20, ptr @String)
  %33 = call ptr @llvm.invariant.start.p0(i64 24, ptr %20)
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %35 = load ptr, ptr %34, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %35, 0
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %38 = load ptr, ptr %37, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %36, ptr %38, 1
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %41 = load ptr, ptr %40, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } %39, ptr %41, 2
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %44 = load i32, ptr %43, align 4
  %45 = insertvalue { ptr, ptr, ptr, i32 } %42, i32 %44, 3
  ret { ptr, ptr, ptr, i32 } %45
}

define ptr @StringIterator_field_str(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, i32 }, ptr %0, i32 0, i32 0
  ret ptr %2
}

define ptr @StringIterator_field_index(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, i32 }, ptr %0, i32 0, i32 1
  ret ptr %2
}

define ptr @StringIterator_B_init_strString({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [6 x ptr], ptr %16, i32 0, i32 4
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @StringIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [6 x ptr], ptr %4, i32 0, i32 5
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @StringIterator_init_strString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @StringIterator)
  %20 = call ptr @llvm.invariant.start.p0(i64 24, ptr %7)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @String)
  %36 = call ptr @llvm.invariant.start.p0(i64 24, ptr %23)
  %37 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %38 = extractvalue { ptr, ptr, ptr, i32 } %37, 0
  %39 = call ptr @llvm.invariant.start.p0(i64 48, ptr %38)
  %40 = extractvalue { ptr, ptr, ptr, i32 } %37, 3
  %41 = getelementptr ptr, ptr %38, i32 %40
  %42 = load ptr, ptr %41, align 8
  %43 = extractvalue { ptr, ptr, ptr, i32 } %37, 1
  %44 = call ptr %42(ptr %43)
  %45 = alloca { ptr, ptr, ptr, i32 }, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %48 = load ptr, ptr %46, align 8
  store ptr %48, ptr %47, align 8
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %51 = load ptr, ptr %49, align 8
  store ptr %51, ptr %50, align 8
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %54 = load ptr, ptr %52, align 8
  store ptr %54, ptr %53, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %57 = load i32, ptr %55, align 4
  store i32 %57, ptr %56, align 4
  call void @set_offset(ptr %45, ptr @String)
  %58 = call ptr @llvm.invariant.start.p0(i64 24, ptr %45)
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 0
  %61 = load ptr, ptr %59, align 8
  store ptr %61, ptr %60, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 1
  %64 = load ptr, ptr %62, align 8
  store ptr %64, ptr %63, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 2
  %67 = load ptr, ptr %65, align 8
  store ptr %67, ptr %66, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 3
  %70 = load i32, ptr %68, align 4
  store i32 %70, ptr %69, align 4
  %71 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %72 = extractvalue { ptr, ptr, ptr, i32 } %71, 0
  %73 = call ptr @llvm.invariant.start.p0(i64 48, ptr %72)
  %74 = extractvalue { ptr, ptr, ptr, i32 } %71, 3
  %75 = getelementptr ptr, ptr %72, i32 %74
  %76 = getelementptr ptr, ptr %75, i32 1
  %77 = load ptr, ptr %76, align 8
  %78 = extractvalue { ptr, ptr, ptr, i32 } %71, 1
  %79 = call ptr %77(ptr %78)
  store i32 0, ptr %79, align 4
  ret void
}

define { ptr, i160 } @StringIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @StringIterator)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 48, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 1
  %26 = load ptr, ptr %25, align 8
  %27 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %28 = call ptr %26(ptr %27)
  %29 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %30 = extractvalue { ptr, ptr, ptr, i32 } %29, 0
  %31 = call ptr @llvm.invariant.start.p0(i64 48, ptr %30)
  %32 = extractvalue { ptr, ptr, ptr, i32 } %29, 3
  %33 = getelementptr ptr, ptr %30, i32 %32
  %34 = load ptr, ptr %33, align 8
  %35 = extractvalue { ptr, ptr, ptr, i32 } %29, 1
  %36 = call ptr %34(ptr %35)
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %38 = load ptr, ptr %37, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %38, 0
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %41 = load ptr, ptr %40, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } %39, ptr %41, 1
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %44 = load ptr, ptr %43, align 8
  %45 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %44, 2
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %47 = load i32, ptr %46, align 4
  %48 = insertvalue { ptr, ptr, ptr, i32 } %45, i32 %47, 3
  %49 = alloca [0 x ptr], align 8
  %50 = call ptr @llvm.invariant.start.p0(i64 0, ptr %49)
  %51 = call ptr @llvm.invariant.start.p0(i64 280, ptr %38)
  %52 = getelementptr ptr, ptr %38, i32 %47
  %53 = getelementptr ptr, ptr %52, i32 5
  %54 = load ptr, ptr %53, align 8
  %55 = alloca [0 x ptr], align 8
  %56 = call ptr %54({ ptr, ptr, ptr, i32 } %48, ptr %55)
  %57 = call i32 %56({ ptr, ptr, ptr, i32 } %48, { ptr, ptr, ptr, i32 } %48, ptr %49)
  %58 = load i32, ptr %28, align 4
  %59 = icmp slt i32 %58, %57
  %60 = alloca i32, align 4
  %61 = alloca i32, align 4
  %62 = alloca [0 x ptr], align 8
  %63 = alloca [0 x ptr], align 8
  %64 = alloca ptr, align 8
  %65 = alloca i32, align 4
  %66 = alloca i32, align 4
  %67 = alloca { ptr, ptr, ptr, i32 }, align 8
  %68 = alloca [0 x ptr], align 8
  %69 = alloca [0 x ptr], align 8
  %70 = alloca ptr, align 8
  %71 = alloca i32, align 4
  %72 = alloca i32, align 4
  %73 = alloca [1 x ptr], align 8
  %74 = alloca [1 x ptr], align 8
  %75 = alloca i160, align 8
  %76 = alloca ptr, align 8
  %77 = alloca i64, align 8
  br i1 %59, label %78, label %215

78:                                               ; preds = %3
  %79 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %80 = extractvalue { ptr, ptr, ptr, i32 } %79, 0
  %81 = call ptr @llvm.invariant.start.p0(i64 48, ptr %80)
  %82 = extractvalue { ptr, ptr, ptr, i32 } %79, 3
  %83 = getelementptr ptr, ptr %80, i32 %82
  %84 = getelementptr ptr, ptr %83, i32 1
  %85 = load ptr, ptr %84, align 8
  %86 = extractvalue { ptr, ptr, ptr, i32 } %79, 1
  %87 = call ptr %85(ptr %86)
  store i32 1, ptr %60, align 4
  %88 = load i32, ptr %87, align 4
  %89 = load i32, ptr %60, align 4
  %90 = add i32 %88, %89
  store i32 %90, ptr %61, align 4
  %91 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %92 = extractvalue { ptr, ptr, ptr, i32 } %91, 0
  %93 = call ptr @llvm.invariant.start.p0(i64 48, ptr %92)
  %94 = extractvalue { ptr, ptr, ptr, i32 } %91, 3
  %95 = getelementptr ptr, ptr %92, i32 %94
  %96 = getelementptr ptr, ptr %95, i32 1
  %97 = load ptr, ptr %96, align 8
  %98 = extractvalue { ptr, ptr, ptr, i32 } %91, 1
  %99 = call ptr %97(ptr %98)
  %100 = load i32, ptr %61, align 4
  store i32 %100, ptr %99, align 4
  %101 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %102 = extractvalue { ptr, ptr, ptr, i32 } %101, 0
  %103 = call ptr @llvm.invariant.start.p0(i64 48, ptr %102)
  %104 = extractvalue { ptr, ptr, ptr, i32 } %101, 3
  %105 = getelementptr ptr, ptr %102, i32 %104
  %106 = load ptr, ptr %105, align 8
  %107 = extractvalue { ptr, ptr, ptr, i32 } %101, 1
  %108 = call ptr %106(ptr %107)
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 0
  %110 = load ptr, ptr %109, align 8
  %111 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %110, 0
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 1
  %113 = load ptr, ptr %112, align 8
  %114 = insertvalue { ptr, ptr, ptr, i32 } %111, ptr %113, 1
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 2
  %116 = load ptr, ptr %115, align 8
  %117 = insertvalue { ptr, ptr, ptr, i32 } %114, ptr %116, 2
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 3
  %119 = load i32, ptr %118, align 4
  %120 = insertvalue { ptr, ptr, ptr, i32 } %117, i32 %119, 3
  %121 = call ptr @llvm.invariant.start.p0(i64 0, ptr %62)
  %122 = call ptr @llvm.invariant.start.p0(i64 280, ptr %110)
  %123 = getelementptr ptr, ptr %110, i32 %119
  %124 = getelementptr ptr, ptr %123, i32 7
  %125 = load ptr, ptr %124, align 8
  %126 = call ptr %125({ ptr, ptr, ptr, i32 } %120, ptr %63)
  %127 = call { ptr } %126({ ptr, ptr, ptr, i32 } %120, { ptr, ptr, ptr, i32 } %120, ptr %62)
  store { ptr } %127, ptr %64, align 8
  %128 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %129 = extractvalue { ptr, ptr, ptr, i32 } %128, 0
  %130 = call ptr @llvm.invariant.start.p0(i64 48, ptr %129)
  %131 = extractvalue { ptr, ptr, ptr, i32 } %128, 3
  %132 = getelementptr ptr, ptr %129, i32 %131
  %133 = getelementptr ptr, ptr %132, i32 1
  %134 = load ptr, ptr %133, align 8
  %135 = extractvalue { ptr, ptr, ptr, i32 } %128, 1
  %136 = call ptr %134(ptr %135)
  store i32 1, ptr %65, align 4
  %137 = load i32, ptr %136, align 4
  %138 = load i32, ptr %65, align 4
  %139 = sub i32 %137, %138
  store i32 %139, ptr %66, align 4
  %140 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ i8 }, ptr null, i32 1) to i64))
  %141 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 1
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 3
  store ptr @Character, ptr %67, align 8
  store ptr %140, ptr %141, align 8
  store i32 7, ptr %142, align 4
  %143 = call ptr @llvm.invariant.start.p0(i64 16, ptr %67)
  %144 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %145 = extractvalue { ptr, ptr, ptr, i32 } %144, 0
  %146 = call ptr @llvm.invariant.start.p0(i64 48, ptr %145)
  %147 = extractvalue { ptr, ptr, ptr, i32 } %144, 3
  %148 = getelementptr ptr, ptr %145, i32 %147
  %149 = load ptr, ptr %148, align 8
  %150 = extractvalue { ptr, ptr, ptr, i32 } %144, 1
  %151 = call ptr %149(ptr %150)
  %152 = getelementptr { ptr, ptr, ptr, i32 }, ptr %151, i32 0, i32 0
  %153 = load ptr, ptr %152, align 8
  %154 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %153, 0
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %151, i32 0, i32 1
  %156 = load ptr, ptr %155, align 8
  %157 = insertvalue { ptr, ptr, ptr, i32 } %154, ptr %156, 1
  %158 = getelementptr { ptr, ptr, ptr, i32 }, ptr %151, i32 0, i32 2
  %159 = load ptr, ptr %158, align 8
  %160 = insertvalue { ptr, ptr, ptr, i32 } %157, ptr %159, 2
  %161 = getelementptr { ptr, ptr, ptr, i32 }, ptr %151, i32 0, i32 3
  %162 = load i32, ptr %161, align 4
  %163 = insertvalue { ptr, ptr, ptr, i32 } %160, i32 %162, 3
  %164 = call ptr @llvm.invariant.start.p0(i64 0, ptr %68)
  %165 = call ptr @llvm.invariant.start.p0(i64 280, ptr %153)
  %166 = getelementptr ptr, ptr %153, i32 %162
  %167 = getelementptr ptr, ptr %166, i32 7
  %168 = load ptr, ptr %167, align 8
  %169 = call ptr %168({ ptr, ptr, ptr, i32 } %163, ptr %69)
  %170 = call { ptr } %169({ ptr, ptr, ptr, i32 } %163, { ptr, ptr, ptr, i32 } %163, ptr %68)
  store { ptr } %170, ptr %70, align 8
  %171 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %172 = extractvalue { ptr, ptr, ptr, i32 } %171, 0
  %173 = call ptr @llvm.invariant.start.p0(i64 48, ptr %172)
  %174 = extractvalue { ptr, ptr, ptr, i32 } %171, 3
  %175 = getelementptr ptr, ptr %172, i32 %174
  %176 = getelementptr ptr, ptr %175, i32 1
  %177 = load ptr, ptr %176, align 8
  %178 = extractvalue { ptr, ptr, ptr, i32 } %171, 1
  %179 = call ptr %177(ptr %178)
  store i32 1, ptr %71, align 4
  %180 = load i32, ptr %179, align 4
  %181 = load i32, ptr %71, align 4
  %182 = sub i32 %180, %181
  store i32 %182, ptr %72, align 4
  %183 = load ptr, ptr %70, align 8
  %184 = load i32, ptr %72, align 4
  %185 = getelementptr i8, ptr null, i32 %184
  %186 = ptrtoint ptr %185 to i64
  %187 = getelementptr i8, ptr %183, i64 %186
  %188 = load i8, ptr %187, align 1
  %189 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 0
  %190 = load ptr, ptr %189, align 8
  %191 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %190, 0
  %192 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 1
  %193 = load ptr, ptr %192, align 8
  %194 = insertvalue { ptr, ptr, ptr, i32 } %191, ptr %193, 1
  %195 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 2
  %196 = load ptr, ptr %195, align 8
  %197 = insertvalue { ptr, ptr, ptr, i32 } %194, ptr %196, 2
  %198 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 3
  %199 = load i32, ptr %198, align 4
  %200 = insertvalue { ptr, ptr, ptr, i32 } %197, i32 %199, 3
  %201 = call ptr @llvm.invariant.start.p0(i64 8, ptr %73)
  %202 = getelementptr [1 x ptr], ptr %73, i32 0, i32 0
  store ptr @_parameterization_Ptri8, ptr %202, align 8
  %203 = call ptr @llvm.invariant.start.p0(i64 40, ptr %190)
  %204 = getelementptr ptr, ptr %190, i32 %199
  %205 = getelementptr ptr, ptr %204, i32 2
  %206 = load ptr, ptr %205, align 8
  %207 = getelementptr [1 x ptr], ptr %74, i32 0, i32 0
  store ptr @i8_typ, ptr %207, align 8
  %208 = call ptr %206({ ptr, ptr, ptr, i32 } %200, ptr %74, i8 %188)
  call void %208({ ptr, ptr, ptr, i32 } %200, { ptr, ptr, ptr, i32 } %200, ptr %73, i8 %188)
  %209 = getelementptr { ptr, i160 }, ptr %67, i32 0, i32 0
  %210 = load ptr, ptr %209, align 8
  %211 = insertvalue { ptr, i160 } undef, ptr %210, 0
  %212 = getelementptr { ptr, i160 }, ptr %67, i32 0, i32 1
  %213 = load i160, ptr %212, align 4
  %214 = insertvalue { ptr, i160 } %211, i160 %213, 1
  store { ptr, i160 } %214, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem5, align 8
  br label %221

215:                                              ; preds = %3
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %77, align 4
  %216 = load i64, ptr %77, align 4
  store i64 %216, ptr %76, align 4
  %217 = load ptr, ptr %76, align 8
  %218 = insertvalue { ptr, i160 } undef, ptr %217, 0
  %219 = load i160, ptr %75, align 4
  %220 = insertvalue { ptr, i160 } %218, i160 %219, 1
  store { ptr, i160 } %220, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem5, align 8
  br label %221

221:                                              ; preds = %215, %78
  %.reload6 = load { ptr, i160 }, ptr %.reg2mem5, align 8
  store { ptr, i160 } %.reload6, ptr %.reg2mem, align 8
  br label %222

222:                                              ; preds = %221
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  ret { ptr, i160 } %.reload
}

define ptr @Character_field_byte(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { i8 }, ptr %0, i32 0, i32 0
  ret ptr %2
}

define ptr @Character_B_byte_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [5 x ptr], ptr %4, i32 0, i32 3
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Character_B_init_bytePtri8({ ptr, ptr, ptr, i32 } %0, ptr %1, i8 %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 2582149688529881115, i64 ptrtoint (ptr @i8_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [5 x ptr], ptr %16, i32 0, i32 4
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define i8 @Character_byte_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Character)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 40, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %27 = call ptr %25(ptr %26)
  %28 = load i8, ptr %27, align 1
  ret i8 %28
}

define void @Character_init_bytePtri8({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i8 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Character)
  %20 = call ptr @llvm.invariant.start.p0(i64 24, ptr %7)
  %21 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %22 = extractvalue { ptr, ptr, ptr, i32 } %21, 0
  %23 = call ptr @llvm.invariant.start.p0(i64 40, ptr %22)
  %24 = extractvalue { ptr, ptr, ptr, i32 } %21, 3
  %25 = getelementptr ptr, ptr %22, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = extractvalue { ptr, ptr, ptr, i32 } %21, 1
  %28 = call ptr %26(ptr %27)
  store i8 %3, ptr %28, align 1
  ret void
}

define ptr @Exception_field_line_number(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { i32, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 0
  ret ptr %2
}

define ptr @Exception_field_file_name(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { i32, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 1
  ret ptr %2
}

define ptr @Exception_field_message(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { i32, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 2
  ret ptr %2
}

define ptr @Exception_B_init_messageString({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [13 x ptr], ptr %16, i32 0, i32 8
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @Exception_B_init_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [13 x ptr], ptr %4, i32 0, i32 9
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Exception_B_set_info_line_numberPtri32_file_nameString({ ptr, ptr, ptr, i32 } %0, ptr %1, i32 %2, { ptr, ptr, ptr, i32 } %3) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = getelementptr [2 x ptr], ptr %1, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr ptr, ptr %7, i32 1
  %9 = getelementptr ptr, ptr %7, i32 2
  %10 = getelementptr ptr, ptr %7, i32 3
  %11 = getelementptr ptr, ptr %7, i32 4
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %15)
  %17 = getelementptr [2 x ptr], ptr %1, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr ptr, ptr %18, i32 1
  %20 = getelementptr ptr, ptr %18, i32 2
  %21 = getelementptr ptr, ptr %18, i32 3
  %22 = getelementptr ptr, ptr %18, i32 4
  %23 = load i64, ptr %19, align 4
  %24 = load i64, ptr %20, align 4
  %25 = load ptr, ptr %21, align 8
  %26 = load ptr, ptr %22, align 8
  %27 = call i1 @subtype_test_wrapper(ptr %25, i64 %24, i64 %23, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %26)
  %28 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %29 = getelementptr [13 x ptr], ptr %28, i32 0, i32 10
  %30 = getelementptr ptr, ptr %29, i32 7
  %31 = load ptr, ptr %30, align 8
  ret ptr %31
}

define ptr @Exception_B_report_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [13 x ptr], ptr %4, i32 0, i32 11
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Exception_B_print_message_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [13 x ptr], ptr %4, i32 0, i32 12
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @Exception_init_messageString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Exception)
  %20 = call ptr @llvm.invariant.start.p0(i64 24, ptr %7)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @String)
  %36 = call ptr @llvm.invariant.start.p0(i64 24, ptr %23)
  %37 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %38 = extractvalue { ptr, ptr, ptr, i32 } %37, 0
  %39 = call ptr @llvm.invariant.start.p0(i64 104, ptr %38)
  %40 = extractvalue { ptr, ptr, ptr, i32 } %37, 3
  %41 = getelementptr ptr, ptr %38, i32 %40
  %42 = getelementptr ptr, ptr %41, i32 2
  %43 = load ptr, ptr %42, align 8
  %44 = extractvalue { ptr, ptr, ptr, i32 } %37, 1
  %45 = call ptr %43(ptr %44)
  %46 = alloca { ptr, ptr, ptr, i32 }, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %49 = load ptr, ptr %47, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %52 = load ptr, ptr %50, align 8
  store ptr %52, ptr %51, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %55 = load ptr, ptr %53, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %58 = load i32, ptr %56, align 4
  store i32 %58, ptr %57, align 4
  call void @set_offset(ptr %46, ptr @String)
  %59 = call ptr @llvm.invariant.start.p0(i64 24, ptr %46)
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %62 = load ptr, ptr %60, align 8
  store ptr %62, ptr %61, align 8
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %65 = load ptr, ptr %63, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %68 = load ptr, ptr %66, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %71 = load i32, ptr %69, align 4
  store i32 %71, ptr %70, align 4
  %72 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %73 = extractvalue { ptr, ptr, ptr, i32 } %72, 0
  %74 = call ptr @llvm.invariant.start.p0(i64 104, ptr %73)
  %75 = extractvalue { ptr, ptr, ptr, i32 } %72, 3
  %76 = getelementptr ptr, ptr %73, i32 %75
  %77 = load ptr, ptr %76, align 8
  %78 = extractvalue { ptr, ptr, ptr, i32 } %72, 1
  %79 = call ptr %77(ptr %78)
  store i32 0, ptr %79, align 4
  %80 = call ptr @malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64))
  %81 = alloca ptr, align 8
  store ptr %80, ptr %81, align 8
  %82 = alloca { ptr, ptr, ptr, i32 }, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 0
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 0
  %85 = load ptr, ptr %83, align 8
  store ptr %85, ptr %84, align 8
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 1
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 1
  %88 = load ptr, ptr %86, align 8
  store ptr %88, ptr %87, align 8
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 2
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 2
  %91 = load ptr, ptr %89, align 8
  store ptr %91, ptr %90, align 8
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 3
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 3
  %94 = load i32, ptr %92, align 4
  store i32 %94, ptr %93, align 4
  %95 = call ptr @llvm.invariant.start.p0(i64 16, ptr %82)
  %96 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %97 = alloca { ptr, ptr, ptr, i32 }, align 8
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  store ptr @String, ptr %97, align 8
  store ptr %96, ptr %98, align 8
  store i32 7, ptr %99, align 4
  %100 = call ptr @llvm.invariant.start.p0(i64 16, ptr %97)
  %101 = getelementptr { ptr }, ptr %82, i32 0, i32 0
  %102 = load ptr, ptr %101, align 8
  %103 = insertvalue { ptr } undef, ptr %102, 0
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 0
  %105 = load ptr, ptr %104, align 8
  %106 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %105, 0
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %108 = load ptr, ptr %107, align 8
  %109 = insertvalue { ptr, ptr, ptr, i32 } %106, ptr %108, 1
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 2
  %111 = load ptr, ptr %110, align 8
  %112 = insertvalue { ptr, ptr, ptr, i32 } %109, ptr %111, 2
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  %114 = load i32, ptr %113, align 4
  %115 = insertvalue { ptr, ptr, ptr, i32 } %112, i32 %114, 3
  %116 = alloca [3 x ptr], align 8
  %117 = call ptr @llvm.invariant.start.p0(i64 24, ptr %116)
  %118 = getelementptr [3 x ptr], ptr %116, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %118, align 8
  %119 = getelementptr [3 x ptr], ptr %116, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %119, align 8
  %120 = getelementptr [3 x ptr], ptr %116, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %120, align 8
  %121 = call ptr @llvm.invariant.start.p0(i64 280, ptr %105)
  %122 = getelementptr ptr, ptr %105, i32 %114
  %123 = getelementptr ptr, ptr %122, i32 4
  %124 = load ptr, ptr %123, align 8
  %125 = alloca [3 x ptr], align 8
  %126 = getelementptr [3 x ptr], ptr %125, i32 0, i32 0
  store ptr @buffer_typ, ptr %126, align 8
  %127 = getelementptr [3 x ptr], ptr %125, i32 0, i32 1
  store ptr @i32_typ, ptr %127, align 8
  %128 = getelementptr [3 x ptr], ptr %125, i32 0, i32 2
  store ptr @i32_typ, ptr %128, align 8
  %129 = call ptr %124({ ptr, ptr, ptr, i32 } %115, ptr %125, { ptr } %103, i32 0, i32 1)
  call void %129({ ptr, ptr, ptr, i32 } %115, { ptr, ptr, ptr, i32 } %115, ptr %116, { ptr } %103, i32 0, i32 1)
  %130 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %131 = extractvalue { ptr, ptr, ptr, i32 } %130, 0
  %132 = call ptr @llvm.invariant.start.p0(i64 104, ptr %131)
  %133 = extractvalue { ptr, ptr, ptr, i32 } %130, 3
  %134 = getelementptr ptr, ptr %131, i32 %133
  %135 = getelementptr ptr, ptr %134, i32 1
  %136 = load ptr, ptr %135, align 8
  %137 = extractvalue { ptr, ptr, ptr, i32 } %130, 1
  %138 = call ptr %136(ptr %137)
  %139 = alloca { ptr, ptr, ptr, i32 }, align 8
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 0
  %141 = getelementptr { ptr, ptr, ptr, i32 }, ptr %139, i32 0, i32 0
  %142 = load ptr, ptr %140, align 8
  store ptr %142, ptr %141, align 8
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %144 = getelementptr { ptr, ptr, ptr, i32 }, ptr %139, i32 0, i32 1
  %145 = load ptr, ptr %143, align 8
  store ptr %145, ptr %144, align 8
  %146 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 2
  %147 = getelementptr { ptr, ptr, ptr, i32 }, ptr %139, i32 0, i32 2
  %148 = load ptr, ptr %146, align 8
  store ptr %148, ptr %147, align 8
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  %150 = getelementptr { ptr, ptr, ptr, i32 }, ptr %139, i32 0, i32 3
  %151 = load i32, ptr %149, align 4
  store i32 %151, ptr %150, align 4
  call void @set_offset(ptr %139, ptr @String)
  %152 = call ptr @llvm.invariant.start.p0(i64 24, ptr %139)
  %153 = getelementptr { ptr, ptr, ptr, i32 }, ptr %139, i32 0, i32 0
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 0
  %155 = load ptr, ptr %153, align 8
  store ptr %155, ptr %154, align 8
  %156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %139, i32 0, i32 1
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 1
  %158 = load ptr, ptr %156, align 8
  store ptr %158, ptr %157, align 8
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %139, i32 0, i32 2
  %160 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 2
  %161 = load ptr, ptr %159, align 8
  store ptr %161, ptr %160, align 8
  %162 = getelementptr { ptr, ptr, ptr, i32 }, ptr %139, i32 0, i32 3
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 3
  %164 = load i32, ptr %162, align 4
  store i32 %164, ptr %163, align 4
  ret void
}

define void @Exception_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Exception)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 104, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %27 = call ptr %25(ptr %26)
  store i32 0, ptr %27, align 4
  %28 = call ptr @malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 7) to i64))
  %29 = alloca ptr, align 8
  store ptr %28, ptr %29, align 8
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 0
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 1
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %36 = load ptr, ptr %34, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 2
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 3
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %42 = load i32, ptr %40, align 4
  store i32 %42, ptr %41, align 4
  %43 = call ptr @llvm.invariant.start.p0(i64 16, ptr %30)
  %44 = load ptr, ptr %30, align 8
  %45 = getelementptr i8, ptr %44, i64 0
  %46 = load i48, ptr @zagqw_None, align 4
  store i48 %46, ptr %45, align 4
  %47 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %48 = alloca { ptr, ptr, ptr, i32 }, align 8
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 1
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 3
  store ptr @String, ptr %48, align 8
  store ptr %47, ptr %49, align 8
  store i32 7, ptr %50, align 4
  %51 = call ptr @llvm.invariant.start.p0(i64 16, ptr %48)
  %52 = getelementptr { ptr }, ptr %30, i32 0, i32 0
  %53 = load ptr, ptr %52, align 8
  %54 = insertvalue { ptr } undef, ptr %53, 0
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 0
  %56 = load ptr, ptr %55, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %56, 0
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } %57, ptr %59, 1
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 2
  %62 = load ptr, ptr %61, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr %62, 2
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 3
  %65 = load i32, ptr %64, align 4
  %66 = insertvalue { ptr, ptr, ptr, i32 } %63, i32 %65, 3
  %67 = alloca [3 x ptr], align 8
  %68 = call ptr @llvm.invariant.start.p0(i64 24, ptr %67)
  %69 = getelementptr [3 x ptr], ptr %67, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %69, align 8
  %70 = getelementptr [3 x ptr], ptr %67, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %70, align 8
  %71 = getelementptr [3 x ptr], ptr %67, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %71, align 8
  %72 = call ptr @llvm.invariant.start.p0(i64 280, ptr %56)
  %73 = getelementptr ptr, ptr %56, i32 %65
  %74 = getelementptr ptr, ptr %73, i32 4
  %75 = load ptr, ptr %74, align 8
  %76 = alloca [3 x ptr], align 8
  %77 = getelementptr [3 x ptr], ptr %76, i32 0, i32 0
  store ptr @buffer_typ, ptr %77, align 8
  %78 = getelementptr [3 x ptr], ptr %76, i32 0, i32 1
  store ptr @i32_typ, ptr %78, align 8
  %79 = getelementptr [3 x ptr], ptr %76, i32 0, i32 2
  store ptr @i32_typ, ptr %79, align 8
  %80 = call ptr %75({ ptr, ptr, ptr, i32 } %66, ptr %76, { ptr } %54, i32 6, i32 7)
  call void %80({ ptr, ptr, ptr, i32 } %66, { ptr, ptr, ptr, i32 } %66, ptr %67, { ptr } %54, i32 6, i32 7)
  %81 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %82 = extractvalue { ptr, ptr, ptr, i32 } %81, 0
  %83 = call ptr @llvm.invariant.start.p0(i64 104, ptr %82)
  %84 = extractvalue { ptr, ptr, ptr, i32 } %81, 3
  %85 = getelementptr ptr, ptr %82, i32 %84
  %86 = getelementptr ptr, ptr %85, i32 2
  %87 = load ptr, ptr %86, align 8
  %88 = extractvalue { ptr, ptr, ptr, i32 } %81, 1
  %89 = call ptr %87(ptr %88)
  %90 = alloca { ptr, ptr, ptr, i32 }, align 8
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 0
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 0
  %93 = load ptr, ptr %91, align 8
  store ptr %93, ptr %92, align 8
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 1
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 1
  %96 = load ptr, ptr %94, align 8
  store ptr %96, ptr %95, align 8
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 2
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 2
  %99 = load ptr, ptr %97, align 8
  store ptr %99, ptr %98, align 8
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 3
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 3
  %102 = load i32, ptr %100, align 4
  store i32 %102, ptr %101, align 4
  call void @set_offset(ptr %90, ptr @String)
  %103 = call ptr @llvm.invariant.start.p0(i64 24, ptr %90)
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 0
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %89, i32 0, i32 0
  %106 = load ptr, ptr %104, align 8
  store ptr %106, ptr %105, align 8
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 1
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %89, i32 0, i32 1
  %109 = load ptr, ptr %107, align 8
  store ptr %109, ptr %108, align 8
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 2
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %89, i32 0, i32 2
  %112 = load ptr, ptr %110, align 8
  store ptr %112, ptr %111, align 8
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 3
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %89, i32 0, i32 3
  %115 = load i32, ptr %113, align 4
  store i32 %115, ptr %114, align 4
  %116 = call ptr @malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64))
  %117 = alloca ptr, align 8
  store ptr %116, ptr %117, align 8
  %118 = alloca { ptr, ptr, ptr, i32 }, align 8
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %117, i32 0, i32 0
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 0
  %121 = load ptr, ptr %119, align 8
  store ptr %121, ptr %120, align 8
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %117, i32 0, i32 1
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 1
  %124 = load ptr, ptr %122, align 8
  store ptr %124, ptr %123, align 8
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %117, i32 0, i32 2
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 2
  %127 = load ptr, ptr %125, align 8
  store ptr %127, ptr %126, align 8
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %117, i32 0, i32 3
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 3
  %130 = load i32, ptr %128, align 4
  store i32 %130, ptr %129, align 4
  %131 = call ptr @llvm.invariant.start.p0(i64 16, ptr %118)
  %132 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %133 = alloca { ptr, ptr, ptr, i32 }, align 8
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 1
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 3
  store ptr @String, ptr %133, align 8
  store ptr %132, ptr %134, align 8
  store i32 7, ptr %135, align 4
  %136 = call ptr @llvm.invariant.start.p0(i64 16, ptr %133)
  %137 = getelementptr { ptr }, ptr %118, i32 0, i32 0
  %138 = load ptr, ptr %137, align 8
  %139 = insertvalue { ptr } undef, ptr %138, 0
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 0
  %141 = load ptr, ptr %140, align 8
  %142 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %141, 0
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 1
  %144 = load ptr, ptr %143, align 8
  %145 = insertvalue { ptr, ptr, ptr, i32 } %142, ptr %144, 1
  %146 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 2
  %147 = load ptr, ptr %146, align 8
  %148 = insertvalue { ptr, ptr, ptr, i32 } %145, ptr %147, 2
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 3
  %150 = load i32, ptr %149, align 4
  %151 = insertvalue { ptr, ptr, ptr, i32 } %148, i32 %150, 3
  %152 = alloca [3 x ptr], align 8
  %153 = call ptr @llvm.invariant.start.p0(i64 24, ptr %152)
  %154 = getelementptr [3 x ptr], ptr %152, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %154, align 8
  %155 = getelementptr [3 x ptr], ptr %152, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %155, align 8
  %156 = getelementptr [3 x ptr], ptr %152, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %156, align 8
  %157 = call ptr @llvm.invariant.start.p0(i64 280, ptr %141)
  %158 = getelementptr ptr, ptr %141, i32 %150
  %159 = getelementptr ptr, ptr %158, i32 4
  %160 = load ptr, ptr %159, align 8
  %161 = alloca [3 x ptr], align 8
  %162 = getelementptr [3 x ptr], ptr %161, i32 0, i32 0
  store ptr @buffer_typ, ptr %162, align 8
  %163 = getelementptr [3 x ptr], ptr %161, i32 0, i32 1
  store ptr @i32_typ, ptr %163, align 8
  %164 = getelementptr [3 x ptr], ptr %161, i32 0, i32 2
  store ptr @i32_typ, ptr %164, align 8
  %165 = call ptr %160({ ptr, ptr, ptr, i32 } %151, ptr %161, { ptr } %139, i32 0, i32 1)
  call void %165({ ptr, ptr, ptr, i32 } %151, { ptr, ptr, ptr, i32 } %151, ptr %152, { ptr } %139, i32 0, i32 1)
  %166 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %167 = extractvalue { ptr, ptr, ptr, i32 } %166, 0
  %168 = call ptr @llvm.invariant.start.p0(i64 104, ptr %167)
  %169 = extractvalue { ptr, ptr, ptr, i32 } %166, 3
  %170 = getelementptr ptr, ptr %167, i32 %169
  %171 = getelementptr ptr, ptr %170, i32 1
  %172 = load ptr, ptr %171, align 8
  %173 = extractvalue { ptr, ptr, ptr, i32 } %166, 1
  %174 = call ptr %172(ptr %173)
  %175 = alloca { ptr, ptr, ptr, i32 }, align 8
  %176 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 0
  %177 = getelementptr { ptr, ptr, ptr, i32 }, ptr %175, i32 0, i32 0
  %178 = load ptr, ptr %176, align 8
  store ptr %178, ptr %177, align 8
  %179 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 1
  %180 = getelementptr { ptr, ptr, ptr, i32 }, ptr %175, i32 0, i32 1
  %181 = load ptr, ptr %179, align 8
  store ptr %181, ptr %180, align 8
  %182 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 2
  %183 = getelementptr { ptr, ptr, ptr, i32 }, ptr %175, i32 0, i32 2
  %184 = load ptr, ptr %182, align 8
  store ptr %184, ptr %183, align 8
  %185 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 3
  %186 = getelementptr { ptr, ptr, ptr, i32 }, ptr %175, i32 0, i32 3
  %187 = load i32, ptr %185, align 4
  store i32 %187, ptr %186, align 4
  call void @set_offset(ptr %175, ptr @String)
  %188 = call ptr @llvm.invariant.start.p0(i64 24, ptr %175)
  %189 = getelementptr { ptr, ptr, ptr, i32 }, ptr %175, i32 0, i32 0
  %190 = getelementptr { ptr, ptr, ptr, i32 }, ptr %174, i32 0, i32 0
  %191 = load ptr, ptr %189, align 8
  store ptr %191, ptr %190, align 8
  %192 = getelementptr { ptr, ptr, ptr, i32 }, ptr %175, i32 0, i32 1
  %193 = getelementptr { ptr, ptr, ptr, i32 }, ptr %174, i32 0, i32 1
  %194 = load ptr, ptr %192, align 8
  store ptr %194, ptr %193, align 8
  %195 = getelementptr { ptr, ptr, ptr, i32 }, ptr %175, i32 0, i32 2
  %196 = getelementptr { ptr, ptr, ptr, i32 }, ptr %174, i32 0, i32 2
  %197 = load ptr, ptr %195, align 8
  store ptr %197, ptr %196, align 8
  %198 = getelementptr { ptr, ptr, ptr, i32 }, ptr %175, i32 0, i32 3
  %199 = getelementptr { ptr, ptr, ptr, i32 }, ptr %174, i32 0, i32 3
  %200 = load i32, ptr %198, align 4
  store i32 %200, ptr %199, align 4
  ret void
}

define void @Exception_set_info_line_numberPtri32_file_nameString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @Exception)
  %21 = call ptr @llvm.invariant.start.p0(i64 24, ptr %8)
  %22 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %23 = extractvalue { ptr, ptr, ptr, i32 } %22, 0
  %24 = call ptr @llvm.invariant.start.p0(i64 104, ptr %23)
  %25 = extractvalue { ptr, ptr, ptr, i32 } %22, 3
  %26 = getelementptr ptr, ptr %23, i32 %25
  %27 = load ptr, ptr %26, align 8
  %28 = extractvalue { ptr, ptr, ptr, i32 } %22, 1
  %29 = call ptr %27(ptr %28)
  store i32 %3, ptr %29, align 4
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %30, align 8
  %31 = call ptr @llvm.invariant.start.p0(i64 16, ptr %30)
  %32 = alloca { ptr, ptr, ptr, i32 }, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 0
  %35 = load ptr, ptr %33, align 8
  store ptr %35, ptr %34, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 1
  %38 = load ptr, ptr %36, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 2
  %41 = load ptr, ptr %39, align 8
  store ptr %41, ptr %40, align 8
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 3
  %44 = load i32, ptr %42, align 4
  store i32 %44, ptr %43, align 4
  call void @set_offset(ptr %32, ptr @String)
  %45 = call ptr @llvm.invariant.start.p0(i64 24, ptr %32)
  %46 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %47 = extractvalue { ptr, ptr, ptr, i32 } %46, 0
  %48 = call ptr @llvm.invariant.start.p0(i64 104, ptr %47)
  %49 = extractvalue { ptr, ptr, ptr, i32 } %46, 3
  %50 = getelementptr ptr, ptr %47, i32 %49
  %51 = getelementptr ptr, ptr %50, i32 1
  %52 = load ptr, ptr %51, align 8
  %53 = extractvalue { ptr, ptr, ptr, i32 } %46, 1
  %54 = call ptr %52(ptr %53)
  %55 = alloca { ptr, ptr, ptr, i32 }, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 0
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 0
  %58 = load ptr, ptr %56, align 8
  store ptr %58, ptr %57, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 1
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  %61 = load ptr, ptr %59, align 8
  store ptr %61, ptr %60, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 2
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 2
  %64 = load ptr, ptr %62, align 8
  store ptr %64, ptr %63, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 3
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  %67 = load i32, ptr %65, align 4
  store i32 %67, ptr %66, align 4
  call void @set_offset(ptr %55, ptr @String)
  %68 = call ptr @llvm.invariant.start.p0(i64 24, ptr %55)
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 0
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 0
  %71 = load ptr, ptr %69, align 8
  store ptr %71, ptr %70, align 8
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 1
  %74 = load ptr, ptr %72, align 8
  store ptr %74, ptr %73, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 2
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 2
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 3
  %80 = load i32, ptr %78, align 4
  store i32 %80, ptr %79, align 4
  ret void
}

define void @Exception_report_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Exception)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = call ptr @malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 10) to i64))
  %21 = alloca ptr, align 8
  store ptr %20, ptr %21, align 8
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %34 = load i32, ptr %32, align 4
  store i32 %34, ptr %33, align 4
  %35 = call ptr @llvm.invariant.start.p0(i64 16, ptr %22)
  %36 = load ptr, ptr %22, align 8
  %37 = getelementptr i8, ptr %36, i64 0
  %38 = load i72, ptr @remgx_, align 4
  store i72 %38, ptr %37, align 4
  %39 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 1
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 3
  store ptr @String, ptr %40, align 8
  store ptr %39, ptr %41, align 8
  store i32 7, ptr %42, align 4
  %43 = call ptr @llvm.invariant.start.p0(i64 16, ptr %40)
  %44 = getelementptr { ptr }, ptr %22, i32 0, i32 0
  %45 = load ptr, ptr %44, align 8
  %46 = insertvalue { ptr } undef, ptr %45, 0
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 0
  %48 = load ptr, ptr %47, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %48, 0
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } %49, ptr %51, 1
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 2
  %54 = load ptr, ptr %53, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %54, 2
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 3
  %57 = load i32, ptr %56, align 4
  %58 = insertvalue { ptr, ptr, ptr, i32 } %55, i32 %57, 3
  %59 = alloca [3 x ptr], align 8
  %60 = call ptr @llvm.invariant.start.p0(i64 24, ptr %59)
  %61 = getelementptr [3 x ptr], ptr %59, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %61, align 8
  %62 = getelementptr [3 x ptr], ptr %59, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %62, align 8
  %63 = getelementptr [3 x ptr], ptr %59, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %63, align 8
  %64 = call ptr @llvm.invariant.start.p0(i64 280, ptr %48)
  %65 = getelementptr ptr, ptr %48, i32 %57
  %66 = getelementptr ptr, ptr %65, i32 4
  %67 = load ptr, ptr %66, align 8
  %68 = alloca [3 x ptr], align 8
  %69 = getelementptr [3 x ptr], ptr %68, i32 0, i32 0
  store ptr @buffer_typ, ptr %69, align 8
  %70 = getelementptr [3 x ptr], ptr %68, i32 0, i32 1
  store ptr @i32_typ, ptr %70, align 8
  %71 = getelementptr [3 x ptr], ptr %68, i32 0, i32 2
  store ptr @i32_typ, ptr %71, align 8
  %72 = call ptr %67({ ptr, ptr, ptr, i32 } %58, ptr %68, { ptr } %46, i32 9, i32 10)
  call void %72({ ptr, ptr, ptr, i32 } %58, { ptr, ptr, ptr, i32 } %58, ptr %59, { ptr } %46, i32 9, i32 10)
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 0
  %74 = load ptr, ptr %73, align 8
  %75 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %74, 0
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 1
  %77 = load ptr, ptr %76, align 8
  %78 = insertvalue { ptr, ptr, ptr, i32 } %75, ptr %77, 1
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 2
  %80 = load ptr, ptr %79, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } %78, ptr %80, 2
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 3
  %83 = load i32, ptr %82, align 4
  %84 = insertvalue { ptr, ptr, ptr, i32 } %81, i32 %83, 3
  %85 = alloca [0 x ptr], align 8
  %86 = call ptr @llvm.invariant.start.p0(i64 0, ptr %85)
  %87 = call ptr @llvm.invariant.start.p0(i64 280, ptr %74)
  %88 = getelementptr ptr, ptr %74, i32 %83
  %89 = getelementptr ptr, ptr %88, i32 14
  %90 = load ptr, ptr %89, align 8
  %91 = alloca [0 x ptr], align 8
  %92 = call ptr %90({ ptr, ptr, ptr, i32 } %84, ptr %91)
  %93 = call { ptr } %92({ ptr, ptr, ptr, i32 } %84, { ptr, ptr, ptr, i32 } %84, ptr %85)
  %94 = alloca ptr, align 8
  store { ptr } %93, ptr %94, align 8
  %95 = load ptr, ptr %94, align 8
  %96 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %95)
  %97 = call ptr @malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 27) to i64))
  %98 = alloca ptr, align 8
  store ptr %97, ptr %98, align 8
  %99 = alloca { ptr, ptr, ptr, i32 }, align 8
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 0
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %99, i32 0, i32 0
  %102 = load ptr, ptr %100, align 8
  store ptr %102, ptr %101, align 8
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 1
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %99, i32 0, i32 1
  %105 = load ptr, ptr %103, align 8
  store ptr %105, ptr %104, align 8
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 2
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %99, i32 0, i32 2
  %108 = load ptr, ptr %106, align 8
  store ptr %108, ptr %107, align 8
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 3
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %99, i32 0, i32 3
  %111 = load i32, ptr %109, align 4
  store i32 %111, ptr %110, align 4
  %112 = call ptr @llvm.invariant.start.p0(i64 16, ptr %99)
  %113 = load ptr, ptr %99, align 8
  %114 = getelementptr i8, ptr %113, i64 0
  %115 = load i208, ptr @uocaj_Exception_thrown_from_file, align 4
  store i208 %115, ptr %114, align 4
  %116 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %117 = alloca { ptr, ptr, ptr, i32 }, align 8
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %117, i32 0, i32 1
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %117, i32 0, i32 3
  store ptr @String, ptr %117, align 8
  store ptr %116, ptr %118, align 8
  store i32 7, ptr %119, align 4
  %120 = call ptr @llvm.invariant.start.p0(i64 16, ptr %117)
  %121 = getelementptr { ptr }, ptr %99, i32 0, i32 0
  %122 = load ptr, ptr %121, align 8
  %123 = insertvalue { ptr } undef, ptr %122, 0
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %117, i32 0, i32 0
  %125 = load ptr, ptr %124, align 8
  %126 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %125, 0
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %117, i32 0, i32 1
  %128 = load ptr, ptr %127, align 8
  %129 = insertvalue { ptr, ptr, ptr, i32 } %126, ptr %128, 1
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %117, i32 0, i32 2
  %131 = load ptr, ptr %130, align 8
  %132 = insertvalue { ptr, ptr, ptr, i32 } %129, ptr %131, 2
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %117, i32 0, i32 3
  %134 = load i32, ptr %133, align 4
  %135 = insertvalue { ptr, ptr, ptr, i32 } %132, i32 %134, 3
  %136 = alloca [3 x ptr], align 8
  %137 = call ptr @llvm.invariant.start.p0(i64 24, ptr %136)
  %138 = getelementptr [3 x ptr], ptr %136, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %138, align 8
  %139 = getelementptr [3 x ptr], ptr %136, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %139, align 8
  %140 = getelementptr [3 x ptr], ptr %136, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %140, align 8
  %141 = call ptr @llvm.invariant.start.p0(i64 280, ptr %125)
  %142 = getelementptr ptr, ptr %125, i32 %134
  %143 = getelementptr ptr, ptr %142, i32 4
  %144 = load ptr, ptr %143, align 8
  %145 = alloca [3 x ptr], align 8
  %146 = getelementptr [3 x ptr], ptr %145, i32 0, i32 0
  store ptr @buffer_typ, ptr %146, align 8
  %147 = getelementptr [3 x ptr], ptr %145, i32 0, i32 1
  store ptr @i32_typ, ptr %147, align 8
  %148 = getelementptr [3 x ptr], ptr %145, i32 0, i32 2
  store ptr @i32_typ, ptr %148, align 8
  %149 = call ptr %144({ ptr, ptr, ptr, i32 } %135, ptr %145, { ptr } %123, i32 26, i32 27)
  call void %149({ ptr, ptr, ptr, i32 } %135, { ptr, ptr, ptr, i32 } %135, ptr %136, { ptr } %123, i32 26, i32 27)
  %150 = getelementptr { ptr, ptr, ptr, i32 }, ptr %117, i32 0, i32 0
  %151 = load ptr, ptr %150, align 8
  %152 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %151, 0
  %153 = getelementptr { ptr, ptr, ptr, i32 }, ptr %117, i32 0, i32 1
  %154 = load ptr, ptr %153, align 8
  %155 = insertvalue { ptr, ptr, ptr, i32 } %152, ptr %154, 1
  %156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %117, i32 0, i32 2
  %157 = load ptr, ptr %156, align 8
  %158 = insertvalue { ptr, ptr, ptr, i32 } %155, ptr %157, 2
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %117, i32 0, i32 3
  %160 = load i32, ptr %159, align 4
  %161 = insertvalue { ptr, ptr, ptr, i32 } %158, i32 %160, 3
  %162 = alloca [0 x ptr], align 8
  %163 = call ptr @llvm.invariant.start.p0(i64 0, ptr %162)
  %164 = call ptr @llvm.invariant.start.p0(i64 280, ptr %151)
  %165 = getelementptr ptr, ptr %151, i32 %160
  %166 = getelementptr ptr, ptr %165, i32 14
  %167 = load ptr, ptr %166, align 8
  %168 = alloca [0 x ptr], align 8
  %169 = call ptr %167({ ptr, ptr, ptr, i32 } %161, ptr %168)
  %170 = call { ptr } %169({ ptr, ptr, ptr, i32 } %161, { ptr, ptr, ptr, i32 } %161, ptr %162)
  %171 = alloca ptr, align 8
  store { ptr } %170, ptr %171, align 8
  %172 = load ptr, ptr %171, align 8
  %173 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %172)
  %174 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %175 = extractvalue { ptr, ptr, ptr, i32 } %174, 0
  %176 = call ptr @llvm.invariant.start.p0(i64 104, ptr %175)
  %177 = extractvalue { ptr, ptr, ptr, i32 } %174, 3
  %178 = getelementptr ptr, ptr %175, i32 %177
  %179 = getelementptr ptr, ptr %178, i32 1
  %180 = load ptr, ptr %179, align 8
  %181 = extractvalue { ptr, ptr, ptr, i32 } %174, 1
  %182 = call ptr %180(ptr %181)
  %183 = getelementptr { ptr, ptr, ptr, i32 }, ptr %182, i32 0, i32 0
  %184 = load ptr, ptr %183, align 8
  %185 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %184, 0
  %186 = getelementptr { ptr, ptr, ptr, i32 }, ptr %182, i32 0, i32 1
  %187 = load ptr, ptr %186, align 8
  %188 = insertvalue { ptr, ptr, ptr, i32 } %185, ptr %187, 1
  %189 = getelementptr { ptr, ptr, ptr, i32 }, ptr %182, i32 0, i32 2
  %190 = load ptr, ptr %189, align 8
  %191 = insertvalue { ptr, ptr, ptr, i32 } %188, ptr %190, 2
  %192 = getelementptr { ptr, ptr, ptr, i32 }, ptr %182, i32 0, i32 3
  %193 = load i32, ptr %192, align 4
  %194 = insertvalue { ptr, ptr, ptr, i32 } %191, i32 %193, 3
  %195 = alloca [0 x ptr], align 8
  %196 = call ptr @llvm.invariant.start.p0(i64 0, ptr %195)
  %197 = call ptr @llvm.invariant.start.p0(i64 280, ptr %184)
  %198 = getelementptr ptr, ptr %184, i32 %193
  %199 = getelementptr ptr, ptr %198, i32 14
  %200 = load ptr, ptr %199, align 8
  %201 = alloca [0 x ptr], align 8
  %202 = call ptr %200({ ptr, ptr, ptr, i32 } %194, ptr %201)
  %203 = call { ptr } %202({ ptr, ptr, ptr, i32 } %194, { ptr, ptr, ptr, i32 } %194, ptr %195)
  %204 = alloca ptr, align 8
  store { ptr } %203, ptr %204, align 8
  %205 = load ptr, ptr %204, align 8
  %206 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %205)
  %207 = call ptr @malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 8) to i64))
  %208 = alloca ptr, align 8
  store ptr %207, ptr %208, align 8
  %209 = alloca { ptr, ptr, ptr, i32 }, align 8
  %210 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 0
  %211 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 0
  %212 = load ptr, ptr %210, align 8
  store ptr %212, ptr %211, align 8
  %213 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 1
  %214 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 1
  %215 = load ptr, ptr %213, align 8
  store ptr %215, ptr %214, align 8
  %216 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 2
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 2
  %218 = load ptr, ptr %216, align 8
  store ptr %218, ptr %217, align 8
  %219 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 3
  %220 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 3
  %221 = load i32, ptr %219, align 4
  store i32 %221, ptr %220, align 4
  %222 = call ptr @llvm.invariant.start.p0(i64 16, ptr %209)
  %223 = load ptr, ptr %209, align 8
  %224 = getelementptr i8, ptr %223, i64 0
  %225 = load i56, ptr @hdgjd_At_line, align 4
  store i56 %225, ptr %224, align 4
  %226 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %227 = alloca { ptr, ptr, ptr, i32 }, align 8
  %228 = getelementptr { ptr, ptr, ptr, i32 }, ptr %227, i32 0, i32 1
  %229 = getelementptr { ptr, ptr, ptr, i32 }, ptr %227, i32 0, i32 3
  store ptr @String, ptr %227, align 8
  store ptr %226, ptr %228, align 8
  store i32 7, ptr %229, align 4
  %230 = call ptr @llvm.invariant.start.p0(i64 16, ptr %227)
  %231 = getelementptr { ptr }, ptr %209, i32 0, i32 0
  %232 = load ptr, ptr %231, align 8
  %233 = insertvalue { ptr } undef, ptr %232, 0
  %234 = getelementptr { ptr, ptr, ptr, i32 }, ptr %227, i32 0, i32 0
  %235 = load ptr, ptr %234, align 8
  %236 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %235, 0
  %237 = getelementptr { ptr, ptr, ptr, i32 }, ptr %227, i32 0, i32 1
  %238 = load ptr, ptr %237, align 8
  %239 = insertvalue { ptr, ptr, ptr, i32 } %236, ptr %238, 1
  %240 = getelementptr { ptr, ptr, ptr, i32 }, ptr %227, i32 0, i32 2
  %241 = load ptr, ptr %240, align 8
  %242 = insertvalue { ptr, ptr, ptr, i32 } %239, ptr %241, 2
  %243 = getelementptr { ptr, ptr, ptr, i32 }, ptr %227, i32 0, i32 3
  %244 = load i32, ptr %243, align 4
  %245 = insertvalue { ptr, ptr, ptr, i32 } %242, i32 %244, 3
  %246 = alloca [3 x ptr], align 8
  %247 = call ptr @llvm.invariant.start.p0(i64 24, ptr %246)
  %248 = getelementptr [3 x ptr], ptr %246, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %248, align 8
  %249 = getelementptr [3 x ptr], ptr %246, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %249, align 8
  %250 = getelementptr [3 x ptr], ptr %246, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %250, align 8
  %251 = call ptr @llvm.invariant.start.p0(i64 280, ptr %235)
  %252 = getelementptr ptr, ptr %235, i32 %244
  %253 = getelementptr ptr, ptr %252, i32 4
  %254 = load ptr, ptr %253, align 8
  %255 = alloca [3 x ptr], align 8
  %256 = getelementptr [3 x ptr], ptr %255, i32 0, i32 0
  store ptr @buffer_typ, ptr %256, align 8
  %257 = getelementptr [3 x ptr], ptr %255, i32 0, i32 1
  store ptr @i32_typ, ptr %257, align 8
  %258 = getelementptr [3 x ptr], ptr %255, i32 0, i32 2
  store ptr @i32_typ, ptr %258, align 8
  %259 = call ptr %254({ ptr, ptr, ptr, i32 } %245, ptr %255, { ptr } %233, i32 7, i32 8)
  call void %259({ ptr, ptr, ptr, i32 } %245, { ptr, ptr, ptr, i32 } %245, ptr %246, { ptr } %233, i32 7, i32 8)
  %260 = getelementptr { ptr, ptr, ptr, i32 }, ptr %227, i32 0, i32 0
  %261 = load ptr, ptr %260, align 8
  %262 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %261, 0
  %263 = getelementptr { ptr, ptr, ptr, i32 }, ptr %227, i32 0, i32 1
  %264 = load ptr, ptr %263, align 8
  %265 = insertvalue { ptr, ptr, ptr, i32 } %262, ptr %264, 1
  %266 = getelementptr { ptr, ptr, ptr, i32 }, ptr %227, i32 0, i32 2
  %267 = load ptr, ptr %266, align 8
  %268 = insertvalue { ptr, ptr, ptr, i32 } %265, ptr %267, 2
  %269 = getelementptr { ptr, ptr, ptr, i32 }, ptr %227, i32 0, i32 3
  %270 = load i32, ptr %269, align 4
  %271 = insertvalue { ptr, ptr, ptr, i32 } %268, i32 %270, 3
  %272 = alloca [0 x ptr], align 8
  %273 = call ptr @llvm.invariant.start.p0(i64 0, ptr %272)
  %274 = call ptr @llvm.invariant.start.p0(i64 280, ptr %261)
  %275 = getelementptr ptr, ptr %261, i32 %270
  %276 = getelementptr ptr, ptr %275, i32 14
  %277 = load ptr, ptr %276, align 8
  %278 = alloca [0 x ptr], align 8
  %279 = call ptr %277({ ptr, ptr, ptr, i32 } %271, ptr %278)
  %280 = call { ptr } %279({ ptr, ptr, ptr, i32 } %271, { ptr, ptr, ptr, i32 } %271, ptr %272)
  %281 = alloca ptr, align 8
  store { ptr } %280, ptr %281, align 8
  %282 = load ptr, ptr %281, align 8
  %283 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %282)
  %284 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %285 = extractvalue { ptr, ptr, ptr, i32 } %284, 0
  %286 = call ptr @llvm.invariant.start.p0(i64 104, ptr %285)
  %287 = extractvalue { ptr, ptr, ptr, i32 } %284, 3
  %288 = getelementptr ptr, ptr %285, i32 %287
  %289 = load ptr, ptr %288, align 8
  %290 = extractvalue { ptr, ptr, ptr, i32 } %284, 1
  %291 = call ptr %289(ptr %290)
  %292 = load i32, ptr %291, align 4
  %293 = call i32 (ptr, ...) @printf(ptr @i32_string, i32 %292)
  %294 = call ptr @malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 13) to i64))
  %295 = alloca ptr, align 8
  store ptr %294, ptr %295, align 8
  %296 = alloca { ptr, ptr, ptr, i32 }, align 8
  %297 = getelementptr { ptr, ptr, ptr, i32 }, ptr %295, i32 0, i32 0
  %298 = getelementptr { ptr, ptr, ptr, i32 }, ptr %296, i32 0, i32 0
  %299 = load ptr, ptr %297, align 8
  store ptr %299, ptr %298, align 8
  %300 = getelementptr { ptr, ptr, ptr, i32 }, ptr %295, i32 0, i32 1
  %301 = getelementptr { ptr, ptr, ptr, i32 }, ptr %296, i32 0, i32 1
  %302 = load ptr, ptr %300, align 8
  store ptr %302, ptr %301, align 8
  %303 = getelementptr { ptr, ptr, ptr, i32 }, ptr %295, i32 0, i32 2
  %304 = getelementptr { ptr, ptr, ptr, i32 }, ptr %296, i32 0, i32 2
  %305 = load ptr, ptr %303, align 8
  store ptr %305, ptr %304, align 8
  %306 = getelementptr { ptr, ptr, ptr, i32 }, ptr %295, i32 0, i32 3
  %307 = getelementptr { ptr, ptr, ptr, i32 }, ptr %296, i32 0, i32 3
  %308 = load i32, ptr %306, align 4
  store i32 %308, ptr %307, align 4
  %309 = call ptr @llvm.invariant.start.p0(i64 16, ptr %296)
  %310 = load ptr, ptr %296, align 8
  %311 = getelementptr i8, ptr %310, i64 0
  %312 = load i96, ptr @qukmt_With_message, align 4
  store i96 %312, ptr %311, align 4
  %313 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %314 = alloca { ptr, ptr, ptr, i32 }, align 8
  %315 = getelementptr { ptr, ptr, ptr, i32 }, ptr %314, i32 0, i32 1
  %316 = getelementptr { ptr, ptr, ptr, i32 }, ptr %314, i32 0, i32 3
  store ptr @String, ptr %314, align 8
  store ptr %313, ptr %315, align 8
  store i32 7, ptr %316, align 4
  %317 = call ptr @llvm.invariant.start.p0(i64 16, ptr %314)
  %318 = getelementptr { ptr }, ptr %296, i32 0, i32 0
  %319 = load ptr, ptr %318, align 8
  %320 = insertvalue { ptr } undef, ptr %319, 0
  %321 = getelementptr { ptr, ptr, ptr, i32 }, ptr %314, i32 0, i32 0
  %322 = load ptr, ptr %321, align 8
  %323 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %322, 0
  %324 = getelementptr { ptr, ptr, ptr, i32 }, ptr %314, i32 0, i32 1
  %325 = load ptr, ptr %324, align 8
  %326 = insertvalue { ptr, ptr, ptr, i32 } %323, ptr %325, 1
  %327 = getelementptr { ptr, ptr, ptr, i32 }, ptr %314, i32 0, i32 2
  %328 = load ptr, ptr %327, align 8
  %329 = insertvalue { ptr, ptr, ptr, i32 } %326, ptr %328, 2
  %330 = getelementptr { ptr, ptr, ptr, i32 }, ptr %314, i32 0, i32 3
  %331 = load i32, ptr %330, align 4
  %332 = insertvalue { ptr, ptr, ptr, i32 } %329, i32 %331, 3
  %333 = alloca [3 x ptr], align 8
  %334 = call ptr @llvm.invariant.start.p0(i64 24, ptr %333)
  %335 = getelementptr [3 x ptr], ptr %333, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %335, align 8
  %336 = getelementptr [3 x ptr], ptr %333, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %336, align 8
  %337 = getelementptr [3 x ptr], ptr %333, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %337, align 8
  %338 = call ptr @llvm.invariant.start.p0(i64 280, ptr %322)
  %339 = getelementptr ptr, ptr %322, i32 %331
  %340 = getelementptr ptr, ptr %339, i32 4
  %341 = load ptr, ptr %340, align 8
  %342 = alloca [3 x ptr], align 8
  %343 = getelementptr [3 x ptr], ptr %342, i32 0, i32 0
  store ptr @buffer_typ, ptr %343, align 8
  %344 = getelementptr [3 x ptr], ptr %342, i32 0, i32 1
  store ptr @i32_typ, ptr %344, align 8
  %345 = getelementptr [3 x ptr], ptr %342, i32 0, i32 2
  store ptr @i32_typ, ptr %345, align 8
  %346 = call ptr %341({ ptr, ptr, ptr, i32 } %332, ptr %342, { ptr } %320, i32 12, i32 13)
  call void %346({ ptr, ptr, ptr, i32 } %332, { ptr, ptr, ptr, i32 } %332, ptr %333, { ptr } %320, i32 12, i32 13)
  %347 = getelementptr { ptr, ptr, ptr, i32 }, ptr %314, i32 0, i32 0
  %348 = load ptr, ptr %347, align 8
  %349 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %348, 0
  %350 = getelementptr { ptr, ptr, ptr, i32 }, ptr %314, i32 0, i32 1
  %351 = load ptr, ptr %350, align 8
  %352 = insertvalue { ptr, ptr, ptr, i32 } %349, ptr %351, 1
  %353 = getelementptr { ptr, ptr, ptr, i32 }, ptr %314, i32 0, i32 2
  %354 = load ptr, ptr %353, align 8
  %355 = insertvalue { ptr, ptr, ptr, i32 } %352, ptr %354, 2
  %356 = getelementptr { ptr, ptr, ptr, i32 }, ptr %314, i32 0, i32 3
  %357 = load i32, ptr %356, align 4
  %358 = insertvalue { ptr, ptr, ptr, i32 } %355, i32 %357, 3
  %359 = alloca [0 x ptr], align 8
  %360 = call ptr @llvm.invariant.start.p0(i64 0, ptr %359)
  %361 = call ptr @llvm.invariant.start.p0(i64 280, ptr %348)
  %362 = getelementptr ptr, ptr %348, i32 %357
  %363 = getelementptr ptr, ptr %362, i32 14
  %364 = load ptr, ptr %363, align 8
  %365 = alloca [0 x ptr], align 8
  %366 = call ptr %364({ ptr, ptr, ptr, i32 } %358, ptr %365)
  %367 = call { ptr } %366({ ptr, ptr, ptr, i32 } %358, { ptr, ptr, ptr, i32 } %358, ptr %359)
  %368 = alloca ptr, align 8
  store { ptr } %367, ptr %368, align 8
  %369 = load ptr, ptr %368, align 8
  %370 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %369)
  %371 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %372 = load ptr, ptr %371, align 8
  %373 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %372, 0
  %374 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %375 = load ptr, ptr %374, align 8
  %376 = insertvalue { ptr, ptr, ptr, i32 } %373, ptr %375, 1
  %377 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %378 = load ptr, ptr %377, align 8
  %379 = insertvalue { ptr, ptr, ptr, i32 } %376, ptr %378, 2
  %380 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %381 = load i32, ptr %380, align 4
  %382 = insertvalue { ptr, ptr, ptr, i32 } %379, i32 %381, 3
  %383 = alloca [0 x ptr], align 8
  %384 = call ptr @llvm.invariant.start.p0(i64 0, ptr %383)
  %385 = call ptr @llvm.invariant.start.p0(i64 104, ptr %372)
  %386 = getelementptr ptr, ptr %372, i32 %381
  %387 = getelementptr ptr, ptr %386, i32 7
  %388 = load ptr, ptr %387, align 8
  %389 = alloca [0 x ptr], align 8
  %390 = call ptr %388({ ptr, ptr, ptr, i32 } %382, ptr %389)
  call void %390({ ptr, ptr, ptr, i32 } %382, { ptr, ptr, ptr, i32 } %382, ptr %383)
  %391 = call ptr @malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 10) to i64))
  %392 = alloca ptr, align 8
  store ptr %391, ptr %392, align 8
  %393 = alloca { ptr, ptr, ptr, i32 }, align 8
  %394 = getelementptr { ptr, ptr, ptr, i32 }, ptr %392, i32 0, i32 0
  %395 = getelementptr { ptr, ptr, ptr, i32 }, ptr %393, i32 0, i32 0
  %396 = load ptr, ptr %394, align 8
  store ptr %396, ptr %395, align 8
  %397 = getelementptr { ptr, ptr, ptr, i32 }, ptr %392, i32 0, i32 1
  %398 = getelementptr { ptr, ptr, ptr, i32 }, ptr %393, i32 0, i32 1
  %399 = load ptr, ptr %397, align 8
  store ptr %399, ptr %398, align 8
  %400 = getelementptr { ptr, ptr, ptr, i32 }, ptr %392, i32 0, i32 2
  %401 = getelementptr { ptr, ptr, ptr, i32 }, ptr %393, i32 0, i32 2
  %402 = load ptr, ptr %400, align 8
  store ptr %402, ptr %401, align 8
  %403 = getelementptr { ptr, ptr, ptr, i32 }, ptr %392, i32 0, i32 3
  %404 = getelementptr { ptr, ptr, ptr, i32 }, ptr %393, i32 0, i32 3
  %405 = load i32, ptr %403, align 4
  store i32 %405, ptr %404, align 4
  %406 = call ptr @llvm.invariant.start.p0(i64 16, ptr %393)
  %407 = load ptr, ptr %393, align 8
  %408 = getelementptr i8, ptr %407, i64 0
  %409 = load i72, ptr @nxicq_, align 4
  store i72 %409, ptr %408, align 4
  %410 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %411 = alloca { ptr, ptr, ptr, i32 }, align 8
  %412 = getelementptr { ptr, ptr, ptr, i32 }, ptr %411, i32 0, i32 1
  %413 = getelementptr { ptr, ptr, ptr, i32 }, ptr %411, i32 0, i32 3
  store ptr @String, ptr %411, align 8
  store ptr %410, ptr %412, align 8
  store i32 7, ptr %413, align 4
  %414 = call ptr @llvm.invariant.start.p0(i64 16, ptr %411)
  %415 = getelementptr { ptr }, ptr %393, i32 0, i32 0
  %416 = load ptr, ptr %415, align 8
  %417 = insertvalue { ptr } undef, ptr %416, 0
  %418 = getelementptr { ptr, ptr, ptr, i32 }, ptr %411, i32 0, i32 0
  %419 = load ptr, ptr %418, align 8
  %420 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %419, 0
  %421 = getelementptr { ptr, ptr, ptr, i32 }, ptr %411, i32 0, i32 1
  %422 = load ptr, ptr %421, align 8
  %423 = insertvalue { ptr, ptr, ptr, i32 } %420, ptr %422, 1
  %424 = getelementptr { ptr, ptr, ptr, i32 }, ptr %411, i32 0, i32 2
  %425 = load ptr, ptr %424, align 8
  %426 = insertvalue { ptr, ptr, ptr, i32 } %423, ptr %425, 2
  %427 = getelementptr { ptr, ptr, ptr, i32 }, ptr %411, i32 0, i32 3
  %428 = load i32, ptr %427, align 4
  %429 = insertvalue { ptr, ptr, ptr, i32 } %426, i32 %428, 3
  %430 = alloca [3 x ptr], align 8
  %431 = call ptr @llvm.invariant.start.p0(i64 24, ptr %430)
  %432 = getelementptr [3 x ptr], ptr %430, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %432, align 8
  %433 = getelementptr [3 x ptr], ptr %430, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %433, align 8
  %434 = getelementptr [3 x ptr], ptr %430, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %434, align 8
  %435 = call ptr @llvm.invariant.start.p0(i64 280, ptr %419)
  %436 = getelementptr ptr, ptr %419, i32 %428
  %437 = getelementptr ptr, ptr %436, i32 4
  %438 = load ptr, ptr %437, align 8
  %439 = alloca [3 x ptr], align 8
  %440 = getelementptr [3 x ptr], ptr %439, i32 0, i32 0
  store ptr @buffer_typ, ptr %440, align 8
  %441 = getelementptr [3 x ptr], ptr %439, i32 0, i32 1
  store ptr @i32_typ, ptr %441, align 8
  %442 = getelementptr [3 x ptr], ptr %439, i32 0, i32 2
  store ptr @i32_typ, ptr %442, align 8
  %443 = call ptr %438({ ptr, ptr, ptr, i32 } %429, ptr %439, { ptr } %417, i32 9, i32 10)
  call void %443({ ptr, ptr, ptr, i32 } %429, { ptr, ptr, ptr, i32 } %429, ptr %430, { ptr } %417, i32 9, i32 10)
  %444 = getelementptr { ptr, ptr, ptr, i32 }, ptr %411, i32 0, i32 0
  %445 = load ptr, ptr %444, align 8
  %446 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %445, 0
  %447 = getelementptr { ptr, ptr, ptr, i32 }, ptr %411, i32 0, i32 1
  %448 = load ptr, ptr %447, align 8
  %449 = insertvalue { ptr, ptr, ptr, i32 } %446, ptr %448, 1
  %450 = getelementptr { ptr, ptr, ptr, i32 }, ptr %411, i32 0, i32 2
  %451 = load ptr, ptr %450, align 8
  %452 = insertvalue { ptr, ptr, ptr, i32 } %449, ptr %451, 2
  %453 = getelementptr { ptr, ptr, ptr, i32 }, ptr %411, i32 0, i32 3
  %454 = load i32, ptr %453, align 4
  %455 = insertvalue { ptr, ptr, ptr, i32 } %452, i32 %454, 3
  %456 = alloca [0 x ptr], align 8
  %457 = call ptr @llvm.invariant.start.p0(i64 0, ptr %456)
  %458 = call ptr @llvm.invariant.start.p0(i64 280, ptr %445)
  %459 = getelementptr ptr, ptr %445, i32 %454
  %460 = getelementptr ptr, ptr %459, i32 14
  %461 = load ptr, ptr %460, align 8
  %462 = alloca [0 x ptr], align 8
  %463 = call ptr %461({ ptr, ptr, ptr, i32 } %455, ptr %462)
  %464 = call { ptr } %463({ ptr, ptr, ptr, i32 } %455, { ptr, ptr, ptr, i32 } %455, ptr %456)
  %465 = alloca ptr, align 8
  store { ptr } %464, ptr %465, align 8
  %466 = load ptr, ptr %465, align 8
  %467 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %466)
  ret void
}

define void @Exception_print_message_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Exception)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 104, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 2
  %26 = load ptr, ptr %25, align 8
  %27 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %28 = call ptr %26(ptr %27)
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 0
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %30, 0
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 1
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %33, 1
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 2
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %36, 2
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 3
  %39 = load i32, ptr %38, align 4
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %39, 3
  %41 = alloca [0 x ptr], align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 0, ptr %41)
  %43 = call ptr @llvm.invariant.start.p0(i64 280, ptr %30)
  %44 = getelementptr ptr, ptr %30, i32 %39
  %45 = getelementptr ptr, ptr %44, i32 14
  %46 = load ptr, ptr %45, align 8
  %47 = alloca [0 x ptr], align 8
  %48 = call ptr %46({ ptr, ptr, ptr, i32 } %40, ptr %47)
  %49 = call { ptr } %48({ ptr, ptr, ptr, i32 } %40, { ptr, ptr, ptr, i32 } %40, ptr %41)
  %50 = alloca ptr, align 8
  store { ptr } %49, ptr %50, align 8
  %51 = load ptr, ptr %50, align 8
  %52 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %51)
  ret void
}

declare i32 @printf(ptr, ...)

define ptr @IO_B__Self_print_xPtri8__Self_print_xPtri64__Self_print_xPtrf64__Self_print_xNil__Self_print_xString__Self_print_xPtri32__Self_print_xCharacter__Self_print_xPtri1__Self_print_xRepresentable(ptr %0, { ptr, i160 } %1) {
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i32, align 4
  %.reg2mem5 = alloca i32, align 4
  %.reg2mem7 = alloca i32, align 4
  %.reg2mem9 = alloca i32, align 4
  %.reg2mem11 = alloca i32, align 4
  %.reg2mem13 = alloca i32, align 4
  %.reg2mem15 = alloca i32, align 4
  %.reg2mem17 = alloca i32, align 4
  %.reg2mem19 = alloca i32, align 4
  %.reg2mem21 = alloca i32, align 4
  %.reg2mem23 = alloca i32, align 4
  %.reg2mem25 = alloca i32, align 4
  %.reg2mem27 = alloca i32, align 4
  %.reg2mem29 = alloca i32, align 4
  %.reg2mem31 = alloca i32, align 4
  %.reg2mem33 = alloca i32, align 4
  %.reg2mem35 = alloca i32, align 4
  %.reg2mem37 = alloca i32, align 4
  %.reg2mem39 = alloca i32, align 4
  %.reg2mem41 = alloca i32, align 4
  %.reg2mem43 = alloca i32, align 4
  %.reg2mem45 = alloca i32, align 4
  %.reg2mem47 = alloca i32, align 4
  %.reg2mem49 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %4 = getelementptr [1 x ptr], ptr %0, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7469797244461771922, i64 ptrtoint (ptr @i64_typ to i64), ptr %13)
  br i1 %14, label %15, label %16

15:                                               ; preds = %2
  store i32 2, ptr %.reg2mem29, align 4
  br label %202

16:                                               ; preds = %2
  %17 = getelementptr [1 x ptr], ptr %0, i32 0, i32 0
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr ptr, ptr %18, i32 1
  %20 = getelementptr ptr, ptr %18, i32 2
  %21 = getelementptr ptr, ptr %18, i32 3
  %22 = getelementptr ptr, ptr %18, i32 4
  %23 = load i64, ptr %19, align 4
  %24 = load i64, ptr %20, align 4
  %25 = load ptr, ptr %21, align 8
  %26 = load ptr, ptr %22, align 8
  %27 = call i1 @subtype_test_wrapper(ptr %25, i64 %24, i64 %23, i64 -7260840641129990118, i64 ptrtoint (ptr @Representable to i64), ptr %26)
  br i1 %27, label %28, label %57

28:                                               ; preds = %16
  %29 = getelementptr [1 x ptr], ptr %0, i32 0, i32 0
  %30 = load ptr, ptr %29, align 8
  %31 = getelementptr ptr, ptr %30, i32 1
  %32 = getelementptr ptr, ptr %30, i32 2
  %33 = getelementptr ptr, ptr %30, i32 3
  %34 = getelementptr ptr, ptr %30, i32 4
  %35 = load i64, ptr %31, align 4
  %36 = load i64, ptr %32, align 4
  %37 = load ptr, ptr %33, align 8
  %38 = load ptr, ptr %34, align 8
  %39 = call i1 @subtype_test_wrapper(ptr %37, i64 %36, i64 %35, i64 6681222582356018452, i64 ptrtoint (ptr @Character to i64), ptr %38)
  br i1 %39, label %40, label %41

40:                                               ; preds = %28
  store i32 0, ptr %.reg2mem49, align 4
  br label %55

41:                                               ; preds = %28
  %42 = getelementptr [1 x ptr], ptr %0, i32 0, i32 0
  %43 = load ptr, ptr %42, align 8
  %44 = getelementptr ptr, ptr %43, i32 1
  %45 = getelementptr ptr, ptr %43, i32 2
  %46 = getelementptr ptr, ptr %43, i32 3
  %47 = getelementptr ptr, ptr %43, i32 4
  %48 = load i64, ptr %44, align 4
  %49 = load i64, ptr %45, align 4
  %50 = load ptr, ptr %46, align 8
  %51 = load ptr, ptr %47, align 8
  %52 = call i1 @subtype_test_wrapper(ptr %50, i64 %49, i64 %48, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %51)
  %53 = xor i1 %52, true
  %54 = zext i1 %53 to i32
  store i32 %54, ptr %.reg2mem27, align 4
  %.reload28 = load i32, ptr %.reg2mem27, align 4
  store i32 %.reload28, ptr %.reg2mem49, align 4
  br label %55

55:                                               ; preds = %41, %40
  %.reload50 = load i32, ptr %.reg2mem49, align 4
  store i32 %.reload50, ptr %.reg2mem25, align 4
  br label %56

56:                                               ; preds = %55
  %.reload26 = load i32, ptr %.reg2mem25, align 4
  store i32 %.reload26, ptr %.reg2mem47, align 4
  br label %58

57:                                               ; preds = %16
  store i32 0, ptr %.reg2mem47, align 4
  br label %58

58:                                               ; preds = %57, %56
  %.reload48 = load i32, ptr %.reg2mem47, align 4
  store i32 %.reload48, ptr %.reg2mem23, align 4
  br label %59

59:                                               ; preds = %58
  %.reload24 = load i32, ptr %.reg2mem23, align 4
  %60 = zext i32 %.reload24 to i64
  %61 = trunc i64 %60 to i32
  switch i32 %61, label %200 [
    i32 0, label %62
  ]

62:                                               ; preds = %59
  %63 = getelementptr [1 x ptr], ptr %0, i32 0, i32 0
  %64 = load ptr, ptr %63, align 8
  %65 = getelementptr ptr, ptr %64, i32 1
  %66 = getelementptr ptr, ptr %64, i32 2
  %67 = getelementptr ptr, ptr %64, i32 3
  %68 = getelementptr ptr, ptr %64, i32 4
  %69 = load i64, ptr %65, align 4
  %70 = load i64, ptr %66, align 4
  %71 = load ptr, ptr %67, align 8
  %72 = load ptr, ptr %68, align 8
  %73 = call i1 @subtype_test_wrapper(ptr %71, i64 %70, i64 %69, i64 6681222582356018452, i64 ptrtoint (ptr @Character to i64), ptr %72)
  br i1 %73, label %74, label %88

74:                                               ; preds = %62
  %75 = getelementptr [1 x ptr], ptr %0, i32 0, i32 0
  %76 = load ptr, ptr %75, align 8
  %77 = getelementptr ptr, ptr %76, i32 1
  %78 = getelementptr ptr, ptr %76, i32 2
  %79 = getelementptr ptr, ptr %76, i32 3
  %80 = getelementptr ptr, ptr %76, i32 4
  %81 = load i64, ptr %77, align 4
  %82 = load i64, ptr %78, align 4
  %83 = load ptr, ptr %79, align 8
  %84 = load ptr, ptr %80, align 8
  %85 = call i1 @subtype_test_wrapper(ptr %83, i64 %82, i64 %81, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %84)
  %86 = xor i1 %85, true
  %87 = zext i1 %86 to i32
  store i32 %87, ptr %.reg2mem21, align 4
  %.reload22 = load i32, ptr %.reg2mem21, align 4
  store i32 %.reload22, ptr %.reg2mem45, align 4
  br label %89

88:                                               ; preds = %62
  store i32 0, ptr %.reg2mem45, align 4
  br label %89

89:                                               ; preds = %88, %74
  %.reload46 = load i32, ptr %.reg2mem45, align 4
  store i32 %.reload46, ptr %.reg2mem19, align 4
  br label %90

90:                                               ; preds = %89
  %.reload20 = load i32, ptr %.reg2mem19, align 4
  %91 = zext i32 %.reload20 to i64
  %92 = trunc i64 %91 to i32
  switch i32 %92, label %198 [
    i32 0, label %93
  ]

93:                                               ; preds = %90
  %94 = getelementptr [1 x ptr], ptr %0, i32 0, i32 0
  %95 = load ptr, ptr %94, align 8
  %96 = getelementptr ptr, ptr %95, i32 1
  %97 = getelementptr ptr, ptr %95, i32 2
  %98 = getelementptr ptr, ptr %95, i32 3
  %99 = getelementptr ptr, ptr %95, i32 4
  %100 = load i64, ptr %96, align 4
  %101 = load i64, ptr %97, align 4
  %102 = load ptr, ptr %98, align 8
  %103 = load ptr, ptr %99, align 8
  %104 = call i1 @subtype_test_wrapper(ptr %102, i64 %101, i64 %100, i64 -757315540097298781, i64 ptrtoint (ptr @f64_typ to i64), ptr %103)
  br i1 %104, label %105, label %106

105:                                              ; preds = %93
  store i32 3, ptr %.reg2mem35, align 4
  br label %196

106:                                              ; preds = %93
  %107 = getelementptr [1 x ptr], ptr %0, i32 0, i32 0
  %108 = load ptr, ptr %107, align 8
  %109 = getelementptr ptr, ptr %108, i32 1
  %110 = getelementptr ptr, ptr %108, i32 2
  %111 = getelementptr ptr, ptr %108, i32 3
  %112 = getelementptr ptr, ptr %108, i32 4
  %113 = load i64, ptr %109, align 4
  %114 = load i64, ptr %110, align 4
  %115 = load ptr, ptr %111, align 8
  %116 = load ptr, ptr %112, align 8
  %117 = call i1 @subtype_test_wrapper(ptr %115, i64 %114, i64 %113, i64 -5126806859456325683, i64 ptrtoint (ptr @nil_typ to i64), ptr %116)
  br i1 %117, label %118, label %119

118:                                              ; preds = %106
  store i32 4, ptr %.reg2mem37, align 4
  br label %194

119:                                              ; preds = %106
  %120 = getelementptr [1 x ptr], ptr %0, i32 0, i32 0
  %121 = load ptr, ptr %120, align 8
  %122 = getelementptr ptr, ptr %121, i32 1
  %123 = getelementptr ptr, ptr %121, i32 2
  %124 = getelementptr ptr, ptr %121, i32 3
  %125 = getelementptr ptr, ptr %121, i32 4
  %126 = load i64, ptr %122, align 4
  %127 = load i64, ptr %123, align 4
  %128 = load ptr, ptr %124, align 8
  %129 = load ptr, ptr %125, align 8
  %130 = call i1 @subtype_test_wrapper(ptr %128, i64 %127, i64 %126, i64 5801531371504802705, i64 ptrtoint (ptr @bool_typ to i64), ptr %129)
  br i1 %130, label %131, label %132

131:                                              ; preds = %119
  store i32 8, ptr %.reg2mem39, align 4
  br label %192

132:                                              ; preds = %119
  %133 = getelementptr [1 x ptr], ptr %0, i32 0, i32 0
  %134 = load ptr, ptr %133, align 8
  %135 = getelementptr ptr, ptr %134, i32 1
  %136 = getelementptr ptr, ptr %134, i32 2
  %137 = getelementptr ptr, ptr %134, i32 3
  %138 = getelementptr ptr, ptr %134, i32 4
  %139 = load i64, ptr %135, align 4
  %140 = load i64, ptr %136, align 4
  %141 = load ptr, ptr %137, align 8
  %142 = load ptr, ptr %138, align 8
  %143 = call i1 @subtype_test_wrapper(ptr %141, i64 %140, i64 %139, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %142)
  br i1 %143, label %144, label %158

144:                                              ; preds = %132
  %145 = getelementptr [1 x ptr], ptr %0, i32 0, i32 0
  %146 = load ptr, ptr %145, align 8
  %147 = getelementptr ptr, ptr %146, i32 1
  %148 = getelementptr ptr, ptr %146, i32 2
  %149 = getelementptr ptr, ptr %146, i32 3
  %150 = getelementptr ptr, ptr %146, i32 4
  %151 = load i64, ptr %147, align 4
  %152 = load i64, ptr %148, align 4
  %153 = load ptr, ptr %149, align 8
  %154 = load ptr, ptr %150, align 8
  %155 = call i1 @subtype_test_wrapper(ptr %153, i64 %152, i64 %151, i64 6681222582356018452, i64 ptrtoint (ptr @Character to i64), ptr %154)
  %156 = xor i1 %155, true
  %157 = zext i1 %156 to i32
  store i32 %157, ptr %.reg2mem17, align 4
  %.reload18 = load i32, ptr %.reg2mem17, align 4
  store i32 %.reload18, ptr %.reg2mem43, align 4
  br label %159

158:                                              ; preds = %132
  store i32 0, ptr %.reg2mem43, align 4
  br label %159

159:                                              ; preds = %158, %144
  %.reload44 = load i32, ptr %.reg2mem43, align 4
  store i32 %.reload44, ptr %.reg2mem15, align 4
  br label %160

160:                                              ; preds = %159
  %.reload16 = load i32, ptr %.reg2mem15, align 4
  %161 = zext i32 %.reload16 to i64
  %162 = trunc i64 %161 to i32
  switch i32 %162, label %190 [
    i32 0, label %163
  ]

163:                                              ; preds = %160
  %164 = getelementptr [1 x ptr], ptr %0, i32 0, i32 0
  %165 = load ptr, ptr %164, align 8
  %166 = getelementptr ptr, ptr %165, i32 1
  %167 = getelementptr ptr, ptr %165, i32 2
  %168 = getelementptr ptr, ptr %165, i32 3
  %169 = getelementptr ptr, ptr %165, i32 4
  %170 = load i64, ptr %166, align 4
  %171 = load i64, ptr %167, align 4
  %172 = load ptr, ptr %168, align 8
  %173 = load ptr, ptr %169, align 8
  %174 = call i1 @subtype_test_wrapper(ptr %172, i64 %171, i64 %170, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %173)
  %175 = select i1 %174, i32 6, i32 1
  store i32 %175, ptr %.reg2mem13, align 4
  br i1 %174, label %176, label %177

176:                                              ; preds = %163
  br label %189

177:                                              ; preds = %163
  %178 = getelementptr [1 x ptr], ptr %0, i32 0, i32 0
  %179 = load ptr, ptr %178, align 8
  %180 = getelementptr ptr, ptr %179, i32 1
  %181 = getelementptr ptr, ptr %179, i32 2
  %182 = getelementptr ptr, ptr %179, i32 3
  %183 = getelementptr ptr, ptr %179, i32 4
  %184 = load i64, ptr %180, align 4
  %185 = load i64, ptr %181, align 4
  %186 = load ptr, ptr %182, align 8
  %187 = load ptr, ptr %183, align 8
  %188 = call i1 @subtype_test_wrapper(ptr %186, i64 %185, i64 %184, i64 2582149688529881115, i64 ptrtoint (ptr @i8_typ to i64), ptr %187)
  br label %189

189:                                              ; preds = %177, %176
  %.reload14 = load i32, ptr %.reg2mem13, align 4
  store i32 %.reload14, ptr %.reg2mem41, align 4
  br label %191

190:                                              ; preds = %160
  store i32 5, ptr %.reg2mem41, align 4
  br label %191

191:                                              ; preds = %190, %189
  %.reload42 = load i32, ptr %.reg2mem41, align 4
  store i32 %.reload42, ptr %.reg2mem11, align 4
  %.reload12 = load i32, ptr %.reg2mem11, align 4
  store i32 %.reload12, ptr %.reg2mem39, align 4
  br label %192

192:                                              ; preds = %191, %131
  %.reload40 = load i32, ptr %.reg2mem39, align 4
  store i32 %.reload40, ptr %.reg2mem9, align 4
  br label %193

193:                                              ; preds = %192
  %.reload10 = load i32, ptr %.reg2mem9, align 4
  store i32 %.reload10, ptr %.reg2mem37, align 4
  br label %194

194:                                              ; preds = %193, %118
  %.reload38 = load i32, ptr %.reg2mem37, align 4
  store i32 %.reload38, ptr %.reg2mem7, align 4
  br label %195

195:                                              ; preds = %194
  %.reload8 = load i32, ptr %.reg2mem7, align 4
  store i32 %.reload8, ptr %.reg2mem35, align 4
  br label %196

196:                                              ; preds = %195, %105
  %.reload36 = load i32, ptr %.reg2mem35, align 4
  store i32 %.reload36, ptr %.reg2mem5, align 4
  br label %197

197:                                              ; preds = %196
  %.reload6 = load i32, ptr %.reg2mem5, align 4
  store i32 %.reload6, ptr %.reg2mem33, align 4
  br label %199

198:                                              ; preds = %90
  store i32 7, ptr %.reg2mem33, align 4
  br label %199

199:                                              ; preds = %198, %197
  %.reload34 = load i32, ptr %.reg2mem33, align 4
  store i32 %.reload34, ptr %.reg2mem3, align 4
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  store i32 %.reload4, ptr %.reg2mem31, align 4
  br label %201

200:                                              ; preds = %59
  store i32 9, ptr %.reg2mem31, align 4
  br label %201

201:                                              ; preds = %200, %199
  %.reload32 = load i32, ptr %.reg2mem31, align 4
  store i32 %.reload32, ptr %.reg2mem1, align 4
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem29, align 4
  br label %202

202:                                              ; preds = %201, %15
  %.reload30 = load i32, ptr %.reg2mem29, align 4
  store i32 %.reload30, ptr %.reg2mem, align 4
  br label %203

203:                                              ; preds = %202
  %.reload = load i32, ptr %.reg2mem, align 4
  %204 = zext i32 %.reload to i64
  %205 = or i64 0, %204
  %206 = inttoptr i64 %205 to ptr
  %207 = ptrtoint ptr %206 to i64
  %208 = trunc i64 %207 to i32
  %209 = getelementptr [10 x ptr], ptr @IO, i32 0, i32 %208
  %210 = getelementptr ptr, ptr %209, i32 7
  %211 = load ptr, ptr %210, align 8
  ret ptr %211
}

define void @IO__Self_print_xPtri8(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %5 = load i8, ptr %4, align 1
  %6 = sext i8 %5 to i32
  %7 = call i32 (ptr, ...) @printf(ptr @i32_string, i32 %6)
  ret void
}

define void @IO__Self_print_xPtri64(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %5 = load i64, ptr %4, align 4
  %6 = call i32 (ptr, ...) @printf(ptr @i64_string, i64 %5)
  ret void
}

define void @IO__Self_print_xPtrf64(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %5 = load double, ptr %4, align 8
  %6 = call i32 (ptr, ...) @printf(ptr @float_string, double %5)
  ret void
}

define void @IO__Self_print_xNil(ptr %0, { ptr, i160 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 4) to i64))
  %4 = alloca ptr, align 8
  store ptr %3, ptr %4, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  %18 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %19 = load ptr, ptr %5, align 8
  %20 = getelementptr i8, ptr %19, i64 0
  %21 = load i24, ptr @nxvqe_nil, align 4
  store i24 %21, ptr %20, align 4
  %22 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  store ptr @String, ptr %23, align 8
  store ptr %22, ptr %24, align 8
  store i32 7, ptr %25, align 4
  %26 = call ptr @llvm.invariant.start.p0(i64 16, ptr %23)
  %27 = getelementptr { ptr }, ptr %5, i32 0, i32 0
  %28 = load ptr, ptr %27, align 8
  %29 = insertvalue { ptr } undef, ptr %28, 0
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %31 = load ptr, ptr %30, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %31, 0
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %34 = load ptr, ptr %33, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr %34, 1
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %37 = load ptr, ptr %36, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %37, 2
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %40 = load i32, ptr %39, align 4
  %41 = insertvalue { ptr, ptr, ptr, i32 } %38, i32 %40, 3
  %42 = alloca [3 x ptr], align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 24, ptr %42)
  %44 = getelementptr [3 x ptr], ptr %42, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %44, align 8
  %45 = getelementptr [3 x ptr], ptr %42, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %45, align 8
  %46 = getelementptr [3 x ptr], ptr %42, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %46, align 8
  %47 = call ptr @llvm.invariant.start.p0(i64 280, ptr %31)
  %48 = getelementptr ptr, ptr %31, i32 %40
  %49 = getelementptr ptr, ptr %48, i32 4
  %50 = load ptr, ptr %49, align 8
  %51 = alloca [3 x ptr], align 8
  %52 = getelementptr [3 x ptr], ptr %51, i32 0, i32 0
  store ptr @buffer_typ, ptr %52, align 8
  %53 = getelementptr [3 x ptr], ptr %51, i32 0, i32 1
  store ptr @i32_typ, ptr %53, align 8
  %54 = getelementptr [3 x ptr], ptr %51, i32 0, i32 2
  store ptr @i32_typ, ptr %54, align 8
  %55 = call ptr %50({ ptr, ptr, ptr, i32 } %41, ptr %51, { ptr } %29, i32 3, i32 4)
  call void %55({ ptr, ptr, ptr, i32 } %41, { ptr, ptr, ptr, i32 } %41, ptr %42, { ptr } %29, i32 3, i32 4)
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %57 = load ptr, ptr %56, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %57, 0
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } %58, ptr %60, 1
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %63 = load ptr, ptr %62, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %63, 2
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %66 = load i32, ptr %65, align 4
  %67 = insertvalue { ptr, ptr, ptr, i32 } %64, i32 %66, 3
  %68 = alloca [0 x ptr], align 8
  %69 = call ptr @llvm.invariant.start.p0(i64 0, ptr %68)
  %70 = call ptr @llvm.invariant.start.p0(i64 280, ptr %57)
  %71 = getelementptr ptr, ptr %57, i32 %66
  %72 = getelementptr ptr, ptr %71, i32 14
  %73 = load ptr, ptr %72, align 8
  %74 = alloca [0 x ptr], align 8
  %75 = call ptr %73({ ptr, ptr, ptr, i32 } %67, ptr %74)
  %76 = call { ptr } %75({ ptr, ptr, ptr, i32 } %67, { ptr, ptr, ptr, i32 } %67, ptr %68)
  %77 = alloca ptr, align 8
  store { ptr } %76, ptr %77, align 8
  %78 = load ptr, ptr %77, align 8
  %79 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %78)
  ret void
}

define void @IO__Self_print_xString(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = load i32, ptr %14, align 4
  store i32 %16, ptr %15, align 4
  call void @set_offset(ptr %4, ptr @String)
  %17 = call ptr @llvm.invariant.start.p0(i64 24, ptr %4)
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %19 = load ptr, ptr %18, align 8
  %20 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %19, 0
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %22 = load ptr, ptr %21, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } %20, ptr %22, 1
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %25 = load ptr, ptr %24, align 8
  %26 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %25, 2
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %28 = load i32, ptr %27, align 4
  %29 = insertvalue { ptr, ptr, ptr, i32 } %26, i32 %28, 3
  %30 = alloca [0 x ptr], align 8
  %31 = call ptr @llvm.invariant.start.p0(i64 0, ptr %30)
  %32 = call ptr @llvm.invariant.start.p0(i64 280, ptr %19)
  %33 = getelementptr ptr, ptr %19, i32 %28
  %34 = getelementptr ptr, ptr %33, i32 14
  %35 = load ptr, ptr %34, align 8
  %36 = alloca [0 x ptr], align 8
  %37 = call ptr %35({ ptr, ptr, ptr, i32 } %29, ptr %36)
  %38 = call { ptr } %37({ ptr, ptr, ptr, i32 } %29, { ptr, ptr, ptr, i32 } %29, ptr %30)
  %39 = alloca ptr, align 8
  store { ptr } %38, ptr %39, align 8
  %40 = load ptr, ptr %39, align 8
  %41 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %40)
  ret void
}

define void @IO__Self_print_xPtri32(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %5 = load i32, ptr %4, align 4
  %6 = call i32 (ptr, ...) @printf(ptr @i32_string, i32 %5)
  ret void
}

define void @IO__Self_print_xCharacter(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = load i32, ptr %14, align 4
  store i32 %16, ptr %15, align 4
  call void @set_offset(ptr %4, ptr @Character)
  %17 = call ptr @llvm.invariant.start.p0(i64 24, ptr %4)
  %18 = call ptr @malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 2) to i64))
  %19 = alloca ptr, align 8
  store ptr %18, ptr %19, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = load i32, ptr %30, align 4
  store i32 %32, ptr %31, align 4
  %33 = call ptr @llvm.invariant.start.p0(i64 16, ptr %20)
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %35 = load ptr, ptr %34, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %35, 0
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %38 = load ptr, ptr %37, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %36, ptr %38, 1
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %41 = load ptr, ptr %40, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } %39, ptr %41, 2
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %44 = load i32, ptr %43, align 4
  %45 = insertvalue { ptr, ptr, ptr, i32 } %42, i32 %44, 3
  %46 = alloca [0 x ptr], align 8
  %47 = call ptr @llvm.invariant.start.p0(i64 0, ptr %46)
  %48 = call ptr @llvm.invariant.start.p0(i64 40, ptr %35)
  %49 = getelementptr ptr, ptr %35, i32 %44
  %50 = getelementptr ptr, ptr %49, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = alloca [0 x ptr], align 8
  %53 = call ptr %51({ ptr, ptr, ptr, i32 } %45, ptr %52)
  %54 = call i8 %53({ ptr, ptr, ptr, i32 } %45, { ptr, ptr, ptr, i32 } %45, ptr %46)
  %55 = load ptr, ptr %20, align 8
  %56 = getelementptr i8, ptr %55, i64 0
  store i8 %54, ptr %56, align 1
  %57 = load ptr, ptr %20, align 8
  %58 = getelementptr i8, ptr %57, i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  store i8 0, ptr %58, align 1
  %59 = load ptr, ptr %20, align 8
  %60 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %59)
  ret void
}

define void @IO__Self_print_xPtri1(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %5 = load i1, ptr %4, align 1
  %6 = alloca i32, align 4
  %7 = alloca ptr, align 8
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca [3 x ptr], align 8
  %16 = alloca [3 x ptr], align 8
  %17 = alloca [0 x ptr], align 8
  %18 = alloca [0 x ptr], align 8
  %19 = alloca ptr, align 8
  %20 = alloca i32, align 4
  %21 = alloca ptr, align 8
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca { ptr, ptr, ptr, i32 }, align 8
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  %29 = alloca [3 x ptr], align 8
  %30 = alloca [3 x ptr], align 8
  %31 = alloca [0 x ptr], align 8
  %32 = alloca [0 x ptr], align 8
  %33 = alloca ptr, align 8
  br i1 %5, label %34, label %112

34:                                               ; preds = %2
  store i32 5, ptr %6, align 4
  %35 = load i32, ptr %6, align 4
  %36 = getelementptr i8, ptr null, i32 %35
  %37 = ptrtoint ptr %36 to i64
  %38 = call ptr @malloc(i64 %37)
  store ptr %38, ptr %7, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %41 = load ptr, ptr %39, align 8
  store ptr %41, ptr %40, align 8
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %44 = load ptr, ptr %42, align 8
  store ptr %44, ptr %43, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %47 = load ptr, ptr %45, align 8
  store ptr %47, ptr %46, align 8
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %50 = load i32, ptr %48, align 4
  store i32 %50, ptr %49, align 4
  %51 = call ptr @llvm.invariant.start.p0(i64 16, ptr %8)
  store i32 0, ptr %9, align 4
  %52 = load ptr, ptr %8, align 8
  %53 = load i32, ptr %9, align 4
  %54 = getelementptr [4 x i8], ptr null, i32 %53
  %55 = ptrtoint ptr %54 to i64
  %56 = getelementptr i8, ptr %52, i64 %55
  %57 = load i32, ptr @ijspu_true, align 4
  store i32 %57, ptr %56, align 4
  store i32 4, ptr %10, align 4
  store i32 5, ptr %11, align 4
  %58 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  store ptr @String, ptr %12, align 8
  store ptr %58, ptr %59, align 8
  store i32 7, ptr %60, align 4
  %61 = call ptr @llvm.invariant.start.p0(i64 16, ptr %12)
  store i32 4, ptr %13, align 4
  store i32 5, ptr %14, align 4
  %62 = getelementptr { ptr }, ptr %8, i32 0, i32 0
  %63 = load ptr, ptr %62, align 8
  %64 = insertvalue { ptr } undef, ptr %63, 0
  %65 = load i32, ptr %13, align 4
  %66 = load i32, ptr %14, align 4
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 0
  %68 = load ptr, ptr %67, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %68, 0
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %71 = load ptr, ptr %70, align 8
  %72 = insertvalue { ptr, ptr, ptr, i32 } %69, ptr %71, 1
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 2
  %74 = load ptr, ptr %73, align 8
  %75 = insertvalue { ptr, ptr, ptr, i32 } %72, ptr %74, 2
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  %77 = load i32, ptr %76, align 4
  %78 = insertvalue { ptr, ptr, ptr, i32 } %75, i32 %77, 3
  %79 = call ptr @llvm.invariant.start.p0(i64 24, ptr %15)
  %80 = getelementptr [3 x ptr], ptr %15, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %80, align 8
  %81 = getelementptr [3 x ptr], ptr %15, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %81, align 8
  %82 = getelementptr [3 x ptr], ptr %15, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %82, align 8
  %83 = call ptr @llvm.invariant.start.p0(i64 280, ptr %68)
  %84 = getelementptr ptr, ptr %68, i32 %77
  %85 = getelementptr ptr, ptr %84, i32 4
  %86 = load ptr, ptr %85, align 8
  %87 = getelementptr [3 x ptr], ptr %16, i32 0, i32 0
  store ptr @buffer_typ, ptr %87, align 8
  %88 = getelementptr [3 x ptr], ptr %16, i32 0, i32 1
  store ptr @i32_typ, ptr %88, align 8
  %89 = getelementptr [3 x ptr], ptr %16, i32 0, i32 2
  store ptr @i32_typ, ptr %89, align 8
  %90 = call ptr %86({ ptr, ptr, ptr, i32 } %78, ptr %16, { ptr } %64, i32 %65, i32 %66)
  call void %90({ ptr, ptr, ptr, i32 } %78, { ptr, ptr, ptr, i32 } %78, ptr %15, { ptr } %64, i32 %65, i32 %66)
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 0
  %92 = load ptr, ptr %91, align 8
  %93 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %92, 0
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %95 = load ptr, ptr %94, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } %93, ptr %95, 1
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 2
  %98 = load ptr, ptr %97, align 8
  %99 = insertvalue { ptr, ptr, ptr, i32 } %96, ptr %98, 2
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  %101 = load i32, ptr %100, align 4
  %102 = insertvalue { ptr, ptr, ptr, i32 } %99, i32 %101, 3
  %103 = call ptr @llvm.invariant.start.p0(i64 0, ptr %17)
  %104 = call ptr @llvm.invariant.start.p0(i64 280, ptr %92)
  %105 = getelementptr ptr, ptr %92, i32 %101
  %106 = getelementptr ptr, ptr %105, i32 14
  %107 = load ptr, ptr %106, align 8
  %108 = call ptr %107({ ptr, ptr, ptr, i32 } %102, ptr %18)
  %109 = call { ptr } %108({ ptr, ptr, ptr, i32 } %102, { ptr, ptr, ptr, i32 } %102, ptr %17)
  store { ptr } %109, ptr %19, align 8
  %110 = load ptr, ptr %19, align 8
  %111 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %110)
  br label %190

112:                                              ; preds = %2
  store i32 6, ptr %20, align 4
  %113 = load i32, ptr %20, align 4
  %114 = getelementptr i8, ptr null, i32 %113
  %115 = ptrtoint ptr %114 to i64
  %116 = call ptr @malloc(i64 %115)
  store ptr %116, ptr %21, align 8
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %119 = load ptr, ptr %117, align 8
  store ptr %119, ptr %118, align 8
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %122 = load ptr, ptr %120, align 8
  store ptr %122, ptr %121, align 8
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %125 = load ptr, ptr %123, align 8
  store ptr %125, ptr %124, align 8
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %128 = load i32, ptr %126, align 4
  store i32 %128, ptr %127, align 4
  %129 = call ptr @llvm.invariant.start.p0(i64 16, ptr %22)
  store i32 0, ptr %23, align 4
  %130 = load ptr, ptr %22, align 8
  %131 = load i32, ptr %23, align 4
  %132 = getelementptr [5 x i8], ptr null, i32 %131
  %133 = ptrtoint ptr %132 to i64
  %134 = getelementptr i8, ptr %130, i64 %133
  %135 = load i40, ptr @ftrzr_false, align 4
  store i40 %135, ptr %134, align 4
  store i32 5, ptr %24, align 4
  store i32 6, ptr %25, align 4
  %136 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  store ptr @String, ptr %26, align 8
  store ptr %136, ptr %137, align 8
  store i32 7, ptr %138, align 4
  %139 = call ptr @llvm.invariant.start.p0(i64 16, ptr %26)
  store i32 5, ptr %27, align 4
  store i32 6, ptr %28, align 4
  %140 = getelementptr { ptr }, ptr %22, i32 0, i32 0
  %141 = load ptr, ptr %140, align 8
  %142 = insertvalue { ptr } undef, ptr %141, 0
  %143 = load i32, ptr %27, align 4
  %144 = load i32, ptr %28, align 4
  %145 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %146 = load ptr, ptr %145, align 8
  %147 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %146, 0
  %148 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %149 = load ptr, ptr %148, align 8
  %150 = insertvalue { ptr, ptr, ptr, i32 } %147, ptr %149, 1
  %151 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %152 = load ptr, ptr %151, align 8
  %153 = insertvalue { ptr, ptr, ptr, i32 } %150, ptr %152, 2
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %155 = load i32, ptr %154, align 4
  %156 = insertvalue { ptr, ptr, ptr, i32 } %153, i32 %155, 3
  %157 = call ptr @llvm.invariant.start.p0(i64 24, ptr %29)
  %158 = getelementptr [3 x ptr], ptr %29, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %158, align 8
  %159 = getelementptr [3 x ptr], ptr %29, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %159, align 8
  %160 = getelementptr [3 x ptr], ptr %29, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %160, align 8
  %161 = call ptr @llvm.invariant.start.p0(i64 280, ptr %146)
  %162 = getelementptr ptr, ptr %146, i32 %155
  %163 = getelementptr ptr, ptr %162, i32 4
  %164 = load ptr, ptr %163, align 8
  %165 = getelementptr [3 x ptr], ptr %30, i32 0, i32 0
  store ptr @buffer_typ, ptr %165, align 8
  %166 = getelementptr [3 x ptr], ptr %30, i32 0, i32 1
  store ptr @i32_typ, ptr %166, align 8
  %167 = getelementptr [3 x ptr], ptr %30, i32 0, i32 2
  store ptr @i32_typ, ptr %167, align 8
  %168 = call ptr %164({ ptr, ptr, ptr, i32 } %156, ptr %30, { ptr } %142, i32 %143, i32 %144)
  call void %168({ ptr, ptr, ptr, i32 } %156, { ptr, ptr, ptr, i32 } %156, ptr %29, { ptr } %142, i32 %143, i32 %144)
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %170 = load ptr, ptr %169, align 8
  %171 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %170, 0
  %172 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %173 = load ptr, ptr %172, align 8
  %174 = insertvalue { ptr, ptr, ptr, i32 } %171, ptr %173, 1
  %175 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %176 = load ptr, ptr %175, align 8
  %177 = insertvalue { ptr, ptr, ptr, i32 } %174, ptr %176, 2
  %178 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %179 = load i32, ptr %178, align 4
  %180 = insertvalue { ptr, ptr, ptr, i32 } %177, i32 %179, 3
  %181 = call ptr @llvm.invariant.start.p0(i64 0, ptr %31)
  %182 = call ptr @llvm.invariant.start.p0(i64 280, ptr %170)
  %183 = getelementptr ptr, ptr %170, i32 %179
  %184 = getelementptr ptr, ptr %183, i32 14
  %185 = load ptr, ptr %184, align 8
  %186 = call ptr %185({ ptr, ptr, ptr, i32 } %180, ptr %32)
  %187 = call { ptr } %186({ ptr, ptr, ptr, i32 } %180, { ptr, ptr, ptr, i32 } %180, ptr %31)
  store { ptr } %187, ptr %33, align 8
  %188 = load ptr, ptr %33, align 8
  %189 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %188)
  br label %190

190:                                              ; preds = %112, %34
  ret void
}

define void @IO__Self_print_xRepresentable(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = load i32, ptr %14, align 4
  store i32 %16, ptr %15, align 4
  call void @set_offset(ptr %4, ptr @Representable)
  %17 = call ptr @llvm.invariant.start.p0(i64 24, ptr %4)
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %19 = load ptr, ptr %18, align 8
  %20 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %19, 0
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %22 = load ptr, ptr %21, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } %20, ptr %22, 1
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %25 = load ptr, ptr %24, align 8
  %26 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %25, 2
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %28 = load i32, ptr %27, align 4
  %29 = insertvalue { ptr, ptr, ptr, i32 } %26, i32 %28, 3
  %30 = alloca [0 x ptr], align 8
  %31 = call ptr @llvm.invariant.start.p0(i64 0, ptr %30)
  %32 = call ptr @llvm.invariant.start.p0(i64 16, ptr %19)
  %33 = getelementptr ptr, ptr %19, i32 %28
  %34 = load ptr, ptr %33, align 8
  %35 = alloca [0 x ptr], align 8
  %36 = call ptr %34({ ptr, ptr, ptr, i32 } %29, ptr %35)
  %37 = call { ptr, ptr, ptr, i32 } %36({ ptr, ptr, ptr, i32 } %29, { ptr, ptr, ptr, i32 } %29, ptr %30)
  %38 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %37, ptr %38, align 8
  %39 = call ptr @llvm.invariant.start.p0(i64 16, ptr %38)
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 0
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 0
  %43 = load ptr, ptr %41, align 8
  store ptr %43, ptr %42, align 8
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 1
  %46 = load ptr, ptr %44, align 8
  store ptr %46, ptr %45, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 2
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 2
  %49 = load ptr, ptr %47, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 3
  %52 = load i32, ptr %50, align 4
  store i32 %52, ptr %51, align 4
  call void @set_offset(ptr %40, ptr @String)
  %53 = call ptr @llvm.invariant.start.p0(i64 24, ptr %40)
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 0
  %55 = load ptr, ptr %54, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %55, 0
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = insertvalue { ptr, ptr, ptr, i32 } %56, ptr %58, 1
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 2
  %61 = load ptr, ptr %60, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } %59, ptr %61, 2
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 3
  %64 = load i32, ptr %63, align 4
  %65 = insertvalue { ptr, ptr, ptr, i32 } %62, i32 %64, 3
  %66 = alloca [0 x ptr], align 8
  %67 = call ptr @llvm.invariant.start.p0(i64 0, ptr %66)
  %68 = call ptr @llvm.invariant.start.p0(i64 280, ptr %55)
  %69 = getelementptr ptr, ptr %55, i32 %64
  %70 = getelementptr ptr, ptr %69, i32 14
  %71 = load ptr, ptr %70, align 8
  %72 = alloca [0 x ptr], align 8
  %73 = call ptr %71({ ptr, ptr, ptr, i32 } %65, ptr %72)
  %74 = call { ptr } %73({ ptr, ptr, ptr, i32 } %65, { ptr, ptr, ptr, i32 } %65, ptr %66)
  %75 = alloca ptr, align 8
  store { ptr } %74, ptr %75, align 8
  %76 = load ptr, ptr %75, align 8
  %77 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %76)
  ret void
}

define ptr @Blocking_B_init_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [2 x ptr], ptr %4, i32 0, i32 1
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @Blocking_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Blocking)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  ret void
}

define ptr @Channel_field_value(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, i32 } }, ptr %0, i32 0, i32 0
  ret ptr %2
}

define ptr @Channel_B_init_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [7 x ptr], ptr %4, i32 0, i32 4
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Channel_B_get_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [7 x ptr], ptr %4, i32 0, i32 5
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Channel_B_put_new_valuePtri32({ ptr, ptr, ptr, i32 } %0, ptr %1, i32 %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [7 x ptr], ptr %16, i32 0, i32 6
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define void @Channel_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Channel)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 56, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %27 = call ptr %25(ptr %26)
  %28 = alloca i32, align 4
  %29 = alloca ptr, align 8
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %29, align 4
  %30 = getelementptr { ptr, i32 }, ptr %27, i32 0, i32 0
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, i32 }, ptr %27, i32 0, i32 1
  %33 = load i32, ptr %28, align 4
  store i32 %33, ptr %32, align 4
  ret void
}

define i32 @Channel_get_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca ptr, align 8
  %.reg2mem4 = alloca i32, align 4
  %.reg2mem6 = alloca i32, align 4
  %.reg2mem9 = alloca i32, align 4
  %.reg2mem11 = alloca i32, align 4
  %.reg2mem13 = alloca ptr, align 8
  %.reg2mem16 = alloca i32, align 4
  %.reg2mem18 = alloca ptr, align 8
  %.reg2mem20 = alloca i32, align 4
  %.reg2mem22 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Channel)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = alloca i1, align 1
  %21 = alloca i64, align 8
  %22 = alloca i1, align 1
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = alloca [0 x ptr], align 8
  %25 = alloca [0 x ptr], align 8
  %26 = alloca { ptr, i160 }, align 8
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  %29 = alloca ptr, align 8
  %30 = alloca i64, align 8
  br label %31

31:                                               ; preds = %90, %3
  store i1 true, ptr %20, align 1
  %32 = load i1, ptr %20, align 1
  br i1 %32, label %33, label %86

33:                                               ; preds = %31
  %34 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %35 = extractvalue { ptr, ptr, ptr, i32 } %34, 0
  %36 = call ptr @llvm.invariant.start.p0(i64 56, ptr %35)
  %37 = extractvalue { ptr, ptr, ptr, i32 } %34, 3
  %38 = getelementptr ptr, ptr %35, i32 %37
  %39 = load ptr, ptr %38, align 8
  %40 = extractvalue { ptr, ptr, ptr, i32 } %34, 1
  %41 = call ptr %39(ptr %40)
  store ptr %41, ptr %.reg2mem13, align 8
  %.reload15 = load ptr, ptr %.reg2mem13, align 8
  %42 = getelementptr { ptr, i32 }, ptr %.reload15, i32 0, i32 0
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %21, align 4
  %43 = load ptr, ptr %42, align 8
  %44 = ptrtoint ptr %43 to i64
  %45 = load ptr, ptr %21, align 8
  %46 = ptrtoint ptr %45 to i64
  %47 = icmp ne i64 %44, %46
  store i1 %47, ptr %22, align 1
  %48 = load i1, ptr %22, align 1
  %49 = zext i1 %48 to i32
  store i32 %49, ptr %.reg2mem11, align 4
  %50 = xor i1 %48, true
  %51 = zext i1 %50 to i32
  store i32 %51, ptr %.reg2mem9, align 4
  br i1 %48, label %52, label %53

52:                                               ; preds = %33
  br label %85

53:                                               ; preds = %33
  %54 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  store ptr @Blocking, ptr %23, align 8
  store ptr %54, ptr %55, align 8
  store i32 7, ptr %56, align 4
  %57 = call ptr @llvm.invariant.start.p0(i64 16, ptr %23)
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %59 = load ptr, ptr %58, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %59, 0
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %62 = load ptr, ptr %61, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr %62, 1
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %65 = load ptr, ptr %64, align 8
  %66 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %65, 2
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %68 = load i32, ptr %67, align 4
  %69 = insertvalue { ptr, ptr, ptr, i32 } %66, i32 %68, 3
  %70 = call ptr @llvm.invariant.start.p0(i64 0, ptr %24)
  %71 = call ptr @llvm.invariant.start.p0(i64 16, ptr %59)
  %72 = getelementptr ptr, ptr %59, i32 %68
  %73 = load ptr, ptr %72, align 8
  %74 = call ptr %73({ ptr, ptr, ptr, i32 } %69, ptr %25)
  call void %74({ ptr, ptr, ptr, i32 } %69, { ptr, ptr, ptr, i32 } %69, ptr %24)
  %75 = getelementptr { ptr, i160 }, ptr %23, i32 0, i32 0
  %76 = load ptr, ptr %75, align 8
  %77 = insertvalue { ptr, i160 } undef, ptr %76, 0
  %78 = getelementptr { ptr, i160 }, ptr %23, i32 0, i32 1
  %79 = load i160, ptr %78, align 4
  %80 = insertvalue { ptr, i160 } %77, i160 %79, 1
  %81 = call ptr @get_current_coroutine()
  %82 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %81, i32 0, i32 4
  store { ptr, i160 } %80, ptr %82, align 8
  call void @coroutine_yield(ptr %81)
  %83 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %81, i32 0, i32 4
  %84 = load { ptr, i160 }, ptr %83, align 8
  store { ptr, i160 } %84, ptr %26, align 8
  br label %85

85:                                               ; preds = %53, %52
  %.reload10 = load i32, ptr %.reg2mem9, align 4
  %.reload12 = load i32, ptr %.reg2mem11, align 4
  %.reload14 = load ptr, ptr %.reg2mem13, align 8
  store ptr %.reload14, ptr %.reg2mem18, align 8
  store i32 %.reload10, ptr %.reg2mem20, align 4
  store i32 %.reload12, ptr %.reg2mem22, align 4
  br label %87

86:                                               ; preds = %31
  store ptr poison, ptr %.reg2mem18, align 8
  store i32 0, ptr %.reg2mem20, align 4
  store i32 2, ptr %.reg2mem22, align 4
  br label %87

87:                                               ; preds = %86, %85
  %.reload23 = load i32, ptr %.reg2mem22, align 4
  %.reload21 = load i32, ptr %.reg2mem20, align 4
  %.reload19 = load ptr, ptr %.reg2mem18, align 8
  store i32 %.reload23, ptr %.reg2mem6, align 4
  store i32 %.reload21, ptr %.reg2mem4, align 4
  store ptr %.reload19, ptr %.reg2mem1, align 8
  br label %88

88:                                               ; preds = %87
  %.reload5 = load i32, ptr %.reg2mem4, align 4
  %89 = trunc i32 %.reload5 to i1
  %.reload3 = load ptr, ptr %.reg2mem1, align 8
  %.reload8 = load i32, ptr %.reg2mem6, align 4
  br i1 %89, label %90, label %91

90:                                               ; preds = %88
  br label %31

91:                                               ; preds = %88
  %.reload7 = load i32, ptr %.reg2mem6, align 4
  %92 = zext i32 %.reload7 to i64
  %93 = trunc i64 %92 to i32
  switch i32 %93, label %111 [
    i32 1, label %94
  ]

94:                                               ; preds = %91
  %.reload2 = load ptr, ptr %.reg2mem1, align 8
  %95 = getelementptr { ptr, i32 }, ptr %.reload2, i32 0, i32 1
  %96 = load i32, ptr %95, align 4
  store i32 %96, ptr %27, align 4
  %97 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %98 = extractvalue { ptr, ptr, ptr, i32 } %97, 0
  %99 = call ptr @llvm.invariant.start.p0(i64 56, ptr %98)
  %100 = extractvalue { ptr, ptr, ptr, i32 } %97, 3
  %101 = getelementptr ptr, ptr %98, i32 %100
  %102 = load ptr, ptr %101, align 8
  %103 = extractvalue { ptr, ptr, ptr, i32 } %97, 1
  %104 = call ptr %102(ptr %103)
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %30, align 4
  %105 = load i64, ptr %30, align 4
  store i64 %105, ptr %29, align 4
  %106 = getelementptr { ptr, i32 }, ptr %104, i32 0, i32 0
  %107 = load ptr, ptr %29, align 8
  store ptr %107, ptr %106, align 8
  %108 = getelementptr { ptr, i32 }, ptr %104, i32 0, i32 1
  %109 = load i32, ptr %28, align 4
  store i32 %109, ptr %108, align 4
  %110 = load i32, ptr %27, align 4
  store i32 %110, ptr %.reg2mem, align 4
  %.reload = load i32, ptr %.reg2mem, align 4
  store i32 %.reload, ptr %.reg2mem16, align 4
  br label %112

111:                                              ; preds = %91
  store i32 poison, ptr %.reg2mem16, align 4
  br label %112

112:                                              ; preds = %111, %94
  %.reload17 = load i32, ptr %.reg2mem16, align 4
  ret i32 %.reload17
}

define void @Channel_put_new_valuePtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem5 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Channel)
  %20 = call ptr @llvm.invariant.start.p0(i64 24, ptr %7)
  %21 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %22 = extractvalue { ptr, ptr, ptr, i32 } %21, 0
  %23 = call ptr @llvm.invariant.start.p0(i64 56, ptr %22)
  %24 = extractvalue { ptr, ptr, ptr, i32 } %21, 3
  %25 = getelementptr ptr, ptr %22, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = extractvalue { ptr, ptr, ptr, i32 } %21, 1
  %28 = call ptr %26(ptr %27)
  store ptr %28, ptr %.reg2mem5, align 8
  %.reload9 = load ptr, ptr %.reg2mem5, align 8
  %29 = getelementptr { ptr, i32 }, ptr %.reload9, i32 0, i32 0
  store ptr %29, ptr %.reg2mem3, align 8
  %30 = alloca i64, align 8
  %31 = alloca i1, align 1
  %32 = alloca i32, align 4
  %33 = alloca { ptr, ptr, ptr, i32 }, align 8
  %34 = alloca [0 x ptr], align 8
  %35 = alloca [0 x ptr], align 8
  %36 = alloca { ptr, i160 }, align 8
  %37 = alloca i32, align 4
  %38 = alloca ptr, align 8
  %39 = alloca i64, align 8
  br label %40

40:                                               ; preds = %._crit_edge1, %4
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %30, align 4
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %41 = load ptr, ptr %.reload4, align 8
  %42 = ptrtoint ptr %41 to i64
  %43 = load ptr, ptr %30, align 8
  %44 = ptrtoint ptr %43 to i64
  %45 = icmp ne i64 %42, %44
  store i1 %45, ptr %31, align 1
  %46 = load i1, ptr %31, align 1
  store i1 %46, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %47, label %._crit_edge

._crit_edge:                                      ; preds = %40
  br label %95

47:                                               ; preds = %40
  %.reload8 = load ptr, ptr %.reg2mem5, align 8
  %48 = getelementptr { ptr, i32 }, ptr %.reload8, i32 0, i32 1
  %49 = load i32, ptr %48, align 4
  store i32 %49, ptr %32, align 4
  %50 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 1
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 3
  store ptr @Blocking, ptr %33, align 8
  store ptr %50, ptr %51, align 8
  store i32 7, ptr %52, align 4
  %53 = call ptr @llvm.invariant.start.p0(i64 16, ptr %33)
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 0
  %55 = load ptr, ptr %54, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %55, 0
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = insertvalue { ptr, ptr, ptr, i32 } %56, ptr %58, 1
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 2
  %61 = load ptr, ptr %60, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } %59, ptr %61, 2
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 3
  %64 = load i32, ptr %63, align 4
  %65 = insertvalue { ptr, ptr, ptr, i32 } %62, i32 %64, 3
  %66 = call ptr @llvm.invariant.start.p0(i64 0, ptr %34)
  %67 = call ptr @llvm.invariant.start.p0(i64 16, ptr %55)
  %68 = getelementptr ptr, ptr %55, i32 %64
  %69 = load ptr, ptr %68, align 8
  %70 = call ptr %69({ ptr, ptr, ptr, i32 } %65, ptr %35)
  call void %70({ ptr, ptr, ptr, i32 } %65, { ptr, ptr, ptr, i32 } %65, ptr %34)
  %71 = getelementptr { ptr, i160 }, ptr %33, i32 0, i32 0
  %72 = load ptr, ptr %71, align 8
  %73 = insertvalue { ptr, i160 } undef, ptr %72, 0
  %74 = getelementptr { ptr, i160 }, ptr %33, i32 0, i32 1
  %75 = load i160, ptr %74, align 4
  %76 = insertvalue { ptr, i160 } %73, i160 %75, 1
  %77 = call ptr @get_current_coroutine()
  %78 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %77, i32 0, i32 4
  store { ptr, i160 } %76, ptr %78, align 8
  call void @coroutine_yield(ptr %77)
  %79 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %77, i32 0, i32 4
  %80 = load { ptr, i160 }, ptr %79, align 8
  store { ptr, i160 } %80, ptr %36, align 8
  %81 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %82 = extractvalue { ptr, ptr, ptr, i32 } %81, 0
  %83 = call ptr @llvm.invariant.start.p0(i64 56, ptr %82)
  %84 = extractvalue { ptr, ptr, ptr, i32 } %81, 3
  %85 = getelementptr ptr, ptr %82, i32 %84
  %86 = load ptr, ptr %85, align 8
  %87 = extractvalue { ptr, ptr, ptr, i32 } %81, 1
  %88 = call ptr %86(ptr %87)
  %89 = getelementptr { ptr, i32 }, ptr %88, i32 0, i32 0
  %.reload7 = load ptr, ptr %.reg2mem5, align 8
  %90 = getelementptr { ptr, i32 }, ptr %.reload7, i32 0, i32 0
  %91 = load ptr, ptr %89, align 8
  store ptr %91, ptr %90, align 8
  %92 = getelementptr { ptr, i32 }, ptr %88, i32 0, i32 1
  %.reload6 = load ptr, ptr %.reg2mem5, align 8
  %93 = getelementptr { ptr, i32 }, ptr %.reload6, i32 0, i32 1
  %94 = load i32, ptr %92, align 4
  store i32 %94, ptr %93, align 4
  br label %95

95:                                               ; preds = %._crit_edge, %47
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %96

._crit_edge1:                                     ; preds = %95
  br label %40

96:                                               ; preds = %95
  %97 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %98 = extractvalue { ptr, ptr, ptr, i32 } %97, 0
  %99 = call ptr @llvm.invariant.start.p0(i64 56, ptr %98)
  %100 = extractvalue { ptr, ptr, ptr, i32 } %97, 3
  %101 = getelementptr ptr, ptr %98, i32 %100
  %102 = load ptr, ptr %101, align 8
  %103 = extractvalue { ptr, ptr, ptr, i32 } %97, 1
  %104 = call ptr %102(ptr %103)
  store i32 %3, ptr %37, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %39, align 4
  %105 = load i64, ptr %39, align 4
  store i64 %105, ptr %38, align 4
  %106 = getelementptr { ptr, i32 }, ptr %104, i32 0, i32 0
  %107 = load ptr, ptr %38, align 8
  store ptr %107, ptr %106, align 8
  %108 = getelementptr { ptr, i32 }, ptr %104, i32 0, i32 1
  %109 = load i32, ptr %37, align 4
  store i32 %109, ptr %108, align 4
  ret void
}

define ptr @MapIterable_field_iterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr } }, ptr %0, i32 0, i32 0
  ret ptr %2
}

define ptr @MapIterable_field_f(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr } }, ptr %0, i32 0, i32 1
  ret ptr %2
}

define ptr @MapIterable_B_init_iterableIntIterable_fFunctionPtri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2, { ptr } %3) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = getelementptr [2 x ptr], ptr %1, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr ptr, ptr %7, i32 1
  %9 = getelementptr ptr, ptr %7, i32 2
  %10 = getelementptr ptr, ptr %7, i32 3
  %11 = getelementptr ptr, ptr %7, i32 4
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %15)
  %17 = getelementptr [2 x ptr], ptr %1, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr ptr, ptr %18, i32 1
  %20 = getelementptr ptr, ptr %18, i32 2
  %21 = getelementptr ptr, ptr %18, i32 3
  %22 = getelementptr ptr, ptr %18, i32 4
  %23 = load i64, ptr %19, align 4
  %24 = load i64, ptr %20, align 4
  %25 = load ptr, ptr %21, align 8
  %26 = load ptr, ptr %22, align 8
  %27 = call i1 @subtype_test_wrapper(ptr %25, i64 %24, i64 %23, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %26)
  %28 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %29 = getelementptr [52 x ptr], ptr %28, i32 0, i32 14
  %30 = getelementptr ptr, ptr %29, i32 7
  %31 = load ptr, ptr %30, align 8
  ret ptr %31
}

define ptr @MapIterable_B_each_fFunctionPtri32_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 15
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @MapIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1, i32 %2, { ptr } %3) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = getelementptr [2 x ptr], ptr %1, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr ptr, ptr %7, i32 1
  %9 = getelementptr ptr, ptr %7, i32 2
  %10 = getelementptr ptr, ptr %7, i32 3
  %11 = getelementptr ptr, ptr %7, i32 4
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %15)
  %17 = getelementptr [2 x ptr], ptr %1, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr ptr, ptr %18, i32 1
  %20 = getelementptr ptr, ptr %18, i32 2
  %21 = getelementptr ptr, ptr %18, i32 3
  %22 = getelementptr ptr, ptr %18, i32 4
  %23 = load i64, ptr %19, align 4
  %24 = load i64, ptr %20, align 4
  %25 = load ptr, ptr %21, align 8
  %26 = load ptr, ptr %22, align 8
  %27 = call i1 @subtype_test_wrapper(ptr %25, i64 %24, i64 %23, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %26)
  %28 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %29 = getelementptr [52 x ptr], ptr %28, i32 0, i32 16
  %30 = getelementptr ptr, ptr %29, i32 7
  %31 = load ptr, ptr %30, align 8
  ret ptr %31
}

define ptr @MapIterable_B_all_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 17
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @MapIterable_B_any_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 18
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @MapIterable_B_map_fFunctionPtri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 19
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @MapIterable_B_filter_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 20
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @MapIterable_B_chain_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 21
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @MapIterable_B_interleave_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 22
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @MapIterable_B_zip_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 23
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @MapIterable_B_product_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 24
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @MapIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [52 x ptr], ptr %4, i32 0, i32 25
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @MapIterable_init_iterableIntIterable_fFunctionPtri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @MapIterable)
  %21 = call ptr @llvm.invariant.start.p0(i64 24, ptr %8)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %22, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 16, ptr %22)
  %24 = alloca { ptr, ptr, ptr, i32 }, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %36 = load i32, ptr %34, align 4
  store i32 %36, ptr %35, align 4
  call void @set_offset(ptr %24, ptr @IntIterable)
  %37 = call ptr @llvm.invariant.start.p0(i64 24, ptr %24)
  %38 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %39 = extractvalue { ptr, ptr, ptr, i32 } %38, 0
  %40 = call ptr @llvm.invariant.start.p0(i64 416, ptr %39)
  %41 = extractvalue { ptr, ptr, ptr, i32 } %38, 3
  %42 = getelementptr ptr, ptr %39, i32 %41
  %43 = load ptr, ptr %42, align 8
  %44 = extractvalue { ptr, ptr, ptr, i32 } %38, 1
  %45 = call ptr %43(ptr %44)
  %46 = alloca { ptr, ptr, ptr, i32 }, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %49 = load ptr, ptr %47, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %52 = load ptr, ptr %50, align 8
  store ptr %52, ptr %51, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %55 = load ptr, ptr %53, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %58 = load i32, ptr %56, align 4
  store i32 %58, ptr %57, align 4
  call void @set_offset(ptr %46, ptr @IntIterable)
  %59 = call ptr @llvm.invariant.start.p0(i64 24, ptr %46)
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %62 = load ptr, ptr %60, align 8
  store ptr %62, ptr %61, align 8
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %65 = load ptr, ptr %63, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %68 = load ptr, ptr %66, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %71 = load i32, ptr %69, align 4
  store i32 %71, ptr %70, align 4
  %72 = alloca ptr, align 8
  store { ptr } %4, ptr %72, align 8
  %73 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %74 = extractvalue { ptr, ptr, ptr, i32 } %73, 0
  %75 = call ptr @llvm.invariant.start.p0(i64 416, ptr %74)
  %76 = extractvalue { ptr, ptr, ptr, i32 } %73, 3
  %77 = getelementptr ptr, ptr %74, i32 %76
  %78 = getelementptr ptr, ptr %77, i32 1
  %79 = load ptr, ptr %78, align 8
  %80 = extractvalue { ptr, ptr, ptr, i32 } %73, 1
  %81 = call ptr %79(ptr %80)
  %82 = getelementptr { ptr }, ptr %81, i32 0, i32 0
  %83 = load ptr, ptr %72, align 8
  store ptr %83, ptr %82, align 8
  ret void
}

define void @IntIterable_each_fFunctionPtri32_to_Nothing({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem5 = alloca ptr, align 8
  %.reg2mem7 = alloca ptr, align 8
  %.reg2mem9 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @IntIterable)
  %20 = call ptr @llvm.invariant.start.p0(i64 24, ptr %7)
  %21 = alloca ptr, align 8
  store { ptr } %3, ptr %21, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %23 = load ptr, ptr %22, align 8
  %24 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %23, 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %26 = load ptr, ptr %25, align 8
  %27 = insertvalue { ptr, ptr, ptr, i32 } %24, ptr %26, 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %29 = load ptr, ptr %28, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } %27, ptr %29, 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %32 = load i32, ptr %31, align 4
  %33 = insertvalue { ptr, ptr, ptr, i32 } %30, i32 %32, 3
  %34 = alloca [0 x ptr], align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 0, ptr %34)
  %36 = call ptr @llvm.invariant.start.p0(i64 192, ptr %23)
  %37 = getelementptr ptr, ptr %23, i32 %32
  %38 = getelementptr ptr, ptr %37, i32 10
  %39 = load ptr, ptr %38, align 8
  %40 = alloca [0 x ptr], align 8
  %41 = call ptr %39({ ptr, ptr, ptr, i32 } %33, ptr %40)
  %42 = call { ptr, ptr, ptr, i32 } %41({ ptr, ptr, ptr, i32 } %33, { ptr, ptr, ptr, i32 } %33, ptr %34)
  %43 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %42, ptr %43, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 16, ptr %43)
  %45 = alloca { ptr, ptr, ptr, i32 }, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 0
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %48 = load ptr, ptr %46, align 8
  store ptr %48, ptr %47, align 8
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 1
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %51 = load ptr, ptr %49, align 8
  store ptr %51, ptr %50, align 8
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 2
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %54 = load ptr, ptr %52, align 8
  store ptr %54, ptr %53, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 3
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %57 = load i32, ptr %55, align 4
  store i32 %57, ptr %56, align 4
  call void @set_offset(ptr %45, ptr @IntIterator)
  %58 = call ptr @llvm.invariant.start.p0(i64 24, ptr %45)
  %59 = alloca { ptr, ptr, ptr, i32 }, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 0
  %62 = load ptr, ptr %60, align 8
  store ptr %62, ptr %61, align 8
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 1
  %65 = load ptr, ptr %63, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 2
  %68 = load ptr, ptr %66, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 3
  %71 = load i32, ptr %69, align 4
  store i32 %71, ptr %70, align 4
  call void @set_offset(ptr %59, ptr @IntIterator)
  %72 = call ptr @llvm.invariant.start.p0(i64 24, ptr %59)
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 0
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %76 = load ptr, ptr %74, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 1
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %79 = load ptr, ptr %77, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 2
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %82 = load ptr, ptr %80, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 3
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %85 = load i32, ptr %83, align 4
  store i32 %85, ptr %84, align 4
  %86 = call ptr @llvm.invariant.start.p0(i64 16, ptr %73)
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  store ptr %87, ptr %.reg2mem9, align 8
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  store ptr %88, ptr %.reg2mem7, align 8
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  store ptr %89, ptr %.reg2mem5, align 8
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  store ptr %90, ptr %.reg2mem3, align 8
  %91 = alloca [0 x ptr], align 8
  %92 = alloca [0 x ptr], align 8
  %93 = alloca { ptr, i32 }, align 8
  %94 = alloca i64, align 8
  %95 = alloca i1, align 1
  %96 = alloca i32, align 4
  br label %97

97:                                               ; preds = %._crit_edge1, %4
  %.reload10 = load ptr, ptr %.reg2mem9, align 8
  %98 = load ptr, ptr %.reload10, align 8
  %99 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %98, 0
  %.reload8 = load ptr, ptr %.reg2mem7, align 8
  %100 = load ptr, ptr %.reload8, align 8
  %101 = insertvalue { ptr, ptr, ptr, i32 } %99, ptr %100, 1
  %.reload6 = load ptr, ptr %.reg2mem5, align 8
  %102 = load ptr, ptr %.reload6, align 8
  %103 = insertvalue { ptr, ptr, ptr, i32 } %101, ptr %102, 2
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %104 = load i32, ptr %.reload4, align 4
  %105 = insertvalue { ptr, ptr, ptr, i32 } %103, i32 %104, 3
  %106 = call ptr @llvm.invariant.start.p0(i64 0, ptr %91)
  %107 = call ptr @llvm.invariant.start.p0(i64 16, ptr %98)
  %108 = getelementptr ptr, ptr %98, i32 %104
  %109 = load ptr, ptr %108, align 8
  %110 = call ptr %109({ ptr, ptr, ptr, i32 } %105, ptr %92)
  %111 = call { ptr, i32 } %110({ ptr, ptr, ptr, i32 } %105, { ptr, ptr, ptr, i32 } %105, ptr %91)
  store { ptr, i32 } %111, ptr %93, align 8
  %112 = getelementptr { ptr, i32 }, ptr %93, i32 0, i32 0
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %94, align 4
  %113 = load ptr, ptr %112, align 8
  %114 = ptrtoint ptr %113 to i64
  %115 = load ptr, ptr %94, align 8
  %116 = ptrtoint ptr %115 to i64
  %117 = icmp ne i64 %114, %116
  store i1 %117, ptr %95, align 1
  %118 = load i1, ptr %95, align 1
  store i1 %118, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %119, label %._crit_edge

._crit_edge:                                      ; preds = %97
  br label %125

119:                                              ; preds = %97
  %120 = getelementptr { ptr, i32 }, ptr %93, i32 0, i32 1
  %121 = load i32, ptr %120, align 4
  store i32 %121, ptr %96, align 4
  %122 = load i32, ptr %96, align 4
  %123 = load ptr, ptr %21, align 8
  call void %123(i32 %122)
  %124 = load i32, ptr %96, align 4
  store i32 %124, ptr %93, align 4
  br label %125

125:                                              ; preds = %._crit_edge, %119
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %126

._crit_edge1:                                     ; preds = %125
  br label %97

126:                                              ; preds = %125
  ret void
}

define i32 @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3, { ptr } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i32, align 4
  %.reg2mem5 = alloca i1, align 1
  %.reg2mem8 = alloca i32, align 4
  %.reg2mem12 = alloca ptr, align 8
  %.reg2mem14 = alloca ptr, align 8
  %.reg2mem16 = alloca ptr, align 8
  %.reg2mem18 = alloca ptr, align 8
  %.reg2mem20 = alloca i32, align 4
  %.reg2mem22 = alloca i32, align 4
  %.reg2mem24 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @IntIterable)
  %21 = call ptr @llvm.invariant.start.p0(i64 24, ptr %8)
  %22 = alloca ptr, align 8
  store { ptr } %4, ptr %22, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %24 = load ptr, ptr %23, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %24, 0
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } %25, ptr %27, 1
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, ptr %30, 2
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %33 = load i32, ptr %32, align 4
  %34 = insertvalue { ptr, ptr, ptr, i32 } %31, i32 %33, 3
  %35 = alloca [0 x ptr], align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 0, ptr %35)
  %37 = call ptr @llvm.invariant.start.p0(i64 192, ptr %24)
  %38 = getelementptr ptr, ptr %24, i32 %33
  %39 = getelementptr ptr, ptr %38, i32 10
  %40 = load ptr, ptr %39, align 8
  %41 = alloca [0 x ptr], align 8
  %42 = call ptr %40({ ptr, ptr, ptr, i32 } %34, ptr %41)
  %43 = call { ptr, ptr, ptr, i32 } %42({ ptr, ptr, ptr, i32 } %34, { ptr, ptr, ptr, i32 } %34, ptr %35)
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %43, ptr %44, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 16, ptr %44)
  %46 = alloca { ptr, ptr, ptr, i32 }, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 0
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %49 = load ptr, ptr %47, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 1
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %52 = load ptr, ptr %50, align 8
  store ptr %52, ptr %51, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 2
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %55 = load ptr, ptr %53, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 3
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %58 = load i32, ptr %56, align 4
  store i32 %58, ptr %57, align 4
  call void @set_offset(ptr %46, ptr @IntIterator)
  %59 = call ptr @llvm.invariant.start.p0(i64 24, ptr %46)
  %60 = alloca { ptr, ptr, ptr, i32 }, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %63 = load ptr, ptr %61, align 8
  store ptr %63, ptr %62, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %66 = load ptr, ptr %64, align 8
  store ptr %66, ptr %65, align 8
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %69 = load ptr, ptr %67, align 8
  store ptr %69, ptr %68, align 8
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %72 = load i32, ptr %70, align 4
  store i32 %72, ptr %71, align 4
  call void @set_offset(ptr %60, ptr @IntIterator)
  %73 = call ptr @llvm.invariant.start.p0(i64 24, ptr %60)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %83 = load ptr, ptr %81, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %86 = load i32, ptr %84, align 4
  store i32 %86, ptr %85, align 4
  %87 = call ptr @llvm.invariant.start.p0(i64 16, ptr %74)
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  store ptr %88, ptr %.reg2mem18, align 8
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  store ptr %89, ptr %.reg2mem16, align 8
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  store ptr %90, ptr %.reg2mem14, align 8
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  store ptr %91, ptr %.reg2mem12, align 8
  %92 = alloca [0 x ptr], align 8
  %93 = alloca [0 x ptr], align 8
  %94 = alloca { ptr, i32 }, align 8
  %95 = alloca i64, align 8
  %96 = alloca i1, align 1
  %97 = alloca i32, align 4
  %98 = alloca i32, align 4
  store i32 %3, ptr %.reg2mem24, align 4
  br label %99

99:                                               ; preds = %132, %5
  %.reload25 = load i32, ptr %.reg2mem24, align 4
  store i32 %.reload25, ptr %.reg2mem8, align 4
  %.reload19 = load ptr, ptr %.reg2mem18, align 8
  %100 = load ptr, ptr %.reload19, align 8
  %101 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %100, 0
  %.reload17 = load ptr, ptr %.reg2mem16, align 8
  %102 = load ptr, ptr %.reload17, align 8
  %103 = insertvalue { ptr, ptr, ptr, i32 } %101, ptr %102, 1
  %.reload15 = load ptr, ptr %.reg2mem14, align 8
  %104 = load ptr, ptr %.reload15, align 8
  %105 = insertvalue { ptr, ptr, ptr, i32 } %103, ptr %104, 2
  %.reload13 = load ptr, ptr %.reg2mem12, align 8
  %106 = load i32, ptr %.reload13, align 4
  %107 = insertvalue { ptr, ptr, ptr, i32 } %105, i32 %106, 3
  %108 = call ptr @llvm.invariant.start.p0(i64 0, ptr %92)
  %109 = call ptr @llvm.invariant.start.p0(i64 16, ptr %100)
  %110 = getelementptr ptr, ptr %100, i32 %106
  %111 = load ptr, ptr %110, align 8
  %112 = call ptr %111({ ptr, ptr, ptr, i32 } %107, ptr %93)
  %113 = call { ptr, i32 } %112({ ptr, ptr, ptr, i32 } %107, { ptr, ptr, ptr, i32 } %107, ptr %92)
  store { ptr, i32 } %113, ptr %94, align 8
  %114 = getelementptr { ptr, i32 }, ptr %94, i32 0, i32 0
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %95, align 4
  %115 = load ptr, ptr %114, align 8
  %116 = ptrtoint ptr %115 to i64
  %117 = load ptr, ptr %95, align 8
  %118 = ptrtoint ptr %117 to i64
  %119 = icmp ne i64 %116, %118
  store i1 %119, ptr %96, align 1
  %120 = load i1, ptr %96, align 1
  store i1 %120, ptr %.reg2mem5, align 1
  %.reload7 = load i1, ptr %.reg2mem5, align 1
  br i1 %.reload7, label %121, label %129

121:                                              ; preds = %99
  %122 = getelementptr { ptr, i32 }, ptr %94, i32 0, i32 1
  %123 = load i32, ptr %122, align 4
  store i32 %123, ptr %97, align 4
  %124 = load i32, ptr %97, align 4
  %125 = load ptr, ptr %22, align 8
  %.reload11 = load i32, ptr %.reg2mem8, align 4
  %126 = call i32 %125(i32 %.reload11, i32 %124)
  store i32 %126, ptr %98, align 4
  %127 = load i32, ptr %98, align 4
  store i32 %127, ptr %.reg2mem3, align 4
  %128 = load i32, ptr %97, align 4
  store i32 %128, ptr %94, align 4
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  store i32 %.reload4, ptr %.reg2mem22, align 4
  br label %130

129:                                              ; preds = %99
  store i32 poison, ptr %.reg2mem22, align 4
  br label %130

130:                                              ; preds = %129, %121
  %.reload23 = load i32, ptr %.reg2mem22, align 4
  store i32 %.reload23, ptr %.reg2mem1, align 4
  br label %131

131:                                              ; preds = %130
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  %.reload6 = load i1, ptr %.reg2mem5, align 1
  %.reload10 = load i32, ptr %.reg2mem8, align 4
  store i32 %.reload2, ptr %.reg2mem20, align 4
  br i1 %.reload6, label %132, label %133

132:                                              ; preds = %131
  %.reload21 = load i32, ptr %.reg2mem20, align 4
  store i32 %.reload21, ptr %.reg2mem, align 4
  %.reload = load i32, ptr %.reg2mem, align 4
  store i32 %.reload, ptr %.reg2mem24, align 4
  br label %99

133:                                              ; preds = %131
  %.reload9 = load i32, ptr %.reg2mem8, align 4
  ret i32 %.reload9
}

define i1 @IntIterable_all_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i1, align 1
  %.reg2mem6 = alloca ptr, align 8
  %.reg2mem8 = alloca ptr, align 8
  %.reg2mem10 = alloca ptr, align 8
  %.reg2mem12 = alloca ptr, align 8
  %.reg2mem14 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @IntIterable)
  %20 = call ptr @llvm.invariant.start.p0(i64 24, ptr %7)
  %21 = alloca ptr, align 8
  store { ptr } %3, ptr %21, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %23 = load ptr, ptr %22, align 8
  %24 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %23, 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %26 = load ptr, ptr %25, align 8
  %27 = insertvalue { ptr, ptr, ptr, i32 } %24, ptr %26, 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %29 = load ptr, ptr %28, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } %27, ptr %29, 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %32 = load i32, ptr %31, align 4
  %33 = insertvalue { ptr, ptr, ptr, i32 } %30, i32 %32, 3
  %34 = alloca [0 x ptr], align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 0, ptr %34)
  %36 = call ptr @llvm.invariant.start.p0(i64 192, ptr %23)
  %37 = getelementptr ptr, ptr %23, i32 %32
  %38 = getelementptr ptr, ptr %37, i32 10
  %39 = load ptr, ptr %38, align 8
  %40 = alloca [0 x ptr], align 8
  %41 = call ptr %39({ ptr, ptr, ptr, i32 } %33, ptr %40)
  %42 = call { ptr, ptr, ptr, i32 } %41({ ptr, ptr, ptr, i32 } %33, { ptr, ptr, ptr, i32 } %33, ptr %34)
  %43 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %42, ptr %43, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 16, ptr %43)
  %45 = alloca { ptr, ptr, ptr, i32 }, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 0
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %48 = load ptr, ptr %46, align 8
  store ptr %48, ptr %47, align 8
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 1
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %51 = load ptr, ptr %49, align 8
  store ptr %51, ptr %50, align 8
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 2
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %54 = load ptr, ptr %52, align 8
  store ptr %54, ptr %53, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 3
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %57 = load i32, ptr %55, align 4
  store i32 %57, ptr %56, align 4
  call void @set_offset(ptr %45, ptr @IntIterator)
  %58 = call ptr @llvm.invariant.start.p0(i64 24, ptr %45)
  %59 = alloca { ptr, ptr, ptr, i32 }, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 0
  %62 = load ptr, ptr %60, align 8
  store ptr %62, ptr %61, align 8
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 1
  %65 = load ptr, ptr %63, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 2
  %68 = load ptr, ptr %66, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 3
  %71 = load i32, ptr %69, align 4
  store i32 %71, ptr %70, align 4
  call void @set_offset(ptr %59, ptr @IntIterator)
  %72 = call ptr @llvm.invariant.start.p0(i64 24, ptr %59)
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 0
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %76 = load ptr, ptr %74, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 1
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %79 = load ptr, ptr %77, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 2
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %82 = load ptr, ptr %80, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 3
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %85 = load i32, ptr %83, align 4
  store i32 %85, ptr %84, align 4
  %86 = call ptr @llvm.invariant.start.p0(i64 16, ptr %73)
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  store ptr %87, ptr %.reg2mem12, align 8
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  store ptr %88, ptr %.reg2mem10, align 8
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  store ptr %89, ptr %.reg2mem8, align 8
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  store ptr %90, ptr %.reg2mem6, align 8
  %91 = alloca [0 x ptr], align 8
  %92 = alloca [0 x ptr], align 8
  %93 = alloca { ptr, i32 }, align 8
  %94 = alloca i64, align 8
  %95 = alloca i1, align 1
  %96 = alloca i32, align 4
  %97 = alloca i1, align 1
  %98 = alloca i1, align 1
  br label %99

99:                                               ; preds = %134, %4
  %.reload13 = load ptr, ptr %.reg2mem12, align 8
  %100 = load ptr, ptr %.reload13, align 8
  %101 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %100, 0
  %.reload11 = load ptr, ptr %.reg2mem10, align 8
  %102 = load ptr, ptr %.reload11, align 8
  %103 = insertvalue { ptr, ptr, ptr, i32 } %101, ptr %102, 1
  %.reload9 = load ptr, ptr %.reg2mem8, align 8
  %104 = load ptr, ptr %.reload9, align 8
  %105 = insertvalue { ptr, ptr, ptr, i32 } %103, ptr %104, 2
  %.reload7 = load ptr, ptr %.reg2mem6, align 8
  %106 = load i32, ptr %.reload7, align 4
  %107 = insertvalue { ptr, ptr, ptr, i32 } %105, i32 %106, 3
  %108 = call ptr @llvm.invariant.start.p0(i64 0, ptr %91)
  %109 = call ptr @llvm.invariant.start.p0(i64 16, ptr %100)
  %110 = getelementptr ptr, ptr %100, i32 %106
  %111 = load ptr, ptr %110, align 8
  %112 = call ptr %111({ ptr, ptr, ptr, i32 } %107, ptr %92)
  %113 = call { ptr, i32 } %112({ ptr, ptr, ptr, i32 } %107, { ptr, ptr, ptr, i32 } %107, ptr %91)
  store { ptr, i32 } %113, ptr %93, align 8
  %114 = getelementptr { ptr, i32 }, ptr %93, i32 0, i32 0
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %94, align 4
  %115 = load ptr, ptr %114, align 8
  %116 = ptrtoint ptr %115 to i64
  %117 = load ptr, ptr %94, align 8
  %118 = ptrtoint ptr %117 to i64
  %119 = icmp ne i64 %116, %118
  store i1 %119, ptr %95, align 1
  %120 = load i1, ptr %95, align 1
  %121 = xor i1 %120, true
  store i1 %121, ptr %.reg2mem3, align 1
  br i1 %120, label %122, label %130

122:                                              ; preds = %99
  %123 = getelementptr { ptr, i32 }, ptr %93, i32 0, i32 1
  %124 = load i32, ptr %123, align 4
  store i32 %124, ptr %96, align 4
  %125 = load i32, ptr %96, align 4
  %126 = load ptr, ptr %21, align 8
  %127 = call i1 %126(i32 %125)
  store i1 %127, ptr %97, align 1
  %128 = load i1, ptr %97, align 1
  %129 = zext i1 %128 to i32
  store i32 %129, ptr %.reg2mem1, align 4
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem14, align 4
  br label %131

130:                                              ; preds = %99
  store i32 0, ptr %.reg2mem14, align 4
  br label %131

131:                                              ; preds = %130, %122
  %.reload15 = load i32, ptr %.reg2mem14, align 4
  store i32 %.reload15, ptr %.reg2mem, align 4
  br label %132

132:                                              ; preds = %131
  %.reload = load i32, ptr %.reg2mem, align 4
  %133 = trunc i32 %.reload to i1
  %.reload5 = load i1, ptr %.reg2mem3, align 1
  br i1 %133, label %134, label %135

134:                                              ; preds = %132
  br label %99

135:                                              ; preds = %132
  %.reload4 = load i1, ptr %.reg2mem3, align 1
  store i1 %.reload4, ptr %98, align 1
  %136 = load i1, ptr %98, align 1
  ret i1 %136
}

define i1 @IntIterable_any_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i1, align 1
  %.reg2mem7 = alloca ptr, align 8
  %.reg2mem9 = alloca ptr, align 8
  %.reg2mem11 = alloca ptr, align 8
  %.reg2mem13 = alloca ptr, align 8
  %.reg2mem15 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @IntIterable)
  %20 = call ptr @llvm.invariant.start.p0(i64 24, ptr %7)
  %21 = alloca ptr, align 8
  store { ptr } %3, ptr %21, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %23 = load ptr, ptr %22, align 8
  %24 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %23, 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %26 = load ptr, ptr %25, align 8
  %27 = insertvalue { ptr, ptr, ptr, i32 } %24, ptr %26, 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %29 = load ptr, ptr %28, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } %27, ptr %29, 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %32 = load i32, ptr %31, align 4
  %33 = insertvalue { ptr, ptr, ptr, i32 } %30, i32 %32, 3
  %34 = alloca [0 x ptr], align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 0, ptr %34)
  %36 = call ptr @llvm.invariant.start.p0(i64 192, ptr %23)
  %37 = getelementptr ptr, ptr %23, i32 %32
  %38 = getelementptr ptr, ptr %37, i32 10
  %39 = load ptr, ptr %38, align 8
  %40 = alloca [0 x ptr], align 8
  %41 = call ptr %39({ ptr, ptr, ptr, i32 } %33, ptr %40)
  %42 = call { ptr, ptr, ptr, i32 } %41({ ptr, ptr, ptr, i32 } %33, { ptr, ptr, ptr, i32 } %33, ptr %34)
  %43 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %42, ptr %43, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 16, ptr %43)
  %45 = alloca { ptr, ptr, ptr, i32 }, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 0
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %48 = load ptr, ptr %46, align 8
  store ptr %48, ptr %47, align 8
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 1
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %51 = load ptr, ptr %49, align 8
  store ptr %51, ptr %50, align 8
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 2
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %54 = load ptr, ptr %52, align 8
  store ptr %54, ptr %53, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 3
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %57 = load i32, ptr %55, align 4
  store i32 %57, ptr %56, align 4
  call void @set_offset(ptr %45, ptr @IntIterator)
  %58 = call ptr @llvm.invariant.start.p0(i64 24, ptr %45)
  %59 = alloca { ptr, ptr, ptr, i32 }, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 0
  %62 = load ptr, ptr %60, align 8
  store ptr %62, ptr %61, align 8
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 1
  %65 = load ptr, ptr %63, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 2
  %68 = load ptr, ptr %66, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 3
  %71 = load i32, ptr %69, align 4
  store i32 %71, ptr %70, align 4
  call void @set_offset(ptr %59, ptr @IntIterator)
  %72 = call ptr @llvm.invariant.start.p0(i64 24, ptr %59)
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 0
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %76 = load ptr, ptr %74, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 1
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %79 = load ptr, ptr %77, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 2
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %82 = load ptr, ptr %80, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 3
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %85 = load i32, ptr %83, align 4
  store i32 %85, ptr %84, align 4
  %86 = call ptr @llvm.invariant.start.p0(i64 16, ptr %73)
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  store ptr %87, ptr %.reg2mem13, align 8
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  store ptr %88, ptr %.reg2mem11, align 8
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  store ptr %89, ptr %.reg2mem9, align 8
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  store ptr %90, ptr %.reg2mem7, align 8
  %91 = alloca [0 x ptr], align 8
  %92 = alloca [0 x ptr], align 8
  %93 = alloca { ptr, i32 }, align 8
  %94 = alloca i64, align 8
  %95 = alloca i1, align 1
  %96 = alloca i32, align 4
  %97 = alloca i1, align 1
  %98 = alloca i1, align 1
  br label %99

99:                                               ; preds = %138, %4
  %.reload14 = load ptr, ptr %.reg2mem13, align 8
  %100 = load ptr, ptr %.reload14, align 8
  %101 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %100, 0
  %.reload12 = load ptr, ptr %.reg2mem11, align 8
  %102 = load ptr, ptr %.reload12, align 8
  %103 = insertvalue { ptr, ptr, ptr, i32 } %101, ptr %102, 1
  %.reload10 = load ptr, ptr %.reg2mem9, align 8
  %104 = load ptr, ptr %.reload10, align 8
  %105 = insertvalue { ptr, ptr, ptr, i32 } %103, ptr %104, 2
  %.reload8 = load ptr, ptr %.reg2mem7, align 8
  %106 = load i32, ptr %.reload8, align 4
  %107 = insertvalue { ptr, ptr, ptr, i32 } %105, i32 %106, 3
  %108 = call ptr @llvm.invariant.start.p0(i64 0, ptr %91)
  %109 = call ptr @llvm.invariant.start.p0(i64 16, ptr %100)
  %110 = getelementptr ptr, ptr %100, i32 %106
  %111 = load ptr, ptr %110, align 8
  %112 = call ptr %111({ ptr, ptr, ptr, i32 } %107, ptr %92)
  %113 = call { ptr, i32 } %112({ ptr, ptr, ptr, i32 } %107, { ptr, ptr, ptr, i32 } %107, ptr %91)
  store { ptr, i32 } %113, ptr %93, align 8
  %114 = getelementptr { ptr, i32 }, ptr %93, i32 0, i32 0
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %94, align 4
  %115 = load ptr, ptr %114, align 8
  %116 = ptrtoint ptr %115 to i64
  %117 = load ptr, ptr %94, align 8
  %118 = ptrtoint ptr %117 to i64
  %119 = icmp ne i64 %116, %118
  store i1 %119, ptr %95, align 1
  %120 = load i1, ptr %95, align 1
  store i1 %120, ptr %.reg2mem3, align 1
  %.reload6 = load i1, ptr %.reg2mem3, align 1
  br i1 %.reload6, label %121, label %134

121:                                              ; preds = %99
  %122 = getelementptr { ptr, i32 }, ptr %93, i32 0, i32 1
  %123 = load i32, ptr %122, align 4
  store i32 %123, ptr %96, align 4
  %124 = load i32, ptr %96, align 4
  %125 = load ptr, ptr %21, align 8
  %126 = call i1 %125(i32 %124)
  store i1 %126, ptr %97, align 1
  %127 = load i1, ptr %97, align 1
  %128 = xor i1 %127, true
  %129 = zext i1 %128 to i32
  store i32 %129, ptr %.reg2mem1, align 4
  br i1 %127, label %130, label %131

130:                                              ; preds = %121
  br label %133

131:                                              ; preds = %121
  %132 = load i32, ptr %96, align 4
  store i32 %132, ptr %93, align 4
  br label %133

133:                                              ; preds = %131, %130
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem15, align 4
  br label %135

134:                                              ; preds = %99
  store i32 0, ptr %.reg2mem15, align 4
  br label %135

135:                                              ; preds = %134, %133
  %.reload16 = load i32, ptr %.reg2mem15, align 4
  store i32 %.reload16, ptr %.reg2mem, align 4
  br label %136

136:                                              ; preds = %135
  %.reload = load i32, ptr %.reg2mem, align 4
  %137 = trunc i32 %.reload to i1
  %.reload5 = load i1, ptr %.reg2mem3, align 1
  br i1 %137, label %138, label %139

138:                                              ; preds = %136
  br label %99

139:                                              ; preds = %136
  %.reload4 = load i1, ptr %.reg2mem3, align 1
  store i1 %.reload4, ptr %98, align 1
  %140 = load i1, ptr %98, align 1
  ret i1 %140
}

define { ptr, ptr, ptr, i32 } @IntIterable_map_fFunctionPtri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @IntIterable)
  %20 = call ptr @llvm.invariant.start.p0(i64 24, ptr %7)
  %21 = alloca ptr, align 8
  store { ptr } %3, ptr %21, align 8
  %22 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr } }, ptr null, i32 1) to i64))
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  store ptr @MapIterable, ptr %23, align 8
  store ptr %22, ptr %24, align 8
  store i32 7, ptr %25, align 4
  %26 = call ptr @llvm.invariant.start.p0(i64 16, ptr %23)
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %36 = load ptr, ptr %34, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %39 = load i32, ptr %37, align 4
  store i32 %39, ptr %38, align 4
  call void @set_offset(ptr %27, ptr @IntIterable)
  %40 = call ptr @llvm.invariant.start.p0(i64 24, ptr %27)
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %42 = load ptr, ptr %41, align 8
  %43 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %42, 0
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %45 = load ptr, ptr %44, align 8
  %46 = insertvalue { ptr, ptr, ptr, i32 } %43, ptr %45, 1
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %48 = load ptr, ptr %47, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } %46, ptr %48, 2
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %51 = load i32, ptr %50, align 4
  %52 = insertvalue { ptr, ptr, ptr, i32 } %49, i32 %51, 3
  %53 = load ptr, ptr %21, align 8
  %54 = insertvalue { ptr } undef, ptr %53, 0
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %56 = load ptr, ptr %55, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %56, 0
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } %57, ptr %59, 1
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %62 = load ptr, ptr %61, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr %62, 2
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %65 = load i32, ptr %64, align 4
  %66 = insertvalue { ptr, ptr, ptr, i32 } %63, i32 %65, 3
  %67 = alloca [2 x ptr], align 8
  %68 = call ptr @llvm.invariant.start.p0(i64 16, ptr %67)
  %69 = getelementptr [2 x ptr], ptr %67, i32 0, i32 1
  store ptr @_parameterization_FunctionPtri32_to_Ptri32, ptr %69, align 8
  %70 = getelementptr [2 x ptr], ptr %67, i32 0, i32 0
  store ptr @_parameterization_IntIterable, ptr %70, align 8
  %71 = call ptr @llvm.invariant.start.p0(i64 416, ptr %56)
  %72 = getelementptr ptr, ptr %56, i32 %65
  %73 = getelementptr ptr, ptr %72, i32 2
  %74 = load ptr, ptr %73, align 8
  %75 = alloca [2 x ptr], align 8
  %76 = getelementptr [2 x ptr], ptr %75, i32 0, i32 0
  store ptr %42, ptr %76, align 8
  %77 = getelementptr [2 x ptr], ptr %75, i32 0, i32 1
  store ptr @function_typ, ptr %77, align 8
  %78 = call ptr %74({ ptr, ptr, ptr, i32 } %66, ptr %75, { ptr, ptr, ptr, i32 } %52, { ptr } %54)
  call void %78({ ptr, ptr, ptr, i32 } %66, { ptr, ptr, ptr, i32 } %66, ptr %67, { ptr, ptr, ptr, i32 } %52, { ptr } %54)
  %79 = alloca { ptr, ptr, ptr, i32 }, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %79, i32 0, i32 0
  %82 = load ptr, ptr %80, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %79, i32 0, i32 1
  %85 = load ptr, ptr %83, align 8
  store ptr %85, ptr %84, align 8
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %79, i32 0, i32 2
  %88 = load ptr, ptr %86, align 8
  store ptr %88, ptr %87, align 8
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %79, i32 0, i32 3
  %91 = load i32, ptr %89, align 4
  store i32 %91, ptr %90, align 4
  call void @set_offset(ptr %79, ptr @IntIterable)
  %92 = call ptr @llvm.invariant.start.p0(i64 24, ptr %79)
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %79, i32 0, i32 0
  %94 = load ptr, ptr %93, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %94, 0
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %79, i32 0, i32 1
  %97 = load ptr, ptr %96, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %97, 1
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %79, i32 0, i32 2
  %100 = load ptr, ptr %99, align 8
  %101 = insertvalue { ptr, ptr, ptr, i32 } %98, ptr %100, 2
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %79, i32 0, i32 3
  %103 = load i32, ptr %102, align 4
  %104 = insertvalue { ptr, ptr, ptr, i32 } %101, i32 %103, 3
  ret { ptr, ptr, ptr, i32 } %104
}

define { ptr, ptr, ptr, i32 } @IntIterable_filter_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @IntIterable)
  %20 = call ptr @llvm.invariant.start.p0(i64 24, ptr %7)
  %21 = alloca ptr, align 8
  store { ptr } %3, ptr %21, align 8
  %22 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr } }, ptr null, i32 1) to i64))
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  store ptr @FilterIterable, ptr %23, align 8
  store ptr %22, ptr %24, align 8
  store i32 7, ptr %25, align 4
  %26 = call ptr @llvm.invariant.start.p0(i64 16, ptr %23)
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %36 = load ptr, ptr %34, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %39 = load i32, ptr %37, align 4
  store i32 %39, ptr %38, align 4
  call void @set_offset(ptr %27, ptr @IntIterable)
  %40 = call ptr @llvm.invariant.start.p0(i64 24, ptr %27)
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %42 = load ptr, ptr %41, align 8
  %43 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %42, 0
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %45 = load ptr, ptr %44, align 8
  %46 = insertvalue { ptr, ptr, ptr, i32 } %43, ptr %45, 1
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %48 = load ptr, ptr %47, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } %46, ptr %48, 2
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %51 = load i32, ptr %50, align 4
  %52 = insertvalue { ptr, ptr, ptr, i32 } %49, i32 %51, 3
  %53 = load ptr, ptr %21, align 8
  %54 = insertvalue { ptr } undef, ptr %53, 0
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %56 = load ptr, ptr %55, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %56, 0
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } %57, ptr %59, 1
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %62 = load ptr, ptr %61, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr %62, 2
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %65 = load i32, ptr %64, align 4
  %66 = insertvalue { ptr, ptr, ptr, i32 } %63, i32 %65, 3
  %67 = alloca [2 x ptr], align 8
  %68 = call ptr @llvm.invariant.start.p0(i64 16, ptr %67)
  %69 = getelementptr [2 x ptr], ptr %67, i32 0, i32 1
  store ptr @_parameterization_FunctionPtri32_to_Ptri1, ptr %69, align 8
  %70 = getelementptr [2 x ptr], ptr %67, i32 0, i32 0
  store ptr @_parameterization_IntIterable, ptr %70, align 8
  %71 = call ptr @llvm.invariant.start.p0(i64 416, ptr %56)
  %72 = getelementptr ptr, ptr %56, i32 %65
  %73 = getelementptr ptr, ptr %72, i32 2
  %74 = load ptr, ptr %73, align 8
  %75 = alloca [2 x ptr], align 8
  %76 = getelementptr [2 x ptr], ptr %75, i32 0, i32 0
  store ptr %42, ptr %76, align 8
  %77 = getelementptr [2 x ptr], ptr %75, i32 0, i32 1
  store ptr @function_typ, ptr %77, align 8
  %78 = call ptr %74({ ptr, ptr, ptr, i32 } %66, ptr %75, { ptr, ptr, ptr, i32 } %52, { ptr } %54)
  call void %78({ ptr, ptr, ptr, i32 } %66, { ptr, ptr, ptr, i32 } %66, ptr %67, { ptr, ptr, ptr, i32 } %52, { ptr } %54)
  %79 = alloca { ptr, ptr, ptr, i32 }, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %79, i32 0, i32 0
  %82 = load ptr, ptr %80, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %79, i32 0, i32 1
  %85 = load ptr, ptr %83, align 8
  store ptr %85, ptr %84, align 8
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %79, i32 0, i32 2
  %88 = load ptr, ptr %86, align 8
  store ptr %88, ptr %87, align 8
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %79, i32 0, i32 3
  %91 = load i32, ptr %89, align 4
  store i32 %91, ptr %90, align 4
  call void @set_offset(ptr %79, ptr @IntIterable)
  %92 = call ptr @llvm.invariant.start.p0(i64 24, ptr %79)
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %79, i32 0, i32 0
  %94 = load ptr, ptr %93, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %94, 0
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %79, i32 0, i32 1
  %97 = load ptr, ptr %96, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %97, 1
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %79, i32 0, i32 2
  %100 = load ptr, ptr %99, align 8
  %101 = insertvalue { ptr, ptr, ptr, i32 } %98, ptr %100, 2
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %79, i32 0, i32 3
  %103 = load i32, ptr %102, align 4
  %104 = insertvalue { ptr, ptr, ptr, i32 } %101, i32 %103, 3
  ret { ptr, ptr, ptr, i32 } %104
}

define { ptr, ptr, ptr, i32 } @IntIterable_chain_otherIntIterable({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @IntIterable)
  %20 = call ptr @llvm.invariant.start.p0(i64 24, ptr %7)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @IntIterable)
  %36 = call ptr @llvm.invariant.start.p0(i64 24, ptr %23)
  %37 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr null, i32 1) to i64))
  %38 = alloca { ptr, ptr, ptr, i32 }, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  store ptr @ChainIterable, ptr %38, align 8
  store ptr %37, ptr %39, align 8
  store i32 7, ptr %40, align 4
  %41 = call ptr @llvm.invariant.start.p0(i64 16, ptr %38)
  %42 = alloca { ptr, ptr, ptr, i32 }, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 0
  %45 = load ptr, ptr %43, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 1
  %48 = load ptr, ptr %46, align 8
  store ptr %48, ptr %47, align 8
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 2
  %51 = load ptr, ptr %49, align 8
  store ptr %51, ptr %50, align 8
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 3
  %54 = load i32, ptr %52, align 4
  store i32 %54, ptr %53, align 4
  call void @set_offset(ptr %42, ptr @IntIterable)
  %55 = call ptr @llvm.invariant.start.p0(i64 24, ptr %42)
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 0
  %57 = load ptr, ptr %56, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %57, 0
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 1
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } %58, ptr %60, 1
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 2
  %63 = load ptr, ptr %62, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %63, 2
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 3
  %66 = load i32, ptr %65, align 4
  %67 = insertvalue { ptr, ptr, ptr, i32 } %64, i32 %66, 3
  %68 = alloca { ptr, ptr, ptr, i32 }, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 0
  %71 = load ptr, ptr %69, align 8
  store ptr %71, ptr %70, align 8
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 1
  %74 = load ptr, ptr %72, align 8
  store ptr %74, ptr %73, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 2
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 3
  %80 = load i32, ptr %78, align 4
  store i32 %80, ptr %79, align 4
  call void @set_offset(ptr %68, ptr @IntIterable)
  %81 = call ptr @llvm.invariant.start.p0(i64 24, ptr %68)
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 0
  %83 = load ptr, ptr %82, align 8
  %84 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %83, 0
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 1
  %86 = load ptr, ptr %85, align 8
  %87 = insertvalue { ptr, ptr, ptr, i32 } %84, ptr %86, 1
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 2
  %89 = load ptr, ptr %88, align 8
  %90 = insertvalue { ptr, ptr, ptr, i32 } %87, ptr %89, 2
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 3
  %92 = load i32, ptr %91, align 4
  %93 = insertvalue { ptr, ptr, ptr, i32 } %90, i32 %92, 3
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 0
  %95 = load ptr, ptr %94, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %95, 0
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %98 = load ptr, ptr %97, align 8
  %99 = insertvalue { ptr, ptr, ptr, i32 } %96, ptr %98, 1
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 2
  %101 = load ptr, ptr %100, align 8
  %102 = insertvalue { ptr, ptr, ptr, i32 } %99, ptr %101, 2
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %104 = load i32, ptr %103, align 4
  %105 = insertvalue { ptr, ptr, ptr, i32 } %102, i32 %104, 3
  %106 = alloca [2 x ptr], align 8
  %107 = call ptr @llvm.invariant.start.p0(i64 16, ptr %106)
  %108 = getelementptr [2 x ptr], ptr %106, i32 0, i32 1
  store ptr @_parameterization_IntIterable, ptr %108, align 8
  %109 = getelementptr [2 x ptr], ptr %106, i32 0, i32 0
  store ptr @_parameterization_IntIterable, ptr %109, align 8
  %110 = call ptr @llvm.invariant.start.p0(i64 416, ptr %95)
  %111 = getelementptr ptr, ptr %95, i32 %104
  %112 = getelementptr ptr, ptr %111, i32 2
  %113 = load ptr, ptr %112, align 8
  %114 = alloca [2 x ptr], align 8
  %115 = getelementptr [2 x ptr], ptr %114, i32 0, i32 0
  store ptr %57, ptr %115, align 8
  %116 = getelementptr [2 x ptr], ptr %114, i32 0, i32 1
  store ptr %83, ptr %116, align 8
  %117 = call ptr %113({ ptr, ptr, ptr, i32 } %105, ptr %114, { ptr, ptr, ptr, i32 } %67, { ptr, ptr, ptr, i32 } %93)
  call void %117({ ptr, ptr, ptr, i32 } %105, { ptr, ptr, ptr, i32 } %105, ptr %106, { ptr, ptr, ptr, i32 } %67, { ptr, ptr, ptr, i32 } %93)
  %118 = alloca { ptr, ptr, ptr, i32 }, align 8
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 0
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 0
  %121 = load ptr, ptr %119, align 8
  store ptr %121, ptr %120, align 8
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 1
  %124 = load ptr, ptr %122, align 8
  store ptr %124, ptr %123, align 8
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 2
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 2
  %127 = load ptr, ptr %125, align 8
  store ptr %127, ptr %126, align 8
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 3
  %130 = load i32, ptr %128, align 4
  store i32 %130, ptr %129, align 4
  call void @set_offset(ptr %118, ptr @IntIterable)
  %131 = call ptr @llvm.invariant.start.p0(i64 24, ptr %118)
  %132 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 0
  %133 = load ptr, ptr %132, align 8
  %134 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %133, 0
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 1
  %136 = load ptr, ptr %135, align 8
  %137 = insertvalue { ptr, ptr, ptr, i32 } %134, ptr %136, 1
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 2
  %139 = load ptr, ptr %138, align 8
  %140 = insertvalue { ptr, ptr, ptr, i32 } %137, ptr %139, 2
  %141 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 3
  %142 = load i32, ptr %141, align 4
  %143 = insertvalue { ptr, ptr, ptr, i32 } %140, i32 %142, 3
  ret { ptr, ptr, ptr, i32 } %143
}

define { ptr, ptr, ptr, i32 } @IntIterable_interleave_otherIntIterable({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @IntIterable)
  %20 = call ptr @llvm.invariant.start.p0(i64 24, ptr %7)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @IntIterable)
  %36 = call ptr @llvm.invariant.start.p0(i64 24, ptr %23)
  %37 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr null, i32 1) to i64))
  %38 = alloca { ptr, ptr, ptr, i32 }, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  store ptr @InterleaveIterable, ptr %38, align 8
  store ptr %37, ptr %39, align 8
  store i32 7, ptr %40, align 4
  %41 = call ptr @llvm.invariant.start.p0(i64 16, ptr %38)
  %42 = alloca { ptr, ptr, ptr, i32 }, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 0
  %45 = load ptr, ptr %43, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 1
  %48 = load ptr, ptr %46, align 8
  store ptr %48, ptr %47, align 8
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 2
  %51 = load ptr, ptr %49, align 8
  store ptr %51, ptr %50, align 8
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 3
  %54 = load i32, ptr %52, align 4
  store i32 %54, ptr %53, align 4
  call void @set_offset(ptr %42, ptr @IntIterable)
  %55 = call ptr @llvm.invariant.start.p0(i64 24, ptr %42)
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 0
  %57 = load ptr, ptr %56, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %57, 0
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 1
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } %58, ptr %60, 1
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 2
  %63 = load ptr, ptr %62, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %63, 2
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 3
  %66 = load i32, ptr %65, align 4
  %67 = insertvalue { ptr, ptr, ptr, i32 } %64, i32 %66, 3
  %68 = alloca { ptr, ptr, ptr, i32 }, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 0
  %71 = load ptr, ptr %69, align 8
  store ptr %71, ptr %70, align 8
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 1
  %74 = load ptr, ptr %72, align 8
  store ptr %74, ptr %73, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 2
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 3
  %80 = load i32, ptr %78, align 4
  store i32 %80, ptr %79, align 4
  call void @set_offset(ptr %68, ptr @IntIterable)
  %81 = call ptr @llvm.invariant.start.p0(i64 24, ptr %68)
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 0
  %83 = load ptr, ptr %82, align 8
  %84 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %83, 0
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 1
  %86 = load ptr, ptr %85, align 8
  %87 = insertvalue { ptr, ptr, ptr, i32 } %84, ptr %86, 1
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 2
  %89 = load ptr, ptr %88, align 8
  %90 = insertvalue { ptr, ptr, ptr, i32 } %87, ptr %89, 2
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 3
  %92 = load i32, ptr %91, align 4
  %93 = insertvalue { ptr, ptr, ptr, i32 } %90, i32 %92, 3
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 0
  %95 = load ptr, ptr %94, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %95, 0
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %98 = load ptr, ptr %97, align 8
  %99 = insertvalue { ptr, ptr, ptr, i32 } %96, ptr %98, 1
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 2
  %101 = load ptr, ptr %100, align 8
  %102 = insertvalue { ptr, ptr, ptr, i32 } %99, ptr %101, 2
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %104 = load i32, ptr %103, align 4
  %105 = insertvalue { ptr, ptr, ptr, i32 } %102, i32 %104, 3
  %106 = alloca [2 x ptr], align 8
  %107 = call ptr @llvm.invariant.start.p0(i64 16, ptr %106)
  %108 = getelementptr [2 x ptr], ptr %106, i32 0, i32 1
  store ptr @_parameterization_IntIterable, ptr %108, align 8
  %109 = getelementptr [2 x ptr], ptr %106, i32 0, i32 0
  store ptr @_parameterization_IntIterable, ptr %109, align 8
  %110 = call ptr @llvm.invariant.start.p0(i64 416, ptr %95)
  %111 = getelementptr ptr, ptr %95, i32 %104
  %112 = getelementptr ptr, ptr %111, i32 2
  %113 = load ptr, ptr %112, align 8
  %114 = alloca [2 x ptr], align 8
  %115 = getelementptr [2 x ptr], ptr %114, i32 0, i32 0
  store ptr %57, ptr %115, align 8
  %116 = getelementptr [2 x ptr], ptr %114, i32 0, i32 1
  store ptr %83, ptr %116, align 8
  %117 = call ptr %113({ ptr, ptr, ptr, i32 } %105, ptr %114, { ptr, ptr, ptr, i32 } %67, { ptr, ptr, ptr, i32 } %93)
  call void %117({ ptr, ptr, ptr, i32 } %105, { ptr, ptr, ptr, i32 } %105, ptr %106, { ptr, ptr, ptr, i32 } %67, { ptr, ptr, ptr, i32 } %93)
  %118 = alloca { ptr, ptr, ptr, i32 }, align 8
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 0
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 0
  %121 = load ptr, ptr %119, align 8
  store ptr %121, ptr %120, align 8
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 1
  %124 = load ptr, ptr %122, align 8
  store ptr %124, ptr %123, align 8
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 2
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 2
  %127 = load ptr, ptr %125, align 8
  store ptr %127, ptr %126, align 8
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 3
  %130 = load i32, ptr %128, align 4
  store i32 %130, ptr %129, align 4
  call void @set_offset(ptr %118, ptr @IntIterable)
  %131 = call ptr @llvm.invariant.start.p0(i64 24, ptr %118)
  %132 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 0
  %133 = load ptr, ptr %132, align 8
  %134 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %133, 0
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 1
  %136 = load ptr, ptr %135, align 8
  %137 = insertvalue { ptr, ptr, ptr, i32 } %134, ptr %136, 1
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 2
  %139 = load ptr, ptr %138, align 8
  %140 = insertvalue { ptr, ptr, ptr, i32 } %137, ptr %139, 2
  %141 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 3
  %142 = load i32, ptr %141, align 4
  %143 = insertvalue { ptr, ptr, ptr, i32 } %140, i32 %142, 3
  ret { ptr, ptr, ptr, i32 } %143
}

define { ptr, ptr, ptr, i32 } @IntIterable_zip_otherIntIterable({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @IntIterable)
  %20 = call ptr @llvm.invariant.start.p0(i64 24, ptr %7)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @IntIterable)
  %36 = call ptr @llvm.invariant.start.p0(i64 24, ptr %23)
  %37 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr null, i32 1) to i64))
  %38 = alloca { ptr, ptr, ptr, i32 }, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  store ptr @ZipIterable, ptr %38, align 8
  store ptr %37, ptr %39, align 8
  store i32 7, ptr %40, align 4
  %41 = call ptr @llvm.invariant.start.p0(i64 16, ptr %38)
  %42 = alloca { ptr, ptr, ptr, i32 }, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 0
  %45 = load ptr, ptr %43, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 1
  %48 = load ptr, ptr %46, align 8
  store ptr %48, ptr %47, align 8
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 2
  %51 = load ptr, ptr %49, align 8
  store ptr %51, ptr %50, align 8
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 3
  %54 = load i32, ptr %52, align 4
  store i32 %54, ptr %53, align 4
  call void @set_offset(ptr %42, ptr @IntIterable)
  %55 = call ptr @llvm.invariant.start.p0(i64 24, ptr %42)
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 0
  %57 = load ptr, ptr %56, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %57, 0
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 1
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } %58, ptr %60, 1
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 2
  %63 = load ptr, ptr %62, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %63, 2
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 3
  %66 = load i32, ptr %65, align 4
  %67 = insertvalue { ptr, ptr, ptr, i32 } %64, i32 %66, 3
  %68 = alloca { ptr, ptr, ptr, i32 }, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 0
  %71 = load ptr, ptr %69, align 8
  store ptr %71, ptr %70, align 8
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 1
  %74 = load ptr, ptr %72, align 8
  store ptr %74, ptr %73, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 2
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 3
  %80 = load i32, ptr %78, align 4
  store i32 %80, ptr %79, align 4
  call void @set_offset(ptr %68, ptr @IntIterable)
  %81 = call ptr @llvm.invariant.start.p0(i64 24, ptr %68)
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 0
  %83 = load ptr, ptr %82, align 8
  %84 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %83, 0
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 1
  %86 = load ptr, ptr %85, align 8
  %87 = insertvalue { ptr, ptr, ptr, i32 } %84, ptr %86, 1
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 2
  %89 = load ptr, ptr %88, align 8
  %90 = insertvalue { ptr, ptr, ptr, i32 } %87, ptr %89, 2
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 3
  %92 = load i32, ptr %91, align 4
  %93 = insertvalue { ptr, ptr, ptr, i32 } %90, i32 %92, 3
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 0
  %95 = load ptr, ptr %94, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %95, 0
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %98 = load ptr, ptr %97, align 8
  %99 = insertvalue { ptr, ptr, ptr, i32 } %96, ptr %98, 1
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 2
  %101 = load ptr, ptr %100, align 8
  %102 = insertvalue { ptr, ptr, ptr, i32 } %99, ptr %101, 2
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %104 = load i32, ptr %103, align 4
  %105 = insertvalue { ptr, ptr, ptr, i32 } %102, i32 %104, 3
  %106 = alloca [2 x ptr], align 8
  %107 = call ptr @llvm.invariant.start.p0(i64 16, ptr %106)
  %108 = getelementptr [2 x ptr], ptr %106, i32 0, i32 1
  store ptr @_parameterization_IntIterable, ptr %108, align 8
  %109 = getelementptr [2 x ptr], ptr %106, i32 0, i32 0
  store ptr @_parameterization_IntIterable, ptr %109, align 8
  %110 = call ptr @llvm.invariant.start.p0(i64 96, ptr %95)
  %111 = getelementptr ptr, ptr %95, i32 %104
  %112 = getelementptr ptr, ptr %111, i32 2
  %113 = load ptr, ptr %112, align 8
  %114 = alloca [2 x ptr], align 8
  %115 = getelementptr [2 x ptr], ptr %114, i32 0, i32 0
  store ptr %57, ptr %115, align 8
  %116 = getelementptr [2 x ptr], ptr %114, i32 0, i32 1
  store ptr %83, ptr %116, align 8
  %117 = call ptr %113({ ptr, ptr, ptr, i32 } %105, ptr %114, { ptr, ptr, ptr, i32 } %67, { ptr, ptr, ptr, i32 } %93)
  call void %117({ ptr, ptr, ptr, i32 } %105, { ptr, ptr, ptr, i32 } %105, ptr %106, { ptr, ptr, ptr, i32 } %67, { ptr, ptr, ptr, i32 } %93)
  %118 = alloca { ptr, ptr, ptr, i32 }, align 8
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 0
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 0
  %121 = load ptr, ptr %119, align 8
  store ptr %121, ptr %120, align 8
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 1
  %124 = load ptr, ptr %122, align 8
  store ptr %124, ptr %123, align 8
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 2
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 2
  %127 = load ptr, ptr %125, align 8
  store ptr %127, ptr %126, align 8
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 3
  %130 = load i32, ptr %128, align 4
  store i32 %130, ptr %129, align 4
  call void @set_offset(ptr %118, ptr @ZipIterable)
  %131 = call ptr @llvm.invariant.start.p0(i64 24, ptr %118)
  %132 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 0
  %133 = load ptr, ptr %132, align 8
  %134 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %133, 0
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 1
  %136 = load ptr, ptr %135, align 8
  %137 = insertvalue { ptr, ptr, ptr, i32 } %134, ptr %136, 1
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 2
  %139 = load ptr, ptr %138, align 8
  %140 = insertvalue { ptr, ptr, ptr, i32 } %137, ptr %139, 2
  %141 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 3
  %142 = load i32, ptr %141, align 4
  %143 = insertvalue { ptr, ptr, ptr, i32 } %140, i32 %142, 3
  ret { ptr, ptr, ptr, i32 } %143
}

define { ptr, ptr, ptr, i32 } @IntIterable_product_otherIntIterable({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @IntIterable)
  %20 = call ptr @llvm.invariant.start.p0(i64 24, ptr %7)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @IntIterable)
  %36 = call ptr @llvm.invariant.start.p0(i64 24, ptr %23)
  %37 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr null, i32 1) to i64))
  %38 = alloca { ptr, ptr, ptr, i32 }, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  store ptr @ProductIterable, ptr %38, align 8
  store ptr %37, ptr %39, align 8
  store i32 7, ptr %40, align 4
  %41 = call ptr @llvm.invariant.start.p0(i64 16, ptr %38)
  %42 = alloca { ptr, ptr, ptr, i32 }, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 0
  %45 = load ptr, ptr %43, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 1
  %48 = load ptr, ptr %46, align 8
  store ptr %48, ptr %47, align 8
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 2
  %51 = load ptr, ptr %49, align 8
  store ptr %51, ptr %50, align 8
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 3
  %54 = load i32, ptr %52, align 4
  store i32 %54, ptr %53, align 4
  call void @set_offset(ptr %42, ptr @IntIterable)
  %55 = call ptr @llvm.invariant.start.p0(i64 24, ptr %42)
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 0
  %57 = load ptr, ptr %56, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %57, 0
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 1
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } %58, ptr %60, 1
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 2
  %63 = load ptr, ptr %62, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %63, 2
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 3
  %66 = load i32, ptr %65, align 4
  %67 = insertvalue { ptr, ptr, ptr, i32 } %64, i32 %66, 3
  %68 = alloca { ptr, ptr, ptr, i32 }, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 0
  %71 = load ptr, ptr %69, align 8
  store ptr %71, ptr %70, align 8
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 1
  %74 = load ptr, ptr %72, align 8
  store ptr %74, ptr %73, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 2
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 3
  %80 = load i32, ptr %78, align 4
  store i32 %80, ptr %79, align 4
  call void @set_offset(ptr %68, ptr @IntIterable)
  %81 = call ptr @llvm.invariant.start.p0(i64 24, ptr %68)
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 0
  %83 = load ptr, ptr %82, align 8
  %84 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %83, 0
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 1
  %86 = load ptr, ptr %85, align 8
  %87 = insertvalue { ptr, ptr, ptr, i32 } %84, ptr %86, 1
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 2
  %89 = load ptr, ptr %88, align 8
  %90 = insertvalue { ptr, ptr, ptr, i32 } %87, ptr %89, 2
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 3
  %92 = load i32, ptr %91, align 4
  %93 = insertvalue { ptr, ptr, ptr, i32 } %90, i32 %92, 3
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 0
  %95 = load ptr, ptr %94, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %95, 0
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %98 = load ptr, ptr %97, align 8
  %99 = insertvalue { ptr, ptr, ptr, i32 } %96, ptr %98, 1
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 2
  %101 = load ptr, ptr %100, align 8
  %102 = insertvalue { ptr, ptr, ptr, i32 } %99, ptr %101, 2
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %104 = load i32, ptr %103, align 4
  %105 = insertvalue { ptr, ptr, ptr, i32 } %102, i32 %104, 3
  %106 = alloca [2 x ptr], align 8
  %107 = call ptr @llvm.invariant.start.p0(i64 16, ptr %106)
  %108 = getelementptr [2 x ptr], ptr %106, i32 0, i32 1
  store ptr @_parameterization_IntIterable, ptr %108, align 8
  %109 = getelementptr [2 x ptr], ptr %106, i32 0, i32 0
  store ptr @_parameterization_IntIterable, ptr %109, align 8
  %110 = call ptr @llvm.invariant.start.p0(i64 96, ptr %95)
  %111 = getelementptr ptr, ptr %95, i32 %104
  %112 = getelementptr ptr, ptr %111, i32 2
  %113 = load ptr, ptr %112, align 8
  %114 = alloca [2 x ptr], align 8
  %115 = getelementptr [2 x ptr], ptr %114, i32 0, i32 0
  store ptr %57, ptr %115, align 8
  %116 = getelementptr [2 x ptr], ptr %114, i32 0, i32 1
  store ptr %83, ptr %116, align 8
  %117 = call ptr %113({ ptr, ptr, ptr, i32 } %105, ptr %114, { ptr, ptr, ptr, i32 } %67, { ptr, ptr, ptr, i32 } %93)
  call void %117({ ptr, ptr, ptr, i32 } %105, { ptr, ptr, ptr, i32 } %105, ptr %106, { ptr, ptr, ptr, i32 } %67, { ptr, ptr, ptr, i32 } %93)
  %118 = alloca { ptr, ptr, ptr, i32 }, align 8
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 0
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 0
  %121 = load ptr, ptr %119, align 8
  store ptr %121, ptr %120, align 8
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 1
  %124 = load ptr, ptr %122, align 8
  store ptr %124, ptr %123, align 8
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 2
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 2
  %127 = load ptr, ptr %125, align 8
  store ptr %127, ptr %126, align 8
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 3
  %130 = load i32, ptr %128, align 4
  store i32 %130, ptr %129, align 4
  call void @set_offset(ptr %118, ptr @ProductIterable)
  %131 = call ptr @llvm.invariant.start.p0(i64 24, ptr %118)
  %132 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 0
  %133 = load ptr, ptr %132, align 8
  %134 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %133, 0
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 1
  %136 = load ptr, ptr %135, align 8
  %137 = insertvalue { ptr, ptr, ptr, i32 } %134, ptr %136, 1
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 2
  %139 = load ptr, ptr %138, align 8
  %140 = insertvalue { ptr, ptr, ptr, i32 } %137, ptr %139, 2
  %141 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 3
  %142 = load i32, ptr %141, align 4
  %143 = insertvalue { ptr, ptr, ptr, i32 } %140, i32 %142, 3
  ret { ptr, ptr, ptr, i32 } %143
}

define { ptr, ptr, ptr, i32 } @MapIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @MapIterable)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 416, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %27 = call ptr %25(ptr %26)
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %29, 0
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %32 = load ptr, ptr %31, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %32, 1
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %35 = load ptr, ptr %34, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %35, 2
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %38 = load i32, ptr %37, align 4
  %39 = insertvalue { ptr, ptr, ptr, i32 } %36, i32 %38, 3
  %40 = alloca [0 x ptr], align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 0, ptr %40)
  %42 = call ptr @llvm.invariant.start.p0(i64 192, ptr %29)
  %43 = getelementptr ptr, ptr %29, i32 %38
  %44 = getelementptr ptr, ptr %43, i32 10
  %45 = load ptr, ptr %44, align 8
  %46 = alloca [0 x ptr], align 8
  %47 = call ptr %45({ ptr, ptr, ptr, i32 } %39, ptr %46)
  %48 = call { ptr, ptr, ptr, i32 } %47({ ptr, ptr, ptr, i32 } %39, { ptr, ptr, ptr, i32 } %39, ptr %40)
  %49 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %48, ptr %49, align 8
  %50 = call ptr @llvm.invariant.start.p0(i64 16, ptr %49)
  %51 = alloca { ptr, ptr, ptr, i32 }, align 8
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 0
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 0
  %54 = load ptr, ptr %52, align 8
  store ptr %54, ptr %53, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 1
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 1
  %57 = load ptr, ptr %55, align 8
  store ptr %57, ptr %56, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 2
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 2
  %60 = load ptr, ptr %58, align 8
  store ptr %60, ptr %59, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 3
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 3
  %63 = load i32, ptr %61, align 4
  store i32 %63, ptr %62, align 4
  call void @set_offset(ptr %51, ptr @IntIterator)
  %64 = call ptr @llvm.invariant.start.p0(i64 24, ptr %51)
  %65 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %66 = extractvalue { ptr, ptr, ptr, i32 } %65, 0
  %67 = call ptr @llvm.invariant.start.p0(i64 416, ptr %66)
  %68 = extractvalue { ptr, ptr, ptr, i32 } %65, 3
  %69 = getelementptr ptr, ptr %66, i32 %68
  %70 = getelementptr ptr, ptr %69, i32 1
  %71 = load ptr, ptr %70, align 8
  %72 = extractvalue { ptr, ptr, ptr, i32 } %65, 1
  %73 = call ptr %71(ptr %72)
  %74 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr } }, ptr null, i32 1) to i64))
  %75 = alloca { ptr, ptr, ptr, i32 }, align 8
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 1
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 3
  store ptr @MapIterator, ptr %75, align 8
  store ptr %74, ptr %76, align 8
  store i32 7, ptr %77, align 4
  %78 = call ptr @llvm.invariant.start.p0(i64 16, ptr %75)
  %79 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %80 = extractvalue { ptr, ptr, ptr, i32 } %79, 0
  %81 = call ptr @llvm.invariant.start.p0(i64 416, ptr %80)
  %82 = extractvalue { ptr, ptr, ptr, i32 } %79, 3
  %83 = getelementptr ptr, ptr %80, i32 %82
  %84 = load ptr, ptr %83, align 8
  %85 = extractvalue { ptr, ptr, ptr, i32 } %79, 1
  %86 = call ptr %84(ptr %85)
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 0
  %88 = load ptr, ptr %87, align 8
  %89 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %88, 0
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } %89, ptr %91, 1
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 2
  %94 = load ptr, ptr %93, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %94, 2
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 3
  %97 = load i32, ptr %96, align 4
  %98 = insertvalue { ptr, ptr, ptr, i32 } %95, i32 %97, 3
  %99 = alloca [0 x ptr], align 8
  %100 = call ptr @llvm.invariant.start.p0(i64 0, ptr %99)
  %101 = call ptr @llvm.invariant.start.p0(i64 192, ptr %88)
  %102 = getelementptr ptr, ptr %88, i32 %97
  %103 = getelementptr ptr, ptr %102, i32 10
  %104 = load ptr, ptr %103, align 8
  %105 = alloca [0 x ptr], align 8
  %106 = call ptr %104({ ptr, ptr, ptr, i32 } %98, ptr %105)
  %107 = call { ptr, ptr, ptr, i32 } %106({ ptr, ptr, ptr, i32 } %98, { ptr, ptr, ptr, i32 } %98, ptr %99)
  %108 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %107, ptr %108, align 8
  %109 = call ptr @llvm.invariant.start.p0(i64 16, ptr %108)
  %110 = alloca { ptr, ptr, ptr, i32 }, align 8
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 0
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %110, i32 0, i32 0
  %113 = load ptr, ptr %111, align 8
  store ptr %113, ptr %112, align 8
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 1
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %110, i32 0, i32 1
  %116 = load ptr, ptr %114, align 8
  store ptr %116, ptr %115, align 8
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 2
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %110, i32 0, i32 2
  %119 = load ptr, ptr %117, align 8
  store ptr %119, ptr %118, align 8
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 3
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %110, i32 0, i32 3
  %122 = load i32, ptr %120, align 4
  store i32 %122, ptr %121, align 4
  call void @set_offset(ptr %110, ptr @IntIterator)
  %123 = call ptr @llvm.invariant.start.p0(i64 24, ptr %110)
  %124 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %125 = extractvalue { ptr, ptr, ptr, i32 } %124, 0
  %126 = call ptr @llvm.invariant.start.p0(i64 416, ptr %125)
  %127 = extractvalue { ptr, ptr, ptr, i32 } %124, 3
  %128 = getelementptr ptr, ptr %125, i32 %127
  %129 = getelementptr ptr, ptr %128, i32 1
  %130 = load ptr, ptr %129, align 8
  %131 = extractvalue { ptr, ptr, ptr, i32 } %124, 1
  %132 = call ptr %130(ptr %131)
  %133 = alloca { ptr, ptr, ptr, i32 }, align 8
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %110, i32 0, i32 0
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 0
  %136 = load ptr, ptr %134, align 8
  store ptr %136, ptr %135, align 8
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %110, i32 0, i32 1
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 1
  %139 = load ptr, ptr %137, align 8
  store ptr %139, ptr %138, align 8
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %110, i32 0, i32 2
  %141 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 2
  %142 = load ptr, ptr %140, align 8
  store ptr %142, ptr %141, align 8
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %110, i32 0, i32 3
  %144 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 3
  %145 = load i32, ptr %143, align 4
  store i32 %145, ptr %144, align 4
  call void @set_offset(ptr %133, ptr @IntIterator)
  %146 = call ptr @llvm.invariant.start.p0(i64 24, ptr %133)
  %147 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 0
  %148 = load ptr, ptr %147, align 8
  %149 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %148, 0
  %150 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 1
  %151 = load ptr, ptr %150, align 8
  %152 = insertvalue { ptr, ptr, ptr, i32 } %149, ptr %151, 1
  %153 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 2
  %154 = load ptr, ptr %153, align 8
  %155 = insertvalue { ptr, ptr, ptr, i32 } %152, ptr %154, 2
  %156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 3
  %157 = load i32, ptr %156, align 4
  %158 = insertvalue { ptr, ptr, ptr, i32 } %155, i32 %157, 3
  %159 = getelementptr { ptr }, ptr %132, i32 0, i32 0
  %160 = load ptr, ptr %159, align 8
  %161 = insertvalue { ptr } undef, ptr %160, 0
  %162 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 0
  %163 = load ptr, ptr %162, align 8
  %164 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %163, 0
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 1
  %166 = load ptr, ptr %165, align 8
  %167 = insertvalue { ptr, ptr, ptr, i32 } %164, ptr %166, 1
  %168 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 2
  %169 = load ptr, ptr %168, align 8
  %170 = insertvalue { ptr, ptr, ptr, i32 } %167, ptr %169, 2
  %171 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 3
  %172 = load i32, ptr %171, align 4
  %173 = insertvalue { ptr, ptr, ptr, i32 } %170, i32 %172, 3
  %174 = alloca [2 x ptr], align 8
  %175 = call ptr @llvm.invariant.start.p0(i64 16, ptr %174)
  %176 = getelementptr [2 x ptr], ptr %174, i32 0, i32 1
  store ptr @_parameterization_FunctionPtri32_to_Ptri32, ptr %176, align 8
  %177 = getelementptr [2 x ptr], ptr %174, i32 0, i32 0
  store ptr @_parameterization_IntIterator, ptr %177, align 8
  %178 = call ptr @llvm.invariant.start.p0(i64 64, ptr %163)
  %179 = getelementptr ptr, ptr %163, i32 %172
  %180 = getelementptr ptr, ptr %179, i32 2
  %181 = load ptr, ptr %180, align 8
  %182 = alloca [2 x ptr], align 8
  %183 = getelementptr [2 x ptr], ptr %182, i32 0, i32 0
  store ptr %148, ptr %183, align 8
  %184 = getelementptr [2 x ptr], ptr %182, i32 0, i32 1
  store ptr @function_typ, ptr %184, align 8
  %185 = call ptr %181({ ptr, ptr, ptr, i32 } %173, ptr %182, { ptr, ptr, ptr, i32 } %158, { ptr } %161)
  call void %185({ ptr, ptr, ptr, i32 } %173, { ptr, ptr, ptr, i32 } %173, ptr %174, { ptr, ptr, ptr, i32 } %158, { ptr } %161)
  %186 = alloca { ptr, ptr, ptr, i32 }, align 8
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 0
  %188 = getelementptr { ptr, ptr, ptr, i32 }, ptr %186, i32 0, i32 0
  %189 = load ptr, ptr %187, align 8
  store ptr %189, ptr %188, align 8
  %190 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 1
  %191 = getelementptr { ptr, ptr, ptr, i32 }, ptr %186, i32 0, i32 1
  %192 = load ptr, ptr %190, align 8
  store ptr %192, ptr %191, align 8
  %193 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 2
  %194 = getelementptr { ptr, ptr, ptr, i32 }, ptr %186, i32 0, i32 2
  %195 = load ptr, ptr %193, align 8
  store ptr %195, ptr %194, align 8
  %196 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 3
  %197 = getelementptr { ptr, ptr, ptr, i32 }, ptr %186, i32 0, i32 3
  %198 = load i32, ptr %196, align 4
  store i32 %198, ptr %197, align 4
  call void @set_offset(ptr %186, ptr @Iterator)
  %199 = call ptr @llvm.invariant.start.p0(i64 24, ptr %186)
  %200 = getelementptr { ptr, ptr, ptr, i32 }, ptr %186, i32 0, i32 0
  %201 = load ptr, ptr %200, align 8
  %202 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %201, 0
  %203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %186, i32 0, i32 1
  %204 = load ptr, ptr %203, align 8
  %205 = insertvalue { ptr, ptr, ptr, i32 } %202, ptr %204, 1
  %206 = getelementptr { ptr, ptr, ptr, i32 }, ptr %186, i32 0, i32 2
  %207 = load ptr, ptr %206, align 8
  %208 = insertvalue { ptr, ptr, ptr, i32 } %205, ptr %207, 2
  %209 = getelementptr { ptr, ptr, ptr, i32 }, ptr %186, i32 0, i32 3
  %210 = load i32, ptr %209, align 4
  %211 = insertvalue { ptr, ptr, ptr, i32 } %208, i32 %210, 3
  ret { ptr, ptr, ptr, i32 } %211
}

define ptr @MapIterator_field_iterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr } }, ptr %0, i32 0, i32 0
  ret ptr %2
}

define ptr @MapIterator_field_f(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr } }, ptr %0, i32 0, i32 1
  ret ptr %2
}

define ptr @MapIterator_B_init_iteratorIntIterator_fFunctionPtri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2, { ptr } %3) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = getelementptr [2 x ptr], ptr %1, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr ptr, ptr %7, i32 1
  %9 = getelementptr ptr, ptr %7, i32 2
  %10 = getelementptr ptr, ptr %7, i32 3
  %11 = getelementptr ptr, ptr %7, i32 4
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 -933084275656658555, i64 ptrtoint (ptr @IntIterator to i64), ptr %15)
  %17 = getelementptr [2 x ptr], ptr %1, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr ptr, ptr %18, i32 1
  %20 = getelementptr ptr, ptr %18, i32 2
  %21 = getelementptr ptr, ptr %18, i32 3
  %22 = getelementptr ptr, ptr %18, i32 4
  %23 = load i64, ptr %19, align 4
  %24 = load i64, ptr %20, align 4
  %25 = load ptr, ptr %21, align 8
  %26 = load ptr, ptr %22, align 8
  %27 = call i1 @subtype_test_wrapper(ptr %25, i64 %24, i64 %23, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %26)
  %28 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %29 = getelementptr [8 x ptr], ptr %28, i32 0, i32 4
  %30 = getelementptr ptr, ptr %29, i32 7
  %31 = load ptr, ptr %30, align 8
  ret ptr %31
}

define ptr @MapIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [8 x ptr], ptr %4, i32 0, i32 5
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @MapIterator_init_iteratorIntIterator_fFunctionPtri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @MapIterator)
  %21 = call ptr @llvm.invariant.start.p0(i64 24, ptr %8)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %22, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 16, ptr %22)
  %24 = alloca { ptr, ptr, ptr, i32 }, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %36 = load i32, ptr %34, align 4
  store i32 %36, ptr %35, align 4
  call void @set_offset(ptr %24, ptr @IntIterator)
  %37 = call ptr @llvm.invariant.start.p0(i64 24, ptr %24)
  %38 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %39 = extractvalue { ptr, ptr, ptr, i32 } %38, 0
  %40 = call ptr @llvm.invariant.start.p0(i64 64, ptr %39)
  %41 = extractvalue { ptr, ptr, ptr, i32 } %38, 3
  %42 = getelementptr ptr, ptr %39, i32 %41
  %43 = load ptr, ptr %42, align 8
  %44 = extractvalue { ptr, ptr, ptr, i32 } %38, 1
  %45 = call ptr %43(ptr %44)
  %46 = alloca { ptr, ptr, ptr, i32 }, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %49 = load ptr, ptr %47, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %52 = load ptr, ptr %50, align 8
  store ptr %52, ptr %51, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %55 = load ptr, ptr %53, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %58 = load i32, ptr %56, align 4
  store i32 %58, ptr %57, align 4
  call void @set_offset(ptr %46, ptr @IntIterator)
  %59 = call ptr @llvm.invariant.start.p0(i64 24, ptr %46)
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %62 = load ptr, ptr %60, align 8
  store ptr %62, ptr %61, align 8
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %65 = load ptr, ptr %63, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %68 = load ptr, ptr %66, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %71 = load i32, ptr %69, align 4
  store i32 %71, ptr %70, align 4
  %72 = alloca ptr, align 8
  store { ptr } %4, ptr %72, align 8
  %73 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %74 = extractvalue { ptr, ptr, ptr, i32 } %73, 0
  %75 = call ptr @llvm.invariant.start.p0(i64 64, ptr %74)
  %76 = extractvalue { ptr, ptr, ptr, i32 } %73, 3
  %77 = getelementptr ptr, ptr %74, i32 %76
  %78 = getelementptr ptr, ptr %77, i32 1
  %79 = load ptr, ptr %78, align 8
  %80 = extractvalue { ptr, ptr, ptr, i32 } %73, 1
  %81 = call ptr %79(ptr %80)
  %82 = getelementptr { ptr }, ptr %81, i32 0, i32 0
  %83 = load ptr, ptr %72, align 8
  store ptr %83, ptr %82, align 8
  ret void
}

define { ptr, i32 } @MapIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i32 }, align 8
  %.reg2mem1 = alloca { ptr, i32 }, align 8
  %.reg2mem3 = alloca { ptr, i32 }, align 8
  %.reg2mem5 = alloca { ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @MapIterator)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 64, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %27 = call ptr %25(ptr %26)
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %29, 0
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %32 = load ptr, ptr %31, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %32, 1
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %35 = load ptr, ptr %34, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %35, 2
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %38 = load i32, ptr %37, align 4
  %39 = insertvalue { ptr, ptr, ptr, i32 } %36, i32 %38, 3
  %40 = alloca [0 x ptr], align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 0, ptr %40)
  %42 = call ptr @llvm.invariant.start.p0(i64 16, ptr %29)
  %43 = getelementptr ptr, ptr %29, i32 %38
  %44 = load ptr, ptr %43, align 8
  %45 = alloca [0 x ptr], align 8
  %46 = call ptr %44({ ptr, ptr, ptr, i32 } %39, ptr %45)
  %47 = call { ptr, i32 } %46({ ptr, ptr, ptr, i32 } %39, { ptr, ptr, ptr, i32 } %39, ptr %40)
  %48 = alloca { ptr, i32 }, align 8
  store { ptr, i32 } %47, ptr %48, align 8
  %49 = getelementptr { ptr, i32 }, ptr %48, i32 0, i32 0
  %50 = load ptr, ptr %49, align 8
  %51 = ptrtoint ptr %50 to i64
  %52 = icmp ne i64 %51, ptrtoint (ptr @nil_typ to i64)
  %53 = alloca i32, align 4
  %54 = alloca i32, align 4
  %55 = alloca i32, align 4
  %56 = alloca ptr, align 8
  %57 = alloca i64, align 8
  %58 = alloca i32, align 4
  %59 = alloca ptr, align 8
  %60 = alloca i64, align 8
  br i1 %52, label %61, label %82

61:                                               ; preds = %3
  %62 = getelementptr { ptr, i32 }, ptr %48, i32 0, i32 1
  %63 = load i32, ptr %62, align 4
  store i32 %63, ptr %53, align 4
  %64 = load i32, ptr %53, align 4
  %65 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %66 = extractvalue { ptr, ptr, ptr, i32 } %65, 0
  %67 = call ptr @llvm.invariant.start.p0(i64 64, ptr %66)
  %68 = extractvalue { ptr, ptr, ptr, i32 } %65, 3
  %69 = getelementptr ptr, ptr %66, i32 %68
  %70 = getelementptr ptr, ptr %69, i32 1
  %71 = load ptr, ptr %70, align 8
  %72 = extractvalue { ptr, ptr, ptr, i32 } %65, 1
  %73 = call ptr %71(ptr %72)
  %74 = load ptr, ptr %73, align 8
  %75 = call i32 %74(i32 %64)
  store i32 %75, ptr %54, align 4
  %76 = load i32, ptr %54, align 4
  store i32 %76, ptr %55, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %57, align 4
  %77 = load i64, ptr %57, align 4
  store i64 %77, ptr %56, align 4
  %78 = load ptr, ptr %56, align 8
  %79 = insertvalue { ptr, i32 } undef, ptr %78, 0
  %80 = load i32, ptr %55, align 4
  %81 = insertvalue { ptr, i32 } %79, i32 %80, 1
  store { ptr, i32 } %81, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i32 }, ptr %.reg2mem3, align 8
  store { ptr, i32 } %.reload4, ptr %.reg2mem5, align 8
  br label %88

82:                                               ; preds = %3
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %60, align 4
  %83 = load i64, ptr %60, align 4
  store i64 %83, ptr %59, align 4
  %84 = load ptr, ptr %59, align 8
  %85 = insertvalue { ptr, i32 } undef, ptr %84, 0
  %86 = load i32, ptr %58, align 4
  %87 = insertvalue { ptr, i32 } %85, i32 %86, 1
  store { ptr, i32 } %87, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i32 }, ptr %.reg2mem1, align 8
  store { ptr, i32 } %.reload2, ptr %.reg2mem5, align 8
  br label %88

88:                                               ; preds = %82, %61
  %.reload6 = load { ptr, i32 }, ptr %.reg2mem5, align 8
  store { ptr, i32 } %.reload6, ptr %.reg2mem, align 8
  br label %89

89:                                               ; preds = %88
  %.reload = load { ptr, i32 }, ptr %.reg2mem, align 8
  ret { ptr, i32 } %.reload
}

define ptr @ProductIterable_field_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 0
  ret ptr %2
}

define ptr @ProductIterable_field_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 1
  ret ptr %2
}

define ptr @ProductIterable_B_init_firstIntIterable_secondIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2, { ptr, ptr, ptr, i32 } %3) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = getelementptr [2 x ptr], ptr %1, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr ptr, ptr %7, i32 1
  %9 = getelementptr ptr, ptr %7, i32 2
  %10 = getelementptr ptr, ptr %7, i32 3
  %11 = getelementptr ptr, ptr %7, i32 4
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %15)
  %17 = getelementptr [2 x ptr], ptr %1, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr ptr, ptr %18, i32 1
  %20 = getelementptr ptr, ptr %18, i32 2
  %21 = getelementptr ptr, ptr %18, i32 3
  %22 = getelementptr ptr, ptr %18, i32 4
  %23 = load i64, ptr %19, align 4
  %24 = load i64, ptr %20, align 4
  %25 = load ptr, ptr %21, align 8
  %26 = load ptr, ptr %22, align 8
  %27 = call i1 @subtype_test_wrapper(ptr %25, i64 %24, i64 %23, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %26)
  %28 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %29 = getelementptr [12 x ptr], ptr %28, i32 0, i32 4
  %30 = getelementptr ptr, ptr %29, i32 7
  %31 = load ptr, ptr %30, align 8
  ret ptr %31
}

define ptr @ProductIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [12 x ptr], ptr %4, i32 0, i32 5
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @ProductIterable_init_firstIntIterable_secondIntIterable({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @ProductIterable)
  %21 = call ptr @llvm.invariant.start.p0(i64 24, ptr %8)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %22, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 16, ptr %22)
  %24 = alloca { ptr, ptr, ptr, i32 }, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %36 = load i32, ptr %34, align 4
  store i32 %36, ptr %35, align 4
  call void @set_offset(ptr %24, ptr @IntIterable)
  %37 = call ptr @llvm.invariant.start.p0(i64 24, ptr %24)
  %38 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %39 = extractvalue { ptr, ptr, ptr, i32 } %38, 0
  %40 = call ptr @llvm.invariant.start.p0(i64 96, ptr %39)
  %41 = extractvalue { ptr, ptr, ptr, i32 } %38, 3
  %42 = getelementptr ptr, ptr %39, i32 %41
  %43 = load ptr, ptr %42, align 8
  %44 = extractvalue { ptr, ptr, ptr, i32 } %38, 1
  %45 = call ptr %43(ptr %44)
  %46 = alloca { ptr, ptr, ptr, i32 }, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %49 = load ptr, ptr %47, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %52 = load ptr, ptr %50, align 8
  store ptr %52, ptr %51, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %55 = load ptr, ptr %53, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %58 = load i32, ptr %56, align 4
  store i32 %58, ptr %57, align 4
  call void @set_offset(ptr %46, ptr @IntIterable)
  %59 = call ptr @llvm.invariant.start.p0(i64 24, ptr %46)
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %62 = load ptr, ptr %60, align 8
  store ptr %62, ptr %61, align 8
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %65 = load ptr, ptr %63, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %68 = load ptr, ptr %66, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %71 = load i32, ptr %69, align 4
  store i32 %71, ptr %70, align 4
  %72 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %72, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 16, ptr %72)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 0
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 1
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 2
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %83 = load ptr, ptr %81, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 3
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %86 = load i32, ptr %84, align 4
  store i32 %86, ptr %85, align 4
  call void @set_offset(ptr %74, ptr @IntIterable)
  %87 = call ptr @llvm.invariant.start.p0(i64 24, ptr %74)
  %88 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %89 = extractvalue { ptr, ptr, ptr, i32 } %88, 0
  %90 = call ptr @llvm.invariant.start.p0(i64 96, ptr %89)
  %91 = extractvalue { ptr, ptr, ptr, i32 } %88, 3
  %92 = getelementptr ptr, ptr %89, i32 %91
  %93 = getelementptr ptr, ptr %92, i32 1
  %94 = load ptr, ptr %93, align 8
  %95 = extractvalue { ptr, ptr, ptr, i32 } %88, 1
  %96 = call ptr %94(ptr %95)
  %97 = alloca { ptr, ptr, ptr, i32 }, align 8
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 0
  %100 = load ptr, ptr %98, align 8
  store ptr %100, ptr %99, align 8
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %103 = load ptr, ptr %101, align 8
  store ptr %103, ptr %102, align 8
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 2
  %106 = load ptr, ptr %104, align 8
  store ptr %106, ptr %105, align 8
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  %109 = load i32, ptr %107, align 4
  store i32 %109, ptr %108, align 4
  call void @set_offset(ptr %97, ptr @IntIterable)
  %110 = call ptr @llvm.invariant.start.p0(i64 24, ptr %97)
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 0
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 0
  %113 = load ptr, ptr %111, align 8
  store ptr %113, ptr %112, align 8
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 1
  %116 = load ptr, ptr %114, align 8
  store ptr %116, ptr %115, align 8
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 2
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 2
  %119 = load ptr, ptr %117, align 8
  store ptr %119, ptr %118, align 8
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 3
  %122 = load i32, ptr %120, align 4
  store i32 %122, ptr %121, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @ProductIterable)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 96, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %27 = call ptr %25(ptr %26)
  %28 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %29 = extractvalue { ptr, ptr, ptr, i32 } %28, 0
  %30 = call ptr @llvm.invariant.start.p0(i64 96, ptr %29)
  %31 = extractvalue { ptr, ptr, ptr, i32 } %28, 3
  %32 = getelementptr ptr, ptr %29, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 1
  %34 = load ptr, ptr %33, align 8
  %35 = extractvalue { ptr, ptr, ptr, i32 } %28, 1
  %36 = call ptr %34(ptr %35)
  %37 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, i32 } }, ptr null, i32 1) to i64))
  %38 = alloca { ptr, ptr, ptr, i32 }, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  store ptr @ProductIterator, ptr %38, align 8
  store ptr %37, ptr %39, align 8
  store i32 7, ptr %40, align 4
  %41 = call ptr @llvm.invariant.start.p0(i64 16, ptr %38)
  %42 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %43 = extractvalue { ptr, ptr, ptr, i32 } %42, 0
  %44 = call ptr @llvm.invariant.start.p0(i64 96, ptr %43)
  %45 = extractvalue { ptr, ptr, ptr, i32 } %42, 3
  %46 = getelementptr ptr, ptr %43, i32 %45
  %47 = load ptr, ptr %46, align 8
  %48 = extractvalue { ptr, ptr, ptr, i32 } %42, 1
  %49 = call ptr %47(ptr %48)
  %50 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %51 = extractvalue { ptr, ptr, ptr, i32 } %50, 0
  %52 = call ptr @llvm.invariant.start.p0(i64 96, ptr %51)
  %53 = extractvalue { ptr, ptr, ptr, i32 } %50, 3
  %54 = getelementptr ptr, ptr %51, i32 %53
  %55 = getelementptr ptr, ptr %54, i32 1
  %56 = load ptr, ptr %55, align 8
  %57 = extractvalue { ptr, ptr, ptr, i32 } %50, 1
  %58 = call ptr %56(ptr %57)
  %59 = alloca { ptr, ptr, ptr, i32 }, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 0
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 0
  %62 = load ptr, ptr %60, align 8
  store ptr %62, ptr %61, align 8
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 1
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 1
  %65 = load ptr, ptr %63, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 2
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 2
  %68 = load ptr, ptr %66, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 3
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 3
  %71 = load i32, ptr %69, align 4
  store i32 %71, ptr %70, align 4
  call void @set_offset(ptr %59, ptr @IntIterable)
  %72 = call ptr @llvm.invariant.start.p0(i64 24, ptr %59)
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 0
  %74 = load ptr, ptr %73, align 8
  %75 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %74, 0
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 1
  %77 = load ptr, ptr %76, align 8
  %78 = insertvalue { ptr, ptr, ptr, i32 } %75, ptr %77, 1
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 2
  %80 = load ptr, ptr %79, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } %78, ptr %80, 2
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 3
  %83 = load i32, ptr %82, align 4
  %84 = insertvalue { ptr, ptr, ptr, i32 } %81, i32 %83, 3
  %85 = alloca { ptr, ptr, ptr, i32 }, align 8
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 0
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %85, i32 0, i32 0
  %88 = load ptr, ptr %86, align 8
  store ptr %88, ptr %87, align 8
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 1
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %85, i32 0, i32 1
  %91 = load ptr, ptr %89, align 8
  store ptr %91, ptr %90, align 8
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 2
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %85, i32 0, i32 2
  %94 = load ptr, ptr %92, align 8
  store ptr %94, ptr %93, align 8
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 3
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %85, i32 0, i32 3
  %97 = load i32, ptr %95, align 4
  store i32 %97, ptr %96, align 4
  call void @set_offset(ptr %85, ptr @IntIterable)
  %98 = call ptr @llvm.invariant.start.p0(i64 24, ptr %85)
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %85, i32 0, i32 0
  %100 = load ptr, ptr %99, align 8
  %101 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %100, 0
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %85, i32 0, i32 1
  %103 = load ptr, ptr %102, align 8
  %104 = insertvalue { ptr, ptr, ptr, i32 } %101, ptr %103, 1
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %85, i32 0, i32 2
  %106 = load ptr, ptr %105, align 8
  %107 = insertvalue { ptr, ptr, ptr, i32 } %104, ptr %106, 2
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %85, i32 0, i32 3
  %109 = load i32, ptr %108, align 4
  %110 = insertvalue { ptr, ptr, ptr, i32 } %107, i32 %109, 3
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 0
  %112 = load ptr, ptr %111, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %112, 0
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %115 = load ptr, ptr %114, align 8
  %116 = insertvalue { ptr, ptr, ptr, i32 } %113, ptr %115, 1
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 2
  %118 = load ptr, ptr %117, align 8
  %119 = insertvalue { ptr, ptr, ptr, i32 } %116, ptr %118, 2
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %121 = load i32, ptr %120, align 4
  %122 = insertvalue { ptr, ptr, ptr, i32 } %119, i32 %121, 3
  %123 = alloca [2 x ptr], align 8
  %124 = call ptr @llvm.invariant.start.p0(i64 16, ptr %123)
  %125 = getelementptr [2 x ptr], ptr %123, i32 0, i32 1
  store ptr @_parameterization_IntIterable, ptr %125, align 8
  %126 = getelementptr [2 x ptr], ptr %123, i32 0, i32 0
  store ptr @_parameterization_IntIterable, ptr %126, align 8
  %127 = call ptr @llvm.invariant.start.p0(i64 64, ptr %112)
  %128 = getelementptr ptr, ptr %112, i32 %121
  %129 = getelementptr ptr, ptr %128, i32 4
  %130 = load ptr, ptr %129, align 8
  %131 = alloca [2 x ptr], align 8
  %132 = getelementptr [2 x ptr], ptr %131, i32 0, i32 0
  store ptr %74, ptr %132, align 8
  %133 = getelementptr [2 x ptr], ptr %131, i32 0, i32 1
  store ptr %100, ptr %133, align 8
  %134 = call ptr %130({ ptr, ptr, ptr, i32 } %122, ptr %131, { ptr, ptr, ptr, i32 } %84, { ptr, ptr, ptr, i32 } %110)
  call void %134({ ptr, ptr, ptr, i32 } %122, { ptr, ptr, ptr, i32 } %122, ptr %123, { ptr, ptr, ptr, i32 } %84, { ptr, ptr, ptr, i32 } %110)
  %135 = alloca { ptr, ptr, ptr, i32 }, align 8
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 0
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %135, i32 0, i32 0
  %138 = load ptr, ptr %136, align 8
  store ptr %138, ptr %137, align 8
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %135, i32 0, i32 1
  %141 = load ptr, ptr %139, align 8
  store ptr %141, ptr %140, align 8
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 2
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %135, i32 0, i32 2
  %144 = load ptr, ptr %142, align 8
  store ptr %144, ptr %143, align 8
  %145 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %146 = getelementptr { ptr, ptr, ptr, i32 }, ptr %135, i32 0, i32 3
  %147 = load i32, ptr %145, align 4
  store i32 %147, ptr %146, align 4
  call void @set_offset(ptr %135, ptr @Iterator)
  %148 = call ptr @llvm.invariant.start.p0(i64 24, ptr %135)
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %135, i32 0, i32 0
  %150 = load ptr, ptr %149, align 8
  %151 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %150, 0
  %152 = getelementptr { ptr, ptr, ptr, i32 }, ptr %135, i32 0, i32 1
  %153 = load ptr, ptr %152, align 8
  %154 = insertvalue { ptr, ptr, ptr, i32 } %151, ptr %153, 1
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %135, i32 0, i32 2
  %156 = load ptr, ptr %155, align 8
  %157 = insertvalue { ptr, ptr, ptr, i32 } %154, ptr %156, 2
  %158 = getelementptr { ptr, ptr, ptr, i32 }, ptr %135, i32 0, i32 3
  %159 = load i32, ptr %158, align 4
  %160 = insertvalue { ptr, ptr, ptr, i32 } %157, i32 %159, 3
  ret { ptr, ptr, ptr, i32 } %160
}

define ptr @ProductIterator_field_first_iterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, i32 } }, ptr %0, i32 0, i32 0
  ret ptr %2
}

define ptr @ProductIterator_field_second_iterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, i32 } }, ptr %0, i32 0, i32 1
  ret ptr %2
}

define ptr @ProductIterator_field_second_iterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, i32 } }, ptr %0, i32 0, i32 2
  ret ptr %2
}

define ptr @ProductIterator_field_current_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, i32 } }, ptr %0, i32 0, i32 3
  ret ptr %2
}

define ptr @ProductIterator_B_init_first_iterableIntIterable_second_iterableIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2, { ptr, ptr, ptr, i32 } %3) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = getelementptr [2 x ptr], ptr %1, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr ptr, ptr %7, i32 1
  %9 = getelementptr ptr, ptr %7, i32 2
  %10 = getelementptr ptr, ptr %7, i32 3
  %11 = getelementptr ptr, ptr %7, i32 4
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %15)
  %17 = getelementptr [2 x ptr], ptr %1, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr ptr, ptr %18, i32 1
  %20 = getelementptr ptr, ptr %18, i32 2
  %21 = getelementptr ptr, ptr %18, i32 3
  %22 = getelementptr ptr, ptr %18, i32 4
  %23 = load i64, ptr %19, align 4
  %24 = load i64, ptr %20, align 4
  %25 = load ptr, ptr %21, align 8
  %26 = load ptr, ptr %22, align 8
  %27 = call i1 @subtype_test_wrapper(ptr %25, i64 %24, i64 %23, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %26)
  %28 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %29 = getelementptr [8 x ptr], ptr %28, i32 0, i32 6
  %30 = getelementptr ptr, ptr %29, i32 7
  %31 = load ptr, ptr %30, align 8
  ret ptr %31
}

define ptr @ProductIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [8 x ptr], ptr %4, i32 0, i32 7
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @ProductIterator_init_first_iterableIntIterable_second_iterableIntIterable({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @ProductIterator)
  %21 = call ptr @llvm.invariant.start.p0(i64 24, ptr %8)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %22, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 16, ptr %22)
  %24 = alloca { ptr, ptr, ptr, i32 }, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %36 = load i32, ptr %34, align 4
  store i32 %36, ptr %35, align 4
  call void @set_offset(ptr %24, ptr @IntIterable)
  %37 = call ptr @llvm.invariant.start.p0(i64 24, ptr %24)
  %38 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %38, align 8
  %39 = call ptr @llvm.invariant.start.p0(i64 16, ptr %38)
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 0
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 0
  %43 = load ptr, ptr %41, align 8
  store ptr %43, ptr %42, align 8
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 1
  %46 = load ptr, ptr %44, align 8
  store ptr %46, ptr %45, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 2
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 2
  %49 = load ptr, ptr %47, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 3
  %52 = load i32, ptr %50, align 4
  store i32 %52, ptr %51, align 4
  call void @set_offset(ptr %40, ptr @IntIterable)
  %53 = call ptr @llvm.invariant.start.p0(i64 24, ptr %40)
  %54 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %55 = extractvalue { ptr, ptr, ptr, i32 } %54, 0
  %56 = call ptr @llvm.invariant.start.p0(i64 64, ptr %55)
  %57 = extractvalue { ptr, ptr, ptr, i32 } %54, 3
  %58 = getelementptr ptr, ptr %55, i32 %57
  %59 = getelementptr ptr, ptr %58, i32 2
  %60 = load ptr, ptr %59, align 8
  %61 = extractvalue { ptr, ptr, ptr, i32 } %54, 1
  %62 = call ptr %60(ptr %61)
  %63 = alloca { ptr, ptr, ptr, i32 }, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 0
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 0
  %66 = load ptr, ptr %64, align 8
  store ptr %66, ptr %65, align 8
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 1
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 1
  %69 = load ptr, ptr %67, align 8
  store ptr %69, ptr %68, align 8
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 2
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 2
  %72 = load ptr, ptr %70, align 8
  store ptr %72, ptr %71, align 8
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 3
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 3
  %75 = load i32, ptr %73, align 4
  store i32 %75, ptr %74, align 4
  call void @set_offset(ptr %63, ptr @IntIterable)
  %76 = call ptr @llvm.invariant.start.p0(i64 24, ptr %63)
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 0
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 0
  %79 = load ptr, ptr %77, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 1
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 1
  %82 = load ptr, ptr %80, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 2
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 2
  %85 = load ptr, ptr %83, align 8
  store ptr %85, ptr %84, align 8
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 3
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 3
  %88 = load i32, ptr %86, align 4
  store i32 %88, ptr %87, align 4
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %90 = load ptr, ptr %89, align 8
  %91 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %90, 0
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %93 = load ptr, ptr %92, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } %91, ptr %93, 1
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %96 = load ptr, ptr %95, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr %96, 2
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %99 = load i32, ptr %98, align 4
  %100 = insertvalue { ptr, ptr, ptr, i32 } %97, i32 %99, 3
  %101 = alloca [0 x ptr], align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 0, ptr %101)
  %103 = call ptr @llvm.invariant.start.p0(i64 192, ptr %90)
  %104 = getelementptr ptr, ptr %90, i32 %99
  %105 = getelementptr ptr, ptr %104, i32 10
  %106 = load ptr, ptr %105, align 8
  %107 = alloca [0 x ptr], align 8
  %108 = call ptr %106({ ptr, ptr, ptr, i32 } %100, ptr %107)
  %109 = call { ptr, ptr, ptr, i32 } %108({ ptr, ptr, ptr, i32 } %100, { ptr, ptr, ptr, i32 } %100, ptr %101)
  %110 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %109, ptr %110, align 8
  %111 = call ptr @llvm.invariant.start.p0(i64 16, ptr %110)
  %112 = alloca { ptr, ptr, ptr, i32 }, align 8
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %110, i32 0, i32 0
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 0
  %115 = load ptr, ptr %113, align 8
  store ptr %115, ptr %114, align 8
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %110, i32 0, i32 1
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 1
  %118 = load ptr, ptr %116, align 8
  store ptr %118, ptr %117, align 8
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %110, i32 0, i32 2
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 2
  %121 = load ptr, ptr %119, align 8
  store ptr %121, ptr %120, align 8
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %110, i32 0, i32 3
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 3
  %124 = load i32, ptr %122, align 4
  store i32 %124, ptr %123, align 4
  call void @set_offset(ptr %112, ptr @IntIterator)
  %125 = call ptr @llvm.invariant.start.p0(i64 24, ptr %112)
  %126 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %127 = extractvalue { ptr, ptr, ptr, i32 } %126, 0
  %128 = call ptr @llvm.invariant.start.p0(i64 64, ptr %127)
  %129 = extractvalue { ptr, ptr, ptr, i32 } %126, 3
  %130 = getelementptr ptr, ptr %127, i32 %129
  %131 = load ptr, ptr %130, align 8
  %132 = extractvalue { ptr, ptr, ptr, i32 } %126, 1
  %133 = call ptr %131(ptr %132)
  %134 = alloca { ptr, ptr, ptr, i32 }, align 8
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 0
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 0
  %137 = load ptr, ptr %135, align 8
  store ptr %137, ptr %136, align 8
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 1
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 1
  %140 = load ptr, ptr %138, align 8
  store ptr %140, ptr %139, align 8
  %141 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 2
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 2
  %143 = load ptr, ptr %141, align 8
  store ptr %143, ptr %142, align 8
  %144 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 3
  %145 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 3
  %146 = load i32, ptr %144, align 4
  store i32 %146, ptr %145, align 4
  call void @set_offset(ptr %134, ptr @IntIterator)
  %147 = call ptr @llvm.invariant.start.p0(i64 24, ptr %134)
  %148 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 0
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 0
  %150 = load ptr, ptr %148, align 8
  store ptr %150, ptr %149, align 8
  %151 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 1
  %152 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 1
  %153 = load ptr, ptr %151, align 8
  store ptr %153, ptr %152, align 8
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 2
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 2
  %156 = load ptr, ptr %154, align 8
  store ptr %156, ptr %155, align 8
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 3
  %158 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 3
  %159 = load i32, ptr %157, align 4
  store i32 %159, ptr %158, align 4
  %160 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %161 = extractvalue { ptr, ptr, ptr, i32 } %160, 0
  %162 = call ptr @llvm.invariant.start.p0(i64 64, ptr %161)
  %163 = extractvalue { ptr, ptr, ptr, i32 } %160, 3
  %164 = getelementptr ptr, ptr %161, i32 %163
  %165 = getelementptr ptr, ptr %164, i32 2
  %166 = load ptr, ptr %165, align 8
  %167 = extractvalue { ptr, ptr, ptr, i32 } %160, 1
  %168 = call ptr %166(ptr %167)
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %168, i32 0, i32 0
  %170 = load ptr, ptr %169, align 8
  %171 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %170, 0
  %172 = getelementptr { ptr, ptr, ptr, i32 }, ptr %168, i32 0, i32 1
  %173 = load ptr, ptr %172, align 8
  %174 = insertvalue { ptr, ptr, ptr, i32 } %171, ptr %173, 1
  %175 = getelementptr { ptr, ptr, ptr, i32 }, ptr %168, i32 0, i32 2
  %176 = load ptr, ptr %175, align 8
  %177 = insertvalue { ptr, ptr, ptr, i32 } %174, ptr %176, 2
  %178 = getelementptr { ptr, ptr, ptr, i32 }, ptr %168, i32 0, i32 3
  %179 = load i32, ptr %178, align 4
  %180 = insertvalue { ptr, ptr, ptr, i32 } %177, i32 %179, 3
  %181 = alloca [0 x ptr], align 8
  %182 = call ptr @llvm.invariant.start.p0(i64 0, ptr %181)
  %183 = call ptr @llvm.invariant.start.p0(i64 192, ptr %170)
  %184 = getelementptr ptr, ptr %170, i32 %179
  %185 = getelementptr ptr, ptr %184, i32 10
  %186 = load ptr, ptr %185, align 8
  %187 = alloca [0 x ptr], align 8
  %188 = call ptr %186({ ptr, ptr, ptr, i32 } %180, ptr %187)
  %189 = call { ptr, ptr, ptr, i32 } %188({ ptr, ptr, ptr, i32 } %180, { ptr, ptr, ptr, i32 } %180, ptr %181)
  %190 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %189, ptr %190, align 8
  %191 = call ptr @llvm.invariant.start.p0(i64 16, ptr %190)
  %192 = alloca { ptr, ptr, ptr, i32 }, align 8
  %193 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 0
  %194 = getelementptr { ptr, ptr, ptr, i32 }, ptr %192, i32 0, i32 0
  %195 = load ptr, ptr %193, align 8
  store ptr %195, ptr %194, align 8
  %196 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 1
  %197 = getelementptr { ptr, ptr, ptr, i32 }, ptr %192, i32 0, i32 1
  %198 = load ptr, ptr %196, align 8
  store ptr %198, ptr %197, align 8
  %199 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 2
  %200 = getelementptr { ptr, ptr, ptr, i32 }, ptr %192, i32 0, i32 2
  %201 = load ptr, ptr %199, align 8
  store ptr %201, ptr %200, align 8
  %202 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 3
  %203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %192, i32 0, i32 3
  %204 = load i32, ptr %202, align 4
  store i32 %204, ptr %203, align 4
  call void @set_offset(ptr %192, ptr @IntIterator)
  %205 = call ptr @llvm.invariant.start.p0(i64 24, ptr %192)
  %206 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %207 = extractvalue { ptr, ptr, ptr, i32 } %206, 0
  %208 = call ptr @llvm.invariant.start.p0(i64 64, ptr %207)
  %209 = extractvalue { ptr, ptr, ptr, i32 } %206, 3
  %210 = getelementptr ptr, ptr %207, i32 %209
  %211 = getelementptr ptr, ptr %210, i32 1
  %212 = load ptr, ptr %211, align 8
  %213 = extractvalue { ptr, ptr, ptr, i32 } %206, 1
  %214 = call ptr %212(ptr %213)
  %215 = alloca { ptr, ptr, ptr, i32 }, align 8
  %216 = getelementptr { ptr, ptr, ptr, i32 }, ptr %192, i32 0, i32 0
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %215, i32 0, i32 0
  %218 = load ptr, ptr %216, align 8
  store ptr %218, ptr %217, align 8
  %219 = getelementptr { ptr, ptr, ptr, i32 }, ptr %192, i32 0, i32 1
  %220 = getelementptr { ptr, ptr, ptr, i32 }, ptr %215, i32 0, i32 1
  %221 = load ptr, ptr %219, align 8
  store ptr %221, ptr %220, align 8
  %222 = getelementptr { ptr, ptr, ptr, i32 }, ptr %192, i32 0, i32 2
  %223 = getelementptr { ptr, ptr, ptr, i32 }, ptr %215, i32 0, i32 2
  %224 = load ptr, ptr %222, align 8
  store ptr %224, ptr %223, align 8
  %225 = getelementptr { ptr, ptr, ptr, i32 }, ptr %192, i32 0, i32 3
  %226 = getelementptr { ptr, ptr, ptr, i32 }, ptr %215, i32 0, i32 3
  %227 = load i32, ptr %225, align 4
  store i32 %227, ptr %226, align 4
  call void @set_offset(ptr %215, ptr @IntIterator)
  %228 = call ptr @llvm.invariant.start.p0(i64 24, ptr %215)
  %229 = getelementptr { ptr, ptr, ptr, i32 }, ptr %215, i32 0, i32 0
  %230 = getelementptr { ptr, ptr, ptr, i32 }, ptr %214, i32 0, i32 0
  %231 = load ptr, ptr %229, align 8
  store ptr %231, ptr %230, align 8
  %232 = getelementptr { ptr, ptr, ptr, i32 }, ptr %215, i32 0, i32 1
  %233 = getelementptr { ptr, ptr, ptr, i32 }, ptr %214, i32 0, i32 1
  %234 = load ptr, ptr %232, align 8
  store ptr %234, ptr %233, align 8
  %235 = getelementptr { ptr, ptr, ptr, i32 }, ptr %215, i32 0, i32 2
  %236 = getelementptr { ptr, ptr, ptr, i32 }, ptr %214, i32 0, i32 2
  %237 = load ptr, ptr %235, align 8
  store ptr %237, ptr %236, align 8
  %238 = getelementptr { ptr, ptr, ptr, i32 }, ptr %215, i32 0, i32 3
  %239 = getelementptr { ptr, ptr, ptr, i32 }, ptr %214, i32 0, i32 3
  %240 = load i32, ptr %238, align 4
  store i32 %240, ptr %239, align 4
  %241 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %242 = extractvalue { ptr, ptr, ptr, i32 } %241, 0
  %243 = call ptr @llvm.invariant.start.p0(i64 64, ptr %242)
  %244 = extractvalue { ptr, ptr, ptr, i32 } %241, 3
  %245 = getelementptr ptr, ptr %242, i32 %244
  %246 = load ptr, ptr %245, align 8
  %247 = extractvalue { ptr, ptr, ptr, i32 } %241, 1
  %248 = call ptr %246(ptr %247)
  %249 = getelementptr { ptr, ptr, ptr, i32 }, ptr %248, i32 0, i32 0
  %250 = load ptr, ptr %249, align 8
  %251 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %250, 0
  %252 = getelementptr { ptr, ptr, ptr, i32 }, ptr %248, i32 0, i32 1
  %253 = load ptr, ptr %252, align 8
  %254 = insertvalue { ptr, ptr, ptr, i32 } %251, ptr %253, 1
  %255 = getelementptr { ptr, ptr, ptr, i32 }, ptr %248, i32 0, i32 2
  %256 = load ptr, ptr %255, align 8
  %257 = insertvalue { ptr, ptr, ptr, i32 } %254, ptr %256, 2
  %258 = getelementptr { ptr, ptr, ptr, i32 }, ptr %248, i32 0, i32 3
  %259 = load i32, ptr %258, align 4
  %260 = insertvalue { ptr, ptr, ptr, i32 } %257, i32 %259, 3
  %261 = alloca [0 x ptr], align 8
  %262 = call ptr @llvm.invariant.start.p0(i64 0, ptr %261)
  %263 = call ptr @llvm.invariant.start.p0(i64 16, ptr %250)
  %264 = getelementptr ptr, ptr %250, i32 %259
  %265 = load ptr, ptr %264, align 8
  %266 = alloca [0 x ptr], align 8
  %267 = call ptr %265({ ptr, ptr, ptr, i32 } %260, ptr %266)
  %268 = call { ptr, i32 } %267({ ptr, ptr, ptr, i32 } %260, { ptr, ptr, ptr, i32 } %260, ptr %261)
  %269 = alloca { ptr, i32 }, align 8
  store { ptr, i32 } %268, ptr %269, align 8
  %270 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %271 = extractvalue { ptr, ptr, ptr, i32 } %270, 0
  %272 = call ptr @llvm.invariant.start.p0(i64 64, ptr %271)
  %273 = extractvalue { ptr, ptr, ptr, i32 } %270, 3
  %274 = getelementptr ptr, ptr %271, i32 %273
  %275 = getelementptr ptr, ptr %274, i32 3
  %276 = load ptr, ptr %275, align 8
  %277 = extractvalue { ptr, ptr, ptr, i32 } %270, 1
  %278 = call ptr %276(ptr %277)
  %279 = getelementptr { ptr, i32 }, ptr %269, i32 0, i32 0
  %280 = getelementptr { ptr, i32 }, ptr %278, i32 0, i32 0
  %281 = load ptr, ptr %279, align 8
  store ptr %281, ptr %280, align 8
  %282 = getelementptr { ptr, i32 }, ptr %269, i32 0, i32 1
  %283 = getelementptr { ptr, i32 }, ptr %278, i32 0, i32 1
  %284 = load i32, ptr %282, align 4
  store i32 %284, ptr %283, align 4
  ret void
}

define { ptr, i64 } @ProductIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i64 }, align 8
  %.reg2mem1 = alloca { ptr, i64 }, align 8
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem6 = alloca ptr, align 8
  %.reg2mem9 = alloca i32, align 4
  %.reg2mem11 = alloca i32, align 4
  %.reg2mem14 = alloca i32, align 4
  %.reg2mem16 = alloca i32, align 4
  %.reg2mem18 = alloca ptr, align 8
  %.reg2mem20 = alloca ptr, align 8
  %.reg2mem25 = alloca { ptr, i64 }, align 8
  %.reg2mem27 = alloca ptr, align 8
  %.reg2mem29 = alloca ptr, align 8
  %.reg2mem31 = alloca i32, align 4
  %.reg2mem33 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @ProductIterator)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 64, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 3
  %26 = load ptr, ptr %25, align 8
  %27 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %28 = call ptr %26(ptr %27)
  store ptr %28, ptr %.reg2mem20, align 8
  %.reload24 = load ptr, ptr %.reg2mem20, align 8
  %29 = getelementptr { ptr, i32 }, ptr %.reload24, i32 0, i32 0
  store ptr %29, ptr %.reg2mem18, align 8
  %30 = alloca i64, align 8
  %31 = alloca i1, align 1
  %32 = alloca i32, align 4
  %33 = alloca [0 x ptr], align 8
  %34 = alloca [0 x ptr], align 8
  %35 = alloca { ptr, i32 }, align 8
  %36 = alloca i64, align 8
  %37 = alloca i1, align 1
  %38 = alloca [0 x ptr], align 8
  %39 = alloca [0 x ptr], align 8
  %40 = alloca { ptr, i32 }, align 8
  %41 = alloca [0 x ptr], align 8
  %42 = alloca [0 x ptr], align 8
  %43 = alloca { ptr, ptr, ptr, i32 }, align 8
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = alloca { ptr, ptr, ptr, i32 }, align 8
  %46 = alloca i32, align 4
  %47 = alloca i32, align 4
  %48 = alloca i32, align 4
  %49 = alloca i64, align 8
  %50 = alloca ptr, align 8
  %51 = alloca i64, align 8
  %52 = alloca i64, align 8
  %53 = alloca ptr, align 8
  %54 = alloca i64, align 8
  br label %55

55:                                               ; preds = %241, %3
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %30, align 4
  %.reload19 = load ptr, ptr %.reg2mem18, align 8
  %56 = load ptr, ptr %.reload19, align 8
  %57 = ptrtoint ptr %56 to i64
  %58 = load ptr, ptr %30, align 8
  %59 = ptrtoint ptr %58 to i64
  %60 = icmp ne i64 %57, %59
  store i1 %60, ptr %31, align 1
  %61 = load i1, ptr %31, align 1
  br i1 %61, label %62, label %237

62:                                               ; preds = %55
  %.reload23 = load ptr, ptr %.reg2mem20, align 8
  %63 = getelementptr { ptr, i32 }, ptr %.reload23, i32 0, i32 1
  %64 = load i32, ptr %63, align 4
  store i32 %64, ptr %32, align 4
  %65 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %66 = extractvalue { ptr, ptr, ptr, i32 } %65, 0
  %67 = call ptr @llvm.invariant.start.p0(i64 64, ptr %66)
  %68 = extractvalue { ptr, ptr, ptr, i32 } %65, 3
  %69 = getelementptr ptr, ptr %66, i32 %68
  %70 = getelementptr ptr, ptr %69, i32 1
  %71 = load ptr, ptr %70, align 8
  %72 = extractvalue { ptr, ptr, ptr, i32 } %65, 1
  %73 = call ptr %71(ptr %72)
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %75 = load ptr, ptr %74, align 8
  %76 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %75, 0
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %78 = load ptr, ptr %77, align 8
  %79 = insertvalue { ptr, ptr, ptr, i32 } %76, ptr %78, 1
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %81 = load ptr, ptr %80, align 8
  %82 = insertvalue { ptr, ptr, ptr, i32 } %79, ptr %81, 2
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %84 = load i32, ptr %83, align 4
  %85 = insertvalue { ptr, ptr, ptr, i32 } %82, i32 %84, 3
  %86 = call ptr @llvm.invariant.start.p0(i64 0, ptr %33)
  %87 = call ptr @llvm.invariant.start.p0(i64 16, ptr %75)
  %88 = getelementptr ptr, ptr %75, i32 %84
  %89 = load ptr, ptr %88, align 8
  %90 = call ptr %89({ ptr, ptr, ptr, i32 } %85, ptr %34)
  %91 = call { ptr, i32 } %90({ ptr, ptr, ptr, i32 } %85, { ptr, ptr, ptr, i32 } %85, ptr %33)
  store { ptr, i32 } %91, ptr %35, align 8
  %92 = getelementptr { ptr, i32 }, ptr %35, i32 0, i32 0
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %36, align 4
  %93 = load ptr, ptr %92, align 8
  %94 = ptrtoint ptr %93 to i64
  %95 = load ptr, ptr %36, align 8
  %96 = ptrtoint ptr %95 to i64
  %97 = icmp ne i64 %94, %96
  store i1 %97, ptr %37, align 1
  %98 = load i1, ptr %37, align 1
  %99 = zext i1 %98 to i32
  store i32 %99, ptr %.reg2mem16, align 4
  %100 = xor i1 %98, true
  %101 = zext i1 %100 to i32
  store i32 %101, ptr %.reg2mem14, align 4
  br i1 %98, label %102, label %103

102:                                              ; preds = %62
  br label %236

103:                                              ; preds = %62
  %104 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %105 = extractvalue { ptr, ptr, ptr, i32 } %104, 0
  %106 = call ptr @llvm.invariant.start.p0(i64 64, ptr %105)
  %107 = extractvalue { ptr, ptr, ptr, i32 } %104, 3
  %108 = getelementptr ptr, ptr %105, i32 %107
  %109 = load ptr, ptr %108, align 8
  %110 = extractvalue { ptr, ptr, ptr, i32 } %104, 1
  %111 = call ptr %109(ptr %110)
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %111, i32 0, i32 0
  %113 = load ptr, ptr %112, align 8
  %114 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %113, 0
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %111, i32 0, i32 1
  %116 = load ptr, ptr %115, align 8
  %117 = insertvalue { ptr, ptr, ptr, i32 } %114, ptr %116, 1
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %111, i32 0, i32 2
  %119 = load ptr, ptr %118, align 8
  %120 = insertvalue { ptr, ptr, ptr, i32 } %117, ptr %119, 2
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %111, i32 0, i32 3
  %122 = load i32, ptr %121, align 4
  %123 = insertvalue { ptr, ptr, ptr, i32 } %120, i32 %122, 3
  %124 = call ptr @llvm.invariant.start.p0(i64 0, ptr %38)
  %125 = call ptr @llvm.invariant.start.p0(i64 16, ptr %113)
  %126 = getelementptr ptr, ptr %113, i32 %122
  %127 = load ptr, ptr %126, align 8
  %128 = call ptr %127({ ptr, ptr, ptr, i32 } %123, ptr %39)
  %129 = call { ptr, i32 } %128({ ptr, ptr, ptr, i32 } %123, { ptr, ptr, ptr, i32 } %123, ptr %38)
  store { ptr, i32 } %129, ptr %40, align 8
  %130 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %131 = extractvalue { ptr, ptr, ptr, i32 } %130, 0
  %132 = call ptr @llvm.invariant.start.p0(i64 64, ptr %131)
  %133 = extractvalue { ptr, ptr, ptr, i32 } %130, 3
  %134 = getelementptr ptr, ptr %131, i32 %133
  %135 = getelementptr ptr, ptr %134, i32 3
  %136 = load ptr, ptr %135, align 8
  %137 = extractvalue { ptr, ptr, ptr, i32 } %130, 1
  %138 = call ptr %136(ptr %137)
  %139 = getelementptr { ptr, i32 }, ptr %40, i32 0, i32 0
  %140 = getelementptr { ptr, i32 }, ptr %138, i32 0, i32 0
  %141 = load ptr, ptr %139, align 8
  store ptr %141, ptr %140, align 8
  %142 = getelementptr { ptr, i32 }, ptr %40, i32 0, i32 1
  %143 = getelementptr { ptr, i32 }, ptr %138, i32 0, i32 1
  %144 = load i32, ptr %142, align 4
  store i32 %144, ptr %143, align 4
  %145 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %146 = extractvalue { ptr, ptr, ptr, i32 } %145, 0
  %147 = call ptr @llvm.invariant.start.p0(i64 64, ptr %146)
  %148 = extractvalue { ptr, ptr, ptr, i32 } %145, 3
  %149 = getelementptr ptr, ptr %146, i32 %148
  %150 = getelementptr ptr, ptr %149, i32 2
  %151 = load ptr, ptr %150, align 8
  %152 = extractvalue { ptr, ptr, ptr, i32 } %145, 1
  %153 = call ptr %151(ptr %152)
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %153, i32 0, i32 0
  %155 = load ptr, ptr %154, align 8
  %156 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %155, 0
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %153, i32 0, i32 1
  %158 = load ptr, ptr %157, align 8
  %159 = insertvalue { ptr, ptr, ptr, i32 } %156, ptr %158, 1
  %160 = getelementptr { ptr, ptr, ptr, i32 }, ptr %153, i32 0, i32 2
  %161 = load ptr, ptr %160, align 8
  %162 = insertvalue { ptr, ptr, ptr, i32 } %159, ptr %161, 2
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %153, i32 0, i32 3
  %164 = load i32, ptr %163, align 4
  %165 = insertvalue { ptr, ptr, ptr, i32 } %162, i32 %164, 3
  %166 = call ptr @llvm.invariant.start.p0(i64 0, ptr %41)
  %167 = call ptr @llvm.invariant.start.p0(i64 192, ptr %155)
  %168 = getelementptr ptr, ptr %155, i32 %164
  %169 = getelementptr ptr, ptr %168, i32 10
  %170 = load ptr, ptr %169, align 8
  %171 = call ptr %170({ ptr, ptr, ptr, i32 } %165, ptr %42)
  %172 = call { ptr, ptr, ptr, i32 } %171({ ptr, ptr, ptr, i32 } %165, { ptr, ptr, ptr, i32 } %165, ptr %41)
  store { ptr, ptr, ptr, i32 } %172, ptr %43, align 8
  %173 = call ptr @llvm.invariant.start.p0(i64 16, ptr %43)
  %174 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 0
  %175 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 0
  %176 = load ptr, ptr %174, align 8
  store ptr %176, ptr %175, align 8
  %177 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 1
  %178 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 1
  %179 = load ptr, ptr %177, align 8
  store ptr %179, ptr %178, align 8
  %180 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 2
  %181 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 2
  %182 = load ptr, ptr %180, align 8
  store ptr %182, ptr %181, align 8
  %183 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 3
  %184 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 3
  %185 = load i32, ptr %183, align 4
  store i32 %185, ptr %184, align 4
  call void @set_offset(ptr %44, ptr @IntIterator)
  %186 = call ptr @llvm.invariant.start.p0(i64 24, ptr %44)
  %187 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %188 = extractvalue { ptr, ptr, ptr, i32 } %187, 0
  %189 = call ptr @llvm.invariant.start.p0(i64 64, ptr %188)
  %190 = extractvalue { ptr, ptr, ptr, i32 } %187, 3
  %191 = getelementptr ptr, ptr %188, i32 %190
  %192 = getelementptr ptr, ptr %191, i32 1
  %193 = load ptr, ptr %192, align 8
  %194 = extractvalue { ptr, ptr, ptr, i32 } %187, 1
  %195 = call ptr %193(ptr %194)
  %196 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 0
  %197 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %198 = load ptr, ptr %196, align 8
  store ptr %198, ptr %197, align 8
  %199 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 1
  %200 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %201 = load ptr, ptr %199, align 8
  store ptr %201, ptr %200, align 8
  %202 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 2
  %203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %204 = load ptr, ptr %202, align 8
  store ptr %204, ptr %203, align 8
  %205 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 3
  %206 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %207 = load i32, ptr %205, align 4
  store i32 %207, ptr %206, align 4
  call void @set_offset(ptr %45, ptr @IntIterator)
  %208 = call ptr @llvm.invariant.start.p0(i64 24, ptr %45)
  %209 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %210 = getelementptr { ptr, ptr, ptr, i32 }, ptr %195, i32 0, i32 0
  %211 = load ptr, ptr %209, align 8
  store ptr %211, ptr %210, align 8
  %212 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %213 = getelementptr { ptr, ptr, ptr, i32 }, ptr %195, i32 0, i32 1
  %214 = load ptr, ptr %212, align 8
  store ptr %214, ptr %213, align 8
  %215 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %216 = getelementptr { ptr, ptr, ptr, i32 }, ptr %195, i32 0, i32 2
  %217 = load ptr, ptr %215, align 8
  store ptr %217, ptr %216, align 8
  %218 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %219 = getelementptr { ptr, ptr, ptr, i32 }, ptr %195, i32 0, i32 3
  %220 = load i32, ptr %218, align 4
  store i32 %220, ptr %219, align 4
  %221 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %222 = extractvalue { ptr, ptr, ptr, i32 } %221, 0
  %223 = call ptr @llvm.invariant.start.p0(i64 64, ptr %222)
  %224 = extractvalue { ptr, ptr, ptr, i32 } %221, 3
  %225 = getelementptr ptr, ptr %222, i32 %224
  %226 = getelementptr ptr, ptr %225, i32 3
  %227 = load ptr, ptr %226, align 8
  %228 = extractvalue { ptr, ptr, ptr, i32 } %221, 1
  %229 = call ptr %227(ptr %228)
  %230 = getelementptr { ptr, i32 }, ptr %229, i32 0, i32 0
  %.reload22 = load ptr, ptr %.reg2mem20, align 8
  %231 = getelementptr { ptr, i32 }, ptr %.reload22, i32 0, i32 0
  %232 = load ptr, ptr %230, align 8
  store ptr %232, ptr %231, align 8
  %233 = getelementptr { ptr, i32 }, ptr %229, i32 0, i32 1
  %.reload21 = load ptr, ptr %.reg2mem20, align 8
  %234 = getelementptr { ptr, i32 }, ptr %.reload21, i32 0, i32 1
  %235 = load i32, ptr %233, align 4
  store i32 %235, ptr %234, align 4
  br label %236

236:                                              ; preds = %103, %102
  %.reload15 = load i32, ptr %.reg2mem14, align 4
  %.reload17 = load i32, ptr %.reg2mem16, align 4
  store ptr %35, ptr %.reg2mem27, align 8
  store ptr %32, ptr %.reg2mem29, align 8
  store i32 %.reload15, ptr %.reg2mem31, align 4
  store i32 %.reload17, ptr %.reg2mem33, align 4
  br label %238

237:                                              ; preds = %55
  store ptr poison, ptr %.reg2mem27, align 8
  store ptr poison, ptr %.reg2mem29, align 8
  store i32 0, ptr %.reg2mem31, align 4
  store i32 2, ptr %.reg2mem33, align 4
  br label %238

238:                                              ; preds = %237, %236
  %.reload34 = load i32, ptr %.reg2mem33, align 4
  %.reload32 = load i32, ptr %.reg2mem31, align 4
  %.reload30 = load ptr, ptr %.reg2mem29, align 8
  %.reload28 = load ptr, ptr %.reg2mem27, align 8
  store i32 %.reload34, ptr %.reg2mem11, align 4
  store i32 %.reload32, ptr %.reg2mem9, align 4
  store ptr %.reload30, ptr %.reg2mem6, align 8
  store ptr %.reload28, ptr %.reg2mem3, align 8
  br label %239

239:                                              ; preds = %238
  %.reload10 = load i32, ptr %.reg2mem9, align 4
  %240 = trunc i32 %.reload10 to i1
  %.reload5 = load ptr, ptr %.reg2mem3, align 8
  %.reload8 = load ptr, ptr %.reg2mem6, align 8
  %.reload13 = load i32, ptr %.reg2mem11, align 4
  br i1 %240, label %241, label %242

241:                                              ; preds = %239
  br label %55

242:                                              ; preds = %239
  %.reload12 = load i32, ptr %.reg2mem11, align 4
  %243 = zext i32 %.reload12 to i64
  %244 = trunc i64 %243 to i32
  switch i32 %244, label %259 [
    i32 1, label %245
  ]

245:                                              ; preds = %242
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %246 = getelementptr { ptr, i32 }, ptr %.reload4, i32 0, i32 1
  %247 = load i32, ptr %246, align 4
  store i32 %247, ptr %46, align 4
  %.reload7 = load ptr, ptr %.reg2mem6, align 8
  %248 = load i32, ptr %.reload7, align 4
  %249 = load i32, ptr %46, align 4
  store i32 %249, ptr %47, align 4
  store i32 %248, ptr %48, align 4
  %250 = getelementptr { i32, i32 }, ptr %49, i32 0, i32 0
  %251 = load i32, ptr %48, align 4
  store i32 %251, ptr %250, align 4
  %252 = getelementptr { i32, i32 }, ptr %49, i32 0, i32 1
  %253 = load i32, ptr %47, align 4
  store i32 %253, ptr %252, align 4
  store i64 ptrtoint (ptr @tuple_typ to i64), ptr %51, align 4
  %254 = load i64, ptr %51, align 4
  store i64 %254, ptr %50, align 4
  %255 = load ptr, ptr %50, align 8
  %256 = insertvalue { ptr, i64 } undef, ptr %255, 0
  %257 = load i64, ptr %49, align 4
  %258 = insertvalue { ptr, i64 } %256, i64 %257, 1
  store { ptr, i64 } %258, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i64 }, ptr %.reg2mem1, align 8
  store { ptr, i64 } %.reload2, ptr %.reg2mem25, align 8
  br label %265

259:                                              ; preds = %242
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %54, align 4
  %260 = load i64, ptr %54, align 4
  store i64 %260, ptr %53, align 4
  %261 = load ptr, ptr %53, align 8
  %262 = insertvalue { ptr, i64 } undef, ptr %261, 0
  %263 = load i64, ptr %52, align 4
  %264 = insertvalue { ptr, i64 } %262, i64 %263, 1
  store { ptr, i64 } %264, ptr %.reg2mem, align 8
  %.reload = load { ptr, i64 }, ptr %.reg2mem, align 8
  store { ptr, i64 } %.reload, ptr %.reg2mem25, align 8
  br label %265

265:                                              ; preds = %259, %245
  %.reload26 = load { ptr, i64 }, ptr %.reg2mem25, align 8
  ret { ptr, i64 } %.reload26
}

define ptr @ZipIterable_field_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 0
  ret ptr %2
}

define ptr @ZipIterable_field_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 1
  ret ptr %2
}

define ptr @ZipIterable_B_init_firstIntIterable_secondIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2, { ptr, ptr, ptr, i32 } %3) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = getelementptr [2 x ptr], ptr %1, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr ptr, ptr %7, i32 1
  %9 = getelementptr ptr, ptr %7, i32 2
  %10 = getelementptr ptr, ptr %7, i32 3
  %11 = getelementptr ptr, ptr %7, i32 4
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %15)
  %17 = getelementptr [2 x ptr], ptr %1, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr ptr, ptr %18, i32 1
  %20 = getelementptr ptr, ptr %18, i32 2
  %21 = getelementptr ptr, ptr %18, i32 3
  %22 = getelementptr ptr, ptr %18, i32 4
  %23 = load i64, ptr %19, align 4
  %24 = load i64, ptr %20, align 4
  %25 = load ptr, ptr %21, align 8
  %26 = load ptr, ptr %22, align 8
  %27 = call i1 @subtype_test_wrapper(ptr %25, i64 %24, i64 %23, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %26)
  %28 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %29 = getelementptr [12 x ptr], ptr %28, i32 0, i32 4
  %30 = getelementptr ptr, ptr %29, i32 7
  %31 = load ptr, ptr %30, align 8
  ret ptr %31
}

define ptr @ZipIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [12 x ptr], ptr %4, i32 0, i32 5
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @ZipIterable_init_firstIntIterable_secondIntIterable({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @ZipIterable)
  %21 = call ptr @llvm.invariant.start.p0(i64 24, ptr %8)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %22, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 16, ptr %22)
  %24 = alloca { ptr, ptr, ptr, i32 }, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %36 = load i32, ptr %34, align 4
  store i32 %36, ptr %35, align 4
  call void @set_offset(ptr %24, ptr @IntIterable)
  %37 = call ptr @llvm.invariant.start.p0(i64 24, ptr %24)
  %38 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %39 = extractvalue { ptr, ptr, ptr, i32 } %38, 0
  %40 = call ptr @llvm.invariant.start.p0(i64 96, ptr %39)
  %41 = extractvalue { ptr, ptr, ptr, i32 } %38, 3
  %42 = getelementptr ptr, ptr %39, i32 %41
  %43 = load ptr, ptr %42, align 8
  %44 = extractvalue { ptr, ptr, ptr, i32 } %38, 1
  %45 = call ptr %43(ptr %44)
  %46 = alloca { ptr, ptr, ptr, i32 }, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %49 = load ptr, ptr %47, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %52 = load ptr, ptr %50, align 8
  store ptr %52, ptr %51, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %55 = load ptr, ptr %53, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %58 = load i32, ptr %56, align 4
  store i32 %58, ptr %57, align 4
  call void @set_offset(ptr %46, ptr @IntIterable)
  %59 = call ptr @llvm.invariant.start.p0(i64 24, ptr %46)
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %62 = load ptr, ptr %60, align 8
  store ptr %62, ptr %61, align 8
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %65 = load ptr, ptr %63, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %68 = load ptr, ptr %66, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %71 = load i32, ptr %69, align 4
  store i32 %71, ptr %70, align 4
  %72 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %72, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 16, ptr %72)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 0
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 1
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 2
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %83 = load ptr, ptr %81, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 3
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %86 = load i32, ptr %84, align 4
  store i32 %86, ptr %85, align 4
  call void @set_offset(ptr %74, ptr @IntIterable)
  %87 = call ptr @llvm.invariant.start.p0(i64 24, ptr %74)
  %88 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %89 = extractvalue { ptr, ptr, ptr, i32 } %88, 0
  %90 = call ptr @llvm.invariant.start.p0(i64 96, ptr %89)
  %91 = extractvalue { ptr, ptr, ptr, i32 } %88, 3
  %92 = getelementptr ptr, ptr %89, i32 %91
  %93 = getelementptr ptr, ptr %92, i32 1
  %94 = load ptr, ptr %93, align 8
  %95 = extractvalue { ptr, ptr, ptr, i32 } %88, 1
  %96 = call ptr %94(ptr %95)
  %97 = alloca { ptr, ptr, ptr, i32 }, align 8
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 0
  %100 = load ptr, ptr %98, align 8
  store ptr %100, ptr %99, align 8
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %103 = load ptr, ptr %101, align 8
  store ptr %103, ptr %102, align 8
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 2
  %106 = load ptr, ptr %104, align 8
  store ptr %106, ptr %105, align 8
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  %109 = load i32, ptr %107, align 4
  store i32 %109, ptr %108, align 4
  call void @set_offset(ptr %97, ptr @IntIterable)
  %110 = call ptr @llvm.invariant.start.p0(i64 24, ptr %97)
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 0
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 0
  %113 = load ptr, ptr %111, align 8
  store ptr %113, ptr %112, align 8
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 1
  %116 = load ptr, ptr %114, align 8
  store ptr %116, ptr %115, align 8
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 2
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 2
  %119 = load ptr, ptr %117, align 8
  store ptr %119, ptr %118, align 8
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 3
  %122 = load i32, ptr %120, align 4
  store i32 %122, ptr %121, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ZipIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @ZipIterable)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 96, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %27 = call ptr %25(ptr %26)
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %29, 0
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %32 = load ptr, ptr %31, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %32, 1
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %35 = load ptr, ptr %34, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %35, 2
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %38 = load i32, ptr %37, align 4
  %39 = insertvalue { ptr, ptr, ptr, i32 } %36, i32 %38, 3
  %40 = alloca [0 x ptr], align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 0, ptr %40)
  %42 = call ptr @llvm.invariant.start.p0(i64 192, ptr %29)
  %43 = getelementptr ptr, ptr %29, i32 %38
  %44 = getelementptr ptr, ptr %43, i32 10
  %45 = load ptr, ptr %44, align 8
  %46 = alloca [0 x ptr], align 8
  %47 = call ptr %45({ ptr, ptr, ptr, i32 } %39, ptr %46)
  %48 = call { ptr, ptr, ptr, i32 } %47({ ptr, ptr, ptr, i32 } %39, { ptr, ptr, ptr, i32 } %39, ptr %40)
  %49 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %48, ptr %49, align 8
  %50 = call ptr @llvm.invariant.start.p0(i64 16, ptr %49)
  %51 = alloca { ptr, ptr, ptr, i32 }, align 8
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 0
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 0
  %54 = load ptr, ptr %52, align 8
  store ptr %54, ptr %53, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 1
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 1
  %57 = load ptr, ptr %55, align 8
  store ptr %57, ptr %56, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 2
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 2
  %60 = load ptr, ptr %58, align 8
  store ptr %60, ptr %59, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 3
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 3
  %63 = load i32, ptr %61, align 4
  store i32 %63, ptr %62, align 4
  call void @set_offset(ptr %51, ptr @IntIterator)
  %64 = call ptr @llvm.invariant.start.p0(i64 24, ptr %51)
  %65 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %66 = extractvalue { ptr, ptr, ptr, i32 } %65, 0
  %67 = call ptr @llvm.invariant.start.p0(i64 96, ptr %66)
  %68 = extractvalue { ptr, ptr, ptr, i32 } %65, 3
  %69 = getelementptr ptr, ptr %66, i32 %68
  %70 = getelementptr ptr, ptr %69, i32 1
  %71 = load ptr, ptr %70, align 8
  %72 = extractvalue { ptr, ptr, ptr, i32 } %65, 1
  %73 = call ptr %71(ptr %72)
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %75 = load ptr, ptr %74, align 8
  %76 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %75, 0
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %78 = load ptr, ptr %77, align 8
  %79 = insertvalue { ptr, ptr, ptr, i32 } %76, ptr %78, 1
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %81 = load ptr, ptr %80, align 8
  %82 = insertvalue { ptr, ptr, ptr, i32 } %79, ptr %81, 2
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %84 = load i32, ptr %83, align 4
  %85 = insertvalue { ptr, ptr, ptr, i32 } %82, i32 %84, 3
  %86 = alloca [0 x ptr], align 8
  %87 = call ptr @llvm.invariant.start.p0(i64 0, ptr %86)
  %88 = call ptr @llvm.invariant.start.p0(i64 192, ptr %75)
  %89 = getelementptr ptr, ptr %75, i32 %84
  %90 = getelementptr ptr, ptr %89, i32 10
  %91 = load ptr, ptr %90, align 8
  %92 = alloca [0 x ptr], align 8
  %93 = call ptr %91({ ptr, ptr, ptr, i32 } %85, ptr %92)
  %94 = call { ptr, ptr, ptr, i32 } %93({ ptr, ptr, ptr, i32 } %85, { ptr, ptr, ptr, i32 } %85, ptr %86)
  %95 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %94, ptr %95, align 8
  %96 = call ptr @llvm.invariant.start.p0(i64 16, ptr %95)
  %97 = alloca { ptr, ptr, ptr, i32 }, align 8
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %95, i32 0, i32 0
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 0
  %100 = load ptr, ptr %98, align 8
  store ptr %100, ptr %99, align 8
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %95, i32 0, i32 1
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %103 = load ptr, ptr %101, align 8
  store ptr %103, ptr %102, align 8
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %95, i32 0, i32 2
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 2
  %106 = load ptr, ptr %104, align 8
  store ptr %106, ptr %105, align 8
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %95, i32 0, i32 3
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  %109 = load i32, ptr %107, align 4
  store i32 %109, ptr %108, align 4
  call void @set_offset(ptr %97, ptr @IntIterator)
  %110 = call ptr @llvm.invariant.start.p0(i64 24, ptr %97)
  %111 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr null, i32 1) to i64))
  %112 = alloca { ptr, ptr, ptr, i32 }, align 8
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 1
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 3
  store ptr @ZipIterator, ptr %112, align 8
  store ptr %111, ptr %113, align 8
  store i32 7, ptr %114, align 4
  %115 = call ptr @llvm.invariant.start.p0(i64 16, ptr %112)
  %116 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %117 = extractvalue { ptr, ptr, ptr, i32 } %116, 0
  %118 = call ptr @llvm.invariant.start.p0(i64 96, ptr %117)
  %119 = extractvalue { ptr, ptr, ptr, i32 } %116, 3
  %120 = getelementptr ptr, ptr %117, i32 %119
  %121 = load ptr, ptr %120, align 8
  %122 = extractvalue { ptr, ptr, ptr, i32 } %116, 1
  %123 = call ptr %121(ptr %122)
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 0
  %125 = load ptr, ptr %124, align 8
  %126 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %125, 0
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 1
  %128 = load ptr, ptr %127, align 8
  %129 = insertvalue { ptr, ptr, ptr, i32 } %126, ptr %128, 1
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 2
  %131 = load ptr, ptr %130, align 8
  %132 = insertvalue { ptr, ptr, ptr, i32 } %129, ptr %131, 2
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 3
  %134 = load i32, ptr %133, align 4
  %135 = insertvalue { ptr, ptr, ptr, i32 } %132, i32 %134, 3
  %136 = alloca [0 x ptr], align 8
  %137 = call ptr @llvm.invariant.start.p0(i64 0, ptr %136)
  %138 = call ptr @llvm.invariant.start.p0(i64 192, ptr %125)
  %139 = getelementptr ptr, ptr %125, i32 %134
  %140 = getelementptr ptr, ptr %139, i32 10
  %141 = load ptr, ptr %140, align 8
  %142 = alloca [0 x ptr], align 8
  %143 = call ptr %141({ ptr, ptr, ptr, i32 } %135, ptr %142)
  %144 = call { ptr, ptr, ptr, i32 } %143({ ptr, ptr, ptr, i32 } %135, { ptr, ptr, ptr, i32 } %135, ptr %136)
  %145 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %144, ptr %145, align 8
  %146 = call ptr @llvm.invariant.start.p0(i64 16, ptr %145)
  %147 = alloca { ptr, ptr, ptr, i32 }, align 8
  %148 = getelementptr { ptr, ptr, ptr, i32 }, ptr %145, i32 0, i32 0
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %147, i32 0, i32 0
  %150 = load ptr, ptr %148, align 8
  store ptr %150, ptr %149, align 8
  %151 = getelementptr { ptr, ptr, ptr, i32 }, ptr %145, i32 0, i32 1
  %152 = getelementptr { ptr, ptr, ptr, i32 }, ptr %147, i32 0, i32 1
  %153 = load ptr, ptr %151, align 8
  store ptr %153, ptr %152, align 8
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %145, i32 0, i32 2
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %147, i32 0, i32 2
  %156 = load ptr, ptr %154, align 8
  store ptr %156, ptr %155, align 8
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %145, i32 0, i32 3
  %158 = getelementptr { ptr, ptr, ptr, i32 }, ptr %147, i32 0, i32 3
  %159 = load i32, ptr %157, align 4
  store i32 %159, ptr %158, align 4
  call void @set_offset(ptr %147, ptr @IntIterator)
  %160 = call ptr @llvm.invariant.start.p0(i64 24, ptr %147)
  %161 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %162 = extractvalue { ptr, ptr, ptr, i32 } %161, 0
  %163 = call ptr @llvm.invariant.start.p0(i64 96, ptr %162)
  %164 = extractvalue { ptr, ptr, ptr, i32 } %161, 3
  %165 = getelementptr ptr, ptr %162, i32 %164
  %166 = getelementptr ptr, ptr %165, i32 1
  %167 = load ptr, ptr %166, align 8
  %168 = extractvalue { ptr, ptr, ptr, i32 } %161, 1
  %169 = call ptr %167(ptr %168)
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %169, i32 0, i32 0
  %171 = load ptr, ptr %170, align 8
  %172 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %171, 0
  %173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %169, i32 0, i32 1
  %174 = load ptr, ptr %173, align 8
  %175 = insertvalue { ptr, ptr, ptr, i32 } %172, ptr %174, 1
  %176 = getelementptr { ptr, ptr, ptr, i32 }, ptr %169, i32 0, i32 2
  %177 = load ptr, ptr %176, align 8
  %178 = insertvalue { ptr, ptr, ptr, i32 } %175, ptr %177, 2
  %179 = getelementptr { ptr, ptr, ptr, i32 }, ptr %169, i32 0, i32 3
  %180 = load i32, ptr %179, align 4
  %181 = insertvalue { ptr, ptr, ptr, i32 } %178, i32 %180, 3
  %182 = alloca [0 x ptr], align 8
  %183 = call ptr @llvm.invariant.start.p0(i64 0, ptr %182)
  %184 = call ptr @llvm.invariant.start.p0(i64 192, ptr %171)
  %185 = getelementptr ptr, ptr %171, i32 %180
  %186 = getelementptr ptr, ptr %185, i32 10
  %187 = load ptr, ptr %186, align 8
  %188 = alloca [0 x ptr], align 8
  %189 = call ptr %187({ ptr, ptr, ptr, i32 } %181, ptr %188)
  %190 = call { ptr, ptr, ptr, i32 } %189({ ptr, ptr, ptr, i32 } %181, { ptr, ptr, ptr, i32 } %181, ptr %182)
  %191 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %190, ptr %191, align 8
  %192 = call ptr @llvm.invariant.start.p0(i64 16, ptr %191)
  %193 = alloca { ptr, ptr, ptr, i32 }, align 8
  %194 = getelementptr { ptr, ptr, ptr, i32 }, ptr %191, i32 0, i32 0
  %195 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 0
  %196 = load ptr, ptr %194, align 8
  store ptr %196, ptr %195, align 8
  %197 = getelementptr { ptr, ptr, ptr, i32 }, ptr %191, i32 0, i32 1
  %198 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 1
  %199 = load ptr, ptr %197, align 8
  store ptr %199, ptr %198, align 8
  %200 = getelementptr { ptr, ptr, ptr, i32 }, ptr %191, i32 0, i32 2
  %201 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 2
  %202 = load ptr, ptr %200, align 8
  store ptr %202, ptr %201, align 8
  %203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %191, i32 0, i32 3
  %204 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 3
  %205 = load i32, ptr %203, align 4
  store i32 %205, ptr %204, align 4
  call void @set_offset(ptr %193, ptr @IntIterator)
  %206 = call ptr @llvm.invariant.start.p0(i64 24, ptr %193)
  %207 = alloca { ptr, ptr, ptr, i32 }, align 8
  %208 = getelementptr { ptr, ptr, ptr, i32 }, ptr %147, i32 0, i32 0
  %209 = getelementptr { ptr, ptr, ptr, i32 }, ptr %207, i32 0, i32 0
  %210 = load ptr, ptr %208, align 8
  store ptr %210, ptr %209, align 8
  %211 = getelementptr { ptr, ptr, ptr, i32 }, ptr %147, i32 0, i32 1
  %212 = getelementptr { ptr, ptr, ptr, i32 }, ptr %207, i32 0, i32 1
  %213 = load ptr, ptr %211, align 8
  store ptr %213, ptr %212, align 8
  %214 = getelementptr { ptr, ptr, ptr, i32 }, ptr %147, i32 0, i32 2
  %215 = getelementptr { ptr, ptr, ptr, i32 }, ptr %207, i32 0, i32 2
  %216 = load ptr, ptr %214, align 8
  store ptr %216, ptr %215, align 8
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %147, i32 0, i32 3
  %218 = getelementptr { ptr, ptr, ptr, i32 }, ptr %207, i32 0, i32 3
  %219 = load i32, ptr %217, align 4
  store i32 %219, ptr %218, align 4
  call void @set_offset(ptr %207, ptr @IntIterator)
  %220 = call ptr @llvm.invariant.start.p0(i64 24, ptr %207)
  %221 = getelementptr { ptr, ptr, ptr, i32 }, ptr %207, i32 0, i32 0
  %222 = load ptr, ptr %221, align 8
  %223 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %222, 0
  %224 = getelementptr { ptr, ptr, ptr, i32 }, ptr %207, i32 0, i32 1
  %225 = load ptr, ptr %224, align 8
  %226 = insertvalue { ptr, ptr, ptr, i32 } %223, ptr %225, 1
  %227 = getelementptr { ptr, ptr, ptr, i32 }, ptr %207, i32 0, i32 2
  %228 = load ptr, ptr %227, align 8
  %229 = insertvalue { ptr, ptr, ptr, i32 } %226, ptr %228, 2
  %230 = getelementptr { ptr, ptr, ptr, i32 }, ptr %207, i32 0, i32 3
  %231 = load i32, ptr %230, align 4
  %232 = insertvalue { ptr, ptr, ptr, i32 } %229, i32 %231, 3
  %233 = alloca { ptr, ptr, ptr, i32 }, align 8
  %234 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 0
  %235 = getelementptr { ptr, ptr, ptr, i32 }, ptr %233, i32 0, i32 0
  %236 = load ptr, ptr %234, align 8
  store ptr %236, ptr %235, align 8
  %237 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 1
  %238 = getelementptr { ptr, ptr, ptr, i32 }, ptr %233, i32 0, i32 1
  %239 = load ptr, ptr %237, align 8
  store ptr %239, ptr %238, align 8
  %240 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 2
  %241 = getelementptr { ptr, ptr, ptr, i32 }, ptr %233, i32 0, i32 2
  %242 = load ptr, ptr %240, align 8
  store ptr %242, ptr %241, align 8
  %243 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 3
  %244 = getelementptr { ptr, ptr, ptr, i32 }, ptr %233, i32 0, i32 3
  %245 = load i32, ptr %243, align 4
  store i32 %245, ptr %244, align 4
  call void @set_offset(ptr %233, ptr @IntIterator)
  %246 = call ptr @llvm.invariant.start.p0(i64 24, ptr %233)
  %247 = getelementptr { ptr, ptr, ptr, i32 }, ptr %233, i32 0, i32 0
  %248 = load ptr, ptr %247, align 8
  %249 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %248, 0
  %250 = getelementptr { ptr, ptr, ptr, i32 }, ptr %233, i32 0, i32 1
  %251 = load ptr, ptr %250, align 8
  %252 = insertvalue { ptr, ptr, ptr, i32 } %249, ptr %251, 1
  %253 = getelementptr { ptr, ptr, ptr, i32 }, ptr %233, i32 0, i32 2
  %254 = load ptr, ptr %253, align 8
  %255 = insertvalue { ptr, ptr, ptr, i32 } %252, ptr %254, 2
  %256 = getelementptr { ptr, ptr, ptr, i32 }, ptr %233, i32 0, i32 3
  %257 = load i32, ptr %256, align 4
  %258 = insertvalue { ptr, ptr, ptr, i32 } %255, i32 %257, 3
  %259 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 0
  %260 = load ptr, ptr %259, align 8
  %261 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %260, 0
  %262 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 1
  %263 = load ptr, ptr %262, align 8
  %264 = insertvalue { ptr, ptr, ptr, i32 } %261, ptr %263, 1
  %265 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 2
  %266 = load ptr, ptr %265, align 8
  %267 = insertvalue { ptr, ptr, ptr, i32 } %264, ptr %266, 2
  %268 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 3
  %269 = load i32, ptr %268, align 4
  %270 = insertvalue { ptr, ptr, ptr, i32 } %267, i32 %269, 3
  %271 = alloca [2 x ptr], align 8
  %272 = call ptr @llvm.invariant.start.p0(i64 16, ptr %271)
  %273 = getelementptr [2 x ptr], ptr %271, i32 0, i32 1
  store ptr @_parameterization_IntIterator, ptr %273, align 8
  %274 = getelementptr [2 x ptr], ptr %271, i32 0, i32 0
  store ptr @_parameterization_IntIterator, ptr %274, align 8
  %275 = call ptr @llvm.invariant.start.p0(i64 64, ptr %260)
  %276 = getelementptr ptr, ptr %260, i32 %269
  %277 = getelementptr ptr, ptr %276, i32 2
  %278 = load ptr, ptr %277, align 8
  %279 = alloca [2 x ptr], align 8
  %280 = getelementptr [2 x ptr], ptr %279, i32 0, i32 0
  store ptr %222, ptr %280, align 8
  %281 = getelementptr [2 x ptr], ptr %279, i32 0, i32 1
  store ptr %248, ptr %281, align 8
  %282 = call ptr %278({ ptr, ptr, ptr, i32 } %270, ptr %279, { ptr, ptr, ptr, i32 } %232, { ptr, ptr, ptr, i32 } %258)
  call void %282({ ptr, ptr, ptr, i32 } %270, { ptr, ptr, ptr, i32 } %270, ptr %271, { ptr, ptr, ptr, i32 } %232, { ptr, ptr, ptr, i32 } %258)
  %283 = alloca { ptr, ptr, ptr, i32 }, align 8
  %284 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 0
  %285 = getelementptr { ptr, ptr, ptr, i32 }, ptr %283, i32 0, i32 0
  %286 = load ptr, ptr %284, align 8
  store ptr %286, ptr %285, align 8
  %287 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 1
  %288 = getelementptr { ptr, ptr, ptr, i32 }, ptr %283, i32 0, i32 1
  %289 = load ptr, ptr %287, align 8
  store ptr %289, ptr %288, align 8
  %290 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 2
  %291 = getelementptr { ptr, ptr, ptr, i32 }, ptr %283, i32 0, i32 2
  %292 = load ptr, ptr %290, align 8
  store ptr %292, ptr %291, align 8
  %293 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 3
  %294 = getelementptr { ptr, ptr, ptr, i32 }, ptr %283, i32 0, i32 3
  %295 = load i32, ptr %293, align 4
  store i32 %295, ptr %294, align 4
  call void @set_offset(ptr %283, ptr @Iterator)
  %296 = call ptr @llvm.invariant.start.p0(i64 24, ptr %283)
  %297 = getelementptr { ptr, ptr, ptr, i32 }, ptr %283, i32 0, i32 0
  %298 = load ptr, ptr %297, align 8
  %299 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %298, 0
  %300 = getelementptr { ptr, ptr, ptr, i32 }, ptr %283, i32 0, i32 1
  %301 = load ptr, ptr %300, align 8
  %302 = insertvalue { ptr, ptr, ptr, i32 } %299, ptr %301, 1
  %303 = getelementptr { ptr, ptr, ptr, i32 }, ptr %283, i32 0, i32 2
  %304 = load ptr, ptr %303, align 8
  %305 = insertvalue { ptr, ptr, ptr, i32 } %302, ptr %304, 2
  %306 = getelementptr { ptr, ptr, ptr, i32 }, ptr %283, i32 0, i32 3
  %307 = load i32, ptr %306, align 4
  %308 = insertvalue { ptr, ptr, ptr, i32 } %305, i32 %307, 3
  ret { ptr, ptr, ptr, i32 } %308
}

define ptr @ZipIterator_field_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 0
  ret ptr %2
}

define ptr @ZipIterator_field_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 1
  ret ptr %2
}

define ptr @ZipIterator_B_init_firstIntIterator_secondIntIterator({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2, { ptr, ptr, ptr, i32 } %3) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = getelementptr [2 x ptr], ptr %1, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr ptr, ptr %7, i32 1
  %9 = getelementptr ptr, ptr %7, i32 2
  %10 = getelementptr ptr, ptr %7, i32 3
  %11 = getelementptr ptr, ptr %7, i32 4
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 -933084275656658555, i64 ptrtoint (ptr @IntIterator to i64), ptr %15)
  %17 = getelementptr [2 x ptr], ptr %1, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr ptr, ptr %18, i32 1
  %20 = getelementptr ptr, ptr %18, i32 2
  %21 = getelementptr ptr, ptr %18, i32 3
  %22 = getelementptr ptr, ptr %18, i32 4
  %23 = load i64, ptr %19, align 4
  %24 = load i64, ptr %20, align 4
  %25 = load ptr, ptr %21, align 8
  %26 = load ptr, ptr %22, align 8
  %27 = call i1 @subtype_test_wrapper(ptr %25, i64 %24, i64 %23, i64 -933084275656658555, i64 ptrtoint (ptr @IntIterator to i64), ptr %26)
  %28 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %29 = getelementptr [8 x ptr], ptr %28, i32 0, i32 4
  %30 = getelementptr ptr, ptr %29, i32 7
  %31 = load ptr, ptr %30, align 8
  ret ptr %31
}

define ptr @ZipIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [8 x ptr], ptr %4, i32 0, i32 5
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @ZipIterator_init_firstIntIterator_secondIntIterator({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @ZipIterator)
  %21 = call ptr @llvm.invariant.start.p0(i64 24, ptr %8)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %22, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 16, ptr %22)
  %24 = alloca { ptr, ptr, ptr, i32 }, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %36 = load i32, ptr %34, align 4
  store i32 %36, ptr %35, align 4
  call void @set_offset(ptr %24, ptr @IntIterator)
  %37 = call ptr @llvm.invariant.start.p0(i64 24, ptr %24)
  %38 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %39 = extractvalue { ptr, ptr, ptr, i32 } %38, 0
  %40 = call ptr @llvm.invariant.start.p0(i64 64, ptr %39)
  %41 = extractvalue { ptr, ptr, ptr, i32 } %38, 3
  %42 = getelementptr ptr, ptr %39, i32 %41
  %43 = load ptr, ptr %42, align 8
  %44 = extractvalue { ptr, ptr, ptr, i32 } %38, 1
  %45 = call ptr %43(ptr %44)
  %46 = alloca { ptr, ptr, ptr, i32 }, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %49 = load ptr, ptr %47, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %52 = load ptr, ptr %50, align 8
  store ptr %52, ptr %51, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %55 = load ptr, ptr %53, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %58 = load i32, ptr %56, align 4
  store i32 %58, ptr %57, align 4
  call void @set_offset(ptr %46, ptr @IntIterator)
  %59 = call ptr @llvm.invariant.start.p0(i64 24, ptr %46)
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %62 = load ptr, ptr %60, align 8
  store ptr %62, ptr %61, align 8
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %65 = load ptr, ptr %63, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %68 = load ptr, ptr %66, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %71 = load i32, ptr %69, align 4
  store i32 %71, ptr %70, align 4
  %72 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %72, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 16, ptr %72)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 0
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 1
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 2
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %83 = load ptr, ptr %81, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 3
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %86 = load i32, ptr %84, align 4
  store i32 %86, ptr %85, align 4
  call void @set_offset(ptr %74, ptr @IntIterator)
  %87 = call ptr @llvm.invariant.start.p0(i64 24, ptr %74)
  %88 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %89 = extractvalue { ptr, ptr, ptr, i32 } %88, 0
  %90 = call ptr @llvm.invariant.start.p0(i64 64, ptr %89)
  %91 = extractvalue { ptr, ptr, ptr, i32 } %88, 3
  %92 = getelementptr ptr, ptr %89, i32 %91
  %93 = getelementptr ptr, ptr %92, i32 1
  %94 = load ptr, ptr %93, align 8
  %95 = extractvalue { ptr, ptr, ptr, i32 } %88, 1
  %96 = call ptr %94(ptr %95)
  %97 = alloca { ptr, ptr, ptr, i32 }, align 8
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 0
  %100 = load ptr, ptr %98, align 8
  store ptr %100, ptr %99, align 8
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %103 = load ptr, ptr %101, align 8
  store ptr %103, ptr %102, align 8
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 2
  %106 = load ptr, ptr %104, align 8
  store ptr %106, ptr %105, align 8
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  %109 = load i32, ptr %107, align 4
  store i32 %109, ptr %108, align 4
  call void @set_offset(ptr %97, ptr @IntIterator)
  %110 = call ptr @llvm.invariant.start.p0(i64 24, ptr %97)
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 0
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 0
  %113 = load ptr, ptr %111, align 8
  store ptr %113, ptr %112, align 8
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 1
  %116 = load ptr, ptr %114, align 8
  store ptr %116, ptr %115, align 8
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 2
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 2
  %119 = load ptr, ptr %117, align 8
  store ptr %119, ptr %118, align 8
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 3
  %122 = load i32, ptr %120, align 4
  store i32 %122, ptr %121, align 4
  ret void
}

define { ptr, i64 } @ZipIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i64 }, align 8
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca { ptr, i64 }, align 8
  %.reg2mem5 = alloca { ptr, i64 }, align 8
  %.reg2mem7 = alloca { ptr, i64 }, align 8
  %.reg2mem9 = alloca i32, align 4
  %.reg2mem11 = alloca { ptr, i64 }, align 8
  %.reg2mem13 = alloca i32, align 4
  %.reg2mem15 = alloca { ptr, i64 }, align 8
  %.reg2mem17 = alloca { ptr, i64 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @ZipIterator)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 64, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %27 = call ptr %25(ptr %26)
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %29, 0
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %32 = load ptr, ptr %31, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %32, 1
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %35 = load ptr, ptr %34, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %35, 2
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %38 = load i32, ptr %37, align 4
  %39 = insertvalue { ptr, ptr, ptr, i32 } %36, i32 %38, 3
  %40 = alloca [0 x ptr], align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 0, ptr %40)
  %42 = call ptr @llvm.invariant.start.p0(i64 16, ptr %29)
  %43 = getelementptr ptr, ptr %29, i32 %38
  %44 = load ptr, ptr %43, align 8
  %45 = alloca [0 x ptr], align 8
  %46 = call ptr %44({ ptr, ptr, ptr, i32 } %39, ptr %45)
  %47 = call { ptr, i32 } %46({ ptr, ptr, ptr, i32 } %39, { ptr, ptr, ptr, i32 } %39, ptr %40)
  %48 = alloca { ptr, i32 }, align 8
  store { ptr, i32 } %47, ptr %48, align 8
  %49 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %50 = extractvalue { ptr, ptr, ptr, i32 } %49, 0
  %51 = call ptr @llvm.invariant.start.p0(i64 64, ptr %50)
  %52 = extractvalue { ptr, ptr, ptr, i32 } %49, 3
  %53 = getelementptr ptr, ptr %50, i32 %52
  %54 = getelementptr ptr, ptr %53, i32 1
  %55 = load ptr, ptr %54, align 8
  %56 = extractvalue { ptr, ptr, ptr, i32 } %49, 1
  %57 = call ptr %55(ptr %56)
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 0
  %59 = load ptr, ptr %58, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %59, 0
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 1
  %62 = load ptr, ptr %61, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr %62, 1
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 2
  %65 = load ptr, ptr %64, align 8
  %66 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %65, 2
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 3
  %68 = load i32, ptr %67, align 4
  %69 = insertvalue { ptr, ptr, ptr, i32 } %66, i32 %68, 3
  %70 = alloca [0 x ptr], align 8
  %71 = call ptr @llvm.invariant.start.p0(i64 0, ptr %70)
  %72 = call ptr @llvm.invariant.start.p0(i64 16, ptr %59)
  %73 = getelementptr ptr, ptr %59, i32 %68
  %74 = load ptr, ptr %73, align 8
  %75 = alloca [0 x ptr], align 8
  %76 = call ptr %74({ ptr, ptr, ptr, i32 } %69, ptr %75)
  %77 = call { ptr, i32 } %76({ ptr, ptr, ptr, i32 } %69, { ptr, ptr, ptr, i32 } %69, ptr %70)
  %78 = alloca { ptr, i32 }, align 8
  store { ptr, i32 } %77, ptr %78, align 8
  %79 = getelementptr { ptr, i32 }, ptr %48, i32 0, i32 0
  %80 = load ptr, ptr %79, align 8
  %81 = ptrtoint ptr %80 to i64
  %82 = icmp ne i64 %81, ptrtoint (ptr @nil_typ to i64)
  %83 = alloca i32, align 4
  %84 = alloca i64, align 8
  %85 = alloca i1, align 1
  %86 = alloca i32, align 4
  %87 = alloca i32, align 4
  %88 = alloca i32, align 4
  %89 = alloca i64, align 8
  %90 = alloca ptr, align 8
  %91 = alloca i64, align 8
  %92 = alloca i32, align 4
  %93 = alloca ptr, align 8
  %94 = alloca i64, align 8
  %95 = alloca i64, align 8
  %96 = alloca ptr, align 8
  %97 = alloca i64, align 8
  br i1 %82, label %98, label %133

98:                                               ; preds = %3
  %99 = getelementptr { ptr, i32 }, ptr %48, i32 0, i32 1
  %100 = load i32, ptr %99, align 4
  store i32 %100, ptr %83, align 4
  %101 = getelementptr { ptr, i32 }, ptr %78, i32 0, i32 0
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %84, align 4
  %102 = load ptr, ptr %101, align 8
  %103 = ptrtoint ptr %102 to i64
  %104 = load ptr, ptr %84, align 8
  %105 = ptrtoint ptr %104 to i64
  %106 = icmp ne i64 %103, %105
  store i1 %106, ptr %85, align 1
  %107 = load i1, ptr %85, align 1
  %108 = xor i1 %107, true
  %109 = zext i1 %108 to i32
  store i32 %109, ptr %.reg2mem9, align 4
  br i1 %107, label %110, label %124

110:                                              ; preds = %98
  %111 = getelementptr { ptr, i32 }, ptr %78, i32 0, i32 1
  %112 = load i32, ptr %111, align 4
  store i32 %112, ptr %86, align 4
  %113 = load i32, ptr %83, align 4
  %114 = load i32, ptr %86, align 4
  store i32 %114, ptr %87, align 4
  store i32 %113, ptr %88, align 4
  %115 = getelementptr { i32, i32 }, ptr %89, i32 0, i32 0
  %116 = load i32, ptr %88, align 4
  store i32 %116, ptr %115, align 4
  %117 = getelementptr { i32, i32 }, ptr %89, i32 0, i32 1
  %118 = load i32, ptr %87, align 4
  store i32 %118, ptr %117, align 4
  store i64 ptrtoint (ptr @tuple_typ to i64), ptr %91, align 4
  %119 = load i64, ptr %91, align 4
  store i64 %119, ptr %90, align 4
  %120 = load ptr, ptr %90, align 8
  %121 = insertvalue { ptr, i64 } undef, ptr %120, 0
  %122 = load i64, ptr %89, align 4
  %123 = insertvalue { ptr, i64 } %121, i64 %122, 1
  store { ptr, i64 } %123, ptr %.reg2mem7, align 8
  %.reload8 = load { ptr, i64 }, ptr %.reg2mem7, align 8
  store { ptr, i64 } %.reload8, ptr %.reg2mem17, align 8
  br label %131

124:                                              ; preds = %98
  %125 = load i32, ptr %83, align 4
  store i32 %125, ptr %92, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %94, align 4
  %126 = load i64, ptr %94, align 4
  store i64 %126, ptr %93, align 4
  %127 = getelementptr { ptr, i32 }, ptr %48, i32 0, i32 0
  %128 = load ptr, ptr %93, align 8
  store ptr %128, ptr %127, align 8
  %129 = getelementptr { ptr, i32 }, ptr %48, i32 0, i32 1
  %130 = load i32, ptr %92, align 4
  store i32 %130, ptr %129, align 4
  store { ptr, i64 } poison, ptr %.reg2mem17, align 8
  br label %131

131:                                              ; preds = %124, %110
  %.reload18 = load { ptr, i64 }, ptr %.reg2mem17, align 8
  store { ptr, i64 } %.reload18, ptr %.reg2mem5, align 8
  br label %132

132:                                              ; preds = %131
  %.reload6 = load { ptr, i64 }, ptr %.reg2mem5, align 8
  %.reload10 = load i32, ptr %.reg2mem9, align 4
  store i32 %.reload10, ptr %.reg2mem13, align 4
  store { ptr, i64 } %.reload6, ptr %.reg2mem15, align 8
  br label %134

133:                                              ; preds = %3
  store i32 1, ptr %.reg2mem13, align 4
  store { ptr, i64 } poison, ptr %.reg2mem15, align 8
  br label %134

134:                                              ; preds = %133, %132
  %.reload16 = load { ptr, i64 }, ptr %.reg2mem15, align 8
  %.reload14 = load i32, ptr %.reg2mem13, align 4
  store { ptr, i64 } %.reload16, ptr %.reg2mem3, align 8
  store i32 %.reload14, ptr %.reg2mem1, align 4
  br label %135

135:                                              ; preds = %134
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  %136 = zext i32 %.reload2 to i64
  %137 = trunc i64 %136 to i32
  switch i32 %137, label %139 [
    i32 0, label %138
  ]

138:                                              ; preds = %135
  %.reload4 = load { ptr, i64 }, ptr %.reg2mem3, align 8
  store { ptr, i64 } %.reload4, ptr %.reg2mem11, align 8
  br label %145

139:                                              ; preds = %135
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %97, align 4
  %140 = load i64, ptr %97, align 4
  store i64 %140, ptr %96, align 4
  %141 = load ptr, ptr %96, align 8
  %142 = insertvalue { ptr, i64 } undef, ptr %141, 0
  %143 = load i64, ptr %95, align 4
  %144 = insertvalue { ptr, i64 } %142, i64 %143, 1
  store { ptr, i64 } %144, ptr %.reg2mem, align 8
  %.reload = load { ptr, i64 }, ptr %.reg2mem, align 8
  store { ptr, i64 } %.reload, ptr %.reg2mem11, align 8
  br label %145

145:                                              ; preds = %139, %138
  %.reload12 = load { ptr, i64 }, ptr %.reg2mem11, align 8
  ret { ptr, i64 } %.reload12
}

define ptr @InterleaveIterable_field_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 0
  ret ptr %2
}

define ptr @InterleaveIterable_field_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 1
  ret ptr %2
}

define ptr @InterleaveIterable_B_init_firstIntIterable_secondIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2, { ptr, ptr, ptr, i32 } %3) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = getelementptr [2 x ptr], ptr %1, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr ptr, ptr %7, i32 1
  %9 = getelementptr ptr, ptr %7, i32 2
  %10 = getelementptr ptr, ptr %7, i32 3
  %11 = getelementptr ptr, ptr %7, i32 4
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %15)
  %17 = getelementptr [2 x ptr], ptr %1, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr ptr, ptr %18, i32 1
  %20 = getelementptr ptr, ptr %18, i32 2
  %21 = getelementptr ptr, ptr %18, i32 3
  %22 = getelementptr ptr, ptr %18, i32 4
  %23 = load i64, ptr %19, align 4
  %24 = load i64, ptr %20, align 4
  %25 = load ptr, ptr %21, align 8
  %26 = load ptr, ptr %22, align 8
  %27 = call i1 @subtype_test_wrapper(ptr %25, i64 %24, i64 %23, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %26)
  %28 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %29 = getelementptr [52 x ptr], ptr %28, i32 0, i32 14
  %30 = getelementptr ptr, ptr %29, i32 7
  %31 = load ptr, ptr %30, align 8
  ret ptr %31
}

define ptr @InterleaveIterable_B_each_fFunctionPtri32_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 15
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @InterleaveIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1, i32 %2, { ptr } %3) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = getelementptr [2 x ptr], ptr %1, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr ptr, ptr %7, i32 1
  %9 = getelementptr ptr, ptr %7, i32 2
  %10 = getelementptr ptr, ptr %7, i32 3
  %11 = getelementptr ptr, ptr %7, i32 4
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %15)
  %17 = getelementptr [2 x ptr], ptr %1, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr ptr, ptr %18, i32 1
  %20 = getelementptr ptr, ptr %18, i32 2
  %21 = getelementptr ptr, ptr %18, i32 3
  %22 = getelementptr ptr, ptr %18, i32 4
  %23 = load i64, ptr %19, align 4
  %24 = load i64, ptr %20, align 4
  %25 = load ptr, ptr %21, align 8
  %26 = load ptr, ptr %22, align 8
  %27 = call i1 @subtype_test_wrapper(ptr %25, i64 %24, i64 %23, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %26)
  %28 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %29 = getelementptr [52 x ptr], ptr %28, i32 0, i32 16
  %30 = getelementptr ptr, ptr %29, i32 7
  %31 = load ptr, ptr %30, align 8
  ret ptr %31
}

define ptr @InterleaveIterable_B_all_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 17
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @InterleaveIterable_B_any_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 18
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @InterleaveIterable_B_map_fFunctionPtri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 19
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @InterleaveIterable_B_filter_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 20
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @InterleaveIterable_B_chain_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 21
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @InterleaveIterable_B_interleave_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 22
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @InterleaveIterable_B_zip_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 23
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @InterleaveIterable_B_product_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 24
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @InterleaveIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [52 x ptr], ptr %4, i32 0, i32 25
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @InterleaveIterable_init_firstIntIterable_secondIntIterable({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @InterleaveIterable)
  %21 = call ptr @llvm.invariant.start.p0(i64 24, ptr %8)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %22, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 16, ptr %22)
  %24 = alloca { ptr, ptr, ptr, i32 }, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %36 = load i32, ptr %34, align 4
  store i32 %36, ptr %35, align 4
  call void @set_offset(ptr %24, ptr @IntIterable)
  %37 = call ptr @llvm.invariant.start.p0(i64 24, ptr %24)
  %38 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %39 = extractvalue { ptr, ptr, ptr, i32 } %38, 0
  %40 = call ptr @llvm.invariant.start.p0(i64 416, ptr %39)
  %41 = extractvalue { ptr, ptr, ptr, i32 } %38, 3
  %42 = getelementptr ptr, ptr %39, i32 %41
  %43 = load ptr, ptr %42, align 8
  %44 = extractvalue { ptr, ptr, ptr, i32 } %38, 1
  %45 = call ptr %43(ptr %44)
  %46 = alloca { ptr, ptr, ptr, i32 }, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %49 = load ptr, ptr %47, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %52 = load ptr, ptr %50, align 8
  store ptr %52, ptr %51, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %55 = load ptr, ptr %53, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %58 = load i32, ptr %56, align 4
  store i32 %58, ptr %57, align 4
  call void @set_offset(ptr %46, ptr @IntIterable)
  %59 = call ptr @llvm.invariant.start.p0(i64 24, ptr %46)
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %62 = load ptr, ptr %60, align 8
  store ptr %62, ptr %61, align 8
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %65 = load ptr, ptr %63, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %68 = load ptr, ptr %66, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %71 = load i32, ptr %69, align 4
  store i32 %71, ptr %70, align 4
  %72 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %72, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 16, ptr %72)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 0
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 1
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 2
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %83 = load ptr, ptr %81, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 3
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %86 = load i32, ptr %84, align 4
  store i32 %86, ptr %85, align 4
  call void @set_offset(ptr %74, ptr @IntIterable)
  %87 = call ptr @llvm.invariant.start.p0(i64 24, ptr %74)
  %88 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %89 = extractvalue { ptr, ptr, ptr, i32 } %88, 0
  %90 = call ptr @llvm.invariant.start.p0(i64 416, ptr %89)
  %91 = extractvalue { ptr, ptr, ptr, i32 } %88, 3
  %92 = getelementptr ptr, ptr %89, i32 %91
  %93 = getelementptr ptr, ptr %92, i32 1
  %94 = load ptr, ptr %93, align 8
  %95 = extractvalue { ptr, ptr, ptr, i32 } %88, 1
  %96 = call ptr %94(ptr %95)
  %97 = alloca { ptr, ptr, ptr, i32 }, align 8
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 0
  %100 = load ptr, ptr %98, align 8
  store ptr %100, ptr %99, align 8
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %103 = load ptr, ptr %101, align 8
  store ptr %103, ptr %102, align 8
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 2
  %106 = load ptr, ptr %104, align 8
  store ptr %106, ptr %105, align 8
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  %109 = load i32, ptr %107, align 4
  store i32 %109, ptr %108, align 4
  call void @set_offset(ptr %97, ptr @IntIterable)
  %110 = call ptr @llvm.invariant.start.p0(i64 24, ptr %97)
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 0
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 0
  %113 = load ptr, ptr %111, align 8
  store ptr %113, ptr %112, align 8
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 1
  %116 = load ptr, ptr %114, align 8
  store ptr %116, ptr %115, align 8
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 2
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 2
  %119 = load ptr, ptr %117, align 8
  store ptr %119, ptr %118, align 8
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 3
  %122 = load i32, ptr %120, align 4
  store i32 %122, ptr %121, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @InterleaveIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @InterleaveIterable)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 416, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %27 = call ptr %25(ptr %26)
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %29, 0
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %32 = load ptr, ptr %31, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %32, 1
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %35 = load ptr, ptr %34, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %35, 2
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %38 = load i32, ptr %37, align 4
  %39 = insertvalue { ptr, ptr, ptr, i32 } %36, i32 %38, 3
  %40 = alloca [0 x ptr], align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 0, ptr %40)
  %42 = call ptr @llvm.invariant.start.p0(i64 192, ptr %29)
  %43 = getelementptr ptr, ptr %29, i32 %38
  %44 = getelementptr ptr, ptr %43, i32 10
  %45 = load ptr, ptr %44, align 8
  %46 = alloca [0 x ptr], align 8
  %47 = call ptr %45({ ptr, ptr, ptr, i32 } %39, ptr %46)
  %48 = call { ptr, ptr, ptr, i32 } %47({ ptr, ptr, ptr, i32 } %39, { ptr, ptr, ptr, i32 } %39, ptr %40)
  %49 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %48, ptr %49, align 8
  %50 = call ptr @llvm.invariant.start.p0(i64 16, ptr %49)
  %51 = alloca { ptr, ptr, ptr, i32 }, align 8
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 0
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 0
  %54 = load ptr, ptr %52, align 8
  store ptr %54, ptr %53, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 1
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 1
  %57 = load ptr, ptr %55, align 8
  store ptr %57, ptr %56, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 2
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 2
  %60 = load ptr, ptr %58, align 8
  store ptr %60, ptr %59, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 3
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 3
  %63 = load i32, ptr %61, align 4
  store i32 %63, ptr %62, align 4
  call void @set_offset(ptr %51, ptr @IntIterator)
  %64 = call ptr @llvm.invariant.start.p0(i64 24, ptr %51)
  %65 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %66 = extractvalue { ptr, ptr, ptr, i32 } %65, 0
  %67 = call ptr @llvm.invariant.start.p0(i64 416, ptr %66)
  %68 = extractvalue { ptr, ptr, ptr, i32 } %65, 3
  %69 = getelementptr ptr, ptr %66, i32 %68
  %70 = getelementptr ptr, ptr %69, i32 1
  %71 = load ptr, ptr %70, align 8
  %72 = extractvalue { ptr, ptr, ptr, i32 } %65, 1
  %73 = call ptr %71(ptr %72)
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %75 = load ptr, ptr %74, align 8
  %76 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %75, 0
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %78 = load ptr, ptr %77, align 8
  %79 = insertvalue { ptr, ptr, ptr, i32 } %76, ptr %78, 1
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %81 = load ptr, ptr %80, align 8
  %82 = insertvalue { ptr, ptr, ptr, i32 } %79, ptr %81, 2
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %84 = load i32, ptr %83, align 4
  %85 = insertvalue { ptr, ptr, ptr, i32 } %82, i32 %84, 3
  %86 = alloca [0 x ptr], align 8
  %87 = call ptr @llvm.invariant.start.p0(i64 0, ptr %86)
  %88 = call ptr @llvm.invariant.start.p0(i64 192, ptr %75)
  %89 = getelementptr ptr, ptr %75, i32 %84
  %90 = getelementptr ptr, ptr %89, i32 10
  %91 = load ptr, ptr %90, align 8
  %92 = alloca [0 x ptr], align 8
  %93 = call ptr %91({ ptr, ptr, ptr, i32 } %85, ptr %92)
  %94 = call { ptr, ptr, ptr, i32 } %93({ ptr, ptr, ptr, i32 } %85, { ptr, ptr, ptr, i32 } %85, ptr %86)
  %95 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %94, ptr %95, align 8
  %96 = call ptr @llvm.invariant.start.p0(i64 16, ptr %95)
  %97 = alloca { ptr, ptr, ptr, i32 }, align 8
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %95, i32 0, i32 0
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 0
  %100 = load ptr, ptr %98, align 8
  store ptr %100, ptr %99, align 8
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %95, i32 0, i32 1
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %103 = load ptr, ptr %101, align 8
  store ptr %103, ptr %102, align 8
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %95, i32 0, i32 2
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 2
  %106 = load ptr, ptr %104, align 8
  store ptr %106, ptr %105, align 8
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %95, i32 0, i32 3
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  %109 = load i32, ptr %107, align 4
  store i32 %109, ptr %108, align 4
  call void @set_offset(ptr %97, ptr @IntIterator)
  %110 = call ptr @llvm.invariant.start.p0(i64 24, ptr %97)
  %111 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, i1 }, ptr null, i32 1) to i64))
  %112 = alloca { ptr, ptr, ptr, i32 }, align 8
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 1
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 3
  store ptr @InterleaveIterator, ptr %112, align 8
  store ptr %111, ptr %113, align 8
  store i32 7, ptr %114, align 4
  %115 = call ptr @llvm.invariant.start.p0(i64 16, ptr %112)
  %116 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %117 = extractvalue { ptr, ptr, ptr, i32 } %116, 0
  %118 = call ptr @llvm.invariant.start.p0(i64 416, ptr %117)
  %119 = extractvalue { ptr, ptr, ptr, i32 } %116, 3
  %120 = getelementptr ptr, ptr %117, i32 %119
  %121 = load ptr, ptr %120, align 8
  %122 = extractvalue { ptr, ptr, ptr, i32 } %116, 1
  %123 = call ptr %121(ptr %122)
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 0
  %125 = load ptr, ptr %124, align 8
  %126 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %125, 0
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 1
  %128 = load ptr, ptr %127, align 8
  %129 = insertvalue { ptr, ptr, ptr, i32 } %126, ptr %128, 1
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 2
  %131 = load ptr, ptr %130, align 8
  %132 = insertvalue { ptr, ptr, ptr, i32 } %129, ptr %131, 2
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 3
  %134 = load i32, ptr %133, align 4
  %135 = insertvalue { ptr, ptr, ptr, i32 } %132, i32 %134, 3
  %136 = alloca [0 x ptr], align 8
  %137 = call ptr @llvm.invariant.start.p0(i64 0, ptr %136)
  %138 = call ptr @llvm.invariant.start.p0(i64 192, ptr %125)
  %139 = getelementptr ptr, ptr %125, i32 %134
  %140 = getelementptr ptr, ptr %139, i32 10
  %141 = load ptr, ptr %140, align 8
  %142 = alloca [0 x ptr], align 8
  %143 = call ptr %141({ ptr, ptr, ptr, i32 } %135, ptr %142)
  %144 = call { ptr, ptr, ptr, i32 } %143({ ptr, ptr, ptr, i32 } %135, { ptr, ptr, ptr, i32 } %135, ptr %136)
  %145 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %144, ptr %145, align 8
  %146 = call ptr @llvm.invariant.start.p0(i64 16, ptr %145)
  %147 = alloca { ptr, ptr, ptr, i32 }, align 8
  %148 = getelementptr { ptr, ptr, ptr, i32 }, ptr %145, i32 0, i32 0
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %147, i32 0, i32 0
  %150 = load ptr, ptr %148, align 8
  store ptr %150, ptr %149, align 8
  %151 = getelementptr { ptr, ptr, ptr, i32 }, ptr %145, i32 0, i32 1
  %152 = getelementptr { ptr, ptr, ptr, i32 }, ptr %147, i32 0, i32 1
  %153 = load ptr, ptr %151, align 8
  store ptr %153, ptr %152, align 8
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %145, i32 0, i32 2
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %147, i32 0, i32 2
  %156 = load ptr, ptr %154, align 8
  store ptr %156, ptr %155, align 8
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %145, i32 0, i32 3
  %158 = getelementptr { ptr, ptr, ptr, i32 }, ptr %147, i32 0, i32 3
  %159 = load i32, ptr %157, align 4
  store i32 %159, ptr %158, align 4
  call void @set_offset(ptr %147, ptr @IntIterator)
  %160 = call ptr @llvm.invariant.start.p0(i64 24, ptr %147)
  %161 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %162 = extractvalue { ptr, ptr, ptr, i32 } %161, 0
  %163 = call ptr @llvm.invariant.start.p0(i64 416, ptr %162)
  %164 = extractvalue { ptr, ptr, ptr, i32 } %161, 3
  %165 = getelementptr ptr, ptr %162, i32 %164
  %166 = getelementptr ptr, ptr %165, i32 1
  %167 = load ptr, ptr %166, align 8
  %168 = extractvalue { ptr, ptr, ptr, i32 } %161, 1
  %169 = call ptr %167(ptr %168)
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %169, i32 0, i32 0
  %171 = load ptr, ptr %170, align 8
  %172 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %171, 0
  %173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %169, i32 0, i32 1
  %174 = load ptr, ptr %173, align 8
  %175 = insertvalue { ptr, ptr, ptr, i32 } %172, ptr %174, 1
  %176 = getelementptr { ptr, ptr, ptr, i32 }, ptr %169, i32 0, i32 2
  %177 = load ptr, ptr %176, align 8
  %178 = insertvalue { ptr, ptr, ptr, i32 } %175, ptr %177, 2
  %179 = getelementptr { ptr, ptr, ptr, i32 }, ptr %169, i32 0, i32 3
  %180 = load i32, ptr %179, align 4
  %181 = insertvalue { ptr, ptr, ptr, i32 } %178, i32 %180, 3
  %182 = alloca [0 x ptr], align 8
  %183 = call ptr @llvm.invariant.start.p0(i64 0, ptr %182)
  %184 = call ptr @llvm.invariant.start.p0(i64 192, ptr %171)
  %185 = getelementptr ptr, ptr %171, i32 %180
  %186 = getelementptr ptr, ptr %185, i32 10
  %187 = load ptr, ptr %186, align 8
  %188 = alloca [0 x ptr], align 8
  %189 = call ptr %187({ ptr, ptr, ptr, i32 } %181, ptr %188)
  %190 = call { ptr, ptr, ptr, i32 } %189({ ptr, ptr, ptr, i32 } %181, { ptr, ptr, ptr, i32 } %181, ptr %182)
  %191 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %190, ptr %191, align 8
  %192 = call ptr @llvm.invariant.start.p0(i64 16, ptr %191)
  %193 = alloca { ptr, ptr, ptr, i32 }, align 8
  %194 = getelementptr { ptr, ptr, ptr, i32 }, ptr %191, i32 0, i32 0
  %195 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 0
  %196 = load ptr, ptr %194, align 8
  store ptr %196, ptr %195, align 8
  %197 = getelementptr { ptr, ptr, ptr, i32 }, ptr %191, i32 0, i32 1
  %198 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 1
  %199 = load ptr, ptr %197, align 8
  store ptr %199, ptr %198, align 8
  %200 = getelementptr { ptr, ptr, ptr, i32 }, ptr %191, i32 0, i32 2
  %201 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 2
  %202 = load ptr, ptr %200, align 8
  store ptr %202, ptr %201, align 8
  %203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %191, i32 0, i32 3
  %204 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 3
  %205 = load i32, ptr %203, align 4
  store i32 %205, ptr %204, align 4
  call void @set_offset(ptr %193, ptr @IntIterator)
  %206 = call ptr @llvm.invariant.start.p0(i64 24, ptr %193)
  %207 = alloca { ptr, ptr, ptr, i32 }, align 8
  %208 = getelementptr { ptr, ptr, ptr, i32 }, ptr %147, i32 0, i32 0
  %209 = getelementptr { ptr, ptr, ptr, i32 }, ptr %207, i32 0, i32 0
  %210 = load ptr, ptr %208, align 8
  store ptr %210, ptr %209, align 8
  %211 = getelementptr { ptr, ptr, ptr, i32 }, ptr %147, i32 0, i32 1
  %212 = getelementptr { ptr, ptr, ptr, i32 }, ptr %207, i32 0, i32 1
  %213 = load ptr, ptr %211, align 8
  store ptr %213, ptr %212, align 8
  %214 = getelementptr { ptr, ptr, ptr, i32 }, ptr %147, i32 0, i32 2
  %215 = getelementptr { ptr, ptr, ptr, i32 }, ptr %207, i32 0, i32 2
  %216 = load ptr, ptr %214, align 8
  store ptr %216, ptr %215, align 8
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %147, i32 0, i32 3
  %218 = getelementptr { ptr, ptr, ptr, i32 }, ptr %207, i32 0, i32 3
  %219 = load i32, ptr %217, align 4
  store i32 %219, ptr %218, align 4
  call void @set_offset(ptr %207, ptr @IntIterator)
  %220 = call ptr @llvm.invariant.start.p0(i64 24, ptr %207)
  %221 = getelementptr { ptr, ptr, ptr, i32 }, ptr %207, i32 0, i32 0
  %222 = load ptr, ptr %221, align 8
  %223 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %222, 0
  %224 = getelementptr { ptr, ptr, ptr, i32 }, ptr %207, i32 0, i32 1
  %225 = load ptr, ptr %224, align 8
  %226 = insertvalue { ptr, ptr, ptr, i32 } %223, ptr %225, 1
  %227 = getelementptr { ptr, ptr, ptr, i32 }, ptr %207, i32 0, i32 2
  %228 = load ptr, ptr %227, align 8
  %229 = insertvalue { ptr, ptr, ptr, i32 } %226, ptr %228, 2
  %230 = getelementptr { ptr, ptr, ptr, i32 }, ptr %207, i32 0, i32 3
  %231 = load i32, ptr %230, align 4
  %232 = insertvalue { ptr, ptr, ptr, i32 } %229, i32 %231, 3
  %233 = alloca { ptr, ptr, ptr, i32 }, align 8
  %234 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 0
  %235 = getelementptr { ptr, ptr, ptr, i32 }, ptr %233, i32 0, i32 0
  %236 = load ptr, ptr %234, align 8
  store ptr %236, ptr %235, align 8
  %237 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 1
  %238 = getelementptr { ptr, ptr, ptr, i32 }, ptr %233, i32 0, i32 1
  %239 = load ptr, ptr %237, align 8
  store ptr %239, ptr %238, align 8
  %240 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 2
  %241 = getelementptr { ptr, ptr, ptr, i32 }, ptr %233, i32 0, i32 2
  %242 = load ptr, ptr %240, align 8
  store ptr %242, ptr %241, align 8
  %243 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 3
  %244 = getelementptr { ptr, ptr, ptr, i32 }, ptr %233, i32 0, i32 3
  %245 = load i32, ptr %243, align 4
  store i32 %245, ptr %244, align 4
  call void @set_offset(ptr %233, ptr @IntIterator)
  %246 = call ptr @llvm.invariant.start.p0(i64 24, ptr %233)
  %247 = getelementptr { ptr, ptr, ptr, i32 }, ptr %233, i32 0, i32 0
  %248 = load ptr, ptr %247, align 8
  %249 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %248, 0
  %250 = getelementptr { ptr, ptr, ptr, i32 }, ptr %233, i32 0, i32 1
  %251 = load ptr, ptr %250, align 8
  %252 = insertvalue { ptr, ptr, ptr, i32 } %249, ptr %251, 1
  %253 = getelementptr { ptr, ptr, ptr, i32 }, ptr %233, i32 0, i32 2
  %254 = load ptr, ptr %253, align 8
  %255 = insertvalue { ptr, ptr, ptr, i32 } %252, ptr %254, 2
  %256 = getelementptr { ptr, ptr, ptr, i32 }, ptr %233, i32 0, i32 3
  %257 = load i32, ptr %256, align 4
  %258 = insertvalue { ptr, ptr, ptr, i32 } %255, i32 %257, 3
  %259 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 0
  %260 = load ptr, ptr %259, align 8
  %261 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %260, 0
  %262 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 1
  %263 = load ptr, ptr %262, align 8
  %264 = insertvalue { ptr, ptr, ptr, i32 } %261, ptr %263, 1
  %265 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 2
  %266 = load ptr, ptr %265, align 8
  %267 = insertvalue { ptr, ptr, ptr, i32 } %264, ptr %266, 2
  %268 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 3
  %269 = load i32, ptr %268, align 4
  %270 = insertvalue { ptr, ptr, ptr, i32 } %267, i32 %269, 3
  %271 = alloca [2 x ptr], align 8
  %272 = call ptr @llvm.invariant.start.p0(i64 16, ptr %271)
  %273 = getelementptr [2 x ptr], ptr %271, i32 0, i32 1
  store ptr @_parameterization_IntIterator, ptr %273, align 8
  %274 = getelementptr [2 x ptr], ptr %271, i32 0, i32 0
  store ptr @_parameterization_IntIterator, ptr %274, align 8
  %275 = call ptr @llvm.invariant.start.p0(i64 72, ptr %260)
  %276 = getelementptr ptr, ptr %260, i32 %269
  %277 = getelementptr ptr, ptr %276, i32 3
  %278 = load ptr, ptr %277, align 8
  %279 = alloca [2 x ptr], align 8
  %280 = getelementptr [2 x ptr], ptr %279, i32 0, i32 0
  store ptr %222, ptr %280, align 8
  %281 = getelementptr [2 x ptr], ptr %279, i32 0, i32 1
  store ptr %248, ptr %281, align 8
  %282 = call ptr %278({ ptr, ptr, ptr, i32 } %270, ptr %279, { ptr, ptr, ptr, i32 } %232, { ptr, ptr, ptr, i32 } %258)
  call void %282({ ptr, ptr, ptr, i32 } %270, { ptr, ptr, ptr, i32 } %270, ptr %271, { ptr, ptr, ptr, i32 } %232, { ptr, ptr, ptr, i32 } %258)
  %283 = alloca { ptr, ptr, ptr, i32 }, align 8
  %284 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 0
  %285 = getelementptr { ptr, ptr, ptr, i32 }, ptr %283, i32 0, i32 0
  %286 = load ptr, ptr %284, align 8
  store ptr %286, ptr %285, align 8
  %287 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 1
  %288 = getelementptr { ptr, ptr, ptr, i32 }, ptr %283, i32 0, i32 1
  %289 = load ptr, ptr %287, align 8
  store ptr %289, ptr %288, align 8
  %290 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 2
  %291 = getelementptr { ptr, ptr, ptr, i32 }, ptr %283, i32 0, i32 2
  %292 = load ptr, ptr %290, align 8
  store ptr %292, ptr %291, align 8
  %293 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 3
  %294 = getelementptr { ptr, ptr, ptr, i32 }, ptr %283, i32 0, i32 3
  %295 = load i32, ptr %293, align 4
  store i32 %295, ptr %294, align 4
  call void @set_offset(ptr %283, ptr @Iterator)
  %296 = call ptr @llvm.invariant.start.p0(i64 24, ptr %283)
  %297 = getelementptr { ptr, ptr, ptr, i32 }, ptr %283, i32 0, i32 0
  %298 = load ptr, ptr %297, align 8
  %299 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %298, 0
  %300 = getelementptr { ptr, ptr, ptr, i32 }, ptr %283, i32 0, i32 1
  %301 = load ptr, ptr %300, align 8
  %302 = insertvalue { ptr, ptr, ptr, i32 } %299, ptr %301, 1
  %303 = getelementptr { ptr, ptr, ptr, i32 }, ptr %283, i32 0, i32 2
  %304 = load ptr, ptr %303, align 8
  %305 = insertvalue { ptr, ptr, ptr, i32 } %302, ptr %304, 2
  %306 = getelementptr { ptr, ptr, ptr, i32 }, ptr %283, i32 0, i32 3
  %307 = load i32, ptr %306, align 4
  %308 = insertvalue { ptr, ptr, ptr, i32 } %305, i32 %307, 3
  ret { ptr, ptr, ptr, i32 } %308
}

define ptr @InterleaveIterator_field_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, i1 }, ptr %0, i32 0, i32 0
  ret ptr %2
}

define ptr @InterleaveIterator_field_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, i1 }, ptr %0, i32 0, i32 1
  ret ptr %2
}

define ptr @InterleaveIterator_field_on_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, i1 }, ptr %0, i32 0, i32 2
  ret ptr %2
}

define ptr @InterleaveIterator_B_init_firstIntIterator_secondIntIterator({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2, { ptr, ptr, ptr, i32 } %3) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = getelementptr [2 x ptr], ptr %1, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr ptr, ptr %7, i32 1
  %9 = getelementptr ptr, ptr %7, i32 2
  %10 = getelementptr ptr, ptr %7, i32 3
  %11 = getelementptr ptr, ptr %7, i32 4
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 -933084275656658555, i64 ptrtoint (ptr @IntIterator to i64), ptr %15)
  %17 = getelementptr [2 x ptr], ptr %1, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr ptr, ptr %18, i32 1
  %20 = getelementptr ptr, ptr %18, i32 2
  %21 = getelementptr ptr, ptr %18, i32 3
  %22 = getelementptr ptr, ptr %18, i32 4
  %23 = load i64, ptr %19, align 4
  %24 = load i64, ptr %20, align 4
  %25 = load ptr, ptr %21, align 8
  %26 = load ptr, ptr %22, align 8
  %27 = call i1 @subtype_test_wrapper(ptr %25, i64 %24, i64 %23, i64 -933084275656658555, i64 ptrtoint (ptr @IntIterator to i64), ptr %26)
  %28 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %29 = getelementptr [9 x ptr], ptr %28, i32 0, i32 5
  %30 = getelementptr ptr, ptr %29, i32 7
  %31 = load ptr, ptr %30, align 8
  ret ptr %31
}

define ptr @InterleaveIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [9 x ptr], ptr %4, i32 0, i32 6
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @InterleaveIterator_init_firstIntIterator_secondIntIterator({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @InterleaveIterator)
  %21 = call ptr @llvm.invariant.start.p0(i64 24, ptr %8)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %22, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 16, ptr %22)
  %24 = alloca { ptr, ptr, ptr, i32 }, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %36 = load i32, ptr %34, align 4
  store i32 %36, ptr %35, align 4
  call void @set_offset(ptr %24, ptr @IntIterator)
  %37 = call ptr @llvm.invariant.start.p0(i64 24, ptr %24)
  %38 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %39 = extractvalue { ptr, ptr, ptr, i32 } %38, 0
  %40 = call ptr @llvm.invariant.start.p0(i64 72, ptr %39)
  %41 = extractvalue { ptr, ptr, ptr, i32 } %38, 3
  %42 = getelementptr ptr, ptr %39, i32 %41
  %43 = load ptr, ptr %42, align 8
  %44 = extractvalue { ptr, ptr, ptr, i32 } %38, 1
  %45 = call ptr %43(ptr %44)
  %46 = alloca { ptr, ptr, ptr, i32 }, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %49 = load ptr, ptr %47, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %52 = load ptr, ptr %50, align 8
  store ptr %52, ptr %51, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %55 = load ptr, ptr %53, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %58 = load i32, ptr %56, align 4
  store i32 %58, ptr %57, align 4
  call void @set_offset(ptr %46, ptr @IntIterator)
  %59 = call ptr @llvm.invariant.start.p0(i64 24, ptr %46)
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %62 = load ptr, ptr %60, align 8
  store ptr %62, ptr %61, align 8
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %65 = load ptr, ptr %63, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %68 = load ptr, ptr %66, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %71 = load i32, ptr %69, align 4
  store i32 %71, ptr %70, align 4
  %72 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %72, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 16, ptr %72)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 0
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 1
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 2
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %83 = load ptr, ptr %81, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 3
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %86 = load i32, ptr %84, align 4
  store i32 %86, ptr %85, align 4
  call void @set_offset(ptr %74, ptr @IntIterator)
  %87 = call ptr @llvm.invariant.start.p0(i64 24, ptr %74)
  %88 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %89 = extractvalue { ptr, ptr, ptr, i32 } %88, 0
  %90 = call ptr @llvm.invariant.start.p0(i64 72, ptr %89)
  %91 = extractvalue { ptr, ptr, ptr, i32 } %88, 3
  %92 = getelementptr ptr, ptr %89, i32 %91
  %93 = getelementptr ptr, ptr %92, i32 1
  %94 = load ptr, ptr %93, align 8
  %95 = extractvalue { ptr, ptr, ptr, i32 } %88, 1
  %96 = call ptr %94(ptr %95)
  %97 = alloca { ptr, ptr, ptr, i32 }, align 8
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 0
  %100 = load ptr, ptr %98, align 8
  store ptr %100, ptr %99, align 8
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %103 = load ptr, ptr %101, align 8
  store ptr %103, ptr %102, align 8
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 2
  %106 = load ptr, ptr %104, align 8
  store ptr %106, ptr %105, align 8
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  %109 = load i32, ptr %107, align 4
  store i32 %109, ptr %108, align 4
  call void @set_offset(ptr %97, ptr @IntIterator)
  %110 = call ptr @llvm.invariant.start.p0(i64 24, ptr %97)
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 0
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 0
  %113 = load ptr, ptr %111, align 8
  store ptr %113, ptr %112, align 8
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 1
  %116 = load ptr, ptr %114, align 8
  store ptr %116, ptr %115, align 8
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 2
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 2
  %119 = load ptr, ptr %117, align 8
  store ptr %119, ptr %118, align 8
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 3
  %122 = load i32, ptr %120, align 4
  store i32 %122, ptr %121, align 4
  %123 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %124 = extractvalue { ptr, ptr, ptr, i32 } %123, 0
  %125 = call ptr @llvm.invariant.start.p0(i64 72, ptr %124)
  %126 = extractvalue { ptr, ptr, ptr, i32 } %123, 3
  %127 = getelementptr ptr, ptr %124, i32 %126
  %128 = getelementptr ptr, ptr %127, i32 2
  %129 = load ptr, ptr %128, align 8
  %130 = extractvalue { ptr, ptr, ptr, i32 } %123, 1
  %131 = call ptr %129(ptr %130)
  store i1 true, ptr %131, align 1
  ret void
}

define { ptr, i32 } @InterleaveIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i32 }, align 8
  %.reg2mem1 = alloca { ptr, i32 }, align 8
  %.reg2mem3 = alloca { ptr, i32 }, align 8
  %.reg2mem5 = alloca { ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @InterleaveIterator)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 72, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 2
  %26 = load ptr, ptr %25, align 8
  %27 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %28 = call ptr %26(ptr %27)
  %29 = load i1, ptr %28, align 1
  %30 = alloca i1, align 1
  %31 = alloca [0 x ptr], align 8
  %32 = alloca [0 x ptr], align 8
  %33 = alloca { ptr, i32 }, align 8
  %34 = alloca i1, align 1
  %35 = alloca [0 x ptr], align 8
  %36 = alloca [0 x ptr], align 8
  %37 = alloca { ptr, i32 }, align 8
  br i1 %29, label %38, label %81

38:                                               ; preds = %3
  store i1 false, ptr %30, align 1
  %39 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %40 = extractvalue { ptr, ptr, ptr, i32 } %39, 0
  %41 = call ptr @llvm.invariant.start.p0(i64 72, ptr %40)
  %42 = extractvalue { ptr, ptr, ptr, i32 } %39, 3
  %43 = getelementptr ptr, ptr %40, i32 %42
  %44 = getelementptr ptr, ptr %43, i32 2
  %45 = load ptr, ptr %44, align 8
  %46 = extractvalue { ptr, ptr, ptr, i32 } %39, 1
  %47 = call ptr %45(ptr %46)
  %48 = load i1, ptr %30, align 1
  store i1 %48, ptr %47, align 1
  %49 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %50 = extractvalue { ptr, ptr, ptr, i32 } %49, 0
  %51 = call ptr @llvm.invariant.start.p0(i64 72, ptr %50)
  %52 = extractvalue { ptr, ptr, ptr, i32 } %49, 3
  %53 = getelementptr ptr, ptr %50, i32 %52
  %54 = load ptr, ptr %53, align 8
  %55 = extractvalue { ptr, ptr, ptr, i32 } %49, 1
  %56 = call ptr %54(ptr %55)
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 0
  %58 = load ptr, ptr %57, align 8
  %59 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %58, 0
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 1
  %61 = load ptr, ptr %60, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } %59, ptr %61, 1
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 2
  %64 = load ptr, ptr %63, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %62, ptr %64, 2
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 3
  %67 = load i32, ptr %66, align 4
  %68 = insertvalue { ptr, ptr, ptr, i32 } %65, i32 %67, 3
  %69 = call ptr @llvm.invariant.start.p0(i64 0, ptr %31)
  %70 = call ptr @llvm.invariant.start.p0(i64 16, ptr %58)
  %71 = getelementptr ptr, ptr %58, i32 %67
  %72 = load ptr, ptr %71, align 8
  %73 = call ptr %72({ ptr, ptr, ptr, i32 } %68, ptr %32)
  %74 = call { ptr, i32 } %73({ ptr, ptr, ptr, i32 } %68, { ptr, ptr, ptr, i32 } %68, ptr %31)
  store { ptr, i32 } %74, ptr %33, align 8
  %75 = getelementptr { ptr, i32 }, ptr %33, i32 0, i32 0
  %76 = load ptr, ptr %75, align 8
  %77 = insertvalue { ptr, i32 } undef, ptr %76, 0
  %78 = getelementptr { ptr, i32 }, ptr %33, i32 0, i32 1
  %79 = load i32, ptr %78, align 4
  %80 = insertvalue { ptr, i32 } %77, i32 %79, 1
  store { ptr, i32 } %80, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i32 }, ptr %.reg2mem3, align 8
  store { ptr, i32 } %.reload4, ptr %.reg2mem5, align 8
  br label %125

81:                                               ; preds = %3
  store i1 true, ptr %34, align 1
  %82 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %83 = extractvalue { ptr, ptr, ptr, i32 } %82, 0
  %84 = call ptr @llvm.invariant.start.p0(i64 72, ptr %83)
  %85 = extractvalue { ptr, ptr, ptr, i32 } %82, 3
  %86 = getelementptr ptr, ptr %83, i32 %85
  %87 = getelementptr ptr, ptr %86, i32 2
  %88 = load ptr, ptr %87, align 8
  %89 = extractvalue { ptr, ptr, ptr, i32 } %82, 1
  %90 = call ptr %88(ptr %89)
  %91 = load i1, ptr %34, align 1
  store i1 %91, ptr %90, align 1
  %92 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %93 = extractvalue { ptr, ptr, ptr, i32 } %92, 0
  %94 = call ptr @llvm.invariant.start.p0(i64 72, ptr %93)
  %95 = extractvalue { ptr, ptr, ptr, i32 } %92, 3
  %96 = getelementptr ptr, ptr %93, i32 %95
  %97 = getelementptr ptr, ptr %96, i32 1
  %98 = load ptr, ptr %97, align 8
  %99 = extractvalue { ptr, ptr, ptr, i32 } %92, 1
  %100 = call ptr %98(ptr %99)
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %100, i32 0, i32 0
  %102 = load ptr, ptr %101, align 8
  %103 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %102, 0
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %100, i32 0, i32 1
  %105 = load ptr, ptr %104, align 8
  %106 = insertvalue { ptr, ptr, ptr, i32 } %103, ptr %105, 1
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %100, i32 0, i32 2
  %108 = load ptr, ptr %107, align 8
  %109 = insertvalue { ptr, ptr, ptr, i32 } %106, ptr %108, 2
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %100, i32 0, i32 3
  %111 = load i32, ptr %110, align 4
  %112 = insertvalue { ptr, ptr, ptr, i32 } %109, i32 %111, 3
  %113 = call ptr @llvm.invariant.start.p0(i64 0, ptr %35)
  %114 = call ptr @llvm.invariant.start.p0(i64 16, ptr %102)
  %115 = getelementptr ptr, ptr %102, i32 %111
  %116 = load ptr, ptr %115, align 8
  %117 = call ptr %116({ ptr, ptr, ptr, i32 } %112, ptr %36)
  %118 = call { ptr, i32 } %117({ ptr, ptr, ptr, i32 } %112, { ptr, ptr, ptr, i32 } %112, ptr %35)
  store { ptr, i32 } %118, ptr %37, align 8
  %119 = getelementptr { ptr, i32 }, ptr %37, i32 0, i32 0
  %120 = load ptr, ptr %119, align 8
  %121 = insertvalue { ptr, i32 } undef, ptr %120, 0
  %122 = getelementptr { ptr, i32 }, ptr %37, i32 0, i32 1
  %123 = load i32, ptr %122, align 4
  %124 = insertvalue { ptr, i32 } %121, i32 %123, 1
  store { ptr, i32 } %124, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i32 }, ptr %.reg2mem1, align 8
  store { ptr, i32 } %.reload2, ptr %.reg2mem5, align 8
  br label %125

125:                                              ; preds = %81, %38
  %.reload6 = load { ptr, i32 }, ptr %.reg2mem5, align 8
  store { ptr, i32 } %.reload6, ptr %.reg2mem, align 8
  br label %126

126:                                              ; preds = %125
  %.reload = load { ptr, i32 }, ptr %.reg2mem, align 8
  ret { ptr, i32 } %.reload
}

define ptr @ChainIterable_field_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 0
  ret ptr %2
}

define ptr @ChainIterable_field_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 1
  ret ptr %2
}

define ptr @ChainIterable_B_init_firstIntIterable_secondIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2, { ptr, ptr, ptr, i32 } %3) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = getelementptr [2 x ptr], ptr %1, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr ptr, ptr %7, i32 1
  %9 = getelementptr ptr, ptr %7, i32 2
  %10 = getelementptr ptr, ptr %7, i32 3
  %11 = getelementptr ptr, ptr %7, i32 4
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %15)
  %17 = getelementptr [2 x ptr], ptr %1, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr ptr, ptr %18, i32 1
  %20 = getelementptr ptr, ptr %18, i32 2
  %21 = getelementptr ptr, ptr %18, i32 3
  %22 = getelementptr ptr, ptr %18, i32 4
  %23 = load i64, ptr %19, align 4
  %24 = load i64, ptr %20, align 4
  %25 = load ptr, ptr %21, align 8
  %26 = load ptr, ptr %22, align 8
  %27 = call i1 @subtype_test_wrapper(ptr %25, i64 %24, i64 %23, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %26)
  %28 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %29 = getelementptr [52 x ptr], ptr %28, i32 0, i32 14
  %30 = getelementptr ptr, ptr %29, i32 7
  %31 = load ptr, ptr %30, align 8
  ret ptr %31
}

define ptr @ChainIterable_B_each_fFunctionPtri32_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 15
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @ChainIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1, i32 %2, { ptr } %3) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = getelementptr [2 x ptr], ptr %1, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr ptr, ptr %7, i32 1
  %9 = getelementptr ptr, ptr %7, i32 2
  %10 = getelementptr ptr, ptr %7, i32 3
  %11 = getelementptr ptr, ptr %7, i32 4
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %15)
  %17 = getelementptr [2 x ptr], ptr %1, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr ptr, ptr %18, i32 1
  %20 = getelementptr ptr, ptr %18, i32 2
  %21 = getelementptr ptr, ptr %18, i32 3
  %22 = getelementptr ptr, ptr %18, i32 4
  %23 = load i64, ptr %19, align 4
  %24 = load i64, ptr %20, align 4
  %25 = load ptr, ptr %21, align 8
  %26 = load ptr, ptr %22, align 8
  %27 = call i1 @subtype_test_wrapper(ptr %25, i64 %24, i64 %23, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %26)
  %28 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %29 = getelementptr [52 x ptr], ptr %28, i32 0, i32 16
  %30 = getelementptr ptr, ptr %29, i32 7
  %31 = load ptr, ptr %30, align 8
  ret ptr %31
}

define ptr @ChainIterable_B_all_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 17
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @ChainIterable_B_any_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 18
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @ChainIterable_B_map_fFunctionPtri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 19
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @ChainIterable_B_filter_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 20
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @ChainIterable_B_chain_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 21
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @ChainIterable_B_interleave_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 22
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @ChainIterable_B_zip_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 23
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @ChainIterable_B_product_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 24
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @ChainIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [52 x ptr], ptr %4, i32 0, i32 25
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @ChainIterable_init_firstIntIterable_secondIntIterable({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @ChainIterable)
  %21 = call ptr @llvm.invariant.start.p0(i64 24, ptr %8)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %22, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 16, ptr %22)
  %24 = alloca { ptr, ptr, ptr, i32 }, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %36 = load i32, ptr %34, align 4
  store i32 %36, ptr %35, align 4
  call void @set_offset(ptr %24, ptr @IntIterable)
  %37 = call ptr @llvm.invariant.start.p0(i64 24, ptr %24)
  %38 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %39 = extractvalue { ptr, ptr, ptr, i32 } %38, 0
  %40 = call ptr @llvm.invariant.start.p0(i64 416, ptr %39)
  %41 = extractvalue { ptr, ptr, ptr, i32 } %38, 3
  %42 = getelementptr ptr, ptr %39, i32 %41
  %43 = load ptr, ptr %42, align 8
  %44 = extractvalue { ptr, ptr, ptr, i32 } %38, 1
  %45 = call ptr %43(ptr %44)
  %46 = alloca { ptr, ptr, ptr, i32 }, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %49 = load ptr, ptr %47, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %52 = load ptr, ptr %50, align 8
  store ptr %52, ptr %51, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %55 = load ptr, ptr %53, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %58 = load i32, ptr %56, align 4
  store i32 %58, ptr %57, align 4
  call void @set_offset(ptr %46, ptr @IntIterable)
  %59 = call ptr @llvm.invariant.start.p0(i64 24, ptr %46)
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %62 = load ptr, ptr %60, align 8
  store ptr %62, ptr %61, align 8
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %65 = load ptr, ptr %63, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %68 = load ptr, ptr %66, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %71 = load i32, ptr %69, align 4
  store i32 %71, ptr %70, align 4
  %72 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %72, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 16, ptr %72)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 0
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 1
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 2
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %83 = load ptr, ptr %81, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 3
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %86 = load i32, ptr %84, align 4
  store i32 %86, ptr %85, align 4
  call void @set_offset(ptr %74, ptr @IntIterable)
  %87 = call ptr @llvm.invariant.start.p0(i64 24, ptr %74)
  %88 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %89 = extractvalue { ptr, ptr, ptr, i32 } %88, 0
  %90 = call ptr @llvm.invariant.start.p0(i64 416, ptr %89)
  %91 = extractvalue { ptr, ptr, ptr, i32 } %88, 3
  %92 = getelementptr ptr, ptr %89, i32 %91
  %93 = getelementptr ptr, ptr %92, i32 1
  %94 = load ptr, ptr %93, align 8
  %95 = extractvalue { ptr, ptr, ptr, i32 } %88, 1
  %96 = call ptr %94(ptr %95)
  %97 = alloca { ptr, ptr, ptr, i32 }, align 8
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 0
  %100 = load ptr, ptr %98, align 8
  store ptr %100, ptr %99, align 8
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %103 = load ptr, ptr %101, align 8
  store ptr %103, ptr %102, align 8
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 2
  %106 = load ptr, ptr %104, align 8
  store ptr %106, ptr %105, align 8
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  %109 = load i32, ptr %107, align 4
  store i32 %109, ptr %108, align 4
  call void @set_offset(ptr %97, ptr @IntIterable)
  %110 = call ptr @llvm.invariant.start.p0(i64 24, ptr %97)
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 0
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 0
  %113 = load ptr, ptr %111, align 8
  store ptr %113, ptr %112, align 8
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 1
  %116 = load ptr, ptr %114, align 8
  store ptr %116, ptr %115, align 8
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 2
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 2
  %119 = load ptr, ptr %117, align 8
  store ptr %119, ptr %118, align 8
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 3
  %122 = load i32, ptr %120, align 4
  store i32 %122, ptr %121, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ChainIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @ChainIterable)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 416, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %27 = call ptr %25(ptr %26)
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %29, 0
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %32 = load ptr, ptr %31, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %32, 1
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %35 = load ptr, ptr %34, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %35, 2
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %38 = load i32, ptr %37, align 4
  %39 = insertvalue { ptr, ptr, ptr, i32 } %36, i32 %38, 3
  %40 = alloca [0 x ptr], align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 0, ptr %40)
  %42 = call ptr @llvm.invariant.start.p0(i64 192, ptr %29)
  %43 = getelementptr ptr, ptr %29, i32 %38
  %44 = getelementptr ptr, ptr %43, i32 10
  %45 = load ptr, ptr %44, align 8
  %46 = alloca [0 x ptr], align 8
  %47 = call ptr %45({ ptr, ptr, ptr, i32 } %39, ptr %46)
  %48 = call { ptr, ptr, ptr, i32 } %47({ ptr, ptr, ptr, i32 } %39, { ptr, ptr, ptr, i32 } %39, ptr %40)
  %49 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %48, ptr %49, align 8
  %50 = call ptr @llvm.invariant.start.p0(i64 16, ptr %49)
  %51 = alloca { ptr, ptr, ptr, i32 }, align 8
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 0
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 0
  %54 = load ptr, ptr %52, align 8
  store ptr %54, ptr %53, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 1
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 1
  %57 = load ptr, ptr %55, align 8
  store ptr %57, ptr %56, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 2
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 2
  %60 = load ptr, ptr %58, align 8
  store ptr %60, ptr %59, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 3
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 3
  %63 = load i32, ptr %61, align 4
  store i32 %63, ptr %62, align 4
  call void @set_offset(ptr %51, ptr @IntIterator)
  %64 = call ptr @llvm.invariant.start.p0(i64 24, ptr %51)
  %65 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %66 = extractvalue { ptr, ptr, ptr, i32 } %65, 0
  %67 = call ptr @llvm.invariant.start.p0(i64 416, ptr %66)
  %68 = extractvalue { ptr, ptr, ptr, i32 } %65, 3
  %69 = getelementptr ptr, ptr %66, i32 %68
  %70 = getelementptr ptr, ptr %69, i32 1
  %71 = load ptr, ptr %70, align 8
  %72 = extractvalue { ptr, ptr, ptr, i32 } %65, 1
  %73 = call ptr %71(ptr %72)
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %75 = load ptr, ptr %74, align 8
  %76 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %75, 0
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %78 = load ptr, ptr %77, align 8
  %79 = insertvalue { ptr, ptr, ptr, i32 } %76, ptr %78, 1
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %81 = load ptr, ptr %80, align 8
  %82 = insertvalue { ptr, ptr, ptr, i32 } %79, ptr %81, 2
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %84 = load i32, ptr %83, align 4
  %85 = insertvalue { ptr, ptr, ptr, i32 } %82, i32 %84, 3
  %86 = alloca [0 x ptr], align 8
  %87 = call ptr @llvm.invariant.start.p0(i64 0, ptr %86)
  %88 = call ptr @llvm.invariant.start.p0(i64 192, ptr %75)
  %89 = getelementptr ptr, ptr %75, i32 %84
  %90 = getelementptr ptr, ptr %89, i32 10
  %91 = load ptr, ptr %90, align 8
  %92 = alloca [0 x ptr], align 8
  %93 = call ptr %91({ ptr, ptr, ptr, i32 } %85, ptr %92)
  %94 = call { ptr, ptr, ptr, i32 } %93({ ptr, ptr, ptr, i32 } %85, { ptr, ptr, ptr, i32 } %85, ptr %86)
  %95 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %94, ptr %95, align 8
  %96 = call ptr @llvm.invariant.start.p0(i64 16, ptr %95)
  %97 = alloca { ptr, ptr, ptr, i32 }, align 8
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %95, i32 0, i32 0
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 0
  %100 = load ptr, ptr %98, align 8
  store ptr %100, ptr %99, align 8
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %95, i32 0, i32 1
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %103 = load ptr, ptr %101, align 8
  store ptr %103, ptr %102, align 8
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %95, i32 0, i32 2
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 2
  %106 = load ptr, ptr %104, align 8
  store ptr %106, ptr %105, align 8
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %95, i32 0, i32 3
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  %109 = load i32, ptr %107, align 4
  store i32 %109, ptr %108, align 4
  call void @set_offset(ptr %97, ptr @IntIterator)
  %110 = call ptr @llvm.invariant.start.p0(i64 24, ptr %97)
  %111 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, i1 }, ptr null, i32 1) to i64))
  %112 = alloca { ptr, ptr, ptr, i32 }, align 8
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 1
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 3
  store ptr @ChainIterator, ptr %112, align 8
  store ptr %111, ptr %113, align 8
  store i32 7, ptr %114, align 4
  %115 = call ptr @llvm.invariant.start.p0(i64 16, ptr %112)
  %116 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %117 = extractvalue { ptr, ptr, ptr, i32 } %116, 0
  %118 = call ptr @llvm.invariant.start.p0(i64 416, ptr %117)
  %119 = extractvalue { ptr, ptr, ptr, i32 } %116, 3
  %120 = getelementptr ptr, ptr %117, i32 %119
  %121 = load ptr, ptr %120, align 8
  %122 = extractvalue { ptr, ptr, ptr, i32 } %116, 1
  %123 = call ptr %121(ptr %122)
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 0
  %125 = load ptr, ptr %124, align 8
  %126 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %125, 0
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 1
  %128 = load ptr, ptr %127, align 8
  %129 = insertvalue { ptr, ptr, ptr, i32 } %126, ptr %128, 1
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 2
  %131 = load ptr, ptr %130, align 8
  %132 = insertvalue { ptr, ptr, ptr, i32 } %129, ptr %131, 2
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 3
  %134 = load i32, ptr %133, align 4
  %135 = insertvalue { ptr, ptr, ptr, i32 } %132, i32 %134, 3
  %136 = alloca [0 x ptr], align 8
  %137 = call ptr @llvm.invariant.start.p0(i64 0, ptr %136)
  %138 = call ptr @llvm.invariant.start.p0(i64 192, ptr %125)
  %139 = getelementptr ptr, ptr %125, i32 %134
  %140 = getelementptr ptr, ptr %139, i32 10
  %141 = load ptr, ptr %140, align 8
  %142 = alloca [0 x ptr], align 8
  %143 = call ptr %141({ ptr, ptr, ptr, i32 } %135, ptr %142)
  %144 = call { ptr, ptr, ptr, i32 } %143({ ptr, ptr, ptr, i32 } %135, { ptr, ptr, ptr, i32 } %135, ptr %136)
  %145 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %144, ptr %145, align 8
  %146 = call ptr @llvm.invariant.start.p0(i64 16, ptr %145)
  %147 = alloca { ptr, ptr, ptr, i32 }, align 8
  %148 = getelementptr { ptr, ptr, ptr, i32 }, ptr %145, i32 0, i32 0
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %147, i32 0, i32 0
  %150 = load ptr, ptr %148, align 8
  store ptr %150, ptr %149, align 8
  %151 = getelementptr { ptr, ptr, ptr, i32 }, ptr %145, i32 0, i32 1
  %152 = getelementptr { ptr, ptr, ptr, i32 }, ptr %147, i32 0, i32 1
  %153 = load ptr, ptr %151, align 8
  store ptr %153, ptr %152, align 8
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %145, i32 0, i32 2
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %147, i32 0, i32 2
  %156 = load ptr, ptr %154, align 8
  store ptr %156, ptr %155, align 8
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %145, i32 0, i32 3
  %158 = getelementptr { ptr, ptr, ptr, i32 }, ptr %147, i32 0, i32 3
  %159 = load i32, ptr %157, align 4
  store i32 %159, ptr %158, align 4
  call void @set_offset(ptr %147, ptr @IntIterator)
  %160 = call ptr @llvm.invariant.start.p0(i64 24, ptr %147)
  %161 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %162 = extractvalue { ptr, ptr, ptr, i32 } %161, 0
  %163 = call ptr @llvm.invariant.start.p0(i64 416, ptr %162)
  %164 = extractvalue { ptr, ptr, ptr, i32 } %161, 3
  %165 = getelementptr ptr, ptr %162, i32 %164
  %166 = getelementptr ptr, ptr %165, i32 1
  %167 = load ptr, ptr %166, align 8
  %168 = extractvalue { ptr, ptr, ptr, i32 } %161, 1
  %169 = call ptr %167(ptr %168)
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %169, i32 0, i32 0
  %171 = load ptr, ptr %170, align 8
  %172 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %171, 0
  %173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %169, i32 0, i32 1
  %174 = load ptr, ptr %173, align 8
  %175 = insertvalue { ptr, ptr, ptr, i32 } %172, ptr %174, 1
  %176 = getelementptr { ptr, ptr, ptr, i32 }, ptr %169, i32 0, i32 2
  %177 = load ptr, ptr %176, align 8
  %178 = insertvalue { ptr, ptr, ptr, i32 } %175, ptr %177, 2
  %179 = getelementptr { ptr, ptr, ptr, i32 }, ptr %169, i32 0, i32 3
  %180 = load i32, ptr %179, align 4
  %181 = insertvalue { ptr, ptr, ptr, i32 } %178, i32 %180, 3
  %182 = alloca [0 x ptr], align 8
  %183 = call ptr @llvm.invariant.start.p0(i64 0, ptr %182)
  %184 = call ptr @llvm.invariant.start.p0(i64 192, ptr %171)
  %185 = getelementptr ptr, ptr %171, i32 %180
  %186 = getelementptr ptr, ptr %185, i32 10
  %187 = load ptr, ptr %186, align 8
  %188 = alloca [0 x ptr], align 8
  %189 = call ptr %187({ ptr, ptr, ptr, i32 } %181, ptr %188)
  %190 = call { ptr, ptr, ptr, i32 } %189({ ptr, ptr, ptr, i32 } %181, { ptr, ptr, ptr, i32 } %181, ptr %182)
  %191 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %190, ptr %191, align 8
  %192 = call ptr @llvm.invariant.start.p0(i64 16, ptr %191)
  %193 = alloca { ptr, ptr, ptr, i32 }, align 8
  %194 = getelementptr { ptr, ptr, ptr, i32 }, ptr %191, i32 0, i32 0
  %195 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 0
  %196 = load ptr, ptr %194, align 8
  store ptr %196, ptr %195, align 8
  %197 = getelementptr { ptr, ptr, ptr, i32 }, ptr %191, i32 0, i32 1
  %198 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 1
  %199 = load ptr, ptr %197, align 8
  store ptr %199, ptr %198, align 8
  %200 = getelementptr { ptr, ptr, ptr, i32 }, ptr %191, i32 0, i32 2
  %201 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 2
  %202 = load ptr, ptr %200, align 8
  store ptr %202, ptr %201, align 8
  %203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %191, i32 0, i32 3
  %204 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 3
  %205 = load i32, ptr %203, align 4
  store i32 %205, ptr %204, align 4
  call void @set_offset(ptr %193, ptr @IntIterator)
  %206 = call ptr @llvm.invariant.start.p0(i64 24, ptr %193)
  %207 = alloca { ptr, ptr, ptr, i32 }, align 8
  %208 = getelementptr { ptr, ptr, ptr, i32 }, ptr %147, i32 0, i32 0
  %209 = getelementptr { ptr, ptr, ptr, i32 }, ptr %207, i32 0, i32 0
  %210 = load ptr, ptr %208, align 8
  store ptr %210, ptr %209, align 8
  %211 = getelementptr { ptr, ptr, ptr, i32 }, ptr %147, i32 0, i32 1
  %212 = getelementptr { ptr, ptr, ptr, i32 }, ptr %207, i32 0, i32 1
  %213 = load ptr, ptr %211, align 8
  store ptr %213, ptr %212, align 8
  %214 = getelementptr { ptr, ptr, ptr, i32 }, ptr %147, i32 0, i32 2
  %215 = getelementptr { ptr, ptr, ptr, i32 }, ptr %207, i32 0, i32 2
  %216 = load ptr, ptr %214, align 8
  store ptr %216, ptr %215, align 8
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %147, i32 0, i32 3
  %218 = getelementptr { ptr, ptr, ptr, i32 }, ptr %207, i32 0, i32 3
  %219 = load i32, ptr %217, align 4
  store i32 %219, ptr %218, align 4
  call void @set_offset(ptr %207, ptr @IntIterator)
  %220 = call ptr @llvm.invariant.start.p0(i64 24, ptr %207)
  %221 = getelementptr { ptr, ptr, ptr, i32 }, ptr %207, i32 0, i32 0
  %222 = load ptr, ptr %221, align 8
  %223 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %222, 0
  %224 = getelementptr { ptr, ptr, ptr, i32 }, ptr %207, i32 0, i32 1
  %225 = load ptr, ptr %224, align 8
  %226 = insertvalue { ptr, ptr, ptr, i32 } %223, ptr %225, 1
  %227 = getelementptr { ptr, ptr, ptr, i32 }, ptr %207, i32 0, i32 2
  %228 = load ptr, ptr %227, align 8
  %229 = insertvalue { ptr, ptr, ptr, i32 } %226, ptr %228, 2
  %230 = getelementptr { ptr, ptr, ptr, i32 }, ptr %207, i32 0, i32 3
  %231 = load i32, ptr %230, align 4
  %232 = insertvalue { ptr, ptr, ptr, i32 } %229, i32 %231, 3
  %233 = alloca { ptr, ptr, ptr, i32 }, align 8
  %234 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 0
  %235 = getelementptr { ptr, ptr, ptr, i32 }, ptr %233, i32 0, i32 0
  %236 = load ptr, ptr %234, align 8
  store ptr %236, ptr %235, align 8
  %237 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 1
  %238 = getelementptr { ptr, ptr, ptr, i32 }, ptr %233, i32 0, i32 1
  %239 = load ptr, ptr %237, align 8
  store ptr %239, ptr %238, align 8
  %240 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 2
  %241 = getelementptr { ptr, ptr, ptr, i32 }, ptr %233, i32 0, i32 2
  %242 = load ptr, ptr %240, align 8
  store ptr %242, ptr %241, align 8
  %243 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 3
  %244 = getelementptr { ptr, ptr, ptr, i32 }, ptr %233, i32 0, i32 3
  %245 = load i32, ptr %243, align 4
  store i32 %245, ptr %244, align 4
  call void @set_offset(ptr %233, ptr @IntIterator)
  %246 = call ptr @llvm.invariant.start.p0(i64 24, ptr %233)
  %247 = getelementptr { ptr, ptr, ptr, i32 }, ptr %233, i32 0, i32 0
  %248 = load ptr, ptr %247, align 8
  %249 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %248, 0
  %250 = getelementptr { ptr, ptr, ptr, i32 }, ptr %233, i32 0, i32 1
  %251 = load ptr, ptr %250, align 8
  %252 = insertvalue { ptr, ptr, ptr, i32 } %249, ptr %251, 1
  %253 = getelementptr { ptr, ptr, ptr, i32 }, ptr %233, i32 0, i32 2
  %254 = load ptr, ptr %253, align 8
  %255 = insertvalue { ptr, ptr, ptr, i32 } %252, ptr %254, 2
  %256 = getelementptr { ptr, ptr, ptr, i32 }, ptr %233, i32 0, i32 3
  %257 = load i32, ptr %256, align 4
  %258 = insertvalue { ptr, ptr, ptr, i32 } %255, i32 %257, 3
  %259 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 0
  %260 = load ptr, ptr %259, align 8
  %261 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %260, 0
  %262 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 1
  %263 = load ptr, ptr %262, align 8
  %264 = insertvalue { ptr, ptr, ptr, i32 } %261, ptr %263, 1
  %265 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 2
  %266 = load ptr, ptr %265, align 8
  %267 = insertvalue { ptr, ptr, ptr, i32 } %264, ptr %266, 2
  %268 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 3
  %269 = load i32, ptr %268, align 4
  %270 = insertvalue { ptr, ptr, ptr, i32 } %267, i32 %269, 3
  %271 = alloca [2 x ptr], align 8
  %272 = call ptr @llvm.invariant.start.p0(i64 16, ptr %271)
  %273 = getelementptr [2 x ptr], ptr %271, i32 0, i32 1
  store ptr @_parameterization_IntIterator, ptr %273, align 8
  %274 = getelementptr [2 x ptr], ptr %271, i32 0, i32 0
  store ptr @_parameterization_IntIterator, ptr %274, align 8
  %275 = call ptr @llvm.invariant.start.p0(i64 72, ptr %260)
  %276 = getelementptr ptr, ptr %260, i32 %269
  %277 = getelementptr ptr, ptr %276, i32 3
  %278 = load ptr, ptr %277, align 8
  %279 = alloca [2 x ptr], align 8
  %280 = getelementptr [2 x ptr], ptr %279, i32 0, i32 0
  store ptr %222, ptr %280, align 8
  %281 = getelementptr [2 x ptr], ptr %279, i32 0, i32 1
  store ptr %248, ptr %281, align 8
  %282 = call ptr %278({ ptr, ptr, ptr, i32 } %270, ptr %279, { ptr, ptr, ptr, i32 } %232, { ptr, ptr, ptr, i32 } %258)
  call void %282({ ptr, ptr, ptr, i32 } %270, { ptr, ptr, ptr, i32 } %270, ptr %271, { ptr, ptr, ptr, i32 } %232, { ptr, ptr, ptr, i32 } %258)
  %283 = alloca { ptr, ptr, ptr, i32 }, align 8
  %284 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 0
  %285 = getelementptr { ptr, ptr, ptr, i32 }, ptr %283, i32 0, i32 0
  %286 = load ptr, ptr %284, align 8
  store ptr %286, ptr %285, align 8
  %287 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 1
  %288 = getelementptr { ptr, ptr, ptr, i32 }, ptr %283, i32 0, i32 1
  %289 = load ptr, ptr %287, align 8
  store ptr %289, ptr %288, align 8
  %290 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 2
  %291 = getelementptr { ptr, ptr, ptr, i32 }, ptr %283, i32 0, i32 2
  %292 = load ptr, ptr %290, align 8
  store ptr %292, ptr %291, align 8
  %293 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 3
  %294 = getelementptr { ptr, ptr, ptr, i32 }, ptr %283, i32 0, i32 3
  %295 = load i32, ptr %293, align 4
  store i32 %295, ptr %294, align 4
  call void @set_offset(ptr %283, ptr @Iterator)
  %296 = call ptr @llvm.invariant.start.p0(i64 24, ptr %283)
  %297 = getelementptr { ptr, ptr, ptr, i32 }, ptr %283, i32 0, i32 0
  %298 = load ptr, ptr %297, align 8
  %299 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %298, 0
  %300 = getelementptr { ptr, ptr, ptr, i32 }, ptr %283, i32 0, i32 1
  %301 = load ptr, ptr %300, align 8
  %302 = insertvalue { ptr, ptr, ptr, i32 } %299, ptr %301, 1
  %303 = getelementptr { ptr, ptr, ptr, i32 }, ptr %283, i32 0, i32 2
  %304 = load ptr, ptr %303, align 8
  %305 = insertvalue { ptr, ptr, ptr, i32 } %302, ptr %304, 2
  %306 = getelementptr { ptr, ptr, ptr, i32 }, ptr %283, i32 0, i32 3
  %307 = load i32, ptr %306, align 4
  %308 = insertvalue { ptr, ptr, ptr, i32 } %305, i32 %307, 3
  ret { ptr, ptr, ptr, i32 } %308
}

define ptr @ChainIterator_field_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, i1 }, ptr %0, i32 0, i32 0
  ret ptr %2
}

define ptr @ChainIterator_field_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, i1 }, ptr %0, i32 0, i32 1
  ret ptr %2
}

define ptr @ChainIterator_field_on_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, i1 }, ptr %0, i32 0, i32 2
  ret ptr %2
}

define ptr @ChainIterator_B_init_firstIntIterator_secondIntIterator({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2, { ptr, ptr, ptr, i32 } %3) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = getelementptr [2 x ptr], ptr %1, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr ptr, ptr %7, i32 1
  %9 = getelementptr ptr, ptr %7, i32 2
  %10 = getelementptr ptr, ptr %7, i32 3
  %11 = getelementptr ptr, ptr %7, i32 4
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 -933084275656658555, i64 ptrtoint (ptr @IntIterator to i64), ptr %15)
  %17 = getelementptr [2 x ptr], ptr %1, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr ptr, ptr %18, i32 1
  %20 = getelementptr ptr, ptr %18, i32 2
  %21 = getelementptr ptr, ptr %18, i32 3
  %22 = getelementptr ptr, ptr %18, i32 4
  %23 = load i64, ptr %19, align 4
  %24 = load i64, ptr %20, align 4
  %25 = load ptr, ptr %21, align 8
  %26 = load ptr, ptr %22, align 8
  %27 = call i1 @subtype_test_wrapper(ptr %25, i64 %24, i64 %23, i64 -933084275656658555, i64 ptrtoint (ptr @IntIterator to i64), ptr %26)
  %28 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %29 = getelementptr [9 x ptr], ptr %28, i32 0, i32 5
  %30 = getelementptr ptr, ptr %29, i32 7
  %31 = load ptr, ptr %30, align 8
  ret ptr %31
}

define ptr @ChainIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [9 x ptr], ptr %4, i32 0, i32 6
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @ChainIterator_init_firstIntIterator_secondIntIterator({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @ChainIterator)
  %21 = call ptr @llvm.invariant.start.p0(i64 24, ptr %8)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %22, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 16, ptr %22)
  %24 = alloca { ptr, ptr, ptr, i32 }, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %36 = load i32, ptr %34, align 4
  store i32 %36, ptr %35, align 4
  call void @set_offset(ptr %24, ptr @IntIterator)
  %37 = call ptr @llvm.invariant.start.p0(i64 24, ptr %24)
  %38 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %39 = extractvalue { ptr, ptr, ptr, i32 } %38, 0
  %40 = call ptr @llvm.invariant.start.p0(i64 72, ptr %39)
  %41 = extractvalue { ptr, ptr, ptr, i32 } %38, 3
  %42 = getelementptr ptr, ptr %39, i32 %41
  %43 = load ptr, ptr %42, align 8
  %44 = extractvalue { ptr, ptr, ptr, i32 } %38, 1
  %45 = call ptr %43(ptr %44)
  %46 = alloca { ptr, ptr, ptr, i32 }, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %49 = load ptr, ptr %47, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %52 = load ptr, ptr %50, align 8
  store ptr %52, ptr %51, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %55 = load ptr, ptr %53, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %58 = load i32, ptr %56, align 4
  store i32 %58, ptr %57, align 4
  call void @set_offset(ptr %46, ptr @IntIterator)
  %59 = call ptr @llvm.invariant.start.p0(i64 24, ptr %46)
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %62 = load ptr, ptr %60, align 8
  store ptr %62, ptr %61, align 8
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %65 = load ptr, ptr %63, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %68 = load ptr, ptr %66, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %71 = load i32, ptr %69, align 4
  store i32 %71, ptr %70, align 4
  %72 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %72, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 16, ptr %72)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 0
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 1
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 2
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %83 = load ptr, ptr %81, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 3
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %86 = load i32, ptr %84, align 4
  store i32 %86, ptr %85, align 4
  call void @set_offset(ptr %74, ptr @IntIterator)
  %87 = call ptr @llvm.invariant.start.p0(i64 24, ptr %74)
  %88 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %89 = extractvalue { ptr, ptr, ptr, i32 } %88, 0
  %90 = call ptr @llvm.invariant.start.p0(i64 72, ptr %89)
  %91 = extractvalue { ptr, ptr, ptr, i32 } %88, 3
  %92 = getelementptr ptr, ptr %89, i32 %91
  %93 = getelementptr ptr, ptr %92, i32 1
  %94 = load ptr, ptr %93, align 8
  %95 = extractvalue { ptr, ptr, ptr, i32 } %88, 1
  %96 = call ptr %94(ptr %95)
  %97 = alloca { ptr, ptr, ptr, i32 }, align 8
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 0
  %100 = load ptr, ptr %98, align 8
  store ptr %100, ptr %99, align 8
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %103 = load ptr, ptr %101, align 8
  store ptr %103, ptr %102, align 8
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 2
  %106 = load ptr, ptr %104, align 8
  store ptr %106, ptr %105, align 8
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  %109 = load i32, ptr %107, align 4
  store i32 %109, ptr %108, align 4
  call void @set_offset(ptr %97, ptr @IntIterator)
  %110 = call ptr @llvm.invariant.start.p0(i64 24, ptr %97)
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 0
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 0
  %113 = load ptr, ptr %111, align 8
  store ptr %113, ptr %112, align 8
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 1
  %116 = load ptr, ptr %114, align 8
  store ptr %116, ptr %115, align 8
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 2
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 2
  %119 = load ptr, ptr %117, align 8
  store ptr %119, ptr %118, align 8
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 3
  %122 = load i32, ptr %120, align 4
  store i32 %122, ptr %121, align 4
  %123 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %124 = extractvalue { ptr, ptr, ptr, i32 } %123, 0
  %125 = call ptr @llvm.invariant.start.p0(i64 72, ptr %124)
  %126 = extractvalue { ptr, ptr, ptr, i32 } %123, 3
  %127 = getelementptr ptr, ptr %124, i32 %126
  %128 = getelementptr ptr, ptr %127, i32 2
  %129 = load ptr, ptr %128, align 8
  %130 = extractvalue { ptr, ptr, ptr, i32 } %123, 1
  %131 = call ptr %129(ptr %130)
  store i1 true, ptr %131, align 1
  ret void
}

define { ptr, i32 } @ChainIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i32 }, align 8
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca { ptr, i32 }, align 8
  %.reg2mem5 = alloca { ptr, i32 }, align 8
  %.reg2mem7 = alloca { ptr, i32 }, align 8
  %.reg2mem9 = alloca i32, align 4
  %.reg2mem11 = alloca { ptr, i32 }, align 8
  %.reg2mem13 = alloca i32, align 4
  %.reg2mem15 = alloca { ptr, i32 }, align 8
  %.reg2mem17 = alloca { ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @ChainIterator)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 72, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 2
  %26 = load ptr, ptr %25, align 8
  %27 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %28 = call ptr %26(ptr %27)
  %29 = load i1, ptr %28, align 1
  %30 = alloca [0 x ptr], align 8
  %31 = alloca [0 x ptr], align 8
  %32 = alloca { ptr, i32 }, align 8
  %33 = alloca i64, align 8
  %34 = alloca i1, align 1
  %35 = alloca i32, align 4
  %36 = alloca i32, align 4
  %37 = alloca ptr, align 8
  %38 = alloca i64, align 8
  %39 = alloca i1, align 1
  %40 = alloca [0 x ptr], align 8
  %41 = alloca [0 x ptr], align 8
  %42 = alloca { ptr, i32 }, align 8
  br i1 %29, label %43, label %101

43:                                               ; preds = %3
  %44 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %45 = extractvalue { ptr, ptr, ptr, i32 } %44, 0
  %46 = call ptr @llvm.invariant.start.p0(i64 72, ptr %45)
  %47 = extractvalue { ptr, ptr, ptr, i32 } %44, 3
  %48 = getelementptr ptr, ptr %45, i32 %47
  %49 = load ptr, ptr %48, align 8
  %50 = extractvalue { ptr, ptr, ptr, i32 } %44, 1
  %51 = call ptr %49(ptr %50)
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 0
  %53 = load ptr, ptr %52, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %53, 0
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 1
  %56 = load ptr, ptr %55, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %56, 1
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 2
  %59 = load ptr, ptr %58, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } %57, ptr %59, 2
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 3
  %62 = load i32, ptr %61, align 4
  %63 = insertvalue { ptr, ptr, ptr, i32 } %60, i32 %62, 3
  %64 = call ptr @llvm.invariant.start.p0(i64 0, ptr %30)
  %65 = call ptr @llvm.invariant.start.p0(i64 16, ptr %53)
  %66 = getelementptr ptr, ptr %53, i32 %62
  %67 = load ptr, ptr %66, align 8
  %68 = call ptr %67({ ptr, ptr, ptr, i32 } %63, ptr %31)
  %69 = call { ptr, i32 } %68({ ptr, ptr, ptr, i32 } %63, { ptr, ptr, ptr, i32 } %63, ptr %30)
  store { ptr, i32 } %69, ptr %32, align 8
  %70 = getelementptr { ptr, i32 }, ptr %32, i32 0, i32 0
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %33, align 4
  %71 = load ptr, ptr %70, align 8
  %72 = ptrtoint ptr %71 to i64
  %73 = load ptr, ptr %33, align 8
  %74 = ptrtoint ptr %73 to i64
  %75 = icmp ne i64 %72, %74
  store i1 %75, ptr %34, align 1
  %76 = load i1, ptr %34, align 1
  %77 = xor i1 %76, true
  %78 = zext i1 %77 to i32
  store i32 %78, ptr %.reg2mem9, align 4
  br i1 %76, label %79, label %88

79:                                               ; preds = %43
  %80 = getelementptr { ptr, i32 }, ptr %32, i32 0, i32 1
  %81 = load i32, ptr %80, align 4
  store i32 %81, ptr %35, align 4
  %82 = load i32, ptr %35, align 4
  store i32 %82, ptr %36, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %38, align 4
  %83 = load i64, ptr %38, align 4
  store i64 %83, ptr %37, align 4
  %84 = load ptr, ptr %37, align 8
  %85 = insertvalue { ptr, i32 } undef, ptr %84, 0
  %86 = load i32, ptr %36, align 4
  %87 = insertvalue { ptr, i32 } %85, i32 %86, 1
  store { ptr, i32 } %87, ptr %.reg2mem7, align 8
  %.reload8 = load { ptr, i32 }, ptr %.reg2mem7, align 8
  store { ptr, i32 } %.reload8, ptr %.reg2mem17, align 8
  br label %99

88:                                               ; preds = %43
  store i1 false, ptr %39, align 1
  %89 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %90 = extractvalue { ptr, ptr, ptr, i32 } %89, 0
  %91 = call ptr @llvm.invariant.start.p0(i64 72, ptr %90)
  %92 = extractvalue { ptr, ptr, ptr, i32 } %89, 3
  %93 = getelementptr ptr, ptr %90, i32 %92
  %94 = getelementptr ptr, ptr %93, i32 2
  %95 = load ptr, ptr %94, align 8
  %96 = extractvalue { ptr, ptr, ptr, i32 } %89, 1
  %97 = call ptr %95(ptr %96)
  %98 = load i1, ptr %39, align 1
  store i1 %98, ptr %97, align 1
  store { ptr, i32 } poison, ptr %.reg2mem17, align 8
  br label %99

99:                                               ; preds = %88, %79
  %.reload18 = load { ptr, i32 }, ptr %.reg2mem17, align 8
  store { ptr, i32 } %.reload18, ptr %.reg2mem5, align 8
  br label %100

100:                                              ; preds = %99
  %.reload6 = load { ptr, i32 }, ptr %.reg2mem5, align 8
  %.reload10 = load i32, ptr %.reg2mem9, align 4
  store i32 %.reload10, ptr %.reg2mem13, align 4
  store { ptr, i32 } %.reload6, ptr %.reg2mem15, align 8
  br label %102

101:                                              ; preds = %3
  store i32 1, ptr %.reg2mem13, align 4
  store { ptr, i32 } poison, ptr %.reg2mem15, align 8
  br label %102

102:                                              ; preds = %101, %100
  %.reload16 = load { ptr, i32 }, ptr %.reg2mem15, align 8
  %.reload14 = load i32, ptr %.reg2mem13, align 4
  store { ptr, i32 } %.reload16, ptr %.reg2mem3, align 8
  store i32 %.reload14, ptr %.reg2mem1, align 4
  br label %103

103:                                              ; preds = %102
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  %104 = zext i32 %.reload2 to i64
  %105 = trunc i64 %104 to i32
  switch i32 %105, label %107 [
    i32 0, label %106
  ]

106:                                              ; preds = %103
  %.reload4 = load { ptr, i32 }, ptr %.reg2mem3, align 8
  store { ptr, i32 } %.reload4, ptr %.reg2mem11, align 8
  br label %141

107:                                              ; preds = %103
  %108 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %109 = extractvalue { ptr, ptr, ptr, i32 } %108, 0
  %110 = call ptr @llvm.invariant.start.p0(i64 72, ptr %109)
  %111 = extractvalue { ptr, ptr, ptr, i32 } %108, 3
  %112 = getelementptr ptr, ptr %109, i32 %111
  %113 = getelementptr ptr, ptr %112, i32 1
  %114 = load ptr, ptr %113, align 8
  %115 = extractvalue { ptr, ptr, ptr, i32 } %108, 1
  %116 = call ptr %114(ptr %115)
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 0
  %118 = load ptr, ptr %117, align 8
  %119 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %118, 0
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 1
  %121 = load ptr, ptr %120, align 8
  %122 = insertvalue { ptr, ptr, ptr, i32 } %119, ptr %121, 1
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 2
  %124 = load ptr, ptr %123, align 8
  %125 = insertvalue { ptr, ptr, ptr, i32 } %122, ptr %124, 2
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 3
  %127 = load i32, ptr %126, align 4
  %128 = insertvalue { ptr, ptr, ptr, i32 } %125, i32 %127, 3
  %129 = call ptr @llvm.invariant.start.p0(i64 0, ptr %40)
  %130 = call ptr @llvm.invariant.start.p0(i64 16, ptr %118)
  %131 = getelementptr ptr, ptr %118, i32 %127
  %132 = load ptr, ptr %131, align 8
  %133 = call ptr %132({ ptr, ptr, ptr, i32 } %128, ptr %41)
  %134 = call { ptr, i32 } %133({ ptr, ptr, ptr, i32 } %128, { ptr, ptr, ptr, i32 } %128, ptr %40)
  store { ptr, i32 } %134, ptr %42, align 8
  %135 = getelementptr { ptr, i32 }, ptr %42, i32 0, i32 0
  %136 = load ptr, ptr %135, align 8
  %137 = insertvalue { ptr, i32 } undef, ptr %136, 0
  %138 = getelementptr { ptr, i32 }, ptr %42, i32 0, i32 1
  %139 = load i32, ptr %138, align 4
  %140 = insertvalue { ptr, i32 } %137, i32 %139, 1
  store { ptr, i32 } %140, ptr %.reg2mem, align 8
  %.reload = load { ptr, i32 }, ptr %.reg2mem, align 8
  store { ptr, i32 } %.reload, ptr %.reg2mem11, align 8
  br label %141

141:                                              ; preds = %107, %106
  %.reload12 = load { ptr, i32 }, ptr %.reg2mem11, align 8
  ret { ptr, i32 } %.reload12
}

define ptr @FilterIterable_field_iterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr } }, ptr %0, i32 0, i32 0
  ret ptr %2
}

define ptr @FilterIterable_field_f(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr } }, ptr %0, i32 0, i32 1
  ret ptr %2
}

define ptr @FilterIterable_B_init_iterableIntIterable_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2, { ptr } %3) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = getelementptr [2 x ptr], ptr %1, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr ptr, ptr %7, i32 1
  %9 = getelementptr ptr, ptr %7, i32 2
  %10 = getelementptr ptr, ptr %7, i32 3
  %11 = getelementptr ptr, ptr %7, i32 4
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %15)
  %17 = getelementptr [2 x ptr], ptr %1, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr ptr, ptr %18, i32 1
  %20 = getelementptr ptr, ptr %18, i32 2
  %21 = getelementptr ptr, ptr %18, i32 3
  %22 = getelementptr ptr, ptr %18, i32 4
  %23 = load i64, ptr %19, align 4
  %24 = load i64, ptr %20, align 4
  %25 = load ptr, ptr %21, align 8
  %26 = load ptr, ptr %22, align 8
  %27 = call i1 @subtype_test_wrapper(ptr %25, i64 %24, i64 %23, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %26)
  %28 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %29 = getelementptr [52 x ptr], ptr %28, i32 0, i32 14
  %30 = getelementptr ptr, ptr %29, i32 7
  %31 = load ptr, ptr %30, align 8
  ret ptr %31
}

define ptr @FilterIterable_B_each_fFunctionPtri32_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 15
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @FilterIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1, i32 %2, { ptr } %3) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = getelementptr [2 x ptr], ptr %1, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr ptr, ptr %7, i32 1
  %9 = getelementptr ptr, ptr %7, i32 2
  %10 = getelementptr ptr, ptr %7, i32 3
  %11 = getelementptr ptr, ptr %7, i32 4
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %15)
  %17 = getelementptr [2 x ptr], ptr %1, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr ptr, ptr %18, i32 1
  %20 = getelementptr ptr, ptr %18, i32 2
  %21 = getelementptr ptr, ptr %18, i32 3
  %22 = getelementptr ptr, ptr %18, i32 4
  %23 = load i64, ptr %19, align 4
  %24 = load i64, ptr %20, align 4
  %25 = load ptr, ptr %21, align 8
  %26 = load ptr, ptr %22, align 8
  %27 = call i1 @subtype_test_wrapper(ptr %25, i64 %24, i64 %23, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %26)
  %28 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %29 = getelementptr [52 x ptr], ptr %28, i32 0, i32 16
  %30 = getelementptr ptr, ptr %29, i32 7
  %31 = load ptr, ptr %30, align 8
  ret ptr %31
}

define ptr @FilterIterable_B_all_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 17
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @FilterIterable_B_any_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 18
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @FilterIterable_B_map_fFunctionPtri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 19
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @FilterIterable_B_filter_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 20
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @FilterIterable_B_chain_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 21
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @FilterIterable_B_interleave_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 22
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @FilterIterable_B_zip_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 23
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @FilterIterable_B_product_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 24
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @FilterIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [52 x ptr], ptr %4, i32 0, i32 25
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @FilterIterable_init_iterableIntIterable_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @FilterIterable)
  %21 = call ptr @llvm.invariant.start.p0(i64 24, ptr %8)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %22, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 16, ptr %22)
  %24 = alloca { ptr, ptr, ptr, i32 }, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %36 = load i32, ptr %34, align 4
  store i32 %36, ptr %35, align 4
  call void @set_offset(ptr %24, ptr @IntIterable)
  %37 = call ptr @llvm.invariant.start.p0(i64 24, ptr %24)
  %38 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %39 = extractvalue { ptr, ptr, ptr, i32 } %38, 0
  %40 = call ptr @llvm.invariant.start.p0(i64 416, ptr %39)
  %41 = extractvalue { ptr, ptr, ptr, i32 } %38, 3
  %42 = getelementptr ptr, ptr %39, i32 %41
  %43 = load ptr, ptr %42, align 8
  %44 = extractvalue { ptr, ptr, ptr, i32 } %38, 1
  %45 = call ptr %43(ptr %44)
  %46 = alloca { ptr, ptr, ptr, i32 }, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %49 = load ptr, ptr %47, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %52 = load ptr, ptr %50, align 8
  store ptr %52, ptr %51, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %55 = load ptr, ptr %53, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %58 = load i32, ptr %56, align 4
  store i32 %58, ptr %57, align 4
  call void @set_offset(ptr %46, ptr @IntIterable)
  %59 = call ptr @llvm.invariant.start.p0(i64 24, ptr %46)
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %62 = load ptr, ptr %60, align 8
  store ptr %62, ptr %61, align 8
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %65 = load ptr, ptr %63, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %68 = load ptr, ptr %66, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %71 = load i32, ptr %69, align 4
  store i32 %71, ptr %70, align 4
  %72 = alloca ptr, align 8
  store { ptr } %4, ptr %72, align 8
  %73 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %74 = extractvalue { ptr, ptr, ptr, i32 } %73, 0
  %75 = call ptr @llvm.invariant.start.p0(i64 416, ptr %74)
  %76 = extractvalue { ptr, ptr, ptr, i32 } %73, 3
  %77 = getelementptr ptr, ptr %74, i32 %76
  %78 = getelementptr ptr, ptr %77, i32 1
  %79 = load ptr, ptr %78, align 8
  %80 = extractvalue { ptr, ptr, ptr, i32 } %73, 1
  %81 = call ptr %79(ptr %80)
  %82 = getelementptr { ptr }, ptr %81, i32 0, i32 0
  %83 = load ptr, ptr %72, align 8
  store ptr %83, ptr %82, align 8
  ret void
}

define { ptr, ptr, ptr, i32 } @FilterIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @FilterIterable)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 416, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %27 = call ptr %25(ptr %26)
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %29, 0
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %32 = load ptr, ptr %31, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %32, 1
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %35 = load ptr, ptr %34, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %35, 2
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %38 = load i32, ptr %37, align 4
  %39 = insertvalue { ptr, ptr, ptr, i32 } %36, i32 %38, 3
  %40 = alloca [0 x ptr], align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 0, ptr %40)
  %42 = call ptr @llvm.invariant.start.p0(i64 192, ptr %29)
  %43 = getelementptr ptr, ptr %29, i32 %38
  %44 = getelementptr ptr, ptr %43, i32 10
  %45 = load ptr, ptr %44, align 8
  %46 = alloca [0 x ptr], align 8
  %47 = call ptr %45({ ptr, ptr, ptr, i32 } %39, ptr %46)
  %48 = call { ptr, ptr, ptr, i32 } %47({ ptr, ptr, ptr, i32 } %39, { ptr, ptr, ptr, i32 } %39, ptr %40)
  %49 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %48, ptr %49, align 8
  %50 = call ptr @llvm.invariant.start.p0(i64 16, ptr %49)
  %51 = alloca { ptr, ptr, ptr, i32 }, align 8
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 0
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 0
  %54 = load ptr, ptr %52, align 8
  store ptr %54, ptr %53, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 1
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 1
  %57 = load ptr, ptr %55, align 8
  store ptr %57, ptr %56, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 2
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 2
  %60 = load ptr, ptr %58, align 8
  store ptr %60, ptr %59, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 3
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 3
  %63 = load i32, ptr %61, align 4
  store i32 %63, ptr %62, align 4
  call void @set_offset(ptr %51, ptr @IntIterator)
  %64 = call ptr @llvm.invariant.start.p0(i64 24, ptr %51)
  %65 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %66 = extractvalue { ptr, ptr, ptr, i32 } %65, 0
  %67 = call ptr @llvm.invariant.start.p0(i64 416, ptr %66)
  %68 = extractvalue { ptr, ptr, ptr, i32 } %65, 3
  %69 = getelementptr ptr, ptr %66, i32 %68
  %70 = getelementptr ptr, ptr %69, i32 1
  %71 = load ptr, ptr %70, align 8
  %72 = extractvalue { ptr, ptr, ptr, i32 } %65, 1
  %73 = call ptr %71(ptr %72)
  %74 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr } }, ptr null, i32 1) to i64))
  %75 = alloca { ptr, ptr, ptr, i32 }, align 8
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 1
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 3
  store ptr @FilterIterator, ptr %75, align 8
  store ptr %74, ptr %76, align 8
  store i32 7, ptr %77, align 4
  %78 = call ptr @llvm.invariant.start.p0(i64 16, ptr %75)
  %79 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %80 = extractvalue { ptr, ptr, ptr, i32 } %79, 0
  %81 = call ptr @llvm.invariant.start.p0(i64 416, ptr %80)
  %82 = extractvalue { ptr, ptr, ptr, i32 } %79, 3
  %83 = getelementptr ptr, ptr %80, i32 %82
  %84 = load ptr, ptr %83, align 8
  %85 = extractvalue { ptr, ptr, ptr, i32 } %79, 1
  %86 = call ptr %84(ptr %85)
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 0
  %88 = load ptr, ptr %87, align 8
  %89 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %88, 0
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } %89, ptr %91, 1
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 2
  %94 = load ptr, ptr %93, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %94, 2
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 3
  %97 = load i32, ptr %96, align 4
  %98 = insertvalue { ptr, ptr, ptr, i32 } %95, i32 %97, 3
  %99 = alloca [0 x ptr], align 8
  %100 = call ptr @llvm.invariant.start.p0(i64 0, ptr %99)
  %101 = call ptr @llvm.invariant.start.p0(i64 192, ptr %88)
  %102 = getelementptr ptr, ptr %88, i32 %97
  %103 = getelementptr ptr, ptr %102, i32 10
  %104 = load ptr, ptr %103, align 8
  %105 = alloca [0 x ptr], align 8
  %106 = call ptr %104({ ptr, ptr, ptr, i32 } %98, ptr %105)
  %107 = call { ptr, ptr, ptr, i32 } %106({ ptr, ptr, ptr, i32 } %98, { ptr, ptr, ptr, i32 } %98, ptr %99)
  %108 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %107, ptr %108, align 8
  %109 = call ptr @llvm.invariant.start.p0(i64 16, ptr %108)
  %110 = alloca { ptr, ptr, ptr, i32 }, align 8
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 0
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %110, i32 0, i32 0
  %113 = load ptr, ptr %111, align 8
  store ptr %113, ptr %112, align 8
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 1
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %110, i32 0, i32 1
  %116 = load ptr, ptr %114, align 8
  store ptr %116, ptr %115, align 8
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 2
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %110, i32 0, i32 2
  %119 = load ptr, ptr %117, align 8
  store ptr %119, ptr %118, align 8
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 3
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %110, i32 0, i32 3
  %122 = load i32, ptr %120, align 4
  store i32 %122, ptr %121, align 4
  call void @set_offset(ptr %110, ptr @IntIterator)
  %123 = call ptr @llvm.invariant.start.p0(i64 24, ptr %110)
  %124 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %125 = extractvalue { ptr, ptr, ptr, i32 } %124, 0
  %126 = call ptr @llvm.invariant.start.p0(i64 416, ptr %125)
  %127 = extractvalue { ptr, ptr, ptr, i32 } %124, 3
  %128 = getelementptr ptr, ptr %125, i32 %127
  %129 = getelementptr ptr, ptr %128, i32 1
  %130 = load ptr, ptr %129, align 8
  %131 = extractvalue { ptr, ptr, ptr, i32 } %124, 1
  %132 = call ptr %130(ptr %131)
  %133 = alloca { ptr, ptr, ptr, i32 }, align 8
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %110, i32 0, i32 0
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 0
  %136 = load ptr, ptr %134, align 8
  store ptr %136, ptr %135, align 8
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %110, i32 0, i32 1
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 1
  %139 = load ptr, ptr %137, align 8
  store ptr %139, ptr %138, align 8
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %110, i32 0, i32 2
  %141 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 2
  %142 = load ptr, ptr %140, align 8
  store ptr %142, ptr %141, align 8
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %110, i32 0, i32 3
  %144 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 3
  %145 = load i32, ptr %143, align 4
  store i32 %145, ptr %144, align 4
  call void @set_offset(ptr %133, ptr @IntIterator)
  %146 = call ptr @llvm.invariant.start.p0(i64 24, ptr %133)
  %147 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 0
  %148 = load ptr, ptr %147, align 8
  %149 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %148, 0
  %150 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 1
  %151 = load ptr, ptr %150, align 8
  %152 = insertvalue { ptr, ptr, ptr, i32 } %149, ptr %151, 1
  %153 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 2
  %154 = load ptr, ptr %153, align 8
  %155 = insertvalue { ptr, ptr, ptr, i32 } %152, ptr %154, 2
  %156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 3
  %157 = load i32, ptr %156, align 4
  %158 = insertvalue { ptr, ptr, ptr, i32 } %155, i32 %157, 3
  %159 = getelementptr { ptr }, ptr %132, i32 0, i32 0
  %160 = load ptr, ptr %159, align 8
  %161 = insertvalue { ptr } undef, ptr %160, 0
  %162 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 0
  %163 = load ptr, ptr %162, align 8
  %164 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %163, 0
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 1
  %166 = load ptr, ptr %165, align 8
  %167 = insertvalue { ptr, ptr, ptr, i32 } %164, ptr %166, 1
  %168 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 2
  %169 = load ptr, ptr %168, align 8
  %170 = insertvalue { ptr, ptr, ptr, i32 } %167, ptr %169, 2
  %171 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 3
  %172 = load i32, ptr %171, align 4
  %173 = insertvalue { ptr, ptr, ptr, i32 } %170, i32 %172, 3
  %174 = alloca [2 x ptr], align 8
  %175 = call ptr @llvm.invariant.start.p0(i64 16, ptr %174)
  %176 = getelementptr [2 x ptr], ptr %174, i32 0, i32 1
  store ptr @_parameterization_FunctionPtri32_to_Ptri1, ptr %176, align 8
  %177 = getelementptr [2 x ptr], ptr %174, i32 0, i32 0
  store ptr @_parameterization_IntIterator, ptr %177, align 8
  %178 = call ptr @llvm.invariant.start.p0(i64 64, ptr %163)
  %179 = getelementptr ptr, ptr %163, i32 %172
  %180 = getelementptr ptr, ptr %179, i32 2
  %181 = load ptr, ptr %180, align 8
  %182 = alloca [2 x ptr], align 8
  %183 = getelementptr [2 x ptr], ptr %182, i32 0, i32 0
  store ptr %148, ptr %183, align 8
  %184 = getelementptr [2 x ptr], ptr %182, i32 0, i32 1
  store ptr @function_typ, ptr %184, align 8
  %185 = call ptr %181({ ptr, ptr, ptr, i32 } %173, ptr %182, { ptr, ptr, ptr, i32 } %158, { ptr } %161)
  call void %185({ ptr, ptr, ptr, i32 } %173, { ptr, ptr, ptr, i32 } %173, ptr %174, { ptr, ptr, ptr, i32 } %158, { ptr } %161)
  %186 = alloca { ptr, ptr, ptr, i32 }, align 8
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 0
  %188 = getelementptr { ptr, ptr, ptr, i32 }, ptr %186, i32 0, i32 0
  %189 = load ptr, ptr %187, align 8
  store ptr %189, ptr %188, align 8
  %190 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 1
  %191 = getelementptr { ptr, ptr, ptr, i32 }, ptr %186, i32 0, i32 1
  %192 = load ptr, ptr %190, align 8
  store ptr %192, ptr %191, align 8
  %193 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 2
  %194 = getelementptr { ptr, ptr, ptr, i32 }, ptr %186, i32 0, i32 2
  %195 = load ptr, ptr %193, align 8
  store ptr %195, ptr %194, align 8
  %196 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 3
  %197 = getelementptr { ptr, ptr, ptr, i32 }, ptr %186, i32 0, i32 3
  %198 = load i32, ptr %196, align 4
  store i32 %198, ptr %197, align 4
  call void @set_offset(ptr %186, ptr @Iterator)
  %199 = call ptr @llvm.invariant.start.p0(i64 24, ptr %186)
  %200 = getelementptr { ptr, ptr, ptr, i32 }, ptr %186, i32 0, i32 0
  %201 = load ptr, ptr %200, align 8
  %202 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %201, 0
  %203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %186, i32 0, i32 1
  %204 = load ptr, ptr %203, align 8
  %205 = insertvalue { ptr, ptr, ptr, i32 } %202, ptr %204, 1
  %206 = getelementptr { ptr, ptr, ptr, i32 }, ptr %186, i32 0, i32 2
  %207 = load ptr, ptr %206, align 8
  %208 = insertvalue { ptr, ptr, ptr, i32 } %205, ptr %207, 2
  %209 = getelementptr { ptr, ptr, ptr, i32 }, ptr %186, i32 0, i32 3
  %210 = load i32, ptr %209, align 4
  %211 = insertvalue { ptr, ptr, ptr, i32 } %208, i32 %210, 3
  ret { ptr, ptr, ptr, i32 } %211
}

define ptr @FilterIterator_field_iterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr } }, ptr %0, i32 0, i32 0
  ret ptr %2
}

define ptr @FilterIterator_field_f(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr } }, ptr %0, i32 0, i32 1
  ret ptr %2
}

define ptr @FilterIterator_B_init_iteratorIntIterator_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2, { ptr } %3) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = getelementptr [2 x ptr], ptr %1, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr ptr, ptr %7, i32 1
  %9 = getelementptr ptr, ptr %7, i32 2
  %10 = getelementptr ptr, ptr %7, i32 3
  %11 = getelementptr ptr, ptr %7, i32 4
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 -933084275656658555, i64 ptrtoint (ptr @IntIterator to i64), ptr %15)
  %17 = getelementptr [2 x ptr], ptr %1, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr ptr, ptr %18, i32 1
  %20 = getelementptr ptr, ptr %18, i32 2
  %21 = getelementptr ptr, ptr %18, i32 3
  %22 = getelementptr ptr, ptr %18, i32 4
  %23 = load i64, ptr %19, align 4
  %24 = load i64, ptr %20, align 4
  %25 = load ptr, ptr %21, align 8
  %26 = load ptr, ptr %22, align 8
  %27 = call i1 @subtype_test_wrapper(ptr %25, i64 %24, i64 %23, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %26)
  %28 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %29 = getelementptr [8 x ptr], ptr %28, i32 0, i32 4
  %30 = getelementptr ptr, ptr %29, i32 7
  %31 = load ptr, ptr %30, align 8
  ret ptr %31
}

define ptr @FilterIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [8 x ptr], ptr %4, i32 0, i32 5
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @FilterIterator_init_iteratorIntIterator_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @FilterIterator)
  %21 = call ptr @llvm.invariant.start.p0(i64 24, ptr %8)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %22, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 16, ptr %22)
  %24 = alloca { ptr, ptr, ptr, i32 }, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %36 = load i32, ptr %34, align 4
  store i32 %36, ptr %35, align 4
  call void @set_offset(ptr %24, ptr @IntIterator)
  %37 = call ptr @llvm.invariant.start.p0(i64 24, ptr %24)
  %38 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %39 = extractvalue { ptr, ptr, ptr, i32 } %38, 0
  %40 = call ptr @llvm.invariant.start.p0(i64 64, ptr %39)
  %41 = extractvalue { ptr, ptr, ptr, i32 } %38, 3
  %42 = getelementptr ptr, ptr %39, i32 %41
  %43 = load ptr, ptr %42, align 8
  %44 = extractvalue { ptr, ptr, ptr, i32 } %38, 1
  %45 = call ptr %43(ptr %44)
  %46 = alloca { ptr, ptr, ptr, i32 }, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %49 = load ptr, ptr %47, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %52 = load ptr, ptr %50, align 8
  store ptr %52, ptr %51, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %55 = load ptr, ptr %53, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %58 = load i32, ptr %56, align 4
  store i32 %58, ptr %57, align 4
  call void @set_offset(ptr %46, ptr @IntIterator)
  %59 = call ptr @llvm.invariant.start.p0(i64 24, ptr %46)
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %62 = load ptr, ptr %60, align 8
  store ptr %62, ptr %61, align 8
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %65 = load ptr, ptr %63, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %68 = load ptr, ptr %66, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %71 = load i32, ptr %69, align 4
  store i32 %71, ptr %70, align 4
  %72 = alloca ptr, align 8
  store { ptr } %4, ptr %72, align 8
  %73 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %74 = extractvalue { ptr, ptr, ptr, i32 } %73, 0
  %75 = call ptr @llvm.invariant.start.p0(i64 64, ptr %74)
  %76 = extractvalue { ptr, ptr, ptr, i32 } %73, 3
  %77 = getelementptr ptr, ptr %74, i32 %76
  %78 = getelementptr ptr, ptr %77, i32 1
  %79 = load ptr, ptr %78, align 8
  %80 = extractvalue { ptr, ptr, ptr, i32 } %73, 1
  %81 = call ptr %79(ptr %80)
  %82 = getelementptr { ptr }, ptr %81, i32 0, i32 0
  %83 = load ptr, ptr %72, align 8
  store ptr %83, ptr %82, align 8
  ret void
}

define { ptr, i32 } @FilterIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i32 }, align 8
  %.reg2mem1 = alloca { ptr, i32 }, align 8
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem6 = alloca i32, align 4
  %.reg2mem8 = alloca i32, align 4
  %.reg2mem11 = alloca i32, align 4
  %.reg2mem13 = alloca i32, align 4
  %.reg2mem15 = alloca ptr, align 8
  %.reg2mem17 = alloca { ptr, i32 }, align 8
  %.reg2mem19 = alloca ptr, align 8
  %.reg2mem21 = alloca i32, align 4
  %.reg2mem23 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @FilterIterator)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 64, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %27 = call ptr %25(ptr %26)
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %29, 0
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %32 = load ptr, ptr %31, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %32, 1
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %35 = load ptr, ptr %34, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %35, 2
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %38 = load i32, ptr %37, align 4
  %39 = insertvalue { ptr, ptr, ptr, i32 } %36, i32 %38, 3
  %40 = alloca [0 x ptr], align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 0, ptr %40)
  %42 = call ptr @llvm.invariant.start.p0(i64 16, ptr %29)
  %43 = getelementptr ptr, ptr %29, i32 %38
  %44 = load ptr, ptr %43, align 8
  %45 = alloca [0 x ptr], align 8
  %46 = call ptr %44({ ptr, ptr, ptr, i32 } %39, ptr %45)
  %47 = call { ptr, i32 } %46({ ptr, ptr, ptr, i32 } %39, { ptr, ptr, ptr, i32 } %39, ptr %40)
  %48 = alloca { ptr, i32 }, align 8
  store { ptr, i32 } %47, ptr %48, align 8
  %49 = getelementptr { ptr, i32 }, ptr %48, i32 0, i32 0
  store ptr %49, ptr %.reg2mem15, align 8
  %50 = alloca i64, align 8
  %51 = alloca i1, align 1
  %52 = alloca i32, align 4
  %53 = alloca i1, align 1
  %54 = alloca [0 x ptr], align 8
  %55 = alloca [0 x ptr], align 8
  %56 = alloca { ptr, i32 }, align 8
  %57 = alloca i32, align 4
  %58 = alloca ptr, align 8
  %59 = alloca i64, align 8
  %60 = alloca i32, align 4
  %61 = alloca ptr, align 8
  %62 = alloca i64, align 8
  br label %63

63:                                               ; preds = %128, %3
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %50, align 4
  %.reload16 = load ptr, ptr %.reg2mem15, align 8
  %64 = load ptr, ptr %.reload16, align 8
  %65 = ptrtoint ptr %64 to i64
  %66 = load ptr, ptr %50, align 8
  %67 = ptrtoint ptr %66 to i64
  %68 = icmp ne i64 %65, %67
  store i1 %68, ptr %51, align 1
  %69 = load i1, ptr %51, align 1
  br i1 %69, label %70, label %124

70:                                               ; preds = %63
  %71 = getelementptr { ptr, i32 }, ptr %48, i32 0, i32 1
  %72 = load i32, ptr %71, align 4
  store i32 %72, ptr %52, align 4
  %73 = load i32, ptr %52, align 4
  %74 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %75 = extractvalue { ptr, ptr, ptr, i32 } %74, 0
  %76 = call ptr @llvm.invariant.start.p0(i64 64, ptr %75)
  %77 = extractvalue { ptr, ptr, ptr, i32 } %74, 3
  %78 = getelementptr ptr, ptr %75, i32 %77
  %79 = getelementptr ptr, ptr %78, i32 1
  %80 = load ptr, ptr %79, align 8
  %81 = extractvalue { ptr, ptr, ptr, i32 } %74, 1
  %82 = call ptr %80(ptr %81)
  %83 = load ptr, ptr %82, align 8
  %84 = call i1 %83(i32 %73)
  store i1 %84, ptr %53, align 1
  %85 = load i1, ptr %53, align 1
  %86 = zext i1 %85 to i32
  store i32 %86, ptr %.reg2mem13, align 4
  %87 = xor i1 %85, true
  %88 = zext i1 %87 to i32
  store i32 %88, ptr %.reg2mem11, align 4
  br i1 %85, label %89, label %90

89:                                               ; preds = %70
  br label %123

90:                                               ; preds = %70
  %91 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %92 = extractvalue { ptr, ptr, ptr, i32 } %91, 0
  %93 = call ptr @llvm.invariant.start.p0(i64 64, ptr %92)
  %94 = extractvalue { ptr, ptr, ptr, i32 } %91, 3
  %95 = getelementptr ptr, ptr %92, i32 %94
  %96 = load ptr, ptr %95, align 8
  %97 = extractvalue { ptr, ptr, ptr, i32 } %91, 1
  %98 = call ptr %96(ptr %97)
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 0
  %100 = load ptr, ptr %99, align 8
  %101 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %100, 0
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 1
  %103 = load ptr, ptr %102, align 8
  %104 = insertvalue { ptr, ptr, ptr, i32 } %101, ptr %103, 1
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 2
  %106 = load ptr, ptr %105, align 8
  %107 = insertvalue { ptr, ptr, ptr, i32 } %104, ptr %106, 2
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 3
  %109 = load i32, ptr %108, align 4
  %110 = insertvalue { ptr, ptr, ptr, i32 } %107, i32 %109, 3
  %111 = call ptr @llvm.invariant.start.p0(i64 0, ptr %54)
  %112 = call ptr @llvm.invariant.start.p0(i64 16, ptr %100)
  %113 = getelementptr ptr, ptr %100, i32 %109
  %114 = load ptr, ptr %113, align 8
  %115 = call ptr %114({ ptr, ptr, ptr, i32 } %110, ptr %55)
  %116 = call { ptr, i32 } %115({ ptr, ptr, ptr, i32 } %110, { ptr, ptr, ptr, i32 } %110, ptr %54)
  store { ptr, i32 } %116, ptr %56, align 8
  %117 = getelementptr { ptr, i32 }, ptr %56, i32 0, i32 0
  %118 = getelementptr { ptr, i32 }, ptr %48, i32 0, i32 0
  %119 = load ptr, ptr %117, align 8
  store ptr %119, ptr %118, align 8
  %120 = getelementptr { ptr, i32 }, ptr %56, i32 0, i32 1
  %121 = getelementptr { ptr, i32 }, ptr %48, i32 0, i32 1
  %122 = load i32, ptr %120, align 4
  store i32 %122, ptr %121, align 4
  br label %123

123:                                              ; preds = %90, %89
  %.reload12 = load i32, ptr %.reg2mem11, align 4
  %.reload14 = load i32, ptr %.reg2mem13, align 4
  store ptr %52, ptr %.reg2mem19, align 8
  store i32 %.reload12, ptr %.reg2mem21, align 4
  store i32 %.reload14, ptr %.reg2mem23, align 4
  br label %125

124:                                              ; preds = %63
  store ptr poison, ptr %.reg2mem19, align 8
  store i32 0, ptr %.reg2mem21, align 4
  store i32 2, ptr %.reg2mem23, align 4
  br label %125

125:                                              ; preds = %124, %123
  %.reload24 = load i32, ptr %.reg2mem23, align 4
  %.reload22 = load i32, ptr %.reg2mem21, align 4
  %.reload20 = load ptr, ptr %.reg2mem19, align 8
  store i32 %.reload24, ptr %.reg2mem8, align 4
  store i32 %.reload22, ptr %.reg2mem6, align 4
  store ptr %.reload20, ptr %.reg2mem3, align 8
  br label %126

126:                                              ; preds = %125
  %.reload7 = load i32, ptr %.reg2mem6, align 4
  %127 = trunc i32 %.reload7 to i1
  %.reload5 = load ptr, ptr %.reg2mem3, align 8
  %.reload10 = load i32, ptr %.reg2mem8, align 4
  br i1 %127, label %128, label %129

128:                                              ; preds = %126
  br label %63

129:                                              ; preds = %126
  %.reload9 = load i32, ptr %.reg2mem8, align 4
  %130 = zext i32 %.reload9 to i64
  %131 = trunc i64 %130 to i32
  switch i32 %131, label %139 [
    i32 1, label %132
  ]

132:                                              ; preds = %129
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %133 = load i32, ptr %.reload4, align 4
  store i32 %133, ptr %57, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %59, align 4
  %134 = load i64, ptr %59, align 4
  store i64 %134, ptr %58, align 4
  %135 = load ptr, ptr %58, align 8
  %136 = insertvalue { ptr, i32 } undef, ptr %135, 0
  %137 = load i32, ptr %57, align 4
  %138 = insertvalue { ptr, i32 } %136, i32 %137, 1
  store { ptr, i32 } %138, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i32 }, ptr %.reg2mem1, align 8
  store { ptr, i32 } %.reload2, ptr %.reg2mem17, align 8
  br label %145

139:                                              ; preds = %129
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %62, align 4
  %140 = load i64, ptr %62, align 4
  store i64 %140, ptr %61, align 4
  %141 = load ptr, ptr %61, align 8
  %142 = insertvalue { ptr, i32 } undef, ptr %141, 0
  %143 = load i32, ptr %60, align 4
  %144 = insertvalue { ptr, i32 } %142, i32 %143, 1
  store { ptr, i32 } %144, ptr %.reg2mem, align 8
  %.reload = load { ptr, i32 }, ptr %.reg2mem, align 8
  store { ptr, i32 } %.reload, ptr %.reg2mem17, align 8
  br label %145

145:                                              ; preds = %139, %132
  %.reload18 = load { ptr, i32 }, ptr %.reg2mem17, align 8
  ret { ptr, i32 } %.reload18
}

define ptr @Range_field_start(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { i32, i32, i32 }, ptr %0, i32 0, i32 0
  ret ptr %2
}

define ptr @Range_field_end(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { i32, i32, i32 }, ptr %0, i32 0, i32 1
  ret ptr %2
}

define ptr @Range_field_step(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { i32, i32, i32 }, ptr %0, i32 0, i32 2
  ret ptr %2
}

define ptr @Range_B_init_endPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1, i32 %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [57 x ptr], ptr %16, i32 0, i32 17
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @Range_B_init_startPtri32_endPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1, i32 %2, i32 %3) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = getelementptr [2 x ptr], ptr %1, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr ptr, ptr %7, i32 1
  %9 = getelementptr ptr, ptr %7, i32 2
  %10 = getelementptr ptr, ptr %7, i32 3
  %11 = getelementptr ptr, ptr %7, i32 4
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %15)
  %17 = getelementptr [2 x ptr], ptr %1, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr ptr, ptr %18, i32 1
  %20 = getelementptr ptr, ptr %18, i32 2
  %21 = getelementptr ptr, ptr %18, i32 3
  %22 = getelementptr ptr, ptr %18, i32 4
  %23 = load i64, ptr %19, align 4
  %24 = load i64, ptr %20, align 4
  %25 = load ptr, ptr %21, align 8
  %26 = load ptr, ptr %22, align 8
  %27 = call i1 @subtype_test_wrapper(ptr %25, i64 %24, i64 %23, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %26)
  %28 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %29 = getelementptr [57 x ptr], ptr %28, i32 0, i32 18
  %30 = getelementptr ptr, ptr %29, i32 7
  %31 = load ptr, ptr %30, align 8
  ret ptr %31
}

define ptr @Range_B_step_stepPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1, i32 %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [57 x ptr], ptr %16, i32 0, i32 19
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @Range_B_each_fFunctionPtri32_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [57 x ptr], ptr %16, i32 0, i32 20
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @Range_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1, i32 %2, { ptr } %3) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = getelementptr [2 x ptr], ptr %1, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr ptr, ptr %7, i32 1
  %9 = getelementptr ptr, ptr %7, i32 2
  %10 = getelementptr ptr, ptr %7, i32 3
  %11 = getelementptr ptr, ptr %7, i32 4
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %15)
  %17 = getelementptr [2 x ptr], ptr %1, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr ptr, ptr %18, i32 1
  %20 = getelementptr ptr, ptr %18, i32 2
  %21 = getelementptr ptr, ptr %18, i32 3
  %22 = getelementptr ptr, ptr %18, i32 4
  %23 = load i64, ptr %19, align 4
  %24 = load i64, ptr %20, align 4
  %25 = load ptr, ptr %21, align 8
  %26 = load ptr, ptr %22, align 8
  %27 = call i1 @subtype_test_wrapper(ptr %25, i64 %24, i64 %23, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %26)
  %28 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %29 = getelementptr [57 x ptr], ptr %28, i32 0, i32 21
  %30 = getelementptr ptr, ptr %29, i32 7
  %31 = load ptr, ptr %30, align 8
  ret ptr %31
}

define ptr @Range_B_all_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [57 x ptr], ptr %16, i32 0, i32 22
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @Range_B_any_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [57 x ptr], ptr %16, i32 0, i32 23
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @Range_B_map_fFunctionPtri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [57 x ptr], ptr %16, i32 0, i32 24
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @Range_B_filter_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [57 x ptr], ptr %16, i32 0, i32 25
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @Range_B_chain_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [57 x ptr], ptr %16, i32 0, i32 26
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @Range_B_interleave_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [57 x ptr], ptr %16, i32 0, i32 27
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @Range_B_zip_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [57 x ptr], ptr %16, i32 0, i32 28
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @Range_B_product_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [57 x ptr], ptr %16, i32 0, i32 29
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @Range_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [57 x ptr], ptr %4, i32 0, i32 30
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @Range_init_endPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Range)
  %20 = call ptr @llvm.invariant.start.p0(i64 24, ptr %7)
  %21 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %22 = extractvalue { ptr, ptr, ptr, i32 } %21, 0
  %23 = call ptr @llvm.invariant.start.p0(i64 456, ptr %22)
  %24 = extractvalue { ptr, ptr, ptr, i32 } %21, 3
  %25 = getelementptr ptr, ptr %22, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 1
  %27 = load ptr, ptr %26, align 8
  %28 = extractvalue { ptr, ptr, ptr, i32 } %21, 1
  %29 = call ptr %27(ptr %28)
  store i32 %3, ptr %29, align 4
  %30 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %31 = extractvalue { ptr, ptr, ptr, i32 } %30, 0
  %32 = call ptr @llvm.invariant.start.p0(i64 456, ptr %31)
  %33 = extractvalue { ptr, ptr, ptr, i32 } %30, 3
  %34 = getelementptr ptr, ptr %31, i32 %33
  %35 = load ptr, ptr %34, align 8
  %36 = extractvalue { ptr, ptr, ptr, i32 } %30, 1
  %37 = call ptr %35(ptr %36)
  store i32 0, ptr %37, align 4
  %38 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %39 = extractvalue { ptr, ptr, ptr, i32 } %38, 0
  %40 = call ptr @llvm.invariant.start.p0(i64 456, ptr %39)
  %41 = extractvalue { ptr, ptr, ptr, i32 } %38, 3
  %42 = getelementptr ptr, ptr %39, i32 %41
  %43 = getelementptr ptr, ptr %42, i32 2
  %44 = load ptr, ptr %43, align 8
  %45 = extractvalue { ptr, ptr, ptr, i32 } %38, 1
  %46 = call ptr %44(ptr %45)
  store i32 1, ptr %46, align 4
  ret void
}

define void @Range_init_startPtri32_endPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3, i32 %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @Range)
  %21 = call ptr @llvm.invariant.start.p0(i64 24, ptr %8)
  %22 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %23 = extractvalue { ptr, ptr, ptr, i32 } %22, 0
  %24 = call ptr @llvm.invariant.start.p0(i64 456, ptr %23)
  %25 = extractvalue { ptr, ptr, ptr, i32 } %22, 3
  %26 = getelementptr ptr, ptr %23, i32 %25
  %27 = load ptr, ptr %26, align 8
  %28 = extractvalue { ptr, ptr, ptr, i32 } %22, 1
  %29 = call ptr %27(ptr %28)
  store i32 %3, ptr %29, align 4
  %30 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %31 = extractvalue { ptr, ptr, ptr, i32 } %30, 0
  %32 = call ptr @llvm.invariant.start.p0(i64 456, ptr %31)
  %33 = extractvalue { ptr, ptr, ptr, i32 } %30, 3
  %34 = getelementptr ptr, ptr %31, i32 %33
  %35 = getelementptr ptr, ptr %34, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = extractvalue { ptr, ptr, ptr, i32 } %30, 1
  %38 = call ptr %36(ptr %37)
  store i32 %4, ptr %38, align 4
  %39 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %40 = extractvalue { ptr, ptr, ptr, i32 } %39, 0
  %41 = call ptr @llvm.invariant.start.p0(i64 456, ptr %40)
  %42 = extractvalue { ptr, ptr, ptr, i32 } %39, 3
  %43 = getelementptr ptr, ptr %40, i32 %42
  %44 = getelementptr ptr, ptr %43, i32 2
  %45 = load ptr, ptr %44, align 8
  %46 = extractvalue { ptr, ptr, ptr, i32 } %39, 1
  %47 = call ptr %45(ptr %46)
  store i32 1, ptr %47, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @Range_step_stepPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Range)
  %20 = call ptr @llvm.invariant.start.p0(i64 24, ptr %7)
  %21 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %22 = extractvalue { ptr, ptr, ptr, i32 } %21, 0
  %23 = call ptr @llvm.invariant.start.p0(i64 456, ptr %22)
  %24 = extractvalue { ptr, ptr, ptr, i32 } %21, 3
  %25 = getelementptr ptr, ptr %22, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = extractvalue { ptr, ptr, ptr, i32 } %21, 1
  %29 = call ptr %27(ptr %28)
  store i32 %3, ptr %29, align 4
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %36 = load ptr, ptr %34, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %42 = load i32, ptr %40, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %30, ptr @Range)
  %43 = call ptr @llvm.invariant.start.p0(i64 24, ptr %30)
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %45 = load ptr, ptr %44, align 8
  %46 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %45, 0
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %48 = load ptr, ptr %47, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } %46, ptr %48, 1
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %51 = load ptr, ptr %50, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } %49, ptr %51, 2
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = insertvalue { ptr, ptr, ptr, i32 } %52, i32 %54, 3
  ret { ptr, ptr, ptr, i32 } %55
}

define { ptr, ptr, ptr, i32 } @Range_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Range)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 456, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %27 = call ptr %25(ptr %26)
  %28 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %29 = extractvalue { ptr, ptr, ptr, i32 } %28, 0
  %30 = call ptr @llvm.invariant.start.p0(i64 456, ptr %29)
  %31 = extractvalue { ptr, ptr, ptr, i32 } %28, 3
  %32 = getelementptr ptr, ptr %29, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 1
  %34 = load ptr, ptr %33, align 8
  %35 = extractvalue { ptr, ptr, ptr, i32 } %28, 1
  %36 = call ptr %34(ptr %35)
  %37 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %38 = extractvalue { ptr, ptr, ptr, i32 } %37, 0
  %39 = call ptr @llvm.invariant.start.p0(i64 456, ptr %38)
  %40 = extractvalue { ptr, ptr, ptr, i32 } %37, 3
  %41 = getelementptr ptr, ptr %38, i32 %40
  %42 = getelementptr ptr, ptr %41, i32 2
  %43 = load ptr, ptr %42, align 8
  %44 = extractvalue { ptr, ptr, ptr, i32 } %37, 1
  %45 = call ptr %43(ptr %44)
  %46 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ i32, i32, i32 }, ptr null, i32 1) to i64))
  %47 = alloca { ptr, ptr, ptr, i32 }, align 8
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 1
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 3
  store ptr @RangeIterator, ptr %47, align 8
  store ptr %46, ptr %48, align 8
  store i32 7, ptr %49, align 4
  %50 = call ptr @llvm.invariant.start.p0(i64 16, ptr %47)
  %51 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %52 = extractvalue { ptr, ptr, ptr, i32 } %51, 0
  %53 = call ptr @llvm.invariant.start.p0(i64 456, ptr %52)
  %54 = extractvalue { ptr, ptr, ptr, i32 } %51, 3
  %55 = getelementptr ptr, ptr %52, i32 %54
  %56 = load ptr, ptr %55, align 8
  %57 = extractvalue { ptr, ptr, ptr, i32 } %51, 1
  %58 = call ptr %56(ptr %57)
  %59 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %60 = extractvalue { ptr, ptr, ptr, i32 } %59, 0
  %61 = call ptr @llvm.invariant.start.p0(i64 456, ptr %60)
  %62 = extractvalue { ptr, ptr, ptr, i32 } %59, 3
  %63 = getelementptr ptr, ptr %60, i32 %62
  %64 = getelementptr ptr, ptr %63, i32 1
  %65 = load ptr, ptr %64, align 8
  %66 = extractvalue { ptr, ptr, ptr, i32 } %59, 1
  %67 = call ptr %65(ptr %66)
  %68 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %69 = extractvalue { ptr, ptr, ptr, i32 } %68, 0
  %70 = call ptr @llvm.invariant.start.p0(i64 456, ptr %69)
  %71 = extractvalue { ptr, ptr, ptr, i32 } %68, 3
  %72 = getelementptr ptr, ptr %69, i32 %71
  %73 = getelementptr ptr, ptr %72, i32 2
  %74 = load ptr, ptr %73, align 8
  %75 = extractvalue { ptr, ptr, ptr, i32 } %68, 1
  %76 = call ptr %74(ptr %75)
  %77 = load i32, ptr %58, align 4
  %78 = load i32, ptr %67, align 4
  %79 = load i32, ptr %76, align 4
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 0
  %81 = load ptr, ptr %80, align 8
  %82 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %81, 0
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 1
  %84 = load ptr, ptr %83, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } %82, ptr %84, 1
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 2
  %87 = load ptr, ptr %86, align 8
  %88 = insertvalue { ptr, ptr, ptr, i32 } %85, ptr %87, 2
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 3
  %90 = load i32, ptr %89, align 4
  %91 = insertvalue { ptr, ptr, ptr, i32 } %88, i32 %90, 3
  %92 = alloca [3 x ptr], align 8
  %93 = call ptr @llvm.invariant.start.p0(i64 24, ptr %92)
  %94 = getelementptr [3 x ptr], ptr %92, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %94, align 8
  %95 = getelementptr [3 x ptr], ptr %92, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %95, align 8
  %96 = getelementptr [3 x ptr], ptr %92, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %96, align 8
  %97 = call ptr @llvm.invariant.start.p0(i64 72, ptr %81)
  %98 = getelementptr ptr, ptr %81, i32 %90
  %99 = getelementptr ptr, ptr %98, i32 3
  %100 = load ptr, ptr %99, align 8
  %101 = alloca [3 x ptr], align 8
  %102 = getelementptr [3 x ptr], ptr %101, i32 0, i32 0
  store ptr @i32_typ, ptr %102, align 8
  %103 = getelementptr [3 x ptr], ptr %101, i32 0, i32 1
  store ptr @i32_typ, ptr %103, align 8
  %104 = getelementptr [3 x ptr], ptr %101, i32 0, i32 2
  store ptr @i32_typ, ptr %104, align 8
  %105 = call ptr %100({ ptr, ptr, ptr, i32 } %91, ptr %101, i32 %77, i32 %78, i32 %79)
  call void %105({ ptr, ptr, ptr, i32 } %91, { ptr, ptr, ptr, i32 } %91, ptr %92, i32 %77, i32 %78, i32 %79)
  %106 = alloca { ptr, ptr, ptr, i32 }, align 8
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 0
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %106, i32 0, i32 0
  %109 = load ptr, ptr %107, align 8
  store ptr %109, ptr %108, align 8
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 1
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %106, i32 0, i32 1
  %112 = load ptr, ptr %110, align 8
  store ptr %112, ptr %111, align 8
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 2
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %106, i32 0, i32 2
  %115 = load ptr, ptr %113, align 8
  store ptr %115, ptr %114, align 8
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 3
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %106, i32 0, i32 3
  %118 = load i32, ptr %116, align 4
  store i32 %118, ptr %117, align 4
  call void @set_offset(ptr %106, ptr @Iterator)
  %119 = call ptr @llvm.invariant.start.p0(i64 24, ptr %106)
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %106, i32 0, i32 0
  %121 = load ptr, ptr %120, align 8
  %122 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %121, 0
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %106, i32 0, i32 1
  %124 = load ptr, ptr %123, align 8
  %125 = insertvalue { ptr, ptr, ptr, i32 } %122, ptr %124, 1
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %106, i32 0, i32 2
  %127 = load ptr, ptr %126, align 8
  %128 = insertvalue { ptr, ptr, ptr, i32 } %125, ptr %127, 2
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %106, i32 0, i32 3
  %130 = load i32, ptr %129, align 4
  %131 = insertvalue { ptr, ptr, ptr, i32 } %128, i32 %130, 3
  ret { ptr, ptr, ptr, i32 } %131
}

define ptr @RangeIterator_field_counter(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { i32, i32, i32 }, ptr %0, i32 0, i32 0
  ret ptr %2
}

define ptr @RangeIterator_field_end(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { i32, i32, i32 }, ptr %0, i32 0, i32 1
  ret ptr %2
}

define ptr @RangeIterator_field_step(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { i32, i32, i32 }, ptr %0, i32 0, i32 2
  ret ptr %2
}

define ptr @RangeIterator_B_init_counterPtri32_endPtri32_stepPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1, i32 %2, i32 %3, i32 %4) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %6 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1)
  %7 = getelementptr [3 x ptr], ptr %1, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr ptr, ptr %8, i32 1
  %10 = getelementptr ptr, ptr %8, i32 2
  %11 = getelementptr ptr, ptr %8, i32 3
  %12 = getelementptr ptr, ptr %8, i32 4
  %13 = load i64, ptr %9, align 4
  %14 = load i64, ptr %10, align 4
  %15 = load ptr, ptr %11, align 8
  %16 = load ptr, ptr %12, align 8
  %17 = call i1 @subtype_test_wrapper(ptr %15, i64 %14, i64 %13, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %16)
  %18 = getelementptr [3 x ptr], ptr %1, i32 0, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr ptr, ptr %19, i32 1
  %21 = getelementptr ptr, ptr %19, i32 2
  %22 = getelementptr ptr, ptr %19, i32 3
  %23 = getelementptr ptr, ptr %19, i32 4
  %24 = load i64, ptr %20, align 4
  %25 = load i64, ptr %21, align 4
  %26 = load ptr, ptr %22, align 8
  %27 = load ptr, ptr %23, align 8
  %28 = call i1 @subtype_test_wrapper(ptr %26, i64 %25, i64 %24, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %27)
  %29 = getelementptr [3 x ptr], ptr %1, i32 0, i32 2
  %30 = load ptr, ptr %29, align 8
  %31 = getelementptr ptr, ptr %30, i32 1
  %32 = getelementptr ptr, ptr %30, i32 2
  %33 = getelementptr ptr, ptr %30, i32 3
  %34 = getelementptr ptr, ptr %30, i32 4
  %35 = load i64, ptr %31, align 4
  %36 = load i64, ptr %32, align 4
  %37 = load ptr, ptr %33, align 8
  %38 = load ptr, ptr %34, align 8
  %39 = call i1 @subtype_test_wrapper(ptr %37, i64 %36, i64 %35, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %38)
  %40 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %41 = getelementptr [9 x ptr], ptr %40, i32 0, i32 5
  %42 = getelementptr ptr, ptr %41, i32 7
  %43 = load ptr, ptr %42, align 8
  ret ptr %43
}

define ptr @RangeIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [9 x ptr], ptr %4, i32 0, i32 6
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @RangeIterator_init_counterPtri32_endPtri32_stepPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3, i32 %4, i32 %5) {
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %7, align 8
  %8 = call ptr @llvm.invariant.start.p0(i64 16, ptr %7)
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  call void @set_offset(ptr %9, ptr @RangeIterator)
  %22 = call ptr @llvm.invariant.start.p0(i64 24, ptr %9)
  %23 = load { ptr, ptr, ptr, i32 }, ptr %9, align 8
  %24 = extractvalue { ptr, ptr, ptr, i32 } %23, 0
  %25 = call ptr @llvm.invariant.start.p0(i64 72, ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %23, 3
  %27 = getelementptr ptr, ptr %24, i32 %26
  %28 = load ptr, ptr %27, align 8
  %29 = extractvalue { ptr, ptr, ptr, i32 } %23, 1
  %30 = call ptr %28(ptr %29)
  store i32 %3, ptr %30, align 4
  %31 = load { ptr, ptr, ptr, i32 }, ptr %9, align 8
  %32 = extractvalue { ptr, ptr, ptr, i32 } %31, 0
  %33 = call ptr @llvm.invariant.start.p0(i64 72, ptr %32)
  %34 = extractvalue { ptr, ptr, ptr, i32 } %31, 3
  %35 = getelementptr ptr, ptr %32, i32 %34
  %36 = getelementptr ptr, ptr %35, i32 1
  %37 = load ptr, ptr %36, align 8
  %38 = extractvalue { ptr, ptr, ptr, i32 } %31, 1
  %39 = call ptr %37(ptr %38)
  store i32 %4, ptr %39, align 4
  %40 = load { ptr, ptr, ptr, i32 }, ptr %9, align 8
  %41 = extractvalue { ptr, ptr, ptr, i32 } %40, 0
  %42 = call ptr @llvm.invariant.start.p0(i64 72, ptr %41)
  %43 = extractvalue { ptr, ptr, ptr, i32 } %40, 3
  %44 = getelementptr ptr, ptr %41, i32 %43
  %45 = getelementptr ptr, ptr %44, i32 2
  %46 = load ptr, ptr %45, align 8
  %47 = extractvalue { ptr, ptr, ptr, i32 } %40, 1
  %48 = call ptr %46(ptr %47)
  store i32 %5, ptr %48, align 4
  ret void
}

define { ptr, i32 } @RangeIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i32 }, align 8
  %.reg2mem1 = alloca { ptr, i32 }, align 8
  %.reg2mem3 = alloca { ptr, i32 }, align 8
  %.reg2mem5 = alloca { ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @RangeIterator)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 72, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %27 = call ptr %25(ptr %26)
  %28 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %29 = extractvalue { ptr, ptr, ptr, i32 } %28, 0
  %30 = call ptr @llvm.invariant.start.p0(i64 72, ptr %29)
  %31 = extractvalue { ptr, ptr, ptr, i32 } %28, 3
  %32 = getelementptr ptr, ptr %29, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 1
  %34 = load ptr, ptr %33, align 8
  %35 = extractvalue { ptr, ptr, ptr, i32 } %28, 1
  %36 = call ptr %34(ptr %35)
  %37 = load i32, ptr %27, align 4
  %38 = load i32, ptr %36, align 4
  %39 = icmp sgt i32 %37, %38
  %40 = alloca i32, align 4
  %41 = alloca ptr, align 8
  %42 = alloca i64, align 8
  %43 = alloca i32, align 4
  %44 = alloca i32, align 4
  %45 = alloca i32, align 4
  %46 = alloca ptr, align 8
  %47 = alloca i64, align 8
  br i1 %39, label %48, label %54

48:                                               ; preds = %3
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %42, align 4
  %49 = load i64, ptr %42, align 4
  store i64 %49, ptr %41, align 4
  %50 = load ptr, ptr %41, align 8
  %51 = insertvalue { ptr, i32 } undef, ptr %50, 0
  %52 = load i32, ptr %40, align 4
  %53 = insertvalue { ptr, i32 } %51, i32 %52, 1
  store { ptr, i32 } %53, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i32 }, ptr %.reg2mem3, align 8
  store { ptr, i32 } %.reload4, ptr %.reg2mem5, align 8
  br label %110

54:                                               ; preds = %3
  %55 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %56 = extractvalue { ptr, ptr, ptr, i32 } %55, 0
  %57 = call ptr @llvm.invariant.start.p0(i64 72, ptr %56)
  %58 = extractvalue { ptr, ptr, ptr, i32 } %55, 3
  %59 = getelementptr ptr, ptr %56, i32 %58
  %60 = load ptr, ptr %59, align 8
  %61 = extractvalue { ptr, ptr, ptr, i32 } %55, 1
  %62 = call ptr %60(ptr %61)
  %63 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %64 = extractvalue { ptr, ptr, ptr, i32 } %63, 0
  %65 = call ptr @llvm.invariant.start.p0(i64 72, ptr %64)
  %66 = extractvalue { ptr, ptr, ptr, i32 } %63, 3
  %67 = getelementptr ptr, ptr %64, i32 %66
  %68 = getelementptr ptr, ptr %67, i32 2
  %69 = load ptr, ptr %68, align 8
  %70 = extractvalue { ptr, ptr, ptr, i32 } %63, 1
  %71 = call ptr %69(ptr %70)
  %72 = load i32, ptr %62, align 4
  %73 = load i32, ptr %71, align 4
  %74 = add i32 %72, %73
  store i32 %74, ptr %43, align 4
  %75 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %76 = extractvalue { ptr, ptr, ptr, i32 } %75, 0
  %77 = call ptr @llvm.invariant.start.p0(i64 72, ptr %76)
  %78 = extractvalue { ptr, ptr, ptr, i32 } %75, 3
  %79 = getelementptr ptr, ptr %76, i32 %78
  %80 = load ptr, ptr %79, align 8
  %81 = extractvalue { ptr, ptr, ptr, i32 } %75, 1
  %82 = call ptr %80(ptr %81)
  %83 = load i32, ptr %43, align 4
  store i32 %83, ptr %82, align 4
  %84 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %85 = extractvalue { ptr, ptr, ptr, i32 } %84, 0
  %86 = call ptr @llvm.invariant.start.p0(i64 72, ptr %85)
  %87 = extractvalue { ptr, ptr, ptr, i32 } %84, 3
  %88 = getelementptr ptr, ptr %85, i32 %87
  %89 = load ptr, ptr %88, align 8
  %90 = extractvalue { ptr, ptr, ptr, i32 } %84, 1
  %91 = call ptr %89(ptr %90)
  %92 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %93 = extractvalue { ptr, ptr, ptr, i32 } %92, 0
  %94 = call ptr @llvm.invariant.start.p0(i64 72, ptr %93)
  %95 = extractvalue { ptr, ptr, ptr, i32 } %92, 3
  %96 = getelementptr ptr, ptr %93, i32 %95
  %97 = getelementptr ptr, ptr %96, i32 2
  %98 = load ptr, ptr %97, align 8
  %99 = extractvalue { ptr, ptr, ptr, i32 } %92, 1
  %100 = call ptr %98(ptr %99)
  %101 = load i32, ptr %91, align 4
  %102 = load i32, ptr %100, align 4
  %103 = sub i32 %101, %102
  store i32 %103, ptr %44, align 4
  %104 = load i32, ptr %44, align 4
  store i32 %104, ptr %45, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %47, align 4
  %105 = load i64, ptr %47, align 4
  store i64 %105, ptr %46, align 4
  %106 = load ptr, ptr %46, align 8
  %107 = insertvalue { ptr, i32 } undef, ptr %106, 0
  %108 = load i32, ptr %45, align 4
  %109 = insertvalue { ptr, i32 } %107, i32 %108, 1
  store { ptr, i32 } %109, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i32 }, ptr %.reg2mem1, align 8
  store { ptr, i32 } %.reload2, ptr %.reg2mem5, align 8
  br label %110

110:                                              ; preds = %54, %48
  %.reload6 = load { ptr, i32 }, ptr %.reg2mem5, align 8
  store { ptr, i32 } %.reload6, ptr %.reg2mem, align 8
  br label %111

111:                                              ; preds = %110
  %.reload = load { ptr, i32 }, ptr %.reg2mem, align 8
  ret { ptr, i32 } %.reload
}

define ptr @OutOfBoundsDetails_field_bounds(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { i32, i32 }, ptr %0, i32 0, i32 0
  ret ptr %2
}

define ptr @OutOfBoundsDetails_field_index(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { i32, i32 }, ptr %0, i32 0, i32 1
  ret ptr %2
}

define ptr @OutOfBoundsDetails_B_init_boundsPtri32_indexPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1, i32 %2, i32 %3) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = getelementptr [2 x ptr], ptr %1, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr ptr, ptr %7, i32 1
  %9 = getelementptr ptr, ptr %7, i32 2
  %10 = getelementptr ptr, ptr %7, i32 3
  %11 = getelementptr ptr, ptr %7, i32 4
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %15)
  %17 = getelementptr [2 x ptr], ptr %1, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr ptr, ptr %18, i32 1
  %20 = getelementptr ptr, ptr %18, i32 2
  %21 = getelementptr ptr, ptr %18, i32 3
  %22 = getelementptr ptr, ptr %18, i32 4
  %23 = load i64, ptr %19, align 4
  %24 = load i64, ptr %20, align 4
  %25 = load ptr, ptr %21, align 8
  %26 = load ptr, ptr %22, align 8
  %27 = call i1 @subtype_test_wrapper(ptr %25, i64 %24, i64 %23, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %26)
  %28 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %29 = getelementptr [6 x ptr], ptr %28, i32 0, i32 4
  %30 = getelementptr ptr, ptr %29, i32 7
  %31 = load ptr, ptr %30, align 8
  ret ptr %31
}

define ptr @OutOfBoundsDetails_B_report_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [6 x ptr], ptr %4, i32 0, i32 5
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @OutOfBoundsDetails_init_boundsPtri32_indexPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3, i32 %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @OutOfBoundsDetails)
  %21 = call ptr @llvm.invariant.start.p0(i64 24, ptr %8)
  %22 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %23 = extractvalue { ptr, ptr, ptr, i32 } %22, 0
  %24 = call ptr @llvm.invariant.start.p0(i64 48, ptr %23)
  %25 = extractvalue { ptr, ptr, ptr, i32 } %22, 3
  %26 = getelementptr ptr, ptr %23, i32 %25
  %27 = load ptr, ptr %26, align 8
  %28 = extractvalue { ptr, ptr, ptr, i32 } %22, 1
  %29 = call ptr %27(ptr %28)
  store i32 %3, ptr %29, align 4
  %30 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %31 = extractvalue { ptr, ptr, ptr, i32 } %30, 0
  %32 = call ptr @llvm.invariant.start.p0(i64 48, ptr %31)
  %33 = extractvalue { ptr, ptr, ptr, i32 } %30, 3
  %34 = getelementptr ptr, ptr %31, i32 %33
  %35 = getelementptr ptr, ptr %34, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = extractvalue { ptr, ptr, ptr, i32 } %30, 1
  %38 = call ptr %36(ptr %37)
  store i32 %4, ptr %38, align 4
  ret void
}

define void @OutOfBoundsDetails_report_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @OutOfBoundsDetails)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = call ptr @malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 45) to i64))
  %21 = alloca ptr, align 8
  store ptr %20, ptr %21, align 8
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %34 = load i32, ptr %32, align 4
  store i32 %34, ptr %33, align 4
  %35 = call ptr @llvm.invariant.start.p0(i64 16, ptr %22)
  %36 = load ptr, ptr %22, align 8
  %37 = getelementptr i8, ptr %36, i64 0
  %38 = load i352, ptr @mnqtc_The_size_of_the_collection_being_indexed_was, align 4
  store i352 %38, ptr %37, align 4
  %39 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 1
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 3
  store ptr @String, ptr %40, align 8
  store ptr %39, ptr %41, align 8
  store i32 7, ptr %42, align 4
  %43 = call ptr @llvm.invariant.start.p0(i64 16, ptr %40)
  %44 = getelementptr { ptr }, ptr %22, i32 0, i32 0
  %45 = load ptr, ptr %44, align 8
  %46 = insertvalue { ptr } undef, ptr %45, 0
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 0
  %48 = load ptr, ptr %47, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %48, 0
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } %49, ptr %51, 1
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 2
  %54 = load ptr, ptr %53, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %54, 2
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 3
  %57 = load i32, ptr %56, align 4
  %58 = insertvalue { ptr, ptr, ptr, i32 } %55, i32 %57, 3
  %59 = alloca [3 x ptr], align 8
  %60 = call ptr @llvm.invariant.start.p0(i64 24, ptr %59)
  %61 = getelementptr [3 x ptr], ptr %59, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %61, align 8
  %62 = getelementptr [3 x ptr], ptr %59, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %62, align 8
  %63 = getelementptr [3 x ptr], ptr %59, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %63, align 8
  %64 = call ptr @llvm.invariant.start.p0(i64 280, ptr %48)
  %65 = getelementptr ptr, ptr %48, i32 %57
  %66 = getelementptr ptr, ptr %65, i32 4
  %67 = load ptr, ptr %66, align 8
  %68 = alloca [3 x ptr], align 8
  %69 = getelementptr [3 x ptr], ptr %68, i32 0, i32 0
  store ptr @buffer_typ, ptr %69, align 8
  %70 = getelementptr [3 x ptr], ptr %68, i32 0, i32 1
  store ptr @i32_typ, ptr %70, align 8
  %71 = getelementptr [3 x ptr], ptr %68, i32 0, i32 2
  store ptr @i32_typ, ptr %71, align 8
  %72 = call ptr %67({ ptr, ptr, ptr, i32 } %58, ptr %68, { ptr } %46, i32 44, i32 45)
  call void %72({ ptr, ptr, ptr, i32 } %58, { ptr, ptr, ptr, i32 } %58, ptr %59, { ptr } %46, i32 44, i32 45)
  %73 = getelementptr { ptr, i160 }, ptr %40, i32 0, i32 0
  %74 = load ptr, ptr %73, align 8
  %75 = insertvalue { ptr, i160 } undef, ptr %74, 0
  %76 = getelementptr { ptr, i160 }, ptr %40, i32 0, i32 1
  %77 = load i160, ptr %76, align 4
  %78 = insertvalue { ptr, i160 } %75, i160 %77, 1
  %79 = alloca [1 x ptr], align 8
  %80 = call ptr @llvm.invariant.start.p0(i64 8, ptr %79)
  %81 = getelementptr [1 x ptr], ptr %79, i32 0, i32 0
  store ptr @_parameterization_String, ptr %81, align 8
  %82 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %83 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %84 = alloca [1 x ptr], align 8
  %85 = getelementptr [1 x ptr], ptr %84, i32 0, i32 0
  store ptr %74, ptr %85, align 8
  %86 = call ptr %83(ptr %84, { ptr, i160 } %78)
  call void %86(ptr %79, { ptr, i160 } %78)
  %87 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %88 = extractvalue { ptr, ptr, ptr, i32 } %87, 0
  %89 = call ptr @llvm.invariant.start.p0(i64 48, ptr %88)
  %90 = extractvalue { ptr, ptr, ptr, i32 } %87, 3
  %91 = getelementptr ptr, ptr %88, i32 %90
  %92 = load ptr, ptr %91, align 8
  %93 = extractvalue { ptr, ptr, ptr, i32 } %87, 1
  %94 = call ptr %92(ptr %93)
  %95 = alloca i160, align 8
  %96 = alloca ptr, align 8
  %97 = load i32, ptr %94, align 4
  store i32 %97, ptr %95, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %96, align 4
  %98 = load ptr, ptr %96, align 8
  %99 = insertvalue { ptr, i160 } undef, ptr %98, 0
  %100 = load i160, ptr %95, align 4
  %101 = insertvalue { ptr, i160 } %99, i160 %100, 1
  %102 = alloca [1 x ptr], align 8
  %103 = call ptr @llvm.invariant.start.p0(i64 8, ptr %102)
  %104 = getelementptr [1 x ptr], ptr %102, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %104, align 8
  %105 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %106 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %107 = alloca [1 x ptr], align 8
  %108 = getelementptr [1 x ptr], ptr %107, i32 0, i32 0
  store ptr %98, ptr %108, align 8
  %109 = call ptr %106(ptr %107, { ptr, i160 } %101)
  call void %109(ptr %102, { ptr, i160 } %101)
  %110 = call ptr @malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 26) to i64))
  %111 = alloca ptr, align 8
  store ptr %110, ptr %111, align 8
  %112 = alloca { ptr, ptr, ptr, i32 }, align 8
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %111, i32 0, i32 0
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 0
  %115 = load ptr, ptr %113, align 8
  store ptr %115, ptr %114, align 8
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %111, i32 0, i32 1
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 1
  %118 = load ptr, ptr %116, align 8
  store ptr %118, ptr %117, align 8
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %111, i32 0, i32 2
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 2
  %121 = load ptr, ptr %119, align 8
  store ptr %121, ptr %120, align 8
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %111, i32 0, i32 3
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 3
  %124 = load i32, ptr %122, align 4
  store i32 %124, ptr %123, align 4
  %125 = call ptr @llvm.invariant.start.p0(i64 16, ptr %112)
  %126 = load ptr, ptr %112, align 8
  %127 = getelementptr i8, ptr %126, i64 0
  %128 = load i200, ptr @niago_The_indexing_argument_was, align 4
  store i200 %128, ptr %127, align 4
  %129 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %130 = alloca { ptr, ptr, ptr, i32 }, align 8
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 1
  %132 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 3
  store ptr @String, ptr %130, align 8
  store ptr %129, ptr %131, align 8
  store i32 7, ptr %132, align 4
  %133 = call ptr @llvm.invariant.start.p0(i64 16, ptr %130)
  %134 = getelementptr { ptr }, ptr %112, i32 0, i32 0
  %135 = load ptr, ptr %134, align 8
  %136 = insertvalue { ptr } undef, ptr %135, 0
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 0
  %138 = load ptr, ptr %137, align 8
  %139 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %138, 0
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 1
  %141 = load ptr, ptr %140, align 8
  %142 = insertvalue { ptr, ptr, ptr, i32 } %139, ptr %141, 1
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 2
  %144 = load ptr, ptr %143, align 8
  %145 = insertvalue { ptr, ptr, ptr, i32 } %142, ptr %144, 2
  %146 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 3
  %147 = load i32, ptr %146, align 4
  %148 = insertvalue { ptr, ptr, ptr, i32 } %145, i32 %147, 3
  %149 = alloca [3 x ptr], align 8
  %150 = call ptr @llvm.invariant.start.p0(i64 24, ptr %149)
  %151 = getelementptr [3 x ptr], ptr %149, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %151, align 8
  %152 = getelementptr [3 x ptr], ptr %149, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %152, align 8
  %153 = getelementptr [3 x ptr], ptr %149, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %153, align 8
  %154 = call ptr @llvm.invariant.start.p0(i64 280, ptr %138)
  %155 = getelementptr ptr, ptr %138, i32 %147
  %156 = getelementptr ptr, ptr %155, i32 4
  %157 = load ptr, ptr %156, align 8
  %158 = alloca [3 x ptr], align 8
  %159 = getelementptr [3 x ptr], ptr %158, i32 0, i32 0
  store ptr @buffer_typ, ptr %159, align 8
  %160 = getelementptr [3 x ptr], ptr %158, i32 0, i32 1
  store ptr @i32_typ, ptr %160, align 8
  %161 = getelementptr [3 x ptr], ptr %158, i32 0, i32 2
  store ptr @i32_typ, ptr %161, align 8
  %162 = call ptr %157({ ptr, ptr, ptr, i32 } %148, ptr %158, { ptr } %136, i32 25, i32 26)
  call void %162({ ptr, ptr, ptr, i32 } %148, { ptr, ptr, ptr, i32 } %148, ptr %149, { ptr } %136, i32 25, i32 26)
  %163 = getelementptr { ptr, i160 }, ptr %130, i32 0, i32 0
  %164 = load ptr, ptr %163, align 8
  %165 = insertvalue { ptr, i160 } undef, ptr %164, 0
  %166 = getelementptr { ptr, i160 }, ptr %130, i32 0, i32 1
  %167 = load i160, ptr %166, align 4
  %168 = insertvalue { ptr, i160 } %165, i160 %167, 1
  %169 = alloca [1 x ptr], align 8
  %170 = call ptr @llvm.invariant.start.p0(i64 8, ptr %169)
  %171 = getelementptr [1 x ptr], ptr %169, i32 0, i32 0
  store ptr @_parameterization_String, ptr %171, align 8
  %172 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %173 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %174 = alloca [1 x ptr], align 8
  %175 = getelementptr [1 x ptr], ptr %174, i32 0, i32 0
  store ptr %164, ptr %175, align 8
  %176 = call ptr %173(ptr %174, { ptr, i160 } %168)
  call void %176(ptr %169, { ptr, i160 } %168)
  %177 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %178 = extractvalue { ptr, ptr, ptr, i32 } %177, 0
  %179 = call ptr @llvm.invariant.start.p0(i64 48, ptr %178)
  %180 = extractvalue { ptr, ptr, ptr, i32 } %177, 3
  %181 = getelementptr ptr, ptr %178, i32 %180
  %182 = getelementptr ptr, ptr %181, i32 1
  %183 = load ptr, ptr %182, align 8
  %184 = extractvalue { ptr, ptr, ptr, i32 } %177, 1
  %185 = call ptr %183(ptr %184)
  %186 = alloca i160, align 8
  %187 = alloca ptr, align 8
  %188 = load i32, ptr %185, align 4
  store i32 %188, ptr %186, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %187, align 4
  %189 = load ptr, ptr %187, align 8
  %190 = insertvalue { ptr, i160 } undef, ptr %189, 0
  %191 = load i160, ptr %186, align 4
  %192 = insertvalue { ptr, i160 } %190, i160 %191, 1
  %193 = alloca [1 x ptr], align 8
  %194 = call ptr @llvm.invariant.start.p0(i64 8, ptr %193)
  %195 = getelementptr [1 x ptr], ptr %193, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %195, align 8
  %196 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %197 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %198 = alloca [1 x ptr], align 8
  %199 = getelementptr [1 x ptr], ptr %198, i32 0, i32 0
  store ptr %189, ptr %199, align 8
  %200 = call ptr %197(ptr %198, { ptr, i160 } %192)
  call void %200(ptr %193, { ptr, i160 } %192)
  ret void
}

define ptr @OutOfBounds_field_details(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, i160 }, i32, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 0
  ret ptr %2
}

define ptr @OutOfBounds_field_line_number(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, i160 }, i32, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 1
  ret ptr %2
}

define ptr @OutOfBounds_field_file_name(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, i160 }, i32, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 2
  ret ptr %2
}

define ptr @OutOfBounds_field_message(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, i160 }, i32, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 3
  ret ptr %2
}

define ptr @OutOfBounds_B_init_boundsPtri32_indexPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1, i32 %2, i32 %3) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = getelementptr [2 x ptr], ptr %1, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr ptr, ptr %7, i32 1
  %9 = getelementptr ptr, ptr %7, i32 2
  %10 = getelementptr ptr, ptr %7, i32 3
  %11 = getelementptr ptr, ptr %7, i32 4
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %15)
  %17 = getelementptr [2 x ptr], ptr %1, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr ptr, ptr %18, i32 1
  %20 = getelementptr ptr, ptr %18, i32 2
  %21 = getelementptr ptr, ptr %18, i32 3
  %22 = getelementptr ptr, ptr %18, i32 4
  %23 = load i64, ptr %19, align 4
  %24 = load i64, ptr %20, align 4
  %25 = load ptr, ptr %21, align 8
  %26 = load ptr, ptr %22, align 8
  %27 = call i1 @subtype_test_wrapper(ptr %25, i64 %24, i64 %23, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %26)
  %28 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %29 = getelementptr [29 x ptr], ptr %28, i32 0, i32 10
  %30 = getelementptr ptr, ptr %29, i32 7
  %31 = load ptr, ptr %30, align 8
  ret ptr %31
}

define ptr @OutOfBounds_B_init_messageString({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [29 x ptr], ptr %16, i32 0, i32 11
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @OutOfBounds_B_init_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [29 x ptr], ptr %4, i32 0, i32 12
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @OutOfBounds_B_set_info_line_numberPtri32_file_nameString({ ptr, ptr, ptr, i32 } %0, ptr %1, i32 %2, { ptr, ptr, ptr, i32 } %3) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = getelementptr [2 x ptr], ptr %1, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr ptr, ptr %7, i32 1
  %9 = getelementptr ptr, ptr %7, i32 2
  %10 = getelementptr ptr, ptr %7, i32 3
  %11 = getelementptr ptr, ptr %7, i32 4
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %15)
  %17 = getelementptr [2 x ptr], ptr %1, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr ptr, ptr %18, i32 1
  %20 = getelementptr ptr, ptr %18, i32 2
  %21 = getelementptr ptr, ptr %18, i32 3
  %22 = getelementptr ptr, ptr %18, i32 4
  %23 = load i64, ptr %19, align 4
  %24 = load i64, ptr %20, align 4
  %25 = load ptr, ptr %21, align 8
  %26 = load ptr, ptr %22, align 8
  %27 = call i1 @subtype_test_wrapper(ptr %25, i64 %24, i64 %23, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %26)
  %28 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %29 = getelementptr [29 x ptr], ptr %28, i32 0, i32 13
  %30 = getelementptr ptr, ptr %29, i32 7
  %31 = load ptr, ptr %30, align 8
  ret ptr %31
}

define ptr @OutOfBounds_B_report_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [29 x ptr], ptr %4, i32 0, i32 14
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @OutOfBounds_B_print_message_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [29 x ptr], ptr %4, i32 0, i32 15
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @OutOfBounds_init_boundsPtri32_indexPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3, i32 %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @OutOfBounds)
  %21 = call ptr @llvm.invariant.start.p0(i64 24, ptr %8)
  %22 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ i32, i32 }, ptr null, i32 1) to i64))
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  store ptr @OutOfBoundsDetails, ptr %23, align 8
  store ptr %22, ptr %24, align 8
  store i32 7, ptr %25, align 4
  %26 = call ptr @llvm.invariant.start.p0(i64 16, ptr %23)
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %28 = load ptr, ptr %27, align 8
  %29 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %28, 0
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %31 = load ptr, ptr %30, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } %29, ptr %31, 1
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %34 = load ptr, ptr %33, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr %34, 2
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %37 = load i32, ptr %36, align 4
  %38 = insertvalue { ptr, ptr, ptr, i32 } %35, i32 %37, 3
  %39 = alloca [2 x ptr], align 8
  %40 = call ptr @llvm.invariant.start.p0(i64 16, ptr %39)
  %41 = getelementptr [2 x ptr], ptr %39, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %41, align 8
  %42 = getelementptr [2 x ptr], ptr %39, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %42, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 48, ptr %28)
  %44 = getelementptr ptr, ptr %28, i32 %37
  %45 = getelementptr ptr, ptr %44, i32 2
  %46 = load ptr, ptr %45, align 8
  %47 = alloca [2 x ptr], align 8
  %48 = getelementptr [2 x ptr], ptr %47, i32 0, i32 0
  store ptr @i32_typ, ptr %48, align 8
  %49 = getelementptr [2 x ptr], ptr %47, i32 0, i32 1
  store ptr @i32_typ, ptr %49, align 8
  %50 = call ptr %46({ ptr, ptr, ptr, i32 } %38, ptr %47, i32 %3, i32 %4)
  call void %50({ ptr, ptr, ptr, i32 } %38, { ptr, ptr, ptr, i32 } %38, ptr %39, i32 %3, i32 %4)
  %51 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %52 = extractvalue { ptr, ptr, ptr, i32 } %51, 0
  %53 = call ptr @llvm.invariant.start.p0(i64 232, ptr %52)
  %54 = extractvalue { ptr, ptr, ptr, i32 } %51, 3
  %55 = getelementptr ptr, ptr %52, i32 %54
  %56 = load ptr, ptr %55, align 8
  %57 = extractvalue { ptr, ptr, ptr, i32 } %51, 1
  %58 = call ptr %56(ptr %57)
  %59 = getelementptr { ptr, i160 }, ptr %23, i32 0, i32 0
  %60 = getelementptr { ptr, i160 }, ptr %58, i32 0, i32 0
  %61 = load ptr, ptr %59, align 8
  store ptr %61, ptr %60, align 8
  %62 = getelementptr { ptr, i160 }, ptr %23, i32 0, i32 1
  %63 = getelementptr { ptr, i160 }, ptr %58, i32 0, i32 1
  %64 = load i160, ptr %62, align 4
  store i160 %64, ptr %63, align 4
  %65 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %66 = extractvalue { ptr, ptr, ptr, i32 } %65, 0
  %67 = call ptr @llvm.invariant.start.p0(i64 232, ptr %66)
  %68 = extractvalue { ptr, ptr, ptr, i32 } %65, 3
  %69 = getelementptr ptr, ptr %66, i32 %68
  %70 = getelementptr ptr, ptr %69, i32 1
  %71 = load ptr, ptr %70, align 8
  %72 = extractvalue { ptr, ptr, ptr, i32 } %65, 1
  %73 = call ptr %71(ptr %72)
  store i32 0, ptr %73, align 4
  %74 = call ptr @malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64))
  %75 = alloca ptr, align 8
  store ptr %74, ptr %75, align 8
  %76 = alloca { ptr, ptr, ptr, i32 }, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 0
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 0
  %79 = load ptr, ptr %77, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 1
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 1
  %82 = load ptr, ptr %80, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 2
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 2
  %85 = load ptr, ptr %83, align 8
  store ptr %85, ptr %84, align 8
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 3
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 3
  %88 = load i32, ptr %86, align 4
  store i32 %88, ptr %87, align 4
  %89 = call ptr @llvm.invariant.start.p0(i64 16, ptr %76)
  %90 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %91 = alloca { ptr, ptr, ptr, i32 }, align 8
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %91, i32 0, i32 1
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %91, i32 0, i32 3
  store ptr @String, ptr %91, align 8
  store ptr %90, ptr %92, align 8
  store i32 7, ptr %93, align 4
  %94 = call ptr @llvm.invariant.start.p0(i64 16, ptr %91)
  %95 = getelementptr { ptr }, ptr %76, i32 0, i32 0
  %96 = load ptr, ptr %95, align 8
  %97 = insertvalue { ptr } undef, ptr %96, 0
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %91, i32 0, i32 0
  %99 = load ptr, ptr %98, align 8
  %100 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %99, 0
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %91, i32 0, i32 1
  %102 = load ptr, ptr %101, align 8
  %103 = insertvalue { ptr, ptr, ptr, i32 } %100, ptr %102, 1
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %91, i32 0, i32 2
  %105 = load ptr, ptr %104, align 8
  %106 = insertvalue { ptr, ptr, ptr, i32 } %103, ptr %105, 2
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %91, i32 0, i32 3
  %108 = load i32, ptr %107, align 4
  %109 = insertvalue { ptr, ptr, ptr, i32 } %106, i32 %108, 3
  %110 = alloca [3 x ptr], align 8
  %111 = call ptr @llvm.invariant.start.p0(i64 24, ptr %110)
  %112 = getelementptr [3 x ptr], ptr %110, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %112, align 8
  %113 = getelementptr [3 x ptr], ptr %110, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %113, align 8
  %114 = getelementptr [3 x ptr], ptr %110, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %114, align 8
  %115 = call ptr @llvm.invariant.start.p0(i64 280, ptr %99)
  %116 = getelementptr ptr, ptr %99, i32 %108
  %117 = getelementptr ptr, ptr %116, i32 4
  %118 = load ptr, ptr %117, align 8
  %119 = alloca [3 x ptr], align 8
  %120 = getelementptr [3 x ptr], ptr %119, i32 0, i32 0
  store ptr @buffer_typ, ptr %120, align 8
  %121 = getelementptr [3 x ptr], ptr %119, i32 0, i32 1
  store ptr @i32_typ, ptr %121, align 8
  %122 = getelementptr [3 x ptr], ptr %119, i32 0, i32 2
  store ptr @i32_typ, ptr %122, align 8
  %123 = call ptr %118({ ptr, ptr, ptr, i32 } %109, ptr %119, { ptr } %97, i32 0, i32 1)
  call void %123({ ptr, ptr, ptr, i32 } %109, { ptr, ptr, ptr, i32 } %109, ptr %110, { ptr } %97, i32 0, i32 1)
  %124 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %125 = extractvalue { ptr, ptr, ptr, i32 } %124, 0
  %126 = call ptr @llvm.invariant.start.p0(i64 232, ptr %125)
  %127 = extractvalue { ptr, ptr, ptr, i32 } %124, 3
  %128 = getelementptr ptr, ptr %125, i32 %127
  %129 = getelementptr ptr, ptr %128, i32 2
  %130 = load ptr, ptr %129, align 8
  %131 = extractvalue { ptr, ptr, ptr, i32 } %124, 1
  %132 = call ptr %130(ptr %131)
  %133 = alloca { ptr, ptr, ptr, i32 }, align 8
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %91, i32 0, i32 0
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 0
  %136 = load ptr, ptr %134, align 8
  store ptr %136, ptr %135, align 8
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %91, i32 0, i32 1
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 1
  %139 = load ptr, ptr %137, align 8
  store ptr %139, ptr %138, align 8
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %91, i32 0, i32 2
  %141 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 2
  %142 = load ptr, ptr %140, align 8
  store ptr %142, ptr %141, align 8
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %91, i32 0, i32 3
  %144 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 3
  %145 = load i32, ptr %143, align 4
  store i32 %145, ptr %144, align 4
  call void @set_offset(ptr %133, ptr @String)
  %146 = call ptr @llvm.invariant.start.p0(i64 24, ptr %133)
  %147 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 0
  %148 = getelementptr { ptr, ptr, ptr, i32 }, ptr %132, i32 0, i32 0
  %149 = load ptr, ptr %147, align 8
  store ptr %149, ptr %148, align 8
  %150 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 1
  %151 = getelementptr { ptr, ptr, ptr, i32 }, ptr %132, i32 0, i32 1
  %152 = load ptr, ptr %150, align 8
  store ptr %152, ptr %151, align 8
  %153 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 2
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %132, i32 0, i32 2
  %155 = load ptr, ptr %153, align 8
  store ptr %155, ptr %154, align 8
  %156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 3
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %132, i32 0, i32 3
  %158 = load i32, ptr %156, align 4
  store i32 %158, ptr %157, align 4
  %159 = call ptr @malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 66) to i64))
  %160 = alloca ptr, align 8
  store ptr %159, ptr %160, align 8
  %161 = alloca { ptr, ptr, ptr, i32 }, align 8
  %162 = getelementptr { ptr, ptr, ptr, i32 }, ptr %160, i32 0, i32 0
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %161, i32 0, i32 0
  %164 = load ptr, ptr %162, align 8
  store ptr %164, ptr %163, align 8
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %160, i32 0, i32 1
  %166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %161, i32 0, i32 1
  %167 = load ptr, ptr %165, align 8
  store ptr %167, ptr %166, align 8
  %168 = getelementptr { ptr, ptr, ptr, i32 }, ptr %160, i32 0, i32 2
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %161, i32 0, i32 2
  %170 = load ptr, ptr %168, align 8
  store ptr %170, ptr %169, align 8
  %171 = getelementptr { ptr, ptr, ptr, i32 }, ptr %160, i32 0, i32 3
  %172 = getelementptr { ptr, ptr, ptr, i32 }, ptr %161, i32 0, i32 3
  %173 = load i32, ptr %171, align 4
  store i32 %173, ptr %172, align 4
  %174 = call ptr @llvm.invariant.start.p0(i64 16, ptr %161)
  %175 = load ptr, ptr %161, align 8
  %176 = getelementptr i8, ptr %175, i64 0
  %177 = load i520, ptr @qtlis_An_outofbounds_error_occurred_while_indexing_into_a_collection, align 4
  store i520 %177, ptr %176, align 4
  %178 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %179 = alloca { ptr, ptr, ptr, i32 }, align 8
  %180 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 1
  %181 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 3
  store ptr @String, ptr %179, align 8
  store ptr %178, ptr %180, align 8
  store i32 7, ptr %181, align 4
  %182 = call ptr @llvm.invariant.start.p0(i64 16, ptr %179)
  %183 = getelementptr { ptr }, ptr %161, i32 0, i32 0
  %184 = load ptr, ptr %183, align 8
  %185 = insertvalue { ptr } undef, ptr %184, 0
  %186 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 0
  %187 = load ptr, ptr %186, align 8
  %188 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %187, 0
  %189 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 1
  %190 = load ptr, ptr %189, align 8
  %191 = insertvalue { ptr, ptr, ptr, i32 } %188, ptr %190, 1
  %192 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 2
  %193 = load ptr, ptr %192, align 8
  %194 = insertvalue { ptr, ptr, ptr, i32 } %191, ptr %193, 2
  %195 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 3
  %196 = load i32, ptr %195, align 4
  %197 = insertvalue { ptr, ptr, ptr, i32 } %194, i32 %196, 3
  %198 = alloca [3 x ptr], align 8
  %199 = call ptr @llvm.invariant.start.p0(i64 24, ptr %198)
  %200 = getelementptr [3 x ptr], ptr %198, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %200, align 8
  %201 = getelementptr [3 x ptr], ptr %198, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %201, align 8
  %202 = getelementptr [3 x ptr], ptr %198, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %202, align 8
  %203 = call ptr @llvm.invariant.start.p0(i64 280, ptr %187)
  %204 = getelementptr ptr, ptr %187, i32 %196
  %205 = getelementptr ptr, ptr %204, i32 4
  %206 = load ptr, ptr %205, align 8
  %207 = alloca [3 x ptr], align 8
  %208 = getelementptr [3 x ptr], ptr %207, i32 0, i32 0
  store ptr @buffer_typ, ptr %208, align 8
  %209 = getelementptr [3 x ptr], ptr %207, i32 0, i32 1
  store ptr @i32_typ, ptr %209, align 8
  %210 = getelementptr [3 x ptr], ptr %207, i32 0, i32 2
  store ptr @i32_typ, ptr %210, align 8
  %211 = call ptr %206({ ptr, ptr, ptr, i32 } %197, ptr %207, { ptr } %185, i32 65, i32 66)
  call void %211({ ptr, ptr, ptr, i32 } %197, { ptr, ptr, ptr, i32 } %197, ptr %198, { ptr } %185, i32 65, i32 66)
  %212 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %213 = extractvalue { ptr, ptr, ptr, i32 } %212, 0
  %214 = call ptr @llvm.invariant.start.p0(i64 232, ptr %213)
  %215 = extractvalue { ptr, ptr, ptr, i32 } %212, 3
  %216 = getelementptr ptr, ptr %213, i32 %215
  %217 = getelementptr ptr, ptr %216, i32 3
  %218 = load ptr, ptr %217, align 8
  %219 = extractvalue { ptr, ptr, ptr, i32 } %212, 1
  %220 = call ptr %218(ptr %219)
  %221 = alloca { ptr, ptr, ptr, i32 }, align 8
  %222 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 0
  %223 = getelementptr { ptr, ptr, ptr, i32 }, ptr %221, i32 0, i32 0
  %224 = load ptr, ptr %222, align 8
  store ptr %224, ptr %223, align 8
  %225 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 1
  %226 = getelementptr { ptr, ptr, ptr, i32 }, ptr %221, i32 0, i32 1
  %227 = load ptr, ptr %225, align 8
  store ptr %227, ptr %226, align 8
  %228 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 2
  %229 = getelementptr { ptr, ptr, ptr, i32 }, ptr %221, i32 0, i32 2
  %230 = load ptr, ptr %228, align 8
  store ptr %230, ptr %229, align 8
  %231 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 3
  %232 = getelementptr { ptr, ptr, ptr, i32 }, ptr %221, i32 0, i32 3
  %233 = load i32, ptr %231, align 4
  store i32 %233, ptr %232, align 4
  call void @set_offset(ptr %221, ptr @String)
  %234 = call ptr @llvm.invariant.start.p0(i64 24, ptr %221)
  %235 = getelementptr { ptr, ptr, ptr, i32 }, ptr %221, i32 0, i32 0
  %236 = getelementptr { ptr, ptr, ptr, i32 }, ptr %220, i32 0, i32 0
  %237 = load ptr, ptr %235, align 8
  store ptr %237, ptr %236, align 8
  %238 = getelementptr { ptr, ptr, ptr, i32 }, ptr %221, i32 0, i32 1
  %239 = getelementptr { ptr, ptr, ptr, i32 }, ptr %220, i32 0, i32 1
  %240 = load ptr, ptr %238, align 8
  store ptr %240, ptr %239, align 8
  %241 = getelementptr { ptr, ptr, ptr, i32 }, ptr %221, i32 0, i32 2
  %242 = getelementptr { ptr, ptr, ptr, i32 }, ptr %220, i32 0, i32 2
  %243 = load ptr, ptr %241, align 8
  store ptr %243, ptr %242, align 8
  %244 = getelementptr { ptr, ptr, ptr, i32 }, ptr %221, i32 0, i32 3
  %245 = getelementptr { ptr, ptr, ptr, i32 }, ptr %220, i32 0, i32 3
  %246 = load i32, ptr %244, align 4
  store i32 %246, ptr %245, align 4
  ret void
}

define void @OutOfBounds_print_message_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @OutOfBounds)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 232, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 3
  %26 = load ptr, ptr %25, align 8
  %27 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %28 = call ptr %26(ptr %27)
  %29 = getelementptr { ptr, i160 }, ptr %28, i32 0, i32 0
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, i160 } undef, ptr %30, 0
  %32 = getelementptr { ptr, i160 }, ptr %28, i32 0, i32 1
  %33 = load i160, ptr %32, align 4
  %34 = insertvalue { ptr, i160 } %31, i160 %33, 1
  %35 = alloca [1 x ptr], align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 8, ptr %35)
  %37 = getelementptr [1 x ptr], ptr %35, i32 0, i32 0
  store ptr @_parameterization_String, ptr %37, align 8
  %38 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %39 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %40 = alloca [1 x ptr], align 8
  %41 = getelementptr [1 x ptr], ptr %40, i32 0, i32 0
  store ptr %30, ptr %41, align 8
  %42 = call ptr %39(ptr %40, { ptr, i160 } %34)
  call void %42(ptr %35, { ptr, i160 } %34)
  %43 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %44 = extractvalue { ptr, ptr, ptr, i32 } %43, 0
  %45 = call ptr @llvm.invariant.start.p0(i64 232, ptr %44)
  %46 = extractvalue { ptr, ptr, ptr, i32 } %43, 3
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = load ptr, ptr %47, align 8
  %49 = extractvalue { ptr, ptr, ptr, i32 } %43, 1
  %50 = call ptr %48(ptr %49)
  store ptr %50, ptr %.reg2mem, align 8
  %.reload6 = load ptr, ptr %.reg2mem, align 8
  %51 = getelementptr { ptr, i160 }, ptr %.reload6, i32 0, i32 0
  %52 = load ptr, ptr %51, align 8
  %53 = ptrtoint ptr %52 to i64
  %54 = icmp ne i64 %53, ptrtoint (ptr @nil_typ to i64)
  %55 = alloca { ptr, ptr, ptr, i32 }, align 8
  %56 = alloca [0 x ptr], align 8
  %57 = alloca [0 x ptr], align 8
  br i1 %54, label %58, label %._crit_edge

._crit_edge:                                      ; preds = %3
  br label %96

58:                                               ; preds = %3
  %.reload5 = load ptr, ptr %.reg2mem, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload5, i32 0, i32 0
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 0
  %61 = load ptr, ptr %59, align 8
  store ptr %61, ptr %60, align 8
  %.reload4 = load ptr, ptr %.reg2mem, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload4, i32 0, i32 1
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  %64 = load ptr, ptr %62, align 8
  store ptr %64, ptr %63, align 8
  %.reload3 = load ptr, ptr %.reg2mem, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload3, i32 0, i32 2
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 2
  %67 = load ptr, ptr %65, align 8
  store ptr %67, ptr %66, align 8
  %.reload2 = load ptr, ptr %.reg2mem, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload2, i32 0, i32 3
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  %70 = load i32, ptr %68, align 4
  store i32 %70, ptr %69, align 4
  call void @set_offset(ptr %55, ptr @OutOfBoundsDetails)
  %71 = call ptr @llvm.invariant.start.p0(i64 24, ptr %55)
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 0
  %73 = load ptr, ptr %72, align 8
  %74 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %73, 0
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  %76 = load ptr, ptr %75, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } %74, ptr %76, 1
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 2
  %79 = load ptr, ptr %78, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } %77, ptr %79, 2
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  %82 = load i32, ptr %81, align 4
  %83 = insertvalue { ptr, ptr, ptr, i32 } %80, i32 %82, 3
  %84 = call ptr @llvm.invariant.start.p0(i64 0, ptr %56)
  %85 = call ptr @llvm.invariant.start.p0(i64 48, ptr %73)
  %86 = getelementptr ptr, ptr %73, i32 %82
  %87 = getelementptr ptr, ptr %86, i32 3
  %88 = load ptr, ptr %87, align 8
  %89 = call ptr %88({ ptr, ptr, ptr, i32 } %83, ptr %57)
  call void %89({ ptr, ptr, ptr, i32 } %83, { ptr, ptr, ptr, i32 } %83, ptr %56)
  %90 = getelementptr { ptr, i160 }, ptr %55, i32 0, i32 0
  %.reload1 = load ptr, ptr %.reg2mem, align 8
  %91 = getelementptr { ptr, i160 }, ptr %.reload1, i32 0, i32 0
  %92 = load ptr, ptr %90, align 8
  store ptr %92, ptr %91, align 8
  %93 = getelementptr { ptr, i160 }, ptr %55, i32 0, i32 1
  %.reload = load ptr, ptr %.reg2mem, align 8
  %94 = getelementptr { ptr, i160 }, ptr %.reload, i32 0, i32 1
  %95 = load i160, ptr %93, align 4
  store i160 %95, ptr %94, align 4
  br label %96

96:                                               ; preds = %._crit_edge, %58
  ret void
}

define ptr @IntArray_field_buffer(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr }, i32, i32 }, ptr %0, i32 0, i32 0
  ret ptr %2
}

define ptr @IntArray_field_length(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr }, i32, i32 }, ptr %0, i32 0, i32 1
  ret ptr %2
}

define ptr @IntArray_field_capacity(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr }, i32, i32 }, ptr %0, i32 0, i32 2
  ret ptr %2
}

define ptr @IntArray_B__Self_from_iterable_iterableIntIterable(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %4 = getelementptr [1 x ptr], ptr %0, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = load ptr, ptr getelementptr (ptr, ptr getelementptr ([77 x ptr], ptr @IntArray, i32 0, i32 26), i32 7), align 8
  ret ptr %15
}

define ptr @IntArray_B_init_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [77 x ptr], ptr %4, i32 0, i32 27
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @IntArray_B_init_bufferBufferPtri32_lengthPtri32_capacityPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2, i32 %3, i32 %4) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %6 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1)
  %7 = getelementptr [3 x ptr], ptr %1, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr ptr, ptr %8, i32 1
  %10 = getelementptr ptr, ptr %8, i32 2
  %11 = getelementptr ptr, ptr %8, i32 3
  %12 = getelementptr ptr, ptr %8, i32 4
  %13 = load i64, ptr %9, align 4
  %14 = load i64, ptr %10, align 4
  %15 = load ptr, ptr %11, align 8
  %16 = load ptr, ptr %12, align 8
  %17 = call i1 @subtype_test_wrapper(ptr %15, i64 %14, i64 %13, i64 -318192747195410237, i64 ptrtoint (ptr @buffer_typ to i64), ptr %16)
  %18 = getelementptr [3 x ptr], ptr %1, i32 0, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr ptr, ptr %19, i32 1
  %21 = getelementptr ptr, ptr %19, i32 2
  %22 = getelementptr ptr, ptr %19, i32 3
  %23 = getelementptr ptr, ptr %19, i32 4
  %24 = load i64, ptr %20, align 4
  %25 = load i64, ptr %21, align 4
  %26 = load ptr, ptr %22, align 8
  %27 = load ptr, ptr %23, align 8
  %28 = call i1 @subtype_test_wrapper(ptr %26, i64 %25, i64 %24, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %27)
  %29 = getelementptr [3 x ptr], ptr %1, i32 0, i32 2
  %30 = load ptr, ptr %29, align 8
  %31 = getelementptr ptr, ptr %30, i32 1
  %32 = getelementptr ptr, ptr %30, i32 2
  %33 = getelementptr ptr, ptr %30, i32 3
  %34 = getelementptr ptr, ptr %30, i32 4
  %35 = load i64, ptr %31, align 4
  %36 = load i64, ptr %32, align 4
  %37 = load ptr, ptr %33, align 8
  %38 = load ptr, ptr %34, align 8
  %39 = call i1 @subtype_test_wrapper(ptr %37, i64 %36, i64 %35, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %38)
  %40 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %41 = getelementptr [77 x ptr], ptr %40, i32 0, i32 28
  %42 = getelementptr ptr, ptr %41, i32 7
  %43 = load ptr, ptr %42, align 8
  ret ptr %43
}

define ptr @IntArray_B_length_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [77 x ptr], ptr %4, i32 0, i32 29
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @IntArray_B_capacity_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [77 x ptr], ptr %4, i32 0, i32 30
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @IntArray_B_buffer_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [77 x ptr], ptr %4, i32 0, i32 31
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @IntArray_B_append_xPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1, i32 %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [77 x ptr], ptr %16, i32 0, i32 32
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @IntArray_B_extend_aryIntArray({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7629948565578263212, i64 ptrtoint (ptr @IntArray to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [77 x ptr], ptr %16, i32 0, i32 33
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @IntArray_B__index_xPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1, i32 %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [77 x ptr], ptr %16, i32 0, i32 34
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @IntArray_B_pop_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [77 x ptr], ptr %4, i32 0, i32 35
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @IntArray_B_copy_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [77 x ptr], ptr %4, i32 0, i32 36
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @IntArray_B_each_fFunctionPtri32_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [77 x ptr], ptr %16, i32 0, i32 37
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @IntArray_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1, i32 %2, { ptr } %3) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = getelementptr [2 x ptr], ptr %1, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr ptr, ptr %7, i32 1
  %9 = getelementptr ptr, ptr %7, i32 2
  %10 = getelementptr ptr, ptr %7, i32 3
  %11 = getelementptr ptr, ptr %7, i32 4
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %15)
  %17 = getelementptr [2 x ptr], ptr %1, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr ptr, ptr %18, i32 1
  %20 = getelementptr ptr, ptr %18, i32 2
  %21 = getelementptr ptr, ptr %18, i32 3
  %22 = getelementptr ptr, ptr %18, i32 4
  %23 = load i64, ptr %19, align 4
  %24 = load i64, ptr %20, align 4
  %25 = load ptr, ptr %21, align 8
  %26 = load ptr, ptr %22, align 8
  %27 = call i1 @subtype_test_wrapper(ptr %25, i64 %24, i64 %23, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %26)
  %28 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %29 = getelementptr [77 x ptr], ptr %28, i32 0, i32 38
  %30 = getelementptr ptr, ptr %29, i32 7
  %31 = load ptr, ptr %30, align 8
  ret ptr %31
}

define ptr @IntArray_B_all_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [77 x ptr], ptr %16, i32 0, i32 39
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @IntArray_B_any_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [77 x ptr], ptr %16, i32 0, i32 40
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @IntArray_B_map_fFunctionPtri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [77 x ptr], ptr %16, i32 0, i32 41
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @IntArray_B_filter_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [77 x ptr], ptr %16, i32 0, i32 42
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @IntArray_B_chain_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [77 x ptr], ptr %16, i32 0, i32 43
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @IntArray_B_interleave_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [77 x ptr], ptr %16, i32 0, i32 44
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @IntArray_B_zip_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [77 x ptr], ptr %16, i32 0, i32 45
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @IntArray_B_product_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [77 x ptr], ptr %16, i32 0, i32 46
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @IntArray_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [77 x ptr], ptr %4, i32 0, i32 47
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @IntArray_B_repr_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [77 x ptr], ptr %4, i32 0, i32 48
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define { ptr, ptr, ptr, i32 } @IntArray__Self_from_iterable_iterableIntIterable(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %3 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem5 = alloca ptr, align 8
  %.reg2mem7 = alloca ptr, align 8
  %.reg2mem9 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %1, ptr %3, align 8
  %4 = call ptr @llvm.invariant.start.p0(i64 16, ptr %3)
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @IntIterable)
  %18 = call ptr @llvm.invariant.start.p0(i64 24, ptr %5)
  %19 = call ptr @malloc(i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64))
  %20 = alloca ptr, align 8
  store ptr %19, ptr %20, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  %34 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %35 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  store ptr @IntArray, ptr %36, align 8
  store ptr %35, ptr %37, align 8
  store i32 7, ptr %38, align 4
  %39 = call ptr @llvm.invariant.start.p0(i64 16, ptr %36)
  %40 = getelementptr { ptr }, ptr %21, i32 0, i32 0
  %41 = load ptr, ptr %40, align 8
  %42 = insertvalue { ptr } undef, ptr %41, 0
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %44 = load ptr, ptr %43, align 8
  %45 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %44, 0
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %47 = load ptr, ptr %46, align 8
  %48 = insertvalue { ptr, ptr, ptr, i32 } %45, ptr %47, 1
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %50 = load ptr, ptr %49, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } %48, ptr %50, 2
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %53 = load i32, ptr %52, align 4
  %54 = insertvalue { ptr, ptr, ptr, i32 } %51, i32 %53, 3
  %55 = alloca [3 x ptr], align 8
  %56 = call ptr @llvm.invariant.start.p0(i64 24, ptr %55)
  %57 = getelementptr [3 x ptr], ptr %55, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %57, align 8
  %58 = getelementptr [3 x ptr], ptr %55, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %58, align 8
  %59 = getelementptr [3 x ptr], ptr %55, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %59, align 8
  %60 = call ptr @llvm.invariant.start.p0(i64 616, ptr %44)
  %61 = getelementptr ptr, ptr %44, i32 %53
  %62 = getelementptr ptr, ptr %61, i32 5
  %63 = load ptr, ptr %62, align 8
  %64 = alloca [3 x ptr], align 8
  %65 = getelementptr [3 x ptr], ptr %64, i32 0, i32 0
  store ptr @buffer_typ, ptr %65, align 8
  %66 = getelementptr [3 x ptr], ptr %64, i32 0, i32 1
  store ptr @i32_typ, ptr %66, align 8
  %67 = getelementptr [3 x ptr], ptr %64, i32 0, i32 2
  store ptr @i32_typ, ptr %67, align 8
  %68 = call ptr %63({ ptr, ptr, ptr, i32 } %54, ptr %64, { ptr } %42, i32 0, i32 1)
  call void %68({ ptr, ptr, ptr, i32 } %54, { ptr, ptr, ptr, i32 } %54, ptr %55, { ptr } %42, i32 0, i32 1)
  %69 = alloca { ptr, ptr, ptr, i32 }, align 8
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %69, i32 0, i32 0
  %72 = load ptr, ptr %70, align 8
  store ptr %72, ptr %71, align 8
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %69, i32 0, i32 1
  %75 = load ptr, ptr %73, align 8
  store ptr %75, ptr %74, align 8
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %69, i32 0, i32 2
  %78 = load ptr, ptr %76, align 8
  store ptr %78, ptr %77, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %69, i32 0, i32 3
  %81 = load i32, ptr %79, align 4
  store i32 %81, ptr %80, align 4
  call void @set_offset(ptr %69, ptr @IntArray)
  %82 = call ptr @llvm.invariant.start.p0(i64 24, ptr %69)
  %83 = alloca { ptr, ptr, ptr, i32 }, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %69, i32 0, i32 0
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %83, i32 0, i32 0
  %86 = load ptr, ptr %84, align 8
  store ptr %86, ptr %85, align 8
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %69, i32 0, i32 1
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %83, i32 0, i32 1
  %89 = load ptr, ptr %87, align 8
  store ptr %89, ptr %88, align 8
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %69, i32 0, i32 2
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %83, i32 0, i32 2
  %92 = load ptr, ptr %90, align 8
  store ptr %92, ptr %91, align 8
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %69, i32 0, i32 3
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %83, i32 0, i32 3
  %95 = load i32, ptr %93, align 4
  store i32 %95, ptr %94, align 4
  %96 = call ptr @llvm.invariant.start.p0(i64 16, ptr %83)
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %98 = load ptr, ptr %97, align 8
  %99 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %98, 0
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %101 = load ptr, ptr %100, align 8
  %102 = insertvalue { ptr, ptr, ptr, i32 } %99, ptr %101, 1
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %104 = load ptr, ptr %103, align 8
  %105 = insertvalue { ptr, ptr, ptr, i32 } %102, ptr %104, 2
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %107 = load i32, ptr %106, align 4
  %108 = insertvalue { ptr, ptr, ptr, i32 } %105, i32 %107, 3
  %109 = alloca [0 x ptr], align 8
  %110 = call ptr @llvm.invariant.start.p0(i64 0, ptr %109)
  %111 = call ptr @llvm.invariant.start.p0(i64 192, ptr %98)
  %112 = getelementptr ptr, ptr %98, i32 %107
  %113 = getelementptr ptr, ptr %112, i32 10
  %114 = load ptr, ptr %113, align 8
  %115 = alloca [0 x ptr], align 8
  %116 = call ptr %114({ ptr, ptr, ptr, i32 } %108, ptr %115)
  %117 = call { ptr, ptr, ptr, i32 } %116({ ptr, ptr, ptr, i32 } %108, { ptr, ptr, ptr, i32 } %108, ptr %109)
  %118 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %117, ptr %118, align 8
  %119 = call ptr @llvm.invariant.start.p0(i64 16, ptr %118)
  %120 = alloca { ptr, ptr, ptr, i32 }, align 8
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 0
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 0
  %123 = load ptr, ptr %121, align 8
  store ptr %123, ptr %122, align 8
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 1
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 1
  %126 = load ptr, ptr %124, align 8
  store ptr %126, ptr %125, align 8
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 2
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 2
  %129 = load ptr, ptr %127, align 8
  store ptr %129, ptr %128, align 8
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 3
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 3
  %132 = load i32, ptr %130, align 4
  store i32 %132, ptr %131, align 4
  call void @set_offset(ptr %120, ptr @IntIterator)
  %133 = call ptr @llvm.invariant.start.p0(i64 24, ptr %120)
  %134 = alloca { ptr, ptr, ptr, i32 }, align 8
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 0
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 0
  %137 = load ptr, ptr %135, align 8
  store ptr %137, ptr %136, align 8
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 1
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 1
  %140 = load ptr, ptr %138, align 8
  store ptr %140, ptr %139, align 8
  %141 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 2
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 2
  %143 = load ptr, ptr %141, align 8
  store ptr %143, ptr %142, align 8
  %144 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 3
  %145 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 3
  %146 = load i32, ptr %144, align 4
  store i32 %146, ptr %145, align 4
  call void @set_offset(ptr %134, ptr @IntIterator)
  %147 = call ptr @llvm.invariant.start.p0(i64 24, ptr %134)
  %148 = alloca { ptr, ptr, ptr, i32 }, align 8
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 0
  %150 = getelementptr { ptr, ptr, ptr, i32 }, ptr %148, i32 0, i32 0
  %151 = load ptr, ptr %149, align 8
  store ptr %151, ptr %150, align 8
  %152 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 1
  %153 = getelementptr { ptr, ptr, ptr, i32 }, ptr %148, i32 0, i32 1
  %154 = load ptr, ptr %152, align 8
  store ptr %154, ptr %153, align 8
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 2
  %156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %148, i32 0, i32 2
  %157 = load ptr, ptr %155, align 8
  store ptr %157, ptr %156, align 8
  %158 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 3
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %148, i32 0, i32 3
  %160 = load i32, ptr %158, align 4
  store i32 %160, ptr %159, align 4
  %161 = call ptr @llvm.invariant.start.p0(i64 16, ptr %148)
  %162 = getelementptr { ptr, ptr, ptr, i32 }, ptr %148, i32 0, i32 0
  store ptr %162, ptr %.reg2mem9, align 8
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %148, i32 0, i32 1
  store ptr %163, ptr %.reg2mem7, align 8
  %164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %148, i32 0, i32 2
  store ptr %164, ptr %.reg2mem5, align 8
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %148, i32 0, i32 3
  store ptr %165, ptr %.reg2mem3, align 8
  %166 = alloca [0 x ptr], align 8
  %167 = alloca [0 x ptr], align 8
  %168 = alloca { ptr, i32 }, align 8
  %169 = alloca i64, align 8
  %170 = alloca i1, align 1
  %171 = alloca i32, align 4
  %172 = alloca [1 x ptr], align 8
  %173 = alloca [1 x ptr], align 8
  %174 = alloca { ptr, ptr, ptr, i32 }, align 8
  %175 = alloca { ptr, ptr, ptr, i32 }, align 8
  %176 = alloca { ptr, ptr, ptr, i32 }, align 8
  br label %177

177:                                              ; preds = %._crit_edge1, %2
  %.reload10 = load ptr, ptr %.reg2mem9, align 8
  %178 = load ptr, ptr %.reload10, align 8
  %179 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %178, 0
  %.reload8 = load ptr, ptr %.reg2mem7, align 8
  %180 = load ptr, ptr %.reload8, align 8
  %181 = insertvalue { ptr, ptr, ptr, i32 } %179, ptr %180, 1
  %.reload6 = load ptr, ptr %.reg2mem5, align 8
  %182 = load ptr, ptr %.reload6, align 8
  %183 = insertvalue { ptr, ptr, ptr, i32 } %181, ptr %182, 2
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %184 = load i32, ptr %.reload4, align 4
  %185 = insertvalue { ptr, ptr, ptr, i32 } %183, i32 %184, 3
  %186 = call ptr @llvm.invariant.start.p0(i64 0, ptr %166)
  %187 = call ptr @llvm.invariant.start.p0(i64 16, ptr %178)
  %188 = getelementptr ptr, ptr %178, i32 %184
  %189 = load ptr, ptr %188, align 8
  %190 = call ptr %189({ ptr, ptr, ptr, i32 } %185, ptr %167)
  %191 = call { ptr, i32 } %190({ ptr, ptr, ptr, i32 } %185, { ptr, ptr, ptr, i32 } %185, ptr %166)
  store { ptr, i32 } %191, ptr %168, align 8
  %192 = getelementptr { ptr, i32 }, ptr %168, i32 0, i32 0
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %169, align 4
  %193 = load ptr, ptr %192, align 8
  %194 = ptrtoint ptr %193 to i64
  %195 = load ptr, ptr %169, align 8
  %196 = ptrtoint ptr %195 to i64
  %197 = icmp ne i64 %194, %196
  store i1 %197, ptr %170, align 1
  %198 = load i1, ptr %170, align 1
  store i1 %198, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %199, label %._crit_edge

._crit_edge:                                      ; preds = %177
  br label %239

199:                                              ; preds = %177
  %200 = getelementptr { ptr, i32 }, ptr %168, i32 0, i32 1
  %201 = load i32, ptr %200, align 4
  store i32 %201, ptr %171, align 4
  %202 = load i32, ptr %171, align 4
  %203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %83, i32 0, i32 0
  %204 = load ptr, ptr %203, align 8
  %205 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %204, 0
  %206 = getelementptr { ptr, ptr, ptr, i32 }, ptr %83, i32 0, i32 1
  %207 = load ptr, ptr %206, align 8
  %208 = insertvalue { ptr, ptr, ptr, i32 } %205, ptr %207, 1
  %209 = getelementptr { ptr, ptr, ptr, i32 }, ptr %83, i32 0, i32 2
  %210 = load ptr, ptr %209, align 8
  %211 = insertvalue { ptr, ptr, ptr, i32 } %208, ptr %210, 2
  %212 = getelementptr { ptr, ptr, ptr, i32 }, ptr %83, i32 0, i32 3
  %213 = load i32, ptr %212, align 4
  %214 = insertvalue { ptr, ptr, ptr, i32 } %211, i32 %213, 3
  %215 = call ptr @llvm.invariant.start.p0(i64 8, ptr %172)
  %216 = getelementptr [1 x ptr], ptr %172, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %216, align 8
  %217 = call ptr @llvm.invariant.start.p0(i64 616, ptr %204)
  %218 = getelementptr ptr, ptr %204, i32 %213
  %219 = getelementptr ptr, ptr %218, i32 9
  %220 = load ptr, ptr %219, align 8
  %221 = getelementptr [1 x ptr], ptr %173, i32 0, i32 0
  store ptr @i32_typ, ptr %221, align 8
  %222 = call ptr %220({ ptr, ptr, ptr, i32 } %214, ptr %173, i32 %202)
  %223 = call { ptr, ptr, ptr, i32 } %222({ ptr, ptr, ptr, i32 } %214, { ptr, ptr, ptr, i32 } %214, ptr %172, i32 %202)
  store { ptr, ptr, ptr, i32 } %223, ptr %174, align 8
  %224 = call ptr @llvm.invariant.start.p0(i64 16, ptr %174)
  %225 = getelementptr { ptr, ptr, ptr, i32 }, ptr %174, i32 0, i32 0
  %226 = getelementptr { ptr, ptr, ptr, i32 }, ptr %175, i32 0, i32 0
  %227 = load ptr, ptr %225, align 8
  store ptr %227, ptr %226, align 8
  %228 = getelementptr { ptr, ptr, ptr, i32 }, ptr %174, i32 0, i32 1
  %229 = getelementptr { ptr, ptr, ptr, i32 }, ptr %175, i32 0, i32 1
  %230 = load ptr, ptr %228, align 8
  store ptr %230, ptr %229, align 8
  %231 = getelementptr { ptr, ptr, ptr, i32 }, ptr %174, i32 0, i32 2
  %232 = getelementptr { ptr, ptr, ptr, i32 }, ptr %175, i32 0, i32 2
  %233 = load ptr, ptr %231, align 8
  store ptr %233, ptr %232, align 8
  %234 = getelementptr { ptr, ptr, ptr, i32 }, ptr %174, i32 0, i32 3
  %235 = getelementptr { ptr, ptr, ptr, i32 }, ptr %175, i32 0, i32 3
  %236 = load i32, ptr %234, align 4
  store i32 %236, ptr %235, align 4
  call void @set_offset(ptr %175, ptr @IntArray)
  %237 = call ptr @llvm.invariant.start.p0(i64 24, ptr %175)
  %238 = load i32, ptr %171, align 4
  store i32 %238, ptr %168, align 4
  br label %239

239:                                              ; preds = %._crit_edge, %199
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %240

._crit_edge1:                                     ; preds = %239
  br label %177

240:                                              ; preds = %239
  %241 = getelementptr { ptr, ptr, ptr, i32 }, ptr %83, i32 0, i32 0
  %242 = getelementptr { ptr, ptr, ptr, i32 }, ptr %176, i32 0, i32 0
  %243 = load ptr, ptr %241, align 8
  store ptr %243, ptr %242, align 8
  %244 = getelementptr { ptr, ptr, ptr, i32 }, ptr %83, i32 0, i32 1
  %245 = getelementptr { ptr, ptr, ptr, i32 }, ptr %176, i32 0, i32 1
  %246 = load ptr, ptr %244, align 8
  store ptr %246, ptr %245, align 8
  %247 = getelementptr { ptr, ptr, ptr, i32 }, ptr %83, i32 0, i32 2
  %248 = getelementptr { ptr, ptr, ptr, i32 }, ptr %176, i32 0, i32 2
  %249 = load ptr, ptr %247, align 8
  store ptr %249, ptr %248, align 8
  %250 = getelementptr { ptr, ptr, ptr, i32 }, ptr %83, i32 0, i32 3
  %251 = getelementptr { ptr, ptr, ptr, i32 }, ptr %176, i32 0, i32 3
  %252 = load i32, ptr %250, align 4
  store i32 %252, ptr %251, align 4
  call void @set_offset(ptr %176, ptr @IntArray)
  %253 = call ptr @llvm.invariant.start.p0(i64 24, ptr %176)
  %254 = getelementptr { ptr, ptr, ptr, i32 }, ptr %176, i32 0, i32 0
  %255 = load ptr, ptr %254, align 8
  %256 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %255, 0
  %257 = getelementptr { ptr, ptr, ptr, i32 }, ptr %176, i32 0, i32 1
  %258 = load ptr, ptr %257, align 8
  %259 = insertvalue { ptr, ptr, ptr, i32 } %256, ptr %258, 1
  %260 = getelementptr { ptr, ptr, ptr, i32 }, ptr %176, i32 0, i32 2
  %261 = load ptr, ptr %260, align 8
  %262 = insertvalue { ptr, ptr, ptr, i32 } %259, ptr %261, 2
  %263 = getelementptr { ptr, ptr, ptr, i32 }, ptr %176, i32 0, i32 3
  %264 = load i32, ptr %263, align 4
  %265 = insertvalue { ptr, ptr, ptr, i32 } %262, i32 %264, 3
  ret { ptr, ptr, ptr, i32 } %265
}

define void @IntArray_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @IntArray)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = call ptr @malloc(i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64))
  %21 = alloca ptr, align 8
  store ptr %20, ptr %21, align 8
  %22 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %23 = extractvalue { ptr, ptr, ptr, i32 } %22, 0
  %24 = call ptr @llvm.invariant.start.p0(i64 616, ptr %23)
  %25 = extractvalue { ptr, ptr, ptr, i32 } %22, 3
  %26 = getelementptr ptr, ptr %23, i32 %25
  %27 = load ptr, ptr %26, align 8
  %28 = extractvalue { ptr, ptr, ptr, i32 } %22, 1
  %29 = call ptr %27(ptr %28)
  %30 = getelementptr { ptr }, ptr %21, i32 0, i32 0
  %31 = getelementptr { ptr }, ptr %29, i32 0, i32 0
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %34 = extractvalue { ptr, ptr, ptr, i32 } %33, 0
  %35 = call ptr @llvm.invariant.start.p0(i64 616, ptr %34)
  %36 = extractvalue { ptr, ptr, ptr, i32 } %33, 3
  %37 = getelementptr ptr, ptr %34, i32 %36
  %38 = getelementptr ptr, ptr %37, i32 2
  %39 = load ptr, ptr %38, align 8
  %40 = extractvalue { ptr, ptr, ptr, i32 } %33, 1
  %41 = call ptr %39(ptr %40)
  store i32 1, ptr %41, align 4
  %42 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %43 = extractvalue { ptr, ptr, ptr, i32 } %42, 0
  %44 = call ptr @llvm.invariant.start.p0(i64 616, ptr %43)
  %45 = extractvalue { ptr, ptr, ptr, i32 } %42, 3
  %46 = getelementptr ptr, ptr %43, i32 %45
  %47 = getelementptr ptr, ptr %46, i32 1
  %48 = load ptr, ptr %47, align 8
  %49 = extractvalue { ptr, ptr, ptr, i32 } %42, 1
  %50 = call ptr %48(ptr %49)
  store i32 0, ptr %50, align 4
  ret void
}

define void @IntArray_init_bufferBufferPtri32_lengthPtri32_capacityPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3, i32 %4, i32 %5) {
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %7, align 8
  %8 = call ptr @llvm.invariant.start.p0(i64 16, ptr %7)
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  call void @set_offset(ptr %9, ptr @IntArray)
  %22 = call ptr @llvm.invariant.start.p0(i64 24, ptr %9)
  %23 = alloca ptr, align 8
  store { ptr } %3, ptr %23, align 8
  %24 = load { ptr, ptr, ptr, i32 }, ptr %9, align 8
  %25 = extractvalue { ptr, ptr, ptr, i32 } %24, 0
  %26 = call ptr @llvm.invariant.start.p0(i64 616, ptr %25)
  %27 = extractvalue { ptr, ptr, ptr, i32 } %24, 3
  %28 = getelementptr ptr, ptr %25, i32 %27
  %29 = load ptr, ptr %28, align 8
  %30 = extractvalue { ptr, ptr, ptr, i32 } %24, 1
  %31 = call ptr %29(ptr %30)
  %32 = getelementptr { ptr }, ptr %31, i32 0, i32 0
  %33 = load ptr, ptr %23, align 8
  store ptr %33, ptr %32, align 8
  %34 = load { ptr, ptr, ptr, i32 }, ptr %9, align 8
  %35 = extractvalue { ptr, ptr, ptr, i32 } %34, 0
  %36 = call ptr @llvm.invariant.start.p0(i64 616, ptr %35)
  %37 = extractvalue { ptr, ptr, ptr, i32 } %34, 3
  %38 = getelementptr ptr, ptr %35, i32 %37
  %39 = getelementptr ptr, ptr %38, i32 1
  %40 = load ptr, ptr %39, align 8
  %41 = extractvalue { ptr, ptr, ptr, i32 } %34, 1
  %42 = call ptr %40(ptr %41)
  store i32 %4, ptr %42, align 4
  %43 = load { ptr, ptr, ptr, i32 }, ptr %9, align 8
  %44 = extractvalue { ptr, ptr, ptr, i32 } %43, 0
  %45 = call ptr @llvm.invariant.start.p0(i64 616, ptr %44)
  %46 = extractvalue { ptr, ptr, ptr, i32 } %43, 3
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = getelementptr ptr, ptr %47, i32 2
  %49 = load ptr, ptr %48, align 8
  %50 = extractvalue { ptr, ptr, ptr, i32 } %43, 1
  %51 = call ptr %49(ptr %50)
  store i32 %5, ptr %51, align 4
  ret void
}

define i32 @IntArray_length_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @IntArray)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 616, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 1
  %26 = load ptr, ptr %25, align 8
  %27 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %28 = call ptr %26(ptr %27)
  %29 = load i32, ptr %28, align 4
  ret i32 %29
}

define i32 @IntArray_capacity_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @IntArray)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 616, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 2
  %26 = load ptr, ptr %25, align 8
  %27 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %28 = call ptr %26(ptr %27)
  %29 = load i32, ptr %28, align 4
  ret i32 %29
}

define { ptr } @IntArray_buffer_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @IntArray)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 616, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %27 = call ptr %25(ptr %26)
  %28 = getelementptr { ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = insertvalue { ptr } undef, ptr %29, 0
  ret { ptr } %30
}

define { ptr, ptr, ptr, i32 } @IntArray_append_xPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @IntArray)
  %20 = call ptr @llvm.invariant.start.p0(i64 24, ptr %7)
  %21 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %22 = extractvalue { ptr, ptr, ptr, i32 } %21, 0
  %23 = call ptr @llvm.invariant.start.p0(i64 616, ptr %22)
  %24 = extractvalue { ptr, ptr, ptr, i32 } %21, 3
  %25 = getelementptr ptr, ptr %22, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 1
  %27 = load ptr, ptr %26, align 8
  %28 = extractvalue { ptr, ptr, ptr, i32 } %21, 1
  %29 = call ptr %27(ptr %28)
  %30 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %31 = extractvalue { ptr, ptr, ptr, i32 } %30, 0
  %32 = call ptr @llvm.invariant.start.p0(i64 616, ptr %31)
  %33 = extractvalue { ptr, ptr, ptr, i32 } %30, 3
  %34 = getelementptr ptr, ptr %31, i32 %33
  %35 = getelementptr ptr, ptr %34, i32 2
  %36 = load ptr, ptr %35, align 8
  %37 = extractvalue { ptr, ptr, ptr, i32 } %30, 1
  %38 = call ptr %36(ptr %37)
  %39 = load i32, ptr %29, align 4
  %40 = load i32, ptr %38, align 4
  %41 = icmp slt i32 %39, %40
  %42 = alloca i32, align 4
  %43 = alloca i32, align 4
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = alloca ptr, align 8
  %46 = alloca i32, align 4
  %47 = alloca i1, align 1
  %48 = alloca i32, align 4
  %49 = alloca i32, align 4
  %50 = alloca i32, align 4
  %51 = alloca i32, align 4
  %52 = alloca { ptr, ptr, ptr, i32 }, align 8
  br i1 %41, label %53, label %54

53:                                               ; preds = %4
  br label %162

54:                                               ; preds = %4
  %55 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %56 = extractvalue { ptr, ptr, ptr, i32 } %55, 0
  %57 = call ptr @llvm.invariant.start.p0(i64 616, ptr %56)
  %58 = extractvalue { ptr, ptr, ptr, i32 } %55, 3
  %59 = getelementptr ptr, ptr %56, i32 %58
  %60 = getelementptr ptr, ptr %59, i32 2
  %61 = load ptr, ptr %60, align 8
  %62 = extractvalue { ptr, ptr, ptr, i32 } %55, 1
  %63 = call ptr %61(ptr %62)
  store i32 2, ptr %42, align 4
  %64 = load i32, ptr %63, align 4
  %65 = load i32, ptr %42, align 4
  %66 = mul i32 %64, %65
  store i32 %66, ptr %43, align 4
  %67 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %68 = extractvalue { ptr, ptr, ptr, i32 } %67, 0
  %69 = call ptr @llvm.invariant.start.p0(i64 616, ptr %68)
  %70 = extractvalue { ptr, ptr, ptr, i32 } %67, 3
  %71 = getelementptr ptr, ptr %68, i32 %70
  %72 = getelementptr ptr, ptr %71, i32 2
  %73 = load ptr, ptr %72, align 8
  %74 = extractvalue { ptr, ptr, ptr, i32 } %67, 1
  %75 = call ptr %73(ptr %74)
  %76 = load i32, ptr %43, align 4
  store i32 %76, ptr %75, align 4
  %77 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %78 = extractvalue { ptr, ptr, ptr, i32 } %77, 0
  %79 = call ptr @llvm.invariant.start.p0(i64 616, ptr %78)
  %80 = extractvalue { ptr, ptr, ptr, i32 } %77, 3
  %81 = getelementptr ptr, ptr %78, i32 %80
  %82 = load ptr, ptr %81, align 8
  %83 = extractvalue { ptr, ptr, ptr, i32 } %77, 1
  %84 = call ptr %82(ptr %83)
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %84, i32 0, i32 0
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 0
  %87 = load ptr, ptr %85, align 8
  store ptr %87, ptr %86, align 8
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %84, i32 0, i32 1
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 1
  %90 = load ptr, ptr %88, align 8
  store ptr %90, ptr %89, align 8
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %84, i32 0, i32 2
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 2
  %93 = load ptr, ptr %91, align 8
  store ptr %93, ptr %92, align 8
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %84, i32 0, i32 3
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 3
  %96 = load i32, ptr %94, align 4
  store i32 %96, ptr %95, align 4
  %97 = call ptr @llvm.invariant.start.p0(i64 16, ptr %44)
  %98 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %99 = extractvalue { ptr, ptr, ptr, i32 } %98, 0
  %100 = call ptr @llvm.invariant.start.p0(i64 616, ptr %99)
  %101 = extractvalue { ptr, ptr, ptr, i32 } %98, 3
  %102 = getelementptr ptr, ptr %99, i32 %101
  %103 = getelementptr ptr, ptr %102, i32 2
  %104 = load ptr, ptr %103, align 8
  %105 = extractvalue { ptr, ptr, ptr, i32 } %98, 1
  %106 = call ptr %104(ptr %105)
  %107 = load i32, ptr %106, align 4
  %108 = getelementptr i32, ptr null, i32 %107
  %109 = ptrtoint ptr %108 to i64
  %110 = call ptr @malloc(i64 %109)
  store ptr %110, ptr %45, align 8
  %111 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %112 = extractvalue { ptr, ptr, ptr, i32 } %111, 0
  %113 = call ptr @llvm.invariant.start.p0(i64 616, ptr %112)
  %114 = extractvalue { ptr, ptr, ptr, i32 } %111, 3
  %115 = getelementptr ptr, ptr %112, i32 %114
  %116 = load ptr, ptr %115, align 8
  %117 = extractvalue { ptr, ptr, ptr, i32 } %111, 1
  %118 = call ptr %116(ptr %117)
  %119 = getelementptr { ptr }, ptr %45, i32 0, i32 0
  %120 = getelementptr { ptr }, ptr %118, i32 0, i32 0
  %121 = load ptr, ptr %119, align 8
  store ptr %121, ptr %120, align 8
  store i32 0, ptr %46, align 4
  br label %122

122:                                              ; preds = %._crit_edge1, %54
  %123 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %124 = extractvalue { ptr, ptr, ptr, i32 } %123, 0
  %125 = call ptr @llvm.invariant.start.p0(i64 616, ptr %124)
  %126 = extractvalue { ptr, ptr, ptr, i32 } %123, 3
  %127 = getelementptr ptr, ptr %124, i32 %126
  %128 = getelementptr ptr, ptr %127, i32 1
  %129 = load ptr, ptr %128, align 8
  %130 = extractvalue { ptr, ptr, ptr, i32 } %123, 1
  %131 = call ptr %129(ptr %130)
  %132 = load i32, ptr %46, align 4
  %133 = load i32, ptr %131, align 4
  %134 = icmp slt i32 %132, %133
  store i1 %134, ptr %47, align 1
  %135 = load i1, ptr %47, align 1
  store i1 %135, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %136, label %._crit_edge

._crit_edge:                                      ; preds = %122
  br label %160

136:                                              ; preds = %122
  %137 = load ptr, ptr %44, align 8
  %138 = load i32, ptr %46, align 4
  %139 = getelementptr i32, ptr null, i32 %138
  %140 = ptrtoint ptr %139 to i64
  %141 = getelementptr i8, ptr %137, i64 %140
  %142 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %143 = extractvalue { ptr, ptr, ptr, i32 } %142, 0
  %144 = call ptr @llvm.invariant.start.p0(i64 616, ptr %143)
  %145 = extractvalue { ptr, ptr, ptr, i32 } %142, 3
  %146 = getelementptr ptr, ptr %143, i32 %145
  %147 = load ptr, ptr %146, align 8
  %148 = extractvalue { ptr, ptr, ptr, i32 } %142, 1
  %149 = call ptr %147(ptr %148)
  %150 = load ptr, ptr %149, align 8
  %151 = load i32, ptr %46, align 4
  %152 = getelementptr i32, ptr null, i32 %151
  %153 = ptrtoint ptr %152 to i64
  %154 = getelementptr i8, ptr %150, i64 %153
  %155 = load i32, ptr %141, align 4
  store i32 %155, ptr %154, align 4
  store i32 1, ptr %48, align 4
  %156 = load i32, ptr %46, align 4
  %157 = load i32, ptr %48, align 4
  %158 = add i32 %156, %157
  store i32 %158, ptr %49, align 4
  %159 = load i32, ptr %49, align 4
  store i32 %159, ptr %46, align 4
  br label %160

160:                                              ; preds = %._crit_edge, %136
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %161

._crit_edge1:                                     ; preds = %160
  br label %122

161:                                              ; preds = %160
  br label %162

162:                                              ; preds = %161, %53
  %163 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %164 = extractvalue { ptr, ptr, ptr, i32 } %163, 0
  %165 = call ptr @llvm.invariant.start.p0(i64 616, ptr %164)
  %166 = extractvalue { ptr, ptr, ptr, i32 } %163, 3
  %167 = getelementptr ptr, ptr %164, i32 %166
  %168 = load ptr, ptr %167, align 8
  %169 = extractvalue { ptr, ptr, ptr, i32 } %163, 1
  %170 = call ptr %168(ptr %169)
  %171 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %172 = extractvalue { ptr, ptr, ptr, i32 } %171, 0
  %173 = call ptr @llvm.invariant.start.p0(i64 616, ptr %172)
  %174 = extractvalue { ptr, ptr, ptr, i32 } %171, 3
  %175 = getelementptr ptr, ptr %172, i32 %174
  %176 = getelementptr ptr, ptr %175, i32 1
  %177 = load ptr, ptr %176, align 8
  %178 = extractvalue { ptr, ptr, ptr, i32 } %171, 1
  %179 = call ptr %177(ptr %178)
  %180 = load ptr, ptr %170, align 8
  %181 = load i32, ptr %179, align 4
  %182 = getelementptr i32, ptr null, i32 %181
  %183 = ptrtoint ptr %182 to i64
  %184 = getelementptr i8, ptr %180, i64 %183
  store i32 %3, ptr %184, align 4
  %185 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %186 = extractvalue { ptr, ptr, ptr, i32 } %185, 0
  %187 = call ptr @llvm.invariant.start.p0(i64 616, ptr %186)
  %188 = extractvalue { ptr, ptr, ptr, i32 } %185, 3
  %189 = getelementptr ptr, ptr %186, i32 %188
  %190 = getelementptr ptr, ptr %189, i32 1
  %191 = load ptr, ptr %190, align 8
  %192 = extractvalue { ptr, ptr, ptr, i32 } %185, 1
  %193 = call ptr %191(ptr %192)
  store i32 1, ptr %50, align 4
  %194 = load i32, ptr %193, align 4
  %195 = load i32, ptr %50, align 4
  %196 = add i32 %194, %195
  store i32 %196, ptr %51, align 4
  %197 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %198 = extractvalue { ptr, ptr, ptr, i32 } %197, 0
  %199 = call ptr @llvm.invariant.start.p0(i64 616, ptr %198)
  %200 = extractvalue { ptr, ptr, ptr, i32 } %197, 3
  %201 = getelementptr ptr, ptr %198, i32 %200
  %202 = getelementptr ptr, ptr %201, i32 1
  %203 = load ptr, ptr %202, align 8
  %204 = extractvalue { ptr, ptr, ptr, i32 } %197, 1
  %205 = call ptr %203(ptr %204)
  %206 = load i32, ptr %51, align 4
  store i32 %206, ptr %205, align 4
  %207 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %208 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 0
  %209 = load ptr, ptr %207, align 8
  store ptr %209, ptr %208, align 8
  %210 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %211 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 1
  %212 = load ptr, ptr %210, align 8
  store ptr %212, ptr %211, align 8
  %213 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %214 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 2
  %215 = load ptr, ptr %213, align 8
  store ptr %215, ptr %214, align 8
  %216 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 3
  %218 = load i32, ptr %216, align 4
  store i32 %218, ptr %217, align 4
  call void @set_offset(ptr %52, ptr @IntArray)
  %219 = call ptr @llvm.invariant.start.p0(i64 24, ptr %52)
  %220 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 0
  %221 = load ptr, ptr %220, align 8
  %222 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %221, 0
  %223 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 1
  %224 = load ptr, ptr %223, align 8
  %225 = insertvalue { ptr, ptr, ptr, i32 } %222, ptr %224, 1
  %226 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 2
  %227 = load ptr, ptr %226, align 8
  %228 = insertvalue { ptr, ptr, ptr, i32 } %225, ptr %227, 2
  %229 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 3
  %230 = load i32, ptr %229, align 4
  %231 = insertvalue { ptr, ptr, ptr, i32 } %228, i32 %230, 3
  ret { ptr, ptr, ptr, i32 } %231
}

define { ptr, ptr, ptr, i32 } @IntArray_extend_aryIntArray({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem5 = alloca i1, align 1
  %.reg2mem8 = alloca ptr, align 8
  %.reg2mem13 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @IntArray)
  %20 = call ptr @llvm.invariant.start.p0(i64 24, ptr %7)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @IntArray)
  %36 = call ptr @llvm.invariant.start.p0(i64 24, ptr %23)
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %38 = load ptr, ptr %37, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %38, 0
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %41 = load ptr, ptr %40, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } %39, ptr %41, 1
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %44 = load ptr, ptr %43, align 8
  %45 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %44, 2
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %47 = load i32, ptr %46, align 4
  %48 = insertvalue { ptr, ptr, ptr, i32 } %45, i32 %47, 3
  %49 = alloca [0 x ptr], align 8
  %50 = call ptr @llvm.invariant.start.p0(i64 0, ptr %49)
  %51 = call ptr @llvm.invariant.start.p0(i64 616, ptr %38)
  %52 = getelementptr ptr, ptr %38, i32 %47
  %53 = getelementptr ptr, ptr %52, i32 8
  %54 = load ptr, ptr %53, align 8
  %55 = alloca [0 x ptr], align 8
  %56 = call ptr %54({ ptr, ptr, ptr, i32 } %48, ptr %55)
  %57 = call { ptr } %56({ ptr, ptr, ptr, i32 } %48, { ptr, ptr, ptr, i32 } %48, ptr %49)
  %58 = alloca { ptr }, align 8
  store { ptr } %57, ptr %58, align 8
  %59 = alloca { ptr, ptr, ptr, i32 }, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 0
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 0
  %62 = load ptr, ptr %60, align 8
  store ptr %62, ptr %61, align 8
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 1
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 1
  %65 = load ptr, ptr %63, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 2
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 2
  %68 = load ptr, ptr %66, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 3
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 3
  %71 = load i32, ptr %69, align 4
  store i32 %71, ptr %70, align 4
  %72 = call ptr @llvm.invariant.start.p0(i64 16, ptr %59)
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %74 = load ptr, ptr %73, align 8
  %75 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %74, 0
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %77 = load ptr, ptr %76, align 8
  %78 = insertvalue { ptr, ptr, ptr, i32 } %75, ptr %77, 1
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %80 = load ptr, ptr %79, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } %78, ptr %80, 2
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %83 = load i32, ptr %82, align 4
  %84 = insertvalue { ptr, ptr, ptr, i32 } %81, i32 %83, 3
  %85 = alloca [0 x ptr], align 8
  %86 = call ptr @llvm.invariant.start.p0(i64 0, ptr %85)
  %87 = call ptr @llvm.invariant.start.p0(i64 616, ptr %74)
  %88 = getelementptr ptr, ptr %74, i32 %83
  %89 = getelementptr ptr, ptr %88, i32 6
  %90 = load ptr, ptr %89, align 8
  %91 = alloca [0 x ptr], align 8
  %92 = call ptr %90({ ptr, ptr, ptr, i32 } %84, ptr %91)
  %93 = call i32 %92({ ptr, ptr, ptr, i32 } %84, { ptr, ptr, ptr, i32 } %84, ptr %85)
  store i32 %93, ptr %.reg2mem13, align 4
  %94 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %95 = extractvalue { ptr, ptr, ptr, i32 } %94, 0
  %96 = call ptr @llvm.invariant.start.p0(i64 616, ptr %95)
  %97 = extractvalue { ptr, ptr, ptr, i32 } %94, 3
  %98 = getelementptr ptr, ptr %95, i32 %97
  %99 = getelementptr ptr, ptr %98, i32 1
  %100 = load ptr, ptr %99, align 8
  %101 = extractvalue { ptr, ptr, ptr, i32 } %94, 1
  %102 = call ptr %100(ptr %101)
  %103 = load i32, ptr %102, align 4
  %.reload18 = load i32, ptr %.reg2mem13, align 4
  %104 = add i32 %103, %.reload18
  %105 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %106 = extractvalue { ptr, ptr, ptr, i32 } %105, 0
  %107 = call ptr @llvm.invariant.start.p0(i64 616, ptr %106)
  %108 = extractvalue { ptr, ptr, ptr, i32 } %105, 3
  %109 = getelementptr ptr, ptr %106, i32 %108
  %110 = getelementptr ptr, ptr %109, i32 2
  %111 = load ptr, ptr %110, align 8
  %112 = extractvalue { ptr, ptr, ptr, i32 } %105, 1
  %113 = call ptr %111(ptr %112)
  %114 = load i32, ptr %113, align 4
  %115 = icmp slt i32 %104, %114
  %116 = alloca i32, align 4
  %117 = alloca i32, align 4
  %118 = alloca i1, align 1
  %119 = alloca i32, align 4
  %120 = alloca i32, align 4
  %121 = alloca i32, align 4
  %122 = alloca i32, align 4
  %123 = alloca i32, align 4
  %124 = alloca { ptr, ptr, ptr, i32 }, align 8
  %125 = alloca ptr, align 8
  %126 = alloca i32, align 4
  %127 = alloca i32, align 4
  %128 = alloca i32, align 4
  %129 = alloca i1, align 1
  %130 = alloca i1, align 1
  %131 = alloca i32, align 4
  %132 = alloca i32, align 4
  %133 = alloca i32, align 4
  %134 = alloca i32, align 4
  %135 = alloca i32, align 4
  %136 = alloca i32, align 4
  %137 = alloca i32, align 4
  %138 = alloca { ptr, ptr, ptr, i32 }, align 8
  br i1 %115, label %139, label %195

139:                                              ; preds = %4
  %140 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %141 = extractvalue { ptr, ptr, ptr, i32 } %140, 0
  %142 = call ptr @llvm.invariant.start.p0(i64 616, ptr %141)
  %143 = extractvalue { ptr, ptr, ptr, i32 } %140, 3
  %144 = getelementptr ptr, ptr %141, i32 %143
  %145 = getelementptr ptr, ptr %144, i32 1
  %146 = load ptr, ptr %145, align 8
  %147 = extractvalue { ptr, ptr, ptr, i32 } %140, 1
  %148 = call ptr %146(ptr %147)
  store ptr %148, ptr %.reg2mem8, align 8
  store i32 0, ptr %116, align 4
  br label %149

149:                                              ; preds = %._crit_edge1, %139
  %150 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %151 = extractvalue { ptr, ptr, ptr, i32 } %150, 0
  %152 = call ptr @llvm.invariant.start.p0(i64 616, ptr %151)
  %153 = extractvalue { ptr, ptr, ptr, i32 } %150, 3
  %154 = getelementptr ptr, ptr %151, i32 %153
  %155 = getelementptr ptr, ptr %154, i32 1
  %156 = load ptr, ptr %155, align 8
  %157 = extractvalue { ptr, ptr, ptr, i32 } %150, 1
  %158 = call ptr %156(ptr %157)
  %159 = load i32, ptr %158, align 4
  %.reload17 = load i32, ptr %.reg2mem13, align 4
  %160 = add i32 %159, %.reload17
  store i32 %160, ptr %117, align 4
  %.reload12 = load ptr, ptr %.reg2mem8, align 8
  %161 = load i32, ptr %.reload12, align 4
  %162 = load i32, ptr %117, align 4
  %163 = icmp slt i32 %161, %162
  store i1 %163, ptr %118, align 1
  %164 = load i1, ptr %118, align 1
  store i1 %164, ptr %.reg2mem5, align 1
  %.reload7 = load i1, ptr %.reg2mem5, align 1
  br i1 %.reload7, label %165, label %._crit_edge

._crit_edge:                                      ; preds = %149
  br label %193

165:                                              ; preds = %149
  %166 = load ptr, ptr %59, align 8
  %167 = load i32, ptr %116, align 4
  %168 = getelementptr i32, ptr null, i32 %167
  %169 = ptrtoint ptr %168 to i64
  %170 = getelementptr i8, ptr %166, i64 %169
  %171 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %172 = extractvalue { ptr, ptr, ptr, i32 } %171, 0
  %173 = call ptr @llvm.invariant.start.p0(i64 616, ptr %172)
  %174 = extractvalue { ptr, ptr, ptr, i32 } %171, 3
  %175 = getelementptr ptr, ptr %172, i32 %174
  %176 = load ptr, ptr %175, align 8
  %177 = extractvalue { ptr, ptr, ptr, i32 } %171, 1
  %178 = call ptr %176(ptr %177)
  %179 = load ptr, ptr %178, align 8
  %.reload11 = load ptr, ptr %.reg2mem8, align 8
  %180 = load i32, ptr %.reload11, align 4
  %181 = getelementptr i32, ptr null, i32 %180
  %182 = ptrtoint ptr %181 to i64
  %183 = getelementptr i8, ptr %179, i64 %182
  %184 = load i32, ptr %170, align 4
  store i32 %184, ptr %183, align 4
  store i32 1, ptr %119, align 4
  %.reload10 = load ptr, ptr %.reg2mem8, align 8
  %185 = load i32, ptr %.reload10, align 4
  %186 = load i32, ptr %119, align 4
  %187 = add i32 %185, %186
  store i32 %187, ptr %120, align 4
  %188 = load i32, ptr %120, align 4
  %.reload9 = load ptr, ptr %.reg2mem8, align 8
  store i32 %188, ptr %.reload9, align 4
  store i32 1, ptr %121, align 4
  %189 = load i32, ptr %116, align 4
  %190 = load i32, ptr %121, align 4
  %191 = add i32 %189, %190
  store i32 %191, ptr %122, align 4
  %192 = load i32, ptr %122, align 4
  store i32 %192, ptr %116, align 4
  br label %193

193:                                              ; preds = %._crit_edge, %165
  %.reload6 = load i1, ptr %.reg2mem5, align 1
  br i1 %.reload6, label %._crit_edge1, label %194

._crit_edge1:                                     ; preds = %193
  br label %149

194:                                              ; preds = %193
  br label %347

195:                                              ; preds = %4
  %196 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %197 = extractvalue { ptr, ptr, ptr, i32 } %196, 0
  %198 = call ptr @llvm.invariant.start.p0(i64 616, ptr %197)
  %199 = extractvalue { ptr, ptr, ptr, i32 } %196, 3
  %200 = getelementptr ptr, ptr %197, i32 %199
  %201 = getelementptr ptr, ptr %200, i32 1
  %202 = load ptr, ptr %201, align 8
  %203 = extractvalue { ptr, ptr, ptr, i32 } %196, 1
  %204 = call ptr %202(ptr %203)
  %205 = load i32, ptr %204, align 4
  %.reload16 = load i32, ptr %.reg2mem13, align 4
  %206 = add i32 %205, %.reload16
  store i32 %206, ptr %123, align 4
  %207 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %208 = extractvalue { ptr, ptr, ptr, i32 } %207, 0
  %209 = call ptr @llvm.invariant.start.p0(i64 616, ptr %208)
  %210 = extractvalue { ptr, ptr, ptr, i32 } %207, 3
  %211 = getelementptr ptr, ptr %208, i32 %210
  %212 = getelementptr ptr, ptr %211, i32 2
  %213 = load ptr, ptr %212, align 8
  %214 = extractvalue { ptr, ptr, ptr, i32 } %207, 1
  %215 = call ptr %213(ptr %214)
  %216 = load i32, ptr %123, align 4
  store i32 %216, ptr %215, align 4
  %217 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %218 = extractvalue { ptr, ptr, ptr, i32 } %217, 0
  %219 = call ptr @llvm.invariant.start.p0(i64 616, ptr %218)
  %220 = extractvalue { ptr, ptr, ptr, i32 } %217, 3
  %221 = getelementptr ptr, ptr %218, i32 %220
  %222 = load ptr, ptr %221, align 8
  %223 = extractvalue { ptr, ptr, ptr, i32 } %217, 1
  %224 = call ptr %222(ptr %223)
  %225 = getelementptr { ptr, ptr, ptr, i32 }, ptr %224, i32 0, i32 0
  %226 = getelementptr { ptr, ptr, ptr, i32 }, ptr %124, i32 0, i32 0
  %227 = load ptr, ptr %225, align 8
  store ptr %227, ptr %226, align 8
  %228 = getelementptr { ptr, ptr, ptr, i32 }, ptr %224, i32 0, i32 1
  %229 = getelementptr { ptr, ptr, ptr, i32 }, ptr %124, i32 0, i32 1
  %230 = load ptr, ptr %228, align 8
  store ptr %230, ptr %229, align 8
  %231 = getelementptr { ptr, ptr, ptr, i32 }, ptr %224, i32 0, i32 2
  %232 = getelementptr { ptr, ptr, ptr, i32 }, ptr %124, i32 0, i32 2
  %233 = load ptr, ptr %231, align 8
  store ptr %233, ptr %232, align 8
  %234 = getelementptr { ptr, ptr, ptr, i32 }, ptr %224, i32 0, i32 3
  %235 = getelementptr { ptr, ptr, ptr, i32 }, ptr %124, i32 0, i32 3
  %236 = load i32, ptr %234, align 4
  store i32 %236, ptr %235, align 4
  %237 = call ptr @llvm.invariant.start.p0(i64 16, ptr %124)
  %238 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %239 = extractvalue { ptr, ptr, ptr, i32 } %238, 0
  %240 = call ptr @llvm.invariant.start.p0(i64 616, ptr %239)
  %241 = extractvalue { ptr, ptr, ptr, i32 } %238, 3
  %242 = getelementptr ptr, ptr %239, i32 %241
  %243 = getelementptr ptr, ptr %242, i32 2
  %244 = load ptr, ptr %243, align 8
  %245 = extractvalue { ptr, ptr, ptr, i32 } %238, 1
  %246 = call ptr %244(ptr %245)
  %247 = load i32, ptr %246, align 4
  %248 = getelementptr i32, ptr null, i32 %247
  %249 = ptrtoint ptr %248 to i64
  %250 = call ptr @malloc(i64 %249)
  store ptr %250, ptr %125, align 8
  %251 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %252 = extractvalue { ptr, ptr, ptr, i32 } %251, 0
  %253 = call ptr @llvm.invariant.start.p0(i64 616, ptr %252)
  %254 = extractvalue { ptr, ptr, ptr, i32 } %251, 3
  %255 = getelementptr ptr, ptr %252, i32 %254
  %256 = load ptr, ptr %255, align 8
  %257 = extractvalue { ptr, ptr, ptr, i32 } %251, 1
  %258 = call ptr %256(ptr %257)
  %259 = getelementptr { ptr }, ptr %125, i32 0, i32 0
  %260 = getelementptr { ptr }, ptr %258, i32 0, i32 0
  %261 = load ptr, ptr %259, align 8
  store ptr %261, ptr %260, align 8
  store i32 0, ptr %126, align 4
  store i32 0, ptr %127, align 4
  br label %262

262:                                              ; preds = %._crit_edge3, %195
  %263 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %264 = extractvalue { ptr, ptr, ptr, i32 } %263, 0
  %265 = call ptr @llvm.invariant.start.p0(i64 616, ptr %264)
  %266 = extractvalue { ptr, ptr, ptr, i32 } %263, 3
  %267 = getelementptr ptr, ptr %264, i32 %266
  %268 = getelementptr ptr, ptr %267, i32 1
  %269 = load ptr, ptr %268, align 8
  %270 = extractvalue { ptr, ptr, ptr, i32 } %263, 1
  %271 = call ptr %269(ptr %270)
  %272 = load i32, ptr %271, align 4
  %.reload15 = load i32, ptr %.reg2mem13, align 4
  %273 = add i32 %272, %.reload15
  store i32 %273, ptr %128, align 4
  %274 = load i32, ptr %126, align 4
  %275 = load i32, ptr %128, align 4
  %276 = icmp slt i32 %274, %275
  store i1 %276, ptr %129, align 1
  %277 = load i1, ptr %129, align 1
  store i1 %277, ptr %.reg2mem, align 1
  %.reload4 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload4, label %278, label %._crit_edge2

._crit_edge2:                                     ; preds = %262
  br label %345

278:                                              ; preds = %262
  %279 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %280 = extractvalue { ptr, ptr, ptr, i32 } %279, 0
  %281 = call ptr @llvm.invariant.start.p0(i64 616, ptr %280)
  %282 = extractvalue { ptr, ptr, ptr, i32 } %279, 3
  %283 = getelementptr ptr, ptr %280, i32 %282
  %284 = getelementptr ptr, ptr %283, i32 1
  %285 = load ptr, ptr %284, align 8
  %286 = extractvalue { ptr, ptr, ptr, i32 } %279, 1
  %287 = call ptr %285(ptr %286)
  %288 = load i32, ptr %126, align 4
  %289 = load i32, ptr %287, align 4
  %290 = icmp slt i32 %288, %289
  store i1 %290, ptr %130, align 1
  %291 = load i1, ptr %130, align 1
  br i1 %291, label %292, label %316

292:                                              ; preds = %278
  %293 = load ptr, ptr %124, align 8
  %294 = load i32, ptr %126, align 4
  %295 = getelementptr i32, ptr null, i32 %294
  %296 = ptrtoint ptr %295 to i64
  %297 = getelementptr i8, ptr %293, i64 %296
  %298 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %299 = extractvalue { ptr, ptr, ptr, i32 } %298, 0
  %300 = call ptr @llvm.invariant.start.p0(i64 616, ptr %299)
  %301 = extractvalue { ptr, ptr, ptr, i32 } %298, 3
  %302 = getelementptr ptr, ptr %299, i32 %301
  %303 = load ptr, ptr %302, align 8
  %304 = extractvalue { ptr, ptr, ptr, i32 } %298, 1
  %305 = call ptr %303(ptr %304)
  %306 = load ptr, ptr %305, align 8
  %307 = load i32, ptr %126, align 4
  %308 = getelementptr i32, ptr null, i32 %307
  %309 = ptrtoint ptr %308 to i64
  %310 = getelementptr i8, ptr %306, i64 %309
  %311 = load i32, ptr %297, align 4
  store i32 %311, ptr %310, align 4
  store i32 1, ptr %131, align 4
  %312 = load i32, ptr %126, align 4
  %313 = load i32, ptr %131, align 4
  %314 = add i32 %312, %313
  store i32 %314, ptr %132, align 4
  %315 = load i32, ptr %132, align 4
  store i32 %315, ptr %126, align 4
  br label %344

316:                                              ; preds = %278
  %317 = load ptr, ptr %59, align 8
  %318 = load i32, ptr %127, align 4
  %319 = getelementptr i32, ptr null, i32 %318
  %320 = ptrtoint ptr %319 to i64
  %321 = getelementptr i8, ptr %317, i64 %320
  %322 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %323 = extractvalue { ptr, ptr, ptr, i32 } %322, 0
  %324 = call ptr @llvm.invariant.start.p0(i64 616, ptr %323)
  %325 = extractvalue { ptr, ptr, ptr, i32 } %322, 3
  %326 = getelementptr ptr, ptr %323, i32 %325
  %327 = load ptr, ptr %326, align 8
  %328 = extractvalue { ptr, ptr, ptr, i32 } %322, 1
  %329 = call ptr %327(ptr %328)
  %330 = load ptr, ptr %329, align 8
  %331 = load i32, ptr %126, align 4
  %332 = getelementptr i32, ptr null, i32 %331
  %333 = ptrtoint ptr %332 to i64
  %334 = getelementptr i8, ptr %330, i64 %333
  %335 = load i32, ptr %321, align 4
  store i32 %335, ptr %334, align 4
  store i32 1, ptr %133, align 4
  %336 = load i32, ptr %126, align 4
  %337 = load i32, ptr %133, align 4
  %338 = add i32 %336, %337
  store i32 %338, ptr %134, align 4
  %339 = load i32, ptr %134, align 4
  store i32 %339, ptr %126, align 4
  store i32 1, ptr %135, align 4
  %340 = load i32, ptr %127, align 4
  %341 = load i32, ptr %135, align 4
  %342 = add i32 %340, %341
  store i32 %342, ptr %136, align 4
  %343 = load i32, ptr %136, align 4
  store i32 %343, ptr %127, align 4
  br label %344

344:                                              ; preds = %316, %292
  br label %345

345:                                              ; preds = %._crit_edge2, %344
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge3, label %346

._crit_edge3:                                     ; preds = %345
  br label %262

346:                                              ; preds = %345
  br label %347

347:                                              ; preds = %346, %194
  %348 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %349 = extractvalue { ptr, ptr, ptr, i32 } %348, 0
  %350 = call ptr @llvm.invariant.start.p0(i64 616, ptr %349)
  %351 = extractvalue { ptr, ptr, ptr, i32 } %348, 3
  %352 = getelementptr ptr, ptr %349, i32 %351
  %353 = getelementptr ptr, ptr %352, i32 1
  %354 = load ptr, ptr %353, align 8
  %355 = extractvalue { ptr, ptr, ptr, i32 } %348, 1
  %356 = call ptr %354(ptr %355)
  %357 = load i32, ptr %356, align 4
  %.reload14 = load i32, ptr %.reg2mem13, align 4
  %358 = add i32 %357, %.reload14
  store i32 %358, ptr %137, align 4
  %359 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %360 = extractvalue { ptr, ptr, ptr, i32 } %359, 0
  %361 = call ptr @llvm.invariant.start.p0(i64 616, ptr %360)
  %362 = extractvalue { ptr, ptr, ptr, i32 } %359, 3
  %363 = getelementptr ptr, ptr %360, i32 %362
  %364 = getelementptr ptr, ptr %363, i32 1
  %365 = load ptr, ptr %364, align 8
  %366 = extractvalue { ptr, ptr, ptr, i32 } %359, 1
  %367 = call ptr %365(ptr %366)
  %368 = load i32, ptr %137, align 4
  store i32 %368, ptr %367, align 4
  %369 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %370 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 0
  %371 = load ptr, ptr %369, align 8
  store ptr %371, ptr %370, align 8
  %372 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %373 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 1
  %374 = load ptr, ptr %372, align 8
  store ptr %374, ptr %373, align 8
  %375 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %376 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 2
  %377 = load ptr, ptr %375, align 8
  store ptr %377, ptr %376, align 8
  %378 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %379 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 3
  %380 = load i32, ptr %378, align 4
  store i32 %380, ptr %379, align 4
  call void @set_offset(ptr %138, ptr @IntArray)
  %381 = call ptr @llvm.invariant.start.p0(i64 24, ptr %138)
  %382 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 0
  %383 = load ptr, ptr %382, align 8
  %384 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %383, 0
  %385 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 1
  %386 = load ptr, ptr %385, align 8
  %387 = insertvalue { ptr, ptr, ptr, i32 } %384, ptr %386, 1
  %388 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 2
  %389 = load ptr, ptr %388, align 8
  %390 = insertvalue { ptr, ptr, ptr, i32 } %387, ptr %389, 2
  %391 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 3
  %392 = load i32, ptr %391, align 4
  %393 = insertvalue { ptr, ptr, ptr, i32 } %390, i32 %392, 3
  ret { ptr, ptr, ptr, i32 } %393
}

define i32 @IntArray__index_xPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem2 = alloca i32, align 4
  %.reg2mem4 = alloca i32, align 4
  %.reg2mem6 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @IntArray)
  %20 = call ptr @llvm.invariant.start.p0(i64 24, ptr %7)
  %21 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %22 = extractvalue { ptr, ptr, ptr, i32 } %21, 0
  %23 = call ptr @llvm.invariant.start.p0(i64 616, ptr %22)
  %24 = extractvalue { ptr, ptr, ptr, i32 } %21, 3
  %25 = getelementptr ptr, ptr %22, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 1
  %27 = load ptr, ptr %26, align 8
  %28 = extractvalue { ptr, ptr, ptr, i32 } %21, 1
  %29 = call ptr %27(ptr %28)
  %30 = load i32, ptr %29, align 4
  %31 = sub i32 %30, 1
  %32 = icmp sgt i32 %3, %31
  %33 = alloca { ptr, ptr, ptr, i32 }, align 8
  %34 = alloca [2 x ptr], align 8
  %35 = alloca [2 x ptr], align 8
  %36 = alloca i32, align 4
  %37 = alloca i32, align 4
  %38 = alloca ptr, align 8
  %39 = alloca { ptr, ptr, ptr, i32 }, align 8
  %40 = alloca i32, align 4
  %41 = alloca i32, align 4
  %42 = alloca i32, align 4
  %43 = alloca { ptr, ptr, ptr, i32 }, align 8
  %44 = alloca i32, align 4
  %45 = alloca i32, align 4
  %46 = alloca [3 x ptr], align 8
  %47 = alloca [3 x ptr], align 8
  %48 = alloca { ptr, ptr, ptr, i32 }, align 8
  %49 = alloca [2 x ptr], align 8
  %50 = alloca [2 x ptr], align 8
  %51 = alloca { ptr, i160 }, align 8
  %52 = alloca i32, align 4
  %53 = alloca i1, align 1
  %54 = alloca i32, align 4
  %55 = alloca i32, align 4
  %56 = alloca i1, align 1
  %57 = alloca { ptr, ptr, ptr, i32 }, align 8
  %58 = alloca [2 x ptr], align 8
  %59 = alloca [2 x ptr], align 8
  %60 = alloca i32, align 4
  %61 = alloca i32, align 4
  %62 = alloca ptr, align 8
  %63 = alloca { ptr, ptr, ptr, i32 }, align 8
  %64 = alloca i32, align 4
  %65 = alloca i32, align 4
  %66 = alloca i32, align 4
  %67 = alloca { ptr, ptr, ptr, i32 }, align 8
  %68 = alloca i32, align 4
  %69 = alloca i32, align 4
  %70 = alloca [3 x ptr], align 8
  %71 = alloca [3 x ptr], align 8
  %72 = alloca { ptr, ptr, ptr, i32 }, align 8
  %73 = alloca [2 x ptr], align 8
  %74 = alloca [2 x ptr], align 8
  %75 = alloca { ptr, i160 }, align 8
  %76 = alloca i32, align 4
  br i1 %32, label %77, label %._crit_edge

._crit_edge:                                      ; preds = %4
  br label %237

77:                                               ; preds = %4
  %78 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %79 = extractvalue { ptr, ptr, ptr, i32 } %78, 0
  %80 = call ptr @llvm.invariant.start.p0(i64 616, ptr %79)
  %81 = extractvalue { ptr, ptr, ptr, i32 } %78, 3
  %82 = getelementptr ptr, ptr %79, i32 %81
  %83 = getelementptr ptr, ptr %82, i32 1
  %84 = load ptr, ptr %83, align 8
  %85 = extractvalue { ptr, ptr, ptr, i32 } %78, 1
  %86 = call ptr %84(ptr %85)
  %87 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr, i160 }, i32, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr null, i32 1) to i64))
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 1
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 3
  store ptr @OutOfBounds, ptr %33, align 8
  store ptr %87, ptr %88, align 8
  store i32 7, ptr %89, align 4
  %90 = call ptr @llvm.invariant.start.p0(i64 16, ptr %33)
  %91 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %92 = extractvalue { ptr, ptr, ptr, i32 } %91, 0
  %93 = call ptr @llvm.invariant.start.p0(i64 616, ptr %92)
  %94 = extractvalue { ptr, ptr, ptr, i32 } %91, 3
  %95 = getelementptr ptr, ptr %92, i32 %94
  %96 = getelementptr ptr, ptr %95, i32 1
  %97 = load ptr, ptr %96, align 8
  %98 = extractvalue { ptr, ptr, ptr, i32 } %91, 1
  %99 = call ptr %97(ptr %98)
  %100 = load i32, ptr %99, align 4
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 0
  %102 = load ptr, ptr %101, align 8
  %103 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %102, 0
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 1
  %105 = load ptr, ptr %104, align 8
  %106 = insertvalue { ptr, ptr, ptr, i32 } %103, ptr %105, 1
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 2
  %108 = load ptr, ptr %107, align 8
  %109 = insertvalue { ptr, ptr, ptr, i32 } %106, ptr %108, 2
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 3
  %111 = load i32, ptr %110, align 4
  %112 = insertvalue { ptr, ptr, ptr, i32 } %109, i32 %111, 3
  %113 = call ptr @llvm.invariant.start.p0(i64 16, ptr %34)
  %114 = getelementptr [2 x ptr], ptr %34, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %114, align 8
  %115 = getelementptr [2 x ptr], ptr %34, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %115, align 8
  %116 = call ptr @llvm.invariant.start.p0(i64 232, ptr %102)
  %117 = getelementptr ptr, ptr %102, i32 %111
  %118 = getelementptr ptr, ptr %117, i32 4
  %119 = load ptr, ptr %118, align 8
  %120 = getelementptr [2 x ptr], ptr %35, i32 0, i32 0
  store ptr @i32_typ, ptr %120, align 8
  %121 = getelementptr [2 x ptr], ptr %35, i32 0, i32 1
  store ptr @i32_typ, ptr %121, align 8
  %122 = call ptr %119({ ptr, ptr, ptr, i32 } %112, ptr %35, i32 %100, i32 %3)
  call void %122({ ptr, ptr, ptr, i32 } %112, { ptr, ptr, ptr, i32 } %112, ptr %34, i32 %100, i32 %3)
  store i32 617, ptr %36, align 4
  store i32 11, ptr %37, align 4
  %123 = load i32, ptr %37, align 4
  %124 = getelementptr i8, ptr null, i32 %123
  %125 = ptrtoint ptr %124 to i64
  %126 = call ptr @malloc(i64 %125)
  store ptr %126, ptr %38, align 8
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 0
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 0
  %129 = load ptr, ptr %127, align 8
  store ptr %129, ptr %128, align 8
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 1
  %132 = load ptr, ptr %130, align 8
  store ptr %132, ptr %131, align 8
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 2
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 2
  %135 = load ptr, ptr %133, align 8
  store ptr %135, ptr %134, align 8
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 3
  %138 = load i32, ptr %136, align 4
  store i32 %138, ptr %137, align 4
  %139 = call ptr @llvm.invariant.start.p0(i64 16, ptr %39)
  store i32 0, ptr %40, align 4
  %140 = load ptr, ptr %39, align 8
  %141 = load i32, ptr %40, align 4
  %142 = getelementptr [10 x i8], ptr null, i32 %141
  %143 = ptrtoint ptr %142 to i64
  %144 = getelementptr i8, ptr %140, i64 %143
  %145 = load i80, ptr @rwlwl_testsmini, align 4
  store i80 %145, ptr %144, align 4
  store i32 10, ptr %41, align 4
  store i32 11, ptr %42, align 4
  %146 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %147 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 1
  %148 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 3
  store ptr @String, ptr %43, align 8
  store ptr %146, ptr %147, align 8
  store i32 7, ptr %148, align 4
  %149 = call ptr @llvm.invariant.start.p0(i64 16, ptr %43)
  store i32 10, ptr %44, align 4
  store i32 11, ptr %45, align 4
  %150 = getelementptr { ptr }, ptr %39, i32 0, i32 0
  %151 = load ptr, ptr %150, align 8
  %152 = insertvalue { ptr } undef, ptr %151, 0
  %153 = load i32, ptr %44, align 4
  %154 = load i32, ptr %45, align 4
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 0
  %156 = load ptr, ptr %155, align 8
  %157 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %156, 0
  %158 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 1
  %159 = load ptr, ptr %158, align 8
  %160 = insertvalue { ptr, ptr, ptr, i32 } %157, ptr %159, 1
  %161 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 2
  %162 = load ptr, ptr %161, align 8
  %163 = insertvalue { ptr, ptr, ptr, i32 } %160, ptr %162, 2
  %164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 3
  %165 = load i32, ptr %164, align 4
  %166 = insertvalue { ptr, ptr, ptr, i32 } %163, i32 %165, 3
  %167 = call ptr @llvm.invariant.start.p0(i64 24, ptr %46)
  %168 = getelementptr [3 x ptr], ptr %46, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %168, align 8
  %169 = getelementptr [3 x ptr], ptr %46, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %169, align 8
  %170 = getelementptr [3 x ptr], ptr %46, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %170, align 8
  %171 = call ptr @llvm.invariant.start.p0(i64 280, ptr %156)
  %172 = getelementptr ptr, ptr %156, i32 %165
  %173 = getelementptr ptr, ptr %172, i32 4
  %174 = load ptr, ptr %173, align 8
  %175 = getelementptr [3 x ptr], ptr %47, i32 0, i32 0
  store ptr @buffer_typ, ptr %175, align 8
  %176 = getelementptr [3 x ptr], ptr %47, i32 0, i32 1
  store ptr @i32_typ, ptr %176, align 8
  %177 = getelementptr [3 x ptr], ptr %47, i32 0, i32 2
  store ptr @i32_typ, ptr %177, align 8
  %178 = call ptr %174({ ptr, ptr, ptr, i32 } %166, ptr %47, { ptr } %152, i32 %153, i32 %154)
  call void %178({ ptr, ptr, ptr, i32 } %166, { ptr, ptr, ptr, i32 } %166, ptr %46, { ptr } %152, i32 %153, i32 %154)
  %179 = load i32, ptr %36, align 4
  %180 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 0
  %181 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 0
  %182 = load ptr, ptr %180, align 8
  store ptr %182, ptr %181, align 8
  %183 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 1
  %184 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 1
  %185 = load ptr, ptr %183, align 8
  store ptr %185, ptr %184, align 8
  %186 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 2
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 2
  %188 = load ptr, ptr %186, align 8
  store ptr %188, ptr %187, align 8
  %189 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 3
  %190 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 3
  %191 = load i32, ptr %189, align 4
  store i32 %191, ptr %190, align 4
  call void @set_offset(ptr %48, ptr @String)
  %192 = call ptr @llvm.invariant.start.p0(i64 24, ptr %48)
  %193 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 0
  %194 = load ptr, ptr %193, align 8
  %195 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %194, 0
  %196 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 1
  %197 = load ptr, ptr %196, align 8
  %198 = insertvalue { ptr, ptr, ptr, i32 } %195, ptr %197, 1
  %199 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 2
  %200 = load ptr, ptr %199, align 8
  %201 = insertvalue { ptr, ptr, ptr, i32 } %198, ptr %200, 2
  %202 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 3
  %203 = load i32, ptr %202, align 4
  %204 = insertvalue { ptr, ptr, ptr, i32 } %201, i32 %203, 3
  %205 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 0
  %206 = load ptr, ptr %205, align 8
  %207 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %206, 0
  %208 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 1
  %209 = load ptr, ptr %208, align 8
  %210 = insertvalue { ptr, ptr, ptr, i32 } %207, ptr %209, 1
  %211 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 2
  %212 = load ptr, ptr %211, align 8
  %213 = insertvalue { ptr, ptr, ptr, i32 } %210, ptr %212, 2
  %214 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 3
  %215 = load i32, ptr %214, align 4
  %216 = insertvalue { ptr, ptr, ptr, i32 } %213, i32 %215, 3
  %217 = call ptr @llvm.invariant.start.p0(i64 16, ptr %49)
  %218 = getelementptr [2 x ptr], ptr %49, i32 0, i32 1
  store ptr @_parameterization_String, ptr %218, align 8
  %219 = getelementptr [2 x ptr], ptr %49, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %219, align 8
  %220 = call ptr @llvm.invariant.start.p0(i64 232, ptr %206)
  %221 = getelementptr ptr, ptr %206, i32 %215
  %222 = getelementptr ptr, ptr %221, i32 7
  %223 = load ptr, ptr %222, align 8
  %224 = getelementptr [2 x ptr], ptr %50, i32 0, i32 0
  store ptr @i32_typ, ptr %224, align 8
  %225 = getelementptr [2 x ptr], ptr %50, i32 0, i32 1
  store ptr %194, ptr %225, align 8
  %226 = call ptr %223({ ptr, ptr, ptr, i32 } %216, ptr %50, i32 %179, { ptr, ptr, ptr, i32 } %204)
  call void %226({ ptr, ptr, ptr, i32 } %216, { ptr, ptr, ptr, i32 } %216, ptr %49, i32 %179, { ptr, ptr, ptr, i32 } %204)
  %227 = getelementptr { ptr, i160 }, ptr %33, i32 0, i32 0
  %228 = load ptr, ptr %227, align 8
  %229 = insertvalue { ptr, i160 } undef, ptr %228, 0
  %230 = getelementptr { ptr, i160 }, ptr %33, i32 0, i32 1
  %231 = load i160, ptr %230, align 4
  %232 = insertvalue { ptr, i160 } %229, i160 %231, 1
  %233 = call ptr @get_current_coroutine()
  %234 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %233, i32 0, i32 4
  store { ptr, i160 } %232, ptr %234, align 8
  call void @coroutine_yield(ptr %233)
  %235 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %233, i32 0, i32 4
  %236 = load { ptr, i160 }, ptr %235, align 8
  store { ptr, i160 } %236, ptr %51, align 8
  br label %237

237:                                              ; preds = %._crit_edge, %77
  store i32 0, ptr %52, align 4
  %238 = load i32, ptr %52, align 4
  %239 = icmp sge i32 %3, %238
  store i1 %239, ptr %53, align 1
  %240 = load i1, ptr %53, align 1
  br i1 %240, label %241, label %255

241:                                              ; preds = %237
  %242 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %243 = extractvalue { ptr, ptr, ptr, i32 } %242, 0
  %244 = call ptr @llvm.invariant.start.p0(i64 616, ptr %243)
  %245 = extractvalue { ptr, ptr, ptr, i32 } %242, 3
  %246 = getelementptr ptr, ptr %243, i32 %245
  %247 = load ptr, ptr %246, align 8
  %248 = extractvalue { ptr, ptr, ptr, i32 } %242, 1
  %249 = call ptr %247(ptr %248)
  %250 = load ptr, ptr %249, align 8
  %251 = getelementptr i32, ptr null, i32 %3
  %252 = ptrtoint ptr %251 to i64
  %253 = getelementptr i8, ptr %250, i64 %252
  %254 = load i32, ptr %253, align 4
  store i32 %254, ptr %.reg2mem4, align 4
  %.reload5 = load i32, ptr %.reg2mem4, align 4
  store i32 %.reload5, ptr %.reg2mem6, align 4
  br label %457

255:                                              ; preds = %237
  %256 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %257 = extractvalue { ptr, ptr, ptr, i32 } %256, 0
  %258 = call ptr @llvm.invariant.start.p0(i64 616, ptr %257)
  %259 = extractvalue { ptr, ptr, ptr, i32 } %256, 3
  %260 = getelementptr ptr, ptr %257, i32 %259
  %261 = getelementptr ptr, ptr %260, i32 1
  %262 = load ptr, ptr %261, align 8
  %263 = extractvalue { ptr, ptr, ptr, i32 } %256, 1
  %264 = call ptr %262(ptr %263)
  %265 = load i32, ptr %264, align 4
  %266 = add i32 %265, %3
  store i32 %266, ptr %54, align 4
  store i32 0, ptr %55, align 4
  %267 = load i32, ptr %54, align 4
  %268 = load i32, ptr %55, align 4
  %269 = icmp slt i32 %267, %268
  store i1 %269, ptr %56, align 1
  %270 = load i1, ptr %56, align 1
  br i1 %270, label %271, label %._crit_edge1

._crit_edge1:                                     ; preds = %255
  br label %431

271:                                              ; preds = %255
  %272 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %273 = extractvalue { ptr, ptr, ptr, i32 } %272, 0
  %274 = call ptr @llvm.invariant.start.p0(i64 616, ptr %273)
  %275 = extractvalue { ptr, ptr, ptr, i32 } %272, 3
  %276 = getelementptr ptr, ptr %273, i32 %275
  %277 = getelementptr ptr, ptr %276, i32 1
  %278 = load ptr, ptr %277, align 8
  %279 = extractvalue { ptr, ptr, ptr, i32 } %272, 1
  %280 = call ptr %278(ptr %279)
  %281 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr, i160 }, i32, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr null, i32 1) to i64))
  %282 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 1
  %283 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 3
  store ptr @OutOfBounds, ptr %57, align 8
  store ptr %281, ptr %282, align 8
  store i32 7, ptr %283, align 4
  %284 = call ptr @llvm.invariant.start.p0(i64 16, ptr %57)
  %285 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %286 = extractvalue { ptr, ptr, ptr, i32 } %285, 0
  %287 = call ptr @llvm.invariant.start.p0(i64 616, ptr %286)
  %288 = extractvalue { ptr, ptr, ptr, i32 } %285, 3
  %289 = getelementptr ptr, ptr %286, i32 %288
  %290 = getelementptr ptr, ptr %289, i32 1
  %291 = load ptr, ptr %290, align 8
  %292 = extractvalue { ptr, ptr, ptr, i32 } %285, 1
  %293 = call ptr %291(ptr %292)
  %294 = load i32, ptr %293, align 4
  %295 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 0
  %296 = load ptr, ptr %295, align 8
  %297 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %296, 0
  %298 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 1
  %299 = load ptr, ptr %298, align 8
  %300 = insertvalue { ptr, ptr, ptr, i32 } %297, ptr %299, 1
  %301 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 2
  %302 = load ptr, ptr %301, align 8
  %303 = insertvalue { ptr, ptr, ptr, i32 } %300, ptr %302, 2
  %304 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 3
  %305 = load i32, ptr %304, align 4
  %306 = insertvalue { ptr, ptr, ptr, i32 } %303, i32 %305, 3
  %307 = call ptr @llvm.invariant.start.p0(i64 16, ptr %58)
  %308 = getelementptr [2 x ptr], ptr %58, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %308, align 8
  %309 = getelementptr [2 x ptr], ptr %58, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %309, align 8
  %310 = call ptr @llvm.invariant.start.p0(i64 232, ptr %296)
  %311 = getelementptr ptr, ptr %296, i32 %305
  %312 = getelementptr ptr, ptr %311, i32 4
  %313 = load ptr, ptr %312, align 8
  %314 = getelementptr [2 x ptr], ptr %59, i32 0, i32 0
  store ptr @i32_typ, ptr %314, align 8
  %315 = getelementptr [2 x ptr], ptr %59, i32 0, i32 1
  store ptr @i32_typ, ptr %315, align 8
  %316 = call ptr %313({ ptr, ptr, ptr, i32 } %306, ptr %59, i32 %294, i32 %3)
  call void %316({ ptr, ptr, ptr, i32 } %306, { ptr, ptr, ptr, i32 } %306, ptr %58, i32 %294, i32 %3)
  store i32 619, ptr %60, align 4
  store i32 11, ptr %61, align 4
  %317 = load i32, ptr %61, align 4
  %318 = getelementptr i8, ptr null, i32 %317
  %319 = ptrtoint ptr %318 to i64
  %320 = call ptr @malloc(i64 %319)
  store ptr %320, ptr %62, align 8
  %321 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 0
  %322 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 0
  %323 = load ptr, ptr %321, align 8
  store ptr %323, ptr %322, align 8
  %324 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 1
  %325 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 1
  %326 = load ptr, ptr %324, align 8
  store ptr %326, ptr %325, align 8
  %327 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 2
  %328 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 2
  %329 = load ptr, ptr %327, align 8
  store ptr %329, ptr %328, align 8
  %330 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 3
  %331 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 3
  %332 = load i32, ptr %330, align 4
  store i32 %332, ptr %331, align 4
  %333 = call ptr @llvm.invariant.start.p0(i64 16, ptr %63)
  store i32 0, ptr %64, align 4
  %334 = load ptr, ptr %63, align 8
  %335 = load i32, ptr %64, align 4
  %336 = getelementptr [10 x i8], ptr null, i32 %335
  %337 = ptrtoint ptr %336 to i64
  %338 = getelementptr i8, ptr %334, i64 %337
  %339 = load i80, ptr @kjmph_testsmini, align 4
  store i80 %339, ptr %338, align 4
  store i32 10, ptr %65, align 4
  store i32 11, ptr %66, align 4
  %340 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %341 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 1
  %342 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 3
  store ptr @String, ptr %67, align 8
  store ptr %340, ptr %341, align 8
  store i32 7, ptr %342, align 4
  %343 = call ptr @llvm.invariant.start.p0(i64 16, ptr %67)
  store i32 10, ptr %68, align 4
  store i32 11, ptr %69, align 4
  %344 = getelementptr { ptr }, ptr %63, i32 0, i32 0
  %345 = load ptr, ptr %344, align 8
  %346 = insertvalue { ptr } undef, ptr %345, 0
  %347 = load i32, ptr %68, align 4
  %348 = load i32, ptr %69, align 4
  %349 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 0
  %350 = load ptr, ptr %349, align 8
  %351 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %350, 0
  %352 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 1
  %353 = load ptr, ptr %352, align 8
  %354 = insertvalue { ptr, ptr, ptr, i32 } %351, ptr %353, 1
  %355 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 2
  %356 = load ptr, ptr %355, align 8
  %357 = insertvalue { ptr, ptr, ptr, i32 } %354, ptr %356, 2
  %358 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 3
  %359 = load i32, ptr %358, align 4
  %360 = insertvalue { ptr, ptr, ptr, i32 } %357, i32 %359, 3
  %361 = call ptr @llvm.invariant.start.p0(i64 24, ptr %70)
  %362 = getelementptr [3 x ptr], ptr %70, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %362, align 8
  %363 = getelementptr [3 x ptr], ptr %70, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %363, align 8
  %364 = getelementptr [3 x ptr], ptr %70, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %364, align 8
  %365 = call ptr @llvm.invariant.start.p0(i64 280, ptr %350)
  %366 = getelementptr ptr, ptr %350, i32 %359
  %367 = getelementptr ptr, ptr %366, i32 4
  %368 = load ptr, ptr %367, align 8
  %369 = getelementptr [3 x ptr], ptr %71, i32 0, i32 0
  store ptr @buffer_typ, ptr %369, align 8
  %370 = getelementptr [3 x ptr], ptr %71, i32 0, i32 1
  store ptr @i32_typ, ptr %370, align 8
  %371 = getelementptr [3 x ptr], ptr %71, i32 0, i32 2
  store ptr @i32_typ, ptr %371, align 8
  %372 = call ptr %368({ ptr, ptr, ptr, i32 } %360, ptr %71, { ptr } %346, i32 %347, i32 %348)
  call void %372({ ptr, ptr, ptr, i32 } %360, { ptr, ptr, ptr, i32 } %360, ptr %70, { ptr } %346, i32 %347, i32 %348)
  %373 = load i32, ptr %60, align 4
  %374 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 0
  %375 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 0
  %376 = load ptr, ptr %374, align 8
  store ptr %376, ptr %375, align 8
  %377 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 1
  %378 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 1
  %379 = load ptr, ptr %377, align 8
  store ptr %379, ptr %378, align 8
  %380 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 2
  %381 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 2
  %382 = load ptr, ptr %380, align 8
  store ptr %382, ptr %381, align 8
  %383 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 3
  %384 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 3
  %385 = load i32, ptr %383, align 4
  store i32 %385, ptr %384, align 4
  call void @set_offset(ptr %72, ptr @String)
  %386 = call ptr @llvm.invariant.start.p0(i64 24, ptr %72)
  %387 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 0
  %388 = load ptr, ptr %387, align 8
  %389 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %388, 0
  %390 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 1
  %391 = load ptr, ptr %390, align 8
  %392 = insertvalue { ptr, ptr, ptr, i32 } %389, ptr %391, 1
  %393 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 2
  %394 = load ptr, ptr %393, align 8
  %395 = insertvalue { ptr, ptr, ptr, i32 } %392, ptr %394, 2
  %396 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 3
  %397 = load i32, ptr %396, align 4
  %398 = insertvalue { ptr, ptr, ptr, i32 } %395, i32 %397, 3
  %399 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 0
  %400 = load ptr, ptr %399, align 8
  %401 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %400, 0
  %402 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 1
  %403 = load ptr, ptr %402, align 8
  %404 = insertvalue { ptr, ptr, ptr, i32 } %401, ptr %403, 1
  %405 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 2
  %406 = load ptr, ptr %405, align 8
  %407 = insertvalue { ptr, ptr, ptr, i32 } %404, ptr %406, 2
  %408 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 3
  %409 = load i32, ptr %408, align 4
  %410 = insertvalue { ptr, ptr, ptr, i32 } %407, i32 %409, 3
  %411 = call ptr @llvm.invariant.start.p0(i64 16, ptr %73)
  %412 = getelementptr [2 x ptr], ptr %73, i32 0, i32 1
  store ptr @_parameterization_String, ptr %412, align 8
  %413 = getelementptr [2 x ptr], ptr %73, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %413, align 8
  %414 = call ptr @llvm.invariant.start.p0(i64 232, ptr %400)
  %415 = getelementptr ptr, ptr %400, i32 %409
  %416 = getelementptr ptr, ptr %415, i32 7
  %417 = load ptr, ptr %416, align 8
  %418 = getelementptr [2 x ptr], ptr %74, i32 0, i32 0
  store ptr @i32_typ, ptr %418, align 8
  %419 = getelementptr [2 x ptr], ptr %74, i32 0, i32 1
  store ptr %388, ptr %419, align 8
  %420 = call ptr %417({ ptr, ptr, ptr, i32 } %410, ptr %74, i32 %373, { ptr, ptr, ptr, i32 } %398)
  call void %420({ ptr, ptr, ptr, i32 } %410, { ptr, ptr, ptr, i32 } %410, ptr %73, i32 %373, { ptr, ptr, ptr, i32 } %398)
  %421 = getelementptr { ptr, i160 }, ptr %57, i32 0, i32 0
  %422 = load ptr, ptr %421, align 8
  %423 = insertvalue { ptr, i160 } undef, ptr %422, 0
  %424 = getelementptr { ptr, i160 }, ptr %57, i32 0, i32 1
  %425 = load i160, ptr %424, align 4
  %426 = insertvalue { ptr, i160 } %423, i160 %425, 1
  %427 = call ptr @get_current_coroutine()
  %428 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %427, i32 0, i32 4
  store { ptr, i160 } %426, ptr %428, align 8
  call void @coroutine_yield(ptr %427)
  %429 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %427, i32 0, i32 4
  %430 = load { ptr, i160 }, ptr %429, align 8
  store { ptr, i160 } %430, ptr %75, align 8
  br label %431

431:                                              ; preds = %._crit_edge1, %271
  %432 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %433 = extractvalue { ptr, ptr, ptr, i32 } %432, 0
  %434 = call ptr @llvm.invariant.start.p0(i64 616, ptr %433)
  %435 = extractvalue { ptr, ptr, ptr, i32 } %432, 3
  %436 = getelementptr ptr, ptr %433, i32 %435
  %437 = load ptr, ptr %436, align 8
  %438 = extractvalue { ptr, ptr, ptr, i32 } %432, 1
  %439 = call ptr %437(ptr %438)
  %440 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %441 = extractvalue { ptr, ptr, ptr, i32 } %440, 0
  %442 = call ptr @llvm.invariant.start.p0(i64 616, ptr %441)
  %443 = extractvalue { ptr, ptr, ptr, i32 } %440, 3
  %444 = getelementptr ptr, ptr %441, i32 %443
  %445 = getelementptr ptr, ptr %444, i32 1
  %446 = load ptr, ptr %445, align 8
  %447 = extractvalue { ptr, ptr, ptr, i32 } %440, 1
  %448 = call ptr %446(ptr %447)
  %449 = load i32, ptr %448, align 4
  %450 = add i32 %449, %3
  store i32 %450, ptr %76, align 4
  %451 = load ptr, ptr %439, align 8
  %452 = load i32, ptr %76, align 4
  %453 = getelementptr i32, ptr null, i32 %452
  %454 = ptrtoint ptr %453 to i64
  %455 = getelementptr i8, ptr %451, i64 %454
  %456 = load i32, ptr %455, align 4
  store i32 %456, ptr %.reg2mem2, align 4
  %.reload3 = load i32, ptr %.reg2mem2, align 4
  store i32 %.reload3, ptr %.reg2mem6, align 4
  br label %457

457:                                              ; preds = %431, %241
  %.reload7 = load i32, ptr %.reg2mem6, align 4
  store i32 %.reload7, ptr %.reg2mem, align 4
  br label %458

458:                                              ; preds = %457
  %.reload = load i32, ptr %.reg2mem, align 4
  ret i32 %.reload
}

define { ptr, i32 } @IntArray_pop_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i32 }, align 8
  %.reg2mem1 = alloca { ptr, i32 }, align 8
  %.reg2mem3 = alloca { ptr, i32 }, align 8
  %.reg2mem5 = alloca { ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @IntArray)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 616, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 1
  %26 = load ptr, ptr %25, align 8
  %27 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %28 = call ptr %26(ptr %27)
  %29 = load i32, ptr %28, align 4
  %30 = icmp eq i32 %29, 0
  %31 = alloca i32, align 4
  %32 = alloca ptr, align 8
  %33 = alloca i64, align 8
  %34 = alloca i32, align 4
  %35 = alloca i32, align 4
  %36 = alloca i32, align 4
  %37 = alloca ptr, align 8
  %38 = alloca i64, align 8
  br i1 %30, label %39, label %45

39:                                               ; preds = %3
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %33, align 4
  %40 = load i64, ptr %33, align 4
  store i64 %40, ptr %32, align 4
  %41 = load ptr, ptr %32, align 8
  %42 = insertvalue { ptr, i32 } undef, ptr %41, 0
  %43 = load i32, ptr %31, align 4
  %44 = insertvalue { ptr, i32 } %42, i32 %43, 1
  store { ptr, i32 } %44, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i32 }, ptr %.reg2mem3, align 8
  store { ptr, i32 } %.reload4, ptr %.reg2mem5, align 8
  br label %96

45:                                               ; preds = %3
  %46 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %47 = extractvalue { ptr, ptr, ptr, i32 } %46, 0
  %48 = call ptr @llvm.invariant.start.p0(i64 616, ptr %47)
  %49 = extractvalue { ptr, ptr, ptr, i32 } %46, 3
  %50 = getelementptr ptr, ptr %47, i32 %49
  %51 = getelementptr ptr, ptr %50, i32 1
  %52 = load ptr, ptr %51, align 8
  %53 = extractvalue { ptr, ptr, ptr, i32 } %46, 1
  %54 = call ptr %52(ptr %53)
  store i32 1, ptr %34, align 4
  %55 = load i32, ptr %54, align 4
  %56 = load i32, ptr %34, align 4
  %57 = sub i32 %55, %56
  store i32 %57, ptr %35, align 4
  %58 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %59 = extractvalue { ptr, ptr, ptr, i32 } %58, 0
  %60 = call ptr @llvm.invariant.start.p0(i64 616, ptr %59)
  %61 = extractvalue { ptr, ptr, ptr, i32 } %58, 3
  %62 = getelementptr ptr, ptr %59, i32 %61
  %63 = getelementptr ptr, ptr %62, i32 1
  %64 = load ptr, ptr %63, align 8
  %65 = extractvalue { ptr, ptr, ptr, i32 } %58, 1
  %66 = call ptr %64(ptr %65)
  %67 = load i32, ptr %35, align 4
  store i32 %67, ptr %66, align 4
  %68 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %69 = extractvalue { ptr, ptr, ptr, i32 } %68, 0
  %70 = call ptr @llvm.invariant.start.p0(i64 616, ptr %69)
  %71 = extractvalue { ptr, ptr, ptr, i32 } %68, 3
  %72 = getelementptr ptr, ptr %69, i32 %71
  %73 = load ptr, ptr %72, align 8
  %74 = extractvalue { ptr, ptr, ptr, i32 } %68, 1
  %75 = call ptr %73(ptr %74)
  %76 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %77 = extractvalue { ptr, ptr, ptr, i32 } %76, 0
  %78 = call ptr @llvm.invariant.start.p0(i64 616, ptr %77)
  %79 = extractvalue { ptr, ptr, ptr, i32 } %76, 3
  %80 = getelementptr ptr, ptr %77, i32 %79
  %81 = getelementptr ptr, ptr %80, i32 1
  %82 = load ptr, ptr %81, align 8
  %83 = extractvalue { ptr, ptr, ptr, i32 } %76, 1
  %84 = call ptr %82(ptr %83)
  %85 = load ptr, ptr %75, align 8
  %86 = load i32, ptr %84, align 4
  %87 = getelementptr i32, ptr null, i32 %86
  %88 = ptrtoint ptr %87 to i64
  %89 = getelementptr i8, ptr %85, i64 %88
  %90 = load i32, ptr %89, align 4
  store i32 %90, ptr %36, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %38, align 4
  %91 = load i64, ptr %38, align 4
  store i64 %91, ptr %37, align 4
  %92 = load ptr, ptr %37, align 8
  %93 = insertvalue { ptr, i32 } undef, ptr %92, 0
  %94 = load i32, ptr %36, align 4
  %95 = insertvalue { ptr, i32 } %93, i32 %94, 1
  store { ptr, i32 } %95, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i32 }, ptr %.reg2mem1, align 8
  store { ptr, i32 } %.reload2, ptr %.reg2mem5, align 8
  br label %96

96:                                               ; preds = %45, %39
  %.reload6 = load { ptr, i32 }, ptr %.reg2mem5, align 8
  store { ptr, i32 } %.reload6, ptr %.reg2mem, align 8
  br label %97

97:                                               ; preds = %96
  %.reload = load { ptr, i32 }, ptr %.reg2mem, align 8
  ret { ptr, i32 } %.reload
}

define { ptr, ptr, ptr, i32 } @IntArray_copy_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i1, align 1
  %.reg2mem6 = alloca i32, align 4
  %.reg2mem11 = alloca i32, align 4
  %.reg2mem13 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @IntArray)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 616, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 1
  %26 = load ptr, ptr %25, align 8
  %27 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %28 = call ptr %26(ptr %27)
  %29 = load i32, ptr %28, align 4
  %30 = getelementptr i32, ptr null, i32 %29
  %31 = ptrtoint ptr %30 to i64
  %32 = call ptr @malloc(i64 %31)
  %33 = alloca ptr, align 8
  store ptr %32, ptr %33, align 8
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 0
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %37 = load ptr, ptr %35, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 1
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %40 = load ptr, ptr %38, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 2
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %43 = load ptr, ptr %41, align 8
  store ptr %43, ptr %42, align 8
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 3
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %46 = load i32, ptr %44, align 4
  store i32 %46, ptr %45, align 4
  %47 = call ptr @llvm.invariant.start.p0(i64 16, ptr %34)
  %48 = alloca i1, align 1
  %49 = alloca i32, align 4
  %50 = alloca i32, align 4
  %51 = alloca { ptr, ptr, ptr, i32 }, align 8
  %52 = alloca [3 x ptr], align 8
  %53 = alloca [3 x ptr], align 8
  %54 = alloca { ptr, ptr, ptr, i32 }, align 8
  %55 = alloca { ptr, ptr, ptr, i32 }, align 8
  %56 = alloca { ptr, ptr, ptr, i32 }, align 8
  store i32 0, ptr %.reg2mem13, align 4
  br label %57

57:                                               ; preds = %._crit_edge, %3
  %.reload14 = load i32, ptr %.reg2mem13, align 4
  store i32 %.reload14, ptr %.reg2mem6, align 4
  %58 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %59 = extractvalue { ptr, ptr, ptr, i32 } %58, 0
  %60 = call ptr @llvm.invariant.start.p0(i64 616, ptr %59)
  %61 = extractvalue { ptr, ptr, ptr, i32 } %58, 3
  %62 = getelementptr ptr, ptr %59, i32 %61
  %63 = getelementptr ptr, ptr %62, i32 1
  %64 = load ptr, ptr %63, align 8
  %65 = extractvalue { ptr, ptr, ptr, i32 } %58, 1
  %66 = call ptr %64(ptr %65)
  %67 = load i32, ptr %66, align 4
  %.reload10 = load i32, ptr %.reg2mem6, align 4
  %68 = icmp slt i32 %.reload10, %67
  store i1 %68, ptr %48, align 1
  %69 = load i1, ptr %48, align 1
  store i1 %69, ptr %.reg2mem3, align 1
  %.reload5 = load i1, ptr %.reg2mem3, align 1
  br i1 %.reload5, label %70, label %91

70:                                               ; preds = %57
  %71 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %72 = extractvalue { ptr, ptr, ptr, i32 } %71, 0
  %73 = call ptr @llvm.invariant.start.p0(i64 616, ptr %72)
  %74 = extractvalue { ptr, ptr, ptr, i32 } %71, 3
  %75 = getelementptr ptr, ptr %72, i32 %74
  %76 = load ptr, ptr %75, align 8
  %77 = extractvalue { ptr, ptr, ptr, i32 } %71, 1
  %78 = call ptr %76(ptr %77)
  %79 = load ptr, ptr %78, align 8
  %.reload9 = load i32, ptr %.reg2mem6, align 4
  %80 = getelementptr i32, ptr null, i32 %.reload9
  %81 = ptrtoint ptr %80 to i64
  %82 = getelementptr i8, ptr %79, i64 %81
  %83 = load ptr, ptr %34, align 8
  %.reload8 = load i32, ptr %.reg2mem6, align 4
  %84 = getelementptr i32, ptr null, i32 %.reload8
  %85 = ptrtoint ptr %84 to i64
  %86 = getelementptr i8, ptr %83, i64 %85
  %87 = load i32, ptr %82, align 4
  store i32 %87, ptr %86, align 4
  store i32 1, ptr %49, align 4
  %88 = load i32, ptr %49, align 4
  %.reload7 = load i32, ptr %.reg2mem6, align 4
  %89 = add i32 %.reload7, %88
  store i32 %89, ptr %50, align 4
  %90 = load i32, ptr %50, align 4
  store i32 %90, ptr %.reg2mem1, align 4
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem11, align 4
  br label %92

91:                                               ; preds = %57
  store i32 poison, ptr %.reg2mem11, align 4
  br label %92

92:                                               ; preds = %91, %70
  %.reload12 = load i32, ptr %.reg2mem11, align 4
  store i32 %.reload12, ptr %.reg2mem, align 4
  br label %93

93:                                               ; preds = %92
  %.reload4 = load i1, ptr %.reg2mem3, align 1
  br i1 %.reload4, label %._crit_edge, label %94

._crit_edge:                                      ; preds = %93
  %.reload = load i32, ptr %.reg2mem, align 4
  store i32 %.reload, ptr %.reg2mem13, align 4
  br label %57

94:                                               ; preds = %93
  %95 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %96 = extractvalue { ptr, ptr, ptr, i32 } %95, 0
  %97 = call ptr @llvm.invariant.start.p0(i64 616, ptr %96)
  %98 = extractvalue { ptr, ptr, ptr, i32 } %95, 3
  %99 = getelementptr ptr, ptr %96, i32 %98
  %100 = getelementptr ptr, ptr %99, i32 1
  %101 = load ptr, ptr %100, align 8
  %102 = extractvalue { ptr, ptr, ptr, i32 } %95, 1
  %103 = call ptr %101(ptr %102)
  %104 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %105 = extractvalue { ptr, ptr, ptr, i32 } %104, 0
  %106 = call ptr @llvm.invariant.start.p0(i64 616, ptr %105)
  %107 = extractvalue { ptr, ptr, ptr, i32 } %104, 3
  %108 = getelementptr ptr, ptr %105, i32 %107
  %109 = getelementptr ptr, ptr %108, i32 1
  %110 = load ptr, ptr %109, align 8
  %111 = extractvalue { ptr, ptr, ptr, i32 } %104, 1
  %112 = call ptr %110(ptr %111)
  %113 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 1
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 3
  store ptr @IntArray, ptr %51, align 8
  store ptr %113, ptr %114, align 8
  store i32 7, ptr %115, align 4
  %116 = call ptr @llvm.invariant.start.p0(i64 16, ptr %51)
  %117 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %118 = extractvalue { ptr, ptr, ptr, i32 } %117, 0
  %119 = call ptr @llvm.invariant.start.p0(i64 616, ptr %118)
  %120 = extractvalue { ptr, ptr, ptr, i32 } %117, 3
  %121 = getelementptr ptr, ptr %118, i32 %120
  %122 = getelementptr ptr, ptr %121, i32 1
  %123 = load ptr, ptr %122, align 8
  %124 = extractvalue { ptr, ptr, ptr, i32 } %117, 1
  %125 = call ptr %123(ptr %124)
  %126 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %127 = extractvalue { ptr, ptr, ptr, i32 } %126, 0
  %128 = call ptr @llvm.invariant.start.p0(i64 616, ptr %127)
  %129 = extractvalue { ptr, ptr, ptr, i32 } %126, 3
  %130 = getelementptr ptr, ptr %127, i32 %129
  %131 = getelementptr ptr, ptr %130, i32 1
  %132 = load ptr, ptr %131, align 8
  %133 = extractvalue { ptr, ptr, ptr, i32 } %126, 1
  %134 = call ptr %132(ptr %133)
  %135 = getelementptr { ptr }, ptr %34, i32 0, i32 0
  %136 = load ptr, ptr %135, align 8
  %137 = insertvalue { ptr } undef, ptr %136, 0
  %138 = load i32, ptr %125, align 4
  %139 = load i32, ptr %134, align 4
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 0
  %141 = load ptr, ptr %140, align 8
  %142 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %141, 0
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 1
  %144 = load ptr, ptr %143, align 8
  %145 = insertvalue { ptr, ptr, ptr, i32 } %142, ptr %144, 1
  %146 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 2
  %147 = load ptr, ptr %146, align 8
  %148 = insertvalue { ptr, ptr, ptr, i32 } %145, ptr %147, 2
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 3
  %150 = load i32, ptr %149, align 4
  %151 = insertvalue { ptr, ptr, ptr, i32 } %148, i32 %150, 3
  %152 = call ptr @llvm.invariant.start.p0(i64 24, ptr %52)
  %153 = getelementptr [3 x ptr], ptr %52, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %153, align 8
  %154 = getelementptr [3 x ptr], ptr %52, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %154, align 8
  %155 = getelementptr [3 x ptr], ptr %52, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %155, align 8
  %156 = call ptr @llvm.invariant.start.p0(i64 616, ptr %141)
  %157 = getelementptr ptr, ptr %141, i32 %150
  %158 = getelementptr ptr, ptr %157, i32 5
  %159 = load ptr, ptr %158, align 8
  %160 = getelementptr [3 x ptr], ptr %53, i32 0, i32 0
  store ptr @buffer_typ, ptr %160, align 8
  %161 = getelementptr [3 x ptr], ptr %53, i32 0, i32 1
  store ptr @i32_typ, ptr %161, align 8
  %162 = getelementptr [3 x ptr], ptr %53, i32 0, i32 2
  store ptr @i32_typ, ptr %162, align 8
  %163 = call ptr %159({ ptr, ptr, ptr, i32 } %151, ptr %53, { ptr } %137, i32 %138, i32 %139)
  call void %163({ ptr, ptr, ptr, i32 } %151, { ptr, ptr, ptr, i32 } %151, ptr %52, { ptr } %137, i32 %138, i32 %139)
  %164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 0
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 0
  %166 = load ptr, ptr %164, align 8
  store ptr %166, ptr %165, align 8
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 1
  %168 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 1
  %169 = load ptr, ptr %167, align 8
  store ptr %169, ptr %168, align 8
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 2
  %171 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 2
  %172 = load ptr, ptr %170, align 8
  store ptr %172, ptr %171, align 8
  %173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 3
  %174 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 3
  %175 = load i32, ptr %173, align 4
  store i32 %175, ptr %174, align 4
  call void @set_offset(ptr %54, ptr @IntArray)
  %176 = call ptr @llvm.invariant.start.p0(i64 24, ptr %54)
  %177 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 0
  %178 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 0
  %179 = load ptr, ptr %177, align 8
  store ptr %179, ptr %178, align 8
  %180 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 1
  %181 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  %182 = load ptr, ptr %180, align 8
  store ptr %182, ptr %181, align 8
  %183 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 2
  %184 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 2
  %185 = load ptr, ptr %183, align 8
  store ptr %185, ptr %184, align 8
  %186 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 3
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  %188 = load i32, ptr %186, align 4
  store i32 %188, ptr %187, align 4
  %189 = call ptr @llvm.invariant.start.p0(i64 16, ptr %55)
  %190 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 0
  %191 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 0
  %192 = load ptr, ptr %190, align 8
  store ptr %192, ptr %191, align 8
  %193 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  %194 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 1
  %195 = load ptr, ptr %193, align 8
  store ptr %195, ptr %194, align 8
  %196 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 2
  %197 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 2
  %198 = load ptr, ptr %196, align 8
  store ptr %198, ptr %197, align 8
  %199 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  %200 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 3
  %201 = load i32, ptr %199, align 4
  store i32 %201, ptr %200, align 4
  call void @set_offset(ptr %56, ptr @IntArray)
  %202 = call ptr @llvm.invariant.start.p0(i64 24, ptr %56)
  %203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 0
  %204 = load ptr, ptr %203, align 8
  %205 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %204, 0
  %206 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 1
  %207 = load ptr, ptr %206, align 8
  %208 = insertvalue { ptr, ptr, ptr, i32 } %205, ptr %207, 1
  %209 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 2
  %210 = load ptr, ptr %209, align 8
  %211 = insertvalue { ptr, ptr, ptr, i32 } %208, ptr %210, 2
  %212 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 3
  %213 = load i32, ptr %212, align 4
  %214 = insertvalue { ptr, ptr, ptr, i32 } %211, i32 %213, 3
  ret { ptr, ptr, ptr, i32 } %214
}

define { ptr, ptr, ptr, i32 } @IntArray_map_fFunctionPtri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i1, align 1
  %.reg2mem6 = alloca i32, align 4
  %.reg2mem11 = alloca i32, align 4
  %.reg2mem13 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @IntArray)
  %20 = call ptr @llvm.invariant.start.p0(i64 24, ptr %7)
  %21 = alloca ptr, align 8
  store { ptr } %3, ptr %21, align 8
  %22 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %23 = extractvalue { ptr, ptr, ptr, i32 } %22, 0
  %24 = call ptr @llvm.invariant.start.p0(i64 616, ptr %23)
  %25 = extractvalue { ptr, ptr, ptr, i32 } %22, 3
  %26 = getelementptr ptr, ptr %23, i32 %25
  %27 = getelementptr ptr, ptr %26, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = extractvalue { ptr, ptr, ptr, i32 } %22, 1
  %30 = call ptr %28(ptr %29)
  %31 = load i32, ptr %30, align 4
  %32 = getelementptr i32, ptr null, i32 %31
  %33 = ptrtoint ptr %32 to i64
  %34 = call ptr @malloc(i64 %33)
  %35 = alloca ptr, align 8
  store ptr %34, ptr %35, align 8
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %45 = load ptr, ptr %43, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %48 = load i32, ptr %46, align 4
  store i32 %48, ptr %47, align 4
  %49 = call ptr @llvm.invariant.start.p0(i64 16, ptr %36)
  %50 = alloca i1, align 1
  %51 = alloca i32, align 4
  %52 = alloca i32, align 4
  %53 = alloca i32, align 4
  %54 = alloca { ptr, ptr, ptr, i32 }, align 8
  %55 = alloca [3 x ptr], align 8
  %56 = alloca [3 x ptr], align 8
  %57 = alloca { ptr, ptr, ptr, i32 }, align 8
  %58 = alloca { ptr, ptr, ptr, i32 }, align 8
  %59 = alloca { ptr, ptr, ptr, i32 }, align 8
  store i32 0, ptr %.reg2mem13, align 4
  br label %60

60:                                               ; preds = %._crit_edge, %4
  %.reload14 = load i32, ptr %.reg2mem13, align 4
  store i32 %.reload14, ptr %.reg2mem6, align 4
  %61 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %62 = extractvalue { ptr, ptr, ptr, i32 } %61, 0
  %63 = call ptr @llvm.invariant.start.p0(i64 616, ptr %62)
  %64 = extractvalue { ptr, ptr, ptr, i32 } %61, 3
  %65 = getelementptr ptr, ptr %62, i32 %64
  %66 = getelementptr ptr, ptr %65, i32 1
  %67 = load ptr, ptr %66, align 8
  %68 = extractvalue { ptr, ptr, ptr, i32 } %61, 1
  %69 = call ptr %67(ptr %68)
  %70 = load i32, ptr %69, align 4
  %.reload10 = load i32, ptr %.reg2mem6, align 4
  %71 = icmp slt i32 %.reload10, %70
  store i1 %71, ptr %50, align 1
  %72 = load i1, ptr %50, align 1
  store i1 %72, ptr %.reg2mem3, align 1
  %.reload5 = load i1, ptr %.reg2mem3, align 1
  br i1 %.reload5, label %73, label %97

73:                                               ; preds = %60
  %74 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %75 = extractvalue { ptr, ptr, ptr, i32 } %74, 0
  %76 = call ptr @llvm.invariant.start.p0(i64 616, ptr %75)
  %77 = extractvalue { ptr, ptr, ptr, i32 } %74, 3
  %78 = getelementptr ptr, ptr %75, i32 %77
  %79 = load ptr, ptr %78, align 8
  %80 = extractvalue { ptr, ptr, ptr, i32 } %74, 1
  %81 = call ptr %79(ptr %80)
  %82 = load ptr, ptr %81, align 8
  %.reload9 = load i32, ptr %.reg2mem6, align 4
  %83 = getelementptr i32, ptr null, i32 %.reload9
  %84 = ptrtoint ptr %83 to i64
  %85 = getelementptr i8, ptr %82, i64 %84
  %86 = load i32, ptr %85, align 4
  %87 = load ptr, ptr %21, align 8
  %88 = call i32 %87(i32 %86)
  store i32 %88, ptr %51, align 4
  %89 = load ptr, ptr %36, align 8
  %.reload8 = load i32, ptr %.reg2mem6, align 4
  %90 = getelementptr i32, ptr null, i32 %.reload8
  %91 = ptrtoint ptr %90 to i64
  %92 = getelementptr i8, ptr %89, i64 %91
  %93 = load i32, ptr %51, align 4
  store i32 %93, ptr %92, align 4
  store i32 1, ptr %52, align 4
  %94 = load i32, ptr %52, align 4
  %.reload7 = load i32, ptr %.reg2mem6, align 4
  %95 = add i32 %.reload7, %94
  store i32 %95, ptr %53, align 4
  %96 = load i32, ptr %53, align 4
  store i32 %96, ptr %.reg2mem1, align 4
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem11, align 4
  br label %98

97:                                               ; preds = %60
  store i32 poison, ptr %.reg2mem11, align 4
  br label %98

98:                                               ; preds = %97, %73
  %.reload12 = load i32, ptr %.reg2mem11, align 4
  store i32 %.reload12, ptr %.reg2mem, align 4
  br label %99

99:                                               ; preds = %98
  %.reload4 = load i1, ptr %.reg2mem3, align 1
  br i1 %.reload4, label %._crit_edge, label %100

._crit_edge:                                      ; preds = %99
  %.reload = load i32, ptr %.reg2mem, align 4
  store i32 %.reload, ptr %.reg2mem13, align 4
  br label %60

100:                                              ; preds = %99
  %101 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %102 = extractvalue { ptr, ptr, ptr, i32 } %101, 0
  %103 = call ptr @llvm.invariant.start.p0(i64 616, ptr %102)
  %104 = extractvalue { ptr, ptr, ptr, i32 } %101, 3
  %105 = getelementptr ptr, ptr %102, i32 %104
  %106 = getelementptr ptr, ptr %105, i32 1
  %107 = load ptr, ptr %106, align 8
  %108 = extractvalue { ptr, ptr, ptr, i32 } %101, 1
  %109 = call ptr %107(ptr %108)
  %110 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %111 = extractvalue { ptr, ptr, ptr, i32 } %110, 0
  %112 = call ptr @llvm.invariant.start.p0(i64 616, ptr %111)
  %113 = extractvalue { ptr, ptr, ptr, i32 } %110, 3
  %114 = getelementptr ptr, ptr %111, i32 %113
  %115 = getelementptr ptr, ptr %114, i32 1
  %116 = load ptr, ptr %115, align 8
  %117 = extractvalue { ptr, ptr, ptr, i32 } %110, 1
  %118 = call ptr %116(ptr %117)
  %119 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 1
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 3
  store ptr @IntArray, ptr %54, align 8
  store ptr %119, ptr %120, align 8
  store i32 7, ptr %121, align 4
  %122 = call ptr @llvm.invariant.start.p0(i64 16, ptr %54)
  %123 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %124 = extractvalue { ptr, ptr, ptr, i32 } %123, 0
  %125 = call ptr @llvm.invariant.start.p0(i64 616, ptr %124)
  %126 = extractvalue { ptr, ptr, ptr, i32 } %123, 3
  %127 = getelementptr ptr, ptr %124, i32 %126
  %128 = getelementptr ptr, ptr %127, i32 1
  %129 = load ptr, ptr %128, align 8
  %130 = extractvalue { ptr, ptr, ptr, i32 } %123, 1
  %131 = call ptr %129(ptr %130)
  %132 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %133 = extractvalue { ptr, ptr, ptr, i32 } %132, 0
  %134 = call ptr @llvm.invariant.start.p0(i64 616, ptr %133)
  %135 = extractvalue { ptr, ptr, ptr, i32 } %132, 3
  %136 = getelementptr ptr, ptr %133, i32 %135
  %137 = getelementptr ptr, ptr %136, i32 1
  %138 = load ptr, ptr %137, align 8
  %139 = extractvalue { ptr, ptr, ptr, i32 } %132, 1
  %140 = call ptr %138(ptr %139)
  %141 = getelementptr { ptr }, ptr %36, i32 0, i32 0
  %142 = load ptr, ptr %141, align 8
  %143 = insertvalue { ptr } undef, ptr %142, 0
  %144 = load i32, ptr %131, align 4
  %145 = load i32, ptr %140, align 4
  %146 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 0
  %147 = load ptr, ptr %146, align 8
  %148 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %147, 0
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 1
  %150 = load ptr, ptr %149, align 8
  %151 = insertvalue { ptr, ptr, ptr, i32 } %148, ptr %150, 1
  %152 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 2
  %153 = load ptr, ptr %152, align 8
  %154 = insertvalue { ptr, ptr, ptr, i32 } %151, ptr %153, 2
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 3
  %156 = load i32, ptr %155, align 4
  %157 = insertvalue { ptr, ptr, ptr, i32 } %154, i32 %156, 3
  %158 = call ptr @llvm.invariant.start.p0(i64 24, ptr %55)
  %159 = getelementptr [3 x ptr], ptr %55, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %159, align 8
  %160 = getelementptr [3 x ptr], ptr %55, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %160, align 8
  %161 = getelementptr [3 x ptr], ptr %55, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %161, align 8
  %162 = call ptr @llvm.invariant.start.p0(i64 616, ptr %147)
  %163 = getelementptr ptr, ptr %147, i32 %156
  %164 = getelementptr ptr, ptr %163, i32 5
  %165 = load ptr, ptr %164, align 8
  %166 = getelementptr [3 x ptr], ptr %56, i32 0, i32 0
  store ptr @buffer_typ, ptr %166, align 8
  %167 = getelementptr [3 x ptr], ptr %56, i32 0, i32 1
  store ptr @i32_typ, ptr %167, align 8
  %168 = getelementptr [3 x ptr], ptr %56, i32 0, i32 2
  store ptr @i32_typ, ptr %168, align 8
  %169 = call ptr %165({ ptr, ptr, ptr, i32 } %157, ptr %56, { ptr } %143, i32 %144, i32 %145)
  call void %169({ ptr, ptr, ptr, i32 } %157, { ptr, ptr, ptr, i32 } %157, ptr %55, { ptr } %143, i32 %144, i32 %145)
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 0
  %171 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 0
  %172 = load ptr, ptr %170, align 8
  store ptr %172, ptr %171, align 8
  %173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 1
  %174 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 1
  %175 = load ptr, ptr %173, align 8
  store ptr %175, ptr %174, align 8
  %176 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 2
  %177 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 2
  %178 = load ptr, ptr %176, align 8
  store ptr %178, ptr %177, align 8
  %179 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 3
  %180 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 3
  %181 = load i32, ptr %179, align 4
  store i32 %181, ptr %180, align 4
  call void @set_offset(ptr %57, ptr @IntArray)
  %182 = call ptr @llvm.invariant.start.p0(i64 24, ptr %57)
  %183 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 0
  %184 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 0
  %185 = load ptr, ptr %183, align 8
  store ptr %185, ptr %184, align 8
  %186 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 1
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 1
  %188 = load ptr, ptr %186, align 8
  store ptr %188, ptr %187, align 8
  %189 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 2
  %190 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 2
  %191 = load ptr, ptr %189, align 8
  store ptr %191, ptr %190, align 8
  %192 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 3
  %193 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 3
  %194 = load i32, ptr %192, align 4
  store i32 %194, ptr %193, align 4
  %195 = call ptr @llvm.invariant.start.p0(i64 16, ptr %58)
  %196 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 0
  %197 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 0
  %198 = load ptr, ptr %196, align 8
  store ptr %198, ptr %197, align 8
  %199 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 1
  %200 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 1
  %201 = load ptr, ptr %199, align 8
  store ptr %201, ptr %200, align 8
  %202 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 2
  %203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 2
  %204 = load ptr, ptr %202, align 8
  store ptr %204, ptr %203, align 8
  %205 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 3
  %206 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 3
  %207 = load i32, ptr %205, align 4
  store i32 %207, ptr %206, align 4
  call void @set_offset(ptr %59, ptr @IntIterable)
  %208 = call ptr @llvm.invariant.start.p0(i64 24, ptr %59)
  %209 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 0
  %210 = load ptr, ptr %209, align 8
  %211 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %210, 0
  %212 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 1
  %213 = load ptr, ptr %212, align 8
  %214 = insertvalue { ptr, ptr, ptr, i32 } %211, ptr %213, 1
  %215 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 2
  %216 = load ptr, ptr %215, align 8
  %217 = insertvalue { ptr, ptr, ptr, i32 } %214, ptr %216, 2
  %218 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 3
  %219 = load i32, ptr %218, align 4
  %220 = insertvalue { ptr, ptr, ptr, i32 } %217, i32 %219, 3
  ret { ptr, ptr, ptr, i32 } %220
}

define { ptr, ptr, ptr, i32 } @IntArray_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @IntArray)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr, ptr, ptr, i32 }, i32 }, ptr null, i32 1) to i64))
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  store ptr @IntArrayIterator, ptr %21, align 8
  store ptr %20, ptr %22, align 8
  store i32 7, ptr %23, align 4
  %24 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %25 = alloca { ptr, ptr, ptr, i32 }, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 0
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 1
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 2
  %34 = load ptr, ptr %32, align 8
  store ptr %34, ptr %33, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 3
  %37 = load i32, ptr %35, align 4
  store i32 %37, ptr %36, align 4
  call void @set_offset(ptr %25, ptr @IntArray)
  %38 = call ptr @llvm.invariant.start.p0(i64 24, ptr %25)
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 0
  %40 = load ptr, ptr %39, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %40, 0
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 1
  %43 = load ptr, ptr %42, align 8
  %44 = insertvalue { ptr, ptr, ptr, i32 } %41, ptr %43, 1
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 2
  %46 = load ptr, ptr %45, align 8
  %47 = insertvalue { ptr, ptr, ptr, i32 } %44, ptr %46, 2
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 3
  %49 = load i32, ptr %48, align 4
  %50 = insertvalue { ptr, ptr, ptr, i32 } %47, i32 %49, 3
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %52 = load ptr, ptr %51, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %52, 0
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %55 = load ptr, ptr %54, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %55, 1
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %58 = load ptr, ptr %57, align 8
  %59 = insertvalue { ptr, ptr, ptr, i32 } %56, ptr %58, 2
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %61 = load i32, ptr %60, align 4
  %62 = insertvalue { ptr, ptr, ptr, i32 } %59, i32 %61, 3
  %63 = alloca [1 x ptr], align 8
  %64 = call ptr @llvm.invariant.start.p0(i64 8, ptr %63)
  %65 = getelementptr [1 x ptr], ptr %63, i32 0, i32 0
  store ptr @_parameterization_IntArray, ptr %65, align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 64, ptr %52)
  %67 = getelementptr ptr, ptr %52, i32 %61
  %68 = getelementptr ptr, ptr %67, i32 2
  %69 = load ptr, ptr %68, align 8
  %70 = alloca [1 x ptr], align 8
  %71 = getelementptr [1 x ptr], ptr %70, i32 0, i32 0
  store ptr %40, ptr %71, align 8
  %72 = call ptr %69({ ptr, ptr, ptr, i32 } %62, ptr %70, { ptr, ptr, ptr, i32 } %50)
  call void %72({ ptr, ptr, ptr, i32 } %62, { ptr, ptr, ptr, i32 } %62, ptr %63, { ptr, ptr, ptr, i32 } %50)
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %76 = load ptr, ptr %74, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %79 = load ptr, ptr %77, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %82 = load ptr, ptr %80, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %85 = load i32, ptr %83, align 4
  store i32 %85, ptr %84, align 4
  call void @set_offset(ptr %73, ptr @Iterator)
  %86 = call ptr @llvm.invariant.start.p0(i64 24, ptr %73)
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %88 = load ptr, ptr %87, align 8
  %89 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %88, 0
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } %89, ptr %91, 1
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %94 = load ptr, ptr %93, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %94, 2
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %97 = load i32, ptr %96, align 4
  %98 = insertvalue { ptr, ptr, ptr, i32 } %95, i32 %97, 3
  ret { ptr, ptr, ptr, i32 } %98
}

define ptr @IntArrayIterator_field_array(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, i32 }, ptr %0, i32 0, i32 0
  ret ptr %2
}

define ptr @IntArrayIterator_field_index(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, i32 }, ptr %0, i32 0, i32 1
  ret ptr %2
}

define ptr @IntArrayIterator_B_init_arrayIntArray({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7629948565578263212, i64 ptrtoint (ptr @IntArray to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [8 x ptr], ptr %16, i32 0, i32 4
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @IntArrayIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [8 x ptr], ptr %4, i32 0, i32 5
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @IntArrayIterator_init_arrayIntArray({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @IntArrayIterator)
  %20 = call ptr @llvm.invariant.start.p0(i64 24, ptr %7)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @IntArray)
  %36 = call ptr @llvm.invariant.start.p0(i64 24, ptr %23)
  %37 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %38 = extractvalue { ptr, ptr, ptr, i32 } %37, 0
  %39 = call ptr @llvm.invariant.start.p0(i64 64, ptr %38)
  %40 = extractvalue { ptr, ptr, ptr, i32 } %37, 3
  %41 = getelementptr ptr, ptr %38, i32 %40
  %42 = load ptr, ptr %41, align 8
  %43 = extractvalue { ptr, ptr, ptr, i32 } %37, 1
  %44 = call ptr %42(ptr %43)
  %45 = alloca { ptr, ptr, ptr, i32 }, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %48 = load ptr, ptr %46, align 8
  store ptr %48, ptr %47, align 8
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %51 = load ptr, ptr %49, align 8
  store ptr %51, ptr %50, align 8
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %54 = load ptr, ptr %52, align 8
  store ptr %54, ptr %53, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %57 = load i32, ptr %55, align 4
  store i32 %57, ptr %56, align 4
  call void @set_offset(ptr %45, ptr @IntArray)
  %58 = call ptr @llvm.invariant.start.p0(i64 24, ptr %45)
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 0
  %61 = load ptr, ptr %59, align 8
  store ptr %61, ptr %60, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 1
  %64 = load ptr, ptr %62, align 8
  store ptr %64, ptr %63, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 2
  %67 = load ptr, ptr %65, align 8
  store ptr %67, ptr %66, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 3
  %70 = load i32, ptr %68, align 4
  store i32 %70, ptr %69, align 4
  %71 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %72 = extractvalue { ptr, ptr, ptr, i32 } %71, 0
  %73 = call ptr @llvm.invariant.start.p0(i64 64, ptr %72)
  %74 = extractvalue { ptr, ptr, ptr, i32 } %71, 3
  %75 = getelementptr ptr, ptr %72, i32 %74
  %76 = getelementptr ptr, ptr %75, i32 1
  %77 = load ptr, ptr %76, align 8
  %78 = extractvalue { ptr, ptr, ptr, i32 } %71, 1
  %79 = call ptr %77(ptr %78)
  store i32 0, ptr %79, align 4
  ret void
}

define { ptr, i32 } @IntArrayIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i32 }, align 8
  %.reg2mem1 = alloca { ptr, i32 }, align 8
  %.reg2mem3 = alloca { ptr, i32 }, align 8
  %.reg2mem5 = alloca { ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @IntArrayIterator)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 64, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 1
  %26 = load ptr, ptr %25, align 8
  %27 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %28 = call ptr %26(ptr %27)
  %29 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %30 = extractvalue { ptr, ptr, ptr, i32 } %29, 0
  %31 = call ptr @llvm.invariant.start.p0(i64 64, ptr %30)
  %32 = extractvalue { ptr, ptr, ptr, i32 } %29, 3
  %33 = getelementptr ptr, ptr %30, i32 %32
  %34 = load ptr, ptr %33, align 8
  %35 = extractvalue { ptr, ptr, ptr, i32 } %29, 1
  %36 = call ptr %34(ptr %35)
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %38 = load ptr, ptr %37, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %38, 0
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %41 = load ptr, ptr %40, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } %39, ptr %41, 1
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %44 = load ptr, ptr %43, align 8
  %45 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %44, 2
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %47 = load i32, ptr %46, align 4
  %48 = insertvalue { ptr, ptr, ptr, i32 } %45, i32 %47, 3
  %49 = alloca [0 x ptr], align 8
  %50 = call ptr @llvm.invariant.start.p0(i64 0, ptr %49)
  %51 = call ptr @llvm.invariant.start.p0(i64 616, ptr %38)
  %52 = getelementptr ptr, ptr %38, i32 %47
  %53 = getelementptr ptr, ptr %52, i32 6
  %54 = load ptr, ptr %53, align 8
  %55 = alloca [0 x ptr], align 8
  %56 = call ptr %54({ ptr, ptr, ptr, i32 } %48, ptr %55)
  %57 = call i32 %56({ ptr, ptr, ptr, i32 } %48, { ptr, ptr, ptr, i32 } %48, ptr %49)
  %58 = load i32, ptr %28, align 4
  %59 = icmp slt i32 %58, %57
  %60 = alloca i32, align 4
  %61 = alloca i32, align 4
  %62 = alloca [0 x ptr], align 8
  %63 = alloca [0 x ptr], align 8
  %64 = alloca ptr, align 8
  %65 = alloca i32, align 4
  %66 = alloca i32, align 4
  %67 = alloca i32, align 4
  %68 = alloca ptr, align 8
  %69 = alloca i64, align 8
  %70 = alloca i32, align 4
  %71 = alloca ptr, align 8
  %72 = alloca i64, align 8
  br i1 %59, label %73, label %146

73:                                               ; preds = %3
  %74 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %75 = extractvalue { ptr, ptr, ptr, i32 } %74, 0
  %76 = call ptr @llvm.invariant.start.p0(i64 64, ptr %75)
  %77 = extractvalue { ptr, ptr, ptr, i32 } %74, 3
  %78 = getelementptr ptr, ptr %75, i32 %77
  %79 = getelementptr ptr, ptr %78, i32 1
  %80 = load ptr, ptr %79, align 8
  %81 = extractvalue { ptr, ptr, ptr, i32 } %74, 1
  %82 = call ptr %80(ptr %81)
  store i32 1, ptr %60, align 4
  %83 = load i32, ptr %82, align 4
  %84 = load i32, ptr %60, align 4
  %85 = add i32 %83, %84
  store i32 %85, ptr %61, align 4
  %86 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %87 = extractvalue { ptr, ptr, ptr, i32 } %86, 0
  %88 = call ptr @llvm.invariant.start.p0(i64 64, ptr %87)
  %89 = extractvalue { ptr, ptr, ptr, i32 } %86, 3
  %90 = getelementptr ptr, ptr %87, i32 %89
  %91 = getelementptr ptr, ptr %90, i32 1
  %92 = load ptr, ptr %91, align 8
  %93 = extractvalue { ptr, ptr, ptr, i32 } %86, 1
  %94 = call ptr %92(ptr %93)
  %95 = load i32, ptr %61, align 4
  store i32 %95, ptr %94, align 4
  %96 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %97 = extractvalue { ptr, ptr, ptr, i32 } %96, 0
  %98 = call ptr @llvm.invariant.start.p0(i64 64, ptr %97)
  %99 = extractvalue { ptr, ptr, ptr, i32 } %96, 3
  %100 = getelementptr ptr, ptr %97, i32 %99
  %101 = load ptr, ptr %100, align 8
  %102 = extractvalue { ptr, ptr, ptr, i32 } %96, 1
  %103 = call ptr %101(ptr %102)
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 0
  %105 = load ptr, ptr %104, align 8
  %106 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %105, 0
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 1
  %108 = load ptr, ptr %107, align 8
  %109 = insertvalue { ptr, ptr, ptr, i32 } %106, ptr %108, 1
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 2
  %111 = load ptr, ptr %110, align 8
  %112 = insertvalue { ptr, ptr, ptr, i32 } %109, ptr %111, 2
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 3
  %114 = load i32, ptr %113, align 4
  %115 = insertvalue { ptr, ptr, ptr, i32 } %112, i32 %114, 3
  %116 = call ptr @llvm.invariant.start.p0(i64 0, ptr %62)
  %117 = call ptr @llvm.invariant.start.p0(i64 616, ptr %105)
  %118 = getelementptr ptr, ptr %105, i32 %114
  %119 = getelementptr ptr, ptr %118, i32 8
  %120 = load ptr, ptr %119, align 8
  %121 = call ptr %120({ ptr, ptr, ptr, i32 } %115, ptr %63)
  %122 = call { ptr } %121({ ptr, ptr, ptr, i32 } %115, { ptr, ptr, ptr, i32 } %115, ptr %62)
  store { ptr } %122, ptr %64, align 8
  %123 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %124 = extractvalue { ptr, ptr, ptr, i32 } %123, 0
  %125 = call ptr @llvm.invariant.start.p0(i64 64, ptr %124)
  %126 = extractvalue { ptr, ptr, ptr, i32 } %123, 3
  %127 = getelementptr ptr, ptr %124, i32 %126
  %128 = getelementptr ptr, ptr %127, i32 1
  %129 = load ptr, ptr %128, align 8
  %130 = extractvalue { ptr, ptr, ptr, i32 } %123, 1
  %131 = call ptr %129(ptr %130)
  store i32 1, ptr %65, align 4
  %132 = load i32, ptr %131, align 4
  %133 = load i32, ptr %65, align 4
  %134 = sub i32 %132, %133
  store i32 %134, ptr %66, align 4
  %135 = load ptr, ptr %64, align 8
  %136 = load i32, ptr %66, align 4
  %137 = getelementptr i32, ptr null, i32 %136
  %138 = ptrtoint ptr %137 to i64
  %139 = getelementptr i8, ptr %135, i64 %138
  %140 = load i32, ptr %139, align 4
  store i32 %140, ptr %67, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %69, align 4
  %141 = load i64, ptr %69, align 4
  store i64 %141, ptr %68, align 4
  %142 = load ptr, ptr %68, align 8
  %143 = insertvalue { ptr, i32 } undef, ptr %142, 0
  %144 = load i32, ptr %67, align 4
  %145 = insertvalue { ptr, i32 } %143, i32 %144, 1
  store { ptr, i32 } %145, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i32 }, ptr %.reg2mem3, align 8
  store { ptr, i32 } %.reload4, ptr %.reg2mem5, align 8
  br label %152

146:                                              ; preds = %3
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %72, align 4
  %147 = load i64, ptr %72, align 4
  store i64 %147, ptr %71, align 4
  %148 = load ptr, ptr %71, align 8
  %149 = insertvalue { ptr, i32 } undef, ptr %148, 0
  %150 = load i32, ptr %70, align 4
  %151 = insertvalue { ptr, i32 } %149, i32 %150, 1
  store { ptr, i32 } %151, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i32 }, ptr %.reg2mem1, align 8
  store { ptr, i32 } %.reload2, ptr %.reg2mem5, align 8
  br label %152

152:                                              ; preds = %146, %73
  %.reload6 = load { ptr, i32 }, ptr %.reg2mem5, align 8
  store { ptr, i32 } %.reload6, ptr %.reg2mem, align 8
  br label %153

153:                                              ; preds = %152
  %.reload = load { ptr, i32 }, ptr %.reg2mem, align 8
  ret { ptr, i32 } %.reload
}

define ptr @Pair_field_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, i160 }, { ptr, i160 }, ptr, ptr }, ptr %0, i32 0, i32 0
  ret ptr %2
}

define ptr @Pair_field_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, i160 }, { ptr, i160 }, ptr, ptr }, ptr %0, i32 0, i32 1
  ret ptr %2
}

define ptr @Pair_field_Pair_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, i160 }, { ptr, i160 }, ptr, ptr }, ptr %0, i32 0, i32 2
  ret ptr %2
}

define ptr @Pair_field_Pair_1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, i160 }, { ptr, i160 }, ptr, ptr }, ptr %0, i32 0, i32 3
  ret ptr %2
}

define ptr @Pair_B_init_firstT_secondU({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, i160 } %2, { ptr, i160 } %3) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = getelementptr [2 x ptr], ptr %1, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr ptr, ptr %7, i32 1
  %9 = getelementptr ptr, ptr %7, i32 2
  %10 = getelementptr ptr, ptr %7, i32 3
  %11 = getelementptr ptr, ptr %7, i32 4
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 3282773614056351330, i64 ptrtoint (ptr @Object to i64), ptr %15)
  %17 = getelementptr [2 x ptr], ptr %1, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr ptr, ptr %18, i32 1
  %20 = getelementptr ptr, ptr %18, i32 2
  %21 = getelementptr ptr, ptr %18, i32 3
  %22 = getelementptr ptr, ptr %18, i32 4
  %23 = load i64, ptr %19, align 4
  %24 = load i64, ptr %20, align 4
  %25 = load ptr, ptr %21, align 8
  %26 = load ptr, ptr %22, align 8
  %27 = call i1 @subtype_test_wrapper(ptr %25, i64 %24, i64 %23, i64 3282773614056351330, i64 ptrtoint (ptr @Object to i64), ptr %26)
  %28 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %29 = getelementptr [10 x ptr], ptr %28, i32 0, i32 7
  %30 = getelementptr ptr, ptr %29, i32 7
  %31 = load ptr, ptr %30, align 8
  ret ptr %31
}

define ptr @Pair_B_first_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [10 x ptr], ptr %4, i32 0, i32 8
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Pair_B_second_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [10 x ptr], ptr %4, i32 0, i32 9
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @Pair_init_firstT_secondU({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3, { ptr, i160 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @Pair)
  %21 = call ptr @llvm.invariant.start.p0(i64 24, ptr %8)
  %22 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %22, align 8
  %23 = alloca { ptr, i160 }, align 8
  %24 = getelementptr { ptr, i160 }, ptr %22, i32 0, i32 0
  %25 = getelementptr { ptr, i160 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, i160 }, ptr %22, i32 0, i32 1
  %28 = getelementptr { ptr, i160 }, ptr %23, i32 0, i32 1
  %29 = load i160, ptr %27, align 4
  store i160 %29, ptr %28, align 4
  call void @set_offset(ptr %23, ptr @Object)
  %30 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %31 = extractvalue { ptr, ptr, ptr, i32 } %30, 0
  %32 = call ptr @llvm.invariant.start.p0(i64 80, ptr %31)
  %33 = extractvalue { ptr, ptr, ptr, i32 } %30, 3
  %34 = getelementptr ptr, ptr %31, i32 %33
  %35 = load ptr, ptr %34, align 8
  %36 = extractvalue { ptr, ptr, ptr, i32 } %30, 1
  %37 = call ptr %35(ptr %36)
  %38 = alloca { ptr, i160 }, align 8
  %39 = getelementptr { ptr, i160 }, ptr %23, i32 0, i32 0
  %40 = getelementptr { ptr, i160 }, ptr %38, i32 0, i32 0
  %41 = load ptr, ptr %39, align 8
  store ptr %41, ptr %40, align 8
  %42 = getelementptr { ptr, i160 }, ptr %23, i32 0, i32 1
  %43 = getelementptr { ptr, i160 }, ptr %38, i32 0, i32 1
  %44 = load i160, ptr %42, align 4
  store i160 %44, ptr %43, align 4
  call void @set_offset(ptr %38, ptr @Object)
  %45 = getelementptr { ptr, i160 }, ptr %38, i32 0, i32 0
  %46 = getelementptr { ptr, i160 }, ptr %37, i32 0, i32 0
  %47 = load ptr, ptr %45, align 8
  store ptr %47, ptr %46, align 8
  %48 = getelementptr { ptr, i160 }, ptr %38, i32 0, i32 1
  %49 = getelementptr { ptr, i160 }, ptr %37, i32 0, i32 1
  %50 = load i160, ptr %48, align 4
  store i160 %50, ptr %49, align 4
  %51 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %4, ptr %51, align 8
  %52 = alloca { ptr, i160 }, align 8
  %53 = getelementptr { ptr, i160 }, ptr %51, i32 0, i32 0
  %54 = getelementptr { ptr, i160 }, ptr %52, i32 0, i32 0
  %55 = load ptr, ptr %53, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr { ptr, i160 }, ptr %51, i32 0, i32 1
  %57 = getelementptr { ptr, i160 }, ptr %52, i32 0, i32 1
  %58 = load i160, ptr %56, align 4
  store i160 %58, ptr %57, align 4
  call void @set_offset(ptr %52, ptr @Object)
  %59 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %60 = extractvalue { ptr, ptr, ptr, i32 } %59, 0
  %61 = call ptr @llvm.invariant.start.p0(i64 80, ptr %60)
  %62 = extractvalue { ptr, ptr, ptr, i32 } %59, 3
  %63 = getelementptr ptr, ptr %60, i32 %62
  %64 = getelementptr ptr, ptr %63, i32 1
  %65 = load ptr, ptr %64, align 8
  %66 = extractvalue { ptr, ptr, ptr, i32 } %59, 1
  %67 = call ptr %65(ptr %66)
  %68 = alloca { ptr, i160 }, align 8
  %69 = getelementptr { ptr, i160 }, ptr %52, i32 0, i32 0
  %70 = getelementptr { ptr, i160 }, ptr %68, i32 0, i32 0
  %71 = load ptr, ptr %69, align 8
  store ptr %71, ptr %70, align 8
  %72 = getelementptr { ptr, i160 }, ptr %52, i32 0, i32 1
  %73 = getelementptr { ptr, i160 }, ptr %68, i32 0, i32 1
  %74 = load i160, ptr %72, align 4
  store i160 %74, ptr %73, align 4
  call void @set_offset(ptr %68, ptr @Object)
  %75 = getelementptr { ptr, i160 }, ptr %68, i32 0, i32 0
  %76 = getelementptr { ptr, i160 }, ptr %67, i32 0, i32 0
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, i160 }, ptr %68, i32 0, i32 1
  %79 = getelementptr { ptr, i160 }, ptr %67, i32 0, i32 1
  %80 = load i160, ptr %78, align 4
  store i160 %80, ptr %79, align 4
  ret void
}

define { ptr, i160 } @Pair_first_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Pair)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 80, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %27 = call ptr %25(ptr %26)
  %28 = alloca { ptr, i160 }, align 8
  %29 = getelementptr { ptr, i160 }, ptr %27, i32 0, i32 0
  %30 = getelementptr { ptr, i160 }, ptr %28, i32 0, i32 0
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, i160 }, ptr %27, i32 0, i32 1
  %33 = getelementptr { ptr, i160 }, ptr %28, i32 0, i32 1
  %34 = load i160, ptr %32, align 4
  store i160 %34, ptr %33, align 4
  call void @set_offset(ptr %28, ptr @Object)
  %35 = getelementptr { ptr, i160 }, ptr %28, i32 0, i32 0
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, i160 } undef, ptr %36, 0
  %38 = getelementptr { ptr, i160 }, ptr %28, i32 0, i32 1
  %39 = load i160, ptr %38, align 4
  %40 = insertvalue { ptr, i160 } %37, i160 %39, 1
  ret { ptr, i160 } %40
}

define { ptr, i160 } @Pair_second_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Pair)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 80, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 1
  %26 = load ptr, ptr %25, align 8
  %27 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %28 = call ptr %26(ptr %27)
  %29 = alloca { ptr, i160 }, align 8
  %30 = getelementptr { ptr, i160 }, ptr %28, i32 0, i32 0
  %31 = getelementptr { ptr, i160 }, ptr %29, i32 0, i32 0
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, i160 }, ptr %28, i32 0, i32 1
  %34 = getelementptr { ptr, i160 }, ptr %29, i32 0, i32 1
  %35 = load i160, ptr %33, align 4
  store i160 %35, ptr %34, align 4
  call void @set_offset(ptr %29, ptr @Object)
  %36 = getelementptr { ptr, i160 }, ptr %29, i32 0, i32 0
  %37 = load ptr, ptr %36, align 8
  %38 = insertvalue { ptr, i160 } undef, ptr %37, 0
  %39 = getelementptr { ptr, i160 }, ptr %29, i32 0, i32 1
  %40 = load i160, ptr %39, align 4
  %41 = insertvalue { ptr, i160 } %38, i160 %40, 1
  ret { ptr, i160 } %41
}

define ptr @Array_field_buffer(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr }, i32, i32, ptr }, ptr %0, i32 0, i32 0
  ret ptr %2
}

define ptr @Array_field_length(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr }, i32, i32, ptr }, ptr %0, i32 0, i32 1
  ret ptr %2
}

define ptr @Array_field_capacity(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr }, i32, i32, ptr }, ptr %0, i32 0, i32 2
  ret ptr %2
}

define ptr @Array_field_Array_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr }, i32, i32, ptr }, ptr %0, i32 0, i32 3
  ret ptr %2
}

define ptr @Array_B__Self_from_iterable_iterableIterable2T(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %4 = getelementptr [1 x ptr], ptr %0, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = load ptr, ptr getelementptr (ptr, ptr getelementptr ([69 x ptr], ptr @Array, i32 0, i32 25), i32 7), align 8
  ret ptr %15
}

define ptr @Array_B_init_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [69 x ptr], ptr %4, i32 0, i32 26
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Array_B_init_capacityPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1, i32 %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [69 x ptr], ptr %16, i32 0, i32 27
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @Array_B_length_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [69 x ptr], ptr %4, i32 0, i32 28
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Array_B_capacity_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [69 x ptr], ptr %4, i32 0, i32 29
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Array_B_append_xT({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, i160 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 3282773614056351330, i64 ptrtoint (ptr @Object to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [69 x ptr], ptr %16, i32 0, i32 30
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @Array_B_grow_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [69 x ptr], ptr %4, i32 0, i32 31
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Array_B__index_xPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1, i32 %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [69 x ptr], ptr %16, i32 0, i32 32
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @Array_B_throw_oob_xPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1, i32 %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [69 x ptr], ptr %16, i32 0, i32 33
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @Array_B_unsafe_index_xPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1, i32 %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [69 x ptr], ptr %16, i32 0, i32 34
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @Array_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [69 x ptr], ptr %4, i32 0, i32 35
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Array_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [69 x ptr], ptr %16, i32 0, i32 36
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @Array_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, i160 } %2, { ptr } %3) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = getelementptr [2 x ptr], ptr %1, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr ptr, ptr %7, i32 1
  %9 = getelementptr ptr, ptr %7, i32 2
  %10 = getelementptr ptr, ptr %7, i32 3
  %11 = getelementptr ptr, ptr %7, i32 4
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 3282773614056351330, i64 ptrtoint (ptr @Object to i64), ptr %15)
  %17 = getelementptr [2 x ptr], ptr %1, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr ptr, ptr %18, i32 1
  %20 = getelementptr ptr, ptr %18, i32 2
  %21 = getelementptr ptr, ptr %18, i32 3
  %22 = getelementptr ptr, ptr %18, i32 4
  %23 = load i64, ptr %19, align 4
  %24 = load i64, ptr %20, align 4
  %25 = load ptr, ptr %21, align 8
  %26 = load ptr, ptr %22, align 8
  %27 = call i1 @subtype_test_wrapper(ptr %25, i64 %24, i64 %23, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %26)
  %28 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %29 = getelementptr [69 x ptr], ptr %28, i32 0, i32 37
  %30 = getelementptr ptr, ptr %29, i32 7
  %31 = load ptr, ptr %30, align 8
  ret ptr %31
}

define ptr @Array_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [69 x ptr], ptr %16, i32 0, i32 38
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @Array_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [69 x ptr], ptr %16, i32 0, i32 39
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @Array_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [69 x ptr], ptr %16, i32 0, i32 40
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @Array_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [69 x ptr], ptr %16, i32 0, i32 41
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @Array_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [69 x ptr], ptr %16, i32 0, i32 42
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @Array_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [69 x ptr], ptr %16, i32 0, i32 43
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @Array_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [69 x ptr], ptr %16, i32 0, i32 44
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @Array_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [69 x ptr], ptr %16, i32 0, i32 45
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define { ptr, ptr, ptr, i32 } @Array__Self_from_iterable_iterableIterable2T(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %3 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem5 = alloca ptr, align 8
  %.reg2mem7 = alloca ptr, align 8
  %.reg2mem9 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %1, ptr %3, align 8
  %4 = call ptr @llvm.invariant.start.p0(i64 16, ptr %3)
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @Iterable2)
  %18 = call ptr @llvm.invariant.start.p0(i64 24, ptr %5)
  %19 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ([1 x ptr], ptr null, i32 1) to i64))
  %20 = call ptr @llvm.invariant.start.p0(i64 8, ptr %19)
  store ptr @Object, ptr %19, align 8
  %21 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32, ptr }, ptr null, i32 1) to i64))
  %22 = getelementptr { { ptr }, i32, i32, ptr }, ptr %21, i32 0, i32 3
  store ptr %19, ptr %22, align 8
  %23 = getelementptr { { ptr }, i32, i32, ptr }, ptr %21, i32 0, i32 3
  %24 = call ptr @llvm.invariant.start.p0(i64 8, ptr %23)
  %25 = alloca { ptr, ptr, ptr, i32 }, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 3
  store ptr @Array, ptr %25, align 8
  store ptr %21, ptr %26, align 8
  store i32 7, ptr %27, align 4
  %28 = call ptr @llvm.invariant.start.p0(i64 16, ptr %25)
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 0
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %30, 0
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 1
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %33, 1
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 2
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %36, 2
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 3
  %39 = load i32, ptr %38, align 4
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %39, 3
  %41 = alloca [0 x ptr], align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 0, ptr %41)
  %43 = call ptr @llvm.invariant.start.p0(i64 552, ptr %30)
  %44 = getelementptr ptr, ptr %30, i32 %39
  %45 = getelementptr ptr, ptr %44, i32 5
  %46 = load ptr, ptr %45, align 8
  %47 = alloca [0 x ptr], align 8
  %48 = call ptr %46({ ptr, ptr, ptr, i32 } %40, ptr %47)
  call void %48({ ptr, ptr, ptr, i32 } %40, { ptr, ptr, ptr, i32 } %40, ptr %41)
  %49 = alloca { ptr, ptr, ptr, i32 }, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 0
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 0
  %52 = load ptr, ptr %50, align 8
  store ptr %52, ptr %51, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 1
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 1
  %55 = load ptr, ptr %53, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 2
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 2
  %58 = load ptr, ptr %56, align 8
  store ptr %58, ptr %57, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 3
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 3
  %61 = load i32, ptr %59, align 4
  store i32 %61, ptr %60, align 4
  call void @set_offset(ptr %49, ptr @Array)
  %62 = call ptr @llvm.invariant.start.p0(i64 24, ptr %49)
  %63 = alloca { ptr, ptr, ptr, i32 }, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 0
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 0
  %66 = load ptr, ptr %64, align 8
  store ptr %66, ptr %65, align 8
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 1
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 1
  %69 = load ptr, ptr %67, align 8
  store ptr %69, ptr %68, align 8
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 2
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 2
  %72 = load ptr, ptr %70, align 8
  store ptr %72, ptr %71, align 8
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 3
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 3
  %75 = load i32, ptr %73, align 4
  store i32 %75, ptr %74, align 4
  %76 = call ptr @llvm.invariant.start.p0(i64 16, ptr %63)
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %78 = load ptr, ptr %77, align 8
  %79 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %78, 0
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %81 = load ptr, ptr %80, align 8
  %82 = insertvalue { ptr, ptr, ptr, i32 } %79, ptr %81, 1
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %84 = load ptr, ptr %83, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } %82, ptr %84, 2
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %87 = load i32, ptr %86, align 4
  %88 = insertvalue { ptr, ptr, ptr, i32 } %85, i32 %87, 3
  %89 = alloca [0 x ptr], align 8
  %90 = call ptr @llvm.invariant.start.p0(i64 0, ptr %89)
  %91 = call ptr @llvm.invariant.start.p0(i64 184, ptr %78)
  %92 = getelementptr ptr, ptr %78, i32 %87
  %93 = getelementptr ptr, ptr %92, i32 1
  %94 = load ptr, ptr %93, align 8
  %95 = alloca [0 x ptr], align 8
  %96 = call ptr %94({ ptr, ptr, ptr, i32 } %88, ptr %95)
  %97 = call { ptr, ptr, ptr, i32 } %96({ ptr, ptr, ptr, i32 } %88, { ptr, ptr, ptr, i32 } %88, ptr %89)
  %98 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %97, ptr %98, align 8
  %99 = call ptr @llvm.invariant.start.p0(i64 16, ptr %98)
  %100 = alloca { ptr, ptr, ptr, i32 }, align 8
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 0
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %100, i32 0, i32 0
  %103 = load ptr, ptr %101, align 8
  store ptr %103, ptr %102, align 8
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 1
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %100, i32 0, i32 1
  %106 = load ptr, ptr %104, align 8
  store ptr %106, ptr %105, align 8
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 2
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %100, i32 0, i32 2
  %109 = load ptr, ptr %107, align 8
  store ptr %109, ptr %108, align 8
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 3
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %100, i32 0, i32 3
  %112 = load i32, ptr %110, align 4
  store i32 %112, ptr %111, align 4
  call void @set_offset(ptr %100, ptr @Iterator2)
  %113 = call ptr @llvm.invariant.start.p0(i64 24, ptr %100)
  %114 = alloca { ptr, ptr, ptr, i32 }, align 8
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %100, i32 0, i32 0
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 0
  %117 = load ptr, ptr %115, align 8
  store ptr %117, ptr %116, align 8
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %100, i32 0, i32 1
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 1
  %120 = load ptr, ptr %118, align 8
  store ptr %120, ptr %119, align 8
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %100, i32 0, i32 2
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 2
  %123 = load ptr, ptr %121, align 8
  store ptr %123, ptr %122, align 8
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %100, i32 0, i32 3
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 3
  %126 = load i32, ptr %124, align 4
  store i32 %126, ptr %125, align 4
  call void @set_offset(ptr %114, ptr @Iterator2)
  %127 = call ptr @llvm.invariant.start.p0(i64 24, ptr %114)
  %128 = alloca { ptr, ptr, ptr, i32 }, align 8
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 0
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %128, i32 0, i32 0
  %131 = load ptr, ptr %129, align 8
  store ptr %131, ptr %130, align 8
  %132 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 1
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %128, i32 0, i32 1
  %134 = load ptr, ptr %132, align 8
  store ptr %134, ptr %133, align 8
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 2
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %128, i32 0, i32 2
  %137 = load ptr, ptr %135, align 8
  store ptr %137, ptr %136, align 8
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 3
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %128, i32 0, i32 3
  %140 = load i32, ptr %138, align 4
  store i32 %140, ptr %139, align 4
  %141 = call ptr @llvm.invariant.start.p0(i64 16, ptr %128)
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %128, i32 0, i32 0
  store ptr %142, ptr %.reg2mem9, align 8
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %128, i32 0, i32 1
  store ptr %143, ptr %.reg2mem7, align 8
  %144 = getelementptr { ptr, ptr, ptr, i32 }, ptr %128, i32 0, i32 2
  store ptr %144, ptr %.reg2mem5, align 8
  %145 = getelementptr { ptr, ptr, ptr, i32 }, ptr %128, i32 0, i32 3
  store ptr %145, ptr %.reg2mem3, align 8
  %146 = alloca [0 x ptr], align 8
  %147 = alloca [0 x ptr], align 8
  %148 = alloca { ptr, i160 }, align 8
  %149 = alloca i64, align 8
  %150 = alloca i1, align 1
  %151 = alloca { ptr, i160 }, align 8
  %152 = alloca { ptr, i160 }, align 8
  %153 = alloca [1 x ptr], align 8
  %154 = alloca [1 x ptr], align 8
  %155 = alloca { ptr, ptr, ptr, i32 }, align 8
  %156 = alloca { ptr, ptr, ptr, i32 }, align 8
  %157 = alloca { ptr, i160 }, align 8
  %158 = alloca { ptr, ptr, ptr, i32 }, align 8
  br label %159

159:                                              ; preds = %._crit_edge1, %2
  %.reload10 = load ptr, ptr %.reg2mem9, align 8
  %160 = load ptr, ptr %.reload10, align 8
  %161 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %160, 0
  %.reload8 = load ptr, ptr %.reg2mem7, align 8
  %162 = load ptr, ptr %.reload8, align 8
  %163 = insertvalue { ptr, ptr, ptr, i32 } %161, ptr %162, 1
  %.reload6 = load ptr, ptr %.reg2mem5, align 8
  %164 = load ptr, ptr %.reload6, align 8
  %165 = insertvalue { ptr, ptr, ptr, i32 } %163, ptr %164, 2
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %166 = load i32, ptr %.reload4, align 4
  %167 = insertvalue { ptr, ptr, ptr, i32 } %165, i32 %166, 3
  %168 = call ptr @llvm.invariant.start.p0(i64 0, ptr %146)
  %169 = call ptr @llvm.invariant.start.p0(i64 24, ptr %160)
  %170 = getelementptr ptr, ptr %160, i32 %166
  %171 = getelementptr ptr, ptr %170, i32 1
  %172 = load ptr, ptr %171, align 8
  %173 = call ptr %172({ ptr, ptr, ptr, i32 } %167, ptr %147)
  %174 = call { ptr, i160 } %173({ ptr, ptr, ptr, i32 } %167, { ptr, ptr, ptr, i32 } %167, ptr %146)
  store { ptr, i160 } %174, ptr %148, align 8
  %175 = getelementptr { ptr, i160 }, ptr %148, i32 0, i32 0
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %149, align 4
  %176 = load ptr, ptr %175, align 8
  %177 = ptrtoint ptr %176 to i64
  %178 = load ptr, ptr %149, align 8
  %179 = ptrtoint ptr %178 to i64
  %180 = icmp ne i64 %177, %179
  store i1 %180, ptr %150, align 1
  %181 = load i1, ptr %150, align 1
  store i1 %181, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %182, label %._crit_edge

._crit_edge:                                      ; preds = %159
  br label %250

182:                                              ; preds = %159
  %183 = getelementptr { ptr, i160 }, ptr %148, i32 0, i32 0
  %184 = getelementptr { ptr, i160 }, ptr %151, i32 0, i32 0
  %185 = load ptr, ptr %183, align 8
  store ptr %185, ptr %184, align 8
  %186 = getelementptr { ptr, i160 }, ptr %148, i32 0, i32 1
  %187 = getelementptr { ptr, i160 }, ptr %151, i32 0, i32 1
  %188 = load i160, ptr %186, align 4
  store i160 %188, ptr %187, align 4
  call void @set_offset(ptr %151, ptr @Object)
  %189 = getelementptr { ptr, i160 }, ptr %151, i32 0, i32 0
  %190 = getelementptr { ptr, i160 }, ptr %152, i32 0, i32 0
  %191 = load ptr, ptr %189, align 8
  store ptr %191, ptr %190, align 8
  %192 = getelementptr { ptr, i160 }, ptr %151, i32 0, i32 1
  %193 = getelementptr { ptr, i160 }, ptr %152, i32 0, i32 1
  %194 = load i160, ptr %192, align 4
  store i160 %194, ptr %193, align 4
  call void @set_offset(ptr %152, ptr @Object)
  %195 = getelementptr { ptr, i160 }, ptr %152, i32 0, i32 0
  %196 = load ptr, ptr %195, align 8
  %197 = insertvalue { ptr, i160 } undef, ptr %196, 0
  %198 = getelementptr { ptr, i160 }, ptr %152, i32 0, i32 1
  %199 = load i160, ptr %198, align 4
  %200 = insertvalue { ptr, i160 } %197, i160 %199, 1
  %201 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 0
  %202 = load ptr, ptr %201, align 8
  %203 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %202, 0
  %204 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 1
  %205 = load ptr, ptr %204, align 8
  %206 = insertvalue { ptr, ptr, ptr, i32 } %203, ptr %205, 1
  %207 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 2
  %208 = load ptr, ptr %207, align 8
  %209 = insertvalue { ptr, ptr, ptr, i32 } %206, ptr %208, 2
  %210 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 3
  %211 = load i32, ptr %210, align 4
  %212 = insertvalue { ptr, ptr, ptr, i32 } %209, i32 %211, 3
  %213 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ([1 x ptr], ptr null, i32 1) to i64))
  %214 = call ptr @llvm.invariant.start.p0(i64 8, ptr %213)
  store ptr @Object, ptr %213, align 8
  %215 = call ptr @llvm.invariant.start.p0(i64 8, ptr %153)
  %216 = getelementptr [1 x ptr], ptr %153, i32 0, i32 0
  store ptr %213, ptr %216, align 8
  %217 = call ptr @llvm.invariant.start.p0(i64 552, ptr %202)
  %218 = getelementptr ptr, ptr %202, i32 %211
  %219 = getelementptr ptr, ptr %218, i32 9
  %220 = load ptr, ptr %219, align 8
  %221 = getelementptr [1 x ptr], ptr %154, i32 0, i32 0
  store ptr %196, ptr %221, align 8
  %222 = call ptr %220({ ptr, ptr, ptr, i32 } %212, ptr %154, { ptr, i160 } %200)
  %223 = call { ptr, ptr, ptr, i32 } %222({ ptr, ptr, ptr, i32 } %212, { ptr, ptr, ptr, i32 } %212, ptr %153, { ptr, i160 } %200)
  store { ptr, ptr, ptr, i32 } %223, ptr %155, align 8
  %224 = call ptr @llvm.invariant.start.p0(i64 16, ptr %155)
  %225 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 0
  %226 = getelementptr { ptr, ptr, ptr, i32 }, ptr %156, i32 0, i32 0
  %227 = load ptr, ptr %225, align 8
  store ptr %227, ptr %226, align 8
  %228 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 1
  %229 = getelementptr { ptr, ptr, ptr, i32 }, ptr %156, i32 0, i32 1
  %230 = load ptr, ptr %228, align 8
  store ptr %230, ptr %229, align 8
  %231 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 2
  %232 = getelementptr { ptr, ptr, ptr, i32 }, ptr %156, i32 0, i32 2
  %233 = load ptr, ptr %231, align 8
  store ptr %233, ptr %232, align 8
  %234 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 3
  %235 = getelementptr { ptr, ptr, ptr, i32 }, ptr %156, i32 0, i32 3
  %236 = load i32, ptr %234, align 4
  store i32 %236, ptr %235, align 4
  call void @set_offset(ptr %156, ptr @Array)
  %237 = call ptr @llvm.invariant.start.p0(i64 24, ptr %156)
  %238 = getelementptr { ptr, i160 }, ptr %151, i32 0, i32 0
  %239 = getelementptr { ptr, i160 }, ptr %157, i32 0, i32 0
  %240 = load ptr, ptr %238, align 8
  store ptr %240, ptr %239, align 8
  %241 = getelementptr { ptr, i160 }, ptr %151, i32 0, i32 1
  %242 = getelementptr { ptr, i160 }, ptr %157, i32 0, i32 1
  %243 = load i160, ptr %241, align 4
  store i160 %243, ptr %242, align 4
  call void @set_offset(ptr %157, ptr @Object)
  %244 = getelementptr { ptr, i160 }, ptr %157, i32 0, i32 0
  %245 = getelementptr { ptr, i160 }, ptr %148, i32 0, i32 0
  %246 = load ptr, ptr %244, align 8
  store ptr %246, ptr %245, align 8
  %247 = getelementptr { ptr, i160 }, ptr %157, i32 0, i32 1
  %248 = getelementptr { ptr, i160 }, ptr %148, i32 0, i32 1
  %249 = load i160, ptr %247, align 4
  store i160 %249, ptr %248, align 4
  br label %250

250:                                              ; preds = %._crit_edge, %182
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %251

._crit_edge1:                                     ; preds = %250
  br label %159

251:                                              ; preds = %250
  %252 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 0
  %253 = getelementptr { ptr, ptr, ptr, i32 }, ptr %158, i32 0, i32 0
  %254 = load ptr, ptr %252, align 8
  store ptr %254, ptr %253, align 8
  %255 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 1
  %256 = getelementptr { ptr, ptr, ptr, i32 }, ptr %158, i32 0, i32 1
  %257 = load ptr, ptr %255, align 8
  store ptr %257, ptr %256, align 8
  %258 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 2
  %259 = getelementptr { ptr, ptr, ptr, i32 }, ptr %158, i32 0, i32 2
  %260 = load ptr, ptr %258, align 8
  store ptr %260, ptr %259, align 8
  %261 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 3
  %262 = getelementptr { ptr, ptr, ptr, i32 }, ptr %158, i32 0, i32 3
  %263 = load i32, ptr %261, align 4
  store i32 %263, ptr %262, align 4
  call void @set_offset(ptr %158, ptr @Array)
  %264 = call ptr @llvm.invariant.start.p0(i64 24, ptr %158)
  %265 = getelementptr { ptr, ptr, ptr, i32 }, ptr %158, i32 0, i32 0
  %266 = load ptr, ptr %265, align 8
  %267 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %266, 0
  %268 = getelementptr { ptr, ptr, ptr, i32 }, ptr %158, i32 0, i32 1
  %269 = load ptr, ptr %268, align 8
  %270 = insertvalue { ptr, ptr, ptr, i32 } %267, ptr %269, 1
  %271 = getelementptr { ptr, ptr, ptr, i32 }, ptr %158, i32 0, i32 2
  %272 = load ptr, ptr %271, align 8
  %273 = insertvalue { ptr, ptr, ptr, i32 } %270, ptr %272, 2
  %274 = getelementptr { ptr, ptr, ptr, i32 }, ptr %158, i32 0, i32 3
  %275 = load i32, ptr %274, align 4
  %276 = insertvalue { ptr, ptr, ptr, i32 } %273, i32 %275, 3
  ret { ptr, ptr, ptr, i32 } %276
}

define void @Array_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Array)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64))
  %21 = alloca ptr, align 8
  store ptr %20, ptr %21, align 8
  %22 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %23 = extractvalue { ptr, ptr, ptr, i32 } %22, 0
  %24 = call ptr @llvm.invariant.start.p0(i64 552, ptr %23)
  %25 = extractvalue { ptr, ptr, ptr, i32 } %22, 3
  %26 = getelementptr ptr, ptr %23, i32 %25
  %27 = load ptr, ptr %26, align 8
  %28 = extractvalue { ptr, ptr, ptr, i32 } %22, 1
  %29 = call ptr %27(ptr %28)
  %30 = getelementptr { ptr }, ptr %21, i32 0, i32 0
  %31 = getelementptr { ptr }, ptr %29, i32 0, i32 0
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %34 = extractvalue { ptr, ptr, ptr, i32 } %33, 0
  %35 = call ptr @llvm.invariant.start.p0(i64 552, ptr %34)
  %36 = extractvalue { ptr, ptr, ptr, i32 } %33, 3
  %37 = getelementptr ptr, ptr %34, i32 %36
  %38 = getelementptr ptr, ptr %37, i32 1
  %39 = load ptr, ptr %38, align 8
  %40 = extractvalue { ptr, ptr, ptr, i32 } %33, 1
  %41 = call ptr %39(ptr %40)
  store i32 0, ptr %41, align 4
  %42 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %43 = extractvalue { ptr, ptr, ptr, i32 } %42, 0
  %44 = call ptr @llvm.invariant.start.p0(i64 552, ptr %43)
  %45 = extractvalue { ptr, ptr, ptr, i32 } %42, 3
  %46 = getelementptr ptr, ptr %43, i32 %45
  %47 = getelementptr ptr, ptr %46, i32 2
  %48 = load ptr, ptr %47, align 8
  %49 = extractvalue { ptr, ptr, ptr, i32 } %42, 1
  %50 = call ptr %48(ptr %49)
  store i32 1, ptr %50, align 4
  ret void
}

define void @Array_init_capacityPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Array)
  %20 = call ptr @llvm.invariant.start.p0(i64 24, ptr %7)
  %21 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %22 = extractvalue { ptr, ptr, ptr, i32 } %21, 0
  %23 = call ptr @llvm.invariant.start.p0(i64 552, ptr %22)
  %24 = extractvalue { ptr, ptr, ptr, i32 } %21, 3
  %25 = getelementptr ptr, ptr %22, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = extractvalue { ptr, ptr, ptr, i32 } %21, 1
  %29 = call ptr %27(ptr %28)
  store i32 %3, ptr %29, align 4
  %30 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %31 = extractvalue { ptr, ptr, ptr, i32 } %30, 0
  %32 = call ptr @llvm.invariant.start.p0(i64 552, ptr %31)
  %33 = extractvalue { ptr, ptr, ptr, i32 } %30, 3
  %34 = getelementptr ptr, ptr %31, i32 %33
  %35 = getelementptr ptr, ptr %34, i32 2
  %36 = load ptr, ptr %35, align 8
  %37 = extractvalue { ptr, ptr, ptr, i32 } %30, 1
  %38 = call ptr %36(ptr %37)
  %39 = load i32, ptr %38, align 4
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr null, i32 %39
  %41 = ptrtoint ptr %40 to i64
  %42 = call ptr @malloc(i64 %41)
  %43 = alloca ptr, align 8
  store ptr %42, ptr %43, align 8
  %44 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %45 = extractvalue { ptr, ptr, ptr, i32 } %44, 0
  %46 = call ptr @llvm.invariant.start.p0(i64 552, ptr %45)
  %47 = extractvalue { ptr, ptr, ptr, i32 } %44, 3
  %48 = getelementptr ptr, ptr %45, i32 %47
  %49 = load ptr, ptr %48, align 8
  %50 = extractvalue { ptr, ptr, ptr, i32 } %44, 1
  %51 = call ptr %49(ptr %50)
  %52 = getelementptr { ptr }, ptr %43, i32 0, i32 0
  %53 = getelementptr { ptr }, ptr %51, i32 0, i32 0
  %54 = load ptr, ptr %52, align 8
  store ptr %54, ptr %53, align 8
  %55 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %56 = extractvalue { ptr, ptr, ptr, i32 } %55, 0
  %57 = call ptr @llvm.invariant.start.p0(i64 552, ptr %56)
  %58 = extractvalue { ptr, ptr, ptr, i32 } %55, 3
  %59 = getelementptr ptr, ptr %56, i32 %58
  %60 = getelementptr ptr, ptr %59, i32 1
  %61 = load ptr, ptr %60, align 8
  %62 = extractvalue { ptr, ptr, ptr, i32 } %55, 1
  %63 = call ptr %61(ptr %62)
  store i32 0, ptr %63, align 4
  ret void
}

define i32 @Array_length_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Array)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 552, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 1
  %26 = load ptr, ptr %25, align 8
  %27 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %28 = call ptr %26(ptr %27)
  %29 = load i32, ptr %28, align 4
  ret i32 %29
}

define i32 @Array_capacity_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Array)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 552, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 2
  %26 = load ptr, ptr %25, align 8
  %27 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %28 = call ptr %26(ptr %27)
  %29 = load i32, ptr %28, align 4
  ret i32 %29
}

define { ptr, ptr, ptr, i32 } @Array_append_xT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Array)
  %20 = call ptr @llvm.invariant.start.p0(i64 24, ptr %7)
  %21 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %21, align 8
  %22 = alloca { ptr, i160 }, align 8
  %23 = getelementptr { ptr, i160 }, ptr %21, i32 0, i32 0
  %24 = getelementptr { ptr, i160 }, ptr %22, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, i160 }, ptr %21, i32 0, i32 1
  %27 = getelementptr { ptr, i160 }, ptr %22, i32 0, i32 1
  %28 = load i160, ptr %26, align 4
  store i160 %28, ptr %27, align 4
  call void @set_offset(ptr %22, ptr @Object)
  %29 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %30 = extractvalue { ptr, ptr, ptr, i32 } %29, 0
  %31 = call ptr @llvm.invariant.start.p0(i64 552, ptr %30)
  %32 = extractvalue { ptr, ptr, ptr, i32 } %29, 3
  %33 = getelementptr ptr, ptr %30, i32 %32
  %34 = getelementptr ptr, ptr %33, i32 1
  %35 = load ptr, ptr %34, align 8
  %36 = extractvalue { ptr, ptr, ptr, i32 } %29, 1
  %37 = call ptr %35(ptr %36)
  %38 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %39 = extractvalue { ptr, ptr, ptr, i32 } %38, 0
  %40 = call ptr @llvm.invariant.start.p0(i64 552, ptr %39)
  %41 = extractvalue { ptr, ptr, ptr, i32 } %38, 3
  %42 = getelementptr ptr, ptr %39, i32 %41
  %43 = getelementptr ptr, ptr %42, i32 2
  %44 = load ptr, ptr %43, align 8
  %45 = extractvalue { ptr, ptr, ptr, i32 } %38, 1
  %46 = call ptr %44(ptr %45)
  %47 = load i32, ptr %37, align 4
  %48 = load i32, ptr %46, align 4
  %49 = icmp sge i32 %47, %48
  %50 = alloca [0 x ptr], align 8
  %51 = alloca [0 x ptr], align 8
  %52 = alloca { ptr, i160 }, align 8
  %53 = alloca i32, align 4
  %54 = alloca i32, align 4
  %55 = alloca { ptr, ptr, ptr, i32 }, align 8
  br i1 %49, label %56, label %._crit_edge

._crit_edge:                                      ; preds = %4
  br label %84

56:                                               ; preds = %4
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %58 = load ptr, ptr %57, align 8
  %59 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %58, 0
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %61 = load ptr, ptr %60, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } %59, ptr %61, 1
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %64 = load ptr, ptr %63, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %62, ptr %64, 2
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %67 = load i32, ptr %66, align 4
  %68 = insertvalue { ptr, ptr, ptr, i32 } %65, i32 %67, 3
  %69 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %70 = extractvalue { ptr, ptr, ptr, i32 } %69, 0
  %71 = call ptr @llvm.invariant.start.p0(i64 552, ptr %70)
  %72 = extractvalue { ptr, ptr, ptr, i32 } %69, 3
  %73 = getelementptr ptr, ptr %70, i32 %72
  %74 = getelementptr ptr, ptr %73, i32 3
  %75 = load ptr, ptr %74, align 8
  %76 = extractvalue { ptr, ptr, ptr, i32 } %69, 1
  %77 = call ptr %75(ptr %76)
  %78 = call ptr @llvm.invariant.start.p0(i64 0, ptr %50)
  %79 = call ptr @llvm.invariant.start.p0(i64 552, ptr %58)
  %80 = getelementptr ptr, ptr %58, i32 %67
  %81 = getelementptr ptr, ptr %80, i32 10
  %82 = load ptr, ptr %81, align 8
  %83 = call ptr %82({ ptr, ptr, ptr, i32 } %68, ptr %51)
  call void %83({ ptr, ptr, ptr, i32 } %68, { ptr, ptr, ptr, i32 } %68, ptr %50)
  br label %84

84:                                               ; preds = %._crit_edge, %56
  %85 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %86 = extractvalue { ptr, ptr, ptr, i32 } %85, 0
  %87 = call ptr @llvm.invariant.start.p0(i64 552, ptr %86)
  %88 = extractvalue { ptr, ptr, ptr, i32 } %85, 3
  %89 = getelementptr ptr, ptr %86, i32 %88
  %90 = load ptr, ptr %89, align 8
  %91 = extractvalue { ptr, ptr, ptr, i32 } %85, 1
  %92 = call ptr %90(ptr %91)
  %93 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %94 = extractvalue { ptr, ptr, ptr, i32 } %93, 0
  %95 = call ptr @llvm.invariant.start.p0(i64 552, ptr %94)
  %96 = extractvalue { ptr, ptr, ptr, i32 } %93, 3
  %97 = getelementptr ptr, ptr %94, i32 %96
  %98 = getelementptr ptr, ptr %97, i32 1
  %99 = load ptr, ptr %98, align 8
  %100 = extractvalue { ptr, ptr, ptr, i32 } %93, 1
  %101 = call ptr %99(ptr %100)
  %102 = load ptr, ptr %92, align 8
  %103 = load i32, ptr %101, align 4
  %104 = getelementptr { ptr, i160 }, ptr null, i32 %103
  %105 = ptrtoint ptr %104 to i64
  %106 = getelementptr i8, ptr %102, i64 %105
  %107 = getelementptr { ptr, i160 }, ptr %22, i32 0, i32 0
  %108 = getelementptr { ptr, i160 }, ptr %52, i32 0, i32 0
  %109 = load ptr, ptr %107, align 8
  store ptr %109, ptr %108, align 8
  %110 = getelementptr { ptr, i160 }, ptr %22, i32 0, i32 1
  %111 = getelementptr { ptr, i160 }, ptr %52, i32 0, i32 1
  %112 = load i160, ptr %110, align 4
  store i160 %112, ptr %111, align 4
  call void @set_offset(ptr %52, ptr @Object)
  %113 = getelementptr { ptr, i160 }, ptr %52, i32 0, i32 0
  %114 = getelementptr { ptr, i160 }, ptr %106, i32 0, i32 0
  %115 = load ptr, ptr %113, align 8
  store ptr %115, ptr %114, align 8
  %116 = getelementptr { ptr, i160 }, ptr %52, i32 0, i32 1
  %117 = getelementptr { ptr, i160 }, ptr %106, i32 0, i32 1
  %118 = load i160, ptr %116, align 4
  store i160 %118, ptr %117, align 4
  %119 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %120 = extractvalue { ptr, ptr, ptr, i32 } %119, 0
  %121 = call ptr @llvm.invariant.start.p0(i64 552, ptr %120)
  %122 = extractvalue { ptr, ptr, ptr, i32 } %119, 3
  %123 = getelementptr ptr, ptr %120, i32 %122
  %124 = getelementptr ptr, ptr %123, i32 1
  %125 = load ptr, ptr %124, align 8
  %126 = extractvalue { ptr, ptr, ptr, i32 } %119, 1
  %127 = call ptr %125(ptr %126)
  store i32 1, ptr %53, align 4
  %128 = load i32, ptr %127, align 4
  %129 = load i32, ptr %53, align 4
  %130 = add i32 %128, %129
  store i32 %130, ptr %54, align 4
  %131 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %132 = extractvalue { ptr, ptr, ptr, i32 } %131, 0
  %133 = call ptr @llvm.invariant.start.p0(i64 552, ptr %132)
  %134 = extractvalue { ptr, ptr, ptr, i32 } %131, 3
  %135 = getelementptr ptr, ptr %132, i32 %134
  %136 = getelementptr ptr, ptr %135, i32 1
  %137 = load ptr, ptr %136, align 8
  %138 = extractvalue { ptr, ptr, ptr, i32 } %131, 1
  %139 = call ptr %137(ptr %138)
  %140 = load i32, ptr %54, align 4
  store i32 %140, ptr %139, align 4
  %141 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 0
  %143 = load ptr, ptr %141, align 8
  store ptr %143, ptr %142, align 8
  %144 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %145 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  %146 = load ptr, ptr %144, align 8
  store ptr %146, ptr %145, align 8
  %147 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %148 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 2
  %149 = load ptr, ptr %147, align 8
  store ptr %149, ptr %148, align 8
  %150 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %151 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  %152 = load i32, ptr %150, align 4
  store i32 %152, ptr %151, align 4
  call void @set_offset(ptr %55, ptr @Array)
  %153 = call ptr @llvm.invariant.start.p0(i64 24, ptr %55)
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 0
  %155 = load ptr, ptr %154, align 8
  %156 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %155, 0
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  %158 = load ptr, ptr %157, align 8
  %159 = insertvalue { ptr, ptr, ptr, i32 } %156, ptr %158, 1
  %160 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 2
  %161 = load ptr, ptr %160, align 8
  %162 = insertvalue { ptr, ptr, ptr, i32 } %159, ptr %161, 2
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  %164 = load i32, ptr %163, align 4
  %165 = insertvalue { ptr, ptr, ptr, i32 } %162, i32 %164, 3
  ret { ptr, ptr, ptr, i32 } %165
}

define void @Array_grow_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i1, align 1
  %.reg2mem6 = alloca i32, align 4
  %.reg2mem11 = alloca i32, align 4
  %.reg2mem13 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Array)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 552, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 2
  %26 = load ptr, ptr %25, align 8
  %27 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %28 = call ptr %26(ptr %27)
  %29 = load i32, ptr %28, align 4
  %30 = mul i32 %29, 2
  %31 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %32 = extractvalue { ptr, ptr, ptr, i32 } %31, 0
  %33 = call ptr @llvm.invariant.start.p0(i64 552, ptr %32)
  %34 = extractvalue { ptr, ptr, ptr, i32 } %31, 3
  %35 = getelementptr ptr, ptr %32, i32 %34
  %36 = getelementptr ptr, ptr %35, i32 2
  %37 = load ptr, ptr %36, align 8
  %38 = extractvalue { ptr, ptr, ptr, i32 } %31, 1
  %39 = call ptr %37(ptr %38)
  store i32 %30, ptr %39, align 4
  %40 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %41 = extractvalue { ptr, ptr, ptr, i32 } %40, 0
  %42 = call ptr @llvm.invariant.start.p0(i64 552, ptr %41)
  %43 = extractvalue { ptr, ptr, ptr, i32 } %40, 3
  %44 = getelementptr ptr, ptr %41, i32 %43
  %45 = load ptr, ptr %44, align 8
  %46 = extractvalue { ptr, ptr, ptr, i32 } %40, 1
  %47 = call ptr %45(ptr %46)
  %48 = alloca { ptr, ptr, ptr, i32 }, align 8
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 0
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 0
  %51 = load ptr, ptr %49, align 8
  store ptr %51, ptr %50, align 8
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 1
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 1
  %54 = load ptr, ptr %52, align 8
  store ptr %54, ptr %53, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 2
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 2
  %57 = load ptr, ptr %55, align 8
  store ptr %57, ptr %56, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 3
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 3
  %60 = load i32, ptr %58, align 4
  store i32 %60, ptr %59, align 4
  %61 = call ptr @llvm.invariant.start.p0(i64 16, ptr %48)
  %62 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %63 = extractvalue { ptr, ptr, ptr, i32 } %62, 0
  %64 = call ptr @llvm.invariant.start.p0(i64 552, ptr %63)
  %65 = extractvalue { ptr, ptr, ptr, i32 } %62, 3
  %66 = getelementptr ptr, ptr %63, i32 %65
  %67 = getelementptr ptr, ptr %66, i32 2
  %68 = load ptr, ptr %67, align 8
  %69 = extractvalue { ptr, ptr, ptr, i32 } %62, 1
  %70 = call ptr %68(ptr %69)
  %71 = load i32, ptr %70, align 4
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr null, i32 %71
  %73 = ptrtoint ptr %72 to i64
  %74 = call ptr @malloc(i64 %73)
  %75 = alloca ptr, align 8
  store ptr %74, ptr %75, align 8
  %76 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %77 = extractvalue { ptr, ptr, ptr, i32 } %76, 0
  %78 = call ptr @llvm.invariant.start.p0(i64 552, ptr %77)
  %79 = extractvalue { ptr, ptr, ptr, i32 } %76, 3
  %80 = getelementptr ptr, ptr %77, i32 %79
  %81 = load ptr, ptr %80, align 8
  %82 = extractvalue { ptr, ptr, ptr, i32 } %76, 1
  %83 = call ptr %81(ptr %82)
  %84 = getelementptr { ptr }, ptr %75, i32 0, i32 0
  %85 = getelementptr { ptr }, ptr %83, i32 0, i32 0
  %86 = load ptr, ptr %84, align 8
  store ptr %86, ptr %85, align 8
  %87 = alloca i1, align 1
  %88 = alloca { ptr, i160 }, align 8
  %89 = alloca i32, align 4
  %90 = alloca i32, align 4
  store i32 0, ptr %.reg2mem13, align 4
  br label %91

91:                                               ; preds = %._crit_edge, %3
  %.reload14 = load i32, ptr %.reg2mem13, align 4
  store i32 %.reload14, ptr %.reg2mem6, align 4
  %92 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %93 = extractvalue { ptr, ptr, ptr, i32 } %92, 0
  %94 = call ptr @llvm.invariant.start.p0(i64 552, ptr %93)
  %95 = extractvalue { ptr, ptr, ptr, i32 } %92, 3
  %96 = getelementptr ptr, ptr %93, i32 %95
  %97 = getelementptr ptr, ptr %96, i32 1
  %98 = load ptr, ptr %97, align 8
  %99 = extractvalue { ptr, ptr, ptr, i32 } %92, 1
  %100 = call ptr %98(ptr %99)
  %101 = load i32, ptr %100, align 4
  %.reload10 = load i32, ptr %.reg2mem6, align 4
  %102 = icmp slt i32 %.reload10, %101
  store i1 %102, ptr %87, align 1
  %103 = load i1, ptr %87, align 1
  store i1 %103, ptr %.reg2mem3, align 1
  %.reload5 = load i1, ptr %.reg2mem3, align 1
  br i1 %.reload5, label %104, label %136

104:                                              ; preds = %91
  %105 = load ptr, ptr %48, align 8
  %.reload9 = load i32, ptr %.reg2mem6, align 4
  %106 = getelementptr { ptr, i160 }, ptr null, i32 %.reload9
  %107 = ptrtoint ptr %106 to i64
  %108 = getelementptr i8, ptr %105, i64 %107
  %109 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %110 = extractvalue { ptr, ptr, ptr, i32 } %109, 0
  %111 = call ptr @llvm.invariant.start.p0(i64 552, ptr %110)
  %112 = extractvalue { ptr, ptr, ptr, i32 } %109, 3
  %113 = getelementptr ptr, ptr %110, i32 %112
  %114 = load ptr, ptr %113, align 8
  %115 = extractvalue { ptr, ptr, ptr, i32 } %109, 1
  %116 = call ptr %114(ptr %115)
  %117 = load ptr, ptr %116, align 8
  %.reload8 = load i32, ptr %.reg2mem6, align 4
  %118 = getelementptr { ptr, i160 }, ptr null, i32 %.reload8
  %119 = ptrtoint ptr %118 to i64
  %120 = getelementptr i8, ptr %117, i64 %119
  %121 = getelementptr { ptr, i160 }, ptr %108, i32 0, i32 0
  %122 = getelementptr { ptr, i160 }, ptr %88, i32 0, i32 0
  %123 = load ptr, ptr %121, align 8
  store ptr %123, ptr %122, align 8
  %124 = getelementptr { ptr, i160 }, ptr %108, i32 0, i32 1
  %125 = getelementptr { ptr, i160 }, ptr %88, i32 0, i32 1
  %126 = load i160, ptr %124, align 4
  store i160 %126, ptr %125, align 4
  call void @set_offset(ptr %88, ptr @Object)
  %127 = getelementptr { ptr, i160 }, ptr %88, i32 0, i32 0
  %128 = getelementptr { ptr, i160 }, ptr %120, i32 0, i32 0
  %129 = load ptr, ptr %127, align 8
  store ptr %129, ptr %128, align 8
  %130 = getelementptr { ptr, i160 }, ptr %88, i32 0, i32 1
  %131 = getelementptr { ptr, i160 }, ptr %120, i32 0, i32 1
  %132 = load i160, ptr %130, align 4
  store i160 %132, ptr %131, align 4
  store i32 1, ptr %89, align 4
  %133 = load i32, ptr %89, align 4
  %.reload7 = load i32, ptr %.reg2mem6, align 4
  %134 = add i32 %.reload7, %133
  store i32 %134, ptr %90, align 4
  %135 = load i32, ptr %90, align 4
  store i32 %135, ptr %.reg2mem1, align 4
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem11, align 4
  br label %137

136:                                              ; preds = %91
  store i32 poison, ptr %.reg2mem11, align 4
  br label %137

137:                                              ; preds = %136, %104
  %.reload12 = load i32, ptr %.reg2mem11, align 4
  store i32 %.reload12, ptr %.reg2mem, align 4
  br label %138

138:                                              ; preds = %137
  %.reload4 = load i1, ptr %.reg2mem3, align 1
  br i1 %.reload4, label %._crit_edge, label %139

._crit_edge:                                      ; preds = %138
  %.reload = load i32, ptr %.reg2mem, align 4
  store i32 %.reload, ptr %.reg2mem13, align 4
  br label %91

139:                                              ; preds = %138
  ret void
}

define { ptr, i160 } @Array__index_xPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Array)
  %20 = call ptr @llvm.invariant.start.p0(i64 24, ptr %7)
  %21 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %22 = extractvalue { ptr, ptr, ptr, i32 } %21, 0
  %23 = call ptr @llvm.invariant.start.p0(i64 552, ptr %22)
  %24 = extractvalue { ptr, ptr, ptr, i32 } %21, 3
  %25 = getelementptr ptr, ptr %22, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 1
  %27 = load ptr, ptr %26, align 8
  %28 = extractvalue { ptr, ptr, ptr, i32 } %21, 1
  %29 = call ptr %27(ptr %28)
  %30 = load i32, ptr %29, align 4
  %31 = sub i32 %30, 1
  %32 = icmp sgt i32 %3, %31
  %33 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %34 = extractvalue { ptr, ptr, ptr, i32 } %33, 0
  %35 = call ptr @llvm.invariant.start.p0(i64 552, ptr %34)
  %36 = extractvalue { ptr, ptr, ptr, i32 } %33, 3
  %37 = getelementptr ptr, ptr %34, i32 %36
  %38 = getelementptr ptr, ptr %37, i32 1
  %39 = load ptr, ptr %38, align 8
  %40 = extractvalue { ptr, ptr, ptr, i32 } %33, 1
  %41 = call ptr %39(ptr %40)
  %42 = load i32, ptr %41, align 4
  %43 = add i32 %42, %3
  %44 = icmp slt i32 %43, 0
  %45 = or i1 %32, %44
  %46 = alloca [1 x ptr], align 8
  %47 = alloca [1 x ptr], align 8
  %48 = alloca i32, align 4
  %49 = alloca i1, align 1
  %50 = alloca i32, align 4
  %51 = alloca { ptr, i160 }, align 8
  br i1 %45, label %52, label %._crit_edge

._crit_edge:                                      ; preds = %4
  br label %82

52:                                               ; preds = %4
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %54 = load ptr, ptr %53, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %54, 0
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %57, 1
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } %58, ptr %60, 2
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %63 = load i32, ptr %62, align 4
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, i32 %63, 3
  %65 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %66 = extractvalue { ptr, ptr, ptr, i32 } %65, 0
  %67 = call ptr @llvm.invariant.start.p0(i64 552, ptr %66)
  %68 = extractvalue { ptr, ptr, ptr, i32 } %65, 3
  %69 = getelementptr ptr, ptr %66, i32 %68
  %70 = getelementptr ptr, ptr %69, i32 3
  %71 = load ptr, ptr %70, align 8
  %72 = extractvalue { ptr, ptr, ptr, i32 } %65, 1
  %73 = call ptr %71(ptr %72)
  %74 = call ptr @llvm.invariant.start.p0(i64 8, ptr %46)
  %75 = getelementptr [1 x ptr], ptr %46, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %75, align 8
  %76 = call ptr @llvm.invariant.start.p0(i64 552, ptr %54)
  %77 = getelementptr ptr, ptr %54, i32 %63
  %78 = getelementptr ptr, ptr %77, i32 12
  %79 = load ptr, ptr %78, align 8
  %80 = getelementptr [1 x ptr], ptr %47, i32 0, i32 0
  store ptr @i32_typ, ptr %80, align 8
  %81 = call ptr %79({ ptr, ptr, ptr, i32 } %64, ptr %47, i32 %3)
  call void %81({ ptr, ptr, ptr, i32 } %64, { ptr, ptr, ptr, i32 } %64, ptr %46, i32 %3)
  br label %82

82:                                               ; preds = %._crit_edge, %52
  store i32 0, ptr %48, align 4
  %83 = load i32, ptr %48, align 4
  %84 = icmp slt i32 %3, %83
  store i1 %84, ptr %49, align 1
  %85 = load i1, ptr %49, align 1
  br i1 %85, label %86, label %99

86:                                               ; preds = %82
  %87 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %88 = extractvalue { ptr, ptr, ptr, i32 } %87, 0
  %89 = call ptr @llvm.invariant.start.p0(i64 552, ptr %88)
  %90 = extractvalue { ptr, ptr, ptr, i32 } %87, 3
  %91 = getelementptr ptr, ptr %88, i32 %90
  %92 = getelementptr ptr, ptr %91, i32 1
  %93 = load ptr, ptr %92, align 8
  %94 = extractvalue { ptr, ptr, ptr, i32 } %87, 1
  %95 = call ptr %93(ptr %94)
  %96 = load i32, ptr %95, align 4
  %97 = add i32 %96, %3
  store i32 %97, ptr %50, align 4
  %98 = load i32, ptr %50, align 4
  store i32 %98, ptr %.reg2mem1, align 4
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem3, align 4
  br label %100

99:                                               ; preds = %82
  store i32 %3, ptr %.reg2mem3, align 4
  br label %100

100:                                              ; preds = %99, %86
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  store i32 %.reload4, ptr %.reg2mem, align 4
  br label %101

101:                                              ; preds = %100
  %102 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %103 = extractvalue { ptr, ptr, ptr, i32 } %102, 0
  %104 = call ptr @llvm.invariant.start.p0(i64 552, ptr %103)
  %105 = extractvalue { ptr, ptr, ptr, i32 } %102, 3
  %106 = getelementptr ptr, ptr %103, i32 %105
  %107 = load ptr, ptr %106, align 8
  %108 = extractvalue { ptr, ptr, ptr, i32 } %102, 1
  %109 = call ptr %107(ptr %108)
  %110 = load ptr, ptr %109, align 8
  %.reload = load i32, ptr %.reg2mem, align 4
  %111 = getelementptr { ptr, i160 }, ptr null, i32 %.reload
  %112 = ptrtoint ptr %111 to i64
  %113 = getelementptr i8, ptr %110, i64 %112
  %114 = getelementptr { ptr, i160 }, ptr %113, i32 0, i32 0
  %115 = getelementptr { ptr, i160 }, ptr %51, i32 0, i32 0
  %116 = load ptr, ptr %114, align 8
  store ptr %116, ptr %115, align 8
  %117 = getelementptr { ptr, i160 }, ptr %113, i32 0, i32 1
  %118 = getelementptr { ptr, i160 }, ptr %51, i32 0, i32 1
  %119 = load i160, ptr %117, align 4
  store i160 %119, ptr %118, align 4
  call void @set_offset(ptr %51, ptr @Object)
  %120 = getelementptr { ptr, i160 }, ptr %51, i32 0, i32 0
  %121 = load ptr, ptr %120, align 8
  %122 = insertvalue { ptr, i160 } undef, ptr %121, 0
  %123 = getelementptr { ptr, i160 }, ptr %51, i32 0, i32 1
  %124 = load i160, ptr %123, align 4
  %125 = insertvalue { ptr, i160 } %122, i160 %124, 1
  ret { ptr, i160 } %125
}

define void @Array_throw_oob_xPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Array)
  %20 = call ptr @llvm.invariant.start.p0(i64 24, ptr %7)
  %21 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %22 = extractvalue { ptr, ptr, ptr, i32 } %21, 0
  %23 = call ptr @llvm.invariant.start.p0(i64 552, ptr %22)
  %24 = extractvalue { ptr, ptr, ptr, i32 } %21, 3
  %25 = getelementptr ptr, ptr %22, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 1
  %27 = load ptr, ptr %26, align 8
  %28 = extractvalue { ptr, ptr, ptr, i32 } %21, 1
  %29 = call ptr %27(ptr %28)
  %30 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr, i160 }, i32, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr null, i32 1) to i64))
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  store ptr @OutOfBounds, ptr %31, align 8
  store ptr %30, ptr %32, align 8
  store i32 7, ptr %33, align 4
  %34 = call ptr @llvm.invariant.start.p0(i64 16, ptr %31)
  %35 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %36 = extractvalue { ptr, ptr, ptr, i32 } %35, 0
  %37 = call ptr @llvm.invariant.start.p0(i64 552, ptr %36)
  %38 = extractvalue { ptr, ptr, ptr, i32 } %35, 3
  %39 = getelementptr ptr, ptr %36, i32 %38
  %40 = getelementptr ptr, ptr %39, i32 1
  %41 = load ptr, ptr %40, align 8
  %42 = extractvalue { ptr, ptr, ptr, i32 } %35, 1
  %43 = call ptr %41(ptr %42)
  %44 = load i32, ptr %43, align 4
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %46 = load ptr, ptr %45, align 8
  %47 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %46, 0
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } %47, ptr %49, 1
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %52 = load ptr, ptr %51, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } %50, ptr %52, 2
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  %55 = load i32, ptr %54, align 4
  %56 = insertvalue { ptr, ptr, ptr, i32 } %53, i32 %55, 3
  %57 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %58 = extractvalue { ptr, ptr, ptr, i32 } %57, 0
  %59 = call ptr @llvm.invariant.start.p0(i64 552, ptr %58)
  %60 = extractvalue { ptr, ptr, ptr, i32 } %57, 3
  %61 = getelementptr ptr, ptr %58, i32 %60
  %62 = getelementptr ptr, ptr %61, i32 3
  %63 = load ptr, ptr %62, align 8
  %64 = extractvalue { ptr, ptr, ptr, i32 } %57, 1
  %65 = call ptr %63(ptr %64)
  %66 = alloca [2 x ptr], align 8
  %67 = call ptr @llvm.invariant.start.p0(i64 16, ptr %66)
  %68 = getelementptr [2 x ptr], ptr %66, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %68, align 8
  %69 = getelementptr [2 x ptr], ptr %66, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %69, align 8
  %70 = call ptr @llvm.invariant.start.p0(i64 232, ptr %46)
  %71 = getelementptr ptr, ptr %46, i32 %55
  %72 = getelementptr ptr, ptr %71, i32 4
  %73 = load ptr, ptr %72, align 8
  %74 = alloca [2 x ptr], align 8
  %75 = getelementptr [2 x ptr], ptr %74, i32 0, i32 0
  store ptr @i32_typ, ptr %75, align 8
  %76 = getelementptr [2 x ptr], ptr %74, i32 0, i32 1
  store ptr @i32_typ, ptr %76, align 8
  %77 = call ptr %73({ ptr, ptr, ptr, i32 } %56, ptr %74, i32 %44, i32 %3)
  call void %77({ ptr, ptr, ptr, i32 } %56, { ptr, ptr, ptr, i32 } %56, ptr %66, i32 %44, i32 %3)
  %78 = call ptr @malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 11) to i64))
  %79 = alloca ptr, align 8
  store ptr %78, ptr %79, align 8
  %80 = alloca { ptr, ptr, ptr, i32 }, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %79, i32 0, i32 0
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %80, i32 0, i32 0
  %83 = load ptr, ptr %81, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %79, i32 0, i32 1
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %80, i32 0, i32 1
  %86 = load ptr, ptr %84, align 8
  store ptr %86, ptr %85, align 8
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %79, i32 0, i32 2
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %80, i32 0, i32 2
  %89 = load ptr, ptr %87, align 8
  store ptr %89, ptr %88, align 8
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %79, i32 0, i32 3
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %80, i32 0, i32 3
  %92 = load i32, ptr %90, align 4
  store i32 %92, ptr %91, align 4
  %93 = call ptr @llvm.invariant.start.p0(i64 16, ptr %80)
  %94 = load ptr, ptr %80, align 8
  %95 = getelementptr i8, ptr %94, i64 0
  %96 = load i80, ptr @yevvg_testsmini, align 4
  store i80 %96, ptr %95, align 4
  %97 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %98 = alloca { ptr, ptr, ptr, i32 }, align 8
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 1
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 3
  store ptr @String, ptr %98, align 8
  store ptr %97, ptr %99, align 8
  store i32 7, ptr %100, align 4
  %101 = call ptr @llvm.invariant.start.p0(i64 16, ptr %98)
  %102 = getelementptr { ptr }, ptr %80, i32 0, i32 0
  %103 = load ptr, ptr %102, align 8
  %104 = insertvalue { ptr } undef, ptr %103, 0
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 0
  %106 = load ptr, ptr %105, align 8
  %107 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %106, 0
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 1
  %109 = load ptr, ptr %108, align 8
  %110 = insertvalue { ptr, ptr, ptr, i32 } %107, ptr %109, 1
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 2
  %112 = load ptr, ptr %111, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } %110, ptr %112, 2
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 3
  %115 = load i32, ptr %114, align 4
  %116 = insertvalue { ptr, ptr, ptr, i32 } %113, i32 %115, 3
  %117 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %118 = extractvalue { ptr, ptr, ptr, i32 } %117, 0
  %119 = call ptr @llvm.invariant.start.p0(i64 552, ptr %118)
  %120 = extractvalue { ptr, ptr, ptr, i32 } %117, 3
  %121 = getelementptr ptr, ptr %118, i32 %120
  %122 = getelementptr ptr, ptr %121, i32 3
  %123 = load ptr, ptr %122, align 8
  %124 = extractvalue { ptr, ptr, ptr, i32 } %117, 1
  %125 = call ptr %123(ptr %124)
  %126 = alloca [3 x ptr], align 8
  %127 = call ptr @llvm.invariant.start.p0(i64 24, ptr %126)
  %128 = getelementptr [3 x ptr], ptr %126, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %128, align 8
  %129 = getelementptr [3 x ptr], ptr %126, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %129, align 8
  %130 = getelementptr [3 x ptr], ptr %126, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %130, align 8
  %131 = call ptr @llvm.invariant.start.p0(i64 280, ptr %106)
  %132 = getelementptr ptr, ptr %106, i32 %115
  %133 = getelementptr ptr, ptr %132, i32 4
  %134 = load ptr, ptr %133, align 8
  %135 = alloca [3 x ptr], align 8
  %136 = getelementptr [3 x ptr], ptr %135, i32 0, i32 0
  store ptr @buffer_typ, ptr %136, align 8
  %137 = getelementptr [3 x ptr], ptr %135, i32 0, i32 1
  store ptr @i32_typ, ptr %137, align 8
  %138 = getelementptr [3 x ptr], ptr %135, i32 0, i32 2
  store ptr @i32_typ, ptr %138, align 8
  %139 = call ptr %134({ ptr, ptr, ptr, i32 } %116, ptr %135, { ptr } %104, i32 10, i32 11)
  call void %139({ ptr, ptr, ptr, i32 } %116, { ptr, ptr, ptr, i32 } %116, ptr %126, { ptr } %104, i32 10, i32 11)
  %140 = alloca { ptr, ptr, ptr, i32 }, align 8
  %141 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 0
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %140, i32 0, i32 0
  %143 = load ptr, ptr %141, align 8
  store ptr %143, ptr %142, align 8
  %144 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 1
  %145 = getelementptr { ptr, ptr, ptr, i32 }, ptr %140, i32 0, i32 1
  %146 = load ptr, ptr %144, align 8
  store ptr %146, ptr %145, align 8
  %147 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 2
  %148 = getelementptr { ptr, ptr, ptr, i32 }, ptr %140, i32 0, i32 2
  %149 = load ptr, ptr %147, align 8
  store ptr %149, ptr %148, align 8
  %150 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 3
  %151 = getelementptr { ptr, ptr, ptr, i32 }, ptr %140, i32 0, i32 3
  %152 = load i32, ptr %150, align 4
  store i32 %152, ptr %151, align 4
  call void @set_offset(ptr %140, ptr @String)
  %153 = call ptr @llvm.invariant.start.p0(i64 24, ptr %140)
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %140, i32 0, i32 0
  %155 = load ptr, ptr %154, align 8
  %156 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %155, 0
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %140, i32 0, i32 1
  %158 = load ptr, ptr %157, align 8
  %159 = insertvalue { ptr, ptr, ptr, i32 } %156, ptr %158, 1
  %160 = getelementptr { ptr, ptr, ptr, i32 }, ptr %140, i32 0, i32 2
  %161 = load ptr, ptr %160, align 8
  %162 = insertvalue { ptr, ptr, ptr, i32 } %159, ptr %161, 2
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %140, i32 0, i32 3
  %164 = load i32, ptr %163, align 4
  %165 = insertvalue { ptr, ptr, ptr, i32 } %162, i32 %164, 3
  %166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %167 = load ptr, ptr %166, align 8
  %168 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %167, 0
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  %170 = load ptr, ptr %169, align 8
  %171 = insertvalue { ptr, ptr, ptr, i32 } %168, ptr %170, 1
  %172 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %173 = load ptr, ptr %172, align 8
  %174 = insertvalue { ptr, ptr, ptr, i32 } %171, ptr %173, 2
  %175 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  %176 = load i32, ptr %175, align 4
  %177 = insertvalue { ptr, ptr, ptr, i32 } %174, i32 %176, 3
  %178 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %179 = extractvalue { ptr, ptr, ptr, i32 } %178, 0
  %180 = call ptr @llvm.invariant.start.p0(i64 552, ptr %179)
  %181 = extractvalue { ptr, ptr, ptr, i32 } %178, 3
  %182 = getelementptr ptr, ptr %179, i32 %181
  %183 = getelementptr ptr, ptr %182, i32 3
  %184 = load ptr, ptr %183, align 8
  %185 = extractvalue { ptr, ptr, ptr, i32 } %178, 1
  %186 = call ptr %184(ptr %185)
  %187 = alloca [2 x ptr], align 8
  %188 = call ptr @llvm.invariant.start.p0(i64 16, ptr %187)
  %189 = getelementptr [2 x ptr], ptr %187, i32 0, i32 1
  store ptr @_parameterization_String, ptr %189, align 8
  %190 = getelementptr [2 x ptr], ptr %187, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %190, align 8
  %191 = call ptr @llvm.invariant.start.p0(i64 232, ptr %167)
  %192 = getelementptr ptr, ptr %167, i32 %176
  %193 = getelementptr ptr, ptr %192, i32 7
  %194 = load ptr, ptr %193, align 8
  %195 = alloca [2 x ptr], align 8
  %196 = getelementptr [2 x ptr], ptr %195, i32 0, i32 0
  store ptr @i32_typ, ptr %196, align 8
  %197 = getelementptr [2 x ptr], ptr %195, i32 0, i32 1
  store ptr %155, ptr %197, align 8
  %198 = call ptr %194({ ptr, ptr, ptr, i32 } %177, ptr %195, i32 774, { ptr, ptr, ptr, i32 } %165)
  call void %198({ ptr, ptr, ptr, i32 } %177, { ptr, ptr, ptr, i32 } %177, ptr %187, i32 774, { ptr, ptr, ptr, i32 } %165)
  %199 = getelementptr { ptr, i160 }, ptr %31, i32 0, i32 0
  %200 = load ptr, ptr %199, align 8
  %201 = insertvalue { ptr, i160 } undef, ptr %200, 0
  %202 = getelementptr { ptr, i160 }, ptr %31, i32 0, i32 1
  %203 = load i160, ptr %202, align 4
  %204 = insertvalue { ptr, i160 } %201, i160 %203, 1
  %205 = call ptr @get_current_coroutine()
  %206 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %205, i32 0, i32 4
  store { ptr, i160 } %204, ptr %206, align 8
  call void @coroutine_yield(ptr %205)
  ret void
}

define { ptr, i160 } @Array_unsafe_index_xPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Array)
  %20 = call ptr @llvm.invariant.start.p0(i64 24, ptr %7)
  %21 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %22 = extractvalue { ptr, ptr, ptr, i32 } %21, 0
  %23 = call ptr @llvm.invariant.start.p0(i64 552, ptr %22)
  %24 = extractvalue { ptr, ptr, ptr, i32 } %21, 3
  %25 = getelementptr ptr, ptr %22, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = extractvalue { ptr, ptr, ptr, i32 } %21, 1
  %28 = call ptr %26(ptr %27)
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr { ptr, i160 }, ptr null, i32 %3
  %31 = ptrtoint ptr %30 to i64
  %32 = getelementptr i8, ptr %29, i64 %31
  %33 = alloca { ptr, i160 }, align 8
  %34 = getelementptr { ptr, i160 }, ptr %32, i32 0, i32 0
  %35 = getelementptr { ptr, i160 }, ptr %33, i32 0, i32 0
  %36 = load ptr, ptr %34, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, i160 }, ptr %32, i32 0, i32 1
  %38 = getelementptr { ptr, i160 }, ptr %33, i32 0, i32 1
  %39 = load i160, ptr %37, align 4
  store i160 %39, ptr %38, align 4
  call void @set_offset(ptr %33, ptr @Object)
  %40 = getelementptr { ptr, i160 }, ptr %33, i32 0, i32 0
  %41 = load ptr, ptr %40, align 8
  %42 = insertvalue { ptr, i160 } undef, ptr %41, 0
  %43 = getelementptr { ptr, i160 }, ptr %33, i32 0, i32 1
  %44 = load i160, ptr %43, align 4
  %45 = insertvalue { ptr, i160 } %42, i160 %44, 1
  ret { ptr, i160 } %45
}

define { ptr, ptr, ptr, i32 } @Array_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Array)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 552, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 3
  %26 = load ptr, ptr %25, align 8
  %27 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %28 = call ptr %26(ptr %27)
  %29 = load ptr, ptr %28, align 8
  %30 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr, ptr, ptr, i32 }, i32, ptr }, ptr null, i32 1) to i64))
  %31 = getelementptr { { ptr, ptr, ptr, i32 }, i32, ptr }, ptr %30, i32 0, i32 2
  store ptr %29, ptr %31, align 8
  %32 = getelementptr { { ptr, ptr, ptr, i32 }, i32, ptr }, ptr %30, i32 0, i32 2
  %33 = call ptr @llvm.invariant.start.p0(i64 8, ptr %32)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  store ptr @ArrayIterator, ptr %34, align 8
  store ptr %30, ptr %35, align 8
  store i32 7, ptr %36, align 4
  %37 = call ptr @llvm.invariant.start.p0(i64 16, ptr %34)
  %38 = alloca { ptr, ptr, ptr, i32 }, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 0
  %41 = load ptr, ptr %39, align 8
  store ptr %41, ptr %40, align 8
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %44 = load ptr, ptr %42, align 8
  store ptr %44, ptr %43, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 2
  %47 = load ptr, ptr %45, align 8
  store ptr %47, ptr %46, align 8
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %50 = load i32, ptr %48, align 4
  store i32 %50, ptr %49, align 4
  call void @set_offset(ptr %38, ptr @Array)
  %51 = call ptr @llvm.invariant.start.p0(i64 24, ptr %38)
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 0
  %53 = load ptr, ptr %52, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %53, 0
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %56 = load ptr, ptr %55, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %56, 1
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 2
  %59 = load ptr, ptr %58, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } %57, ptr %59, 2
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %62 = load i32, ptr %61, align 4
  %63 = insertvalue { ptr, ptr, ptr, i32 } %60, i32 %62, 3
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %65 = load ptr, ptr %64, align 8
  %66 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %65, 0
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %68 = load ptr, ptr %67, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %66, ptr %68, 1
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %71 = load ptr, ptr %70, align 8
  %72 = insertvalue { ptr, ptr, ptr, i32 } %69, ptr %71, 2
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %74 = load i32, ptr %73, align 4
  %75 = insertvalue { ptr, ptr, ptr, i32 } %72, i32 %74, 3
  %76 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %77 = extractvalue { ptr, ptr, ptr, i32 } %76, 0
  %78 = call ptr @llvm.invariant.start.p0(i64 552, ptr %77)
  %79 = extractvalue { ptr, ptr, ptr, i32 } %76, 3
  %80 = getelementptr ptr, ptr %77, i32 %79
  %81 = getelementptr ptr, ptr %80, i32 3
  %82 = load ptr, ptr %81, align 8
  %83 = extractvalue { ptr, ptr, ptr, i32 } %76, 1
  %84 = call ptr %82(ptr %83)
  %85 = load ptr, ptr %84, align 8
  %86 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ([2 x ptr], ptr null, i32 1) to i64))
  %87 = call ptr @llvm.invariant.start.p0(i64 16, ptr %86)
  %88 = getelementptr [2 x ptr], ptr %86, i32 0, i32 1
  store ptr %85, ptr %88, align 8
  store ptr @Array, ptr %86, align 8
  %89 = alloca [1 x ptr], align 8
  %90 = call ptr @llvm.invariant.start.p0(i64 8, ptr %89)
  %91 = getelementptr [1 x ptr], ptr %89, i32 0, i32 0
  store ptr %86, ptr %91, align 8
  %92 = call ptr @llvm.invariant.start.p0(i64 80, ptr %65)
  %93 = getelementptr ptr, ptr %65, i32 %74
  %94 = getelementptr ptr, ptr %93, i32 3
  %95 = load ptr, ptr %94, align 8
  %96 = alloca [1 x ptr], align 8
  %97 = getelementptr [1 x ptr], ptr %96, i32 0, i32 0
  store ptr %53, ptr %97, align 8
  %98 = call ptr %95({ ptr, ptr, ptr, i32 } %75, ptr %96, { ptr, ptr, ptr, i32 } %63)
  call void %98({ ptr, ptr, ptr, i32 } %75, { ptr, ptr, ptr, i32 } %75, ptr %89, { ptr, ptr, ptr, i32 } %63)
  %99 = alloca { ptr, ptr, ptr, i32 }, align 8
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %99, i32 0, i32 0
  %102 = load ptr, ptr %100, align 8
  store ptr %102, ptr %101, align 8
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %99, i32 0, i32 1
  %105 = load ptr, ptr %103, align 8
  store ptr %105, ptr %104, align 8
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %99, i32 0, i32 2
  %108 = load ptr, ptr %106, align 8
  store ptr %108, ptr %107, align 8
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %99, i32 0, i32 3
  %111 = load i32, ptr %109, align 4
  store i32 %111, ptr %110, align 4
  call void @set_offset(ptr %99, ptr @Iterator2)
  %112 = call ptr @llvm.invariant.start.p0(i64 24, ptr %99)
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %99, i32 0, i32 0
  %114 = load ptr, ptr %113, align 8
  %115 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %114, 0
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %99, i32 0, i32 1
  %117 = load ptr, ptr %116, align 8
  %118 = insertvalue { ptr, ptr, ptr, i32 } %115, ptr %117, 1
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %99, i32 0, i32 2
  %120 = load ptr, ptr %119, align 8
  %121 = insertvalue { ptr, ptr, ptr, i32 } %118, ptr %120, 2
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %99, i32 0, i32 3
  %123 = load i32, ptr %122, align 4
  %124 = insertvalue { ptr, ptr, ptr, i32 } %121, i32 %123, 3
  ret { ptr, ptr, ptr, i32 } %124
}

define void @Iterable2_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem5 = alloca ptr, align 8
  %.reg2mem7 = alloca ptr, align 8
  %.reg2mem9 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Iterable2)
  %20 = call ptr @llvm.invariant.start.p0(i64 24, ptr %7)
  %21 = alloca ptr, align 8
  store { ptr } %3, ptr %21, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %23 = load ptr, ptr %22, align 8
  %24 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %23, 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %26 = load ptr, ptr %25, align 8
  %27 = insertvalue { ptr, ptr, ptr, i32 } %24, ptr %26, 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %29 = load ptr, ptr %28, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } %27, ptr %29, 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %32 = load i32, ptr %31, align 4
  %33 = insertvalue { ptr, ptr, ptr, i32 } %30, i32 %32, 3
  %34 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %35 = extractvalue { ptr, ptr, ptr, i32 } %34, 0
  %36 = call ptr @llvm.invariant.start.p0(i64 184, ptr %35)
  %37 = extractvalue { ptr, ptr, ptr, i32 } %34, 3
  %38 = getelementptr ptr, ptr %35, i32 %37
  %39 = load ptr, ptr %38, align 8
  %40 = extractvalue { ptr, ptr, ptr, i32 } %34, 1
  %41 = call ptr %39(ptr %40)
  %42 = alloca [0 x ptr], align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 0, ptr %42)
  %44 = call ptr @llvm.invariant.start.p0(i64 184, ptr %23)
  %45 = getelementptr ptr, ptr %23, i32 %32
  %46 = getelementptr ptr, ptr %45, i32 1
  %47 = load ptr, ptr %46, align 8
  %48 = alloca [0 x ptr], align 8
  %49 = call ptr %47({ ptr, ptr, ptr, i32 } %33, ptr %48)
  %50 = call { ptr, ptr, ptr, i32 } %49({ ptr, ptr, ptr, i32 } %33, { ptr, ptr, ptr, i32 } %33, ptr %42)
  %51 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %50, ptr %51, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 16, ptr %51)
  %53 = alloca { ptr, ptr, ptr, i32 }, align 8
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 0
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 0
  %56 = load ptr, ptr %54, align 8
  store ptr %56, ptr %55, align 8
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 1
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 1
  %59 = load ptr, ptr %57, align 8
  store ptr %59, ptr %58, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 2
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 2
  %62 = load ptr, ptr %60, align 8
  store ptr %62, ptr %61, align 8
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 3
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 3
  %65 = load i32, ptr %63, align 4
  store i32 %65, ptr %64, align 4
  call void @set_offset(ptr %53, ptr @Iterator2)
  %66 = call ptr @llvm.invariant.start.p0(i64 24, ptr %53)
  %67 = alloca { ptr, ptr, ptr, i32 }, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 0
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 0
  %70 = load ptr, ptr %68, align 8
  store ptr %70, ptr %69, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 1
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 1
  %73 = load ptr, ptr %71, align 8
  store ptr %73, ptr %72, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 2
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 2
  %76 = load ptr, ptr %74, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 3
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 3
  %79 = load i32, ptr %77, align 4
  store i32 %79, ptr %78, align 4
  call void @set_offset(ptr %67, ptr @Iterator2)
  %80 = call ptr @llvm.invariant.start.p0(i64 24, ptr %67)
  %81 = alloca { ptr, ptr, ptr, i32 }, align 8
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 0
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 0
  %84 = load ptr, ptr %82, align 8
  store ptr %84, ptr %83, align 8
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 1
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 1
  %87 = load ptr, ptr %85, align 8
  store ptr %87, ptr %86, align 8
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 2
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 2
  %90 = load ptr, ptr %88, align 8
  store ptr %90, ptr %89, align 8
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 3
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 3
  %93 = load i32, ptr %91, align 4
  store i32 %93, ptr %92, align 4
  %94 = call ptr @llvm.invariant.start.p0(i64 16, ptr %81)
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 0
  store ptr %95, ptr %.reg2mem9, align 8
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 1
  store ptr %96, ptr %.reg2mem7, align 8
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 2
  store ptr %97, ptr %.reg2mem5, align 8
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 3
  store ptr %98, ptr %.reg2mem3, align 8
  %99 = alloca [0 x ptr], align 8
  %100 = alloca [0 x ptr], align 8
  %101 = alloca { ptr, i160 }, align 8
  %102 = alloca i64, align 8
  %103 = alloca i1, align 1
  %104 = alloca { ptr, i160 }, align 8
  %105 = alloca { ptr, i160 }, align 8
  %106 = alloca { ptr, i160 }, align 8
  br label %107

107:                                              ; preds = %._crit_edge1, %4
  %.reload10 = load ptr, ptr %.reg2mem9, align 8
  %108 = load ptr, ptr %.reload10, align 8
  %109 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %108, 0
  %.reload8 = load ptr, ptr %.reg2mem7, align 8
  %110 = load ptr, ptr %.reload8, align 8
  %111 = insertvalue { ptr, ptr, ptr, i32 } %109, ptr %110, 1
  %.reload6 = load ptr, ptr %.reg2mem5, align 8
  %112 = load ptr, ptr %.reload6, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } %111, ptr %112, 2
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %114 = load i32, ptr %.reload4, align 4
  %115 = insertvalue { ptr, ptr, ptr, i32 } %113, i32 %114, 3
  %116 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %117 = extractvalue { ptr, ptr, ptr, i32 } %116, 0
  %118 = call ptr @llvm.invariant.start.p0(i64 184, ptr %117)
  %119 = extractvalue { ptr, ptr, ptr, i32 } %116, 3
  %120 = getelementptr ptr, ptr %117, i32 %119
  %121 = load ptr, ptr %120, align 8
  %122 = extractvalue { ptr, ptr, ptr, i32 } %116, 1
  %123 = call ptr %121(ptr %122)
  %124 = call ptr @llvm.invariant.start.p0(i64 0, ptr %99)
  %125 = call ptr @llvm.invariant.start.p0(i64 24, ptr %108)
  %126 = getelementptr ptr, ptr %108, i32 %114
  %127 = getelementptr ptr, ptr %126, i32 1
  %128 = load ptr, ptr %127, align 8
  %129 = call ptr %128({ ptr, ptr, ptr, i32 } %115, ptr %100)
  %130 = call { ptr, i160 } %129({ ptr, ptr, ptr, i32 } %115, { ptr, ptr, ptr, i32 } %115, ptr %99)
  store { ptr, i160 } %130, ptr %101, align 8
  %131 = getelementptr { ptr, i160 }, ptr %101, i32 0, i32 0
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %102, align 4
  %132 = load ptr, ptr %131, align 8
  %133 = ptrtoint ptr %132 to i64
  %134 = load ptr, ptr %102, align 8
  %135 = ptrtoint ptr %134 to i64
  %136 = icmp ne i64 %133, %135
  store i1 %136, ptr %103, align 1
  %137 = load i1, ptr %103, align 1
  store i1 %137, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %138, label %._crit_edge

._crit_edge:                                      ; preds = %107
  br label %170

138:                                              ; preds = %107
  %139 = getelementptr { ptr, i160 }, ptr %101, i32 0, i32 0
  %140 = getelementptr { ptr, i160 }, ptr %104, i32 0, i32 0
  %141 = load ptr, ptr %139, align 8
  store ptr %141, ptr %140, align 8
  %142 = getelementptr { ptr, i160 }, ptr %101, i32 0, i32 1
  %143 = getelementptr { ptr, i160 }, ptr %104, i32 0, i32 1
  %144 = load i160, ptr %142, align 4
  store i160 %144, ptr %143, align 4
  call void @set_offset(ptr %104, ptr @Object)
  %145 = getelementptr { ptr, i160 }, ptr %104, i32 0, i32 0
  %146 = getelementptr { ptr, i160 }, ptr %105, i32 0, i32 0
  %147 = load ptr, ptr %145, align 8
  store ptr %147, ptr %146, align 8
  %148 = getelementptr { ptr, i160 }, ptr %104, i32 0, i32 1
  %149 = getelementptr { ptr, i160 }, ptr %105, i32 0, i32 1
  %150 = load i160, ptr %148, align 4
  store i160 %150, ptr %149, align 4
  call void @set_offset(ptr %105, ptr @Object)
  %151 = getelementptr { ptr, i160 }, ptr %105, i32 0, i32 0
  %152 = load ptr, ptr %151, align 8
  %153 = insertvalue { ptr, i160 } undef, ptr %152, 0
  %154 = getelementptr { ptr, i160 }, ptr %105, i32 0, i32 1
  %155 = load i160, ptr %154, align 4
  %156 = insertvalue { ptr, i160 } %153, i160 %155, 1
  %157 = load ptr, ptr %21, align 8
  call void %157({ ptr, i160 } %156)
  %158 = getelementptr { ptr, i160 }, ptr %104, i32 0, i32 0
  %159 = getelementptr { ptr, i160 }, ptr %106, i32 0, i32 0
  %160 = load ptr, ptr %158, align 8
  store ptr %160, ptr %159, align 8
  %161 = getelementptr { ptr, i160 }, ptr %104, i32 0, i32 1
  %162 = getelementptr { ptr, i160 }, ptr %106, i32 0, i32 1
  %163 = load i160, ptr %161, align 4
  store i160 %163, ptr %162, align 4
  call void @set_offset(ptr %106, ptr @Object)
  %164 = getelementptr { ptr, i160 }, ptr %106, i32 0, i32 0
  %165 = getelementptr { ptr, i160 }, ptr %101, i32 0, i32 0
  %166 = load ptr, ptr %164, align 8
  store ptr %166, ptr %165, align 8
  %167 = getelementptr { ptr, i160 }, ptr %106, i32 0, i32 1
  %168 = getelementptr { ptr, i160 }, ptr %101, i32 0, i32 1
  %169 = load i160, ptr %167, align 4
  store i160 %169, ptr %168, align 4
  br label %170

170:                                              ; preds = %._crit_edge, %138
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %171

._crit_edge1:                                     ; preds = %170
  br label %107

171:                                              ; preds = %170
  ret void
}

define { ptr, i160 } @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3, { ptr } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem5 = alloca ptr, align 8
  %.reg2mem7 = alloca ptr, align 8
  %.reg2mem9 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @Iterable2)
  %21 = call ptr @llvm.invariant.start.p0(i64 24, ptr %8)
  %22 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %22, align 8
  %23 = alloca { ptr, i160 }, align 8
  %24 = getelementptr { ptr, i160 }, ptr %22, i32 0, i32 0
  %25 = getelementptr { ptr, i160 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, i160 }, ptr %22, i32 0, i32 1
  %28 = getelementptr { ptr, i160 }, ptr %23, i32 0, i32 1
  %29 = load i160, ptr %27, align 4
  store i160 %29, ptr %28, align 4
  call void @set_offset(ptr %23, ptr @Object)
  %30 = alloca ptr, align 8
  store { ptr } %4, ptr %30, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %32 = load ptr, ptr %31, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %32, 0
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %35 = load ptr, ptr %34, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %35, 1
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %38 = load ptr, ptr %37, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %36, ptr %38, 2
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %41 = load i32, ptr %40, align 4
  %42 = insertvalue { ptr, ptr, ptr, i32 } %39, i32 %41, 3
  %43 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %44 = extractvalue { ptr, ptr, ptr, i32 } %43, 0
  %45 = call ptr @llvm.invariant.start.p0(i64 184, ptr %44)
  %46 = extractvalue { ptr, ptr, ptr, i32 } %43, 3
  %47 = getelementptr ptr, ptr %44, i32 %46
  %48 = load ptr, ptr %47, align 8
  %49 = extractvalue { ptr, ptr, ptr, i32 } %43, 1
  %50 = call ptr %48(ptr %49)
  %51 = alloca [0 x ptr], align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 0, ptr %51)
  %53 = call ptr @llvm.invariant.start.p0(i64 184, ptr %32)
  %54 = getelementptr ptr, ptr %32, i32 %41
  %55 = getelementptr ptr, ptr %54, i32 1
  %56 = load ptr, ptr %55, align 8
  %57 = alloca [0 x ptr], align 8
  %58 = call ptr %56({ ptr, ptr, ptr, i32 } %42, ptr %57)
  %59 = call { ptr, ptr, ptr, i32 } %58({ ptr, ptr, ptr, i32 } %42, { ptr, ptr, ptr, i32 } %42, ptr %51)
  %60 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %59, ptr %60, align 8
  %61 = call ptr @llvm.invariant.start.p0(i64 16, ptr %60)
  %62 = alloca { ptr, ptr, ptr, i32 }, align 8
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 0
  %65 = load ptr, ptr %63, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 1
  %68 = load ptr, ptr %66, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 2
  %71 = load ptr, ptr %69, align 8
  store ptr %71, ptr %70, align 8
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 3
  %74 = load i32, ptr %72, align 4
  store i32 %74, ptr %73, align 4
  call void @set_offset(ptr %62, ptr @Iterator2)
  %75 = call ptr @llvm.invariant.start.p0(i64 24, ptr %62)
  %76 = alloca { ptr, ptr, ptr, i32 }, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 0
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 0
  %79 = load ptr, ptr %77, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 1
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 1
  %82 = load ptr, ptr %80, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 2
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 2
  %85 = load ptr, ptr %83, align 8
  store ptr %85, ptr %84, align 8
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 3
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 3
  %88 = load i32, ptr %86, align 4
  store i32 %88, ptr %87, align 4
  call void @set_offset(ptr %76, ptr @Iterator2)
  %89 = call ptr @llvm.invariant.start.p0(i64 24, ptr %76)
  %90 = alloca { ptr, ptr, ptr, i32 }, align 8
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 0
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 0
  %93 = load ptr, ptr %91, align 8
  store ptr %93, ptr %92, align 8
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 1
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 1
  %96 = load ptr, ptr %94, align 8
  store ptr %96, ptr %95, align 8
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 2
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 2
  %99 = load ptr, ptr %97, align 8
  store ptr %99, ptr %98, align 8
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 3
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 3
  %102 = load i32, ptr %100, align 4
  store i32 %102, ptr %101, align 4
  %103 = call ptr @llvm.invariant.start.p0(i64 16, ptr %90)
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 0
  store ptr %104, ptr %.reg2mem9, align 8
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 1
  store ptr %105, ptr %.reg2mem7, align 8
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 2
  store ptr %106, ptr %.reg2mem5, align 8
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 3
  store ptr %107, ptr %.reg2mem3, align 8
  %108 = alloca [0 x ptr], align 8
  %109 = alloca [0 x ptr], align 8
  %110 = alloca { ptr, i160 }, align 8
  %111 = alloca i64, align 8
  %112 = alloca i1, align 1
  %113 = alloca { ptr, i160 }, align 8
  %114 = alloca { ptr, i160 }, align 8
  %115 = alloca { ptr, i160 }, align 8
  %116 = alloca { ptr, i160 }, align 8
  %117 = alloca { ptr, i160 }, align 8
  %118 = alloca { ptr, i160 }, align 8
  %119 = alloca { ptr, i160 }, align 8
  br label %120

120:                                              ; preds = %._crit_edge1, %5
  %.reload10 = load ptr, ptr %.reg2mem9, align 8
  %121 = load ptr, ptr %.reload10, align 8
  %122 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %121, 0
  %.reload8 = load ptr, ptr %.reg2mem7, align 8
  %123 = load ptr, ptr %.reload8, align 8
  %124 = insertvalue { ptr, ptr, ptr, i32 } %122, ptr %123, 1
  %.reload6 = load ptr, ptr %.reg2mem5, align 8
  %125 = load ptr, ptr %.reload6, align 8
  %126 = insertvalue { ptr, ptr, ptr, i32 } %124, ptr %125, 2
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %127 = load i32, ptr %.reload4, align 4
  %128 = insertvalue { ptr, ptr, ptr, i32 } %126, i32 %127, 3
  %129 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %130 = extractvalue { ptr, ptr, ptr, i32 } %129, 0
  %131 = call ptr @llvm.invariant.start.p0(i64 184, ptr %130)
  %132 = extractvalue { ptr, ptr, ptr, i32 } %129, 3
  %133 = getelementptr ptr, ptr %130, i32 %132
  %134 = load ptr, ptr %133, align 8
  %135 = extractvalue { ptr, ptr, ptr, i32 } %129, 1
  %136 = call ptr %134(ptr %135)
  %137 = call ptr @llvm.invariant.start.p0(i64 0, ptr %108)
  %138 = call ptr @llvm.invariant.start.p0(i64 24, ptr %121)
  %139 = getelementptr ptr, ptr %121, i32 %127
  %140 = getelementptr ptr, ptr %139, i32 1
  %141 = load ptr, ptr %140, align 8
  %142 = call ptr %141({ ptr, ptr, ptr, i32 } %128, ptr %109)
  %143 = call { ptr, i160 } %142({ ptr, ptr, ptr, i32 } %128, { ptr, ptr, ptr, i32 } %128, ptr %108)
  store { ptr, i160 } %143, ptr %110, align 8
  %144 = getelementptr { ptr, i160 }, ptr %110, i32 0, i32 0
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %111, align 4
  %145 = load ptr, ptr %144, align 8
  %146 = ptrtoint ptr %145 to i64
  %147 = load ptr, ptr %111, align 8
  %148 = ptrtoint ptr %147 to i64
  %149 = icmp ne i64 %146, %148
  store i1 %149, ptr %112, align 1
  %150 = load i1, ptr %112, align 1
  store i1 %150, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %151, label %._crit_edge

._crit_edge:                                      ; preds = %120
  br label %208

151:                                              ; preds = %120
  %152 = getelementptr { ptr, i160 }, ptr %110, i32 0, i32 0
  %153 = getelementptr { ptr, i160 }, ptr %113, i32 0, i32 0
  %154 = load ptr, ptr %152, align 8
  store ptr %154, ptr %153, align 8
  %155 = getelementptr { ptr, i160 }, ptr %110, i32 0, i32 1
  %156 = getelementptr { ptr, i160 }, ptr %113, i32 0, i32 1
  %157 = load i160, ptr %155, align 4
  store i160 %157, ptr %156, align 4
  call void @set_offset(ptr %113, ptr @Object)
  %158 = getelementptr { ptr, i160 }, ptr %23, i32 0, i32 0
  %159 = getelementptr { ptr, i160 }, ptr %114, i32 0, i32 0
  %160 = load ptr, ptr %158, align 8
  store ptr %160, ptr %159, align 8
  %161 = getelementptr { ptr, i160 }, ptr %23, i32 0, i32 1
  %162 = getelementptr { ptr, i160 }, ptr %114, i32 0, i32 1
  %163 = load i160, ptr %161, align 4
  store i160 %163, ptr %162, align 4
  call void @set_offset(ptr %114, ptr @Object)
  %164 = getelementptr { ptr, i160 }, ptr %114, i32 0, i32 0
  %165 = load ptr, ptr %164, align 8
  %166 = insertvalue { ptr, i160 } undef, ptr %165, 0
  %167 = getelementptr { ptr, i160 }, ptr %114, i32 0, i32 1
  %168 = load i160, ptr %167, align 4
  %169 = insertvalue { ptr, i160 } %166, i160 %168, 1
  %170 = getelementptr { ptr, i160 }, ptr %113, i32 0, i32 0
  %171 = getelementptr { ptr, i160 }, ptr %115, i32 0, i32 0
  %172 = load ptr, ptr %170, align 8
  store ptr %172, ptr %171, align 8
  %173 = getelementptr { ptr, i160 }, ptr %113, i32 0, i32 1
  %174 = getelementptr { ptr, i160 }, ptr %115, i32 0, i32 1
  %175 = load i160, ptr %173, align 4
  store i160 %175, ptr %174, align 4
  call void @set_offset(ptr %115, ptr @Object)
  %176 = getelementptr { ptr, i160 }, ptr %115, i32 0, i32 0
  %177 = load ptr, ptr %176, align 8
  %178 = insertvalue { ptr, i160 } undef, ptr %177, 0
  %179 = getelementptr { ptr, i160 }, ptr %115, i32 0, i32 1
  %180 = load i160, ptr %179, align 4
  %181 = insertvalue { ptr, i160 } %178, i160 %180, 1
  %182 = load ptr, ptr %30, align 8
  %183 = call { ptr, i160 } %182({ ptr, i160 } %169, { ptr, i160 } %181)
  store { ptr, i160 } %183, ptr %116, align 8
  %184 = getelementptr { ptr, i160 }, ptr %116, i32 0, i32 0
  %185 = getelementptr { ptr, i160 }, ptr %117, i32 0, i32 0
  %186 = load ptr, ptr %184, align 8
  store ptr %186, ptr %185, align 8
  %187 = getelementptr { ptr, i160 }, ptr %116, i32 0, i32 1
  %188 = getelementptr { ptr, i160 }, ptr %117, i32 0, i32 1
  %189 = load i160, ptr %187, align 4
  store i160 %189, ptr %188, align 4
  call void @set_offset(ptr %117, ptr @Object)
  %190 = getelementptr { ptr, i160 }, ptr %117, i32 0, i32 0
  %191 = getelementptr { ptr, i160 }, ptr %23, i32 0, i32 0
  %192 = load ptr, ptr %190, align 8
  store ptr %192, ptr %191, align 8
  %193 = getelementptr { ptr, i160 }, ptr %117, i32 0, i32 1
  %194 = getelementptr { ptr, i160 }, ptr %23, i32 0, i32 1
  %195 = load i160, ptr %193, align 4
  store i160 %195, ptr %194, align 4
  %196 = getelementptr { ptr, i160 }, ptr %113, i32 0, i32 0
  %197 = getelementptr { ptr, i160 }, ptr %118, i32 0, i32 0
  %198 = load ptr, ptr %196, align 8
  store ptr %198, ptr %197, align 8
  %199 = getelementptr { ptr, i160 }, ptr %113, i32 0, i32 1
  %200 = getelementptr { ptr, i160 }, ptr %118, i32 0, i32 1
  %201 = load i160, ptr %199, align 4
  store i160 %201, ptr %200, align 4
  call void @set_offset(ptr %118, ptr @Object)
  %202 = getelementptr { ptr, i160 }, ptr %118, i32 0, i32 0
  %203 = getelementptr { ptr, i160 }, ptr %110, i32 0, i32 0
  %204 = load ptr, ptr %202, align 8
  store ptr %204, ptr %203, align 8
  %205 = getelementptr { ptr, i160 }, ptr %118, i32 0, i32 1
  %206 = getelementptr { ptr, i160 }, ptr %110, i32 0, i32 1
  %207 = load i160, ptr %205, align 4
  store i160 %207, ptr %206, align 4
  br label %208

208:                                              ; preds = %._crit_edge, %151
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %209

._crit_edge1:                                     ; preds = %208
  br label %120

209:                                              ; preds = %208
  %210 = getelementptr { ptr, i160 }, ptr %23, i32 0, i32 0
  %211 = getelementptr { ptr, i160 }, ptr %119, i32 0, i32 0
  %212 = load ptr, ptr %210, align 8
  store ptr %212, ptr %211, align 8
  %213 = getelementptr { ptr, i160 }, ptr %23, i32 0, i32 1
  %214 = getelementptr { ptr, i160 }, ptr %119, i32 0, i32 1
  %215 = load i160, ptr %213, align 4
  store i160 %215, ptr %214, align 4
  call void @set_offset(ptr %119, ptr @Object)
  %216 = getelementptr { ptr, i160 }, ptr %119, i32 0, i32 0
  %217 = load ptr, ptr %216, align 8
  %218 = insertvalue { ptr, i160 } undef, ptr %217, 0
  %219 = getelementptr { ptr, i160 }, ptr %119, i32 0, i32 1
  %220 = load i160, ptr %219, align 4
  %221 = insertvalue { ptr, i160 } %218, i160 %220, 1
  ret { ptr, i160 } %221
}

define i1 @Iterable2_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i1, align 1
  %.reg2mem6 = alloca ptr, align 8
  %.reg2mem8 = alloca ptr, align 8
  %.reg2mem10 = alloca ptr, align 8
  %.reg2mem12 = alloca ptr, align 8
  %.reg2mem14 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Iterable2)
  %20 = call ptr @llvm.invariant.start.p0(i64 24, ptr %7)
  %21 = alloca ptr, align 8
  store { ptr } %3, ptr %21, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %23 = load ptr, ptr %22, align 8
  %24 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %23, 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %26 = load ptr, ptr %25, align 8
  %27 = insertvalue { ptr, ptr, ptr, i32 } %24, ptr %26, 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %29 = load ptr, ptr %28, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } %27, ptr %29, 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %32 = load i32, ptr %31, align 4
  %33 = insertvalue { ptr, ptr, ptr, i32 } %30, i32 %32, 3
  %34 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %35 = extractvalue { ptr, ptr, ptr, i32 } %34, 0
  %36 = call ptr @llvm.invariant.start.p0(i64 184, ptr %35)
  %37 = extractvalue { ptr, ptr, ptr, i32 } %34, 3
  %38 = getelementptr ptr, ptr %35, i32 %37
  %39 = load ptr, ptr %38, align 8
  %40 = extractvalue { ptr, ptr, ptr, i32 } %34, 1
  %41 = call ptr %39(ptr %40)
  %42 = alloca [0 x ptr], align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 0, ptr %42)
  %44 = call ptr @llvm.invariant.start.p0(i64 184, ptr %23)
  %45 = getelementptr ptr, ptr %23, i32 %32
  %46 = getelementptr ptr, ptr %45, i32 1
  %47 = load ptr, ptr %46, align 8
  %48 = alloca [0 x ptr], align 8
  %49 = call ptr %47({ ptr, ptr, ptr, i32 } %33, ptr %48)
  %50 = call { ptr, ptr, ptr, i32 } %49({ ptr, ptr, ptr, i32 } %33, { ptr, ptr, ptr, i32 } %33, ptr %42)
  %51 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %50, ptr %51, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 16, ptr %51)
  %53 = alloca { ptr, ptr, ptr, i32 }, align 8
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 0
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 0
  %56 = load ptr, ptr %54, align 8
  store ptr %56, ptr %55, align 8
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 1
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 1
  %59 = load ptr, ptr %57, align 8
  store ptr %59, ptr %58, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 2
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 2
  %62 = load ptr, ptr %60, align 8
  store ptr %62, ptr %61, align 8
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 3
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 3
  %65 = load i32, ptr %63, align 4
  store i32 %65, ptr %64, align 4
  call void @set_offset(ptr %53, ptr @Iterator2)
  %66 = call ptr @llvm.invariant.start.p0(i64 24, ptr %53)
  %67 = alloca { ptr, ptr, ptr, i32 }, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 0
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 0
  %70 = load ptr, ptr %68, align 8
  store ptr %70, ptr %69, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 1
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 1
  %73 = load ptr, ptr %71, align 8
  store ptr %73, ptr %72, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 2
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 2
  %76 = load ptr, ptr %74, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 3
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 3
  %79 = load i32, ptr %77, align 4
  store i32 %79, ptr %78, align 4
  call void @set_offset(ptr %67, ptr @Iterator2)
  %80 = call ptr @llvm.invariant.start.p0(i64 24, ptr %67)
  %81 = alloca { ptr, ptr, ptr, i32 }, align 8
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 0
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 0
  %84 = load ptr, ptr %82, align 8
  store ptr %84, ptr %83, align 8
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 1
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 1
  %87 = load ptr, ptr %85, align 8
  store ptr %87, ptr %86, align 8
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 2
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 2
  %90 = load ptr, ptr %88, align 8
  store ptr %90, ptr %89, align 8
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 3
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 3
  %93 = load i32, ptr %91, align 4
  store i32 %93, ptr %92, align 4
  %94 = call ptr @llvm.invariant.start.p0(i64 16, ptr %81)
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 0
  store ptr %95, ptr %.reg2mem12, align 8
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 1
  store ptr %96, ptr %.reg2mem10, align 8
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 2
  store ptr %97, ptr %.reg2mem8, align 8
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 3
  store ptr %98, ptr %.reg2mem6, align 8
  %99 = alloca [0 x ptr], align 8
  %100 = alloca [0 x ptr], align 8
  %101 = alloca { ptr, i160 }, align 8
  %102 = alloca i64, align 8
  %103 = alloca i1, align 1
  %104 = alloca { ptr, i160 }, align 8
  %105 = alloca { ptr, i160 }, align 8
  %106 = alloca i1, align 1
  %107 = alloca i1, align 1
  br label %108

108:                                              ; preds = %167, %4
  %.reload13 = load ptr, ptr %.reg2mem12, align 8
  %109 = load ptr, ptr %.reload13, align 8
  %110 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %109, 0
  %.reload11 = load ptr, ptr %.reg2mem10, align 8
  %111 = load ptr, ptr %.reload11, align 8
  %112 = insertvalue { ptr, ptr, ptr, i32 } %110, ptr %111, 1
  %.reload9 = load ptr, ptr %.reg2mem8, align 8
  %113 = load ptr, ptr %.reload9, align 8
  %114 = insertvalue { ptr, ptr, ptr, i32 } %112, ptr %113, 2
  %.reload7 = load ptr, ptr %.reg2mem6, align 8
  %115 = load i32, ptr %.reload7, align 4
  %116 = insertvalue { ptr, ptr, ptr, i32 } %114, i32 %115, 3
  %117 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %118 = extractvalue { ptr, ptr, ptr, i32 } %117, 0
  %119 = call ptr @llvm.invariant.start.p0(i64 184, ptr %118)
  %120 = extractvalue { ptr, ptr, ptr, i32 } %117, 3
  %121 = getelementptr ptr, ptr %118, i32 %120
  %122 = load ptr, ptr %121, align 8
  %123 = extractvalue { ptr, ptr, ptr, i32 } %117, 1
  %124 = call ptr %122(ptr %123)
  %125 = call ptr @llvm.invariant.start.p0(i64 0, ptr %99)
  %126 = call ptr @llvm.invariant.start.p0(i64 24, ptr %109)
  %127 = getelementptr ptr, ptr %109, i32 %115
  %128 = getelementptr ptr, ptr %127, i32 1
  %129 = load ptr, ptr %128, align 8
  %130 = call ptr %129({ ptr, ptr, ptr, i32 } %116, ptr %100)
  %131 = call { ptr, i160 } %130({ ptr, ptr, ptr, i32 } %116, { ptr, ptr, ptr, i32 } %116, ptr %99)
  store { ptr, i160 } %131, ptr %101, align 8
  %132 = getelementptr { ptr, i160 }, ptr %101, i32 0, i32 0
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %102, align 4
  %133 = load ptr, ptr %132, align 8
  %134 = ptrtoint ptr %133 to i64
  %135 = load ptr, ptr %102, align 8
  %136 = ptrtoint ptr %135 to i64
  %137 = icmp ne i64 %134, %136
  store i1 %137, ptr %103, align 1
  %138 = load i1, ptr %103, align 1
  %139 = xor i1 %138, true
  store i1 %139, ptr %.reg2mem3, align 1
  br i1 %138, label %140, label %163

140:                                              ; preds = %108
  %141 = getelementptr { ptr, i160 }, ptr %101, i32 0, i32 0
  %142 = getelementptr { ptr, i160 }, ptr %104, i32 0, i32 0
  %143 = load ptr, ptr %141, align 8
  store ptr %143, ptr %142, align 8
  %144 = getelementptr { ptr, i160 }, ptr %101, i32 0, i32 1
  %145 = getelementptr { ptr, i160 }, ptr %104, i32 0, i32 1
  %146 = load i160, ptr %144, align 4
  store i160 %146, ptr %145, align 4
  call void @set_offset(ptr %104, ptr @Object)
  %147 = getelementptr { ptr, i160 }, ptr %104, i32 0, i32 0
  %148 = getelementptr { ptr, i160 }, ptr %105, i32 0, i32 0
  %149 = load ptr, ptr %147, align 8
  store ptr %149, ptr %148, align 8
  %150 = getelementptr { ptr, i160 }, ptr %104, i32 0, i32 1
  %151 = getelementptr { ptr, i160 }, ptr %105, i32 0, i32 1
  %152 = load i160, ptr %150, align 4
  store i160 %152, ptr %151, align 4
  call void @set_offset(ptr %105, ptr @Object)
  %153 = getelementptr { ptr, i160 }, ptr %105, i32 0, i32 0
  %154 = load ptr, ptr %153, align 8
  %155 = insertvalue { ptr, i160 } undef, ptr %154, 0
  %156 = getelementptr { ptr, i160 }, ptr %105, i32 0, i32 1
  %157 = load i160, ptr %156, align 4
  %158 = insertvalue { ptr, i160 } %155, i160 %157, 1
  %159 = load ptr, ptr %21, align 8
  %160 = call i1 %159({ ptr, i160 } %158)
  store i1 %160, ptr %106, align 1
  %161 = load i1, ptr %106, align 1
  %162 = zext i1 %161 to i32
  store i32 %162, ptr %.reg2mem1, align 4
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem14, align 4
  br label %164

163:                                              ; preds = %108
  store i32 0, ptr %.reg2mem14, align 4
  br label %164

164:                                              ; preds = %163, %140
  %.reload15 = load i32, ptr %.reg2mem14, align 4
  store i32 %.reload15, ptr %.reg2mem, align 4
  br label %165

165:                                              ; preds = %164
  %.reload = load i32, ptr %.reg2mem, align 4
  %166 = trunc i32 %.reload to i1
  %.reload5 = load i1, ptr %.reg2mem3, align 1
  br i1 %166, label %167, label %168

167:                                              ; preds = %165
  br label %108

168:                                              ; preds = %165
  %.reload4 = load i1, ptr %.reg2mem3, align 1
  store i1 %.reload4, ptr %107, align 1
  %169 = load i1, ptr %107, align 1
  ret i1 %169
}

define i1 @Iterable2_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i1, align 1
  %.reg2mem7 = alloca ptr, align 8
  %.reg2mem9 = alloca ptr, align 8
  %.reg2mem11 = alloca ptr, align 8
  %.reg2mem13 = alloca ptr, align 8
  %.reg2mem15 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Iterable2)
  %20 = call ptr @llvm.invariant.start.p0(i64 24, ptr %7)
  %21 = alloca ptr, align 8
  store { ptr } %3, ptr %21, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %23 = load ptr, ptr %22, align 8
  %24 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %23, 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %26 = load ptr, ptr %25, align 8
  %27 = insertvalue { ptr, ptr, ptr, i32 } %24, ptr %26, 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %29 = load ptr, ptr %28, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } %27, ptr %29, 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %32 = load i32, ptr %31, align 4
  %33 = insertvalue { ptr, ptr, ptr, i32 } %30, i32 %32, 3
  %34 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %35 = extractvalue { ptr, ptr, ptr, i32 } %34, 0
  %36 = call ptr @llvm.invariant.start.p0(i64 184, ptr %35)
  %37 = extractvalue { ptr, ptr, ptr, i32 } %34, 3
  %38 = getelementptr ptr, ptr %35, i32 %37
  %39 = load ptr, ptr %38, align 8
  %40 = extractvalue { ptr, ptr, ptr, i32 } %34, 1
  %41 = call ptr %39(ptr %40)
  %42 = alloca [0 x ptr], align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 0, ptr %42)
  %44 = call ptr @llvm.invariant.start.p0(i64 184, ptr %23)
  %45 = getelementptr ptr, ptr %23, i32 %32
  %46 = getelementptr ptr, ptr %45, i32 1
  %47 = load ptr, ptr %46, align 8
  %48 = alloca [0 x ptr], align 8
  %49 = call ptr %47({ ptr, ptr, ptr, i32 } %33, ptr %48)
  %50 = call { ptr, ptr, ptr, i32 } %49({ ptr, ptr, ptr, i32 } %33, { ptr, ptr, ptr, i32 } %33, ptr %42)
  %51 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %50, ptr %51, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 16, ptr %51)
  %53 = alloca { ptr, ptr, ptr, i32 }, align 8
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 0
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 0
  %56 = load ptr, ptr %54, align 8
  store ptr %56, ptr %55, align 8
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 1
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 1
  %59 = load ptr, ptr %57, align 8
  store ptr %59, ptr %58, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 2
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 2
  %62 = load ptr, ptr %60, align 8
  store ptr %62, ptr %61, align 8
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 3
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 3
  %65 = load i32, ptr %63, align 4
  store i32 %65, ptr %64, align 4
  call void @set_offset(ptr %53, ptr @Iterator2)
  %66 = call ptr @llvm.invariant.start.p0(i64 24, ptr %53)
  %67 = alloca { ptr, ptr, ptr, i32 }, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 0
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 0
  %70 = load ptr, ptr %68, align 8
  store ptr %70, ptr %69, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 1
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 1
  %73 = load ptr, ptr %71, align 8
  store ptr %73, ptr %72, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 2
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 2
  %76 = load ptr, ptr %74, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 3
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 3
  %79 = load i32, ptr %77, align 4
  store i32 %79, ptr %78, align 4
  call void @set_offset(ptr %67, ptr @Iterator2)
  %80 = call ptr @llvm.invariant.start.p0(i64 24, ptr %67)
  %81 = alloca { ptr, ptr, ptr, i32 }, align 8
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 0
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 0
  %84 = load ptr, ptr %82, align 8
  store ptr %84, ptr %83, align 8
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 1
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 1
  %87 = load ptr, ptr %85, align 8
  store ptr %87, ptr %86, align 8
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 2
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 2
  %90 = load ptr, ptr %88, align 8
  store ptr %90, ptr %89, align 8
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 3
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 3
  %93 = load i32, ptr %91, align 4
  store i32 %93, ptr %92, align 4
  %94 = call ptr @llvm.invariant.start.p0(i64 16, ptr %81)
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 0
  store ptr %95, ptr %.reg2mem13, align 8
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 1
  store ptr %96, ptr %.reg2mem11, align 8
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 2
  store ptr %97, ptr %.reg2mem9, align 8
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 3
  store ptr %98, ptr %.reg2mem7, align 8
  %99 = alloca [0 x ptr], align 8
  %100 = alloca [0 x ptr], align 8
  %101 = alloca { ptr, i160 }, align 8
  %102 = alloca i64, align 8
  %103 = alloca i1, align 1
  %104 = alloca { ptr, i160 }, align 8
  %105 = alloca { ptr, i160 }, align 8
  %106 = alloca i1, align 1
  %107 = alloca { ptr, i160 }, align 8
  %108 = alloca i1, align 1
  br label %109

109:                                              ; preds = %183, %4
  %.reload14 = load ptr, ptr %.reg2mem13, align 8
  %110 = load ptr, ptr %.reload14, align 8
  %111 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %110, 0
  %.reload12 = load ptr, ptr %.reg2mem11, align 8
  %112 = load ptr, ptr %.reload12, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } %111, ptr %112, 1
  %.reload10 = load ptr, ptr %.reg2mem9, align 8
  %114 = load ptr, ptr %.reload10, align 8
  %115 = insertvalue { ptr, ptr, ptr, i32 } %113, ptr %114, 2
  %.reload8 = load ptr, ptr %.reg2mem7, align 8
  %116 = load i32, ptr %.reload8, align 4
  %117 = insertvalue { ptr, ptr, ptr, i32 } %115, i32 %116, 3
  %118 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %119 = extractvalue { ptr, ptr, ptr, i32 } %118, 0
  %120 = call ptr @llvm.invariant.start.p0(i64 184, ptr %119)
  %121 = extractvalue { ptr, ptr, ptr, i32 } %118, 3
  %122 = getelementptr ptr, ptr %119, i32 %121
  %123 = load ptr, ptr %122, align 8
  %124 = extractvalue { ptr, ptr, ptr, i32 } %118, 1
  %125 = call ptr %123(ptr %124)
  %126 = call ptr @llvm.invariant.start.p0(i64 0, ptr %99)
  %127 = call ptr @llvm.invariant.start.p0(i64 24, ptr %110)
  %128 = getelementptr ptr, ptr %110, i32 %116
  %129 = getelementptr ptr, ptr %128, i32 1
  %130 = load ptr, ptr %129, align 8
  %131 = call ptr %130({ ptr, ptr, ptr, i32 } %117, ptr %100)
  %132 = call { ptr, i160 } %131({ ptr, ptr, ptr, i32 } %117, { ptr, ptr, ptr, i32 } %117, ptr %99)
  store { ptr, i160 } %132, ptr %101, align 8
  %133 = getelementptr { ptr, i160 }, ptr %101, i32 0, i32 0
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %102, align 4
  %134 = load ptr, ptr %133, align 8
  %135 = ptrtoint ptr %134 to i64
  %136 = load ptr, ptr %102, align 8
  %137 = ptrtoint ptr %136 to i64
  %138 = icmp ne i64 %135, %137
  store i1 %138, ptr %103, align 1
  %139 = load i1, ptr %103, align 1
  store i1 %139, ptr %.reg2mem3, align 1
  %.reload6 = load i1, ptr %.reg2mem3, align 1
  br i1 %.reload6, label %140, label %179

140:                                              ; preds = %109
  %141 = getelementptr { ptr, i160 }, ptr %101, i32 0, i32 0
  %142 = getelementptr { ptr, i160 }, ptr %104, i32 0, i32 0
  %143 = load ptr, ptr %141, align 8
  store ptr %143, ptr %142, align 8
  %144 = getelementptr { ptr, i160 }, ptr %101, i32 0, i32 1
  %145 = getelementptr { ptr, i160 }, ptr %104, i32 0, i32 1
  %146 = load i160, ptr %144, align 4
  store i160 %146, ptr %145, align 4
  call void @set_offset(ptr %104, ptr @Object)
  %147 = getelementptr { ptr, i160 }, ptr %104, i32 0, i32 0
  %148 = getelementptr { ptr, i160 }, ptr %105, i32 0, i32 0
  %149 = load ptr, ptr %147, align 8
  store ptr %149, ptr %148, align 8
  %150 = getelementptr { ptr, i160 }, ptr %104, i32 0, i32 1
  %151 = getelementptr { ptr, i160 }, ptr %105, i32 0, i32 1
  %152 = load i160, ptr %150, align 4
  store i160 %152, ptr %151, align 4
  call void @set_offset(ptr %105, ptr @Object)
  %153 = getelementptr { ptr, i160 }, ptr %105, i32 0, i32 0
  %154 = load ptr, ptr %153, align 8
  %155 = insertvalue { ptr, i160 } undef, ptr %154, 0
  %156 = getelementptr { ptr, i160 }, ptr %105, i32 0, i32 1
  %157 = load i160, ptr %156, align 4
  %158 = insertvalue { ptr, i160 } %155, i160 %157, 1
  %159 = load ptr, ptr %21, align 8
  %160 = call i1 %159({ ptr, i160 } %158)
  store i1 %160, ptr %106, align 1
  %161 = load i1, ptr %106, align 1
  %162 = xor i1 %161, true
  %163 = zext i1 %162 to i32
  store i32 %163, ptr %.reg2mem1, align 4
  br i1 %161, label %164, label %165

164:                                              ; preds = %140
  br label %178

165:                                              ; preds = %140
  %166 = getelementptr { ptr, i160 }, ptr %104, i32 0, i32 0
  %167 = getelementptr { ptr, i160 }, ptr %107, i32 0, i32 0
  %168 = load ptr, ptr %166, align 8
  store ptr %168, ptr %167, align 8
  %169 = getelementptr { ptr, i160 }, ptr %104, i32 0, i32 1
  %170 = getelementptr { ptr, i160 }, ptr %107, i32 0, i32 1
  %171 = load i160, ptr %169, align 4
  store i160 %171, ptr %170, align 4
  call void @set_offset(ptr %107, ptr @Object)
  %172 = getelementptr { ptr, i160 }, ptr %107, i32 0, i32 0
  %173 = getelementptr { ptr, i160 }, ptr %101, i32 0, i32 0
  %174 = load ptr, ptr %172, align 8
  store ptr %174, ptr %173, align 8
  %175 = getelementptr { ptr, i160 }, ptr %107, i32 0, i32 1
  %176 = getelementptr { ptr, i160 }, ptr %101, i32 0, i32 1
  %177 = load i160, ptr %175, align 4
  store i160 %177, ptr %176, align 4
  br label %178

178:                                              ; preds = %165, %164
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem15, align 4
  br label %180

179:                                              ; preds = %109
  store i32 0, ptr %.reg2mem15, align 4
  br label %180

180:                                              ; preds = %179, %178
  %.reload16 = load i32, ptr %.reg2mem15, align 4
  store i32 %.reload16, ptr %.reg2mem, align 4
  br label %181

181:                                              ; preds = %180
  %.reload = load i32, ptr %.reg2mem, align 4
  %182 = trunc i32 %.reload to i1
  %.reload5 = load i1, ptr %.reg2mem3, align 1
  br i1 %182, label %183, label %184

183:                                              ; preds = %181
  br label %109

184:                                              ; preds = %181
  %.reload4 = load i1, ptr %.reg2mem3, align 1
  store i1 %.reload4, ptr %108, align 1
  %185 = load i1, ptr %108, align 1
  ret i1 %185
}

define { ptr, ptr, ptr, i32 } @Iterable2_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Iterable2)
  %20 = call ptr @llvm.invariant.start.p0(i64 24, ptr %7)
  %21 = alloca ptr, align 8
  store { ptr } %3, ptr %21, align 8
  %22 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %23 = extractvalue { ptr, ptr, ptr, i32 } %22, 0
  %24 = call ptr @llvm.invariant.start.p0(i64 184, ptr %23)
  %25 = extractvalue { ptr, ptr, ptr, i32 } %22, 3
  %26 = getelementptr ptr, ptr %23, i32 %25
  %27 = load ptr, ptr %26, align 8
  %28 = extractvalue { ptr, ptr, ptr, i32 } %22, 1
  %29 = call ptr %27(ptr %28)
  %30 = load ptr, ptr %29, align 8
  %31 = getelementptr [1 x ptr], ptr %2, i32 0, i32 0
  %32 = load ptr, ptr %31, align 8
  %33 = getelementptr [1 x ptr], ptr %32, i32 0, i32 1
  %34 = load ptr, ptr %33, align 8
  %35 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr }, ptr, ptr }, ptr null, i32 1) to i64))
  %36 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr }, ptr, ptr }, ptr %35, i32 0, i32 2
  store ptr %30, ptr %36, align 8
  %37 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr }, ptr, ptr }, ptr %35, i32 0, i32 3
  store ptr %34, ptr %37, align 8
  %38 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr }, ptr, ptr }, ptr %35, i32 0, i32 2
  %39 = call ptr @llvm.invariant.start.p0(i64 16, ptr %38)
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 1
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 3
  store ptr @MapIterable2, ptr %40, align 8
  store ptr %35, ptr %41, align 8
  store i32 7, ptr %42, align 4
  %43 = call ptr @llvm.invariant.start.p0(i64 16, ptr %40)
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 0
  %47 = load ptr, ptr %45, align 8
  store ptr %47, ptr %46, align 8
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 1
  %50 = load ptr, ptr %48, align 8
  store ptr %50, ptr %49, align 8
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 2
  %53 = load ptr, ptr %51, align 8
  store ptr %53, ptr %52, align 8
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 3
  %56 = load i32, ptr %54, align 4
  store i32 %56, ptr %55, align 4
  call void @set_offset(ptr %44, ptr @Iterable2)
  %57 = call ptr @llvm.invariant.start.p0(i64 24, ptr %44)
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 0
  %59 = load ptr, ptr %58, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %59, 0
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 1
  %62 = load ptr, ptr %61, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr %62, 1
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 2
  %65 = load ptr, ptr %64, align 8
  %66 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %65, 2
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 3
  %68 = load i32, ptr %67, align 4
  %69 = insertvalue { ptr, ptr, ptr, i32 } %66, i32 %68, 3
  %70 = load ptr, ptr %21, align 8
  %71 = insertvalue { ptr } undef, ptr %70, 0
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 0
  %73 = load ptr, ptr %72, align 8
  %74 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %73, 0
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 1
  %76 = load ptr, ptr %75, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } %74, ptr %76, 1
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 2
  %79 = load ptr, ptr %78, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } %77, ptr %79, 2
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 3
  %82 = load i32, ptr %81, align 4
  %83 = insertvalue { ptr, ptr, ptr, i32 } %80, i32 %82, 3
  %84 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %85 = extractvalue { ptr, ptr, ptr, i32 } %84, 0
  %86 = call ptr @llvm.invariant.start.p0(i64 184, ptr %85)
  %87 = extractvalue { ptr, ptr, ptr, i32 } %84, 3
  %88 = getelementptr ptr, ptr %85, i32 %87
  %89 = load ptr, ptr %88, align 8
  %90 = extractvalue { ptr, ptr, ptr, i32 } %84, 1
  %91 = call ptr %89(ptr %90)
  %92 = load ptr, ptr %91, align 8
  %93 = getelementptr [1 x ptr], ptr %2, i32 0, i32 0
  %94 = load ptr, ptr %93, align 8
  %95 = getelementptr [1 x ptr], ptr %94, i32 0, i32 1
  %96 = load ptr, ptr %95, align 8
  %97 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ([2 x ptr], ptr null, i32 1) to i64))
  %98 = call ptr @llvm.invariant.start.p0(i64 16, ptr %97)
  %99 = getelementptr [2 x ptr], ptr %97, i32 0, i32 1
  store ptr %92, ptr %99, align 8
  store ptr @Iterable2, ptr %97, align 8
  %100 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %101 = call ptr @llvm.invariant.start.p0(i64 24, ptr %100)
  %102 = getelementptr [3 x ptr], ptr %100, i32 0, i32 2
  store ptr %92, ptr %102, align 8
  %103 = getelementptr [3 x ptr], ptr %100, i32 0, i32 1
  store ptr %96, ptr %103, align 8
  store ptr @function_typ, ptr %100, align 8
  %104 = alloca [2 x ptr], align 8
  %105 = call ptr @llvm.invariant.start.p0(i64 16, ptr %104)
  %106 = getelementptr [2 x ptr], ptr %104, i32 0, i32 1
  store ptr %100, ptr %106, align 8
  %107 = getelementptr [2 x ptr], ptr %104, i32 0, i32 0
  store ptr %97, ptr %107, align 8
  %108 = call ptr @llvm.invariant.start.p0(i64 408, ptr %73)
  %109 = getelementptr ptr, ptr %73, i32 %82
  %110 = getelementptr ptr, ptr %109, i32 4
  %111 = load ptr, ptr %110, align 8
  %112 = alloca [2 x ptr], align 8
  %113 = getelementptr [2 x ptr], ptr %112, i32 0, i32 0
  store ptr %59, ptr %113, align 8
  %114 = getelementptr [2 x ptr], ptr %112, i32 0, i32 1
  store ptr @function_typ, ptr %114, align 8
  %115 = call ptr %111({ ptr, ptr, ptr, i32 } %83, ptr %112, { ptr, ptr, ptr, i32 } %69, { ptr } %71)
  call void %115({ ptr, ptr, ptr, i32 } %83, { ptr, ptr, ptr, i32 } %83, ptr %104, { ptr, ptr, ptr, i32 } %69, { ptr } %71)
  %116 = alloca { ptr, ptr, ptr, i32 }, align 8
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 0
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 0
  %119 = load ptr, ptr %117, align 8
  store ptr %119, ptr %118, align 8
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 1
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 1
  %122 = load ptr, ptr %120, align 8
  store ptr %122, ptr %121, align 8
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 2
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 2
  %125 = load ptr, ptr %123, align 8
  store ptr %125, ptr %124, align 8
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 3
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 3
  %128 = load i32, ptr %126, align 4
  store i32 %128, ptr %127, align 4
  call void @set_offset(ptr %116, ptr @Iterable2)
  %129 = call ptr @llvm.invariant.start.p0(i64 24, ptr %116)
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 0
  %131 = load ptr, ptr %130, align 8
  %132 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %131, 0
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 1
  %134 = load ptr, ptr %133, align 8
  %135 = insertvalue { ptr, ptr, ptr, i32 } %132, ptr %134, 1
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 2
  %137 = load ptr, ptr %136, align 8
  %138 = insertvalue { ptr, ptr, ptr, i32 } %135, ptr %137, 2
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 3
  %140 = load i32, ptr %139, align 4
  %141 = insertvalue { ptr, ptr, ptr, i32 } %138, i32 %140, 3
  ret { ptr, ptr, ptr, i32 } %141
}

define { ptr, ptr, ptr, i32 } @Iterable2_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Iterable2)
  %20 = call ptr @llvm.invariant.start.p0(i64 24, ptr %7)
  %21 = alloca ptr, align 8
  store { ptr } %3, ptr %21, align 8
  %22 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %23 = extractvalue { ptr, ptr, ptr, i32 } %22, 0
  %24 = call ptr @llvm.invariant.start.p0(i64 184, ptr %23)
  %25 = extractvalue { ptr, ptr, ptr, i32 } %22, 3
  %26 = getelementptr ptr, ptr %23, i32 %25
  %27 = load ptr, ptr %26, align 8
  %28 = extractvalue { ptr, ptr, ptr, i32 } %22, 1
  %29 = call ptr %27(ptr %28)
  %30 = load ptr, ptr %29, align 8
  %31 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr }, ptr }, ptr null, i32 1) to i64))
  %32 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr }, ptr }, ptr %31, i32 0, i32 2
  store ptr %30, ptr %32, align 8
  %33 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr }, ptr }, ptr %31, i32 0, i32 2
  %34 = call ptr @llvm.invariant.start.p0(i64 8, ptr %33)
  %35 = alloca { ptr, ptr, ptr, i32 }, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  store ptr @FilterIterable2, ptr %35, align 8
  store ptr %31, ptr %36, align 8
  store i32 7, ptr %37, align 4
  %38 = call ptr @llvm.invariant.start.p0(i64 16, ptr %35)
  %39 = alloca { ptr, ptr, ptr, i32 }, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 0
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 1
  %45 = load ptr, ptr %43, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 2
  %48 = load ptr, ptr %46, align 8
  store ptr %48, ptr %47, align 8
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 3
  %51 = load i32, ptr %49, align 4
  store i32 %51, ptr %50, align 4
  call void @set_offset(ptr %39, ptr @Iterable2)
  %52 = call ptr @llvm.invariant.start.p0(i64 24, ptr %39)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 0
  %54 = load ptr, ptr %53, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %54, 0
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %57, 1
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 2
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } %58, ptr %60, 2
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 3
  %63 = load i32, ptr %62, align 4
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, i32 %63, 3
  %65 = load ptr, ptr %21, align 8
  %66 = insertvalue { ptr } undef, ptr %65, 0
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %68 = load ptr, ptr %67, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %68, 0
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %71 = load ptr, ptr %70, align 8
  %72 = insertvalue { ptr, ptr, ptr, i32 } %69, ptr %71, 1
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %74 = load ptr, ptr %73, align 8
  %75 = insertvalue { ptr, ptr, ptr, i32 } %72, ptr %74, 2
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %77 = load i32, ptr %76, align 4
  %78 = insertvalue { ptr, ptr, ptr, i32 } %75, i32 %77, 3
  %79 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %80 = extractvalue { ptr, ptr, ptr, i32 } %79, 0
  %81 = call ptr @llvm.invariant.start.p0(i64 184, ptr %80)
  %82 = extractvalue { ptr, ptr, ptr, i32 } %79, 3
  %83 = getelementptr ptr, ptr %80, i32 %82
  %84 = load ptr, ptr %83, align 8
  %85 = extractvalue { ptr, ptr, ptr, i32 } %79, 1
  %86 = call ptr %84(ptr %85)
  %87 = load ptr, ptr %86, align 8
  %88 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ([2 x ptr], ptr null, i32 1) to i64))
  %89 = call ptr @llvm.invariant.start.p0(i64 16, ptr %88)
  %90 = getelementptr [2 x ptr], ptr %88, i32 0, i32 1
  store ptr %87, ptr %90, align 8
  store ptr @Iterable2, ptr %88, align 8
  %91 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %92 = call ptr @llvm.invariant.start.p0(i64 24, ptr %91)
  %93 = getelementptr [3 x ptr], ptr %91, i32 0, i32 2
  store ptr %87, ptr %93, align 8
  %94 = getelementptr [3 x ptr], ptr %91, i32 0, i32 1
  store ptr @_parameterization_Ptri1, ptr %94, align 8
  store ptr @function_typ, ptr %91, align 8
  %95 = alloca [2 x ptr], align 8
  %96 = call ptr @llvm.invariant.start.p0(i64 16, ptr %95)
  %97 = getelementptr [2 x ptr], ptr %95, i32 0, i32 1
  store ptr %91, ptr %97, align 8
  %98 = getelementptr [2 x ptr], ptr %95, i32 0, i32 0
  store ptr %88, ptr %98, align 8
  %99 = call ptr @llvm.invariant.start.p0(i64 400, ptr %68)
  %100 = getelementptr ptr, ptr %68, i32 %77
  %101 = getelementptr ptr, ptr %100, i32 3
  %102 = load ptr, ptr %101, align 8
  %103 = alloca [2 x ptr], align 8
  %104 = getelementptr [2 x ptr], ptr %103, i32 0, i32 0
  store ptr %54, ptr %104, align 8
  %105 = getelementptr [2 x ptr], ptr %103, i32 0, i32 1
  store ptr @function_typ, ptr %105, align 8
  %106 = call ptr %102({ ptr, ptr, ptr, i32 } %78, ptr %103, { ptr, ptr, ptr, i32 } %64, { ptr } %66)
  call void %106({ ptr, ptr, ptr, i32 } %78, { ptr, ptr, ptr, i32 } %78, ptr %95, { ptr, ptr, ptr, i32 } %64, { ptr } %66)
  %107 = alloca { ptr, ptr, ptr, i32 }, align 8
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %107, i32 0, i32 0
  %110 = load ptr, ptr %108, align 8
  store ptr %110, ptr %109, align 8
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %107, i32 0, i32 1
  %113 = load ptr, ptr %111, align 8
  store ptr %113, ptr %112, align 8
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %107, i32 0, i32 2
  %116 = load ptr, ptr %114, align 8
  store ptr %116, ptr %115, align 8
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %107, i32 0, i32 3
  %119 = load i32, ptr %117, align 4
  store i32 %119, ptr %118, align 4
  call void @set_offset(ptr %107, ptr @Iterable2)
  %120 = call ptr @llvm.invariant.start.p0(i64 24, ptr %107)
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %107, i32 0, i32 0
  %122 = load ptr, ptr %121, align 8
  %123 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %122, 0
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %107, i32 0, i32 1
  %125 = load ptr, ptr %124, align 8
  %126 = insertvalue { ptr, ptr, ptr, i32 } %123, ptr %125, 1
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %107, i32 0, i32 2
  %128 = load ptr, ptr %127, align 8
  %129 = insertvalue { ptr, ptr, ptr, i32 } %126, ptr %128, 2
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %107, i32 0, i32 3
  %131 = load i32, ptr %130, align 4
  %132 = insertvalue { ptr, ptr, ptr, i32 } %129, i32 %131, 3
  ret { ptr, ptr, ptr, i32 } %132
}

define { ptr, ptr, ptr, i32 } @Iterable2_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Iterable2)
  %20 = call ptr @llvm.invariant.start.p0(i64 24, ptr %7)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @Iterable2)
  %36 = call ptr @llvm.invariant.start.p0(i64 24, ptr %23)
  %37 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %38 = extractvalue { ptr, ptr, ptr, i32 } %37, 0
  %39 = call ptr @llvm.invariant.start.p0(i64 184, ptr %38)
  %40 = extractvalue { ptr, ptr, ptr, i32 } %37, 3
  %41 = getelementptr ptr, ptr %38, i32 %40
  %42 = load ptr, ptr %41, align 8
  %43 = extractvalue { ptr, ptr, ptr, i32 } %37, 1
  %44 = call ptr %42(ptr %43)
  %45 = load ptr, ptr %44, align 8
  %46 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, ptr }, ptr null, i32 1) to i64))
  %47 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, ptr }, ptr %46, i32 0, i32 2
  store ptr %45, ptr %47, align 8
  %48 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, ptr }, ptr %46, i32 0, i32 2
  %49 = call ptr @llvm.invariant.start.p0(i64 8, ptr %48)
  %50 = alloca { ptr, ptr, ptr, i32 }, align 8
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 1
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 3
  store ptr @ChainIterable2, ptr %50, align 8
  store ptr %46, ptr %51, align 8
  store i32 7, ptr %52, align 4
  %53 = call ptr @llvm.invariant.start.p0(i64 16, ptr %50)
  %54 = alloca { ptr, ptr, ptr, i32 }, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 0
  %57 = load ptr, ptr %55, align 8
  store ptr %57, ptr %56, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 1
  %60 = load ptr, ptr %58, align 8
  store ptr %60, ptr %59, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 2
  %63 = load ptr, ptr %61, align 8
  store ptr %63, ptr %62, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 3
  %66 = load i32, ptr %64, align 4
  store i32 %66, ptr %65, align 4
  call void @set_offset(ptr %54, ptr @Iterable2)
  %67 = call ptr @llvm.invariant.start.p0(i64 24, ptr %54)
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 0
  %69 = load ptr, ptr %68, align 8
  %70 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %69, 0
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 1
  %72 = load ptr, ptr %71, align 8
  %73 = insertvalue { ptr, ptr, ptr, i32 } %70, ptr %72, 1
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 2
  %75 = load ptr, ptr %74, align 8
  %76 = insertvalue { ptr, ptr, ptr, i32 } %73, ptr %75, 2
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 3
  %78 = load i32, ptr %77, align 4
  %79 = insertvalue { ptr, ptr, ptr, i32 } %76, i32 %78, 3
  %80 = alloca { ptr, ptr, ptr, i32 }, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %80, i32 0, i32 0
  %83 = load ptr, ptr %81, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %80, i32 0, i32 1
  %86 = load ptr, ptr %84, align 8
  store ptr %86, ptr %85, align 8
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %80, i32 0, i32 2
  %89 = load ptr, ptr %87, align 8
  store ptr %89, ptr %88, align 8
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %80, i32 0, i32 3
  %92 = load i32, ptr %90, align 4
  store i32 %92, ptr %91, align 4
  call void @set_offset(ptr %80, ptr @Iterable2)
  %93 = call ptr @llvm.invariant.start.p0(i64 24, ptr %80)
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %80, i32 0, i32 0
  %95 = load ptr, ptr %94, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %95, 0
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %80, i32 0, i32 1
  %98 = load ptr, ptr %97, align 8
  %99 = insertvalue { ptr, ptr, ptr, i32 } %96, ptr %98, 1
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %80, i32 0, i32 2
  %101 = load ptr, ptr %100, align 8
  %102 = insertvalue { ptr, ptr, ptr, i32 } %99, ptr %101, 2
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %80, i32 0, i32 3
  %104 = load i32, ptr %103, align 4
  %105 = insertvalue { ptr, ptr, ptr, i32 } %102, i32 %104, 3
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 0
  %107 = load ptr, ptr %106, align 8
  %108 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %107, 0
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 1
  %110 = load ptr, ptr %109, align 8
  %111 = insertvalue { ptr, ptr, ptr, i32 } %108, ptr %110, 1
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 2
  %113 = load ptr, ptr %112, align 8
  %114 = insertvalue { ptr, ptr, ptr, i32 } %111, ptr %113, 2
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 3
  %116 = load i32, ptr %115, align 4
  %117 = insertvalue { ptr, ptr, ptr, i32 } %114, i32 %116, 3
  %118 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %119 = extractvalue { ptr, ptr, ptr, i32 } %118, 0
  %120 = call ptr @llvm.invariant.start.p0(i64 184, ptr %119)
  %121 = extractvalue { ptr, ptr, ptr, i32 } %118, 3
  %122 = getelementptr ptr, ptr %119, i32 %121
  %123 = load ptr, ptr %122, align 8
  %124 = extractvalue { ptr, ptr, ptr, i32 } %118, 1
  %125 = call ptr %123(ptr %124)
  %126 = load ptr, ptr %125, align 8
  %127 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ([2 x ptr], ptr null, i32 1) to i64))
  %128 = call ptr @llvm.invariant.start.p0(i64 16, ptr %127)
  %129 = getelementptr [2 x ptr], ptr %127, i32 0, i32 1
  store ptr %126, ptr %129, align 8
  store ptr @Iterable2, ptr %127, align 8
  %130 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ([2 x ptr], ptr null, i32 1) to i64))
  %131 = call ptr @llvm.invariant.start.p0(i64 16, ptr %130)
  %132 = getelementptr [2 x ptr], ptr %130, i32 0, i32 1
  store ptr %126, ptr %132, align 8
  store ptr @Iterable2, ptr %130, align 8
  %133 = alloca [2 x ptr], align 8
  %134 = call ptr @llvm.invariant.start.p0(i64 16, ptr %133)
  %135 = getelementptr [2 x ptr], ptr %133, i32 0, i32 1
  store ptr %130, ptr %135, align 8
  %136 = getelementptr [2 x ptr], ptr %133, i32 0, i32 0
  store ptr %127, ptr %136, align 8
  %137 = call ptr @llvm.invariant.start.p0(i64 400, ptr %107)
  %138 = getelementptr ptr, ptr %107, i32 %116
  %139 = getelementptr ptr, ptr %138, i32 3
  %140 = load ptr, ptr %139, align 8
  %141 = alloca [2 x ptr], align 8
  %142 = getelementptr [2 x ptr], ptr %141, i32 0, i32 0
  store ptr %69, ptr %142, align 8
  %143 = getelementptr [2 x ptr], ptr %141, i32 0, i32 1
  store ptr %95, ptr %143, align 8
  %144 = call ptr %140({ ptr, ptr, ptr, i32 } %117, ptr %141, { ptr, ptr, ptr, i32 } %79, { ptr, ptr, ptr, i32 } %105)
  call void %144({ ptr, ptr, ptr, i32 } %117, { ptr, ptr, ptr, i32 } %117, ptr %133, { ptr, ptr, ptr, i32 } %79, { ptr, ptr, ptr, i32 } %105)
  %145 = alloca { ptr, ptr, ptr, i32 }, align 8
  %146 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 0
  %147 = getelementptr { ptr, ptr, ptr, i32 }, ptr %145, i32 0, i32 0
  %148 = load ptr, ptr %146, align 8
  store ptr %148, ptr %147, align 8
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 1
  %150 = getelementptr { ptr, ptr, ptr, i32 }, ptr %145, i32 0, i32 1
  %151 = load ptr, ptr %149, align 8
  store ptr %151, ptr %150, align 8
  %152 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 2
  %153 = getelementptr { ptr, ptr, ptr, i32 }, ptr %145, i32 0, i32 2
  %154 = load ptr, ptr %152, align 8
  store ptr %154, ptr %153, align 8
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 3
  %156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %145, i32 0, i32 3
  %157 = load i32, ptr %155, align 4
  store i32 %157, ptr %156, align 4
  call void @set_offset(ptr %145, ptr @Iterable2)
  %158 = call ptr @llvm.invariant.start.p0(i64 24, ptr %145)
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %145, i32 0, i32 0
  %160 = load ptr, ptr %159, align 8
  %161 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %160, 0
  %162 = getelementptr { ptr, ptr, ptr, i32 }, ptr %145, i32 0, i32 1
  %163 = load ptr, ptr %162, align 8
  %164 = insertvalue { ptr, ptr, ptr, i32 } %161, ptr %163, 1
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %145, i32 0, i32 2
  %166 = load ptr, ptr %165, align 8
  %167 = insertvalue { ptr, ptr, ptr, i32 } %164, ptr %166, 2
  %168 = getelementptr { ptr, ptr, ptr, i32 }, ptr %145, i32 0, i32 3
  %169 = load i32, ptr %168, align 4
  %170 = insertvalue { ptr, ptr, ptr, i32 } %167, i32 %169, 3
  ret { ptr, ptr, ptr, i32 } %170
}

define { ptr, ptr, ptr, i32 } @Iterable2_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Iterable2)
  %20 = call ptr @llvm.invariant.start.p0(i64 24, ptr %7)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @Iterable2)
  %36 = call ptr @llvm.invariant.start.p0(i64 24, ptr %23)
  %37 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %38 = extractvalue { ptr, ptr, ptr, i32 } %37, 0
  %39 = call ptr @llvm.invariant.start.p0(i64 184, ptr %38)
  %40 = extractvalue { ptr, ptr, ptr, i32 } %37, 3
  %41 = getelementptr ptr, ptr %38, i32 %40
  %42 = load ptr, ptr %41, align 8
  %43 = extractvalue { ptr, ptr, ptr, i32 } %37, 1
  %44 = call ptr %42(ptr %43)
  %45 = load ptr, ptr %44, align 8
  %46 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, ptr }, ptr null, i32 1) to i64))
  %47 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, ptr }, ptr %46, i32 0, i32 2
  store ptr %45, ptr %47, align 8
  %48 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, ptr }, ptr %46, i32 0, i32 2
  %49 = call ptr @llvm.invariant.start.p0(i64 8, ptr %48)
  %50 = alloca { ptr, ptr, ptr, i32 }, align 8
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 1
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 3
  store ptr @InterleaveIterable2, ptr %50, align 8
  store ptr %46, ptr %51, align 8
  store i32 7, ptr %52, align 4
  %53 = call ptr @llvm.invariant.start.p0(i64 16, ptr %50)
  %54 = alloca { ptr, ptr, ptr, i32 }, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 0
  %57 = load ptr, ptr %55, align 8
  store ptr %57, ptr %56, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 1
  %60 = load ptr, ptr %58, align 8
  store ptr %60, ptr %59, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 2
  %63 = load ptr, ptr %61, align 8
  store ptr %63, ptr %62, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 3
  %66 = load i32, ptr %64, align 4
  store i32 %66, ptr %65, align 4
  call void @set_offset(ptr %54, ptr @Iterable2)
  %67 = call ptr @llvm.invariant.start.p0(i64 24, ptr %54)
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 0
  %69 = load ptr, ptr %68, align 8
  %70 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %69, 0
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 1
  %72 = load ptr, ptr %71, align 8
  %73 = insertvalue { ptr, ptr, ptr, i32 } %70, ptr %72, 1
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 2
  %75 = load ptr, ptr %74, align 8
  %76 = insertvalue { ptr, ptr, ptr, i32 } %73, ptr %75, 2
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 3
  %78 = load i32, ptr %77, align 4
  %79 = insertvalue { ptr, ptr, ptr, i32 } %76, i32 %78, 3
  %80 = alloca { ptr, ptr, ptr, i32 }, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %80, i32 0, i32 0
  %83 = load ptr, ptr %81, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %80, i32 0, i32 1
  %86 = load ptr, ptr %84, align 8
  store ptr %86, ptr %85, align 8
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %80, i32 0, i32 2
  %89 = load ptr, ptr %87, align 8
  store ptr %89, ptr %88, align 8
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %80, i32 0, i32 3
  %92 = load i32, ptr %90, align 4
  store i32 %92, ptr %91, align 4
  call void @set_offset(ptr %80, ptr @Iterable2)
  %93 = call ptr @llvm.invariant.start.p0(i64 24, ptr %80)
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %80, i32 0, i32 0
  %95 = load ptr, ptr %94, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %95, 0
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %80, i32 0, i32 1
  %98 = load ptr, ptr %97, align 8
  %99 = insertvalue { ptr, ptr, ptr, i32 } %96, ptr %98, 1
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %80, i32 0, i32 2
  %101 = load ptr, ptr %100, align 8
  %102 = insertvalue { ptr, ptr, ptr, i32 } %99, ptr %101, 2
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %80, i32 0, i32 3
  %104 = load i32, ptr %103, align 4
  %105 = insertvalue { ptr, ptr, ptr, i32 } %102, i32 %104, 3
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 0
  %107 = load ptr, ptr %106, align 8
  %108 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %107, 0
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 1
  %110 = load ptr, ptr %109, align 8
  %111 = insertvalue { ptr, ptr, ptr, i32 } %108, ptr %110, 1
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 2
  %113 = load ptr, ptr %112, align 8
  %114 = insertvalue { ptr, ptr, ptr, i32 } %111, ptr %113, 2
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 3
  %116 = load i32, ptr %115, align 4
  %117 = insertvalue { ptr, ptr, ptr, i32 } %114, i32 %116, 3
  %118 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %119 = extractvalue { ptr, ptr, ptr, i32 } %118, 0
  %120 = call ptr @llvm.invariant.start.p0(i64 184, ptr %119)
  %121 = extractvalue { ptr, ptr, ptr, i32 } %118, 3
  %122 = getelementptr ptr, ptr %119, i32 %121
  %123 = load ptr, ptr %122, align 8
  %124 = extractvalue { ptr, ptr, ptr, i32 } %118, 1
  %125 = call ptr %123(ptr %124)
  %126 = load ptr, ptr %125, align 8
  %127 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ([2 x ptr], ptr null, i32 1) to i64))
  %128 = call ptr @llvm.invariant.start.p0(i64 16, ptr %127)
  %129 = getelementptr [2 x ptr], ptr %127, i32 0, i32 1
  store ptr %126, ptr %129, align 8
  store ptr @Iterable2, ptr %127, align 8
  %130 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ([2 x ptr], ptr null, i32 1) to i64))
  %131 = call ptr @llvm.invariant.start.p0(i64 16, ptr %130)
  %132 = getelementptr [2 x ptr], ptr %130, i32 0, i32 1
  store ptr %126, ptr %132, align 8
  store ptr @Iterable2, ptr %130, align 8
  %133 = alloca [2 x ptr], align 8
  %134 = call ptr @llvm.invariant.start.p0(i64 16, ptr %133)
  %135 = getelementptr [2 x ptr], ptr %133, i32 0, i32 1
  store ptr %130, ptr %135, align 8
  %136 = getelementptr [2 x ptr], ptr %133, i32 0, i32 0
  store ptr %127, ptr %136, align 8
  %137 = call ptr @llvm.invariant.start.p0(i64 400, ptr %107)
  %138 = getelementptr ptr, ptr %107, i32 %116
  %139 = getelementptr ptr, ptr %138, i32 3
  %140 = load ptr, ptr %139, align 8
  %141 = alloca [2 x ptr], align 8
  %142 = getelementptr [2 x ptr], ptr %141, i32 0, i32 0
  store ptr %69, ptr %142, align 8
  %143 = getelementptr [2 x ptr], ptr %141, i32 0, i32 1
  store ptr %95, ptr %143, align 8
  %144 = call ptr %140({ ptr, ptr, ptr, i32 } %117, ptr %141, { ptr, ptr, ptr, i32 } %79, { ptr, ptr, ptr, i32 } %105)
  call void %144({ ptr, ptr, ptr, i32 } %117, { ptr, ptr, ptr, i32 } %117, ptr %133, { ptr, ptr, ptr, i32 } %79, { ptr, ptr, ptr, i32 } %105)
  %145 = alloca { ptr, ptr, ptr, i32 }, align 8
  %146 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 0
  %147 = getelementptr { ptr, ptr, ptr, i32 }, ptr %145, i32 0, i32 0
  %148 = load ptr, ptr %146, align 8
  store ptr %148, ptr %147, align 8
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 1
  %150 = getelementptr { ptr, ptr, ptr, i32 }, ptr %145, i32 0, i32 1
  %151 = load ptr, ptr %149, align 8
  store ptr %151, ptr %150, align 8
  %152 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 2
  %153 = getelementptr { ptr, ptr, ptr, i32 }, ptr %145, i32 0, i32 2
  %154 = load ptr, ptr %152, align 8
  store ptr %154, ptr %153, align 8
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 3
  %156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %145, i32 0, i32 3
  %157 = load i32, ptr %155, align 4
  store i32 %157, ptr %156, align 4
  call void @set_offset(ptr %145, ptr @Iterable2)
  %158 = call ptr @llvm.invariant.start.p0(i64 24, ptr %145)
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %145, i32 0, i32 0
  %160 = load ptr, ptr %159, align 8
  %161 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %160, 0
  %162 = getelementptr { ptr, ptr, ptr, i32 }, ptr %145, i32 0, i32 1
  %163 = load ptr, ptr %162, align 8
  %164 = insertvalue { ptr, ptr, ptr, i32 } %161, ptr %163, 1
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %145, i32 0, i32 2
  %166 = load ptr, ptr %165, align 8
  %167 = insertvalue { ptr, ptr, ptr, i32 } %164, ptr %166, 2
  %168 = getelementptr { ptr, ptr, ptr, i32 }, ptr %145, i32 0, i32 3
  %169 = load i32, ptr %168, align 4
  %170 = insertvalue { ptr, ptr, ptr, i32 } %167, i32 %169, 3
  ret { ptr, ptr, ptr, i32 } %170
}

define { ptr, ptr, ptr, i32 } @Iterable2_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Iterable2)
  %20 = call ptr @llvm.invariant.start.p0(i64 24, ptr %7)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @Iterable2)
  %36 = call ptr @llvm.invariant.start.p0(i64 24, ptr %23)
  %37 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %38 = extractvalue { ptr, ptr, ptr, i32 } %37, 0
  %39 = call ptr @llvm.invariant.start.p0(i64 184, ptr %38)
  %40 = extractvalue { ptr, ptr, ptr, i32 } %37, 3
  %41 = getelementptr ptr, ptr %38, i32 %40
  %42 = load ptr, ptr %41, align 8
  %43 = extractvalue { ptr, ptr, ptr, i32 } %37, 1
  %44 = call ptr %42(ptr %43)
  %45 = load ptr, ptr %44, align 8
  %46 = getelementptr [1 x ptr], ptr %2, i32 0, i32 0
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr [1 x ptr], ptr %47, i32 0, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %51 = call ptr @llvm.invariant.start.p0(i64 24, ptr %50)
  %52 = getelementptr [3 x ptr], ptr %50, i32 0, i32 2
  store ptr %49, ptr %52, align 8
  %53 = getelementptr [3 x ptr], ptr %50, i32 0, i32 1
  store ptr %45, ptr %53, align 8
  store ptr @Pair, ptr %50, align 8
  %54 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, ptr, ptr, ptr }, ptr null, i32 1) to i64))
  %55 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, ptr, ptr, ptr }, ptr %54, i32 0, i32 2
  store ptr %45, ptr %55, align 8
  %56 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, ptr, ptr, ptr }, ptr %54, i32 0, i32 3
  store ptr %49, ptr %56, align 8
  %57 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, ptr, ptr, ptr }, ptr %54, i32 0, i32 4
  store ptr %50, ptr %57, align 8
  %58 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, ptr, ptr, ptr }, ptr %54, i32 0, i32 2
  %59 = call ptr @llvm.invariant.start.p0(i64 24, ptr %58)
  %60 = alloca { ptr, ptr, ptr, i32 }, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  store ptr @ZipIterable2, ptr %60, align 8
  store ptr %54, ptr %61, align 8
  store i32 7, ptr %62, align 4
  %63 = call ptr @llvm.invariant.start.p0(i64 16, ptr %60)
  %64 = alloca { ptr, ptr, ptr, i32 }, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 0
  %67 = load ptr, ptr %65, align 8
  store ptr %67, ptr %66, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 1
  %70 = load ptr, ptr %68, align 8
  store ptr %70, ptr %69, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 2
  %73 = load ptr, ptr %71, align 8
  store ptr %73, ptr %72, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 3
  %76 = load i32, ptr %74, align 4
  store i32 %76, ptr %75, align 4
  call void @set_offset(ptr %64, ptr @Iterable2)
  %77 = call ptr @llvm.invariant.start.p0(i64 24, ptr %64)
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 0
  %79 = load ptr, ptr %78, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %79, 0
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 1
  %82 = load ptr, ptr %81, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } %80, ptr %82, 1
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 2
  %85 = load ptr, ptr %84, align 8
  %86 = insertvalue { ptr, ptr, ptr, i32 } %83, ptr %85, 2
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 3
  %88 = load i32, ptr %87, align 4
  %89 = insertvalue { ptr, ptr, ptr, i32 } %86, i32 %88, 3
  %90 = alloca { ptr, ptr, ptr, i32 }, align 8
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 0
  %93 = load ptr, ptr %91, align 8
  store ptr %93, ptr %92, align 8
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 1
  %96 = load ptr, ptr %94, align 8
  store ptr %96, ptr %95, align 8
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 2
  %99 = load ptr, ptr %97, align 8
  store ptr %99, ptr %98, align 8
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 3
  %102 = load i32, ptr %100, align 4
  store i32 %102, ptr %101, align 4
  call void @set_offset(ptr %90, ptr @Iterable2)
  %103 = call ptr @llvm.invariant.start.p0(i64 24, ptr %90)
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 0
  %105 = load ptr, ptr %104, align 8
  %106 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %105, 0
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 1
  %108 = load ptr, ptr %107, align 8
  %109 = insertvalue { ptr, ptr, ptr, i32 } %106, ptr %108, 1
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 2
  %111 = load ptr, ptr %110, align 8
  %112 = insertvalue { ptr, ptr, ptr, i32 } %109, ptr %111, 2
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 3
  %114 = load i32, ptr %113, align 4
  %115 = insertvalue { ptr, ptr, ptr, i32 } %112, i32 %114, 3
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %117 = load ptr, ptr %116, align 8
  %118 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %117, 0
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %120 = load ptr, ptr %119, align 8
  %121 = insertvalue { ptr, ptr, ptr, i32 } %118, ptr %120, 1
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %123 = load ptr, ptr %122, align 8
  %124 = insertvalue { ptr, ptr, ptr, i32 } %121, ptr %123, 2
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %126 = load i32, ptr %125, align 4
  %127 = insertvalue { ptr, ptr, ptr, i32 } %124, i32 %126, 3
  %128 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %129 = extractvalue { ptr, ptr, ptr, i32 } %128, 0
  %130 = call ptr @llvm.invariant.start.p0(i64 184, ptr %129)
  %131 = extractvalue { ptr, ptr, ptr, i32 } %128, 3
  %132 = getelementptr ptr, ptr %129, i32 %131
  %133 = load ptr, ptr %132, align 8
  %134 = extractvalue { ptr, ptr, ptr, i32 } %128, 1
  %135 = call ptr %133(ptr %134)
  %136 = load ptr, ptr %135, align 8
  %137 = getelementptr [1 x ptr], ptr %2, i32 0, i32 0
  %138 = load ptr, ptr %137, align 8
  %139 = getelementptr [1 x ptr], ptr %138, i32 0, i32 1
  %140 = load ptr, ptr %139, align 8
  %141 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ([2 x ptr], ptr null, i32 1) to i64))
  %142 = call ptr @llvm.invariant.start.p0(i64 16, ptr %141)
  %143 = getelementptr [2 x ptr], ptr %141, i32 0, i32 1
  store ptr %136, ptr %143, align 8
  store ptr @Iterable2, ptr %141, align 8
  %144 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ([2 x ptr], ptr null, i32 1) to i64))
  %145 = call ptr @llvm.invariant.start.p0(i64 16, ptr %144)
  %146 = getelementptr [2 x ptr], ptr %144, i32 0, i32 1
  store ptr %140, ptr %146, align 8
  store ptr @Iterable2, ptr %144, align 8
  %147 = alloca [2 x ptr], align 8
  %148 = call ptr @llvm.invariant.start.p0(i64 16, ptr %147)
  %149 = getelementptr [2 x ptr], ptr %147, i32 0, i32 1
  store ptr %144, ptr %149, align 8
  %150 = getelementptr [2 x ptr], ptr %147, i32 0, i32 0
  store ptr %141, ptr %150, align 8
  %151 = call ptr @llvm.invariant.start.p0(i64 416, ptr %117)
  %152 = getelementptr ptr, ptr %117, i32 %126
  %153 = getelementptr ptr, ptr %152, i32 5
  %154 = load ptr, ptr %153, align 8
  %155 = alloca [2 x ptr], align 8
  %156 = getelementptr [2 x ptr], ptr %155, i32 0, i32 0
  store ptr %79, ptr %156, align 8
  %157 = getelementptr [2 x ptr], ptr %155, i32 0, i32 1
  store ptr %105, ptr %157, align 8
  %158 = call ptr %154({ ptr, ptr, ptr, i32 } %127, ptr %155, { ptr, ptr, ptr, i32 } %89, { ptr, ptr, ptr, i32 } %115)
  call void %158({ ptr, ptr, ptr, i32 } %127, { ptr, ptr, ptr, i32 } %127, ptr %147, { ptr, ptr, ptr, i32 } %89, { ptr, ptr, ptr, i32 } %115)
  %159 = alloca { ptr, ptr, ptr, i32 }, align 8
  %160 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %161 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 0
  %162 = load ptr, ptr %160, align 8
  store ptr %162, ptr %161, align 8
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 1
  %165 = load ptr, ptr %163, align 8
  store ptr %165, ptr %164, align 8
  %166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 2
  %168 = load ptr, ptr %166, align 8
  store ptr %168, ptr %167, align 8
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 3
  %171 = load i32, ptr %169, align 4
  store i32 %171, ptr %170, align 4
  call void @set_offset(ptr %159, ptr @ZipIterable2)
  %172 = call ptr @llvm.invariant.start.p0(i64 24, ptr %159)
  %173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 0
  %174 = load ptr, ptr %173, align 8
  %175 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %174, 0
  %176 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 1
  %177 = load ptr, ptr %176, align 8
  %178 = insertvalue { ptr, ptr, ptr, i32 } %175, ptr %177, 1
  %179 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 2
  %180 = load ptr, ptr %179, align 8
  %181 = insertvalue { ptr, ptr, ptr, i32 } %178, ptr %180, 2
  %182 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 3
  %183 = load i32, ptr %182, align 4
  %184 = insertvalue { ptr, ptr, ptr, i32 } %181, i32 %183, 3
  ret { ptr, ptr, ptr, i32 } %184
}

define { ptr, ptr, ptr, i32 } @Iterable2_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Iterable2)
  %20 = call ptr @llvm.invariant.start.p0(i64 24, ptr %7)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @Iterable2)
  %36 = call ptr @llvm.invariant.start.p0(i64 24, ptr %23)
  %37 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %38 = extractvalue { ptr, ptr, ptr, i32 } %37, 0
  %39 = call ptr @llvm.invariant.start.p0(i64 184, ptr %38)
  %40 = extractvalue { ptr, ptr, ptr, i32 } %37, 3
  %41 = getelementptr ptr, ptr %38, i32 %40
  %42 = load ptr, ptr %41, align 8
  %43 = extractvalue { ptr, ptr, ptr, i32 } %37, 1
  %44 = call ptr %42(ptr %43)
  %45 = load ptr, ptr %44, align 8
  %46 = getelementptr [1 x ptr], ptr %2, i32 0, i32 0
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr [1 x ptr], ptr %47, i32 0, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %51 = call ptr @llvm.invariant.start.p0(i64 24, ptr %50)
  %52 = getelementptr [3 x ptr], ptr %50, i32 0, i32 2
  store ptr %49, ptr %52, align 8
  %53 = getelementptr [3 x ptr], ptr %50, i32 0, i32 1
  store ptr %45, ptr %53, align 8
  store ptr @Pair, ptr %50, align 8
  %54 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, ptr, ptr, ptr }, ptr null, i32 1) to i64))
  %55 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, ptr, ptr, ptr }, ptr %54, i32 0, i32 2
  store ptr %45, ptr %55, align 8
  %56 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, ptr, ptr, ptr }, ptr %54, i32 0, i32 3
  store ptr %49, ptr %56, align 8
  %57 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, ptr, ptr, ptr }, ptr %54, i32 0, i32 4
  store ptr %50, ptr %57, align 8
  %58 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, ptr, ptr, ptr }, ptr %54, i32 0, i32 2
  %59 = call ptr @llvm.invariant.start.p0(i64 24, ptr %58)
  %60 = alloca { ptr, ptr, ptr, i32 }, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  store ptr @ProductIterable2, ptr %60, align 8
  store ptr %54, ptr %61, align 8
  store i32 7, ptr %62, align 4
  %63 = call ptr @llvm.invariant.start.p0(i64 16, ptr %60)
  %64 = alloca { ptr, ptr, ptr, i32 }, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 0
  %67 = load ptr, ptr %65, align 8
  store ptr %67, ptr %66, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 1
  %70 = load ptr, ptr %68, align 8
  store ptr %70, ptr %69, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 2
  %73 = load ptr, ptr %71, align 8
  store ptr %73, ptr %72, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 3
  %76 = load i32, ptr %74, align 4
  store i32 %76, ptr %75, align 4
  call void @set_offset(ptr %64, ptr @Iterable2)
  %77 = call ptr @llvm.invariant.start.p0(i64 24, ptr %64)
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 0
  %79 = load ptr, ptr %78, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %79, 0
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 1
  %82 = load ptr, ptr %81, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } %80, ptr %82, 1
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 2
  %85 = load ptr, ptr %84, align 8
  %86 = insertvalue { ptr, ptr, ptr, i32 } %83, ptr %85, 2
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 3
  %88 = load i32, ptr %87, align 4
  %89 = insertvalue { ptr, ptr, ptr, i32 } %86, i32 %88, 3
  %90 = alloca { ptr, ptr, ptr, i32 }, align 8
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 0
  %93 = load ptr, ptr %91, align 8
  store ptr %93, ptr %92, align 8
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 1
  %96 = load ptr, ptr %94, align 8
  store ptr %96, ptr %95, align 8
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 2
  %99 = load ptr, ptr %97, align 8
  store ptr %99, ptr %98, align 8
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 3
  %102 = load i32, ptr %100, align 4
  store i32 %102, ptr %101, align 4
  call void @set_offset(ptr %90, ptr @Iterable2)
  %103 = call ptr @llvm.invariant.start.p0(i64 24, ptr %90)
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 0
  %105 = load ptr, ptr %104, align 8
  %106 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %105, 0
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 1
  %108 = load ptr, ptr %107, align 8
  %109 = insertvalue { ptr, ptr, ptr, i32 } %106, ptr %108, 1
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 2
  %111 = load ptr, ptr %110, align 8
  %112 = insertvalue { ptr, ptr, ptr, i32 } %109, ptr %111, 2
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 3
  %114 = load i32, ptr %113, align 4
  %115 = insertvalue { ptr, ptr, ptr, i32 } %112, i32 %114, 3
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %117 = load ptr, ptr %116, align 8
  %118 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %117, 0
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %120 = load ptr, ptr %119, align 8
  %121 = insertvalue { ptr, ptr, ptr, i32 } %118, ptr %120, 1
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %123 = load ptr, ptr %122, align 8
  %124 = insertvalue { ptr, ptr, ptr, i32 } %121, ptr %123, 2
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %126 = load i32, ptr %125, align 4
  %127 = insertvalue { ptr, ptr, ptr, i32 } %124, i32 %126, 3
  %128 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %129 = extractvalue { ptr, ptr, ptr, i32 } %128, 0
  %130 = call ptr @llvm.invariant.start.p0(i64 184, ptr %129)
  %131 = extractvalue { ptr, ptr, ptr, i32 } %128, 3
  %132 = getelementptr ptr, ptr %129, i32 %131
  %133 = load ptr, ptr %132, align 8
  %134 = extractvalue { ptr, ptr, ptr, i32 } %128, 1
  %135 = call ptr %133(ptr %134)
  %136 = load ptr, ptr %135, align 8
  %137 = getelementptr [1 x ptr], ptr %2, i32 0, i32 0
  %138 = load ptr, ptr %137, align 8
  %139 = getelementptr [1 x ptr], ptr %138, i32 0, i32 1
  %140 = load ptr, ptr %139, align 8
  %141 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ([2 x ptr], ptr null, i32 1) to i64))
  %142 = call ptr @llvm.invariant.start.p0(i64 16, ptr %141)
  %143 = getelementptr [2 x ptr], ptr %141, i32 0, i32 1
  store ptr %136, ptr %143, align 8
  store ptr @Iterable2, ptr %141, align 8
  %144 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ([2 x ptr], ptr null, i32 1) to i64))
  %145 = call ptr @llvm.invariant.start.p0(i64 16, ptr %144)
  %146 = getelementptr [2 x ptr], ptr %144, i32 0, i32 1
  store ptr %140, ptr %146, align 8
  store ptr @Iterable2, ptr %144, align 8
  %147 = alloca [2 x ptr], align 8
  %148 = call ptr @llvm.invariant.start.p0(i64 16, ptr %147)
  %149 = getelementptr [2 x ptr], ptr %147, i32 0, i32 1
  store ptr %144, ptr %149, align 8
  %150 = getelementptr [2 x ptr], ptr %147, i32 0, i32 0
  store ptr %141, ptr %150, align 8
  %151 = call ptr @llvm.invariant.start.p0(i64 416, ptr %117)
  %152 = getelementptr ptr, ptr %117, i32 %126
  %153 = getelementptr ptr, ptr %152, i32 5
  %154 = load ptr, ptr %153, align 8
  %155 = alloca [2 x ptr], align 8
  %156 = getelementptr [2 x ptr], ptr %155, i32 0, i32 0
  store ptr %79, ptr %156, align 8
  %157 = getelementptr [2 x ptr], ptr %155, i32 0, i32 1
  store ptr %105, ptr %157, align 8
  %158 = call ptr %154({ ptr, ptr, ptr, i32 } %127, ptr %155, { ptr, ptr, ptr, i32 } %89, { ptr, ptr, ptr, i32 } %115)
  call void %158({ ptr, ptr, ptr, i32 } %127, { ptr, ptr, ptr, i32 } %127, ptr %147, { ptr, ptr, ptr, i32 } %89, { ptr, ptr, ptr, i32 } %115)
  %159 = alloca { ptr, ptr, ptr, i32 }, align 8
  %160 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %161 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 0
  %162 = load ptr, ptr %160, align 8
  store ptr %162, ptr %161, align 8
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 1
  %165 = load ptr, ptr %163, align 8
  store ptr %165, ptr %164, align 8
  %166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 2
  %168 = load ptr, ptr %166, align 8
  store ptr %168, ptr %167, align 8
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 3
  %171 = load i32, ptr %169, align 4
  store i32 %171, ptr %170, align 4
  call void @set_offset(ptr %159, ptr @ProductIterable2)
  %172 = call ptr @llvm.invariant.start.p0(i64 24, ptr %159)
  %173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 0
  %174 = load ptr, ptr %173, align 8
  %175 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %174, 0
  %176 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 1
  %177 = load ptr, ptr %176, align 8
  %178 = insertvalue { ptr, ptr, ptr, i32 } %175, ptr %177, 1
  %179 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 2
  %180 = load ptr, ptr %179, align 8
  %181 = insertvalue { ptr, ptr, ptr, i32 } %178, ptr %180, 2
  %182 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 3
  %183 = load i32, ptr %182, align 4
  %184 = insertvalue { ptr, ptr, ptr, i32 } %181, i32 %183, 3
  ret { ptr, ptr, ptr, i32 } %184
}

define ptr @ProductIterable2_field_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, ptr, ptr, ptr }, ptr %0, i32 0, i32 0
  ret ptr %2
}

define ptr @ProductIterable2_field_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, ptr, ptr, ptr }, ptr %0, i32 0, i32 1
  ret ptr %2
}

define ptr @ProductIterable2_field_ProductIterable2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, ptr, ptr, ptr }, ptr %0, i32 0, i32 2
  ret ptr %2
}

define ptr @ProductIterable2_field_ProductIterable2_1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, ptr, ptr, ptr }, ptr %0, i32 0, i32 3
  ret ptr %2
}

define ptr @ProductIterable2_field_ProductIterable2_2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, ptr, ptr, ptr }, ptr %0, i32 0, i32 4
  ret ptr %2
}

define ptr @ProductIterable2_B_init_firstIterable2T_secondIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2, { ptr, ptr, ptr, i32 } %3) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = getelementptr [2 x ptr], ptr %1, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr ptr, ptr %7, i32 1
  %9 = getelementptr ptr, ptr %7, i32 2
  %10 = getelementptr ptr, ptr %7, i32 3
  %11 = getelementptr ptr, ptr %7, i32 4
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %15)
  %17 = getelementptr [2 x ptr], ptr %1, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr ptr, ptr %18, i32 1
  %20 = getelementptr ptr, ptr %18, i32 2
  %21 = getelementptr ptr, ptr %18, i32 3
  %22 = getelementptr ptr, ptr %18, i32 4
  %23 = load i64, ptr %19, align 4
  %24 = load i64, ptr %20, align 4
  %25 = load ptr, ptr %21, align 8
  %26 = load ptr, ptr %22, align 8
  %27 = call i1 @subtype_test_wrapper(ptr %25, i64 %24, i64 %23, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %26)
  %28 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %29 = getelementptr [52 x ptr], ptr %28, i32 0, i32 17
  %30 = getelementptr ptr, ptr %29, i32 7
  %31 = load ptr, ptr %30, align 8
  ret ptr %31
}

define ptr @ProductIterable2_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [52 x ptr], ptr %4, i32 0, i32 18
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @ProductIterable2_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 19
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @ProductIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, i160 } %2, { ptr } %3) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = getelementptr [2 x ptr], ptr %1, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr ptr, ptr %7, i32 1
  %9 = getelementptr ptr, ptr %7, i32 2
  %10 = getelementptr ptr, ptr %7, i32 3
  %11 = getelementptr ptr, ptr %7, i32 4
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 9197944775169318296, i64 ptrtoint (ptr @Pair to i64), ptr %15)
  %17 = getelementptr [2 x ptr], ptr %1, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr ptr, ptr %18, i32 1
  %20 = getelementptr ptr, ptr %18, i32 2
  %21 = getelementptr ptr, ptr %18, i32 3
  %22 = getelementptr ptr, ptr %18, i32 4
  %23 = load i64, ptr %19, align 4
  %24 = load i64, ptr %20, align 4
  %25 = load ptr, ptr %21, align 8
  %26 = load ptr, ptr %22, align 8
  %27 = call i1 @subtype_test_wrapper(ptr %25, i64 %24, i64 %23, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %26)
  %28 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %29 = getelementptr [52 x ptr], ptr %28, i32 0, i32 20
  %30 = getelementptr ptr, ptr %29, i32 7
  %31 = load ptr, ptr %30, align 8
  ret ptr %31
}

define ptr @ProductIterable2_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 21
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @ProductIterable2_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 22
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @ProductIterable2_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 23
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @ProductIterable2_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 24
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @ProductIterable2_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 25
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @ProductIterable2_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 26
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @ProductIterable2_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 27
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @ProductIterable2_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 28
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define void @ProductIterable2_init_firstIterable2T_secondIterable2U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @ProductIterable2)
  %21 = call ptr @llvm.invariant.start.p0(i64 24, ptr %8)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %22, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 16, ptr %22)
  %24 = alloca { ptr, ptr, ptr, i32 }, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %36 = load i32, ptr %34, align 4
  store i32 %36, ptr %35, align 4
  call void @set_offset(ptr %24, ptr @Iterable2)
  %37 = call ptr @llvm.invariant.start.p0(i64 24, ptr %24)
  %38 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %39 = extractvalue { ptr, ptr, ptr, i32 } %38, 0
  %40 = call ptr @llvm.invariant.start.p0(i64 416, ptr %39)
  %41 = extractvalue { ptr, ptr, ptr, i32 } %38, 3
  %42 = getelementptr ptr, ptr %39, i32 %41
  %43 = load ptr, ptr %42, align 8
  %44 = extractvalue { ptr, ptr, ptr, i32 } %38, 1
  %45 = call ptr %43(ptr %44)
  %46 = alloca { ptr, ptr, ptr, i32 }, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %49 = load ptr, ptr %47, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %52 = load ptr, ptr %50, align 8
  store ptr %52, ptr %51, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %55 = load ptr, ptr %53, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %58 = load i32, ptr %56, align 4
  store i32 %58, ptr %57, align 4
  call void @set_offset(ptr %46, ptr @Iterable2)
  %59 = call ptr @llvm.invariant.start.p0(i64 24, ptr %46)
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %62 = load ptr, ptr %60, align 8
  store ptr %62, ptr %61, align 8
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %65 = load ptr, ptr %63, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %68 = load ptr, ptr %66, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %71 = load i32, ptr %69, align 4
  store i32 %71, ptr %70, align 4
  %72 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %72, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 16, ptr %72)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 0
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 1
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 2
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %83 = load ptr, ptr %81, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 3
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %86 = load i32, ptr %84, align 4
  store i32 %86, ptr %85, align 4
  call void @set_offset(ptr %74, ptr @Iterable2)
  %87 = call ptr @llvm.invariant.start.p0(i64 24, ptr %74)
  %88 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %89 = extractvalue { ptr, ptr, ptr, i32 } %88, 0
  %90 = call ptr @llvm.invariant.start.p0(i64 416, ptr %89)
  %91 = extractvalue { ptr, ptr, ptr, i32 } %88, 3
  %92 = getelementptr ptr, ptr %89, i32 %91
  %93 = getelementptr ptr, ptr %92, i32 1
  %94 = load ptr, ptr %93, align 8
  %95 = extractvalue { ptr, ptr, ptr, i32 } %88, 1
  %96 = call ptr %94(ptr %95)
  %97 = alloca { ptr, ptr, ptr, i32 }, align 8
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 0
  %100 = load ptr, ptr %98, align 8
  store ptr %100, ptr %99, align 8
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %103 = load ptr, ptr %101, align 8
  store ptr %103, ptr %102, align 8
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 2
  %106 = load ptr, ptr %104, align 8
  store ptr %106, ptr %105, align 8
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  %109 = load i32, ptr %107, align 4
  store i32 %109, ptr %108, align 4
  call void @set_offset(ptr %97, ptr @Iterable2)
  %110 = call ptr @llvm.invariant.start.p0(i64 24, ptr %97)
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 0
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 0
  %113 = load ptr, ptr %111, align 8
  store ptr %113, ptr %112, align 8
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 1
  %116 = load ptr, ptr %114, align 8
  store ptr %116, ptr %115, align 8
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 2
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 2
  %119 = load ptr, ptr %117, align 8
  store ptr %119, ptr %118, align 8
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 3
  %122 = load i32, ptr %120, align 4
  store i32 %122, ptr %121, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterable2_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @ProductIterable2)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 416, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %27 = call ptr %25(ptr %26)
  %28 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %29 = extractvalue { ptr, ptr, ptr, i32 } %28, 0
  %30 = call ptr @llvm.invariant.start.p0(i64 416, ptr %29)
  %31 = extractvalue { ptr, ptr, ptr, i32 } %28, 3
  %32 = getelementptr ptr, ptr %29, i32 %31
  %33 = getelementptr ptr, ptr %32, i32 1
  %34 = load ptr, ptr %33, align 8
  %35 = extractvalue { ptr, ptr, ptr, i32 } %28, 1
  %36 = call ptr %34(ptr %35)
  %37 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %38 = extractvalue { ptr, ptr, ptr, i32 } %37, 0
  %39 = call ptr @llvm.invariant.start.p0(i64 416, ptr %38)
  %40 = extractvalue { ptr, ptr, ptr, i32 } %37, 3
  %41 = getelementptr ptr, ptr %38, i32 %40
  %42 = getelementptr ptr, ptr %41, i32 2
  %43 = load ptr, ptr %42, align 8
  %44 = extractvalue { ptr, ptr, ptr, i32 } %37, 1
  %45 = call ptr %43(ptr %44)
  %46 = load ptr, ptr %45, align 8
  %47 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %48 = extractvalue { ptr, ptr, ptr, i32 } %47, 0
  %49 = call ptr @llvm.invariant.start.p0(i64 416, ptr %48)
  %50 = extractvalue { ptr, ptr, ptr, i32 } %47, 3
  %51 = getelementptr ptr, ptr %48, i32 %50
  %52 = getelementptr ptr, ptr %51, i32 3
  %53 = load ptr, ptr %52, align 8
  %54 = extractvalue { ptr, ptr, ptr, i32 } %47, 1
  %55 = call ptr %53(ptr %54)
  %56 = load ptr, ptr %55, align 8
  %57 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %58 = call ptr @llvm.invariant.start.p0(i64 24, ptr %57)
  %59 = getelementptr [3 x ptr], ptr %57, i32 0, i32 2
  store ptr %56, ptr %59, align 8
  %60 = getelementptr [3 x ptr], ptr %57, i32 0, i32 1
  store ptr %46, ptr %60, align 8
  store ptr @Pair, ptr %57, align 8
  %61 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, i160 }, ptr, ptr, ptr }, ptr null, i32 1) to i64))
  %62 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, i160 }, ptr, ptr, ptr }, ptr %61, i32 0, i32 4
  store ptr %46, ptr %62, align 8
  %63 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, i160 }, ptr, ptr, ptr }, ptr %61, i32 0, i32 5
  store ptr %56, ptr %63, align 8
  %64 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, i160 }, ptr, ptr, ptr }, ptr %61, i32 0, i32 6
  store ptr %57, ptr %64, align 8
  %65 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, i160 }, ptr, ptr, ptr }, ptr %61, i32 0, i32 4
  %66 = call ptr @llvm.invariant.start.p0(i64 24, ptr %65)
  %67 = alloca { ptr, ptr, ptr, i32 }, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 1
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 3
  store ptr @ProductIterator2, ptr %67, align 8
  store ptr %61, ptr %68, align 8
  store i32 7, ptr %69, align 4
  %70 = call ptr @llvm.invariant.start.p0(i64 16, ptr %67)
  %71 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %72 = extractvalue { ptr, ptr, ptr, i32 } %71, 0
  %73 = call ptr @llvm.invariant.start.p0(i64 416, ptr %72)
  %74 = extractvalue { ptr, ptr, ptr, i32 } %71, 3
  %75 = getelementptr ptr, ptr %72, i32 %74
  %76 = load ptr, ptr %75, align 8
  %77 = extractvalue { ptr, ptr, ptr, i32 } %71, 1
  %78 = call ptr %76(ptr %77)
  %79 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %80 = extractvalue { ptr, ptr, ptr, i32 } %79, 0
  %81 = call ptr @llvm.invariant.start.p0(i64 416, ptr %80)
  %82 = extractvalue { ptr, ptr, ptr, i32 } %79, 3
  %83 = getelementptr ptr, ptr %80, i32 %82
  %84 = getelementptr ptr, ptr %83, i32 1
  %85 = load ptr, ptr %84, align 8
  %86 = extractvalue { ptr, ptr, ptr, i32 } %79, 1
  %87 = call ptr %85(ptr %86)
  %88 = alloca { ptr, ptr, ptr, i32 }, align 8
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 0
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %88, i32 0, i32 0
  %91 = load ptr, ptr %89, align 8
  store ptr %91, ptr %90, align 8
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 1
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %88, i32 0, i32 1
  %94 = load ptr, ptr %92, align 8
  store ptr %94, ptr %93, align 8
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 2
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %88, i32 0, i32 2
  %97 = load ptr, ptr %95, align 8
  store ptr %97, ptr %96, align 8
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 3
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %88, i32 0, i32 3
  %100 = load i32, ptr %98, align 4
  store i32 %100, ptr %99, align 4
  call void @set_offset(ptr %88, ptr @Iterable2)
  %101 = call ptr @llvm.invariant.start.p0(i64 24, ptr %88)
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %88, i32 0, i32 0
  %103 = load ptr, ptr %102, align 8
  %104 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %103, 0
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %88, i32 0, i32 1
  %106 = load ptr, ptr %105, align 8
  %107 = insertvalue { ptr, ptr, ptr, i32 } %104, ptr %106, 1
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %88, i32 0, i32 2
  %109 = load ptr, ptr %108, align 8
  %110 = insertvalue { ptr, ptr, ptr, i32 } %107, ptr %109, 2
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %88, i32 0, i32 3
  %112 = load i32, ptr %111, align 4
  %113 = insertvalue { ptr, ptr, ptr, i32 } %110, i32 %112, 3
  %114 = alloca { ptr, ptr, ptr, i32 }, align 8
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 0
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 0
  %117 = load ptr, ptr %115, align 8
  store ptr %117, ptr %116, align 8
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 1
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 1
  %120 = load ptr, ptr %118, align 8
  store ptr %120, ptr %119, align 8
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 2
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 2
  %123 = load ptr, ptr %121, align 8
  store ptr %123, ptr %122, align 8
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 3
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 3
  %126 = load i32, ptr %124, align 4
  store i32 %126, ptr %125, align 4
  call void @set_offset(ptr %114, ptr @Iterable2)
  %127 = call ptr @llvm.invariant.start.p0(i64 24, ptr %114)
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 0
  %129 = load ptr, ptr %128, align 8
  %130 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %129, 0
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 1
  %132 = load ptr, ptr %131, align 8
  %133 = insertvalue { ptr, ptr, ptr, i32 } %130, ptr %132, 1
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 2
  %135 = load ptr, ptr %134, align 8
  %136 = insertvalue { ptr, ptr, ptr, i32 } %133, ptr %135, 2
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 3
  %138 = load i32, ptr %137, align 4
  %139 = insertvalue { ptr, ptr, ptr, i32 } %136, i32 %138, 3
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 0
  %141 = load ptr, ptr %140, align 8
  %142 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %141, 0
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 1
  %144 = load ptr, ptr %143, align 8
  %145 = insertvalue { ptr, ptr, ptr, i32 } %142, ptr %144, 1
  %146 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 2
  %147 = load ptr, ptr %146, align 8
  %148 = insertvalue { ptr, ptr, ptr, i32 } %145, ptr %147, 2
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 3
  %150 = load i32, ptr %149, align 4
  %151 = insertvalue { ptr, ptr, ptr, i32 } %148, i32 %150, 3
  %152 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %153 = extractvalue { ptr, ptr, ptr, i32 } %152, 0
  %154 = call ptr @llvm.invariant.start.p0(i64 416, ptr %153)
  %155 = extractvalue { ptr, ptr, ptr, i32 } %152, 3
  %156 = getelementptr ptr, ptr %153, i32 %155
  %157 = getelementptr ptr, ptr %156, i32 2
  %158 = load ptr, ptr %157, align 8
  %159 = extractvalue { ptr, ptr, ptr, i32 } %152, 1
  %160 = call ptr %158(ptr %159)
  %161 = load ptr, ptr %160, align 8
  %162 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %163 = extractvalue { ptr, ptr, ptr, i32 } %162, 0
  %164 = call ptr @llvm.invariant.start.p0(i64 416, ptr %163)
  %165 = extractvalue { ptr, ptr, ptr, i32 } %162, 3
  %166 = getelementptr ptr, ptr %163, i32 %165
  %167 = getelementptr ptr, ptr %166, i32 3
  %168 = load ptr, ptr %167, align 8
  %169 = extractvalue { ptr, ptr, ptr, i32 } %162, 1
  %170 = call ptr %168(ptr %169)
  %171 = load ptr, ptr %170, align 8
  %172 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ([2 x ptr], ptr null, i32 1) to i64))
  %173 = call ptr @llvm.invariant.start.p0(i64 16, ptr %172)
  %174 = getelementptr [2 x ptr], ptr %172, i32 0, i32 1
  store ptr %161, ptr %174, align 8
  store ptr @Iterable2, ptr %172, align 8
  %175 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ([2 x ptr], ptr null, i32 1) to i64))
  %176 = call ptr @llvm.invariant.start.p0(i64 16, ptr %175)
  %177 = getelementptr [2 x ptr], ptr %175, i32 0, i32 1
  store ptr %171, ptr %177, align 8
  store ptr @Iterable2, ptr %175, align 8
  %178 = alloca [2 x ptr], align 8
  %179 = call ptr @llvm.invariant.start.p0(i64 16, ptr %178)
  %180 = getelementptr [2 x ptr], ptr %178, i32 0, i32 1
  store ptr %175, ptr %180, align 8
  %181 = getelementptr [2 x ptr], ptr %178, i32 0, i32 0
  store ptr %172, ptr %181, align 8
  %182 = call ptr @llvm.invariant.start.p0(i64 112, ptr %141)
  %183 = getelementptr ptr, ptr %141, i32 %150
  %184 = getelementptr ptr, ptr %183, i32 7
  %185 = load ptr, ptr %184, align 8
  %186 = alloca [2 x ptr], align 8
  %187 = getelementptr [2 x ptr], ptr %186, i32 0, i32 0
  store ptr %103, ptr %187, align 8
  %188 = getelementptr [2 x ptr], ptr %186, i32 0, i32 1
  store ptr %129, ptr %188, align 8
  %189 = call ptr %185({ ptr, ptr, ptr, i32 } %151, ptr %186, { ptr, ptr, ptr, i32 } %113, { ptr, ptr, ptr, i32 } %139)
  call void %189({ ptr, ptr, ptr, i32 } %151, { ptr, ptr, ptr, i32 } %151, ptr %178, { ptr, ptr, ptr, i32 } %113, { ptr, ptr, ptr, i32 } %139)
  %190 = alloca { ptr, ptr, ptr, i32 }, align 8
  %191 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 0
  %192 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 0
  %193 = load ptr, ptr %191, align 8
  store ptr %193, ptr %192, align 8
  %194 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 1
  %195 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 1
  %196 = load ptr, ptr %194, align 8
  store ptr %196, ptr %195, align 8
  %197 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 2
  %198 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 2
  %199 = load ptr, ptr %197, align 8
  store ptr %199, ptr %198, align 8
  %200 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 3
  %201 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 3
  %202 = load i32, ptr %200, align 4
  store i32 %202, ptr %201, align 4
  call void @set_offset(ptr %190, ptr @Iterator2)
  %203 = call ptr @llvm.invariant.start.p0(i64 24, ptr %190)
  %204 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 0
  %205 = load ptr, ptr %204, align 8
  %206 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %205, 0
  %207 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 1
  %208 = load ptr, ptr %207, align 8
  %209 = insertvalue { ptr, ptr, ptr, i32 } %206, ptr %208, 1
  %210 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 2
  %211 = load ptr, ptr %210, align 8
  %212 = insertvalue { ptr, ptr, ptr, i32 } %209, ptr %211, 2
  %213 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 3
  %214 = load i32, ptr %213, align 4
  %215 = insertvalue { ptr, ptr, ptr, i32 } %212, i32 %214, 3
  ret { ptr, ptr, ptr, i32 } %215
}

define ptr @ProductIterator2_field_first_iterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, i160 }, ptr, ptr, ptr }, ptr %0, i32 0, i32 0
  ret ptr %2
}

define ptr @ProductIterator2_field_second_iterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, i160 }, ptr, ptr, ptr }, ptr %0, i32 0, i32 1
  ret ptr %2
}

define ptr @ProductIterator2_field_second_iterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, i160 }, ptr, ptr, ptr }, ptr %0, i32 0, i32 2
  ret ptr %2
}

define ptr @ProductIterator2_field_current_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, i160 }, ptr, ptr, ptr }, ptr %0, i32 0, i32 3
  ret ptr %2
}

define ptr @ProductIterator2_field_ProductIterator2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, i160 }, ptr, ptr, ptr }, ptr %0, i32 0, i32 4
  ret ptr %2
}

define ptr @ProductIterator2_field_ProductIterator2_1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, i160 }, ptr, ptr, ptr }, ptr %0, i32 0, i32 5
  ret ptr %2
}

define ptr @ProductIterator2_field_ProductIterator2_2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, i160 }, ptr, ptr, ptr }, ptr %0, i32 0, i32 6
  ret ptr %2
}

define ptr @ProductIterator2_B_init_first_iterableIterable2T_second_iterableIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2, { ptr, ptr, ptr, i32 } %3) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = getelementptr [2 x ptr], ptr %1, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr ptr, ptr %7, i32 1
  %9 = getelementptr ptr, ptr %7, i32 2
  %10 = getelementptr ptr, ptr %7, i32 3
  %11 = getelementptr ptr, ptr %7, i32 4
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %15)
  %17 = getelementptr [2 x ptr], ptr %1, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr ptr, ptr %18, i32 1
  %20 = getelementptr ptr, ptr %18, i32 2
  %21 = getelementptr ptr, ptr %18, i32 3
  %22 = getelementptr ptr, ptr %18, i32 4
  %23 = load i64, ptr %19, align 4
  %24 = load i64, ptr %20, align 4
  %25 = load ptr, ptr %21, align 8
  %26 = load ptr, ptr %22, align 8
  %27 = call i1 @subtype_test_wrapper(ptr %25, i64 %24, i64 %23, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %26)
  %28 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %29 = getelementptr [14 x ptr], ptr %28, i32 0, i32 9
  %30 = getelementptr ptr, ptr %29, i32 7
  %31 = load ptr, ptr %30, align 8
  ret ptr %31
}

define ptr @ProductIterator2_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [14 x ptr], ptr %4, i32 0, i32 10
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @ProductIterator2_init_first_iterableIterable2T_second_iterableIterable2U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @ProductIterator2)
  %21 = call ptr @llvm.invariant.start.p0(i64 24, ptr %8)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %22, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 16, ptr %22)
  %24 = alloca { ptr, ptr, ptr, i32 }, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %36 = load i32, ptr %34, align 4
  store i32 %36, ptr %35, align 4
  call void @set_offset(ptr %24, ptr @Iterable2)
  %37 = call ptr @llvm.invariant.start.p0(i64 24, ptr %24)
  %38 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %38, align 8
  %39 = call ptr @llvm.invariant.start.p0(i64 16, ptr %38)
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 0
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 0
  %43 = load ptr, ptr %41, align 8
  store ptr %43, ptr %42, align 8
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 1
  %46 = load ptr, ptr %44, align 8
  store ptr %46, ptr %45, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 2
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 2
  %49 = load ptr, ptr %47, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 3
  %52 = load i32, ptr %50, align 4
  store i32 %52, ptr %51, align 4
  call void @set_offset(ptr %40, ptr @Iterable2)
  %53 = call ptr @llvm.invariant.start.p0(i64 24, ptr %40)
  %54 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %55 = extractvalue { ptr, ptr, ptr, i32 } %54, 0
  %56 = call ptr @llvm.invariant.start.p0(i64 112, ptr %55)
  %57 = extractvalue { ptr, ptr, ptr, i32 } %54, 3
  %58 = getelementptr ptr, ptr %55, i32 %57
  %59 = getelementptr ptr, ptr %58, i32 2
  %60 = load ptr, ptr %59, align 8
  %61 = extractvalue { ptr, ptr, ptr, i32 } %54, 1
  %62 = call ptr %60(ptr %61)
  %63 = alloca { ptr, ptr, ptr, i32 }, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 0
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 0
  %66 = load ptr, ptr %64, align 8
  store ptr %66, ptr %65, align 8
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 1
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 1
  %69 = load ptr, ptr %67, align 8
  store ptr %69, ptr %68, align 8
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 2
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 2
  %72 = load ptr, ptr %70, align 8
  store ptr %72, ptr %71, align 8
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 3
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 3
  %75 = load i32, ptr %73, align 4
  store i32 %75, ptr %74, align 4
  call void @set_offset(ptr %63, ptr @Iterable2)
  %76 = call ptr @llvm.invariant.start.p0(i64 24, ptr %63)
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 0
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 0
  %79 = load ptr, ptr %77, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 1
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 1
  %82 = load ptr, ptr %80, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 2
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 2
  %85 = load ptr, ptr %83, align 8
  store ptr %85, ptr %84, align 8
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 3
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 3
  %88 = load i32, ptr %86, align 4
  store i32 %88, ptr %87, align 4
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %90 = load ptr, ptr %89, align 8
  %91 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %90, 0
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %93 = load ptr, ptr %92, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } %91, ptr %93, 1
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %96 = load ptr, ptr %95, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr %96, 2
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %99 = load i32, ptr %98, align 4
  %100 = insertvalue { ptr, ptr, ptr, i32 } %97, i32 %99, 3
  %101 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %102 = extractvalue { ptr, ptr, ptr, i32 } %101, 0
  %103 = call ptr @llvm.invariant.start.p0(i64 112, ptr %102)
  %104 = extractvalue { ptr, ptr, ptr, i32 } %101, 3
  %105 = getelementptr ptr, ptr %102, i32 %104
  %106 = getelementptr ptr, ptr %105, i32 4
  %107 = load ptr, ptr %106, align 8
  %108 = extractvalue { ptr, ptr, ptr, i32 } %101, 1
  %109 = call ptr %107(ptr %108)
  %110 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %111 = extractvalue { ptr, ptr, ptr, i32 } %110, 0
  %112 = call ptr @llvm.invariant.start.p0(i64 112, ptr %111)
  %113 = extractvalue { ptr, ptr, ptr, i32 } %110, 3
  %114 = getelementptr ptr, ptr %111, i32 %113
  %115 = getelementptr ptr, ptr %114, i32 5
  %116 = load ptr, ptr %115, align 8
  %117 = extractvalue { ptr, ptr, ptr, i32 } %110, 1
  %118 = call ptr %116(ptr %117)
  %119 = alloca [0 x ptr], align 8
  %120 = call ptr @llvm.invariant.start.p0(i64 0, ptr %119)
  %121 = call ptr @llvm.invariant.start.p0(i64 184, ptr %90)
  %122 = getelementptr ptr, ptr %90, i32 %99
  %123 = getelementptr ptr, ptr %122, i32 1
  %124 = load ptr, ptr %123, align 8
  %125 = alloca [0 x ptr], align 8
  %126 = call ptr %124({ ptr, ptr, ptr, i32 } %100, ptr %125)
  %127 = call { ptr, ptr, ptr, i32 } %126({ ptr, ptr, ptr, i32 } %100, { ptr, ptr, ptr, i32 } %100, ptr %119)
  %128 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %127, ptr %128, align 8
  %129 = call ptr @llvm.invariant.start.p0(i64 16, ptr %128)
  %130 = alloca { ptr, ptr, ptr, i32 }, align 8
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %128, i32 0, i32 0
  %132 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 0
  %133 = load ptr, ptr %131, align 8
  store ptr %133, ptr %132, align 8
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %128, i32 0, i32 1
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 1
  %136 = load ptr, ptr %134, align 8
  store ptr %136, ptr %135, align 8
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %128, i32 0, i32 2
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 2
  %139 = load ptr, ptr %137, align 8
  store ptr %139, ptr %138, align 8
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %128, i32 0, i32 3
  %141 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 3
  %142 = load i32, ptr %140, align 4
  store i32 %142, ptr %141, align 4
  call void @set_offset(ptr %130, ptr @Iterator2)
  %143 = call ptr @llvm.invariant.start.p0(i64 24, ptr %130)
  %144 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %145 = extractvalue { ptr, ptr, ptr, i32 } %144, 0
  %146 = call ptr @llvm.invariant.start.p0(i64 112, ptr %145)
  %147 = extractvalue { ptr, ptr, ptr, i32 } %144, 3
  %148 = getelementptr ptr, ptr %145, i32 %147
  %149 = load ptr, ptr %148, align 8
  %150 = extractvalue { ptr, ptr, ptr, i32 } %144, 1
  %151 = call ptr %149(ptr %150)
  %152 = alloca { ptr, ptr, ptr, i32 }, align 8
  %153 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 0
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 0
  %155 = load ptr, ptr %153, align 8
  store ptr %155, ptr %154, align 8
  %156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 1
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 1
  %158 = load ptr, ptr %156, align 8
  store ptr %158, ptr %157, align 8
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 2
  %160 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 2
  %161 = load ptr, ptr %159, align 8
  store ptr %161, ptr %160, align 8
  %162 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 3
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 3
  %164 = load i32, ptr %162, align 4
  store i32 %164, ptr %163, align 4
  call void @set_offset(ptr %152, ptr @Iterator2)
  %165 = call ptr @llvm.invariant.start.p0(i64 24, ptr %152)
  %166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 0
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %151, i32 0, i32 0
  %168 = load ptr, ptr %166, align 8
  store ptr %168, ptr %167, align 8
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 1
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %151, i32 0, i32 1
  %171 = load ptr, ptr %169, align 8
  store ptr %171, ptr %170, align 8
  %172 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 2
  %173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %151, i32 0, i32 2
  %174 = load ptr, ptr %172, align 8
  store ptr %174, ptr %173, align 8
  %175 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 3
  %176 = getelementptr { ptr, ptr, ptr, i32 }, ptr %151, i32 0, i32 3
  %177 = load i32, ptr %175, align 4
  store i32 %177, ptr %176, align 4
  %178 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %179 = extractvalue { ptr, ptr, ptr, i32 } %178, 0
  %180 = call ptr @llvm.invariant.start.p0(i64 112, ptr %179)
  %181 = extractvalue { ptr, ptr, ptr, i32 } %178, 3
  %182 = getelementptr ptr, ptr %179, i32 %181
  %183 = getelementptr ptr, ptr %182, i32 2
  %184 = load ptr, ptr %183, align 8
  %185 = extractvalue { ptr, ptr, ptr, i32 } %178, 1
  %186 = call ptr %184(ptr %185)
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %186, i32 0, i32 0
  %188 = load ptr, ptr %187, align 8
  %189 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %188, 0
  %190 = getelementptr { ptr, ptr, ptr, i32 }, ptr %186, i32 0, i32 1
  %191 = load ptr, ptr %190, align 8
  %192 = insertvalue { ptr, ptr, ptr, i32 } %189, ptr %191, 1
  %193 = getelementptr { ptr, ptr, ptr, i32 }, ptr %186, i32 0, i32 2
  %194 = load ptr, ptr %193, align 8
  %195 = insertvalue { ptr, ptr, ptr, i32 } %192, ptr %194, 2
  %196 = getelementptr { ptr, ptr, ptr, i32 }, ptr %186, i32 0, i32 3
  %197 = load i32, ptr %196, align 4
  %198 = insertvalue { ptr, ptr, ptr, i32 } %195, i32 %197, 3
  %199 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %200 = extractvalue { ptr, ptr, ptr, i32 } %199, 0
  %201 = call ptr @llvm.invariant.start.p0(i64 112, ptr %200)
  %202 = extractvalue { ptr, ptr, ptr, i32 } %199, 3
  %203 = getelementptr ptr, ptr %200, i32 %202
  %204 = getelementptr ptr, ptr %203, i32 4
  %205 = load ptr, ptr %204, align 8
  %206 = extractvalue { ptr, ptr, ptr, i32 } %199, 1
  %207 = call ptr %205(ptr %206)
  %208 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %209 = extractvalue { ptr, ptr, ptr, i32 } %208, 0
  %210 = call ptr @llvm.invariant.start.p0(i64 112, ptr %209)
  %211 = extractvalue { ptr, ptr, ptr, i32 } %208, 3
  %212 = getelementptr ptr, ptr %209, i32 %211
  %213 = getelementptr ptr, ptr %212, i32 5
  %214 = load ptr, ptr %213, align 8
  %215 = extractvalue { ptr, ptr, ptr, i32 } %208, 1
  %216 = call ptr %214(ptr %215)
  %217 = alloca [0 x ptr], align 8
  %218 = call ptr @llvm.invariant.start.p0(i64 0, ptr %217)
  %219 = call ptr @llvm.invariant.start.p0(i64 184, ptr %188)
  %220 = getelementptr ptr, ptr %188, i32 %197
  %221 = getelementptr ptr, ptr %220, i32 1
  %222 = load ptr, ptr %221, align 8
  %223 = alloca [0 x ptr], align 8
  %224 = call ptr %222({ ptr, ptr, ptr, i32 } %198, ptr %223)
  %225 = call { ptr, ptr, ptr, i32 } %224({ ptr, ptr, ptr, i32 } %198, { ptr, ptr, ptr, i32 } %198, ptr %217)
  %226 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %225, ptr %226, align 8
  %227 = call ptr @llvm.invariant.start.p0(i64 16, ptr %226)
  %228 = alloca { ptr, ptr, ptr, i32 }, align 8
  %229 = getelementptr { ptr, ptr, ptr, i32 }, ptr %226, i32 0, i32 0
  %230 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 0
  %231 = load ptr, ptr %229, align 8
  store ptr %231, ptr %230, align 8
  %232 = getelementptr { ptr, ptr, ptr, i32 }, ptr %226, i32 0, i32 1
  %233 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 1
  %234 = load ptr, ptr %232, align 8
  store ptr %234, ptr %233, align 8
  %235 = getelementptr { ptr, ptr, ptr, i32 }, ptr %226, i32 0, i32 2
  %236 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 2
  %237 = load ptr, ptr %235, align 8
  store ptr %237, ptr %236, align 8
  %238 = getelementptr { ptr, ptr, ptr, i32 }, ptr %226, i32 0, i32 3
  %239 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 3
  %240 = load i32, ptr %238, align 4
  store i32 %240, ptr %239, align 4
  call void @set_offset(ptr %228, ptr @Iterator2)
  %241 = call ptr @llvm.invariant.start.p0(i64 24, ptr %228)
  %242 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %243 = extractvalue { ptr, ptr, ptr, i32 } %242, 0
  %244 = call ptr @llvm.invariant.start.p0(i64 112, ptr %243)
  %245 = extractvalue { ptr, ptr, ptr, i32 } %242, 3
  %246 = getelementptr ptr, ptr %243, i32 %245
  %247 = getelementptr ptr, ptr %246, i32 1
  %248 = load ptr, ptr %247, align 8
  %249 = extractvalue { ptr, ptr, ptr, i32 } %242, 1
  %250 = call ptr %248(ptr %249)
  %251 = alloca { ptr, ptr, ptr, i32 }, align 8
  %252 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 0
  %253 = getelementptr { ptr, ptr, ptr, i32 }, ptr %251, i32 0, i32 0
  %254 = load ptr, ptr %252, align 8
  store ptr %254, ptr %253, align 8
  %255 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 1
  %256 = getelementptr { ptr, ptr, ptr, i32 }, ptr %251, i32 0, i32 1
  %257 = load ptr, ptr %255, align 8
  store ptr %257, ptr %256, align 8
  %258 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 2
  %259 = getelementptr { ptr, ptr, ptr, i32 }, ptr %251, i32 0, i32 2
  %260 = load ptr, ptr %258, align 8
  store ptr %260, ptr %259, align 8
  %261 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 3
  %262 = getelementptr { ptr, ptr, ptr, i32 }, ptr %251, i32 0, i32 3
  %263 = load i32, ptr %261, align 4
  store i32 %263, ptr %262, align 4
  call void @set_offset(ptr %251, ptr @Iterator2)
  %264 = call ptr @llvm.invariant.start.p0(i64 24, ptr %251)
  %265 = getelementptr { ptr, ptr, ptr, i32 }, ptr %251, i32 0, i32 0
  %266 = getelementptr { ptr, ptr, ptr, i32 }, ptr %250, i32 0, i32 0
  %267 = load ptr, ptr %265, align 8
  store ptr %267, ptr %266, align 8
  %268 = getelementptr { ptr, ptr, ptr, i32 }, ptr %251, i32 0, i32 1
  %269 = getelementptr { ptr, ptr, ptr, i32 }, ptr %250, i32 0, i32 1
  %270 = load ptr, ptr %268, align 8
  store ptr %270, ptr %269, align 8
  %271 = getelementptr { ptr, ptr, ptr, i32 }, ptr %251, i32 0, i32 2
  %272 = getelementptr { ptr, ptr, ptr, i32 }, ptr %250, i32 0, i32 2
  %273 = load ptr, ptr %271, align 8
  store ptr %273, ptr %272, align 8
  %274 = getelementptr { ptr, ptr, ptr, i32 }, ptr %251, i32 0, i32 3
  %275 = getelementptr { ptr, ptr, ptr, i32 }, ptr %250, i32 0, i32 3
  %276 = load i32, ptr %274, align 4
  store i32 %276, ptr %275, align 4
  %277 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %278 = extractvalue { ptr, ptr, ptr, i32 } %277, 0
  %279 = call ptr @llvm.invariant.start.p0(i64 112, ptr %278)
  %280 = extractvalue { ptr, ptr, ptr, i32 } %277, 3
  %281 = getelementptr ptr, ptr %278, i32 %280
  %282 = load ptr, ptr %281, align 8
  %283 = extractvalue { ptr, ptr, ptr, i32 } %277, 1
  %284 = call ptr %282(ptr %283)
  %285 = getelementptr { ptr, ptr, ptr, i32 }, ptr %284, i32 0, i32 0
  %286 = load ptr, ptr %285, align 8
  %287 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %286, 0
  %288 = getelementptr { ptr, ptr, ptr, i32 }, ptr %284, i32 0, i32 1
  %289 = load ptr, ptr %288, align 8
  %290 = insertvalue { ptr, ptr, ptr, i32 } %287, ptr %289, 1
  %291 = getelementptr { ptr, ptr, ptr, i32 }, ptr %284, i32 0, i32 2
  %292 = load ptr, ptr %291, align 8
  %293 = insertvalue { ptr, ptr, ptr, i32 } %290, ptr %292, 2
  %294 = getelementptr { ptr, ptr, ptr, i32 }, ptr %284, i32 0, i32 3
  %295 = load i32, ptr %294, align 4
  %296 = insertvalue { ptr, ptr, ptr, i32 } %293, i32 %295, 3
  %297 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %298 = extractvalue { ptr, ptr, ptr, i32 } %297, 0
  %299 = call ptr @llvm.invariant.start.p0(i64 112, ptr %298)
  %300 = extractvalue { ptr, ptr, ptr, i32 } %297, 3
  %301 = getelementptr ptr, ptr %298, i32 %300
  %302 = getelementptr ptr, ptr %301, i32 4
  %303 = load ptr, ptr %302, align 8
  %304 = extractvalue { ptr, ptr, ptr, i32 } %297, 1
  %305 = call ptr %303(ptr %304)
  %306 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %307 = extractvalue { ptr, ptr, ptr, i32 } %306, 0
  %308 = call ptr @llvm.invariant.start.p0(i64 112, ptr %307)
  %309 = extractvalue { ptr, ptr, ptr, i32 } %306, 3
  %310 = getelementptr ptr, ptr %307, i32 %309
  %311 = getelementptr ptr, ptr %310, i32 5
  %312 = load ptr, ptr %311, align 8
  %313 = extractvalue { ptr, ptr, ptr, i32 } %306, 1
  %314 = call ptr %312(ptr %313)
  %315 = alloca [0 x ptr], align 8
  %316 = call ptr @llvm.invariant.start.p0(i64 0, ptr %315)
  %317 = call ptr @llvm.invariant.start.p0(i64 24, ptr %286)
  %318 = getelementptr ptr, ptr %286, i32 %295
  %319 = getelementptr ptr, ptr %318, i32 1
  %320 = load ptr, ptr %319, align 8
  %321 = alloca [0 x ptr], align 8
  %322 = call ptr %320({ ptr, ptr, ptr, i32 } %296, ptr %321)
  %323 = call { ptr, i160 } %322({ ptr, ptr, ptr, i32 } %296, { ptr, ptr, ptr, i32 } %296, ptr %315)
  %324 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %323, ptr %324, align 8
  %325 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %326 = extractvalue { ptr, ptr, ptr, i32 } %325, 0
  %327 = call ptr @llvm.invariant.start.p0(i64 112, ptr %326)
  %328 = extractvalue { ptr, ptr, ptr, i32 } %325, 3
  %329 = getelementptr ptr, ptr %326, i32 %328
  %330 = getelementptr ptr, ptr %329, i32 3
  %331 = load ptr, ptr %330, align 8
  %332 = extractvalue { ptr, ptr, ptr, i32 } %325, 1
  %333 = call ptr %331(ptr %332)
  %334 = getelementptr { ptr, i160 }, ptr %324, i32 0, i32 0
  %335 = getelementptr { ptr, i160 }, ptr %333, i32 0, i32 0
  %336 = load ptr, ptr %334, align 8
  store ptr %336, ptr %335, align 8
  %337 = getelementptr { ptr, i160 }, ptr %324, i32 0, i32 1
  %338 = getelementptr { ptr, i160 }, ptr %333, i32 0, i32 1
  %339 = load i160, ptr %337, align 4
  store i160 %339, ptr %338, align 4
  ret void
}

define { ptr, i160 } @ProductIterator2_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem7 = alloca ptr, align 8
  %.reg2mem11 = alloca i32, align 4
  %.reg2mem13 = alloca i32, align 4
  %.reg2mem16 = alloca i32, align 4
  %.reg2mem18 = alloca i32, align 4
  %.reg2mem20 = alloca ptr, align 8
  %.reg2mem22 = alloca ptr, align 8
  %.reg2mem28 = alloca { ptr, i160 }, align 8
  %.reg2mem30 = alloca ptr, align 8
  %.reg2mem32 = alloca ptr, align 8
  %.reg2mem34 = alloca i32, align 4
  %.reg2mem36 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @ProductIterator2)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 112, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 3
  %26 = load ptr, ptr %25, align 8
  %27 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %28 = call ptr %26(ptr %27)
  store ptr %28, ptr %.reg2mem22, align 8
  %.reload27 = load ptr, ptr %.reg2mem22, align 8
  %29 = getelementptr { ptr, i160 }, ptr %.reload27, i32 0, i32 0
  store ptr %29, ptr %.reg2mem20, align 8
  %30 = alloca i64, align 8
  %31 = alloca i1, align 1
  %32 = alloca { ptr, i160 }, align 8
  %33 = alloca [0 x ptr], align 8
  %34 = alloca [0 x ptr], align 8
  %35 = alloca { ptr, i160 }, align 8
  %36 = alloca i64, align 8
  %37 = alloca i1, align 1
  %38 = alloca [0 x ptr], align 8
  %39 = alloca [0 x ptr], align 8
  %40 = alloca { ptr, i160 }, align 8
  %41 = alloca [0 x ptr], align 8
  %42 = alloca [0 x ptr], align 8
  %43 = alloca { ptr, ptr, ptr, i32 }, align 8
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = alloca { ptr, ptr, ptr, i32 }, align 8
  %46 = alloca { ptr, i160 }, align 8
  %47 = alloca { ptr, ptr, ptr, i32 }, align 8
  %48 = alloca { ptr, i160 }, align 8
  %49 = alloca { ptr, i160 }, align 8
  %50 = alloca [2 x ptr], align 8
  %51 = alloca [2 x ptr], align 8
  %52 = alloca i160, align 8
  %53 = alloca ptr, align 8
  %54 = alloca i64, align 8
  br label %55

55:                                               ; preds = %301, %3
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %30, align 4
  %.reload21 = load ptr, ptr %.reg2mem20, align 8
  %56 = load ptr, ptr %.reload21, align 8
  %57 = ptrtoint ptr %56 to i64
  %58 = load ptr, ptr %30, align 8
  %59 = ptrtoint ptr %58 to i64
  %60 = icmp ne i64 %57, %59
  store i1 %60, ptr %31, align 1
  %61 = load i1, ptr %31, align 1
  br i1 %61, label %62, label %297

62:                                               ; preds = %55
  %.reload26 = load ptr, ptr %.reg2mem22, align 8
  %63 = getelementptr { ptr, i160 }, ptr %.reload26, i32 0, i32 0
  %64 = getelementptr { ptr, i160 }, ptr %32, i32 0, i32 0
  %65 = load ptr, ptr %63, align 8
  store ptr %65, ptr %64, align 8
  %.reload25 = load ptr, ptr %.reg2mem22, align 8
  %66 = getelementptr { ptr, i160 }, ptr %.reload25, i32 0, i32 1
  %67 = getelementptr { ptr, i160 }, ptr %32, i32 0, i32 1
  %68 = load i160, ptr %66, align 4
  store i160 %68, ptr %67, align 4
  call void @set_offset(ptr %32, ptr @Object)
  %69 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %70 = extractvalue { ptr, ptr, ptr, i32 } %69, 0
  %71 = call ptr @llvm.invariant.start.p0(i64 112, ptr %70)
  %72 = extractvalue { ptr, ptr, ptr, i32 } %69, 3
  %73 = getelementptr ptr, ptr %70, i32 %72
  %74 = getelementptr ptr, ptr %73, i32 1
  %75 = load ptr, ptr %74, align 8
  %76 = extractvalue { ptr, ptr, ptr, i32 } %69, 1
  %77 = call ptr %75(ptr %76)
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 0
  %79 = load ptr, ptr %78, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %79, 0
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 1
  %82 = load ptr, ptr %81, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } %80, ptr %82, 1
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 2
  %85 = load ptr, ptr %84, align 8
  %86 = insertvalue { ptr, ptr, ptr, i32 } %83, ptr %85, 2
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 3
  %88 = load i32, ptr %87, align 4
  %89 = insertvalue { ptr, ptr, ptr, i32 } %86, i32 %88, 3
  %90 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %91 = extractvalue { ptr, ptr, ptr, i32 } %90, 0
  %92 = call ptr @llvm.invariant.start.p0(i64 112, ptr %91)
  %93 = extractvalue { ptr, ptr, ptr, i32 } %90, 3
  %94 = getelementptr ptr, ptr %91, i32 %93
  %95 = getelementptr ptr, ptr %94, i32 4
  %96 = load ptr, ptr %95, align 8
  %97 = extractvalue { ptr, ptr, ptr, i32 } %90, 1
  %98 = call ptr %96(ptr %97)
  %99 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %100 = extractvalue { ptr, ptr, ptr, i32 } %99, 0
  %101 = call ptr @llvm.invariant.start.p0(i64 112, ptr %100)
  %102 = extractvalue { ptr, ptr, ptr, i32 } %99, 3
  %103 = getelementptr ptr, ptr %100, i32 %102
  %104 = getelementptr ptr, ptr %103, i32 5
  %105 = load ptr, ptr %104, align 8
  %106 = extractvalue { ptr, ptr, ptr, i32 } %99, 1
  %107 = call ptr %105(ptr %106)
  %108 = call ptr @llvm.invariant.start.p0(i64 0, ptr %33)
  %109 = call ptr @llvm.invariant.start.p0(i64 24, ptr %79)
  %110 = getelementptr ptr, ptr %79, i32 %88
  %111 = getelementptr ptr, ptr %110, i32 1
  %112 = load ptr, ptr %111, align 8
  %113 = call ptr %112({ ptr, ptr, ptr, i32 } %89, ptr %34)
  %114 = call { ptr, i160 } %113({ ptr, ptr, ptr, i32 } %89, { ptr, ptr, ptr, i32 } %89, ptr %33)
  store { ptr, i160 } %114, ptr %35, align 8
  %115 = getelementptr { ptr, i160 }, ptr %35, i32 0, i32 0
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %36, align 4
  %116 = load ptr, ptr %115, align 8
  %117 = ptrtoint ptr %116 to i64
  %118 = load ptr, ptr %36, align 8
  %119 = ptrtoint ptr %118 to i64
  %120 = icmp ne i64 %117, %119
  store i1 %120, ptr %37, align 1
  %121 = load i1, ptr %37, align 1
  %122 = zext i1 %121 to i32
  store i32 %122, ptr %.reg2mem18, align 4
  %123 = xor i1 %121, true
  %124 = zext i1 %123 to i32
  store i32 %124, ptr %.reg2mem16, align 4
  br i1 %121, label %125, label %126

125:                                              ; preds = %62
  br label %296

126:                                              ; preds = %62
  %127 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %128 = extractvalue { ptr, ptr, ptr, i32 } %127, 0
  %129 = call ptr @llvm.invariant.start.p0(i64 112, ptr %128)
  %130 = extractvalue { ptr, ptr, ptr, i32 } %127, 3
  %131 = getelementptr ptr, ptr %128, i32 %130
  %132 = load ptr, ptr %131, align 8
  %133 = extractvalue { ptr, ptr, ptr, i32 } %127, 1
  %134 = call ptr %132(ptr %133)
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 0
  %136 = load ptr, ptr %135, align 8
  %137 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %136, 0
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 1
  %139 = load ptr, ptr %138, align 8
  %140 = insertvalue { ptr, ptr, ptr, i32 } %137, ptr %139, 1
  %141 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 2
  %142 = load ptr, ptr %141, align 8
  %143 = insertvalue { ptr, ptr, ptr, i32 } %140, ptr %142, 2
  %144 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 3
  %145 = load i32, ptr %144, align 4
  %146 = insertvalue { ptr, ptr, ptr, i32 } %143, i32 %145, 3
  %147 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %148 = extractvalue { ptr, ptr, ptr, i32 } %147, 0
  %149 = call ptr @llvm.invariant.start.p0(i64 112, ptr %148)
  %150 = extractvalue { ptr, ptr, ptr, i32 } %147, 3
  %151 = getelementptr ptr, ptr %148, i32 %150
  %152 = getelementptr ptr, ptr %151, i32 4
  %153 = load ptr, ptr %152, align 8
  %154 = extractvalue { ptr, ptr, ptr, i32 } %147, 1
  %155 = call ptr %153(ptr %154)
  %156 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %157 = extractvalue { ptr, ptr, ptr, i32 } %156, 0
  %158 = call ptr @llvm.invariant.start.p0(i64 112, ptr %157)
  %159 = extractvalue { ptr, ptr, ptr, i32 } %156, 3
  %160 = getelementptr ptr, ptr %157, i32 %159
  %161 = getelementptr ptr, ptr %160, i32 5
  %162 = load ptr, ptr %161, align 8
  %163 = extractvalue { ptr, ptr, ptr, i32 } %156, 1
  %164 = call ptr %162(ptr %163)
  %165 = call ptr @llvm.invariant.start.p0(i64 0, ptr %38)
  %166 = call ptr @llvm.invariant.start.p0(i64 24, ptr %136)
  %167 = getelementptr ptr, ptr %136, i32 %145
  %168 = getelementptr ptr, ptr %167, i32 1
  %169 = load ptr, ptr %168, align 8
  %170 = call ptr %169({ ptr, ptr, ptr, i32 } %146, ptr %39)
  %171 = call { ptr, i160 } %170({ ptr, ptr, ptr, i32 } %146, { ptr, ptr, ptr, i32 } %146, ptr %38)
  store { ptr, i160 } %171, ptr %40, align 8
  %172 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %173 = extractvalue { ptr, ptr, ptr, i32 } %172, 0
  %174 = call ptr @llvm.invariant.start.p0(i64 112, ptr %173)
  %175 = extractvalue { ptr, ptr, ptr, i32 } %172, 3
  %176 = getelementptr ptr, ptr %173, i32 %175
  %177 = getelementptr ptr, ptr %176, i32 3
  %178 = load ptr, ptr %177, align 8
  %179 = extractvalue { ptr, ptr, ptr, i32 } %172, 1
  %180 = call ptr %178(ptr %179)
  %181 = getelementptr { ptr, i160 }, ptr %40, i32 0, i32 0
  %182 = getelementptr { ptr, i160 }, ptr %180, i32 0, i32 0
  %183 = load ptr, ptr %181, align 8
  store ptr %183, ptr %182, align 8
  %184 = getelementptr { ptr, i160 }, ptr %40, i32 0, i32 1
  %185 = getelementptr { ptr, i160 }, ptr %180, i32 0, i32 1
  %186 = load i160, ptr %184, align 4
  store i160 %186, ptr %185, align 4
  %187 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %188 = extractvalue { ptr, ptr, ptr, i32 } %187, 0
  %189 = call ptr @llvm.invariant.start.p0(i64 112, ptr %188)
  %190 = extractvalue { ptr, ptr, ptr, i32 } %187, 3
  %191 = getelementptr ptr, ptr %188, i32 %190
  %192 = getelementptr ptr, ptr %191, i32 2
  %193 = load ptr, ptr %192, align 8
  %194 = extractvalue { ptr, ptr, ptr, i32 } %187, 1
  %195 = call ptr %193(ptr %194)
  %196 = getelementptr { ptr, ptr, ptr, i32 }, ptr %195, i32 0, i32 0
  %197 = load ptr, ptr %196, align 8
  %198 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %197, 0
  %199 = getelementptr { ptr, ptr, ptr, i32 }, ptr %195, i32 0, i32 1
  %200 = load ptr, ptr %199, align 8
  %201 = insertvalue { ptr, ptr, ptr, i32 } %198, ptr %200, 1
  %202 = getelementptr { ptr, ptr, ptr, i32 }, ptr %195, i32 0, i32 2
  %203 = load ptr, ptr %202, align 8
  %204 = insertvalue { ptr, ptr, ptr, i32 } %201, ptr %203, 2
  %205 = getelementptr { ptr, ptr, ptr, i32 }, ptr %195, i32 0, i32 3
  %206 = load i32, ptr %205, align 4
  %207 = insertvalue { ptr, ptr, ptr, i32 } %204, i32 %206, 3
  %208 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %209 = extractvalue { ptr, ptr, ptr, i32 } %208, 0
  %210 = call ptr @llvm.invariant.start.p0(i64 112, ptr %209)
  %211 = extractvalue { ptr, ptr, ptr, i32 } %208, 3
  %212 = getelementptr ptr, ptr %209, i32 %211
  %213 = getelementptr ptr, ptr %212, i32 4
  %214 = load ptr, ptr %213, align 8
  %215 = extractvalue { ptr, ptr, ptr, i32 } %208, 1
  %216 = call ptr %214(ptr %215)
  %217 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %218 = extractvalue { ptr, ptr, ptr, i32 } %217, 0
  %219 = call ptr @llvm.invariant.start.p0(i64 112, ptr %218)
  %220 = extractvalue { ptr, ptr, ptr, i32 } %217, 3
  %221 = getelementptr ptr, ptr %218, i32 %220
  %222 = getelementptr ptr, ptr %221, i32 5
  %223 = load ptr, ptr %222, align 8
  %224 = extractvalue { ptr, ptr, ptr, i32 } %217, 1
  %225 = call ptr %223(ptr %224)
  %226 = call ptr @llvm.invariant.start.p0(i64 0, ptr %41)
  %227 = call ptr @llvm.invariant.start.p0(i64 184, ptr %197)
  %228 = getelementptr ptr, ptr %197, i32 %206
  %229 = getelementptr ptr, ptr %228, i32 1
  %230 = load ptr, ptr %229, align 8
  %231 = call ptr %230({ ptr, ptr, ptr, i32 } %207, ptr %42)
  %232 = call { ptr, ptr, ptr, i32 } %231({ ptr, ptr, ptr, i32 } %207, { ptr, ptr, ptr, i32 } %207, ptr %41)
  store { ptr, ptr, ptr, i32 } %232, ptr %43, align 8
  %233 = call ptr @llvm.invariant.start.p0(i64 16, ptr %43)
  %234 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 0
  %235 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 0
  %236 = load ptr, ptr %234, align 8
  store ptr %236, ptr %235, align 8
  %237 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 1
  %238 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 1
  %239 = load ptr, ptr %237, align 8
  store ptr %239, ptr %238, align 8
  %240 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 2
  %241 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 2
  %242 = load ptr, ptr %240, align 8
  store ptr %242, ptr %241, align 8
  %243 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 3
  %244 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 3
  %245 = load i32, ptr %243, align 4
  store i32 %245, ptr %244, align 4
  call void @set_offset(ptr %44, ptr @Iterator2)
  %246 = call ptr @llvm.invariant.start.p0(i64 24, ptr %44)
  %247 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %248 = extractvalue { ptr, ptr, ptr, i32 } %247, 0
  %249 = call ptr @llvm.invariant.start.p0(i64 112, ptr %248)
  %250 = extractvalue { ptr, ptr, ptr, i32 } %247, 3
  %251 = getelementptr ptr, ptr %248, i32 %250
  %252 = getelementptr ptr, ptr %251, i32 1
  %253 = load ptr, ptr %252, align 8
  %254 = extractvalue { ptr, ptr, ptr, i32 } %247, 1
  %255 = call ptr %253(ptr %254)
  %256 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 0
  %257 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %258 = load ptr, ptr %256, align 8
  store ptr %258, ptr %257, align 8
  %259 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 1
  %260 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %261 = load ptr, ptr %259, align 8
  store ptr %261, ptr %260, align 8
  %262 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 2
  %263 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %264 = load ptr, ptr %262, align 8
  store ptr %264, ptr %263, align 8
  %265 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 3
  %266 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %267 = load i32, ptr %265, align 4
  store i32 %267, ptr %266, align 4
  call void @set_offset(ptr %45, ptr @Iterator2)
  %268 = call ptr @llvm.invariant.start.p0(i64 24, ptr %45)
  %269 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %270 = getelementptr { ptr, ptr, ptr, i32 }, ptr %255, i32 0, i32 0
  %271 = load ptr, ptr %269, align 8
  store ptr %271, ptr %270, align 8
  %272 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %273 = getelementptr { ptr, ptr, ptr, i32 }, ptr %255, i32 0, i32 1
  %274 = load ptr, ptr %272, align 8
  store ptr %274, ptr %273, align 8
  %275 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %276 = getelementptr { ptr, ptr, ptr, i32 }, ptr %255, i32 0, i32 2
  %277 = load ptr, ptr %275, align 8
  store ptr %277, ptr %276, align 8
  %278 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %279 = getelementptr { ptr, ptr, ptr, i32 }, ptr %255, i32 0, i32 3
  %280 = load i32, ptr %278, align 4
  store i32 %280, ptr %279, align 4
  %281 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %282 = extractvalue { ptr, ptr, ptr, i32 } %281, 0
  %283 = call ptr @llvm.invariant.start.p0(i64 112, ptr %282)
  %284 = extractvalue { ptr, ptr, ptr, i32 } %281, 3
  %285 = getelementptr ptr, ptr %282, i32 %284
  %286 = getelementptr ptr, ptr %285, i32 3
  %287 = load ptr, ptr %286, align 8
  %288 = extractvalue { ptr, ptr, ptr, i32 } %281, 1
  %289 = call ptr %287(ptr %288)
  %290 = getelementptr { ptr, i160 }, ptr %289, i32 0, i32 0
  %.reload24 = load ptr, ptr %.reg2mem22, align 8
  %291 = getelementptr { ptr, i160 }, ptr %.reload24, i32 0, i32 0
  %292 = load ptr, ptr %290, align 8
  store ptr %292, ptr %291, align 8
  %293 = getelementptr { ptr, i160 }, ptr %289, i32 0, i32 1
  %.reload23 = load ptr, ptr %.reg2mem22, align 8
  %294 = getelementptr { ptr, i160 }, ptr %.reload23, i32 0, i32 1
  %295 = load i160, ptr %293, align 4
  store i160 %295, ptr %294, align 4
  br label %296

296:                                              ; preds = %126, %125
  %.reload17 = load i32, ptr %.reg2mem16, align 4
  %.reload19 = load i32, ptr %.reg2mem18, align 4
  store ptr %35, ptr %.reg2mem30, align 8
  store ptr %32, ptr %.reg2mem32, align 8
  store i32 %.reload17, ptr %.reg2mem34, align 4
  store i32 %.reload19, ptr %.reg2mem36, align 4
  br label %298

297:                                              ; preds = %55
  store ptr poison, ptr %.reg2mem30, align 8
  store ptr poison, ptr %.reg2mem32, align 8
  store i32 0, ptr %.reg2mem34, align 4
  store i32 2, ptr %.reg2mem36, align 4
  br label %298

298:                                              ; preds = %297, %296
  %.reload37 = load i32, ptr %.reg2mem36, align 4
  %.reload35 = load i32, ptr %.reg2mem34, align 4
  %.reload33 = load ptr, ptr %.reg2mem32, align 8
  %.reload31 = load ptr, ptr %.reg2mem30, align 8
  store i32 %.reload37, ptr %.reg2mem13, align 4
  store i32 %.reload35, ptr %.reg2mem11, align 4
  store ptr %.reload33, ptr %.reg2mem7, align 8
  store ptr %.reload31, ptr %.reg2mem3, align 8
  br label %299

299:                                              ; preds = %298
  %.reload12 = load i32, ptr %.reg2mem11, align 4
  %300 = trunc i32 %.reload12 to i1
  %.reload6 = load ptr, ptr %.reg2mem3, align 8
  %.reload10 = load ptr, ptr %.reg2mem7, align 8
  %.reload15 = load i32, ptr %.reg2mem13, align 4
  br i1 %300, label %301, label %302

301:                                              ; preds = %299
  br label %55

302:                                              ; preds = %299
  %.reload14 = load i32, ptr %.reg2mem13, align 4
  %303 = zext i32 %.reload14 to i64
  %304 = trunc i64 %303 to i32
  switch i32 %304, label %412 [
    i32 1, label %305
  ]

305:                                              ; preds = %302
  %.reload5 = load ptr, ptr %.reg2mem3, align 8
  %306 = getelementptr { ptr, i160 }, ptr %.reload5, i32 0, i32 0
  %307 = getelementptr { ptr, i160 }, ptr %46, i32 0, i32 0
  %308 = load ptr, ptr %306, align 8
  store ptr %308, ptr %307, align 8
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %309 = getelementptr { ptr, i160 }, ptr %.reload4, i32 0, i32 1
  %310 = getelementptr { ptr, i160 }, ptr %46, i32 0, i32 1
  %311 = load i160, ptr %309, align 4
  store i160 %311, ptr %310, align 4
  call void @set_offset(ptr %46, ptr @Object)
  %312 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %313 = extractvalue { ptr, ptr, ptr, i32 } %312, 0
  %314 = call ptr @llvm.invariant.start.p0(i64 112, ptr %313)
  %315 = extractvalue { ptr, ptr, ptr, i32 } %312, 3
  %316 = getelementptr ptr, ptr %313, i32 %315
  %317 = getelementptr ptr, ptr %316, i32 4
  %318 = load ptr, ptr %317, align 8
  %319 = extractvalue { ptr, ptr, ptr, i32 } %312, 1
  %320 = call ptr %318(ptr %319)
  %321 = load ptr, ptr %320, align 8
  %322 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %323 = extractvalue { ptr, ptr, ptr, i32 } %322, 0
  %324 = call ptr @llvm.invariant.start.p0(i64 112, ptr %323)
  %325 = extractvalue { ptr, ptr, ptr, i32 } %322, 3
  %326 = getelementptr ptr, ptr %323, i32 %325
  %327 = getelementptr ptr, ptr %326, i32 5
  %328 = load ptr, ptr %327, align 8
  %329 = extractvalue { ptr, ptr, ptr, i32 } %322, 1
  %330 = call ptr %328(ptr %329)
  %331 = load ptr, ptr %330, align 8
  %332 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr, i160 }, { ptr, i160 }, ptr, ptr }, ptr null, i32 1) to i64))
  %333 = getelementptr { { ptr, i160 }, { ptr, i160 }, ptr, ptr }, ptr %332, i32 0, i32 2
  store ptr %321, ptr %333, align 8
  %334 = getelementptr { { ptr, i160 }, { ptr, i160 }, ptr, ptr }, ptr %332, i32 0, i32 3
  store ptr %331, ptr %334, align 8
  %335 = getelementptr { { ptr, i160 }, { ptr, i160 }, ptr, ptr }, ptr %332, i32 0, i32 2
  %336 = call ptr @llvm.invariant.start.p0(i64 16, ptr %335)
  %337 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 1
  %338 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 3
  store ptr @Pair, ptr %47, align 8
  store ptr %332, ptr %337, align 8
  store i32 7, ptr %338, align 4
  %339 = call ptr @llvm.invariant.start.p0(i64 16, ptr %47)
  %.reload9 = load ptr, ptr %.reg2mem7, align 8
  %340 = getelementptr { ptr, i160 }, ptr %.reload9, i32 0, i32 0
  %341 = getelementptr { ptr, i160 }, ptr %48, i32 0, i32 0
  %342 = load ptr, ptr %340, align 8
  store ptr %342, ptr %341, align 8
  %.reload8 = load ptr, ptr %.reg2mem7, align 8
  %343 = getelementptr { ptr, i160 }, ptr %.reload8, i32 0, i32 1
  %344 = getelementptr { ptr, i160 }, ptr %48, i32 0, i32 1
  %345 = load i160, ptr %343, align 4
  store i160 %345, ptr %344, align 4
  call void @set_offset(ptr %48, ptr @Object)
  %346 = getelementptr { ptr, i160 }, ptr %48, i32 0, i32 0
  %347 = load ptr, ptr %346, align 8
  %348 = insertvalue { ptr, i160 } undef, ptr %347, 0
  %349 = getelementptr { ptr, i160 }, ptr %48, i32 0, i32 1
  %350 = load i160, ptr %349, align 4
  %351 = insertvalue { ptr, i160 } %348, i160 %350, 1
  %352 = getelementptr { ptr, i160 }, ptr %46, i32 0, i32 0
  %353 = getelementptr { ptr, i160 }, ptr %49, i32 0, i32 0
  %354 = load ptr, ptr %352, align 8
  store ptr %354, ptr %353, align 8
  %355 = getelementptr { ptr, i160 }, ptr %46, i32 0, i32 1
  %356 = getelementptr { ptr, i160 }, ptr %49, i32 0, i32 1
  %357 = load i160, ptr %355, align 4
  store i160 %357, ptr %356, align 4
  call void @set_offset(ptr %49, ptr @Object)
  %358 = getelementptr { ptr, i160 }, ptr %49, i32 0, i32 0
  %359 = load ptr, ptr %358, align 8
  %360 = insertvalue { ptr, i160 } undef, ptr %359, 0
  %361 = getelementptr { ptr, i160 }, ptr %49, i32 0, i32 1
  %362 = load i160, ptr %361, align 4
  %363 = insertvalue { ptr, i160 } %360, i160 %362, 1
  %364 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 0
  %365 = load ptr, ptr %364, align 8
  %366 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %365, 0
  %367 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 1
  %368 = load ptr, ptr %367, align 8
  %369 = insertvalue { ptr, ptr, ptr, i32 } %366, ptr %368, 1
  %370 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 2
  %371 = load ptr, ptr %370, align 8
  %372 = insertvalue { ptr, ptr, ptr, i32 } %369, ptr %371, 2
  %373 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 3
  %374 = load i32, ptr %373, align 4
  %375 = insertvalue { ptr, ptr, ptr, i32 } %372, i32 %374, 3
  %376 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %377 = extractvalue { ptr, ptr, ptr, i32 } %376, 0
  %378 = call ptr @llvm.invariant.start.p0(i64 112, ptr %377)
  %379 = extractvalue { ptr, ptr, ptr, i32 } %376, 3
  %380 = getelementptr ptr, ptr %377, i32 %379
  %381 = getelementptr ptr, ptr %380, i32 4
  %382 = load ptr, ptr %381, align 8
  %383 = extractvalue { ptr, ptr, ptr, i32 } %376, 1
  %384 = call ptr %382(ptr %383)
  %385 = load ptr, ptr %384, align 8
  %386 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %387 = extractvalue { ptr, ptr, ptr, i32 } %386, 0
  %388 = call ptr @llvm.invariant.start.p0(i64 112, ptr %387)
  %389 = extractvalue { ptr, ptr, ptr, i32 } %386, 3
  %390 = getelementptr ptr, ptr %387, i32 %389
  %391 = getelementptr ptr, ptr %390, i32 5
  %392 = load ptr, ptr %391, align 8
  %393 = extractvalue { ptr, ptr, ptr, i32 } %386, 1
  %394 = call ptr %392(ptr %393)
  %395 = load ptr, ptr %394, align 8
  %396 = call ptr @llvm.invariant.start.p0(i64 16, ptr %50)
  %397 = getelementptr [2 x ptr], ptr %50, i32 0, i32 1
  store ptr %395, ptr %397, align 8
  %398 = getelementptr [2 x ptr], ptr %50, i32 0, i32 0
  store ptr %385, ptr %398, align 8
  %399 = call ptr @llvm.invariant.start.p0(i64 80, ptr %365)
  %400 = getelementptr ptr, ptr %365, i32 %374
  %401 = getelementptr ptr, ptr %400, i32 4
  %402 = load ptr, ptr %401, align 8
  %403 = getelementptr [2 x ptr], ptr %51, i32 0, i32 0
  store ptr %347, ptr %403, align 8
  %404 = getelementptr [2 x ptr], ptr %51, i32 0, i32 1
  store ptr %359, ptr %404, align 8
  %405 = call ptr %402({ ptr, ptr, ptr, i32 } %375, ptr %51, { ptr, i160 } %351, { ptr, i160 } %363)
  call void %405({ ptr, ptr, ptr, i32 } %375, { ptr, ptr, ptr, i32 } %375, ptr %50, { ptr, i160 } %351, { ptr, i160 } %363)
  %406 = getelementptr { ptr, i160 }, ptr %47, i32 0, i32 0
  %407 = load ptr, ptr %406, align 8
  %408 = insertvalue { ptr, i160 } undef, ptr %407, 0
  %409 = getelementptr { ptr, i160 }, ptr %47, i32 0, i32 1
  %410 = load i160, ptr %409, align 4
  %411 = insertvalue { ptr, i160 } %408, i160 %410, 1
  store { ptr, i160 } %411, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem28, align 8
  br label %418

412:                                              ; preds = %302
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %54, align 4
  %413 = load i64, ptr %54, align 4
  store i64 %413, ptr %53, align 4
  %414 = load ptr, ptr %53, align 8
  %415 = insertvalue { ptr, i160 } undef, ptr %414, 0
  %416 = load i160, ptr %52, align 4
  %417 = insertvalue { ptr, i160 } %415, i160 %416, 1
  store { ptr, i160 } %417, ptr %.reg2mem, align 8
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  store { ptr, i160 } %.reload, ptr %.reg2mem28, align 8
  br label %418

418:                                              ; preds = %412, %305
  %.reload29 = load { ptr, i160 }, ptr %.reg2mem28, align 8
  ret { ptr, i160 } %.reload29
}

define ptr @ZipIterable2_field_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, ptr, ptr, ptr }, ptr %0, i32 0, i32 0
  ret ptr %2
}

define ptr @ZipIterable2_field_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, ptr, ptr, ptr }, ptr %0, i32 0, i32 1
  ret ptr %2
}

define ptr @ZipIterable2_field_ZipIterable2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, ptr, ptr, ptr }, ptr %0, i32 0, i32 2
  ret ptr %2
}

define ptr @ZipIterable2_field_ZipIterable2_1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, ptr, ptr, ptr }, ptr %0, i32 0, i32 3
  ret ptr %2
}

define ptr @ZipIterable2_field_ZipIterable2_2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, ptr, ptr, ptr }, ptr %0, i32 0, i32 4
  ret ptr %2
}

define ptr @ZipIterable2_B_init_firstIterable2T_secondIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2, { ptr, ptr, ptr, i32 } %3) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = getelementptr [2 x ptr], ptr %1, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr ptr, ptr %7, i32 1
  %9 = getelementptr ptr, ptr %7, i32 2
  %10 = getelementptr ptr, ptr %7, i32 3
  %11 = getelementptr ptr, ptr %7, i32 4
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %15)
  %17 = getelementptr [2 x ptr], ptr %1, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr ptr, ptr %18, i32 1
  %20 = getelementptr ptr, ptr %18, i32 2
  %21 = getelementptr ptr, ptr %18, i32 3
  %22 = getelementptr ptr, ptr %18, i32 4
  %23 = load i64, ptr %19, align 4
  %24 = load i64, ptr %20, align 4
  %25 = load ptr, ptr %21, align 8
  %26 = load ptr, ptr %22, align 8
  %27 = call i1 @subtype_test_wrapper(ptr %25, i64 %24, i64 %23, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %26)
  %28 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %29 = getelementptr [52 x ptr], ptr %28, i32 0, i32 17
  %30 = getelementptr ptr, ptr %29, i32 7
  %31 = load ptr, ptr %30, align 8
  ret ptr %31
}

define ptr @ZipIterable2_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [52 x ptr], ptr %4, i32 0, i32 18
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @ZipIterable2_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 19
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @ZipIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, i160 } %2, { ptr } %3) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = getelementptr [2 x ptr], ptr %1, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr ptr, ptr %7, i32 1
  %9 = getelementptr ptr, ptr %7, i32 2
  %10 = getelementptr ptr, ptr %7, i32 3
  %11 = getelementptr ptr, ptr %7, i32 4
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 9197944775169318296, i64 ptrtoint (ptr @Pair to i64), ptr %15)
  %17 = getelementptr [2 x ptr], ptr %1, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr ptr, ptr %18, i32 1
  %20 = getelementptr ptr, ptr %18, i32 2
  %21 = getelementptr ptr, ptr %18, i32 3
  %22 = getelementptr ptr, ptr %18, i32 4
  %23 = load i64, ptr %19, align 4
  %24 = load i64, ptr %20, align 4
  %25 = load ptr, ptr %21, align 8
  %26 = load ptr, ptr %22, align 8
  %27 = call i1 @subtype_test_wrapper(ptr %25, i64 %24, i64 %23, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %26)
  %28 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %29 = getelementptr [52 x ptr], ptr %28, i32 0, i32 20
  %30 = getelementptr ptr, ptr %29, i32 7
  %31 = load ptr, ptr %30, align 8
  ret ptr %31
}

define ptr @ZipIterable2_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 21
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @ZipIterable2_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 22
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @ZipIterable2_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 23
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @ZipIterable2_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 24
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @ZipIterable2_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 25
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @ZipIterable2_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 26
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @ZipIterable2_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 27
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @ZipIterable2_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [52 x ptr], ptr %16, i32 0, i32 28
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define void @ZipIterable2_init_firstIterable2T_secondIterable2U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @ZipIterable2)
  %21 = call ptr @llvm.invariant.start.p0(i64 24, ptr %8)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %22, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 16, ptr %22)
  %24 = alloca { ptr, ptr, ptr, i32 }, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %36 = load i32, ptr %34, align 4
  store i32 %36, ptr %35, align 4
  call void @set_offset(ptr %24, ptr @Iterable2)
  %37 = call ptr @llvm.invariant.start.p0(i64 24, ptr %24)
  %38 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %39 = extractvalue { ptr, ptr, ptr, i32 } %38, 0
  %40 = call ptr @llvm.invariant.start.p0(i64 416, ptr %39)
  %41 = extractvalue { ptr, ptr, ptr, i32 } %38, 3
  %42 = getelementptr ptr, ptr %39, i32 %41
  %43 = load ptr, ptr %42, align 8
  %44 = extractvalue { ptr, ptr, ptr, i32 } %38, 1
  %45 = call ptr %43(ptr %44)
  %46 = alloca { ptr, ptr, ptr, i32 }, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %49 = load ptr, ptr %47, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %52 = load ptr, ptr %50, align 8
  store ptr %52, ptr %51, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %55 = load ptr, ptr %53, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %58 = load i32, ptr %56, align 4
  store i32 %58, ptr %57, align 4
  call void @set_offset(ptr %46, ptr @Iterable2)
  %59 = call ptr @llvm.invariant.start.p0(i64 24, ptr %46)
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %62 = load ptr, ptr %60, align 8
  store ptr %62, ptr %61, align 8
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %65 = load ptr, ptr %63, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %68 = load ptr, ptr %66, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %71 = load i32, ptr %69, align 4
  store i32 %71, ptr %70, align 4
  %72 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %72, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 16, ptr %72)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 0
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 1
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 2
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %83 = load ptr, ptr %81, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 3
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %86 = load i32, ptr %84, align 4
  store i32 %86, ptr %85, align 4
  call void @set_offset(ptr %74, ptr @Iterable2)
  %87 = call ptr @llvm.invariant.start.p0(i64 24, ptr %74)
  %88 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %89 = extractvalue { ptr, ptr, ptr, i32 } %88, 0
  %90 = call ptr @llvm.invariant.start.p0(i64 416, ptr %89)
  %91 = extractvalue { ptr, ptr, ptr, i32 } %88, 3
  %92 = getelementptr ptr, ptr %89, i32 %91
  %93 = getelementptr ptr, ptr %92, i32 1
  %94 = load ptr, ptr %93, align 8
  %95 = extractvalue { ptr, ptr, ptr, i32 } %88, 1
  %96 = call ptr %94(ptr %95)
  %97 = alloca { ptr, ptr, ptr, i32 }, align 8
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 0
  %100 = load ptr, ptr %98, align 8
  store ptr %100, ptr %99, align 8
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %103 = load ptr, ptr %101, align 8
  store ptr %103, ptr %102, align 8
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 2
  %106 = load ptr, ptr %104, align 8
  store ptr %106, ptr %105, align 8
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  %109 = load i32, ptr %107, align 4
  store i32 %109, ptr %108, align 4
  call void @set_offset(ptr %97, ptr @Iterable2)
  %110 = call ptr @llvm.invariant.start.p0(i64 24, ptr %97)
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 0
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 0
  %113 = load ptr, ptr %111, align 8
  store ptr %113, ptr %112, align 8
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 1
  %116 = load ptr, ptr %114, align 8
  store ptr %116, ptr %115, align 8
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 2
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 2
  %119 = load ptr, ptr %117, align 8
  store ptr %119, ptr %118, align 8
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 3
  %122 = load i32, ptr %120, align 4
  store i32 %122, ptr %121, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ZipIterable2_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @ZipIterable2)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 416, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %27 = call ptr %25(ptr %26)
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %29, 0
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %32 = load ptr, ptr %31, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %32, 1
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %35 = load ptr, ptr %34, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %35, 2
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %38 = load i32, ptr %37, align 4
  %39 = insertvalue { ptr, ptr, ptr, i32 } %36, i32 %38, 3
  %40 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %41 = extractvalue { ptr, ptr, ptr, i32 } %40, 0
  %42 = call ptr @llvm.invariant.start.p0(i64 416, ptr %41)
  %43 = extractvalue { ptr, ptr, ptr, i32 } %40, 3
  %44 = getelementptr ptr, ptr %41, i32 %43
  %45 = getelementptr ptr, ptr %44, i32 2
  %46 = load ptr, ptr %45, align 8
  %47 = extractvalue { ptr, ptr, ptr, i32 } %40, 1
  %48 = call ptr %46(ptr %47)
  %49 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %50 = extractvalue { ptr, ptr, ptr, i32 } %49, 0
  %51 = call ptr @llvm.invariant.start.p0(i64 416, ptr %50)
  %52 = extractvalue { ptr, ptr, ptr, i32 } %49, 3
  %53 = getelementptr ptr, ptr %50, i32 %52
  %54 = getelementptr ptr, ptr %53, i32 3
  %55 = load ptr, ptr %54, align 8
  %56 = extractvalue { ptr, ptr, ptr, i32 } %49, 1
  %57 = call ptr %55(ptr %56)
  %58 = alloca [0 x ptr], align 8
  %59 = call ptr @llvm.invariant.start.p0(i64 0, ptr %58)
  %60 = call ptr @llvm.invariant.start.p0(i64 184, ptr %29)
  %61 = getelementptr ptr, ptr %29, i32 %38
  %62 = getelementptr ptr, ptr %61, i32 1
  %63 = load ptr, ptr %62, align 8
  %64 = alloca [0 x ptr], align 8
  %65 = call ptr %63({ ptr, ptr, ptr, i32 } %39, ptr %64)
  %66 = call { ptr, ptr, ptr, i32 } %65({ ptr, ptr, ptr, i32 } %39, { ptr, ptr, ptr, i32 } %39, ptr %58)
  %67 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %66, ptr %67, align 8
  %68 = call ptr @llvm.invariant.start.p0(i64 16, ptr %67)
  %69 = alloca { ptr, ptr, ptr, i32 }, align 8
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 0
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %69, i32 0, i32 0
  %72 = load ptr, ptr %70, align 8
  store ptr %72, ptr %71, align 8
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 1
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %69, i32 0, i32 1
  %75 = load ptr, ptr %73, align 8
  store ptr %75, ptr %74, align 8
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 2
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %69, i32 0, i32 2
  %78 = load ptr, ptr %76, align 8
  store ptr %78, ptr %77, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 3
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %69, i32 0, i32 3
  %81 = load i32, ptr %79, align 4
  store i32 %81, ptr %80, align 4
  call void @set_offset(ptr %69, ptr @Iterator2)
  %82 = call ptr @llvm.invariant.start.p0(i64 24, ptr %69)
  %83 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %84 = extractvalue { ptr, ptr, ptr, i32 } %83, 0
  %85 = call ptr @llvm.invariant.start.p0(i64 416, ptr %84)
  %86 = extractvalue { ptr, ptr, ptr, i32 } %83, 3
  %87 = getelementptr ptr, ptr %84, i32 %86
  %88 = getelementptr ptr, ptr %87, i32 1
  %89 = load ptr, ptr %88, align 8
  %90 = extractvalue { ptr, ptr, ptr, i32 } %83, 1
  %91 = call ptr %89(ptr %90)
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %91, i32 0, i32 0
  %93 = load ptr, ptr %92, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %93, 0
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %91, i32 0, i32 1
  %96 = load ptr, ptr %95, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr %96, 1
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %91, i32 0, i32 2
  %99 = load ptr, ptr %98, align 8
  %100 = insertvalue { ptr, ptr, ptr, i32 } %97, ptr %99, 2
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %91, i32 0, i32 3
  %102 = load i32, ptr %101, align 4
  %103 = insertvalue { ptr, ptr, ptr, i32 } %100, i32 %102, 3
  %104 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %105 = extractvalue { ptr, ptr, ptr, i32 } %104, 0
  %106 = call ptr @llvm.invariant.start.p0(i64 416, ptr %105)
  %107 = extractvalue { ptr, ptr, ptr, i32 } %104, 3
  %108 = getelementptr ptr, ptr %105, i32 %107
  %109 = getelementptr ptr, ptr %108, i32 2
  %110 = load ptr, ptr %109, align 8
  %111 = extractvalue { ptr, ptr, ptr, i32 } %104, 1
  %112 = call ptr %110(ptr %111)
  %113 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %114 = extractvalue { ptr, ptr, ptr, i32 } %113, 0
  %115 = call ptr @llvm.invariant.start.p0(i64 416, ptr %114)
  %116 = extractvalue { ptr, ptr, ptr, i32 } %113, 3
  %117 = getelementptr ptr, ptr %114, i32 %116
  %118 = getelementptr ptr, ptr %117, i32 3
  %119 = load ptr, ptr %118, align 8
  %120 = extractvalue { ptr, ptr, ptr, i32 } %113, 1
  %121 = call ptr %119(ptr %120)
  %122 = alloca [0 x ptr], align 8
  %123 = call ptr @llvm.invariant.start.p0(i64 0, ptr %122)
  %124 = call ptr @llvm.invariant.start.p0(i64 184, ptr %93)
  %125 = getelementptr ptr, ptr %93, i32 %102
  %126 = getelementptr ptr, ptr %125, i32 1
  %127 = load ptr, ptr %126, align 8
  %128 = alloca [0 x ptr], align 8
  %129 = call ptr %127({ ptr, ptr, ptr, i32 } %103, ptr %128)
  %130 = call { ptr, ptr, ptr, i32 } %129({ ptr, ptr, ptr, i32 } %103, { ptr, ptr, ptr, i32 } %103, ptr %122)
  %131 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %130, ptr %131, align 8
  %132 = call ptr @llvm.invariant.start.p0(i64 16, ptr %131)
  %133 = alloca { ptr, ptr, ptr, i32 }, align 8
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %131, i32 0, i32 0
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 0
  %136 = load ptr, ptr %134, align 8
  store ptr %136, ptr %135, align 8
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %131, i32 0, i32 1
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 1
  %139 = load ptr, ptr %137, align 8
  store ptr %139, ptr %138, align 8
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %131, i32 0, i32 2
  %141 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 2
  %142 = load ptr, ptr %140, align 8
  store ptr %142, ptr %141, align 8
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %131, i32 0, i32 3
  %144 = getelementptr { ptr, ptr, ptr, i32 }, ptr %133, i32 0, i32 3
  %145 = load i32, ptr %143, align 4
  store i32 %145, ptr %144, align 4
  call void @set_offset(ptr %133, ptr @Iterator2)
  %146 = call ptr @llvm.invariant.start.p0(i64 24, ptr %133)
  %147 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %148 = extractvalue { ptr, ptr, ptr, i32 } %147, 0
  %149 = call ptr @llvm.invariant.start.p0(i64 416, ptr %148)
  %150 = extractvalue { ptr, ptr, ptr, i32 } %147, 3
  %151 = getelementptr ptr, ptr %148, i32 %150
  %152 = getelementptr ptr, ptr %151, i32 2
  %153 = load ptr, ptr %152, align 8
  %154 = extractvalue { ptr, ptr, ptr, i32 } %147, 1
  %155 = call ptr %153(ptr %154)
  %156 = load ptr, ptr %155, align 8
  %157 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %158 = extractvalue { ptr, ptr, ptr, i32 } %157, 0
  %159 = call ptr @llvm.invariant.start.p0(i64 416, ptr %158)
  %160 = extractvalue { ptr, ptr, ptr, i32 } %157, 3
  %161 = getelementptr ptr, ptr %158, i32 %160
  %162 = getelementptr ptr, ptr %161, i32 3
  %163 = load ptr, ptr %162, align 8
  %164 = extractvalue { ptr, ptr, ptr, i32 } %157, 1
  %165 = call ptr %163(ptr %164)
  %166 = load ptr, ptr %165, align 8
  %167 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %168 = call ptr @llvm.invariant.start.p0(i64 24, ptr %167)
  %169 = getelementptr [3 x ptr], ptr %167, i32 0, i32 2
  store ptr %166, ptr %169, align 8
  %170 = getelementptr [3 x ptr], ptr %167, i32 0, i32 1
  store ptr %156, ptr %170, align 8
  store ptr @Pair, ptr %167, align 8
  %171 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, ptr, ptr, ptr }, ptr null, i32 1) to i64))
  %172 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, ptr, ptr, ptr }, ptr %171, i32 0, i32 2
  store ptr %156, ptr %172, align 8
  %173 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, ptr, ptr, ptr }, ptr %171, i32 0, i32 3
  store ptr %166, ptr %173, align 8
  %174 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, ptr, ptr, ptr }, ptr %171, i32 0, i32 4
  store ptr %167, ptr %174, align 8
  %175 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, ptr, ptr, ptr }, ptr %171, i32 0, i32 2
  %176 = call ptr @llvm.invariant.start.p0(i64 24, ptr %175)
  %177 = alloca { ptr, ptr, ptr, i32 }, align 8
  %178 = getelementptr { ptr, ptr, ptr, i32 }, ptr %177, i32 0, i32 1
  %179 = getelementptr { ptr, ptr, ptr, i32 }, ptr %177, i32 0, i32 3
  store ptr @ZipIterator2, ptr %177, align 8
  store ptr %171, ptr %178, align 8
  store i32 7, ptr %179, align 4
  %180 = call ptr @llvm.invariant.start.p0(i64 16, ptr %177)
  %181 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %182 = extractvalue { ptr, ptr, ptr, i32 } %181, 0
  %183 = call ptr @llvm.invariant.start.p0(i64 416, ptr %182)
  %184 = extractvalue { ptr, ptr, ptr, i32 } %181, 3
  %185 = getelementptr ptr, ptr %182, i32 %184
  %186 = load ptr, ptr %185, align 8
  %187 = extractvalue { ptr, ptr, ptr, i32 } %181, 1
  %188 = call ptr %186(ptr %187)
  %189 = getelementptr { ptr, ptr, ptr, i32 }, ptr %188, i32 0, i32 0
  %190 = load ptr, ptr %189, align 8
  %191 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %190, 0
  %192 = getelementptr { ptr, ptr, ptr, i32 }, ptr %188, i32 0, i32 1
  %193 = load ptr, ptr %192, align 8
  %194 = insertvalue { ptr, ptr, ptr, i32 } %191, ptr %193, 1
  %195 = getelementptr { ptr, ptr, ptr, i32 }, ptr %188, i32 0, i32 2
  %196 = load ptr, ptr %195, align 8
  %197 = insertvalue { ptr, ptr, ptr, i32 } %194, ptr %196, 2
  %198 = getelementptr { ptr, ptr, ptr, i32 }, ptr %188, i32 0, i32 3
  %199 = load i32, ptr %198, align 4
  %200 = insertvalue { ptr, ptr, ptr, i32 } %197, i32 %199, 3
  %201 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %202 = extractvalue { ptr, ptr, ptr, i32 } %201, 0
  %203 = call ptr @llvm.invariant.start.p0(i64 416, ptr %202)
  %204 = extractvalue { ptr, ptr, ptr, i32 } %201, 3
  %205 = getelementptr ptr, ptr %202, i32 %204
  %206 = getelementptr ptr, ptr %205, i32 2
  %207 = load ptr, ptr %206, align 8
  %208 = extractvalue { ptr, ptr, ptr, i32 } %201, 1
  %209 = call ptr %207(ptr %208)
  %210 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %211 = extractvalue { ptr, ptr, ptr, i32 } %210, 0
  %212 = call ptr @llvm.invariant.start.p0(i64 416, ptr %211)
  %213 = extractvalue { ptr, ptr, ptr, i32 } %210, 3
  %214 = getelementptr ptr, ptr %211, i32 %213
  %215 = getelementptr ptr, ptr %214, i32 3
  %216 = load ptr, ptr %215, align 8
  %217 = extractvalue { ptr, ptr, ptr, i32 } %210, 1
  %218 = call ptr %216(ptr %217)
  %219 = alloca [0 x ptr], align 8
  %220 = call ptr @llvm.invariant.start.p0(i64 0, ptr %219)
  %221 = call ptr @llvm.invariant.start.p0(i64 184, ptr %190)
  %222 = getelementptr ptr, ptr %190, i32 %199
  %223 = getelementptr ptr, ptr %222, i32 1
  %224 = load ptr, ptr %223, align 8
  %225 = alloca [0 x ptr], align 8
  %226 = call ptr %224({ ptr, ptr, ptr, i32 } %200, ptr %225)
  %227 = call { ptr, ptr, ptr, i32 } %226({ ptr, ptr, ptr, i32 } %200, { ptr, ptr, ptr, i32 } %200, ptr %219)
  %228 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %227, ptr %228, align 8
  %229 = call ptr @llvm.invariant.start.p0(i64 16, ptr %228)
  %230 = alloca { ptr, ptr, ptr, i32 }, align 8
  %231 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 0
  %232 = getelementptr { ptr, ptr, ptr, i32 }, ptr %230, i32 0, i32 0
  %233 = load ptr, ptr %231, align 8
  store ptr %233, ptr %232, align 8
  %234 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 1
  %235 = getelementptr { ptr, ptr, ptr, i32 }, ptr %230, i32 0, i32 1
  %236 = load ptr, ptr %234, align 8
  store ptr %236, ptr %235, align 8
  %237 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 2
  %238 = getelementptr { ptr, ptr, ptr, i32 }, ptr %230, i32 0, i32 2
  %239 = load ptr, ptr %237, align 8
  store ptr %239, ptr %238, align 8
  %240 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 3
  %241 = getelementptr { ptr, ptr, ptr, i32 }, ptr %230, i32 0, i32 3
  %242 = load i32, ptr %240, align 4
  store i32 %242, ptr %241, align 4
  call void @set_offset(ptr %230, ptr @Iterator2)
  %243 = call ptr @llvm.invariant.start.p0(i64 24, ptr %230)
  %244 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %245 = extractvalue { ptr, ptr, ptr, i32 } %244, 0
  %246 = call ptr @llvm.invariant.start.p0(i64 416, ptr %245)
  %247 = extractvalue { ptr, ptr, ptr, i32 } %244, 3
  %248 = getelementptr ptr, ptr %245, i32 %247
  %249 = getelementptr ptr, ptr %248, i32 1
  %250 = load ptr, ptr %249, align 8
  %251 = extractvalue { ptr, ptr, ptr, i32 } %244, 1
  %252 = call ptr %250(ptr %251)
  %253 = getelementptr { ptr, ptr, ptr, i32 }, ptr %252, i32 0, i32 0
  %254 = load ptr, ptr %253, align 8
  %255 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %254, 0
  %256 = getelementptr { ptr, ptr, ptr, i32 }, ptr %252, i32 0, i32 1
  %257 = load ptr, ptr %256, align 8
  %258 = insertvalue { ptr, ptr, ptr, i32 } %255, ptr %257, 1
  %259 = getelementptr { ptr, ptr, ptr, i32 }, ptr %252, i32 0, i32 2
  %260 = load ptr, ptr %259, align 8
  %261 = insertvalue { ptr, ptr, ptr, i32 } %258, ptr %260, 2
  %262 = getelementptr { ptr, ptr, ptr, i32 }, ptr %252, i32 0, i32 3
  %263 = load i32, ptr %262, align 4
  %264 = insertvalue { ptr, ptr, ptr, i32 } %261, i32 %263, 3
  %265 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %266 = extractvalue { ptr, ptr, ptr, i32 } %265, 0
  %267 = call ptr @llvm.invariant.start.p0(i64 416, ptr %266)
  %268 = extractvalue { ptr, ptr, ptr, i32 } %265, 3
  %269 = getelementptr ptr, ptr %266, i32 %268
  %270 = getelementptr ptr, ptr %269, i32 2
  %271 = load ptr, ptr %270, align 8
  %272 = extractvalue { ptr, ptr, ptr, i32 } %265, 1
  %273 = call ptr %271(ptr %272)
  %274 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %275 = extractvalue { ptr, ptr, ptr, i32 } %274, 0
  %276 = call ptr @llvm.invariant.start.p0(i64 416, ptr %275)
  %277 = extractvalue { ptr, ptr, ptr, i32 } %274, 3
  %278 = getelementptr ptr, ptr %275, i32 %277
  %279 = getelementptr ptr, ptr %278, i32 3
  %280 = load ptr, ptr %279, align 8
  %281 = extractvalue { ptr, ptr, ptr, i32 } %274, 1
  %282 = call ptr %280(ptr %281)
  %283 = alloca [0 x ptr], align 8
  %284 = call ptr @llvm.invariant.start.p0(i64 0, ptr %283)
  %285 = call ptr @llvm.invariant.start.p0(i64 184, ptr %254)
  %286 = getelementptr ptr, ptr %254, i32 %263
  %287 = getelementptr ptr, ptr %286, i32 1
  %288 = load ptr, ptr %287, align 8
  %289 = alloca [0 x ptr], align 8
  %290 = call ptr %288({ ptr, ptr, ptr, i32 } %264, ptr %289)
  %291 = call { ptr, ptr, ptr, i32 } %290({ ptr, ptr, ptr, i32 } %264, { ptr, ptr, ptr, i32 } %264, ptr %283)
  %292 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %291, ptr %292, align 8
  %293 = call ptr @llvm.invariant.start.p0(i64 16, ptr %292)
  %294 = alloca { ptr, ptr, ptr, i32 }, align 8
  %295 = getelementptr { ptr, ptr, ptr, i32 }, ptr %292, i32 0, i32 0
  %296 = getelementptr { ptr, ptr, ptr, i32 }, ptr %294, i32 0, i32 0
  %297 = load ptr, ptr %295, align 8
  store ptr %297, ptr %296, align 8
  %298 = getelementptr { ptr, ptr, ptr, i32 }, ptr %292, i32 0, i32 1
  %299 = getelementptr { ptr, ptr, ptr, i32 }, ptr %294, i32 0, i32 1
  %300 = load ptr, ptr %298, align 8
  store ptr %300, ptr %299, align 8
  %301 = getelementptr { ptr, ptr, ptr, i32 }, ptr %292, i32 0, i32 2
  %302 = getelementptr { ptr, ptr, ptr, i32 }, ptr %294, i32 0, i32 2
  %303 = load ptr, ptr %301, align 8
  store ptr %303, ptr %302, align 8
  %304 = getelementptr { ptr, ptr, ptr, i32 }, ptr %292, i32 0, i32 3
  %305 = getelementptr { ptr, ptr, ptr, i32 }, ptr %294, i32 0, i32 3
  %306 = load i32, ptr %304, align 4
  store i32 %306, ptr %305, align 4
  call void @set_offset(ptr %294, ptr @Iterator2)
  %307 = call ptr @llvm.invariant.start.p0(i64 24, ptr %294)
  %308 = alloca { ptr, ptr, ptr, i32 }, align 8
  %309 = getelementptr { ptr, ptr, ptr, i32 }, ptr %230, i32 0, i32 0
  %310 = getelementptr { ptr, ptr, ptr, i32 }, ptr %308, i32 0, i32 0
  %311 = load ptr, ptr %309, align 8
  store ptr %311, ptr %310, align 8
  %312 = getelementptr { ptr, ptr, ptr, i32 }, ptr %230, i32 0, i32 1
  %313 = getelementptr { ptr, ptr, ptr, i32 }, ptr %308, i32 0, i32 1
  %314 = load ptr, ptr %312, align 8
  store ptr %314, ptr %313, align 8
  %315 = getelementptr { ptr, ptr, ptr, i32 }, ptr %230, i32 0, i32 2
  %316 = getelementptr { ptr, ptr, ptr, i32 }, ptr %308, i32 0, i32 2
  %317 = load ptr, ptr %315, align 8
  store ptr %317, ptr %316, align 8
  %318 = getelementptr { ptr, ptr, ptr, i32 }, ptr %230, i32 0, i32 3
  %319 = getelementptr { ptr, ptr, ptr, i32 }, ptr %308, i32 0, i32 3
  %320 = load i32, ptr %318, align 4
  store i32 %320, ptr %319, align 4
  call void @set_offset(ptr %308, ptr @Iterator2)
  %321 = call ptr @llvm.invariant.start.p0(i64 24, ptr %308)
  %322 = getelementptr { ptr, ptr, ptr, i32 }, ptr %308, i32 0, i32 0
  %323 = load ptr, ptr %322, align 8
  %324 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %323, 0
  %325 = getelementptr { ptr, ptr, ptr, i32 }, ptr %308, i32 0, i32 1
  %326 = load ptr, ptr %325, align 8
  %327 = insertvalue { ptr, ptr, ptr, i32 } %324, ptr %326, 1
  %328 = getelementptr { ptr, ptr, ptr, i32 }, ptr %308, i32 0, i32 2
  %329 = load ptr, ptr %328, align 8
  %330 = insertvalue { ptr, ptr, ptr, i32 } %327, ptr %329, 2
  %331 = getelementptr { ptr, ptr, ptr, i32 }, ptr %308, i32 0, i32 3
  %332 = load i32, ptr %331, align 4
  %333 = insertvalue { ptr, ptr, ptr, i32 } %330, i32 %332, 3
  %334 = alloca { ptr, ptr, ptr, i32 }, align 8
  %335 = getelementptr { ptr, ptr, ptr, i32 }, ptr %294, i32 0, i32 0
  %336 = getelementptr { ptr, ptr, ptr, i32 }, ptr %334, i32 0, i32 0
  %337 = load ptr, ptr %335, align 8
  store ptr %337, ptr %336, align 8
  %338 = getelementptr { ptr, ptr, ptr, i32 }, ptr %294, i32 0, i32 1
  %339 = getelementptr { ptr, ptr, ptr, i32 }, ptr %334, i32 0, i32 1
  %340 = load ptr, ptr %338, align 8
  store ptr %340, ptr %339, align 8
  %341 = getelementptr { ptr, ptr, ptr, i32 }, ptr %294, i32 0, i32 2
  %342 = getelementptr { ptr, ptr, ptr, i32 }, ptr %334, i32 0, i32 2
  %343 = load ptr, ptr %341, align 8
  store ptr %343, ptr %342, align 8
  %344 = getelementptr { ptr, ptr, ptr, i32 }, ptr %294, i32 0, i32 3
  %345 = getelementptr { ptr, ptr, ptr, i32 }, ptr %334, i32 0, i32 3
  %346 = load i32, ptr %344, align 4
  store i32 %346, ptr %345, align 4
  call void @set_offset(ptr %334, ptr @Iterator2)
  %347 = call ptr @llvm.invariant.start.p0(i64 24, ptr %334)
  %348 = getelementptr { ptr, ptr, ptr, i32 }, ptr %334, i32 0, i32 0
  %349 = load ptr, ptr %348, align 8
  %350 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %349, 0
  %351 = getelementptr { ptr, ptr, ptr, i32 }, ptr %334, i32 0, i32 1
  %352 = load ptr, ptr %351, align 8
  %353 = insertvalue { ptr, ptr, ptr, i32 } %350, ptr %352, 1
  %354 = getelementptr { ptr, ptr, ptr, i32 }, ptr %334, i32 0, i32 2
  %355 = load ptr, ptr %354, align 8
  %356 = insertvalue { ptr, ptr, ptr, i32 } %353, ptr %355, 2
  %357 = getelementptr { ptr, ptr, ptr, i32 }, ptr %334, i32 0, i32 3
  %358 = load i32, ptr %357, align 4
  %359 = insertvalue { ptr, ptr, ptr, i32 } %356, i32 %358, 3
  %360 = getelementptr { ptr, ptr, ptr, i32 }, ptr %177, i32 0, i32 0
  %361 = load ptr, ptr %360, align 8
  %362 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %361, 0
  %363 = getelementptr { ptr, ptr, ptr, i32 }, ptr %177, i32 0, i32 1
  %364 = load ptr, ptr %363, align 8
  %365 = insertvalue { ptr, ptr, ptr, i32 } %362, ptr %364, 1
  %366 = getelementptr { ptr, ptr, ptr, i32 }, ptr %177, i32 0, i32 2
  %367 = load ptr, ptr %366, align 8
  %368 = insertvalue { ptr, ptr, ptr, i32 } %365, ptr %367, 2
  %369 = getelementptr { ptr, ptr, ptr, i32 }, ptr %177, i32 0, i32 3
  %370 = load i32, ptr %369, align 4
  %371 = insertvalue { ptr, ptr, ptr, i32 } %368, i32 %370, 3
  %372 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %373 = extractvalue { ptr, ptr, ptr, i32 } %372, 0
  %374 = call ptr @llvm.invariant.start.p0(i64 416, ptr %373)
  %375 = extractvalue { ptr, ptr, ptr, i32 } %372, 3
  %376 = getelementptr ptr, ptr %373, i32 %375
  %377 = getelementptr ptr, ptr %376, i32 2
  %378 = load ptr, ptr %377, align 8
  %379 = extractvalue { ptr, ptr, ptr, i32 } %372, 1
  %380 = call ptr %378(ptr %379)
  %381 = load ptr, ptr %380, align 8
  %382 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %383 = extractvalue { ptr, ptr, ptr, i32 } %382, 0
  %384 = call ptr @llvm.invariant.start.p0(i64 416, ptr %383)
  %385 = extractvalue { ptr, ptr, ptr, i32 } %382, 3
  %386 = getelementptr ptr, ptr %383, i32 %385
  %387 = getelementptr ptr, ptr %386, i32 3
  %388 = load ptr, ptr %387, align 8
  %389 = extractvalue { ptr, ptr, ptr, i32 } %382, 1
  %390 = call ptr %388(ptr %389)
  %391 = load ptr, ptr %390, align 8
  %392 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ([2 x ptr], ptr null, i32 1) to i64))
  %393 = call ptr @llvm.invariant.start.p0(i64 16, ptr %392)
  %394 = getelementptr [2 x ptr], ptr %392, i32 0, i32 1
  store ptr %381, ptr %394, align 8
  store ptr @Iterator2, ptr %392, align 8
  %395 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ([2 x ptr], ptr null, i32 1) to i64))
  %396 = call ptr @llvm.invariant.start.p0(i64 16, ptr %395)
  %397 = getelementptr [2 x ptr], ptr %395, i32 0, i32 1
  store ptr %391, ptr %397, align 8
  store ptr @Iterator2, ptr %395, align 8
  %398 = alloca [2 x ptr], align 8
  %399 = call ptr @llvm.invariant.start.p0(i64 16, ptr %398)
  %400 = getelementptr [2 x ptr], ptr %398, i32 0, i32 1
  store ptr %395, ptr %400, align 8
  %401 = getelementptr [2 x ptr], ptr %398, i32 0, i32 0
  store ptr %392, ptr %401, align 8
  %402 = call ptr @llvm.invariant.start.p0(i64 96, ptr %361)
  %403 = getelementptr ptr, ptr %361, i32 %370
  %404 = getelementptr ptr, ptr %403, i32 5
  %405 = load ptr, ptr %404, align 8
  %406 = alloca [2 x ptr], align 8
  %407 = getelementptr [2 x ptr], ptr %406, i32 0, i32 0
  store ptr %323, ptr %407, align 8
  %408 = getelementptr [2 x ptr], ptr %406, i32 0, i32 1
  store ptr %349, ptr %408, align 8
  %409 = call ptr %405({ ptr, ptr, ptr, i32 } %371, ptr %406, { ptr, ptr, ptr, i32 } %333, { ptr, ptr, ptr, i32 } %359)
  call void %409({ ptr, ptr, ptr, i32 } %371, { ptr, ptr, ptr, i32 } %371, ptr %398, { ptr, ptr, ptr, i32 } %333, { ptr, ptr, ptr, i32 } %359)
  %410 = alloca { ptr, ptr, ptr, i32 }, align 8
  %411 = getelementptr { ptr, ptr, ptr, i32 }, ptr %177, i32 0, i32 0
  %412 = getelementptr { ptr, ptr, ptr, i32 }, ptr %410, i32 0, i32 0
  %413 = load ptr, ptr %411, align 8
  store ptr %413, ptr %412, align 8
  %414 = getelementptr { ptr, ptr, ptr, i32 }, ptr %177, i32 0, i32 1
  %415 = getelementptr { ptr, ptr, ptr, i32 }, ptr %410, i32 0, i32 1
  %416 = load ptr, ptr %414, align 8
  store ptr %416, ptr %415, align 8
  %417 = getelementptr { ptr, ptr, ptr, i32 }, ptr %177, i32 0, i32 2
  %418 = getelementptr { ptr, ptr, ptr, i32 }, ptr %410, i32 0, i32 2
  %419 = load ptr, ptr %417, align 8
  store ptr %419, ptr %418, align 8
  %420 = getelementptr { ptr, ptr, ptr, i32 }, ptr %177, i32 0, i32 3
  %421 = getelementptr { ptr, ptr, ptr, i32 }, ptr %410, i32 0, i32 3
  %422 = load i32, ptr %420, align 4
  store i32 %422, ptr %421, align 4
  call void @set_offset(ptr %410, ptr @Iterator2)
  %423 = call ptr @llvm.invariant.start.p0(i64 24, ptr %410)
  %424 = getelementptr { ptr, ptr, ptr, i32 }, ptr %410, i32 0, i32 0
  %425 = load ptr, ptr %424, align 8
  %426 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %425, 0
  %427 = getelementptr { ptr, ptr, ptr, i32 }, ptr %410, i32 0, i32 1
  %428 = load ptr, ptr %427, align 8
  %429 = insertvalue { ptr, ptr, ptr, i32 } %426, ptr %428, 1
  %430 = getelementptr { ptr, ptr, ptr, i32 }, ptr %410, i32 0, i32 2
  %431 = load ptr, ptr %430, align 8
  %432 = insertvalue { ptr, ptr, ptr, i32 } %429, ptr %431, 2
  %433 = getelementptr { ptr, ptr, ptr, i32 }, ptr %410, i32 0, i32 3
  %434 = load i32, ptr %433, align 4
  %435 = insertvalue { ptr, ptr, ptr, i32 } %432, i32 %434, 3
  ret { ptr, ptr, ptr, i32 } %435
}

define ptr @ZipIterator2_field_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, ptr, ptr, ptr }, ptr %0, i32 0, i32 0
  ret ptr %2
}

define ptr @ZipIterator2_field_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, ptr, ptr, ptr }, ptr %0, i32 0, i32 1
  ret ptr %2
}

define ptr @ZipIterator2_field_ZipIterator2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, ptr, ptr, ptr }, ptr %0, i32 0, i32 2
  ret ptr %2
}

define ptr @ZipIterator2_field_ZipIterator2_1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, ptr, ptr, ptr }, ptr %0, i32 0, i32 3
  ret ptr %2
}

define ptr @ZipIterator2_field_ZipIterator2_2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, ptr, ptr, ptr }, ptr %0, i32 0, i32 4
  ret ptr %2
}

define ptr @ZipIterator2_B_init_firstIterator2T_secondIterator2U({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2, { ptr, ptr, ptr, i32 } %3) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = getelementptr [2 x ptr], ptr %1, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr ptr, ptr %7, i32 1
  %9 = getelementptr ptr, ptr %7, i32 2
  %10 = getelementptr ptr, ptr %7, i32 3
  %11 = getelementptr ptr, ptr %7, i32 4
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 4189192806087951739, i64 ptrtoint (ptr @Iterator2 to i64), ptr %15)
  %17 = getelementptr [2 x ptr], ptr %1, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr ptr, ptr %18, i32 1
  %20 = getelementptr ptr, ptr %18, i32 2
  %21 = getelementptr ptr, ptr %18, i32 3
  %22 = getelementptr ptr, ptr %18, i32 4
  %23 = load i64, ptr %19, align 4
  %24 = load i64, ptr %20, align 4
  %25 = load ptr, ptr %21, align 8
  %26 = load ptr, ptr %22, align 8
  %27 = call i1 @subtype_test_wrapper(ptr %25, i64 %24, i64 %23, i64 4189192806087951739, i64 ptrtoint (ptr @Iterator2 to i64), ptr %26)
  %28 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %29 = getelementptr [12 x ptr], ptr %28, i32 0, i32 7
  %30 = getelementptr ptr, ptr %29, i32 7
  %31 = load ptr, ptr %30, align 8
  ret ptr %31
}

define ptr @ZipIterator2_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [12 x ptr], ptr %4, i32 0, i32 8
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @ZipIterator2_init_firstIterator2T_secondIterator2U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @ZipIterator2)
  %21 = call ptr @llvm.invariant.start.p0(i64 24, ptr %8)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %22, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 16, ptr %22)
  %24 = alloca { ptr, ptr, ptr, i32 }, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %36 = load i32, ptr %34, align 4
  store i32 %36, ptr %35, align 4
  call void @set_offset(ptr %24, ptr @Iterator2)
  %37 = call ptr @llvm.invariant.start.p0(i64 24, ptr %24)
  %38 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %39 = extractvalue { ptr, ptr, ptr, i32 } %38, 0
  %40 = call ptr @llvm.invariant.start.p0(i64 96, ptr %39)
  %41 = extractvalue { ptr, ptr, ptr, i32 } %38, 3
  %42 = getelementptr ptr, ptr %39, i32 %41
  %43 = load ptr, ptr %42, align 8
  %44 = extractvalue { ptr, ptr, ptr, i32 } %38, 1
  %45 = call ptr %43(ptr %44)
  %46 = alloca { ptr, ptr, ptr, i32 }, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %49 = load ptr, ptr %47, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %52 = load ptr, ptr %50, align 8
  store ptr %52, ptr %51, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %55 = load ptr, ptr %53, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %58 = load i32, ptr %56, align 4
  store i32 %58, ptr %57, align 4
  call void @set_offset(ptr %46, ptr @Iterator2)
  %59 = call ptr @llvm.invariant.start.p0(i64 24, ptr %46)
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %62 = load ptr, ptr %60, align 8
  store ptr %62, ptr %61, align 8
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %65 = load ptr, ptr %63, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %68 = load ptr, ptr %66, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %71 = load i32, ptr %69, align 4
  store i32 %71, ptr %70, align 4
  %72 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %72, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 16, ptr %72)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 0
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 1
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 2
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %83 = load ptr, ptr %81, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 3
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %86 = load i32, ptr %84, align 4
  store i32 %86, ptr %85, align 4
  call void @set_offset(ptr %74, ptr @Iterator2)
  %87 = call ptr @llvm.invariant.start.p0(i64 24, ptr %74)
  %88 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %89 = extractvalue { ptr, ptr, ptr, i32 } %88, 0
  %90 = call ptr @llvm.invariant.start.p0(i64 96, ptr %89)
  %91 = extractvalue { ptr, ptr, ptr, i32 } %88, 3
  %92 = getelementptr ptr, ptr %89, i32 %91
  %93 = getelementptr ptr, ptr %92, i32 1
  %94 = load ptr, ptr %93, align 8
  %95 = extractvalue { ptr, ptr, ptr, i32 } %88, 1
  %96 = call ptr %94(ptr %95)
  %97 = alloca { ptr, ptr, ptr, i32 }, align 8
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 0
  %100 = load ptr, ptr %98, align 8
  store ptr %100, ptr %99, align 8
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %103 = load ptr, ptr %101, align 8
  store ptr %103, ptr %102, align 8
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 2
  %106 = load ptr, ptr %104, align 8
  store ptr %106, ptr %105, align 8
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  %109 = load i32, ptr %107, align 4
  store i32 %109, ptr %108, align 4
  call void @set_offset(ptr %97, ptr @Iterator2)
  %110 = call ptr @llvm.invariant.start.p0(i64 24, ptr %97)
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 0
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 0
  %113 = load ptr, ptr %111, align 8
  store ptr %113, ptr %112, align 8
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 1
  %116 = load ptr, ptr %114, align 8
  store ptr %116, ptr %115, align 8
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 2
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 2
  %119 = load ptr, ptr %117, align 8
  store ptr %119, ptr %118, align 8
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 3
  %122 = load i32, ptr %120, align 4
  store i32 %122, ptr %121, align 4
  ret void
}

define { ptr, i160 } @ZipIterator2_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca { ptr, i160 }, align 8
  %.reg2mem7 = alloca { ptr, i160 }, align 8
  %.reg2mem9 = alloca i32, align 4
  %.reg2mem11 = alloca { ptr, i160 }, align 8
  %.reg2mem13 = alloca i32, align 4
  %.reg2mem15 = alloca { ptr, i160 }, align 8
  %.reg2mem17 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @ZipIterator2)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 96, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %27 = call ptr %25(ptr %26)
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %29, 0
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %32 = load ptr, ptr %31, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %32, 1
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %35 = load ptr, ptr %34, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %35, 2
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %38 = load i32, ptr %37, align 4
  %39 = insertvalue { ptr, ptr, ptr, i32 } %36, i32 %38, 3
  %40 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %41 = extractvalue { ptr, ptr, ptr, i32 } %40, 0
  %42 = call ptr @llvm.invariant.start.p0(i64 96, ptr %41)
  %43 = extractvalue { ptr, ptr, ptr, i32 } %40, 3
  %44 = getelementptr ptr, ptr %41, i32 %43
  %45 = getelementptr ptr, ptr %44, i32 2
  %46 = load ptr, ptr %45, align 8
  %47 = extractvalue { ptr, ptr, ptr, i32 } %40, 1
  %48 = call ptr %46(ptr %47)
  %49 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %50 = extractvalue { ptr, ptr, ptr, i32 } %49, 0
  %51 = call ptr @llvm.invariant.start.p0(i64 96, ptr %50)
  %52 = extractvalue { ptr, ptr, ptr, i32 } %49, 3
  %53 = getelementptr ptr, ptr %50, i32 %52
  %54 = getelementptr ptr, ptr %53, i32 3
  %55 = load ptr, ptr %54, align 8
  %56 = extractvalue { ptr, ptr, ptr, i32 } %49, 1
  %57 = call ptr %55(ptr %56)
  %58 = alloca [0 x ptr], align 8
  %59 = call ptr @llvm.invariant.start.p0(i64 0, ptr %58)
  %60 = call ptr @llvm.invariant.start.p0(i64 24, ptr %29)
  %61 = getelementptr ptr, ptr %29, i32 %38
  %62 = getelementptr ptr, ptr %61, i32 1
  %63 = load ptr, ptr %62, align 8
  %64 = alloca [0 x ptr], align 8
  %65 = call ptr %63({ ptr, ptr, ptr, i32 } %39, ptr %64)
  %66 = call { ptr, i160 } %65({ ptr, ptr, ptr, i32 } %39, { ptr, ptr, ptr, i32 } %39, ptr %58)
  %67 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %66, ptr %67, align 8
  %68 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %69 = extractvalue { ptr, ptr, ptr, i32 } %68, 0
  %70 = call ptr @llvm.invariant.start.p0(i64 96, ptr %69)
  %71 = extractvalue { ptr, ptr, ptr, i32 } %68, 3
  %72 = getelementptr ptr, ptr %69, i32 %71
  %73 = getelementptr ptr, ptr %72, i32 1
  %74 = load ptr, ptr %73, align 8
  %75 = extractvalue { ptr, ptr, ptr, i32 } %68, 1
  %76 = call ptr %74(ptr %75)
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 0
  %78 = load ptr, ptr %77, align 8
  %79 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %78, 0
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 1
  %81 = load ptr, ptr %80, align 8
  %82 = insertvalue { ptr, ptr, ptr, i32 } %79, ptr %81, 1
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 2
  %84 = load ptr, ptr %83, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } %82, ptr %84, 2
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 3
  %87 = load i32, ptr %86, align 4
  %88 = insertvalue { ptr, ptr, ptr, i32 } %85, i32 %87, 3
  %89 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %90 = extractvalue { ptr, ptr, ptr, i32 } %89, 0
  %91 = call ptr @llvm.invariant.start.p0(i64 96, ptr %90)
  %92 = extractvalue { ptr, ptr, ptr, i32 } %89, 3
  %93 = getelementptr ptr, ptr %90, i32 %92
  %94 = getelementptr ptr, ptr %93, i32 2
  %95 = load ptr, ptr %94, align 8
  %96 = extractvalue { ptr, ptr, ptr, i32 } %89, 1
  %97 = call ptr %95(ptr %96)
  %98 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %99 = extractvalue { ptr, ptr, ptr, i32 } %98, 0
  %100 = call ptr @llvm.invariant.start.p0(i64 96, ptr %99)
  %101 = extractvalue { ptr, ptr, ptr, i32 } %98, 3
  %102 = getelementptr ptr, ptr %99, i32 %101
  %103 = getelementptr ptr, ptr %102, i32 3
  %104 = load ptr, ptr %103, align 8
  %105 = extractvalue { ptr, ptr, ptr, i32 } %98, 1
  %106 = call ptr %104(ptr %105)
  %107 = alloca [0 x ptr], align 8
  %108 = call ptr @llvm.invariant.start.p0(i64 0, ptr %107)
  %109 = call ptr @llvm.invariant.start.p0(i64 24, ptr %78)
  %110 = getelementptr ptr, ptr %78, i32 %87
  %111 = getelementptr ptr, ptr %110, i32 1
  %112 = load ptr, ptr %111, align 8
  %113 = alloca [0 x ptr], align 8
  %114 = call ptr %112({ ptr, ptr, ptr, i32 } %88, ptr %113)
  %115 = call { ptr, i160 } %114({ ptr, ptr, ptr, i32 } %88, { ptr, ptr, ptr, i32 } %88, ptr %107)
  %116 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %115, ptr %116, align 8
  %117 = getelementptr { ptr, i160 }, ptr %67, i32 0, i32 0
  %118 = load ptr, ptr %117, align 8
  %119 = ptrtoint ptr %118 to i64
  %120 = icmp ne i64 %119, ptrtoint (ptr @nil_typ to i64)
  %121 = alloca { ptr, i160 }, align 8
  %122 = alloca i64, align 8
  %123 = alloca i1, align 1
  %124 = alloca { ptr, i160 }, align 8
  %125 = alloca { ptr, ptr, ptr, i32 }, align 8
  %126 = alloca { ptr, i160 }, align 8
  %127 = alloca { ptr, i160 }, align 8
  %128 = alloca [2 x ptr], align 8
  %129 = alloca [2 x ptr], align 8
  %130 = alloca i160, align 8
  %131 = alloca ptr, align 8
  %132 = alloca i64, align 8
  br i1 %120, label %133, label %265

133:                                              ; preds = %3
  %134 = getelementptr { ptr, i160 }, ptr %67, i32 0, i32 0
  %135 = getelementptr { ptr, i160 }, ptr %121, i32 0, i32 0
  %136 = load ptr, ptr %134, align 8
  store ptr %136, ptr %135, align 8
  %137 = getelementptr { ptr, i160 }, ptr %67, i32 0, i32 1
  %138 = getelementptr { ptr, i160 }, ptr %121, i32 0, i32 1
  %139 = load i160, ptr %137, align 4
  store i160 %139, ptr %138, align 4
  call void @set_offset(ptr %121, ptr @Object)
  %140 = getelementptr { ptr, i160 }, ptr %116, i32 0, i32 0
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %122, align 4
  %141 = load ptr, ptr %140, align 8
  %142 = ptrtoint ptr %141 to i64
  %143 = load ptr, ptr %122, align 8
  %144 = ptrtoint ptr %143 to i64
  %145 = icmp ne i64 %142, %144
  store i1 %145, ptr %123, align 1
  %146 = load i1, ptr %123, align 1
  %147 = xor i1 %146, true
  %148 = zext i1 %147 to i32
  store i32 %148, ptr %.reg2mem9, align 4
  br i1 %146, label %149, label %256

149:                                              ; preds = %133
  %150 = getelementptr { ptr, i160 }, ptr %116, i32 0, i32 0
  %151 = getelementptr { ptr, i160 }, ptr %124, i32 0, i32 0
  %152 = load ptr, ptr %150, align 8
  store ptr %152, ptr %151, align 8
  %153 = getelementptr { ptr, i160 }, ptr %116, i32 0, i32 1
  %154 = getelementptr { ptr, i160 }, ptr %124, i32 0, i32 1
  %155 = load i160, ptr %153, align 4
  store i160 %155, ptr %154, align 4
  call void @set_offset(ptr %124, ptr @Object)
  %156 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %157 = extractvalue { ptr, ptr, ptr, i32 } %156, 0
  %158 = call ptr @llvm.invariant.start.p0(i64 96, ptr %157)
  %159 = extractvalue { ptr, ptr, ptr, i32 } %156, 3
  %160 = getelementptr ptr, ptr %157, i32 %159
  %161 = getelementptr ptr, ptr %160, i32 2
  %162 = load ptr, ptr %161, align 8
  %163 = extractvalue { ptr, ptr, ptr, i32 } %156, 1
  %164 = call ptr %162(ptr %163)
  %165 = load ptr, ptr %164, align 8
  %166 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %167 = extractvalue { ptr, ptr, ptr, i32 } %166, 0
  %168 = call ptr @llvm.invariant.start.p0(i64 96, ptr %167)
  %169 = extractvalue { ptr, ptr, ptr, i32 } %166, 3
  %170 = getelementptr ptr, ptr %167, i32 %169
  %171 = getelementptr ptr, ptr %170, i32 3
  %172 = load ptr, ptr %171, align 8
  %173 = extractvalue { ptr, ptr, ptr, i32 } %166, 1
  %174 = call ptr %172(ptr %173)
  %175 = load ptr, ptr %174, align 8
  %176 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr, i160 }, { ptr, i160 }, ptr, ptr }, ptr null, i32 1) to i64))
  %177 = getelementptr { { ptr, i160 }, { ptr, i160 }, ptr, ptr }, ptr %176, i32 0, i32 2
  store ptr %165, ptr %177, align 8
  %178 = getelementptr { { ptr, i160 }, { ptr, i160 }, ptr, ptr }, ptr %176, i32 0, i32 3
  store ptr %175, ptr %178, align 8
  %179 = getelementptr { { ptr, i160 }, { ptr, i160 }, ptr, ptr }, ptr %176, i32 0, i32 2
  %180 = call ptr @llvm.invariant.start.p0(i64 16, ptr %179)
  %181 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 1
  %182 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 3
  store ptr @Pair, ptr %125, align 8
  store ptr %176, ptr %181, align 8
  store i32 7, ptr %182, align 4
  %183 = call ptr @llvm.invariant.start.p0(i64 16, ptr %125)
  %184 = getelementptr { ptr, i160 }, ptr %121, i32 0, i32 0
  %185 = getelementptr { ptr, i160 }, ptr %126, i32 0, i32 0
  %186 = load ptr, ptr %184, align 8
  store ptr %186, ptr %185, align 8
  %187 = getelementptr { ptr, i160 }, ptr %121, i32 0, i32 1
  %188 = getelementptr { ptr, i160 }, ptr %126, i32 0, i32 1
  %189 = load i160, ptr %187, align 4
  store i160 %189, ptr %188, align 4
  call void @set_offset(ptr %126, ptr @Object)
  %190 = getelementptr { ptr, i160 }, ptr %126, i32 0, i32 0
  %191 = load ptr, ptr %190, align 8
  %192 = insertvalue { ptr, i160 } undef, ptr %191, 0
  %193 = getelementptr { ptr, i160 }, ptr %126, i32 0, i32 1
  %194 = load i160, ptr %193, align 4
  %195 = insertvalue { ptr, i160 } %192, i160 %194, 1
  %196 = getelementptr { ptr, i160 }, ptr %124, i32 0, i32 0
  %197 = getelementptr { ptr, i160 }, ptr %127, i32 0, i32 0
  %198 = load ptr, ptr %196, align 8
  store ptr %198, ptr %197, align 8
  %199 = getelementptr { ptr, i160 }, ptr %124, i32 0, i32 1
  %200 = getelementptr { ptr, i160 }, ptr %127, i32 0, i32 1
  %201 = load i160, ptr %199, align 4
  store i160 %201, ptr %200, align 4
  call void @set_offset(ptr %127, ptr @Object)
  %202 = getelementptr { ptr, i160 }, ptr %127, i32 0, i32 0
  %203 = load ptr, ptr %202, align 8
  %204 = insertvalue { ptr, i160 } undef, ptr %203, 0
  %205 = getelementptr { ptr, i160 }, ptr %127, i32 0, i32 1
  %206 = load i160, ptr %205, align 4
  %207 = insertvalue { ptr, i160 } %204, i160 %206, 1
  %208 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 0
  %209 = load ptr, ptr %208, align 8
  %210 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %209, 0
  %211 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 1
  %212 = load ptr, ptr %211, align 8
  %213 = insertvalue { ptr, ptr, ptr, i32 } %210, ptr %212, 1
  %214 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 2
  %215 = load ptr, ptr %214, align 8
  %216 = insertvalue { ptr, ptr, ptr, i32 } %213, ptr %215, 2
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 3
  %218 = load i32, ptr %217, align 4
  %219 = insertvalue { ptr, ptr, ptr, i32 } %216, i32 %218, 3
  %220 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %221 = extractvalue { ptr, ptr, ptr, i32 } %220, 0
  %222 = call ptr @llvm.invariant.start.p0(i64 96, ptr %221)
  %223 = extractvalue { ptr, ptr, ptr, i32 } %220, 3
  %224 = getelementptr ptr, ptr %221, i32 %223
  %225 = getelementptr ptr, ptr %224, i32 2
  %226 = load ptr, ptr %225, align 8
  %227 = extractvalue { ptr, ptr, ptr, i32 } %220, 1
  %228 = call ptr %226(ptr %227)
  %229 = load ptr, ptr %228, align 8
  %230 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %231 = extractvalue { ptr, ptr, ptr, i32 } %230, 0
  %232 = call ptr @llvm.invariant.start.p0(i64 96, ptr %231)
  %233 = extractvalue { ptr, ptr, ptr, i32 } %230, 3
  %234 = getelementptr ptr, ptr %231, i32 %233
  %235 = getelementptr ptr, ptr %234, i32 3
  %236 = load ptr, ptr %235, align 8
  %237 = extractvalue { ptr, ptr, ptr, i32 } %230, 1
  %238 = call ptr %236(ptr %237)
  %239 = load ptr, ptr %238, align 8
  %240 = call ptr @llvm.invariant.start.p0(i64 16, ptr %128)
  %241 = getelementptr [2 x ptr], ptr %128, i32 0, i32 1
  store ptr %239, ptr %241, align 8
  %242 = getelementptr [2 x ptr], ptr %128, i32 0, i32 0
  store ptr %229, ptr %242, align 8
  %243 = call ptr @llvm.invariant.start.p0(i64 80, ptr %209)
  %244 = getelementptr ptr, ptr %209, i32 %218
  %245 = getelementptr ptr, ptr %244, i32 4
  %246 = load ptr, ptr %245, align 8
  %247 = getelementptr [2 x ptr], ptr %129, i32 0, i32 0
  store ptr %191, ptr %247, align 8
  %248 = getelementptr [2 x ptr], ptr %129, i32 0, i32 1
  store ptr %203, ptr %248, align 8
  %249 = call ptr %246({ ptr, ptr, ptr, i32 } %219, ptr %129, { ptr, i160 } %195, { ptr, i160 } %207)
  call void %249({ ptr, ptr, ptr, i32 } %219, { ptr, ptr, ptr, i32 } %219, ptr %128, { ptr, i160 } %195, { ptr, i160 } %207)
  %250 = getelementptr { ptr, i160 }, ptr %125, i32 0, i32 0
  %251 = load ptr, ptr %250, align 8
  %252 = insertvalue { ptr, i160 } undef, ptr %251, 0
  %253 = getelementptr { ptr, i160 }, ptr %125, i32 0, i32 1
  %254 = load i160, ptr %253, align 4
  %255 = insertvalue { ptr, i160 } %252, i160 %254, 1
  store { ptr, i160 } %255, ptr %.reg2mem7, align 8
  %.reload8 = load { ptr, i160 }, ptr %.reg2mem7, align 8
  store { ptr, i160 } %.reload8, ptr %.reg2mem17, align 8
  br label %263

256:                                              ; preds = %133
  %257 = getelementptr { ptr, i160 }, ptr %121, i32 0, i32 0
  %258 = getelementptr { ptr, i160 }, ptr %67, i32 0, i32 0
  %259 = load ptr, ptr %257, align 8
  store ptr %259, ptr %258, align 8
  %260 = getelementptr { ptr, i160 }, ptr %121, i32 0, i32 1
  %261 = getelementptr { ptr, i160 }, ptr %67, i32 0, i32 1
  %262 = load i160, ptr %260, align 4
  store i160 %262, ptr %261, align 4
  store { ptr, i160 } poison, ptr %.reg2mem17, align 8
  br label %263

263:                                              ; preds = %256, %149
  %.reload18 = load { ptr, i160 }, ptr %.reg2mem17, align 8
  store { ptr, i160 } %.reload18, ptr %.reg2mem5, align 8
  br label %264

264:                                              ; preds = %263
  %.reload6 = load { ptr, i160 }, ptr %.reg2mem5, align 8
  %.reload10 = load i32, ptr %.reg2mem9, align 4
  store i32 %.reload10, ptr %.reg2mem13, align 4
  store { ptr, i160 } %.reload6, ptr %.reg2mem15, align 8
  br label %266

265:                                              ; preds = %3
  store i32 1, ptr %.reg2mem13, align 4
  store { ptr, i160 } poison, ptr %.reg2mem15, align 8
  br label %266

266:                                              ; preds = %265, %264
  %.reload16 = load { ptr, i160 }, ptr %.reg2mem15, align 8
  %.reload14 = load i32, ptr %.reg2mem13, align 4
  store { ptr, i160 } %.reload16, ptr %.reg2mem3, align 8
  store i32 %.reload14, ptr %.reg2mem1, align 4
  br label %267

267:                                              ; preds = %266
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  %268 = zext i32 %.reload2 to i64
  %269 = trunc i64 %268 to i32
  switch i32 %269, label %271 [
    i32 0, label %270
  ]

270:                                              ; preds = %267
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem11, align 8
  br label %277

271:                                              ; preds = %267
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %132, align 4
  %272 = load i64, ptr %132, align 4
  store i64 %272, ptr %131, align 4
  %273 = load ptr, ptr %131, align 8
  %274 = insertvalue { ptr, i160 } undef, ptr %273, 0
  %275 = load i160, ptr %130, align 4
  %276 = insertvalue { ptr, i160 } %274, i160 %275, 1
  store { ptr, i160 } %276, ptr %.reg2mem, align 8
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  store { ptr, i160 } %.reload, ptr %.reg2mem11, align 8
  br label %277

277:                                              ; preds = %271, %270
  %.reload12 = load { ptr, i160 }, ptr %.reg2mem11, align 8
  ret { ptr, i160 } %.reload12
}

define ptr @InterleaveIterable2_field_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, ptr }, ptr %0, i32 0, i32 0
  ret ptr %2
}

define ptr @InterleaveIterable2_field_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, ptr }, ptr %0, i32 0, i32 1
  ret ptr %2
}

define ptr @InterleaveIterable2_field_InterleaveIterable2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, ptr }, ptr %0, i32 0, i32 2
  ret ptr %2
}

define ptr @InterleaveIterable2_B_init_firstIterable2T_secondIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2, { ptr, ptr, ptr, i32 } %3) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = getelementptr [2 x ptr], ptr %1, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr ptr, ptr %7, i32 1
  %9 = getelementptr ptr, ptr %7, i32 2
  %10 = getelementptr ptr, ptr %7, i32 3
  %11 = getelementptr ptr, ptr %7, i32 4
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %15)
  %17 = getelementptr [2 x ptr], ptr %1, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr ptr, ptr %18, i32 1
  %20 = getelementptr ptr, ptr %18, i32 2
  %21 = getelementptr ptr, ptr %18, i32 3
  %22 = getelementptr ptr, ptr %18, i32 4
  %23 = load i64, ptr %19, align 4
  %24 = load i64, ptr %20, align 4
  %25 = load ptr, ptr %21, align 8
  %26 = load ptr, ptr %22, align 8
  %27 = call i1 @subtype_test_wrapper(ptr %25, i64 %24, i64 %23, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %26)
  %28 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %29 = getelementptr [50 x ptr], ptr %28, i32 0, i32 15
  %30 = getelementptr ptr, ptr %29, i32 7
  %31 = load ptr, ptr %30, align 8
  ret ptr %31
}

define ptr @InterleaveIterable2_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [50 x ptr], ptr %4, i32 0, i32 16
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @InterleaveIterable2_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [50 x ptr], ptr %16, i32 0, i32 17
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @InterleaveIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, i160 } %2, { ptr } %3) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = getelementptr [2 x ptr], ptr %1, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr ptr, ptr %7, i32 1
  %9 = getelementptr ptr, ptr %7, i32 2
  %10 = getelementptr ptr, ptr %7, i32 3
  %11 = getelementptr ptr, ptr %7, i32 4
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 3282773614056351330, i64 ptrtoint (ptr @Object to i64), ptr %15)
  %17 = getelementptr [2 x ptr], ptr %1, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr ptr, ptr %18, i32 1
  %20 = getelementptr ptr, ptr %18, i32 2
  %21 = getelementptr ptr, ptr %18, i32 3
  %22 = getelementptr ptr, ptr %18, i32 4
  %23 = load i64, ptr %19, align 4
  %24 = load i64, ptr %20, align 4
  %25 = load ptr, ptr %21, align 8
  %26 = load ptr, ptr %22, align 8
  %27 = call i1 @subtype_test_wrapper(ptr %25, i64 %24, i64 %23, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %26)
  %28 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %29 = getelementptr [50 x ptr], ptr %28, i32 0, i32 18
  %30 = getelementptr ptr, ptr %29, i32 7
  %31 = load ptr, ptr %30, align 8
  ret ptr %31
}

define ptr @InterleaveIterable2_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [50 x ptr], ptr %16, i32 0, i32 19
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @InterleaveIterable2_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [50 x ptr], ptr %16, i32 0, i32 20
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @InterleaveIterable2_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [50 x ptr], ptr %16, i32 0, i32 21
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @InterleaveIterable2_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [50 x ptr], ptr %16, i32 0, i32 22
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @InterleaveIterable2_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [50 x ptr], ptr %16, i32 0, i32 23
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @InterleaveIterable2_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [50 x ptr], ptr %16, i32 0, i32 24
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @InterleaveIterable2_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [50 x ptr], ptr %16, i32 0, i32 25
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @InterleaveIterable2_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [50 x ptr], ptr %16, i32 0, i32 26
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define void @InterleaveIterable2_init_firstIterable2T_secondIterable2T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @InterleaveIterable2)
  %21 = call ptr @llvm.invariant.start.p0(i64 24, ptr %8)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %22, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 16, ptr %22)
  %24 = alloca { ptr, ptr, ptr, i32 }, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %36 = load i32, ptr %34, align 4
  store i32 %36, ptr %35, align 4
  call void @set_offset(ptr %24, ptr @Iterable2)
  %37 = call ptr @llvm.invariant.start.p0(i64 24, ptr %24)
  %38 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %39 = extractvalue { ptr, ptr, ptr, i32 } %38, 0
  %40 = call ptr @llvm.invariant.start.p0(i64 400, ptr %39)
  %41 = extractvalue { ptr, ptr, ptr, i32 } %38, 3
  %42 = getelementptr ptr, ptr %39, i32 %41
  %43 = load ptr, ptr %42, align 8
  %44 = extractvalue { ptr, ptr, ptr, i32 } %38, 1
  %45 = call ptr %43(ptr %44)
  %46 = alloca { ptr, ptr, ptr, i32 }, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %49 = load ptr, ptr %47, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %52 = load ptr, ptr %50, align 8
  store ptr %52, ptr %51, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %55 = load ptr, ptr %53, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %58 = load i32, ptr %56, align 4
  store i32 %58, ptr %57, align 4
  call void @set_offset(ptr %46, ptr @Iterable2)
  %59 = call ptr @llvm.invariant.start.p0(i64 24, ptr %46)
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %62 = load ptr, ptr %60, align 8
  store ptr %62, ptr %61, align 8
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %65 = load ptr, ptr %63, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %68 = load ptr, ptr %66, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %71 = load i32, ptr %69, align 4
  store i32 %71, ptr %70, align 4
  %72 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %72, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 16, ptr %72)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 0
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 1
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 2
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %83 = load ptr, ptr %81, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 3
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %86 = load i32, ptr %84, align 4
  store i32 %86, ptr %85, align 4
  call void @set_offset(ptr %74, ptr @Iterable2)
  %87 = call ptr @llvm.invariant.start.p0(i64 24, ptr %74)
  %88 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %89 = extractvalue { ptr, ptr, ptr, i32 } %88, 0
  %90 = call ptr @llvm.invariant.start.p0(i64 400, ptr %89)
  %91 = extractvalue { ptr, ptr, ptr, i32 } %88, 3
  %92 = getelementptr ptr, ptr %89, i32 %91
  %93 = getelementptr ptr, ptr %92, i32 1
  %94 = load ptr, ptr %93, align 8
  %95 = extractvalue { ptr, ptr, ptr, i32 } %88, 1
  %96 = call ptr %94(ptr %95)
  %97 = alloca { ptr, ptr, ptr, i32 }, align 8
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 0
  %100 = load ptr, ptr %98, align 8
  store ptr %100, ptr %99, align 8
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %103 = load ptr, ptr %101, align 8
  store ptr %103, ptr %102, align 8
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 2
  %106 = load ptr, ptr %104, align 8
  store ptr %106, ptr %105, align 8
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  %109 = load i32, ptr %107, align 4
  store i32 %109, ptr %108, align 4
  call void @set_offset(ptr %97, ptr @Iterable2)
  %110 = call ptr @llvm.invariant.start.p0(i64 24, ptr %97)
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 0
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 0
  %113 = load ptr, ptr %111, align 8
  store ptr %113, ptr %112, align 8
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 1
  %116 = load ptr, ptr %114, align 8
  store ptr %116, ptr %115, align 8
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 2
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 2
  %119 = load ptr, ptr %117, align 8
  store ptr %119, ptr %118, align 8
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 3
  %122 = load i32, ptr %120, align 4
  store i32 %122, ptr %121, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @InterleaveIterable2_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @InterleaveIterable2)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 400, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %27 = call ptr %25(ptr %26)
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %29, 0
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %32 = load ptr, ptr %31, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %32, 1
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %35 = load ptr, ptr %34, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %35, 2
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %38 = load i32, ptr %37, align 4
  %39 = insertvalue { ptr, ptr, ptr, i32 } %36, i32 %38, 3
  %40 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %41 = extractvalue { ptr, ptr, ptr, i32 } %40, 0
  %42 = call ptr @llvm.invariant.start.p0(i64 400, ptr %41)
  %43 = extractvalue { ptr, ptr, ptr, i32 } %40, 3
  %44 = getelementptr ptr, ptr %41, i32 %43
  %45 = getelementptr ptr, ptr %44, i32 2
  %46 = load ptr, ptr %45, align 8
  %47 = extractvalue { ptr, ptr, ptr, i32 } %40, 1
  %48 = call ptr %46(ptr %47)
  %49 = alloca [0 x ptr], align 8
  %50 = call ptr @llvm.invariant.start.p0(i64 0, ptr %49)
  %51 = call ptr @llvm.invariant.start.p0(i64 184, ptr %29)
  %52 = getelementptr ptr, ptr %29, i32 %38
  %53 = getelementptr ptr, ptr %52, i32 1
  %54 = load ptr, ptr %53, align 8
  %55 = alloca [0 x ptr], align 8
  %56 = call ptr %54({ ptr, ptr, ptr, i32 } %39, ptr %55)
  %57 = call { ptr, ptr, ptr, i32 } %56({ ptr, ptr, ptr, i32 } %39, { ptr, ptr, ptr, i32 } %39, ptr %49)
  %58 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %57, ptr %58, align 8
  %59 = call ptr @llvm.invariant.start.p0(i64 16, ptr %58)
  %60 = alloca { ptr, ptr, ptr, i32 }, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %63 = load ptr, ptr %61, align 8
  store ptr %63, ptr %62, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %66 = load ptr, ptr %64, align 8
  store ptr %66, ptr %65, align 8
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %69 = load ptr, ptr %67, align 8
  store ptr %69, ptr %68, align 8
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 3
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %72 = load i32, ptr %70, align 4
  store i32 %72, ptr %71, align 4
  call void @set_offset(ptr %60, ptr @Iterator2)
  %73 = call ptr @llvm.invariant.start.p0(i64 24, ptr %60)
  %74 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %75 = extractvalue { ptr, ptr, ptr, i32 } %74, 0
  %76 = call ptr @llvm.invariant.start.p0(i64 400, ptr %75)
  %77 = extractvalue { ptr, ptr, ptr, i32 } %74, 3
  %78 = getelementptr ptr, ptr %75, i32 %77
  %79 = getelementptr ptr, ptr %78, i32 1
  %80 = load ptr, ptr %79, align 8
  %81 = extractvalue { ptr, ptr, ptr, i32 } %74, 1
  %82 = call ptr %80(ptr %81)
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 0
  %84 = load ptr, ptr %83, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %84, 0
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 1
  %87 = load ptr, ptr %86, align 8
  %88 = insertvalue { ptr, ptr, ptr, i32 } %85, ptr %87, 1
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 2
  %90 = load ptr, ptr %89, align 8
  %91 = insertvalue { ptr, ptr, ptr, i32 } %88, ptr %90, 2
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 3
  %93 = load i32, ptr %92, align 4
  %94 = insertvalue { ptr, ptr, ptr, i32 } %91, i32 %93, 3
  %95 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %96 = extractvalue { ptr, ptr, ptr, i32 } %95, 0
  %97 = call ptr @llvm.invariant.start.p0(i64 400, ptr %96)
  %98 = extractvalue { ptr, ptr, ptr, i32 } %95, 3
  %99 = getelementptr ptr, ptr %96, i32 %98
  %100 = getelementptr ptr, ptr %99, i32 2
  %101 = load ptr, ptr %100, align 8
  %102 = extractvalue { ptr, ptr, ptr, i32 } %95, 1
  %103 = call ptr %101(ptr %102)
  %104 = alloca [0 x ptr], align 8
  %105 = call ptr @llvm.invariant.start.p0(i64 0, ptr %104)
  %106 = call ptr @llvm.invariant.start.p0(i64 184, ptr %84)
  %107 = getelementptr ptr, ptr %84, i32 %93
  %108 = getelementptr ptr, ptr %107, i32 1
  %109 = load ptr, ptr %108, align 8
  %110 = alloca [0 x ptr], align 8
  %111 = call ptr %109({ ptr, ptr, ptr, i32 } %94, ptr %110)
  %112 = call { ptr, ptr, ptr, i32 } %111({ ptr, ptr, ptr, i32 } %94, { ptr, ptr, ptr, i32 } %94, ptr %104)
  %113 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %112, ptr %113, align 8
  %114 = call ptr @llvm.invariant.start.p0(i64 16, ptr %113)
  %115 = alloca { ptr, ptr, ptr, i32 }, align 8
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %113, i32 0, i32 0
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %115, i32 0, i32 0
  %118 = load ptr, ptr %116, align 8
  store ptr %118, ptr %117, align 8
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %113, i32 0, i32 1
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %115, i32 0, i32 1
  %121 = load ptr, ptr %119, align 8
  store ptr %121, ptr %120, align 8
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %113, i32 0, i32 2
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %115, i32 0, i32 2
  %124 = load ptr, ptr %122, align 8
  store ptr %124, ptr %123, align 8
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %113, i32 0, i32 3
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %115, i32 0, i32 3
  %127 = load i32, ptr %125, align 4
  store i32 %127, ptr %126, align 4
  call void @set_offset(ptr %115, ptr @Iterator2)
  %128 = call ptr @llvm.invariant.start.p0(i64 24, ptr %115)
  %129 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %130 = extractvalue { ptr, ptr, ptr, i32 } %129, 0
  %131 = call ptr @llvm.invariant.start.p0(i64 400, ptr %130)
  %132 = extractvalue { ptr, ptr, ptr, i32 } %129, 3
  %133 = getelementptr ptr, ptr %130, i32 %132
  %134 = getelementptr ptr, ptr %133, i32 2
  %135 = load ptr, ptr %134, align 8
  %136 = extractvalue { ptr, ptr, ptr, i32 } %129, 1
  %137 = call ptr %135(ptr %136)
  %138 = load ptr, ptr %137, align 8
  %139 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, i1, ptr }, ptr null, i32 1) to i64))
  %140 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, i1, ptr }, ptr %139, i32 0, i32 3
  store ptr %138, ptr %140, align 8
  %141 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, i1, ptr }, ptr %139, i32 0, i32 3
  %142 = call ptr @llvm.invariant.start.p0(i64 8, ptr %141)
  %143 = alloca { ptr, ptr, ptr, i32 }, align 8
  %144 = getelementptr { ptr, ptr, ptr, i32 }, ptr %143, i32 0, i32 1
  %145 = getelementptr { ptr, ptr, ptr, i32 }, ptr %143, i32 0, i32 3
  store ptr @InterleaveIterator2, ptr %143, align 8
  store ptr %139, ptr %144, align 8
  store i32 7, ptr %145, align 4
  %146 = call ptr @llvm.invariant.start.p0(i64 16, ptr %143)
  %147 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %148 = extractvalue { ptr, ptr, ptr, i32 } %147, 0
  %149 = call ptr @llvm.invariant.start.p0(i64 400, ptr %148)
  %150 = extractvalue { ptr, ptr, ptr, i32 } %147, 3
  %151 = getelementptr ptr, ptr %148, i32 %150
  %152 = load ptr, ptr %151, align 8
  %153 = extractvalue { ptr, ptr, ptr, i32 } %147, 1
  %154 = call ptr %152(ptr %153)
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %154, i32 0, i32 0
  %156 = load ptr, ptr %155, align 8
  %157 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %156, 0
  %158 = getelementptr { ptr, ptr, ptr, i32 }, ptr %154, i32 0, i32 1
  %159 = load ptr, ptr %158, align 8
  %160 = insertvalue { ptr, ptr, ptr, i32 } %157, ptr %159, 1
  %161 = getelementptr { ptr, ptr, ptr, i32 }, ptr %154, i32 0, i32 2
  %162 = load ptr, ptr %161, align 8
  %163 = insertvalue { ptr, ptr, ptr, i32 } %160, ptr %162, 2
  %164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %154, i32 0, i32 3
  %165 = load i32, ptr %164, align 4
  %166 = insertvalue { ptr, ptr, ptr, i32 } %163, i32 %165, 3
  %167 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %168 = extractvalue { ptr, ptr, ptr, i32 } %167, 0
  %169 = call ptr @llvm.invariant.start.p0(i64 400, ptr %168)
  %170 = extractvalue { ptr, ptr, ptr, i32 } %167, 3
  %171 = getelementptr ptr, ptr %168, i32 %170
  %172 = getelementptr ptr, ptr %171, i32 2
  %173 = load ptr, ptr %172, align 8
  %174 = extractvalue { ptr, ptr, ptr, i32 } %167, 1
  %175 = call ptr %173(ptr %174)
  %176 = alloca [0 x ptr], align 8
  %177 = call ptr @llvm.invariant.start.p0(i64 0, ptr %176)
  %178 = call ptr @llvm.invariant.start.p0(i64 184, ptr %156)
  %179 = getelementptr ptr, ptr %156, i32 %165
  %180 = getelementptr ptr, ptr %179, i32 1
  %181 = load ptr, ptr %180, align 8
  %182 = alloca [0 x ptr], align 8
  %183 = call ptr %181({ ptr, ptr, ptr, i32 } %166, ptr %182)
  %184 = call { ptr, ptr, ptr, i32 } %183({ ptr, ptr, ptr, i32 } %166, { ptr, ptr, ptr, i32 } %166, ptr %176)
  %185 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %184, ptr %185, align 8
  %186 = call ptr @llvm.invariant.start.p0(i64 16, ptr %185)
  %187 = alloca { ptr, ptr, ptr, i32 }, align 8
  %188 = getelementptr { ptr, ptr, ptr, i32 }, ptr %185, i32 0, i32 0
  %189 = getelementptr { ptr, ptr, ptr, i32 }, ptr %187, i32 0, i32 0
  %190 = load ptr, ptr %188, align 8
  store ptr %190, ptr %189, align 8
  %191 = getelementptr { ptr, ptr, ptr, i32 }, ptr %185, i32 0, i32 1
  %192 = getelementptr { ptr, ptr, ptr, i32 }, ptr %187, i32 0, i32 1
  %193 = load ptr, ptr %191, align 8
  store ptr %193, ptr %192, align 8
  %194 = getelementptr { ptr, ptr, ptr, i32 }, ptr %185, i32 0, i32 2
  %195 = getelementptr { ptr, ptr, ptr, i32 }, ptr %187, i32 0, i32 2
  %196 = load ptr, ptr %194, align 8
  store ptr %196, ptr %195, align 8
  %197 = getelementptr { ptr, ptr, ptr, i32 }, ptr %185, i32 0, i32 3
  %198 = getelementptr { ptr, ptr, ptr, i32 }, ptr %187, i32 0, i32 3
  %199 = load i32, ptr %197, align 4
  store i32 %199, ptr %198, align 4
  call void @set_offset(ptr %187, ptr @Iterator2)
  %200 = call ptr @llvm.invariant.start.p0(i64 24, ptr %187)
  %201 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %202 = extractvalue { ptr, ptr, ptr, i32 } %201, 0
  %203 = call ptr @llvm.invariant.start.p0(i64 400, ptr %202)
  %204 = extractvalue { ptr, ptr, ptr, i32 } %201, 3
  %205 = getelementptr ptr, ptr %202, i32 %204
  %206 = getelementptr ptr, ptr %205, i32 1
  %207 = load ptr, ptr %206, align 8
  %208 = extractvalue { ptr, ptr, ptr, i32 } %201, 1
  %209 = call ptr %207(ptr %208)
  %210 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 0
  %211 = load ptr, ptr %210, align 8
  %212 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %211, 0
  %213 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 1
  %214 = load ptr, ptr %213, align 8
  %215 = insertvalue { ptr, ptr, ptr, i32 } %212, ptr %214, 1
  %216 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 2
  %217 = load ptr, ptr %216, align 8
  %218 = insertvalue { ptr, ptr, ptr, i32 } %215, ptr %217, 2
  %219 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 3
  %220 = load i32, ptr %219, align 4
  %221 = insertvalue { ptr, ptr, ptr, i32 } %218, i32 %220, 3
  %222 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %223 = extractvalue { ptr, ptr, ptr, i32 } %222, 0
  %224 = call ptr @llvm.invariant.start.p0(i64 400, ptr %223)
  %225 = extractvalue { ptr, ptr, ptr, i32 } %222, 3
  %226 = getelementptr ptr, ptr %223, i32 %225
  %227 = getelementptr ptr, ptr %226, i32 2
  %228 = load ptr, ptr %227, align 8
  %229 = extractvalue { ptr, ptr, ptr, i32 } %222, 1
  %230 = call ptr %228(ptr %229)
  %231 = alloca [0 x ptr], align 8
  %232 = call ptr @llvm.invariant.start.p0(i64 0, ptr %231)
  %233 = call ptr @llvm.invariant.start.p0(i64 184, ptr %211)
  %234 = getelementptr ptr, ptr %211, i32 %220
  %235 = getelementptr ptr, ptr %234, i32 1
  %236 = load ptr, ptr %235, align 8
  %237 = alloca [0 x ptr], align 8
  %238 = call ptr %236({ ptr, ptr, ptr, i32 } %221, ptr %237)
  %239 = call { ptr, ptr, ptr, i32 } %238({ ptr, ptr, ptr, i32 } %221, { ptr, ptr, ptr, i32 } %221, ptr %231)
  %240 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %239, ptr %240, align 8
  %241 = call ptr @llvm.invariant.start.p0(i64 16, ptr %240)
  %242 = alloca { ptr, ptr, ptr, i32 }, align 8
  %243 = getelementptr { ptr, ptr, ptr, i32 }, ptr %240, i32 0, i32 0
  %244 = getelementptr { ptr, ptr, ptr, i32 }, ptr %242, i32 0, i32 0
  %245 = load ptr, ptr %243, align 8
  store ptr %245, ptr %244, align 8
  %246 = getelementptr { ptr, ptr, ptr, i32 }, ptr %240, i32 0, i32 1
  %247 = getelementptr { ptr, ptr, ptr, i32 }, ptr %242, i32 0, i32 1
  %248 = load ptr, ptr %246, align 8
  store ptr %248, ptr %247, align 8
  %249 = getelementptr { ptr, ptr, ptr, i32 }, ptr %240, i32 0, i32 2
  %250 = getelementptr { ptr, ptr, ptr, i32 }, ptr %242, i32 0, i32 2
  %251 = load ptr, ptr %249, align 8
  store ptr %251, ptr %250, align 8
  %252 = getelementptr { ptr, ptr, ptr, i32 }, ptr %240, i32 0, i32 3
  %253 = getelementptr { ptr, ptr, ptr, i32 }, ptr %242, i32 0, i32 3
  %254 = load i32, ptr %252, align 4
  store i32 %254, ptr %253, align 4
  call void @set_offset(ptr %242, ptr @Iterator2)
  %255 = call ptr @llvm.invariant.start.p0(i64 24, ptr %242)
  %256 = alloca { ptr, ptr, ptr, i32 }, align 8
  %257 = getelementptr { ptr, ptr, ptr, i32 }, ptr %187, i32 0, i32 0
  %258 = getelementptr { ptr, ptr, ptr, i32 }, ptr %256, i32 0, i32 0
  %259 = load ptr, ptr %257, align 8
  store ptr %259, ptr %258, align 8
  %260 = getelementptr { ptr, ptr, ptr, i32 }, ptr %187, i32 0, i32 1
  %261 = getelementptr { ptr, ptr, ptr, i32 }, ptr %256, i32 0, i32 1
  %262 = load ptr, ptr %260, align 8
  store ptr %262, ptr %261, align 8
  %263 = getelementptr { ptr, ptr, ptr, i32 }, ptr %187, i32 0, i32 2
  %264 = getelementptr { ptr, ptr, ptr, i32 }, ptr %256, i32 0, i32 2
  %265 = load ptr, ptr %263, align 8
  store ptr %265, ptr %264, align 8
  %266 = getelementptr { ptr, ptr, ptr, i32 }, ptr %187, i32 0, i32 3
  %267 = getelementptr { ptr, ptr, ptr, i32 }, ptr %256, i32 0, i32 3
  %268 = load i32, ptr %266, align 4
  store i32 %268, ptr %267, align 4
  call void @set_offset(ptr %256, ptr @Iterator2)
  %269 = call ptr @llvm.invariant.start.p0(i64 24, ptr %256)
  %270 = getelementptr { ptr, ptr, ptr, i32 }, ptr %256, i32 0, i32 0
  %271 = load ptr, ptr %270, align 8
  %272 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %271, 0
  %273 = getelementptr { ptr, ptr, ptr, i32 }, ptr %256, i32 0, i32 1
  %274 = load ptr, ptr %273, align 8
  %275 = insertvalue { ptr, ptr, ptr, i32 } %272, ptr %274, 1
  %276 = getelementptr { ptr, ptr, ptr, i32 }, ptr %256, i32 0, i32 2
  %277 = load ptr, ptr %276, align 8
  %278 = insertvalue { ptr, ptr, ptr, i32 } %275, ptr %277, 2
  %279 = getelementptr { ptr, ptr, ptr, i32 }, ptr %256, i32 0, i32 3
  %280 = load i32, ptr %279, align 4
  %281 = insertvalue { ptr, ptr, ptr, i32 } %278, i32 %280, 3
  %282 = alloca { ptr, ptr, ptr, i32 }, align 8
  %283 = getelementptr { ptr, ptr, ptr, i32 }, ptr %242, i32 0, i32 0
  %284 = getelementptr { ptr, ptr, ptr, i32 }, ptr %282, i32 0, i32 0
  %285 = load ptr, ptr %283, align 8
  store ptr %285, ptr %284, align 8
  %286 = getelementptr { ptr, ptr, ptr, i32 }, ptr %242, i32 0, i32 1
  %287 = getelementptr { ptr, ptr, ptr, i32 }, ptr %282, i32 0, i32 1
  %288 = load ptr, ptr %286, align 8
  store ptr %288, ptr %287, align 8
  %289 = getelementptr { ptr, ptr, ptr, i32 }, ptr %242, i32 0, i32 2
  %290 = getelementptr { ptr, ptr, ptr, i32 }, ptr %282, i32 0, i32 2
  %291 = load ptr, ptr %289, align 8
  store ptr %291, ptr %290, align 8
  %292 = getelementptr { ptr, ptr, ptr, i32 }, ptr %242, i32 0, i32 3
  %293 = getelementptr { ptr, ptr, ptr, i32 }, ptr %282, i32 0, i32 3
  %294 = load i32, ptr %292, align 4
  store i32 %294, ptr %293, align 4
  call void @set_offset(ptr %282, ptr @Iterator2)
  %295 = call ptr @llvm.invariant.start.p0(i64 24, ptr %282)
  %296 = getelementptr { ptr, ptr, ptr, i32 }, ptr %282, i32 0, i32 0
  %297 = load ptr, ptr %296, align 8
  %298 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %297, 0
  %299 = getelementptr { ptr, ptr, ptr, i32 }, ptr %282, i32 0, i32 1
  %300 = load ptr, ptr %299, align 8
  %301 = insertvalue { ptr, ptr, ptr, i32 } %298, ptr %300, 1
  %302 = getelementptr { ptr, ptr, ptr, i32 }, ptr %282, i32 0, i32 2
  %303 = load ptr, ptr %302, align 8
  %304 = insertvalue { ptr, ptr, ptr, i32 } %301, ptr %303, 2
  %305 = getelementptr { ptr, ptr, ptr, i32 }, ptr %282, i32 0, i32 3
  %306 = load i32, ptr %305, align 4
  %307 = insertvalue { ptr, ptr, ptr, i32 } %304, i32 %306, 3
  %308 = getelementptr { ptr, ptr, ptr, i32 }, ptr %143, i32 0, i32 0
  %309 = load ptr, ptr %308, align 8
  %310 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %309, 0
  %311 = getelementptr { ptr, ptr, ptr, i32 }, ptr %143, i32 0, i32 1
  %312 = load ptr, ptr %311, align 8
  %313 = insertvalue { ptr, ptr, ptr, i32 } %310, ptr %312, 1
  %314 = getelementptr { ptr, ptr, ptr, i32 }, ptr %143, i32 0, i32 2
  %315 = load ptr, ptr %314, align 8
  %316 = insertvalue { ptr, ptr, ptr, i32 } %313, ptr %315, 2
  %317 = getelementptr { ptr, ptr, ptr, i32 }, ptr %143, i32 0, i32 3
  %318 = load i32, ptr %317, align 4
  %319 = insertvalue { ptr, ptr, ptr, i32 } %316, i32 %318, 3
  %320 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %321 = extractvalue { ptr, ptr, ptr, i32 } %320, 0
  %322 = call ptr @llvm.invariant.start.p0(i64 400, ptr %321)
  %323 = extractvalue { ptr, ptr, ptr, i32 } %320, 3
  %324 = getelementptr ptr, ptr %321, i32 %323
  %325 = getelementptr ptr, ptr %324, i32 2
  %326 = load ptr, ptr %325, align 8
  %327 = extractvalue { ptr, ptr, ptr, i32 } %320, 1
  %328 = call ptr %326(ptr %327)
  %329 = load ptr, ptr %328, align 8
  %330 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ([2 x ptr], ptr null, i32 1) to i64))
  %331 = call ptr @llvm.invariant.start.p0(i64 16, ptr %330)
  %332 = getelementptr [2 x ptr], ptr %330, i32 0, i32 1
  store ptr %329, ptr %332, align 8
  store ptr @Iterator2, ptr %330, align 8
  %333 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ([2 x ptr], ptr null, i32 1) to i64))
  %334 = call ptr @llvm.invariant.start.p0(i64 16, ptr %333)
  %335 = getelementptr [2 x ptr], ptr %333, i32 0, i32 1
  store ptr %329, ptr %335, align 8
  store ptr @Iterator2, ptr %333, align 8
  %336 = alloca [2 x ptr], align 8
  %337 = call ptr @llvm.invariant.start.p0(i64 16, ptr %336)
  %338 = getelementptr [2 x ptr], ptr %336, i32 0, i32 1
  store ptr %333, ptr %338, align 8
  %339 = getelementptr [2 x ptr], ptr %336, i32 0, i32 0
  store ptr %330, ptr %339, align 8
  %340 = call ptr @llvm.invariant.start.p0(i64 88, ptr %309)
  %341 = getelementptr ptr, ptr %309, i32 %318
  %342 = getelementptr ptr, ptr %341, i32 4
  %343 = load ptr, ptr %342, align 8
  %344 = alloca [2 x ptr], align 8
  %345 = getelementptr [2 x ptr], ptr %344, i32 0, i32 0
  store ptr %271, ptr %345, align 8
  %346 = getelementptr [2 x ptr], ptr %344, i32 0, i32 1
  store ptr %297, ptr %346, align 8
  %347 = call ptr %343({ ptr, ptr, ptr, i32 } %319, ptr %344, { ptr, ptr, ptr, i32 } %281, { ptr, ptr, ptr, i32 } %307)
  call void %347({ ptr, ptr, ptr, i32 } %319, { ptr, ptr, ptr, i32 } %319, ptr %336, { ptr, ptr, ptr, i32 } %281, { ptr, ptr, ptr, i32 } %307)
  %348 = alloca { ptr, ptr, ptr, i32 }, align 8
  %349 = getelementptr { ptr, ptr, ptr, i32 }, ptr %143, i32 0, i32 0
  %350 = getelementptr { ptr, ptr, ptr, i32 }, ptr %348, i32 0, i32 0
  %351 = load ptr, ptr %349, align 8
  store ptr %351, ptr %350, align 8
  %352 = getelementptr { ptr, ptr, ptr, i32 }, ptr %143, i32 0, i32 1
  %353 = getelementptr { ptr, ptr, ptr, i32 }, ptr %348, i32 0, i32 1
  %354 = load ptr, ptr %352, align 8
  store ptr %354, ptr %353, align 8
  %355 = getelementptr { ptr, ptr, ptr, i32 }, ptr %143, i32 0, i32 2
  %356 = getelementptr { ptr, ptr, ptr, i32 }, ptr %348, i32 0, i32 2
  %357 = load ptr, ptr %355, align 8
  store ptr %357, ptr %356, align 8
  %358 = getelementptr { ptr, ptr, ptr, i32 }, ptr %143, i32 0, i32 3
  %359 = getelementptr { ptr, ptr, ptr, i32 }, ptr %348, i32 0, i32 3
  %360 = load i32, ptr %358, align 4
  store i32 %360, ptr %359, align 4
  call void @set_offset(ptr %348, ptr @Iterator2)
  %361 = call ptr @llvm.invariant.start.p0(i64 24, ptr %348)
  %362 = getelementptr { ptr, ptr, ptr, i32 }, ptr %348, i32 0, i32 0
  %363 = load ptr, ptr %362, align 8
  %364 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %363, 0
  %365 = getelementptr { ptr, ptr, ptr, i32 }, ptr %348, i32 0, i32 1
  %366 = load ptr, ptr %365, align 8
  %367 = insertvalue { ptr, ptr, ptr, i32 } %364, ptr %366, 1
  %368 = getelementptr { ptr, ptr, ptr, i32 }, ptr %348, i32 0, i32 2
  %369 = load ptr, ptr %368, align 8
  %370 = insertvalue { ptr, ptr, ptr, i32 } %367, ptr %369, 2
  %371 = getelementptr { ptr, ptr, ptr, i32 }, ptr %348, i32 0, i32 3
  %372 = load i32, ptr %371, align 4
  %373 = insertvalue { ptr, ptr, ptr, i32 } %370, i32 %372, 3
  ret { ptr, ptr, ptr, i32 } %373
}

define ptr @InterleaveIterator2_field_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, i1, ptr }, ptr %0, i32 0, i32 0
  ret ptr %2
}

define ptr @InterleaveIterator2_field_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, i1, ptr }, ptr %0, i32 0, i32 1
  ret ptr %2
}

define ptr @InterleaveIterator2_field_on_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, i1, ptr }, ptr %0, i32 0, i32 2
  ret ptr %2
}

define ptr @InterleaveIterator2_field_InterleaveIterator2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, i1, ptr }, ptr %0, i32 0, i32 3
  ret ptr %2
}

define ptr @InterleaveIterator2_B_init_firstIterator2T_secondIterator2T({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2, { ptr, ptr, ptr, i32 } %3) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = getelementptr [2 x ptr], ptr %1, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr ptr, ptr %7, i32 1
  %9 = getelementptr ptr, ptr %7, i32 2
  %10 = getelementptr ptr, ptr %7, i32 3
  %11 = getelementptr ptr, ptr %7, i32 4
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 4189192806087951739, i64 ptrtoint (ptr @Iterator2 to i64), ptr %15)
  %17 = getelementptr [2 x ptr], ptr %1, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr ptr, ptr %18, i32 1
  %20 = getelementptr ptr, ptr %18, i32 2
  %21 = getelementptr ptr, ptr %18, i32 3
  %22 = getelementptr ptr, ptr %18, i32 4
  %23 = load i64, ptr %19, align 4
  %24 = load i64, ptr %20, align 4
  %25 = load ptr, ptr %21, align 8
  %26 = load ptr, ptr %22, align 8
  %27 = call i1 @subtype_test_wrapper(ptr %25, i64 %24, i64 %23, i64 4189192806087951739, i64 ptrtoint (ptr @Iterator2 to i64), ptr %26)
  %28 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %29 = getelementptr [11 x ptr], ptr %28, i32 0, i32 6
  %30 = getelementptr ptr, ptr %29, i32 7
  %31 = load ptr, ptr %30, align 8
  ret ptr %31
}

define ptr @InterleaveIterator2_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [11 x ptr], ptr %4, i32 0, i32 7
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @InterleaveIterator2_init_firstIterator2T_secondIterator2T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @InterleaveIterator2)
  %21 = call ptr @llvm.invariant.start.p0(i64 24, ptr %8)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %22, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 16, ptr %22)
  %24 = alloca { ptr, ptr, ptr, i32 }, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %36 = load i32, ptr %34, align 4
  store i32 %36, ptr %35, align 4
  call void @set_offset(ptr %24, ptr @Iterator2)
  %37 = call ptr @llvm.invariant.start.p0(i64 24, ptr %24)
  %38 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %39 = extractvalue { ptr, ptr, ptr, i32 } %38, 0
  %40 = call ptr @llvm.invariant.start.p0(i64 88, ptr %39)
  %41 = extractvalue { ptr, ptr, ptr, i32 } %38, 3
  %42 = getelementptr ptr, ptr %39, i32 %41
  %43 = load ptr, ptr %42, align 8
  %44 = extractvalue { ptr, ptr, ptr, i32 } %38, 1
  %45 = call ptr %43(ptr %44)
  %46 = alloca { ptr, ptr, ptr, i32 }, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %49 = load ptr, ptr %47, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %52 = load ptr, ptr %50, align 8
  store ptr %52, ptr %51, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %55 = load ptr, ptr %53, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %58 = load i32, ptr %56, align 4
  store i32 %58, ptr %57, align 4
  call void @set_offset(ptr %46, ptr @Iterator2)
  %59 = call ptr @llvm.invariant.start.p0(i64 24, ptr %46)
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %62 = load ptr, ptr %60, align 8
  store ptr %62, ptr %61, align 8
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %65 = load ptr, ptr %63, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %68 = load ptr, ptr %66, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %71 = load i32, ptr %69, align 4
  store i32 %71, ptr %70, align 4
  %72 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %72, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 16, ptr %72)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 0
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 1
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 2
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %83 = load ptr, ptr %81, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 3
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %86 = load i32, ptr %84, align 4
  store i32 %86, ptr %85, align 4
  call void @set_offset(ptr %74, ptr @Iterator2)
  %87 = call ptr @llvm.invariant.start.p0(i64 24, ptr %74)
  %88 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %89 = extractvalue { ptr, ptr, ptr, i32 } %88, 0
  %90 = call ptr @llvm.invariant.start.p0(i64 88, ptr %89)
  %91 = extractvalue { ptr, ptr, ptr, i32 } %88, 3
  %92 = getelementptr ptr, ptr %89, i32 %91
  %93 = getelementptr ptr, ptr %92, i32 1
  %94 = load ptr, ptr %93, align 8
  %95 = extractvalue { ptr, ptr, ptr, i32 } %88, 1
  %96 = call ptr %94(ptr %95)
  %97 = alloca { ptr, ptr, ptr, i32 }, align 8
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 0
  %100 = load ptr, ptr %98, align 8
  store ptr %100, ptr %99, align 8
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %103 = load ptr, ptr %101, align 8
  store ptr %103, ptr %102, align 8
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 2
  %106 = load ptr, ptr %104, align 8
  store ptr %106, ptr %105, align 8
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  %109 = load i32, ptr %107, align 4
  store i32 %109, ptr %108, align 4
  call void @set_offset(ptr %97, ptr @Iterator2)
  %110 = call ptr @llvm.invariant.start.p0(i64 24, ptr %97)
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 0
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 0
  %113 = load ptr, ptr %111, align 8
  store ptr %113, ptr %112, align 8
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 1
  %116 = load ptr, ptr %114, align 8
  store ptr %116, ptr %115, align 8
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 2
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 2
  %119 = load ptr, ptr %117, align 8
  store ptr %119, ptr %118, align 8
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 3
  %122 = load i32, ptr %120, align 4
  store i32 %122, ptr %121, align 4
  %123 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %124 = extractvalue { ptr, ptr, ptr, i32 } %123, 0
  %125 = call ptr @llvm.invariant.start.p0(i64 88, ptr %124)
  %126 = extractvalue { ptr, ptr, ptr, i32 } %123, 3
  %127 = getelementptr ptr, ptr %124, i32 %126
  %128 = getelementptr ptr, ptr %127, i32 2
  %129 = load ptr, ptr %128, align 8
  %130 = extractvalue { ptr, ptr, ptr, i32 } %123, 1
  %131 = call ptr %129(ptr %130)
  store i1 true, ptr %131, align 1
  ret void
}

define { ptr, i160 } @InterleaveIterator2_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @InterleaveIterator2)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 88, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 2
  %26 = load ptr, ptr %25, align 8
  %27 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %28 = call ptr %26(ptr %27)
  %29 = load i1, ptr %28, align 1
  %30 = alloca i1, align 1
  %31 = alloca [0 x ptr], align 8
  %32 = alloca [0 x ptr], align 8
  %33 = alloca { ptr, i160 }, align 8
  %34 = alloca i1, align 1
  %35 = alloca [0 x ptr], align 8
  %36 = alloca [0 x ptr], align 8
  %37 = alloca { ptr, i160 }, align 8
  br i1 %29, label %38, label %91

38:                                               ; preds = %3
  store i1 false, ptr %30, align 1
  %39 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %40 = extractvalue { ptr, ptr, ptr, i32 } %39, 0
  %41 = call ptr @llvm.invariant.start.p0(i64 88, ptr %40)
  %42 = extractvalue { ptr, ptr, ptr, i32 } %39, 3
  %43 = getelementptr ptr, ptr %40, i32 %42
  %44 = getelementptr ptr, ptr %43, i32 2
  %45 = load ptr, ptr %44, align 8
  %46 = extractvalue { ptr, ptr, ptr, i32 } %39, 1
  %47 = call ptr %45(ptr %46)
  %48 = load i1, ptr %30, align 1
  store i1 %48, ptr %47, align 1
  %49 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %50 = extractvalue { ptr, ptr, ptr, i32 } %49, 0
  %51 = call ptr @llvm.invariant.start.p0(i64 88, ptr %50)
  %52 = extractvalue { ptr, ptr, ptr, i32 } %49, 3
  %53 = getelementptr ptr, ptr %50, i32 %52
  %54 = load ptr, ptr %53, align 8
  %55 = extractvalue { ptr, ptr, ptr, i32 } %49, 1
  %56 = call ptr %54(ptr %55)
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 0
  %58 = load ptr, ptr %57, align 8
  %59 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %58, 0
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 1
  %61 = load ptr, ptr %60, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } %59, ptr %61, 1
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 2
  %64 = load ptr, ptr %63, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %62, ptr %64, 2
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 3
  %67 = load i32, ptr %66, align 4
  %68 = insertvalue { ptr, ptr, ptr, i32 } %65, i32 %67, 3
  %69 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %70 = extractvalue { ptr, ptr, ptr, i32 } %69, 0
  %71 = call ptr @llvm.invariant.start.p0(i64 88, ptr %70)
  %72 = extractvalue { ptr, ptr, ptr, i32 } %69, 3
  %73 = getelementptr ptr, ptr %70, i32 %72
  %74 = getelementptr ptr, ptr %73, i32 3
  %75 = load ptr, ptr %74, align 8
  %76 = extractvalue { ptr, ptr, ptr, i32 } %69, 1
  %77 = call ptr %75(ptr %76)
  %78 = call ptr @llvm.invariant.start.p0(i64 0, ptr %31)
  %79 = call ptr @llvm.invariant.start.p0(i64 24, ptr %58)
  %80 = getelementptr ptr, ptr %58, i32 %67
  %81 = getelementptr ptr, ptr %80, i32 1
  %82 = load ptr, ptr %81, align 8
  %83 = call ptr %82({ ptr, ptr, ptr, i32 } %68, ptr %32)
  %84 = call { ptr, i160 } %83({ ptr, ptr, ptr, i32 } %68, { ptr, ptr, ptr, i32 } %68, ptr %31)
  store { ptr, i160 } %84, ptr %33, align 8
  %85 = getelementptr { ptr, i160 }, ptr %33, i32 0, i32 0
  %86 = load ptr, ptr %85, align 8
  %87 = insertvalue { ptr, i160 } undef, ptr %86, 0
  %88 = getelementptr { ptr, i160 }, ptr %33, i32 0, i32 1
  %89 = load i160, ptr %88, align 4
  %90 = insertvalue { ptr, i160 } %87, i160 %89, 1
  store { ptr, i160 } %90, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem5, align 8
  br label %145

91:                                               ; preds = %3
  store i1 true, ptr %34, align 1
  %92 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %93 = extractvalue { ptr, ptr, ptr, i32 } %92, 0
  %94 = call ptr @llvm.invariant.start.p0(i64 88, ptr %93)
  %95 = extractvalue { ptr, ptr, ptr, i32 } %92, 3
  %96 = getelementptr ptr, ptr %93, i32 %95
  %97 = getelementptr ptr, ptr %96, i32 2
  %98 = load ptr, ptr %97, align 8
  %99 = extractvalue { ptr, ptr, ptr, i32 } %92, 1
  %100 = call ptr %98(ptr %99)
  %101 = load i1, ptr %34, align 1
  store i1 %101, ptr %100, align 1
  %102 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %103 = extractvalue { ptr, ptr, ptr, i32 } %102, 0
  %104 = call ptr @llvm.invariant.start.p0(i64 88, ptr %103)
  %105 = extractvalue { ptr, ptr, ptr, i32 } %102, 3
  %106 = getelementptr ptr, ptr %103, i32 %105
  %107 = getelementptr ptr, ptr %106, i32 1
  %108 = load ptr, ptr %107, align 8
  %109 = extractvalue { ptr, ptr, ptr, i32 } %102, 1
  %110 = call ptr %108(ptr %109)
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %110, i32 0, i32 0
  %112 = load ptr, ptr %111, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %112, 0
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %110, i32 0, i32 1
  %115 = load ptr, ptr %114, align 8
  %116 = insertvalue { ptr, ptr, ptr, i32 } %113, ptr %115, 1
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %110, i32 0, i32 2
  %118 = load ptr, ptr %117, align 8
  %119 = insertvalue { ptr, ptr, ptr, i32 } %116, ptr %118, 2
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %110, i32 0, i32 3
  %121 = load i32, ptr %120, align 4
  %122 = insertvalue { ptr, ptr, ptr, i32 } %119, i32 %121, 3
  %123 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %124 = extractvalue { ptr, ptr, ptr, i32 } %123, 0
  %125 = call ptr @llvm.invariant.start.p0(i64 88, ptr %124)
  %126 = extractvalue { ptr, ptr, ptr, i32 } %123, 3
  %127 = getelementptr ptr, ptr %124, i32 %126
  %128 = getelementptr ptr, ptr %127, i32 3
  %129 = load ptr, ptr %128, align 8
  %130 = extractvalue { ptr, ptr, ptr, i32 } %123, 1
  %131 = call ptr %129(ptr %130)
  %132 = call ptr @llvm.invariant.start.p0(i64 0, ptr %35)
  %133 = call ptr @llvm.invariant.start.p0(i64 24, ptr %112)
  %134 = getelementptr ptr, ptr %112, i32 %121
  %135 = getelementptr ptr, ptr %134, i32 1
  %136 = load ptr, ptr %135, align 8
  %137 = call ptr %136({ ptr, ptr, ptr, i32 } %122, ptr %36)
  %138 = call { ptr, i160 } %137({ ptr, ptr, ptr, i32 } %122, { ptr, ptr, ptr, i32 } %122, ptr %35)
  store { ptr, i160 } %138, ptr %37, align 8
  %139 = getelementptr { ptr, i160 }, ptr %37, i32 0, i32 0
  %140 = load ptr, ptr %139, align 8
  %141 = insertvalue { ptr, i160 } undef, ptr %140, 0
  %142 = getelementptr { ptr, i160 }, ptr %37, i32 0, i32 1
  %143 = load i160, ptr %142, align 4
  %144 = insertvalue { ptr, i160 } %141, i160 %143, 1
  store { ptr, i160 } %144, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem5, align 8
  br label %145

145:                                              ; preds = %91, %38
  %.reload6 = load { ptr, i160 }, ptr %.reg2mem5, align 8
  store { ptr, i160 } %.reload6, ptr %.reg2mem, align 8
  br label %146

146:                                              ; preds = %145
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  ret { ptr, i160 } %.reload
}

define ptr @ChainIterable2_field_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, ptr }, ptr %0, i32 0, i32 0
  ret ptr %2
}

define ptr @ChainIterable2_field_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, ptr }, ptr %0, i32 0, i32 1
  ret ptr %2
}

define ptr @ChainIterable2_field_ChainIterable2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, ptr }, ptr %0, i32 0, i32 2
  ret ptr %2
}

define ptr @ChainIterable2_B_init_firstIterable2T_secondIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2, { ptr, ptr, ptr, i32 } %3) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = getelementptr [2 x ptr], ptr %1, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr ptr, ptr %7, i32 1
  %9 = getelementptr ptr, ptr %7, i32 2
  %10 = getelementptr ptr, ptr %7, i32 3
  %11 = getelementptr ptr, ptr %7, i32 4
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %15)
  %17 = getelementptr [2 x ptr], ptr %1, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr ptr, ptr %18, i32 1
  %20 = getelementptr ptr, ptr %18, i32 2
  %21 = getelementptr ptr, ptr %18, i32 3
  %22 = getelementptr ptr, ptr %18, i32 4
  %23 = load i64, ptr %19, align 4
  %24 = load i64, ptr %20, align 4
  %25 = load ptr, ptr %21, align 8
  %26 = load ptr, ptr %22, align 8
  %27 = call i1 @subtype_test_wrapper(ptr %25, i64 %24, i64 %23, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %26)
  %28 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %29 = getelementptr [50 x ptr], ptr %28, i32 0, i32 15
  %30 = getelementptr ptr, ptr %29, i32 7
  %31 = load ptr, ptr %30, align 8
  ret ptr %31
}

define ptr @ChainIterable2_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [50 x ptr], ptr %4, i32 0, i32 16
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @ChainIterable2_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [50 x ptr], ptr %16, i32 0, i32 17
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @ChainIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, i160 } %2, { ptr } %3) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = getelementptr [2 x ptr], ptr %1, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr ptr, ptr %7, i32 1
  %9 = getelementptr ptr, ptr %7, i32 2
  %10 = getelementptr ptr, ptr %7, i32 3
  %11 = getelementptr ptr, ptr %7, i32 4
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 3282773614056351330, i64 ptrtoint (ptr @Object to i64), ptr %15)
  %17 = getelementptr [2 x ptr], ptr %1, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr ptr, ptr %18, i32 1
  %20 = getelementptr ptr, ptr %18, i32 2
  %21 = getelementptr ptr, ptr %18, i32 3
  %22 = getelementptr ptr, ptr %18, i32 4
  %23 = load i64, ptr %19, align 4
  %24 = load i64, ptr %20, align 4
  %25 = load ptr, ptr %21, align 8
  %26 = load ptr, ptr %22, align 8
  %27 = call i1 @subtype_test_wrapper(ptr %25, i64 %24, i64 %23, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %26)
  %28 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %29 = getelementptr [50 x ptr], ptr %28, i32 0, i32 18
  %30 = getelementptr ptr, ptr %29, i32 7
  %31 = load ptr, ptr %30, align 8
  ret ptr %31
}

define ptr @ChainIterable2_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [50 x ptr], ptr %16, i32 0, i32 19
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @ChainIterable2_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [50 x ptr], ptr %16, i32 0, i32 20
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @ChainIterable2_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [50 x ptr], ptr %16, i32 0, i32 21
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @ChainIterable2_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [50 x ptr], ptr %16, i32 0, i32 22
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @ChainIterable2_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [50 x ptr], ptr %16, i32 0, i32 23
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @ChainIterable2_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [50 x ptr], ptr %16, i32 0, i32 24
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @ChainIterable2_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [50 x ptr], ptr %16, i32 0, i32 25
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @ChainIterable2_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [50 x ptr], ptr %16, i32 0, i32 26
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define void @ChainIterable2_init_firstIterable2T_secondIterable2T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @ChainIterable2)
  %21 = call ptr @llvm.invariant.start.p0(i64 24, ptr %8)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %22, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 16, ptr %22)
  %24 = alloca { ptr, ptr, ptr, i32 }, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %36 = load i32, ptr %34, align 4
  store i32 %36, ptr %35, align 4
  call void @set_offset(ptr %24, ptr @Iterable2)
  %37 = call ptr @llvm.invariant.start.p0(i64 24, ptr %24)
  %38 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %39 = extractvalue { ptr, ptr, ptr, i32 } %38, 0
  %40 = call ptr @llvm.invariant.start.p0(i64 400, ptr %39)
  %41 = extractvalue { ptr, ptr, ptr, i32 } %38, 3
  %42 = getelementptr ptr, ptr %39, i32 %41
  %43 = load ptr, ptr %42, align 8
  %44 = extractvalue { ptr, ptr, ptr, i32 } %38, 1
  %45 = call ptr %43(ptr %44)
  %46 = alloca { ptr, ptr, ptr, i32 }, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %49 = load ptr, ptr %47, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %52 = load ptr, ptr %50, align 8
  store ptr %52, ptr %51, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %55 = load ptr, ptr %53, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %58 = load i32, ptr %56, align 4
  store i32 %58, ptr %57, align 4
  call void @set_offset(ptr %46, ptr @Iterable2)
  %59 = call ptr @llvm.invariant.start.p0(i64 24, ptr %46)
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %62 = load ptr, ptr %60, align 8
  store ptr %62, ptr %61, align 8
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %65 = load ptr, ptr %63, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %68 = load ptr, ptr %66, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %71 = load i32, ptr %69, align 4
  store i32 %71, ptr %70, align 4
  %72 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %72, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 16, ptr %72)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 0
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 1
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 2
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %83 = load ptr, ptr %81, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 3
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %86 = load i32, ptr %84, align 4
  store i32 %86, ptr %85, align 4
  call void @set_offset(ptr %74, ptr @Iterable2)
  %87 = call ptr @llvm.invariant.start.p0(i64 24, ptr %74)
  %88 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %89 = extractvalue { ptr, ptr, ptr, i32 } %88, 0
  %90 = call ptr @llvm.invariant.start.p0(i64 400, ptr %89)
  %91 = extractvalue { ptr, ptr, ptr, i32 } %88, 3
  %92 = getelementptr ptr, ptr %89, i32 %91
  %93 = getelementptr ptr, ptr %92, i32 1
  %94 = load ptr, ptr %93, align 8
  %95 = extractvalue { ptr, ptr, ptr, i32 } %88, 1
  %96 = call ptr %94(ptr %95)
  %97 = alloca { ptr, ptr, ptr, i32 }, align 8
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 0
  %100 = load ptr, ptr %98, align 8
  store ptr %100, ptr %99, align 8
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %103 = load ptr, ptr %101, align 8
  store ptr %103, ptr %102, align 8
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 2
  %106 = load ptr, ptr %104, align 8
  store ptr %106, ptr %105, align 8
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  %109 = load i32, ptr %107, align 4
  store i32 %109, ptr %108, align 4
  call void @set_offset(ptr %97, ptr @Iterable2)
  %110 = call ptr @llvm.invariant.start.p0(i64 24, ptr %97)
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 0
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 0
  %113 = load ptr, ptr %111, align 8
  store ptr %113, ptr %112, align 8
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 1
  %116 = load ptr, ptr %114, align 8
  store ptr %116, ptr %115, align 8
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 2
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 2
  %119 = load ptr, ptr %117, align 8
  store ptr %119, ptr %118, align 8
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 3
  %122 = load i32, ptr %120, align 4
  store i32 %122, ptr %121, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ChainIterable2_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @ChainIterable2)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 400, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %27 = call ptr %25(ptr %26)
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %29, 0
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %32 = load ptr, ptr %31, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %32, 1
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %35 = load ptr, ptr %34, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %35, 2
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %38 = load i32, ptr %37, align 4
  %39 = insertvalue { ptr, ptr, ptr, i32 } %36, i32 %38, 3
  %40 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %41 = extractvalue { ptr, ptr, ptr, i32 } %40, 0
  %42 = call ptr @llvm.invariant.start.p0(i64 400, ptr %41)
  %43 = extractvalue { ptr, ptr, ptr, i32 } %40, 3
  %44 = getelementptr ptr, ptr %41, i32 %43
  %45 = getelementptr ptr, ptr %44, i32 2
  %46 = load ptr, ptr %45, align 8
  %47 = extractvalue { ptr, ptr, ptr, i32 } %40, 1
  %48 = call ptr %46(ptr %47)
  %49 = alloca [0 x ptr], align 8
  %50 = call ptr @llvm.invariant.start.p0(i64 0, ptr %49)
  %51 = call ptr @llvm.invariant.start.p0(i64 184, ptr %29)
  %52 = getelementptr ptr, ptr %29, i32 %38
  %53 = getelementptr ptr, ptr %52, i32 1
  %54 = load ptr, ptr %53, align 8
  %55 = alloca [0 x ptr], align 8
  %56 = call ptr %54({ ptr, ptr, ptr, i32 } %39, ptr %55)
  %57 = call { ptr, ptr, ptr, i32 } %56({ ptr, ptr, ptr, i32 } %39, { ptr, ptr, ptr, i32 } %39, ptr %49)
  %58 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %57, ptr %58, align 8
  %59 = call ptr @llvm.invariant.start.p0(i64 16, ptr %58)
  %60 = alloca { ptr, ptr, ptr, i32 }, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %63 = load ptr, ptr %61, align 8
  store ptr %63, ptr %62, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %66 = load ptr, ptr %64, align 8
  store ptr %66, ptr %65, align 8
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %69 = load ptr, ptr %67, align 8
  store ptr %69, ptr %68, align 8
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 3
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %72 = load i32, ptr %70, align 4
  store i32 %72, ptr %71, align 4
  call void @set_offset(ptr %60, ptr @Iterator2)
  %73 = call ptr @llvm.invariant.start.p0(i64 24, ptr %60)
  %74 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %75 = extractvalue { ptr, ptr, ptr, i32 } %74, 0
  %76 = call ptr @llvm.invariant.start.p0(i64 400, ptr %75)
  %77 = extractvalue { ptr, ptr, ptr, i32 } %74, 3
  %78 = getelementptr ptr, ptr %75, i32 %77
  %79 = getelementptr ptr, ptr %78, i32 1
  %80 = load ptr, ptr %79, align 8
  %81 = extractvalue { ptr, ptr, ptr, i32 } %74, 1
  %82 = call ptr %80(ptr %81)
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 0
  %84 = load ptr, ptr %83, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %84, 0
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 1
  %87 = load ptr, ptr %86, align 8
  %88 = insertvalue { ptr, ptr, ptr, i32 } %85, ptr %87, 1
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 2
  %90 = load ptr, ptr %89, align 8
  %91 = insertvalue { ptr, ptr, ptr, i32 } %88, ptr %90, 2
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 3
  %93 = load i32, ptr %92, align 4
  %94 = insertvalue { ptr, ptr, ptr, i32 } %91, i32 %93, 3
  %95 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %96 = extractvalue { ptr, ptr, ptr, i32 } %95, 0
  %97 = call ptr @llvm.invariant.start.p0(i64 400, ptr %96)
  %98 = extractvalue { ptr, ptr, ptr, i32 } %95, 3
  %99 = getelementptr ptr, ptr %96, i32 %98
  %100 = getelementptr ptr, ptr %99, i32 2
  %101 = load ptr, ptr %100, align 8
  %102 = extractvalue { ptr, ptr, ptr, i32 } %95, 1
  %103 = call ptr %101(ptr %102)
  %104 = alloca [0 x ptr], align 8
  %105 = call ptr @llvm.invariant.start.p0(i64 0, ptr %104)
  %106 = call ptr @llvm.invariant.start.p0(i64 184, ptr %84)
  %107 = getelementptr ptr, ptr %84, i32 %93
  %108 = getelementptr ptr, ptr %107, i32 1
  %109 = load ptr, ptr %108, align 8
  %110 = alloca [0 x ptr], align 8
  %111 = call ptr %109({ ptr, ptr, ptr, i32 } %94, ptr %110)
  %112 = call { ptr, ptr, ptr, i32 } %111({ ptr, ptr, ptr, i32 } %94, { ptr, ptr, ptr, i32 } %94, ptr %104)
  %113 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %112, ptr %113, align 8
  %114 = call ptr @llvm.invariant.start.p0(i64 16, ptr %113)
  %115 = alloca { ptr, ptr, ptr, i32 }, align 8
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %113, i32 0, i32 0
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %115, i32 0, i32 0
  %118 = load ptr, ptr %116, align 8
  store ptr %118, ptr %117, align 8
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %113, i32 0, i32 1
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %115, i32 0, i32 1
  %121 = load ptr, ptr %119, align 8
  store ptr %121, ptr %120, align 8
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %113, i32 0, i32 2
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %115, i32 0, i32 2
  %124 = load ptr, ptr %122, align 8
  store ptr %124, ptr %123, align 8
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %113, i32 0, i32 3
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %115, i32 0, i32 3
  %127 = load i32, ptr %125, align 4
  store i32 %127, ptr %126, align 4
  call void @set_offset(ptr %115, ptr @Iterator2)
  %128 = call ptr @llvm.invariant.start.p0(i64 24, ptr %115)
  %129 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %130 = extractvalue { ptr, ptr, ptr, i32 } %129, 0
  %131 = call ptr @llvm.invariant.start.p0(i64 400, ptr %130)
  %132 = extractvalue { ptr, ptr, ptr, i32 } %129, 3
  %133 = getelementptr ptr, ptr %130, i32 %132
  %134 = getelementptr ptr, ptr %133, i32 2
  %135 = load ptr, ptr %134, align 8
  %136 = extractvalue { ptr, ptr, ptr, i32 } %129, 1
  %137 = call ptr %135(ptr %136)
  %138 = load ptr, ptr %137, align 8
  %139 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, i1, ptr }, ptr null, i32 1) to i64))
  %140 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, i1, ptr }, ptr %139, i32 0, i32 3
  store ptr %138, ptr %140, align 8
  %141 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, i1, ptr }, ptr %139, i32 0, i32 3
  %142 = call ptr @llvm.invariant.start.p0(i64 8, ptr %141)
  %143 = alloca { ptr, ptr, ptr, i32 }, align 8
  %144 = getelementptr { ptr, ptr, ptr, i32 }, ptr %143, i32 0, i32 1
  %145 = getelementptr { ptr, ptr, ptr, i32 }, ptr %143, i32 0, i32 3
  store ptr @ChainIterator2, ptr %143, align 8
  store ptr %139, ptr %144, align 8
  store i32 7, ptr %145, align 4
  %146 = call ptr @llvm.invariant.start.p0(i64 16, ptr %143)
  %147 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %148 = extractvalue { ptr, ptr, ptr, i32 } %147, 0
  %149 = call ptr @llvm.invariant.start.p0(i64 400, ptr %148)
  %150 = extractvalue { ptr, ptr, ptr, i32 } %147, 3
  %151 = getelementptr ptr, ptr %148, i32 %150
  %152 = load ptr, ptr %151, align 8
  %153 = extractvalue { ptr, ptr, ptr, i32 } %147, 1
  %154 = call ptr %152(ptr %153)
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %154, i32 0, i32 0
  %156 = load ptr, ptr %155, align 8
  %157 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %156, 0
  %158 = getelementptr { ptr, ptr, ptr, i32 }, ptr %154, i32 0, i32 1
  %159 = load ptr, ptr %158, align 8
  %160 = insertvalue { ptr, ptr, ptr, i32 } %157, ptr %159, 1
  %161 = getelementptr { ptr, ptr, ptr, i32 }, ptr %154, i32 0, i32 2
  %162 = load ptr, ptr %161, align 8
  %163 = insertvalue { ptr, ptr, ptr, i32 } %160, ptr %162, 2
  %164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %154, i32 0, i32 3
  %165 = load i32, ptr %164, align 4
  %166 = insertvalue { ptr, ptr, ptr, i32 } %163, i32 %165, 3
  %167 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %168 = extractvalue { ptr, ptr, ptr, i32 } %167, 0
  %169 = call ptr @llvm.invariant.start.p0(i64 400, ptr %168)
  %170 = extractvalue { ptr, ptr, ptr, i32 } %167, 3
  %171 = getelementptr ptr, ptr %168, i32 %170
  %172 = getelementptr ptr, ptr %171, i32 2
  %173 = load ptr, ptr %172, align 8
  %174 = extractvalue { ptr, ptr, ptr, i32 } %167, 1
  %175 = call ptr %173(ptr %174)
  %176 = alloca [0 x ptr], align 8
  %177 = call ptr @llvm.invariant.start.p0(i64 0, ptr %176)
  %178 = call ptr @llvm.invariant.start.p0(i64 184, ptr %156)
  %179 = getelementptr ptr, ptr %156, i32 %165
  %180 = getelementptr ptr, ptr %179, i32 1
  %181 = load ptr, ptr %180, align 8
  %182 = alloca [0 x ptr], align 8
  %183 = call ptr %181({ ptr, ptr, ptr, i32 } %166, ptr %182)
  %184 = call { ptr, ptr, ptr, i32 } %183({ ptr, ptr, ptr, i32 } %166, { ptr, ptr, ptr, i32 } %166, ptr %176)
  %185 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %184, ptr %185, align 8
  %186 = call ptr @llvm.invariant.start.p0(i64 16, ptr %185)
  %187 = alloca { ptr, ptr, ptr, i32 }, align 8
  %188 = getelementptr { ptr, ptr, ptr, i32 }, ptr %185, i32 0, i32 0
  %189 = getelementptr { ptr, ptr, ptr, i32 }, ptr %187, i32 0, i32 0
  %190 = load ptr, ptr %188, align 8
  store ptr %190, ptr %189, align 8
  %191 = getelementptr { ptr, ptr, ptr, i32 }, ptr %185, i32 0, i32 1
  %192 = getelementptr { ptr, ptr, ptr, i32 }, ptr %187, i32 0, i32 1
  %193 = load ptr, ptr %191, align 8
  store ptr %193, ptr %192, align 8
  %194 = getelementptr { ptr, ptr, ptr, i32 }, ptr %185, i32 0, i32 2
  %195 = getelementptr { ptr, ptr, ptr, i32 }, ptr %187, i32 0, i32 2
  %196 = load ptr, ptr %194, align 8
  store ptr %196, ptr %195, align 8
  %197 = getelementptr { ptr, ptr, ptr, i32 }, ptr %185, i32 0, i32 3
  %198 = getelementptr { ptr, ptr, ptr, i32 }, ptr %187, i32 0, i32 3
  %199 = load i32, ptr %197, align 4
  store i32 %199, ptr %198, align 4
  call void @set_offset(ptr %187, ptr @Iterator2)
  %200 = call ptr @llvm.invariant.start.p0(i64 24, ptr %187)
  %201 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %202 = extractvalue { ptr, ptr, ptr, i32 } %201, 0
  %203 = call ptr @llvm.invariant.start.p0(i64 400, ptr %202)
  %204 = extractvalue { ptr, ptr, ptr, i32 } %201, 3
  %205 = getelementptr ptr, ptr %202, i32 %204
  %206 = getelementptr ptr, ptr %205, i32 1
  %207 = load ptr, ptr %206, align 8
  %208 = extractvalue { ptr, ptr, ptr, i32 } %201, 1
  %209 = call ptr %207(ptr %208)
  %210 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 0
  %211 = load ptr, ptr %210, align 8
  %212 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %211, 0
  %213 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 1
  %214 = load ptr, ptr %213, align 8
  %215 = insertvalue { ptr, ptr, ptr, i32 } %212, ptr %214, 1
  %216 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 2
  %217 = load ptr, ptr %216, align 8
  %218 = insertvalue { ptr, ptr, ptr, i32 } %215, ptr %217, 2
  %219 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 3
  %220 = load i32, ptr %219, align 4
  %221 = insertvalue { ptr, ptr, ptr, i32 } %218, i32 %220, 3
  %222 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %223 = extractvalue { ptr, ptr, ptr, i32 } %222, 0
  %224 = call ptr @llvm.invariant.start.p0(i64 400, ptr %223)
  %225 = extractvalue { ptr, ptr, ptr, i32 } %222, 3
  %226 = getelementptr ptr, ptr %223, i32 %225
  %227 = getelementptr ptr, ptr %226, i32 2
  %228 = load ptr, ptr %227, align 8
  %229 = extractvalue { ptr, ptr, ptr, i32 } %222, 1
  %230 = call ptr %228(ptr %229)
  %231 = alloca [0 x ptr], align 8
  %232 = call ptr @llvm.invariant.start.p0(i64 0, ptr %231)
  %233 = call ptr @llvm.invariant.start.p0(i64 184, ptr %211)
  %234 = getelementptr ptr, ptr %211, i32 %220
  %235 = getelementptr ptr, ptr %234, i32 1
  %236 = load ptr, ptr %235, align 8
  %237 = alloca [0 x ptr], align 8
  %238 = call ptr %236({ ptr, ptr, ptr, i32 } %221, ptr %237)
  %239 = call { ptr, ptr, ptr, i32 } %238({ ptr, ptr, ptr, i32 } %221, { ptr, ptr, ptr, i32 } %221, ptr %231)
  %240 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %239, ptr %240, align 8
  %241 = call ptr @llvm.invariant.start.p0(i64 16, ptr %240)
  %242 = alloca { ptr, ptr, ptr, i32 }, align 8
  %243 = getelementptr { ptr, ptr, ptr, i32 }, ptr %240, i32 0, i32 0
  %244 = getelementptr { ptr, ptr, ptr, i32 }, ptr %242, i32 0, i32 0
  %245 = load ptr, ptr %243, align 8
  store ptr %245, ptr %244, align 8
  %246 = getelementptr { ptr, ptr, ptr, i32 }, ptr %240, i32 0, i32 1
  %247 = getelementptr { ptr, ptr, ptr, i32 }, ptr %242, i32 0, i32 1
  %248 = load ptr, ptr %246, align 8
  store ptr %248, ptr %247, align 8
  %249 = getelementptr { ptr, ptr, ptr, i32 }, ptr %240, i32 0, i32 2
  %250 = getelementptr { ptr, ptr, ptr, i32 }, ptr %242, i32 0, i32 2
  %251 = load ptr, ptr %249, align 8
  store ptr %251, ptr %250, align 8
  %252 = getelementptr { ptr, ptr, ptr, i32 }, ptr %240, i32 0, i32 3
  %253 = getelementptr { ptr, ptr, ptr, i32 }, ptr %242, i32 0, i32 3
  %254 = load i32, ptr %252, align 4
  store i32 %254, ptr %253, align 4
  call void @set_offset(ptr %242, ptr @Iterator2)
  %255 = call ptr @llvm.invariant.start.p0(i64 24, ptr %242)
  %256 = alloca { ptr, ptr, ptr, i32 }, align 8
  %257 = getelementptr { ptr, ptr, ptr, i32 }, ptr %187, i32 0, i32 0
  %258 = getelementptr { ptr, ptr, ptr, i32 }, ptr %256, i32 0, i32 0
  %259 = load ptr, ptr %257, align 8
  store ptr %259, ptr %258, align 8
  %260 = getelementptr { ptr, ptr, ptr, i32 }, ptr %187, i32 0, i32 1
  %261 = getelementptr { ptr, ptr, ptr, i32 }, ptr %256, i32 0, i32 1
  %262 = load ptr, ptr %260, align 8
  store ptr %262, ptr %261, align 8
  %263 = getelementptr { ptr, ptr, ptr, i32 }, ptr %187, i32 0, i32 2
  %264 = getelementptr { ptr, ptr, ptr, i32 }, ptr %256, i32 0, i32 2
  %265 = load ptr, ptr %263, align 8
  store ptr %265, ptr %264, align 8
  %266 = getelementptr { ptr, ptr, ptr, i32 }, ptr %187, i32 0, i32 3
  %267 = getelementptr { ptr, ptr, ptr, i32 }, ptr %256, i32 0, i32 3
  %268 = load i32, ptr %266, align 4
  store i32 %268, ptr %267, align 4
  call void @set_offset(ptr %256, ptr @Iterator2)
  %269 = call ptr @llvm.invariant.start.p0(i64 24, ptr %256)
  %270 = getelementptr { ptr, ptr, ptr, i32 }, ptr %256, i32 0, i32 0
  %271 = load ptr, ptr %270, align 8
  %272 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %271, 0
  %273 = getelementptr { ptr, ptr, ptr, i32 }, ptr %256, i32 0, i32 1
  %274 = load ptr, ptr %273, align 8
  %275 = insertvalue { ptr, ptr, ptr, i32 } %272, ptr %274, 1
  %276 = getelementptr { ptr, ptr, ptr, i32 }, ptr %256, i32 0, i32 2
  %277 = load ptr, ptr %276, align 8
  %278 = insertvalue { ptr, ptr, ptr, i32 } %275, ptr %277, 2
  %279 = getelementptr { ptr, ptr, ptr, i32 }, ptr %256, i32 0, i32 3
  %280 = load i32, ptr %279, align 4
  %281 = insertvalue { ptr, ptr, ptr, i32 } %278, i32 %280, 3
  %282 = alloca { ptr, ptr, ptr, i32 }, align 8
  %283 = getelementptr { ptr, ptr, ptr, i32 }, ptr %242, i32 0, i32 0
  %284 = getelementptr { ptr, ptr, ptr, i32 }, ptr %282, i32 0, i32 0
  %285 = load ptr, ptr %283, align 8
  store ptr %285, ptr %284, align 8
  %286 = getelementptr { ptr, ptr, ptr, i32 }, ptr %242, i32 0, i32 1
  %287 = getelementptr { ptr, ptr, ptr, i32 }, ptr %282, i32 0, i32 1
  %288 = load ptr, ptr %286, align 8
  store ptr %288, ptr %287, align 8
  %289 = getelementptr { ptr, ptr, ptr, i32 }, ptr %242, i32 0, i32 2
  %290 = getelementptr { ptr, ptr, ptr, i32 }, ptr %282, i32 0, i32 2
  %291 = load ptr, ptr %289, align 8
  store ptr %291, ptr %290, align 8
  %292 = getelementptr { ptr, ptr, ptr, i32 }, ptr %242, i32 0, i32 3
  %293 = getelementptr { ptr, ptr, ptr, i32 }, ptr %282, i32 0, i32 3
  %294 = load i32, ptr %292, align 4
  store i32 %294, ptr %293, align 4
  call void @set_offset(ptr %282, ptr @Iterator2)
  %295 = call ptr @llvm.invariant.start.p0(i64 24, ptr %282)
  %296 = getelementptr { ptr, ptr, ptr, i32 }, ptr %282, i32 0, i32 0
  %297 = load ptr, ptr %296, align 8
  %298 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %297, 0
  %299 = getelementptr { ptr, ptr, ptr, i32 }, ptr %282, i32 0, i32 1
  %300 = load ptr, ptr %299, align 8
  %301 = insertvalue { ptr, ptr, ptr, i32 } %298, ptr %300, 1
  %302 = getelementptr { ptr, ptr, ptr, i32 }, ptr %282, i32 0, i32 2
  %303 = load ptr, ptr %302, align 8
  %304 = insertvalue { ptr, ptr, ptr, i32 } %301, ptr %303, 2
  %305 = getelementptr { ptr, ptr, ptr, i32 }, ptr %282, i32 0, i32 3
  %306 = load i32, ptr %305, align 4
  %307 = insertvalue { ptr, ptr, ptr, i32 } %304, i32 %306, 3
  %308 = getelementptr { ptr, ptr, ptr, i32 }, ptr %143, i32 0, i32 0
  %309 = load ptr, ptr %308, align 8
  %310 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %309, 0
  %311 = getelementptr { ptr, ptr, ptr, i32 }, ptr %143, i32 0, i32 1
  %312 = load ptr, ptr %311, align 8
  %313 = insertvalue { ptr, ptr, ptr, i32 } %310, ptr %312, 1
  %314 = getelementptr { ptr, ptr, ptr, i32 }, ptr %143, i32 0, i32 2
  %315 = load ptr, ptr %314, align 8
  %316 = insertvalue { ptr, ptr, ptr, i32 } %313, ptr %315, 2
  %317 = getelementptr { ptr, ptr, ptr, i32 }, ptr %143, i32 0, i32 3
  %318 = load i32, ptr %317, align 4
  %319 = insertvalue { ptr, ptr, ptr, i32 } %316, i32 %318, 3
  %320 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %321 = extractvalue { ptr, ptr, ptr, i32 } %320, 0
  %322 = call ptr @llvm.invariant.start.p0(i64 400, ptr %321)
  %323 = extractvalue { ptr, ptr, ptr, i32 } %320, 3
  %324 = getelementptr ptr, ptr %321, i32 %323
  %325 = getelementptr ptr, ptr %324, i32 2
  %326 = load ptr, ptr %325, align 8
  %327 = extractvalue { ptr, ptr, ptr, i32 } %320, 1
  %328 = call ptr %326(ptr %327)
  %329 = load ptr, ptr %328, align 8
  %330 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ([2 x ptr], ptr null, i32 1) to i64))
  %331 = call ptr @llvm.invariant.start.p0(i64 16, ptr %330)
  %332 = getelementptr [2 x ptr], ptr %330, i32 0, i32 1
  store ptr %329, ptr %332, align 8
  store ptr @Iterator2, ptr %330, align 8
  %333 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ([2 x ptr], ptr null, i32 1) to i64))
  %334 = call ptr @llvm.invariant.start.p0(i64 16, ptr %333)
  %335 = getelementptr [2 x ptr], ptr %333, i32 0, i32 1
  store ptr %329, ptr %335, align 8
  store ptr @Iterator2, ptr %333, align 8
  %336 = alloca [2 x ptr], align 8
  %337 = call ptr @llvm.invariant.start.p0(i64 16, ptr %336)
  %338 = getelementptr [2 x ptr], ptr %336, i32 0, i32 1
  store ptr %333, ptr %338, align 8
  %339 = getelementptr [2 x ptr], ptr %336, i32 0, i32 0
  store ptr %330, ptr %339, align 8
  %340 = call ptr @llvm.invariant.start.p0(i64 88, ptr %309)
  %341 = getelementptr ptr, ptr %309, i32 %318
  %342 = getelementptr ptr, ptr %341, i32 4
  %343 = load ptr, ptr %342, align 8
  %344 = alloca [2 x ptr], align 8
  %345 = getelementptr [2 x ptr], ptr %344, i32 0, i32 0
  store ptr %271, ptr %345, align 8
  %346 = getelementptr [2 x ptr], ptr %344, i32 0, i32 1
  store ptr %297, ptr %346, align 8
  %347 = call ptr %343({ ptr, ptr, ptr, i32 } %319, ptr %344, { ptr, ptr, ptr, i32 } %281, { ptr, ptr, ptr, i32 } %307)
  call void %347({ ptr, ptr, ptr, i32 } %319, { ptr, ptr, ptr, i32 } %319, ptr %336, { ptr, ptr, ptr, i32 } %281, { ptr, ptr, ptr, i32 } %307)
  %348 = alloca { ptr, ptr, ptr, i32 }, align 8
  %349 = getelementptr { ptr, ptr, ptr, i32 }, ptr %143, i32 0, i32 0
  %350 = getelementptr { ptr, ptr, ptr, i32 }, ptr %348, i32 0, i32 0
  %351 = load ptr, ptr %349, align 8
  store ptr %351, ptr %350, align 8
  %352 = getelementptr { ptr, ptr, ptr, i32 }, ptr %143, i32 0, i32 1
  %353 = getelementptr { ptr, ptr, ptr, i32 }, ptr %348, i32 0, i32 1
  %354 = load ptr, ptr %352, align 8
  store ptr %354, ptr %353, align 8
  %355 = getelementptr { ptr, ptr, ptr, i32 }, ptr %143, i32 0, i32 2
  %356 = getelementptr { ptr, ptr, ptr, i32 }, ptr %348, i32 0, i32 2
  %357 = load ptr, ptr %355, align 8
  store ptr %357, ptr %356, align 8
  %358 = getelementptr { ptr, ptr, ptr, i32 }, ptr %143, i32 0, i32 3
  %359 = getelementptr { ptr, ptr, ptr, i32 }, ptr %348, i32 0, i32 3
  %360 = load i32, ptr %358, align 4
  store i32 %360, ptr %359, align 4
  call void @set_offset(ptr %348, ptr @Iterator2)
  %361 = call ptr @llvm.invariant.start.p0(i64 24, ptr %348)
  %362 = getelementptr { ptr, ptr, ptr, i32 }, ptr %348, i32 0, i32 0
  %363 = load ptr, ptr %362, align 8
  %364 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %363, 0
  %365 = getelementptr { ptr, ptr, ptr, i32 }, ptr %348, i32 0, i32 1
  %366 = load ptr, ptr %365, align 8
  %367 = insertvalue { ptr, ptr, ptr, i32 } %364, ptr %366, 1
  %368 = getelementptr { ptr, ptr, ptr, i32 }, ptr %348, i32 0, i32 2
  %369 = load ptr, ptr %368, align 8
  %370 = insertvalue { ptr, ptr, ptr, i32 } %367, ptr %369, 2
  %371 = getelementptr { ptr, ptr, ptr, i32 }, ptr %348, i32 0, i32 3
  %372 = load i32, ptr %371, align 4
  %373 = insertvalue { ptr, ptr, ptr, i32 } %370, i32 %372, 3
  ret { ptr, ptr, ptr, i32 } %373
}

define ptr @ChainIterator2_field_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, i1, ptr }, ptr %0, i32 0, i32 0
  ret ptr %2
}

define ptr @ChainIterator2_field_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, i1, ptr }, ptr %0, i32 0, i32 1
  ret ptr %2
}

define ptr @ChainIterator2_field_on_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, i1, ptr }, ptr %0, i32 0, i32 2
  ret ptr %2
}

define ptr @ChainIterator2_field_ChainIterator2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, i1, ptr }, ptr %0, i32 0, i32 3
  ret ptr %2
}

define ptr @ChainIterator2_B_init_firstIterator2T_secondIterator2T({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2, { ptr, ptr, ptr, i32 } %3) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = getelementptr [2 x ptr], ptr %1, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr ptr, ptr %7, i32 1
  %9 = getelementptr ptr, ptr %7, i32 2
  %10 = getelementptr ptr, ptr %7, i32 3
  %11 = getelementptr ptr, ptr %7, i32 4
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 4189192806087951739, i64 ptrtoint (ptr @Iterator2 to i64), ptr %15)
  %17 = getelementptr [2 x ptr], ptr %1, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr ptr, ptr %18, i32 1
  %20 = getelementptr ptr, ptr %18, i32 2
  %21 = getelementptr ptr, ptr %18, i32 3
  %22 = getelementptr ptr, ptr %18, i32 4
  %23 = load i64, ptr %19, align 4
  %24 = load i64, ptr %20, align 4
  %25 = load ptr, ptr %21, align 8
  %26 = load ptr, ptr %22, align 8
  %27 = call i1 @subtype_test_wrapper(ptr %25, i64 %24, i64 %23, i64 4189192806087951739, i64 ptrtoint (ptr @Iterator2 to i64), ptr %26)
  %28 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %29 = getelementptr [11 x ptr], ptr %28, i32 0, i32 6
  %30 = getelementptr ptr, ptr %29, i32 7
  %31 = load ptr, ptr %30, align 8
  ret ptr %31
}

define ptr @ChainIterator2_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [11 x ptr], ptr %4, i32 0, i32 7
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @ChainIterator2_init_firstIterator2T_secondIterator2T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @ChainIterator2)
  %21 = call ptr @llvm.invariant.start.p0(i64 24, ptr %8)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %22, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 16, ptr %22)
  %24 = alloca { ptr, ptr, ptr, i32 }, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %36 = load i32, ptr %34, align 4
  store i32 %36, ptr %35, align 4
  call void @set_offset(ptr %24, ptr @Iterator2)
  %37 = call ptr @llvm.invariant.start.p0(i64 24, ptr %24)
  %38 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %39 = extractvalue { ptr, ptr, ptr, i32 } %38, 0
  %40 = call ptr @llvm.invariant.start.p0(i64 88, ptr %39)
  %41 = extractvalue { ptr, ptr, ptr, i32 } %38, 3
  %42 = getelementptr ptr, ptr %39, i32 %41
  %43 = load ptr, ptr %42, align 8
  %44 = extractvalue { ptr, ptr, ptr, i32 } %38, 1
  %45 = call ptr %43(ptr %44)
  %46 = alloca { ptr, ptr, ptr, i32 }, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %49 = load ptr, ptr %47, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %52 = load ptr, ptr %50, align 8
  store ptr %52, ptr %51, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %55 = load ptr, ptr %53, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %58 = load i32, ptr %56, align 4
  store i32 %58, ptr %57, align 4
  call void @set_offset(ptr %46, ptr @Iterator2)
  %59 = call ptr @llvm.invariant.start.p0(i64 24, ptr %46)
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %62 = load ptr, ptr %60, align 8
  store ptr %62, ptr %61, align 8
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %65 = load ptr, ptr %63, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %68 = load ptr, ptr %66, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %71 = load i32, ptr %69, align 4
  store i32 %71, ptr %70, align 4
  %72 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %72, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 16, ptr %72)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 0
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 1
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 2
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %83 = load ptr, ptr %81, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 3
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %86 = load i32, ptr %84, align 4
  store i32 %86, ptr %85, align 4
  call void @set_offset(ptr %74, ptr @Iterator2)
  %87 = call ptr @llvm.invariant.start.p0(i64 24, ptr %74)
  %88 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %89 = extractvalue { ptr, ptr, ptr, i32 } %88, 0
  %90 = call ptr @llvm.invariant.start.p0(i64 88, ptr %89)
  %91 = extractvalue { ptr, ptr, ptr, i32 } %88, 3
  %92 = getelementptr ptr, ptr %89, i32 %91
  %93 = getelementptr ptr, ptr %92, i32 1
  %94 = load ptr, ptr %93, align 8
  %95 = extractvalue { ptr, ptr, ptr, i32 } %88, 1
  %96 = call ptr %94(ptr %95)
  %97 = alloca { ptr, ptr, ptr, i32 }, align 8
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 0
  %100 = load ptr, ptr %98, align 8
  store ptr %100, ptr %99, align 8
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %103 = load ptr, ptr %101, align 8
  store ptr %103, ptr %102, align 8
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 2
  %106 = load ptr, ptr %104, align 8
  store ptr %106, ptr %105, align 8
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  %109 = load i32, ptr %107, align 4
  store i32 %109, ptr %108, align 4
  call void @set_offset(ptr %97, ptr @Iterator2)
  %110 = call ptr @llvm.invariant.start.p0(i64 24, ptr %97)
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 0
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 0
  %113 = load ptr, ptr %111, align 8
  store ptr %113, ptr %112, align 8
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 1
  %116 = load ptr, ptr %114, align 8
  store ptr %116, ptr %115, align 8
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 2
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 2
  %119 = load ptr, ptr %117, align 8
  store ptr %119, ptr %118, align 8
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 3
  %122 = load i32, ptr %120, align 4
  store i32 %122, ptr %121, align 4
  %123 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %124 = extractvalue { ptr, ptr, ptr, i32 } %123, 0
  %125 = call ptr @llvm.invariant.start.p0(i64 88, ptr %124)
  %126 = extractvalue { ptr, ptr, ptr, i32 } %123, 3
  %127 = getelementptr ptr, ptr %124, i32 %126
  %128 = getelementptr ptr, ptr %127, i32 2
  %129 = load ptr, ptr %128, align 8
  %130 = extractvalue { ptr, ptr, ptr, i32 } %123, 1
  %131 = call ptr %129(ptr %130)
  store i1 true, ptr %131, align 1
  ret void
}

define { ptr, i160 } @ChainIterator2_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca { ptr, i160 }, align 8
  %.reg2mem7 = alloca { ptr, i160 }, align 8
  %.reg2mem9 = alloca i32, align 4
  %.reg2mem11 = alloca { ptr, i160 }, align 8
  %.reg2mem13 = alloca i32, align 4
  %.reg2mem15 = alloca { ptr, i160 }, align 8
  %.reg2mem17 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @ChainIterator2)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 88, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 2
  %26 = load ptr, ptr %25, align 8
  %27 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %28 = call ptr %26(ptr %27)
  %29 = load i1, ptr %28, align 1
  %30 = alloca [0 x ptr], align 8
  %31 = alloca [0 x ptr], align 8
  %32 = alloca { ptr, i160 }, align 8
  %33 = alloca i64, align 8
  %34 = alloca i1, align 1
  %35 = alloca { ptr, i160 }, align 8
  %36 = alloca i1, align 1
  %37 = alloca [0 x ptr], align 8
  %38 = alloca [0 x ptr], align 8
  %39 = alloca { ptr, i160 }, align 8
  br i1 %29, label %40, label %112

40:                                               ; preds = %3
  %41 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %42 = extractvalue { ptr, ptr, ptr, i32 } %41, 0
  %43 = call ptr @llvm.invariant.start.p0(i64 88, ptr %42)
  %44 = extractvalue { ptr, ptr, ptr, i32 } %41, 3
  %45 = getelementptr ptr, ptr %42, i32 %44
  %46 = load ptr, ptr %45, align 8
  %47 = extractvalue { ptr, ptr, ptr, i32 } %41, 1
  %48 = call ptr %46(ptr %47)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 0
  %50 = load ptr, ptr %49, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %50, 0
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 1
  %53 = load ptr, ptr %52, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %51, ptr %53, 1
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 2
  %56 = load ptr, ptr %55, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %56, 2
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 3
  %59 = load i32, ptr %58, align 4
  %60 = insertvalue { ptr, ptr, ptr, i32 } %57, i32 %59, 3
  %61 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %62 = extractvalue { ptr, ptr, ptr, i32 } %61, 0
  %63 = call ptr @llvm.invariant.start.p0(i64 88, ptr %62)
  %64 = extractvalue { ptr, ptr, ptr, i32 } %61, 3
  %65 = getelementptr ptr, ptr %62, i32 %64
  %66 = getelementptr ptr, ptr %65, i32 3
  %67 = load ptr, ptr %66, align 8
  %68 = extractvalue { ptr, ptr, ptr, i32 } %61, 1
  %69 = call ptr %67(ptr %68)
  %70 = call ptr @llvm.invariant.start.p0(i64 0, ptr %30)
  %71 = call ptr @llvm.invariant.start.p0(i64 24, ptr %50)
  %72 = getelementptr ptr, ptr %50, i32 %59
  %73 = getelementptr ptr, ptr %72, i32 1
  %74 = load ptr, ptr %73, align 8
  %75 = call ptr %74({ ptr, ptr, ptr, i32 } %60, ptr %31)
  %76 = call { ptr, i160 } %75({ ptr, ptr, ptr, i32 } %60, { ptr, ptr, ptr, i32 } %60, ptr %30)
  store { ptr, i160 } %76, ptr %32, align 8
  %77 = getelementptr { ptr, i160 }, ptr %32, i32 0, i32 0
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %33, align 4
  %78 = load ptr, ptr %77, align 8
  %79 = ptrtoint ptr %78 to i64
  %80 = load ptr, ptr %33, align 8
  %81 = ptrtoint ptr %80 to i64
  %82 = icmp ne i64 %79, %81
  store i1 %82, ptr %34, align 1
  %83 = load i1, ptr %34, align 1
  %84 = xor i1 %83, true
  %85 = zext i1 %84 to i32
  store i32 %85, ptr %.reg2mem9, align 4
  br i1 %83, label %86, label %99

86:                                               ; preds = %40
  %87 = getelementptr { ptr, i160 }, ptr %32, i32 0, i32 0
  %88 = getelementptr { ptr, i160 }, ptr %35, i32 0, i32 0
  %89 = load ptr, ptr %87, align 8
  store ptr %89, ptr %88, align 8
  %90 = getelementptr { ptr, i160 }, ptr %32, i32 0, i32 1
  %91 = getelementptr { ptr, i160 }, ptr %35, i32 0, i32 1
  %92 = load i160, ptr %90, align 4
  store i160 %92, ptr %91, align 4
  call void @set_offset(ptr %35, ptr @Object)
  %93 = getelementptr { ptr, i160 }, ptr %35, i32 0, i32 0
  %94 = load ptr, ptr %93, align 8
  %95 = insertvalue { ptr, i160 } undef, ptr %94, 0
  %96 = getelementptr { ptr, i160 }, ptr %35, i32 0, i32 1
  %97 = load i160, ptr %96, align 4
  %98 = insertvalue { ptr, i160 } %95, i160 %97, 1
  store { ptr, i160 } %98, ptr %.reg2mem7, align 8
  %.reload8 = load { ptr, i160 }, ptr %.reg2mem7, align 8
  store { ptr, i160 } %.reload8, ptr %.reg2mem17, align 8
  br label %110

99:                                               ; preds = %40
  store i1 false, ptr %36, align 1
  %100 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %101 = extractvalue { ptr, ptr, ptr, i32 } %100, 0
  %102 = call ptr @llvm.invariant.start.p0(i64 88, ptr %101)
  %103 = extractvalue { ptr, ptr, ptr, i32 } %100, 3
  %104 = getelementptr ptr, ptr %101, i32 %103
  %105 = getelementptr ptr, ptr %104, i32 2
  %106 = load ptr, ptr %105, align 8
  %107 = extractvalue { ptr, ptr, ptr, i32 } %100, 1
  %108 = call ptr %106(ptr %107)
  %109 = load i1, ptr %36, align 1
  store i1 %109, ptr %108, align 1
  store { ptr, i160 } poison, ptr %.reg2mem17, align 8
  br label %110

110:                                              ; preds = %99, %86
  %.reload18 = load { ptr, i160 }, ptr %.reg2mem17, align 8
  store { ptr, i160 } %.reload18, ptr %.reg2mem5, align 8
  br label %111

111:                                              ; preds = %110
  %.reload6 = load { ptr, i160 }, ptr %.reg2mem5, align 8
  %.reload10 = load i32, ptr %.reg2mem9, align 4
  store i32 %.reload10, ptr %.reg2mem13, align 4
  store { ptr, i160 } %.reload6, ptr %.reg2mem15, align 8
  br label %113

112:                                              ; preds = %3
  store i32 1, ptr %.reg2mem13, align 4
  store { ptr, i160 } poison, ptr %.reg2mem15, align 8
  br label %113

113:                                              ; preds = %112, %111
  %.reload16 = load { ptr, i160 }, ptr %.reg2mem15, align 8
  %.reload14 = load i32, ptr %.reg2mem13, align 4
  store { ptr, i160 } %.reload16, ptr %.reg2mem3, align 8
  store i32 %.reload14, ptr %.reg2mem1, align 4
  br label %114

114:                                              ; preds = %113
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  %115 = zext i32 %.reload2 to i64
  %116 = trunc i64 %115 to i32
  switch i32 %116, label %118 [
    i32 0, label %117
  ]

117:                                              ; preds = %114
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem11, align 8
  br label %162

118:                                              ; preds = %114
  %119 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %120 = extractvalue { ptr, ptr, ptr, i32 } %119, 0
  %121 = call ptr @llvm.invariant.start.p0(i64 88, ptr %120)
  %122 = extractvalue { ptr, ptr, ptr, i32 } %119, 3
  %123 = getelementptr ptr, ptr %120, i32 %122
  %124 = getelementptr ptr, ptr %123, i32 1
  %125 = load ptr, ptr %124, align 8
  %126 = extractvalue { ptr, ptr, ptr, i32 } %119, 1
  %127 = call ptr %125(ptr %126)
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %127, i32 0, i32 0
  %129 = load ptr, ptr %128, align 8
  %130 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %129, 0
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %127, i32 0, i32 1
  %132 = load ptr, ptr %131, align 8
  %133 = insertvalue { ptr, ptr, ptr, i32 } %130, ptr %132, 1
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %127, i32 0, i32 2
  %135 = load ptr, ptr %134, align 8
  %136 = insertvalue { ptr, ptr, ptr, i32 } %133, ptr %135, 2
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %127, i32 0, i32 3
  %138 = load i32, ptr %137, align 4
  %139 = insertvalue { ptr, ptr, ptr, i32 } %136, i32 %138, 3
  %140 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %141 = extractvalue { ptr, ptr, ptr, i32 } %140, 0
  %142 = call ptr @llvm.invariant.start.p0(i64 88, ptr %141)
  %143 = extractvalue { ptr, ptr, ptr, i32 } %140, 3
  %144 = getelementptr ptr, ptr %141, i32 %143
  %145 = getelementptr ptr, ptr %144, i32 3
  %146 = load ptr, ptr %145, align 8
  %147 = extractvalue { ptr, ptr, ptr, i32 } %140, 1
  %148 = call ptr %146(ptr %147)
  %149 = call ptr @llvm.invariant.start.p0(i64 0, ptr %37)
  %150 = call ptr @llvm.invariant.start.p0(i64 24, ptr %129)
  %151 = getelementptr ptr, ptr %129, i32 %138
  %152 = getelementptr ptr, ptr %151, i32 1
  %153 = load ptr, ptr %152, align 8
  %154 = call ptr %153({ ptr, ptr, ptr, i32 } %139, ptr %38)
  %155 = call { ptr, i160 } %154({ ptr, ptr, ptr, i32 } %139, { ptr, ptr, ptr, i32 } %139, ptr %37)
  store { ptr, i160 } %155, ptr %39, align 8
  %156 = getelementptr { ptr, i160 }, ptr %39, i32 0, i32 0
  %157 = load ptr, ptr %156, align 8
  %158 = insertvalue { ptr, i160 } undef, ptr %157, 0
  %159 = getelementptr { ptr, i160 }, ptr %39, i32 0, i32 1
  %160 = load i160, ptr %159, align 4
  %161 = insertvalue { ptr, i160 } %158, i160 %160, 1
  store { ptr, i160 } %161, ptr %.reg2mem, align 8
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  store { ptr, i160 } %.reload, ptr %.reg2mem11, align 8
  br label %162

162:                                              ; preds = %118, %117
  %.reload12 = load { ptr, i160 }, ptr %.reg2mem11, align 8
  ret { ptr, i160 } %.reload12
}

define ptr @FilterIterable2_field_iterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr }, ptr }, ptr %0, i32 0, i32 0
  ret ptr %2
}

define ptr @FilterIterable2_field_f(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr }, ptr }, ptr %0, i32 0, i32 1
  ret ptr %2
}

define ptr @FilterIterable2_field_FilterIterable2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr }, ptr }, ptr %0, i32 0, i32 2
  ret ptr %2
}

define ptr @FilterIterable2_B_init_iterableIterable2T_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2, { ptr } %3) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = getelementptr [2 x ptr], ptr %1, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr ptr, ptr %7, i32 1
  %9 = getelementptr ptr, ptr %7, i32 2
  %10 = getelementptr ptr, ptr %7, i32 3
  %11 = getelementptr ptr, ptr %7, i32 4
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %15)
  %17 = getelementptr [2 x ptr], ptr %1, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr ptr, ptr %18, i32 1
  %20 = getelementptr ptr, ptr %18, i32 2
  %21 = getelementptr ptr, ptr %18, i32 3
  %22 = getelementptr ptr, ptr %18, i32 4
  %23 = load i64, ptr %19, align 4
  %24 = load i64, ptr %20, align 4
  %25 = load ptr, ptr %21, align 8
  %26 = load ptr, ptr %22, align 8
  %27 = call i1 @subtype_test_wrapper(ptr %25, i64 %24, i64 %23, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %26)
  %28 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %29 = getelementptr [50 x ptr], ptr %28, i32 0, i32 15
  %30 = getelementptr ptr, ptr %29, i32 7
  %31 = load ptr, ptr %30, align 8
  ret ptr %31
}

define ptr @FilterIterable2_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [50 x ptr], ptr %4, i32 0, i32 16
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @FilterIterable2_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [50 x ptr], ptr %16, i32 0, i32 17
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @FilterIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, i160 } %2, { ptr } %3) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = getelementptr [2 x ptr], ptr %1, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr ptr, ptr %7, i32 1
  %9 = getelementptr ptr, ptr %7, i32 2
  %10 = getelementptr ptr, ptr %7, i32 3
  %11 = getelementptr ptr, ptr %7, i32 4
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 3282773614056351330, i64 ptrtoint (ptr @Object to i64), ptr %15)
  %17 = getelementptr [2 x ptr], ptr %1, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr ptr, ptr %18, i32 1
  %20 = getelementptr ptr, ptr %18, i32 2
  %21 = getelementptr ptr, ptr %18, i32 3
  %22 = getelementptr ptr, ptr %18, i32 4
  %23 = load i64, ptr %19, align 4
  %24 = load i64, ptr %20, align 4
  %25 = load ptr, ptr %21, align 8
  %26 = load ptr, ptr %22, align 8
  %27 = call i1 @subtype_test_wrapper(ptr %25, i64 %24, i64 %23, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %26)
  %28 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %29 = getelementptr [50 x ptr], ptr %28, i32 0, i32 18
  %30 = getelementptr ptr, ptr %29, i32 7
  %31 = load ptr, ptr %30, align 8
  ret ptr %31
}

define ptr @FilterIterable2_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [50 x ptr], ptr %16, i32 0, i32 19
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @FilterIterable2_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [50 x ptr], ptr %16, i32 0, i32 20
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @FilterIterable2_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [50 x ptr], ptr %16, i32 0, i32 21
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @FilterIterable2_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [50 x ptr], ptr %16, i32 0, i32 22
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @FilterIterable2_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [50 x ptr], ptr %16, i32 0, i32 23
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @FilterIterable2_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [50 x ptr], ptr %16, i32 0, i32 24
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @FilterIterable2_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [50 x ptr], ptr %16, i32 0, i32 25
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @FilterIterable2_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [50 x ptr], ptr %16, i32 0, i32 26
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define void @FilterIterable2_init_iterableIterable2T_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @FilterIterable2)
  %21 = call ptr @llvm.invariant.start.p0(i64 24, ptr %8)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %22, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 16, ptr %22)
  %24 = alloca { ptr, ptr, ptr, i32 }, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %36 = load i32, ptr %34, align 4
  store i32 %36, ptr %35, align 4
  call void @set_offset(ptr %24, ptr @Iterable2)
  %37 = call ptr @llvm.invariant.start.p0(i64 24, ptr %24)
  %38 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %39 = extractvalue { ptr, ptr, ptr, i32 } %38, 0
  %40 = call ptr @llvm.invariant.start.p0(i64 400, ptr %39)
  %41 = extractvalue { ptr, ptr, ptr, i32 } %38, 3
  %42 = getelementptr ptr, ptr %39, i32 %41
  %43 = load ptr, ptr %42, align 8
  %44 = extractvalue { ptr, ptr, ptr, i32 } %38, 1
  %45 = call ptr %43(ptr %44)
  %46 = alloca { ptr, ptr, ptr, i32 }, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %49 = load ptr, ptr %47, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %52 = load ptr, ptr %50, align 8
  store ptr %52, ptr %51, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %55 = load ptr, ptr %53, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %58 = load i32, ptr %56, align 4
  store i32 %58, ptr %57, align 4
  call void @set_offset(ptr %46, ptr @Iterable2)
  %59 = call ptr @llvm.invariant.start.p0(i64 24, ptr %46)
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %62 = load ptr, ptr %60, align 8
  store ptr %62, ptr %61, align 8
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %65 = load ptr, ptr %63, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %68 = load ptr, ptr %66, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %71 = load i32, ptr %69, align 4
  store i32 %71, ptr %70, align 4
  %72 = alloca ptr, align 8
  store { ptr } %4, ptr %72, align 8
  %73 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %74 = extractvalue { ptr, ptr, ptr, i32 } %73, 0
  %75 = call ptr @llvm.invariant.start.p0(i64 400, ptr %74)
  %76 = extractvalue { ptr, ptr, ptr, i32 } %73, 3
  %77 = getelementptr ptr, ptr %74, i32 %76
  %78 = getelementptr ptr, ptr %77, i32 1
  %79 = load ptr, ptr %78, align 8
  %80 = extractvalue { ptr, ptr, ptr, i32 } %73, 1
  %81 = call ptr %79(ptr %80)
  %82 = getelementptr { ptr }, ptr %81, i32 0, i32 0
  %83 = load ptr, ptr %72, align 8
  store ptr %83, ptr %82, align 8
  ret void
}

define { ptr, ptr, ptr, i32 } @FilterIterable2_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @FilterIterable2)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 400, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %27 = call ptr %25(ptr %26)
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %29, 0
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %32 = load ptr, ptr %31, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %32, 1
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %35 = load ptr, ptr %34, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %35, 2
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %38 = load i32, ptr %37, align 4
  %39 = insertvalue { ptr, ptr, ptr, i32 } %36, i32 %38, 3
  %40 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %41 = extractvalue { ptr, ptr, ptr, i32 } %40, 0
  %42 = call ptr @llvm.invariant.start.p0(i64 400, ptr %41)
  %43 = extractvalue { ptr, ptr, ptr, i32 } %40, 3
  %44 = getelementptr ptr, ptr %41, i32 %43
  %45 = getelementptr ptr, ptr %44, i32 2
  %46 = load ptr, ptr %45, align 8
  %47 = extractvalue { ptr, ptr, ptr, i32 } %40, 1
  %48 = call ptr %46(ptr %47)
  %49 = alloca [0 x ptr], align 8
  %50 = call ptr @llvm.invariant.start.p0(i64 0, ptr %49)
  %51 = call ptr @llvm.invariant.start.p0(i64 184, ptr %29)
  %52 = getelementptr ptr, ptr %29, i32 %38
  %53 = getelementptr ptr, ptr %52, i32 1
  %54 = load ptr, ptr %53, align 8
  %55 = alloca [0 x ptr], align 8
  %56 = call ptr %54({ ptr, ptr, ptr, i32 } %39, ptr %55)
  %57 = call { ptr, ptr, ptr, i32 } %56({ ptr, ptr, ptr, i32 } %39, { ptr, ptr, ptr, i32 } %39, ptr %49)
  %58 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %57, ptr %58, align 8
  %59 = call ptr @llvm.invariant.start.p0(i64 16, ptr %58)
  %60 = alloca { ptr, ptr, ptr, i32 }, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %63 = load ptr, ptr %61, align 8
  store ptr %63, ptr %62, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %66 = load ptr, ptr %64, align 8
  store ptr %66, ptr %65, align 8
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %69 = load ptr, ptr %67, align 8
  store ptr %69, ptr %68, align 8
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 3
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %72 = load i32, ptr %70, align 4
  store i32 %72, ptr %71, align 4
  call void @set_offset(ptr %60, ptr @Iterator2)
  %73 = call ptr @llvm.invariant.start.p0(i64 24, ptr %60)
  %74 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %75 = extractvalue { ptr, ptr, ptr, i32 } %74, 0
  %76 = call ptr @llvm.invariant.start.p0(i64 400, ptr %75)
  %77 = extractvalue { ptr, ptr, ptr, i32 } %74, 3
  %78 = getelementptr ptr, ptr %75, i32 %77
  %79 = getelementptr ptr, ptr %78, i32 1
  %80 = load ptr, ptr %79, align 8
  %81 = extractvalue { ptr, ptr, ptr, i32 } %74, 1
  %82 = call ptr %80(ptr %81)
  %83 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %84 = extractvalue { ptr, ptr, ptr, i32 } %83, 0
  %85 = call ptr @llvm.invariant.start.p0(i64 400, ptr %84)
  %86 = extractvalue { ptr, ptr, ptr, i32 } %83, 3
  %87 = getelementptr ptr, ptr %84, i32 %86
  %88 = getelementptr ptr, ptr %87, i32 2
  %89 = load ptr, ptr %88, align 8
  %90 = extractvalue { ptr, ptr, ptr, i32 } %83, 1
  %91 = call ptr %89(ptr %90)
  %92 = load ptr, ptr %91, align 8
  %93 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr }, ptr }, ptr null, i32 1) to i64))
  %94 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr }, ptr }, ptr %93, i32 0, i32 2
  store ptr %92, ptr %94, align 8
  %95 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr }, ptr }, ptr %93, i32 0, i32 2
  %96 = call ptr @llvm.invariant.start.p0(i64 8, ptr %95)
  %97 = alloca { ptr, ptr, ptr, i32 }, align 8
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  store ptr @FilterIterator2, ptr %97, align 8
  store ptr %93, ptr %98, align 8
  store i32 7, ptr %99, align 4
  %100 = call ptr @llvm.invariant.start.p0(i64 16, ptr %97)
  %101 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %102 = extractvalue { ptr, ptr, ptr, i32 } %101, 0
  %103 = call ptr @llvm.invariant.start.p0(i64 400, ptr %102)
  %104 = extractvalue { ptr, ptr, ptr, i32 } %101, 3
  %105 = getelementptr ptr, ptr %102, i32 %104
  %106 = load ptr, ptr %105, align 8
  %107 = extractvalue { ptr, ptr, ptr, i32 } %101, 1
  %108 = call ptr %106(ptr %107)
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 0
  %110 = load ptr, ptr %109, align 8
  %111 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %110, 0
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 1
  %113 = load ptr, ptr %112, align 8
  %114 = insertvalue { ptr, ptr, ptr, i32 } %111, ptr %113, 1
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 2
  %116 = load ptr, ptr %115, align 8
  %117 = insertvalue { ptr, ptr, ptr, i32 } %114, ptr %116, 2
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 3
  %119 = load i32, ptr %118, align 4
  %120 = insertvalue { ptr, ptr, ptr, i32 } %117, i32 %119, 3
  %121 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %122 = extractvalue { ptr, ptr, ptr, i32 } %121, 0
  %123 = call ptr @llvm.invariant.start.p0(i64 400, ptr %122)
  %124 = extractvalue { ptr, ptr, ptr, i32 } %121, 3
  %125 = getelementptr ptr, ptr %122, i32 %124
  %126 = getelementptr ptr, ptr %125, i32 2
  %127 = load ptr, ptr %126, align 8
  %128 = extractvalue { ptr, ptr, ptr, i32 } %121, 1
  %129 = call ptr %127(ptr %128)
  %130 = alloca [0 x ptr], align 8
  %131 = call ptr @llvm.invariant.start.p0(i64 0, ptr %130)
  %132 = call ptr @llvm.invariant.start.p0(i64 184, ptr %110)
  %133 = getelementptr ptr, ptr %110, i32 %119
  %134 = getelementptr ptr, ptr %133, i32 1
  %135 = load ptr, ptr %134, align 8
  %136 = alloca [0 x ptr], align 8
  %137 = call ptr %135({ ptr, ptr, ptr, i32 } %120, ptr %136)
  %138 = call { ptr, ptr, ptr, i32 } %137({ ptr, ptr, ptr, i32 } %120, { ptr, ptr, ptr, i32 } %120, ptr %130)
  %139 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %138, ptr %139, align 8
  %140 = call ptr @llvm.invariant.start.p0(i64 16, ptr %139)
  %141 = alloca { ptr, ptr, ptr, i32 }, align 8
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %139, i32 0, i32 0
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 0
  %144 = load ptr, ptr %142, align 8
  store ptr %144, ptr %143, align 8
  %145 = getelementptr { ptr, ptr, ptr, i32 }, ptr %139, i32 0, i32 1
  %146 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 1
  %147 = load ptr, ptr %145, align 8
  store ptr %147, ptr %146, align 8
  %148 = getelementptr { ptr, ptr, ptr, i32 }, ptr %139, i32 0, i32 2
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 2
  %150 = load ptr, ptr %148, align 8
  store ptr %150, ptr %149, align 8
  %151 = getelementptr { ptr, ptr, ptr, i32 }, ptr %139, i32 0, i32 3
  %152 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 3
  %153 = load i32, ptr %151, align 4
  store i32 %153, ptr %152, align 4
  call void @set_offset(ptr %141, ptr @Iterator2)
  %154 = call ptr @llvm.invariant.start.p0(i64 24, ptr %141)
  %155 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %156 = extractvalue { ptr, ptr, ptr, i32 } %155, 0
  %157 = call ptr @llvm.invariant.start.p0(i64 400, ptr %156)
  %158 = extractvalue { ptr, ptr, ptr, i32 } %155, 3
  %159 = getelementptr ptr, ptr %156, i32 %158
  %160 = getelementptr ptr, ptr %159, i32 1
  %161 = load ptr, ptr %160, align 8
  %162 = extractvalue { ptr, ptr, ptr, i32 } %155, 1
  %163 = call ptr %161(ptr %162)
  %164 = alloca { ptr, ptr, ptr, i32 }, align 8
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 0
  %166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %164, i32 0, i32 0
  %167 = load ptr, ptr %165, align 8
  store ptr %167, ptr %166, align 8
  %168 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 1
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %164, i32 0, i32 1
  %170 = load ptr, ptr %168, align 8
  store ptr %170, ptr %169, align 8
  %171 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 2
  %172 = getelementptr { ptr, ptr, ptr, i32 }, ptr %164, i32 0, i32 2
  %173 = load ptr, ptr %171, align 8
  store ptr %173, ptr %172, align 8
  %174 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 3
  %175 = getelementptr { ptr, ptr, ptr, i32 }, ptr %164, i32 0, i32 3
  %176 = load i32, ptr %174, align 4
  store i32 %176, ptr %175, align 4
  call void @set_offset(ptr %164, ptr @Iterator2)
  %177 = call ptr @llvm.invariant.start.p0(i64 24, ptr %164)
  %178 = getelementptr { ptr, ptr, ptr, i32 }, ptr %164, i32 0, i32 0
  %179 = load ptr, ptr %178, align 8
  %180 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %179, 0
  %181 = getelementptr { ptr, ptr, ptr, i32 }, ptr %164, i32 0, i32 1
  %182 = load ptr, ptr %181, align 8
  %183 = insertvalue { ptr, ptr, ptr, i32 } %180, ptr %182, 1
  %184 = getelementptr { ptr, ptr, ptr, i32 }, ptr %164, i32 0, i32 2
  %185 = load ptr, ptr %184, align 8
  %186 = insertvalue { ptr, ptr, ptr, i32 } %183, ptr %185, 2
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %164, i32 0, i32 3
  %188 = load i32, ptr %187, align 4
  %189 = insertvalue { ptr, ptr, ptr, i32 } %186, i32 %188, 3
  %190 = getelementptr { ptr }, ptr %163, i32 0, i32 0
  %191 = load ptr, ptr %190, align 8
  %192 = insertvalue { ptr } undef, ptr %191, 0
  %193 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 0
  %194 = load ptr, ptr %193, align 8
  %195 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %194, 0
  %196 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %197 = load ptr, ptr %196, align 8
  %198 = insertvalue { ptr, ptr, ptr, i32 } %195, ptr %197, 1
  %199 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 2
  %200 = load ptr, ptr %199, align 8
  %201 = insertvalue { ptr, ptr, ptr, i32 } %198, ptr %200, 2
  %202 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  %203 = load i32, ptr %202, align 4
  %204 = insertvalue { ptr, ptr, ptr, i32 } %201, i32 %203, 3
  %205 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %206 = extractvalue { ptr, ptr, ptr, i32 } %205, 0
  %207 = call ptr @llvm.invariant.start.p0(i64 400, ptr %206)
  %208 = extractvalue { ptr, ptr, ptr, i32 } %205, 3
  %209 = getelementptr ptr, ptr %206, i32 %208
  %210 = getelementptr ptr, ptr %209, i32 2
  %211 = load ptr, ptr %210, align 8
  %212 = extractvalue { ptr, ptr, ptr, i32 } %205, 1
  %213 = call ptr %211(ptr %212)
  %214 = load ptr, ptr %213, align 8
  %215 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ([2 x ptr], ptr null, i32 1) to i64))
  %216 = call ptr @llvm.invariant.start.p0(i64 16, ptr %215)
  %217 = getelementptr [2 x ptr], ptr %215, i32 0, i32 1
  store ptr %214, ptr %217, align 8
  store ptr @Iterator2, ptr %215, align 8
  %218 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %219 = call ptr @llvm.invariant.start.p0(i64 24, ptr %218)
  %220 = getelementptr [3 x ptr], ptr %218, i32 0, i32 2
  store ptr %214, ptr %220, align 8
  %221 = getelementptr [3 x ptr], ptr %218, i32 0, i32 1
  store ptr @_parameterization_Ptri1, ptr %221, align 8
  store ptr @function_typ, ptr %218, align 8
  %222 = alloca [2 x ptr], align 8
  %223 = call ptr @llvm.invariant.start.p0(i64 16, ptr %222)
  %224 = getelementptr [2 x ptr], ptr %222, i32 0, i32 1
  store ptr %218, ptr %224, align 8
  %225 = getelementptr [2 x ptr], ptr %222, i32 0, i32 0
  store ptr %215, ptr %225, align 8
  %226 = call ptr @llvm.invariant.start.p0(i64 80, ptr %194)
  %227 = getelementptr ptr, ptr %194, i32 %203
  %228 = getelementptr ptr, ptr %227, i32 3
  %229 = load ptr, ptr %228, align 8
  %230 = alloca [2 x ptr], align 8
  %231 = getelementptr [2 x ptr], ptr %230, i32 0, i32 0
  store ptr %179, ptr %231, align 8
  %232 = getelementptr [2 x ptr], ptr %230, i32 0, i32 1
  store ptr @function_typ, ptr %232, align 8
  %233 = call ptr %229({ ptr, ptr, ptr, i32 } %204, ptr %230, { ptr, ptr, ptr, i32 } %189, { ptr } %192)
  call void %233({ ptr, ptr, ptr, i32 } %204, { ptr, ptr, ptr, i32 } %204, ptr %222, { ptr, ptr, ptr, i32 } %189, { ptr } %192)
  %234 = alloca { ptr, ptr, ptr, i32 }, align 8
  %235 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 0
  %236 = getelementptr { ptr, ptr, ptr, i32 }, ptr %234, i32 0, i32 0
  %237 = load ptr, ptr %235, align 8
  store ptr %237, ptr %236, align 8
  %238 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %239 = getelementptr { ptr, ptr, ptr, i32 }, ptr %234, i32 0, i32 1
  %240 = load ptr, ptr %238, align 8
  store ptr %240, ptr %239, align 8
  %241 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 2
  %242 = getelementptr { ptr, ptr, ptr, i32 }, ptr %234, i32 0, i32 2
  %243 = load ptr, ptr %241, align 8
  store ptr %243, ptr %242, align 8
  %244 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  %245 = getelementptr { ptr, ptr, ptr, i32 }, ptr %234, i32 0, i32 3
  %246 = load i32, ptr %244, align 4
  store i32 %246, ptr %245, align 4
  call void @set_offset(ptr %234, ptr @Iterator2)
  %247 = call ptr @llvm.invariant.start.p0(i64 24, ptr %234)
  %248 = getelementptr { ptr, ptr, ptr, i32 }, ptr %234, i32 0, i32 0
  %249 = load ptr, ptr %248, align 8
  %250 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %249, 0
  %251 = getelementptr { ptr, ptr, ptr, i32 }, ptr %234, i32 0, i32 1
  %252 = load ptr, ptr %251, align 8
  %253 = insertvalue { ptr, ptr, ptr, i32 } %250, ptr %252, 1
  %254 = getelementptr { ptr, ptr, ptr, i32 }, ptr %234, i32 0, i32 2
  %255 = load ptr, ptr %254, align 8
  %256 = insertvalue { ptr, ptr, ptr, i32 } %253, ptr %255, 2
  %257 = getelementptr { ptr, ptr, ptr, i32 }, ptr %234, i32 0, i32 3
  %258 = load i32, ptr %257, align 4
  %259 = insertvalue { ptr, ptr, ptr, i32 } %256, i32 %258, 3
  ret { ptr, ptr, ptr, i32 } %259
}

define ptr @FilterIterator2_field_iterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr }, ptr }, ptr %0, i32 0, i32 0
  ret ptr %2
}

define ptr @FilterIterator2_field_f(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr }, ptr }, ptr %0, i32 0, i32 1
  ret ptr %2
}

define ptr @FilterIterator2_field_FilterIterator2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr }, ptr }, ptr %0, i32 0, i32 2
  ret ptr %2
}

define ptr @FilterIterator2_B_init_iteratorIterator2T_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2, { ptr } %3) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = getelementptr [2 x ptr], ptr %1, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr ptr, ptr %7, i32 1
  %9 = getelementptr ptr, ptr %7, i32 2
  %10 = getelementptr ptr, ptr %7, i32 3
  %11 = getelementptr ptr, ptr %7, i32 4
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 4189192806087951739, i64 ptrtoint (ptr @Iterator2 to i64), ptr %15)
  %17 = getelementptr [2 x ptr], ptr %1, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr ptr, ptr %18, i32 1
  %20 = getelementptr ptr, ptr %18, i32 2
  %21 = getelementptr ptr, ptr %18, i32 3
  %22 = getelementptr ptr, ptr %18, i32 4
  %23 = load i64, ptr %19, align 4
  %24 = load i64, ptr %20, align 4
  %25 = load ptr, ptr %21, align 8
  %26 = load ptr, ptr %22, align 8
  %27 = call i1 @subtype_test_wrapper(ptr %25, i64 %24, i64 %23, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %26)
  %28 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %29 = getelementptr [10 x ptr], ptr %28, i32 0, i32 5
  %30 = getelementptr ptr, ptr %29, i32 7
  %31 = load ptr, ptr %30, align 8
  ret ptr %31
}

define ptr @FilterIterator2_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [10 x ptr], ptr %4, i32 0, i32 6
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @FilterIterator2_init_iteratorIterator2T_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @FilterIterator2)
  %21 = call ptr @llvm.invariant.start.p0(i64 24, ptr %8)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %22, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 16, ptr %22)
  %24 = alloca { ptr, ptr, ptr, i32 }, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %36 = load i32, ptr %34, align 4
  store i32 %36, ptr %35, align 4
  call void @set_offset(ptr %24, ptr @Iterator2)
  %37 = call ptr @llvm.invariant.start.p0(i64 24, ptr %24)
  %38 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %39 = extractvalue { ptr, ptr, ptr, i32 } %38, 0
  %40 = call ptr @llvm.invariant.start.p0(i64 80, ptr %39)
  %41 = extractvalue { ptr, ptr, ptr, i32 } %38, 3
  %42 = getelementptr ptr, ptr %39, i32 %41
  %43 = load ptr, ptr %42, align 8
  %44 = extractvalue { ptr, ptr, ptr, i32 } %38, 1
  %45 = call ptr %43(ptr %44)
  %46 = alloca { ptr, ptr, ptr, i32 }, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %49 = load ptr, ptr %47, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %52 = load ptr, ptr %50, align 8
  store ptr %52, ptr %51, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %55 = load ptr, ptr %53, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %58 = load i32, ptr %56, align 4
  store i32 %58, ptr %57, align 4
  call void @set_offset(ptr %46, ptr @Iterator2)
  %59 = call ptr @llvm.invariant.start.p0(i64 24, ptr %46)
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %62 = load ptr, ptr %60, align 8
  store ptr %62, ptr %61, align 8
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %65 = load ptr, ptr %63, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %68 = load ptr, ptr %66, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %71 = load i32, ptr %69, align 4
  store i32 %71, ptr %70, align 4
  %72 = alloca ptr, align 8
  store { ptr } %4, ptr %72, align 8
  %73 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %74 = extractvalue { ptr, ptr, ptr, i32 } %73, 0
  %75 = call ptr @llvm.invariant.start.p0(i64 80, ptr %74)
  %76 = extractvalue { ptr, ptr, ptr, i32 } %73, 3
  %77 = getelementptr ptr, ptr %74, i32 %76
  %78 = getelementptr ptr, ptr %77, i32 1
  %79 = load ptr, ptr %78, align 8
  %80 = extractvalue { ptr, ptr, ptr, i32 } %73, 1
  %81 = call ptr %79(ptr %80)
  %82 = getelementptr { ptr }, ptr %81, i32 0, i32 0
  %83 = load ptr, ptr %72, align 8
  store ptr %83, ptr %82, align 8
  ret void
}

define { ptr, i160 } @FilterIterator2_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem7 = alloca i32, align 4
  %.reg2mem9 = alloca i32, align 4
  %.reg2mem12 = alloca i32, align 4
  %.reg2mem14 = alloca i32, align 4
  %.reg2mem16 = alloca ptr, align 8
  %.reg2mem18 = alloca { ptr, i160 }, align 8
  %.reg2mem20 = alloca ptr, align 8
  %.reg2mem22 = alloca i32, align 4
  %.reg2mem24 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @FilterIterator2)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 80, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %27 = call ptr %25(ptr %26)
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %29, 0
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %32 = load ptr, ptr %31, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %32, 1
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %35 = load ptr, ptr %34, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %35, 2
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %38 = load i32, ptr %37, align 4
  %39 = insertvalue { ptr, ptr, ptr, i32 } %36, i32 %38, 3
  %40 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %41 = extractvalue { ptr, ptr, ptr, i32 } %40, 0
  %42 = call ptr @llvm.invariant.start.p0(i64 80, ptr %41)
  %43 = extractvalue { ptr, ptr, ptr, i32 } %40, 3
  %44 = getelementptr ptr, ptr %41, i32 %43
  %45 = getelementptr ptr, ptr %44, i32 2
  %46 = load ptr, ptr %45, align 8
  %47 = extractvalue { ptr, ptr, ptr, i32 } %40, 1
  %48 = call ptr %46(ptr %47)
  %49 = alloca [0 x ptr], align 8
  %50 = call ptr @llvm.invariant.start.p0(i64 0, ptr %49)
  %51 = call ptr @llvm.invariant.start.p0(i64 24, ptr %29)
  %52 = getelementptr ptr, ptr %29, i32 %38
  %53 = getelementptr ptr, ptr %52, i32 1
  %54 = load ptr, ptr %53, align 8
  %55 = alloca [0 x ptr], align 8
  %56 = call ptr %54({ ptr, ptr, ptr, i32 } %39, ptr %55)
  %57 = call { ptr, i160 } %56({ ptr, ptr, ptr, i32 } %39, { ptr, ptr, ptr, i32 } %39, ptr %49)
  %58 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %57, ptr %58, align 8
  %59 = getelementptr { ptr, i160 }, ptr %58, i32 0, i32 0
  store ptr %59, ptr %.reg2mem16, align 8
  %60 = alloca i64, align 8
  %61 = alloca i1, align 1
  %62 = alloca { ptr, i160 }, align 8
  %63 = alloca { ptr, i160 }, align 8
  %64 = alloca i1, align 1
  %65 = alloca [0 x ptr], align 8
  %66 = alloca [0 x ptr], align 8
  %67 = alloca { ptr, i160 }, align 8
  %68 = alloca i160, align 8
  %69 = alloca ptr, align 8
  %70 = alloca i64, align 8
  br label %71

71:                                               ; preds = %161, %3
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %60, align 4
  %.reload17 = load ptr, ptr %.reg2mem16, align 8
  %72 = load ptr, ptr %.reload17, align 8
  %73 = ptrtoint ptr %72 to i64
  %74 = load ptr, ptr %60, align 8
  %75 = ptrtoint ptr %74 to i64
  %76 = icmp ne i64 %73, %75
  store i1 %76, ptr %61, align 1
  %77 = load i1, ptr %61, align 1
  br i1 %77, label %78, label %157

78:                                               ; preds = %71
  %79 = getelementptr { ptr, i160 }, ptr %58, i32 0, i32 0
  %80 = getelementptr { ptr, i160 }, ptr %62, i32 0, i32 0
  %81 = load ptr, ptr %79, align 8
  store ptr %81, ptr %80, align 8
  %82 = getelementptr { ptr, i160 }, ptr %58, i32 0, i32 1
  %83 = getelementptr { ptr, i160 }, ptr %62, i32 0, i32 1
  %84 = load i160, ptr %82, align 4
  store i160 %84, ptr %83, align 4
  call void @set_offset(ptr %62, ptr @Object)
  %85 = getelementptr { ptr, i160 }, ptr %62, i32 0, i32 0
  %86 = getelementptr { ptr, i160 }, ptr %63, i32 0, i32 0
  %87 = load ptr, ptr %85, align 8
  store ptr %87, ptr %86, align 8
  %88 = getelementptr { ptr, i160 }, ptr %62, i32 0, i32 1
  %89 = getelementptr { ptr, i160 }, ptr %63, i32 0, i32 1
  %90 = load i160, ptr %88, align 4
  store i160 %90, ptr %89, align 4
  call void @set_offset(ptr %63, ptr @Object)
  %91 = getelementptr { ptr, i160 }, ptr %63, i32 0, i32 0
  %92 = load ptr, ptr %91, align 8
  %93 = insertvalue { ptr, i160 } undef, ptr %92, 0
  %94 = getelementptr { ptr, i160 }, ptr %63, i32 0, i32 1
  %95 = load i160, ptr %94, align 4
  %96 = insertvalue { ptr, i160 } %93, i160 %95, 1
  %97 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %98 = extractvalue { ptr, ptr, ptr, i32 } %97, 0
  %99 = call ptr @llvm.invariant.start.p0(i64 80, ptr %98)
  %100 = extractvalue { ptr, ptr, ptr, i32 } %97, 3
  %101 = getelementptr ptr, ptr %98, i32 %100
  %102 = getelementptr ptr, ptr %101, i32 1
  %103 = load ptr, ptr %102, align 8
  %104 = extractvalue { ptr, ptr, ptr, i32 } %97, 1
  %105 = call ptr %103(ptr %104)
  %106 = load ptr, ptr %105, align 8
  %107 = call i1 %106({ ptr, i160 } %96)
  store i1 %107, ptr %64, align 1
  %108 = load i1, ptr %64, align 1
  %109 = zext i1 %108 to i32
  store i32 %109, ptr %.reg2mem14, align 4
  %110 = xor i1 %108, true
  %111 = zext i1 %110 to i32
  store i32 %111, ptr %.reg2mem12, align 4
  br i1 %108, label %112, label %113

112:                                              ; preds = %78
  br label %156

113:                                              ; preds = %78
  %114 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %115 = extractvalue { ptr, ptr, ptr, i32 } %114, 0
  %116 = call ptr @llvm.invariant.start.p0(i64 80, ptr %115)
  %117 = extractvalue { ptr, ptr, ptr, i32 } %114, 3
  %118 = getelementptr ptr, ptr %115, i32 %117
  %119 = load ptr, ptr %118, align 8
  %120 = extractvalue { ptr, ptr, ptr, i32 } %114, 1
  %121 = call ptr %119(ptr %120)
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %121, i32 0, i32 0
  %123 = load ptr, ptr %122, align 8
  %124 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %123, 0
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %121, i32 0, i32 1
  %126 = load ptr, ptr %125, align 8
  %127 = insertvalue { ptr, ptr, ptr, i32 } %124, ptr %126, 1
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %121, i32 0, i32 2
  %129 = load ptr, ptr %128, align 8
  %130 = insertvalue { ptr, ptr, ptr, i32 } %127, ptr %129, 2
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %121, i32 0, i32 3
  %132 = load i32, ptr %131, align 4
  %133 = insertvalue { ptr, ptr, ptr, i32 } %130, i32 %132, 3
  %134 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %135 = extractvalue { ptr, ptr, ptr, i32 } %134, 0
  %136 = call ptr @llvm.invariant.start.p0(i64 80, ptr %135)
  %137 = extractvalue { ptr, ptr, ptr, i32 } %134, 3
  %138 = getelementptr ptr, ptr %135, i32 %137
  %139 = getelementptr ptr, ptr %138, i32 2
  %140 = load ptr, ptr %139, align 8
  %141 = extractvalue { ptr, ptr, ptr, i32 } %134, 1
  %142 = call ptr %140(ptr %141)
  %143 = call ptr @llvm.invariant.start.p0(i64 0, ptr %65)
  %144 = call ptr @llvm.invariant.start.p0(i64 24, ptr %123)
  %145 = getelementptr ptr, ptr %123, i32 %132
  %146 = getelementptr ptr, ptr %145, i32 1
  %147 = load ptr, ptr %146, align 8
  %148 = call ptr %147({ ptr, ptr, ptr, i32 } %133, ptr %66)
  %149 = call { ptr, i160 } %148({ ptr, ptr, ptr, i32 } %133, { ptr, ptr, ptr, i32 } %133, ptr %65)
  store { ptr, i160 } %149, ptr %67, align 8
  %150 = getelementptr { ptr, i160 }, ptr %67, i32 0, i32 0
  %151 = getelementptr { ptr, i160 }, ptr %58, i32 0, i32 0
  %152 = load ptr, ptr %150, align 8
  store ptr %152, ptr %151, align 8
  %153 = getelementptr { ptr, i160 }, ptr %67, i32 0, i32 1
  %154 = getelementptr { ptr, i160 }, ptr %58, i32 0, i32 1
  %155 = load i160, ptr %153, align 4
  store i160 %155, ptr %154, align 4
  br label %156

156:                                              ; preds = %113, %112
  %.reload13 = load i32, ptr %.reg2mem12, align 4
  %.reload15 = load i32, ptr %.reg2mem14, align 4
  store ptr %62, ptr %.reg2mem20, align 8
  store i32 %.reload13, ptr %.reg2mem22, align 4
  store i32 %.reload15, ptr %.reg2mem24, align 4
  br label %158

157:                                              ; preds = %71
  store ptr poison, ptr %.reg2mem20, align 8
  store i32 0, ptr %.reg2mem22, align 4
  store i32 2, ptr %.reg2mem24, align 4
  br label %158

158:                                              ; preds = %157, %156
  %.reload25 = load i32, ptr %.reg2mem24, align 4
  %.reload23 = load i32, ptr %.reg2mem22, align 4
  %.reload21 = load ptr, ptr %.reg2mem20, align 8
  store i32 %.reload25, ptr %.reg2mem9, align 4
  store i32 %.reload23, ptr %.reg2mem7, align 4
  store ptr %.reload21, ptr %.reg2mem3, align 8
  br label %159

159:                                              ; preds = %158
  %.reload8 = load i32, ptr %.reg2mem7, align 4
  %160 = trunc i32 %.reload8 to i1
  %.reload6 = load ptr, ptr %.reg2mem3, align 8
  %.reload11 = load i32, ptr %.reg2mem9, align 4
  br i1 %160, label %161, label %162

161:                                              ; preds = %159
  br label %71

162:                                              ; preds = %159
  %.reload10 = load i32, ptr %.reg2mem9, align 4
  %163 = zext i32 %.reload10 to i64
  %164 = trunc i64 %163 to i32
  switch i32 %164, label %172 [
    i32 1, label %165
  ]

165:                                              ; preds = %162
  %.reload5 = load ptr, ptr %.reg2mem3, align 8
  %166 = getelementptr { ptr, i160 }, ptr %.reload5, i32 0, i32 0
  %167 = load ptr, ptr %166, align 8
  %168 = insertvalue { ptr, i160 } undef, ptr %167, 0
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %169 = getelementptr { ptr, i160 }, ptr %.reload4, i32 0, i32 1
  %170 = load i160, ptr %169, align 4
  %171 = insertvalue { ptr, i160 } %168, i160 %170, 1
  store { ptr, i160 } %171, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem18, align 8
  br label %178

172:                                              ; preds = %162
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %70, align 4
  %173 = load i64, ptr %70, align 4
  store i64 %173, ptr %69, align 4
  %174 = load ptr, ptr %69, align 8
  %175 = insertvalue { ptr, i160 } undef, ptr %174, 0
  %176 = load i160, ptr %68, align 4
  %177 = insertvalue { ptr, i160 } %175, i160 %176, 1
  store { ptr, i160 } %177, ptr %.reg2mem, align 8
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  store { ptr, i160 } %.reload, ptr %.reg2mem18, align 8
  br label %178

178:                                              ; preds = %172, %165
  %.reload19 = load { ptr, i160 }, ptr %.reg2mem18, align 8
  ret { ptr, i160 } %.reload19
}

define ptr @MapIterable2_field_iterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr }, ptr, ptr }, ptr %0, i32 0, i32 0
  ret ptr %2
}

define ptr @MapIterable2_field_f(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr }, ptr, ptr }, ptr %0, i32 0, i32 1
  ret ptr %2
}

define ptr @MapIterable2_field_MapIterable2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr }, ptr, ptr }, ptr %0, i32 0, i32 2
  ret ptr %2
}

define ptr @MapIterable2_field_MapIterable2_1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr }, ptr, ptr }, ptr %0, i32 0, i32 3
  ret ptr %2
}

define ptr @MapIterable2_B_init_iterableIterable2T_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2, { ptr } %3) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = getelementptr [2 x ptr], ptr %1, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr ptr, ptr %7, i32 1
  %9 = getelementptr ptr, ptr %7, i32 2
  %10 = getelementptr ptr, ptr %7, i32 3
  %11 = getelementptr ptr, ptr %7, i32 4
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %15)
  %17 = getelementptr [2 x ptr], ptr %1, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr ptr, ptr %18, i32 1
  %20 = getelementptr ptr, ptr %18, i32 2
  %21 = getelementptr ptr, ptr %18, i32 3
  %22 = getelementptr ptr, ptr %18, i32 4
  %23 = load i64, ptr %19, align 4
  %24 = load i64, ptr %20, align 4
  %25 = load ptr, ptr %21, align 8
  %26 = load ptr, ptr %22, align 8
  %27 = call i1 @subtype_test_wrapper(ptr %25, i64 %24, i64 %23, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %26)
  %28 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %29 = getelementptr [51 x ptr], ptr %28, i32 0, i32 16
  %30 = getelementptr ptr, ptr %29, i32 7
  %31 = load ptr, ptr %30, align 8
  ret ptr %31
}

define ptr @MapIterable2_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [51 x ptr], ptr %4, i32 0, i32 17
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @MapIterable2_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [51 x ptr], ptr %16, i32 0, i32 18
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @MapIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, i160 } %2, { ptr } %3) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = getelementptr [2 x ptr], ptr %1, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr ptr, ptr %7, i32 1
  %9 = getelementptr ptr, ptr %7, i32 2
  %10 = getelementptr ptr, ptr %7, i32 3
  %11 = getelementptr ptr, ptr %7, i32 4
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 3282773614056351330, i64 ptrtoint (ptr @Object to i64), ptr %15)
  %17 = getelementptr [2 x ptr], ptr %1, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr ptr, ptr %18, i32 1
  %20 = getelementptr ptr, ptr %18, i32 2
  %21 = getelementptr ptr, ptr %18, i32 3
  %22 = getelementptr ptr, ptr %18, i32 4
  %23 = load i64, ptr %19, align 4
  %24 = load i64, ptr %20, align 4
  %25 = load ptr, ptr %21, align 8
  %26 = load ptr, ptr %22, align 8
  %27 = call i1 @subtype_test_wrapper(ptr %25, i64 %24, i64 %23, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %26)
  %28 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %29 = getelementptr [51 x ptr], ptr %28, i32 0, i32 19
  %30 = getelementptr ptr, ptr %29, i32 7
  %31 = load ptr, ptr %30, align 8
  ret ptr %31
}

define ptr @MapIterable2_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [51 x ptr], ptr %16, i32 0, i32 20
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @MapIterable2_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [51 x ptr], ptr %16, i32 0, i32 21
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @MapIterable2_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [51 x ptr], ptr %16, i32 0, i32 22
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @MapIterable2_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [51 x ptr], ptr %16, i32 0, i32 23
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @MapIterable2_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [51 x ptr], ptr %16, i32 0, i32 24
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @MapIterable2_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [51 x ptr], ptr %16, i32 0, i32 25
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @MapIterable2_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [51 x ptr], ptr %16, i32 0, i32 26
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @MapIterable2_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [51 x ptr], ptr %16, i32 0, i32 27
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define void @MapIterable2_init_iterableIterable2T_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @MapIterable2)
  %21 = call ptr @llvm.invariant.start.p0(i64 24, ptr %8)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %22, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 16, ptr %22)
  %24 = alloca { ptr, ptr, ptr, i32 }, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %36 = load i32, ptr %34, align 4
  store i32 %36, ptr %35, align 4
  call void @set_offset(ptr %24, ptr @Iterable2)
  %37 = call ptr @llvm.invariant.start.p0(i64 24, ptr %24)
  %38 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %39 = extractvalue { ptr, ptr, ptr, i32 } %38, 0
  %40 = call ptr @llvm.invariant.start.p0(i64 408, ptr %39)
  %41 = extractvalue { ptr, ptr, ptr, i32 } %38, 3
  %42 = getelementptr ptr, ptr %39, i32 %41
  %43 = load ptr, ptr %42, align 8
  %44 = extractvalue { ptr, ptr, ptr, i32 } %38, 1
  %45 = call ptr %43(ptr %44)
  %46 = alloca { ptr, ptr, ptr, i32 }, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %49 = load ptr, ptr %47, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %52 = load ptr, ptr %50, align 8
  store ptr %52, ptr %51, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %55 = load ptr, ptr %53, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %58 = load i32, ptr %56, align 4
  store i32 %58, ptr %57, align 4
  call void @set_offset(ptr %46, ptr @Iterable2)
  %59 = call ptr @llvm.invariant.start.p0(i64 24, ptr %46)
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %62 = load ptr, ptr %60, align 8
  store ptr %62, ptr %61, align 8
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %65 = load ptr, ptr %63, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %68 = load ptr, ptr %66, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %71 = load i32, ptr %69, align 4
  store i32 %71, ptr %70, align 4
  %72 = alloca ptr, align 8
  store { ptr } %4, ptr %72, align 8
  %73 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %74 = extractvalue { ptr, ptr, ptr, i32 } %73, 0
  %75 = call ptr @llvm.invariant.start.p0(i64 408, ptr %74)
  %76 = extractvalue { ptr, ptr, ptr, i32 } %73, 3
  %77 = getelementptr ptr, ptr %74, i32 %76
  %78 = getelementptr ptr, ptr %77, i32 1
  %79 = load ptr, ptr %78, align 8
  %80 = extractvalue { ptr, ptr, ptr, i32 } %73, 1
  %81 = call ptr %79(ptr %80)
  %82 = getelementptr { ptr }, ptr %81, i32 0, i32 0
  %83 = load ptr, ptr %72, align 8
  store ptr %83, ptr %82, align 8
  ret void
}

define { ptr, ptr, ptr, i32 } @MapIterable2_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @MapIterable2)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 408, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %27 = call ptr %25(ptr %26)
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %29, 0
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %32 = load ptr, ptr %31, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %32, 1
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %35 = load ptr, ptr %34, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %35, 2
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %38 = load i32, ptr %37, align 4
  %39 = insertvalue { ptr, ptr, ptr, i32 } %36, i32 %38, 3
  %40 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %41 = extractvalue { ptr, ptr, ptr, i32 } %40, 0
  %42 = call ptr @llvm.invariant.start.p0(i64 408, ptr %41)
  %43 = extractvalue { ptr, ptr, ptr, i32 } %40, 3
  %44 = getelementptr ptr, ptr %41, i32 %43
  %45 = getelementptr ptr, ptr %44, i32 2
  %46 = load ptr, ptr %45, align 8
  %47 = extractvalue { ptr, ptr, ptr, i32 } %40, 1
  %48 = call ptr %46(ptr %47)
  %49 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %50 = extractvalue { ptr, ptr, ptr, i32 } %49, 0
  %51 = call ptr @llvm.invariant.start.p0(i64 408, ptr %50)
  %52 = extractvalue { ptr, ptr, ptr, i32 } %49, 3
  %53 = getelementptr ptr, ptr %50, i32 %52
  %54 = getelementptr ptr, ptr %53, i32 3
  %55 = load ptr, ptr %54, align 8
  %56 = extractvalue { ptr, ptr, ptr, i32 } %49, 1
  %57 = call ptr %55(ptr %56)
  %58 = alloca [0 x ptr], align 8
  %59 = call ptr @llvm.invariant.start.p0(i64 0, ptr %58)
  %60 = call ptr @llvm.invariant.start.p0(i64 184, ptr %29)
  %61 = getelementptr ptr, ptr %29, i32 %38
  %62 = getelementptr ptr, ptr %61, i32 1
  %63 = load ptr, ptr %62, align 8
  %64 = alloca [0 x ptr], align 8
  %65 = call ptr %63({ ptr, ptr, ptr, i32 } %39, ptr %64)
  %66 = call { ptr, ptr, ptr, i32 } %65({ ptr, ptr, ptr, i32 } %39, { ptr, ptr, ptr, i32 } %39, ptr %58)
  %67 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %66, ptr %67, align 8
  %68 = call ptr @llvm.invariant.start.p0(i64 16, ptr %67)
  %69 = alloca { ptr, ptr, ptr, i32 }, align 8
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 0
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %69, i32 0, i32 0
  %72 = load ptr, ptr %70, align 8
  store ptr %72, ptr %71, align 8
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 1
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %69, i32 0, i32 1
  %75 = load ptr, ptr %73, align 8
  store ptr %75, ptr %74, align 8
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 2
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %69, i32 0, i32 2
  %78 = load ptr, ptr %76, align 8
  store ptr %78, ptr %77, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %67, i32 0, i32 3
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %69, i32 0, i32 3
  %81 = load i32, ptr %79, align 4
  store i32 %81, ptr %80, align 4
  call void @set_offset(ptr %69, ptr @Iterator2)
  %82 = call ptr @llvm.invariant.start.p0(i64 24, ptr %69)
  %83 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %84 = extractvalue { ptr, ptr, ptr, i32 } %83, 0
  %85 = call ptr @llvm.invariant.start.p0(i64 408, ptr %84)
  %86 = extractvalue { ptr, ptr, ptr, i32 } %83, 3
  %87 = getelementptr ptr, ptr %84, i32 %86
  %88 = getelementptr ptr, ptr %87, i32 1
  %89 = load ptr, ptr %88, align 8
  %90 = extractvalue { ptr, ptr, ptr, i32 } %83, 1
  %91 = call ptr %89(ptr %90)
  %92 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %93 = extractvalue { ptr, ptr, ptr, i32 } %92, 0
  %94 = call ptr @llvm.invariant.start.p0(i64 408, ptr %93)
  %95 = extractvalue { ptr, ptr, ptr, i32 } %92, 3
  %96 = getelementptr ptr, ptr %93, i32 %95
  %97 = getelementptr ptr, ptr %96, i32 2
  %98 = load ptr, ptr %97, align 8
  %99 = extractvalue { ptr, ptr, ptr, i32 } %92, 1
  %100 = call ptr %98(ptr %99)
  %101 = load ptr, ptr %100, align 8
  %102 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %103 = extractvalue { ptr, ptr, ptr, i32 } %102, 0
  %104 = call ptr @llvm.invariant.start.p0(i64 408, ptr %103)
  %105 = extractvalue { ptr, ptr, ptr, i32 } %102, 3
  %106 = getelementptr ptr, ptr %103, i32 %105
  %107 = getelementptr ptr, ptr %106, i32 3
  %108 = load ptr, ptr %107, align 8
  %109 = extractvalue { ptr, ptr, ptr, i32 } %102, 1
  %110 = call ptr %108(ptr %109)
  %111 = load ptr, ptr %110, align 8
  %112 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr }, ptr, ptr }, ptr null, i32 1) to i64))
  %113 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr }, ptr, ptr }, ptr %112, i32 0, i32 2
  store ptr %101, ptr %113, align 8
  %114 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr }, ptr, ptr }, ptr %112, i32 0, i32 3
  store ptr %111, ptr %114, align 8
  %115 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr }, ptr, ptr }, ptr %112, i32 0, i32 2
  %116 = call ptr @llvm.invariant.start.p0(i64 16, ptr %115)
  %117 = alloca { ptr, ptr, ptr, i32 }, align 8
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %117, i32 0, i32 1
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %117, i32 0, i32 3
  store ptr @MapIterator2, ptr %117, align 8
  store ptr %112, ptr %118, align 8
  store i32 7, ptr %119, align 4
  %120 = call ptr @llvm.invariant.start.p0(i64 16, ptr %117)
  %121 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %122 = extractvalue { ptr, ptr, ptr, i32 } %121, 0
  %123 = call ptr @llvm.invariant.start.p0(i64 408, ptr %122)
  %124 = extractvalue { ptr, ptr, ptr, i32 } %121, 3
  %125 = getelementptr ptr, ptr %122, i32 %124
  %126 = load ptr, ptr %125, align 8
  %127 = extractvalue { ptr, ptr, ptr, i32 } %121, 1
  %128 = call ptr %126(ptr %127)
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %128, i32 0, i32 0
  %130 = load ptr, ptr %129, align 8
  %131 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %130, 0
  %132 = getelementptr { ptr, ptr, ptr, i32 }, ptr %128, i32 0, i32 1
  %133 = load ptr, ptr %132, align 8
  %134 = insertvalue { ptr, ptr, ptr, i32 } %131, ptr %133, 1
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %128, i32 0, i32 2
  %136 = load ptr, ptr %135, align 8
  %137 = insertvalue { ptr, ptr, ptr, i32 } %134, ptr %136, 2
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %128, i32 0, i32 3
  %139 = load i32, ptr %138, align 4
  %140 = insertvalue { ptr, ptr, ptr, i32 } %137, i32 %139, 3
  %141 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %142 = extractvalue { ptr, ptr, ptr, i32 } %141, 0
  %143 = call ptr @llvm.invariant.start.p0(i64 408, ptr %142)
  %144 = extractvalue { ptr, ptr, ptr, i32 } %141, 3
  %145 = getelementptr ptr, ptr %142, i32 %144
  %146 = getelementptr ptr, ptr %145, i32 2
  %147 = load ptr, ptr %146, align 8
  %148 = extractvalue { ptr, ptr, ptr, i32 } %141, 1
  %149 = call ptr %147(ptr %148)
  %150 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %151 = extractvalue { ptr, ptr, ptr, i32 } %150, 0
  %152 = call ptr @llvm.invariant.start.p0(i64 408, ptr %151)
  %153 = extractvalue { ptr, ptr, ptr, i32 } %150, 3
  %154 = getelementptr ptr, ptr %151, i32 %153
  %155 = getelementptr ptr, ptr %154, i32 3
  %156 = load ptr, ptr %155, align 8
  %157 = extractvalue { ptr, ptr, ptr, i32 } %150, 1
  %158 = call ptr %156(ptr %157)
  %159 = alloca [0 x ptr], align 8
  %160 = call ptr @llvm.invariant.start.p0(i64 0, ptr %159)
  %161 = call ptr @llvm.invariant.start.p0(i64 184, ptr %130)
  %162 = getelementptr ptr, ptr %130, i32 %139
  %163 = getelementptr ptr, ptr %162, i32 1
  %164 = load ptr, ptr %163, align 8
  %165 = alloca [0 x ptr], align 8
  %166 = call ptr %164({ ptr, ptr, ptr, i32 } %140, ptr %165)
  %167 = call { ptr, ptr, ptr, i32 } %166({ ptr, ptr, ptr, i32 } %140, { ptr, ptr, ptr, i32 } %140, ptr %159)
  %168 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %167, ptr %168, align 8
  %169 = call ptr @llvm.invariant.start.p0(i64 16, ptr %168)
  %170 = alloca { ptr, ptr, ptr, i32 }, align 8
  %171 = getelementptr { ptr, ptr, ptr, i32 }, ptr %168, i32 0, i32 0
  %172 = getelementptr { ptr, ptr, ptr, i32 }, ptr %170, i32 0, i32 0
  %173 = load ptr, ptr %171, align 8
  store ptr %173, ptr %172, align 8
  %174 = getelementptr { ptr, ptr, ptr, i32 }, ptr %168, i32 0, i32 1
  %175 = getelementptr { ptr, ptr, ptr, i32 }, ptr %170, i32 0, i32 1
  %176 = load ptr, ptr %174, align 8
  store ptr %176, ptr %175, align 8
  %177 = getelementptr { ptr, ptr, ptr, i32 }, ptr %168, i32 0, i32 2
  %178 = getelementptr { ptr, ptr, ptr, i32 }, ptr %170, i32 0, i32 2
  %179 = load ptr, ptr %177, align 8
  store ptr %179, ptr %178, align 8
  %180 = getelementptr { ptr, ptr, ptr, i32 }, ptr %168, i32 0, i32 3
  %181 = getelementptr { ptr, ptr, ptr, i32 }, ptr %170, i32 0, i32 3
  %182 = load i32, ptr %180, align 4
  store i32 %182, ptr %181, align 4
  call void @set_offset(ptr %170, ptr @Iterator2)
  %183 = call ptr @llvm.invariant.start.p0(i64 24, ptr %170)
  %184 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %185 = extractvalue { ptr, ptr, ptr, i32 } %184, 0
  %186 = call ptr @llvm.invariant.start.p0(i64 408, ptr %185)
  %187 = extractvalue { ptr, ptr, ptr, i32 } %184, 3
  %188 = getelementptr ptr, ptr %185, i32 %187
  %189 = getelementptr ptr, ptr %188, i32 1
  %190 = load ptr, ptr %189, align 8
  %191 = extractvalue { ptr, ptr, ptr, i32 } %184, 1
  %192 = call ptr %190(ptr %191)
  %193 = alloca { ptr, ptr, ptr, i32 }, align 8
  %194 = getelementptr { ptr, ptr, ptr, i32 }, ptr %170, i32 0, i32 0
  %195 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 0
  %196 = load ptr, ptr %194, align 8
  store ptr %196, ptr %195, align 8
  %197 = getelementptr { ptr, ptr, ptr, i32 }, ptr %170, i32 0, i32 1
  %198 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 1
  %199 = load ptr, ptr %197, align 8
  store ptr %199, ptr %198, align 8
  %200 = getelementptr { ptr, ptr, ptr, i32 }, ptr %170, i32 0, i32 2
  %201 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 2
  %202 = load ptr, ptr %200, align 8
  store ptr %202, ptr %201, align 8
  %203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %170, i32 0, i32 3
  %204 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 3
  %205 = load i32, ptr %203, align 4
  store i32 %205, ptr %204, align 4
  call void @set_offset(ptr %193, ptr @Iterator2)
  %206 = call ptr @llvm.invariant.start.p0(i64 24, ptr %193)
  %207 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 0
  %208 = load ptr, ptr %207, align 8
  %209 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %208, 0
  %210 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 1
  %211 = load ptr, ptr %210, align 8
  %212 = insertvalue { ptr, ptr, ptr, i32 } %209, ptr %211, 1
  %213 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 2
  %214 = load ptr, ptr %213, align 8
  %215 = insertvalue { ptr, ptr, ptr, i32 } %212, ptr %214, 2
  %216 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 3
  %217 = load i32, ptr %216, align 4
  %218 = insertvalue { ptr, ptr, ptr, i32 } %215, i32 %217, 3
  %219 = getelementptr { ptr }, ptr %192, i32 0, i32 0
  %220 = load ptr, ptr %219, align 8
  %221 = insertvalue { ptr } undef, ptr %220, 0
  %222 = getelementptr { ptr, ptr, ptr, i32 }, ptr %117, i32 0, i32 0
  %223 = load ptr, ptr %222, align 8
  %224 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %223, 0
  %225 = getelementptr { ptr, ptr, ptr, i32 }, ptr %117, i32 0, i32 1
  %226 = load ptr, ptr %225, align 8
  %227 = insertvalue { ptr, ptr, ptr, i32 } %224, ptr %226, 1
  %228 = getelementptr { ptr, ptr, ptr, i32 }, ptr %117, i32 0, i32 2
  %229 = load ptr, ptr %228, align 8
  %230 = insertvalue { ptr, ptr, ptr, i32 } %227, ptr %229, 2
  %231 = getelementptr { ptr, ptr, ptr, i32 }, ptr %117, i32 0, i32 3
  %232 = load i32, ptr %231, align 4
  %233 = insertvalue { ptr, ptr, ptr, i32 } %230, i32 %232, 3
  %234 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %235 = extractvalue { ptr, ptr, ptr, i32 } %234, 0
  %236 = call ptr @llvm.invariant.start.p0(i64 408, ptr %235)
  %237 = extractvalue { ptr, ptr, ptr, i32 } %234, 3
  %238 = getelementptr ptr, ptr %235, i32 %237
  %239 = getelementptr ptr, ptr %238, i32 2
  %240 = load ptr, ptr %239, align 8
  %241 = extractvalue { ptr, ptr, ptr, i32 } %234, 1
  %242 = call ptr %240(ptr %241)
  %243 = load ptr, ptr %242, align 8
  %244 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %245 = extractvalue { ptr, ptr, ptr, i32 } %244, 0
  %246 = call ptr @llvm.invariant.start.p0(i64 408, ptr %245)
  %247 = extractvalue { ptr, ptr, ptr, i32 } %244, 3
  %248 = getelementptr ptr, ptr %245, i32 %247
  %249 = getelementptr ptr, ptr %248, i32 3
  %250 = load ptr, ptr %249, align 8
  %251 = extractvalue { ptr, ptr, ptr, i32 } %244, 1
  %252 = call ptr %250(ptr %251)
  %253 = load ptr, ptr %252, align 8
  %254 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ([2 x ptr], ptr null, i32 1) to i64))
  %255 = call ptr @llvm.invariant.start.p0(i64 16, ptr %254)
  %256 = getelementptr [2 x ptr], ptr %254, i32 0, i32 1
  store ptr %243, ptr %256, align 8
  store ptr @Iterator2, ptr %254, align 8
  %257 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %258 = call ptr @llvm.invariant.start.p0(i64 24, ptr %257)
  %259 = getelementptr [3 x ptr], ptr %257, i32 0, i32 2
  store ptr %243, ptr %259, align 8
  %260 = getelementptr [3 x ptr], ptr %257, i32 0, i32 1
  store ptr %253, ptr %260, align 8
  store ptr @function_typ, ptr %257, align 8
  %261 = alloca [2 x ptr], align 8
  %262 = call ptr @llvm.invariant.start.p0(i64 16, ptr %261)
  %263 = getelementptr [2 x ptr], ptr %261, i32 0, i32 1
  store ptr %257, ptr %263, align 8
  %264 = getelementptr [2 x ptr], ptr %261, i32 0, i32 0
  store ptr %254, ptr %264, align 8
  %265 = call ptr @llvm.invariant.start.p0(i64 88, ptr %223)
  %266 = getelementptr ptr, ptr %223, i32 %232
  %267 = getelementptr ptr, ptr %266, i32 4
  %268 = load ptr, ptr %267, align 8
  %269 = alloca [2 x ptr], align 8
  %270 = getelementptr [2 x ptr], ptr %269, i32 0, i32 0
  store ptr %208, ptr %270, align 8
  %271 = getelementptr [2 x ptr], ptr %269, i32 0, i32 1
  store ptr @function_typ, ptr %271, align 8
  %272 = call ptr %268({ ptr, ptr, ptr, i32 } %233, ptr %269, { ptr, ptr, ptr, i32 } %218, { ptr } %221)
  call void %272({ ptr, ptr, ptr, i32 } %233, { ptr, ptr, ptr, i32 } %233, ptr %261, { ptr, ptr, ptr, i32 } %218, { ptr } %221)
  %273 = alloca { ptr, ptr, ptr, i32 }, align 8
  %274 = getelementptr { ptr, ptr, ptr, i32 }, ptr %117, i32 0, i32 0
  %275 = getelementptr { ptr, ptr, ptr, i32 }, ptr %273, i32 0, i32 0
  %276 = load ptr, ptr %274, align 8
  store ptr %276, ptr %275, align 8
  %277 = getelementptr { ptr, ptr, ptr, i32 }, ptr %117, i32 0, i32 1
  %278 = getelementptr { ptr, ptr, ptr, i32 }, ptr %273, i32 0, i32 1
  %279 = load ptr, ptr %277, align 8
  store ptr %279, ptr %278, align 8
  %280 = getelementptr { ptr, ptr, ptr, i32 }, ptr %117, i32 0, i32 2
  %281 = getelementptr { ptr, ptr, ptr, i32 }, ptr %273, i32 0, i32 2
  %282 = load ptr, ptr %280, align 8
  store ptr %282, ptr %281, align 8
  %283 = getelementptr { ptr, ptr, ptr, i32 }, ptr %117, i32 0, i32 3
  %284 = getelementptr { ptr, ptr, ptr, i32 }, ptr %273, i32 0, i32 3
  %285 = load i32, ptr %283, align 4
  store i32 %285, ptr %284, align 4
  call void @set_offset(ptr %273, ptr @Iterator2)
  %286 = call ptr @llvm.invariant.start.p0(i64 24, ptr %273)
  %287 = getelementptr { ptr, ptr, ptr, i32 }, ptr %273, i32 0, i32 0
  %288 = load ptr, ptr %287, align 8
  %289 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %288, 0
  %290 = getelementptr { ptr, ptr, ptr, i32 }, ptr %273, i32 0, i32 1
  %291 = load ptr, ptr %290, align 8
  %292 = insertvalue { ptr, ptr, ptr, i32 } %289, ptr %291, 1
  %293 = getelementptr { ptr, ptr, ptr, i32 }, ptr %273, i32 0, i32 2
  %294 = load ptr, ptr %293, align 8
  %295 = insertvalue { ptr, ptr, ptr, i32 } %292, ptr %294, 2
  %296 = getelementptr { ptr, ptr, ptr, i32 }, ptr %273, i32 0, i32 3
  %297 = load i32, ptr %296, align 4
  %298 = insertvalue { ptr, ptr, ptr, i32 } %295, i32 %297, 3
  ret { ptr, ptr, ptr, i32 } %298
}

define ptr @MapIterator2_field_iterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr }, ptr, ptr }, ptr %0, i32 0, i32 0
  ret ptr %2
}

define ptr @MapIterator2_field_f(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr }, ptr, ptr }, ptr %0, i32 0, i32 1
  ret ptr %2
}

define ptr @MapIterator2_field_MapIterator2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr }, ptr, ptr }, ptr %0, i32 0, i32 2
  ret ptr %2
}

define ptr @MapIterator2_field_MapIterator2_1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr }, ptr, ptr }, ptr %0, i32 0, i32 3
  ret ptr %2
}

define ptr @MapIterator2_B_init_iteratorIterator2T_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2, { ptr } %3) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = getelementptr [2 x ptr], ptr %1, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr ptr, ptr %7, i32 1
  %9 = getelementptr ptr, ptr %7, i32 2
  %10 = getelementptr ptr, ptr %7, i32 3
  %11 = getelementptr ptr, ptr %7, i32 4
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 4189192806087951739, i64 ptrtoint (ptr @Iterator2 to i64), ptr %15)
  %17 = getelementptr [2 x ptr], ptr %1, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr ptr, ptr %18, i32 1
  %20 = getelementptr ptr, ptr %18, i32 2
  %21 = getelementptr ptr, ptr %18, i32 3
  %22 = getelementptr ptr, ptr %18, i32 4
  %23 = load i64, ptr %19, align 4
  %24 = load i64, ptr %20, align 4
  %25 = load ptr, ptr %21, align 8
  %26 = load ptr, ptr %22, align 8
  %27 = call i1 @subtype_test_wrapper(ptr %25, i64 %24, i64 %23, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %26)
  %28 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %29 = getelementptr [11 x ptr], ptr %28, i32 0, i32 6
  %30 = getelementptr ptr, ptr %29, i32 7
  %31 = load ptr, ptr %30, align 8
  ret ptr %31
}

define ptr @MapIterator2_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [11 x ptr], ptr %4, i32 0, i32 7
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @MapIterator2_init_iteratorIterator2T_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @MapIterator2)
  %21 = call ptr @llvm.invariant.start.p0(i64 24, ptr %8)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %22, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 16, ptr %22)
  %24 = alloca { ptr, ptr, ptr, i32 }, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %36 = load i32, ptr %34, align 4
  store i32 %36, ptr %35, align 4
  call void @set_offset(ptr %24, ptr @Iterator2)
  %37 = call ptr @llvm.invariant.start.p0(i64 24, ptr %24)
  %38 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %39 = extractvalue { ptr, ptr, ptr, i32 } %38, 0
  %40 = call ptr @llvm.invariant.start.p0(i64 88, ptr %39)
  %41 = extractvalue { ptr, ptr, ptr, i32 } %38, 3
  %42 = getelementptr ptr, ptr %39, i32 %41
  %43 = load ptr, ptr %42, align 8
  %44 = extractvalue { ptr, ptr, ptr, i32 } %38, 1
  %45 = call ptr %43(ptr %44)
  %46 = alloca { ptr, ptr, ptr, i32 }, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %49 = load ptr, ptr %47, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %52 = load ptr, ptr %50, align 8
  store ptr %52, ptr %51, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %55 = load ptr, ptr %53, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %58 = load i32, ptr %56, align 4
  store i32 %58, ptr %57, align 4
  call void @set_offset(ptr %46, ptr @Iterator2)
  %59 = call ptr @llvm.invariant.start.p0(i64 24, ptr %46)
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %62 = load ptr, ptr %60, align 8
  store ptr %62, ptr %61, align 8
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %65 = load ptr, ptr %63, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %68 = load ptr, ptr %66, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %71 = load i32, ptr %69, align 4
  store i32 %71, ptr %70, align 4
  %72 = alloca ptr, align 8
  store { ptr } %4, ptr %72, align 8
  %73 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %74 = extractvalue { ptr, ptr, ptr, i32 } %73, 0
  %75 = call ptr @llvm.invariant.start.p0(i64 88, ptr %74)
  %76 = extractvalue { ptr, ptr, ptr, i32 } %73, 3
  %77 = getelementptr ptr, ptr %74, i32 %76
  %78 = getelementptr ptr, ptr %77, i32 1
  %79 = load ptr, ptr %78, align 8
  %80 = extractvalue { ptr, ptr, ptr, i32 } %73, 1
  %81 = call ptr %79(ptr %80)
  %82 = getelementptr { ptr }, ptr %81, i32 0, i32 0
  %83 = load ptr, ptr %72, align 8
  store ptr %83, ptr %82, align 8
  ret void
}

define { ptr, i160 } @MapIterator2_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @MapIterator2)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 88, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %27 = call ptr %25(ptr %26)
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %29, 0
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %32 = load ptr, ptr %31, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %32, 1
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %35 = load ptr, ptr %34, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %35, 2
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %38 = load i32, ptr %37, align 4
  %39 = insertvalue { ptr, ptr, ptr, i32 } %36, i32 %38, 3
  %40 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %41 = extractvalue { ptr, ptr, ptr, i32 } %40, 0
  %42 = call ptr @llvm.invariant.start.p0(i64 88, ptr %41)
  %43 = extractvalue { ptr, ptr, ptr, i32 } %40, 3
  %44 = getelementptr ptr, ptr %41, i32 %43
  %45 = getelementptr ptr, ptr %44, i32 2
  %46 = load ptr, ptr %45, align 8
  %47 = extractvalue { ptr, ptr, ptr, i32 } %40, 1
  %48 = call ptr %46(ptr %47)
  %49 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %50 = extractvalue { ptr, ptr, ptr, i32 } %49, 0
  %51 = call ptr @llvm.invariant.start.p0(i64 88, ptr %50)
  %52 = extractvalue { ptr, ptr, ptr, i32 } %49, 3
  %53 = getelementptr ptr, ptr %50, i32 %52
  %54 = getelementptr ptr, ptr %53, i32 3
  %55 = load ptr, ptr %54, align 8
  %56 = extractvalue { ptr, ptr, ptr, i32 } %49, 1
  %57 = call ptr %55(ptr %56)
  %58 = alloca [0 x ptr], align 8
  %59 = call ptr @llvm.invariant.start.p0(i64 0, ptr %58)
  %60 = call ptr @llvm.invariant.start.p0(i64 24, ptr %29)
  %61 = getelementptr ptr, ptr %29, i32 %38
  %62 = getelementptr ptr, ptr %61, i32 1
  %63 = load ptr, ptr %62, align 8
  %64 = alloca [0 x ptr], align 8
  %65 = call ptr %63({ ptr, ptr, ptr, i32 } %39, ptr %64)
  %66 = call { ptr, i160 } %65({ ptr, ptr, ptr, i32 } %39, { ptr, ptr, ptr, i32 } %39, ptr %58)
  %67 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %66, ptr %67, align 8
  %68 = getelementptr { ptr, i160 }, ptr %67, i32 0, i32 0
  %69 = load ptr, ptr %68, align 8
  %70 = ptrtoint ptr %69 to i64
  %71 = icmp ne i64 %70, ptrtoint (ptr @nil_typ to i64)
  %72 = alloca { ptr, i160 }, align 8
  %73 = alloca { ptr, i160 }, align 8
  %74 = alloca { ptr, i160 }, align 8
  %75 = alloca i160, align 8
  %76 = alloca ptr, align 8
  %77 = alloca i64, align 8
  br i1 %71, label %78, label %114

78:                                               ; preds = %3
  %79 = getelementptr { ptr, i160 }, ptr %67, i32 0, i32 0
  %80 = getelementptr { ptr, i160 }, ptr %72, i32 0, i32 0
  %81 = load ptr, ptr %79, align 8
  store ptr %81, ptr %80, align 8
  %82 = getelementptr { ptr, i160 }, ptr %67, i32 0, i32 1
  %83 = getelementptr { ptr, i160 }, ptr %72, i32 0, i32 1
  %84 = load i160, ptr %82, align 4
  store i160 %84, ptr %83, align 4
  call void @set_offset(ptr %72, ptr @Object)
  %85 = getelementptr { ptr, i160 }, ptr %72, i32 0, i32 0
  %86 = getelementptr { ptr, i160 }, ptr %73, i32 0, i32 0
  %87 = load ptr, ptr %85, align 8
  store ptr %87, ptr %86, align 8
  %88 = getelementptr { ptr, i160 }, ptr %72, i32 0, i32 1
  %89 = getelementptr { ptr, i160 }, ptr %73, i32 0, i32 1
  %90 = load i160, ptr %88, align 4
  store i160 %90, ptr %89, align 4
  call void @set_offset(ptr %73, ptr @Object)
  %91 = getelementptr { ptr, i160 }, ptr %73, i32 0, i32 0
  %92 = load ptr, ptr %91, align 8
  %93 = insertvalue { ptr, i160 } undef, ptr %92, 0
  %94 = getelementptr { ptr, i160 }, ptr %73, i32 0, i32 1
  %95 = load i160, ptr %94, align 4
  %96 = insertvalue { ptr, i160 } %93, i160 %95, 1
  %97 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %98 = extractvalue { ptr, ptr, ptr, i32 } %97, 0
  %99 = call ptr @llvm.invariant.start.p0(i64 88, ptr %98)
  %100 = extractvalue { ptr, ptr, ptr, i32 } %97, 3
  %101 = getelementptr ptr, ptr %98, i32 %100
  %102 = getelementptr ptr, ptr %101, i32 1
  %103 = load ptr, ptr %102, align 8
  %104 = extractvalue { ptr, ptr, ptr, i32 } %97, 1
  %105 = call ptr %103(ptr %104)
  %106 = load ptr, ptr %105, align 8
  %107 = call { ptr, i160 } %106({ ptr, i160 } %96)
  store { ptr, i160 } %107, ptr %74, align 8
  %108 = getelementptr { ptr, i160 }, ptr %74, i32 0, i32 0
  %109 = load ptr, ptr %108, align 8
  %110 = insertvalue { ptr, i160 } undef, ptr %109, 0
  %111 = getelementptr { ptr, i160 }, ptr %74, i32 0, i32 1
  %112 = load i160, ptr %111, align 4
  %113 = insertvalue { ptr, i160 } %110, i160 %112, 1
  store { ptr, i160 } %113, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem5, align 8
  br label %120

114:                                              ; preds = %3
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %77, align 4
  %115 = load i64, ptr %77, align 4
  store i64 %115, ptr %76, align 4
  %116 = load ptr, ptr %76, align 8
  %117 = insertvalue { ptr, i160 } undef, ptr %116, 0
  %118 = load i160, ptr %75, align 4
  %119 = insertvalue { ptr, i160 } %117, i160 %118, 1
  store { ptr, i160 } %119, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem5, align 8
  br label %120

120:                                              ; preds = %114, %78
  %.reload6 = load { ptr, i160 }, ptr %.reg2mem5, align 8
  store { ptr, i160 } %.reload6, ptr %.reg2mem, align 8
  br label %121

121:                                              ; preds = %120
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  ret { ptr, i160 } %.reload
}

define ptr @ArrayIterator_field_array(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, i32, ptr }, ptr %0, i32 0, i32 0
  ret ptr %2
}

define ptr @ArrayIterator_field_index(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, i32, ptr }, ptr %0, i32 0, i32 1
  ret ptr %2
}

define ptr @ArrayIterator_field_ArrayIterator_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, i32, ptr }, ptr %0, i32 0, i32 2
  ret ptr %2
}

define ptr @ArrayIterator_B_init_arrayArrayT({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -5261542750394134544, i64 ptrtoint (ptr @Array to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [10 x ptr], ptr %16, i32 0, i32 5
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @ArrayIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [10 x ptr], ptr %4, i32 0, i32 6
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @ArrayIterator_init_arrayArrayT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @ArrayIterator)
  %20 = call ptr @llvm.invariant.start.p0(i64 24, ptr %7)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @Array)
  %36 = call ptr @llvm.invariant.start.p0(i64 24, ptr %23)
  %37 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %38 = extractvalue { ptr, ptr, ptr, i32 } %37, 0
  %39 = call ptr @llvm.invariant.start.p0(i64 80, ptr %38)
  %40 = extractvalue { ptr, ptr, ptr, i32 } %37, 3
  %41 = getelementptr ptr, ptr %38, i32 %40
  %42 = load ptr, ptr %41, align 8
  %43 = extractvalue { ptr, ptr, ptr, i32 } %37, 1
  %44 = call ptr %42(ptr %43)
  %45 = alloca { ptr, ptr, ptr, i32 }, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %48 = load ptr, ptr %46, align 8
  store ptr %48, ptr %47, align 8
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %51 = load ptr, ptr %49, align 8
  store ptr %51, ptr %50, align 8
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %54 = load ptr, ptr %52, align 8
  store ptr %54, ptr %53, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %57 = load i32, ptr %55, align 4
  store i32 %57, ptr %56, align 4
  call void @set_offset(ptr %45, ptr @Array)
  %58 = call ptr @llvm.invariant.start.p0(i64 24, ptr %45)
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 0
  %61 = load ptr, ptr %59, align 8
  store ptr %61, ptr %60, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 1
  %64 = load ptr, ptr %62, align 8
  store ptr %64, ptr %63, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 2
  %67 = load ptr, ptr %65, align 8
  store ptr %67, ptr %66, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 3
  %70 = load i32, ptr %68, align 4
  store i32 %70, ptr %69, align 4
  %71 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %72 = extractvalue { ptr, ptr, ptr, i32 } %71, 0
  %73 = call ptr @llvm.invariant.start.p0(i64 80, ptr %72)
  %74 = extractvalue { ptr, ptr, ptr, i32 } %71, 3
  %75 = getelementptr ptr, ptr %72, i32 %74
  %76 = getelementptr ptr, ptr %75, i32 1
  %77 = load ptr, ptr %76, align 8
  %78 = extractvalue { ptr, ptr, ptr, i32 } %71, 1
  %79 = call ptr %77(ptr %78)
  store i32 0, ptr %79, align 4
  ret void
}

define { ptr, i160 } @ArrayIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @ArrayIterator)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 80, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 1
  %26 = load ptr, ptr %25, align 8
  %27 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %28 = call ptr %26(ptr %27)
  %29 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %30 = extractvalue { ptr, ptr, ptr, i32 } %29, 0
  %31 = call ptr @llvm.invariant.start.p0(i64 80, ptr %30)
  %32 = extractvalue { ptr, ptr, ptr, i32 } %29, 3
  %33 = getelementptr ptr, ptr %30, i32 %32
  %34 = load ptr, ptr %33, align 8
  %35 = extractvalue { ptr, ptr, ptr, i32 } %29, 1
  %36 = call ptr %34(ptr %35)
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %38 = load ptr, ptr %37, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %38, 0
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %41 = load ptr, ptr %40, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } %39, ptr %41, 1
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %44 = load ptr, ptr %43, align 8
  %45 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %44, 2
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %47 = load i32, ptr %46, align 4
  %48 = insertvalue { ptr, ptr, ptr, i32 } %45, i32 %47, 3
  %49 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %50 = extractvalue { ptr, ptr, ptr, i32 } %49, 0
  %51 = call ptr @llvm.invariant.start.p0(i64 80, ptr %50)
  %52 = extractvalue { ptr, ptr, ptr, i32 } %49, 3
  %53 = getelementptr ptr, ptr %50, i32 %52
  %54 = getelementptr ptr, ptr %53, i32 2
  %55 = load ptr, ptr %54, align 8
  %56 = extractvalue { ptr, ptr, ptr, i32 } %49, 1
  %57 = call ptr %55(ptr %56)
  %58 = alloca [0 x ptr], align 8
  %59 = call ptr @llvm.invariant.start.p0(i64 0, ptr %58)
  %60 = call ptr @llvm.invariant.start.p0(i64 552, ptr %38)
  %61 = getelementptr ptr, ptr %38, i32 %47
  %62 = getelementptr ptr, ptr %61, i32 7
  %63 = load ptr, ptr %62, align 8
  %64 = alloca [0 x ptr], align 8
  %65 = call ptr %63({ ptr, ptr, ptr, i32 } %48, ptr %64)
  %66 = call i32 %65({ ptr, ptr, ptr, i32 } %48, { ptr, ptr, ptr, i32 } %48, ptr %58)
  %67 = load i32, ptr %28, align 4
  %68 = icmp sge i32 %67, %66
  %69 = alloca i160, align 8
  %70 = alloca ptr, align 8
  %71 = alloca i64, align 8
  %72 = alloca i32, align 4
  %73 = alloca i32, align 4
  %74 = alloca i32, align 4
  %75 = alloca i32, align 4
  %76 = alloca [1 x ptr], align 8
  %77 = alloca [1 x ptr], align 8
  %78 = alloca { ptr, i160 }, align 8
  %79 = alloca { ptr, i160 }, align 8
  br i1 %68, label %80, label %86

80:                                               ; preds = %3
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %71, align 4
  %81 = load i64, ptr %71, align 4
  store i64 %81, ptr %70, align 4
  %82 = load ptr, ptr %70, align 8
  %83 = insertvalue { ptr, i160 } undef, ptr %82, 0
  %84 = load i160, ptr %69, align 4
  %85 = insertvalue { ptr, i160 } %83, i160 %84, 1
  store { ptr, i160 } %85, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem5, align 8
  br label %172

86:                                               ; preds = %3
  %87 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %88 = extractvalue { ptr, ptr, ptr, i32 } %87, 0
  %89 = call ptr @llvm.invariant.start.p0(i64 80, ptr %88)
  %90 = extractvalue { ptr, ptr, ptr, i32 } %87, 3
  %91 = getelementptr ptr, ptr %88, i32 %90
  %92 = getelementptr ptr, ptr %91, i32 1
  %93 = load ptr, ptr %92, align 8
  %94 = extractvalue { ptr, ptr, ptr, i32 } %87, 1
  %95 = call ptr %93(ptr %94)
  store i32 1, ptr %72, align 4
  %96 = load i32, ptr %95, align 4
  %97 = load i32, ptr %72, align 4
  %98 = add i32 %96, %97
  store i32 %98, ptr %73, align 4
  %99 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %100 = extractvalue { ptr, ptr, ptr, i32 } %99, 0
  %101 = call ptr @llvm.invariant.start.p0(i64 80, ptr %100)
  %102 = extractvalue { ptr, ptr, ptr, i32 } %99, 3
  %103 = getelementptr ptr, ptr %100, i32 %102
  %104 = getelementptr ptr, ptr %103, i32 1
  %105 = load ptr, ptr %104, align 8
  %106 = extractvalue { ptr, ptr, ptr, i32 } %99, 1
  %107 = call ptr %105(ptr %106)
  %108 = load i32, ptr %73, align 4
  store i32 %108, ptr %107, align 4
  %109 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %110 = extractvalue { ptr, ptr, ptr, i32 } %109, 0
  %111 = call ptr @llvm.invariant.start.p0(i64 80, ptr %110)
  %112 = extractvalue { ptr, ptr, ptr, i32 } %109, 3
  %113 = getelementptr ptr, ptr %110, i32 %112
  %114 = getelementptr ptr, ptr %113, i32 1
  %115 = load ptr, ptr %114, align 8
  %116 = extractvalue { ptr, ptr, ptr, i32 } %109, 1
  %117 = call ptr %115(ptr %116)
  store i32 1, ptr %74, align 4
  %118 = load i32, ptr %117, align 4
  %119 = load i32, ptr %74, align 4
  %120 = sub i32 %118, %119
  store i32 %120, ptr %75, align 4
  %121 = load i32, ptr %75, align 4
  %122 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %123 = extractvalue { ptr, ptr, ptr, i32 } %122, 0
  %124 = call ptr @llvm.invariant.start.p0(i64 80, ptr %123)
  %125 = extractvalue { ptr, ptr, ptr, i32 } %122, 3
  %126 = getelementptr ptr, ptr %123, i32 %125
  %127 = load ptr, ptr %126, align 8
  %128 = extractvalue { ptr, ptr, ptr, i32 } %122, 1
  %129 = call ptr %127(ptr %128)
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %129, i32 0, i32 0
  %131 = load ptr, ptr %130, align 8
  %132 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %131, 0
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %129, i32 0, i32 1
  %134 = load ptr, ptr %133, align 8
  %135 = insertvalue { ptr, ptr, ptr, i32 } %132, ptr %134, 1
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %129, i32 0, i32 2
  %137 = load ptr, ptr %136, align 8
  %138 = insertvalue { ptr, ptr, ptr, i32 } %135, ptr %137, 2
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %129, i32 0, i32 3
  %140 = load i32, ptr %139, align 4
  %141 = insertvalue { ptr, ptr, ptr, i32 } %138, i32 %140, 3
  %142 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %143 = extractvalue { ptr, ptr, ptr, i32 } %142, 0
  %144 = call ptr @llvm.invariant.start.p0(i64 80, ptr %143)
  %145 = extractvalue { ptr, ptr, ptr, i32 } %142, 3
  %146 = getelementptr ptr, ptr %143, i32 %145
  %147 = getelementptr ptr, ptr %146, i32 2
  %148 = load ptr, ptr %147, align 8
  %149 = extractvalue { ptr, ptr, ptr, i32 } %142, 1
  %150 = call ptr %148(ptr %149)
  %151 = call ptr @llvm.invariant.start.p0(i64 8, ptr %76)
  %152 = getelementptr [1 x ptr], ptr %76, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %152, align 8
  %153 = call ptr @llvm.invariant.start.p0(i64 552, ptr %131)
  %154 = getelementptr ptr, ptr %131, i32 %140
  %155 = getelementptr ptr, ptr %154, i32 13
  %156 = load ptr, ptr %155, align 8
  %157 = getelementptr [1 x ptr], ptr %77, i32 0, i32 0
  store ptr @i32_typ, ptr %157, align 8
  %158 = call ptr %156({ ptr, ptr, ptr, i32 } %141, ptr %77, i32 %121)
  %159 = call { ptr, i160 } %158({ ptr, ptr, ptr, i32 } %141, { ptr, ptr, ptr, i32 } %141, ptr %76, i32 %121)
  store { ptr, i160 } %159, ptr %78, align 8
  %160 = getelementptr { ptr, i160 }, ptr %78, i32 0, i32 0
  %161 = getelementptr { ptr, i160 }, ptr %79, i32 0, i32 0
  %162 = load ptr, ptr %160, align 8
  store ptr %162, ptr %161, align 8
  %163 = getelementptr { ptr, i160 }, ptr %78, i32 0, i32 1
  %164 = getelementptr { ptr, i160 }, ptr %79, i32 0, i32 1
  %165 = load i160, ptr %163, align 4
  store i160 %165, ptr %164, align 4
  call void @set_offset(ptr %79, ptr @Object)
  %166 = getelementptr { ptr, i160 }, ptr %79, i32 0, i32 0
  %167 = load ptr, ptr %166, align 8
  %168 = insertvalue { ptr, i160 } undef, ptr %167, 0
  %169 = getelementptr { ptr, i160 }, ptr %79, i32 0, i32 1
  %170 = load i160, ptr %169, align 4
  %171 = insertvalue { ptr, i160 } %168, i160 %170, 1
  store { ptr, i160 } %171, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem5, align 8
  br label %172

172:                                              ; preds = %86, %80
  %.reload6 = load { ptr, i160 }, ptr %.reg2mem5, align 8
  store { ptr, i160 } %.reload6, ptr %.reg2mem, align 8
  br label %173

173:                                              ; preds = %172
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  ret { ptr, i160 } %.reload
}

define ptr @Math_B__Self_sqrt_xPtrf64(ptr %0, double %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %4 = getelementptr [1 x ptr], ptr %0, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -757315540097298781, i64 ptrtoint (ptr @f64_typ to i64), ptr %13)
  %15 = load ptr, ptr getelementptr (ptr, ptr getelementptr ([17 x ptr], ptr @Math, i32 0, i32 7), i32 7), align 8
  ret ptr %15
}

define ptr @Math_B__Self_abs_xPtri32__Self_abs_xPtrf64(ptr %0, { ptr, i64 } %1) {
  %.reg2mem = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %4 = getelementptr [1 x ptr], ptr %0, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -757315540097298781, i64 ptrtoint (ptr @f64_typ to i64), ptr %13)
  %15 = select i1 %14, i32 9, i32 8
  store i32 %15, ptr %.reg2mem, align 4
  br i1 %14, label %16, label %17

16:                                               ; preds = %2
  br label %29

17:                                               ; preds = %2
  %18 = getelementptr [1 x ptr], ptr %0, i32 0, i32 0
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr ptr, ptr %19, i32 1
  %21 = getelementptr ptr, ptr %19, i32 2
  %22 = getelementptr ptr, ptr %19, i32 3
  %23 = getelementptr ptr, ptr %19, i32 4
  %24 = load i64, ptr %20, align 4
  %25 = load i64, ptr %21, align 4
  %26 = load ptr, ptr %22, align 8
  %27 = load ptr, ptr %23, align 8
  %28 = call i1 @subtype_test_wrapper(ptr %26, i64 %25, i64 %24, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %27)
  br label %29

29:                                               ; preds = %17, %16
  %.reload = load i32, ptr %.reg2mem, align 4
  %30 = zext i32 %.reload to i64
  %31 = or i64 0, %30
  %32 = inttoptr i64 %31 to ptr
  %33 = ptrtoint ptr %32 to i64
  %34 = trunc i64 %33 to i32
  %35 = getelementptr [17 x ptr], ptr @Math, i32 0, i32 %34
  %36 = getelementptr ptr, ptr %35, i32 7
  %37 = load ptr, ptr %36, align 8
  ret ptr %37
}

define ptr @Math_B__Self_max_aPtri32_bPtri32__Self_max_aPtrf64_bPtrf64(ptr %0, { ptr, i64 } %1, { ptr, i64 } %2) {
  %.reg2mem = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 16, ptr %0)
  %5 = getelementptr [2 x ptr], ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -757315540097298781, i64 ptrtoint (ptr @f64_typ to i64), ptr %14)
  %16 = select i1 %15, i32 11, i32 10
  store i32 %16, ptr %.reg2mem, align 4
  br i1 %15, label %17, label %29

17:                                               ; preds = %3
  %18 = getelementptr [2 x ptr], ptr %0, i32 0, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr ptr, ptr %19, i32 1
  %21 = getelementptr ptr, ptr %19, i32 2
  %22 = getelementptr ptr, ptr %19, i32 3
  %23 = getelementptr ptr, ptr %19, i32 4
  %24 = load i64, ptr %20, align 4
  %25 = load i64, ptr %21, align 4
  %26 = load ptr, ptr %22, align 8
  %27 = load ptr, ptr %23, align 8
  %28 = call i1 @subtype_test_wrapper(ptr %26, i64 %25, i64 %24, i64 -757315540097298781, i64 ptrtoint (ptr @f64_typ to i64), ptr %27)
  br label %52

29:                                               ; preds = %3
  %30 = getelementptr [2 x ptr], ptr %0, i32 0, i32 0
  %31 = load ptr, ptr %30, align 8
  %32 = getelementptr ptr, ptr %31, i32 1
  %33 = getelementptr ptr, ptr %31, i32 2
  %34 = getelementptr ptr, ptr %31, i32 3
  %35 = getelementptr ptr, ptr %31, i32 4
  %36 = load i64, ptr %32, align 4
  %37 = load i64, ptr %33, align 4
  %38 = load ptr, ptr %34, align 8
  %39 = load ptr, ptr %35, align 8
  %40 = call i1 @subtype_test_wrapper(ptr %38, i64 %37, i64 %36, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %39)
  %41 = getelementptr [2 x ptr], ptr %0, i32 0, i32 1
  %42 = load ptr, ptr %41, align 8
  %43 = getelementptr ptr, ptr %42, i32 1
  %44 = getelementptr ptr, ptr %42, i32 2
  %45 = getelementptr ptr, ptr %42, i32 3
  %46 = getelementptr ptr, ptr %42, i32 4
  %47 = load i64, ptr %43, align 4
  %48 = load i64, ptr %44, align 4
  %49 = load ptr, ptr %45, align 8
  %50 = load ptr, ptr %46, align 8
  %51 = call i1 @subtype_test_wrapper(ptr %49, i64 %48, i64 %47, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %50)
  br label %52

52:                                               ; preds = %29, %17
  %.reload = load i32, ptr %.reg2mem, align 4
  %53 = zext i32 %.reload to i64
  %54 = or i64 0, %53
  %55 = inttoptr i64 %54 to ptr
  %56 = ptrtoint ptr %55 to i64
  %57 = trunc i64 %56 to i32
  %58 = getelementptr [17 x ptr], ptr @Math, i32 0, i32 %57
  %59 = getelementptr ptr, ptr %58, i32 7
  %60 = load ptr, ptr %59, align 8
  ret ptr %60
}

define ptr @Math_B__Self_min_aPtri32_bPtri32__Self_min_aPtrf64_bPtrf64(ptr %0, { ptr, i64 } %1, { ptr, i64 } %2) {
  %.reg2mem = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 16, ptr %0)
  %5 = getelementptr [2 x ptr], ptr %0, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %14)
  %16 = select i1 %15, i32 12, i32 13
  store i32 %16, ptr %.reg2mem, align 4
  br i1 %15, label %17, label %29

17:                                               ; preds = %3
  %18 = getelementptr [2 x ptr], ptr %0, i32 0, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr ptr, ptr %19, i32 1
  %21 = getelementptr ptr, ptr %19, i32 2
  %22 = getelementptr ptr, ptr %19, i32 3
  %23 = getelementptr ptr, ptr %19, i32 4
  %24 = load i64, ptr %20, align 4
  %25 = load i64, ptr %21, align 4
  %26 = load ptr, ptr %22, align 8
  %27 = load ptr, ptr %23, align 8
  %28 = call i1 @subtype_test_wrapper(ptr %26, i64 %25, i64 %24, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %27)
  br label %52

29:                                               ; preds = %3
  %30 = getelementptr [2 x ptr], ptr %0, i32 0, i32 0
  %31 = load ptr, ptr %30, align 8
  %32 = getelementptr ptr, ptr %31, i32 1
  %33 = getelementptr ptr, ptr %31, i32 2
  %34 = getelementptr ptr, ptr %31, i32 3
  %35 = getelementptr ptr, ptr %31, i32 4
  %36 = load i64, ptr %32, align 4
  %37 = load i64, ptr %33, align 4
  %38 = load ptr, ptr %34, align 8
  %39 = load ptr, ptr %35, align 8
  %40 = call i1 @subtype_test_wrapper(ptr %38, i64 %37, i64 %36, i64 -757315540097298781, i64 ptrtoint (ptr @f64_typ to i64), ptr %39)
  %41 = getelementptr [2 x ptr], ptr %0, i32 0, i32 1
  %42 = load ptr, ptr %41, align 8
  %43 = getelementptr ptr, ptr %42, i32 1
  %44 = getelementptr ptr, ptr %42, i32 2
  %45 = getelementptr ptr, ptr %42, i32 3
  %46 = getelementptr ptr, ptr %42, i32 4
  %47 = load i64, ptr %43, align 4
  %48 = load i64, ptr %44, align 4
  %49 = load ptr, ptr %45, align 8
  %50 = load ptr, ptr %46, align 8
  %51 = call i1 @subtype_test_wrapper(ptr %49, i64 %48, i64 %47, i64 -757315540097298781, i64 ptrtoint (ptr @f64_typ to i64), ptr %50)
  br label %52

52:                                               ; preds = %29, %17
  %.reload = load i32, ptr %.reg2mem, align 4
  %53 = zext i32 %.reload to i64
  %54 = or i64 0, %53
  %55 = inttoptr i64 %54 to ptr
  %56 = ptrtoint ptr %55 to i64
  %57 = trunc i64 %56 to i32
  %58 = getelementptr [17 x ptr], ptr @Math, i32 0, i32 %57
  %59 = getelementptr ptr, ptr %58, i32 7
  %60 = load ptr, ptr %59, align 8
  ret ptr %60
}

define ptr @Math_B__Self_round_xPtrf64(ptr %0, double %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %4 = getelementptr [1 x ptr], ptr %0, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -757315540097298781, i64 ptrtoint (ptr @f64_typ to i64), ptr %13)
  %15 = load ptr, ptr getelementptr (ptr, ptr getelementptr ([17 x ptr], ptr @Math, i32 0, i32 14), i32 7), align 8
  ret ptr %15
}

define ptr @Math_B__Self_floor_xPtrf64(ptr %0, double %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %4 = getelementptr [1 x ptr], ptr %0, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -757315540097298781, i64 ptrtoint (ptr @f64_typ to i64), ptr %13)
  %15 = load ptr, ptr getelementptr (ptr, ptr getelementptr ([17 x ptr], ptr @Math, i32 0, i32 15), i32 7), align 8
  ret ptr %15
}

define ptr @Math_B__Self_ceiling_xPtrf64(ptr %0, double %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %4 = getelementptr [1 x ptr], ptr %0, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -757315540097298781, i64 ptrtoint (ptr @f64_typ to i64), ptr %13)
  %15 = load ptr, ptr getelementptr (ptr, ptr getelementptr ([17 x ptr], ptr @Math, i32 0, i32 16), i32 7), align 8
  ret ptr %15
}

define double @Math__Self_sqrt_xPtrf64(ptr %0, double %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call double @llvm.sqrt.f64(double %1)
  ret double %3
}

define { ptr, i64 } @Math__Self_abs_xPtri32(ptr %0, { ptr, i64 } %1) {
  %3 = alloca { ptr, i64 }, align 8
  %.reg2mem = alloca { ptr, i64 }, align 8
  %.reg2mem1 = alloca { ptr, i64 }, align 8
  %.reg2mem3 = alloca { ptr, i64 }, align 8
  %.reg2mem5 = alloca i32, align 4
  %.reg2mem9 = alloca { ptr, i64 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i64 } %1, ptr %3, align 8
  %4 = getelementptr { ptr, i64 }, ptr %3, i32 0, i32 1
  %5 = load i32, ptr %4, align 4
  store i32 %5, ptr %.reg2mem5, align 4
  %.reload8 = load i32, ptr %.reg2mem5, align 4
  %6 = icmp sge i32 %.reload8, 0
  %7 = alloca i64, align 8
  %8 = alloca ptr, align 8
  %9 = alloca i64, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i64, align 8
  %13 = alloca ptr, align 8
  %14 = alloca i64, align 8
  br i1 %6, label %15, label %21

15:                                               ; preds = %2
  %.reload7 = load i32, ptr %.reg2mem5, align 4
  store i32 %.reload7, ptr %7, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %9, align 4
  %16 = load i64, ptr %9, align 4
  store i64 %16, ptr %8, align 4
  %17 = load ptr, ptr %8, align 8
  %18 = insertvalue { ptr, i64 } undef, ptr %17, 0
  %19 = load i64, ptr %7, align 4
  %20 = insertvalue { ptr, i64 } %18, i64 %19, 1
  store { ptr, i64 } %20, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i64 }, ptr %.reg2mem3, align 8
  store { ptr, i64 } %.reload4, ptr %.reg2mem9, align 8
  br label %30

21:                                               ; preds = %2
  store i32 -1, ptr %10, align 4
  %22 = load i32, ptr %10, align 4
  %.reload6 = load i32, ptr %.reg2mem5, align 4
  %23 = mul i32 %22, %.reload6
  store i32 %23, ptr %11, align 4
  %24 = load i32, ptr %11, align 4
  store i32 %24, ptr %12, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %14, align 4
  %25 = load i64, ptr %14, align 4
  store i64 %25, ptr %13, align 4
  %26 = load ptr, ptr %13, align 8
  %27 = insertvalue { ptr, i64 } undef, ptr %26, 0
  %28 = load i64, ptr %12, align 4
  %29 = insertvalue { ptr, i64 } %27, i64 %28, 1
  store { ptr, i64 } %29, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i64 }, ptr %.reg2mem1, align 8
  store { ptr, i64 } %.reload2, ptr %.reg2mem9, align 8
  br label %30

30:                                               ; preds = %21, %15
  %.reload10 = load { ptr, i64 }, ptr %.reg2mem9, align 8
  store { ptr, i64 } %.reload10, ptr %.reg2mem, align 8
  br label %31

31:                                               ; preds = %30
  %.reload = load { ptr, i64 }, ptr %.reg2mem, align 8
  ret { ptr, i64 } %.reload
}

define { ptr, i64 } @Math__Self_abs_xPtrf64(ptr %0, { ptr, i64 } %1) {
  %3 = alloca { ptr, i64 }, align 8
  %.reg2mem = alloca { ptr, i64 }, align 8
  %.reg2mem1 = alloca { ptr, i64 }, align 8
  %.reg2mem3 = alloca { ptr, i64 }, align 8
  %.reg2mem5 = alloca double, align 8
  %.reg2mem9 = alloca { ptr, i64 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i64 } %1, ptr %3, align 8
  %4 = getelementptr { ptr, i64 }, ptr %3, i32 0, i32 1
  %5 = load double, ptr %4, align 8
  store double %5, ptr %.reg2mem5, align 8
  %.reload8 = load double, ptr %.reg2mem5, align 8
  %6 = fcmp oge double %.reload8, 0.000000e+00
  %7 = alloca i64, align 8
  %8 = alloca ptr, align 8
  %9 = alloca i64, align 8
  %10 = alloca double, align 8
  %11 = alloca double, align 8
  %12 = alloca double, align 8
  %13 = alloca double, align 8
  %14 = alloca i64, align 8
  %15 = alloca ptr, align 8
  %16 = alloca i64, align 8
  br i1 %6, label %17, label %23

17:                                               ; preds = %2
  %.reload7 = load double, ptr %.reg2mem5, align 8
  store double %.reload7, ptr %7, align 8
  store i64 ptrtoint (ptr @f64_typ to i64), ptr %9, align 4
  %18 = load i64, ptr %9, align 4
  store i64 %18, ptr %8, align 4
  %19 = load ptr, ptr %8, align 8
  %20 = insertvalue { ptr, i64 } undef, ptr %19, 0
  %21 = load i64, ptr %7, align 4
  %22 = insertvalue { ptr, i64 } %20, i64 %21, 1
  store { ptr, i64 } %22, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i64 }, ptr %.reg2mem3, align 8
  store { ptr, i64 } %.reload4, ptr %.reg2mem9, align 8
  br label %35

23:                                               ; preds = %2
  store double 0.000000e+00, ptr %10, align 8
  store double 1.000000e+00, ptr %11, align 8
  %24 = load double, ptr %10, align 8
  %25 = load double, ptr %11, align 8
  %26 = fsub double %24, %25
  store double %26, ptr %12, align 8
  %27 = load double, ptr %12, align 8
  %.reload6 = load double, ptr %.reg2mem5, align 8
  %28 = fmul double %27, %.reload6
  store double %28, ptr %13, align 8
  %29 = load double, ptr %13, align 8
  store double %29, ptr %14, align 8
  store i64 ptrtoint (ptr @f64_typ to i64), ptr %16, align 4
  %30 = load i64, ptr %16, align 4
  store i64 %30, ptr %15, align 4
  %31 = load ptr, ptr %15, align 8
  %32 = insertvalue { ptr, i64 } undef, ptr %31, 0
  %33 = load i64, ptr %14, align 4
  %34 = insertvalue { ptr, i64 } %32, i64 %33, 1
  store { ptr, i64 } %34, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i64 }, ptr %.reg2mem1, align 8
  store { ptr, i64 } %.reload2, ptr %.reg2mem9, align 8
  br label %35

35:                                               ; preds = %23, %17
  %.reload10 = load { ptr, i64 }, ptr %.reg2mem9, align 8
  store { ptr, i64 } %.reload10, ptr %.reg2mem, align 8
  br label %36

36:                                               ; preds = %35
  %.reload = load { ptr, i64 }, ptr %.reg2mem, align 8
  ret { ptr, i64 } %.reload
}

define { ptr, i64 } @Math__Self_max_aPtri32_bPtri32(ptr %0, { ptr, i64 } %1, { ptr, i64 } %2) {
  %4 = alloca { ptr, i64 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i64 } %1, ptr %4, align 8
  %5 = alloca i32, align 4
  %6 = getelementptr { ptr, i64 }, ptr %4, i32 0, i32 1
  %7 = load i32, ptr %6, align 4
  store i32 %7, ptr %5, align 4
  %8 = alloca { ptr, i64 }, align 8
  store { ptr, i64 } %2, ptr %8, align 8
  %9 = alloca i32, align 4
  %10 = getelementptr { ptr, i64 }, ptr %8, i32 0, i32 1
  %11 = load i32, ptr %10, align 4
  store i32 %11, ptr %9, align 4
  %12 = load i32, ptr %5, align 4
  %13 = load i32, ptr %9, align 4
  %14 = icmp sgt i32 %12, %13
  %15 = select i1 %14, ptr %5, ptr %9
  %16 = alloca i64, align 8
  %17 = alloca ptr, align 8
  %18 = load i32, ptr %15, align 4
  store i32 %18, ptr %16, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %17, align 4
  %19 = load ptr, ptr %17, align 8
  %20 = insertvalue { ptr, i64 } undef, ptr %19, 0
  %21 = load i64, ptr %16, align 4
  %22 = insertvalue { ptr, i64 } %20, i64 %21, 1
  ret { ptr, i64 } %22
}

define { ptr, i64 } @Math__Self_max_aPtrf64_bPtrf64(ptr %0, { ptr, i64 } %1, { ptr, i64 } %2) {
  %4 = alloca { ptr, i64 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i64 } %1, ptr %4, align 8
  %5 = alloca double, align 8
  %6 = getelementptr { ptr, i64 }, ptr %4, i32 0, i32 1
  %7 = load double, ptr %6, align 8
  store double %7, ptr %5, align 8
  %8 = alloca { ptr, i64 }, align 8
  store { ptr, i64 } %2, ptr %8, align 8
  %9 = alloca double, align 8
  %10 = getelementptr { ptr, i64 }, ptr %8, i32 0, i32 1
  %11 = load double, ptr %10, align 8
  store double %11, ptr %9, align 8
  %12 = load double, ptr %5, align 8
  %13 = load double, ptr %9, align 8
  %14 = fcmp ogt double %12, %13
  %15 = select i1 %14, ptr %5, ptr %9
  %16 = alloca i64, align 8
  %17 = alloca ptr, align 8
  %18 = load double, ptr %15, align 8
  store double %18, ptr %16, align 8
  store i64 ptrtoint (ptr @f64_typ to i64), ptr %17, align 4
  %19 = load ptr, ptr %17, align 8
  %20 = insertvalue { ptr, i64 } undef, ptr %19, 0
  %21 = load i64, ptr %16, align 4
  %22 = insertvalue { ptr, i64 } %20, i64 %21, 1
  ret { ptr, i64 } %22
}

define { ptr, i64 } @Math__Self_min_aPtri32_bPtri32(ptr %0, { ptr, i64 } %1, { ptr, i64 } %2) {
  %4 = alloca { ptr, i64 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i64 } %1, ptr %4, align 8
  %5 = alloca i32, align 4
  %6 = getelementptr { ptr, i64 }, ptr %4, i32 0, i32 1
  %7 = load i32, ptr %6, align 4
  store i32 %7, ptr %5, align 4
  %8 = alloca { ptr, i64 }, align 8
  store { ptr, i64 } %2, ptr %8, align 8
  %9 = alloca i32, align 4
  %10 = getelementptr { ptr, i64 }, ptr %8, i32 0, i32 1
  %11 = load i32, ptr %10, align 4
  store i32 %11, ptr %9, align 4
  %12 = load i32, ptr %5, align 4
  %13 = load i32, ptr %9, align 4
  %14 = icmp slt i32 %12, %13
  %15 = select i1 %14, ptr %5, ptr %9
  %16 = alloca i64, align 8
  %17 = alloca ptr, align 8
  %18 = load i32, ptr %15, align 4
  store i32 %18, ptr %16, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %17, align 4
  %19 = load ptr, ptr %17, align 8
  %20 = insertvalue { ptr, i64 } undef, ptr %19, 0
  %21 = load i64, ptr %16, align 4
  %22 = insertvalue { ptr, i64 } %20, i64 %21, 1
  ret { ptr, i64 } %22
}

define { ptr, i64 } @Math__Self_min_aPtrf64_bPtrf64(ptr %0, { ptr, i64 } %1, { ptr, i64 } %2) {
  %4 = alloca { ptr, i64 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i64 } %1, ptr %4, align 8
  %5 = alloca double, align 8
  %6 = getelementptr { ptr, i64 }, ptr %4, i32 0, i32 1
  %7 = load double, ptr %6, align 8
  store double %7, ptr %5, align 8
  %8 = alloca { ptr, i64 }, align 8
  store { ptr, i64 } %2, ptr %8, align 8
  %9 = alloca double, align 8
  %10 = getelementptr { ptr, i64 }, ptr %8, i32 0, i32 1
  %11 = load double, ptr %10, align 8
  store double %11, ptr %9, align 8
  %12 = load double, ptr %5, align 8
  %13 = load double, ptr %9, align 8
  %14 = fcmp olt double %12, %13
  %15 = select i1 %14, ptr %5, ptr %9
  %16 = alloca i64, align 8
  %17 = alloca ptr, align 8
  %18 = load double, ptr %15, align 8
  store double %18, ptr %16, align 8
  store i64 ptrtoint (ptr @f64_typ to i64), ptr %17, align 4
  %19 = load ptr, ptr %17, align 8
  %20 = insertvalue { ptr, i64 } undef, ptr %19, 0
  %21 = load i64, ptr %16, align 4
  %22 = insertvalue { ptr, i64 } %20, i64 %21, 1
  ret { ptr, i64 } %22
}

define double @Math__Self_round_xPtrf64(ptr %0, double %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call double @llvm.round.f64(double %1)
  ret double %3
}

define double @Math__Self_floor_xPtrf64(ptr %0, double %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call double @llvm.floor.f64(double %1)
  ret double %3
}

define double @Math__Self_ceiling_xPtrf64(ptr %0, double %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call double @llvm.ceil.f64(double %1)
  ret double %3
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.ceil.f64(double) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.floor.f64(double) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.round.f64(double) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.sqrt.f64(double) #1

define ptr @Integer_field_value(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { i32 }, ptr %0, i32 0, i32 0
  ret ptr %2
}

define ptr @Integer_B_init_valuePtri32({ ptr, ptr, ptr, i32 } %0, ptr %1, i32 %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [13 x ptr], ptr %16, i32 0, i32 7
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @Integer_B__ADD_otherPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1, i32 %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [13 x ptr], ptr %16, i32 0, i32 8
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @Integer_B__SUB_otherPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1, i32 %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [13 x ptr], ptr %16, i32 0, i32 9
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @Integer_B__MUL_otherPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1, i32 %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [13 x ptr], ptr %16, i32 0, i32 10
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @Integer_B__DIV_otherPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1, i32 %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [13 x ptr], ptr %16, i32 0, i32 11
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @Integer_B_print_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [13 x ptr], ptr %4, i32 0, i32 12
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @Integer_init_valuePtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Integer)
  %20 = call ptr @llvm.invariant.start.p0(i64 24, ptr %7)
  %21 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %22 = extractvalue { ptr, ptr, ptr, i32 } %21, 0
  %23 = call ptr @llvm.invariant.start.p0(i64 104, ptr %22)
  %24 = extractvalue { ptr, ptr, ptr, i32 } %21, 3
  %25 = getelementptr ptr, ptr %22, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = extractvalue { ptr, ptr, ptr, i32 } %21, 1
  %28 = call ptr %26(ptr %27)
  store i32 %3, ptr %28, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @Integer__ADD_otherPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Integer)
  %20 = call ptr @llvm.invariant.start.p0(i64 24, ptr %7)
  %21 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %22 = extractvalue { ptr, ptr, ptr, i32 } %21, 0
  %23 = call ptr @llvm.invariant.start.p0(i64 104, ptr %22)
  %24 = extractvalue { ptr, ptr, ptr, i32 } %21, 3
  %25 = getelementptr ptr, ptr %22, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = extractvalue { ptr, ptr, ptr, i32 } %21, 1
  %28 = call ptr %26(ptr %27)
  %29 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ i32 }, ptr null, i32 1) to i64))
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  store ptr @Integer, ptr %30, align 8
  store ptr %29, ptr %31, align 8
  store i32 7, ptr %32, align 4
  %33 = call ptr @llvm.invariant.start.p0(i64 16, ptr %30)
  %34 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %35 = extractvalue { ptr, ptr, ptr, i32 } %34, 0
  %36 = call ptr @llvm.invariant.start.p0(i64 104, ptr %35)
  %37 = extractvalue { ptr, ptr, ptr, i32 } %34, 3
  %38 = getelementptr ptr, ptr %35, i32 %37
  %39 = load ptr, ptr %38, align 8
  %40 = extractvalue { ptr, ptr, ptr, i32 } %34, 1
  %41 = call ptr %39(ptr %40)
  %42 = load i32, ptr %41, align 4
  %43 = add i32 %42, %3
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %45 = load ptr, ptr %44, align 8
  %46 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %45, 0
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %48 = load ptr, ptr %47, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } %46, ptr %48, 1
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %51 = load ptr, ptr %50, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } %49, ptr %51, 2
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = insertvalue { ptr, ptr, ptr, i32 } %52, i32 %54, 3
  %56 = alloca [1 x ptr], align 8
  %57 = call ptr @llvm.invariant.start.p0(i64 8, ptr %56)
  %58 = getelementptr [1 x ptr], ptr %56, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %58, align 8
  %59 = call ptr @llvm.invariant.start.p0(i64 104, ptr %45)
  %60 = getelementptr ptr, ptr %45, i32 %54
  %61 = getelementptr ptr, ptr %60, i32 1
  %62 = load ptr, ptr %61, align 8
  %63 = alloca [1 x ptr], align 8
  %64 = getelementptr [1 x ptr], ptr %63, i32 0, i32 0
  store ptr @i32_typ, ptr %64, align 8
  %65 = call ptr %62({ ptr, ptr, ptr, i32 } %55, ptr %63, i32 %43)
  call void %65({ ptr, ptr, ptr, i32 } %55, { ptr, ptr, ptr, i32 } %55, ptr %56, i32 %43)
  %66 = alloca { ptr, ptr, ptr, i32 }, align 8
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 0
  %69 = load ptr, ptr %67, align 8
  store ptr %69, ptr %68, align 8
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 1
  %72 = load ptr, ptr %70, align 8
  store ptr %72, ptr %71, align 8
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 2
  %75 = load ptr, ptr %73, align 8
  store ptr %75, ptr %74, align 8
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 3
  %78 = load i32, ptr %76, align 4
  store i32 %78, ptr %77, align 4
  call void @set_offset(ptr %66, ptr @Integer)
  %79 = call ptr @llvm.invariant.start.p0(i64 24, ptr %66)
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 0
  %81 = load ptr, ptr %80, align 8
  %82 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %81, 0
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 1
  %84 = load ptr, ptr %83, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } %82, ptr %84, 1
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 2
  %87 = load ptr, ptr %86, align 8
  %88 = insertvalue { ptr, ptr, ptr, i32 } %85, ptr %87, 2
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 3
  %90 = load i32, ptr %89, align 4
  %91 = insertvalue { ptr, ptr, ptr, i32 } %88, i32 %90, 3
  ret { ptr, ptr, ptr, i32 } %91
}

define { ptr, ptr, ptr, i32 } @Integer__SUB_otherPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Integer)
  %20 = call ptr @llvm.invariant.start.p0(i64 24, ptr %7)
  %21 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %22 = extractvalue { ptr, ptr, ptr, i32 } %21, 0
  %23 = call ptr @llvm.invariant.start.p0(i64 104, ptr %22)
  %24 = extractvalue { ptr, ptr, ptr, i32 } %21, 3
  %25 = getelementptr ptr, ptr %22, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = extractvalue { ptr, ptr, ptr, i32 } %21, 1
  %28 = call ptr %26(ptr %27)
  %29 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ i32 }, ptr null, i32 1) to i64))
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  store ptr @Integer, ptr %30, align 8
  store ptr %29, ptr %31, align 8
  store i32 7, ptr %32, align 4
  %33 = call ptr @llvm.invariant.start.p0(i64 16, ptr %30)
  %34 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %35 = extractvalue { ptr, ptr, ptr, i32 } %34, 0
  %36 = call ptr @llvm.invariant.start.p0(i64 104, ptr %35)
  %37 = extractvalue { ptr, ptr, ptr, i32 } %34, 3
  %38 = getelementptr ptr, ptr %35, i32 %37
  %39 = load ptr, ptr %38, align 8
  %40 = extractvalue { ptr, ptr, ptr, i32 } %34, 1
  %41 = call ptr %39(ptr %40)
  %42 = load i32, ptr %41, align 4
  %43 = sub i32 %42, %3
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %45 = load ptr, ptr %44, align 8
  %46 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %45, 0
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %48 = load ptr, ptr %47, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } %46, ptr %48, 1
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %51 = load ptr, ptr %50, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } %49, ptr %51, 2
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = insertvalue { ptr, ptr, ptr, i32 } %52, i32 %54, 3
  %56 = alloca [1 x ptr], align 8
  %57 = call ptr @llvm.invariant.start.p0(i64 8, ptr %56)
  %58 = getelementptr [1 x ptr], ptr %56, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %58, align 8
  %59 = call ptr @llvm.invariant.start.p0(i64 104, ptr %45)
  %60 = getelementptr ptr, ptr %45, i32 %54
  %61 = getelementptr ptr, ptr %60, i32 1
  %62 = load ptr, ptr %61, align 8
  %63 = alloca [1 x ptr], align 8
  %64 = getelementptr [1 x ptr], ptr %63, i32 0, i32 0
  store ptr @i32_typ, ptr %64, align 8
  %65 = call ptr %62({ ptr, ptr, ptr, i32 } %55, ptr %63, i32 %43)
  call void %65({ ptr, ptr, ptr, i32 } %55, { ptr, ptr, ptr, i32 } %55, ptr %56, i32 %43)
  %66 = alloca { ptr, ptr, ptr, i32 }, align 8
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 0
  %69 = load ptr, ptr %67, align 8
  store ptr %69, ptr %68, align 8
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 1
  %72 = load ptr, ptr %70, align 8
  store ptr %72, ptr %71, align 8
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 2
  %75 = load ptr, ptr %73, align 8
  store ptr %75, ptr %74, align 8
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 3
  %78 = load i32, ptr %76, align 4
  store i32 %78, ptr %77, align 4
  call void @set_offset(ptr %66, ptr @Integer)
  %79 = call ptr @llvm.invariant.start.p0(i64 24, ptr %66)
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 0
  %81 = load ptr, ptr %80, align 8
  %82 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %81, 0
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 1
  %84 = load ptr, ptr %83, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } %82, ptr %84, 1
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 2
  %87 = load ptr, ptr %86, align 8
  %88 = insertvalue { ptr, ptr, ptr, i32 } %85, ptr %87, 2
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 3
  %90 = load i32, ptr %89, align 4
  %91 = insertvalue { ptr, ptr, ptr, i32 } %88, i32 %90, 3
  ret { ptr, ptr, ptr, i32 } %91
}

define { ptr, ptr, ptr, i32 } @Integer__MUL_otherPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Integer)
  %20 = call ptr @llvm.invariant.start.p0(i64 24, ptr %7)
  %21 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %22 = extractvalue { ptr, ptr, ptr, i32 } %21, 0
  %23 = call ptr @llvm.invariant.start.p0(i64 104, ptr %22)
  %24 = extractvalue { ptr, ptr, ptr, i32 } %21, 3
  %25 = getelementptr ptr, ptr %22, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = extractvalue { ptr, ptr, ptr, i32 } %21, 1
  %28 = call ptr %26(ptr %27)
  %29 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ i32 }, ptr null, i32 1) to i64))
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  store ptr @Integer, ptr %30, align 8
  store ptr %29, ptr %31, align 8
  store i32 7, ptr %32, align 4
  %33 = call ptr @llvm.invariant.start.p0(i64 16, ptr %30)
  %34 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %35 = extractvalue { ptr, ptr, ptr, i32 } %34, 0
  %36 = call ptr @llvm.invariant.start.p0(i64 104, ptr %35)
  %37 = extractvalue { ptr, ptr, ptr, i32 } %34, 3
  %38 = getelementptr ptr, ptr %35, i32 %37
  %39 = load ptr, ptr %38, align 8
  %40 = extractvalue { ptr, ptr, ptr, i32 } %34, 1
  %41 = call ptr %39(ptr %40)
  %42 = load i32, ptr %41, align 4
  %43 = mul i32 %42, %3
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %45 = load ptr, ptr %44, align 8
  %46 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %45, 0
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %48 = load ptr, ptr %47, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } %46, ptr %48, 1
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %51 = load ptr, ptr %50, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } %49, ptr %51, 2
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = insertvalue { ptr, ptr, ptr, i32 } %52, i32 %54, 3
  %56 = alloca [1 x ptr], align 8
  %57 = call ptr @llvm.invariant.start.p0(i64 8, ptr %56)
  %58 = getelementptr [1 x ptr], ptr %56, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %58, align 8
  %59 = call ptr @llvm.invariant.start.p0(i64 104, ptr %45)
  %60 = getelementptr ptr, ptr %45, i32 %54
  %61 = getelementptr ptr, ptr %60, i32 1
  %62 = load ptr, ptr %61, align 8
  %63 = alloca [1 x ptr], align 8
  %64 = getelementptr [1 x ptr], ptr %63, i32 0, i32 0
  store ptr @i32_typ, ptr %64, align 8
  %65 = call ptr %62({ ptr, ptr, ptr, i32 } %55, ptr %63, i32 %43)
  call void %65({ ptr, ptr, ptr, i32 } %55, { ptr, ptr, ptr, i32 } %55, ptr %56, i32 %43)
  %66 = alloca { ptr, ptr, ptr, i32 }, align 8
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 0
  %69 = load ptr, ptr %67, align 8
  store ptr %69, ptr %68, align 8
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 1
  %72 = load ptr, ptr %70, align 8
  store ptr %72, ptr %71, align 8
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 2
  %75 = load ptr, ptr %73, align 8
  store ptr %75, ptr %74, align 8
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 3
  %78 = load i32, ptr %76, align 4
  store i32 %78, ptr %77, align 4
  call void @set_offset(ptr %66, ptr @Integer)
  %79 = call ptr @llvm.invariant.start.p0(i64 24, ptr %66)
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 0
  %81 = load ptr, ptr %80, align 8
  %82 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %81, 0
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 1
  %84 = load ptr, ptr %83, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } %82, ptr %84, 1
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 2
  %87 = load ptr, ptr %86, align 8
  %88 = insertvalue { ptr, ptr, ptr, i32 } %85, ptr %87, 2
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 3
  %90 = load i32, ptr %89, align 4
  %91 = insertvalue { ptr, ptr, ptr, i32 } %88, i32 %90, 3
  ret { ptr, ptr, ptr, i32 } %91
}

define { ptr, ptr, ptr, i32 } @Integer__DIV_otherPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Integer)
  %20 = call ptr @llvm.invariant.start.p0(i64 24, ptr %7)
  %21 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %22 = extractvalue { ptr, ptr, ptr, i32 } %21, 0
  %23 = call ptr @llvm.invariant.start.p0(i64 104, ptr %22)
  %24 = extractvalue { ptr, ptr, ptr, i32 } %21, 3
  %25 = getelementptr ptr, ptr %22, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = extractvalue { ptr, ptr, ptr, i32 } %21, 1
  %28 = call ptr %26(ptr %27)
  %29 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ i32 }, ptr null, i32 1) to i64))
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  store ptr @Integer, ptr %30, align 8
  store ptr %29, ptr %31, align 8
  store i32 7, ptr %32, align 4
  %33 = call ptr @llvm.invariant.start.p0(i64 16, ptr %30)
  %34 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %35 = extractvalue { ptr, ptr, ptr, i32 } %34, 0
  %36 = call ptr @llvm.invariant.start.p0(i64 104, ptr %35)
  %37 = extractvalue { ptr, ptr, ptr, i32 } %34, 3
  %38 = getelementptr ptr, ptr %35, i32 %37
  %39 = load ptr, ptr %38, align 8
  %40 = extractvalue { ptr, ptr, ptr, i32 } %34, 1
  %41 = call ptr %39(ptr %40)
  %42 = load i32, ptr %41, align 4
  %43 = sdiv i32 %42, %3
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %45 = load ptr, ptr %44, align 8
  %46 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %45, 0
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %48 = load ptr, ptr %47, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } %46, ptr %48, 1
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %51 = load ptr, ptr %50, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } %49, ptr %51, 2
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = insertvalue { ptr, ptr, ptr, i32 } %52, i32 %54, 3
  %56 = alloca [1 x ptr], align 8
  %57 = call ptr @llvm.invariant.start.p0(i64 8, ptr %56)
  %58 = getelementptr [1 x ptr], ptr %56, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %58, align 8
  %59 = call ptr @llvm.invariant.start.p0(i64 104, ptr %45)
  %60 = getelementptr ptr, ptr %45, i32 %54
  %61 = getelementptr ptr, ptr %60, i32 1
  %62 = load ptr, ptr %61, align 8
  %63 = alloca [1 x ptr], align 8
  %64 = getelementptr [1 x ptr], ptr %63, i32 0, i32 0
  store ptr @i32_typ, ptr %64, align 8
  %65 = call ptr %62({ ptr, ptr, ptr, i32 } %55, ptr %63, i32 %43)
  call void %65({ ptr, ptr, ptr, i32 } %55, { ptr, ptr, ptr, i32 } %55, ptr %56, i32 %43)
  %66 = alloca { ptr, ptr, ptr, i32 }, align 8
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 0
  %69 = load ptr, ptr %67, align 8
  store ptr %69, ptr %68, align 8
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 1
  %72 = load ptr, ptr %70, align 8
  store ptr %72, ptr %71, align 8
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 2
  %75 = load ptr, ptr %73, align 8
  store ptr %75, ptr %74, align 8
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 3
  %78 = load i32, ptr %76, align 4
  store i32 %78, ptr %77, align 4
  call void @set_offset(ptr %66, ptr @Integer)
  %79 = call ptr @llvm.invariant.start.p0(i64 24, ptr %66)
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 0
  %81 = load ptr, ptr %80, align 8
  %82 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %81, 0
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 1
  %84 = load ptr, ptr %83, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } %82, ptr %84, 1
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 2
  %87 = load ptr, ptr %86, align 8
  %88 = insertvalue { ptr, ptr, ptr, i32 } %85, ptr %87, 2
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 3
  %90 = load i32, ptr %89, align 4
  %91 = insertvalue { ptr, ptr, ptr, i32 } %88, i32 %90, 3
  ret { ptr, ptr, ptr, i32 } %91
}

define void @Integer_print_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Integer)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 104, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %27 = call ptr %25(ptr %26)
  %28 = alloca i160, align 8
  %29 = alloca ptr, align 8
  %30 = load i32, ptr %27, align 4
  store i32 %30, ptr %28, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %29, align 4
  %31 = load ptr, ptr %29, align 8
  %32 = insertvalue { ptr, i160 } undef, ptr %31, 0
  %33 = load i160, ptr %28, align 4
  %34 = insertvalue { ptr, i160 } %32, i160 %33, 1
  %35 = alloca [1 x ptr], align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 8, ptr %35)
  %37 = getelementptr [1 x ptr], ptr %35, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %37, align 8
  %38 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %39 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %40 = alloca [1 x ptr], align 8
  %41 = getelementptr [1 x ptr], ptr %40, i32 0, i32 0
  store ptr %31, ptr %41, align 8
  %42 = call ptr %39(ptr %40, { ptr, i160 } %34)
  call void %42(ptr %35, { ptr, i160 } %34)
  ret void
}

define ptr @BigBoy_B_introduce_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [6 x ptr], ptr %4, i32 0, i32 2
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @BigBoy_B_repr_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [6 x ptr], ptr %4, i32 0, i32 3
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @BigBoy_introduce_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @BigBoy)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = call ptr @malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 11) to i64))
  %21 = alloca ptr, align 8
  store ptr %20, ptr %21, align 8
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %34 = load i32, ptr %32, align 4
  store i32 %34, ptr %33, align 4
  %35 = call ptr @llvm.invariant.start.p0(i64 16, ptr %22)
  %36 = load ptr, ptr %22, align 8
  %37 = getelementptr i8, ptr %36, i64 0
  %38 = load i80, ptr @ectfw_Here_I_am, align 4
  store i80 %38, ptr %37, align 4
  %39 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 1
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 3
  store ptr @String, ptr %40, align 8
  store ptr %39, ptr %41, align 8
  store i32 7, ptr %42, align 4
  %43 = call ptr @llvm.invariant.start.p0(i64 16, ptr %40)
  %44 = getelementptr { ptr }, ptr %22, i32 0, i32 0
  %45 = load ptr, ptr %44, align 8
  %46 = insertvalue { ptr } undef, ptr %45, 0
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 0
  %48 = load ptr, ptr %47, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %48, 0
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } %49, ptr %51, 1
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 2
  %54 = load ptr, ptr %53, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %54, 2
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 3
  %57 = load i32, ptr %56, align 4
  %58 = insertvalue { ptr, ptr, ptr, i32 } %55, i32 %57, 3
  %59 = alloca [3 x ptr], align 8
  %60 = call ptr @llvm.invariant.start.p0(i64 24, ptr %59)
  %61 = getelementptr [3 x ptr], ptr %59, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %61, align 8
  %62 = getelementptr [3 x ptr], ptr %59, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %62, align 8
  %63 = getelementptr [3 x ptr], ptr %59, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %63, align 8
  %64 = call ptr @llvm.invariant.start.p0(i64 280, ptr %48)
  %65 = getelementptr ptr, ptr %48, i32 %57
  %66 = getelementptr ptr, ptr %65, i32 4
  %67 = load ptr, ptr %66, align 8
  %68 = alloca [3 x ptr], align 8
  %69 = getelementptr [3 x ptr], ptr %68, i32 0, i32 0
  store ptr @buffer_typ, ptr %69, align 8
  %70 = getelementptr [3 x ptr], ptr %68, i32 0, i32 1
  store ptr @i32_typ, ptr %70, align 8
  %71 = getelementptr [3 x ptr], ptr %68, i32 0, i32 2
  store ptr @i32_typ, ptr %71, align 8
  %72 = call ptr %67({ ptr, ptr, ptr, i32 } %58, ptr %68, { ptr } %46, i32 10, i32 11)
  call void %72({ ptr, ptr, ptr, i32 } %58, { ptr, ptr, ptr, i32 } %58, ptr %59, { ptr } %46, i32 10, i32 11)
  %73 = getelementptr { ptr, i160 }, ptr %40, i32 0, i32 0
  %74 = load ptr, ptr %73, align 8
  %75 = insertvalue { ptr, i160 } undef, ptr %74, 0
  %76 = getelementptr { ptr, i160 }, ptr %40, i32 0, i32 1
  %77 = load i160, ptr %76, align 4
  %78 = insertvalue { ptr, i160 } %75, i160 %77, 1
  %79 = alloca [1 x ptr], align 8
  %80 = call ptr @llvm.invariant.start.p0(i64 8, ptr %79)
  %81 = getelementptr [1 x ptr], ptr %79, i32 0, i32 0
  store ptr @_parameterization_String, ptr %81, align 8
  %82 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %83 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %84 = alloca [1 x ptr], align 8
  %85 = getelementptr [1 x ptr], ptr %84, i32 0, i32 0
  store ptr %74, ptr %85, align 8
  %86 = call ptr %83(ptr %84, { ptr, i160 } %78)
  call void %86(ptr %79, { ptr, i160 } %78)
  ret void
}

define ptr @Integer2_field_value(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { i32 }, ptr %0, i32 0, i32 0
  ret ptr %2
}

define ptr @Integer2_B_value_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [40 x ptr], ptr %4, i32 0, i32 10
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Integer2_B_init_valuePtri32({ ptr, ptr, ptr, i32 } %0, ptr %1, i32 %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [40 x ptr], ptr %16, i32 0, i32 11
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @Integer2_B__ADD_otherPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1, i32 %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [40 x ptr], ptr %16, i32 0, i32 12
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @Integer2_B__SUB_otherPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1, i32 %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [40 x ptr], ptr %16, i32 0, i32 13
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @Integer2_B__MUL_otherPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1, i32 %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [40 x ptr], ptr %16, i32 0, i32 14
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @Integer2_B__DIV_otherPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1, i32 %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [40 x ptr], ptr %16, i32 0, i32 15
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @Integer2_B_print_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [40 x ptr], ptr %4, i32 0, i32 16
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Integer2_B_introduce_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [40 x ptr], ptr %4, i32 0, i32 17
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Integer2_B_repr_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [40 x ptr], ptr %4, i32 0, i32 18
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define i32 @Integer2_value_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Integer2)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 320, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %27 = call ptr %25(ptr %26)
  %28 = load i32, ptr %27, align 4
  ret i32 %28
}

define { ptr, ptr, ptr, i32 } @Integer2_repr_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Integer2)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = call ptr @malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 9) to i64))
  %21 = alloca ptr, align 8
  store ptr %20, ptr %21, align 8
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %34 = load i32, ptr %32, align 4
  store i32 %34, ptr %33, align 4
  %35 = call ptr @llvm.invariant.start.p0(i64 16, ptr %22)
  %36 = load ptr, ptr %22, align 8
  %37 = getelementptr i8, ptr %36, i64 0
  %38 = load i64, ptr @fecbn_Integer, align 4
  store i64 %38, ptr %37, align 4
  %39 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 1
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 3
  store ptr @String, ptr %40, align 8
  store ptr %39, ptr %41, align 8
  store i32 7, ptr %42, align 4
  %43 = call ptr @llvm.invariant.start.p0(i64 16, ptr %40)
  %44 = getelementptr { ptr }, ptr %22, i32 0, i32 0
  %45 = load ptr, ptr %44, align 8
  %46 = insertvalue { ptr } undef, ptr %45, 0
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 0
  %48 = load ptr, ptr %47, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %48, 0
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } %49, ptr %51, 1
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 2
  %54 = load ptr, ptr %53, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %54, 2
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 3
  %57 = load i32, ptr %56, align 4
  %58 = insertvalue { ptr, ptr, ptr, i32 } %55, i32 %57, 3
  %59 = alloca [3 x ptr], align 8
  %60 = call ptr @llvm.invariant.start.p0(i64 24, ptr %59)
  %61 = getelementptr [3 x ptr], ptr %59, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %61, align 8
  %62 = getelementptr [3 x ptr], ptr %59, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %62, align 8
  %63 = getelementptr [3 x ptr], ptr %59, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %63, align 8
  %64 = call ptr @llvm.invariant.start.p0(i64 280, ptr %48)
  %65 = getelementptr ptr, ptr %48, i32 %57
  %66 = getelementptr ptr, ptr %65, i32 4
  %67 = load ptr, ptr %66, align 8
  %68 = alloca [3 x ptr], align 8
  %69 = getelementptr [3 x ptr], ptr %68, i32 0, i32 0
  store ptr @buffer_typ, ptr %69, align 8
  %70 = getelementptr [3 x ptr], ptr %68, i32 0, i32 1
  store ptr @i32_typ, ptr %70, align 8
  %71 = getelementptr [3 x ptr], ptr %68, i32 0, i32 2
  store ptr @i32_typ, ptr %71, align 8
  %72 = call ptr %67({ ptr, ptr, ptr, i32 } %58, ptr %68, { ptr } %46, i32 8, i32 9)
  call void %72({ ptr, ptr, ptr, i32 } %58, { ptr, ptr, ptr, i32 } %58, ptr %59, { ptr } %46, i32 8, i32 9)
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 0
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %76 = load ptr, ptr %74, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 1
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %79 = load ptr, ptr %77, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 2
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %82 = load ptr, ptr %80, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 3
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %85 = load i32, ptr %83, align 4
  store i32 %85, ptr %84, align 4
  call void @set_offset(ptr %73, ptr @String)
  %86 = call ptr @llvm.invariant.start.p0(i64 24, ptr %73)
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %88 = load ptr, ptr %87, align 8
  %89 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %88, 0
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } %89, ptr %91, 1
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %94 = load ptr, ptr %93, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %94, 2
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %97 = load i32, ptr %96, align 4
  %98 = insertvalue { ptr, ptr, ptr, i32 } %95, i32 %97, 3
  ret { ptr, ptr, ptr, i32 } %98
}

define ptr @Animal_field_age(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { i32, double, i32 }, ptr %0, i32 0, i32 0
  ret ptr %2
}

define ptr @Animal_field_hp(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { i32, double, i32 }, ptr %0, i32 0, i32 1
  ret ptr %2
}

define ptr @Animal_field_skill(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { i32, double, i32 }, ptr %0, i32 0, i32 2
  ret ptr %2
}

define ptr @Animal_B_init_agePtri32_hpPtrf64_skillPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1, i32 %2, double %3, i32 %4) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %6 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1)
  %7 = getelementptr [3 x ptr], ptr %1, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = getelementptr ptr, ptr %8, i32 1
  %10 = getelementptr ptr, ptr %8, i32 2
  %11 = getelementptr ptr, ptr %8, i32 3
  %12 = getelementptr ptr, ptr %8, i32 4
  %13 = load i64, ptr %9, align 4
  %14 = load i64, ptr %10, align 4
  %15 = load ptr, ptr %11, align 8
  %16 = load ptr, ptr %12, align 8
  %17 = call i1 @subtype_test_wrapper(ptr %15, i64 %14, i64 %13, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %16)
  %18 = getelementptr [3 x ptr], ptr %1, i32 0, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr ptr, ptr %19, i32 1
  %21 = getelementptr ptr, ptr %19, i32 2
  %22 = getelementptr ptr, ptr %19, i32 3
  %23 = getelementptr ptr, ptr %19, i32 4
  %24 = load i64, ptr %20, align 4
  %25 = load i64, ptr %21, align 4
  %26 = load ptr, ptr %22, align 8
  %27 = load ptr, ptr %23, align 8
  %28 = call i1 @subtype_test_wrapper(ptr %26, i64 %25, i64 %24, i64 -757315540097298781, i64 ptrtoint (ptr @f64_typ to i64), ptr %27)
  %29 = getelementptr [3 x ptr], ptr %1, i32 0, i32 2
  %30 = load ptr, ptr %29, align 8
  %31 = getelementptr ptr, ptr %30, i32 1
  %32 = getelementptr ptr, ptr %30, i32 2
  %33 = getelementptr ptr, ptr %30, i32 3
  %34 = getelementptr ptr, ptr %30, i32 4
  %35 = load i64, ptr %31, align 4
  %36 = load i64, ptr %32, align 4
  %37 = load ptr, ptr %33, align 8
  %38 = load ptr, ptr %34, align 8
  %39 = call i1 @subtype_test_wrapper(ptr %37, i64 %36, i64 %35, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %38)
  %40 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %41 = getelementptr [13 x ptr], ptr %40, i32 0, i32 8
  %42 = getelementptr ptr, ptr %41, i32 7
  %43 = load ptr, ptr %42, align 8
  ret ptr %43
}

define ptr @Animal_B_say_age_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [13 x ptr], ptr %4, i32 0, i32 9
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Animal_B_say_skill_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [13 x ptr], ptr %4, i32 0, i32 10
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Animal_B_say_messagePtri32({ ptr, ptr, ptr, i32 } %0, ptr %1, i32 %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [13 x ptr], ptr %16, i32 0, i32 11
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @Animal_B_do_nothing_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [13 x ptr], ptr %4, i32 0, i32 12
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @Animal_init_agePtri32_hpPtrf64_skillPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3, double %4, i32 %5) {
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %7, align 8
  %8 = call ptr @llvm.invariant.start.p0(i64 16, ptr %7)
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  call void @set_offset(ptr %9, ptr @Animal)
  %22 = call ptr @llvm.invariant.start.p0(i64 24, ptr %9)
  %23 = load { ptr, ptr, ptr, i32 }, ptr %9, align 8
  %24 = extractvalue { ptr, ptr, ptr, i32 } %23, 0
  %25 = call ptr @llvm.invariant.start.p0(i64 104, ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %23, 3
  %27 = getelementptr ptr, ptr %24, i32 %26
  %28 = load ptr, ptr %27, align 8
  %29 = extractvalue { ptr, ptr, ptr, i32 } %23, 1
  %30 = call ptr %28(ptr %29)
  store i32 %3, ptr %30, align 4
  %31 = load { ptr, ptr, ptr, i32 }, ptr %9, align 8
  %32 = extractvalue { ptr, ptr, ptr, i32 } %31, 0
  %33 = call ptr @llvm.invariant.start.p0(i64 104, ptr %32)
  %34 = extractvalue { ptr, ptr, ptr, i32 } %31, 3
  %35 = getelementptr ptr, ptr %32, i32 %34
  %36 = getelementptr ptr, ptr %35, i32 1
  %37 = load ptr, ptr %36, align 8
  %38 = extractvalue { ptr, ptr, ptr, i32 } %31, 1
  %39 = call ptr %37(ptr %38)
  store double %4, ptr %39, align 8
  %40 = load { ptr, ptr, ptr, i32 }, ptr %9, align 8
  %41 = extractvalue { ptr, ptr, ptr, i32 } %40, 0
  %42 = call ptr @llvm.invariant.start.p0(i64 104, ptr %41)
  %43 = extractvalue { ptr, ptr, ptr, i32 } %40, 3
  %44 = getelementptr ptr, ptr %41, i32 %43
  %45 = getelementptr ptr, ptr %44, i32 2
  %46 = load ptr, ptr %45, align 8
  %47 = extractvalue { ptr, ptr, ptr, i32 } %40, 1
  %48 = call ptr %46(ptr %47)
  store i32 %5, ptr %48, align 4
  ret void
}

define void @Animal_say_age_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Animal)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 104, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %27 = call ptr %25(ptr %26)
  %28 = load i32, ptr %27, align 4
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %30, 0
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %33, 1
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %36, 2
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %39 = load i32, ptr %38, align 4
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %39, 3
  %41 = alloca [1 x ptr], align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 8, ptr %41)
  %43 = getelementptr [1 x ptr], ptr %41, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %43, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 104, ptr %30)
  %45 = getelementptr ptr, ptr %30, i32 %39
  %46 = getelementptr ptr, ptr %45, i32 6
  %47 = load ptr, ptr %46, align 8
  %48 = alloca [1 x ptr], align 8
  %49 = getelementptr [1 x ptr], ptr %48, i32 0, i32 0
  store ptr @i32_typ, ptr %49, align 8
  %50 = call ptr %47({ ptr, ptr, ptr, i32 } %40, ptr %48, i32 %28)
  call void %50({ ptr, ptr, ptr, i32 } %40, { ptr, ptr, ptr, i32 } %40, ptr %41, i32 %28)
  %51 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %52 = extractvalue { ptr, ptr, ptr, i32 } %51, 0
  %53 = call ptr @llvm.invariant.start.p0(i64 104, ptr %52)
  %54 = extractvalue { ptr, ptr, ptr, i32 } %51, 3
  %55 = getelementptr ptr, ptr %52, i32 %54
  %56 = load ptr, ptr %55, align 8
  %57 = extractvalue { ptr, ptr, ptr, i32 } %51, 1
  %58 = call ptr %56(ptr %57)
  %59 = load i32, ptr %58, align 4
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %61 = load ptr, ptr %60, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %61, 0
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %64 = load ptr, ptr %63, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %62, ptr %64, 1
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %67 = load ptr, ptr %66, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %67, 2
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %70 = load i32, ptr %69, align 4
  %71 = insertvalue { ptr, ptr, ptr, i32 } %68, i32 %70, 3
  %72 = alloca [1 x ptr], align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 8, ptr %72)
  %74 = getelementptr [1 x ptr], ptr %72, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %74, align 8
  %75 = call ptr @llvm.invariant.start.p0(i64 104, ptr %61)
  %76 = getelementptr ptr, ptr %61, i32 %70
  %77 = getelementptr ptr, ptr %76, i32 6
  %78 = load ptr, ptr %77, align 8
  %79 = alloca [1 x ptr], align 8
  %80 = getelementptr [1 x ptr], ptr %79, i32 0, i32 0
  store ptr @i32_typ, ptr %80, align 8
  %81 = call ptr %78({ ptr, ptr, ptr, i32 } %71, ptr %79, i32 %59)
  call void %81({ ptr, ptr, ptr, i32 } %71, { ptr, ptr, ptr, i32 } %71, ptr %72, i32 %59)
  ret void
}

define void @Animal_say_skill_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Animal)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 104, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 2
  %26 = load ptr, ptr %25, align 8
  %27 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %28 = call ptr %26(ptr %27)
  %29 = alloca i160, align 8
  %30 = alloca ptr, align 8
  %31 = load i32, ptr %28, align 4
  store i32 %31, ptr %29, align 4
  %32 = alloca i64, align 8
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %32, align 4
  %33 = load i64, ptr %32, align 4
  store i64 %33, ptr %30, align 4
  %34 = load ptr, ptr %30, align 8
  %35 = insertvalue { ptr, i160 } undef, ptr %34, 0
  %36 = load i160, ptr %29, align 4
  %37 = insertvalue { ptr, i160 } %35, i160 %36, 1
  %38 = alloca [1 x ptr], align 8
  %39 = call ptr @llvm.invariant.start.p0(i64 8, ptr %38)
  %40 = getelementptr [1 x ptr], ptr %38, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %40, align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %42 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %43 = alloca [1 x ptr], align 8
  %44 = getelementptr [1 x ptr], ptr %43, i32 0, i32 0
  store ptr %34, ptr %44, align 8
  %45 = call ptr %42(ptr %43, { ptr, i160 } %37)
  call void %45(ptr %38, { ptr, i160 } %37)
  %46 = load i32, ptr %28, align 4
  store i32 %46, ptr %28, align 4
  ret void
}

define void @Animal_say_messagePtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Animal)
  %20 = call ptr @llvm.invariant.start.p0(i64 24, ptr %7)
  %21 = alloca i160, align 8
  %22 = alloca ptr, align 8
  store i32 %3, ptr %21, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %22, align 4
  %23 = load ptr, ptr %22, align 8
  %24 = insertvalue { ptr, i160 } undef, ptr %23, 0
  %25 = load i160, ptr %21, align 4
  %26 = insertvalue { ptr, i160 } %24, i160 %25, 1
  %27 = alloca [1 x ptr], align 8
  %28 = call ptr @llvm.invariant.start.p0(i64 8, ptr %27)
  %29 = getelementptr [1 x ptr], ptr %27, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %29, align 8
  %30 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %31 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %32 = alloca [1 x ptr], align 8
  %33 = getelementptr [1 x ptr], ptr %32, i32 0, i32 0
  store ptr %23, ptr %33, align 8
  %34 = call ptr %31(ptr %32, { ptr, i160 } %26)
  call void %34(ptr %27, { ptr, i160 } %26)
  ret void
}

define { ptr, i160 } @Animal_do_nothing_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Animal)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ i32, double, i32 }, ptr null, i32 1) to i64))
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  store ptr @Animal, ptr %21, align 8
  store ptr %20, ptr %22, align 8
  store i32 7, ptr %23, align 4
  %24 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %26, 0
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %29 = load ptr, ptr %28, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } %27, ptr %29, 1
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %32 = load ptr, ptr %31, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %32, 2
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %35 = load i32, ptr %34, align 4
  %36 = insertvalue { ptr, ptr, ptr, i32 } %33, i32 %35, 3
  %37 = alloca [3 x ptr], align 8
  %38 = call ptr @llvm.invariant.start.p0(i64 24, ptr %37)
  %39 = getelementptr [3 x ptr], ptr %37, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %39, align 8
  %40 = getelementptr [3 x ptr], ptr %37, i32 0, i32 1
  store ptr @_parameterization_Ptrf64, ptr %40, align 8
  %41 = getelementptr [3 x ptr], ptr %37, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %41, align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 104, ptr %26)
  %43 = getelementptr ptr, ptr %26, i32 %35
  %44 = getelementptr ptr, ptr %43, i32 3
  %45 = load ptr, ptr %44, align 8
  %46 = alloca [3 x ptr], align 8
  %47 = getelementptr [3 x ptr], ptr %46, i32 0, i32 0
  store ptr @i32_typ, ptr %47, align 8
  %48 = getelementptr [3 x ptr], ptr %46, i32 0, i32 1
  store ptr @f64_typ, ptr %48, align 8
  %49 = getelementptr [3 x ptr], ptr %46, i32 0, i32 2
  store ptr @i32_typ, ptr %49, align 8
  %50 = call ptr %45({ ptr, ptr, ptr, i32 } %36, ptr %46, i32 5, double 5.000000e+00, i32 5)
  call void %50({ ptr, ptr, ptr, i32 } %36, { ptr, ptr, ptr, i32 } %36, ptr %37, i32 5, double 5.000000e+00, i32 5)
  %51 = getelementptr { ptr, i160 }, ptr %21, i32 0, i32 0
  %52 = load ptr, ptr %51, align 8
  %53 = insertvalue { ptr, i160 } undef, ptr %52, 0
  %54 = getelementptr { ptr, i160 }, ptr %21, i32 0, i32 1
  %55 = load i160, ptr %54, align 4
  %56 = insertvalue { ptr, i160 } %53, i160 %55, 1
  ret { ptr, i160 } %56
}

define ptr @Beaver_field_color(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { i32, double }, ptr %0, i32 0, i32 0
  ret ptr %2
}

define ptr @Beaver_field_name(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { i32, double }, ptr %0, i32 0, i32 1
  ret ptr %2
}

define ptr @Beaver_B_init_colorPtri32_namePtrf64({ ptr, ptr, ptr, i32 } %0, ptr %1, i32 %2, double %3) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = getelementptr [2 x ptr], ptr %1, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr ptr, ptr %7, i32 1
  %9 = getelementptr ptr, ptr %7, i32 2
  %10 = getelementptr ptr, ptr %7, i32 3
  %11 = getelementptr ptr, ptr %7, i32 4
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %15)
  %17 = getelementptr [2 x ptr], ptr %1, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr ptr, ptr %18, i32 1
  %20 = getelementptr ptr, ptr %18, i32 2
  %21 = getelementptr ptr, ptr %18, i32 3
  %22 = getelementptr ptr, ptr %18, i32 4
  %23 = load i64, ptr %19, align 4
  %24 = load i64, ptr %20, align 4
  %25 = load ptr, ptr %21, align 8
  %26 = load ptr, ptr %22, align 8
  %27 = call i1 @subtype_test_wrapper(ptr %25, i64 %24, i64 %23, i64 -757315540097298781, i64 ptrtoint (ptr @f64_typ to i64), ptr %26)
  %28 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %29 = getelementptr [8 x ptr], ptr %28, i32 0, i32 5
  %30 = getelementptr ptr, ptr %29, i32 7
  %31 = load ptr, ptr %30, align 8
  ret ptr %31
}

define ptr @Beaver_B__ADD_xPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1, i32 %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [8 x ptr], ptr %16, i32 0, i32 6
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @Beaver_B_say_color_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [8 x ptr], ptr %4, i32 0, i32 7
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @Beaver_init_colorPtri32_namePtrf64({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3, double %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @Beaver)
  %21 = call ptr @llvm.invariant.start.p0(i64 24, ptr %8)
  %22 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %23 = extractvalue { ptr, ptr, ptr, i32 } %22, 0
  %24 = call ptr @llvm.invariant.start.p0(i64 64, ptr %23)
  %25 = extractvalue { ptr, ptr, ptr, i32 } %22, 3
  %26 = getelementptr ptr, ptr %23, i32 %25
  %27 = load ptr, ptr %26, align 8
  %28 = extractvalue { ptr, ptr, ptr, i32 } %22, 1
  %29 = call ptr %27(ptr %28)
  store i32 %3, ptr %29, align 4
  %30 = load { ptr, ptr, ptr, i32 }, ptr %8, align 8
  %31 = extractvalue { ptr, ptr, ptr, i32 } %30, 0
  %32 = call ptr @llvm.invariant.start.p0(i64 64, ptr %31)
  %33 = extractvalue { ptr, ptr, ptr, i32 } %30, 3
  %34 = getelementptr ptr, ptr %31, i32 %33
  %35 = getelementptr ptr, ptr %34, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = extractvalue { ptr, ptr, ptr, i32 } %30, 1
  %38 = call ptr %36(ptr %37)
  store double %4, ptr %38, align 8
  ret void
}

define void @Beaver__ADD_xPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Beaver)
  %20 = call ptr @llvm.invariant.start.p0(i64 24, ptr %7)
  %21 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %22 = extractvalue { ptr, ptr, ptr, i32 } %21, 0
  %23 = call ptr @llvm.invariant.start.p0(i64 64, ptr %22)
  %24 = extractvalue { ptr, ptr, ptr, i32 } %21, 3
  %25 = getelementptr ptr, ptr %22, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = extractvalue { ptr, ptr, ptr, i32 } %21, 1
  %28 = call ptr %26(ptr %27)
  %29 = load i32, ptr %28, align 4
  %30 = add i32 %29, %3
  %31 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %32 = extractvalue { ptr, ptr, ptr, i32 } %31, 0
  %33 = call ptr @llvm.invariant.start.p0(i64 64, ptr %32)
  %34 = extractvalue { ptr, ptr, ptr, i32 } %31, 3
  %35 = getelementptr ptr, ptr %32, i32 %34
  %36 = load ptr, ptr %35, align 8
  %37 = extractvalue { ptr, ptr, ptr, i32 } %31, 1
  %38 = call ptr %36(ptr %37)
  store i32 %30, ptr %38, align 4
  ret void
}

define void @Beaver_say_color_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Beaver)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 64, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %27 = call ptr %25(ptr %26)
  %28 = alloca i160, align 8
  %29 = alloca ptr, align 8
  %30 = load i32, ptr %27, align 4
  store i32 %30, ptr %28, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %29, align 4
  %31 = load ptr, ptr %29, align 8
  %32 = insertvalue { ptr, i160 } undef, ptr %31, 0
  %33 = load i160, ptr %28, align 4
  %34 = insertvalue { ptr, i160 } %32, i160 %33, 1
  %35 = alloca [1 x ptr], align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 8, ptr %35)
  %37 = getelementptr [1 x ptr], ptr %35, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %37, align 8
  %38 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %39 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %40 = alloca [1 x ptr], align 8
  %41 = getelementptr [1 x ptr], ptr %40, i32 0, i32 0
  store ptr %31, ptr %41, align 8
  %42 = call ptr %39(ptr %40, { ptr, i160 } %34)
  call void %42(ptr %35, { ptr, i160 } %34)
  ret void
}

define ptr @ListNode_field_data(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { i32, { ptr, i160 } }, ptr %0, i32 0, i32 0
  ret ptr %2
}

define ptr @ListNode_field_next(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { i32, { ptr, i160 } }, ptr %0, i32 0, i32 1
  ret ptr %2
}

define ptr @ListNode_B_init_dataPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1, i32 %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [12 x ptr], ptr %16, i32 0, i32 7
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @ListNode_B_push_nextListNode({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -1756024950533091476, i64 ptrtoint (ptr @ListNode to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [12 x ptr], ptr %16, i32 0, i32 8
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @ListNode_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [12 x ptr], ptr %4, i32 0, i32 9
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @ListNode_B_data_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [12 x ptr], ptr %4, i32 0, i32 10
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @ListNode_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [12 x ptr], ptr %4, i32 0, i32 11
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @ListNode_init_dataPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @ListNode)
  %20 = call ptr @llvm.invariant.start.p0(i64 24, ptr %7)
  %21 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %22 = extractvalue { ptr, ptr, ptr, i32 } %21, 0
  %23 = call ptr @llvm.invariant.start.p0(i64 96, ptr %22)
  %24 = extractvalue { ptr, ptr, ptr, i32 } %21, 3
  %25 = getelementptr ptr, ptr %22, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = extractvalue { ptr, ptr, ptr, i32 } %21, 1
  %28 = call ptr %26(ptr %27)
  store i32 %3, ptr %28, align 4
  %29 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %30 = extractvalue { ptr, ptr, ptr, i32 } %29, 0
  %31 = call ptr @llvm.invariant.start.p0(i64 96, ptr %30)
  %32 = extractvalue { ptr, ptr, ptr, i32 } %29, 3
  %33 = getelementptr ptr, ptr %30, i32 %32
  %34 = getelementptr ptr, ptr %33, i32 1
  %35 = load ptr, ptr %34, align 8
  %36 = extractvalue { ptr, ptr, ptr, i32 } %29, 1
  %37 = call ptr %35(ptr %36)
  %38 = alloca i160, align 8
  %39 = alloca ptr, align 8
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %39, align 4
  %40 = getelementptr { ptr, i160 }, ptr %37, i32 0, i32 0
  %41 = load ptr, ptr %39, align 8
  store ptr %41, ptr %40, align 8
  %42 = getelementptr { ptr, i160 }, ptr %37, i32 0, i32 1
  %43 = load i160, ptr %38, align 4
  store i160 %43, ptr %42, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ListNode_push_nextListNode({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @ListNode)
  %20 = call ptr @llvm.invariant.start.p0(i64 24, ptr %7)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @ListNode)
  %36 = call ptr @llvm.invariant.start.p0(i64 24, ptr %23)
  %37 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %38 = extractvalue { ptr, ptr, ptr, i32 } %37, 0
  %39 = call ptr @llvm.invariant.start.p0(i64 96, ptr %38)
  %40 = extractvalue { ptr, ptr, ptr, i32 } %37, 3
  %41 = getelementptr ptr, ptr %38, i32 %40
  %42 = getelementptr ptr, ptr %41, i32 1
  %43 = load ptr, ptr %42, align 8
  %44 = extractvalue { ptr, ptr, ptr, i32 } %37, 1
  %45 = call ptr %43(ptr %44)
  %46 = getelementptr { ptr, i160 }, ptr %23, i32 0, i32 0
  %47 = getelementptr { ptr, i160 }, ptr %45, i32 0, i32 0
  %48 = load ptr, ptr %46, align 8
  store ptr %48, ptr %47, align 8
  %49 = getelementptr { ptr, i160 }, ptr %23, i32 0, i32 1
  %50 = getelementptr { ptr, i160 }, ptr %45, i32 0, i32 1
  %51 = load i160, ptr %49, align 4
  store i160 %51, ptr %50, align 4
  %52 = alloca { ptr, ptr, ptr, i32 }, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 0
  %55 = load ptr, ptr %53, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 1
  %58 = load ptr, ptr %56, align 8
  store ptr %58, ptr %57, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 2
  %61 = load ptr, ptr %59, align 8
  store ptr %61, ptr %60, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 3
  %64 = load i32, ptr %62, align 4
  store i32 %64, ptr %63, align 4
  call void @set_offset(ptr %52, ptr @ListNode)
  %65 = call ptr @llvm.invariant.start.p0(i64 24, ptr %52)
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 0
  %67 = load ptr, ptr %66, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %67, 0
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 1
  %70 = load ptr, ptr %69, align 8
  %71 = insertvalue { ptr, ptr, ptr, i32 } %68, ptr %70, 1
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 2
  %73 = load ptr, ptr %72, align 8
  %74 = insertvalue { ptr, ptr, ptr, i32 } %71, ptr %73, 2
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 3
  %76 = load i32, ptr %75, align 4
  %77 = insertvalue { ptr, ptr, ptr, i32 } %74, i32 %76, 3
  ret { ptr, ptr, ptr, i32 } %77
}

define { ptr, i160 } @ListNode_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @ListNode)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 96, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = getelementptr ptr, ptr %24, i32 1
  %26 = load ptr, ptr %25, align 8
  %27 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %28 = call ptr %26(ptr %27)
  %29 = getelementptr { ptr, i160 }, ptr %28, i32 0, i32 0
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, i160 } undef, ptr %30, 0
  %32 = getelementptr { ptr, i160 }, ptr %28, i32 0, i32 1
  %33 = load i160, ptr %32, align 4
  %34 = insertvalue { ptr, i160 } %31, i160 %33, 1
  ret { ptr, i160 } %34
}

define i32 @ListNode_data_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @ListNode)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 96, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %27 = call ptr %25(ptr %26)
  %28 = load i32, ptr %27, align 4
  ret i32 %28
}

define { ptr, ptr, ptr, i32 } @ListNode_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @ListNode)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ i32, { ptr, i160 } }, ptr null, i32 1) to i64))
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  store ptr @ListNode, ptr %21, align 8
  store ptr %20, ptr %22, align 8
  store i32 7, ptr %23, align 4
  %24 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %26, 0
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %29 = load ptr, ptr %28, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } %27, ptr %29, 1
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %32 = load ptr, ptr %31, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %32, 2
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %35 = load i32, ptr %34, align 4
  %36 = insertvalue { ptr, ptr, ptr, i32 } %33, i32 %35, 3
  %37 = alloca [1 x ptr], align 8
  %38 = call ptr @llvm.invariant.start.p0(i64 8, ptr %37)
  %39 = getelementptr [1 x ptr], ptr %37, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %39, align 8
  %40 = call ptr @llvm.invariant.start.p0(i64 96, ptr %26)
  %41 = getelementptr ptr, ptr %26, i32 %35
  %42 = getelementptr ptr, ptr %41, i32 2
  %43 = load ptr, ptr %42, align 8
  %44 = alloca [1 x ptr], align 8
  %45 = getelementptr [1 x ptr], ptr %44, i32 0, i32 0
  store ptr @i32_typ, ptr %45, align 8
  %46 = call ptr %43({ ptr, ptr, ptr, i32 } %36, ptr %44, i32 0)
  call void %46({ ptr, ptr, ptr, i32 } %36, { ptr, ptr, ptr, i32 } %36, ptr %37, i32 0)
  %47 = alloca { ptr, ptr, ptr, i32 }, align 8
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 0
  %50 = load ptr, ptr %48, align 8
  store ptr %50, ptr %49, align 8
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 1
  %53 = load ptr, ptr %51, align 8
  store ptr %53, ptr %52, align 8
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 2
  %56 = load ptr, ptr %54, align 8
  store ptr %56, ptr %55, align 8
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 3
  %59 = load i32, ptr %57, align 4
  store i32 %59, ptr %58, align 4
  call void @set_offset(ptr %47, ptr @ListNode)
  %60 = call ptr @llvm.invariant.start.p0(i64 24, ptr %47)
  %61 = alloca { ptr, ptr, ptr, i32 }, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 0
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 0
  %64 = load ptr, ptr %62, align 8
  store ptr %64, ptr %63, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 1
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 1
  %67 = load ptr, ptr %65, align 8
  store ptr %67, ptr %66, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 2
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 2
  %70 = load ptr, ptr %68, align 8
  store ptr %70, ptr %69, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 3
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 3
  %73 = load i32, ptr %71, align 4
  store i32 %73, ptr %72, align 4
  %74 = call ptr @llvm.invariant.start.p0(i64 16, ptr %61)
  %75 = alloca { ptr, ptr, ptr, i32 }, align 8
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 0
  %78 = load ptr, ptr %76, align 8
  store ptr %78, ptr %77, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 1
  %81 = load ptr, ptr %79, align 8
  store ptr %81, ptr %80, align 8
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 2
  %84 = load ptr, ptr %82, align 8
  store ptr %84, ptr %83, align 8
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 3
  %87 = load i32, ptr %85, align 4
  store i32 %87, ptr %86, align 4
  call void @set_offset(ptr %75, ptr @ListNode)
  %88 = call ptr @llvm.invariant.start.p0(i64 24, ptr %75)
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 0
  %90 = load ptr, ptr %89, align 8
  %91 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %90, 0
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 1
  %93 = load ptr, ptr %92, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } %91, ptr %93, 1
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 2
  %96 = load ptr, ptr %95, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr %96, 2
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 3
  %99 = load i32, ptr %98, align 4
  %100 = insertvalue { ptr, ptr, ptr, i32 } %97, i32 %99, 3
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 0
  %102 = load ptr, ptr %101, align 8
  %103 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %102, 0
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 1
  %105 = load ptr, ptr %104, align 8
  %106 = insertvalue { ptr, ptr, ptr, i32 } %103, ptr %105, 1
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 2
  %108 = load ptr, ptr %107, align 8
  %109 = insertvalue { ptr, ptr, ptr, i32 } %106, ptr %108, 2
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 3
  %111 = load i32, ptr %110, align 4
  %112 = insertvalue { ptr, ptr, ptr, i32 } %109, i32 %111, 3
  %113 = alloca [1 x ptr], align 8
  %114 = call ptr @llvm.invariant.start.p0(i64 8, ptr %113)
  %115 = getelementptr [1 x ptr], ptr %113, i32 0, i32 0
  store ptr @_parameterization_ListNode, ptr %115, align 8
  %116 = call ptr @llvm.invariant.start.p0(i64 96, ptr %102)
  %117 = getelementptr ptr, ptr %102, i32 %111
  %118 = getelementptr ptr, ptr %117, i32 3
  %119 = load ptr, ptr %118, align 8
  %120 = alloca [1 x ptr], align 8
  %121 = getelementptr [1 x ptr], ptr %120, i32 0, i32 0
  store ptr %90, ptr %121, align 8
  %122 = call ptr %119({ ptr, ptr, ptr, i32 } %112, ptr %120, { ptr, ptr, ptr, i32 } %100)
  %123 = call { ptr, ptr, ptr, i32 } %122({ ptr, ptr, ptr, i32 } %112, { ptr, ptr, ptr, i32 } %112, ptr %113, { ptr, ptr, ptr, i32 } %100)
  %124 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %123, ptr %124, align 8
  %125 = call ptr @llvm.invariant.start.p0(i64 16, ptr %124)
  %126 = alloca { ptr, ptr, ptr, i32 }, align 8
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %124, i32 0, i32 0
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %126, i32 0, i32 0
  %129 = load ptr, ptr %127, align 8
  store ptr %129, ptr %128, align 8
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %124, i32 0, i32 1
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %126, i32 0, i32 1
  %132 = load ptr, ptr %130, align 8
  store ptr %132, ptr %131, align 8
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %124, i32 0, i32 2
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %126, i32 0, i32 2
  %135 = load ptr, ptr %133, align 8
  store ptr %135, ptr %134, align 8
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %124, i32 0, i32 3
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %126, i32 0, i32 3
  %138 = load i32, ptr %136, align 4
  store i32 %138, ptr %137, align 4
  call void @set_offset(ptr %126, ptr @ListNode)
  %139 = call ptr @llvm.invariant.start.p0(i64 24, ptr %126)
  %140 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr, ptr, ptr, i32 } }, ptr null, i32 1) to i64))
  %141 = alloca { ptr, ptr, ptr, i32 }, align 8
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 1
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 3
  store ptr @ListIterator, ptr %141, align 8
  store ptr %140, ptr %142, align 8
  store i32 7, ptr %143, align 4
  %144 = call ptr @llvm.invariant.start.p0(i64 16, ptr %141)
  %145 = alloca { ptr, ptr, ptr, i32 }, align 8
  %146 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 0
  %147 = getelementptr { ptr, ptr, ptr, i32 }, ptr %145, i32 0, i32 0
  %148 = load ptr, ptr %146, align 8
  store ptr %148, ptr %147, align 8
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 1
  %150 = getelementptr { ptr, ptr, ptr, i32 }, ptr %145, i32 0, i32 1
  %151 = load ptr, ptr %149, align 8
  store ptr %151, ptr %150, align 8
  %152 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 2
  %153 = getelementptr { ptr, ptr, ptr, i32 }, ptr %145, i32 0, i32 2
  %154 = load ptr, ptr %152, align 8
  store ptr %154, ptr %153, align 8
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 3
  %156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %145, i32 0, i32 3
  %157 = load i32, ptr %155, align 4
  store i32 %157, ptr %156, align 4
  call void @set_offset(ptr %145, ptr @ListNode)
  %158 = call ptr @llvm.invariant.start.p0(i64 24, ptr %145)
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %145, i32 0, i32 0
  %160 = load ptr, ptr %159, align 8
  %161 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %160, 0
  %162 = getelementptr { ptr, ptr, ptr, i32 }, ptr %145, i32 0, i32 1
  %163 = load ptr, ptr %162, align 8
  %164 = insertvalue { ptr, ptr, ptr, i32 } %161, ptr %163, 1
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %145, i32 0, i32 2
  %166 = load ptr, ptr %165, align 8
  %167 = insertvalue { ptr, ptr, ptr, i32 } %164, ptr %166, 2
  %168 = getelementptr { ptr, ptr, ptr, i32 }, ptr %145, i32 0, i32 3
  %169 = load i32, ptr %168, align 4
  %170 = insertvalue { ptr, ptr, ptr, i32 } %167, i32 %169, 3
  %171 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 0
  %172 = load ptr, ptr %171, align 8
  %173 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %172, 0
  %174 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 1
  %175 = load ptr, ptr %174, align 8
  %176 = insertvalue { ptr, ptr, ptr, i32 } %173, ptr %175, 1
  %177 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 2
  %178 = load ptr, ptr %177, align 8
  %179 = insertvalue { ptr, ptr, ptr, i32 } %176, ptr %178, 2
  %180 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 3
  %181 = load i32, ptr %180, align 4
  %182 = insertvalue { ptr, ptr, ptr, i32 } %179, i32 %181, 3
  %183 = alloca [1 x ptr], align 8
  %184 = call ptr @llvm.invariant.start.p0(i64 8, ptr %183)
  %185 = getelementptr [1 x ptr], ptr %183, i32 0, i32 0
  store ptr @_parameterization_ListNode, ptr %185, align 8
  %186 = call ptr @llvm.invariant.start.p0(i64 40, ptr %172)
  %187 = getelementptr ptr, ptr %172, i32 %181
  %188 = getelementptr ptr, ptr %187, i32 1
  %189 = load ptr, ptr %188, align 8
  %190 = alloca [1 x ptr], align 8
  %191 = getelementptr [1 x ptr], ptr %190, i32 0, i32 0
  store ptr %160, ptr %191, align 8
  %192 = call ptr %189({ ptr, ptr, ptr, i32 } %182, ptr %190, { ptr, ptr, ptr, i32 } %170)
  call void %192({ ptr, ptr, ptr, i32 } %182, { ptr, ptr, ptr, i32 } %182, ptr %183, { ptr, ptr, ptr, i32 } %170)
  %193 = alloca { ptr, ptr, ptr, i32 }, align 8
  %194 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 0
  %195 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 0
  %196 = load ptr, ptr %194, align 8
  store ptr %196, ptr %195, align 8
  %197 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 1
  %198 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 1
  %199 = load ptr, ptr %197, align 8
  store ptr %199, ptr %198, align 8
  %200 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 2
  %201 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 2
  %202 = load ptr, ptr %200, align 8
  store ptr %202, ptr %201, align 8
  %203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 3
  %204 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 3
  %205 = load i32, ptr %203, align 4
  store i32 %205, ptr %204, align 4
  call void @set_offset(ptr %193, ptr @ListIterator)
  %206 = call ptr @llvm.invariant.start.p0(i64 24, ptr %193)
  %207 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 0
  %208 = load ptr, ptr %207, align 8
  %209 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %208, 0
  %210 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 1
  %211 = load ptr, ptr %210, align 8
  %212 = insertvalue { ptr, ptr, ptr, i32 } %209, ptr %211, 1
  %213 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 2
  %214 = load ptr, ptr %213, align 8
  %215 = insertvalue { ptr, ptr, ptr, i32 } %212, ptr %214, 2
  %216 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 3
  %217 = load i32, ptr %216, align 4
  %218 = insertvalue { ptr, ptr, ptr, i32 } %215, i32 %217, 3
  ret { ptr, ptr, ptr, i32 } %218
}

define ptr @ListIterator_field_node(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 0
  ret ptr %2
}

define ptr @ListIterator_B_init_nodeListNode({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -1756024950533091476, i64 ptrtoint (ptr @ListNode to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [5 x ptr], ptr %16, i32 0, i32 3
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @ListIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [5 x ptr], ptr %4, i32 0, i32 4
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @ListIterator_init_nodeListNode({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @ListIterator)
  %20 = call ptr @llvm.invariant.start.p0(i64 24, ptr %7)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @ListNode)
  %36 = call ptr @llvm.invariant.start.p0(i64 24, ptr %23)
  %37 = load { ptr, ptr, ptr, i32 }, ptr %7, align 8
  %38 = extractvalue { ptr, ptr, ptr, i32 } %37, 0
  %39 = call ptr @llvm.invariant.start.p0(i64 40, ptr %38)
  %40 = extractvalue { ptr, ptr, ptr, i32 } %37, 3
  %41 = getelementptr ptr, ptr %38, i32 %40
  %42 = load ptr, ptr %41, align 8
  %43 = extractvalue { ptr, ptr, ptr, i32 } %37, 1
  %44 = call ptr %42(ptr %43)
  %45 = alloca { ptr, ptr, ptr, i32 }, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %48 = load ptr, ptr %46, align 8
  store ptr %48, ptr %47, align 8
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %51 = load ptr, ptr %49, align 8
  store ptr %51, ptr %50, align 8
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %54 = load ptr, ptr %52, align 8
  store ptr %54, ptr %53, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %57 = load i32, ptr %55, align 4
  store i32 %57, ptr %56, align 4
  call void @set_offset(ptr %45, ptr @ListNode)
  %58 = call ptr @llvm.invariant.start.p0(i64 24, ptr %45)
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 0
  %61 = load ptr, ptr %59, align 8
  store ptr %61, ptr %60, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 1
  %64 = load ptr, ptr %62, align 8
  store ptr %64, ptr %63, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 2
  %67 = load ptr, ptr %65, align 8
  store ptr %67, ptr %66, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 3
  %70 = load i32, ptr %68, align 4
  store i32 %70, ptr %69, align 4
  ret void
}

define { ptr, i160 } @ListIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @ListIterator)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  %20 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %21 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  %22 = call ptr @llvm.invariant.start.p0(i64 40, ptr %21)
  %23 = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %24 = getelementptr ptr, ptr %21, i32 %23
  %25 = load ptr, ptr %24, align 8
  %26 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %27 = call ptr %25(ptr %26)
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %29, 0
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %32 = load ptr, ptr %31, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %32, 1
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %35 = load ptr, ptr %34, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %35, 2
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %38 = load i32, ptr %37, align 4
  %39 = insertvalue { ptr, ptr, ptr, i32 } %36, i32 %38, 3
  %40 = alloca [0 x ptr], align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 0, ptr %40)
  %42 = call ptr @llvm.invariant.start.p0(i64 96, ptr %29)
  %43 = getelementptr ptr, ptr %29, i32 %38
  %44 = getelementptr ptr, ptr %43, i32 4
  %45 = load ptr, ptr %44, align 8
  %46 = alloca [0 x ptr], align 8
  %47 = call ptr %45({ ptr, ptr, ptr, i32 } %39, ptr %46)
  %48 = call { ptr, i160 } %47({ ptr, ptr, ptr, i32 } %39, { ptr, ptr, ptr, i32 } %39, ptr %40)
  %49 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %48, ptr %49, align 8
  %50 = getelementptr { ptr, i160 }, ptr %49, i32 0, i32 0
  %51 = load ptr, ptr %50, align 8
  %52 = ptrtoint ptr %51 to i64
  %53 = icmp ne i64 %52, ptrtoint (ptr @nil_typ to i64)
  %54 = alloca { ptr, ptr, ptr, i32 }, align 8
  %55 = alloca { ptr, ptr, ptr, i32 }, align 8
  %56 = alloca i160, align 8
  %57 = alloca ptr, align 8
  %58 = alloca i64, align 8
  br i1 %53, label %59, label %120

59:                                               ; preds = %3
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 0
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 0
  %62 = load ptr, ptr %60, align 8
  store ptr %62, ptr %61, align 8
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 1
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 1
  %65 = load ptr, ptr %63, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 2
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 2
  %68 = load ptr, ptr %66, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 3
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 3
  %71 = load i32, ptr %69, align 4
  store i32 %71, ptr %70, align 4
  call void @set_offset(ptr %54, ptr @ListNode)
  %72 = call ptr @llvm.invariant.start.p0(i64 24, ptr %54)
  %73 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %74 = extractvalue { ptr, ptr, ptr, i32 } %73, 0
  %75 = call ptr @llvm.invariant.start.p0(i64 40, ptr %74)
  %76 = extractvalue { ptr, ptr, ptr, i32 } %73, 3
  %77 = getelementptr ptr, ptr %74, i32 %76
  %78 = load ptr, ptr %77, align 8
  %79 = extractvalue { ptr, ptr, ptr, i32 } %73, 1
  %80 = call ptr %78(ptr %79)
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 0
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 0
  %83 = load ptr, ptr %81, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 1
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  %86 = load ptr, ptr %84, align 8
  store ptr %86, ptr %85, align 8
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 2
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 2
  %89 = load ptr, ptr %87, align 8
  store ptr %89, ptr %88, align 8
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 3
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  %92 = load i32, ptr %90, align 4
  store i32 %92, ptr %91, align 4
  call void @set_offset(ptr %55, ptr @ListNode)
  %93 = call ptr @llvm.invariant.start.p0(i64 24, ptr %55)
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 0
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %80, i32 0, i32 0
  %96 = load ptr, ptr %94, align 8
  store ptr %96, ptr %95, align 8
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %80, i32 0, i32 1
  %99 = load ptr, ptr %97, align 8
  store ptr %99, ptr %98, align 8
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 2
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %80, i32 0, i32 2
  %102 = load ptr, ptr %100, align 8
  store ptr %102, ptr %101, align 8
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %80, i32 0, i32 3
  %105 = load i32, ptr %103, align 4
  store i32 %105, ptr %104, align 4
  %106 = load { ptr, ptr, ptr, i32 }, ptr %6, align 8
  %107 = extractvalue { ptr, ptr, ptr, i32 } %106, 0
  %108 = call ptr @llvm.invariant.start.p0(i64 40, ptr %107)
  %109 = extractvalue { ptr, ptr, ptr, i32 } %106, 3
  %110 = getelementptr ptr, ptr %107, i32 %109
  %111 = load ptr, ptr %110, align 8
  %112 = extractvalue { ptr, ptr, ptr, i32 } %106, 1
  %113 = call ptr %111(ptr %112)
  %114 = getelementptr { ptr, i160 }, ptr %113, i32 0, i32 0
  %115 = load ptr, ptr %114, align 8
  %116 = insertvalue { ptr, i160 } undef, ptr %115, 0
  %117 = getelementptr { ptr, i160 }, ptr %113, i32 0, i32 1
  %118 = load i160, ptr %117, align 4
  %119 = insertvalue { ptr, i160 } %116, i160 %118, 1
  store { ptr, i160 } %119, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem5, align 8
  br label %126

120:                                              ; preds = %3
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %58, align 4
  %121 = load i64, ptr %58, align 4
  store i64 %121, ptr %57, align 4
  %122 = load ptr, ptr %57, align 8
  %123 = insertvalue { ptr, i160 } undef, ptr %122, 0
  %124 = load i160, ptr %56, align 4
  %125 = insertvalue { ptr, i160 } %123, i160 %124, 1
  store { ptr, i160 } %125, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem5, align 8
  br label %126

126:                                              ; preds = %120, %59
  %.reload6 = load { ptr, i160 }, ptr %.reg2mem5, align 8
  store { ptr, i160 } %.reload6, ptr %.reg2mem, align 8
  br label %127

127:                                              ; preds = %126
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  ret { ptr, i160 } %.reload
}

define ptr @Bard_B_init_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [7 x ptr], ptr %4, i32 0, i32 2
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Bard_B_take_aPtri32_bPtrf64_take_aPtri32_bPtri32_take_aPtrf64_bPtrf64_take_aAnimal_bBeaver({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, i160 } %2, { ptr, i160 } %3) {
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i32, align 4
  %.reg2mem5 = alloca i32, align 4
  %.reg2mem7 = alloca i32, align 4
  %.reg2mem9 = alloca i1, align 1
  %.reg2mem13 = alloca i32, align 4
  %.reg2mem15 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = getelementptr [2 x ptr], ptr %1, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr ptr, ptr %7, i32 1
  %9 = getelementptr ptr, ptr %7, i32 2
  %10 = getelementptr ptr, ptr %7, i32 3
  %11 = getelementptr ptr, ptr %7, i32 4
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %15)
  store i1 %16, ptr %.reg2mem9, align 1
  %.reload12 = load i1, ptr %.reg2mem9, align 1
  br i1 %.reload12, label %17, label %31

17:                                               ; preds = %4
  %18 = getelementptr [2 x ptr], ptr %1, i32 0, i32 1
  %19 = load ptr, ptr %18, align 8
  %20 = getelementptr ptr, ptr %19, i32 1
  %21 = getelementptr ptr, ptr %19, i32 2
  %22 = getelementptr ptr, ptr %19, i32 3
  %23 = getelementptr ptr, ptr %19, i32 4
  %24 = load i64, ptr %20, align 4
  %25 = load i64, ptr %21, align 4
  %26 = load ptr, ptr %22, align 8
  %27 = load ptr, ptr %23, align 8
  %28 = call i1 @subtype_test_wrapper(ptr %26, i64 %25, i64 %24, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %27)
  %29 = xor i1 %28, true
  %30 = zext i1 %29 to i32
  store i32 %30, ptr %.reg2mem7, align 4
  %.reload8 = load i32, ptr %.reg2mem7, align 4
  store i32 %.reload8, ptr %.reg2mem15, align 4
  br label %69

31:                                               ; preds = %4
  %32 = getelementptr [2 x ptr], ptr %1, i32 0, i32 0
  %33 = load ptr, ptr %32, align 8
  %34 = getelementptr ptr, ptr %33, i32 1
  %35 = getelementptr ptr, ptr %33, i32 2
  %36 = getelementptr ptr, ptr %33, i32 3
  %37 = getelementptr ptr, ptr %33, i32 4
  %38 = load i64, ptr %34, align 4
  %39 = load i64, ptr %35, align 4
  %40 = load ptr, ptr %36, align 8
  %41 = load ptr, ptr %37, align 8
  %42 = call i1 @subtype_test_wrapper(ptr %40, i64 %39, i64 %38, i64 -757315540097298781, i64 ptrtoint (ptr @f64_typ to i64), ptr %41)
  %43 = zext i1 %42 to i32
  store i32 %43, ptr %.reg2mem5, align 4
  br i1 %42, label %44, label %45

44:                                               ; preds = %31
  br label %68

45:                                               ; preds = %31
  %46 = getelementptr [2 x ptr], ptr %1, i32 0, i32 0
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr ptr, ptr %47, i32 1
  %49 = getelementptr ptr, ptr %47, i32 2
  %50 = getelementptr ptr, ptr %47, i32 3
  %51 = getelementptr ptr, ptr %47, i32 4
  %52 = load i64, ptr %48, align 4
  %53 = load i64, ptr %49, align 4
  %54 = load ptr, ptr %50, align 8
  %55 = load ptr, ptr %51, align 8
  %56 = call i1 @subtype_test_wrapper(ptr %54, i64 %53, i64 %52, i64 1075018126824711487, i64 ptrtoint (ptr @Animal to i64), ptr %55)
  %57 = getelementptr [2 x ptr], ptr %1, i32 0, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = getelementptr ptr, ptr %58, i32 1
  %60 = getelementptr ptr, ptr %58, i32 2
  %61 = getelementptr ptr, ptr %58, i32 3
  %62 = getelementptr ptr, ptr %58, i32 4
  %63 = load i64, ptr %59, align 4
  %64 = load i64, ptr %60, align 4
  %65 = load ptr, ptr %61, align 8
  %66 = load ptr, ptr %62, align 8
  %67 = call i1 @subtype_test_wrapper(ptr %65, i64 %64, i64 %63, i64 -6124772949900838462, i64 ptrtoint (ptr @Beaver to i64), ptr %66)
  br label %68

68:                                               ; preds = %45, %44
  %.reload6 = load i32, ptr %.reg2mem5, align 4
  store i32 %.reload6, ptr %.reg2mem15, align 4
  br label %69

69:                                               ; preds = %68, %17
  %.reload16 = load i32, ptr %.reg2mem15, align 4
  store i32 %.reload16, ptr %.reg2mem3, align 4
  br label %70

70:                                               ; preds = %69
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  %71 = zext i32 %.reload4 to i64
  %72 = trunc i64 %71 to i32
  switch i32 %72, label %75 [
    i32 0, label %73
  ]

73:                                               ; preds = %70
  %.reload11 = load i1, ptr %.reg2mem9, align 1
  %74 = select i1 %.reload11, i32 4, i32 6
  store i32 %74, ptr %.reg2mem1, align 4
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem13, align 4
  br label %88

75:                                               ; preds = %70
  %.reload10 = load i1, ptr %.reg2mem9, align 1
  %76 = select i1 %.reload10, i32 3, i32 5
  store i32 %76, ptr %.reg2mem, align 4
  %77 = getelementptr [2 x ptr], ptr %1, i32 0, i32 1
  %78 = load ptr, ptr %77, align 8
  %79 = getelementptr ptr, ptr %78, i32 1
  %80 = getelementptr ptr, ptr %78, i32 2
  %81 = getelementptr ptr, ptr %78, i32 3
  %82 = getelementptr ptr, ptr %78, i32 4
  %83 = load i64, ptr %79, align 4
  %84 = load i64, ptr %80, align 4
  %85 = load ptr, ptr %81, align 8
  %86 = load ptr, ptr %82, align 8
  %87 = call i1 @subtype_test_wrapper(ptr %85, i64 %84, i64 %83, i64 -757315540097298781, i64 ptrtoint (ptr @f64_typ to i64), ptr %86)
  %.reload = load i32, ptr %.reg2mem, align 4
  store i32 %.reload, ptr %.reg2mem13, align 4
  br label %88

88:                                               ; preds = %75, %73
  %.reload14 = load i32, ptr %.reg2mem13, align 4
  %89 = zext i32 %.reload14 to i64
  %90 = or i64 0, %89
  %91 = inttoptr i64 %90 to ptr
  %92 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %93 = ptrtoint ptr %91 to i64
  %94 = trunc i64 %93 to i32
  %95 = getelementptr [7 x ptr], ptr %92, i32 0, i32 %94
  %96 = getelementptr ptr, ptr %95, i32 7
  %97 = load ptr, ptr %96, align 8
  ret ptr %97
}

define void @Bard_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Bard)
  %19 = call ptr @llvm.invariant.start.p0(i64 24, ptr %6)
  ret void
}

define void @Bard_take_aPtri32_bPtrf64({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3, { ptr, i160 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @Bard)
  %21 = call ptr @llvm.invariant.start.p0(i64 24, ptr %8)
  %22 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %22, align 8
  %23 = getelementptr { ptr, i160 }, ptr %22, i32 0, i32 1
  %24 = load i32, ptr %23, align 4
  %25 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %4, ptr %25, align 8
  %26 = getelementptr { ptr, i160 }, ptr %25, i32 0, i32 1
  %27 = load double, ptr %26, align 8
  %28 = alloca i160, align 8
  %29 = alloca ptr, align 8
  store i32 %24, ptr %28, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %29, align 4
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, i160 } undef, ptr %30, 0
  %32 = load i160, ptr %28, align 4
  %33 = insertvalue { ptr, i160 } %31, i160 %32, 1
  %34 = alloca [1 x ptr], align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 8, ptr %34)
  %36 = getelementptr [1 x ptr], ptr %34, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %36, align 8
  %37 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %38 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %39 = alloca [1 x ptr], align 8
  %40 = getelementptr [1 x ptr], ptr %39, i32 0, i32 0
  store ptr %30, ptr %40, align 8
  %41 = call ptr %38(ptr %39, { ptr, i160 } %33)
  call void %41(ptr %34, { ptr, i160 } %33)
  %42 = alloca i160, align 8
  %43 = alloca ptr, align 8
  store double %27, ptr %42, align 8
  store i64 ptrtoint (ptr @f64_typ to i64), ptr %43, align 4
  %44 = load ptr, ptr %43, align 8
  %45 = insertvalue { ptr, i160 } undef, ptr %44, 0
  %46 = load i160, ptr %42, align 4
  %47 = insertvalue { ptr, i160 } %45, i160 %46, 1
  %48 = alloca [1 x ptr], align 8
  %49 = call ptr @llvm.invariant.start.p0(i64 8, ptr %48)
  %50 = getelementptr [1 x ptr], ptr %48, i32 0, i32 0
  store ptr @_parameterization_Ptrf64, ptr %50, align 8
  %51 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %52 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %53 = alloca [1 x ptr], align 8
  %54 = getelementptr [1 x ptr], ptr %53, i32 0, i32 0
  store ptr %44, ptr %54, align 8
  %55 = call ptr %52(ptr %53, { ptr, i160 } %47)
  call void %55(ptr %48, { ptr, i160 } %47)
  ret void
}

define void @Bard_take_aPtri32_bPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3, { ptr, i160 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @Bard)
  %21 = call ptr @llvm.invariant.start.p0(i64 24, ptr %8)
  %22 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %22, align 8
  %23 = getelementptr { ptr, i160 }, ptr %22, i32 0, i32 1
  %24 = load i32, ptr %23, align 4
  %25 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %4, ptr %25, align 8
  %26 = getelementptr { ptr, i160 }, ptr %25, i32 0, i32 1
  %27 = load i32, ptr %26, align 4
  %28 = alloca i160, align 8
  %29 = alloca ptr, align 8
  store i32 %24, ptr %28, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %29, align 4
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, i160 } undef, ptr %30, 0
  %32 = load i160, ptr %28, align 4
  %33 = insertvalue { ptr, i160 } %31, i160 %32, 1
  %34 = alloca [1 x ptr], align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 8, ptr %34)
  %36 = getelementptr [1 x ptr], ptr %34, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %36, align 8
  %37 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %38 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %39 = alloca [1 x ptr], align 8
  %40 = getelementptr [1 x ptr], ptr %39, i32 0, i32 0
  store ptr %30, ptr %40, align 8
  %41 = call ptr %38(ptr %39, { ptr, i160 } %33)
  call void %41(ptr %34, { ptr, i160 } %33)
  %42 = alloca i160, align 8
  %43 = alloca ptr, align 8
  store i32 %27, ptr %42, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %43, align 4
  %44 = load ptr, ptr %43, align 8
  %45 = insertvalue { ptr, i160 } undef, ptr %44, 0
  %46 = load i160, ptr %42, align 4
  %47 = insertvalue { ptr, i160 } %45, i160 %46, 1
  %48 = alloca [1 x ptr], align 8
  %49 = call ptr @llvm.invariant.start.p0(i64 8, ptr %48)
  %50 = getelementptr [1 x ptr], ptr %48, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %50, align 8
  %51 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %52 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %53 = alloca [1 x ptr], align 8
  %54 = getelementptr [1 x ptr], ptr %53, i32 0, i32 0
  store ptr %44, ptr %54, align 8
  %55 = call ptr %52(ptr %53, { ptr, i160 } %47)
  call void %55(ptr %48, { ptr, i160 } %47)
  ret void
}

define void @Bard_take_aPtrf64_bPtrf64({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3, { ptr, i160 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @Bard)
  %21 = call ptr @llvm.invariant.start.p0(i64 24, ptr %8)
  %22 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %22, align 8
  %23 = getelementptr { ptr, i160 }, ptr %22, i32 0, i32 1
  %24 = load double, ptr %23, align 8
  %25 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %4, ptr %25, align 8
  %26 = getelementptr { ptr, i160 }, ptr %25, i32 0, i32 1
  %27 = load double, ptr %26, align 8
  %28 = alloca i160, align 8
  %29 = alloca ptr, align 8
  store double %24, ptr %28, align 8
  store i64 ptrtoint (ptr @f64_typ to i64), ptr %29, align 4
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, i160 } undef, ptr %30, 0
  %32 = load i160, ptr %28, align 4
  %33 = insertvalue { ptr, i160 } %31, i160 %32, 1
  %34 = alloca [1 x ptr], align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 8, ptr %34)
  %36 = getelementptr [1 x ptr], ptr %34, i32 0, i32 0
  store ptr @_parameterization_Ptrf64, ptr %36, align 8
  %37 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %38 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %39 = alloca [1 x ptr], align 8
  %40 = getelementptr [1 x ptr], ptr %39, i32 0, i32 0
  store ptr %30, ptr %40, align 8
  %41 = call ptr %38(ptr %39, { ptr, i160 } %33)
  call void %41(ptr %34, { ptr, i160 } %33)
  %42 = alloca i160, align 8
  %43 = alloca ptr, align 8
  store double %27, ptr %42, align 8
  store i64 ptrtoint (ptr @f64_typ to i64), ptr %43, align 4
  %44 = load ptr, ptr %43, align 8
  %45 = insertvalue { ptr, i160 } undef, ptr %44, 0
  %46 = load i160, ptr %42, align 4
  %47 = insertvalue { ptr, i160 } %45, i160 %46, 1
  %48 = alloca [1 x ptr], align 8
  %49 = call ptr @llvm.invariant.start.p0(i64 8, ptr %48)
  %50 = getelementptr [1 x ptr], ptr %48, i32 0, i32 0
  store ptr @_parameterization_Ptrf64, ptr %50, align 8
  %51 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %52 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %53 = alloca [1 x ptr], align 8
  %54 = getelementptr [1 x ptr], ptr %53, i32 0, i32 0
  store ptr %44, ptr %54, align 8
  %55 = call ptr %52(ptr %53, { ptr, i160 } %47)
  call void %55(ptr %48, { ptr, i160 } %47)
  ret void
}

define void @Bard_take_aAnimal_bBeaver({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3, { ptr, i160 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @Bard)
  %21 = call ptr @llvm.invariant.start.p0(i64 24, ptr %8)
  %22 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %22, align 8
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @Animal)
  %36 = call ptr @llvm.invariant.start.p0(i64 24, ptr %23)
  %37 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %4, ptr %37, align 8
  %38 = alloca { ptr, ptr, ptr, i32 }, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 0
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 0
  %41 = load ptr, ptr %39, align 8
  store ptr %41, ptr %40, align 8
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 1
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %44 = load ptr, ptr %42, align 8
  store ptr %44, ptr %43, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 2
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 2
  %47 = load ptr, ptr %45, align 8
  store ptr %47, ptr %46, align 8
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 3
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %50 = load i32, ptr %48, align 4
  store i32 %50, ptr %49, align 4
  call void @set_offset(ptr %38, ptr @Beaver)
  %51 = call ptr @llvm.invariant.start.p0(i64 24, ptr %38)
  %52 = call ptr @malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 8) to i64))
  %53 = alloca ptr, align 8
  store ptr %52, ptr %53, align 8
  %54 = alloca { ptr, ptr, ptr, i32 }, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 0
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 0
  %57 = load ptr, ptr %55, align 8
  store ptr %57, ptr %56, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 1
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 1
  %60 = load ptr, ptr %58, align 8
  store ptr %60, ptr %59, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 2
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 2
  %63 = load ptr, ptr %61, align 8
  store ptr %63, ptr %62, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 3
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 3
  %66 = load i32, ptr %64, align 4
  store i32 %66, ptr %65, align 4
  %67 = call ptr @llvm.invariant.start.p0(i64 16, ptr %54)
  %68 = load ptr, ptr %54, align 8
  %69 = getelementptr i8, ptr %68, i64 0
  %70 = load i56, ptr @vqhpi_animal, align 4
  store i56 %70, ptr %69, align 4
  %71 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %72 = alloca { ptr, ptr, ptr, i32 }, align 8
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 1
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 3
  store ptr @String, ptr %72, align 8
  store ptr %71, ptr %73, align 8
  store i32 7, ptr %74, align 4
  %75 = call ptr @llvm.invariant.start.p0(i64 16, ptr %72)
  %76 = getelementptr { ptr }, ptr %54, i32 0, i32 0
  %77 = load ptr, ptr %76, align 8
  %78 = insertvalue { ptr } undef, ptr %77, 0
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 0
  %80 = load ptr, ptr %79, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %80, 0
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 1
  %83 = load ptr, ptr %82, align 8
  %84 = insertvalue { ptr, ptr, ptr, i32 } %81, ptr %83, 1
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 2
  %86 = load ptr, ptr %85, align 8
  %87 = insertvalue { ptr, ptr, ptr, i32 } %84, ptr %86, 2
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 3
  %89 = load i32, ptr %88, align 4
  %90 = insertvalue { ptr, ptr, ptr, i32 } %87, i32 %89, 3
  %91 = alloca [3 x ptr], align 8
  %92 = call ptr @llvm.invariant.start.p0(i64 24, ptr %91)
  %93 = getelementptr [3 x ptr], ptr %91, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %93, align 8
  %94 = getelementptr [3 x ptr], ptr %91, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %94, align 8
  %95 = getelementptr [3 x ptr], ptr %91, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %95, align 8
  %96 = call ptr @llvm.invariant.start.p0(i64 280, ptr %80)
  %97 = getelementptr ptr, ptr %80, i32 %89
  %98 = getelementptr ptr, ptr %97, i32 4
  %99 = load ptr, ptr %98, align 8
  %100 = alloca [3 x ptr], align 8
  %101 = getelementptr [3 x ptr], ptr %100, i32 0, i32 0
  store ptr @buffer_typ, ptr %101, align 8
  %102 = getelementptr [3 x ptr], ptr %100, i32 0, i32 1
  store ptr @i32_typ, ptr %102, align 8
  %103 = getelementptr [3 x ptr], ptr %100, i32 0, i32 2
  store ptr @i32_typ, ptr %103, align 8
  %104 = call ptr %99({ ptr, ptr, ptr, i32 } %90, ptr %100, { ptr } %78, i32 7, i32 8)
  call void %104({ ptr, ptr, ptr, i32 } %90, { ptr, ptr, ptr, i32 } %90, ptr %91, { ptr } %78, i32 7, i32 8)
  %105 = getelementptr { ptr, i160 }, ptr %72, i32 0, i32 0
  %106 = load ptr, ptr %105, align 8
  %107 = insertvalue { ptr, i160 } undef, ptr %106, 0
  %108 = getelementptr { ptr, i160 }, ptr %72, i32 0, i32 1
  %109 = load i160, ptr %108, align 4
  %110 = insertvalue { ptr, i160 } %107, i160 %109, 1
  %111 = alloca [1 x ptr], align 8
  %112 = call ptr @llvm.invariant.start.p0(i64 8, ptr %111)
  %113 = getelementptr [1 x ptr], ptr %111, i32 0, i32 0
  store ptr @_parameterization_String, ptr %113, align 8
  %114 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %115 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %116 = alloca [1 x ptr], align 8
  %117 = getelementptr [1 x ptr], ptr %116, i32 0, i32 0
  store ptr %106, ptr %117, align 8
  %118 = call ptr %115(ptr %116, { ptr, i160 } %110)
  call void %118(ptr %111, { ptr, i160 } %110)
  %119 = call ptr @malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 8) to i64))
  %120 = alloca ptr, align 8
  store ptr %119, ptr %120, align 8
  %121 = alloca { ptr, ptr, ptr, i32 }, align 8
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 0
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %121, i32 0, i32 0
  %124 = load ptr, ptr %122, align 8
  store ptr %124, ptr %123, align 8
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 1
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %121, i32 0, i32 1
  %127 = load ptr, ptr %125, align 8
  store ptr %127, ptr %126, align 8
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 2
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %121, i32 0, i32 2
  %130 = load ptr, ptr %128, align 8
  store ptr %130, ptr %129, align 8
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 3
  %132 = getelementptr { ptr, ptr, ptr, i32 }, ptr %121, i32 0, i32 3
  %133 = load i32, ptr %131, align 4
  store i32 %133, ptr %132, align 4
  %134 = call ptr @llvm.invariant.start.p0(i64 16, ptr %121)
  %135 = load ptr, ptr %121, align 8
  %136 = getelementptr i8, ptr %135, i64 0
  %137 = load i56, ptr @nvfvo_beaver, align 4
  store i56 %137, ptr %136, align 4
  %138 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %139 = alloca { ptr, ptr, ptr, i32 }, align 8
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %139, i32 0, i32 1
  %141 = getelementptr { ptr, ptr, ptr, i32 }, ptr %139, i32 0, i32 3
  store ptr @String, ptr %139, align 8
  store ptr %138, ptr %140, align 8
  store i32 7, ptr %141, align 4
  %142 = call ptr @llvm.invariant.start.p0(i64 16, ptr %139)
  %143 = getelementptr { ptr }, ptr %121, i32 0, i32 0
  %144 = load ptr, ptr %143, align 8
  %145 = insertvalue { ptr } undef, ptr %144, 0
  %146 = getelementptr { ptr, ptr, ptr, i32 }, ptr %139, i32 0, i32 0
  %147 = load ptr, ptr %146, align 8
  %148 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %147, 0
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %139, i32 0, i32 1
  %150 = load ptr, ptr %149, align 8
  %151 = insertvalue { ptr, ptr, ptr, i32 } %148, ptr %150, 1
  %152 = getelementptr { ptr, ptr, ptr, i32 }, ptr %139, i32 0, i32 2
  %153 = load ptr, ptr %152, align 8
  %154 = insertvalue { ptr, ptr, ptr, i32 } %151, ptr %153, 2
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %139, i32 0, i32 3
  %156 = load i32, ptr %155, align 4
  %157 = insertvalue { ptr, ptr, ptr, i32 } %154, i32 %156, 3
  %158 = alloca [3 x ptr], align 8
  %159 = call ptr @llvm.invariant.start.p0(i64 24, ptr %158)
  %160 = getelementptr [3 x ptr], ptr %158, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %160, align 8
  %161 = getelementptr [3 x ptr], ptr %158, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %161, align 8
  %162 = getelementptr [3 x ptr], ptr %158, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %162, align 8
  %163 = call ptr @llvm.invariant.start.p0(i64 280, ptr %147)
  %164 = getelementptr ptr, ptr %147, i32 %156
  %165 = getelementptr ptr, ptr %164, i32 4
  %166 = load ptr, ptr %165, align 8
  %167 = alloca [3 x ptr], align 8
  %168 = getelementptr [3 x ptr], ptr %167, i32 0, i32 0
  store ptr @buffer_typ, ptr %168, align 8
  %169 = getelementptr [3 x ptr], ptr %167, i32 0, i32 1
  store ptr @i32_typ, ptr %169, align 8
  %170 = getelementptr [3 x ptr], ptr %167, i32 0, i32 2
  store ptr @i32_typ, ptr %170, align 8
  %171 = call ptr %166({ ptr, ptr, ptr, i32 } %157, ptr %167, { ptr } %145, i32 7, i32 8)
  call void %171({ ptr, ptr, ptr, i32 } %157, { ptr, ptr, ptr, i32 } %157, ptr %158, { ptr } %145, i32 7, i32 8)
  %172 = getelementptr { ptr, i160 }, ptr %139, i32 0, i32 0
  %173 = load ptr, ptr %172, align 8
  %174 = insertvalue { ptr, i160 } undef, ptr %173, 0
  %175 = getelementptr { ptr, i160 }, ptr %139, i32 0, i32 1
  %176 = load i160, ptr %175, align 4
  %177 = insertvalue { ptr, i160 } %174, i160 %176, 1
  %178 = alloca [1 x ptr], align 8
  %179 = call ptr @llvm.invariant.start.p0(i64 8, ptr %178)
  %180 = getelementptr [1 x ptr], ptr %178, i32 0, i32 0
  store ptr @_parameterization_String, ptr %180, align 8
  %181 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %182 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %183 = alloca [1 x ptr], align 8
  %184 = getelementptr [1 x ptr], ptr %183, i32 0, i32 0
  store ptr %173, ptr %184, align 8
  %185 = call ptr %182(ptr %183, { ptr, i160 } %177)
  call void %185(ptr %178, { ptr, i160 } %177)
  ret void
}

define ptr @Iterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [2 x ptr], ptr %4, i32 0, i32 1
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @report_exception({ ptr } %0) {
  %2 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr } %0, ptr %2, align 8
  %3 = load ptr, ptr %2, align 8
  %4 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %3, i32 0, i32 4
  %5 = load { ptr, i160 }, ptr %4, align 8
  %6 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %5, ptr %6, align 8
  %7 = getelementptr { ptr, i160 }, ptr %6, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = ptrtoint ptr %8 to i64
  %10 = icmp ne i64 %9, ptrtoint (ptr @nil_typ to i64)
  %11 = alloca { ptr, ptr, ptr, i32 }, align 8
  %12 = alloca [0 x ptr], align 8
  %13 = alloca [0 x ptr], align 8
  br i1 %10, label %14, label %._crit_edge

._crit_edge:                                      ; preds = %1
  br label %52

14:                                               ; preds = %1
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 0
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 2
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %26 = load i32, ptr %24, align 4
  store i32 %26, ptr %25, align 4
  call void @set_offset(ptr %11, ptr @Exception)
  %27 = call ptr @llvm.invariant.start.p0(i64 24, ptr %11)
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %29, 0
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %32 = load ptr, ptr %31, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %32, 1
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 2
  %35 = load ptr, ptr %34, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %35, 2
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %38 = load i32, ptr %37, align 4
  %39 = insertvalue { ptr, ptr, ptr, i32 } %36, i32 %38, 3
  %40 = call ptr @llvm.invariant.start.p0(i64 0, ptr %12)
  %41 = call ptr @llvm.invariant.start.p0(i64 104, ptr %29)
  %42 = getelementptr ptr, ptr %29, i32 %38
  %43 = getelementptr ptr, ptr %42, i32 6
  %44 = load ptr, ptr %43, align 8
  %45 = call ptr %44({ ptr, ptr, ptr, i32 } %39, ptr %13)
  call void %45({ ptr, ptr, ptr, i32 } %39, { ptr, ptr, ptr, i32 } %39, ptr %12)
  %46 = getelementptr { ptr, i160 }, ptr %11, i32 0, i32 0
  %47 = getelementptr { ptr, i160 }, ptr %6, i32 0, i32 0
  %48 = load ptr, ptr %46, align 8
  store ptr %48, ptr %47, align 8
  %49 = getelementptr { ptr, i160 }, ptr %11, i32 0, i32 1
  %50 = getelementptr { ptr, i160 }, ptr %6, i32 0, i32 1
  %51 = load i160, ptr %49, align 4
  store i160 %51, ptr %50, align 4
  br label %52

52:                                               ; preds = %._crit_edge, %14
  ret void
}

define ptr @IntIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [2 x ptr], ptr %4, i32 0, i32 1
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @IntIterable_B_each_fFunctionPtri32_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [24 x ptr], ptr %16, i32 0, i32 11
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @IntIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1, i32 %2, { ptr } %3) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = getelementptr [2 x ptr], ptr %1, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr ptr, ptr %7, i32 1
  %9 = getelementptr ptr, ptr %7, i32 2
  %10 = getelementptr ptr, ptr %7, i32 3
  %11 = getelementptr ptr, ptr %7, i32 4
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %15)
  %17 = getelementptr [2 x ptr], ptr %1, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr ptr, ptr %18, i32 1
  %20 = getelementptr ptr, ptr %18, i32 2
  %21 = getelementptr ptr, ptr %18, i32 3
  %22 = getelementptr ptr, ptr %18, i32 4
  %23 = load i64, ptr %19, align 4
  %24 = load i64, ptr %20, align 4
  %25 = load ptr, ptr %21, align 8
  %26 = load ptr, ptr %22, align 8
  %27 = call i1 @subtype_test_wrapper(ptr %25, i64 %24, i64 %23, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %26)
  %28 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %29 = getelementptr [24 x ptr], ptr %28, i32 0, i32 12
  %30 = getelementptr ptr, ptr %29, i32 7
  %31 = load ptr, ptr %30, align 8
  ret ptr %31
}

define ptr @IntIterable_B_all_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [24 x ptr], ptr %16, i32 0, i32 13
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @IntIterable_B_any_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [24 x ptr], ptr %16, i32 0, i32 14
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @IntIterable_B_map_fFunctionPtri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [24 x ptr], ptr %16, i32 0, i32 15
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @IntIterable_B_filter_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [24 x ptr], ptr %16, i32 0, i32 16
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @IntIterable_B_chain_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [24 x ptr], ptr %16, i32 0, i32 17
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @IntIterable_B_interleave_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [24 x ptr], ptr %16, i32 0, i32 18
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @IntIterable_B_zip_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [24 x ptr], ptr %16, i32 0, i32 19
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @IntIterable_B_product_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [24 x ptr], ptr %16, i32 0, i32 20
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @IntIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [24 x ptr], ptr %4, i32 0, i32 21
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @IntTupleIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [4 x ptr], ptr %4, i32 0, i32 1
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @IntTupleIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [2 x ptr], ptr %4, i32 0, i32 1
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Iterator2_field_Iterator2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  ret ptr %2
}

define ptr @Iterator2_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [3 x ptr], ptr %4, i32 0, i32 2
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Iterable2_field_Iterable2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  ret ptr %2
}

define ptr @Iterable2_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [23 x ptr], ptr %4, i32 0, i32 12
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Iterable2_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [23 x ptr], ptr %16, i32 0, i32 13
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @Iterable2_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, i160 } %2, { ptr } %3) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %6 = getelementptr [2 x ptr], ptr %1, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr ptr, ptr %7, i32 1
  %9 = getelementptr ptr, ptr %7, i32 2
  %10 = getelementptr ptr, ptr %7, i32 3
  %11 = getelementptr ptr, ptr %7, i32 4
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 3282773614056351330, i64 ptrtoint (ptr @Object to i64), ptr %15)
  %17 = getelementptr [2 x ptr], ptr %1, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr ptr, ptr %18, i32 1
  %20 = getelementptr ptr, ptr %18, i32 2
  %21 = getelementptr ptr, ptr %18, i32 3
  %22 = getelementptr ptr, ptr %18, i32 4
  %23 = load i64, ptr %19, align 4
  %24 = load i64, ptr %20, align 4
  %25 = load ptr, ptr %21, align 8
  %26 = load ptr, ptr %22, align 8
  %27 = call i1 @subtype_test_wrapper(ptr %25, i64 %24, i64 %23, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %26)
  %28 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %29 = getelementptr [23 x ptr], ptr %28, i32 0, i32 14
  %30 = getelementptr ptr, ptr %29, i32 7
  %31 = load ptr, ptr %30, align 8
  ret ptr %31
}

define ptr @Iterable2_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [23 x ptr], ptr %16, i32 0, i32 15
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @Iterable2_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [23 x ptr], ptr %16, i32 0, i32 16
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @Iterable2_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [23 x ptr], ptr %16, i32 0, i32 17
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @Iterable2_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [23 x ptr], ptr %16, i32 0, i32 18
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @Iterable2_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [23 x ptr], ptr %16, i32 0, i32 19
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @Iterable2_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [23 x ptr], ptr %16, i32 0, i32 20
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @Iterable2_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [23 x ptr], ptr %16, i32 0, i32 21
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define ptr @Iterable2_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1, { ptr, ptr, ptr, i32 } %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %5 = getelementptr [1 x ptr], ptr %1, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr ptr, ptr %6, i32 1
  %8 = getelementptr ptr, ptr %6, i32 2
  %9 = getelementptr ptr, ptr %6, i32 3
  %10 = getelementptr ptr, ptr %6, i32 4
  %11 = load i64, ptr %7, align 4
  %12 = load i64, ptr %8, align 4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %10, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %13, i64 %12, i64 %11, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %14)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr [23 x ptr], ptr %16, i32 0, i32 22
  %18 = getelementptr ptr, ptr %17, i32 7
  %19 = load ptr, ptr %18, align 8
  ret ptr %19
}

define void @number_taker({ ptr, i64 } %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = call ptr @malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 7) to i64))
  %3 = alloca ptr, align 8
  store ptr %2, ptr %3, align 8
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = load i32, ptr %14, align 4
  store i32 %16, ptr %15, align 4
  %17 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %18 = load ptr, ptr %4, align 8
  %19 = getelementptr i8, ptr %18, i64 0
  %20 = load i48, ptr @kzfde_number, align 4
  store i48 %20, ptr %19, align 4
  %21 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  store ptr @String, ptr %22, align 8
  store ptr %21, ptr %23, align 8
  store i32 7, ptr %24, align 4
  %25 = call ptr @llvm.invariant.start.p0(i64 16, ptr %22)
  %26 = getelementptr { ptr }, ptr %4, i32 0, i32 0
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr } undef, ptr %27, 0
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %30, 0
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %33, 1
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %36, 2
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %39 = load i32, ptr %38, align 4
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %39, 3
  %41 = alloca [3 x ptr], align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 24, ptr %41)
  %43 = getelementptr [3 x ptr], ptr %41, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %43, align 8
  %44 = getelementptr [3 x ptr], ptr %41, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %44, align 8
  %45 = getelementptr [3 x ptr], ptr %41, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %45, align 8
  %46 = call ptr @llvm.invariant.start.p0(i64 280, ptr %30)
  %47 = getelementptr ptr, ptr %30, i32 %39
  %48 = getelementptr ptr, ptr %47, i32 4
  %49 = load ptr, ptr %48, align 8
  %50 = alloca [3 x ptr], align 8
  %51 = getelementptr [3 x ptr], ptr %50, i32 0, i32 0
  store ptr @buffer_typ, ptr %51, align 8
  %52 = getelementptr [3 x ptr], ptr %50, i32 0, i32 1
  store ptr @i32_typ, ptr %52, align 8
  %53 = getelementptr [3 x ptr], ptr %50, i32 0, i32 2
  store ptr @i32_typ, ptr %53, align 8
  %54 = call ptr %49({ ptr, ptr, ptr, i32 } %40, ptr %50, { ptr } %28, i32 6, i32 7)
  call void %54({ ptr, ptr, ptr, i32 } %40, { ptr, ptr, ptr, i32 } %40, ptr %41, { ptr } %28, i32 6, i32 7)
  %55 = load { ptr, ptr, ptr, i32 }, ptr %22, align 8
  %56 = call i32 (ptr, ...) @printf(ptr @i32_string, { ptr, ptr, ptr, i32 } %55)
  ret void
}

define i32 @early_return_in_else() {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret i32 1
}

define void @make_em_speak({ ptr, ptr, ptr, i32 } %0) {
  %2 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %2, align 8
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %2)
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = load i32, ptr %14, align 4
  store i32 %16, ptr %15, align 4
  call void @set_offset(ptr %4, ptr @Animal)
  %17 = call ptr @llvm.invariant.start.p0(i64 24, ptr %4)
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %19 = load ptr, ptr %18, align 8
  %20 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %19, 0
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %22 = load ptr, ptr %21, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } %20, ptr %22, 1
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %25 = load ptr, ptr %24, align 8
  %26 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %25, 2
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %28 = load i32, ptr %27, align 4
  %29 = insertvalue { ptr, ptr, ptr, i32 } %26, i32 %28, 3
  %30 = alloca [0 x ptr], align 8
  %31 = call ptr @llvm.invariant.start.p0(i64 0, ptr %30)
  %32 = call ptr @llvm.invariant.start.p0(i64 104, ptr %19)
  %33 = getelementptr ptr, ptr %19, i32 %28
  %34 = getelementptr ptr, ptr %33, i32 4
  %35 = load ptr, ptr %34, align 8
  %36 = alloca [0 x ptr], align 8
  %37 = call ptr %35({ ptr, ptr, ptr, i32 } %29, ptr %36)
  call void %37({ ptr, ptr, ptr, i32 } %29, { ptr, ptr, ptr, i32 } %29, ptr %30)
  ret void
}

define i32 @fibonacci(i32 %0) {
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp slt i32 %0, 2
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  br i1 %2, label %10, label %11

10:                                               ; preds = %1
  store i32 %0, ptr %.reg2mem3, align 4
  br label %24

11:                                               ; preds = %1
  store i32 2, ptr %3, align 4
  %12 = load i32, ptr %3, align 4
  %13 = sub i32 %0, %12
  store i32 %13, ptr %4, align 4
  %14 = load i32, ptr %4, align 4
  %15 = call i32 @fibonacci(i32 %14)
  store i32 %15, ptr %5, align 4
  store i32 1, ptr %6, align 4
  %16 = load i32, ptr %6, align 4
  %17 = sub i32 %0, %16
  store i32 %17, ptr %7, align 4
  %18 = load i32, ptr %7, align 4
  %19 = call i32 @fibonacci(i32 %18)
  store i32 %19, ptr %8, align 4
  %20 = load i32, ptr %5, align 4
  %21 = load i32, ptr %8, align 4
  %22 = add i32 %20, %21
  store i32 %22, ptr %9, align 4
  %23 = load i32, ptr %9, align 4
  store i32 %23, ptr %.reg2mem1, align 4
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem3, align 4
  br label %24

24:                                               ; preds = %11, %10
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  store i32 %.reload4, ptr %.reg2mem, align 4
  br label %25

25:                                               ; preds = %24
  %.reload = load i32, ptr %.reg2mem, align 4
  ret i32 %.reload
}

define i32 @factorial(i32 %0) {
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i32, align 4
  %.reg2mem5 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp slt i32 %0, 2
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  br i1 %2, label %8, label %10

8:                                                ; preds = %1
  store i32 1, ptr %3, align 4
  %9 = load i32, ptr %3, align 4
  store i32 %9, ptr %.reg2mem3, align 4
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  store i32 %.reload4, ptr %.reg2mem5, align 4
  br label %18

10:                                               ; preds = %1
  store i32 1, ptr %4, align 4
  %11 = load i32, ptr %4, align 4
  %12 = sub i32 %0, %11
  store i32 %12, ptr %5, align 4
  %13 = load i32, ptr %5, align 4
  %14 = call i32 @factorial(i32 %13)
  store i32 %14, ptr %6, align 4
  %15 = load i32, ptr %6, align 4
  %16 = mul i32 %0, %15
  store i32 %16, ptr %7, align 4
  %17 = load i32, ptr %7, align 4
  store i32 %17, ptr %.reg2mem1, align 4
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem5, align 4
  br label %18

18:                                               ; preds = %10, %8
  %.reload6 = load i32, ptr %.reg2mem5, align 4
  store i32 %.reload6, ptr %.reg2mem, align 4
  br label %19

19:                                               ; preds = %18
  %.reload = load i32, ptr %.reg2mem, align 4
  ret i32 %.reload
}

define void @throw() {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %1 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ i32, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr null, i32 1) to i64))
  %2 = alloca { ptr, ptr, ptr, i32 }, align 8
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %4 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  store ptr @Exception, ptr %2, align 8
  store ptr %1, ptr %3, align 8
  store i32 7, ptr %4, align 4
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %2)
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %7, 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, ptr %13, 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %16 = load i32, ptr %15, align 4
  %17 = insertvalue { ptr, ptr, ptr, i32 } %14, i32 %16, 3
  %18 = alloca [0 x ptr], align 8
  %19 = call ptr @llvm.invariant.start.p0(i64 0, ptr %18)
  %20 = call ptr @llvm.invariant.start.p0(i64 104, ptr %7)
  %21 = getelementptr ptr, ptr %7, i32 %16
  %22 = getelementptr ptr, ptr %21, i32 4
  %23 = load ptr, ptr %22, align 8
  %24 = alloca [0 x ptr], align 8
  %25 = call ptr %23({ ptr, ptr, ptr, i32 } %17, ptr %24)
  call void %25({ ptr, ptr, ptr, i32 } %17, { ptr, ptr, ptr, i32 } %17, ptr %18)
  %26 = call ptr @malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 11) to i64))
  %27 = alloca ptr, align 8
  store ptr %26, ptr %27, align 8
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 0
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 1
  %34 = load ptr, ptr %32, align 8
  store ptr %34, ptr %33, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 2
  %37 = load ptr, ptr %35, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 3
  %40 = load i32, ptr %38, align 4
  store i32 %40, ptr %39, align 4
  %41 = call ptr @llvm.invariant.start.p0(i64 16, ptr %28)
  %42 = load ptr, ptr %28, align 8
  %43 = getelementptr i8, ptr %42, i64 0
  %44 = load i80, ptr @jnfsf_testsmini, align 4
  store i80 %44, ptr %43, align 4
  %45 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %46 = alloca { ptr, ptr, ptr, i32 }, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  store ptr @String, ptr %46, align 8
  store ptr %45, ptr %47, align 8
  store i32 7, ptr %48, align 4
  %49 = call ptr @llvm.invariant.start.p0(i64 16, ptr %46)
  %50 = getelementptr { ptr }, ptr %28, i32 0, i32 0
  %51 = load ptr, ptr %50, align 8
  %52 = insertvalue { ptr } undef, ptr %51, 0
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %54 = load ptr, ptr %53, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %54, 0
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %57, 1
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } %58, ptr %60, 2
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %63 = load i32, ptr %62, align 4
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, i32 %63, 3
  %65 = alloca [3 x ptr], align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 24, ptr %65)
  %67 = getelementptr [3 x ptr], ptr %65, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %67, align 8
  %68 = getelementptr [3 x ptr], ptr %65, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %68, align 8
  %69 = getelementptr [3 x ptr], ptr %65, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %69, align 8
  %70 = call ptr @llvm.invariant.start.p0(i64 280, ptr %54)
  %71 = getelementptr ptr, ptr %54, i32 %63
  %72 = getelementptr ptr, ptr %71, i32 4
  %73 = load ptr, ptr %72, align 8
  %74 = alloca [3 x ptr], align 8
  %75 = getelementptr [3 x ptr], ptr %74, i32 0, i32 0
  store ptr @buffer_typ, ptr %75, align 8
  %76 = getelementptr [3 x ptr], ptr %74, i32 0, i32 1
  store ptr @i32_typ, ptr %76, align 8
  %77 = getelementptr [3 x ptr], ptr %74, i32 0, i32 2
  store ptr @i32_typ, ptr %77, align 8
  %78 = call ptr %73({ ptr, ptr, ptr, i32 } %64, ptr %74, { ptr } %52, i32 10, i32 11)
  call void %78({ ptr, ptr, ptr, i32 } %64, { ptr, ptr, ptr, i32 } %64, ptr %65, { ptr } %52, i32 10, i32 11)
  %79 = alloca { ptr, ptr, ptr, i32 }, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %79, i32 0, i32 0
  %82 = load ptr, ptr %80, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %79, i32 0, i32 1
  %85 = load ptr, ptr %83, align 8
  store ptr %85, ptr %84, align 8
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %79, i32 0, i32 2
  %88 = load ptr, ptr %86, align 8
  store ptr %88, ptr %87, align 8
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %79, i32 0, i32 3
  %91 = load i32, ptr %89, align 4
  store i32 %91, ptr %90, align 4
  call void @set_offset(ptr %79, ptr @String)
  %92 = call ptr @llvm.invariant.start.p0(i64 24, ptr %79)
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %79, i32 0, i32 0
  %94 = load ptr, ptr %93, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %94, 0
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %79, i32 0, i32 1
  %97 = load ptr, ptr %96, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %97, 1
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %79, i32 0, i32 2
  %100 = load ptr, ptr %99, align 8
  %101 = insertvalue { ptr, ptr, ptr, i32 } %98, ptr %100, 2
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %79, i32 0, i32 3
  %103 = load i32, ptr %102, align 4
  %104 = insertvalue { ptr, ptr, ptr, i32 } %101, i32 %103, 3
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %106 = load ptr, ptr %105, align 8
  %107 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %106, 0
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %109 = load ptr, ptr %108, align 8
  %110 = insertvalue { ptr, ptr, ptr, i32 } %107, ptr %109, 1
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %112 = load ptr, ptr %111, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } %110, ptr %112, 2
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %115 = load i32, ptr %114, align 4
  %116 = insertvalue { ptr, ptr, ptr, i32 } %113, i32 %115, 3
  %117 = alloca [2 x ptr], align 8
  %118 = call ptr @llvm.invariant.start.p0(i64 16, ptr %117)
  %119 = getelementptr [2 x ptr], ptr %117, i32 0, i32 1
  store ptr @_parameterization_String, ptr %119, align 8
  %120 = getelementptr [2 x ptr], ptr %117, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %120, align 8
  %121 = call ptr @llvm.invariant.start.p0(i64 104, ptr %106)
  %122 = getelementptr ptr, ptr %106, i32 %115
  %123 = getelementptr ptr, ptr %122, i32 5
  %124 = load ptr, ptr %123, align 8
  %125 = alloca [2 x ptr], align 8
  %126 = getelementptr [2 x ptr], ptr %125, i32 0, i32 0
  store ptr @i32_typ, ptr %126, align 8
  %127 = getelementptr [2 x ptr], ptr %125, i32 0, i32 1
  store ptr %94, ptr %127, align 8
  %128 = call ptr %124({ ptr, ptr, ptr, i32 } %116, ptr %125, i32 1205, { ptr, ptr, ptr, i32 } %104)
  call void %128({ ptr, ptr, ptr, i32 } %116, { ptr, ptr, ptr, i32 } %116, ptr %117, i32 1205, { ptr, ptr, ptr, i32 } %104)
  %129 = getelementptr { ptr, i160 }, ptr %2, i32 0, i32 0
  %130 = load ptr, ptr %129, align 8
  %131 = insertvalue { ptr, i160 } undef, ptr %130, 0
  %132 = getelementptr { ptr, i160 }, ptr %2, i32 0, i32 1
  %133 = load i160, ptr %132, align 4
  %134 = insertvalue { ptr, i160 } %131, i160 %133, 1
  %135 = call ptr @get_current_coroutine()
  %136 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %135, i32 0, i32 4
  store { ptr, i160 } %134, ptr %136, align 8
  call void @coroutine_yield(ptr %135)
  ret void
}

define void @print88() {
  %1 = alloca i160, align 8
  %2 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store i32 88, ptr %1, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %2, align 4
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, i160 } undef, ptr %3, 0
  %5 = load i160, ptr %1, align 4
  %6 = insertvalue { ptr, i160 } %4, i160 %5, 1
  %7 = alloca [1 x ptr], align 8
  %8 = call ptr @llvm.invariant.start.p0(i64 8, ptr %7)
  %9 = getelementptr [1 x ptr], ptr %7, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %9, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %11 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %12 = alloca [1 x ptr], align 8
  %13 = getelementptr [1 x ptr], ptr %12, i32 0, i32 0
  store ptr %3, ptr %13, align 8
  %14 = call ptr %11(ptr %12, { ptr, i160 } %6)
  call void %14(ptr %7, { ptr, i160 } %6)
  %15 = call ptr @get_current_coroutine()
  call void @coroutine_yield(ptr %15)
  %16 = alloca i160, align 8
  %17 = alloca ptr, align 8
  store i32 90, ptr %16, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %17, align 4
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, i160 } undef, ptr %18, 0
  %20 = load i160, ptr %16, align 4
  %21 = insertvalue { ptr, i160 } %19, i160 %20, 1
  %22 = alloca [1 x ptr], align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 8, ptr %22)
  %24 = getelementptr [1 x ptr], ptr %22, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %24, align 8
  %25 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %26 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %27 = alloca [1 x ptr], align 8
  %28 = getelementptr [1 x ptr], ptr %27, i32 0, i32 0
  store ptr %18, ptr %28, align 8
  %29 = call ptr %26(ptr %27, { ptr, i160 } %21)
  call void %29(ptr %22, { ptr, i160 } %21)
  ret void
}

define void @coroutine_rklccgojvm_passer(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  call void %2()
  ret void
}

define void @coroutine_rklccgojvm_buffer_filler(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret void
}

define void @grabo() {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %1 = call ptr @malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 4) to i64))
  %2 = alloca ptr, align 8
  store ptr %1, ptr %2, align 8
  %3 = alloca { ptr, ptr, ptr, i32 }, align 8
  %4 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %5 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %6 = load ptr, ptr %4, align 8
  store ptr %6, ptr %5, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %15 = load i32, ptr %13, align 4
  store i32 %15, ptr %14, align 4
  %16 = call ptr @llvm.invariant.start.p0(i64 16, ptr %3)
  %17 = load ptr, ptr %3, align 8
  %18 = getelementptr i8, ptr %17, i64 0
  %19 = load i24, ptr @gllgh_one, align 4
  store i24 %19, ptr %18, align 4
  %20 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  store ptr @String, ptr %21, align 8
  store ptr %20, ptr %22, align 8
  store i32 7, ptr %23, align 4
  %24 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %25 = getelementptr { ptr }, ptr %3, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = insertvalue { ptr } undef, ptr %26, 0
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %29, 0
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %32 = load ptr, ptr %31, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %32, 1
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %35 = load ptr, ptr %34, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %35, 2
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %38 = load i32, ptr %37, align 4
  %39 = insertvalue { ptr, ptr, ptr, i32 } %36, i32 %38, 3
  %40 = alloca [3 x ptr], align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 24, ptr %40)
  %42 = getelementptr [3 x ptr], ptr %40, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %42, align 8
  %43 = getelementptr [3 x ptr], ptr %40, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %43, align 8
  %44 = getelementptr [3 x ptr], ptr %40, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %44, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 280, ptr %29)
  %46 = getelementptr ptr, ptr %29, i32 %38
  %47 = getelementptr ptr, ptr %46, i32 4
  %48 = load ptr, ptr %47, align 8
  %49 = alloca [3 x ptr], align 8
  %50 = getelementptr [3 x ptr], ptr %49, i32 0, i32 0
  store ptr @buffer_typ, ptr %50, align 8
  %51 = getelementptr [3 x ptr], ptr %49, i32 0, i32 1
  store ptr @i32_typ, ptr %51, align 8
  %52 = getelementptr [3 x ptr], ptr %49, i32 0, i32 2
  store ptr @i32_typ, ptr %52, align 8
  %53 = call ptr %48({ ptr, ptr, ptr, i32 } %39, ptr %49, { ptr } %27, i32 3, i32 4)
  call void %53({ ptr, ptr, ptr, i32 } %39, { ptr, ptr, ptr, i32 } %39, ptr %40, { ptr } %27, i32 3, i32 4)
  %54 = getelementptr { ptr, i160 }, ptr %21, i32 0, i32 0
  %55 = load ptr, ptr %54, align 8
  %56 = insertvalue { ptr, i160 } undef, ptr %55, 0
  %57 = getelementptr { ptr, i160 }, ptr %21, i32 0, i32 1
  %58 = load i160, ptr %57, align 4
  %59 = insertvalue { ptr, i160 } %56, i160 %58, 1
  %60 = alloca [1 x ptr], align 8
  %61 = call ptr @llvm.invariant.start.p0(i64 8, ptr %60)
  %62 = getelementptr [1 x ptr], ptr %60, i32 0, i32 0
  store ptr @_parameterization_String, ptr %62, align 8
  %63 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %64 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %65 = alloca [1 x ptr], align 8
  %66 = getelementptr [1 x ptr], ptr %65, i32 0, i32 0
  store ptr %55, ptr %66, align 8
  %67 = call ptr %64(ptr %65, { ptr, i160 } %59)
  call void %67(ptr %60, { ptr, i160 } %59)
  ret void
}

define i32 @_functionliteral_qqfsihafkd(i32 %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = add i32 %0, %1
  ret i32 %3
}

define i32 @_functionliteral_terfioouse(i32 %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = mul i32 %0, 2
  ret i32 %2
}

define i32 @_functionliteral_bkyngjuskh() {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret i32 5
}

define void @_functionliteral_kpgenjgubx(i32 %0) {
  %2 = alloca i160, align 8
  %3 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store i32 %0, ptr %2, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %3, align 4
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, i160 } undef, ptr %4, 0
  %6 = load i160, ptr %2, align 4
  %7 = insertvalue { ptr, i160 } %5, i160 %6, 1
  %8 = alloca [1 x ptr], align 8
  %9 = call ptr @llvm.invariant.start.p0(i64 8, ptr %8)
  %10 = getelementptr [1 x ptr], ptr %8, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %10, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %12 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %13 = alloca [1 x ptr], align 8
  %14 = getelementptr [1 x ptr], ptr %13, i32 0, i32 0
  store ptr %4, ptr %14, align 8
  %15 = call ptr %12(ptr %13, { ptr, i160 } %7)
  call void %15(ptr %8, { ptr, i160 } %7)
  ret void
}

define i8 @i32toi8(i32 %0) {
  %2 = alloca i1, align 1
  %3 = alloca i8, align 1
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %.reg2mem = alloca i8, align 1
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i8, align 1
  %.reg2mem5 = alloca i32, align 4
  %.reg2mem7 = alloca i32, align 4
  %.reg2mem9 = alloca i8, align 1
  %.reg2mem11 = alloca i1, align 1
  %.reg2mem14 = alloca i8, align 1
  %.reg2mem18 = alloca i32, align 4
  %.reg2mem21 = alloca i8, align 1
  %.reg2mem23 = alloca i32, align 4
  %.reg2mem25 = alloca i8, align 1
  %.reg2mem27 = alloca i32, align 4
  %.reg2mem29 = alloca i8, align 1
  %.reg2mem31 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store i8 0, ptr %.reg2mem29, align 1
  store i32 0, ptr %.reg2mem31, align 4
  br label %6

6:                                                ; preds = %18, %1
  %.reload32 = load i32, ptr %.reg2mem31, align 4
  %.reload30 = load i8, ptr %.reg2mem29, align 1
  store i32 %.reload32, ptr %.reg2mem18, align 4
  store i8 %.reload30, ptr %.reg2mem14, align 1
  %.reload20 = load i32, ptr %.reg2mem18, align 4
  %7 = icmp slt i32 %.reload20, %0
  store i1 %7, ptr %2, align 1
  %8 = load i1, ptr %2, align 1
  store i1 %8, ptr %.reg2mem11, align 1
  %.reload13 = load i1, ptr %.reg2mem11, align 1
  br i1 %.reload13, label %9, label %15

9:                                                ; preds = %6
  %.reload17 = load i8, ptr %.reg2mem14, align 1
  %10 = add i8 %.reload17, 1
  store i8 %10, ptr %3, align 1
  %11 = load i8, ptr %3, align 1
  store i8 %11, ptr %.reg2mem9, align 1
  store i32 1, ptr %4, align 4
  %12 = load i32, ptr %4, align 4
  %.reload19 = load i32, ptr %.reg2mem18, align 4
  %13 = add i32 %.reload19, %12
  store i32 %13, ptr %5, align 4
  %14 = load i32, ptr %5, align 4
  store i32 %14, ptr %.reg2mem7, align 4
  %.reload8 = load i32, ptr %.reg2mem7, align 4
  %.reload10 = load i8, ptr %.reg2mem9, align 1
  store i8 %.reload10, ptr %.reg2mem25, align 1
  store i32 %.reload8, ptr %.reg2mem27, align 4
  br label %16

15:                                               ; preds = %6
  store i8 poison, ptr %.reg2mem25, align 1
  store i32 poison, ptr %.reg2mem27, align 4
  br label %16

16:                                               ; preds = %15, %9
  %.reload28 = load i32, ptr %.reg2mem27, align 4
  %.reload26 = load i8, ptr %.reg2mem25, align 1
  store i32 %.reload28, ptr %.reg2mem5, align 4
  store i8 %.reload26, ptr %.reg2mem3, align 1
  br label %17

17:                                               ; preds = %16
  %.reload4 = load i8, ptr %.reg2mem3, align 1
  %.reload6 = load i32, ptr %.reg2mem5, align 4
  %.reload12 = load i1, ptr %.reg2mem11, align 1
  %.reload16 = load i8, ptr %.reg2mem14, align 1
  store i8 %.reload4, ptr %.reg2mem21, align 1
  store i32 %.reload6, ptr %.reg2mem23, align 4
  br i1 %.reload12, label %18, label %19

18:                                               ; preds = %17
  %.reload24 = load i32, ptr %.reg2mem23, align 4
  %.reload22 = load i8, ptr %.reg2mem21, align 1
  store i32 %.reload24, ptr %.reg2mem1, align 4
  store i8 %.reload22, ptr %.reg2mem, align 1
  %.reload = load i8, ptr %.reg2mem, align 1
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i8 %.reload, ptr %.reg2mem29, align 1
  store i32 %.reload2, ptr %.reg2mem31, align 4
  br label %6

19:                                               ; preds = %17
  %.reload15 = load i8, ptr %.reg2mem14, align 1
  ret i8 %.reload15
}

define { ptr, ptr, ptr, i32 } @read_file({ ptr, ptr, ptr, i32 } %0) {
  %2 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %2, align 8
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %2)
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = load i32, ptr %14, align 4
  store i32 %16, ptr %15, align 4
  call void @set_offset(ptr %4, ptr @String)
  %17 = call ptr @llvm.invariant.start.p0(i64 24, ptr %4)
  %18 = call ptr @malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64))
  %19 = alloca ptr, align 8
  store ptr %18, ptr %19, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = load i32, ptr %30, align 4
  store i32 %32, ptr %31, align 4
  %33 = call ptr @llvm.invariant.start.p0(i64 16, ptr %20)
  %34 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %35 = alloca { ptr, ptr, ptr, i32 }, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  store ptr @String, ptr %35, align 8
  store ptr %34, ptr %36, align 8
  store i32 7, ptr %37, align 4
  %38 = call ptr @llvm.invariant.start.p0(i64 16, ptr %35)
  %39 = getelementptr { ptr }, ptr %20, i32 0, i32 0
  %40 = load ptr, ptr %39, align 8
  %41 = insertvalue { ptr } undef, ptr %40, 0
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %43 = load ptr, ptr %42, align 8
  %44 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %43, 0
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %46 = load ptr, ptr %45, align 8
  %47 = insertvalue { ptr, ptr, ptr, i32 } %44, ptr %46, 1
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %49 = load ptr, ptr %48, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } %47, ptr %49, 2
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %52 = load i32, ptr %51, align 4
  %53 = insertvalue { ptr, ptr, ptr, i32 } %50, i32 %52, 3
  %54 = alloca [3 x ptr], align 8
  %55 = call ptr @llvm.invariant.start.p0(i64 24, ptr %54)
  %56 = getelementptr [3 x ptr], ptr %54, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %56, align 8
  %57 = getelementptr [3 x ptr], ptr %54, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %57, align 8
  %58 = getelementptr [3 x ptr], ptr %54, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %58, align 8
  %59 = call ptr @llvm.invariant.start.p0(i64 280, ptr %43)
  %60 = getelementptr ptr, ptr %43, i32 %52
  %61 = getelementptr ptr, ptr %60, i32 4
  %62 = load ptr, ptr %61, align 8
  %63 = alloca [3 x ptr], align 8
  %64 = getelementptr [3 x ptr], ptr %63, i32 0, i32 0
  store ptr @buffer_typ, ptr %64, align 8
  %65 = getelementptr [3 x ptr], ptr %63, i32 0, i32 1
  store ptr @i32_typ, ptr %65, align 8
  %66 = getelementptr [3 x ptr], ptr %63, i32 0, i32 2
  store ptr @i32_typ, ptr %66, align 8
  %67 = call ptr %62({ ptr, ptr, ptr, i32 } %53, ptr %63, { ptr } %41, i32 0, i32 1)
  call void %67({ ptr, ptr, ptr, i32 } %53, { ptr, ptr, ptr, i32 } %53, ptr %54, { ptr } %41, i32 0, i32 1)
  %68 = alloca { ptr, ptr, ptr, i32 }, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 0
  %71 = load ptr, ptr %69, align 8
  store ptr %71, ptr %70, align 8
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 1
  %74 = load ptr, ptr %72, align 8
  store ptr %74, ptr %73, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 2
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 3
  %80 = load i32, ptr %78, align 4
  store i32 %80, ptr %79, align 4
  call void @set_offset(ptr %68, ptr @String)
  %81 = call ptr @llvm.invariant.start.p0(i64 24, ptr %68)
  %82 = alloca { ptr, ptr, ptr, i32 }, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 0
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 0
  %85 = load ptr, ptr %83, align 8
  store ptr %85, ptr %84, align 8
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 1
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 1
  %88 = load ptr, ptr %86, align 8
  store ptr %88, ptr %87, align 8
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 2
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 2
  %91 = load ptr, ptr %89, align 8
  store ptr %91, ptr %90, align 8
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 3
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 3
  %94 = load i32, ptr %92, align 4
  store i32 %94, ptr %93, align 4
  %95 = call ptr @llvm.invariant.start.p0(i64 16, ptr %82)
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %97 = load ptr, ptr %96, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %97, 0
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %100 = load ptr, ptr %99, align 8
  %101 = insertvalue { ptr, ptr, ptr, i32 } %98, ptr %100, 1
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %103 = load ptr, ptr %102, align 8
  %104 = insertvalue { ptr, ptr, ptr, i32 } %101, ptr %103, 2
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %106 = load i32, ptr %105, align 4
  %107 = insertvalue { ptr, ptr, ptr, i32 } %104, i32 %106, 3
  %108 = alloca [0 x ptr], align 8
  %109 = call ptr @llvm.invariant.start.p0(i64 0, ptr %108)
  %110 = call ptr @llvm.invariant.start.p0(i64 280, ptr %97)
  %111 = getelementptr ptr, ptr %97, i32 %106
  %112 = getelementptr ptr, ptr %111, i32 14
  %113 = load ptr, ptr %112, align 8
  %114 = alloca [0 x ptr], align 8
  %115 = call ptr %113({ ptr, ptr, ptr, i32 } %107, ptr %114)
  %116 = call { ptr } %115({ ptr, ptr, ptr, i32 } %107, { ptr, ptr, ptr, i32 } %107, ptr %108)
  %117 = alloca ptr, align 8
  store { ptr } %116, ptr %117, align 8
  %118 = call ptr @malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 2) to i64))
  %119 = alloca ptr, align 8
  store ptr %118, ptr %119, align 8
  %120 = alloca { ptr, ptr, ptr, i32 }, align 8
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 0
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 0
  %123 = load ptr, ptr %121, align 8
  store ptr %123, ptr %122, align 8
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 1
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 1
  %126 = load ptr, ptr %124, align 8
  store ptr %126, ptr %125, align 8
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 2
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 2
  %129 = load ptr, ptr %127, align 8
  store ptr %129, ptr %128, align 8
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 3
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 3
  %132 = load i32, ptr %130, align 4
  store i32 %132, ptr %131, align 4
  %133 = call ptr @llvm.invariant.start.p0(i64 16, ptr %120)
  %134 = load ptr, ptr %120, align 8
  %135 = getelementptr i8, ptr %134, i64 0
  %136 = load i8, ptr @xeepl_r, align 1
  store i8 %136, ptr %135, align 1
  %137 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %138 = alloca { ptr, ptr, ptr, i32 }, align 8
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 1
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 3
  store ptr @String, ptr %138, align 8
  store ptr %137, ptr %139, align 8
  store i32 7, ptr %140, align 4
  %141 = call ptr @llvm.invariant.start.p0(i64 16, ptr %138)
  %142 = getelementptr { ptr }, ptr %120, i32 0, i32 0
  %143 = load ptr, ptr %142, align 8
  %144 = insertvalue { ptr } undef, ptr %143, 0
  %145 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 0
  %146 = load ptr, ptr %145, align 8
  %147 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %146, 0
  %148 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 1
  %149 = load ptr, ptr %148, align 8
  %150 = insertvalue { ptr, ptr, ptr, i32 } %147, ptr %149, 1
  %151 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 2
  %152 = load ptr, ptr %151, align 8
  %153 = insertvalue { ptr, ptr, ptr, i32 } %150, ptr %152, 2
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 3
  %155 = load i32, ptr %154, align 4
  %156 = insertvalue { ptr, ptr, ptr, i32 } %153, i32 %155, 3
  %157 = alloca [3 x ptr], align 8
  %158 = call ptr @llvm.invariant.start.p0(i64 24, ptr %157)
  %159 = getelementptr [3 x ptr], ptr %157, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %159, align 8
  %160 = getelementptr [3 x ptr], ptr %157, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %160, align 8
  %161 = getelementptr [3 x ptr], ptr %157, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %161, align 8
  %162 = call ptr @llvm.invariant.start.p0(i64 280, ptr %146)
  %163 = getelementptr ptr, ptr %146, i32 %155
  %164 = getelementptr ptr, ptr %163, i32 4
  %165 = load ptr, ptr %164, align 8
  %166 = alloca [3 x ptr], align 8
  %167 = getelementptr [3 x ptr], ptr %166, i32 0, i32 0
  store ptr @buffer_typ, ptr %167, align 8
  %168 = getelementptr [3 x ptr], ptr %166, i32 0, i32 1
  store ptr @i32_typ, ptr %168, align 8
  %169 = getelementptr [3 x ptr], ptr %166, i32 0, i32 2
  store ptr @i32_typ, ptr %169, align 8
  %170 = call ptr %165({ ptr, ptr, ptr, i32 } %156, ptr %166, { ptr } %144, i32 1, i32 2)
  call void %170({ ptr, ptr, ptr, i32 } %156, { ptr, ptr, ptr, i32 } %156, ptr %157, { ptr } %144, i32 1, i32 2)
  %171 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 0
  %172 = load ptr, ptr %171, align 8
  %173 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %172, 0
  %174 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 1
  %175 = load ptr, ptr %174, align 8
  %176 = insertvalue { ptr, ptr, ptr, i32 } %173, ptr %175, 1
  %177 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 2
  %178 = load ptr, ptr %177, align 8
  %179 = insertvalue { ptr, ptr, ptr, i32 } %176, ptr %178, 2
  %180 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 3
  %181 = load i32, ptr %180, align 4
  %182 = insertvalue { ptr, ptr, ptr, i32 } %179, i32 %181, 3
  %183 = alloca [0 x ptr], align 8
  %184 = call ptr @llvm.invariant.start.p0(i64 0, ptr %183)
  %185 = call ptr @llvm.invariant.start.p0(i64 280, ptr %172)
  %186 = getelementptr ptr, ptr %172, i32 %181
  %187 = getelementptr ptr, ptr %186, i32 14
  %188 = load ptr, ptr %187, align 8
  %189 = alloca [0 x ptr], align 8
  %190 = call ptr %188({ ptr, ptr, ptr, i32 } %182, ptr %189)
  %191 = call { ptr } %190({ ptr, ptr, ptr, i32 } %182, { ptr, ptr, ptr, i32 } %182, ptr %183)
  %192 = alloca ptr, align 8
  store { ptr } %191, ptr %192, align 8
  %193 = load ptr, ptr %117, align 8
  %194 = insertvalue { ptr } undef, ptr %193, 0
  %195 = load ptr, ptr %192, align 8
  %196 = insertvalue { ptr } undef, ptr %195, 0
  %197 = call { ptr } @fopen({ ptr } %194, { ptr } %196)
  %198 = alloca { ptr }, align 8
  store { ptr } %197, ptr %198, align 8
  %199 = alloca { ptr, ptr, ptr, i32 }, align 8
  %200 = getelementptr { ptr, ptr, ptr, i32 }, ptr %198, i32 0, i32 0
  %201 = getelementptr { ptr, ptr, ptr, i32 }, ptr %199, i32 0, i32 0
  %202 = load ptr, ptr %200, align 8
  store ptr %202, ptr %201, align 8
  %203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %198, i32 0, i32 1
  %204 = getelementptr { ptr, ptr, ptr, i32 }, ptr %199, i32 0, i32 1
  %205 = load ptr, ptr %203, align 8
  store ptr %205, ptr %204, align 8
  %206 = getelementptr { ptr, ptr, ptr, i32 }, ptr %198, i32 0, i32 2
  %207 = getelementptr { ptr, ptr, ptr, i32 }, ptr %199, i32 0, i32 2
  %208 = load ptr, ptr %206, align 8
  store ptr %208, ptr %207, align 8
  %209 = getelementptr { ptr, ptr, ptr, i32 }, ptr %198, i32 0, i32 3
  %210 = getelementptr { ptr, ptr, ptr, i32 }, ptr %199, i32 0, i32 3
  %211 = load i32, ptr %209, align 4
  store i32 %211, ptr %210, align 4
  %212 = call ptr @llvm.invariant.start.p0(i64 16, ptr %199)
  %213 = alloca i1, align 1
  %214 = alloca i32, align 4
  %215 = alloca i32, align 4
  %216 = alloca i1, align 1
  %217 = alloca i8, align 1
  %218 = alloca [1 x ptr], align 8
  %219 = alloca [1 x ptr], align 8
  %220 = alloca { ptr, ptr, ptr, i32 }, align 8
  %221 = alloca { ptr, ptr, ptr, i32 }, align 8
  %222 = alloca i32, align 4
  %223 = alloca { ptr, ptr, ptr, i32 }, align 8
  br label %224

224:                                              ; preds = %._crit_edge, %1
  store i1 true, ptr %213, align 1
  %225 = load i1, ptr %213, align 1
  br i1 %225, label %226, label %278

226:                                              ; preds = %224
  %227 = getelementptr { ptr }, ptr %199, i32 0, i32 0
  %228 = load ptr, ptr %227, align 8
  %229 = insertvalue { ptr } undef, ptr %228, 0
  %230 = call i32 @fgetc({ ptr } %229)
  store i32 %230, ptr %214, align 4
  store i32 -1, ptr %215, align 4
  %231 = load i32, ptr %214, align 4
  %232 = load i32, ptr %215, align 4
  %233 = icmp eq i32 %231, %232
  store i1 %233, ptr %216, align 1
  %234 = load i1, ptr %216, align 1
  %235 = xor i1 %234, true
  %236 = zext i1 %235 to i32
  store i32 %236, ptr %.reg2mem1, align 4
  br i1 %234, label %237, label %238

237:                                              ; preds = %226
  br label %277

238:                                              ; preds = %226
  %239 = load i32, ptr %214, align 4
  %240 = call i8 @i32toi8(i32 %239)
  store i8 %240, ptr %217, align 1
  %241 = load i8, ptr %217, align 1
  %242 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 0
  %243 = load ptr, ptr %242, align 8
  %244 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %243, 0
  %245 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 1
  %246 = load ptr, ptr %245, align 8
  %247 = insertvalue { ptr, ptr, ptr, i32 } %244, ptr %246, 1
  %248 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 2
  %249 = load ptr, ptr %248, align 8
  %250 = insertvalue { ptr, ptr, ptr, i32 } %247, ptr %249, 2
  %251 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 3
  %252 = load i32, ptr %251, align 4
  %253 = insertvalue { ptr, ptr, ptr, i32 } %250, i32 %252, 3
  %254 = call ptr @llvm.invariant.start.p0(i64 8, ptr %218)
  %255 = getelementptr [1 x ptr], ptr %218, i32 0, i32 0
  store ptr @_parameterization_Ptri8, ptr %255, align 8
  %256 = call ptr @llvm.invariant.start.p0(i64 280, ptr %243)
  %257 = getelementptr ptr, ptr %243, i32 %252
  %258 = getelementptr ptr, ptr %257, i32 8
  %259 = load ptr, ptr %258, align 8
  %260 = getelementptr [1 x ptr], ptr %219, i32 0, i32 0
  store ptr @i8_typ, ptr %260, align 8
  %261 = call ptr %259({ ptr, ptr, ptr, i32 } %253, ptr %219, i8 %241)
  %262 = call { ptr, ptr, ptr, i32 } %261({ ptr, ptr, ptr, i32 } %253, { ptr, ptr, ptr, i32 } %253, ptr %218, i8 %241)
  store { ptr, ptr, ptr, i32 } %262, ptr %220, align 8
  %263 = call ptr @llvm.invariant.start.p0(i64 16, ptr %220)
  %264 = getelementptr { ptr, ptr, ptr, i32 }, ptr %220, i32 0, i32 0
  %265 = getelementptr { ptr, ptr, ptr, i32 }, ptr %221, i32 0, i32 0
  %266 = load ptr, ptr %264, align 8
  store ptr %266, ptr %265, align 8
  %267 = getelementptr { ptr, ptr, ptr, i32 }, ptr %220, i32 0, i32 1
  %268 = getelementptr { ptr, ptr, ptr, i32 }, ptr %221, i32 0, i32 1
  %269 = load ptr, ptr %267, align 8
  store ptr %269, ptr %268, align 8
  %270 = getelementptr { ptr, ptr, ptr, i32 }, ptr %220, i32 0, i32 2
  %271 = getelementptr { ptr, ptr, ptr, i32 }, ptr %221, i32 0, i32 2
  %272 = load ptr, ptr %270, align 8
  store ptr %272, ptr %271, align 8
  %273 = getelementptr { ptr, ptr, ptr, i32 }, ptr %220, i32 0, i32 3
  %274 = getelementptr { ptr, ptr, ptr, i32 }, ptr %221, i32 0, i32 3
  %275 = load i32, ptr %273, align 4
  store i32 %275, ptr %274, align 4
  call void @set_offset(ptr %221, ptr @String)
  %276 = call ptr @llvm.invariant.start.p0(i64 24, ptr %221)
  br label %277

277:                                              ; preds = %238, %237
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem3, align 4
  br label %279

278:                                              ; preds = %224
  store i32 0, ptr %.reg2mem3, align 4
  br label %279

279:                                              ; preds = %278, %277
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  store i32 %.reload4, ptr %.reg2mem, align 4
  br label %280

280:                                              ; preds = %279
  %.reload = load i32, ptr %.reg2mem, align 4
  %281 = trunc i32 %.reload to i1
  br i1 %281, label %._crit_edge, label %282

._crit_edge:                                      ; preds = %280
  br label %224

282:                                              ; preds = %280
  %283 = getelementptr { ptr }, ptr %199, i32 0, i32 0
  %284 = load ptr, ptr %283, align 8
  %285 = insertvalue { ptr } undef, ptr %284, 0
  %286 = call i32 @fclose({ ptr } %285)
  store i32 %286, ptr %222, align 4
  %287 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 0
  %288 = getelementptr { ptr, ptr, ptr, i32 }, ptr %223, i32 0, i32 0
  %289 = load ptr, ptr %287, align 8
  store ptr %289, ptr %288, align 8
  %290 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 1
  %291 = getelementptr { ptr, ptr, ptr, i32 }, ptr %223, i32 0, i32 1
  %292 = load ptr, ptr %290, align 8
  store ptr %292, ptr %291, align 8
  %293 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 2
  %294 = getelementptr { ptr, ptr, ptr, i32 }, ptr %223, i32 0, i32 2
  %295 = load ptr, ptr %293, align 8
  store ptr %295, ptr %294, align 8
  %296 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 3
  %297 = getelementptr { ptr, ptr, ptr, i32 }, ptr %223, i32 0, i32 3
  %298 = load i32, ptr %296, align 4
  store i32 %298, ptr %297, align 4
  call void @set_offset(ptr %223, ptr @String)
  %299 = call ptr @llvm.invariant.start.p0(i64 24, ptr %223)
  %300 = getelementptr { ptr, ptr, ptr, i32 }, ptr %223, i32 0, i32 0
  %301 = load ptr, ptr %300, align 8
  %302 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %301, 0
  %303 = getelementptr { ptr, ptr, ptr, i32 }, ptr %223, i32 0, i32 1
  %304 = load ptr, ptr %303, align 8
  %305 = insertvalue { ptr, ptr, ptr, i32 } %302, ptr %304, 1
  %306 = getelementptr { ptr, ptr, ptr, i32 }, ptr %223, i32 0, i32 2
  %307 = load ptr, ptr %306, align 8
  %308 = insertvalue { ptr, ptr, ptr, i32 } %305, ptr %307, 2
  %309 = getelementptr { ptr, ptr, ptr, i32 }, ptr %223, i32 0, i32 3
  %310 = load i32, ptr %309, align 4
  %311 = insertvalue { ptr, ptr, ptr, i32 } %308, i32 %310, 3
  ret { ptr, ptr, ptr, i32 } %311
}

declare { ptr } @fopen({ ptr }, { ptr })

declare i32 @fgetc({ ptr })

declare i32 @fclose({ ptr })

define void @write_file({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1) {
  %3 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %3, align 8
  %4 = call ptr @llvm.invariant.start.p0(i64 16, ptr %3)
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @String)
  %18 = call ptr @llvm.invariant.start.p0(i64 24, ptr %5)
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %19, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 16, ptr %19)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = load i32, ptr %31, align 4
  store i32 %33, ptr %32, align 4
  call void @set_offset(ptr %21, ptr @String)
  %34 = call ptr @llvm.invariant.start.p0(i64 24, ptr %21)
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %36, 0
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %39 = load ptr, ptr %38, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %39, 1
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %42 = load ptr, ptr %41, align 8
  %43 = insertvalue { ptr, ptr, ptr, i32 } %40, ptr %42, 2
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %45 = load i32, ptr %44, align 4
  %46 = insertvalue { ptr, ptr, ptr, i32 } %43, i32 %45, 3
  %47 = alloca [0 x ptr], align 8
  %48 = call ptr @llvm.invariant.start.p0(i64 0, ptr %47)
  %49 = call ptr @llvm.invariant.start.p0(i64 280, ptr %36)
  %50 = getelementptr ptr, ptr %36, i32 %45
  %51 = getelementptr ptr, ptr %50, i32 14
  %52 = load ptr, ptr %51, align 8
  %53 = alloca [0 x ptr], align 8
  %54 = call ptr %52({ ptr, ptr, ptr, i32 } %46, ptr %53)
  %55 = call { ptr } %54({ ptr, ptr, ptr, i32 } %46, { ptr, ptr, ptr, i32 } %46, ptr %47)
  %56 = alloca ptr, align 8
  store { ptr } %55, ptr %56, align 8
  %57 = call ptr @malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 2) to i64))
  %58 = alloca ptr, align 8
  store ptr %57, ptr %58, align 8
  %59 = alloca { ptr, ptr, ptr, i32 }, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 0
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 0
  %62 = load ptr, ptr %60, align 8
  store ptr %62, ptr %61, align 8
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 1
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 1
  %65 = load ptr, ptr %63, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 2
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 2
  %68 = load ptr, ptr %66, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 3
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 3
  %71 = load i32, ptr %69, align 4
  store i32 %71, ptr %70, align 4
  %72 = call ptr @llvm.invariant.start.p0(i64 16, ptr %59)
  %73 = load ptr, ptr %59, align 8
  %74 = getelementptr i8, ptr %73, i64 0
  %75 = load i8, ptr @jhfck_w, align 1
  store i8 %75, ptr %74, align 1
  %76 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %77 = alloca { ptr, ptr, ptr, i32 }, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 1
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 3
  store ptr @String, ptr %77, align 8
  store ptr %76, ptr %78, align 8
  store i32 7, ptr %79, align 4
  %80 = call ptr @llvm.invariant.start.p0(i64 16, ptr %77)
  %81 = getelementptr { ptr }, ptr %59, i32 0, i32 0
  %82 = load ptr, ptr %81, align 8
  %83 = insertvalue { ptr } undef, ptr %82, 0
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 0
  %85 = load ptr, ptr %84, align 8
  %86 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %85, 0
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 1
  %88 = load ptr, ptr %87, align 8
  %89 = insertvalue { ptr, ptr, ptr, i32 } %86, ptr %88, 1
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 2
  %91 = load ptr, ptr %90, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } %89, ptr %91, 2
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 3
  %94 = load i32, ptr %93, align 4
  %95 = insertvalue { ptr, ptr, ptr, i32 } %92, i32 %94, 3
  %96 = alloca [3 x ptr], align 8
  %97 = call ptr @llvm.invariant.start.p0(i64 24, ptr %96)
  %98 = getelementptr [3 x ptr], ptr %96, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %98, align 8
  %99 = getelementptr [3 x ptr], ptr %96, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %99, align 8
  %100 = getelementptr [3 x ptr], ptr %96, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %100, align 8
  %101 = call ptr @llvm.invariant.start.p0(i64 280, ptr %85)
  %102 = getelementptr ptr, ptr %85, i32 %94
  %103 = getelementptr ptr, ptr %102, i32 4
  %104 = load ptr, ptr %103, align 8
  %105 = alloca [3 x ptr], align 8
  %106 = getelementptr [3 x ptr], ptr %105, i32 0, i32 0
  store ptr @buffer_typ, ptr %106, align 8
  %107 = getelementptr [3 x ptr], ptr %105, i32 0, i32 1
  store ptr @i32_typ, ptr %107, align 8
  %108 = getelementptr [3 x ptr], ptr %105, i32 0, i32 2
  store ptr @i32_typ, ptr %108, align 8
  %109 = call ptr %104({ ptr, ptr, ptr, i32 } %95, ptr %105, { ptr } %83, i32 1, i32 2)
  call void %109({ ptr, ptr, ptr, i32 } %95, { ptr, ptr, ptr, i32 } %95, ptr %96, { ptr } %83, i32 1, i32 2)
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 0
  %111 = load ptr, ptr %110, align 8
  %112 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %111, 0
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 1
  %114 = load ptr, ptr %113, align 8
  %115 = insertvalue { ptr, ptr, ptr, i32 } %112, ptr %114, 1
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 2
  %117 = load ptr, ptr %116, align 8
  %118 = insertvalue { ptr, ptr, ptr, i32 } %115, ptr %117, 2
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 3
  %120 = load i32, ptr %119, align 4
  %121 = insertvalue { ptr, ptr, ptr, i32 } %118, i32 %120, 3
  %122 = alloca [0 x ptr], align 8
  %123 = call ptr @llvm.invariant.start.p0(i64 0, ptr %122)
  %124 = call ptr @llvm.invariant.start.p0(i64 280, ptr %111)
  %125 = getelementptr ptr, ptr %111, i32 %120
  %126 = getelementptr ptr, ptr %125, i32 14
  %127 = load ptr, ptr %126, align 8
  %128 = alloca [0 x ptr], align 8
  %129 = call ptr %127({ ptr, ptr, ptr, i32 } %121, ptr %128)
  %130 = call { ptr } %129({ ptr, ptr, ptr, i32 } %121, { ptr, ptr, ptr, i32 } %121, ptr %122)
  %131 = alloca ptr, align 8
  store { ptr } %130, ptr %131, align 8
  %132 = load ptr, ptr %56, align 8
  %133 = insertvalue { ptr } undef, ptr %132, 0
  %134 = load ptr, ptr %131, align 8
  %135 = insertvalue { ptr } undef, ptr %134, 0
  %136 = call { ptr } @fopen({ ptr } %133, { ptr } %135)
  %137 = alloca { ptr }, align 8
  store { ptr } %136, ptr %137, align 8
  %138 = alloca { ptr, ptr, ptr, i32 }, align 8
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %137, i32 0, i32 0
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 0
  %141 = load ptr, ptr %139, align 8
  store ptr %141, ptr %140, align 8
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %137, i32 0, i32 1
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 1
  %144 = load ptr, ptr %142, align 8
  store ptr %144, ptr %143, align 8
  %145 = getelementptr { ptr, ptr, ptr, i32 }, ptr %137, i32 0, i32 2
  %146 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 2
  %147 = load ptr, ptr %145, align 8
  store ptr %147, ptr %146, align 8
  %148 = getelementptr { ptr, ptr, ptr, i32 }, ptr %137, i32 0, i32 3
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 3
  %150 = load i32, ptr %148, align 4
  store i32 %150, ptr %149, align 4
  %151 = call ptr @llvm.invariant.start.p0(i64 16, ptr %138)
  %152 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %153 = load ptr, ptr %152, align 8
  %154 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %153, 0
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %156 = load ptr, ptr %155, align 8
  %157 = insertvalue { ptr, ptr, ptr, i32 } %154, ptr %156, 1
  %158 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %159 = load ptr, ptr %158, align 8
  %160 = insertvalue { ptr, ptr, ptr, i32 } %157, ptr %159, 2
  %161 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %162 = load i32, ptr %161, align 4
  %163 = insertvalue { ptr, ptr, ptr, i32 } %160, i32 %162, 3
  %164 = alloca [0 x ptr], align 8
  %165 = call ptr @llvm.invariant.start.p0(i64 0, ptr %164)
  %166 = call ptr @llvm.invariant.start.p0(i64 280, ptr %153)
  %167 = getelementptr ptr, ptr %153, i32 %162
  %168 = getelementptr ptr, ptr %167, i32 14
  %169 = load ptr, ptr %168, align 8
  %170 = alloca [0 x ptr], align 8
  %171 = call ptr %169({ ptr, ptr, ptr, i32 } %163, ptr %170)
  %172 = call { ptr } %171({ ptr, ptr, ptr, i32 } %163, { ptr, ptr, ptr, i32 } %163, ptr %164)
  %173 = alloca ptr, align 8
  store { ptr } %172, ptr %173, align 8
  %174 = getelementptr { ptr }, ptr %138, i32 0, i32 0
  %175 = load ptr, ptr %174, align 8
  %176 = insertvalue { ptr } undef, ptr %175, 0
  %177 = load ptr, ptr %173, align 8
  %178 = insertvalue { ptr } undef, ptr %177, 0
  %179 = call i32 @fprintf({ ptr } %176, { ptr } %178)
  %180 = getelementptr { ptr }, ptr %138, i32 0, i32 0
  %181 = load ptr, ptr %180, align 8
  %182 = insertvalue { ptr } undef, ptr %181, 0
  %183 = call i32 @fclose({ ptr } %182)
  ret void
}

declare i32 @fprintf({ ptr }, { ptr })

define void @_functionliteral_larurcbfyv(i32 %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = mul i32 %0, %0
  %3 = alloca i160, align 8
  %4 = alloca ptr, align 8
  store i32 %2, ptr %3, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %4, align 4
  %5 = load ptr, ptr %4, align 8
  %6 = insertvalue { ptr, i160 } undef, ptr %5, 0
  %7 = load i160, ptr %3, align 4
  %8 = insertvalue { ptr, i160 } %6, i160 %7, 1
  %9 = alloca [1 x ptr], align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 8, ptr %9)
  %11 = getelementptr [1 x ptr], ptr %9, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %11, align 8
  %12 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %13 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %14 = alloca [1 x ptr], align 8
  %15 = getelementptr [1 x ptr], ptr %14, i32 0, i32 0
  store ptr %5, ptr %15, align 8
  %16 = call ptr %13(ptr %14, { ptr, i160 } %8)
  call void %16(ptr %9, { ptr, i160 } %8)
  ret void
}

define i32 @_functionliteral_ftndaahbbm(i32 %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = add i32 %0, %1
  ret i32 %3
}

define void @_functionliteral_yhuuxwigph(i32 %0, i32 %1) {
  %3 = alloca i1, align 1
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca ptr, align 8
  %8 = alloca i64, align 8
  %9 = alloca { ptr, i32 }, align 8
  %10 = alloca i64, align 8
  %11 = alloca i1, align 1
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca ptr, align 8
  %16 = alloca i64, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i32, align 4
  %.reg2mem5 = alloca i1, align 1
  %.reg2mem8 = alloca i32, align 4
  %.reg2mem12 = alloca i32, align 4
  %.reg2mem14 = alloca i32, align 4
  %.reg2mem16 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store i32 7, ptr %.reg2mem16, align 4
  br label %17

17:                                               ; preds = %._crit_edge, %2
  %.reload17 = load i32, ptr %.reg2mem16, align 4
  store i32 %.reload17, ptr %.reg2mem8, align 4
  store i1 true, ptr %3, align 1
  %18 = load i1, ptr %3, align 1
  store i1 %18, ptr %.reg2mem5, align 1
  %.reload7 = load i1, ptr %.reg2mem5, align 1
  br i1 %.reload7, label %19, label %55

19:                                               ; preds = %17
  %20 = call i32 @_functionliteral_ftndaahbbm(i32 %0, i32 %1)
  store i32 %20, ptr %4, align 4
  %21 = load i32, ptr %4, align 4
  %.reload11 = load i32, ptr %.reg2mem8, align 4
  %22 = add i32 %21, %.reload11
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %5, align 4
  store i32 %23, ptr %6, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %8, align 4
  %24 = load i64, ptr %8, align 4
  store i64 %24, ptr %7, align 4
  %25 = load ptr, ptr %7, align 8
  %26 = insertvalue { ptr, i32 } undef, ptr %25, 0
  %27 = load i32, ptr %6, align 4
  %28 = insertvalue { ptr, i32 } %26, i32 %27, 1
  %29 = call ptr @get_current_coroutine()
  %30 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i32 } }, ptr %29, i32 0, i32 4
  store { ptr, i32 } %28, ptr %30, align 8
  call void @coroutine_yield(ptr %29)
  %31 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i32 } }, ptr %29, i32 0, i32 4
  %32 = load { ptr, i32 }, ptr %31, align 8
  store { ptr, i32 } %32, ptr %9, align 8
  %33 = getelementptr { ptr, i32 }, ptr %9, i32 0, i32 0
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %10, align 4
  %34 = load ptr, ptr %33, align 8
  %35 = ptrtoint ptr %34 to i64
  %36 = load ptr, ptr %10, align 8
  %37 = ptrtoint ptr %36 to i64
  %38 = icmp ne i64 %35, %37
  store i1 %38, ptr %11, align 1
  %39 = load i1, ptr %11, align 1
  br i1 %39, label %40, label %52

40:                                               ; preds = %19
  %41 = getelementptr { ptr, i32 }, ptr %9, i32 0, i32 1
  %42 = load i32, ptr %41, align 4
  store i32 %42, ptr %12, align 4
  %43 = load i32, ptr %12, align 4
  %.reload10 = load i32, ptr %.reg2mem8, align 4
  %44 = add i32 %.reload10, %43
  store i32 %44, ptr %13, align 4
  %45 = load i32, ptr %13, align 4
  store i32 %45, ptr %.reg2mem3, align 4
  %46 = load i32, ptr %12, align 4
  store i32 %46, ptr %14, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %16, align 4
  %47 = load i64, ptr %16, align 4
  store i64 %47, ptr %15, align 4
  %48 = getelementptr { ptr, i32 }, ptr %9, i32 0, i32 0
  %49 = load ptr, ptr %15, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr { ptr, i32 }, ptr %9, i32 0, i32 1
  %51 = load i32, ptr %14, align 4
  store i32 %51, ptr %50, align 4
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  store i32 %.reload4, ptr %.reg2mem14, align 4
  br label %53

52:                                               ; preds = %19
  %.reload9 = load i32, ptr %.reg2mem8, align 4
  store i32 %.reload9, ptr %.reg2mem14, align 4
  br label %53

53:                                               ; preds = %52, %40
  %.reload15 = load i32, ptr %.reg2mem14, align 4
  store i32 %.reload15, ptr %.reg2mem1, align 4
  br label %54

54:                                               ; preds = %53
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem12, align 4
  br label %56

55:                                               ; preds = %17
  store i32 poison, ptr %.reg2mem12, align 4
  br label %56

56:                                               ; preds = %55, %54
  %.reload13 = load i32, ptr %.reg2mem12, align 4
  store i32 %.reload13, ptr %.reg2mem, align 4
  br label %57

57:                                               ; preds = %56
  %.reload6 = load i1, ptr %.reg2mem5, align 1
  br i1 %.reload6, label %._crit_edge, label %58

._crit_edge:                                      ; preds = %57
  %.reload = load i32, ptr %.reg2mem, align 4
  store i32 %.reload, ptr %.reg2mem16, align 4
  br label %17

58:                                               ; preds = %57
  ret void
}

define void @coroutine_dczcwkscnr_passer(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { ptr, [3 x ptr], ptr, i1, { { ptr, i32 }, i32, i32 } }, ptr %0, i32 0, i32 4, i32 1
  %3 = getelementptr { ptr, [3 x ptr], ptr, i1, { { ptr, i32 }, i32, i32 } }, ptr %0, i32 0, i32 4, i32 2
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %3, align 4
  %6 = load ptr, ptr %0, align 8
  call void %6(i32 %4, i32 %5)
  ret void
}

define void @coroutine_dczcwkscnr_buffer_filler(ptr %0, i32 %1, i32 %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, [3 x ptr], ptr, i1, { { ptr, i32 }, i32, i32 } }, ptr %0, i32 0, i32 4, i32 1
  %5 = getelementptr { ptr, [3 x ptr], ptr, i1, { { ptr, i32 }, i32, i32 } }, ptr %0, i32 0, i32 4, i32 2
  store i32 %1, ptr %4, align 4
  store i32 %2, ptr %5, align 4
  ret void
}

define void @coroutine_jqxmarjosw_passer(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  %3 = call i32 %2()
  %4 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i32 } }, ptr %0, i32 0, i32 4, i32 1
  store i32 %3, ptr %4, align 4
  %5 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i32 } }, ptr %0, i32 0, i32 4, i32 0
  store ptr @i32_typ, ptr %5, align 8
  ret void
}

define void @coroutine_jqxmarjosw_buffer_filler(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret void
}

define void @coroutine_kjkepmolqw_passer(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { ptr, [3 x ptr], ptr, i1, { { ptr, i160 }, { ptr, ptr, ptr, i32 } } }, ptr %0, i32 0, i32 4, i32 1
  %3 = load { ptr, ptr, ptr, i32 }, ptr %2, align 8
  %4 = load ptr, ptr %0, align 8
  call void %4({ ptr, ptr, ptr, i32 } %3)
  ret void
}

define void @coroutine_kjkepmolqw_buffer_filler(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { ptr, [3 x ptr], ptr, i1, { { ptr, i160 }, { ptr, ptr, ptr, i32 } } }, ptr %0, i32 0, i32 4, i32 1
  store { ptr, ptr, ptr, i32 } %1, ptr %3, align 8
  ret void
}

define void @_functionliteral_knpzbcorql({ ptr, ptr, ptr, i32 } %0) {
  %2 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %2, align 8
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %2)
  %4 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %5, 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %8 = load ptr, ptr %7, align 8
  %9 = insertvalue { ptr, ptr, ptr, i32 } %6, ptr %8, 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %11 = load ptr, ptr %10, align 8
  %12 = insertvalue { ptr, ptr, ptr, i32 } %9, ptr %11, 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %14 = load i32, ptr %13, align 4
  %15 = insertvalue { ptr, ptr, ptr, i32 } %12, i32 %14, 3
  %16 = alloca [1 x ptr], align 8
  %17 = call ptr @llvm.invariant.start.p0(i64 8, ptr %16)
  %18 = getelementptr [1 x ptr], ptr %16, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %18, align 8
  %19 = call ptr @llvm.invariant.start.p0(i64 56, ptr %5)
  %20 = getelementptr ptr, ptr %5, i32 %14
  %21 = getelementptr ptr, ptr %20, i32 3
  %22 = load ptr, ptr %21, align 8
  %23 = alloca [1 x ptr], align 8
  %24 = getelementptr [1 x ptr], ptr %23, i32 0, i32 0
  store ptr @i32_typ, ptr %24, align 8
  %25 = call ptr %22({ ptr, ptr, ptr, i32 } %15, ptr %23, i32 88)
  call void %25({ ptr, ptr, ptr, i32 } %15, { ptr, ptr, ptr, i32 } %15, ptr %16, i32 88)
  ret void
}

define i1 @_functionliteral_tjuwdziwws(i32 %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = srem i32 %0, 2
  %3 = icmp eq i32 %2, 0
  ret i1 %3
}

define i32 @_functionliteral_fpmpugtylp(i32 %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = mul i32 %0, %0
  ret i32 %2
}

define i32 @main() {
  %.reg2mem = alloca i1, align 1
  %.reg2mem20 = alloca ptr, align 8
  %.reg2mem22 = alloca ptr, align 8
  %.reg2mem24 = alloca ptr, align 8
  %.reg2mem26 = alloca ptr, align 8
  %.reg2mem28 = alloca i1, align 1
  %.reg2mem31 = alloca ptr, align 8
  %.reg2mem33 = alloca ptr, align 8
  %.reg2mem35 = alloca ptr, align 8
  %.reg2mem37 = alloca ptr, align 8
  %.reg2mem39 = alloca i1, align 1
  %.reg2mem42 = alloca ptr, align 8
  %.reg2mem44 = alloca ptr, align 8
  %.reg2mem46 = alloca ptr, align 8
  %.reg2mem48 = alloca ptr, align 8
  %.reg2mem50 = alloca i1, align 1
  %.reg2mem53 = alloca ptr, align 8
  %.reg2mem55 = alloca ptr, align 8
  %.reg2mem57 = alloca ptr, align 8
  %.reg2mem59 = alloca ptr, align 8
  %.reg2mem61 = alloca i32, align 4
  %.reg2mem63 = alloca i32, align 4
  %.reg2mem65 = alloca ptr, align 8
  %.reg2mem67 = alloca ptr, align 8
  %.reg2mem69 = alloca ptr, align 8
  %.reg2mem71 = alloca ptr, align 8
  %.reg2mem73 = alloca i1, align 1
  %.reg2mem76 = alloca ptr, align 8
  %.reg2mem78 = alloca ptr, align 8
  %.reg2mem80 = alloca ptr, align 8
  %.reg2mem82 = alloca ptr, align 8
  %.reg2mem84 = alloca i1, align 1
  %.reg2mem87 = alloca ptr, align 8
  %.reg2mem89 = alloca ptr, align 8
  %.reg2mem91 = alloca ptr, align 8
  %.reg2mem93 = alloca ptr, align 8
  %.reg2mem95 = alloca i1, align 1
  %.reg2mem98 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  call void @setup_landing_pad()
  %1 = alloca i160, align 8
  %2 = alloca ptr, align 8
  store i32 3, ptr %1, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %2, align 4
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, i160 } undef, ptr %3, 0
  %5 = load i160, ptr %1, align 4
  %6 = insertvalue { ptr, i160 } %4, i160 %5, 1
  %7 = alloca [1 x ptr], align 8
  %8 = call ptr @llvm.invariant.start.p0(i64 8, ptr %7)
  %9 = getelementptr [1 x ptr], ptr %7, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %9, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %11 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %12 = alloca [1 x ptr], align 8
  %13 = getelementptr [1 x ptr], ptr %12, i32 0, i32 0
  store ptr %3, ptr %13, align 8
  %14 = call ptr %11(ptr %12, { ptr, i160 } %6)
  call void %14(ptr %7, { ptr, i160 } %6)
  %15 = call ptr @malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 14) to i64))
  %16 = alloca ptr, align 8
  store ptr %15, ptr %16, align 8
  %17 = alloca { ptr, ptr, ptr, i32 }, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 0
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 0
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 2
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 2
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  %29 = load i32, ptr %27, align 4
  store i32 %29, ptr %28, align 4
  %30 = call ptr @llvm.invariant.start.p0(i64 16, ptr %17)
  %31 = load ptr, ptr %17, align 8
  %32 = getelementptr i8, ptr %31, i64 0
  %33 = load i104, ptr @tkyaw_Hello_World, align 4
  store i104 %33, ptr %32, align 4
  %34 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %35 = alloca { ptr, ptr, ptr, i32 }, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  store ptr @String, ptr %35, align 8
  store ptr %34, ptr %36, align 8
  store i32 7, ptr %37, align 4
  %38 = call ptr @llvm.invariant.start.p0(i64 16, ptr %35)
  %39 = getelementptr { ptr }, ptr %17, i32 0, i32 0
  %40 = load ptr, ptr %39, align 8
  %41 = insertvalue { ptr } undef, ptr %40, 0
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %43 = load ptr, ptr %42, align 8
  %44 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %43, 0
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %46 = load ptr, ptr %45, align 8
  %47 = insertvalue { ptr, ptr, ptr, i32 } %44, ptr %46, 1
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %49 = load ptr, ptr %48, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } %47, ptr %49, 2
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %52 = load i32, ptr %51, align 4
  %53 = insertvalue { ptr, ptr, ptr, i32 } %50, i32 %52, 3
  %54 = alloca [3 x ptr], align 8
  %55 = call ptr @llvm.invariant.start.p0(i64 24, ptr %54)
  %56 = getelementptr [3 x ptr], ptr %54, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %56, align 8
  %57 = getelementptr [3 x ptr], ptr %54, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %57, align 8
  %58 = getelementptr [3 x ptr], ptr %54, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %58, align 8
  %59 = call ptr @llvm.invariant.start.p0(i64 280, ptr %43)
  %60 = getelementptr ptr, ptr %43, i32 %52
  %61 = getelementptr ptr, ptr %60, i32 4
  %62 = load ptr, ptr %61, align 8
  %63 = alloca [3 x ptr], align 8
  %64 = getelementptr [3 x ptr], ptr %63, i32 0, i32 0
  store ptr @buffer_typ, ptr %64, align 8
  %65 = getelementptr [3 x ptr], ptr %63, i32 0, i32 1
  store ptr @i32_typ, ptr %65, align 8
  %66 = getelementptr [3 x ptr], ptr %63, i32 0, i32 2
  store ptr @i32_typ, ptr %66, align 8
  %67 = call ptr %62({ ptr, ptr, ptr, i32 } %53, ptr %63, { ptr } %41, i32 13, i32 14)
  call void %67({ ptr, ptr, ptr, i32 } %53, { ptr, ptr, ptr, i32 } %53, ptr %54, { ptr } %41, i32 13, i32 14)
  %68 = getelementptr { ptr, i160 }, ptr %35, i32 0, i32 0
  %69 = load ptr, ptr %68, align 8
  %70 = insertvalue { ptr, i160 } undef, ptr %69, 0
  %71 = getelementptr { ptr, i160 }, ptr %35, i32 0, i32 1
  %72 = load i160, ptr %71, align 4
  %73 = insertvalue { ptr, i160 } %70, i160 %72, 1
  %74 = alloca [1 x ptr], align 8
  %75 = call ptr @llvm.invariant.start.p0(i64 8, ptr %74)
  %76 = getelementptr [1 x ptr], ptr %74, i32 0, i32 0
  store ptr @_parameterization_String, ptr %76, align 8
  %77 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %78 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %79 = alloca [1 x ptr], align 8
  %80 = getelementptr [1 x ptr], ptr %79, i32 0, i32 0
  store ptr %69, ptr %80, align 8
  %81 = call ptr %78(ptr %79, { ptr, i160 } %73)
  call void %81(ptr %74, { ptr, i160 } %73)
  %82 = alloca i160, align 8
  %83 = alloca ptr, align 8
  store i1 false, ptr %82, align 1
  store i64 ptrtoint (ptr @bool_typ to i64), ptr %83, align 4
  %84 = load ptr, ptr %83, align 8
  %85 = insertvalue { ptr, i160 } undef, ptr %84, 0
  %86 = load i160, ptr %82, align 4
  %87 = insertvalue { ptr, i160 } %85, i160 %86, 1
  %88 = alloca [1 x ptr], align 8
  %89 = call ptr @llvm.invariant.start.p0(i64 8, ptr %88)
  %90 = getelementptr [1 x ptr], ptr %88, i32 0, i32 0
  store ptr @_parameterization_Ptri1, ptr %90, align 8
  %91 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %92 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %93 = alloca [1 x ptr], align 8
  %94 = getelementptr [1 x ptr], ptr %93, i32 0, i32 0
  store ptr %84, ptr %94, align 8
  %95 = call ptr %92(ptr %93, { ptr, i160 } %87)
  call void %95(ptr %88, { ptr, i160 } %87)
  %96 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  %97 = alloca { ptr, ptr, ptr, i32 }, align 8
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  store ptr @Bard, ptr %97, align 8
  store ptr %96, ptr %98, align 8
  store i32 7, ptr %99, align 4
  %100 = call ptr @llvm.invariant.start.p0(i64 16, ptr %97)
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 0
  %102 = load ptr, ptr %101, align 8
  %103 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %102, 0
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %105 = load ptr, ptr %104, align 8
  %106 = insertvalue { ptr, ptr, ptr, i32 } %103, ptr %105, 1
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 2
  %108 = load ptr, ptr %107, align 8
  %109 = insertvalue { ptr, ptr, ptr, i32 } %106, ptr %108, 2
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  %111 = load i32, ptr %110, align 4
  %112 = insertvalue { ptr, ptr, ptr, i32 } %109, i32 %111, 3
  %113 = alloca [0 x ptr], align 8
  %114 = call ptr @llvm.invariant.start.p0(i64 0, ptr %113)
  %115 = call ptr @llvm.invariant.start.p0(i64 56, ptr %102)
  %116 = getelementptr ptr, ptr %102, i32 %111
  %117 = load ptr, ptr %116, align 8
  %118 = alloca [0 x ptr], align 8
  %119 = call ptr %117({ ptr, ptr, ptr, i32 } %112, ptr %118)
  call void %119({ ptr, ptr, ptr, i32 } %112, { ptr, ptr, ptr, i32 } %112, ptr %113)
  %120 = alloca { ptr, ptr, ptr, i32 }, align 8
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 0
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 0
  %123 = load ptr, ptr %121, align 8
  store ptr %123, ptr %122, align 8
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 1
  %126 = load ptr, ptr %124, align 8
  store ptr %126, ptr %125, align 8
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 2
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 2
  %129 = load ptr, ptr %127, align 8
  store ptr %129, ptr %128, align 8
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 3
  %132 = load i32, ptr %130, align 4
  store i32 %132, ptr %131, align 4
  call void @set_offset(ptr %120, ptr @Bard)
  %133 = call ptr @llvm.invariant.start.p0(i64 24, ptr %120)
  %134 = alloca { ptr, ptr, ptr, i32 }, align 8
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 0
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 0
  %137 = load ptr, ptr %135, align 8
  store ptr %137, ptr %136, align 8
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 1
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 1
  %140 = load ptr, ptr %138, align 8
  store ptr %140, ptr %139, align 8
  %141 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 2
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 2
  %143 = load ptr, ptr %141, align 8
  store ptr %143, ptr %142, align 8
  %144 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 3
  %145 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 3
  %146 = load i32, ptr %144, align 4
  store i32 %146, ptr %145, align 4
  %147 = call ptr @llvm.invariant.start.p0(i64 16, ptr %134)
  %148 = alloca i160, align 8
  %149 = alloca ptr, align 8
  store i32 5, ptr %148, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %149, align 4
  %150 = load ptr, ptr %149, align 8
  %151 = insertvalue { ptr, i160 } undef, ptr %150, 0
  %152 = load i160, ptr %148, align 4
  %153 = insertvalue { ptr, i160 } %151, i160 %152, 1
  %154 = alloca i160, align 8
  %155 = alloca ptr, align 8
  store i32 10, ptr %154, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %155, align 4
  %156 = load ptr, ptr %155, align 8
  %157 = insertvalue { ptr, i160 } undef, ptr %156, 0
  %158 = load i160, ptr %154, align 4
  %159 = insertvalue { ptr, i160 } %157, i160 %158, 1
  %160 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 0
  %161 = load ptr, ptr %160, align 8
  %162 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %161, 0
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 1
  %164 = load ptr, ptr %163, align 8
  %165 = insertvalue { ptr, ptr, ptr, i32 } %162, ptr %164, 1
  %166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 2
  %167 = load ptr, ptr %166, align 8
  %168 = insertvalue { ptr, ptr, ptr, i32 } %165, ptr %167, 2
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 3
  %170 = load i32, ptr %169, align 4
  %171 = insertvalue { ptr, ptr, ptr, i32 } %168, i32 %170, 3
  %172 = alloca [2 x ptr], align 8
  %173 = call ptr @llvm.invariant.start.p0(i64 16, ptr %172)
  %174 = getelementptr [2 x ptr], ptr %172, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %174, align 8
  %175 = getelementptr [2 x ptr], ptr %172, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %175, align 8
  %176 = call ptr @llvm.invariant.start.p0(i64 56, ptr %161)
  %177 = getelementptr ptr, ptr %161, i32 %170
  %178 = getelementptr ptr, ptr %177, i32 1
  %179 = load ptr, ptr %178, align 8
  %180 = alloca [2 x ptr], align 8
  %181 = getelementptr [2 x ptr], ptr %180, i32 0, i32 0
  store ptr %150, ptr %181, align 8
  %182 = getelementptr [2 x ptr], ptr %180, i32 0, i32 1
  store ptr %156, ptr %182, align 8
  %183 = call ptr %179({ ptr, ptr, ptr, i32 } %171, ptr %180, { ptr, i160 } %153, { ptr, i160 } %159)
  call void %183({ ptr, ptr, ptr, i32 } %171, { ptr, ptr, ptr, i32 } %171, ptr %172, { ptr, i160 } %153, { ptr, i160 } %159)
  %184 = alloca i64, align 8
  %185 = alloca ptr, align 8
  store double 7.000000e+00, ptr %184, align 8
  store i64 ptrtoint (ptr @f64_typ to i64), ptr %185, align 4
  %186 = alloca { ptr, i64 }, align 8
  %187 = getelementptr { ptr, i64 }, ptr %186, i32 0, i32 0
  %188 = load ptr, ptr %185, align 8
  store ptr %188, ptr %187, align 8
  %189 = getelementptr { ptr, i64 }, ptr %186, i32 0, i32 1
  %190 = load i64, ptr %184, align 4
  store i64 %190, ptr %189, align 4
  %191 = getelementptr { ptr, i160 }, ptr %186, i32 0, i32 0
  %192 = load ptr, ptr %191, align 8
  %193 = insertvalue { ptr, i160 } undef, ptr %192, 0
  %194 = getelementptr { ptr, i160 }, ptr %186, i32 0, i32 1
  %195 = load i160, ptr %194, align 4
  %196 = insertvalue { ptr, i160 } %193, i160 %195, 1
  %197 = alloca i160, align 8
  %198 = alloca ptr, align 8
  store double 1.400000e+01, ptr %197, align 8
  store i64 ptrtoint (ptr @f64_typ to i64), ptr %198, align 4
  %199 = load ptr, ptr %198, align 8
  %200 = insertvalue { ptr, i160 } undef, ptr %199, 0
  %201 = load i160, ptr %197, align 4
  %202 = insertvalue { ptr, i160 } %200, i160 %201, 1
  %203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 0
  %204 = load ptr, ptr %203, align 8
  %205 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %204, 0
  %206 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 1
  %207 = load ptr, ptr %206, align 8
  %208 = insertvalue { ptr, ptr, ptr, i32 } %205, ptr %207, 1
  %209 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 2
  %210 = load ptr, ptr %209, align 8
  %211 = insertvalue { ptr, ptr, ptr, i32 } %208, ptr %210, 2
  %212 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 3
  %213 = load i32, ptr %212, align 4
  %214 = insertvalue { ptr, ptr, ptr, i32 } %211, i32 %213, 3
  %215 = alloca [2 x ptr], align 8
  %216 = call ptr @llvm.invariant.start.p0(i64 16, ptr %215)
  %217 = getelementptr [2 x ptr], ptr %215, i32 0, i32 1
  store ptr @_parameterization_Ptrf64, ptr %217, align 8
  %218 = getelementptr [2 x ptr], ptr %215, i32 0, i32 0
  store ptr @_parameterization_Ptrf64_or_Ptri32, ptr %218, align 8
  %219 = call ptr @llvm.invariant.start.p0(i64 56, ptr %204)
  %220 = getelementptr ptr, ptr %204, i32 %213
  %221 = getelementptr ptr, ptr %220, i32 1
  %222 = load ptr, ptr %221, align 8
  %223 = alloca [2 x ptr], align 8
  %224 = getelementptr [2 x ptr], ptr %223, i32 0, i32 0
  store ptr %192, ptr %224, align 8
  %225 = getelementptr [2 x ptr], ptr %223, i32 0, i32 1
  store ptr %199, ptr %225, align 8
  %226 = call ptr %222({ ptr, ptr, ptr, i32 } %214, ptr %223, { ptr, i160 } %196, { ptr, i160 } %202)
  call void %226({ ptr, ptr, ptr, i32 } %214, { ptr, ptr, ptr, i32 } %214, ptr %215, { ptr, i160 } %196, { ptr, i160 } %202)
  %227 = call ptr @malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 6) to i64))
  %228 = alloca ptr, align 8
  store ptr %227, ptr %228, align 8
  %229 = alloca { ptr, ptr, ptr, i32 }, align 8
  %230 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 0
  %231 = getelementptr { ptr, ptr, ptr, i32 }, ptr %229, i32 0, i32 0
  %232 = load ptr, ptr %230, align 8
  store ptr %232, ptr %231, align 8
  %233 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 1
  %234 = getelementptr { ptr, ptr, ptr, i32 }, ptr %229, i32 0, i32 1
  %235 = load ptr, ptr %233, align 8
  store ptr %235, ptr %234, align 8
  %236 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 2
  %237 = getelementptr { ptr, ptr, ptr, i32 }, ptr %229, i32 0, i32 2
  %238 = load ptr, ptr %236, align 8
  store ptr %238, ptr %237, align 8
  %239 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 3
  %240 = getelementptr { ptr, ptr, ptr, i32 }, ptr %229, i32 0, i32 3
  %241 = load i32, ptr %239, align 4
  store i32 %241, ptr %240, align 4
  %242 = call ptr @llvm.invariant.start.p0(i64 16, ptr %229)
  %243 = load ptr, ptr %229, align 8
  %244 = getelementptr i8, ptr %243, i64 0
  %245 = load i40, ptr @mlrho_start, align 4
  store i40 %245, ptr %244, align 4
  %246 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %247 = alloca { ptr, ptr, ptr, i32 }, align 8
  %248 = getelementptr { ptr, ptr, ptr, i32 }, ptr %247, i32 0, i32 1
  %249 = getelementptr { ptr, ptr, ptr, i32 }, ptr %247, i32 0, i32 3
  store ptr @String, ptr %247, align 8
  store ptr %246, ptr %248, align 8
  store i32 7, ptr %249, align 4
  %250 = call ptr @llvm.invariant.start.p0(i64 16, ptr %247)
  %251 = getelementptr { ptr }, ptr %229, i32 0, i32 0
  %252 = load ptr, ptr %251, align 8
  %253 = insertvalue { ptr } undef, ptr %252, 0
  %254 = getelementptr { ptr, ptr, ptr, i32 }, ptr %247, i32 0, i32 0
  %255 = load ptr, ptr %254, align 8
  %256 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %255, 0
  %257 = getelementptr { ptr, ptr, ptr, i32 }, ptr %247, i32 0, i32 1
  %258 = load ptr, ptr %257, align 8
  %259 = insertvalue { ptr, ptr, ptr, i32 } %256, ptr %258, 1
  %260 = getelementptr { ptr, ptr, ptr, i32 }, ptr %247, i32 0, i32 2
  %261 = load ptr, ptr %260, align 8
  %262 = insertvalue { ptr, ptr, ptr, i32 } %259, ptr %261, 2
  %263 = getelementptr { ptr, ptr, ptr, i32 }, ptr %247, i32 0, i32 3
  %264 = load i32, ptr %263, align 4
  %265 = insertvalue { ptr, ptr, ptr, i32 } %262, i32 %264, 3
  %266 = alloca [3 x ptr], align 8
  %267 = call ptr @llvm.invariant.start.p0(i64 24, ptr %266)
  %268 = getelementptr [3 x ptr], ptr %266, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %268, align 8
  %269 = getelementptr [3 x ptr], ptr %266, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %269, align 8
  %270 = getelementptr [3 x ptr], ptr %266, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %270, align 8
  %271 = call ptr @llvm.invariant.start.p0(i64 280, ptr %255)
  %272 = getelementptr ptr, ptr %255, i32 %264
  %273 = getelementptr ptr, ptr %272, i32 4
  %274 = load ptr, ptr %273, align 8
  %275 = alloca [3 x ptr], align 8
  %276 = getelementptr [3 x ptr], ptr %275, i32 0, i32 0
  store ptr @buffer_typ, ptr %276, align 8
  %277 = getelementptr [3 x ptr], ptr %275, i32 0, i32 1
  store ptr @i32_typ, ptr %277, align 8
  %278 = getelementptr [3 x ptr], ptr %275, i32 0, i32 2
  store ptr @i32_typ, ptr %278, align 8
  %279 = call ptr %274({ ptr, ptr, ptr, i32 } %265, ptr %275, { ptr } %253, i32 5, i32 6)
  call void %279({ ptr, ptr, ptr, i32 } %265, { ptr, ptr, ptr, i32 } %265, ptr %266, { ptr } %253, i32 5, i32 6)
  %280 = getelementptr { ptr, i160 }, ptr %247, i32 0, i32 0
  %281 = load ptr, ptr %280, align 8
  %282 = insertvalue { ptr, i160 } undef, ptr %281, 0
  %283 = getelementptr { ptr, i160 }, ptr %247, i32 0, i32 1
  %284 = load i160, ptr %283, align 4
  %285 = insertvalue { ptr, i160 } %282, i160 %284, 1
  %286 = alloca [1 x ptr], align 8
  %287 = call ptr @llvm.invariant.start.p0(i64 8, ptr %286)
  %288 = getelementptr [1 x ptr], ptr %286, i32 0, i32 0
  store ptr @_parameterization_String, ptr %288, align 8
  %289 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %290 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %291 = alloca [1 x ptr], align 8
  %292 = getelementptr [1 x ptr], ptr %291, i32 0, i32 0
  store ptr %281, ptr %292, align 8
  %293 = call ptr %290(ptr %291, { ptr, i160 } %285)
  call void %293(ptr %286, { ptr, i160 } %285)
  %294 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ i32, double, i32 }, ptr null, i32 1) to i64))
  %295 = alloca { ptr, ptr, ptr, i32 }, align 8
  %296 = getelementptr { ptr, ptr, ptr, i32 }, ptr %295, i32 0, i32 1
  %297 = getelementptr { ptr, ptr, ptr, i32 }, ptr %295, i32 0, i32 3
  store ptr @Animal, ptr %295, align 8
  store ptr %294, ptr %296, align 8
  store i32 7, ptr %297, align 4
  %298 = call ptr @llvm.invariant.start.p0(i64 16, ptr %295)
  %299 = getelementptr { ptr, ptr, ptr, i32 }, ptr %295, i32 0, i32 0
  %300 = load ptr, ptr %299, align 8
  %301 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %300, 0
  %302 = getelementptr { ptr, ptr, ptr, i32 }, ptr %295, i32 0, i32 1
  %303 = load ptr, ptr %302, align 8
  %304 = insertvalue { ptr, ptr, ptr, i32 } %301, ptr %303, 1
  %305 = getelementptr { ptr, ptr, ptr, i32 }, ptr %295, i32 0, i32 2
  %306 = load ptr, ptr %305, align 8
  %307 = insertvalue { ptr, ptr, ptr, i32 } %304, ptr %306, 2
  %308 = getelementptr { ptr, ptr, ptr, i32 }, ptr %295, i32 0, i32 3
  %309 = load i32, ptr %308, align 4
  %310 = insertvalue { ptr, ptr, ptr, i32 } %307, i32 %309, 3
  %311 = alloca [3 x ptr], align 8
  %312 = call ptr @llvm.invariant.start.p0(i64 24, ptr %311)
  %313 = getelementptr [3 x ptr], ptr %311, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %313, align 8
  %314 = getelementptr [3 x ptr], ptr %311, i32 0, i32 1
  store ptr @_parameterization_Ptrf64, ptr %314, align 8
  %315 = getelementptr [3 x ptr], ptr %311, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %315, align 8
  %316 = call ptr @llvm.invariant.start.p0(i64 104, ptr %300)
  %317 = getelementptr ptr, ptr %300, i32 %309
  %318 = getelementptr ptr, ptr %317, i32 3
  %319 = load ptr, ptr %318, align 8
  %320 = alloca [3 x ptr], align 8
  %321 = getelementptr [3 x ptr], ptr %320, i32 0, i32 0
  store ptr @i32_typ, ptr %321, align 8
  %322 = getelementptr [3 x ptr], ptr %320, i32 0, i32 1
  store ptr @f64_typ, ptr %322, align 8
  %323 = getelementptr [3 x ptr], ptr %320, i32 0, i32 2
  store ptr @i32_typ, ptr %323, align 8
  %324 = call ptr %319({ ptr, ptr, ptr, i32 } %310, ptr %320, i32 55, double 8.000000e+00, i32 13)
  call void %324({ ptr, ptr, ptr, i32 } %310, { ptr, ptr, ptr, i32 } %310, ptr %311, i32 55, double 8.000000e+00, i32 13)
  %325 = alloca { ptr, ptr, ptr, i32 }, align 8
  %326 = getelementptr { ptr, ptr, ptr, i32 }, ptr %295, i32 0, i32 0
  %327 = getelementptr { ptr, ptr, ptr, i32 }, ptr %325, i32 0, i32 0
  %328 = load ptr, ptr %326, align 8
  store ptr %328, ptr %327, align 8
  %329 = getelementptr { ptr, ptr, ptr, i32 }, ptr %295, i32 0, i32 1
  %330 = getelementptr { ptr, ptr, ptr, i32 }, ptr %325, i32 0, i32 1
  %331 = load ptr, ptr %329, align 8
  store ptr %331, ptr %330, align 8
  %332 = getelementptr { ptr, ptr, ptr, i32 }, ptr %295, i32 0, i32 2
  %333 = getelementptr { ptr, ptr, ptr, i32 }, ptr %325, i32 0, i32 2
  %334 = load ptr, ptr %332, align 8
  store ptr %334, ptr %333, align 8
  %335 = getelementptr { ptr, ptr, ptr, i32 }, ptr %295, i32 0, i32 3
  %336 = getelementptr { ptr, ptr, ptr, i32 }, ptr %325, i32 0, i32 3
  %337 = load i32, ptr %335, align 4
  store i32 %337, ptr %336, align 4
  call void @set_offset(ptr %325, ptr @Animal)
  %338 = call ptr @llvm.invariant.start.p0(i64 24, ptr %325)
  %339 = alloca { ptr, ptr, ptr, i32 }, align 8
  %340 = getelementptr { ptr, ptr, ptr, i32 }, ptr %325, i32 0, i32 0
  %341 = getelementptr { ptr, ptr, ptr, i32 }, ptr %339, i32 0, i32 0
  %342 = load ptr, ptr %340, align 8
  store ptr %342, ptr %341, align 8
  %343 = getelementptr { ptr, ptr, ptr, i32 }, ptr %325, i32 0, i32 1
  %344 = getelementptr { ptr, ptr, ptr, i32 }, ptr %339, i32 0, i32 1
  %345 = load ptr, ptr %343, align 8
  store ptr %345, ptr %344, align 8
  %346 = getelementptr { ptr, ptr, ptr, i32 }, ptr %325, i32 0, i32 2
  %347 = getelementptr { ptr, ptr, ptr, i32 }, ptr %339, i32 0, i32 2
  %348 = load ptr, ptr %346, align 8
  store ptr %348, ptr %347, align 8
  %349 = getelementptr { ptr, ptr, ptr, i32 }, ptr %325, i32 0, i32 3
  %350 = getelementptr { ptr, ptr, ptr, i32 }, ptr %339, i32 0, i32 3
  %351 = load i32, ptr %349, align 4
  store i32 %351, ptr %350, align 4
  %352 = call ptr @llvm.invariant.start.p0(i64 16, ptr %339)
  %353 = call ptr @malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 14) to i64))
  %354 = alloca ptr, align 8
  store ptr %353, ptr %354, align 8
  %355 = alloca { ptr, ptr, ptr, i32 }, align 8
  %356 = getelementptr { ptr, ptr, ptr, i32 }, ptr %354, i32 0, i32 0
  %357 = getelementptr { ptr, ptr, ptr, i32 }, ptr %355, i32 0, i32 0
  %358 = load ptr, ptr %356, align 8
  store ptr %358, ptr %357, align 8
  %359 = getelementptr { ptr, ptr, ptr, i32 }, ptr %354, i32 0, i32 1
  %360 = getelementptr { ptr, ptr, ptr, i32 }, ptr %355, i32 0, i32 1
  %361 = load ptr, ptr %359, align 8
  store ptr %361, ptr %360, align 8
  %362 = getelementptr { ptr, ptr, ptr, i32 }, ptr %354, i32 0, i32 2
  %363 = getelementptr { ptr, ptr, ptr, i32 }, ptr %355, i32 0, i32 2
  %364 = load ptr, ptr %362, align 8
  store ptr %364, ptr %363, align 8
  %365 = getelementptr { ptr, ptr, ptr, i32 }, ptr %354, i32 0, i32 3
  %366 = getelementptr { ptr, ptr, ptr, i32 }, ptr %355, i32 0, i32 3
  %367 = load i32, ptr %365, align 4
  store i32 %367, ptr %366, align 4
  %368 = call ptr @llvm.invariant.start.p0(i64 16, ptr %355)
  %369 = load ptr, ptr %355, align 8
  %370 = getelementptr i8, ptr %369, i64 0
  %371 = load i104, ptr @ntrdo_did_get_here, align 4
  store i104 %371, ptr %370, align 4
  %372 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %373 = alloca { ptr, ptr, ptr, i32 }, align 8
  %374 = getelementptr { ptr, ptr, ptr, i32 }, ptr %373, i32 0, i32 1
  %375 = getelementptr { ptr, ptr, ptr, i32 }, ptr %373, i32 0, i32 3
  store ptr @String, ptr %373, align 8
  store ptr %372, ptr %374, align 8
  store i32 7, ptr %375, align 4
  %376 = call ptr @llvm.invariant.start.p0(i64 16, ptr %373)
  %377 = getelementptr { ptr }, ptr %355, i32 0, i32 0
  %378 = load ptr, ptr %377, align 8
  %379 = insertvalue { ptr } undef, ptr %378, 0
  %380 = getelementptr { ptr, ptr, ptr, i32 }, ptr %373, i32 0, i32 0
  %381 = load ptr, ptr %380, align 8
  %382 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %381, 0
  %383 = getelementptr { ptr, ptr, ptr, i32 }, ptr %373, i32 0, i32 1
  %384 = load ptr, ptr %383, align 8
  %385 = insertvalue { ptr, ptr, ptr, i32 } %382, ptr %384, 1
  %386 = getelementptr { ptr, ptr, ptr, i32 }, ptr %373, i32 0, i32 2
  %387 = load ptr, ptr %386, align 8
  %388 = insertvalue { ptr, ptr, ptr, i32 } %385, ptr %387, 2
  %389 = getelementptr { ptr, ptr, ptr, i32 }, ptr %373, i32 0, i32 3
  %390 = load i32, ptr %389, align 4
  %391 = insertvalue { ptr, ptr, ptr, i32 } %388, i32 %390, 3
  %392 = alloca [3 x ptr], align 8
  %393 = call ptr @llvm.invariant.start.p0(i64 24, ptr %392)
  %394 = getelementptr [3 x ptr], ptr %392, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %394, align 8
  %395 = getelementptr [3 x ptr], ptr %392, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %395, align 8
  %396 = getelementptr [3 x ptr], ptr %392, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %396, align 8
  %397 = call ptr @llvm.invariant.start.p0(i64 280, ptr %381)
  %398 = getelementptr ptr, ptr %381, i32 %390
  %399 = getelementptr ptr, ptr %398, i32 4
  %400 = load ptr, ptr %399, align 8
  %401 = alloca [3 x ptr], align 8
  %402 = getelementptr [3 x ptr], ptr %401, i32 0, i32 0
  store ptr @buffer_typ, ptr %402, align 8
  %403 = getelementptr [3 x ptr], ptr %401, i32 0, i32 1
  store ptr @i32_typ, ptr %403, align 8
  %404 = getelementptr [3 x ptr], ptr %401, i32 0, i32 2
  store ptr @i32_typ, ptr %404, align 8
  %405 = call ptr %400({ ptr, ptr, ptr, i32 } %391, ptr %401, { ptr } %379, i32 13, i32 14)
  call void %405({ ptr, ptr, ptr, i32 } %391, { ptr, ptr, ptr, i32 } %391, ptr %392, { ptr } %379, i32 13, i32 14)
  %406 = getelementptr { ptr, i160 }, ptr %373, i32 0, i32 0
  %407 = load ptr, ptr %406, align 8
  %408 = insertvalue { ptr, i160 } undef, ptr %407, 0
  %409 = getelementptr { ptr, i160 }, ptr %373, i32 0, i32 1
  %410 = load i160, ptr %409, align 4
  %411 = insertvalue { ptr, i160 } %408, i160 %410, 1
  %412 = alloca [1 x ptr], align 8
  %413 = call ptr @llvm.invariant.start.p0(i64 8, ptr %412)
  %414 = getelementptr [1 x ptr], ptr %412, i32 0, i32 0
  store ptr @_parameterization_String, ptr %414, align 8
  %415 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %416 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %417 = alloca [1 x ptr], align 8
  %418 = getelementptr [1 x ptr], ptr %417, i32 0, i32 0
  store ptr %407, ptr %418, align 8
  %419 = call ptr %416(ptr %417, { ptr, i160 } %411)
  call void %419(ptr %412, { ptr, i160 } %411)
  %420 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ i32, double }, ptr null, i32 1) to i64))
  %421 = alloca { ptr, ptr, ptr, i32 }, align 8
  %422 = getelementptr { ptr, ptr, ptr, i32 }, ptr %421, i32 0, i32 1
  %423 = getelementptr { ptr, ptr, ptr, i32 }, ptr %421, i32 0, i32 3
  store ptr @Beaver, ptr %421, align 8
  store ptr %420, ptr %422, align 8
  store i32 7, ptr %423, align 4
  %424 = call ptr @llvm.invariant.start.p0(i64 16, ptr %421)
  %425 = getelementptr { ptr, ptr, ptr, i32 }, ptr %421, i32 0, i32 0
  %426 = load ptr, ptr %425, align 8
  %427 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %426, 0
  %428 = getelementptr { ptr, ptr, ptr, i32 }, ptr %421, i32 0, i32 1
  %429 = load ptr, ptr %428, align 8
  %430 = insertvalue { ptr, ptr, ptr, i32 } %427, ptr %429, 1
  %431 = getelementptr { ptr, ptr, ptr, i32 }, ptr %421, i32 0, i32 2
  %432 = load ptr, ptr %431, align 8
  %433 = insertvalue { ptr, ptr, ptr, i32 } %430, ptr %432, 2
  %434 = getelementptr { ptr, ptr, ptr, i32 }, ptr %421, i32 0, i32 3
  %435 = load i32, ptr %434, align 4
  %436 = insertvalue { ptr, ptr, ptr, i32 } %433, i32 %435, 3
  %437 = alloca [2 x ptr], align 8
  %438 = call ptr @llvm.invariant.start.p0(i64 16, ptr %437)
  %439 = getelementptr [2 x ptr], ptr %437, i32 0, i32 1
  store ptr @_parameterization_Ptrf64, ptr %439, align 8
  %440 = getelementptr [2 x ptr], ptr %437, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %440, align 8
  %441 = call ptr @llvm.invariant.start.p0(i64 64, ptr %426)
  %442 = getelementptr ptr, ptr %426, i32 %435
  %443 = getelementptr ptr, ptr %442, i32 2
  %444 = load ptr, ptr %443, align 8
  %445 = alloca [2 x ptr], align 8
  %446 = getelementptr [2 x ptr], ptr %445, i32 0, i32 0
  store ptr @i32_typ, ptr %446, align 8
  %447 = getelementptr [2 x ptr], ptr %445, i32 0, i32 1
  store ptr @f64_typ, ptr %447, align 8
  %448 = call ptr %444({ ptr, ptr, ptr, i32 } %436, ptr %445, i32 10, double 1.000000e+01)
  call void %448({ ptr, ptr, ptr, i32 } %436, { ptr, ptr, ptr, i32 } %436, ptr %437, i32 10, double 1.000000e+01)
  %449 = alloca { ptr, ptr, ptr, i32 }, align 8
  %450 = getelementptr { ptr, ptr, ptr, i32 }, ptr %421, i32 0, i32 0
  %451 = getelementptr { ptr, ptr, ptr, i32 }, ptr %449, i32 0, i32 0
  %452 = load ptr, ptr %450, align 8
  store ptr %452, ptr %451, align 8
  %453 = getelementptr { ptr, ptr, ptr, i32 }, ptr %421, i32 0, i32 1
  %454 = getelementptr { ptr, ptr, ptr, i32 }, ptr %449, i32 0, i32 1
  %455 = load ptr, ptr %453, align 8
  store ptr %455, ptr %454, align 8
  %456 = getelementptr { ptr, ptr, ptr, i32 }, ptr %421, i32 0, i32 2
  %457 = getelementptr { ptr, ptr, ptr, i32 }, ptr %449, i32 0, i32 2
  %458 = load ptr, ptr %456, align 8
  store ptr %458, ptr %457, align 8
  %459 = getelementptr { ptr, ptr, ptr, i32 }, ptr %421, i32 0, i32 3
  %460 = getelementptr { ptr, ptr, ptr, i32 }, ptr %449, i32 0, i32 3
  %461 = load i32, ptr %459, align 4
  store i32 %461, ptr %460, align 4
  call void @set_offset(ptr %449, ptr @Beaver)
  %462 = call ptr @llvm.invariant.start.p0(i64 24, ptr %449)
  %463 = alloca { ptr, ptr, ptr, i32 }, align 8
  %464 = getelementptr { ptr, ptr, ptr, i32 }, ptr %449, i32 0, i32 0
  %465 = getelementptr { ptr, ptr, ptr, i32 }, ptr %463, i32 0, i32 0
  %466 = load ptr, ptr %464, align 8
  store ptr %466, ptr %465, align 8
  %467 = getelementptr { ptr, ptr, ptr, i32 }, ptr %449, i32 0, i32 1
  %468 = getelementptr { ptr, ptr, ptr, i32 }, ptr %463, i32 0, i32 1
  %469 = load ptr, ptr %467, align 8
  store ptr %469, ptr %468, align 8
  %470 = getelementptr { ptr, ptr, ptr, i32 }, ptr %449, i32 0, i32 2
  %471 = getelementptr { ptr, ptr, ptr, i32 }, ptr %463, i32 0, i32 2
  %472 = load ptr, ptr %470, align 8
  store ptr %472, ptr %471, align 8
  %473 = getelementptr { ptr, ptr, ptr, i32 }, ptr %449, i32 0, i32 3
  %474 = getelementptr { ptr, ptr, ptr, i32 }, ptr %463, i32 0, i32 3
  %475 = load i32, ptr %473, align 4
  store i32 %475, ptr %474, align 4
  %476 = call ptr @llvm.invariant.start.p0(i64 16, ptr %463)
  %477 = getelementptr { ptr, i160 }, ptr %339, i32 0, i32 0
  %478 = load ptr, ptr %477, align 8
  %479 = insertvalue { ptr, i160 } undef, ptr %478, 0
  %480 = getelementptr { ptr, i160 }, ptr %339, i32 0, i32 1
  %481 = load i160, ptr %480, align 4
  %482 = insertvalue { ptr, i160 } %479, i160 %481, 1
  %483 = getelementptr { ptr, i160 }, ptr %463, i32 0, i32 0
  %484 = load ptr, ptr %483, align 8
  %485 = insertvalue { ptr, i160 } undef, ptr %484, 0
  %486 = getelementptr { ptr, i160 }, ptr %463, i32 0, i32 1
  %487 = load i160, ptr %486, align 4
  %488 = insertvalue { ptr, i160 } %485, i160 %487, 1
  %489 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 0
  %490 = load ptr, ptr %489, align 8
  %491 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %490, 0
  %492 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 1
  %493 = load ptr, ptr %492, align 8
  %494 = insertvalue { ptr, ptr, ptr, i32 } %491, ptr %493, 1
  %495 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 2
  %496 = load ptr, ptr %495, align 8
  %497 = insertvalue { ptr, ptr, ptr, i32 } %494, ptr %496, 2
  %498 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 3
  %499 = load i32, ptr %498, align 4
  %500 = insertvalue { ptr, ptr, ptr, i32 } %497, i32 %499, 3
  %501 = alloca [2 x ptr], align 8
  %502 = call ptr @llvm.invariant.start.p0(i64 16, ptr %501)
  %503 = getelementptr [2 x ptr], ptr %501, i32 0, i32 1
  store ptr @_parameterization_Beaver, ptr %503, align 8
  %504 = getelementptr [2 x ptr], ptr %501, i32 0, i32 0
  store ptr @_parameterization_Animal, ptr %504, align 8
  %505 = call ptr @llvm.invariant.start.p0(i64 56, ptr %490)
  %506 = getelementptr ptr, ptr %490, i32 %499
  %507 = getelementptr ptr, ptr %506, i32 1
  %508 = load ptr, ptr %507, align 8
  %509 = alloca [2 x ptr], align 8
  %510 = getelementptr [2 x ptr], ptr %509, i32 0, i32 0
  store ptr %478, ptr %510, align 8
  %511 = getelementptr [2 x ptr], ptr %509, i32 0, i32 1
  store ptr %484, ptr %511, align 8
  %512 = call ptr %508({ ptr, ptr, ptr, i32 } %500, ptr %509, { ptr, i160 } %482, { ptr, i160 } %488)
  call void %512({ ptr, ptr, ptr, i32 } %500, { ptr, ptr, ptr, i32 } %500, ptr %501, { ptr, i160 } %482, { ptr, i160 } %488)
  %513 = alloca i160, align 8
  %514 = alloca ptr, align 8
  store i32 7, ptr %513, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %514, align 4
  %515 = load ptr, ptr %514, align 8
  %516 = insertvalue { ptr, i160 } undef, ptr %515, 0
  %517 = load i160, ptr %513, align 4
  %518 = insertvalue { ptr, i160 } %516, i160 %517, 1
  %519 = alloca { ptr, i64 }, align 8
  %520 = getelementptr { ptr, i64 }, ptr %519, i32 0, i32 0
  %521 = load ptr, ptr %185, align 8
  store ptr %521, ptr %520, align 8
  %522 = getelementptr { ptr, i64 }, ptr %519, i32 0, i32 1
  %523 = load i64, ptr %184, align 4
  store i64 %523, ptr %522, align 4
  %524 = getelementptr { ptr, i160 }, ptr %519, i32 0, i32 0
  %525 = load ptr, ptr %524, align 8
  %526 = insertvalue { ptr, i160 } undef, ptr %525, 0
  %527 = getelementptr { ptr, i160 }, ptr %519, i32 0, i32 1
  %528 = load i160, ptr %527, align 4
  %529 = insertvalue { ptr, i160 } %526, i160 %528, 1
  %530 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 0
  %531 = load ptr, ptr %530, align 8
  %532 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %531, 0
  %533 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 1
  %534 = load ptr, ptr %533, align 8
  %535 = insertvalue { ptr, ptr, ptr, i32 } %532, ptr %534, 1
  %536 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 2
  %537 = load ptr, ptr %536, align 8
  %538 = insertvalue { ptr, ptr, ptr, i32 } %535, ptr %537, 2
  %539 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 3
  %540 = load i32, ptr %539, align 4
  %541 = insertvalue { ptr, ptr, ptr, i32 } %538, i32 %540, 3
  %542 = alloca [2 x ptr], align 8
  %543 = call ptr @llvm.invariant.start.p0(i64 16, ptr %542)
  %544 = getelementptr [2 x ptr], ptr %542, i32 0, i32 1
  store ptr @_parameterization_Ptrf64_or_Ptri32, ptr %544, align 8
  %545 = getelementptr [2 x ptr], ptr %542, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %545, align 8
  %546 = call ptr @llvm.invariant.start.p0(i64 56, ptr %531)
  %547 = getelementptr ptr, ptr %531, i32 %540
  %548 = getelementptr ptr, ptr %547, i32 1
  %549 = load ptr, ptr %548, align 8
  %550 = alloca [2 x ptr], align 8
  %551 = getelementptr [2 x ptr], ptr %550, i32 0, i32 0
  store ptr %515, ptr %551, align 8
  %552 = getelementptr [2 x ptr], ptr %550, i32 0, i32 1
  store ptr %525, ptr %552, align 8
  %553 = call ptr %549({ ptr, ptr, ptr, i32 } %541, ptr %550, { ptr, i160 } %518, { ptr, i160 } %529)
  call void %553({ ptr, ptr, ptr, i32 } %541, { ptr, ptr, ptr, i32 } %541, ptr %542, { ptr, i160 } %518, { ptr, i160 } %529)
  %554 = call ptr @malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 17) to i64))
  %555 = alloca ptr, align 8
  store ptr %554, ptr %555, align 8
  %556 = alloca { ptr, ptr, ptr, i32 }, align 8
  %557 = getelementptr { ptr, ptr, ptr, i32 }, ptr %555, i32 0, i32 0
  %558 = getelementptr { ptr, ptr, ptr, i32 }, ptr %556, i32 0, i32 0
  %559 = load ptr, ptr %557, align 8
  store ptr %559, ptr %558, align 8
  %560 = getelementptr { ptr, ptr, ptr, i32 }, ptr %555, i32 0, i32 1
  %561 = getelementptr { ptr, ptr, ptr, i32 }, ptr %556, i32 0, i32 1
  %562 = load ptr, ptr %560, align 8
  store ptr %562, ptr %561, align 8
  %563 = getelementptr { ptr, ptr, ptr, i32 }, ptr %555, i32 0, i32 2
  %564 = getelementptr { ptr, ptr, ptr, i32 }, ptr %556, i32 0, i32 2
  %565 = load ptr, ptr %563, align 8
  store ptr %565, ptr %564, align 8
  %566 = getelementptr { ptr, ptr, ptr, i32 }, ptr %555, i32 0, i32 3
  %567 = getelementptr { ptr, ptr, ptr, i32 }, ptr %556, i32 0, i32 3
  %568 = load i32, ptr %566, align 4
  store i32 %568, ptr %567, align 4
  %569 = call ptr @llvm.invariant.start.p0(i64 16, ptr %556)
  %570 = load ptr, ptr %556, align 8
  %571 = getelementptr i8, ptr %570, i64 0
  %572 = load i128, ptr @whuhm_barrys_color_is, align 4
  store i128 %572, ptr %571, align 4
  %573 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %574 = alloca { ptr, ptr, ptr, i32 }, align 8
  %575 = getelementptr { ptr, ptr, ptr, i32 }, ptr %574, i32 0, i32 1
  %576 = getelementptr { ptr, ptr, ptr, i32 }, ptr %574, i32 0, i32 3
  store ptr @String, ptr %574, align 8
  store ptr %573, ptr %575, align 8
  store i32 7, ptr %576, align 4
  %577 = call ptr @llvm.invariant.start.p0(i64 16, ptr %574)
  %578 = getelementptr { ptr }, ptr %556, i32 0, i32 0
  %579 = load ptr, ptr %578, align 8
  %580 = insertvalue { ptr } undef, ptr %579, 0
  %581 = getelementptr { ptr, ptr, ptr, i32 }, ptr %574, i32 0, i32 0
  %582 = load ptr, ptr %581, align 8
  %583 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %582, 0
  %584 = getelementptr { ptr, ptr, ptr, i32 }, ptr %574, i32 0, i32 1
  %585 = load ptr, ptr %584, align 8
  %586 = insertvalue { ptr, ptr, ptr, i32 } %583, ptr %585, 1
  %587 = getelementptr { ptr, ptr, ptr, i32 }, ptr %574, i32 0, i32 2
  %588 = load ptr, ptr %587, align 8
  %589 = insertvalue { ptr, ptr, ptr, i32 } %586, ptr %588, 2
  %590 = getelementptr { ptr, ptr, ptr, i32 }, ptr %574, i32 0, i32 3
  %591 = load i32, ptr %590, align 4
  %592 = insertvalue { ptr, ptr, ptr, i32 } %589, i32 %591, 3
  %593 = alloca [3 x ptr], align 8
  %594 = call ptr @llvm.invariant.start.p0(i64 24, ptr %593)
  %595 = getelementptr [3 x ptr], ptr %593, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %595, align 8
  %596 = getelementptr [3 x ptr], ptr %593, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %596, align 8
  %597 = getelementptr [3 x ptr], ptr %593, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %597, align 8
  %598 = call ptr @llvm.invariant.start.p0(i64 280, ptr %582)
  %599 = getelementptr ptr, ptr %582, i32 %591
  %600 = getelementptr ptr, ptr %599, i32 4
  %601 = load ptr, ptr %600, align 8
  %602 = alloca [3 x ptr], align 8
  %603 = getelementptr [3 x ptr], ptr %602, i32 0, i32 0
  store ptr @buffer_typ, ptr %603, align 8
  %604 = getelementptr [3 x ptr], ptr %602, i32 0, i32 1
  store ptr @i32_typ, ptr %604, align 8
  %605 = getelementptr [3 x ptr], ptr %602, i32 0, i32 2
  store ptr @i32_typ, ptr %605, align 8
  %606 = call ptr %601({ ptr, ptr, ptr, i32 } %592, ptr %602, { ptr } %580, i32 16, i32 17)
  call void %606({ ptr, ptr, ptr, i32 } %592, { ptr, ptr, ptr, i32 } %592, ptr %593, { ptr } %580, i32 16, i32 17)
  %607 = getelementptr { ptr, i160 }, ptr %574, i32 0, i32 0
  %608 = load ptr, ptr %607, align 8
  %609 = insertvalue { ptr, i160 } undef, ptr %608, 0
  %610 = getelementptr { ptr, i160 }, ptr %574, i32 0, i32 1
  %611 = load i160, ptr %610, align 4
  %612 = insertvalue { ptr, i160 } %609, i160 %611, 1
  %613 = alloca [1 x ptr], align 8
  %614 = call ptr @llvm.invariant.start.p0(i64 8, ptr %613)
  %615 = getelementptr [1 x ptr], ptr %613, i32 0, i32 0
  store ptr @_parameterization_String, ptr %615, align 8
  %616 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %617 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %618 = alloca [1 x ptr], align 8
  %619 = getelementptr [1 x ptr], ptr %618, i32 0, i32 0
  store ptr %608, ptr %619, align 8
  %620 = call ptr %617(ptr %618, { ptr, i160 } %612)
  call void %620(ptr %613, { ptr, i160 } %612)
  %621 = getelementptr { ptr, ptr, ptr, i32 }, ptr %463, i32 0, i32 0
  %622 = load ptr, ptr %621, align 8
  %623 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %622, 0
  %624 = getelementptr { ptr, ptr, ptr, i32 }, ptr %463, i32 0, i32 1
  %625 = load ptr, ptr %624, align 8
  %626 = insertvalue { ptr, ptr, ptr, i32 } %623, ptr %625, 1
  %627 = getelementptr { ptr, ptr, ptr, i32 }, ptr %463, i32 0, i32 2
  %628 = load ptr, ptr %627, align 8
  %629 = insertvalue { ptr, ptr, ptr, i32 } %626, ptr %628, 2
  %630 = getelementptr { ptr, ptr, ptr, i32 }, ptr %463, i32 0, i32 3
  %631 = load i32, ptr %630, align 4
  %632 = insertvalue { ptr, ptr, ptr, i32 } %629, i32 %631, 3
  %633 = alloca [0 x ptr], align 8
  %634 = call ptr @llvm.invariant.start.p0(i64 0, ptr %633)
  %635 = call ptr @llvm.invariant.start.p0(i64 64, ptr %622)
  %636 = getelementptr ptr, ptr %622, i32 %631
  %637 = getelementptr ptr, ptr %636, i32 4
  %638 = load ptr, ptr %637, align 8
  %639 = alloca [0 x ptr], align 8
  %640 = call ptr %638({ ptr, ptr, ptr, i32 } %632, ptr %639)
  call void %640({ ptr, ptr, ptr, i32 } %632, { ptr, ptr, ptr, i32 } %632, ptr %633)
  %641 = getelementptr { ptr, ptr, ptr, i32 }, ptr %463, i32 0, i32 0
  %642 = load ptr, ptr %641, align 8
  %643 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %642, 0
  %644 = getelementptr { ptr, ptr, ptr, i32 }, ptr %463, i32 0, i32 1
  %645 = load ptr, ptr %644, align 8
  %646 = insertvalue { ptr, ptr, ptr, i32 } %643, ptr %645, 1
  %647 = getelementptr { ptr, ptr, ptr, i32 }, ptr %463, i32 0, i32 2
  %648 = load ptr, ptr %647, align 8
  %649 = insertvalue { ptr, ptr, ptr, i32 } %646, ptr %648, 2
  %650 = getelementptr { ptr, ptr, ptr, i32 }, ptr %463, i32 0, i32 3
  %651 = load i32, ptr %650, align 4
  %652 = insertvalue { ptr, ptr, ptr, i32 } %649, i32 %651, 3
  %653 = alloca [1 x ptr], align 8
  %654 = call ptr @llvm.invariant.start.p0(i64 8, ptr %653)
  %655 = getelementptr [1 x ptr], ptr %653, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %655, align 8
  %656 = call ptr @llvm.invariant.start.p0(i64 64, ptr %642)
  %657 = getelementptr ptr, ptr %642, i32 %651
  %658 = getelementptr ptr, ptr %657, i32 3
  %659 = load ptr, ptr %658, align 8
  %660 = alloca [1 x ptr], align 8
  %661 = getelementptr [1 x ptr], ptr %660, i32 0, i32 0
  store ptr @i32_typ, ptr %661, align 8
  %662 = call ptr %659({ ptr, ptr, ptr, i32 } %652, ptr %660, i32 5)
  call void %662({ ptr, ptr, ptr, i32 } %652, { ptr, ptr, ptr, i32 } %652, ptr %653, i32 5)
  %663 = getelementptr { ptr, ptr, ptr, i32 }, ptr %463, i32 0, i32 0
  %664 = load ptr, ptr %663, align 8
  %665 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %664, 0
  %666 = getelementptr { ptr, ptr, ptr, i32 }, ptr %463, i32 0, i32 1
  %667 = load ptr, ptr %666, align 8
  %668 = insertvalue { ptr, ptr, ptr, i32 } %665, ptr %667, 1
  %669 = getelementptr { ptr, ptr, ptr, i32 }, ptr %463, i32 0, i32 2
  %670 = load ptr, ptr %669, align 8
  %671 = insertvalue { ptr, ptr, ptr, i32 } %668, ptr %670, 2
  %672 = getelementptr { ptr, ptr, ptr, i32 }, ptr %463, i32 0, i32 3
  %673 = load i32, ptr %672, align 4
  %674 = insertvalue { ptr, ptr, ptr, i32 } %671, i32 %673, 3
  %675 = alloca [0 x ptr], align 8
  %676 = call ptr @llvm.invariant.start.p0(i64 0, ptr %675)
  %677 = call ptr @llvm.invariant.start.p0(i64 64, ptr %664)
  %678 = getelementptr ptr, ptr %664, i32 %673
  %679 = getelementptr ptr, ptr %678, i32 4
  %680 = load ptr, ptr %679, align 8
  %681 = alloca [0 x ptr], align 8
  %682 = call ptr %680({ ptr, ptr, ptr, i32 } %674, ptr %681)
  call void %682({ ptr, ptr, ptr, i32 } %674, { ptr, ptr, ptr, i32 } %674, ptr %675)
  %683 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ i32 }, ptr null, i32 1) to i64))
  %684 = alloca { ptr, ptr, ptr, i32 }, align 8
  %685 = getelementptr { ptr, ptr, ptr, i32 }, ptr %684, i32 0, i32 1
  %686 = getelementptr { ptr, ptr, ptr, i32 }, ptr %684, i32 0, i32 3
  store ptr @Integer, ptr %684, align 8
  store ptr %683, ptr %685, align 8
  store i32 7, ptr %686, align 4
  %687 = call ptr @llvm.invariant.start.p0(i64 16, ptr %684)
  %688 = getelementptr { ptr, ptr, ptr, i32 }, ptr %684, i32 0, i32 0
  %689 = load ptr, ptr %688, align 8
  %690 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %689, 0
  %691 = getelementptr { ptr, ptr, ptr, i32 }, ptr %684, i32 0, i32 1
  %692 = load ptr, ptr %691, align 8
  %693 = insertvalue { ptr, ptr, ptr, i32 } %690, ptr %692, 1
  %694 = getelementptr { ptr, ptr, ptr, i32 }, ptr %684, i32 0, i32 2
  %695 = load ptr, ptr %694, align 8
  %696 = insertvalue { ptr, ptr, ptr, i32 } %693, ptr %695, 2
  %697 = getelementptr { ptr, ptr, ptr, i32 }, ptr %684, i32 0, i32 3
  %698 = load i32, ptr %697, align 4
  %699 = insertvalue { ptr, ptr, ptr, i32 } %696, i32 %698, 3
  %700 = alloca [1 x ptr], align 8
  %701 = call ptr @llvm.invariant.start.p0(i64 8, ptr %700)
  %702 = getelementptr [1 x ptr], ptr %700, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %702, align 8
  %703 = call ptr @llvm.invariant.start.p0(i64 104, ptr %689)
  %704 = getelementptr ptr, ptr %689, i32 %698
  %705 = getelementptr ptr, ptr %704, i32 1
  %706 = load ptr, ptr %705, align 8
  %707 = alloca [1 x ptr], align 8
  %708 = getelementptr [1 x ptr], ptr %707, i32 0, i32 0
  store ptr @i32_typ, ptr %708, align 8
  %709 = call ptr %706({ ptr, ptr, ptr, i32 } %699, ptr %707, i32 89)
  call void %709({ ptr, ptr, ptr, i32 } %699, { ptr, ptr, ptr, i32 } %699, ptr %700, i32 89)
  %710 = alloca { ptr, ptr, ptr, i32 }, align 8
  %711 = getelementptr { ptr, ptr, ptr, i32 }, ptr %684, i32 0, i32 0
  %712 = getelementptr { ptr, ptr, ptr, i32 }, ptr %710, i32 0, i32 0
  %713 = load ptr, ptr %711, align 8
  store ptr %713, ptr %712, align 8
  %714 = getelementptr { ptr, ptr, ptr, i32 }, ptr %684, i32 0, i32 1
  %715 = getelementptr { ptr, ptr, ptr, i32 }, ptr %710, i32 0, i32 1
  %716 = load ptr, ptr %714, align 8
  store ptr %716, ptr %715, align 8
  %717 = getelementptr { ptr, ptr, ptr, i32 }, ptr %684, i32 0, i32 2
  %718 = getelementptr { ptr, ptr, ptr, i32 }, ptr %710, i32 0, i32 2
  %719 = load ptr, ptr %717, align 8
  store ptr %719, ptr %718, align 8
  %720 = getelementptr { ptr, ptr, ptr, i32 }, ptr %684, i32 0, i32 3
  %721 = getelementptr { ptr, ptr, ptr, i32 }, ptr %710, i32 0, i32 3
  %722 = load i32, ptr %720, align 4
  store i32 %722, ptr %721, align 4
  call void @set_offset(ptr %710, ptr @Integer)
  %723 = call ptr @llvm.invariant.start.p0(i64 24, ptr %710)
  %724 = alloca { ptr, ptr, ptr, i32 }, align 8
  %725 = getelementptr { ptr, ptr, ptr, i32 }, ptr %710, i32 0, i32 0
  %726 = getelementptr { ptr, ptr, ptr, i32 }, ptr %724, i32 0, i32 0
  %727 = load ptr, ptr %725, align 8
  store ptr %727, ptr %726, align 8
  %728 = getelementptr { ptr, ptr, ptr, i32 }, ptr %710, i32 0, i32 1
  %729 = getelementptr { ptr, ptr, ptr, i32 }, ptr %724, i32 0, i32 1
  %730 = load ptr, ptr %728, align 8
  store ptr %730, ptr %729, align 8
  %731 = getelementptr { ptr, ptr, ptr, i32 }, ptr %710, i32 0, i32 2
  %732 = getelementptr { ptr, ptr, ptr, i32 }, ptr %724, i32 0, i32 2
  %733 = load ptr, ptr %731, align 8
  store ptr %733, ptr %732, align 8
  %734 = getelementptr { ptr, ptr, ptr, i32 }, ptr %710, i32 0, i32 3
  %735 = getelementptr { ptr, ptr, ptr, i32 }, ptr %724, i32 0, i32 3
  %736 = load i32, ptr %734, align 4
  store i32 %736, ptr %735, align 4
  %737 = call ptr @llvm.invariant.start.p0(i64 16, ptr %724)
  %738 = getelementptr { ptr, ptr, ptr, i32 }, ptr %724, i32 0, i32 0
  %739 = load ptr, ptr %738, align 8
  %740 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %739, 0
  %741 = getelementptr { ptr, ptr, ptr, i32 }, ptr %724, i32 0, i32 1
  %742 = load ptr, ptr %741, align 8
  %743 = insertvalue { ptr, ptr, ptr, i32 } %740, ptr %742, 1
  %744 = getelementptr { ptr, ptr, ptr, i32 }, ptr %724, i32 0, i32 2
  %745 = load ptr, ptr %744, align 8
  %746 = insertvalue { ptr, ptr, ptr, i32 } %743, ptr %745, 2
  %747 = getelementptr { ptr, ptr, ptr, i32 }, ptr %724, i32 0, i32 3
  %748 = load i32, ptr %747, align 4
  %749 = insertvalue { ptr, ptr, ptr, i32 } %746, i32 %748, 3
  %750 = alloca [1 x ptr], align 8
  %751 = call ptr @llvm.invariant.start.p0(i64 8, ptr %750)
  %752 = getelementptr [1 x ptr], ptr %750, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %752, align 8
  %753 = call ptr @llvm.invariant.start.p0(i64 104, ptr %739)
  %754 = getelementptr ptr, ptr %739, i32 %748
  %755 = getelementptr ptr, ptr %754, i32 3
  %756 = load ptr, ptr %755, align 8
  %757 = alloca [1 x ptr], align 8
  %758 = getelementptr [1 x ptr], ptr %757, i32 0, i32 0
  store ptr @i32_typ, ptr %758, align 8
  %759 = call ptr %756({ ptr, ptr, ptr, i32 } %749, ptr %757, i32 7)
  %760 = call { ptr, ptr, ptr, i32 } %759({ ptr, ptr, ptr, i32 } %749, { ptr, ptr, ptr, i32 } %749, ptr %750, i32 7)
  %761 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %760, ptr %761, align 8
  %762 = call ptr @llvm.invariant.start.p0(i64 16, ptr %761)
  %763 = alloca { ptr, ptr, ptr, i32 }, align 8
  %764 = getelementptr { ptr, ptr, ptr, i32 }, ptr %761, i32 0, i32 0
  %765 = getelementptr { ptr, ptr, ptr, i32 }, ptr %763, i32 0, i32 0
  %766 = load ptr, ptr %764, align 8
  store ptr %766, ptr %765, align 8
  %767 = getelementptr { ptr, ptr, ptr, i32 }, ptr %761, i32 0, i32 1
  %768 = getelementptr { ptr, ptr, ptr, i32 }, ptr %763, i32 0, i32 1
  %769 = load ptr, ptr %767, align 8
  store ptr %769, ptr %768, align 8
  %770 = getelementptr { ptr, ptr, ptr, i32 }, ptr %761, i32 0, i32 2
  %771 = getelementptr { ptr, ptr, ptr, i32 }, ptr %763, i32 0, i32 2
  %772 = load ptr, ptr %770, align 8
  store ptr %772, ptr %771, align 8
  %773 = getelementptr { ptr, ptr, ptr, i32 }, ptr %761, i32 0, i32 3
  %774 = getelementptr { ptr, ptr, ptr, i32 }, ptr %763, i32 0, i32 3
  %775 = load i32, ptr %773, align 4
  store i32 %775, ptr %774, align 4
  call void @set_offset(ptr %763, ptr @Integer)
  %776 = call ptr @llvm.invariant.start.p0(i64 24, ptr %763)
  %777 = getelementptr { ptr, ptr, ptr, i32 }, ptr %763, i32 0, i32 0
  %778 = load ptr, ptr %777, align 8
  %779 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %778, 0
  %780 = getelementptr { ptr, ptr, ptr, i32 }, ptr %763, i32 0, i32 1
  %781 = load ptr, ptr %780, align 8
  %782 = insertvalue { ptr, ptr, ptr, i32 } %779, ptr %781, 1
  %783 = getelementptr { ptr, ptr, ptr, i32 }, ptr %763, i32 0, i32 2
  %784 = load ptr, ptr %783, align 8
  %785 = insertvalue { ptr, ptr, ptr, i32 } %782, ptr %784, 2
  %786 = getelementptr { ptr, ptr, ptr, i32 }, ptr %763, i32 0, i32 3
  %787 = load i32, ptr %786, align 4
  %788 = insertvalue { ptr, ptr, ptr, i32 } %785, i32 %787, 3
  %789 = alloca [0 x ptr], align 8
  %790 = call ptr @llvm.invariant.start.p0(i64 0, ptr %789)
  %791 = call ptr @llvm.invariant.start.p0(i64 104, ptr %778)
  %792 = getelementptr ptr, ptr %778, i32 %787
  %793 = getelementptr ptr, ptr %792, i32 6
  %794 = load ptr, ptr %793, align 8
  %795 = alloca [0 x ptr], align 8
  %796 = call ptr %794({ ptr, ptr, ptr, i32 } %788, ptr %795)
  call void %796({ ptr, ptr, ptr, i32 } %788, { ptr, ptr, ptr, i32 } %788, ptr %789)
  %797 = alloca [1 x ptr], align 8
  %798 = call ptr @llvm.invariant.start.p0(i64 8, ptr %797)
  %799 = getelementptr [1 x ptr], ptr %797, i32 0, i32 0
  store ptr @_parameterization_Ptrf64, ptr %799, align 8
  %800 = call ptr @llvm.invariant.start.p0(i64 136, ptr @Math)
  %801 = load ptr, ptr getelementptr (ptr, ptr @Math, i32 7), align 8
  %802 = alloca [1 x ptr], align 8
  %803 = getelementptr [1 x ptr], ptr %802, i32 0, i32 0
  store ptr @f64_typ, ptr %803, align 8
  %804 = call ptr %801(ptr %802, double 9.000000e+00)
  %805 = call double %804(ptr %797, double 9.000000e+00)
  %806 = alloca i64, align 8
  %807 = alloca ptr, align 8
  store i32 -9, ptr %806, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %807, align 4
  %808 = load ptr, ptr %807, align 8
  %809 = insertvalue { ptr, i64 } undef, ptr %808, 0
  %810 = load i64, ptr %806, align 4
  %811 = insertvalue { ptr, i64 } %809, i64 %810, 1
  %812 = alloca [1 x ptr], align 8
  %813 = call ptr @llvm.invariant.start.p0(i64 8, ptr %812)
  %814 = getelementptr [1 x ptr], ptr %812, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %814, align 8
  %815 = call ptr @llvm.invariant.start.p0(i64 136, ptr @Math)
  %816 = load ptr, ptr getelementptr (ptr, ptr getelementptr (ptr, ptr @Math, i32 7), i32 1), align 8
  %817 = alloca [1 x ptr], align 8
  %818 = getelementptr [1 x ptr], ptr %817, i32 0, i32 0
  store ptr %808, ptr %818, align 8
  %819 = call ptr %816(ptr %817, { ptr, i64 } %811)
  %820 = call { ptr, i64 } %819(ptr %812, { ptr, i64 } %811)
  %821 = alloca { ptr, i64 }, align 8
  store { ptr, i64 } %820, ptr %821, align 8
  %822 = getelementptr { ptr, i64 }, ptr %821, i32 0, i32 1
  %823 = load i32, ptr %822, align 4
  %824 = alloca i160, align 8
  %825 = alloca ptr, align 8
  store i32 %823, ptr %824, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %825, align 4
  %826 = load ptr, ptr %825, align 8
  %827 = insertvalue { ptr, i160 } undef, ptr %826, 0
  %828 = load i160, ptr %824, align 4
  %829 = insertvalue { ptr, i160 } %827, i160 %828, 1
  %830 = alloca [1 x ptr], align 8
  %831 = call ptr @llvm.invariant.start.p0(i64 8, ptr %830)
  %832 = getelementptr [1 x ptr], ptr %830, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %832, align 8
  %833 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %834 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %835 = alloca [1 x ptr], align 8
  %836 = getelementptr [1 x ptr], ptr %835, i32 0, i32 0
  store ptr %826, ptr %836, align 8
  %837 = call ptr %834(ptr %835, { ptr, i160 } %829)
  call void %837(ptr %830, { ptr, i160 } %829)
  %838 = alloca i160, align 8
  %839 = alloca ptr, align 8
  store double %805, ptr %838, align 8
  store i64 ptrtoint (ptr @f64_typ to i64), ptr %839, align 4
  %840 = load ptr, ptr %839, align 8
  %841 = insertvalue { ptr, i160 } undef, ptr %840, 0
  %842 = load i160, ptr %838, align 4
  %843 = insertvalue { ptr, i160 } %841, i160 %842, 1
  %844 = alloca [1 x ptr], align 8
  %845 = call ptr @llvm.invariant.start.p0(i64 8, ptr %844)
  %846 = getelementptr [1 x ptr], ptr %844, i32 0, i32 0
  store ptr @_parameterization_Ptrf64, ptr %846, align 8
  %847 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %848 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %849 = alloca [1 x ptr], align 8
  %850 = getelementptr [1 x ptr], ptr %849, i32 0, i32 0
  store ptr %840, ptr %850, align 8
  %851 = call ptr %848(ptr %849, { ptr, i160 } %843)
  call void %851(ptr %844, { ptr, i160 } %843)
  %852 = getelementptr { ptr, ptr, ptr, i32 }, ptr %339, i32 0, i32 0
  %853 = load ptr, ptr %852, align 8
  %854 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %853, 0
  %855 = getelementptr { ptr, ptr, ptr, i32 }, ptr %339, i32 0, i32 1
  %856 = load ptr, ptr %855, align 8
  %857 = insertvalue { ptr, ptr, ptr, i32 } %854, ptr %856, 1
  %858 = getelementptr { ptr, ptr, ptr, i32 }, ptr %339, i32 0, i32 2
  %859 = load ptr, ptr %858, align 8
  %860 = insertvalue { ptr, ptr, ptr, i32 } %857, ptr %859, 2
  %861 = getelementptr { ptr, ptr, ptr, i32 }, ptr %339, i32 0, i32 3
  %862 = load i32, ptr %861, align 4
  %863 = insertvalue { ptr, ptr, ptr, i32 } %860, i32 %862, 3
  call void @make_em_speak({ ptr, ptr, ptr, i32 } %863)
  %864 = getelementptr { ptr, ptr, ptr, i32 }, ptr %339, i32 0, i32 0
  %865 = load ptr, ptr %864, align 8
  %866 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %865, 0
  %867 = getelementptr { ptr, ptr, ptr, i32 }, ptr %339, i32 0, i32 1
  %868 = load ptr, ptr %867, align 8
  %869 = insertvalue { ptr, ptr, ptr, i32 } %866, ptr %868, 1
  %870 = getelementptr { ptr, ptr, ptr, i32 }, ptr %339, i32 0, i32 2
  %871 = load ptr, ptr %870, align 8
  %872 = insertvalue { ptr, ptr, ptr, i32 } %869, ptr %871, 2
  %873 = getelementptr { ptr, ptr, ptr, i32 }, ptr %339, i32 0, i32 3
  %874 = load i32, ptr %873, align 4
  %875 = insertvalue { ptr, ptr, ptr, i32 } %872, i32 %874, 3
  %876 = alloca [0 x ptr], align 8
  %877 = call ptr @llvm.invariant.start.p0(i64 0, ptr %876)
  %878 = call ptr @llvm.invariant.start.p0(i64 104, ptr %865)
  %879 = getelementptr ptr, ptr %865, i32 %874
  %880 = getelementptr ptr, ptr %879, i32 7
  %881 = load ptr, ptr %880, align 8
  %882 = alloca [0 x ptr], align 8
  %883 = call ptr %881({ ptr, ptr, ptr, i32 } %875, ptr %882)
  %884 = call { ptr, i160 } %883({ ptr, ptr, ptr, i32 } %875, { ptr, ptr, ptr, i32 } %875, ptr %876)
  %885 = alloca i160, align 8
  %886 = alloca ptr, align 8
  store i32 5, ptr %885, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %886, align 4
  %887 = alloca i64, align 8
  %888 = alloca i1, align 1
  %889 = alloca i32, align 4
  %890 = alloca i160, align 8
  %891 = alloca ptr, align 8
  %892 = alloca i64, align 8
  %893 = alloca [1 x ptr], align 8
  %894 = alloca [1 x ptr], align 8
  %895 = alloca i32, align 4
  %896 = alloca i32, align 4
  %897 = alloca i32, align 4
  %898 = alloca i1, align 1
  %899 = alloca i160, align 8
  %900 = alloca ptr, align 8
  %901 = alloca i64, align 8
  %902 = alloca i32, align 4
  %903 = alloca double, align 8
  %904 = alloca i32, align 4
  %905 = alloca { ptr, ptr, ptr, i32 }, align 8
  %906 = alloca i32, align 4
  %907 = alloca double, align 8
  %908 = alloca i32, align 4
  %909 = alloca [3 x ptr], align 8
  %910 = alloca [3 x ptr], align 8
  %911 = alloca { ptr, ptr, ptr, i32 }, align 8
  %912 = alloca { ptr, ptr, ptr, i32 }, align 8
  %913 = alloca i64, align 8
  %914 = alloca i1, align 1
  %915 = alloca i32, align 4
  %916 = alloca i160, align 8
  %917 = alloca ptr, align 8
  %918 = alloca i64, align 8
  %919 = alloca [1 x ptr], align 8
  %920 = alloca [1 x ptr], align 8
  %921 = alloca i160, align 8
  %922 = alloca ptr, align 8
  %923 = alloca i64, align 8
  %924 = alloca i64, align 8
  %925 = alloca i1, align 1
  %926 = alloca { ptr, ptr, ptr, i32 }, align 8
  %927 = alloca [0 x ptr], align 8
  %928 = alloca [0 x ptr], align 8
  %929 = alloca i32, align 4
  %930 = alloca { ptr, ptr, ptr, i32 }, align 8
  %931 = alloca i32, align 4
  %932 = alloca [1 x ptr], align 8
  %933 = alloca [1 x ptr], align 8
  %934 = alloca { ptr, ptr, ptr, i32 }, align 8
  %935 = alloca { ptr, ptr, ptr, i32 }, align 8
  %936 = alloca { ptr, ptr, ptr, i32 }, align 8
  %937 = alloca { ptr, ptr, ptr, i32 }, align 8
  %938 = alloca i32, align 4
  %939 = alloca i32, align 4
  %940 = alloca { ptr, ptr, ptr, i32 }, align 8
  %941 = alloca i32, align 4
  %942 = alloca i32, align 4
  %943 = alloca [2 x ptr], align 8
  %944 = alloca [2 x ptr], align 8
  %945 = alloca [0 x ptr], align 8
  %946 = alloca [0 x ptr], align 8
  %947 = alloca { ptr, ptr, ptr, i32 }, align 8
  %948 = alloca { ptr, ptr, ptr, i32 }, align 8
  %949 = alloca { ptr, ptr, ptr, i32 }, align 8
  %950 = alloca { ptr, ptr, ptr, i32 }, align 8
  %951 = alloca [0 x ptr], align 8
  %952 = alloca [0 x ptr], align 8
  %953 = alloca { ptr, i32 }, align 8
  %954 = alloca i64, align 8
  %955 = alloca i1, align 1
  %956 = alloca i32, align 4
  %957 = alloca { ptr, ptr, ptr, i32 }, align 8
  %958 = alloca [1 x ptr], align 8
  %959 = alloca [1 x ptr], align 8
  %960 = alloca { ptr, ptr, ptr, i32 }, align 8
  %961 = alloca [1 x ptr], align 8
  %962 = alloca [1 x ptr], align 8
  %963 = alloca { ptr, ptr, ptr, i32 }, align 8
  %964 = alloca { ptr, ptr, ptr, i32 }, align 8
  %965 = alloca { ptr, ptr, ptr, i32 }, align 8
  %966 = alloca [0 x ptr], align 8
  %967 = alloca [0 x ptr], align 8
  %968 = alloca i32, align 4
  %969 = alloca i160, align 8
  %970 = alloca ptr, align 8
  %971 = alloca i64, align 8
  %972 = alloca [1 x ptr], align 8
  %973 = alloca [1 x ptr], align 8
  %974 = alloca [0 x ptr], align 8
  %975 = alloca [0 x ptr], align 8
  %976 = alloca { ptr, ptr, ptr, i32 }, align 8
  %977 = alloca { ptr, ptr, ptr, i32 }, align 8
  %978 = alloca { ptr, ptr, ptr, i32 }, align 8
  %979 = alloca { ptr, ptr, ptr, i32 }, align 8
  %980 = alloca [0 x ptr], align 8
  %981 = alloca [0 x ptr], align 8
  %982 = alloca { ptr, i160 }, align 8
  %983 = alloca i64, align 8
  %984 = alloca i1, align 1
  %985 = alloca { ptr, ptr, ptr, i32 }, align 8
  %986 = alloca [0 x ptr], align 8
  %987 = alloca [0 x ptr], align 8
  %988 = alloca i32, align 4
  %989 = alloca i160, align 8
  %990 = alloca ptr, align 8
  %991 = alloca i64, align 8
  %992 = alloca [1 x ptr], align 8
  %993 = alloca [1 x ptr], align 8
  %994 = alloca { ptr, ptr, ptr, i32 }, align 8
  %995 = alloca ptr, align 8
  %996 = alloca ptr, align 8
  %997 = alloca { ptr, ptr, ptr, i32 }, align 8
  %998 = alloca { ptr, i160 }, align 8
  %999 = alloca i32, align 4
  %1000 = alloca i160, align 8
  %1001 = alloca ptr, align 8
  %1002 = alloca i64, align 8
  %1003 = alloca [1 x ptr], align 8
  %1004 = alloca [1 x ptr], align 8
  %1005 = alloca { ptr, i160 }, align 8
  %1006 = alloca i32, align 4
  %1007 = alloca i32, align 4
  %1008 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1009 = alloca i32, align 4
  %1010 = alloca i32, align 4
  %1011 = alloca [2 x ptr], align 8
  %1012 = alloca [2 x ptr], align 8
  %1013 = alloca [0 x ptr], align 8
  %1014 = alloca [0 x ptr], align 8
  %1015 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1016 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1017 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1018 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1019 = alloca [0 x ptr], align 8
  %1020 = alloca [0 x ptr], align 8
  %1021 = alloca { ptr, i32 }, align 8
  %1022 = alloca i64, align 8
  %1023 = alloca i1, align 1
  %1024 = alloca i32, align 4
  %1025 = alloca i32, align 4
  %1026 = alloca i1, align 1
  %1027 = alloca i160, align 8
  %1028 = alloca ptr, align 8
  %1029 = alloca i64, align 8
  %1030 = alloca [1 x ptr], align 8
  %1031 = alloca [1 x ptr], align 8
  %1032 = alloca i32, align 4
  %1033 = alloca ptr, align 8
  %1034 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1035 = alloca i32, align 4
  %1036 = alloca i32, align 4
  %1037 = alloca i32, align 4
  %1038 = alloca i32, align 4
  %1039 = alloca i32, align 4
  %1040 = alloca i32, align 4
  %1041 = alloca i32, align 4
  %1042 = alloca i32, align 4
  %1043 = alloca i32, align 4
  %1044 = alloca i32, align 4
  %1045 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1046 = alloca i32, align 4
  %1047 = alloca i32, align 4
  %1048 = alloca [3 x ptr], align 8
  %1049 = alloca [3 x ptr], align 8
  %1050 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1051 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1052 = alloca i32, align 4
  %1053 = alloca ptr, align 8
  %1054 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1055 = alloca i32, align 4
  %1056 = alloca i32, align 4
  %1057 = alloca i32, align 4
  %1058 = alloca i32, align 4
  %1059 = alloca i32, align 4
  %1060 = alloca i32, align 4
  %1061 = alloca i32, align 4
  %1062 = alloca i32, align 4
  %1063 = alloca i32, align 4
  %1064 = alloca i32, align 4
  %1065 = alloca i32, align 4
  %1066 = alloca i32, align 4
  %1067 = alloca i32, align 4
  %1068 = alloca i32, align 4
  %1069 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1070 = alloca i32, align 4
  %1071 = alloca i32, align 4
  %1072 = alloca [3 x ptr], align 8
  %1073 = alloca [3 x ptr], align 8
  %1074 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1075 = alloca [1 x ptr], align 8
  %1076 = alloca [1 x ptr], align 8
  %1077 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1078 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1079 = alloca i32, align 4
  %1080 = alloca [1 x ptr], align 8
  %1081 = alloca [1 x ptr], align 8
  %1082 = alloca i32, align 4
  %1083 = alloca i160, align 8
  %1084 = alloca ptr, align 8
  %1085 = alloca i64, align 8
  %1086 = alloca [1 x ptr], align 8
  %1087 = alloca [1 x ptr], align 8
  %1088 = alloca i32, align 4
  %1089 = alloca ptr, align 8
  %1090 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1091 = alloca i32, align 4
  %1092 = alloca i32, align 4
  %1093 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1094 = alloca i32, align 4
  %1095 = alloca i32, align 4
  %1096 = alloca [3 x ptr], align 8
  %1097 = alloca [3 x ptr], align 8
  %1098 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1099 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1100 = alloca i32, align 4
  %1101 = alloca ptr, align 8
  %1102 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1103 = alloca i32, align 4
  %1104 = alloca i32, align 4
  %1105 = alloca i32, align 4
  %1106 = alloca i32, align 4
  %1107 = alloca i32, align 4
  %1108 = alloca i32, align 4
  %1109 = alloca i32, align 4
  %1110 = alloca i32, align 4
  %1111 = alloca i32, align 4
  %1112 = alloca i32, align 4
  %1113 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1114 = alloca i32, align 4
  %1115 = alloca i32, align 4
  %1116 = alloca [3 x ptr], align 8
  %1117 = alloca [3 x ptr], align 8
  %1118 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1119 = alloca [1 x ptr], align 8
  %1120 = alloca [1 x ptr], align 8
  %1121 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1122 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1123 = alloca i32, align 4
  %1124 = alloca [1 x ptr], align 8
  %1125 = alloca [1 x ptr], align 8
  %1126 = alloca i32, align 4
  %1127 = alloca i160, align 8
  %1128 = alloca ptr, align 8
  %1129 = alloca i64, align 8
  %1130 = alloca [1 x ptr], align 8
  %1131 = alloca [1 x ptr], align 8
  %1132 = alloca i64, align 8
  %1133 = alloca i1, align 1
  %1134 = alloca i32, align 4
  %1135 = alloca [1 x ptr], align 8
  %1136 = alloca [1 x ptr], align 8
  %1137 = alloca i32, align 4
  %1138 = alloca i32, align 4
  %1139 = alloca i1, align 1
  %1140 = alloca i1, align 1
  %1141 = alloca i32, align 4
  %1142 = alloca ptr, align 8
  %1143 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1144 = alloca i32, align 4
  %1145 = alloca i32, align 4
  %1146 = alloca i32, align 4
  %1147 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1148 = alloca i32, align 4
  %1149 = alloca i32, align 4
  %1150 = alloca [3 x ptr], align 8
  %1151 = alloca [3 x ptr], align 8
  %1152 = alloca [1 x ptr], align 8
  %1153 = alloca [1 x ptr], align 8
  %1154 = alloca i64, align 8
  %1155 = alloca i160, align 8
  %1156 = alloca ptr, align 8
  %1157 = alloca i64, align 8
  %1158 = alloca [1 x ptr], align 8
  %1159 = alloca [1 x ptr], align 8
  %1160 = alloca i32, align 4
  %1161 = alloca double, align 8
  %1162 = alloca i160, align 8
  %1163 = alloca ptr, align 8
  %1164 = alloca i64, align 8
  %1165 = alloca [1 x ptr], align 8
  %1166 = alloca [1 x ptr], align 8
  %1167 = alloca i32, align 4
  %1168 = alloca i32, align 4
  %1169 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1170 = alloca i32, align 4
  %1171 = alloca i32, align 4
  %1172 = alloca [2 x ptr], align 8
  %1173 = alloca [2 x ptr], align 8
  %1174 = alloca [0 x ptr], align 8
  %1175 = alloca [0 x ptr], align 8
  %1176 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1177 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1178 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1179 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1180 = alloca [0 x ptr], align 8
  %1181 = alloca [0 x ptr], align 8
  %1182 = alloca { ptr, i32 }, align 8
  %1183 = alloca i64, align 8
  %1184 = alloca i1, align 1
  %1185 = alloca i32, align 4
  %1186 = alloca i160, align 8
  %1187 = alloca ptr, align 8
  %1188 = alloca i64, align 8
  %1189 = alloca [1 x ptr], align 8
  %1190 = alloca [1 x ptr], align 8
  %1191 = alloca i32, align 4
  %1192 = alloca ptr, align 8
  %1193 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1194 = alloca i32, align 4
  %1195 = alloca i32, align 4
  %1196 = alloca i32, align 4
  %1197 = alloca i32, align 4
  %1198 = alloca i32, align 4
  %1199 = alloca i32, align 4
  %1200 = alloca i32, align 4
  %1201 = alloca i32, align 4
  %1202 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1203 = alloca i32, align 4
  %1204 = alloca i32, align 4
  %1205 = alloca [3 x ptr], align 8
  %1206 = alloca [3 x ptr], align 8
  %1207 = alloca [0 x ptr], align 8
  %1208 = alloca [0 x ptr], align 8
  %1209 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1210 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1211 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1212 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1213 = alloca [0 x ptr], align 8
  %1214 = alloca [0 x ptr], align 8
  %1215 = alloca { ptr, i32 }, align 8
  %1216 = alloca i64, align 8
  %1217 = alloca i1, align 1
  %1218 = alloca i32, align 4
  %1219 = alloca i160, align 8
  %1220 = alloca ptr, align 8
  %1221 = alloca i64, align 8
  %1222 = alloca [1 x ptr], align 8
  %1223 = alloca [1 x ptr], align 8
  %1224 = alloca i8, align 1
  %1225 = alloca i160, align 8
  %1226 = alloca ptr, align 8
  %1227 = alloca i64, align 8
  %1228 = alloca [1 x ptr], align 8
  %1229 = alloca [1 x ptr], align 8
  %1230 = alloca i32, align 4
  %1231 = alloca ptr, align 8
  %1232 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1233 = alloca i32, align 4
  %1234 = alloca i32, align 4
  %1235 = alloca i32, align 4
  %1236 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1237 = alloca i32, align 4
  %1238 = alloca i32, align 4
  %1239 = alloca [3 x ptr], align 8
  %1240 = alloca [3 x ptr], align 8
  %1241 = alloca [0 x ptr], align 8
  %1242 = alloca [0 x ptr], align 8
  %1243 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1244 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1245 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1246 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1247 = alloca [0 x ptr], align 8
  %1248 = alloca [0 x ptr], align 8
  %1249 = alloca { ptr, i160 }, align 8
  %1250 = alloca i64, align 8
  %1251 = alloca i1, align 1
  %1252 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1253 = alloca [1 x ptr], align 8
  %1254 = alloca [1 x ptr], align 8
  %1255 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1256 = alloca i32, align 4
  %1257 = alloca ptr, align 8
  %1258 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1259 = alloca i32, align 4
  %1260 = alloca i32, align 4
  %1261 = alloca i32, align 4
  %1262 = alloca i32, align 4
  %1263 = alloca i32, align 4
  %1264 = alloca i32, align 4
  %1265 = alloca i32, align 4
  %1266 = alloca i32, align 4
  %1267 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1268 = alloca i32, align 4
  %1269 = alloca i32, align 4
  %1270 = alloca [3 x ptr], align 8
  %1271 = alloca [3 x ptr], align 8
  %1272 = alloca [0 x ptr], align 8
  %1273 = alloca [0 x ptr], align 8
  %1274 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1275 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1276 = alloca [1 x ptr], align 8
  %1277 = alloca [1 x ptr], align 8
  %1278 = alloca i32, align 4
  %1279 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1280 = alloca i32, align 4
  %1281 = alloca [1 x ptr], align 8
  %1282 = alloca [1 x ptr], align 8
  %1283 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1284 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1285 = alloca [0 x ptr], align 8
  %1286 = alloca [0 x ptr], align 8
  %1287 = alloca [1 x ptr], align 8
  %1288 = alloca [1 x ptr], align 8
  %1289 = alloca [0 x ptr], align 8
  %1290 = alloca [0 x ptr], align 8
  %1291 = alloca i32, align 4
  %1292 = alloca i32, align 4
  %1293 = alloca i32, align 4
  %1294 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1295 = alloca i32, align 4
  %1296 = alloca i32, align 4
  %1297 = alloca [2 x ptr], align 8
  %1298 = alloca [2 x ptr], align 8
  %1299 = alloca [1 x ptr], align 8
  %1300 = alloca [1 x ptr], align 8
  %1301 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1302 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1303 = alloca [0 x ptr], align 8
  %1304 = alloca [0 x ptr], align 8
  %1305 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1306 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1307 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1308 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1309 = alloca [0 x ptr], align 8
  %1310 = alloca [0 x ptr], align 8
  %1311 = alloca { ptr, i32 }, align 8
  %1312 = alloca i64, align 8
  %1313 = alloca i1, align 1
  %1314 = alloca i32, align 4
  %1315 = alloca i160, align 8
  %1316 = alloca ptr, align 8
  %1317 = alloca i64, align 8
  %1318 = alloca [1 x ptr], align 8
  %1319 = alloca [1 x ptr], align 8
  %1320 = alloca ptr, align 8
  %1321 = alloca ptr, align 8
  %1322 = alloca ptr, align 8
  %1323 = alloca i32, align 4
  %1324 = alloca i32, align 4
  %1325 = alloca ptr, align 8
  %1326 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1327 = alloca i32, align 4
  %1328 = alloca i32, align 4
  %1329 = alloca i32, align 4
  %1330 = alloca i32, align 4
  %1331 = alloca i32, align 4
  %1332 = alloca i32, align 4
  %1333 = alloca i32, align 4
  %1334 = alloca i32, align 4
  %1335 = alloca i32, align 4
  %1336 = alloca i32, align 4
  %1337 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1338 = alloca i32, align 4
  %1339 = alloca i32, align 4
  %1340 = alloca [3 x ptr], align 8
  %1341 = alloca [3 x ptr], align 8
  %1342 = alloca [1 x ptr], align 8
  %1343 = alloca [1 x ptr], align 8
  %1344 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1345 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1346 = alloca [2 x ptr], align 8
  %1347 = alloca [2 x ptr], align 8
  %1348 = alloca i32, align 4
  %1349 = alloca i160, align 8
  %1350 = alloca ptr, align 8
  %1351 = alloca i64, align 8
  %1352 = alloca [1 x ptr], align 8
  %1353 = alloca [1 x ptr], align 8
  %1354 = alloca ptr, align 8
  %1355 = alloca i32, align 4
  %1356 = alloca ptr, align 8
  %1357 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1358 = alloca i32, align 4
  %1359 = alloca i32, align 4
  %1360 = alloca i32, align 4
  %1361 = alloca i32, align 4
  %1362 = alloca i32, align 4
  %1363 = alloca i32, align 4
  %1364 = alloca i32, align 4
  %1365 = alloca i32, align 4
  %1366 = alloca i32, align 4
  %1367 = alloca i32, align 4
  %1368 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1369 = alloca i32, align 4
  %1370 = alloca i32, align 4
  %1371 = alloca [3 x ptr], align 8
  %1372 = alloca [3 x ptr], align 8
  %1373 = alloca [1 x ptr], align 8
  %1374 = alloca [1 x ptr], align 8
  %1375 = alloca i32, align 4
  %1376 = alloca ptr, align 8
  %1377 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1378 = alloca i32, align 4
  %1379 = alloca i32, align 4
  %1380 = alloca i32, align 4
  %1381 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1382 = alloca i32, align 4
  %1383 = alloca i32, align 4
  %1384 = alloca [3 x ptr], align 8
  %1385 = alloca [3 x ptr], align 8
  %1386 = alloca i32, align 4
  %1387 = alloca ptr, align 8
  %1388 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1389 = alloca i32, align 4
  %1390 = alloca i32, align 4
  %1391 = alloca i32, align 4
  %1392 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1393 = alloca i32, align 4
  %1394 = alloca i32, align 4
  %1395 = alloca [3 x ptr], align 8
  %1396 = alloca [3 x ptr], align 8
  %1397 = alloca i32, align 4
  %1398 = alloca ptr, align 8
  %1399 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1400 = alloca i32, align 4
  %1401 = alloca i32, align 4
  %1402 = alloca i32, align 4
  %1403 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1404 = alloca i32, align 4
  %1405 = alloca i32, align 4
  %1406 = alloca [3 x ptr], align 8
  %1407 = alloca [3 x ptr], align 8
  %1408 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1409 = alloca [1 x ptr], align 8
  %1410 = alloca [1 x ptr], align 8
  %1411 = alloca ptr, align 8
  %1412 = alloca i32, align 4
  %1413 = alloca i32, align 4
  %1414 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1415 = alloca i32, align 4
  %1416 = alloca i32, align 4
  %1417 = alloca [2 x ptr], align 8
  %1418 = alloca [2 x ptr], align 8
  %1419 = alloca [1 x ptr], align 8
  %1420 = alloca [1 x ptr], align 8
  %1421 = alloca ptr, align 8
  %1422 = alloca i32, align 4
  %1423 = alloca i8, align 1
  %1424 = alloca i160, align 8
  %1425 = alloca ptr, align 8
  %1426 = alloca i64, align 8
  %1427 = alloca [1 x ptr], align 8
  %1428 = alloca [1 x ptr], align 8
  %1429 = alloca ptr, align 8
  %1430 = alloca i32, align 4
  %1431 = alloca i32, align 4
  %1432 = alloca ptr, align 8
  %1433 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1434 = alloca i32, align 4
  %1435 = alloca i32, align 4
  %1436 = alloca ptr, align 8
  %1437 = alloca i64, align 8
  %1438 = alloca { ptr, i32 }, align 8
  %1439 = alloca { ptr, i32 }, align 8
  %1440 = alloca [1 x ptr], align 8
  %1441 = alloca [1 x ptr], align 8
  %1442 = alloca i32, align 4
  %1443 = alloca i32, align 4
  %1444 = alloca ptr, align 8
  %1445 = alloca i64, align 8
  %1446 = alloca { ptr, i32 }, align 8
  %1447 = alloca { ptr, i32 }, align 8
  %1448 = alloca [1 x ptr], align 8
  %1449 = alloca [1 x ptr], align 8
  %1450 = alloca ptr, align 8
  %1451 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1452 = alloca { ptr, i160 }, align 8
  %1453 = alloca { ptr, i32 }, align 8
  %1454 = alloca { ptr, i32 }, align 8
  %1455 = alloca [1 x ptr], align 8
  %1456 = alloca [1 x ptr], align 8
  %1457 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1458 = alloca [0 x ptr], align 8
  %1459 = alloca [0 x ptr], align 8
  %1460 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1461 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1462 = alloca ptr, align 8
  %1463 = alloca ptr, align 8
  %1464 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1465 = alloca { ptr, i160 }, align 8
  %1466 = alloca [0 x ptr], align 8
  %1467 = alloca [0 x ptr], align 8
  %1468 = alloca i32, align 4
  %1469 = alloca i160, align 8
  %1470 = alloca ptr, align 8
  %1471 = alloca i64, align 8
  %1472 = alloca [1 x ptr], align 8
  %1473 = alloca [1 x ptr], align 8
  %1474 = alloca i32, align 4
  %1475 = alloca ptr, align 8
  %1476 = alloca ptr, align 8
  %1477 = alloca i32, align 4
  %1478 = alloca i32, align 4
  %1479 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1480 = alloca i32, align 4
  %1481 = alloca i32, align 4
  %1482 = alloca [2 x ptr], align 8
  %1483 = alloca [2 x ptr], align 8
  %1484 = alloca [1 x ptr], align 8
  %1485 = alloca [1 x ptr], align 8
  %1486 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1487 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1488 = alloca [1 x ptr], align 8
  %1489 = alloca [1 x ptr], align 8
  %1490 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1491 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1492 = alloca [2 x ptr], align 8
  %1493 = alloca [2 x ptr], align 8
  %1494 = alloca i32, align 4
  %1495 = alloca i160, align 8
  %1496 = alloca ptr, align 8
  %1497 = alloca i64, align 8
  %1498 = alloca [1 x ptr], align 8
  %1499 = alloca [1 x ptr], align 8
  %1500 = alloca i32, align 4
  %1501 = alloca i160, align 8
  %1502 = alloca ptr, align 8
  %1503 = alloca i64, align 8
  %1504 = alloca [1 x ptr], align 8
  %1505 = alloca [1 x ptr], align 8
  %1506 = alloca i32, align 4
  %1507 = alloca i32, align 4
  %1508 = alloca i32, align 4
  %1509 = alloca i32, align 4
  %1510 = alloca i32, align 4
  %1511 = alloca i32, align 4
  %1512 = alloca i160, align 8
  %1513 = alloca ptr, align 8
  %1514 = alloca i64, align 8
  %1515 = alloca [1 x ptr], align 8
  %1516 = alloca [1 x ptr], align 8
  br label %1517

1517:                                             ; preds = %._crit_edge2, %0
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %887, align 4
  %1518 = load ptr, ptr %886, align 8
  %1519 = ptrtoint ptr %1518 to i64
  %1520 = load ptr, ptr %887, align 8
  %1521 = ptrtoint ptr %1520 to i64
  %1522 = icmp eq i64 %1519, %1521
  store i1 %1522, ptr %888, align 1
  %1523 = load i1, ptr %888, align 1
  store i1 %1523, ptr %.reg2mem95, align 1
  %.reload97 = load i1, ptr %.reg2mem95, align 1
  br i1 %.reload97, label %1524, label %._crit_edge

._crit_edge:                                      ; preds = %1517
  br label %1613

1524:                                             ; preds = %1517
  %1525 = load i32, ptr %885, align 4
  store i32 %1525, ptr %889, align 4
  %1526 = load i32, ptr %889, align 4
  store i32 %1526, ptr %890, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %892, align 4
  %1527 = load i64, ptr %892, align 4
  store i64 %1527, ptr %891, align 4
  %1528 = load ptr, ptr %891, align 8
  %1529 = insertvalue { ptr, i160 } undef, ptr %1528, 0
  %1530 = load i160, ptr %890, align 4
  %1531 = insertvalue { ptr, i160 } %1529, i160 %1530, 1
  %1532 = call ptr @llvm.invariant.start.p0(i64 8, ptr %893)
  %1533 = getelementptr [1 x ptr], ptr %893, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1533, align 8
  %1534 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1535 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %1536 = getelementptr [1 x ptr], ptr %894, i32 0, i32 0
  store ptr %1528, ptr %1536, align 8
  %1537 = call ptr %1535(ptr %894, { ptr, i160 } %1531)
  call void %1537(ptr %893, { ptr, i160 } %1531)
  store i32 1, ptr %895, align 4
  %1538 = load i32, ptr %889, align 4
  %1539 = load i32, ptr %895, align 4
  %1540 = add i32 %1538, %1539
  store i32 %1540, ptr %896, align 4
  %1541 = load i32, ptr %896, align 4
  store i32 %1541, ptr %889, align 4
  store i32 9, ptr %897, align 4
  %1542 = load i32, ptr %889, align 4
  %1543 = load i32, ptr %897, align 4
  %1544 = icmp eq i32 %1542, %1543
  store i1 %1544, ptr %898, align 1
  %1545 = load i1, ptr %898, align 1
  %1546 = load i32, ptr %889, align 4
  store i32 %1546, ptr %899, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %901, align 4
  %1547 = load i64, ptr %901, align 4
  store i64 %1547, ptr %900, align 4
  br i1 %1545, label %1548, label %._crit_edge1

._crit_edge1:                                     ; preds = %1524
  br label %1610

1548:                                             ; preds = %1524
  store i32 65, ptr %902, align 4
  store double 1.800000e+01, ptr %903, align 8
  store i32 23, ptr %904, align 4
  %1549 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ i32, double, i32 }, ptr null, i32 1) to i64))
  %1550 = getelementptr { ptr, ptr, ptr, i32 }, ptr %905, i32 0, i32 1
  %1551 = getelementptr { ptr, ptr, ptr, i32 }, ptr %905, i32 0, i32 3
  store ptr @Animal, ptr %905, align 8
  store ptr %1549, ptr %1550, align 8
  store i32 7, ptr %1551, align 4
  %1552 = call ptr @llvm.invariant.start.p0(i64 16, ptr %905)
  store i32 65, ptr %906, align 4
  store double 1.800000e+01, ptr %907, align 8
  store i32 23, ptr %908, align 4
  %1553 = load i32, ptr %906, align 4
  %1554 = load double, ptr %907, align 8
  %1555 = load i32, ptr %908, align 4
  %1556 = getelementptr { ptr, ptr, ptr, i32 }, ptr %905, i32 0, i32 0
  %1557 = load ptr, ptr %1556, align 8
  %1558 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1557, 0
  %1559 = getelementptr { ptr, ptr, ptr, i32 }, ptr %905, i32 0, i32 1
  %1560 = load ptr, ptr %1559, align 8
  %1561 = insertvalue { ptr, ptr, ptr, i32 } %1558, ptr %1560, 1
  %1562 = getelementptr { ptr, ptr, ptr, i32 }, ptr %905, i32 0, i32 2
  %1563 = load ptr, ptr %1562, align 8
  %1564 = insertvalue { ptr, ptr, ptr, i32 } %1561, ptr %1563, 2
  %1565 = getelementptr { ptr, ptr, ptr, i32 }, ptr %905, i32 0, i32 3
  %1566 = load i32, ptr %1565, align 4
  %1567 = insertvalue { ptr, ptr, ptr, i32 } %1564, i32 %1566, 3
  %1568 = call ptr @llvm.invariant.start.p0(i64 24, ptr %909)
  %1569 = getelementptr [3 x ptr], ptr %909, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %1569, align 8
  %1570 = getelementptr [3 x ptr], ptr %909, i32 0, i32 1
  store ptr @_parameterization_Ptrf64, ptr %1570, align 8
  %1571 = getelementptr [3 x ptr], ptr %909, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1571, align 8
  %1572 = call ptr @llvm.invariant.start.p0(i64 104, ptr %1557)
  %1573 = getelementptr ptr, ptr %1557, i32 %1566
  %1574 = getelementptr ptr, ptr %1573, i32 3
  %1575 = load ptr, ptr %1574, align 8
  %1576 = getelementptr [3 x ptr], ptr %910, i32 0, i32 0
  store ptr @i32_typ, ptr %1576, align 8
  %1577 = getelementptr [3 x ptr], ptr %910, i32 0, i32 1
  store ptr @f64_typ, ptr %1577, align 8
  %1578 = getelementptr [3 x ptr], ptr %910, i32 0, i32 2
  store ptr @i32_typ, ptr %1578, align 8
  %1579 = call ptr %1575({ ptr, ptr, ptr, i32 } %1567, ptr %910, i32 %1553, double %1554, i32 %1555)
  call void %1579({ ptr, ptr, ptr, i32 } %1567, { ptr, ptr, ptr, i32 } %1567, ptr %909, i32 %1553, double %1554, i32 %1555)
  %1580 = getelementptr { ptr, ptr, ptr, i32 }, ptr %905, i32 0, i32 0
  %1581 = getelementptr { ptr, ptr, ptr, i32 }, ptr %911, i32 0, i32 0
  %1582 = load ptr, ptr %1580, align 8
  store ptr %1582, ptr %1581, align 8
  %1583 = getelementptr { ptr, ptr, ptr, i32 }, ptr %905, i32 0, i32 1
  %1584 = getelementptr { ptr, ptr, ptr, i32 }, ptr %911, i32 0, i32 1
  %1585 = load ptr, ptr %1583, align 8
  store ptr %1585, ptr %1584, align 8
  %1586 = getelementptr { ptr, ptr, ptr, i32 }, ptr %905, i32 0, i32 2
  %1587 = getelementptr { ptr, ptr, ptr, i32 }, ptr %911, i32 0, i32 2
  %1588 = load ptr, ptr %1586, align 8
  store ptr %1588, ptr %1587, align 8
  %1589 = getelementptr { ptr, ptr, ptr, i32 }, ptr %905, i32 0, i32 3
  %1590 = getelementptr { ptr, ptr, ptr, i32 }, ptr %911, i32 0, i32 3
  %1591 = load i32, ptr %1589, align 4
  store i32 %1591, ptr %1590, align 4
  call void @set_offset(ptr %911, ptr @Animal)
  %1592 = call ptr @llvm.invariant.start.p0(i64 24, ptr %911)
  %1593 = getelementptr { ptr, ptr, ptr, i32 }, ptr %911, i32 0, i32 0
  %1594 = getelementptr { ptr, ptr, ptr, i32 }, ptr %912, i32 0, i32 0
  %1595 = load ptr, ptr %1593, align 8
  store ptr %1595, ptr %1594, align 8
  %1596 = getelementptr { ptr, ptr, ptr, i32 }, ptr %911, i32 0, i32 1
  %1597 = getelementptr { ptr, ptr, ptr, i32 }, ptr %912, i32 0, i32 1
  %1598 = load ptr, ptr %1596, align 8
  store ptr %1598, ptr %1597, align 8
  %1599 = getelementptr { ptr, ptr, ptr, i32 }, ptr %911, i32 0, i32 2
  %1600 = getelementptr { ptr, ptr, ptr, i32 }, ptr %912, i32 0, i32 2
  %1601 = load ptr, ptr %1599, align 8
  store ptr %1601, ptr %1600, align 8
  %1602 = getelementptr { ptr, ptr, ptr, i32 }, ptr %911, i32 0, i32 3
  %1603 = getelementptr { ptr, ptr, ptr, i32 }, ptr %912, i32 0, i32 3
  %1604 = load i32, ptr %1602, align 4
  store i32 %1604, ptr %1603, align 4
  %1605 = call ptr @llvm.invariant.start.p0(i64 16, ptr %912)
  %1606 = getelementptr { ptr, i160 }, ptr %912, i32 0, i32 0
  %1607 = load ptr, ptr %1606, align 8
  store ptr %1607, ptr %900, align 8
  %1608 = getelementptr { ptr, i160 }, ptr %912, i32 0, i32 1
  %1609 = load i160, ptr %1608, align 4
  store i160 %1609, ptr %899, align 4
  br label %1610

1610:                                             ; preds = %._crit_edge1, %1548
  %1611 = load ptr, ptr %900, align 8
  store ptr %1611, ptr %886, align 8
  %1612 = load i160, ptr %899, align 4
  store i160 %1612, ptr %885, align 4
  br label %1613

1613:                                             ; preds = %._crit_edge, %1610
  %.reload96 = load i1, ptr %.reg2mem95, align 1
  br i1 %.reload96, label %._crit_edge2, label %1614

._crit_edge2:                                     ; preds = %1613
  br label %1517

1614:                                             ; preds = %1613
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %913, align 4
  %1615 = load ptr, ptr %886, align 8
  %1616 = ptrtoint ptr %1615 to i64
  %1617 = load ptr, ptr %913, align 8
  %1618 = ptrtoint ptr %1617 to i64
  %1619 = icmp eq i64 %1616, %1618
  store i1 %1619, ptr %914, align 1
  %1620 = load i1, ptr %914, align 1
  br i1 %1620, label %1621, label %._crit_edge3

._crit_edge3:                                     ; preds = %1614
  br label %1639

1621:                                             ; preds = %1614
  %1622 = load i32, ptr %885, align 4
  store i32 %1622, ptr %915, align 4
  %1623 = load i32, ptr %915, align 4
  store i32 %1623, ptr %916, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %918, align 4
  %1624 = load i64, ptr %918, align 4
  store i64 %1624, ptr %917, align 4
  %1625 = load ptr, ptr %917, align 8
  %1626 = insertvalue { ptr, i160 } undef, ptr %1625, 0
  %1627 = load i160, ptr %916, align 4
  %1628 = insertvalue { ptr, i160 } %1626, i160 %1627, 1
  %1629 = call ptr @llvm.invariant.start.p0(i64 8, ptr %919)
  %1630 = getelementptr [1 x ptr], ptr %919, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1630, align 8
  %1631 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1632 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %1633 = getelementptr [1 x ptr], ptr %920, i32 0, i32 0
  store ptr %1625, ptr %1633, align 8
  %1634 = call ptr %1632(ptr %920, { ptr, i160 } %1628)
  call void %1634(ptr %919, { ptr, i160 } %1628)
  %1635 = load i32, ptr %915, align 4
  store i32 %1635, ptr %921, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %923, align 4
  %1636 = load i64, ptr %923, align 4
  store i64 %1636, ptr %922, align 4
  %1637 = load ptr, ptr %922, align 8
  store ptr %1637, ptr %886, align 8
  %1638 = load i160, ptr %921, align 4
  store i160 %1638, ptr %885, align 4
  br label %1639

1639:                                             ; preds = %._crit_edge3, %1621
  store i64 ptrtoint (ptr @Animal to i64), ptr %924, align 4
  %1640 = load ptr, ptr %886, align 8
  %1641 = load ptr, ptr %924, align 8
  %1642 = ptrtoint ptr %1641 to i64
  %1643 = getelementptr { [3 x i64], [3 x ptr] }, ptr %1640, i32 0, i32 0, i32 1
  %1644 = getelementptr { [3 x i64], [3 x ptr] }, ptr %1640, i32 0, i32 0, i32 2
  %1645 = getelementptr { [3 x i64], [3 x ptr] }, ptr %1640, i32 0, i32 1, i32 0
  %1646 = getelementptr { [3 x i64], [3 x ptr] }, ptr %1640, i32 0, i32 1, i32 1
  %1647 = load i64, ptr %1643, align 4
  %1648 = load i64, ptr %1644, align 4
  %1649 = load ptr, ptr %1645, align 8
  %1650 = load ptr, ptr %1646, align 8
  %1651 = load i64, ptr %1641, align 4
  %1652 = call i1 @subtype_test_wrapper(ptr %1649, i64 %1648, i64 %1647, i64 %1651, i64 %1642, ptr %1650)
  store i1 %1652, ptr %925, align 1
  %1653 = load i1, ptr %925, align 1
  br i1 %1653, label %1654, label %._crit_edge4

._crit_edge4:                                     ; preds = %1639
  br label %1682

1654:                                             ; preds = %1639
  %1655 = getelementptr { ptr, ptr, ptr, i32 }, ptr %926, i32 0, i32 0
  %1656 = load ptr, ptr %886, align 8
  store ptr %1656, ptr %1655, align 8
  %1657 = getelementptr { ptr, ptr, ptr, i32 }, ptr %926, i32 0, i32 1
  %1658 = load ptr, ptr %885, align 8
  store ptr %1658, ptr %1657, align 8
  %1659 = getelementptr i8, ptr %885, i32 8
  %1660 = getelementptr { ptr, ptr, ptr, i32 }, ptr %926, i32 0, i32 2
  %1661 = load ptr, ptr %1659, align 8
  store ptr %1661, ptr %1660, align 8
  %1662 = getelementptr i8, ptr %885, i32 16
  %1663 = getelementptr { ptr, ptr, ptr, i32 }, ptr %926, i32 0, i32 3
  %1664 = load i32, ptr %1662, align 4
  store i32 %1664, ptr %1663, align 4
  call void @set_offset(ptr %926, ptr @Animal)
  %1665 = call ptr @llvm.invariant.start.p0(i64 24, ptr %926)
  %1666 = getelementptr { ptr, ptr, ptr, i32 }, ptr %926, i32 0, i32 0
  %1667 = load ptr, ptr %1666, align 8
  %1668 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1667, 0
  %1669 = getelementptr { ptr, ptr, ptr, i32 }, ptr %926, i32 0, i32 1
  %1670 = load ptr, ptr %1669, align 8
  %1671 = insertvalue { ptr, ptr, ptr, i32 } %1668, ptr %1670, 1
  %1672 = getelementptr { ptr, ptr, ptr, i32 }, ptr %926, i32 0, i32 2
  %1673 = load ptr, ptr %1672, align 8
  %1674 = insertvalue { ptr, ptr, ptr, i32 } %1671, ptr %1673, 2
  %1675 = getelementptr { ptr, ptr, ptr, i32 }, ptr %926, i32 0, i32 3
  %1676 = load i32, ptr %1675, align 4
  %1677 = insertvalue { ptr, ptr, ptr, i32 } %1674, i32 %1676, 3
  call void @make_em_speak({ ptr, ptr, ptr, i32 } %1677)
  %1678 = getelementptr { ptr, i160 }, ptr %926, i32 0, i32 0
  %1679 = load ptr, ptr %1678, align 8
  store ptr %1679, ptr %886, align 8
  %1680 = getelementptr { ptr, i160 }, ptr %926, i32 0, i32 1
  %1681 = load i160, ptr %1680, align 4
  store i160 %1681, ptr %885, align 4
  br label %1682

1682:                                             ; preds = %._crit_edge4, %1654
  %1683 = getelementptr { ptr, ptr, ptr, i32 }, ptr %339, i32 0, i32 0
  %1684 = load ptr, ptr %1683, align 8
  %1685 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1684, 0
  %1686 = getelementptr { ptr, ptr, ptr, i32 }, ptr %339, i32 0, i32 1
  %1687 = load ptr, ptr %1686, align 8
  %1688 = insertvalue { ptr, ptr, ptr, i32 } %1685, ptr %1687, 1
  %1689 = getelementptr { ptr, ptr, ptr, i32 }, ptr %339, i32 0, i32 2
  %1690 = load ptr, ptr %1689, align 8
  %1691 = insertvalue { ptr, ptr, ptr, i32 } %1688, ptr %1690, 2
  %1692 = getelementptr { ptr, ptr, ptr, i32 }, ptr %339, i32 0, i32 3
  %1693 = load i32, ptr %1692, align 4
  %1694 = insertvalue { ptr, ptr, ptr, i32 } %1691, i32 %1693, 3
  %1695 = call ptr @llvm.invariant.start.p0(i64 0, ptr %927)
  %1696 = call ptr @llvm.invariant.start.p0(i64 104, ptr %1684)
  %1697 = getelementptr ptr, ptr %1684, i32 %1693
  %1698 = getelementptr ptr, ptr %1697, i32 5
  %1699 = load ptr, ptr %1698, align 8
  %1700 = call ptr %1699({ ptr, ptr, ptr, i32 } %1694, ptr %928)
  call void %1700({ ptr, ptr, ptr, i32 } %1694, { ptr, ptr, ptr, i32 } %1694, ptr %927)
  store i32 0, ptr %929, align 4
  %1701 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ i32, { ptr, i160 } }, ptr null, i32 1) to i64))
  %1702 = getelementptr { ptr, ptr, ptr, i32 }, ptr %930, i32 0, i32 1
  %1703 = getelementptr { ptr, ptr, ptr, i32 }, ptr %930, i32 0, i32 3
  store ptr @ListNode, ptr %930, align 8
  store ptr %1701, ptr %1702, align 8
  store i32 7, ptr %1703, align 4
  %1704 = call ptr @llvm.invariant.start.p0(i64 16, ptr %930)
  store i32 0, ptr %931, align 4
  %1705 = load i32, ptr %931, align 4
  %1706 = getelementptr { ptr, ptr, ptr, i32 }, ptr %930, i32 0, i32 0
  %1707 = load ptr, ptr %1706, align 8
  %1708 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1707, 0
  %1709 = getelementptr { ptr, ptr, ptr, i32 }, ptr %930, i32 0, i32 1
  %1710 = load ptr, ptr %1709, align 8
  %1711 = insertvalue { ptr, ptr, ptr, i32 } %1708, ptr %1710, 1
  %1712 = getelementptr { ptr, ptr, ptr, i32 }, ptr %930, i32 0, i32 2
  %1713 = load ptr, ptr %1712, align 8
  %1714 = insertvalue { ptr, ptr, ptr, i32 } %1711, ptr %1713, 2
  %1715 = getelementptr { ptr, ptr, ptr, i32 }, ptr %930, i32 0, i32 3
  %1716 = load i32, ptr %1715, align 4
  %1717 = insertvalue { ptr, ptr, ptr, i32 } %1714, i32 %1716, 3
  %1718 = call ptr @llvm.invariant.start.p0(i64 8, ptr %932)
  %1719 = getelementptr [1 x ptr], ptr %932, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1719, align 8
  %1720 = call ptr @llvm.invariant.start.p0(i64 96, ptr %1707)
  %1721 = getelementptr ptr, ptr %1707, i32 %1716
  %1722 = getelementptr ptr, ptr %1721, i32 2
  %1723 = load ptr, ptr %1722, align 8
  %1724 = getelementptr [1 x ptr], ptr %933, i32 0, i32 0
  store ptr @i32_typ, ptr %1724, align 8
  %1725 = call ptr %1723({ ptr, ptr, ptr, i32 } %1717, ptr %933, i32 %1705)
  call void %1725({ ptr, ptr, ptr, i32 } %1717, { ptr, ptr, ptr, i32 } %1717, ptr %932, i32 %1705)
  %1726 = getelementptr { ptr, ptr, ptr, i32 }, ptr %930, i32 0, i32 0
  %1727 = getelementptr { ptr, ptr, ptr, i32 }, ptr %934, i32 0, i32 0
  %1728 = load ptr, ptr %1726, align 8
  store ptr %1728, ptr %1727, align 8
  %1729 = getelementptr { ptr, ptr, ptr, i32 }, ptr %930, i32 0, i32 1
  %1730 = getelementptr { ptr, ptr, ptr, i32 }, ptr %934, i32 0, i32 1
  %1731 = load ptr, ptr %1729, align 8
  store ptr %1731, ptr %1730, align 8
  %1732 = getelementptr { ptr, ptr, ptr, i32 }, ptr %930, i32 0, i32 2
  %1733 = getelementptr { ptr, ptr, ptr, i32 }, ptr %934, i32 0, i32 2
  %1734 = load ptr, ptr %1732, align 8
  store ptr %1734, ptr %1733, align 8
  %1735 = getelementptr { ptr, ptr, ptr, i32 }, ptr %930, i32 0, i32 3
  %1736 = getelementptr { ptr, ptr, ptr, i32 }, ptr %934, i32 0, i32 3
  %1737 = load i32, ptr %1735, align 4
  store i32 %1737, ptr %1736, align 4
  call void @set_offset(ptr %934, ptr @ListNode)
  %1738 = call ptr @llvm.invariant.start.p0(i64 24, ptr %934)
  %1739 = getelementptr { ptr, ptr, ptr, i32 }, ptr %934, i32 0, i32 0
  %1740 = getelementptr { ptr, ptr, ptr, i32 }, ptr %935, i32 0, i32 0
  %1741 = load ptr, ptr %1739, align 8
  store ptr %1741, ptr %1740, align 8
  %1742 = getelementptr { ptr, ptr, ptr, i32 }, ptr %934, i32 0, i32 1
  %1743 = getelementptr { ptr, ptr, ptr, i32 }, ptr %935, i32 0, i32 1
  %1744 = load ptr, ptr %1742, align 8
  store ptr %1744, ptr %1743, align 8
  %1745 = getelementptr { ptr, ptr, ptr, i32 }, ptr %934, i32 0, i32 2
  %1746 = getelementptr { ptr, ptr, ptr, i32 }, ptr %935, i32 0, i32 2
  %1747 = load ptr, ptr %1745, align 8
  store ptr %1747, ptr %1746, align 8
  %1748 = getelementptr { ptr, ptr, ptr, i32 }, ptr %934, i32 0, i32 3
  %1749 = getelementptr { ptr, ptr, ptr, i32 }, ptr %935, i32 0, i32 3
  %1750 = load i32, ptr %1748, align 4
  store i32 %1750, ptr %1749, align 4
  %1751 = call ptr @llvm.invariant.start.p0(i64 16, ptr %935)
  %1752 = getelementptr { ptr, ptr, ptr, i32 }, ptr %935, i32 0, i32 0
  %1753 = getelementptr { ptr, ptr, ptr, i32 }, ptr %936, i32 0, i32 0
  %1754 = load ptr, ptr %1752, align 8
  store ptr %1754, ptr %1753, align 8
  %1755 = getelementptr { ptr, ptr, ptr, i32 }, ptr %935, i32 0, i32 1
  %1756 = getelementptr { ptr, ptr, ptr, i32 }, ptr %936, i32 0, i32 1
  %1757 = load ptr, ptr %1755, align 8
  store ptr %1757, ptr %1756, align 8
  %1758 = getelementptr { ptr, ptr, ptr, i32 }, ptr %935, i32 0, i32 2
  %1759 = getelementptr { ptr, ptr, ptr, i32 }, ptr %936, i32 0, i32 2
  %1760 = load ptr, ptr %1758, align 8
  store ptr %1760, ptr %1759, align 8
  %1761 = getelementptr { ptr, ptr, ptr, i32 }, ptr %935, i32 0, i32 3
  %1762 = getelementptr { ptr, ptr, ptr, i32 }, ptr %936, i32 0, i32 3
  %1763 = load i32, ptr %1761, align 4
  store i32 %1763, ptr %1762, align 4
  call void @set_offset(ptr %936, ptr @ListNode)
  %1764 = call ptr @llvm.invariant.start.p0(i64 24, ptr %936)
  %1765 = getelementptr { ptr, ptr, ptr, i32 }, ptr %936, i32 0, i32 0
  %1766 = getelementptr { ptr, ptr, ptr, i32 }, ptr %937, i32 0, i32 0
  %1767 = load ptr, ptr %1765, align 8
  store ptr %1767, ptr %1766, align 8
  %1768 = getelementptr { ptr, ptr, ptr, i32 }, ptr %936, i32 0, i32 1
  %1769 = getelementptr { ptr, ptr, ptr, i32 }, ptr %937, i32 0, i32 1
  %1770 = load ptr, ptr %1768, align 8
  store ptr %1770, ptr %1769, align 8
  %1771 = getelementptr { ptr, ptr, ptr, i32 }, ptr %936, i32 0, i32 2
  %1772 = getelementptr { ptr, ptr, ptr, i32 }, ptr %937, i32 0, i32 2
  %1773 = load ptr, ptr %1771, align 8
  store ptr %1773, ptr %1772, align 8
  %1774 = getelementptr { ptr, ptr, ptr, i32 }, ptr %936, i32 0, i32 3
  %1775 = getelementptr { ptr, ptr, ptr, i32 }, ptr %937, i32 0, i32 3
  %1776 = load i32, ptr %1774, align 4
  store i32 %1776, ptr %1775, align 4
  %1777 = call ptr @llvm.invariant.start.p0(i64 16, ptr %937)
  store i32 1, ptr %938, align 4
  store i32 10, ptr %939, align 4
  %1778 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ i32, i32, i32 }, ptr null, i32 1) to i64))
  %1779 = getelementptr { ptr, ptr, ptr, i32 }, ptr %940, i32 0, i32 1
  %1780 = getelementptr { ptr, ptr, ptr, i32 }, ptr %940, i32 0, i32 3
  store ptr @Range, ptr %940, align 8
  store ptr %1778, ptr %1779, align 8
  store i32 7, ptr %1780, align 4
  %1781 = call ptr @llvm.invariant.start.p0(i64 16, ptr %940)
  store i32 1, ptr %941, align 4
  store i32 10, ptr %942, align 4
  %1782 = load i32, ptr %941, align 4
  %1783 = load i32, ptr %942, align 4
  %1784 = getelementptr { ptr, ptr, ptr, i32 }, ptr %940, i32 0, i32 0
  %1785 = load ptr, ptr %1784, align 8
  %1786 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1785, 0
  %1787 = getelementptr { ptr, ptr, ptr, i32 }, ptr %940, i32 0, i32 1
  %1788 = load ptr, ptr %1787, align 8
  %1789 = insertvalue { ptr, ptr, ptr, i32 } %1786, ptr %1788, 1
  %1790 = getelementptr { ptr, ptr, ptr, i32 }, ptr %940, i32 0, i32 2
  %1791 = load ptr, ptr %1790, align 8
  %1792 = insertvalue { ptr, ptr, ptr, i32 } %1789, ptr %1791, 2
  %1793 = getelementptr { ptr, ptr, ptr, i32 }, ptr %940, i32 0, i32 3
  %1794 = load i32, ptr %1793, align 4
  %1795 = insertvalue { ptr, ptr, ptr, i32 } %1792, i32 %1794, 3
  %1796 = call ptr @llvm.invariant.start.p0(i64 16, ptr %943)
  %1797 = getelementptr [2 x ptr], ptr %943, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %1797, align 8
  %1798 = getelementptr [2 x ptr], ptr %943, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1798, align 8
  %1799 = call ptr @llvm.invariant.start.p0(i64 456, ptr %1785)
  %1800 = getelementptr ptr, ptr %1785, i32 %1794
  %1801 = getelementptr ptr, ptr %1800, i32 4
  %1802 = load ptr, ptr %1801, align 8
  %1803 = getelementptr [2 x ptr], ptr %944, i32 0, i32 0
  store ptr @i32_typ, ptr %1803, align 8
  %1804 = getelementptr [2 x ptr], ptr %944, i32 0, i32 1
  store ptr @i32_typ, ptr %1804, align 8
  %1805 = call ptr %1802({ ptr, ptr, ptr, i32 } %1795, ptr %944, i32 %1782, i32 %1783)
  call void %1805({ ptr, ptr, ptr, i32 } %1795, { ptr, ptr, ptr, i32 } %1795, ptr %943, i32 %1782, i32 %1783)
  %1806 = getelementptr { ptr, ptr, ptr, i32 }, ptr %940, i32 0, i32 0
  %1807 = load ptr, ptr %1806, align 8
  %1808 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1807, 0
  %1809 = getelementptr { ptr, ptr, ptr, i32 }, ptr %940, i32 0, i32 1
  %1810 = load ptr, ptr %1809, align 8
  %1811 = insertvalue { ptr, ptr, ptr, i32 } %1808, ptr %1810, 1
  %1812 = getelementptr { ptr, ptr, ptr, i32 }, ptr %940, i32 0, i32 2
  %1813 = load ptr, ptr %1812, align 8
  %1814 = insertvalue { ptr, ptr, ptr, i32 } %1811, ptr %1813, 2
  %1815 = getelementptr { ptr, ptr, ptr, i32 }, ptr %940, i32 0, i32 3
  %1816 = load i32, ptr %1815, align 4
  %1817 = insertvalue { ptr, ptr, ptr, i32 } %1814, i32 %1816, 3
  %1818 = call ptr @llvm.invariant.start.p0(i64 0, ptr %945)
  %1819 = call ptr @llvm.invariant.start.p0(i64 456, ptr %1807)
  %1820 = getelementptr ptr, ptr %1807, i32 %1816
  %1821 = getelementptr ptr, ptr %1820, i32 16
  %1822 = load ptr, ptr %1821, align 8
  %1823 = call ptr %1822({ ptr, ptr, ptr, i32 } %1817, ptr %946)
  %1824 = call { ptr, ptr, ptr, i32 } %1823({ ptr, ptr, ptr, i32 } %1817, { ptr, ptr, ptr, i32 } %1817, ptr %945)
  store { ptr, ptr, ptr, i32 } %1824, ptr %947, align 8
  %1825 = call ptr @llvm.invariant.start.p0(i64 16, ptr %947)
  %1826 = getelementptr { ptr, ptr, ptr, i32 }, ptr %947, i32 0, i32 0
  %1827 = getelementptr { ptr, ptr, ptr, i32 }, ptr %948, i32 0, i32 0
  %1828 = load ptr, ptr %1826, align 8
  store ptr %1828, ptr %1827, align 8
  %1829 = getelementptr { ptr, ptr, ptr, i32 }, ptr %947, i32 0, i32 1
  %1830 = getelementptr { ptr, ptr, ptr, i32 }, ptr %948, i32 0, i32 1
  %1831 = load ptr, ptr %1829, align 8
  store ptr %1831, ptr %1830, align 8
  %1832 = getelementptr { ptr, ptr, ptr, i32 }, ptr %947, i32 0, i32 2
  %1833 = getelementptr { ptr, ptr, ptr, i32 }, ptr %948, i32 0, i32 2
  %1834 = load ptr, ptr %1832, align 8
  store ptr %1834, ptr %1833, align 8
  %1835 = getelementptr { ptr, ptr, ptr, i32 }, ptr %947, i32 0, i32 3
  %1836 = getelementptr { ptr, ptr, ptr, i32 }, ptr %948, i32 0, i32 3
  %1837 = load i32, ptr %1835, align 4
  store i32 %1837, ptr %1836, align 4
  call void @set_offset(ptr %948, ptr @RangeIterator)
  %1838 = call ptr @llvm.invariant.start.p0(i64 24, ptr %948)
  %1839 = getelementptr { ptr, ptr, ptr, i32 }, ptr %948, i32 0, i32 0
  %1840 = getelementptr { ptr, ptr, ptr, i32 }, ptr %949, i32 0, i32 0
  %1841 = load ptr, ptr %1839, align 8
  store ptr %1841, ptr %1840, align 8
  %1842 = getelementptr { ptr, ptr, ptr, i32 }, ptr %948, i32 0, i32 1
  %1843 = getelementptr { ptr, ptr, ptr, i32 }, ptr %949, i32 0, i32 1
  %1844 = load ptr, ptr %1842, align 8
  store ptr %1844, ptr %1843, align 8
  %1845 = getelementptr { ptr, ptr, ptr, i32 }, ptr %948, i32 0, i32 2
  %1846 = getelementptr { ptr, ptr, ptr, i32 }, ptr %949, i32 0, i32 2
  %1847 = load ptr, ptr %1845, align 8
  store ptr %1847, ptr %1846, align 8
  %1848 = getelementptr { ptr, ptr, ptr, i32 }, ptr %948, i32 0, i32 3
  %1849 = getelementptr { ptr, ptr, ptr, i32 }, ptr %949, i32 0, i32 3
  %1850 = load i32, ptr %1848, align 4
  store i32 %1850, ptr %1849, align 4
  call void @set_offset(ptr %949, ptr @RangeIterator)
  %1851 = call ptr @llvm.invariant.start.p0(i64 24, ptr %949)
  %1852 = getelementptr { ptr, ptr, ptr, i32 }, ptr %949, i32 0, i32 0
  %1853 = getelementptr { ptr, ptr, ptr, i32 }, ptr %950, i32 0, i32 0
  %1854 = load ptr, ptr %1852, align 8
  store ptr %1854, ptr %1853, align 8
  %1855 = getelementptr { ptr, ptr, ptr, i32 }, ptr %949, i32 0, i32 1
  %1856 = getelementptr { ptr, ptr, ptr, i32 }, ptr %950, i32 0, i32 1
  %1857 = load ptr, ptr %1855, align 8
  store ptr %1857, ptr %1856, align 8
  %1858 = getelementptr { ptr, ptr, ptr, i32 }, ptr %949, i32 0, i32 2
  %1859 = getelementptr { ptr, ptr, ptr, i32 }, ptr %950, i32 0, i32 2
  %1860 = load ptr, ptr %1858, align 8
  store ptr %1860, ptr %1859, align 8
  %1861 = getelementptr { ptr, ptr, ptr, i32 }, ptr %949, i32 0, i32 3
  %1862 = getelementptr { ptr, ptr, ptr, i32 }, ptr %950, i32 0, i32 3
  %1863 = load i32, ptr %1861, align 4
  store i32 %1863, ptr %1862, align 4
  %1864 = call ptr @llvm.invariant.start.p0(i64 16, ptr %950)
  %1865 = getelementptr { ptr, ptr, ptr, i32 }, ptr %950, i32 0, i32 0
  store ptr %1865, ptr %.reg2mem93, align 8
  %1866 = getelementptr { ptr, ptr, ptr, i32 }, ptr %950, i32 0, i32 1
  store ptr %1866, ptr %.reg2mem91, align 8
  %1867 = getelementptr { ptr, ptr, ptr, i32 }, ptr %950, i32 0, i32 2
  store ptr %1867, ptr %.reg2mem89, align 8
  %1868 = getelementptr { ptr, ptr, ptr, i32 }, ptr %950, i32 0, i32 3
  store ptr %1868, ptr %.reg2mem87, align 8
  br label %1869

1869:                                             ; preds = %._crit_edge6, %1682
  %.reload94 = load ptr, ptr %.reg2mem93, align 8
  %1870 = load ptr, ptr %.reload94, align 8
  %1871 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1870, 0
  %.reload92 = load ptr, ptr %.reg2mem91, align 8
  %1872 = load ptr, ptr %.reload92, align 8
  %1873 = insertvalue { ptr, ptr, ptr, i32 } %1871, ptr %1872, 1
  %.reload90 = load ptr, ptr %.reg2mem89, align 8
  %1874 = load ptr, ptr %.reload90, align 8
  %1875 = insertvalue { ptr, ptr, ptr, i32 } %1873, ptr %1874, 2
  %.reload88 = load ptr, ptr %.reg2mem87, align 8
  %1876 = load i32, ptr %.reload88, align 4
  %1877 = insertvalue { ptr, ptr, ptr, i32 } %1875, i32 %1876, 3
  %1878 = call ptr @llvm.invariant.start.p0(i64 0, ptr %951)
  %1879 = call ptr @llvm.invariant.start.p0(i64 72, ptr %1870)
  %1880 = getelementptr ptr, ptr %1870, i32 %1876
  %1881 = getelementptr ptr, ptr %1880, i32 4
  %1882 = load ptr, ptr %1881, align 8
  %1883 = call ptr %1882({ ptr, ptr, ptr, i32 } %1877, ptr %952)
  %1884 = call { ptr, i32 } %1883({ ptr, ptr, ptr, i32 } %1877, { ptr, ptr, ptr, i32 } %1877, ptr %951)
  store { ptr, i32 } %1884, ptr %953, align 8
  %1885 = getelementptr { ptr, i32 }, ptr %953, i32 0, i32 0
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %954, align 4
  %1886 = load ptr, ptr %1885, align 8
  %1887 = ptrtoint ptr %1886 to i64
  %1888 = load ptr, ptr %954, align 8
  %1889 = ptrtoint ptr %1888 to i64
  %1890 = icmp ne i64 %1887, %1889
  store i1 %1890, ptr %955, align 1
  %1891 = load i1, ptr %955, align 1
  store i1 %1891, ptr %.reg2mem84, align 1
  %.reload86 = load i1, ptr %.reg2mem84, align 1
  br i1 %.reload86, label %1892, label %._crit_edge5

._crit_edge5:                                     ; preds = %1869
  br label %2006

1892:                                             ; preds = %1869
  %1893 = getelementptr { ptr, i32 }, ptr %953, i32 0, i32 1
  %1894 = load i32, ptr %1893, align 4
  store i32 %1894, ptr %956, align 4
  %1895 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ i32, { ptr, i160 } }, ptr null, i32 1) to i64))
  %1896 = getelementptr { ptr, ptr, ptr, i32 }, ptr %957, i32 0, i32 1
  %1897 = getelementptr { ptr, ptr, ptr, i32 }, ptr %957, i32 0, i32 3
  store ptr @ListNode, ptr %957, align 8
  store ptr %1895, ptr %1896, align 8
  store i32 7, ptr %1897, align 4
  %1898 = call ptr @llvm.invariant.start.p0(i64 16, ptr %957)
  %1899 = load i32, ptr %956, align 4
  %1900 = getelementptr { ptr, ptr, ptr, i32 }, ptr %957, i32 0, i32 0
  %1901 = load ptr, ptr %1900, align 8
  %1902 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1901, 0
  %1903 = getelementptr { ptr, ptr, ptr, i32 }, ptr %957, i32 0, i32 1
  %1904 = load ptr, ptr %1903, align 8
  %1905 = insertvalue { ptr, ptr, ptr, i32 } %1902, ptr %1904, 1
  %1906 = getelementptr { ptr, ptr, ptr, i32 }, ptr %957, i32 0, i32 2
  %1907 = load ptr, ptr %1906, align 8
  %1908 = insertvalue { ptr, ptr, ptr, i32 } %1905, ptr %1907, 2
  %1909 = getelementptr { ptr, ptr, ptr, i32 }, ptr %957, i32 0, i32 3
  %1910 = load i32, ptr %1909, align 4
  %1911 = insertvalue { ptr, ptr, ptr, i32 } %1908, i32 %1910, 3
  %1912 = call ptr @llvm.invariant.start.p0(i64 8, ptr %958)
  %1913 = getelementptr [1 x ptr], ptr %958, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1913, align 8
  %1914 = call ptr @llvm.invariant.start.p0(i64 96, ptr %1901)
  %1915 = getelementptr ptr, ptr %1901, i32 %1910
  %1916 = getelementptr ptr, ptr %1915, i32 2
  %1917 = load ptr, ptr %1916, align 8
  %1918 = getelementptr [1 x ptr], ptr %959, i32 0, i32 0
  store ptr @i32_typ, ptr %1918, align 8
  %1919 = call ptr %1917({ ptr, ptr, ptr, i32 } %1911, ptr %959, i32 %1899)
  call void %1919({ ptr, ptr, ptr, i32 } %1911, { ptr, ptr, ptr, i32 } %1911, ptr %958, i32 %1899)
  %1920 = getelementptr { ptr, ptr, ptr, i32 }, ptr %957, i32 0, i32 0
  %1921 = getelementptr { ptr, ptr, ptr, i32 }, ptr %960, i32 0, i32 0
  %1922 = load ptr, ptr %1920, align 8
  store ptr %1922, ptr %1921, align 8
  %1923 = getelementptr { ptr, ptr, ptr, i32 }, ptr %957, i32 0, i32 1
  %1924 = getelementptr { ptr, ptr, ptr, i32 }, ptr %960, i32 0, i32 1
  %1925 = load ptr, ptr %1923, align 8
  store ptr %1925, ptr %1924, align 8
  %1926 = getelementptr { ptr, ptr, ptr, i32 }, ptr %957, i32 0, i32 2
  %1927 = getelementptr { ptr, ptr, ptr, i32 }, ptr %960, i32 0, i32 2
  %1928 = load ptr, ptr %1926, align 8
  store ptr %1928, ptr %1927, align 8
  %1929 = getelementptr { ptr, ptr, ptr, i32 }, ptr %957, i32 0, i32 3
  %1930 = getelementptr { ptr, ptr, ptr, i32 }, ptr %960, i32 0, i32 3
  %1931 = load i32, ptr %1929, align 4
  store i32 %1931, ptr %1930, align 4
  call void @set_offset(ptr %960, ptr @ListNode)
  %1932 = call ptr @llvm.invariant.start.p0(i64 24, ptr %960)
  %1933 = getelementptr { ptr, ptr, ptr, i32 }, ptr %960, i32 0, i32 0
  %1934 = load ptr, ptr %1933, align 8
  %1935 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1934, 0
  %1936 = getelementptr { ptr, ptr, ptr, i32 }, ptr %960, i32 0, i32 1
  %1937 = load ptr, ptr %1936, align 8
  %1938 = insertvalue { ptr, ptr, ptr, i32 } %1935, ptr %1937, 1
  %1939 = getelementptr { ptr, ptr, ptr, i32 }, ptr %960, i32 0, i32 2
  %1940 = load ptr, ptr %1939, align 8
  %1941 = insertvalue { ptr, ptr, ptr, i32 } %1938, ptr %1940, 2
  %1942 = getelementptr { ptr, ptr, ptr, i32 }, ptr %960, i32 0, i32 3
  %1943 = load i32, ptr %1942, align 4
  %1944 = insertvalue { ptr, ptr, ptr, i32 } %1941, i32 %1943, 3
  %1945 = getelementptr { ptr, ptr, ptr, i32 }, ptr %937, i32 0, i32 0
  %1946 = load ptr, ptr %1945, align 8
  %1947 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1946, 0
  %1948 = getelementptr { ptr, ptr, ptr, i32 }, ptr %937, i32 0, i32 1
  %1949 = load ptr, ptr %1948, align 8
  %1950 = insertvalue { ptr, ptr, ptr, i32 } %1947, ptr %1949, 1
  %1951 = getelementptr { ptr, ptr, ptr, i32 }, ptr %937, i32 0, i32 2
  %1952 = load ptr, ptr %1951, align 8
  %1953 = insertvalue { ptr, ptr, ptr, i32 } %1950, ptr %1952, 2
  %1954 = getelementptr { ptr, ptr, ptr, i32 }, ptr %937, i32 0, i32 3
  %1955 = load i32, ptr %1954, align 4
  %1956 = insertvalue { ptr, ptr, ptr, i32 } %1953, i32 %1955, 3
  %1957 = call ptr @llvm.invariant.start.p0(i64 8, ptr %961)
  %1958 = getelementptr [1 x ptr], ptr %961, i32 0, i32 0
  store ptr @_parameterization_ListNode, ptr %1958, align 8
  %1959 = call ptr @llvm.invariant.start.p0(i64 96, ptr %1946)
  %1960 = getelementptr ptr, ptr %1946, i32 %1955
  %1961 = getelementptr ptr, ptr %1960, i32 3
  %1962 = load ptr, ptr %1961, align 8
  %1963 = getelementptr [1 x ptr], ptr %962, i32 0, i32 0
  store ptr %1934, ptr %1963, align 8
  %1964 = call ptr %1962({ ptr, ptr, ptr, i32 } %1956, ptr %962, { ptr, ptr, ptr, i32 } %1944)
  %1965 = call { ptr, ptr, ptr, i32 } %1964({ ptr, ptr, ptr, i32 } %1956, { ptr, ptr, ptr, i32 } %1956, ptr %961, { ptr, ptr, ptr, i32 } %1944)
  store { ptr, ptr, ptr, i32 } %1965, ptr %963, align 8
  %1966 = call ptr @llvm.invariant.start.p0(i64 16, ptr %963)
  %1967 = getelementptr { ptr, ptr, ptr, i32 }, ptr %963, i32 0, i32 0
  %1968 = getelementptr { ptr, ptr, ptr, i32 }, ptr %964, i32 0, i32 0
  %1969 = load ptr, ptr %1967, align 8
  store ptr %1969, ptr %1968, align 8
  %1970 = getelementptr { ptr, ptr, ptr, i32 }, ptr %963, i32 0, i32 1
  %1971 = getelementptr { ptr, ptr, ptr, i32 }, ptr %964, i32 0, i32 1
  %1972 = load ptr, ptr %1970, align 8
  store ptr %1972, ptr %1971, align 8
  %1973 = getelementptr { ptr, ptr, ptr, i32 }, ptr %963, i32 0, i32 2
  %1974 = getelementptr { ptr, ptr, ptr, i32 }, ptr %964, i32 0, i32 2
  %1975 = load ptr, ptr %1973, align 8
  store ptr %1975, ptr %1974, align 8
  %1976 = getelementptr { ptr, ptr, ptr, i32 }, ptr %963, i32 0, i32 3
  %1977 = getelementptr { ptr, ptr, ptr, i32 }, ptr %964, i32 0, i32 3
  %1978 = load i32, ptr %1976, align 4
  store i32 %1978, ptr %1977, align 4
  call void @set_offset(ptr %964, ptr @ListNode)
  %1979 = call ptr @llvm.invariant.start.p0(i64 24, ptr %964)
  %1980 = getelementptr { ptr, ptr, ptr, i32 }, ptr %964, i32 0, i32 0
  %1981 = getelementptr { ptr, ptr, ptr, i32 }, ptr %965, i32 0, i32 0
  %1982 = load ptr, ptr %1980, align 8
  store ptr %1982, ptr %1981, align 8
  %1983 = getelementptr { ptr, ptr, ptr, i32 }, ptr %964, i32 0, i32 1
  %1984 = getelementptr { ptr, ptr, ptr, i32 }, ptr %965, i32 0, i32 1
  %1985 = load ptr, ptr %1983, align 8
  store ptr %1985, ptr %1984, align 8
  %1986 = getelementptr { ptr, ptr, ptr, i32 }, ptr %964, i32 0, i32 2
  %1987 = getelementptr { ptr, ptr, ptr, i32 }, ptr %965, i32 0, i32 2
  %1988 = load ptr, ptr %1986, align 8
  store ptr %1988, ptr %1987, align 8
  %1989 = getelementptr { ptr, ptr, ptr, i32 }, ptr %964, i32 0, i32 3
  %1990 = getelementptr { ptr, ptr, ptr, i32 }, ptr %965, i32 0, i32 3
  %1991 = load i32, ptr %1989, align 4
  store i32 %1991, ptr %1990, align 4
  call void @set_offset(ptr %965, ptr @ListNode)
  %1992 = call ptr @llvm.invariant.start.p0(i64 24, ptr %965)
  %1993 = getelementptr { ptr, ptr, ptr, i32 }, ptr %965, i32 0, i32 0
  %1994 = getelementptr { ptr, ptr, ptr, i32 }, ptr %937, i32 0, i32 0
  %1995 = load ptr, ptr %1993, align 8
  store ptr %1995, ptr %1994, align 8
  %1996 = getelementptr { ptr, ptr, ptr, i32 }, ptr %965, i32 0, i32 1
  %1997 = getelementptr { ptr, ptr, ptr, i32 }, ptr %937, i32 0, i32 1
  %1998 = load ptr, ptr %1996, align 8
  store ptr %1998, ptr %1997, align 8
  %1999 = getelementptr { ptr, ptr, ptr, i32 }, ptr %965, i32 0, i32 2
  %2000 = getelementptr { ptr, ptr, ptr, i32 }, ptr %937, i32 0, i32 2
  %2001 = load ptr, ptr %1999, align 8
  store ptr %2001, ptr %2000, align 8
  %2002 = getelementptr { ptr, ptr, ptr, i32 }, ptr %965, i32 0, i32 3
  %2003 = getelementptr { ptr, ptr, ptr, i32 }, ptr %937, i32 0, i32 3
  %2004 = load i32, ptr %2002, align 4
  store i32 %2004, ptr %2003, align 4
  %2005 = load i32, ptr %956, align 4
  store i32 %2005, ptr %953, align 4
  br label %2006

2006:                                             ; preds = %._crit_edge5, %1892
  %.reload85 = load i1, ptr %.reg2mem84, align 1
  br i1 %.reload85, label %._crit_edge6, label %2007

._crit_edge6:                                     ; preds = %2006
  br label %1869

2007:                                             ; preds = %2006
  %2008 = getelementptr { ptr, ptr, ptr, i32 }, ptr %935, i32 0, i32 0
  %2009 = load ptr, ptr %2008, align 8
  %2010 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2009, 0
  %2011 = getelementptr { ptr, ptr, ptr, i32 }, ptr %935, i32 0, i32 1
  %2012 = load ptr, ptr %2011, align 8
  %2013 = insertvalue { ptr, ptr, ptr, i32 } %2010, ptr %2012, 1
  %2014 = getelementptr { ptr, ptr, ptr, i32 }, ptr %935, i32 0, i32 2
  %2015 = load ptr, ptr %2014, align 8
  %2016 = insertvalue { ptr, ptr, ptr, i32 } %2013, ptr %2015, 2
  %2017 = getelementptr { ptr, ptr, ptr, i32 }, ptr %935, i32 0, i32 3
  %2018 = load i32, ptr %2017, align 4
  %2019 = insertvalue { ptr, ptr, ptr, i32 } %2016, i32 %2018, 3
  %2020 = call ptr @llvm.invariant.start.p0(i64 0, ptr %966)
  %2021 = call ptr @llvm.invariant.start.p0(i64 96, ptr %2009)
  %2022 = getelementptr ptr, ptr %2009, i32 %2018
  %2023 = getelementptr ptr, ptr %2022, i32 5
  %2024 = load ptr, ptr %2023, align 8
  %2025 = call ptr %2024({ ptr, ptr, ptr, i32 } %2019, ptr %967)
  %2026 = call i32 %2025({ ptr, ptr, ptr, i32 } %2019, { ptr, ptr, ptr, i32 } %2019, ptr %966)
  store i32 %2026, ptr %968, align 4
  %2027 = load i32, ptr %968, align 4
  store i32 %2027, ptr %969, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %971, align 4
  %2028 = load i64, ptr %971, align 4
  store i64 %2028, ptr %970, align 4
  %2029 = load ptr, ptr %970, align 8
  %2030 = insertvalue { ptr, i160 } undef, ptr %2029, 0
  %2031 = load i160, ptr %969, align 4
  %2032 = insertvalue { ptr, i160 } %2030, i160 %2031, 1
  %2033 = call ptr @llvm.invariant.start.p0(i64 8, ptr %972)
  %2034 = getelementptr [1 x ptr], ptr %972, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %2034, align 8
  %2035 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %2036 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %2037 = getelementptr [1 x ptr], ptr %973, i32 0, i32 0
  store ptr %2029, ptr %2037, align 8
  %2038 = call ptr %2036(ptr %973, { ptr, i160 } %2032)
  call void %2038(ptr %972, { ptr, i160 } %2032)
  %2039 = getelementptr { ptr, ptr, ptr, i32 }, ptr %935, i32 0, i32 0
  %2040 = load ptr, ptr %2039, align 8
  %2041 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2040, 0
  %2042 = getelementptr { ptr, ptr, ptr, i32 }, ptr %935, i32 0, i32 1
  %2043 = load ptr, ptr %2042, align 8
  %2044 = insertvalue { ptr, ptr, ptr, i32 } %2041, ptr %2043, 1
  %2045 = getelementptr { ptr, ptr, ptr, i32 }, ptr %935, i32 0, i32 2
  %2046 = load ptr, ptr %2045, align 8
  %2047 = insertvalue { ptr, ptr, ptr, i32 } %2044, ptr %2046, 2
  %2048 = getelementptr { ptr, ptr, ptr, i32 }, ptr %935, i32 0, i32 3
  %2049 = load i32, ptr %2048, align 4
  %2050 = insertvalue { ptr, ptr, ptr, i32 } %2047, i32 %2049, 3
  %2051 = call ptr @llvm.invariant.start.p0(i64 0, ptr %974)
  %2052 = call ptr @llvm.invariant.start.p0(i64 96, ptr %2040)
  %2053 = getelementptr ptr, ptr %2040, i32 %2049
  %2054 = getelementptr ptr, ptr %2053, i32 6
  %2055 = load ptr, ptr %2054, align 8
  %2056 = call ptr %2055({ ptr, ptr, ptr, i32 } %2050, ptr %975)
  %2057 = call { ptr, ptr, ptr, i32 } %2056({ ptr, ptr, ptr, i32 } %2050, { ptr, ptr, ptr, i32 } %2050, ptr %974)
  store { ptr, ptr, ptr, i32 } %2057, ptr %976, align 8
  %2058 = call ptr @llvm.invariant.start.p0(i64 16, ptr %976)
  %2059 = getelementptr { ptr, ptr, ptr, i32 }, ptr %976, i32 0, i32 0
  %2060 = getelementptr { ptr, ptr, ptr, i32 }, ptr %977, i32 0, i32 0
  %2061 = load ptr, ptr %2059, align 8
  store ptr %2061, ptr %2060, align 8
  %2062 = getelementptr { ptr, ptr, ptr, i32 }, ptr %976, i32 0, i32 1
  %2063 = getelementptr { ptr, ptr, ptr, i32 }, ptr %977, i32 0, i32 1
  %2064 = load ptr, ptr %2062, align 8
  store ptr %2064, ptr %2063, align 8
  %2065 = getelementptr { ptr, ptr, ptr, i32 }, ptr %976, i32 0, i32 2
  %2066 = getelementptr { ptr, ptr, ptr, i32 }, ptr %977, i32 0, i32 2
  %2067 = load ptr, ptr %2065, align 8
  store ptr %2067, ptr %2066, align 8
  %2068 = getelementptr { ptr, ptr, ptr, i32 }, ptr %976, i32 0, i32 3
  %2069 = getelementptr { ptr, ptr, ptr, i32 }, ptr %977, i32 0, i32 3
  %2070 = load i32, ptr %2068, align 4
  store i32 %2070, ptr %2069, align 4
  call void @set_offset(ptr %977, ptr @ListIterator)
  %2071 = call ptr @llvm.invariant.start.p0(i64 24, ptr %977)
  %2072 = getelementptr { ptr, ptr, ptr, i32 }, ptr %977, i32 0, i32 0
  %2073 = getelementptr { ptr, ptr, ptr, i32 }, ptr %978, i32 0, i32 0
  %2074 = load ptr, ptr %2072, align 8
  store ptr %2074, ptr %2073, align 8
  %2075 = getelementptr { ptr, ptr, ptr, i32 }, ptr %977, i32 0, i32 1
  %2076 = getelementptr { ptr, ptr, ptr, i32 }, ptr %978, i32 0, i32 1
  %2077 = load ptr, ptr %2075, align 8
  store ptr %2077, ptr %2076, align 8
  %2078 = getelementptr { ptr, ptr, ptr, i32 }, ptr %977, i32 0, i32 2
  %2079 = getelementptr { ptr, ptr, ptr, i32 }, ptr %978, i32 0, i32 2
  %2080 = load ptr, ptr %2078, align 8
  store ptr %2080, ptr %2079, align 8
  %2081 = getelementptr { ptr, ptr, ptr, i32 }, ptr %977, i32 0, i32 3
  %2082 = getelementptr { ptr, ptr, ptr, i32 }, ptr %978, i32 0, i32 3
  %2083 = load i32, ptr %2081, align 4
  store i32 %2083, ptr %2082, align 4
  call void @set_offset(ptr %978, ptr @ListIterator)
  %2084 = call ptr @llvm.invariant.start.p0(i64 24, ptr %978)
  %2085 = getelementptr { ptr, ptr, ptr, i32 }, ptr %978, i32 0, i32 0
  %2086 = getelementptr { ptr, ptr, ptr, i32 }, ptr %979, i32 0, i32 0
  %2087 = load ptr, ptr %2085, align 8
  store ptr %2087, ptr %2086, align 8
  %2088 = getelementptr { ptr, ptr, ptr, i32 }, ptr %978, i32 0, i32 1
  %2089 = getelementptr { ptr, ptr, ptr, i32 }, ptr %979, i32 0, i32 1
  %2090 = load ptr, ptr %2088, align 8
  store ptr %2090, ptr %2089, align 8
  %2091 = getelementptr { ptr, ptr, ptr, i32 }, ptr %978, i32 0, i32 2
  %2092 = getelementptr { ptr, ptr, ptr, i32 }, ptr %979, i32 0, i32 2
  %2093 = load ptr, ptr %2091, align 8
  store ptr %2093, ptr %2092, align 8
  %2094 = getelementptr { ptr, ptr, ptr, i32 }, ptr %978, i32 0, i32 3
  %2095 = getelementptr { ptr, ptr, ptr, i32 }, ptr %979, i32 0, i32 3
  %2096 = load i32, ptr %2094, align 4
  store i32 %2096, ptr %2095, align 4
  %2097 = call ptr @llvm.invariant.start.p0(i64 16, ptr %979)
  %2098 = getelementptr { ptr, ptr, ptr, i32 }, ptr %979, i32 0, i32 0
  store ptr %2098, ptr %.reg2mem82, align 8
  %2099 = getelementptr { ptr, ptr, ptr, i32 }, ptr %979, i32 0, i32 1
  store ptr %2099, ptr %.reg2mem80, align 8
  %2100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %979, i32 0, i32 2
  store ptr %2100, ptr %.reg2mem78, align 8
  %2101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %979, i32 0, i32 3
  store ptr %2101, ptr %.reg2mem76, align 8
  br label %2102

2102:                                             ; preds = %._crit_edge8, %2007
  %.reload83 = load ptr, ptr %.reg2mem82, align 8
  %2103 = load ptr, ptr %.reload83, align 8
  %2104 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2103, 0
  %.reload81 = load ptr, ptr %.reg2mem80, align 8
  %2105 = load ptr, ptr %.reload81, align 8
  %2106 = insertvalue { ptr, ptr, ptr, i32 } %2104, ptr %2105, 1
  %.reload79 = load ptr, ptr %.reg2mem78, align 8
  %2107 = load ptr, ptr %.reload79, align 8
  %2108 = insertvalue { ptr, ptr, ptr, i32 } %2106, ptr %2107, 2
  %.reload77 = load ptr, ptr %.reg2mem76, align 8
  %2109 = load i32, ptr %.reload77, align 4
  %2110 = insertvalue { ptr, ptr, ptr, i32 } %2108, i32 %2109, 3
  %2111 = call ptr @llvm.invariant.start.p0(i64 0, ptr %980)
  %2112 = call ptr @llvm.invariant.start.p0(i64 40, ptr %2103)
  %2113 = getelementptr ptr, ptr %2103, i32 %2109
  %2114 = getelementptr ptr, ptr %2113, i32 2
  %2115 = load ptr, ptr %2114, align 8
  %2116 = call ptr %2115({ ptr, ptr, ptr, i32 } %2110, ptr %981)
  %2117 = call { ptr, i160 } %2116({ ptr, ptr, ptr, i32 } %2110, { ptr, ptr, ptr, i32 } %2110, ptr %980)
  store { ptr, i160 } %2117, ptr %982, align 8
  %2118 = getelementptr { ptr, i160 }, ptr %982, i32 0, i32 0
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %983, align 4
  %2119 = load ptr, ptr %2118, align 8
  %2120 = ptrtoint ptr %2119 to i64
  %2121 = load ptr, ptr %983, align 8
  %2122 = ptrtoint ptr %2121 to i64
  %2123 = icmp ne i64 %2120, %2122
  store i1 %2123, ptr %984, align 1
  %2124 = load i1, ptr %984, align 1
  store i1 %2124, ptr %.reg2mem73, align 1
  %.reload75 = load i1, ptr %.reg2mem73, align 1
  br i1 %.reload75, label %2125, label %._crit_edge7

._crit_edge7:                                     ; preds = %2102
  br label %2195

2125:                                             ; preds = %2102
  %2126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %982, i32 0, i32 0
  %2127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %985, i32 0, i32 0
  %2128 = load ptr, ptr %2126, align 8
  store ptr %2128, ptr %2127, align 8
  %2129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %982, i32 0, i32 1
  %2130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %985, i32 0, i32 1
  %2131 = load ptr, ptr %2129, align 8
  store ptr %2131, ptr %2130, align 8
  %2132 = getelementptr { ptr, ptr, ptr, i32 }, ptr %982, i32 0, i32 2
  %2133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %985, i32 0, i32 2
  %2134 = load ptr, ptr %2132, align 8
  store ptr %2134, ptr %2133, align 8
  %2135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %982, i32 0, i32 3
  %2136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %985, i32 0, i32 3
  %2137 = load i32, ptr %2135, align 4
  store i32 %2137, ptr %2136, align 4
  call void @set_offset(ptr %985, ptr @ListNode)
  %2138 = call ptr @llvm.invariant.start.p0(i64 24, ptr %985)
  %2139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %985, i32 0, i32 0
  %2140 = load ptr, ptr %2139, align 8
  %2141 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2140, 0
  %2142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %985, i32 0, i32 1
  %2143 = load ptr, ptr %2142, align 8
  %2144 = insertvalue { ptr, ptr, ptr, i32 } %2141, ptr %2143, 1
  %2145 = getelementptr { ptr, ptr, ptr, i32 }, ptr %985, i32 0, i32 2
  %2146 = load ptr, ptr %2145, align 8
  %2147 = insertvalue { ptr, ptr, ptr, i32 } %2144, ptr %2146, 2
  %2148 = getelementptr { ptr, ptr, ptr, i32 }, ptr %985, i32 0, i32 3
  %2149 = load i32, ptr %2148, align 4
  %2150 = insertvalue { ptr, ptr, ptr, i32 } %2147, i32 %2149, 3
  %2151 = call ptr @llvm.invariant.start.p0(i64 0, ptr %986)
  %2152 = call ptr @llvm.invariant.start.p0(i64 96, ptr %2140)
  %2153 = getelementptr ptr, ptr %2140, i32 %2149
  %2154 = getelementptr ptr, ptr %2153, i32 5
  %2155 = load ptr, ptr %2154, align 8
  %2156 = call ptr %2155({ ptr, ptr, ptr, i32 } %2150, ptr %987)
  %2157 = call i32 %2156({ ptr, ptr, ptr, i32 } %2150, { ptr, ptr, ptr, i32 } %2150, ptr %986)
  store i32 %2157, ptr %988, align 4
  %2158 = load i32, ptr %988, align 4
  store i32 %2158, ptr %989, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %991, align 4
  %2159 = load i64, ptr %991, align 4
  store i64 %2159, ptr %990, align 4
  %2160 = load ptr, ptr %990, align 8
  %2161 = insertvalue { ptr, i160 } undef, ptr %2160, 0
  %2162 = load i160, ptr %989, align 4
  %2163 = insertvalue { ptr, i160 } %2161, i160 %2162, 1
  %2164 = call ptr @llvm.invariant.start.p0(i64 8, ptr %992)
  %2165 = getelementptr [1 x ptr], ptr %992, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %2165, align 8
  %2166 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %2167 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %2168 = getelementptr [1 x ptr], ptr %993, i32 0, i32 0
  store ptr %2160, ptr %2168, align 8
  %2169 = call ptr %2167(ptr %993, { ptr, i160 } %2163)
  call void %2169(ptr %992, { ptr, i160 } %2163)
  %2170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %985, i32 0, i32 0
  %2171 = getelementptr { ptr, ptr, ptr, i32 }, ptr %994, i32 0, i32 0
  %2172 = load ptr, ptr %2170, align 8
  store ptr %2172, ptr %2171, align 8
  %2173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %985, i32 0, i32 1
  %2174 = getelementptr { ptr, ptr, ptr, i32 }, ptr %994, i32 0, i32 1
  %2175 = load ptr, ptr %2173, align 8
  store ptr %2175, ptr %2174, align 8
  %2176 = getelementptr { ptr, ptr, ptr, i32 }, ptr %985, i32 0, i32 2
  %2177 = getelementptr { ptr, ptr, ptr, i32 }, ptr %994, i32 0, i32 2
  %2178 = load ptr, ptr %2176, align 8
  store ptr %2178, ptr %2177, align 8
  %2179 = getelementptr { ptr, ptr, ptr, i32 }, ptr %985, i32 0, i32 3
  %2180 = getelementptr { ptr, ptr, ptr, i32 }, ptr %994, i32 0, i32 3
  %2181 = load i32, ptr %2179, align 4
  store i32 %2181, ptr %2180, align 4
  call void @set_offset(ptr %994, ptr @ListNode)
  %2182 = call ptr @llvm.invariant.start.p0(i64 24, ptr %994)
  %2183 = getelementptr { ptr, ptr, ptr, i32 }, ptr %994, i32 0, i32 0
  %2184 = getelementptr { ptr, ptr, ptr, i32 }, ptr %982, i32 0, i32 0
  %2185 = load ptr, ptr %2183, align 8
  store ptr %2185, ptr %2184, align 8
  %2186 = getelementptr { ptr, ptr, ptr, i32 }, ptr %994, i32 0, i32 1
  %2187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %982, i32 0, i32 1
  %2188 = load ptr, ptr %2186, align 8
  store ptr %2188, ptr %2187, align 8
  %2189 = getelementptr { ptr, ptr, ptr, i32 }, ptr %994, i32 0, i32 2
  %2190 = getelementptr { ptr, ptr, ptr, i32 }, ptr %982, i32 0, i32 2
  %2191 = load ptr, ptr %2189, align 8
  store ptr %2191, ptr %2190, align 8
  %2192 = getelementptr { ptr, ptr, ptr, i32 }, ptr %994, i32 0, i32 3
  %2193 = getelementptr { ptr, ptr, ptr, i32 }, ptr %982, i32 0, i32 3
  %2194 = load i32, ptr %2192, align 4
  store i32 %2194, ptr %2193, align 4
  br label %2195

2195:                                             ; preds = %._crit_edge7, %2125
  %.reload74 = load i1, ptr %.reg2mem73, align 1
  br i1 %.reload74, label %._crit_edge8, label %2196

._crit_edge8:                                     ; preds = %2195
  br label %2102

2196:                                             ; preds = %2195
  store ptr @print88, ptr %995, align 8
  %2197 = load ptr, ptr %995, align 8
  %2198 = call ptr @coroutine_create(ptr %2197, ptr @coroutine_rklccgojvm_passer)
  call void @coroutine_rklccgojvm_buffer_filler(ptr %2198)
  store ptr %2198, ptr %996, align 8
  %2199 = getelementptr { ptr, ptr, ptr, i32 }, ptr %996, i32 0, i32 0
  %2200 = getelementptr { ptr, ptr, ptr, i32 }, ptr %997, i32 0, i32 0
  %2201 = load ptr, ptr %2199, align 8
  store ptr %2201, ptr %2200, align 8
  %2202 = getelementptr { ptr, ptr, ptr, i32 }, ptr %996, i32 0, i32 1
  %2203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %997, i32 0, i32 1
  %2204 = load ptr, ptr %2202, align 8
  store ptr %2204, ptr %2203, align 8
  %2205 = getelementptr { ptr, ptr, ptr, i32 }, ptr %996, i32 0, i32 2
  %2206 = getelementptr { ptr, ptr, ptr, i32 }, ptr %997, i32 0, i32 2
  %2207 = load ptr, ptr %2205, align 8
  store ptr %2207, ptr %2206, align 8
  %2208 = getelementptr { ptr, ptr, ptr, i32 }, ptr %996, i32 0, i32 3
  %2209 = getelementptr { ptr, ptr, ptr, i32 }, ptr %997, i32 0, i32 3
  %2210 = load i32, ptr %2208, align 4
  store i32 %2210, ptr %2209, align 4
  %2211 = call ptr @llvm.invariant.start.p0(i64 16, ptr %997)
  %2212 = load ptr, ptr %997, align 8
  call void @coroutine_call(ptr %2212)
  %2213 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %2212, i32 0, i32 4
  %2214 = load { ptr, i160 }, ptr %2213, align 8
  store { ptr, i160 } %2214, ptr %998, align 8
  store i32 89, ptr %999, align 4
  %2215 = load i32, ptr %999, align 4
  store i32 %2215, ptr %1000, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %1002, align 4
  %2216 = load i64, ptr %1002, align 4
  store i64 %2216, ptr %1001, align 4
  %2217 = load ptr, ptr %1001, align 8
  %2218 = insertvalue { ptr, i160 } undef, ptr %2217, 0
  %2219 = load i160, ptr %1000, align 4
  %2220 = insertvalue { ptr, i160 } %2218, i160 %2219, 1
  %2221 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1003)
  %2222 = getelementptr [1 x ptr], ptr %1003, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %2222, align 8
  %2223 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %2224 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %2225 = getelementptr [1 x ptr], ptr %1004, i32 0, i32 0
  store ptr %2217, ptr %2225, align 8
  %2226 = call ptr %2224(ptr %1004, { ptr, i160 } %2220)
  call void %2226(ptr %1003, { ptr, i160 } %2220)
  %2227 = load ptr, ptr %997, align 8
  call void @coroutine_call(ptr %2227)
  %2228 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %2227, i32 0, i32 4
  %2229 = load { ptr, i160 }, ptr %2228, align 8
  store { ptr, i160 } %2229, ptr %1005, align 8
  store i32 1, ptr %1006, align 4
  store i32 10, ptr %1007, align 4
  %2230 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ i32, i32, i32 }, ptr null, i32 1) to i64))
  %2231 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1008, i32 0, i32 1
  %2232 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1008, i32 0, i32 3
  store ptr @Range, ptr %1008, align 8
  store ptr %2230, ptr %2231, align 8
  store i32 7, ptr %2232, align 4
  %2233 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1008)
  store i32 1, ptr %1009, align 4
  store i32 10, ptr %1010, align 4
  %2234 = load i32, ptr %1009, align 4
  %2235 = load i32, ptr %1010, align 4
  %2236 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1008, i32 0, i32 0
  %2237 = load ptr, ptr %2236, align 8
  %2238 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2237, 0
  %2239 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1008, i32 0, i32 1
  %2240 = load ptr, ptr %2239, align 8
  %2241 = insertvalue { ptr, ptr, ptr, i32 } %2238, ptr %2240, 1
  %2242 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1008, i32 0, i32 2
  %2243 = load ptr, ptr %2242, align 8
  %2244 = insertvalue { ptr, ptr, ptr, i32 } %2241, ptr %2243, 2
  %2245 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1008, i32 0, i32 3
  %2246 = load i32, ptr %2245, align 4
  %2247 = insertvalue { ptr, ptr, ptr, i32 } %2244, i32 %2246, 3
  %2248 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1011)
  %2249 = getelementptr [2 x ptr], ptr %1011, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %2249, align 8
  %2250 = getelementptr [2 x ptr], ptr %1011, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %2250, align 8
  %2251 = call ptr @llvm.invariant.start.p0(i64 456, ptr %2237)
  %2252 = getelementptr ptr, ptr %2237, i32 %2246
  %2253 = getelementptr ptr, ptr %2252, i32 4
  %2254 = load ptr, ptr %2253, align 8
  %2255 = getelementptr [2 x ptr], ptr %1012, i32 0, i32 0
  store ptr @i32_typ, ptr %2255, align 8
  %2256 = getelementptr [2 x ptr], ptr %1012, i32 0, i32 1
  store ptr @i32_typ, ptr %2256, align 8
  %2257 = call ptr %2254({ ptr, ptr, ptr, i32 } %2247, ptr %1012, i32 %2234, i32 %2235)
  call void %2257({ ptr, ptr, ptr, i32 } %2247, { ptr, ptr, ptr, i32 } %2247, ptr %1011, i32 %2234, i32 %2235)
  %2258 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1008, i32 0, i32 0
  %2259 = load ptr, ptr %2258, align 8
  %2260 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2259, 0
  %2261 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1008, i32 0, i32 1
  %2262 = load ptr, ptr %2261, align 8
  %2263 = insertvalue { ptr, ptr, ptr, i32 } %2260, ptr %2262, 1
  %2264 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1008, i32 0, i32 2
  %2265 = load ptr, ptr %2264, align 8
  %2266 = insertvalue { ptr, ptr, ptr, i32 } %2263, ptr %2265, 2
  %2267 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1008, i32 0, i32 3
  %2268 = load i32, ptr %2267, align 4
  %2269 = insertvalue { ptr, ptr, ptr, i32 } %2266, i32 %2268, 3
  %2270 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1013)
  %2271 = call ptr @llvm.invariant.start.p0(i64 456, ptr %2259)
  %2272 = getelementptr ptr, ptr %2259, i32 %2268
  %2273 = getelementptr ptr, ptr %2272, i32 16
  %2274 = load ptr, ptr %2273, align 8
  %2275 = call ptr %2274({ ptr, ptr, ptr, i32 } %2269, ptr %1014)
  %2276 = call { ptr, ptr, ptr, i32 } %2275({ ptr, ptr, ptr, i32 } %2269, { ptr, ptr, ptr, i32 } %2269, ptr %1013)
  store { ptr, ptr, ptr, i32 } %2276, ptr %1015, align 8
  %2277 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1015)
  %2278 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1015, i32 0, i32 0
  %2279 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1016, i32 0, i32 0
  %2280 = load ptr, ptr %2278, align 8
  store ptr %2280, ptr %2279, align 8
  %2281 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1015, i32 0, i32 1
  %2282 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1016, i32 0, i32 1
  %2283 = load ptr, ptr %2281, align 8
  store ptr %2283, ptr %2282, align 8
  %2284 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1015, i32 0, i32 2
  %2285 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1016, i32 0, i32 2
  %2286 = load ptr, ptr %2284, align 8
  store ptr %2286, ptr %2285, align 8
  %2287 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1015, i32 0, i32 3
  %2288 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1016, i32 0, i32 3
  %2289 = load i32, ptr %2287, align 4
  store i32 %2289, ptr %2288, align 4
  call void @set_offset(ptr %1016, ptr @RangeIterator)
  %2290 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1016)
  %2291 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1016, i32 0, i32 0
  %2292 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1017, i32 0, i32 0
  %2293 = load ptr, ptr %2291, align 8
  store ptr %2293, ptr %2292, align 8
  %2294 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1016, i32 0, i32 1
  %2295 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1017, i32 0, i32 1
  %2296 = load ptr, ptr %2294, align 8
  store ptr %2296, ptr %2295, align 8
  %2297 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1016, i32 0, i32 2
  %2298 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1017, i32 0, i32 2
  %2299 = load ptr, ptr %2297, align 8
  store ptr %2299, ptr %2298, align 8
  %2300 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1016, i32 0, i32 3
  %2301 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1017, i32 0, i32 3
  %2302 = load i32, ptr %2300, align 4
  store i32 %2302, ptr %2301, align 4
  call void @set_offset(ptr %1017, ptr @RangeIterator)
  %2303 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1017)
  %2304 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1017, i32 0, i32 0
  %2305 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1018, i32 0, i32 0
  %2306 = load ptr, ptr %2304, align 8
  store ptr %2306, ptr %2305, align 8
  %2307 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1017, i32 0, i32 1
  %2308 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1018, i32 0, i32 1
  %2309 = load ptr, ptr %2307, align 8
  store ptr %2309, ptr %2308, align 8
  %2310 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1017, i32 0, i32 2
  %2311 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1018, i32 0, i32 2
  %2312 = load ptr, ptr %2310, align 8
  store ptr %2312, ptr %2311, align 8
  %2313 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1017, i32 0, i32 3
  %2314 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1018, i32 0, i32 3
  %2315 = load i32, ptr %2313, align 4
  store i32 %2315, ptr %2314, align 4
  %2316 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1018)
  %2317 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1018, i32 0, i32 0
  store ptr %2317, ptr %.reg2mem71, align 8
  %2318 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1018, i32 0, i32 1
  store ptr %2318, ptr %.reg2mem69, align 8
  %2319 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1018, i32 0, i32 2
  store ptr %2319, ptr %.reg2mem67, align 8
  %2320 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1018, i32 0, i32 3
  store ptr %2320, ptr %.reg2mem65, align 8
  br label %2321

2321:                                             ; preds = %._crit_edge9, %2196
  %.reload72 = load ptr, ptr %.reg2mem71, align 8
  %2322 = load ptr, ptr %.reload72, align 8
  %2323 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2322, 0
  %.reload70 = load ptr, ptr %.reg2mem69, align 8
  %2324 = load ptr, ptr %.reload70, align 8
  %2325 = insertvalue { ptr, ptr, ptr, i32 } %2323, ptr %2324, 1
  %.reload68 = load ptr, ptr %.reg2mem67, align 8
  %2326 = load ptr, ptr %.reload68, align 8
  %2327 = insertvalue { ptr, ptr, ptr, i32 } %2325, ptr %2326, 2
  %.reload66 = load ptr, ptr %.reg2mem65, align 8
  %2328 = load i32, ptr %.reload66, align 4
  %2329 = insertvalue { ptr, ptr, ptr, i32 } %2327, i32 %2328, 3
  %2330 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1019)
  %2331 = call ptr @llvm.invariant.start.p0(i64 72, ptr %2322)
  %2332 = getelementptr ptr, ptr %2322, i32 %2328
  %2333 = getelementptr ptr, ptr %2332, i32 4
  %2334 = load ptr, ptr %2333, align 8
  %2335 = call ptr %2334({ ptr, ptr, ptr, i32 } %2329, ptr %1020)
  %2336 = call { ptr, i32 } %2335({ ptr, ptr, ptr, i32 } %2329, { ptr, ptr, ptr, i32 } %2329, ptr %1019)
  store { ptr, i32 } %2336, ptr %1021, align 8
  %2337 = getelementptr { ptr, i32 }, ptr %1021, i32 0, i32 0
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %1022, align 4
  %2338 = load ptr, ptr %2337, align 8
  %2339 = ptrtoint ptr %2338 to i64
  %2340 = load ptr, ptr %1022, align 8
  %2341 = ptrtoint ptr %2340 to i64
  %2342 = icmp ne i64 %2339, %2341
  store i1 %2342, ptr %1023, align 1
  %2343 = load i1, ptr %1023, align 1
  br i1 %2343, label %2344, label %2369

2344:                                             ; preds = %2321
  %2345 = getelementptr { ptr, i32 }, ptr %1021, i32 0, i32 1
  %2346 = load i32, ptr %2345, align 4
  store i32 %2346, ptr %1024, align 4
  store i32 5, ptr %1025, align 4
  %2347 = load i32, ptr %1024, align 4
  %2348 = load i32, ptr %1025, align 4
  %2349 = icmp eq i32 %2347, %2348
  store i1 %2349, ptr %1026, align 1
  %2350 = load i1, ptr %1026, align 1
  %2351 = xor i1 %2350, true
  %2352 = zext i1 %2351 to i32
  store i32 %2352, ptr %.reg2mem63, align 4
  br i1 %2350, label %2353, label %2354

2353:                                             ; preds = %2344
  br label %2368

2354:                                             ; preds = %2344
  %2355 = load i32, ptr %1024, align 4
  store i32 %2355, ptr %1027, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %1029, align 4
  %2356 = load i64, ptr %1029, align 4
  store i64 %2356, ptr %1028, align 4
  %2357 = load ptr, ptr %1028, align 8
  %2358 = insertvalue { ptr, i160 } undef, ptr %2357, 0
  %2359 = load i160, ptr %1027, align 4
  %2360 = insertvalue { ptr, i160 } %2358, i160 %2359, 1
  %2361 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1030)
  %2362 = getelementptr [1 x ptr], ptr %1030, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %2362, align 8
  %2363 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %2364 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %2365 = getelementptr [1 x ptr], ptr %1031, i32 0, i32 0
  store ptr %2357, ptr %2365, align 8
  %2366 = call ptr %2364(ptr %1031, { ptr, i160 } %2360)
  call void %2366(ptr %1030, { ptr, i160 } %2360)
  %2367 = load i32, ptr %1024, align 4
  store i32 %2367, ptr %1021, align 4
  br label %2368

2368:                                             ; preds = %2354, %2353
  %.reload64 = load i32, ptr %.reg2mem63, align 4
  store i32 %.reload64, ptr %.reg2mem98, align 4
  br label %2370

2369:                                             ; preds = %2321
  store i32 0, ptr %.reg2mem98, align 4
  br label %2370

2370:                                             ; preds = %2369, %2368
  %.reload99 = load i32, ptr %.reg2mem98, align 4
  store i32 %.reload99, ptr %.reg2mem61, align 4
  br label %2371

2371:                                             ; preds = %2370
  %.reload62 = load i32, ptr %.reg2mem61, align 4
  %2372 = trunc i32 %.reload62 to i1
  br i1 %2372, label %._crit_edge9, label %2373

._crit_edge9:                                     ; preds = %2371
  br label %2321

2373:                                             ; preds = %2371
  store i32 5, ptr %1032, align 4
  %2374 = load i32, ptr %1032, align 4
  %2375 = getelementptr i32, ptr null, i32 %2374
  %2376 = ptrtoint ptr %2375 to i64
  %2377 = call ptr @malloc(i64 %2376)
  store ptr %2377, ptr %1033, align 8
  %2378 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1033, i32 0, i32 0
  %2379 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1034, i32 0, i32 0
  %2380 = load ptr, ptr %2378, align 8
  store ptr %2380, ptr %2379, align 8
  %2381 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1033, i32 0, i32 1
  %2382 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1034, i32 0, i32 1
  %2383 = load ptr, ptr %2381, align 8
  store ptr %2383, ptr %2382, align 8
  %2384 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1033, i32 0, i32 2
  %2385 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1034, i32 0, i32 2
  %2386 = load ptr, ptr %2384, align 8
  store ptr %2386, ptr %2385, align 8
  %2387 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1033, i32 0, i32 3
  %2388 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1034, i32 0, i32 3
  %2389 = load i32, ptr %2387, align 4
  store i32 %2389, ptr %2388, align 4
  %2390 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1034)
  store i32 1, ptr %1035, align 4
  store i32 0, ptr %1036, align 4
  %2391 = load ptr, ptr %1034, align 8
  %2392 = load i32, ptr %1036, align 4
  %2393 = getelementptr i32, ptr null, i32 %2392
  %2394 = ptrtoint ptr %2393 to i64
  %2395 = getelementptr i8, ptr %2391, i64 %2394
  %2396 = load i32, ptr %1035, align 4
  store i32 %2396, ptr %2395, align 4
  store i32 2, ptr %1037, align 4
  store i32 1, ptr %1038, align 4
  %2397 = load ptr, ptr %1034, align 8
  %2398 = load i32, ptr %1038, align 4
  %2399 = getelementptr i32, ptr null, i32 %2398
  %2400 = ptrtoint ptr %2399 to i64
  %2401 = getelementptr i8, ptr %2397, i64 %2400
  %2402 = load i32, ptr %1037, align 4
  store i32 %2402, ptr %2401, align 4
  store i32 3, ptr %1039, align 4
  store i32 2, ptr %1040, align 4
  %2403 = load ptr, ptr %1034, align 8
  %2404 = load i32, ptr %1040, align 4
  %2405 = getelementptr i32, ptr null, i32 %2404
  %2406 = ptrtoint ptr %2405 to i64
  %2407 = getelementptr i8, ptr %2403, i64 %2406
  %2408 = load i32, ptr %1039, align 4
  store i32 %2408, ptr %2407, align 4
  store i32 4, ptr %1041, align 4
  store i32 3, ptr %1042, align 4
  %2409 = load ptr, ptr %1034, align 8
  %2410 = load i32, ptr %1042, align 4
  %2411 = getelementptr i32, ptr null, i32 %2410
  %2412 = ptrtoint ptr %2411 to i64
  %2413 = getelementptr i8, ptr %2409, i64 %2412
  %2414 = load i32, ptr %1041, align 4
  store i32 %2414, ptr %2413, align 4
  store i32 4, ptr %1043, align 4
  store i32 5, ptr %1044, align 4
  %2415 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %2416 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1045, i32 0, i32 1
  %2417 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1045, i32 0, i32 3
  store ptr @IntArray, ptr %1045, align 8
  store ptr %2415, ptr %2416, align 8
  store i32 7, ptr %2417, align 4
  %2418 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1045)
  store i32 4, ptr %1046, align 4
  store i32 5, ptr %1047, align 4
  %2419 = getelementptr { ptr }, ptr %1034, i32 0, i32 0
  %2420 = load ptr, ptr %2419, align 8
  %2421 = insertvalue { ptr } undef, ptr %2420, 0
  %2422 = load i32, ptr %1046, align 4
  %2423 = load i32, ptr %1047, align 4
  %2424 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1045, i32 0, i32 0
  %2425 = load ptr, ptr %2424, align 8
  %2426 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2425, 0
  %2427 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1045, i32 0, i32 1
  %2428 = load ptr, ptr %2427, align 8
  %2429 = insertvalue { ptr, ptr, ptr, i32 } %2426, ptr %2428, 1
  %2430 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1045, i32 0, i32 2
  %2431 = load ptr, ptr %2430, align 8
  %2432 = insertvalue { ptr, ptr, ptr, i32 } %2429, ptr %2431, 2
  %2433 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1045, i32 0, i32 3
  %2434 = load i32, ptr %2433, align 4
  %2435 = insertvalue { ptr, ptr, ptr, i32 } %2432, i32 %2434, 3
  %2436 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1048)
  %2437 = getelementptr [3 x ptr], ptr %1048, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %2437, align 8
  %2438 = getelementptr [3 x ptr], ptr %1048, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %2438, align 8
  %2439 = getelementptr [3 x ptr], ptr %1048, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %2439, align 8
  %2440 = call ptr @llvm.invariant.start.p0(i64 616, ptr %2425)
  %2441 = getelementptr ptr, ptr %2425, i32 %2434
  %2442 = getelementptr ptr, ptr %2441, i32 5
  %2443 = load ptr, ptr %2442, align 8
  %2444 = getelementptr [3 x ptr], ptr %1049, i32 0, i32 0
  store ptr @buffer_typ, ptr %2444, align 8
  %2445 = getelementptr [3 x ptr], ptr %1049, i32 0, i32 1
  store ptr @i32_typ, ptr %2445, align 8
  %2446 = getelementptr [3 x ptr], ptr %1049, i32 0, i32 2
  store ptr @i32_typ, ptr %2446, align 8
  %2447 = call ptr %2443({ ptr, ptr, ptr, i32 } %2435, ptr %1049, { ptr } %2421, i32 %2422, i32 %2423)
  call void %2447({ ptr, ptr, ptr, i32 } %2435, { ptr, ptr, ptr, i32 } %2435, ptr %1048, { ptr } %2421, i32 %2422, i32 %2423)
  %2448 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1045, i32 0, i32 0
  %2449 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1050, i32 0, i32 0
  %2450 = load ptr, ptr %2448, align 8
  store ptr %2450, ptr %2449, align 8
  %2451 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1045, i32 0, i32 1
  %2452 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1050, i32 0, i32 1
  %2453 = load ptr, ptr %2451, align 8
  store ptr %2453, ptr %2452, align 8
  %2454 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1045, i32 0, i32 2
  %2455 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1050, i32 0, i32 2
  %2456 = load ptr, ptr %2454, align 8
  store ptr %2456, ptr %2455, align 8
  %2457 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1045, i32 0, i32 3
  %2458 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1050, i32 0, i32 3
  %2459 = load i32, ptr %2457, align 4
  store i32 %2459, ptr %2458, align 4
  call void @set_offset(ptr %1050, ptr @IntArray)
  %2460 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1050)
  %2461 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1050, i32 0, i32 0
  %2462 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1051, i32 0, i32 0
  %2463 = load ptr, ptr %2461, align 8
  store ptr %2463, ptr %2462, align 8
  %2464 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1050, i32 0, i32 1
  %2465 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1051, i32 0, i32 1
  %2466 = load ptr, ptr %2464, align 8
  store ptr %2466, ptr %2465, align 8
  %2467 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1050, i32 0, i32 2
  %2468 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1051, i32 0, i32 2
  %2469 = load ptr, ptr %2467, align 8
  store ptr %2469, ptr %2468, align 8
  %2470 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1050, i32 0, i32 3
  %2471 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1051, i32 0, i32 3
  %2472 = load i32, ptr %2470, align 4
  store i32 %2472, ptr %2471, align 4
  %2473 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1051)
  store i32 7, ptr %1052, align 4
  %2474 = load i32, ptr %1052, align 4
  %2475 = getelementptr i32, ptr null, i32 %2474
  %2476 = ptrtoint ptr %2475 to i64
  %2477 = call ptr @malloc(i64 %2476)
  store ptr %2477, ptr %1053, align 8
  %2478 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1053, i32 0, i32 0
  %2479 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1054, i32 0, i32 0
  %2480 = load ptr, ptr %2478, align 8
  store ptr %2480, ptr %2479, align 8
  %2481 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1053, i32 0, i32 1
  %2482 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1054, i32 0, i32 1
  %2483 = load ptr, ptr %2481, align 8
  store ptr %2483, ptr %2482, align 8
  %2484 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1053, i32 0, i32 2
  %2485 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1054, i32 0, i32 2
  %2486 = load ptr, ptr %2484, align 8
  store ptr %2486, ptr %2485, align 8
  %2487 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1053, i32 0, i32 3
  %2488 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1054, i32 0, i32 3
  %2489 = load i32, ptr %2487, align 4
  store i32 %2489, ptr %2488, align 4
  %2490 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1054)
  store i32 5, ptr %1055, align 4
  store i32 0, ptr %1056, align 4
  %2491 = load ptr, ptr %1054, align 8
  %2492 = load i32, ptr %1056, align 4
  %2493 = getelementptr i32, ptr null, i32 %2492
  %2494 = ptrtoint ptr %2493 to i64
  %2495 = getelementptr i8, ptr %2491, i64 %2494
  %2496 = load i32, ptr %1055, align 4
  store i32 %2496, ptr %2495, align 4
  store i32 6, ptr %1057, align 4
  store i32 1, ptr %1058, align 4
  %2497 = load ptr, ptr %1054, align 8
  %2498 = load i32, ptr %1058, align 4
  %2499 = getelementptr i32, ptr null, i32 %2498
  %2500 = ptrtoint ptr %2499 to i64
  %2501 = getelementptr i8, ptr %2497, i64 %2500
  %2502 = load i32, ptr %1057, align 4
  store i32 %2502, ptr %2501, align 4
  store i32 7, ptr %1059, align 4
  store i32 2, ptr %1060, align 4
  %2503 = load ptr, ptr %1054, align 8
  %2504 = load i32, ptr %1060, align 4
  %2505 = getelementptr i32, ptr null, i32 %2504
  %2506 = ptrtoint ptr %2505 to i64
  %2507 = getelementptr i8, ptr %2503, i64 %2506
  %2508 = load i32, ptr %1059, align 4
  store i32 %2508, ptr %2507, align 4
  store i32 8, ptr %1061, align 4
  store i32 3, ptr %1062, align 4
  %2509 = load ptr, ptr %1054, align 8
  %2510 = load i32, ptr %1062, align 4
  %2511 = getelementptr i32, ptr null, i32 %2510
  %2512 = ptrtoint ptr %2511 to i64
  %2513 = getelementptr i8, ptr %2509, i64 %2512
  %2514 = load i32, ptr %1061, align 4
  store i32 %2514, ptr %2513, align 4
  store i32 9, ptr %1063, align 4
  store i32 4, ptr %1064, align 4
  %2515 = load ptr, ptr %1054, align 8
  %2516 = load i32, ptr %1064, align 4
  %2517 = getelementptr i32, ptr null, i32 %2516
  %2518 = ptrtoint ptr %2517 to i64
  %2519 = getelementptr i8, ptr %2515, i64 %2518
  %2520 = load i32, ptr %1063, align 4
  store i32 %2520, ptr %2519, align 4
  store i32 10, ptr %1065, align 4
  store i32 5, ptr %1066, align 4
  %2521 = load ptr, ptr %1054, align 8
  %2522 = load i32, ptr %1066, align 4
  %2523 = getelementptr i32, ptr null, i32 %2522
  %2524 = ptrtoint ptr %2523 to i64
  %2525 = getelementptr i8, ptr %2521, i64 %2524
  %2526 = load i32, ptr %1065, align 4
  store i32 %2526, ptr %2525, align 4
  store i32 6, ptr %1067, align 4
  store i32 7, ptr %1068, align 4
  %2527 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %2528 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1069, i32 0, i32 1
  %2529 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1069, i32 0, i32 3
  store ptr @IntArray, ptr %1069, align 8
  store ptr %2527, ptr %2528, align 8
  store i32 7, ptr %2529, align 4
  %2530 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1069)
  store i32 6, ptr %1070, align 4
  store i32 7, ptr %1071, align 4
  %2531 = getelementptr { ptr }, ptr %1054, i32 0, i32 0
  %2532 = load ptr, ptr %2531, align 8
  %2533 = insertvalue { ptr } undef, ptr %2532, 0
  %2534 = load i32, ptr %1070, align 4
  %2535 = load i32, ptr %1071, align 4
  %2536 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1069, i32 0, i32 0
  %2537 = load ptr, ptr %2536, align 8
  %2538 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2537, 0
  %2539 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1069, i32 0, i32 1
  %2540 = load ptr, ptr %2539, align 8
  %2541 = insertvalue { ptr, ptr, ptr, i32 } %2538, ptr %2540, 1
  %2542 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1069, i32 0, i32 2
  %2543 = load ptr, ptr %2542, align 8
  %2544 = insertvalue { ptr, ptr, ptr, i32 } %2541, ptr %2543, 2
  %2545 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1069, i32 0, i32 3
  %2546 = load i32, ptr %2545, align 4
  %2547 = insertvalue { ptr, ptr, ptr, i32 } %2544, i32 %2546, 3
  %2548 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1072)
  %2549 = getelementptr [3 x ptr], ptr %1072, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %2549, align 8
  %2550 = getelementptr [3 x ptr], ptr %1072, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %2550, align 8
  %2551 = getelementptr [3 x ptr], ptr %1072, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %2551, align 8
  %2552 = call ptr @llvm.invariant.start.p0(i64 616, ptr %2537)
  %2553 = getelementptr ptr, ptr %2537, i32 %2546
  %2554 = getelementptr ptr, ptr %2553, i32 5
  %2555 = load ptr, ptr %2554, align 8
  %2556 = getelementptr [3 x ptr], ptr %1073, i32 0, i32 0
  store ptr @buffer_typ, ptr %2556, align 8
  %2557 = getelementptr [3 x ptr], ptr %1073, i32 0, i32 1
  store ptr @i32_typ, ptr %2557, align 8
  %2558 = getelementptr [3 x ptr], ptr %1073, i32 0, i32 2
  store ptr @i32_typ, ptr %2558, align 8
  %2559 = call ptr %2555({ ptr, ptr, ptr, i32 } %2547, ptr %1073, { ptr } %2533, i32 %2534, i32 %2535)
  call void %2559({ ptr, ptr, ptr, i32 } %2547, { ptr, ptr, ptr, i32 } %2547, ptr %1072, { ptr } %2533, i32 %2534, i32 %2535)
  %2560 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1069, i32 0, i32 0
  %2561 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1074, i32 0, i32 0
  %2562 = load ptr, ptr %2560, align 8
  store ptr %2562, ptr %2561, align 8
  %2563 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1069, i32 0, i32 1
  %2564 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1074, i32 0, i32 1
  %2565 = load ptr, ptr %2563, align 8
  store ptr %2565, ptr %2564, align 8
  %2566 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1069, i32 0, i32 2
  %2567 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1074, i32 0, i32 2
  %2568 = load ptr, ptr %2566, align 8
  store ptr %2568, ptr %2567, align 8
  %2569 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1069, i32 0, i32 3
  %2570 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1074, i32 0, i32 3
  %2571 = load i32, ptr %2569, align 4
  store i32 %2571, ptr %2570, align 4
  call void @set_offset(ptr %1074, ptr @IntArray)
  %2572 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1074)
  %2573 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1074, i32 0, i32 0
  %2574 = load ptr, ptr %2573, align 8
  %2575 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2574, 0
  %2576 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1074, i32 0, i32 1
  %2577 = load ptr, ptr %2576, align 8
  %2578 = insertvalue { ptr, ptr, ptr, i32 } %2575, ptr %2577, 1
  %2579 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1074, i32 0, i32 2
  %2580 = load ptr, ptr %2579, align 8
  %2581 = insertvalue { ptr, ptr, ptr, i32 } %2578, ptr %2580, 2
  %2582 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1074, i32 0, i32 3
  %2583 = load i32, ptr %2582, align 4
  %2584 = insertvalue { ptr, ptr, ptr, i32 } %2581, i32 %2583, 3
  %2585 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1051, i32 0, i32 0
  %2586 = load ptr, ptr %2585, align 8
  %2587 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2586, 0
  %2588 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1051, i32 0, i32 1
  %2589 = load ptr, ptr %2588, align 8
  %2590 = insertvalue { ptr, ptr, ptr, i32 } %2587, ptr %2589, 1
  %2591 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1051, i32 0, i32 2
  %2592 = load ptr, ptr %2591, align 8
  %2593 = insertvalue { ptr, ptr, ptr, i32 } %2590, ptr %2592, 2
  %2594 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1051, i32 0, i32 3
  %2595 = load i32, ptr %2594, align 4
  %2596 = insertvalue { ptr, ptr, ptr, i32 } %2593, i32 %2595, 3
  %2597 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1075)
  %2598 = getelementptr [1 x ptr], ptr %1075, i32 0, i32 0
  store ptr @_parameterization_IntArray, ptr %2598, align 8
  %2599 = call ptr @llvm.invariant.start.p0(i64 616, ptr %2586)
  %2600 = getelementptr ptr, ptr %2586, i32 %2595
  %2601 = getelementptr ptr, ptr %2600, i32 10
  %2602 = load ptr, ptr %2601, align 8
  %2603 = getelementptr [1 x ptr], ptr %1076, i32 0, i32 0
  store ptr %2574, ptr %2603, align 8
  %2604 = call ptr %2602({ ptr, ptr, ptr, i32 } %2596, ptr %1076, { ptr, ptr, ptr, i32 } %2584)
  %2605 = call { ptr, ptr, ptr, i32 } %2604({ ptr, ptr, ptr, i32 } %2596, { ptr, ptr, ptr, i32 } %2596, ptr %1075, { ptr, ptr, ptr, i32 } %2584)
  store { ptr, ptr, ptr, i32 } %2605, ptr %1077, align 8
  %2606 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1077)
  %2607 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1077, i32 0, i32 0
  %2608 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1078, i32 0, i32 0
  %2609 = load ptr, ptr %2607, align 8
  store ptr %2609, ptr %2608, align 8
  %2610 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1077, i32 0, i32 1
  %2611 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1078, i32 0, i32 1
  %2612 = load ptr, ptr %2610, align 8
  store ptr %2612, ptr %2611, align 8
  %2613 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1077, i32 0, i32 2
  %2614 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1078, i32 0, i32 2
  %2615 = load ptr, ptr %2613, align 8
  store ptr %2615, ptr %2614, align 8
  %2616 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1077, i32 0, i32 3
  %2617 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1078, i32 0, i32 3
  %2618 = load i32, ptr %2616, align 4
  store i32 %2618, ptr %2617, align 4
  call void @set_offset(ptr %1078, ptr @IntArray)
  %2619 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1078)
  store i32 7, ptr %1079, align 4
  %2620 = load i32, ptr %1079, align 4
  %2621 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1051, i32 0, i32 0
  %2622 = load ptr, ptr %2621, align 8
  %2623 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2622, 0
  %2624 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1051, i32 0, i32 1
  %2625 = load ptr, ptr %2624, align 8
  %2626 = insertvalue { ptr, ptr, ptr, i32 } %2623, ptr %2625, 1
  %2627 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1051, i32 0, i32 2
  %2628 = load ptr, ptr %2627, align 8
  %2629 = insertvalue { ptr, ptr, ptr, i32 } %2626, ptr %2628, 2
  %2630 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1051, i32 0, i32 3
  %2631 = load i32, ptr %2630, align 4
  %2632 = insertvalue { ptr, ptr, ptr, i32 } %2629, i32 %2631, 3
  %2633 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1080)
  %2634 = getelementptr [1 x ptr], ptr %1080, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %2634, align 8
  %2635 = call ptr @llvm.invariant.start.p0(i64 616, ptr %2622)
  %2636 = getelementptr ptr, ptr %2622, i32 %2631
  %2637 = getelementptr ptr, ptr %2636, i32 11
  %2638 = load ptr, ptr %2637, align 8
  %2639 = getelementptr [1 x ptr], ptr %1081, i32 0, i32 0
  store ptr @i32_typ, ptr %2639, align 8
  %2640 = call ptr %2638({ ptr, ptr, ptr, i32 } %2632, ptr %1081, i32 %2620)
  %2641 = call i32 %2640({ ptr, ptr, ptr, i32 } %2632, { ptr, ptr, ptr, i32 } %2632, ptr %1080, i32 %2620)
  store i32 %2641, ptr %1082, align 4
  %2642 = load i32, ptr %1082, align 4
  store i32 %2642, ptr %1083, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %1085, align 4
  %2643 = load i64, ptr %1085, align 4
  store i64 %2643, ptr %1084, align 4
  %2644 = load ptr, ptr %1084, align 8
  %2645 = insertvalue { ptr, i160 } undef, ptr %2644, 0
  %2646 = load i160, ptr %1083, align 4
  %2647 = insertvalue { ptr, i160 } %2645, i160 %2646, 1
  %2648 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1086)
  %2649 = getelementptr [1 x ptr], ptr %1086, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %2649, align 8
  %2650 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %2651 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %2652 = getelementptr [1 x ptr], ptr %1087, i32 0, i32 0
  store ptr %2644, ptr %2652, align 8
  %2653 = call ptr %2651(ptr %1087, { ptr, i160 } %2647)
  call void %2653(ptr %1086, { ptr, i160 } %2647)
  store i32 1, ptr %1088, align 4
  %2654 = load i32, ptr %1088, align 4
  %2655 = getelementptr i32, ptr null, i32 %2654
  %2656 = ptrtoint ptr %2655 to i64
  %2657 = call ptr @malloc(i64 %2656)
  store ptr %2657, ptr %1089, align 8
  %2658 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1089, i32 0, i32 0
  %2659 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1090, i32 0, i32 0
  %2660 = load ptr, ptr %2658, align 8
  store ptr %2660, ptr %2659, align 8
  %2661 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1089, i32 0, i32 1
  %2662 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1090, i32 0, i32 1
  %2663 = load ptr, ptr %2661, align 8
  store ptr %2663, ptr %2662, align 8
  %2664 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1089, i32 0, i32 2
  %2665 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1090, i32 0, i32 2
  %2666 = load ptr, ptr %2664, align 8
  store ptr %2666, ptr %2665, align 8
  %2667 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1089, i32 0, i32 3
  %2668 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1090, i32 0, i32 3
  %2669 = load i32, ptr %2667, align 4
  store i32 %2669, ptr %2668, align 4
  %2670 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1090)
  store i32 0, ptr %1091, align 4
  store i32 1, ptr %1092, align 4
  %2671 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %2672 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1093, i32 0, i32 1
  %2673 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1093, i32 0, i32 3
  store ptr @IntArray, ptr %1093, align 8
  store ptr %2671, ptr %2672, align 8
  store i32 7, ptr %2673, align 4
  %2674 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1093)
  store i32 0, ptr %1094, align 4
  store i32 1, ptr %1095, align 4
  %2675 = getelementptr { ptr }, ptr %1090, i32 0, i32 0
  %2676 = load ptr, ptr %2675, align 8
  %2677 = insertvalue { ptr } undef, ptr %2676, 0
  %2678 = load i32, ptr %1094, align 4
  %2679 = load i32, ptr %1095, align 4
  %2680 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1093, i32 0, i32 0
  %2681 = load ptr, ptr %2680, align 8
  %2682 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2681, 0
  %2683 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1093, i32 0, i32 1
  %2684 = load ptr, ptr %2683, align 8
  %2685 = insertvalue { ptr, ptr, ptr, i32 } %2682, ptr %2684, 1
  %2686 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1093, i32 0, i32 2
  %2687 = load ptr, ptr %2686, align 8
  %2688 = insertvalue { ptr, ptr, ptr, i32 } %2685, ptr %2687, 2
  %2689 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1093, i32 0, i32 3
  %2690 = load i32, ptr %2689, align 4
  %2691 = insertvalue { ptr, ptr, ptr, i32 } %2688, i32 %2690, 3
  %2692 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1096)
  %2693 = getelementptr [3 x ptr], ptr %1096, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %2693, align 8
  %2694 = getelementptr [3 x ptr], ptr %1096, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %2694, align 8
  %2695 = getelementptr [3 x ptr], ptr %1096, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %2695, align 8
  %2696 = call ptr @llvm.invariant.start.p0(i64 616, ptr %2681)
  %2697 = getelementptr ptr, ptr %2681, i32 %2690
  %2698 = getelementptr ptr, ptr %2697, i32 5
  %2699 = load ptr, ptr %2698, align 8
  %2700 = getelementptr [3 x ptr], ptr %1097, i32 0, i32 0
  store ptr @buffer_typ, ptr %2700, align 8
  %2701 = getelementptr [3 x ptr], ptr %1097, i32 0, i32 1
  store ptr @i32_typ, ptr %2701, align 8
  %2702 = getelementptr [3 x ptr], ptr %1097, i32 0, i32 2
  store ptr @i32_typ, ptr %2702, align 8
  %2703 = call ptr %2699({ ptr, ptr, ptr, i32 } %2691, ptr %1097, { ptr } %2677, i32 %2678, i32 %2679)
  call void %2703({ ptr, ptr, ptr, i32 } %2691, { ptr, ptr, ptr, i32 } %2691, ptr %1096, { ptr } %2677, i32 %2678, i32 %2679)
  %2704 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1093, i32 0, i32 0
  %2705 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1098, i32 0, i32 0
  %2706 = load ptr, ptr %2704, align 8
  store ptr %2706, ptr %2705, align 8
  %2707 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1093, i32 0, i32 1
  %2708 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1098, i32 0, i32 1
  %2709 = load ptr, ptr %2707, align 8
  store ptr %2709, ptr %2708, align 8
  %2710 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1093, i32 0, i32 2
  %2711 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1098, i32 0, i32 2
  %2712 = load ptr, ptr %2710, align 8
  store ptr %2712, ptr %2711, align 8
  %2713 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1093, i32 0, i32 3
  %2714 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1098, i32 0, i32 3
  %2715 = load i32, ptr %2713, align 4
  store i32 %2715, ptr %2714, align 4
  call void @set_offset(ptr %1098, ptr @IntArray)
  %2716 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1098)
  %2717 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1098, i32 0, i32 0
  %2718 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1099, i32 0, i32 0
  %2719 = load ptr, ptr %2717, align 8
  store ptr %2719, ptr %2718, align 8
  %2720 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1098, i32 0, i32 1
  %2721 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1099, i32 0, i32 1
  %2722 = load ptr, ptr %2720, align 8
  store ptr %2722, ptr %2721, align 8
  %2723 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1098, i32 0, i32 2
  %2724 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1099, i32 0, i32 2
  %2725 = load ptr, ptr %2723, align 8
  store ptr %2725, ptr %2724, align 8
  %2726 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1098, i32 0, i32 3
  %2727 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1099, i32 0, i32 3
  %2728 = load i32, ptr %2726, align 4
  store i32 %2728, ptr %2727, align 4
  %2729 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1099)
  store i32 5, ptr %1100, align 4
  %2730 = load i32, ptr %1100, align 4
  %2731 = getelementptr i32, ptr null, i32 %2730
  %2732 = ptrtoint ptr %2731 to i64
  %2733 = call ptr @malloc(i64 %2732)
  store ptr %2733, ptr %1101, align 8
  %2734 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1101, i32 0, i32 0
  %2735 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1102, i32 0, i32 0
  %2736 = load ptr, ptr %2734, align 8
  store ptr %2736, ptr %2735, align 8
  %2737 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1101, i32 0, i32 1
  %2738 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1102, i32 0, i32 1
  %2739 = load ptr, ptr %2737, align 8
  store ptr %2739, ptr %2738, align 8
  %2740 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1101, i32 0, i32 2
  %2741 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1102, i32 0, i32 2
  %2742 = load ptr, ptr %2740, align 8
  store ptr %2742, ptr %2741, align 8
  %2743 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1101, i32 0, i32 3
  %2744 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1102, i32 0, i32 3
  %2745 = load i32, ptr %2743, align 4
  store i32 %2745, ptr %2744, align 4
  %2746 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1102)
  store i32 8, ptr %1103, align 4
  store i32 0, ptr %1104, align 4
  %2747 = load ptr, ptr %1102, align 8
  %2748 = load i32, ptr %1104, align 4
  %2749 = getelementptr i32, ptr null, i32 %2748
  %2750 = ptrtoint ptr %2749 to i64
  %2751 = getelementptr i8, ptr %2747, i64 %2750
  %2752 = load i32, ptr %1103, align 4
  store i32 %2752, ptr %2751, align 4
  store i32 7, ptr %1105, align 4
  store i32 1, ptr %1106, align 4
  %2753 = load ptr, ptr %1102, align 8
  %2754 = load i32, ptr %1106, align 4
  %2755 = getelementptr i32, ptr null, i32 %2754
  %2756 = ptrtoint ptr %2755 to i64
  %2757 = getelementptr i8, ptr %2753, i64 %2756
  %2758 = load i32, ptr %1105, align 4
  store i32 %2758, ptr %2757, align 4
  store i32 6, ptr %1107, align 4
  store i32 2, ptr %1108, align 4
  %2759 = load ptr, ptr %1102, align 8
  %2760 = load i32, ptr %1108, align 4
  %2761 = getelementptr i32, ptr null, i32 %2760
  %2762 = ptrtoint ptr %2761 to i64
  %2763 = getelementptr i8, ptr %2759, i64 %2762
  %2764 = load i32, ptr %1107, align 4
  store i32 %2764, ptr %2763, align 4
  store i32 5, ptr %1109, align 4
  store i32 3, ptr %1110, align 4
  %2765 = load ptr, ptr %1102, align 8
  %2766 = load i32, ptr %1110, align 4
  %2767 = getelementptr i32, ptr null, i32 %2766
  %2768 = ptrtoint ptr %2767 to i64
  %2769 = getelementptr i8, ptr %2765, i64 %2768
  %2770 = load i32, ptr %1109, align 4
  store i32 %2770, ptr %2769, align 4
  store i32 4, ptr %1111, align 4
  store i32 5, ptr %1112, align 4
  %2771 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %2772 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1113, i32 0, i32 1
  %2773 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1113, i32 0, i32 3
  store ptr @IntArray, ptr %1113, align 8
  store ptr %2771, ptr %2772, align 8
  store i32 7, ptr %2773, align 4
  %2774 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1113)
  store i32 4, ptr %1114, align 4
  store i32 5, ptr %1115, align 4
  %2775 = getelementptr { ptr }, ptr %1102, i32 0, i32 0
  %2776 = load ptr, ptr %2775, align 8
  %2777 = insertvalue { ptr } undef, ptr %2776, 0
  %2778 = load i32, ptr %1114, align 4
  %2779 = load i32, ptr %1115, align 4
  %2780 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1113, i32 0, i32 0
  %2781 = load ptr, ptr %2780, align 8
  %2782 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2781, 0
  %2783 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1113, i32 0, i32 1
  %2784 = load ptr, ptr %2783, align 8
  %2785 = insertvalue { ptr, ptr, ptr, i32 } %2782, ptr %2784, 1
  %2786 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1113, i32 0, i32 2
  %2787 = load ptr, ptr %2786, align 8
  %2788 = insertvalue { ptr, ptr, ptr, i32 } %2785, ptr %2787, 2
  %2789 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1113, i32 0, i32 3
  %2790 = load i32, ptr %2789, align 4
  %2791 = insertvalue { ptr, ptr, ptr, i32 } %2788, i32 %2790, 3
  %2792 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1116)
  %2793 = getelementptr [3 x ptr], ptr %1116, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %2793, align 8
  %2794 = getelementptr [3 x ptr], ptr %1116, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %2794, align 8
  %2795 = getelementptr [3 x ptr], ptr %1116, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %2795, align 8
  %2796 = call ptr @llvm.invariant.start.p0(i64 616, ptr %2781)
  %2797 = getelementptr ptr, ptr %2781, i32 %2790
  %2798 = getelementptr ptr, ptr %2797, i32 5
  %2799 = load ptr, ptr %2798, align 8
  %2800 = getelementptr [3 x ptr], ptr %1117, i32 0, i32 0
  store ptr @buffer_typ, ptr %2800, align 8
  %2801 = getelementptr [3 x ptr], ptr %1117, i32 0, i32 1
  store ptr @i32_typ, ptr %2801, align 8
  %2802 = getelementptr [3 x ptr], ptr %1117, i32 0, i32 2
  store ptr @i32_typ, ptr %2802, align 8
  %2803 = call ptr %2799({ ptr, ptr, ptr, i32 } %2791, ptr %1117, { ptr } %2777, i32 %2778, i32 %2779)
  call void %2803({ ptr, ptr, ptr, i32 } %2791, { ptr, ptr, ptr, i32 } %2791, ptr %1116, { ptr } %2777, i32 %2778, i32 %2779)
  %2804 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1113, i32 0, i32 0
  %2805 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1118, i32 0, i32 0
  %2806 = load ptr, ptr %2804, align 8
  store ptr %2806, ptr %2805, align 8
  %2807 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1113, i32 0, i32 1
  %2808 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1118, i32 0, i32 1
  %2809 = load ptr, ptr %2807, align 8
  store ptr %2809, ptr %2808, align 8
  %2810 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1113, i32 0, i32 2
  %2811 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1118, i32 0, i32 2
  %2812 = load ptr, ptr %2810, align 8
  store ptr %2812, ptr %2811, align 8
  %2813 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1113, i32 0, i32 3
  %2814 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1118, i32 0, i32 3
  %2815 = load i32, ptr %2813, align 4
  store i32 %2815, ptr %2814, align 4
  call void @set_offset(ptr %1118, ptr @IntArray)
  %2816 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1118)
  %2817 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1118, i32 0, i32 0
  %2818 = load ptr, ptr %2817, align 8
  %2819 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2818, 0
  %2820 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1118, i32 0, i32 1
  %2821 = load ptr, ptr %2820, align 8
  %2822 = insertvalue { ptr, ptr, ptr, i32 } %2819, ptr %2821, 1
  %2823 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1118, i32 0, i32 2
  %2824 = load ptr, ptr %2823, align 8
  %2825 = insertvalue { ptr, ptr, ptr, i32 } %2822, ptr %2824, 2
  %2826 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1118, i32 0, i32 3
  %2827 = load i32, ptr %2826, align 4
  %2828 = insertvalue { ptr, ptr, ptr, i32 } %2825, i32 %2827, 3
  %2829 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1099, i32 0, i32 0
  %2830 = load ptr, ptr %2829, align 8
  %2831 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2830, 0
  %2832 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1099, i32 0, i32 1
  %2833 = load ptr, ptr %2832, align 8
  %2834 = insertvalue { ptr, ptr, ptr, i32 } %2831, ptr %2833, 1
  %2835 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1099, i32 0, i32 2
  %2836 = load ptr, ptr %2835, align 8
  %2837 = insertvalue { ptr, ptr, ptr, i32 } %2834, ptr %2836, 2
  %2838 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1099, i32 0, i32 3
  %2839 = load i32, ptr %2838, align 4
  %2840 = insertvalue { ptr, ptr, ptr, i32 } %2837, i32 %2839, 3
  %2841 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1119)
  %2842 = getelementptr [1 x ptr], ptr %1119, i32 0, i32 0
  store ptr @_parameterization_IntArray, ptr %2842, align 8
  %2843 = call ptr @llvm.invariant.start.p0(i64 616, ptr %2830)
  %2844 = getelementptr ptr, ptr %2830, i32 %2839
  %2845 = getelementptr ptr, ptr %2844, i32 10
  %2846 = load ptr, ptr %2845, align 8
  %2847 = getelementptr [1 x ptr], ptr %1120, i32 0, i32 0
  store ptr %2818, ptr %2847, align 8
  %2848 = call ptr %2846({ ptr, ptr, ptr, i32 } %2840, ptr %1120, { ptr, ptr, ptr, i32 } %2828)
  %2849 = call { ptr, ptr, ptr, i32 } %2848({ ptr, ptr, ptr, i32 } %2840, { ptr, ptr, ptr, i32 } %2840, ptr %1119, { ptr, ptr, ptr, i32 } %2828)
  store { ptr, ptr, ptr, i32 } %2849, ptr %1121, align 8
  %2850 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1121)
  %2851 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1121, i32 0, i32 0
  %2852 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1122, i32 0, i32 0
  %2853 = load ptr, ptr %2851, align 8
  store ptr %2853, ptr %2852, align 8
  %2854 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1121, i32 0, i32 1
  %2855 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1122, i32 0, i32 1
  %2856 = load ptr, ptr %2854, align 8
  store ptr %2856, ptr %2855, align 8
  %2857 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1121, i32 0, i32 2
  %2858 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1122, i32 0, i32 2
  %2859 = load ptr, ptr %2857, align 8
  store ptr %2859, ptr %2858, align 8
  %2860 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1121, i32 0, i32 3
  %2861 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1122, i32 0, i32 3
  %2862 = load i32, ptr %2860, align 4
  store i32 %2862, ptr %2861, align 4
  call void @set_offset(ptr %1122, ptr @IntArray)
  %2863 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1122)
  store i32 3, ptr %1123, align 4
  %2864 = load i32, ptr %1123, align 4
  %2865 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1099, i32 0, i32 0
  %2866 = load ptr, ptr %2865, align 8
  %2867 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2866, 0
  %2868 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1099, i32 0, i32 1
  %2869 = load ptr, ptr %2868, align 8
  %2870 = insertvalue { ptr, ptr, ptr, i32 } %2867, ptr %2869, 1
  %2871 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1099, i32 0, i32 2
  %2872 = load ptr, ptr %2871, align 8
  %2873 = insertvalue { ptr, ptr, ptr, i32 } %2870, ptr %2872, 2
  %2874 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1099, i32 0, i32 3
  %2875 = load i32, ptr %2874, align 4
  %2876 = insertvalue { ptr, ptr, ptr, i32 } %2873, i32 %2875, 3
  %2877 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1124)
  %2878 = getelementptr [1 x ptr], ptr %1124, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %2878, align 8
  %2879 = call ptr @llvm.invariant.start.p0(i64 616, ptr %2866)
  %2880 = getelementptr ptr, ptr %2866, i32 %2875
  %2881 = getelementptr ptr, ptr %2880, i32 11
  %2882 = load ptr, ptr %2881, align 8
  %2883 = getelementptr [1 x ptr], ptr %1125, i32 0, i32 0
  store ptr @i32_typ, ptr %2883, align 8
  %2884 = call ptr %2882({ ptr, ptr, ptr, i32 } %2876, ptr %1125, i32 %2864)
  %2885 = call i32 %2884({ ptr, ptr, ptr, i32 } %2876, { ptr, ptr, ptr, i32 } %2876, ptr %1124, i32 %2864)
  store i32 %2885, ptr %1126, align 4
  %2886 = load i32, ptr %1126, align 4
  store i32 %2886, ptr %1127, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %1129, align 4
  %2887 = load i64, ptr %1129, align 4
  store i64 %2887, ptr %1128, align 4
  %2888 = load ptr, ptr %1128, align 8
  %2889 = insertvalue { ptr, i160 } undef, ptr %2888, 0
  %2890 = load i160, ptr %1127, align 4
  %2891 = insertvalue { ptr, i160 } %2889, i160 %2890, 1
  %2892 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1130)
  %2893 = getelementptr [1 x ptr], ptr %1130, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %2893, align 8
  %2894 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %2895 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %2896 = getelementptr [1 x ptr], ptr %1131, i32 0, i32 0
  store ptr %2888, ptr %2896, align 8
  %2897 = call ptr %2895(ptr %1131, { ptr, i160 } %2891)
  call void %2897(ptr %1130, { ptr, i160 } %2891)
  call void @grabo()
  %2898 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1051, i32 0, i32 0
  store i64 ptrtoint (ptr @IntArray to i64), ptr %1132, align 4
  %2899 = load ptr, ptr %2898, align 8
  %2900 = load ptr, ptr %1132, align 8
  %2901 = ptrtoint ptr %2900 to i64
  %2902 = getelementptr { [3 x i64], [3 x ptr] }, ptr %2899, i32 0, i32 0, i32 1
  %2903 = getelementptr { [3 x i64], [3 x ptr] }, ptr %2899, i32 0, i32 0, i32 2
  %2904 = getelementptr { [3 x i64], [3 x ptr] }, ptr %2899, i32 0, i32 1, i32 0
  %2905 = getelementptr { [3 x i64], [3 x ptr] }, ptr %2899, i32 0, i32 1, i32 1
  %2906 = load i64, ptr %2902, align 4
  %2907 = load i64, ptr %2903, align 4
  %2908 = load ptr, ptr %2904, align 8
  %2909 = load ptr, ptr %2905, align 8
  %2910 = load i64, ptr %2900, align 4
  %2911 = call i1 @subtype_test_wrapper(ptr %2908, i64 %2907, i64 %2906, i64 %2910, i64 %2901, ptr %2909)
  store i1 %2911, ptr %1133, align 1
  store i32 0, ptr %1134, align 4
  %2912 = load i32, ptr %1134, align 4
  %2913 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1051, i32 0, i32 0
  %2914 = load ptr, ptr %2913, align 8
  %2915 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2914, 0
  %2916 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1051, i32 0, i32 1
  %2917 = load ptr, ptr %2916, align 8
  %2918 = insertvalue { ptr, ptr, ptr, i32 } %2915, ptr %2917, 1
  %2919 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1051, i32 0, i32 2
  %2920 = load ptr, ptr %2919, align 8
  %2921 = insertvalue { ptr, ptr, ptr, i32 } %2918, ptr %2920, 2
  %2922 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1051, i32 0, i32 3
  %2923 = load i32, ptr %2922, align 4
  %2924 = insertvalue { ptr, ptr, ptr, i32 } %2921, i32 %2923, 3
  %2925 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1135)
  %2926 = getelementptr [1 x ptr], ptr %1135, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %2926, align 8
  %2927 = call ptr @llvm.invariant.start.p0(i64 616, ptr %2914)
  %2928 = getelementptr ptr, ptr %2914, i32 %2923
  %2929 = getelementptr ptr, ptr %2928, i32 11
  %2930 = load ptr, ptr %2929, align 8
  %2931 = getelementptr [1 x ptr], ptr %1136, i32 0, i32 0
  store ptr @i32_typ, ptr %2931, align 8
  %2932 = call ptr %2930({ ptr, ptr, ptr, i32 } %2924, ptr %1136, i32 %2912)
  %2933 = call i32 %2932({ ptr, ptr, ptr, i32 } %2924, { ptr, ptr, ptr, i32 } %2924, ptr %1135, i32 %2912)
  store i32 %2933, ptr %1137, align 4
  store i32 5, ptr %1138, align 4
  %2934 = load i32, ptr %1137, align 4
  %2935 = load i32, ptr %1138, align 4
  %2936 = icmp eq i32 %2934, %2935
  store i1 %2936, ptr %1139, align 1
  %2937 = load i1, ptr %1133, align 1
  %2938 = load i1, ptr %1139, align 1
  %2939 = and i1 %2937, %2938
  store i1 %2939, ptr %1140, align 1
  %2940 = load i1, ptr %1140, align 1
  br i1 %2940, label %2941, label %._crit_edge10

._crit_edge10:                                    ; preds = %2373
  br label %3010

2941:                                             ; preds = %2373
  store i32 15, ptr %1141, align 4
  %2942 = load i32, ptr %1141, align 4
  %2943 = getelementptr i8, ptr null, i32 %2942
  %2944 = ptrtoint ptr %2943 to i64
  %2945 = call ptr @malloc(i64 %2944)
  store ptr %2945, ptr %1142, align 8
  %2946 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1142, i32 0, i32 0
  %2947 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1143, i32 0, i32 0
  %2948 = load ptr, ptr %2946, align 8
  store ptr %2948, ptr %2947, align 8
  %2949 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1142, i32 0, i32 1
  %2950 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1143, i32 0, i32 1
  %2951 = load ptr, ptr %2949, align 8
  store ptr %2951, ptr %2950, align 8
  %2952 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1142, i32 0, i32 2
  %2953 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1143, i32 0, i32 2
  %2954 = load ptr, ptr %2952, align 8
  store ptr %2954, ptr %2953, align 8
  %2955 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1142, i32 0, i32 3
  %2956 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1143, i32 0, i32 3
  %2957 = load i32, ptr %2955, align 4
  store i32 %2957, ptr %2956, align 4
  %2958 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1143)
  store i32 0, ptr %1144, align 4
  %2959 = load ptr, ptr %1143, align 8
  %2960 = load i32, ptr %1144, align 4
  %2961 = getelementptr [14 x i8], ptr null, i32 %2960
  %2962 = ptrtoint ptr %2961 to i64
  %2963 = getelementptr i8, ptr %2959, i64 %2962
  %2964 = load i112, ptr @hlult_so_it_is_true, align 4
  store i112 %2964, ptr %2963, align 4
  store i32 14, ptr %1145, align 4
  store i32 15, ptr %1146, align 4
  %2965 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %2966 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1147, i32 0, i32 1
  %2967 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1147, i32 0, i32 3
  store ptr @String, ptr %1147, align 8
  store ptr %2965, ptr %2966, align 8
  store i32 7, ptr %2967, align 4
  %2968 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1147)
  store i32 14, ptr %1148, align 4
  store i32 15, ptr %1149, align 4
  %2969 = getelementptr { ptr }, ptr %1143, i32 0, i32 0
  %2970 = load ptr, ptr %2969, align 8
  %2971 = insertvalue { ptr } undef, ptr %2970, 0
  %2972 = load i32, ptr %1148, align 4
  %2973 = load i32, ptr %1149, align 4
  %2974 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1147, i32 0, i32 0
  %2975 = load ptr, ptr %2974, align 8
  %2976 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2975, 0
  %2977 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1147, i32 0, i32 1
  %2978 = load ptr, ptr %2977, align 8
  %2979 = insertvalue { ptr, ptr, ptr, i32 } %2976, ptr %2978, 1
  %2980 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1147, i32 0, i32 2
  %2981 = load ptr, ptr %2980, align 8
  %2982 = insertvalue { ptr, ptr, ptr, i32 } %2979, ptr %2981, 2
  %2983 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1147, i32 0, i32 3
  %2984 = load i32, ptr %2983, align 4
  %2985 = insertvalue { ptr, ptr, ptr, i32 } %2982, i32 %2984, 3
  %2986 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1150)
  %2987 = getelementptr [3 x ptr], ptr %1150, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %2987, align 8
  %2988 = getelementptr [3 x ptr], ptr %1150, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %2988, align 8
  %2989 = getelementptr [3 x ptr], ptr %1150, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %2989, align 8
  %2990 = call ptr @llvm.invariant.start.p0(i64 280, ptr %2975)
  %2991 = getelementptr ptr, ptr %2975, i32 %2984
  %2992 = getelementptr ptr, ptr %2991, i32 4
  %2993 = load ptr, ptr %2992, align 8
  %2994 = getelementptr [3 x ptr], ptr %1151, i32 0, i32 0
  store ptr @buffer_typ, ptr %2994, align 8
  %2995 = getelementptr [3 x ptr], ptr %1151, i32 0, i32 1
  store ptr @i32_typ, ptr %2995, align 8
  %2996 = getelementptr [3 x ptr], ptr %1151, i32 0, i32 2
  store ptr @i32_typ, ptr %2996, align 8
  %2997 = call ptr %2993({ ptr, ptr, ptr, i32 } %2985, ptr %1151, { ptr } %2971, i32 %2972, i32 %2973)
  call void %2997({ ptr, ptr, ptr, i32 } %2985, { ptr, ptr, ptr, i32 } %2985, ptr %1150, { ptr } %2971, i32 %2972, i32 %2973)
  %2998 = getelementptr { ptr, i160 }, ptr %1147, i32 0, i32 0
  %2999 = load ptr, ptr %2998, align 8
  %3000 = insertvalue { ptr, i160 } undef, ptr %2999, 0
  %3001 = getelementptr { ptr, i160 }, ptr %1147, i32 0, i32 1
  %3002 = load i160, ptr %3001, align 4
  %3003 = insertvalue { ptr, i160 } %3000, i160 %3002, 1
  %3004 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1152)
  %3005 = getelementptr [1 x ptr], ptr %1152, i32 0, i32 0
  store ptr @_parameterization_String, ptr %3005, align 8
  %3006 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %3007 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %3008 = getelementptr [1 x ptr], ptr %1153, i32 0, i32 0
  store ptr %2999, ptr %3008, align 8
  %3009 = call ptr %3007(ptr %1153, { ptr, i160 } %3003)
  call void %3009(ptr %1152, { ptr, i160 } %3003)
  br label %3010

3010:                                             ; preds = %._crit_edge10, %2941
  store i64 5, ptr %1154, align 4
  %3011 = load i64, ptr %1154, align 4
  store i64 %3011, ptr %1155, align 4
  store i64 ptrtoint (ptr @i64_typ to i64), ptr %1157, align 4
  %3012 = load i64, ptr %1157, align 4
  store i64 %3012, ptr %1156, align 4
  %3013 = load ptr, ptr %1156, align 8
  %3014 = insertvalue { ptr, i160 } undef, ptr %3013, 0
  %3015 = load i160, ptr %1155, align 4
  %3016 = insertvalue { ptr, i160 } %3014, i160 %3015, 1
  %3017 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1158)
  %3018 = getelementptr [1 x ptr], ptr %1158, i32 0, i32 0
  store ptr @_parameterization_Ptri64, ptr %3018, align 8
  %3019 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %3020 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %3021 = getelementptr [1 x ptr], ptr %1159, i32 0, i32 0
  store ptr %3013, ptr %3021, align 8
  %3022 = call ptr %3020(ptr %1159, { ptr, i160 } %3016)
  call void %3022(ptr %1158, { ptr, i160 } %3016)
  store i32 5, ptr %1160, align 4
  %3023 = load i32, ptr %1160, align 4
  %3024 = sitofp i32 %3023 to double
  store double %3024, ptr %1161, align 8
  %3025 = load double, ptr %1161, align 8
  store double %3025, ptr %1162, align 8
  store i64 ptrtoint (ptr @f64_typ to i64), ptr %1164, align 4
  %3026 = load i64, ptr %1164, align 4
  store i64 %3026, ptr %1163, align 4
  %3027 = load ptr, ptr %1163, align 8
  %3028 = insertvalue { ptr, i160 } undef, ptr %3027, 0
  %3029 = load i160, ptr %1162, align 4
  %3030 = insertvalue { ptr, i160 } %3028, i160 %3029, 1
  %3031 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1165)
  %3032 = getelementptr [1 x ptr], ptr %1165, i32 0, i32 0
  store ptr @_parameterization_Ptrf64, ptr %3032, align 8
  %3033 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %3034 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %3035 = getelementptr [1 x ptr], ptr %1166, i32 0, i32 0
  store ptr %3027, ptr %3035, align 8
  %3036 = call ptr %3034(ptr %1166, { ptr, i160 } %3030)
  call void %3036(ptr %1165, { ptr, i160 } %3030)
  store i32 11, ptr %1167, align 4
  store i32 14, ptr %1168, align 4
  %3037 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ i32, i32, i32 }, ptr null, i32 1) to i64))
  %3038 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1169, i32 0, i32 1
  %3039 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1169, i32 0, i32 3
  store ptr @Range, ptr %1169, align 8
  store ptr %3037, ptr %3038, align 8
  store i32 7, ptr %3039, align 4
  %3040 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1169)
  store i32 11, ptr %1170, align 4
  store i32 14, ptr %1171, align 4
  %3041 = load i32, ptr %1170, align 4
  %3042 = load i32, ptr %1171, align 4
  %3043 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1169, i32 0, i32 0
  %3044 = load ptr, ptr %3043, align 8
  %3045 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3044, 0
  %3046 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1169, i32 0, i32 1
  %3047 = load ptr, ptr %3046, align 8
  %3048 = insertvalue { ptr, ptr, ptr, i32 } %3045, ptr %3047, 1
  %3049 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1169, i32 0, i32 2
  %3050 = load ptr, ptr %3049, align 8
  %3051 = insertvalue { ptr, ptr, ptr, i32 } %3048, ptr %3050, 2
  %3052 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1169, i32 0, i32 3
  %3053 = load i32, ptr %3052, align 4
  %3054 = insertvalue { ptr, ptr, ptr, i32 } %3051, i32 %3053, 3
  %3055 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1172)
  %3056 = getelementptr [2 x ptr], ptr %1172, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %3056, align 8
  %3057 = getelementptr [2 x ptr], ptr %1172, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %3057, align 8
  %3058 = call ptr @llvm.invariant.start.p0(i64 456, ptr %3044)
  %3059 = getelementptr ptr, ptr %3044, i32 %3053
  %3060 = getelementptr ptr, ptr %3059, i32 4
  %3061 = load ptr, ptr %3060, align 8
  %3062 = getelementptr [2 x ptr], ptr %1173, i32 0, i32 0
  store ptr @i32_typ, ptr %3062, align 8
  %3063 = getelementptr [2 x ptr], ptr %1173, i32 0, i32 1
  store ptr @i32_typ, ptr %3063, align 8
  %3064 = call ptr %3061({ ptr, ptr, ptr, i32 } %3054, ptr %1173, i32 %3041, i32 %3042)
  call void %3064({ ptr, ptr, ptr, i32 } %3054, { ptr, ptr, ptr, i32 } %3054, ptr %1172, i32 %3041, i32 %3042)
  %3065 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1169, i32 0, i32 0
  %3066 = load ptr, ptr %3065, align 8
  %3067 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3066, 0
  %3068 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1169, i32 0, i32 1
  %3069 = load ptr, ptr %3068, align 8
  %3070 = insertvalue { ptr, ptr, ptr, i32 } %3067, ptr %3069, 1
  %3071 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1169, i32 0, i32 2
  %3072 = load ptr, ptr %3071, align 8
  %3073 = insertvalue { ptr, ptr, ptr, i32 } %3070, ptr %3072, 2
  %3074 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1169, i32 0, i32 3
  %3075 = load i32, ptr %3074, align 4
  %3076 = insertvalue { ptr, ptr, ptr, i32 } %3073, i32 %3075, 3
  %3077 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1174)
  %3078 = call ptr @llvm.invariant.start.p0(i64 456, ptr %3066)
  %3079 = getelementptr ptr, ptr %3066, i32 %3075
  %3080 = getelementptr ptr, ptr %3079, i32 16
  %3081 = load ptr, ptr %3080, align 8
  %3082 = call ptr %3081({ ptr, ptr, ptr, i32 } %3076, ptr %1175)
  %3083 = call { ptr, ptr, ptr, i32 } %3082({ ptr, ptr, ptr, i32 } %3076, { ptr, ptr, ptr, i32 } %3076, ptr %1174)
  store { ptr, ptr, ptr, i32 } %3083, ptr %1176, align 8
  %3084 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1176)
  %3085 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1176, i32 0, i32 0
  %3086 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1177, i32 0, i32 0
  %3087 = load ptr, ptr %3085, align 8
  store ptr %3087, ptr %3086, align 8
  %3088 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1176, i32 0, i32 1
  %3089 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1177, i32 0, i32 1
  %3090 = load ptr, ptr %3088, align 8
  store ptr %3090, ptr %3089, align 8
  %3091 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1176, i32 0, i32 2
  %3092 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1177, i32 0, i32 2
  %3093 = load ptr, ptr %3091, align 8
  store ptr %3093, ptr %3092, align 8
  %3094 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1176, i32 0, i32 3
  %3095 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1177, i32 0, i32 3
  %3096 = load i32, ptr %3094, align 4
  store i32 %3096, ptr %3095, align 4
  call void @set_offset(ptr %1177, ptr @RangeIterator)
  %3097 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1177)
  %3098 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1177, i32 0, i32 0
  %3099 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1178, i32 0, i32 0
  %3100 = load ptr, ptr %3098, align 8
  store ptr %3100, ptr %3099, align 8
  %3101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1177, i32 0, i32 1
  %3102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1178, i32 0, i32 1
  %3103 = load ptr, ptr %3101, align 8
  store ptr %3103, ptr %3102, align 8
  %3104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1177, i32 0, i32 2
  %3105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1178, i32 0, i32 2
  %3106 = load ptr, ptr %3104, align 8
  store ptr %3106, ptr %3105, align 8
  %3107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1177, i32 0, i32 3
  %3108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1178, i32 0, i32 3
  %3109 = load i32, ptr %3107, align 4
  store i32 %3109, ptr %3108, align 4
  call void @set_offset(ptr %1178, ptr @RangeIterator)
  %3110 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1178)
  %3111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1178, i32 0, i32 0
  %3112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1179, i32 0, i32 0
  %3113 = load ptr, ptr %3111, align 8
  store ptr %3113, ptr %3112, align 8
  %3114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1178, i32 0, i32 1
  %3115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1179, i32 0, i32 1
  %3116 = load ptr, ptr %3114, align 8
  store ptr %3116, ptr %3115, align 8
  %3117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1178, i32 0, i32 2
  %3118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1179, i32 0, i32 2
  %3119 = load ptr, ptr %3117, align 8
  store ptr %3119, ptr %3118, align 8
  %3120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1178, i32 0, i32 3
  %3121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1179, i32 0, i32 3
  %3122 = load i32, ptr %3120, align 4
  store i32 %3122, ptr %3121, align 4
  %3123 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1179)
  %3124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1179, i32 0, i32 0
  store ptr %3124, ptr %.reg2mem59, align 8
  %3125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1179, i32 0, i32 1
  store ptr %3125, ptr %.reg2mem57, align 8
  %3126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1179, i32 0, i32 2
  store ptr %3126, ptr %.reg2mem55, align 8
  %3127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1179, i32 0, i32 3
  store ptr %3127, ptr %.reg2mem53, align 8
  br label %3128

3128:                                             ; preds = %._crit_edge12, %3010
  %.reload60 = load ptr, ptr %.reg2mem59, align 8
  %3129 = load ptr, ptr %.reload60, align 8
  %3130 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3129, 0
  %.reload58 = load ptr, ptr %.reg2mem57, align 8
  %3131 = load ptr, ptr %.reload58, align 8
  %3132 = insertvalue { ptr, ptr, ptr, i32 } %3130, ptr %3131, 1
  %.reload56 = load ptr, ptr %.reg2mem55, align 8
  %3133 = load ptr, ptr %.reload56, align 8
  %3134 = insertvalue { ptr, ptr, ptr, i32 } %3132, ptr %3133, 2
  %.reload54 = load ptr, ptr %.reg2mem53, align 8
  %3135 = load i32, ptr %.reload54, align 4
  %3136 = insertvalue { ptr, ptr, ptr, i32 } %3134, i32 %3135, 3
  %3137 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1180)
  %3138 = call ptr @llvm.invariant.start.p0(i64 72, ptr %3129)
  %3139 = getelementptr ptr, ptr %3129, i32 %3135
  %3140 = getelementptr ptr, ptr %3139, i32 4
  %3141 = load ptr, ptr %3140, align 8
  %3142 = call ptr %3141({ ptr, ptr, ptr, i32 } %3136, ptr %1181)
  %3143 = call { ptr, i32 } %3142({ ptr, ptr, ptr, i32 } %3136, { ptr, ptr, ptr, i32 } %3136, ptr %1180)
  store { ptr, i32 } %3143, ptr %1182, align 8
  %3144 = getelementptr { ptr, i32 }, ptr %1182, i32 0, i32 0
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %1183, align 4
  %3145 = load ptr, ptr %3144, align 8
  %3146 = ptrtoint ptr %3145 to i64
  %3147 = load ptr, ptr %1183, align 8
  %3148 = ptrtoint ptr %3147 to i64
  %3149 = icmp ne i64 %3146, %3148
  store i1 %3149, ptr %1184, align 1
  %3150 = load i1, ptr %1184, align 1
  store i1 %3150, ptr %.reg2mem50, align 1
  %.reload52 = load i1, ptr %.reg2mem50, align 1
  br i1 %.reload52, label %3151, label %._crit_edge11

._crit_edge11:                                    ; preds = %3128
  br label %3167

3151:                                             ; preds = %3128
  %3152 = getelementptr { ptr, i32 }, ptr %1182, i32 0, i32 1
  %3153 = load i32, ptr %3152, align 4
  store i32 %3153, ptr %1185, align 4
  %3154 = load i32, ptr %1185, align 4
  store i32 %3154, ptr %1186, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %1188, align 4
  %3155 = load i64, ptr %1188, align 4
  store i64 %3155, ptr %1187, align 4
  %3156 = load ptr, ptr %1187, align 8
  %3157 = insertvalue { ptr, i160 } undef, ptr %3156, 0
  %3158 = load i160, ptr %1186, align 4
  %3159 = insertvalue { ptr, i160 } %3157, i160 %3158, 1
  %3160 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1189)
  %3161 = getelementptr [1 x ptr], ptr %1189, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %3161, align 8
  %3162 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %3163 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %3164 = getelementptr [1 x ptr], ptr %1190, i32 0, i32 0
  store ptr %3156, ptr %3164, align 8
  %3165 = call ptr %3163(ptr %1190, { ptr, i160 } %3159)
  call void %3165(ptr %1189, { ptr, i160 } %3159)
  %3166 = load i32, ptr %1185, align 4
  store i32 %3166, ptr %1182, align 4
  br label %3167

3167:                                             ; preds = %._crit_edge11, %3151
  %.reload51 = load i1, ptr %.reg2mem50, align 1
  br i1 %.reload51, label %._crit_edge12, label %3168

._crit_edge12:                                    ; preds = %3167
  br label %3128

3168:                                             ; preds = %3167
  store i32 4, ptr %1191, align 4
  %3169 = load i32, ptr %1191, align 4
  %3170 = getelementptr i32, ptr null, i32 %3169
  %3171 = ptrtoint ptr %3170 to i64
  %3172 = call ptr @malloc(i64 %3171)
  store ptr %3172, ptr %1192, align 8
  %3173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1192, i32 0, i32 0
  %3174 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1193, i32 0, i32 0
  %3175 = load ptr, ptr %3173, align 8
  store ptr %3175, ptr %3174, align 8
  %3176 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1192, i32 0, i32 1
  %3177 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1193, i32 0, i32 1
  %3178 = load ptr, ptr %3176, align 8
  store ptr %3178, ptr %3177, align 8
  %3179 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1192, i32 0, i32 2
  %3180 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1193, i32 0, i32 2
  %3181 = load ptr, ptr %3179, align 8
  store ptr %3181, ptr %3180, align 8
  %3182 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1192, i32 0, i32 3
  %3183 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1193, i32 0, i32 3
  %3184 = load i32, ptr %3182, align 4
  store i32 %3184, ptr %3183, align 4
  %3185 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1193)
  store i32 44, ptr %1194, align 4
  store i32 0, ptr %1195, align 4
  %3186 = load ptr, ptr %1193, align 8
  %3187 = load i32, ptr %1195, align 4
  %3188 = getelementptr i32, ptr null, i32 %3187
  %3189 = ptrtoint ptr %3188 to i64
  %3190 = getelementptr i8, ptr %3186, i64 %3189
  %3191 = load i32, ptr %1194, align 4
  store i32 %3191, ptr %3190, align 4
  store i32 55, ptr %1196, align 4
  store i32 1, ptr %1197, align 4
  %3192 = load ptr, ptr %1193, align 8
  %3193 = load i32, ptr %1197, align 4
  %3194 = getelementptr i32, ptr null, i32 %3193
  %3195 = ptrtoint ptr %3194 to i64
  %3196 = getelementptr i8, ptr %3192, i64 %3195
  %3197 = load i32, ptr %1196, align 4
  store i32 %3197, ptr %3196, align 4
  store i32 66, ptr %1198, align 4
  store i32 2, ptr %1199, align 4
  %3198 = load ptr, ptr %1193, align 8
  %3199 = load i32, ptr %1199, align 4
  %3200 = getelementptr i32, ptr null, i32 %3199
  %3201 = ptrtoint ptr %3200 to i64
  %3202 = getelementptr i8, ptr %3198, i64 %3201
  %3203 = load i32, ptr %1198, align 4
  store i32 %3203, ptr %3202, align 4
  store i32 3, ptr %1200, align 4
  store i32 4, ptr %1201, align 4
  %3204 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %3205 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1202, i32 0, i32 1
  %3206 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1202, i32 0, i32 3
  store ptr @IntArray, ptr %1202, align 8
  store ptr %3204, ptr %3205, align 8
  store i32 7, ptr %3206, align 4
  %3207 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1202)
  store i32 3, ptr %1203, align 4
  store i32 4, ptr %1204, align 4
  %3208 = getelementptr { ptr }, ptr %1193, i32 0, i32 0
  %3209 = load ptr, ptr %3208, align 8
  %3210 = insertvalue { ptr } undef, ptr %3209, 0
  %3211 = load i32, ptr %1203, align 4
  %3212 = load i32, ptr %1204, align 4
  %3213 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1202, i32 0, i32 0
  %3214 = load ptr, ptr %3213, align 8
  %3215 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3214, 0
  %3216 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1202, i32 0, i32 1
  %3217 = load ptr, ptr %3216, align 8
  %3218 = insertvalue { ptr, ptr, ptr, i32 } %3215, ptr %3217, 1
  %3219 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1202, i32 0, i32 2
  %3220 = load ptr, ptr %3219, align 8
  %3221 = insertvalue { ptr, ptr, ptr, i32 } %3218, ptr %3220, 2
  %3222 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1202, i32 0, i32 3
  %3223 = load i32, ptr %3222, align 4
  %3224 = insertvalue { ptr, ptr, ptr, i32 } %3221, i32 %3223, 3
  %3225 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1205)
  %3226 = getelementptr [3 x ptr], ptr %1205, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %3226, align 8
  %3227 = getelementptr [3 x ptr], ptr %1205, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %3227, align 8
  %3228 = getelementptr [3 x ptr], ptr %1205, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %3228, align 8
  %3229 = call ptr @llvm.invariant.start.p0(i64 616, ptr %3214)
  %3230 = getelementptr ptr, ptr %3214, i32 %3223
  %3231 = getelementptr ptr, ptr %3230, i32 5
  %3232 = load ptr, ptr %3231, align 8
  %3233 = getelementptr [3 x ptr], ptr %1206, i32 0, i32 0
  store ptr @buffer_typ, ptr %3233, align 8
  %3234 = getelementptr [3 x ptr], ptr %1206, i32 0, i32 1
  store ptr @i32_typ, ptr %3234, align 8
  %3235 = getelementptr [3 x ptr], ptr %1206, i32 0, i32 2
  store ptr @i32_typ, ptr %3235, align 8
  %3236 = call ptr %3232({ ptr, ptr, ptr, i32 } %3224, ptr %1206, { ptr } %3210, i32 %3211, i32 %3212)
  call void %3236({ ptr, ptr, ptr, i32 } %3224, { ptr, ptr, ptr, i32 } %3224, ptr %1205, { ptr } %3210, i32 %3211, i32 %3212)
  %3237 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1202, i32 0, i32 0
  %3238 = load ptr, ptr %3237, align 8
  %3239 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3238, 0
  %3240 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1202, i32 0, i32 1
  %3241 = load ptr, ptr %3240, align 8
  %3242 = insertvalue { ptr, ptr, ptr, i32 } %3239, ptr %3241, 1
  %3243 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1202, i32 0, i32 2
  %3244 = load ptr, ptr %3243, align 8
  %3245 = insertvalue { ptr, ptr, ptr, i32 } %3242, ptr %3244, 2
  %3246 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1202, i32 0, i32 3
  %3247 = load i32, ptr %3246, align 4
  %3248 = insertvalue { ptr, ptr, ptr, i32 } %3245, i32 %3247, 3
  %3249 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1207)
  %3250 = call ptr @llvm.invariant.start.p0(i64 616, ptr %3238)
  %3251 = getelementptr ptr, ptr %3238, i32 %3247
  %3252 = getelementptr ptr, ptr %3251, i32 24
  %3253 = load ptr, ptr %3252, align 8
  %3254 = call ptr %3253({ ptr, ptr, ptr, i32 } %3248, ptr %1208)
  %3255 = call { ptr, ptr, ptr, i32 } %3254({ ptr, ptr, ptr, i32 } %3248, { ptr, ptr, ptr, i32 } %3248, ptr %1207)
  store { ptr, ptr, ptr, i32 } %3255, ptr %1209, align 8
  %3256 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1209)
  %3257 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1209, i32 0, i32 0
  %3258 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1210, i32 0, i32 0
  %3259 = load ptr, ptr %3257, align 8
  store ptr %3259, ptr %3258, align 8
  %3260 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1209, i32 0, i32 1
  %3261 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1210, i32 0, i32 1
  %3262 = load ptr, ptr %3260, align 8
  store ptr %3262, ptr %3261, align 8
  %3263 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1209, i32 0, i32 2
  %3264 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1210, i32 0, i32 2
  %3265 = load ptr, ptr %3263, align 8
  store ptr %3265, ptr %3264, align 8
  %3266 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1209, i32 0, i32 3
  %3267 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1210, i32 0, i32 3
  %3268 = load i32, ptr %3266, align 4
  store i32 %3268, ptr %3267, align 4
  call void @set_offset(ptr %1210, ptr @IntArrayIterator)
  %3269 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1210)
  %3270 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1210, i32 0, i32 0
  %3271 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1211, i32 0, i32 0
  %3272 = load ptr, ptr %3270, align 8
  store ptr %3272, ptr %3271, align 8
  %3273 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1210, i32 0, i32 1
  %3274 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1211, i32 0, i32 1
  %3275 = load ptr, ptr %3273, align 8
  store ptr %3275, ptr %3274, align 8
  %3276 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1210, i32 0, i32 2
  %3277 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1211, i32 0, i32 2
  %3278 = load ptr, ptr %3276, align 8
  store ptr %3278, ptr %3277, align 8
  %3279 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1210, i32 0, i32 3
  %3280 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1211, i32 0, i32 3
  %3281 = load i32, ptr %3279, align 4
  store i32 %3281, ptr %3280, align 4
  call void @set_offset(ptr %1211, ptr @IntArrayIterator)
  %3282 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1211)
  %3283 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1211, i32 0, i32 0
  %3284 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1212, i32 0, i32 0
  %3285 = load ptr, ptr %3283, align 8
  store ptr %3285, ptr %3284, align 8
  %3286 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1211, i32 0, i32 1
  %3287 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1212, i32 0, i32 1
  %3288 = load ptr, ptr %3286, align 8
  store ptr %3288, ptr %3287, align 8
  %3289 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1211, i32 0, i32 2
  %3290 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1212, i32 0, i32 2
  %3291 = load ptr, ptr %3289, align 8
  store ptr %3291, ptr %3290, align 8
  %3292 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1211, i32 0, i32 3
  %3293 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1212, i32 0, i32 3
  %3294 = load i32, ptr %3292, align 4
  store i32 %3294, ptr %3293, align 4
  %3295 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1212)
  %3296 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1212, i32 0, i32 0
  store ptr %3296, ptr %.reg2mem48, align 8
  %3297 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1212, i32 0, i32 1
  store ptr %3297, ptr %.reg2mem46, align 8
  %3298 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1212, i32 0, i32 2
  store ptr %3298, ptr %.reg2mem44, align 8
  %3299 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1212, i32 0, i32 3
  store ptr %3299, ptr %.reg2mem42, align 8
  br label %3300

3300:                                             ; preds = %._crit_edge14, %3168
  %.reload49 = load ptr, ptr %.reg2mem48, align 8
  %3301 = load ptr, ptr %.reload49, align 8
  %3302 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3301, 0
  %.reload47 = load ptr, ptr %.reg2mem46, align 8
  %3303 = load ptr, ptr %.reload47, align 8
  %3304 = insertvalue { ptr, ptr, ptr, i32 } %3302, ptr %3303, 1
  %.reload45 = load ptr, ptr %.reg2mem44, align 8
  %3305 = load ptr, ptr %.reload45, align 8
  %3306 = insertvalue { ptr, ptr, ptr, i32 } %3304, ptr %3305, 2
  %.reload43 = load ptr, ptr %.reg2mem42, align 8
  %3307 = load i32, ptr %.reload43, align 4
  %3308 = insertvalue { ptr, ptr, ptr, i32 } %3306, i32 %3307, 3
  %3309 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1213)
  %3310 = call ptr @llvm.invariant.start.p0(i64 64, ptr %3301)
  %3311 = getelementptr ptr, ptr %3301, i32 %3307
  %3312 = getelementptr ptr, ptr %3311, i32 3
  %3313 = load ptr, ptr %3312, align 8
  %3314 = call ptr %3313({ ptr, ptr, ptr, i32 } %3308, ptr %1214)
  %3315 = call { ptr, i32 } %3314({ ptr, ptr, ptr, i32 } %3308, { ptr, ptr, ptr, i32 } %3308, ptr %1213)
  store { ptr, i32 } %3315, ptr %1215, align 8
  %3316 = getelementptr { ptr, i32 }, ptr %1215, i32 0, i32 0
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %1216, align 4
  %3317 = load ptr, ptr %3316, align 8
  %3318 = ptrtoint ptr %3317 to i64
  %3319 = load ptr, ptr %1216, align 8
  %3320 = ptrtoint ptr %3319 to i64
  %3321 = icmp ne i64 %3318, %3320
  store i1 %3321, ptr %1217, align 1
  %3322 = load i1, ptr %1217, align 1
  store i1 %3322, ptr %.reg2mem39, align 1
  %.reload41 = load i1, ptr %.reg2mem39, align 1
  br i1 %.reload41, label %3323, label %._crit_edge13

._crit_edge13:                                    ; preds = %3300
  br label %3339

3323:                                             ; preds = %3300
  %3324 = getelementptr { ptr, i32 }, ptr %1215, i32 0, i32 1
  %3325 = load i32, ptr %3324, align 4
  store i32 %3325, ptr %1218, align 4
  %3326 = load i32, ptr %1218, align 4
  store i32 %3326, ptr %1219, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %1221, align 4
  %3327 = load i64, ptr %1221, align 4
  store i64 %3327, ptr %1220, align 4
  %3328 = load ptr, ptr %1220, align 8
  %3329 = insertvalue { ptr, i160 } undef, ptr %3328, 0
  %3330 = load i160, ptr %1219, align 4
  %3331 = insertvalue { ptr, i160 } %3329, i160 %3330, 1
  %3332 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1222)
  %3333 = getelementptr [1 x ptr], ptr %1222, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %3333, align 8
  %3334 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %3335 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %3336 = getelementptr [1 x ptr], ptr %1223, i32 0, i32 0
  store ptr %3328, ptr %3336, align 8
  %3337 = call ptr %3335(ptr %1223, { ptr, i160 } %3331)
  call void %3337(ptr %1222, { ptr, i160 } %3331)
  %3338 = load i32, ptr %1218, align 4
  store i32 %3338, ptr %1215, align 4
  br label %3339

3339:                                             ; preds = %._crit_edge13, %3323
  %.reload40 = load i1, ptr %.reg2mem39, align 1
  br i1 %.reload40, label %._crit_edge14, label %3340

._crit_edge14:                                    ; preds = %3339
  br label %3300

3340:                                             ; preds = %3339
  store i8 3, ptr %1224, align 1
  %3341 = load i8, ptr %1224, align 1
  store i8 %3341, ptr %1225, align 1
  store i64 ptrtoint (ptr @i8_typ to i64), ptr %1227, align 4
  %3342 = load i64, ptr %1227, align 4
  store i64 %3342, ptr %1226, align 4
  %3343 = load ptr, ptr %1226, align 8
  %3344 = insertvalue { ptr, i160 } undef, ptr %3343, 0
  %3345 = load i160, ptr %1225, align 4
  %3346 = insertvalue { ptr, i160 } %3344, i160 %3345, 1
  %3347 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1228)
  %3348 = getelementptr [1 x ptr], ptr %1228, i32 0, i32 0
  store ptr @_parameterization_Ptri8, ptr %3348, align 8
  %3349 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %3350 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %3351 = getelementptr [1 x ptr], ptr %1229, i32 0, i32 0
  store ptr %3343, ptr %3351, align 8
  %3352 = call ptr %3350(ptr %1229, { ptr, i160 } %3346)
  call void %3352(ptr %1228, { ptr, i160 } %3346)
  store i32 6, ptr %1230, align 4
  %3353 = load i32, ptr %1230, align 4
  %3354 = getelementptr i8, ptr null, i32 %3353
  %3355 = ptrtoint ptr %3354 to i64
  %3356 = call ptr @malloc(i64 %3355)
  store ptr %3356, ptr %1231, align 8
  %3357 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1231, i32 0, i32 0
  %3358 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1232, i32 0, i32 0
  %3359 = load ptr, ptr %3357, align 8
  store ptr %3359, ptr %3358, align 8
  %3360 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1231, i32 0, i32 1
  %3361 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1232, i32 0, i32 1
  %3362 = load ptr, ptr %3360, align 8
  store ptr %3362, ptr %3361, align 8
  %3363 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1231, i32 0, i32 2
  %3364 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1232, i32 0, i32 2
  %3365 = load ptr, ptr %3363, align 8
  store ptr %3365, ptr %3364, align 8
  %3366 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1231, i32 0, i32 3
  %3367 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1232, i32 0, i32 3
  %3368 = load i32, ptr %3366, align 4
  store i32 %3368, ptr %3367, align 4
  %3369 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1232)
  store i32 0, ptr %1233, align 4
  %3370 = load ptr, ptr %1232, align 8
  %3371 = load i32, ptr %1233, align 4
  %3372 = getelementptr [5 x i8], ptr null, i32 %3371
  %3373 = ptrtoint ptr %3372 to i64
  %3374 = getelementptr i8, ptr %3370, i64 %3373
  %3375 = load i40, ptr @trtae_boom, align 4
  store i40 %3375, ptr %3374, align 4
  store i32 5, ptr %1234, align 4
  store i32 6, ptr %1235, align 4
  %3376 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %3377 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1236, i32 0, i32 1
  %3378 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1236, i32 0, i32 3
  store ptr @String, ptr %1236, align 8
  store ptr %3376, ptr %3377, align 8
  store i32 7, ptr %3378, align 4
  %3379 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1236)
  store i32 5, ptr %1237, align 4
  store i32 6, ptr %1238, align 4
  %3380 = getelementptr { ptr }, ptr %1232, i32 0, i32 0
  %3381 = load ptr, ptr %3380, align 8
  %3382 = insertvalue { ptr } undef, ptr %3381, 0
  %3383 = load i32, ptr %1237, align 4
  %3384 = load i32, ptr %1238, align 4
  %3385 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1236, i32 0, i32 0
  %3386 = load ptr, ptr %3385, align 8
  %3387 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3386, 0
  %3388 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1236, i32 0, i32 1
  %3389 = load ptr, ptr %3388, align 8
  %3390 = insertvalue { ptr, ptr, ptr, i32 } %3387, ptr %3389, 1
  %3391 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1236, i32 0, i32 2
  %3392 = load ptr, ptr %3391, align 8
  %3393 = insertvalue { ptr, ptr, ptr, i32 } %3390, ptr %3392, 2
  %3394 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1236, i32 0, i32 3
  %3395 = load i32, ptr %3394, align 4
  %3396 = insertvalue { ptr, ptr, ptr, i32 } %3393, i32 %3395, 3
  %3397 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1239)
  %3398 = getelementptr [3 x ptr], ptr %1239, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %3398, align 8
  %3399 = getelementptr [3 x ptr], ptr %1239, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %3399, align 8
  %3400 = getelementptr [3 x ptr], ptr %1239, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %3400, align 8
  %3401 = call ptr @llvm.invariant.start.p0(i64 280, ptr %3386)
  %3402 = getelementptr ptr, ptr %3386, i32 %3395
  %3403 = getelementptr ptr, ptr %3402, i32 4
  %3404 = load ptr, ptr %3403, align 8
  %3405 = getelementptr [3 x ptr], ptr %1240, i32 0, i32 0
  store ptr @buffer_typ, ptr %3405, align 8
  %3406 = getelementptr [3 x ptr], ptr %1240, i32 0, i32 1
  store ptr @i32_typ, ptr %3406, align 8
  %3407 = getelementptr [3 x ptr], ptr %1240, i32 0, i32 2
  store ptr @i32_typ, ptr %3407, align 8
  %3408 = call ptr %3404({ ptr, ptr, ptr, i32 } %3396, ptr %1240, { ptr } %3382, i32 %3383, i32 %3384)
  call void %3408({ ptr, ptr, ptr, i32 } %3396, { ptr, ptr, ptr, i32 } %3396, ptr %1239, { ptr } %3382, i32 %3383, i32 %3384)
  %3409 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1236, i32 0, i32 0
  %3410 = load ptr, ptr %3409, align 8
  %3411 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3410, 0
  %3412 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1236, i32 0, i32 1
  %3413 = load ptr, ptr %3412, align 8
  %3414 = insertvalue { ptr, ptr, ptr, i32 } %3411, ptr %3413, 1
  %3415 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1236, i32 0, i32 2
  %3416 = load ptr, ptr %3415, align 8
  %3417 = insertvalue { ptr, ptr, ptr, i32 } %3414, ptr %3416, 2
  %3418 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1236, i32 0, i32 3
  %3419 = load i32, ptr %3418, align 4
  %3420 = insertvalue { ptr, ptr, ptr, i32 } %3417, i32 %3419, 3
  %3421 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1241)
  %3422 = call ptr @llvm.invariant.start.p0(i64 280, ptr %3410)
  %3423 = getelementptr ptr, ptr %3410, i32 %3419
  %3424 = getelementptr ptr, ptr %3423, i32 15
  %3425 = load ptr, ptr %3424, align 8
  %3426 = call ptr %3425({ ptr, ptr, ptr, i32 } %3420, ptr %1242)
  %3427 = call { ptr, ptr, ptr, i32 } %3426({ ptr, ptr, ptr, i32 } %3420, { ptr, ptr, ptr, i32 } %3420, ptr %1241)
  store { ptr, ptr, ptr, i32 } %3427, ptr %1243, align 8
  %3428 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1243)
  %3429 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1243, i32 0, i32 0
  %3430 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1244, i32 0, i32 0
  %3431 = load ptr, ptr %3429, align 8
  store ptr %3431, ptr %3430, align 8
  %3432 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1243, i32 0, i32 1
  %3433 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1244, i32 0, i32 1
  %3434 = load ptr, ptr %3432, align 8
  store ptr %3434, ptr %3433, align 8
  %3435 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1243, i32 0, i32 2
  %3436 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1244, i32 0, i32 2
  %3437 = load ptr, ptr %3435, align 8
  store ptr %3437, ptr %3436, align 8
  %3438 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1243, i32 0, i32 3
  %3439 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1244, i32 0, i32 3
  %3440 = load i32, ptr %3438, align 4
  store i32 %3440, ptr %3439, align 4
  call void @set_offset(ptr %1244, ptr @StringIterator)
  %3441 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1244)
  %3442 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1244, i32 0, i32 0
  %3443 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1245, i32 0, i32 0
  %3444 = load ptr, ptr %3442, align 8
  store ptr %3444, ptr %3443, align 8
  %3445 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1244, i32 0, i32 1
  %3446 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1245, i32 0, i32 1
  %3447 = load ptr, ptr %3445, align 8
  store ptr %3447, ptr %3446, align 8
  %3448 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1244, i32 0, i32 2
  %3449 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1245, i32 0, i32 2
  %3450 = load ptr, ptr %3448, align 8
  store ptr %3450, ptr %3449, align 8
  %3451 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1244, i32 0, i32 3
  %3452 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1245, i32 0, i32 3
  %3453 = load i32, ptr %3451, align 4
  store i32 %3453, ptr %3452, align 4
  call void @set_offset(ptr %1245, ptr @StringIterator)
  %3454 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1245)
  %3455 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1245, i32 0, i32 0
  %3456 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1246, i32 0, i32 0
  %3457 = load ptr, ptr %3455, align 8
  store ptr %3457, ptr %3456, align 8
  %3458 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1245, i32 0, i32 1
  %3459 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1246, i32 0, i32 1
  %3460 = load ptr, ptr %3458, align 8
  store ptr %3460, ptr %3459, align 8
  %3461 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1245, i32 0, i32 2
  %3462 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1246, i32 0, i32 2
  %3463 = load ptr, ptr %3461, align 8
  store ptr %3463, ptr %3462, align 8
  %3464 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1245, i32 0, i32 3
  %3465 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1246, i32 0, i32 3
  %3466 = load i32, ptr %3464, align 4
  store i32 %3466, ptr %3465, align 4
  %3467 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1246)
  %3468 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1246, i32 0, i32 0
  store ptr %3468, ptr %.reg2mem37, align 8
  %3469 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1246, i32 0, i32 1
  store ptr %3469, ptr %.reg2mem35, align 8
  %3470 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1246, i32 0, i32 2
  store ptr %3470, ptr %.reg2mem33, align 8
  %3471 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1246, i32 0, i32 3
  store ptr %3471, ptr %.reg2mem31, align 8
  br label %3472

3472:                                             ; preds = %._crit_edge16, %3340
  %.reload38 = load ptr, ptr %.reg2mem37, align 8
  %3473 = load ptr, ptr %.reload38, align 8
  %3474 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3473, 0
  %.reload36 = load ptr, ptr %.reg2mem35, align 8
  %3475 = load ptr, ptr %.reload36, align 8
  %3476 = insertvalue { ptr, ptr, ptr, i32 } %3474, ptr %3475, 1
  %.reload34 = load ptr, ptr %.reg2mem33, align 8
  %3477 = load ptr, ptr %.reload34, align 8
  %3478 = insertvalue { ptr, ptr, ptr, i32 } %3476, ptr %3477, 2
  %.reload32 = load ptr, ptr %.reg2mem31, align 8
  %3479 = load i32, ptr %.reload32, align 4
  %3480 = insertvalue { ptr, ptr, ptr, i32 } %3478, i32 %3479, 3
  %3481 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1247)
  %3482 = call ptr @llvm.invariant.start.p0(i64 48, ptr %3473)
  %3483 = getelementptr ptr, ptr %3473, i32 %3479
  %3484 = getelementptr ptr, ptr %3483, i32 3
  %3485 = load ptr, ptr %3484, align 8
  %3486 = call ptr %3485({ ptr, ptr, ptr, i32 } %3480, ptr %1248)
  %3487 = call { ptr, i160 } %3486({ ptr, ptr, ptr, i32 } %3480, { ptr, ptr, ptr, i32 } %3480, ptr %1247)
  store { ptr, i160 } %3487, ptr %1249, align 8
  %3488 = getelementptr { ptr, i160 }, ptr %1249, i32 0, i32 0
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %1250, align 4
  %3489 = load ptr, ptr %3488, align 8
  %3490 = ptrtoint ptr %3489 to i64
  %3491 = load ptr, ptr %1250, align 8
  %3492 = ptrtoint ptr %3491 to i64
  %3493 = icmp ne i64 %3490, %3492
  store i1 %3493, ptr %1251, align 1
  %3494 = load i1, ptr %1251, align 1
  store i1 %3494, ptr %.reg2mem28, align 1
  %.reload30 = load i1, ptr %.reg2mem28, align 1
  br i1 %.reload30, label %3495, label %._crit_edge15

._crit_edge15:                                    ; preds = %3472
  br label %3546

3495:                                             ; preds = %3472
  %3496 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1249, i32 0, i32 0
  %3497 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1252, i32 0, i32 0
  %3498 = load ptr, ptr %3496, align 8
  store ptr %3498, ptr %3497, align 8
  %3499 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1249, i32 0, i32 1
  %3500 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1252, i32 0, i32 1
  %3501 = load ptr, ptr %3499, align 8
  store ptr %3501, ptr %3500, align 8
  %3502 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1249, i32 0, i32 2
  %3503 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1252, i32 0, i32 2
  %3504 = load ptr, ptr %3502, align 8
  store ptr %3504, ptr %3503, align 8
  %3505 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1249, i32 0, i32 3
  %3506 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1252, i32 0, i32 3
  %3507 = load i32, ptr %3505, align 4
  store i32 %3507, ptr %3506, align 4
  call void @set_offset(ptr %1252, ptr @Character)
  %3508 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1252)
  %3509 = getelementptr { ptr, i160 }, ptr %1252, i32 0, i32 0
  %3510 = load ptr, ptr %3509, align 8
  %3511 = insertvalue { ptr, i160 } undef, ptr %3510, 0
  %3512 = getelementptr { ptr, i160 }, ptr %1252, i32 0, i32 1
  %3513 = load i160, ptr %3512, align 4
  %3514 = insertvalue { ptr, i160 } %3511, i160 %3513, 1
  %3515 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1253)
  %3516 = getelementptr [1 x ptr], ptr %1253, i32 0, i32 0
  store ptr @_parameterization_Character, ptr %3516, align 8
  %3517 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %3518 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %3519 = getelementptr [1 x ptr], ptr %1254, i32 0, i32 0
  store ptr %3510, ptr %3519, align 8
  %3520 = call ptr %3518(ptr %1254, { ptr, i160 } %3514)
  call void %3520(ptr %1253, { ptr, i160 } %3514)
  %3521 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1252, i32 0, i32 0
  %3522 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1255, i32 0, i32 0
  %3523 = load ptr, ptr %3521, align 8
  store ptr %3523, ptr %3522, align 8
  %3524 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1252, i32 0, i32 1
  %3525 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1255, i32 0, i32 1
  %3526 = load ptr, ptr %3524, align 8
  store ptr %3526, ptr %3525, align 8
  %3527 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1252, i32 0, i32 2
  %3528 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1255, i32 0, i32 2
  %3529 = load ptr, ptr %3527, align 8
  store ptr %3529, ptr %3528, align 8
  %3530 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1252, i32 0, i32 3
  %3531 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1255, i32 0, i32 3
  %3532 = load i32, ptr %3530, align 4
  store i32 %3532, ptr %3531, align 4
  call void @set_offset(ptr %1255, ptr @Character)
  %3533 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1255)
  %3534 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1255, i32 0, i32 0
  %3535 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1249, i32 0, i32 0
  %3536 = load ptr, ptr %3534, align 8
  store ptr %3536, ptr %3535, align 8
  %3537 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1255, i32 0, i32 1
  %3538 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1249, i32 0, i32 1
  %3539 = load ptr, ptr %3537, align 8
  store ptr %3539, ptr %3538, align 8
  %3540 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1255, i32 0, i32 2
  %3541 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1249, i32 0, i32 2
  %3542 = load ptr, ptr %3540, align 8
  store ptr %3542, ptr %3541, align 8
  %3543 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1255, i32 0, i32 3
  %3544 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1249, i32 0, i32 3
  %3545 = load i32, ptr %3543, align 4
  store i32 %3545, ptr %3544, align 4
  br label %3546

3546:                                             ; preds = %._crit_edge15, %3495
  %.reload29 = load i1, ptr %.reg2mem28, align 1
  br i1 %.reload29, label %._crit_edge16, label %3547

._crit_edge16:                                    ; preds = %3546
  br label %3472

3547:                                             ; preds = %3546
  store i32 4, ptr %1256, align 4
  %3548 = load i32, ptr %1256, align 4
  %3549 = getelementptr i32, ptr null, i32 %3548
  %3550 = ptrtoint ptr %3549 to i64
  %3551 = call ptr @malloc(i64 %3550)
  store ptr %3551, ptr %1257, align 8
  %3552 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1257, i32 0, i32 0
  %3553 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1258, i32 0, i32 0
  %3554 = load ptr, ptr %3552, align 8
  store ptr %3554, ptr %3553, align 8
  %3555 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1257, i32 0, i32 1
  %3556 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1258, i32 0, i32 1
  %3557 = load ptr, ptr %3555, align 8
  store ptr %3557, ptr %3556, align 8
  %3558 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1257, i32 0, i32 2
  %3559 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1258, i32 0, i32 2
  %3560 = load ptr, ptr %3558, align 8
  store ptr %3560, ptr %3559, align 8
  %3561 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1257, i32 0, i32 3
  %3562 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1258, i32 0, i32 3
  %3563 = load i32, ptr %3561, align 4
  store i32 %3563, ptr %3562, align 4
  %3564 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1258)
  store i32 1, ptr %1259, align 4
  store i32 0, ptr %1260, align 4
  %3565 = load ptr, ptr %1258, align 8
  %3566 = load i32, ptr %1260, align 4
  %3567 = getelementptr i32, ptr null, i32 %3566
  %3568 = ptrtoint ptr %3567 to i64
  %3569 = getelementptr i8, ptr %3565, i64 %3568
  %3570 = load i32, ptr %1259, align 4
  store i32 %3570, ptr %3569, align 4
  store i32 2, ptr %1261, align 4
  store i32 1, ptr %1262, align 4
  %3571 = load ptr, ptr %1258, align 8
  %3572 = load i32, ptr %1262, align 4
  %3573 = getelementptr i32, ptr null, i32 %3572
  %3574 = ptrtoint ptr %3573 to i64
  %3575 = getelementptr i8, ptr %3571, i64 %3574
  %3576 = load i32, ptr %1261, align 4
  store i32 %3576, ptr %3575, align 4
  store i32 3, ptr %1263, align 4
  store i32 2, ptr %1264, align 4
  %3577 = load ptr, ptr %1258, align 8
  %3578 = load i32, ptr %1264, align 4
  %3579 = getelementptr i32, ptr null, i32 %3578
  %3580 = ptrtoint ptr %3579 to i64
  %3581 = getelementptr i8, ptr %3577, i64 %3580
  %3582 = load i32, ptr %1263, align 4
  store i32 %3582, ptr %3581, align 4
  store i32 3, ptr %1265, align 4
  store i32 4, ptr %1266, align 4
  %3583 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %3584 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1267, i32 0, i32 1
  %3585 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1267, i32 0, i32 3
  store ptr @IntArray, ptr %1267, align 8
  store ptr %3583, ptr %3584, align 8
  store i32 7, ptr %3585, align 4
  %3586 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1267)
  store i32 3, ptr %1268, align 4
  store i32 4, ptr %1269, align 4
  %3587 = getelementptr { ptr }, ptr %1258, i32 0, i32 0
  %3588 = load ptr, ptr %3587, align 8
  %3589 = insertvalue { ptr } undef, ptr %3588, 0
  %3590 = load i32, ptr %1268, align 4
  %3591 = load i32, ptr %1269, align 4
  %3592 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1267, i32 0, i32 0
  %3593 = load ptr, ptr %3592, align 8
  %3594 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3593, 0
  %3595 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1267, i32 0, i32 1
  %3596 = load ptr, ptr %3595, align 8
  %3597 = insertvalue { ptr, ptr, ptr, i32 } %3594, ptr %3596, 1
  %3598 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1267, i32 0, i32 2
  %3599 = load ptr, ptr %3598, align 8
  %3600 = insertvalue { ptr, ptr, ptr, i32 } %3597, ptr %3599, 2
  %3601 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1267, i32 0, i32 3
  %3602 = load i32, ptr %3601, align 4
  %3603 = insertvalue { ptr, ptr, ptr, i32 } %3600, i32 %3602, 3
  %3604 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1270)
  %3605 = getelementptr [3 x ptr], ptr %1270, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %3605, align 8
  %3606 = getelementptr [3 x ptr], ptr %1270, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %3606, align 8
  %3607 = getelementptr [3 x ptr], ptr %1270, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %3607, align 8
  %3608 = call ptr @llvm.invariant.start.p0(i64 616, ptr %3593)
  %3609 = getelementptr ptr, ptr %3593, i32 %3602
  %3610 = getelementptr ptr, ptr %3609, i32 5
  %3611 = load ptr, ptr %3610, align 8
  %3612 = getelementptr [3 x ptr], ptr %1271, i32 0, i32 0
  store ptr @buffer_typ, ptr %3612, align 8
  %3613 = getelementptr [3 x ptr], ptr %1271, i32 0, i32 1
  store ptr @i32_typ, ptr %3613, align 8
  %3614 = getelementptr [3 x ptr], ptr %1271, i32 0, i32 2
  store ptr @i32_typ, ptr %3614, align 8
  %3615 = call ptr %3611({ ptr, ptr, ptr, i32 } %3603, ptr %1271, { ptr } %3589, i32 %3590, i32 %3591)
  call void %3615({ ptr, ptr, ptr, i32 } %3603, { ptr, ptr, ptr, i32 } %3603, ptr %1270, { ptr } %3589, i32 %3590, i32 %3591)
  %3616 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1267, i32 0, i32 0
  %3617 = load ptr, ptr %3616, align 8
  %3618 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3617, 0
  %3619 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1267, i32 0, i32 1
  %3620 = load ptr, ptr %3619, align 8
  %3621 = insertvalue { ptr, ptr, ptr, i32 } %3618, ptr %3620, 1
  %3622 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1267, i32 0, i32 2
  %3623 = load ptr, ptr %3622, align 8
  %3624 = insertvalue { ptr, ptr, ptr, i32 } %3621, ptr %3623, 2
  %3625 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1267, i32 0, i32 3
  %3626 = load i32, ptr %3625, align 4
  %3627 = insertvalue { ptr, ptr, ptr, i32 } %3624, i32 %3626, 3
  %3628 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1272)
  %3629 = call ptr @llvm.invariant.start.p0(i64 616, ptr %3617)
  %3630 = getelementptr ptr, ptr %3617, i32 %3626
  %3631 = getelementptr ptr, ptr %3630, i32 25
  %3632 = load ptr, ptr %3631, align 8
  %3633 = call ptr %3632({ ptr, ptr, ptr, i32 } %3627, ptr %1273)
  %3634 = call { ptr, ptr, ptr, i32 } %3633({ ptr, ptr, ptr, i32 } %3627, { ptr, ptr, ptr, i32 } %3627, ptr %1272)
  store { ptr, ptr, ptr, i32 } %3634, ptr %1274, align 8
  %3635 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1274)
  %3636 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1274, i32 0, i32 0
  %3637 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1275, i32 0, i32 0
  %3638 = load ptr, ptr %3636, align 8
  store ptr %3638, ptr %3637, align 8
  %3639 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1274, i32 0, i32 1
  %3640 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1275, i32 0, i32 1
  %3641 = load ptr, ptr %3639, align 8
  store ptr %3641, ptr %3640, align 8
  %3642 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1274, i32 0, i32 2
  %3643 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1275, i32 0, i32 2
  %3644 = load ptr, ptr %3642, align 8
  store ptr %3644, ptr %3643, align 8
  %3645 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1274, i32 0, i32 3
  %3646 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1275, i32 0, i32 3
  %3647 = load i32, ptr %3645, align 4
  store i32 %3647, ptr %3646, align 4
  call void @set_offset(ptr %1275, ptr @String)
  %3648 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1275)
  %3649 = getelementptr { ptr, i160 }, ptr %1275, i32 0, i32 0
  %3650 = load ptr, ptr %3649, align 8
  %3651 = insertvalue { ptr, i160 } undef, ptr %3650, 0
  %3652 = getelementptr { ptr, i160 }, ptr %1275, i32 0, i32 1
  %3653 = load i160, ptr %3652, align 4
  %3654 = insertvalue { ptr, i160 } %3651, i160 %3653, 1
  %3655 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1276)
  %3656 = getelementptr [1 x ptr], ptr %1276, i32 0, i32 0
  store ptr @_parameterization_String, ptr %3656, align 8
  %3657 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %3658 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %3659 = getelementptr [1 x ptr], ptr %1277, i32 0, i32 0
  store ptr %3650, ptr %3659, align 8
  %3660 = call ptr %3658(ptr %1277, { ptr, i160 } %3654)
  call void %3660(ptr %1276, { ptr, i160 } %3654)
  store i32 77, ptr %1278, align 4
  %3661 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ i32 }, ptr null, i32 1) to i64))
  %3662 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1279, i32 0, i32 1
  %3663 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1279, i32 0, i32 3
  store ptr @Integer2, ptr %1279, align 8
  store ptr %3661, ptr %3662, align 8
  store i32 7, ptr %3663, align 4
  %3664 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1279)
  store i32 77, ptr %1280, align 4
  %3665 = load i32, ptr %1280, align 4
  %3666 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1279, i32 0, i32 0
  %3667 = load ptr, ptr %3666, align 8
  %3668 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3667, 0
  %3669 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1279, i32 0, i32 1
  %3670 = load ptr, ptr %3669, align 8
  %3671 = insertvalue { ptr, ptr, ptr, i32 } %3668, ptr %3670, 1
  %3672 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1279, i32 0, i32 2
  %3673 = load ptr, ptr %3672, align 8
  %3674 = insertvalue { ptr, ptr, ptr, i32 } %3671, ptr %3673, 2
  %3675 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1279, i32 0, i32 3
  %3676 = load i32, ptr %3675, align 4
  %3677 = insertvalue { ptr, ptr, ptr, i32 } %3674, i32 %3676, 3
  %3678 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1281)
  %3679 = getelementptr [1 x ptr], ptr %1281, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %3679, align 8
  %3680 = call ptr @llvm.invariant.start.p0(i64 320, ptr %3667)
  %3681 = getelementptr ptr, ptr %3667, i32 %3676
  %3682 = getelementptr ptr, ptr %3681, i32 2
  %3683 = load ptr, ptr %3682, align 8
  %3684 = getelementptr [1 x ptr], ptr %1282, i32 0, i32 0
  store ptr @i32_typ, ptr %3684, align 8
  %3685 = call ptr %3683({ ptr, ptr, ptr, i32 } %3677, ptr %1282, i32 %3665)
  call void %3685({ ptr, ptr, ptr, i32 } %3677, { ptr, ptr, ptr, i32 } %3677, ptr %1281, i32 %3665)
  %3686 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1279, i32 0, i32 0
  %3687 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1283, i32 0, i32 0
  %3688 = load ptr, ptr %3686, align 8
  store ptr %3688, ptr %3687, align 8
  %3689 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1279, i32 0, i32 1
  %3690 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1283, i32 0, i32 1
  %3691 = load ptr, ptr %3689, align 8
  store ptr %3691, ptr %3690, align 8
  %3692 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1279, i32 0, i32 2
  %3693 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1283, i32 0, i32 2
  %3694 = load ptr, ptr %3692, align 8
  store ptr %3694, ptr %3693, align 8
  %3695 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1279, i32 0, i32 3
  %3696 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1283, i32 0, i32 3
  %3697 = load i32, ptr %3695, align 4
  store i32 %3697, ptr %3696, align 4
  call void @set_offset(ptr %1283, ptr @Integer2)
  %3698 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1283)
  %3699 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1283, i32 0, i32 0
  %3700 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1284, i32 0, i32 0
  %3701 = load ptr, ptr %3699, align 8
  store ptr %3701, ptr %3700, align 8
  %3702 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1283, i32 0, i32 1
  %3703 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1284, i32 0, i32 1
  %3704 = load ptr, ptr %3702, align 8
  store ptr %3704, ptr %3703, align 8
  %3705 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1283, i32 0, i32 2
  %3706 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1284, i32 0, i32 2
  %3707 = load ptr, ptr %3705, align 8
  store ptr %3707, ptr %3706, align 8
  %3708 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1283, i32 0, i32 3
  %3709 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1284, i32 0, i32 3
  %3710 = load i32, ptr %3708, align 4
  store i32 %3710, ptr %3709, align 4
  %3711 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1284)
  %3712 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1284, i32 0, i32 0
  %3713 = load ptr, ptr %3712, align 8
  %3714 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3713, 0
  %3715 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1284, i32 0, i32 1
  %3716 = load ptr, ptr %3715, align 8
  %3717 = insertvalue { ptr, ptr, ptr, i32 } %3714, ptr %3716, 1
  %3718 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1284, i32 0, i32 2
  %3719 = load ptr, ptr %3718, align 8
  %3720 = insertvalue { ptr, ptr, ptr, i32 } %3717, ptr %3719, 2
  %3721 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1284, i32 0, i32 3
  %3722 = load i32, ptr %3721, align 4
  %3723 = insertvalue { ptr, ptr, ptr, i32 } %3720, i32 %3722, 3
  %3724 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1285)
  %3725 = call ptr @llvm.invariant.start.p0(i64 320, ptr %3713)
  %3726 = getelementptr ptr, ptr %3713, i32 %3722
  %3727 = getelementptr ptr, ptr %3726, i32 7
  %3728 = load ptr, ptr %3727, align 8
  %3729 = call ptr %3728({ ptr, ptr, ptr, i32 } %3723, ptr %1286)
  call void %3729({ ptr, ptr, ptr, i32 } %3723, { ptr, ptr, ptr, i32 } %3723, ptr %1285)
  %3730 = getelementptr { ptr, i160 }, ptr %1284, i32 0, i32 0
  %3731 = load ptr, ptr %3730, align 8
  %3732 = insertvalue { ptr, i160 } undef, ptr %3731, 0
  %3733 = getelementptr { ptr, i160 }, ptr %1284, i32 0, i32 1
  %3734 = load i160, ptr %3733, align 4
  %3735 = insertvalue { ptr, i160 } %3732, i160 %3734, 1
  %3736 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1287)
  %3737 = getelementptr [1 x ptr], ptr %1287, i32 0, i32 0
  store ptr @_parameterization_Integer2, ptr %3737, align 8
  %3738 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %3739 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %3740 = getelementptr [1 x ptr], ptr %1288, i32 0, i32 0
  store ptr %3731, ptr %3740, align 8
  %3741 = call ptr %3739(ptr %1288, { ptr, i160 } %3735)
  call void %3741(ptr %1287, { ptr, i160 } %3735)
  %3742 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1284, i32 0, i32 0
  %3743 = load ptr, ptr %3742, align 8
  %3744 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3743, 0
  %3745 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1284, i32 0, i32 1
  %3746 = load ptr, ptr %3745, align 8
  %3747 = insertvalue { ptr, ptr, ptr, i32 } %3744, ptr %3746, 1
  %3748 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1284, i32 0, i32 2
  %3749 = load ptr, ptr %3748, align 8
  %3750 = insertvalue { ptr, ptr, ptr, i32 } %3747, ptr %3749, 2
  %3751 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1284, i32 0, i32 3
  %3752 = load i32, ptr %3751, align 4
  %3753 = insertvalue { ptr, ptr, ptr, i32 } %3750, i32 %3752, 3
  %3754 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1289)
  %3755 = call ptr @llvm.invariant.start.p0(i64 320, ptr %3743)
  %3756 = getelementptr ptr, ptr %3743, i32 %3752
  %3757 = getelementptr ptr, ptr %3756, i32 8
  %3758 = load ptr, ptr %3757, align 8
  %3759 = call ptr %3758({ ptr, ptr, ptr, i32 } %3753, ptr %1290)
  call void %3759({ ptr, ptr, ptr, i32 } %3753, { ptr, ptr, ptr, i32 } %3753, ptr %1289)
  store i32 5, ptr %1291, align 4
  %3760 = load i32, ptr %1291, align 4
  store i32 0, ptr %1292, align 4
  store i32 25, ptr %1293, align 4
  %3761 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ i32, i32, i32 }, ptr null, i32 1) to i64))
  %3762 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1294, i32 0, i32 1
  %3763 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1294, i32 0, i32 3
  store ptr @Range, ptr %1294, align 8
  store ptr %3761, ptr %3762, align 8
  store i32 7, ptr %3763, align 4
  %3764 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1294)
  store i32 0, ptr %1295, align 4
  store i32 25, ptr %1296, align 4
  %3765 = load i32, ptr %1295, align 4
  %3766 = load i32, ptr %1296, align 4
  %3767 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1294, i32 0, i32 0
  %3768 = load ptr, ptr %3767, align 8
  %3769 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3768, 0
  %3770 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1294, i32 0, i32 1
  %3771 = load ptr, ptr %3770, align 8
  %3772 = insertvalue { ptr, ptr, ptr, i32 } %3769, ptr %3771, 1
  %3773 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1294, i32 0, i32 2
  %3774 = load ptr, ptr %3773, align 8
  %3775 = insertvalue { ptr, ptr, ptr, i32 } %3772, ptr %3774, 2
  %3776 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1294, i32 0, i32 3
  %3777 = load i32, ptr %3776, align 4
  %3778 = insertvalue { ptr, ptr, ptr, i32 } %3775, i32 %3777, 3
  %3779 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1297)
  %3780 = getelementptr [2 x ptr], ptr %1297, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %3780, align 8
  %3781 = getelementptr [2 x ptr], ptr %1297, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %3781, align 8
  %3782 = call ptr @llvm.invariant.start.p0(i64 456, ptr %3768)
  %3783 = getelementptr ptr, ptr %3768, i32 %3777
  %3784 = getelementptr ptr, ptr %3783, i32 4
  %3785 = load ptr, ptr %3784, align 8
  %3786 = getelementptr [2 x ptr], ptr %1298, i32 0, i32 0
  store ptr @i32_typ, ptr %3786, align 8
  %3787 = getelementptr [2 x ptr], ptr %1298, i32 0, i32 1
  store ptr @i32_typ, ptr %3787, align 8
  %3788 = call ptr %3785({ ptr, ptr, ptr, i32 } %3778, ptr %1298, i32 %3765, i32 %3766)
  call void %3788({ ptr, ptr, ptr, i32 } %3778, { ptr, ptr, ptr, i32 } %3778, ptr %1297, i32 %3765, i32 %3766)
  %3789 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1294, i32 0, i32 0
  %3790 = load ptr, ptr %3789, align 8
  %3791 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3790, 0
  %3792 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1294, i32 0, i32 1
  %3793 = load ptr, ptr %3792, align 8
  %3794 = insertvalue { ptr, ptr, ptr, i32 } %3791, ptr %3793, 1
  %3795 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1294, i32 0, i32 2
  %3796 = load ptr, ptr %3795, align 8
  %3797 = insertvalue { ptr, ptr, ptr, i32 } %3794, ptr %3796, 2
  %3798 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1294, i32 0, i32 3
  %3799 = load i32, ptr %3798, align 4
  %3800 = insertvalue { ptr, ptr, ptr, i32 } %3797, i32 %3799, 3
  %3801 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1299)
  %3802 = getelementptr [1 x ptr], ptr %1299, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %3802, align 8
  %3803 = call ptr @llvm.invariant.start.p0(i64 456, ptr %3790)
  %3804 = getelementptr ptr, ptr %3790, i32 %3799
  %3805 = getelementptr ptr, ptr %3804, i32 5
  %3806 = load ptr, ptr %3805, align 8
  %3807 = getelementptr [1 x ptr], ptr %1300, i32 0, i32 0
  store ptr @i32_typ, ptr %3807, align 8
  %3808 = call ptr %3806({ ptr, ptr, ptr, i32 } %3800, ptr %1300, i32 %3760)
  %3809 = call { ptr, ptr, ptr, i32 } %3808({ ptr, ptr, ptr, i32 } %3800, { ptr, ptr, ptr, i32 } %3800, ptr %1299, i32 %3760)
  store { ptr, ptr, ptr, i32 } %3809, ptr %1301, align 8
  %3810 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1301)
  %3811 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1301, i32 0, i32 0
  %3812 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1302, i32 0, i32 0
  %3813 = load ptr, ptr %3811, align 8
  store ptr %3813, ptr %3812, align 8
  %3814 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1301, i32 0, i32 1
  %3815 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1302, i32 0, i32 1
  %3816 = load ptr, ptr %3814, align 8
  store ptr %3816, ptr %3815, align 8
  %3817 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1301, i32 0, i32 2
  %3818 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1302, i32 0, i32 2
  %3819 = load ptr, ptr %3817, align 8
  store ptr %3819, ptr %3818, align 8
  %3820 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1301, i32 0, i32 3
  %3821 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1302, i32 0, i32 3
  %3822 = load i32, ptr %3820, align 4
  store i32 %3822, ptr %3821, align 4
  call void @set_offset(ptr %1302, ptr @Range)
  %3823 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1302)
  %3824 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1302, i32 0, i32 0
  %3825 = load ptr, ptr %3824, align 8
  %3826 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3825, 0
  %3827 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1302, i32 0, i32 1
  %3828 = load ptr, ptr %3827, align 8
  %3829 = insertvalue { ptr, ptr, ptr, i32 } %3826, ptr %3828, 1
  %3830 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1302, i32 0, i32 2
  %3831 = load ptr, ptr %3830, align 8
  %3832 = insertvalue { ptr, ptr, ptr, i32 } %3829, ptr %3831, 2
  %3833 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1302, i32 0, i32 3
  %3834 = load i32, ptr %3833, align 4
  %3835 = insertvalue { ptr, ptr, ptr, i32 } %3832, i32 %3834, 3
  %3836 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1303)
  %3837 = call ptr @llvm.invariant.start.p0(i64 456, ptr %3825)
  %3838 = getelementptr ptr, ptr %3825, i32 %3834
  %3839 = getelementptr ptr, ptr %3838, i32 16
  %3840 = load ptr, ptr %3839, align 8
  %3841 = call ptr %3840({ ptr, ptr, ptr, i32 } %3835, ptr %1304)
  %3842 = call { ptr, ptr, ptr, i32 } %3841({ ptr, ptr, ptr, i32 } %3835, { ptr, ptr, ptr, i32 } %3835, ptr %1303)
  store { ptr, ptr, ptr, i32 } %3842, ptr %1305, align 8
  %3843 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1305)
  %3844 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1305, i32 0, i32 0
  %3845 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1306, i32 0, i32 0
  %3846 = load ptr, ptr %3844, align 8
  store ptr %3846, ptr %3845, align 8
  %3847 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1305, i32 0, i32 1
  %3848 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1306, i32 0, i32 1
  %3849 = load ptr, ptr %3847, align 8
  store ptr %3849, ptr %3848, align 8
  %3850 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1305, i32 0, i32 2
  %3851 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1306, i32 0, i32 2
  %3852 = load ptr, ptr %3850, align 8
  store ptr %3852, ptr %3851, align 8
  %3853 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1305, i32 0, i32 3
  %3854 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1306, i32 0, i32 3
  %3855 = load i32, ptr %3853, align 4
  store i32 %3855, ptr %3854, align 4
  call void @set_offset(ptr %1306, ptr @RangeIterator)
  %3856 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1306)
  %3857 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1306, i32 0, i32 0
  %3858 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1307, i32 0, i32 0
  %3859 = load ptr, ptr %3857, align 8
  store ptr %3859, ptr %3858, align 8
  %3860 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1306, i32 0, i32 1
  %3861 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1307, i32 0, i32 1
  %3862 = load ptr, ptr %3860, align 8
  store ptr %3862, ptr %3861, align 8
  %3863 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1306, i32 0, i32 2
  %3864 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1307, i32 0, i32 2
  %3865 = load ptr, ptr %3863, align 8
  store ptr %3865, ptr %3864, align 8
  %3866 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1306, i32 0, i32 3
  %3867 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1307, i32 0, i32 3
  %3868 = load i32, ptr %3866, align 4
  store i32 %3868, ptr %3867, align 4
  call void @set_offset(ptr %1307, ptr @RangeIterator)
  %3869 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1307)
  %3870 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1307, i32 0, i32 0
  %3871 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1308, i32 0, i32 0
  %3872 = load ptr, ptr %3870, align 8
  store ptr %3872, ptr %3871, align 8
  %3873 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1307, i32 0, i32 1
  %3874 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1308, i32 0, i32 1
  %3875 = load ptr, ptr %3873, align 8
  store ptr %3875, ptr %3874, align 8
  %3876 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1307, i32 0, i32 2
  %3877 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1308, i32 0, i32 2
  %3878 = load ptr, ptr %3876, align 8
  store ptr %3878, ptr %3877, align 8
  %3879 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1307, i32 0, i32 3
  %3880 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1308, i32 0, i32 3
  %3881 = load i32, ptr %3879, align 4
  store i32 %3881, ptr %3880, align 4
  %3882 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1308)
  %3883 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1308, i32 0, i32 0
  store ptr %3883, ptr %.reg2mem26, align 8
  %3884 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1308, i32 0, i32 1
  store ptr %3884, ptr %.reg2mem24, align 8
  %3885 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1308, i32 0, i32 2
  store ptr %3885, ptr %.reg2mem22, align 8
  %3886 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1308, i32 0, i32 3
  store ptr %3886, ptr %.reg2mem20, align 8
  br label %3887

3887:                                             ; preds = %._crit_edge18, %3547
  %.reload27 = load ptr, ptr %.reg2mem26, align 8
  %3888 = load ptr, ptr %.reload27, align 8
  %3889 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3888, 0
  %.reload25 = load ptr, ptr %.reg2mem24, align 8
  %3890 = load ptr, ptr %.reload25, align 8
  %3891 = insertvalue { ptr, ptr, ptr, i32 } %3889, ptr %3890, 1
  %.reload23 = load ptr, ptr %.reg2mem22, align 8
  %3892 = load ptr, ptr %.reload23, align 8
  %3893 = insertvalue { ptr, ptr, ptr, i32 } %3891, ptr %3892, 2
  %.reload21 = load ptr, ptr %.reg2mem20, align 8
  %3894 = load i32, ptr %.reload21, align 4
  %3895 = insertvalue { ptr, ptr, ptr, i32 } %3893, i32 %3894, 3
  %3896 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1309)
  %3897 = call ptr @llvm.invariant.start.p0(i64 72, ptr %3888)
  %3898 = getelementptr ptr, ptr %3888, i32 %3894
  %3899 = getelementptr ptr, ptr %3898, i32 4
  %3900 = load ptr, ptr %3899, align 8
  %3901 = call ptr %3900({ ptr, ptr, ptr, i32 } %3895, ptr %1310)
  %3902 = call { ptr, i32 } %3901({ ptr, ptr, ptr, i32 } %3895, { ptr, ptr, ptr, i32 } %3895, ptr %1309)
  store { ptr, i32 } %3902, ptr %1311, align 8
  %3903 = getelementptr { ptr, i32 }, ptr %1311, i32 0, i32 0
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %1312, align 4
  %3904 = load ptr, ptr %3903, align 8
  %3905 = ptrtoint ptr %3904 to i64
  %3906 = load ptr, ptr %1312, align 8
  %3907 = ptrtoint ptr %3906 to i64
  %3908 = icmp ne i64 %3905, %3907
  store i1 %3908, ptr %1313, align 1
  %3909 = load i1, ptr %1313, align 1
  store i1 %3909, ptr %.reg2mem, align 1
  %.reload19 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload19, label %3910, label %._crit_edge17

._crit_edge17:                                    ; preds = %3887
  br label %3926

3910:                                             ; preds = %3887
  %3911 = getelementptr { ptr, i32 }, ptr %1311, i32 0, i32 1
  %3912 = load i32, ptr %3911, align 4
  store i32 %3912, ptr %1314, align 4
  %3913 = load i32, ptr %1314, align 4
  store i32 %3913, ptr %1315, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %1317, align 4
  %3914 = load i64, ptr %1317, align 4
  store i64 %3914, ptr %1316, align 4
  %3915 = load ptr, ptr %1316, align 8
  %3916 = insertvalue { ptr, i160 } undef, ptr %3915, 0
  %3917 = load i160, ptr %1315, align 4
  %3918 = insertvalue { ptr, i160 } %3916, i160 %3917, 1
  %3919 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1318)
  %3920 = getelementptr [1 x ptr], ptr %1318, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %3920, align 8
  %3921 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %3922 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %3923 = getelementptr [1 x ptr], ptr %1319, i32 0, i32 0
  store ptr %3915, ptr %3923, align 8
  %3924 = call ptr %3922(ptr %1319, { ptr, i160 } %3918)
  call void %3924(ptr %1318, { ptr, i160 } %3918)
  %3925 = load i32, ptr %1314, align 4
  store i32 %3925, ptr %1311, align 4
  br label %3926

3926:                                             ; preds = %._crit_edge17, %3910
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge18, label %3927

._crit_edge18:                                    ; preds = %3926
  br label %3887

3927:                                             ; preds = %3926
  store ptr @_functionliteral_qqfsihafkd, ptr %1320, align 8
  store ptr @_functionliteral_terfioouse, ptr %1321, align 8
  store ptr @_functionliteral_bkyngjuskh, ptr %1322, align 8
  store i32 0, ptr %1323, align 4
  %3928 = load i32, ptr %1323, align 4
  %3929 = getelementptr { ptr }, ptr %1320, i32 0, i32 0
  %3930 = load ptr, ptr %3929, align 8
  %3931 = insertvalue { ptr } undef, ptr %3930, 0
  %3932 = getelementptr { ptr }, ptr %1321, i32 0, i32 0
  %3933 = load ptr, ptr %3932, align 8
  %3934 = insertvalue { ptr } undef, ptr %3933, 0
  store i32 5, ptr %1324, align 4
  %3935 = load i32, ptr %1324, align 4
  %3936 = getelementptr i32, ptr null, i32 %3935
  %3937 = ptrtoint ptr %3936 to i64
  %3938 = call ptr @malloc(i64 %3937)
  store ptr %3938, ptr %1325, align 8
  %3939 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1325, i32 0, i32 0
  %3940 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1326, i32 0, i32 0
  %3941 = load ptr, ptr %3939, align 8
  store ptr %3941, ptr %3940, align 8
  %3942 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1325, i32 0, i32 1
  %3943 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1326, i32 0, i32 1
  %3944 = load ptr, ptr %3942, align 8
  store ptr %3944, ptr %3943, align 8
  %3945 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1325, i32 0, i32 2
  %3946 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1326, i32 0, i32 2
  %3947 = load ptr, ptr %3945, align 8
  store ptr %3947, ptr %3946, align 8
  %3948 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1325, i32 0, i32 3
  %3949 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1326, i32 0, i32 3
  %3950 = load i32, ptr %3948, align 4
  store i32 %3950, ptr %3949, align 4
  %3951 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1326)
  store i32 1, ptr %1327, align 4
  store i32 0, ptr %1328, align 4
  %3952 = load ptr, ptr %1326, align 8
  %3953 = load i32, ptr %1328, align 4
  %3954 = getelementptr i32, ptr null, i32 %3953
  %3955 = ptrtoint ptr %3954 to i64
  %3956 = getelementptr i8, ptr %3952, i64 %3955
  %3957 = load i32, ptr %1327, align 4
  store i32 %3957, ptr %3956, align 4
  store i32 2, ptr %1329, align 4
  store i32 1, ptr %1330, align 4
  %3958 = load ptr, ptr %1326, align 8
  %3959 = load i32, ptr %1330, align 4
  %3960 = getelementptr i32, ptr null, i32 %3959
  %3961 = ptrtoint ptr %3960 to i64
  %3962 = getelementptr i8, ptr %3958, i64 %3961
  %3963 = load i32, ptr %1329, align 4
  store i32 %3963, ptr %3962, align 4
  store i32 3, ptr %1331, align 4
  store i32 2, ptr %1332, align 4
  %3964 = load ptr, ptr %1326, align 8
  %3965 = load i32, ptr %1332, align 4
  %3966 = getelementptr i32, ptr null, i32 %3965
  %3967 = ptrtoint ptr %3966 to i64
  %3968 = getelementptr i8, ptr %3964, i64 %3967
  %3969 = load i32, ptr %1331, align 4
  store i32 %3969, ptr %3968, align 4
  store i32 4, ptr %1333, align 4
  store i32 3, ptr %1334, align 4
  %3970 = load ptr, ptr %1326, align 8
  %3971 = load i32, ptr %1334, align 4
  %3972 = getelementptr i32, ptr null, i32 %3971
  %3973 = ptrtoint ptr %3972 to i64
  %3974 = getelementptr i8, ptr %3970, i64 %3973
  %3975 = load i32, ptr %1333, align 4
  store i32 %3975, ptr %3974, align 4
  store i32 4, ptr %1335, align 4
  store i32 5, ptr %1336, align 4
  %3976 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %3977 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1337, i32 0, i32 1
  %3978 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1337, i32 0, i32 3
  store ptr @IntArray, ptr %1337, align 8
  store ptr %3976, ptr %3977, align 8
  store i32 7, ptr %3978, align 4
  %3979 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1337)
  store i32 4, ptr %1338, align 4
  store i32 5, ptr %1339, align 4
  %3980 = getelementptr { ptr }, ptr %1326, i32 0, i32 0
  %3981 = load ptr, ptr %3980, align 8
  %3982 = insertvalue { ptr } undef, ptr %3981, 0
  %3983 = load i32, ptr %1338, align 4
  %3984 = load i32, ptr %1339, align 4
  %3985 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1337, i32 0, i32 0
  %3986 = load ptr, ptr %3985, align 8
  %3987 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3986, 0
  %3988 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1337, i32 0, i32 1
  %3989 = load ptr, ptr %3988, align 8
  %3990 = insertvalue { ptr, ptr, ptr, i32 } %3987, ptr %3989, 1
  %3991 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1337, i32 0, i32 2
  %3992 = load ptr, ptr %3991, align 8
  %3993 = insertvalue { ptr, ptr, ptr, i32 } %3990, ptr %3992, 2
  %3994 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1337, i32 0, i32 3
  %3995 = load i32, ptr %3994, align 4
  %3996 = insertvalue { ptr, ptr, ptr, i32 } %3993, i32 %3995, 3
  %3997 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1340)
  %3998 = getelementptr [3 x ptr], ptr %1340, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %3998, align 8
  %3999 = getelementptr [3 x ptr], ptr %1340, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %3999, align 8
  %4000 = getelementptr [3 x ptr], ptr %1340, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %4000, align 8
  %4001 = call ptr @llvm.invariant.start.p0(i64 616, ptr %3986)
  %4002 = getelementptr ptr, ptr %3986, i32 %3995
  %4003 = getelementptr ptr, ptr %4002, i32 5
  %4004 = load ptr, ptr %4003, align 8
  %4005 = getelementptr [3 x ptr], ptr %1341, i32 0, i32 0
  store ptr @buffer_typ, ptr %4005, align 8
  %4006 = getelementptr [3 x ptr], ptr %1341, i32 0, i32 1
  store ptr @i32_typ, ptr %4006, align 8
  %4007 = getelementptr [3 x ptr], ptr %1341, i32 0, i32 2
  store ptr @i32_typ, ptr %4007, align 8
  %4008 = call ptr %4004({ ptr, ptr, ptr, i32 } %3996, ptr %1341, { ptr } %3982, i32 %3983, i32 %3984)
  call void %4008({ ptr, ptr, ptr, i32 } %3996, { ptr, ptr, ptr, i32 } %3996, ptr %1340, { ptr } %3982, i32 %3983, i32 %3984)
  %4009 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1337, i32 0, i32 0
  %4010 = load ptr, ptr %4009, align 8
  %4011 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4010, 0
  %4012 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1337, i32 0, i32 1
  %4013 = load ptr, ptr %4012, align 8
  %4014 = insertvalue { ptr, ptr, ptr, i32 } %4011, ptr %4013, 1
  %4015 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1337, i32 0, i32 2
  %4016 = load ptr, ptr %4015, align 8
  %4017 = insertvalue { ptr, ptr, ptr, i32 } %4014, ptr %4016, 2
  %4018 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1337, i32 0, i32 3
  %4019 = load i32, ptr %4018, align 4
  %4020 = insertvalue { ptr, ptr, ptr, i32 } %4017, i32 %4019, 3
  %4021 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1342)
  %4022 = getelementptr [1 x ptr], ptr %1342, i32 0, i32 0
  store ptr @_parameterization_FunctionPtri32_to_Ptri32, ptr %4022, align 8
  %4023 = call ptr @llvm.invariant.start.p0(i64 616, ptr %4010)
  %4024 = getelementptr ptr, ptr %4010, i32 %4019
  %4025 = getelementptr ptr, ptr %4024, i32 18
  %4026 = load ptr, ptr %4025, align 8
  %4027 = getelementptr [1 x ptr], ptr %1343, i32 0, i32 0
  store ptr @function_typ, ptr %4027, align 8
  %4028 = call ptr %4026({ ptr, ptr, ptr, i32 } %4020, ptr %1343, { ptr } %3934)
  %4029 = call { ptr, ptr, ptr, i32 } %4028({ ptr, ptr, ptr, i32 } %4020, { ptr, ptr, ptr, i32 } %4020, ptr %1342, { ptr } %3934)
  store { ptr, ptr, ptr, i32 } %4029, ptr %1344, align 8
  %4030 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1344)
  %4031 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1344, i32 0, i32 0
  %4032 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1345, i32 0, i32 0
  %4033 = load ptr, ptr %4031, align 8
  store ptr %4033, ptr %4032, align 8
  %4034 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1344, i32 0, i32 1
  %4035 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1345, i32 0, i32 1
  %4036 = load ptr, ptr %4034, align 8
  store ptr %4036, ptr %4035, align 8
  %4037 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1344, i32 0, i32 2
  %4038 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1345, i32 0, i32 2
  %4039 = load ptr, ptr %4037, align 8
  store ptr %4039, ptr %4038, align 8
  %4040 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1344, i32 0, i32 3
  %4041 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1345, i32 0, i32 3
  %4042 = load i32, ptr %4040, align 4
  store i32 %4042, ptr %4041, align 4
  call void @set_offset(ptr %1345, ptr @IntArray)
  %4043 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1345)
  %4044 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1345, i32 0, i32 0
  %4045 = load ptr, ptr %4044, align 8
  %4046 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4045, 0
  %4047 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1345, i32 0, i32 1
  %4048 = load ptr, ptr %4047, align 8
  %4049 = insertvalue { ptr, ptr, ptr, i32 } %4046, ptr %4048, 1
  %4050 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1345, i32 0, i32 2
  %4051 = load ptr, ptr %4050, align 8
  %4052 = insertvalue { ptr, ptr, ptr, i32 } %4049, ptr %4051, 2
  %4053 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1345, i32 0, i32 3
  %4054 = load i32, ptr %4053, align 4
  %4055 = insertvalue { ptr, ptr, ptr, i32 } %4052, i32 %4054, 3
  %4056 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1346)
  %4057 = getelementptr [2 x ptr], ptr %1346, i32 0, i32 1
  store ptr @_parameterization_FunctionPtri32._Ptri32_to_Ptri32, ptr %4057, align 8
  %4058 = getelementptr [2 x ptr], ptr %1346, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %4058, align 8
  %4059 = call ptr @llvm.invariant.start.p0(i64 616, ptr %4045)
  %4060 = getelementptr ptr, ptr %4045, i32 %4054
  %4061 = getelementptr ptr, ptr %4060, i32 15
  %4062 = load ptr, ptr %4061, align 8
  %4063 = getelementptr [2 x ptr], ptr %1347, i32 0, i32 0
  store ptr @i32_typ, ptr %4063, align 8
  %4064 = getelementptr [2 x ptr], ptr %1347, i32 0, i32 1
  store ptr @function_typ, ptr %4064, align 8
  %4065 = call ptr %4062({ ptr, ptr, ptr, i32 } %4055, ptr %1347, i32 %3928, { ptr } %3931)
  %4066 = call i32 %4065({ ptr, ptr, ptr, i32 } %4055, { ptr, ptr, ptr, i32 } %4055, ptr %1346, i32 %3928, { ptr } %3931)
  store i32 %4066, ptr %1348, align 4
  %4067 = load i32, ptr %1348, align 4
  store i32 %4067, ptr %1349, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %1351, align 4
  %4068 = load i64, ptr %1351, align 4
  store i64 %4068, ptr %1350, align 4
  %4069 = load ptr, ptr %1350, align 8
  %4070 = insertvalue { ptr, i160 } undef, ptr %4069, 0
  %4071 = load i160, ptr %1349, align 4
  %4072 = insertvalue { ptr, i160 } %4070, i160 %4071, 1
  %4073 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1352)
  %4074 = getelementptr [1 x ptr], ptr %1352, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %4074, align 8
  %4075 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %4076 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %4077 = getelementptr [1 x ptr], ptr %1353, i32 0, i32 0
  store ptr %4069, ptr %4077, align 8
  %4078 = call ptr %4076(ptr %1353, { ptr, i160 } %4072)
  call void %4078(ptr %1352, { ptr, i160 } %4072)
  store ptr @_functionliteral_kpgenjgubx, ptr %1354, align 8
  %4079 = getelementptr { ptr }, ptr %1354, i32 0, i32 0
  %4080 = load ptr, ptr %4079, align 8
  %4081 = insertvalue { ptr } undef, ptr %4080, 0
  store i32 5, ptr %1355, align 4
  %4082 = load i32, ptr %1355, align 4
  %4083 = getelementptr i32, ptr null, i32 %4082
  %4084 = ptrtoint ptr %4083 to i64
  %4085 = call ptr @malloc(i64 %4084)
  store ptr %4085, ptr %1356, align 8
  %4086 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1356, i32 0, i32 0
  %4087 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1357, i32 0, i32 0
  %4088 = load ptr, ptr %4086, align 8
  store ptr %4088, ptr %4087, align 8
  %4089 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1356, i32 0, i32 1
  %4090 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1357, i32 0, i32 1
  %4091 = load ptr, ptr %4089, align 8
  store ptr %4091, ptr %4090, align 8
  %4092 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1356, i32 0, i32 2
  %4093 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1357, i32 0, i32 2
  %4094 = load ptr, ptr %4092, align 8
  store ptr %4094, ptr %4093, align 8
  %4095 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1356, i32 0, i32 3
  %4096 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1357, i32 0, i32 3
  %4097 = load i32, ptr %4095, align 4
  store i32 %4097, ptr %4096, align 4
  %4098 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1357)
  store i32 5, ptr %1358, align 4
  store i32 0, ptr %1359, align 4
  %4099 = load ptr, ptr %1357, align 8
  %4100 = load i32, ptr %1359, align 4
  %4101 = getelementptr i32, ptr null, i32 %4100
  %4102 = ptrtoint ptr %4101 to i64
  %4103 = getelementptr i8, ptr %4099, i64 %4102
  %4104 = load i32, ptr %1358, align 4
  store i32 %4104, ptr %4103, align 4
  store i32 6, ptr %1360, align 4
  store i32 1, ptr %1361, align 4
  %4105 = load ptr, ptr %1357, align 8
  %4106 = load i32, ptr %1361, align 4
  %4107 = getelementptr i32, ptr null, i32 %4106
  %4108 = ptrtoint ptr %4107 to i64
  %4109 = getelementptr i8, ptr %4105, i64 %4108
  %4110 = load i32, ptr %1360, align 4
  store i32 %4110, ptr %4109, align 4
  store i32 7, ptr %1362, align 4
  store i32 2, ptr %1363, align 4
  %4111 = load ptr, ptr %1357, align 8
  %4112 = load i32, ptr %1363, align 4
  %4113 = getelementptr i32, ptr null, i32 %4112
  %4114 = ptrtoint ptr %4113 to i64
  %4115 = getelementptr i8, ptr %4111, i64 %4114
  %4116 = load i32, ptr %1362, align 4
  store i32 %4116, ptr %4115, align 4
  store i32 8, ptr %1364, align 4
  store i32 3, ptr %1365, align 4
  %4117 = load ptr, ptr %1357, align 8
  %4118 = load i32, ptr %1365, align 4
  %4119 = getelementptr i32, ptr null, i32 %4118
  %4120 = ptrtoint ptr %4119 to i64
  %4121 = getelementptr i8, ptr %4117, i64 %4120
  %4122 = load i32, ptr %1364, align 4
  store i32 %4122, ptr %4121, align 4
  store i32 4, ptr %1366, align 4
  store i32 5, ptr %1367, align 4
  %4123 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %4124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1368, i32 0, i32 1
  %4125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1368, i32 0, i32 3
  store ptr @IntArray, ptr %1368, align 8
  store ptr %4123, ptr %4124, align 8
  store i32 7, ptr %4125, align 4
  %4126 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1368)
  store i32 4, ptr %1369, align 4
  store i32 5, ptr %1370, align 4
  %4127 = getelementptr { ptr }, ptr %1357, i32 0, i32 0
  %4128 = load ptr, ptr %4127, align 8
  %4129 = insertvalue { ptr } undef, ptr %4128, 0
  %4130 = load i32, ptr %1369, align 4
  %4131 = load i32, ptr %1370, align 4
  %4132 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1368, i32 0, i32 0
  %4133 = load ptr, ptr %4132, align 8
  %4134 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4133, 0
  %4135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1368, i32 0, i32 1
  %4136 = load ptr, ptr %4135, align 8
  %4137 = insertvalue { ptr, ptr, ptr, i32 } %4134, ptr %4136, 1
  %4138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1368, i32 0, i32 2
  %4139 = load ptr, ptr %4138, align 8
  %4140 = insertvalue { ptr, ptr, ptr, i32 } %4137, ptr %4139, 2
  %4141 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1368, i32 0, i32 3
  %4142 = load i32, ptr %4141, align 4
  %4143 = insertvalue { ptr, ptr, ptr, i32 } %4140, i32 %4142, 3
  %4144 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1371)
  %4145 = getelementptr [3 x ptr], ptr %1371, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %4145, align 8
  %4146 = getelementptr [3 x ptr], ptr %1371, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %4146, align 8
  %4147 = getelementptr [3 x ptr], ptr %1371, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %4147, align 8
  %4148 = call ptr @llvm.invariant.start.p0(i64 616, ptr %4133)
  %4149 = getelementptr ptr, ptr %4133, i32 %4142
  %4150 = getelementptr ptr, ptr %4149, i32 5
  %4151 = load ptr, ptr %4150, align 8
  %4152 = getelementptr [3 x ptr], ptr %1372, i32 0, i32 0
  store ptr @buffer_typ, ptr %4152, align 8
  %4153 = getelementptr [3 x ptr], ptr %1372, i32 0, i32 1
  store ptr @i32_typ, ptr %4153, align 8
  %4154 = getelementptr [3 x ptr], ptr %1372, i32 0, i32 2
  store ptr @i32_typ, ptr %4154, align 8
  %4155 = call ptr %4151({ ptr, ptr, ptr, i32 } %4143, ptr %1372, { ptr } %4129, i32 %4130, i32 %4131)
  call void %4155({ ptr, ptr, ptr, i32 } %4143, { ptr, ptr, ptr, i32 } %4143, ptr %1371, { ptr } %4129, i32 %4130, i32 %4131)
  %4156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1368, i32 0, i32 0
  %4157 = load ptr, ptr %4156, align 8
  %4158 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4157, 0
  %4159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1368, i32 0, i32 1
  %4160 = load ptr, ptr %4159, align 8
  %4161 = insertvalue { ptr, ptr, ptr, i32 } %4158, ptr %4160, 1
  %4162 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1368, i32 0, i32 2
  %4163 = load ptr, ptr %4162, align 8
  %4164 = insertvalue { ptr, ptr, ptr, i32 } %4161, ptr %4163, 2
  %4165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1368, i32 0, i32 3
  %4166 = load i32, ptr %4165, align 4
  %4167 = insertvalue { ptr, ptr, ptr, i32 } %4164, i32 %4166, 3
  %4168 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1373)
  %4169 = getelementptr [1 x ptr], ptr %1373, i32 0, i32 0
  store ptr @_parameterization_FunctionPtri32_to_Nothing, ptr %4169, align 8
  %4170 = call ptr @llvm.invariant.start.p0(i64 616, ptr %4157)
  %4171 = getelementptr ptr, ptr %4157, i32 %4166
  %4172 = getelementptr ptr, ptr %4171, i32 14
  %4173 = load ptr, ptr %4172, align 8
  %4174 = getelementptr [1 x ptr], ptr %1374, i32 0, i32 0
  store ptr @function_typ, ptr %4174, align 8
  %4175 = call ptr %4173({ ptr, ptr, ptr, i32 } %4167, ptr %1374, { ptr } %4081)
  call void %4175({ ptr, ptr, ptr, i32 } %4167, { ptr, ptr, ptr, i32 } %4167, ptr %1373, { ptr } %4081)
  store i32 13, ptr %1375, align 4
  %4176 = load i32, ptr %1375, align 4
  %4177 = getelementptr i8, ptr null, i32 %4176
  %4178 = ptrtoint ptr %4177 to i64
  %4179 = call ptr @malloc(i64 %4178)
  store ptr %4179, ptr %1376, align 8
  %4180 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1376, i32 0, i32 0
  %4181 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1377, i32 0, i32 0
  %4182 = load ptr, ptr %4180, align 8
  store ptr %4182, ptr %4181, align 8
  %4183 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1376, i32 0, i32 1
  %4184 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1377, i32 0, i32 1
  %4185 = load ptr, ptr %4183, align 8
  store ptr %4185, ptr %4184, align 8
  %4186 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1376, i32 0, i32 2
  %4187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1377, i32 0, i32 2
  %4188 = load ptr, ptr %4186, align 8
  store ptr %4188, ptr %4187, align 8
  %4189 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1376, i32 0, i32 3
  %4190 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1377, i32 0, i32 3
  %4191 = load i32, ptr %4189, align 4
  store i32 %4191, ptr %4190, align 4
  %4192 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1377)
  store i32 0, ptr %1378, align 4
  %4193 = load ptr, ptr %1377, align 8
  %4194 = load i32, ptr %1378, align 4
  %4195 = getelementptr [12 x i8], ptr null, i32 %4194
  %4196 = ptrtoint ptr %4195 to i64
  %4197 = getelementptr i8, ptr %4193, i64 %4196
  %4198 = load i96, ptr @dtohd_bigtingstxt, align 4
  store i96 %4198, ptr %4197, align 4
  store i32 12, ptr %1379, align 4
  store i32 13, ptr %1380, align 4
  %4199 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %4200 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1381, i32 0, i32 1
  %4201 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1381, i32 0, i32 3
  store ptr @String, ptr %1381, align 8
  store ptr %4199, ptr %4200, align 8
  store i32 7, ptr %4201, align 4
  %4202 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1381)
  store i32 12, ptr %1382, align 4
  store i32 13, ptr %1383, align 4
  %4203 = getelementptr { ptr }, ptr %1377, i32 0, i32 0
  %4204 = load ptr, ptr %4203, align 8
  %4205 = insertvalue { ptr } undef, ptr %4204, 0
  %4206 = load i32, ptr %1382, align 4
  %4207 = load i32, ptr %1383, align 4
  %4208 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1381, i32 0, i32 0
  %4209 = load ptr, ptr %4208, align 8
  %4210 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4209, 0
  %4211 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1381, i32 0, i32 1
  %4212 = load ptr, ptr %4211, align 8
  %4213 = insertvalue { ptr, ptr, ptr, i32 } %4210, ptr %4212, 1
  %4214 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1381, i32 0, i32 2
  %4215 = load ptr, ptr %4214, align 8
  %4216 = insertvalue { ptr, ptr, ptr, i32 } %4213, ptr %4215, 2
  %4217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1381, i32 0, i32 3
  %4218 = load i32, ptr %4217, align 4
  %4219 = insertvalue { ptr, ptr, ptr, i32 } %4216, i32 %4218, 3
  %4220 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1384)
  %4221 = getelementptr [3 x ptr], ptr %1384, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %4221, align 8
  %4222 = getelementptr [3 x ptr], ptr %1384, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %4222, align 8
  %4223 = getelementptr [3 x ptr], ptr %1384, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %4223, align 8
  %4224 = call ptr @llvm.invariant.start.p0(i64 280, ptr %4209)
  %4225 = getelementptr ptr, ptr %4209, i32 %4218
  %4226 = getelementptr ptr, ptr %4225, i32 4
  %4227 = load ptr, ptr %4226, align 8
  %4228 = getelementptr [3 x ptr], ptr %1385, i32 0, i32 0
  store ptr @buffer_typ, ptr %4228, align 8
  %4229 = getelementptr [3 x ptr], ptr %1385, i32 0, i32 1
  store ptr @i32_typ, ptr %4229, align 8
  %4230 = getelementptr [3 x ptr], ptr %1385, i32 0, i32 2
  store ptr @i32_typ, ptr %4230, align 8
  %4231 = call ptr %4227({ ptr, ptr, ptr, i32 } %4219, ptr %1385, { ptr } %4205, i32 %4206, i32 %4207)
  call void %4231({ ptr, ptr, ptr, i32 } %4219, { ptr, ptr, ptr, i32 } %4219, ptr %1384, { ptr } %4205, i32 %4206, i32 %4207)
  store i32 21, ptr %1386, align 4
  %4232 = load i32, ptr %1386, align 4
  %4233 = getelementptr i8, ptr null, i32 %4232
  %4234 = ptrtoint ptr %4233 to i64
  %4235 = call ptr @malloc(i64 %4234)
  store ptr %4235, ptr %1387, align 8
  %4236 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1387, i32 0, i32 0
  %4237 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1388, i32 0, i32 0
  %4238 = load ptr, ptr %4236, align 8
  store ptr %4238, ptr %4237, align 8
  %4239 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1387, i32 0, i32 1
  %4240 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1388, i32 0, i32 1
  %4241 = load ptr, ptr %4239, align 8
  store ptr %4241, ptr %4240, align 8
  %4242 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1387, i32 0, i32 2
  %4243 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1388, i32 0, i32 2
  %4244 = load ptr, ptr %4242, align 8
  store ptr %4244, ptr %4243, align 8
  %4245 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1387, i32 0, i32 3
  %4246 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1388, i32 0, i32 3
  %4247 = load i32, ptr %4245, align 4
  store i32 %4247, ptr %4246, align 4
  %4248 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1388)
  store i32 0, ptr %1389, align 4
  %4249 = load ptr, ptr %1388, align 8
  %4250 = load i32, ptr %1389, align 4
  %4251 = getelementptr [20 x i8], ptr null, i32 %4250
  %4252 = ptrtoint ptr %4251 to i64
  %4253 = getelementptr i8, ptr %4249, i64 %4252
  %4254 = load i160, ptr @xmrwq_thisnis_hownwe_donit, align 4
  store i160 %4254, ptr %4253, align 4
  store i32 20, ptr %1390, align 4
  store i32 21, ptr %1391, align 4
  %4255 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %4256 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1392, i32 0, i32 1
  %4257 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1392, i32 0, i32 3
  store ptr @String, ptr %1392, align 8
  store ptr %4255, ptr %4256, align 8
  store i32 7, ptr %4257, align 4
  %4258 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1392)
  store i32 20, ptr %1393, align 4
  store i32 21, ptr %1394, align 4
  %4259 = getelementptr { ptr }, ptr %1388, i32 0, i32 0
  %4260 = load ptr, ptr %4259, align 8
  %4261 = insertvalue { ptr } undef, ptr %4260, 0
  %4262 = load i32, ptr %1393, align 4
  %4263 = load i32, ptr %1394, align 4
  %4264 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1392, i32 0, i32 0
  %4265 = load ptr, ptr %4264, align 8
  %4266 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4265, 0
  %4267 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1392, i32 0, i32 1
  %4268 = load ptr, ptr %4267, align 8
  %4269 = insertvalue { ptr, ptr, ptr, i32 } %4266, ptr %4268, 1
  %4270 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1392, i32 0, i32 2
  %4271 = load ptr, ptr %4270, align 8
  %4272 = insertvalue { ptr, ptr, ptr, i32 } %4269, ptr %4271, 2
  %4273 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1392, i32 0, i32 3
  %4274 = load i32, ptr %4273, align 4
  %4275 = insertvalue { ptr, ptr, ptr, i32 } %4272, i32 %4274, 3
  %4276 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1395)
  %4277 = getelementptr [3 x ptr], ptr %1395, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %4277, align 8
  %4278 = getelementptr [3 x ptr], ptr %1395, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %4278, align 8
  %4279 = getelementptr [3 x ptr], ptr %1395, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %4279, align 8
  %4280 = call ptr @llvm.invariant.start.p0(i64 280, ptr %4265)
  %4281 = getelementptr ptr, ptr %4265, i32 %4274
  %4282 = getelementptr ptr, ptr %4281, i32 4
  %4283 = load ptr, ptr %4282, align 8
  %4284 = getelementptr [3 x ptr], ptr %1396, i32 0, i32 0
  store ptr @buffer_typ, ptr %4284, align 8
  %4285 = getelementptr [3 x ptr], ptr %1396, i32 0, i32 1
  store ptr @i32_typ, ptr %4285, align 8
  %4286 = getelementptr [3 x ptr], ptr %1396, i32 0, i32 2
  store ptr @i32_typ, ptr %4286, align 8
  %4287 = call ptr %4283({ ptr, ptr, ptr, i32 } %4275, ptr %1396, { ptr } %4261, i32 %4262, i32 %4263)
  call void %4287({ ptr, ptr, ptr, i32 } %4275, { ptr, ptr, ptr, i32 } %4275, ptr %1395, { ptr } %4261, i32 %4262, i32 %4263)
  %4288 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1381, i32 0, i32 0
  %4289 = load ptr, ptr %4288, align 8
  %4290 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4289, 0
  %4291 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1381, i32 0, i32 1
  %4292 = load ptr, ptr %4291, align 8
  %4293 = insertvalue { ptr, ptr, ptr, i32 } %4290, ptr %4292, 1
  %4294 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1381, i32 0, i32 2
  %4295 = load ptr, ptr %4294, align 8
  %4296 = insertvalue { ptr, ptr, ptr, i32 } %4293, ptr %4295, 2
  %4297 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1381, i32 0, i32 3
  %4298 = load i32, ptr %4297, align 4
  %4299 = insertvalue { ptr, ptr, ptr, i32 } %4296, i32 %4298, 3
  %4300 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1392, i32 0, i32 0
  %4301 = load ptr, ptr %4300, align 8
  %4302 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4301, 0
  %4303 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1392, i32 0, i32 1
  %4304 = load ptr, ptr %4303, align 8
  %4305 = insertvalue { ptr, ptr, ptr, i32 } %4302, ptr %4304, 1
  %4306 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1392, i32 0, i32 2
  %4307 = load ptr, ptr %4306, align 8
  %4308 = insertvalue { ptr, ptr, ptr, i32 } %4305, ptr %4307, 2
  %4309 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1392, i32 0, i32 3
  %4310 = load i32, ptr %4309, align 4
  %4311 = insertvalue { ptr, ptr, ptr, i32 } %4308, i32 %4310, 3
  call void @write_file({ ptr, ptr, ptr, i32 } %4299, { ptr, ptr, ptr, i32 } %4311)
  store i32 13, ptr %1397, align 4
  %4312 = load i32, ptr %1397, align 4
  %4313 = getelementptr i8, ptr null, i32 %4312
  %4314 = ptrtoint ptr %4313 to i64
  %4315 = call ptr @malloc(i64 %4314)
  store ptr %4315, ptr %1398, align 8
  %4316 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1398, i32 0, i32 0
  %4317 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1399, i32 0, i32 0
  %4318 = load ptr, ptr %4316, align 8
  store ptr %4318, ptr %4317, align 8
  %4319 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1398, i32 0, i32 1
  %4320 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1399, i32 0, i32 1
  %4321 = load ptr, ptr %4319, align 8
  store ptr %4321, ptr %4320, align 8
  %4322 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1398, i32 0, i32 2
  %4323 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1399, i32 0, i32 2
  %4324 = load ptr, ptr %4322, align 8
  store ptr %4324, ptr %4323, align 8
  %4325 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1398, i32 0, i32 3
  %4326 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1399, i32 0, i32 3
  %4327 = load i32, ptr %4325, align 4
  store i32 %4327, ptr %4326, align 4
  %4328 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1399)
  store i32 0, ptr %1400, align 4
  %4329 = load ptr, ptr %1399, align 8
  %4330 = load i32, ptr %1400, align 4
  %4331 = getelementptr [12 x i8], ptr null, i32 %4330
  %4332 = ptrtoint ptr %4331 to i64
  %4333 = getelementptr i8, ptr %4329, i64 %4332
  %4334 = load i96, ptr @lywol_bigtingstxt, align 4
  store i96 %4334, ptr %4333, align 4
  store i32 12, ptr %1401, align 4
  store i32 13, ptr %1402, align 4
  %4335 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %4336 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1403, i32 0, i32 1
  %4337 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1403, i32 0, i32 3
  store ptr @String, ptr %1403, align 8
  store ptr %4335, ptr %4336, align 8
  store i32 7, ptr %4337, align 4
  %4338 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1403)
  store i32 12, ptr %1404, align 4
  store i32 13, ptr %1405, align 4
  %4339 = getelementptr { ptr }, ptr %1399, i32 0, i32 0
  %4340 = load ptr, ptr %4339, align 8
  %4341 = insertvalue { ptr } undef, ptr %4340, 0
  %4342 = load i32, ptr %1404, align 4
  %4343 = load i32, ptr %1405, align 4
  %4344 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1403, i32 0, i32 0
  %4345 = load ptr, ptr %4344, align 8
  %4346 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4345, 0
  %4347 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1403, i32 0, i32 1
  %4348 = load ptr, ptr %4347, align 8
  %4349 = insertvalue { ptr, ptr, ptr, i32 } %4346, ptr %4348, 1
  %4350 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1403, i32 0, i32 2
  %4351 = load ptr, ptr %4350, align 8
  %4352 = insertvalue { ptr, ptr, ptr, i32 } %4349, ptr %4351, 2
  %4353 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1403, i32 0, i32 3
  %4354 = load i32, ptr %4353, align 4
  %4355 = insertvalue { ptr, ptr, ptr, i32 } %4352, i32 %4354, 3
  %4356 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1406)
  %4357 = getelementptr [3 x ptr], ptr %1406, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %4357, align 8
  %4358 = getelementptr [3 x ptr], ptr %1406, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %4358, align 8
  %4359 = getelementptr [3 x ptr], ptr %1406, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %4359, align 8
  %4360 = call ptr @llvm.invariant.start.p0(i64 280, ptr %4345)
  %4361 = getelementptr ptr, ptr %4345, i32 %4354
  %4362 = getelementptr ptr, ptr %4361, i32 4
  %4363 = load ptr, ptr %4362, align 8
  %4364 = getelementptr [3 x ptr], ptr %1407, i32 0, i32 0
  store ptr @buffer_typ, ptr %4364, align 8
  %4365 = getelementptr [3 x ptr], ptr %1407, i32 0, i32 1
  store ptr @i32_typ, ptr %4365, align 8
  %4366 = getelementptr [3 x ptr], ptr %1407, i32 0, i32 2
  store ptr @i32_typ, ptr %4366, align 8
  %4367 = call ptr %4363({ ptr, ptr, ptr, i32 } %4355, ptr %1407, { ptr } %4341, i32 %4342, i32 %4343)
  call void %4367({ ptr, ptr, ptr, i32 } %4355, { ptr, ptr, ptr, i32 } %4355, ptr %1406, { ptr } %4341, i32 %4342, i32 %4343)
  %4368 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1403, i32 0, i32 0
  %4369 = load ptr, ptr %4368, align 8
  %4370 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4369, 0
  %4371 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1403, i32 0, i32 1
  %4372 = load ptr, ptr %4371, align 8
  %4373 = insertvalue { ptr, ptr, ptr, i32 } %4370, ptr %4372, 1
  %4374 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1403, i32 0, i32 2
  %4375 = load ptr, ptr %4374, align 8
  %4376 = insertvalue { ptr, ptr, ptr, i32 } %4373, ptr %4375, 2
  %4377 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1403, i32 0, i32 3
  %4378 = load i32, ptr %4377, align 4
  %4379 = insertvalue { ptr, ptr, ptr, i32 } %4376, i32 %4378, 3
  %4380 = call { ptr, ptr, ptr, i32 } @read_file({ ptr, ptr, ptr, i32 } %4379)
  store { ptr, ptr, ptr, i32 } %4380, ptr %1408, align 8
  %4381 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1408)
  %4382 = getelementptr { ptr, i160 }, ptr %1408, i32 0, i32 0
  %4383 = load ptr, ptr %4382, align 8
  %4384 = insertvalue { ptr, i160 } undef, ptr %4383, 0
  %4385 = getelementptr { ptr, i160 }, ptr %1408, i32 0, i32 1
  %4386 = load i160, ptr %4385, align 4
  %4387 = insertvalue { ptr, i160 } %4384, i160 %4386, 1
  %4388 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1409)
  %4389 = getelementptr [1 x ptr], ptr %1409, i32 0, i32 0
  store ptr @_parameterization_String, ptr %4389, align 8
  %4390 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %4391 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %4392 = getelementptr [1 x ptr], ptr %1410, i32 0, i32 0
  store ptr %4383, ptr %4392, align 8
  %4393 = call ptr %4391(ptr %1410, { ptr, i160 } %4387)
  call void %4393(ptr %1409, { ptr, i160 } %4387)
  store ptr @_functionliteral_larurcbfyv, ptr %1411, align 8
  %4394 = getelementptr { ptr }, ptr %1411, i32 0, i32 0
  %4395 = load ptr, ptr %4394, align 8
  %4396 = insertvalue { ptr } undef, ptr %4395, 0
  store i32 2, ptr %1412, align 4
  store i32 5, ptr %1413, align 4
  %4397 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ i32, i32, i32 }, ptr null, i32 1) to i64))
  %4398 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1414, i32 0, i32 1
  %4399 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1414, i32 0, i32 3
  store ptr @Range, ptr %1414, align 8
  store ptr %4397, ptr %4398, align 8
  store i32 7, ptr %4399, align 4
  %4400 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1414)
  store i32 2, ptr %1415, align 4
  store i32 5, ptr %1416, align 4
  %4401 = load i32, ptr %1415, align 4
  %4402 = load i32, ptr %1416, align 4
  %4403 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1414, i32 0, i32 0
  %4404 = load ptr, ptr %4403, align 8
  %4405 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4404, 0
  %4406 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1414, i32 0, i32 1
  %4407 = load ptr, ptr %4406, align 8
  %4408 = insertvalue { ptr, ptr, ptr, i32 } %4405, ptr %4407, 1
  %4409 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1414, i32 0, i32 2
  %4410 = load ptr, ptr %4409, align 8
  %4411 = insertvalue { ptr, ptr, ptr, i32 } %4408, ptr %4410, 2
  %4412 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1414, i32 0, i32 3
  %4413 = load i32, ptr %4412, align 4
  %4414 = insertvalue { ptr, ptr, ptr, i32 } %4411, i32 %4413, 3
  %4415 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1417)
  %4416 = getelementptr [2 x ptr], ptr %1417, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %4416, align 8
  %4417 = getelementptr [2 x ptr], ptr %1417, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %4417, align 8
  %4418 = call ptr @llvm.invariant.start.p0(i64 456, ptr %4404)
  %4419 = getelementptr ptr, ptr %4404, i32 %4413
  %4420 = getelementptr ptr, ptr %4419, i32 4
  %4421 = load ptr, ptr %4420, align 8
  %4422 = getelementptr [2 x ptr], ptr %1418, i32 0, i32 0
  store ptr @i32_typ, ptr %4422, align 8
  %4423 = getelementptr [2 x ptr], ptr %1418, i32 0, i32 1
  store ptr @i32_typ, ptr %4423, align 8
  %4424 = call ptr %4421({ ptr, ptr, ptr, i32 } %4414, ptr %1418, i32 %4401, i32 %4402)
  call void %4424({ ptr, ptr, ptr, i32 } %4414, { ptr, ptr, ptr, i32 } %4414, ptr %1417, i32 %4401, i32 %4402)
  %4425 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1414, i32 0, i32 0
  %4426 = load ptr, ptr %4425, align 8
  %4427 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4426, 0
  %4428 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1414, i32 0, i32 1
  %4429 = load ptr, ptr %4428, align 8
  %4430 = insertvalue { ptr, ptr, ptr, i32 } %4427, ptr %4429, 1
  %4431 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1414, i32 0, i32 2
  %4432 = load ptr, ptr %4431, align 8
  %4433 = insertvalue { ptr, ptr, ptr, i32 } %4430, ptr %4432, 2
  %4434 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1414, i32 0, i32 3
  %4435 = load i32, ptr %4434, align 4
  %4436 = insertvalue { ptr, ptr, ptr, i32 } %4433, i32 %4435, 3
  %4437 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1419)
  %4438 = getelementptr [1 x ptr], ptr %1419, i32 0, i32 0
  store ptr @_parameterization_FunctionPtri32_to_Nothing, ptr %4438, align 8
  %4439 = call ptr @llvm.invariant.start.p0(i64 456, ptr %4426)
  %4440 = getelementptr ptr, ptr %4426, i32 %4435
  %4441 = getelementptr ptr, ptr %4440, i32 6
  %4442 = load ptr, ptr %4441, align 8
  %4443 = getelementptr [1 x ptr], ptr %1420, i32 0, i32 0
  store ptr @function_typ, ptr %4443, align 8
  %4444 = call ptr %4442({ ptr, ptr, ptr, i32 } %4436, ptr %1420, { ptr } %4396)
  call void %4444({ ptr, ptr, ptr, i32 } %4436, { ptr, ptr, ptr, i32 } %4436, ptr %1419, { ptr } %4396)
  store ptr @i32toi8, ptr %1421, align 8
  store i32 5, ptr %1422, align 4
  %4445 = load i32, ptr %1422, align 4
  %4446 = load ptr, ptr %1421, align 8
  %4447 = call i8 %4446(i32 %4445)
  store i8 %4447, ptr %1423, align 1
  %4448 = load i8, ptr %1423, align 1
  store i8 %4448, ptr %1424, align 1
  store i64 ptrtoint (ptr @i8_typ to i64), ptr %1426, align 4
  %4449 = load i64, ptr %1426, align 4
  store i64 %4449, ptr %1425, align 4
  %4450 = load ptr, ptr %1425, align 8
  %4451 = insertvalue { ptr, i160 } undef, ptr %4450, 0
  %4452 = load i160, ptr %1424, align 4
  %4453 = insertvalue { ptr, i160 } %4451, i160 %4452, 1
  %4454 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1427)
  %4455 = getelementptr [1 x ptr], ptr %1427, i32 0, i32 0
  store ptr @_parameterization_Ptri8, ptr %4455, align 8
  %4456 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %4457 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %4458 = getelementptr [1 x ptr], ptr %1428, i32 0, i32 0
  store ptr %4450, ptr %4458, align 8
  %4459 = call ptr %4457(ptr %1428, { ptr, i160 } %4453)
  call void %4459(ptr %1427, { ptr, i160 } %4453)
  store ptr @_functionliteral_yhuuxwigph, ptr %1429, align 8
  store i32 6, ptr %1430, align 4
  store i32 4, ptr %1431, align 4
  %4460 = load i32, ptr %1430, align 4
  %4461 = load i32, ptr %1431, align 4
  %4462 = load ptr, ptr %1429, align 8
  %4463 = call ptr @coroutine_create(ptr %4462, ptr @coroutine_dczcwkscnr_passer)
  call void @coroutine_dczcwkscnr_buffer_filler(ptr %4463, i32 %4460, i32 %4461)
  store ptr %4463, ptr %1432, align 8
  %4464 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1432, i32 0, i32 0
  %4465 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1433, i32 0, i32 0
  %4466 = load ptr, ptr %4464, align 8
  store ptr %4466, ptr %4465, align 8
  %4467 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1432, i32 0, i32 1
  %4468 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1433, i32 0, i32 1
  %4469 = load ptr, ptr %4467, align 8
  store ptr %4469, ptr %4468, align 8
  %4470 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1432, i32 0, i32 2
  %4471 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1433, i32 0, i32 2
  %4472 = load ptr, ptr %4470, align 8
  store ptr %4472, ptr %4471, align 8
  %4473 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1432, i32 0, i32 3
  %4474 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1433, i32 0, i32 3
  %4475 = load i32, ptr %4473, align 4
  store i32 %4475, ptr %4474, align 4
  %4476 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1433)
  store i32 2, ptr %1434, align 4
  %4477 = load i32, ptr %1434, align 4
  store i32 %4477, ptr %1435, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %1437, align 4
  %4478 = load i64, ptr %1437, align 4
  store i64 %4478, ptr %1436, align 4
  %4479 = load ptr, ptr %1436, align 8
  %4480 = insertvalue { ptr, i32 } undef, ptr %4479, 0
  %4481 = load i32, ptr %1435, align 4
  %4482 = insertvalue { ptr, i32 } %4480, i32 %4481, 1
  %4483 = load ptr, ptr %1433, align 8
  %4484 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i32 } }, ptr %4483, i32 0, i32 4
  store { ptr, i32 } %4482, ptr %4484, align 8
  call void @coroutine_call(ptr %4483)
  %4485 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i32 } }, ptr %4483, i32 0, i32 4
  %4486 = load { ptr, i32 }, ptr %4485, align 8
  store { ptr, i32 } %4486, ptr %1438, align 8
  %4487 = getelementptr { ptr, i32 }, ptr %1438, i32 0, i32 0
  %4488 = getelementptr { ptr, i32 }, ptr %1439, i32 0, i32 0
  %4489 = load ptr, ptr %4487, align 8
  store ptr %4489, ptr %4488, align 8
  %4490 = getelementptr { ptr, i32 }, ptr %1438, i32 0, i32 1
  %4491 = getelementptr { ptr, i32 }, ptr %1439, i32 0, i32 1
  %4492 = load i32, ptr %4490, align 4
  store i32 %4492, ptr %4491, align 4
  %4493 = getelementptr { ptr, i160 }, ptr %1439, i32 0, i32 0
  %4494 = load ptr, ptr %4493, align 8
  %4495 = insertvalue { ptr, i160 } undef, ptr %4494, 0
  %4496 = getelementptr { ptr, i160 }, ptr %1439, i32 0, i32 1
  %4497 = load i160, ptr %4496, align 4
  %4498 = insertvalue { ptr, i160 } %4495, i160 %4497, 1
  %4499 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1440)
  %4500 = getelementptr [1 x ptr], ptr %1440, i32 0, i32 0
  store ptr @_parameterization_Nil_or_Ptri32, ptr %4500, align 8
  %4501 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %4502 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %4503 = getelementptr [1 x ptr], ptr %1441, i32 0, i32 0
  store ptr %4494, ptr %4503, align 8
  %4504 = call ptr %4502(ptr %1441, { ptr, i160 } %4498)
  call void %4504(ptr %1440, { ptr, i160 } %4498)
  store i32 3, ptr %1442, align 4
  %4505 = load i32, ptr %1442, align 4
  store i32 %4505, ptr %1443, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %1445, align 4
  %4506 = load i64, ptr %1445, align 4
  store i64 %4506, ptr %1444, align 4
  %4507 = load ptr, ptr %1444, align 8
  %4508 = insertvalue { ptr, i32 } undef, ptr %4507, 0
  %4509 = load i32, ptr %1443, align 4
  %4510 = insertvalue { ptr, i32 } %4508, i32 %4509, 1
  %4511 = load ptr, ptr %1433, align 8
  %4512 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i32 } }, ptr %4511, i32 0, i32 4
  store { ptr, i32 } %4510, ptr %4512, align 8
  call void @coroutine_call(ptr %4511)
  %4513 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i32 } }, ptr %4511, i32 0, i32 4
  %4514 = load { ptr, i32 }, ptr %4513, align 8
  store { ptr, i32 } %4514, ptr %1446, align 8
  %4515 = getelementptr { ptr, i32 }, ptr %1446, i32 0, i32 0
  %4516 = getelementptr { ptr, i32 }, ptr %1447, i32 0, i32 0
  %4517 = load ptr, ptr %4515, align 8
  store ptr %4517, ptr %4516, align 8
  %4518 = getelementptr { ptr, i32 }, ptr %1446, i32 0, i32 1
  %4519 = getelementptr { ptr, i32 }, ptr %1447, i32 0, i32 1
  %4520 = load i32, ptr %4518, align 4
  store i32 %4520, ptr %4519, align 4
  %4521 = getelementptr { ptr, i160 }, ptr %1447, i32 0, i32 0
  %4522 = load ptr, ptr %4521, align 8
  %4523 = insertvalue { ptr, i160 } undef, ptr %4522, 0
  %4524 = getelementptr { ptr, i160 }, ptr %1447, i32 0, i32 1
  %4525 = load i160, ptr %4524, align 4
  %4526 = insertvalue { ptr, i160 } %4523, i160 %4525, 1
  %4527 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1448)
  %4528 = getelementptr [1 x ptr], ptr %1448, i32 0, i32 0
  store ptr @_parameterization_Nil_or_Ptri32, ptr %4528, align 8
  %4529 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %4530 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %4531 = getelementptr [1 x ptr], ptr %1449, i32 0, i32 0
  store ptr %4522, ptr %4531, align 8
  %4532 = call ptr %4530(ptr %1449, { ptr, i160 } %4526)
  call void %4532(ptr %1448, { ptr, i160 } %4526)
  %4533 = load ptr, ptr %1322, align 8
  %4534 = call ptr @coroutine_create(ptr %4533, ptr @coroutine_jqxmarjosw_passer)
  call void @coroutine_jqxmarjosw_buffer_filler(ptr %4534)
  store ptr %4534, ptr %1450, align 8
  %4535 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1450, i32 0, i32 0
  %4536 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1451, i32 0, i32 0
  %4537 = load ptr, ptr %4535, align 8
  store ptr %4537, ptr %4536, align 8
  %4538 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1450, i32 0, i32 1
  %4539 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1451, i32 0, i32 1
  %4540 = load ptr, ptr %4538, align 8
  store ptr %4540, ptr %4539, align 8
  %4541 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1450, i32 0, i32 2
  %4542 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1451, i32 0, i32 2
  %4543 = load ptr, ptr %4541, align 8
  store ptr %4543, ptr %4542, align 8
  %4544 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1450, i32 0, i32 3
  %4545 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1451, i32 0, i32 3
  %4546 = load i32, ptr %4544, align 4
  store i32 %4546, ptr %4545, align 4
  %4547 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1451)
  %4548 = load ptr, ptr %1451, align 8
  call void @coroutine_call(ptr %4548)
  %4549 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %4548, i32 0, i32 4
  %4550 = load { ptr, i160 }, ptr %4549, align 8
  store { ptr, i160 } %4550, ptr %1452, align 8
  %4551 = load ptr, ptr %1451, align 8
  %4552 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i32 } }, ptr %4551, i32 0, i32 4
  %4553 = load { ptr, i32 }, ptr %4552, align 8
  store { ptr, i32 } %4553, ptr %1453, align 8
  %4554 = getelementptr { ptr, i32 }, ptr %1453, i32 0, i32 0
  %4555 = getelementptr { ptr, i32 }, ptr %1454, i32 0, i32 0
  %4556 = load ptr, ptr %4554, align 8
  store ptr %4556, ptr %4555, align 8
  %4557 = getelementptr { ptr, i32 }, ptr %1453, i32 0, i32 1
  %4558 = getelementptr { ptr, i32 }, ptr %1454, i32 0, i32 1
  %4559 = load i32, ptr %4557, align 4
  store i32 %4559, ptr %4558, align 4
  %4560 = getelementptr { ptr, i160 }, ptr %1454, i32 0, i32 0
  %4561 = load ptr, ptr %4560, align 8
  %4562 = insertvalue { ptr, i160 } undef, ptr %4561, 0
  %4563 = getelementptr { ptr, i160 }, ptr %1454, i32 0, i32 1
  %4564 = load i160, ptr %4563, align 4
  %4565 = insertvalue { ptr, i160 } %4562, i160 %4564, 1
  %4566 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1455)
  %4567 = getelementptr [1 x ptr], ptr %1455, i32 0, i32 0
  store ptr @_parameterization_Nil_or_Ptri32, ptr %4567, align 8
  %4568 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %4569 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %4570 = getelementptr [1 x ptr], ptr %1456, i32 0, i32 0
  store ptr %4561, ptr %4570, align 8
  %4571 = call ptr %4569(ptr %1456, { ptr, i160 } %4565)
  call void %4571(ptr %1455, { ptr, i160 } %4565)
  %4572 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr, i32 } }, ptr null, i32 1) to i64))
  %4573 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1457, i32 0, i32 1
  %4574 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1457, i32 0, i32 3
  store ptr @Channel, ptr %1457, align 8
  store ptr %4572, ptr %4573, align 8
  store i32 7, ptr %4574, align 4
  %4575 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1457)
  %4576 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1457, i32 0, i32 0
  %4577 = load ptr, ptr %4576, align 8
  %4578 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4577, 0
  %4579 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1457, i32 0, i32 1
  %4580 = load ptr, ptr %4579, align 8
  %4581 = insertvalue { ptr, ptr, ptr, i32 } %4578, ptr %4580, 1
  %4582 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1457, i32 0, i32 2
  %4583 = load ptr, ptr %4582, align 8
  %4584 = insertvalue { ptr, ptr, ptr, i32 } %4581, ptr %4583, 2
  %4585 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1457, i32 0, i32 3
  %4586 = load i32, ptr %4585, align 4
  %4587 = insertvalue { ptr, ptr, ptr, i32 } %4584, i32 %4586, 3
  %4588 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1458)
  %4589 = call ptr @llvm.invariant.start.p0(i64 56, ptr %4577)
  %4590 = getelementptr ptr, ptr %4577, i32 %4586
  %4591 = getelementptr ptr, ptr %4590, i32 1
  %4592 = load ptr, ptr %4591, align 8
  %4593 = call ptr %4592({ ptr, ptr, ptr, i32 } %4587, ptr %1459)
  call void %4593({ ptr, ptr, ptr, i32 } %4587, { ptr, ptr, ptr, i32 } %4587, ptr %1458)
  %4594 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1457, i32 0, i32 0
  %4595 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1460, i32 0, i32 0
  %4596 = load ptr, ptr %4594, align 8
  store ptr %4596, ptr %4595, align 8
  %4597 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1457, i32 0, i32 1
  %4598 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1460, i32 0, i32 1
  %4599 = load ptr, ptr %4597, align 8
  store ptr %4599, ptr %4598, align 8
  %4600 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1457, i32 0, i32 2
  %4601 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1460, i32 0, i32 2
  %4602 = load ptr, ptr %4600, align 8
  store ptr %4602, ptr %4601, align 8
  %4603 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1457, i32 0, i32 3
  %4604 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1460, i32 0, i32 3
  %4605 = load i32, ptr %4603, align 4
  store i32 %4605, ptr %4604, align 4
  call void @set_offset(ptr %1460, ptr @Channel)
  %4606 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1460)
  %4607 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1460, i32 0, i32 0
  %4608 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1461, i32 0, i32 0
  %4609 = load ptr, ptr %4607, align 8
  store ptr %4609, ptr %4608, align 8
  %4610 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1460, i32 0, i32 1
  %4611 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1461, i32 0, i32 1
  %4612 = load ptr, ptr %4610, align 8
  store ptr %4612, ptr %4611, align 8
  %4613 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1460, i32 0, i32 2
  %4614 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1461, i32 0, i32 2
  %4615 = load ptr, ptr %4613, align 8
  store ptr %4615, ptr %4614, align 8
  %4616 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1460, i32 0, i32 3
  %4617 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1461, i32 0, i32 3
  %4618 = load i32, ptr %4616, align 4
  store i32 %4618, ptr %4617, align 4
  %4619 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1461)
  store ptr @_functionliteral_knpzbcorql, ptr %1462, align 8
  %4620 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1461, i32 0, i32 0
  %4621 = load ptr, ptr %4620, align 8
  %4622 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4621, 0
  %4623 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1461, i32 0, i32 1
  %4624 = load ptr, ptr %4623, align 8
  %4625 = insertvalue { ptr, ptr, ptr, i32 } %4622, ptr %4624, 1
  %4626 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1461, i32 0, i32 2
  %4627 = load ptr, ptr %4626, align 8
  %4628 = insertvalue { ptr, ptr, ptr, i32 } %4625, ptr %4627, 2
  %4629 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1461, i32 0, i32 3
  %4630 = load i32, ptr %4629, align 4
  %4631 = insertvalue { ptr, ptr, ptr, i32 } %4628, i32 %4630, 3
  %4632 = load ptr, ptr %1462, align 8
  %4633 = call ptr @coroutine_create(ptr %4632, ptr @coroutine_kjkepmolqw_passer)
  call void @coroutine_kjkepmolqw_buffer_filler(ptr %4633, { ptr, ptr, ptr, i32 } %4631)
  store ptr %4633, ptr %1463, align 8
  %4634 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1463, i32 0, i32 0
  %4635 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1464, i32 0, i32 0
  %4636 = load ptr, ptr %4634, align 8
  store ptr %4636, ptr %4635, align 8
  %4637 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1463, i32 0, i32 1
  %4638 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1464, i32 0, i32 1
  %4639 = load ptr, ptr %4637, align 8
  store ptr %4639, ptr %4638, align 8
  %4640 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1463, i32 0, i32 2
  %4641 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1464, i32 0, i32 2
  %4642 = load ptr, ptr %4640, align 8
  store ptr %4642, ptr %4641, align 8
  %4643 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1463, i32 0, i32 3
  %4644 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1464, i32 0, i32 3
  %4645 = load i32, ptr %4643, align 4
  store i32 %4645, ptr %4644, align 4
  %4646 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1464)
  %4647 = load ptr, ptr %1464, align 8
  call void @coroutine_call(ptr %4647)
  %4648 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %4647, i32 0, i32 4
  %4649 = load { ptr, i160 }, ptr %4648, align 8
  store { ptr, i160 } %4649, ptr %1465, align 8
  %4650 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1461, i32 0, i32 0
  %4651 = load ptr, ptr %4650, align 8
  %4652 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4651, 0
  %4653 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1461, i32 0, i32 1
  %4654 = load ptr, ptr %4653, align 8
  %4655 = insertvalue { ptr, ptr, ptr, i32 } %4652, ptr %4654, 1
  %4656 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1461, i32 0, i32 2
  %4657 = load ptr, ptr %4656, align 8
  %4658 = insertvalue { ptr, ptr, ptr, i32 } %4655, ptr %4657, 2
  %4659 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1461, i32 0, i32 3
  %4660 = load i32, ptr %4659, align 4
  %4661 = insertvalue { ptr, ptr, ptr, i32 } %4658, i32 %4660, 3
  %4662 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1466)
  %4663 = call ptr @llvm.invariant.start.p0(i64 56, ptr %4651)
  %4664 = getelementptr ptr, ptr %4651, i32 %4660
  %4665 = getelementptr ptr, ptr %4664, i32 2
  %4666 = load ptr, ptr %4665, align 8
  %4667 = call ptr %4666({ ptr, ptr, ptr, i32 } %4661, ptr %1467)
  %4668 = call i32 %4667({ ptr, ptr, ptr, i32 } %4661, { ptr, ptr, ptr, i32 } %4661, ptr %1466)
  store i32 %4668, ptr %1468, align 4
  %4669 = load i32, ptr %1468, align 4
  store i32 %4669, ptr %1469, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %1471, align 4
  %4670 = load i64, ptr %1471, align 4
  store i64 %4670, ptr %1470, align 4
  %4671 = load ptr, ptr %1470, align 8
  %4672 = insertvalue { ptr, i160 } undef, ptr %4671, 0
  %4673 = load i160, ptr %1469, align 4
  %4674 = insertvalue { ptr, i160 } %4672, i160 %4673, 1
  %4675 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1472)
  %4676 = getelementptr [1 x ptr], ptr %1472, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %4676, align 8
  %4677 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %4678 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %4679 = getelementptr [1 x ptr], ptr %1473, i32 0, i32 0
  store ptr %4671, ptr %4679, align 8
  %4680 = call ptr %4678(ptr %1473, { ptr, i160 } %4674)
  call void %4680(ptr %1472, { ptr, i160 } %4674)
  store i32 0, ptr %1474, align 4
  %4681 = load i32, ptr %1474, align 4
  %4682 = getelementptr { ptr }, ptr %1320, i32 0, i32 0
  %4683 = load ptr, ptr %4682, align 8
  %4684 = insertvalue { ptr } undef, ptr %4683, 0
  store ptr @_functionliteral_tjuwdziwws, ptr %1475, align 8
  %4685 = getelementptr { ptr }, ptr %1475, i32 0, i32 0
  %4686 = load ptr, ptr %4685, align 8
  %4687 = insertvalue { ptr } undef, ptr %4686, 0
  store ptr @_functionliteral_fpmpugtylp, ptr %1476, align 8
  %4688 = getelementptr { ptr }, ptr %1476, i32 0, i32 0
  %4689 = load ptr, ptr %4688, align 8
  %4690 = insertvalue { ptr } undef, ptr %4689, 0
  store i32 1, ptr %1477, align 4
  store i32 15, ptr %1478, align 4
  %4691 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ i32, i32, i32 }, ptr null, i32 1) to i64))
  %4692 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1479, i32 0, i32 1
  %4693 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1479, i32 0, i32 3
  store ptr @Range, ptr %1479, align 8
  store ptr %4691, ptr %4692, align 8
  store i32 7, ptr %4693, align 4
  %4694 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1479)
  store i32 1, ptr %1480, align 4
  store i32 15, ptr %1481, align 4
  %4695 = load i32, ptr %1480, align 4
  %4696 = load i32, ptr %1481, align 4
  %4697 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1479, i32 0, i32 0
  %4698 = load ptr, ptr %4697, align 8
  %4699 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4698, 0
  %4700 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1479, i32 0, i32 1
  %4701 = load ptr, ptr %4700, align 8
  %4702 = insertvalue { ptr, ptr, ptr, i32 } %4699, ptr %4701, 1
  %4703 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1479, i32 0, i32 2
  %4704 = load ptr, ptr %4703, align 8
  %4705 = insertvalue { ptr, ptr, ptr, i32 } %4702, ptr %4704, 2
  %4706 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1479, i32 0, i32 3
  %4707 = load i32, ptr %4706, align 4
  %4708 = insertvalue { ptr, ptr, ptr, i32 } %4705, i32 %4707, 3
  %4709 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1482)
  %4710 = getelementptr [2 x ptr], ptr %1482, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %4710, align 8
  %4711 = getelementptr [2 x ptr], ptr %1482, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %4711, align 8
  %4712 = call ptr @llvm.invariant.start.p0(i64 456, ptr %4698)
  %4713 = getelementptr ptr, ptr %4698, i32 %4707
  %4714 = getelementptr ptr, ptr %4713, i32 4
  %4715 = load ptr, ptr %4714, align 8
  %4716 = getelementptr [2 x ptr], ptr %1483, i32 0, i32 0
  store ptr @i32_typ, ptr %4716, align 8
  %4717 = getelementptr [2 x ptr], ptr %1483, i32 0, i32 1
  store ptr @i32_typ, ptr %4717, align 8
  %4718 = call ptr %4715({ ptr, ptr, ptr, i32 } %4708, ptr %1483, i32 %4695, i32 %4696)
  call void %4718({ ptr, ptr, ptr, i32 } %4708, { ptr, ptr, ptr, i32 } %4708, ptr %1482, i32 %4695, i32 %4696)
  %4719 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1479, i32 0, i32 0
  %4720 = load ptr, ptr %4719, align 8
  %4721 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4720, 0
  %4722 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1479, i32 0, i32 1
  %4723 = load ptr, ptr %4722, align 8
  %4724 = insertvalue { ptr, ptr, ptr, i32 } %4721, ptr %4723, 1
  %4725 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1479, i32 0, i32 2
  %4726 = load ptr, ptr %4725, align 8
  %4727 = insertvalue { ptr, ptr, ptr, i32 } %4724, ptr %4726, 2
  %4728 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1479, i32 0, i32 3
  %4729 = load i32, ptr %4728, align 4
  %4730 = insertvalue { ptr, ptr, ptr, i32 } %4727, i32 %4729, 3
  %4731 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1484)
  %4732 = getelementptr [1 x ptr], ptr %1484, i32 0, i32 0
  store ptr @_parameterization_FunctionPtri32_to_Ptri32, ptr %4732, align 8
  %4733 = call ptr @llvm.invariant.start.p0(i64 456, ptr %4720)
  %4734 = getelementptr ptr, ptr %4720, i32 %4729
  %4735 = getelementptr ptr, ptr %4734, i32 10
  %4736 = load ptr, ptr %4735, align 8
  %4737 = getelementptr [1 x ptr], ptr %1485, i32 0, i32 0
  store ptr @function_typ, ptr %4737, align 8
  %4738 = call ptr %4736({ ptr, ptr, ptr, i32 } %4730, ptr %1485, { ptr } %4690)
  %4739 = call { ptr, ptr, ptr, i32 } %4738({ ptr, ptr, ptr, i32 } %4730, { ptr, ptr, ptr, i32 } %4730, ptr %1484, { ptr } %4690)
  store { ptr, ptr, ptr, i32 } %4739, ptr %1486, align 8
  %4740 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1486)
  %4741 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1486, i32 0, i32 0
  %4742 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1487, i32 0, i32 0
  %4743 = load ptr, ptr %4741, align 8
  store ptr %4743, ptr %4742, align 8
  %4744 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1486, i32 0, i32 1
  %4745 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1487, i32 0, i32 1
  %4746 = load ptr, ptr %4744, align 8
  store ptr %4746, ptr %4745, align 8
  %4747 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1486, i32 0, i32 2
  %4748 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1487, i32 0, i32 2
  %4749 = load ptr, ptr %4747, align 8
  store ptr %4749, ptr %4748, align 8
  %4750 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1486, i32 0, i32 3
  %4751 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1487, i32 0, i32 3
  %4752 = load i32, ptr %4750, align 4
  store i32 %4752, ptr %4751, align 4
  call void @set_offset(ptr %1487, ptr @IntIterable)
  %4753 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1487)
  %4754 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1487, i32 0, i32 0
  %4755 = load ptr, ptr %4754, align 8
  %4756 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4755, 0
  %4757 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1487, i32 0, i32 1
  %4758 = load ptr, ptr %4757, align 8
  %4759 = insertvalue { ptr, ptr, ptr, i32 } %4756, ptr %4758, 1
  %4760 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1487, i32 0, i32 2
  %4761 = load ptr, ptr %4760, align 8
  %4762 = insertvalue { ptr, ptr, ptr, i32 } %4759, ptr %4761, 2
  %4763 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1487, i32 0, i32 3
  %4764 = load i32, ptr %4763, align 4
  %4765 = insertvalue { ptr, ptr, ptr, i32 } %4762, i32 %4764, 3
  %4766 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1488)
  %4767 = getelementptr [1 x ptr], ptr %1488, i32 0, i32 0
  store ptr @_parameterization_FunctionPtri32_to_Ptri1, ptr %4767, align 8
  %4768 = call ptr @llvm.invariant.start.p0(i64 192, ptr %4755)
  %4769 = getelementptr ptr, ptr %4755, i32 %4764
  %4770 = getelementptr ptr, ptr %4769, i32 5
  %4771 = load ptr, ptr %4770, align 8
  %4772 = getelementptr [1 x ptr], ptr %1489, i32 0, i32 0
  store ptr @function_typ, ptr %4772, align 8
  %4773 = call ptr %4771({ ptr, ptr, ptr, i32 } %4765, ptr %1489, { ptr } %4687)
  %4774 = call { ptr, ptr, ptr, i32 } %4773({ ptr, ptr, ptr, i32 } %4765, { ptr, ptr, ptr, i32 } %4765, ptr %1488, { ptr } %4687)
  store { ptr, ptr, ptr, i32 } %4774, ptr %1490, align 8
  %4775 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1490)
  %4776 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1490, i32 0, i32 0
  %4777 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1491, i32 0, i32 0
  %4778 = load ptr, ptr %4776, align 8
  store ptr %4778, ptr %4777, align 8
  %4779 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1490, i32 0, i32 1
  %4780 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1491, i32 0, i32 1
  %4781 = load ptr, ptr %4779, align 8
  store ptr %4781, ptr %4780, align 8
  %4782 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1490, i32 0, i32 2
  %4783 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1491, i32 0, i32 2
  %4784 = load ptr, ptr %4782, align 8
  store ptr %4784, ptr %4783, align 8
  %4785 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1490, i32 0, i32 3
  %4786 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1491, i32 0, i32 3
  %4787 = load i32, ptr %4785, align 4
  store i32 %4787, ptr %4786, align 4
  call void @set_offset(ptr %1491, ptr @IntIterable)
  %4788 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1491)
  %4789 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1491, i32 0, i32 0
  %4790 = load ptr, ptr %4789, align 8
  %4791 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4790, 0
  %4792 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1491, i32 0, i32 1
  %4793 = load ptr, ptr %4792, align 8
  %4794 = insertvalue { ptr, ptr, ptr, i32 } %4791, ptr %4793, 1
  %4795 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1491, i32 0, i32 2
  %4796 = load ptr, ptr %4795, align 8
  %4797 = insertvalue { ptr, ptr, ptr, i32 } %4794, ptr %4796, 2
  %4798 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1491, i32 0, i32 3
  %4799 = load i32, ptr %4798, align 4
  %4800 = insertvalue { ptr, ptr, ptr, i32 } %4797, i32 %4799, 3
  %4801 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1492)
  %4802 = getelementptr [2 x ptr], ptr %1492, i32 0, i32 1
  store ptr @_parameterization_FunctionPtri32._Ptri32_to_Ptri32, ptr %4802, align 8
  %4803 = getelementptr [2 x ptr], ptr %1492, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %4803, align 8
  %4804 = call ptr @llvm.invariant.start.p0(i64 192, ptr %4790)
  %4805 = getelementptr ptr, ptr %4790, i32 %4799
  %4806 = getelementptr ptr, ptr %4805, i32 1
  %4807 = load ptr, ptr %4806, align 8
  %4808 = getelementptr [2 x ptr], ptr %1493, i32 0, i32 0
  store ptr @i32_typ, ptr %4808, align 8
  %4809 = getelementptr [2 x ptr], ptr %1493, i32 0, i32 1
  store ptr @function_typ, ptr %4809, align 8
  %4810 = call ptr %4807({ ptr, ptr, ptr, i32 } %4800, ptr %1493, i32 %4681, { ptr } %4684)
  %4811 = call i32 %4810({ ptr, ptr, ptr, i32 } %4800, { ptr, ptr, ptr, i32 } %4800, ptr %1492, i32 %4681, { ptr } %4684)
  store i32 %4811, ptr %1494, align 4
  %4812 = load i32, ptr %1494, align 4
  store i32 %4812, ptr %1495, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %1497, align 4
  %4813 = load i64, ptr %1497, align 4
  store i64 %4813, ptr %1496, align 4
  %4814 = load ptr, ptr %1496, align 8
  %4815 = insertvalue { ptr, i160 } undef, ptr %4814, 0
  %4816 = load i160, ptr %1495, align 4
  %4817 = insertvalue { ptr, i160 } %4815, i160 %4816, 1
  %4818 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1498)
  %4819 = getelementptr [1 x ptr], ptr %1498, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %4819, align 8
  %4820 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %4821 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %4822 = getelementptr [1 x ptr], ptr %1499, i32 0, i32 0
  store ptr %4814, ptr %4822, align 8
  %4823 = call ptr %4821(ptr %1499, { ptr, i160 } %4817)
  call void %4823(ptr %1498, { ptr, i160 } %4817)
  store i32 256, ptr %1500, align 4
  %4824 = load i32, ptr %1500, align 4
  store i32 %4824, ptr %1501, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %1503, align 4
  %4825 = load i64, ptr %1503, align 4
  store i64 %4825, ptr %1502, align 4
  %4826 = load ptr, ptr %1502, align 8
  %4827 = insertvalue { ptr, i160 } undef, ptr %4826, 0
  %4828 = load i160, ptr %1501, align 4
  %4829 = insertvalue { ptr, i160 } %4827, i160 %4828, 1
  %4830 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1504)
  %4831 = getelementptr [1 x ptr], ptr %1504, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %4831, align 8
  %4832 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %4833 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %4834 = getelementptr [1 x ptr], ptr %1505, i32 0, i32 0
  store ptr %4826, ptr %4834, align 8
  %4835 = call ptr %4833(ptr %1505, { ptr, i160 } %4829)
  call void %4835(ptr %1504, { ptr, i160 } %4829)
  store i32 4, ptr %1506, align 4
  store i32 5, ptr %1507, align 4
  store i32 6, ptr %1508, align 4
  %4836 = load i32, ptr %1506, align 4
  %4837 = load i32, ptr %1507, align 4
  %4838 = load i32, ptr %1508, align 4
  store i32 %4838, ptr %1511, align 4
  store i32 %4837, ptr %1509, align 4
  store i32 %4836, ptr %1510, align 4
  %4839 = load i32, ptr %1509, align 4
  store i32 %4839, ptr %1512, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %1514, align 4
  %4840 = load i64, ptr %1514, align 4
  store i64 %4840, ptr %1513, align 4
  %4841 = load ptr, ptr %1513, align 8
  %4842 = insertvalue { ptr, i160 } undef, ptr %4841, 0
  %4843 = load i160, ptr %1512, align 4
  %4844 = insertvalue { ptr, i160 } %4842, i160 %4843, 1
  %4845 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1515)
  %4846 = getelementptr [1 x ptr], ptr %1515, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %4846, align 8
  %4847 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %4848 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %4849 = getelementptr [1 x ptr], ptr %1516, i32 0, i32 0
  store ptr %4841, ptr %4849, align 8
  %4850 = call ptr %4848(ptr %1516, { ptr, i160 } %4844)
  call void %4850(ptr %1515, { ptr, i160 } %4844)
  ret i32 0
}

define void @anoint_trampoline(ptr %tramp) {
  %oldProtect = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %result = call i32 @VirtualProtect(ptr %tramp, i64 16, i32 64, ptr %oldProtect)
  ret void
}

declare i32 @VirtualProtect(ptr, i64, i32, ptr)

define ptr @coroutine_create(ptr %func, ptr %arg_passer) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %stack = call ptr @VirtualAlloc(ptr null, i64 8388608, i32 12288, i32 4)
  %func_ptr = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %stack, i32 0, i32 0
  store ptr %func, ptr %func_ptr, align 8
  %stack_top = getelementptr i8, ptr %stack, i64 8388608
  %stack_top_i64 = ptrtoint ptr %stack_top to i64
  %stack_top_aligned = and i64 %stack_top_i64, -16
  %into_callee_buf = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %stack, i32 0, i32 1
  %arg_passer_slot = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %stack, i32 0, i32 2
  %into_callee_first_word = getelementptr [3 x ptr], ptr %into_callee_buf, i32 0, i32 0
  %into_callee_second_word = getelementptr [3 x ptr], ptr %into_callee_buf, i32 0, i32 1
  %into_callee_third_word = getelementptr [3 x ptr], ptr %into_callee_buf, i32 0, i32 2
  store i64 %stack_top_aligned, ptr %into_callee_first_word, align 4
  store i64 %stack_top_aligned, ptr %into_callee_third_word, align 4
  store ptr %arg_passer, ptr %arg_passer_slot, align 8
  %is_finished = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %stack, i32 0, i32 3
  store i1 false, ptr %is_finished, align 1
  call void @coroutine_trampoline(ptr %into_callee_second_word)
  ret ptr %stack
}

declare ptr @VirtualAlloc(ptr, i64, i32, i32)

define void @coroutine_trampoline(ptr %into_callee_second_word) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store ptr blockaddress(@coroutine_trampoline, %trampoline), ptr %into_callee_second_word, align 8
  %result = call i1 @returns_one()
  br i1 %result, label %exit, label %trampoline

trampoline:                                       ; preds = %0
  %current_coroutine = load ptr, ptr @current_coroutine, align 8
  %arg_passer_ptr = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %current_coroutine, i32 0, i32 2
  %arg_passer = load ptr, ptr %arg_passer_ptr, align 8
  call void %arg_passer(ptr %current_coroutine)
  %current_coroutine2 = load ptr, ptr @current_coroutine, align 8
  %is_finished_ptr = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %current_coroutine2, i32 0, i32 3
  store i1 true, ptr %is_finished_ptr, align 1
  call void @llvm.eh.sjlj.longjmp(ptr @into_caller_buf)
  unreachable

exit:                                             ; preds = %0
  ret void
}

define i1 @returns_one() {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %retval = load i1, ptr @always_one, align 1
  ret i1 %retval
}

; Function Attrs: noreturn nounwind
declare void @llvm.eh.sjlj.longjmp(ptr) #2

define void @setup_landing_pad() {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %buf_first_word = getelementptr [3 x ptr], ptr @into_caller_buf, i32 0, i32 0
  %buf_second_word = getelementptr [3 x ptr], ptr @into_caller_buf, i32 0, i32 1
  %buf_third_word = getelementptr [3 x ptr], ptr @into_caller_buf, i32 0, i32 2
  %sp = call ptr @llvm.stacksave.p0()
  store ptr %sp, ptr %buf_first_word, align 8
  store ptr blockaddress(@setup_landing_pad, %landing_pad), ptr %buf_second_word, align 8
  store ptr %sp, ptr %buf_third_word, align 8
  %current_coroutine = call ptr @coroutine_create(ptr @setup_landing_pad, ptr @arg_passer)
  store ptr %current_coroutine, ptr @current_coroutine, align 8
  %result = call i1 @returns_one()
  br i1 %result, label %exit, label %landing_pad

landing_pad:                                      ; preds = %0
  %ok = call i32 @printf(ptr @string_string.5, ptr @exception_message)
  %cc = load { ptr }, ptr @current_coroutine, align 8
  call void @report_exception({ ptr } %cc)
  call void @exit()
  unreachable

exit:                                             ; preds = %0
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare ptr @llvm.stacksave.p0() #3

define void @arg_passer(ptr %current_coroutine) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %func_ptr = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %current_coroutine, i32 0, i32 0
  %func = load ptr, ptr %func_ptr, align 8
  call void %func()
  ret void
}

declare void @exit()

define i32 @get_offset(ptr %vptr, ptr %id_ptr) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %id = load i64, ptr %id_ptr, align 4
  %hash_coef_ptr = getelementptr i64, ptr %vptr, i64 1
  %tbl_size_ptr = getelementptr i64, ptr %vptr, i64 2
  %offset_tbl_ptr = getelementptr ptr, ptr %vptr, i64 5
  %hash_coef = load i64, ptr %hash_coef_ptr, align 4
  %tbl_size = load i64, ptr %tbl_size_ptr, align 4
  %offset_tbl = load ptr, ptr %offset_tbl_ptr, align 8
  %index = call i64 @hash_to_index(i64 %tbl_size, i64 %hash_coef, i64 %id)
  %offset_ptr = getelementptr i32, ptr %offset_tbl, i64 %index
  %offset = load i32, ptr %offset_ptr, align 4
  ret i32 %offset
}

define i64 @hash_to_index(i64 %tbl_size, i64 %hash_coef, i64 %cand_id) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %product = mul i64 %cand_id, %hash_coef
  %shifted = lshr i64 %product, 32
  %xored = xor i64 %product, %shifted
  %hash = and i64 %xored, %tbl_size
  ret i64 %hash
}

define void @set_offset(ptr %fat_ptr, ptr %id_ptr) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %vptr = load ptr, ptr %fat_ptr, align 8
  %offset = call i32 @get_offset(ptr %vptr, ptr %id_ptr)
  %destination = getelementptr { ptr, ptr, ptr, i32 }, ptr %fat_ptr, i32 0, i32 3
  store i32 %offset, ptr %destination, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
define i1 @subtype_test(i64 %tbl_size, i64 %hash_coef, i64 %cand_id, i64 %candidate, ptr %supertype_tbl) #4 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %hash = call i64 @hash_to_index(i64 %tbl_size, i64 %hash_coef, i64 %cand_id)
  %gep = getelementptr i64, ptr %supertype_tbl, i64 %hash
  %stored_val = load i64, ptr %gep, align 4
  %eq = icmp eq i64 %stored_val, %candidate
  ret i1 %eq
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
define i1 @subtype_test_wrapper(ptr %f, i64 %tbl_size, i64 %hash_coef, i64 %cand_id, i64 %candidate, ptr %supertype_tbl) #4 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %result = call i1 %f(i64 %tbl_size, i64 %hash_coef, i64 %cand_id, i64 %candidate, ptr %supertype_tbl) #6
  ret i1 %result
}

define void @arg_buffer_filler(ptr %coroutine) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret void
}

define ptr @get_current_coroutine() {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %current_coroutine = load ptr, ptr @current_coroutine, align 8
  ret ptr %current_coroutine
}

; Function Attrs: noinline memory(readwrite)
define preserve_nonecc void @context_switch(ptr %from_buf, ptr %to_buf) #5 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %from_buf_first_word = getelementptr [3 x ptr], ptr %from_buf, i32 0, i32 0
  %from_buf_second_word = getelementptr [3 x ptr], ptr %from_buf, i32 0, i32 1
  %from_buf_third_word = getelementptr [3 x ptr], ptr %from_buf, i32 0, i32 2
  store ptr blockaddress(@context_switch, %return_from_switch), ptr %from_buf_second_word, align 8
  %sp = call ptr @llvm.stacksave.p0()
  store ptr %sp, ptr %from_buf_first_word, align 8
  store ptr %sp, ptr %from_buf_third_word, align 8
  %is_first_time = call i1 @returns_one()
  br i1 %is_first_time, label %do_switch, label %return_from_switch

do_switch:                                        ; preds = %0
  call void @llvm.eh.sjlj.longjmp(ptr %to_buf)
  unreachable

return_from_switch:                               ; preds = %0
  ret void
}

define void @coroutine_yield(ptr %current_coroutine) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %into_callee_buf = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %current_coroutine, i32 0, i32 1
  call preserve_nonecc void @context_switch(ptr %into_callee_buf, ptr @into_caller_buf)
  ret void
}

define void @coroutine_call(ptr %coroutine) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %old_into_caller = load [3 x ptr], ptr @into_caller_buf, align 8
  %old_coroutine = load ptr, ptr @current_coroutine, align 8
  store ptr %coroutine, ptr @current_coroutine, align 8
  %into_callee_buf = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %coroutine, i32 0, i32 1
  call preserve_nonecc void @context_switch(ptr @into_caller_buf, ptr %into_callee_buf)
  store ptr %old_coroutine, ptr @current_coroutine, align 8
  store [3 x ptr] %old_into_caller, ptr @into_caller_buf, align 8
  ret void
}

attributes #0 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { noreturn nounwind }
attributes #3 = { nocallback nofree nosync nounwind willreturn }
attributes #4 = { mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read) }
attributes #5 = { noinline memory(readwrite) }
attributes #6 = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read) }

!llvm.module.flags = !{!0}

!0 = !{i32 2, !"Debug Info Version", i32 3}
