; ModuleID = '<stdin>'
source_filename = "llvm-link"

@_parameterization_Nothing = linkonce_odr constant [2 x ptr] [ptr @nothing_typ, ptr null]
@_parameterization_Nil = linkonce_odr constant [2 x ptr] [ptr @nil_typ, ptr null]
@_parameterization_Ptri32_or_Nil = linkonce_odr constant [4 x ptr] [ptr @union_typ, ptr @_parameterization_Ptri32, ptr @_parameterization_Nil, ptr null]
@tmwap_bigtingstxt = internal constant [12 x i8] c"bigtings.txt"
@drgvv_thisnis_hownwe_donit = internal constant [20 x i8] c"this\0Ais how\0Awe do\0Ait"
@xoqja_bigtingstxt = internal constant [12 x i8] c"bigtings.txt"
@_parameterization_FunctionPtri32_to_Nothing = linkonce_odr constant [4 x ptr] [ptr @function_typ, ptr @_parameterization_Nothing, ptr @_parameterization_Ptri32, ptr null]
@_parameterization_FunctionPtri32._Ptri32_to_Ptri32 = linkonce_odr constant [5 x ptr] [ptr @function_typ, ptr @_parameterization_Ptri32, ptr @_parameterization_Ptri32, ptr @_parameterization_Ptri32, ptr null]
@_parameterization_Integer2 = linkonce_odr constant [2 x ptr] [ptr @Integer2, ptr null]
@_parameterization_Character = linkonce_odr constant [2 x ptr] [ptr @Character, ptr null]
@cwice_boom = internal constant [5 x i8] c"boom!"
@_parameterization_Ptri64 = linkonce_odr constant [2 x ptr] [ptr @i64_typ, ptr null]
@ufxup_so_it_is_true = internal constant [14 x i8] c"so it is true!"
@nriyb_barrys_color_is = internal constant [16 x i8] c"barry's color is"
@_parameterization_Beaver = linkonce_odr constant [2 x ptr] [ptr @Beaver, ptr null]
@_parameterization_Animal = linkonce_odr constant [2 x ptr] [ptr @Animal, ptr null]
@pwuuc_did_get_here = internal constant [13 x i8] c"did get here!"
@tjisx_start = internal constant [5 x i8] c"start"
@_parameterization_Ptri32_or_Ptrf64 = linkonce_odr constant [4 x ptr] [ptr @union_typ, ptr @_parameterization_Ptri32, ptr @_parameterization_Ptrf64, ptr null]
@_parameterization_Ptri1 = linkonce_odr constant [2 x ptr] [ptr @bool_typ, ptr null]
@vhuiw_Hello_World = internal constant [13 x i8] c"Hello, World!"
@oidpj_w = internal constant [1 x i8] c"w"
@dlyex_r = internal constant [1 x i8] c"r"
@domjs_ = internal constant [0 x i8] zeroinitializer
@ihxbq_one = internal constant [3 x i8] c"one"
@lckkh_testsmini = internal constant [10 x i8] c"tests.mini"
@oaszo_beaver = internal constant [7 x i8] c"beaver!"
@zxrbg_animal = internal constant [7 x i8] c"animal!"
@_parameterization_ListNode = linkonce_odr constant [2 x ptr] [ptr @ListNode, ptr null]
@_parameterization_Ptrf64 = linkonce_odr constant [2 x ptr] [ptr @f64_typ, ptr null]
@qznzq_Integer = internal constant [8 x i8] c"Integer2"
@xsqji_Here_I_am = internal constant [10 x i8] c"Here I am!"
@kqhky_number = internal constant [6 x i8] c"number"
@mbdsl_testsmini = internal constant [10 x i8] c"tests.mini"
@_parameterization_IntArray = linkonce_odr constant [2 x ptr] [ptr @IntArray, ptr null]
@xmsyx_testsmini = internal constant [10 x i8] c"tests.mini"
@cbume_testsmini = internal constant [10 x i8] c"tests.mini"
@_parameterization_BufferPtri32 = linkonce_odr constant [2 x ptr] [ptr @buffer_typ, ptr null]
@avsdp_An_outofbounds_error_occurred_while_indexing_into_a_collection = internal constant [65 x i8] c"An out-of-bounds error occurred while indexing into a collection."
@dxtko_ = internal constant [0 x i8] zeroinitializer
@dfakx_The_indexing_argument_was = internal constant [25 x i8] c"The indexing argument was"
@dobxp_The_size_of_the_collection_being_indexed_was = internal constant [44 x i8] c"The size of the collection being indexed was"
@_parameterization_IntIterator = linkonce_odr constant [2 x ptr] [ptr @IntIterator, ptr null]
@_parameterization_FunctionPtri32_to_Ptri1 = linkonce_odr constant [4 x ptr] [ptr @function_typ, ptr @_parameterization_Ptri1, ptr @_parameterization_Ptri32, ptr null]
@_parameterization_FunctionPtri32_to_Ptri32 = linkonce_odr constant [4 x ptr] [ptr @function_typ, ptr @_parameterization_Ptri32, ptr @_parameterization_Ptri32, ptr null]
@_parameterization_IntIterable = linkonce_odr constant [2 x ptr] [ptr @IntIterable, ptr null]
@epgmn_nil = internal constant [3 x i8] c"nil"
@lxxnb_false = internal constant [5 x i8] c"false"
@mvfjt_true = internal constant [4 x i8] c"true"
@nxwxn_ = internal constant [9 x i8] c"---------"
@fmqxk_With_message = internal constant [12 x i8] c"With message"
@irvbe_At_line = internal constant [7 x i8] c"At line"
@qnjoc_Exception_thrown_from_file = internal constant [26 x i8] c"Exception thrown from file"
@lylsz_ = internal constant [9 x i8] c"---------"
@ntkeh_ = internal constant [0 x i8] zeroinitializer
@jrneo_None = internal constant [6 x i8] c"<None>"
@ncamc_ = internal constant [0 x i8] zeroinitializer
@_parameterization_Ptri8 = linkonce_odr constant [2 x ptr] [ptr @i8_typ, ptr null]
@_parameterization_String = linkonce_odr constant [2 x ptr] [ptr @String, ptr null]
@_parameterization_Ptri32 = linkonce_odr constant [2 x ptr] [ptr @i32_typ, ptr null]
@_parameterization_BufferPtri8 = linkonce_odr constant [2 x ptr] [ptr @buffer_typ, ptr null]
@jrszw_Object = internal constant [6 x i8] c"Object"
@Iterator_hashtbl = constant [4 x ptr] [ptr @Object, ptr null, ptr @any_typ, ptr @Iterator]
@Iterator_offset_tbl = constant [4 x i32] [i32 9, i32 0, i32 9, i32 9]
@Iterator = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 8673632051301757104, i64 4611686018427388091, i64 3], [6 x ptr] [ptr @subtype_test, ptr @Iterator_hashtbl, ptr @Iterator_offset_tbl, ptr @_size_Iterator, ptr @_box_Default, ptr @_unbox_Default], [0 x ptr] undef }
@Iterable_hashtbl = constant [4 x ptr] [ptr null, ptr @Iterable, ptr @any_typ, ptr @Object]
@Iterable_offset_tbl = constant [4 x i32] [i32 0, i32 9, i32 9, i32 11]
@Iterable = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 3037712219555723519, i64 4611686018427388093, i64 3], [6 x ptr] [ptr @subtype_test, ptr @Iterable_hashtbl, ptr @Iterable_offset_tbl, ptr @_size_Iterable, ptr @_box_Default, ptr @_unbox_Default], [0 x ptr] undef }
@Representable_hashtbl = constant [4 x ptr] [ptr @Representable, ptr null, ptr @any_typ, ptr @Object]
@Representable_offset_tbl = constant [4 x i32] [i32 9, i32 0, i32 9, i32 11]
@Representable = constant { [3 x i64], [6 x ptr], [2 x ptr] } { [3 x i64] [i64 -7260840641129990118, i64 4611686018427388093, i64 3], [6 x ptr] [ptr @subtype_test, ptr @Representable_hashtbl, ptr @Representable_offset_tbl, ptr @_size_Representable, ptr @_box_Default, ptr @_unbox_Default], [2 x ptr] [ptr @Representable_B_repr_, ptr @Representable_repr_] }
@String_hashtbl = constant [8 x ptr] [ptr @any_typ, ptr null, ptr @String, ptr @Representable, ptr @Object, ptr null, ptr null, ptr @Iterable]
@String_offset_tbl = constant [8 x i32] [i32 9, i32 0, i32 9, i32 42, i32 42, i32 0, i32 0, i32 40]
@String = constant { [3 x i64], [6 x ptr], [35 x ptr] } { [3 x i64] [i64 6499063144389013426, i64 4611686018427388073, i64 7], [6 x ptr] [ptr @subtype_test, ptr @String_hashtbl, ptr @String_offset_tbl, ptr @_size_String, ptr @_box_Default, ptr @_unbox_Default], [35 x ptr] [ptr @String_field_bytes, ptr @String_field_length, ptr @String_field_capacity, ptr @String_B_init_, ptr @String_B_init_bytesBufferPtri8_lengthPtri32_capacityPtri32, ptr @String_B_length_, ptr @String_B_capacity_, ptr @String_B_bytes_, ptr @String_B_append_xPtri8, ptr @String_B_extend_strString, ptr @String_B__index_xPtri32, ptr @String_B__EQ_otherString, ptr @String_B_pop_, ptr @String_B_copy_, ptr @String_B_c_string_, ptr @String_B_iterator_, ptr @String_B_repr_, ptr @String_init_, ptr @String_init_bytesBufferPtri8_lengthPtri32_capacityPtri32, ptr @String_length_, ptr @String_capacity_, ptr @String_bytes_, ptr @String_append_xPtri8, ptr @String_extend_strString, ptr @String__index_xPtri32, ptr @String__EQ_otherString, ptr @String_pop_, ptr @String_copy_, ptr @String_c_string_, ptr @String_iterator_, ptr @String_repr_, ptr @String_B_iterator_, ptr @String_iterator_, ptr @String_B_repr_, ptr @String_repr_] }
@Character_hashtbl = constant [4 x ptr] [ptr @Object, ptr null, ptr @any_typ, ptr @Character]
@Character_offset_tbl = constant [4 x i32] [i32 14, i32 0, i32 9, i32 9]
@Character = constant { [3 x i64], [6 x ptr], [5 x ptr] } { [3 x i64] [i64 6681222582356018452, i64 4611686018427388091, i64 3], [6 x ptr] [ptr @subtype_test, ptr @Character_hashtbl, ptr @Character_offset_tbl, ptr @_size_Character, ptr @_box_Default, ptr @_unbox_Default], [5 x ptr] [ptr @Character_field_byte, ptr @Character_B_byte_, ptr @Character_B_init_bytePtri8, ptr @Character_byte_, ptr @Character_init_bytePtri8] }
@StringIterator_hashtbl = constant [4 x ptr] [ptr @StringIterator, ptr @Object, ptr @any_typ, ptr @Iterator]
@StringIterator_offset_tbl = constant [4 x i32] [i32 9, i32 15, i32 9, i32 15]
@StringIterator = constant { [3 x i64], [6 x ptr], [6 x ptr] } { [3 x i64] [i64 -7260570988945952630, i64 4611686018427388097, i64 3], [6 x ptr] [ptr @subtype_test, ptr @StringIterator_hashtbl, ptr @StringIterator_offset_tbl, ptr @_size_StringIterator, ptr @_box_Default, ptr @_unbox_Default], [6 x ptr] [ptr @StringIterator_field_str, ptr @StringIterator_field_index, ptr @StringIterator_B_init_strString, ptr @StringIterator_B_next_, ptr @StringIterator_init_strString, ptr @StringIterator_next_] }
@Exception_hashtbl = constant [4 x ptr] [ptr @Object, ptr null, ptr @any_typ, ptr @Exception]
@Exception_offset_tbl = constant [4 x i32] [i32 22, i32 0, i32 9, i32 9]
@Exception = constant { [3 x i64], [6 x ptr], [13 x ptr] } { [3 x i64] [i64 9027164862567808692, i64 4611686018427388091, i64 3], [6 x ptr] [ptr @subtype_test, ptr @Exception_hashtbl, ptr @Exception_offset_tbl, ptr @_size_Exception, ptr @_box_Default, ptr @_unbox_Default], [13 x ptr] [ptr @Exception_field_line_number, ptr @Exception_field_file_name, ptr @Exception_field_message, ptr @Exception_B_init_messageString, ptr @Exception_B_init_, ptr @Exception_B_set_info_line_numberPtri32_file_nameString, ptr @Exception_B_report_, ptr @Exception_B_print_message_, ptr @Exception_init_messageString, ptr @Exception_init_, ptr @Exception_set_info_line_numberPtri32_file_nameString, ptr @Exception_report_, ptr @Exception_print_message_] }
@IO_hashtbl = constant [4 x ptr] [ptr @any_typ, ptr @IO, ptr null, ptr @Object]
@IO_offset_tbl = constant [4 x i32] [i32 9, i32 9, i32 0, i32 19]
@IO = constant { [3 x i64], [6 x ptr], [10 x ptr] } { [3 x i64] [i64 5359822646784595218, i64 4611686018427388247, i64 3], [6 x ptr] [ptr @subtype_test, ptr @IO_hashtbl, ptr @IO_offset_tbl, ptr @_size_IO, ptr @_box_Default, ptr @_unbox_Default], [10 x ptr] [ptr @IO_B__Self_print_xPtri8__Self_print_xPtri64__Self_print_xCharacter__Self_print_xPtrf64__Self_print_xPtri1__Self_print_xNil__Self_print_xPtri32__Self_print_xString__Self_print_xRepresentable, ptr @IO__Self_print_xPtri8, ptr @IO__Self_print_xPtri64, ptr @IO__Self_print_xCharacter, ptr @IO__Self_print_xPtrf64, ptr @IO__Self_print_xPtri1, ptr @IO__Self_print_xNil, ptr @IO__Self_print_xPtri32, ptr @IO__Self_print_xString, ptr @IO__Self_print_xRepresentable] }
@Blocking_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @Blocking, ptr null]
@Blocking_offset_tbl = constant [4 x i32] [i32 11, i32 9, i32 9, i32 0]
@Blocking = constant { [3 x i64], [6 x ptr], [2 x ptr] } { [3 x i64] [i64 847773162914674935, i64 4611686018427388081, i64 3], [6 x ptr] [ptr @subtype_test, ptr @Blocking_hashtbl, ptr @Blocking_offset_tbl, ptr @_size_Blocking, ptr @_box_Default, ptr @_unbox_Default], [2 x ptr] [ptr @Blocking_B_init_, ptr @Blocking_init_] }
@Channel_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Channel]
@Channel_offset_tbl = constant [4 x i32] [i32 16, i32 9, i32 0, i32 9]
@Channel = constant { [3 x i64], [6 x ptr], [7 x ptr] } { [3 x i64] [i64 -3668118116639750450, i64 4611686018427388081, i64 3], [6 x ptr] [ptr @subtype_test, ptr @Channel_hashtbl, ptr @Channel_offset_tbl, ptr @_size_Channel, ptr @_box_Default, ptr @_unbox_Default], [7 x ptr] [ptr @Channel_field_value, ptr @Channel_B_init_, ptr @Channel_B_get_, ptr @Channel_B_put_new_valuePtri32, ptr @Channel_init_, ptr @Channel_get_, ptr @Channel_put_new_valuePtri32] }
@IntIterator_hashtbl = constant [4 x ptr] [ptr @any_typ, ptr @Iterator, ptr @IntIterator, ptr @Object]
@IntIterator_offset_tbl = constant [4 x i32] [i32 9, i32 11, i32 9, i32 11]
@IntIterator = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 -933084275656658555, i64 4611686018427388247, i64 3], [6 x ptr] [ptr @subtype_test, ptr @IntIterator_hashtbl, ptr @IntIterator_offset_tbl, ptr @_size_IntIterator, ptr @_box_Default, ptr @_unbox_Default], [0 x ptr] undef }
@IntIterable_hashtbl = constant [4 x ptr] [ptr @any_typ, ptr @Iterable, ptr @IntIterable, ptr @Object]
@IntIterable_offset_tbl = constant [4 x i32] [i32 9, i32 31, i32 9, i32 33]
@IntIterable = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 -7984962120415158575, i64 4611686018427388247, i64 3], [6 x ptr] [ptr @subtype_test, ptr @IntIterable_hashtbl, ptr @IntIterable_offset_tbl, ptr @_size_IntIterable, ptr @_box_Default, ptr @_unbox_Default], [0 x ptr] undef }
@MapIterable_hashtbl = constant [8 x ptr] [ptr @IntIterable, ptr @MapIterable, ptr @Object, ptr null, ptr @any_typ, ptr null, ptr null, ptr @Iterable]
@MapIterable_offset_tbl = constant [8 x i32] [i32 35, i32 9, i32 61, i32 0, i32 9, i32 0, i32 0, i32 59]
@MapIterable = constant { [3 x i64], [6 x ptr], [52 x ptr] } { [3 x i64] [i64 -7488770571603291722, i64 4611686018427388291, i64 7], [6 x ptr] [ptr @subtype_test, ptr @MapIterable_hashtbl, ptr @MapIterable_offset_tbl, ptr @_size_MapIterable, ptr @_box_Default, ptr @_unbox_Default], [52 x ptr] [ptr @MapIterable_field_iterable, ptr @MapIterable_field_f, ptr @MapIterable_B_init_iterableIntIterable_fFunctionPtri32_to_Ptri32, ptr @MapIterable_B_each_fFunctionPtri32_to_Nothing, ptr @MapIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @MapIterable_B_all_fFunctionPtri32_to_Ptri1, ptr @MapIterable_B_any_fFunctionPtri32_to_Ptri1, ptr @MapIterable_B_map_fFunctionPtri32_to_Ptri32, ptr @MapIterable_B_filter_fFunctionPtri32_to_Ptri1, ptr @MapIterable_B_chain_otherIntIterable, ptr @MapIterable_B_interleave_otherIntIterable, ptr @MapIterable_B_zip_otherIntIterable, ptr @MapIterable_B_product_otherIntIterable, ptr @MapIterable_B_iterator_, ptr @MapIterable_init_iterableIntIterable_fFunctionPtri32_to_Ptri32, ptr @IntIterable_each_fFunctionPtri32_to_Nothing, ptr @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntIterable_all_fFunctionPtri32_to_Ptri1, ptr @IntIterable_any_fFunctionPtri32_to_Ptri1, ptr @IntIterable_map_fFunctionPtri32_to_Ptri32, ptr @IntIterable_filter_fFunctionPtri32_to_Ptri1, ptr @IntIterable_chain_otherIntIterable, ptr @IntIterable_interleave_otherIntIterable, ptr @IntIterable_zip_otherIntIterable, ptr @IntIterable_product_otherIntIterable, ptr @MapIterable_iterator_, ptr @MapIterable_B_each_fFunctionPtri32_to_Nothing, ptr @MapIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @MapIterable_B_all_fFunctionPtri32_to_Ptri1, ptr @MapIterable_B_any_fFunctionPtri32_to_Ptri1, ptr @MapIterable_B_map_fFunctionPtri32_to_Ptri32, ptr @MapIterable_B_filter_fFunctionPtri32_to_Ptri1, ptr @MapIterable_B_chain_otherIntIterable, ptr @MapIterable_B_interleave_otherIntIterable, ptr @MapIterable_B_zip_otherIntIterable, ptr @MapIterable_B_product_otherIntIterable, ptr @MapIterable_B_iterator_, ptr @IntIterable_each_fFunctionPtri32_to_Nothing, ptr @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntIterable_all_fFunctionPtri32_to_Ptri1, ptr @IntIterable_any_fFunctionPtri32_to_Ptri1, ptr @IntIterable_map_fFunctionPtri32_to_Ptri32, ptr @IntIterable_filter_fFunctionPtri32_to_Ptri1, ptr @IntIterable_chain_otherIntIterable, ptr @IntIterable_interleave_otherIntIterable, ptr @IntIterable_zip_otherIntIterable, ptr @IntIterable_product_otherIntIterable, ptr @MapIterable_iterator_, ptr @MapIterable_B_iterator_, ptr @MapIterable_iterator_, ptr @MapIterable_B_iterator_, ptr @MapIterable_iterator_] }
@MapIterator_hashtbl = constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr @MapIterator, ptr @IntIterator, ptr null, ptr @Iterator, ptr null, ptr null]
@MapIterator_offset_tbl = constant [8 x i32] [i32 17, i32 9, i32 9, i32 15, i32 0, i32 17, i32 0, i32 0]
@MapIterator = constant { [3 x i64], [6 x ptr], [8 x ptr] } { [3 x i64] [i64 -146553482626734782, i64 4611686018427388081, i64 7], [6 x ptr] [ptr @subtype_test, ptr @MapIterator_hashtbl, ptr @MapIterator_offset_tbl, ptr @_size_MapIterator, ptr @_box_Default, ptr @_unbox_Default], [8 x ptr] [ptr @MapIterator_field_iterator, ptr @MapIterator_field_f, ptr @MapIterator_B_init_iteratorIntIterator_fFunctionPtri32_to_Ptri32, ptr @MapIterator_B_next_, ptr @MapIterator_init_iteratorIntIterator_fFunctionPtri32_to_Ptri32, ptr @MapIterator_next_, ptr @MapIterator_B_next_, ptr @MapIterator_next_] }
@FilterIterable_hashtbl = constant [8 x ptr] [ptr @IntIterable, ptr null, ptr @Object, ptr @FilterIterable, ptr @any_typ, ptr null, ptr null, ptr @Iterable]
@FilterIterable_offset_tbl = constant [8 x i32] [i32 35, i32 0, i32 61, i32 9, i32 9, i32 0, i32 0, i32 59]
@FilterIterable = constant { [3 x i64], [6 x ptr], [52 x ptr] } { [3 x i64] [i64 8498466713076104350, i64 4611686018427388291, i64 7], [6 x ptr] [ptr @subtype_test, ptr @FilterIterable_hashtbl, ptr @FilterIterable_offset_tbl, ptr @_size_FilterIterable, ptr @_box_Default, ptr @_unbox_Default], [52 x ptr] [ptr @FilterIterable_field_iterable, ptr @FilterIterable_field_f, ptr @FilterIterable_B_init_iterableIntIterable_fFunctionPtri32_to_Ptri1, ptr @FilterIterable_B_each_fFunctionPtri32_to_Nothing, ptr @FilterIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @FilterIterable_B_all_fFunctionPtri32_to_Ptri1, ptr @FilterIterable_B_any_fFunctionPtri32_to_Ptri1, ptr @FilterIterable_B_map_fFunctionPtri32_to_Ptri32, ptr @FilterIterable_B_filter_fFunctionPtri32_to_Ptri1, ptr @FilterIterable_B_chain_otherIntIterable, ptr @FilterIterable_B_interleave_otherIntIterable, ptr @FilterIterable_B_zip_otherIntIterable, ptr @FilterIterable_B_product_otherIntIterable, ptr @FilterIterable_B_iterator_, ptr @FilterIterable_init_iterableIntIterable_fFunctionPtri32_to_Ptri1, ptr @IntIterable_each_fFunctionPtri32_to_Nothing, ptr @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntIterable_all_fFunctionPtri32_to_Ptri1, ptr @IntIterable_any_fFunctionPtri32_to_Ptri1, ptr @IntIterable_map_fFunctionPtri32_to_Ptri32, ptr @IntIterable_filter_fFunctionPtri32_to_Ptri1, ptr @IntIterable_chain_otherIntIterable, ptr @IntIterable_interleave_otherIntIterable, ptr @IntIterable_zip_otherIntIterable, ptr @IntIterable_product_otherIntIterable, ptr @FilterIterable_iterator_, ptr @FilterIterable_B_each_fFunctionPtri32_to_Nothing, ptr @FilterIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @FilterIterable_B_all_fFunctionPtri32_to_Ptri1, ptr @FilterIterable_B_any_fFunctionPtri32_to_Ptri1, ptr @FilterIterable_B_map_fFunctionPtri32_to_Ptri32, ptr @FilterIterable_B_filter_fFunctionPtri32_to_Ptri1, ptr @FilterIterable_B_chain_otherIntIterable, ptr @FilterIterable_B_interleave_otherIntIterable, ptr @FilterIterable_B_zip_otherIntIterable, ptr @FilterIterable_B_product_otherIntIterable, ptr @FilterIterable_B_iterator_, ptr @IntIterable_each_fFunctionPtri32_to_Nothing, ptr @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntIterable_all_fFunctionPtri32_to_Ptri1, ptr @IntIterable_any_fFunctionPtri32_to_Ptri1, ptr @IntIterable_map_fFunctionPtri32_to_Ptri32, ptr @IntIterable_filter_fFunctionPtri32_to_Ptri1, ptr @IntIterable_chain_otherIntIterable, ptr @IntIterable_interleave_otherIntIterable, ptr @IntIterable_zip_otherIntIterable, ptr @IntIterable_product_otherIntIterable, ptr @FilterIterable_iterator_, ptr @FilterIterable_B_iterator_, ptr @FilterIterable_iterator_, ptr @FilterIterable_B_iterator_, ptr @FilterIterable_iterator_] }
@FilterIterator_hashtbl = constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @IntIterator, ptr null, ptr @Iterator, ptr @FilterIterator, ptr null]
@FilterIterator_offset_tbl = constant [8 x i32] [i32 17, i32 9, i32 0, i32 15, i32 0, i32 17, i32 9, i32 0]
@FilterIterator = constant { [3 x i64], [6 x ptr], [8 x ptr] } { [3 x i64] [i64 -1221365496900303883, i64 4611686018427388081, i64 7], [6 x ptr] [ptr @subtype_test, ptr @FilterIterator_hashtbl, ptr @FilterIterator_offset_tbl, ptr @_size_FilterIterator, ptr @_box_Default, ptr @_unbox_Default], [8 x ptr] [ptr @FilterIterator_field_iterator, ptr @FilterIterator_field_f, ptr @FilterIterator_B_init_iteratorIntIterator_fFunctionPtri32_to_Ptri1, ptr @FilterIterator_B_next_, ptr @FilterIterator_init_iteratorIntIterator_fFunctionPtri32_to_Ptri1, ptr @FilterIterator_next_, ptr @FilterIterator_B_next_, ptr @FilterIterator_next_] }
@ChainIterable_hashtbl = constant [8 x ptr] [ptr @any_typ, ptr @Iterable, ptr @IntIterable, ptr @ChainIterable, ptr null, ptr null, ptr null, ptr @Object]
@ChainIterable_offset_tbl = constant [8 x i32] [i32 9, i32 59, i32 35, i32 9, i32 0, i32 0, i32 0, i32 61]
@ChainIterable = constant { [3 x i64], [6 x ptr], [52 x ptr] } { [3 x i64] [i64 -2370247058431047815, i64 4611686018427388247, i64 7], [6 x ptr] [ptr @subtype_test, ptr @ChainIterable_hashtbl, ptr @ChainIterable_offset_tbl, ptr @_size_ChainIterable, ptr @_box_Default, ptr @_unbox_Default], [52 x ptr] [ptr @ChainIterable_field_first, ptr @ChainIterable_field_second, ptr @ChainIterable_B_init_firstIntIterable_secondIntIterable, ptr @ChainIterable_B_each_fFunctionPtri32_to_Nothing, ptr @ChainIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @ChainIterable_B_all_fFunctionPtri32_to_Ptri1, ptr @ChainIterable_B_any_fFunctionPtri32_to_Ptri1, ptr @ChainIterable_B_map_fFunctionPtri32_to_Ptri32, ptr @ChainIterable_B_filter_fFunctionPtri32_to_Ptri1, ptr @ChainIterable_B_chain_otherIntIterable, ptr @ChainIterable_B_interleave_otherIntIterable, ptr @ChainIterable_B_zip_otherIntIterable, ptr @ChainIterable_B_product_otherIntIterable, ptr @ChainIterable_B_iterator_, ptr @ChainIterable_init_firstIntIterable_secondIntIterable, ptr @IntIterable_each_fFunctionPtri32_to_Nothing, ptr @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntIterable_all_fFunctionPtri32_to_Ptri1, ptr @IntIterable_any_fFunctionPtri32_to_Ptri1, ptr @IntIterable_map_fFunctionPtri32_to_Ptri32, ptr @IntIterable_filter_fFunctionPtri32_to_Ptri1, ptr @IntIterable_chain_otherIntIterable, ptr @IntIterable_interleave_otherIntIterable, ptr @IntIterable_zip_otherIntIterable, ptr @IntIterable_product_otherIntIterable, ptr @ChainIterable_iterator_, ptr @ChainIterable_B_each_fFunctionPtri32_to_Nothing, ptr @ChainIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @ChainIterable_B_all_fFunctionPtri32_to_Ptri1, ptr @ChainIterable_B_any_fFunctionPtri32_to_Ptri1, ptr @ChainIterable_B_map_fFunctionPtri32_to_Ptri32, ptr @ChainIterable_B_filter_fFunctionPtri32_to_Ptri1, ptr @ChainIterable_B_chain_otherIntIterable, ptr @ChainIterable_B_interleave_otherIntIterable, ptr @ChainIterable_B_zip_otherIntIterable, ptr @ChainIterable_B_product_otherIntIterable, ptr @ChainIterable_B_iterator_, ptr @IntIterable_each_fFunctionPtri32_to_Nothing, ptr @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntIterable_all_fFunctionPtri32_to_Ptri1, ptr @IntIterable_any_fFunctionPtri32_to_Ptri1, ptr @IntIterable_map_fFunctionPtri32_to_Ptri32, ptr @IntIterable_filter_fFunctionPtri32_to_Ptri1, ptr @IntIterable_chain_otherIntIterable, ptr @IntIterable_interleave_otherIntIterable, ptr @IntIterable_zip_otherIntIterable, ptr @IntIterable_product_otherIntIterable, ptr @ChainIterable_iterator_, ptr @ChainIterable_B_iterator_, ptr @ChainIterable_iterator_, ptr @ChainIterable_B_iterator_, ptr @ChainIterable_iterator_] }
@ChainIterator_hashtbl = constant [8 x ptr] [ptr @any_typ, ptr @ChainIterator, ptr null, ptr @Iterator, ptr @Object, ptr null, ptr null, ptr @IntIterator]
@ChainIterator_offset_tbl = constant [8 x i32] [i32 9, i32 9, i32 0, i32 18, i32 18, i32 0, i32 0, i32 16]
@ChainIterator = constant { [3 x i64], [6 x ptr], [9 x ptr] } { [3 x i64] [i64 6043157723929225452, i64 4611686018427388073, i64 7], [6 x ptr] [ptr @subtype_test, ptr @ChainIterator_hashtbl, ptr @ChainIterator_offset_tbl, ptr @_size_ChainIterator, ptr @_box_Default, ptr @_unbox_Default], [9 x ptr] [ptr @ChainIterator_field_first, ptr @ChainIterator_field_second, ptr @ChainIterator_field_on_first, ptr @ChainIterator_B_init_firstIntIterator_secondIntIterator, ptr @ChainIterator_B_next_, ptr @ChainIterator_init_firstIntIterator_secondIntIterator, ptr @ChainIterator_next_, ptr @ChainIterator_B_next_, ptr @ChainIterator_next_] }
@InterleaveIterable_hashtbl = constant [8 x ptr] [ptr @IntIterable, ptr @InterleaveIterable, ptr @Object, ptr null, ptr @any_typ, ptr null, ptr null, ptr @Iterable]
@InterleaveIterable_offset_tbl = constant [8 x i32] [i32 35, i32 9, i32 61, i32 0, i32 9, i32 0, i32 0, i32 59]
@InterleaveIterable = constant { [3 x i64], [6 x ptr], [52 x ptr] } { [3 x i64] [i64 4936782714255954462, i64 4611686018427388291, i64 7], [6 x ptr] [ptr @subtype_test, ptr @InterleaveIterable_hashtbl, ptr @InterleaveIterable_offset_tbl, ptr @_size_InterleaveIterable, ptr @_box_Default, ptr @_unbox_Default], [52 x ptr] [ptr @InterleaveIterable_field_first, ptr @InterleaveIterable_field_second, ptr @InterleaveIterable_B_init_firstIntIterable_secondIntIterable, ptr @InterleaveIterable_B_each_fFunctionPtri32_to_Nothing, ptr @InterleaveIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @InterleaveIterable_B_all_fFunctionPtri32_to_Ptri1, ptr @InterleaveIterable_B_any_fFunctionPtri32_to_Ptri1, ptr @InterleaveIterable_B_map_fFunctionPtri32_to_Ptri32, ptr @InterleaveIterable_B_filter_fFunctionPtri32_to_Ptri1, ptr @InterleaveIterable_B_chain_otherIntIterable, ptr @InterleaveIterable_B_interleave_otherIntIterable, ptr @InterleaveIterable_B_zip_otherIntIterable, ptr @InterleaveIterable_B_product_otherIntIterable, ptr @InterleaveIterable_B_iterator_, ptr @InterleaveIterable_init_firstIntIterable_secondIntIterable, ptr @IntIterable_each_fFunctionPtri32_to_Nothing, ptr @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntIterable_all_fFunctionPtri32_to_Ptri1, ptr @IntIterable_any_fFunctionPtri32_to_Ptri1, ptr @IntIterable_map_fFunctionPtri32_to_Ptri32, ptr @IntIterable_filter_fFunctionPtri32_to_Ptri1, ptr @IntIterable_chain_otherIntIterable, ptr @IntIterable_interleave_otherIntIterable, ptr @IntIterable_zip_otherIntIterable, ptr @IntIterable_product_otherIntIterable, ptr @InterleaveIterable_iterator_, ptr @InterleaveIterable_B_each_fFunctionPtri32_to_Nothing, ptr @InterleaveIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @InterleaveIterable_B_all_fFunctionPtri32_to_Ptri1, ptr @InterleaveIterable_B_any_fFunctionPtri32_to_Ptri1, ptr @InterleaveIterable_B_map_fFunctionPtri32_to_Ptri32, ptr @InterleaveIterable_B_filter_fFunctionPtri32_to_Ptri1, ptr @InterleaveIterable_B_chain_otherIntIterable, ptr @InterleaveIterable_B_interleave_otherIntIterable, ptr @InterleaveIterable_B_zip_otherIntIterable, ptr @InterleaveIterable_B_product_otherIntIterable, ptr @InterleaveIterable_B_iterator_, ptr @IntIterable_each_fFunctionPtri32_to_Nothing, ptr @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntIterable_all_fFunctionPtri32_to_Ptri1, ptr @IntIterable_any_fFunctionPtri32_to_Ptri1, ptr @IntIterable_map_fFunctionPtri32_to_Ptri32, ptr @IntIterable_filter_fFunctionPtri32_to_Ptri1, ptr @IntIterable_chain_otherIntIterable, ptr @IntIterable_interleave_otherIntIterable, ptr @IntIterable_zip_otherIntIterable, ptr @IntIterable_product_otherIntIterable, ptr @InterleaveIterable_iterator_, ptr @InterleaveIterable_B_iterator_, ptr @InterleaveIterable_iterator_, ptr @InterleaveIterable_B_iterator_, ptr @InterleaveIterable_iterator_] }
@InterleaveIterator_hashtbl = constant [8 x ptr] [ptr @any_typ, ptr null, ptr null, ptr @Iterator, ptr @Object, ptr null, ptr @InterleaveIterator, ptr @IntIterator]
@InterleaveIterator_offset_tbl = constant [8 x i32] [i32 9, i32 0, i32 0, i32 18, i32 18, i32 0, i32 9, i32 16]
@InterleaveIterator = constant { [3 x i64], [6 x ptr], [9 x ptr] } { [3 x i64] [i64 -3924664358248524505, i64 4611686018427388073, i64 7], [6 x ptr] [ptr @subtype_test, ptr @InterleaveIterator_hashtbl, ptr @InterleaveIterator_offset_tbl, ptr @_size_InterleaveIterator, ptr @_box_Default, ptr @_unbox_Default], [9 x ptr] [ptr @InterleaveIterator_field_first, ptr @InterleaveIterator_field_second, ptr @InterleaveIterator_field_on_first, ptr @InterleaveIterator_B_init_firstIntIterator_secondIntIterator, ptr @InterleaveIterator_B_next_, ptr @InterleaveIterator_init_firstIntIterator_secondIntIterator, ptr @InterleaveIterator_next_, ptr @InterleaveIterator_B_next_, ptr @InterleaveIterator_next_] }
@IntTupleIterable_hashtbl = constant [4 x ptr] [ptr @any_typ, ptr @Iterable, ptr @IntTupleIterable, ptr @Object]
@IntTupleIterable_offset_tbl = constant [4 x i32] [i32 9, i32 11, i32 9, i32 13]
@IntTupleIterable = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 1135628454346210518, i64 4611686018427388247, i64 3], [6 x ptr] [ptr @subtype_test, ptr @IntTupleIterable_hashtbl, ptr @IntTupleIterable_offset_tbl, ptr @_size_IntTupleIterable, ptr @_box_Default, ptr @_unbox_Default], [0 x ptr] undef }
@IntTupleIterator_hashtbl = constant [4 x ptr] [ptr @any_typ, ptr @Object, ptr @Iterator, ptr @IntTupleIterator]
@IntTupleIterator_offset_tbl = constant [4 x i32] [i32 9, i32 11, i32 11, i32 9]
@IntTupleIterator = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 8926924731480624460, i64 4611686018427388157, i64 3], [6 x ptr] [ptr @subtype_test, ptr @IntTupleIterator_hashtbl, ptr @IntTupleIterator_offset_tbl, ptr @_size_IntTupleIterator, ptr @_box_Default, ptr @_unbox_Default], [0 x ptr] undef }
@ZipIterable_hashtbl = constant [8 x ptr] [ptr @any_typ, ptr null, ptr @IntTupleIterable, ptr null, ptr @Object, ptr @ZipIterable, ptr null, ptr @Iterable]
@ZipIterable_offset_tbl = constant [8 x i32] [i32 9, i32 0, i32 15, i32 0, i32 21, i32 9, i32 0, i32 19]
@ZipIterable = constant { [3 x i64], [6 x ptr], [12 x ptr] } { [3 x i64] [i64 35232740166152944, i64 4611686018427388073, i64 7], [6 x ptr] [ptr @subtype_test, ptr @ZipIterable_hashtbl, ptr @ZipIterable_offset_tbl, ptr @_size_ZipIterable, ptr @_box_Default, ptr @_unbox_Default], [12 x ptr] [ptr @ZipIterable_field_first, ptr @ZipIterable_field_second, ptr @ZipIterable_B_init_firstIntIterable_secondIntIterable, ptr @ZipIterable_B_iterator_, ptr @ZipIterable_init_firstIntIterable_secondIntIterable, ptr @ZipIterable_iterator_, ptr @ZipIterable_B_iterator_, ptr @ZipIterable_iterator_, ptr @ZipIterable_B_iterator_, ptr @ZipIterable_iterator_, ptr @ZipIterable_B_iterator_, ptr @ZipIterable_iterator_] }
@ZipIterator_hashtbl = constant [8 x ptr] [ptr @IntTupleIterator, ptr null, ptr null, ptr @Iterator, ptr @Object, ptr null, ptr @any_typ, ptr @ZipIterator]
@ZipIterator_offset_tbl = constant [8 x i32] [i32 15, i32 0, i32 0, i32 17, i32 17, i32 0, i32 9, i32 9]
@ZipIterator = constant { [3 x i64], [6 x ptr], [8 x ptr] } { [3 x i64] [i64 -2141114445739585318, i64 4611686018427388091, i64 7], [6 x ptr] [ptr @subtype_test, ptr @ZipIterator_hashtbl, ptr @ZipIterator_offset_tbl, ptr @_size_ZipIterator, ptr @_box_Default, ptr @_unbox_Default], [8 x ptr] [ptr @ZipIterator_field_first, ptr @ZipIterator_field_second, ptr @ZipIterator_B_init_firstIntIterator_secondIntIterator, ptr @ZipIterator_B_next_, ptr @ZipIterator_init_firstIntIterator_secondIntIterator, ptr @ZipIterator_next_, ptr @ZipIterator_B_next_, ptr @ZipIterator_next_] }
@ProductIterable_hashtbl = constant [8 x ptr] [ptr @any_typ, ptr @ProductIterable, ptr @IntTupleIterable, ptr null, ptr @Object, ptr null, ptr null, ptr @Iterable]
@ProductIterable_offset_tbl = constant [8 x i32] [i32 9, i32 9, i32 15, i32 0, i32 21, i32 0, i32 0, i32 19]
@ProductIterable = constant { [3 x i64], [6 x ptr], [12 x ptr] } { [3 x i64] [i64 4128338911757318636, i64 4611686018427388073, i64 7], [6 x ptr] [ptr @subtype_test, ptr @ProductIterable_hashtbl, ptr @ProductIterable_offset_tbl, ptr @_size_ProductIterable, ptr @_box_Default, ptr @_unbox_Default], [12 x ptr] [ptr @ProductIterable_field_first, ptr @ProductIterable_field_second, ptr @ProductIterable_B_init_firstIntIterable_secondIntIterable, ptr @ProductIterable_B_iterator_, ptr @ProductIterable_init_firstIntIterable_secondIntIterable, ptr @ProductIterable_iterator_, ptr @ProductIterable_B_iterator_, ptr @ProductIterable_iterator_, ptr @ProductIterable_B_iterator_, ptr @ProductIterable_iterator_, ptr @ProductIterable_B_iterator_, ptr @ProductIterable_iterator_] }
@ProductIterator_hashtbl = constant [4 x ptr] [ptr @any_typ, ptr @Object, ptr @Iterator, ptr @ProductIterator]
@ProductIterator_offset_tbl = constant [4 x i32] [i32 9, i32 17, i32 17, i32 9]
@ProductIterator = constant { [3 x i64], [6 x ptr], [8 x ptr] } { [3 x i64] [i64 1697250377212095568, i64 4611686018427388157, i64 3], [6 x ptr] [ptr @subtype_test, ptr @ProductIterator_hashtbl, ptr @ProductIterator_offset_tbl, ptr @_size_ProductIterator, ptr @_box_Default, ptr @_unbox_Default], [8 x ptr] [ptr @ProductIterator_field_first_iterator, ptr @ProductIterator_field_second_iterator, ptr @ProductIterator_field_second_iterable, ptr @ProductIterator_field_current_first, ptr @ProductIterator_B_init_first_iterableIntIterable_second_iterableIntIterable, ptr @ProductIterator_B_next_, ptr @ProductIterator_init_first_iterableIntIterable_second_iterableIntIterable, ptr @ProductIterator_next_] }
@Range_hashtbl = constant [8 x ptr] [ptr @IntIterable, ptr @Range, ptr @Object, ptr null, ptr @any_typ, ptr null, ptr null, ptr @Iterable]
@Range_offset_tbl = constant [8 x i32] [i32 40, i32 9, i32 66, i32 0, i32 9, i32 0, i32 0, i32 64]
@Range = constant { [3 x i64], [6 x ptr], [57 x ptr] } { [3 x i64] [i64 5490049236840671069, i64 4611686018427388291, i64 7], [6 x ptr] [ptr @subtype_test, ptr @Range_hashtbl, ptr @Range_offset_tbl, ptr @_size_Range, ptr @_box_Default, ptr @_unbox_Default], [57 x ptr] [ptr @Range_field_start, ptr @Range_field_end, ptr @Range_field_step, ptr @Range_B_init_endPtri32, ptr @Range_B_init_startPtri32_endPtri32, ptr @Range_B_step_stepPtri32, ptr @Range_B_each_fFunctionPtri32_to_Nothing, ptr @Range_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @Range_B_all_fFunctionPtri32_to_Ptri1, ptr @Range_B_any_fFunctionPtri32_to_Ptri1, ptr @Range_B_map_fFunctionPtri32_to_Ptri32, ptr @Range_B_filter_fFunctionPtri32_to_Ptri1, ptr @Range_B_chain_otherIntIterable, ptr @Range_B_interleave_otherIntIterable, ptr @Range_B_zip_otherIntIterable, ptr @Range_B_product_otherIntIterable, ptr @Range_B_iterator_, ptr @Range_init_endPtri32, ptr @Range_init_startPtri32_endPtri32, ptr @Range_step_stepPtri32, ptr @IntIterable_each_fFunctionPtri32_to_Nothing, ptr @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntIterable_all_fFunctionPtri32_to_Ptri1, ptr @IntIterable_any_fFunctionPtri32_to_Ptri1, ptr @IntIterable_map_fFunctionPtri32_to_Ptri32, ptr @IntIterable_filter_fFunctionPtri32_to_Ptri1, ptr @IntIterable_chain_otherIntIterable, ptr @IntIterable_interleave_otherIntIterable, ptr @IntIterable_zip_otherIntIterable, ptr @IntIterable_product_otherIntIterable, ptr @Range_iterator_, ptr @Range_B_each_fFunctionPtri32_to_Nothing, ptr @Range_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @Range_B_all_fFunctionPtri32_to_Ptri1, ptr @Range_B_any_fFunctionPtri32_to_Ptri1, ptr @Range_B_map_fFunctionPtri32_to_Ptri32, ptr @Range_B_filter_fFunctionPtri32_to_Ptri1, ptr @Range_B_chain_otherIntIterable, ptr @Range_B_interleave_otherIntIterable, ptr @Range_B_zip_otherIntIterable, ptr @Range_B_product_otherIntIterable, ptr @Range_B_iterator_, ptr @IntIterable_each_fFunctionPtri32_to_Nothing, ptr @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntIterable_all_fFunctionPtri32_to_Ptri1, ptr @IntIterable_any_fFunctionPtri32_to_Ptri1, ptr @IntIterable_map_fFunctionPtri32_to_Ptri32, ptr @IntIterable_filter_fFunctionPtri32_to_Ptri1, ptr @IntIterable_chain_otherIntIterable, ptr @IntIterable_interleave_otherIntIterable, ptr @IntIterable_zip_otherIntIterable, ptr @IntIterable_product_otherIntIterable, ptr @Range_iterator_, ptr @Range_B_iterator_, ptr @Range_iterator_, ptr @Range_B_iterator_, ptr @Range_iterator_] }
@RangeIterator_hashtbl = constant [8 x ptr] [ptr @RangeIterator, ptr @IntIterator, ptr @any_typ, ptr null, ptr null, ptr @Iterator, ptr null, ptr @Object]
@RangeIterator_offset_tbl = constant [8 x i32] [i32 9, i32 16, i32 9, i32 0, i32 0, i32 18, i32 0, i32 18]
@RangeIterator = constant { [3 x i64], [6 x ptr], [9 x ptr] } { [3 x i64] [i64 -913562485944406675, i64 4611686018427388093, i64 7], [6 x ptr] [ptr @subtype_test, ptr @RangeIterator_hashtbl, ptr @RangeIterator_offset_tbl, ptr @_size_RangeIterator, ptr @_box_Default, ptr @_unbox_Default], [9 x ptr] [ptr @RangeIterator_field_counter, ptr @RangeIterator_field_end, ptr @RangeIterator_field_step, ptr @RangeIterator_B_init_counterPtri32_endPtri32_stepPtri32, ptr @RangeIterator_B_next_, ptr @RangeIterator_init_counterPtri32_endPtri32_stepPtri32, ptr @RangeIterator_next_, ptr @RangeIterator_B_next_, ptr @RangeIterator_next_] }
@OutOfBoundsDetails_hashtbl = constant [4 x ptr] [ptr @Object, ptr null, ptr @any_typ, ptr @OutOfBoundsDetails]
@OutOfBoundsDetails_offset_tbl = constant [4 x i32] [i32 15, i32 0, i32 9, i32 9]
@OutOfBoundsDetails = constant { [3 x i64], [6 x ptr], [6 x ptr] } { [3 x i64] [i64 4650630525701360429, i64 4611686018427388091, i64 3], [6 x ptr] [ptr @subtype_test, ptr @OutOfBoundsDetails_hashtbl, ptr @OutOfBoundsDetails_offset_tbl, ptr @_size_OutOfBoundsDetails, ptr @_box_Default, ptr @_unbox_Default], [6 x ptr] [ptr @OutOfBoundsDetails_field_bounds, ptr @OutOfBoundsDetails_field_index, ptr @OutOfBoundsDetails_B_init_boundsPtri32_indexPtri32, ptr @OutOfBoundsDetails_B_report_, ptr @OutOfBoundsDetails_init_boundsPtri32_indexPtri32, ptr @OutOfBoundsDetails_report_] }
@OutOfBounds_hashtbl = constant [4 x ptr] [ptr @any_typ, ptr @Exception, ptr @OutOfBounds, ptr @Object]
@OutOfBounds_offset_tbl = constant [4 x i32] [i32 9, i32 25, i32 9, i32 38]
@OutOfBounds = constant { [3 x i64], [6 x ptr], [29 x ptr] } { [3 x i64] [i64 5348403617834207535, i64 4611686018427388247, i64 3], [6 x ptr] [ptr @subtype_test, ptr @OutOfBounds_hashtbl, ptr @OutOfBounds_offset_tbl, ptr @_size_OutOfBounds, ptr @_box_Default, ptr @_unbox_Default], [29 x ptr] [ptr @OutOfBounds_field_details, ptr @OutOfBounds_field_line_number, ptr @OutOfBounds_field_file_name, ptr @OutOfBounds_field_message, ptr @OutOfBounds_B_init_boundsPtri32_indexPtri32, ptr @OutOfBounds_B_init_messageString, ptr @OutOfBounds_B_init_, ptr @OutOfBounds_B_set_info_line_numberPtri32_file_nameString, ptr @OutOfBounds_B_report_, ptr @OutOfBounds_B_print_message_, ptr @OutOfBounds_init_boundsPtri32_indexPtri32, ptr @Exception_init_messageString, ptr @Exception_init_, ptr @Exception_set_info_line_numberPtri32_file_nameString, ptr @Exception_report_, ptr @OutOfBounds_print_message_, ptr @OutOfBounds_field_line_number, ptr @OutOfBounds_field_file_name, ptr @OutOfBounds_field_message, ptr @OutOfBounds_B_init_messageString, ptr @OutOfBounds_B_init_, ptr @OutOfBounds_B_set_info_line_numberPtri32_file_nameString, ptr @OutOfBounds_B_report_, ptr @OutOfBounds_B_print_message_, ptr @Exception_init_messageString, ptr @Exception_init_, ptr @Exception_set_info_line_numberPtri32_file_nameString, ptr @Exception_report_, ptr @OutOfBounds_print_message_] }
@IntArray_hashtbl = constant [8 x ptr] [ptr @Representable, ptr @Iterable, ptr @any_typ, ptr null, ptr null, ptr @IntIterable, ptr @IntArray, ptr @Object]
@IntArray_offset_tbl = constant [8 x i32] [i32 84, i32 82, i32 9, i32 0, i32 0, i32 58, i32 9, i32 84]
@IntArray = constant { [3 x i64], [6 x ptr], [77 x ptr] } { [3 x i64] [i64 7629948565578263212, i64 4611686018427388093, i64 7], [6 x ptr] [ptr @subtype_test, ptr @IntArray_hashtbl, ptr @IntArray_offset_tbl, ptr @_size_IntArray, ptr @_box_Default, ptr @_unbox_Default], [77 x ptr] [ptr @IntArray_field_buffer, ptr @IntArray_field_length, ptr @IntArray_field_capacity, ptr @IntArray_B__Self_from_iterable_iterableIntIterable, ptr @IntArray_B_init_, ptr @IntArray_B_init_bufferBufferPtri32_lengthPtri32_capacityPtri32, ptr @IntArray_B_length_, ptr @IntArray_B_capacity_, ptr @IntArray_B_buffer_, ptr @IntArray_B_append_xPtri32, ptr @IntArray_B_extend_aryIntArray, ptr @IntArray_B__index_xPtri32, ptr @IntArray_B_pop_, ptr @IntArray_B_copy_, ptr @IntArray_B_each_fFunctionPtri32_to_Nothing, ptr @IntArray_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntArray_B_all_fFunctionPtri32_to_Ptri1, ptr @IntArray_B_any_fFunctionPtri32_to_Ptri1, ptr @IntArray_B_map_fFunctionPtri32_to_Ptri32, ptr @IntArray_B_filter_fFunctionPtri32_to_Ptri1, ptr @IntArray_B_chain_otherIntIterable, ptr @IntArray_B_interleave_otherIntIterable, ptr @IntArray_B_zip_otherIntIterable, ptr @IntArray_B_product_otherIntIterable, ptr @IntArray_B_iterator_, ptr @IntArray_B_repr_, ptr @IntArray__Self_from_iterable_iterableIntIterable, ptr @IntArray_init_, ptr @IntArray_init_bufferBufferPtri32_lengthPtri32_capacityPtri32, ptr @IntArray_length_, ptr @IntArray_capacity_, ptr @IntArray_buffer_, ptr @IntArray_append_xPtri32, ptr @IntArray_extend_aryIntArray, ptr @IntArray__index_xPtri32, ptr @IntArray_pop_, ptr @IntArray_copy_, ptr @IntIterable_each_fFunctionPtri32_to_Nothing, ptr @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntIterable_all_fFunctionPtri32_to_Ptri1, ptr @IntIterable_any_fFunctionPtri32_to_Ptri1, ptr @IntArray_map_fFunctionPtri32_to_Ptri32, ptr @IntIterable_filter_fFunctionPtri32_to_Ptri1, ptr @IntIterable_chain_otherIntIterable, ptr @IntIterable_interleave_otherIntIterable, ptr @IntIterable_zip_otherIntIterable, ptr @IntIterable_product_otherIntIterable, ptr @IntArray_iterator_, ptr @Representable_repr_, ptr @IntArray_B_each_fFunctionPtri32_to_Nothing, ptr @IntArray_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntArray_B_all_fFunctionPtri32_to_Ptri1, ptr @IntArray_B_any_fFunctionPtri32_to_Ptri1, ptr @IntArray_B_map_fFunctionPtri32_to_Ptri32, ptr @IntArray_B_filter_fFunctionPtri32_to_Ptri1, ptr @IntArray_B_chain_otherIntIterable, ptr @IntArray_B_interleave_otherIntIterable, ptr @IntArray_B_zip_otherIntIterable, ptr @IntArray_B_product_otherIntIterable, ptr @IntArray_B_iterator_, ptr @IntIterable_each_fFunctionPtri32_to_Nothing, ptr @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntIterable_all_fFunctionPtri32_to_Ptri1, ptr @IntIterable_any_fFunctionPtri32_to_Ptri1, ptr @IntArray_map_fFunctionPtri32_to_Ptri32, ptr @IntIterable_filter_fFunctionPtri32_to_Ptri1, ptr @IntIterable_chain_otherIntIterable, ptr @IntIterable_interleave_otherIntIterable, ptr @IntIterable_zip_otherIntIterable, ptr @IntIterable_product_otherIntIterable, ptr @IntArray_iterator_, ptr @IntArray_B_iterator_, ptr @IntArray_iterator_, ptr @IntArray_B_iterator_, ptr @IntArray_iterator_, ptr @IntArray_B_repr_, ptr @Representable_repr_] }
@IntArrayIterator_hashtbl = constant [8 x ptr] [ptr null, ptr @IntIterator, ptr @any_typ, ptr null, ptr @IntArrayIterator, ptr @Iterator, ptr null, ptr @Object]
@IntArrayIterator_offset_tbl = constant [8 x i32] [i32 0, i32 15, i32 9, i32 0, i32 9, i32 17, i32 0, i32 17]
@IntArrayIterator = constant { [3 x i64], [6 x ptr], [8 x ptr] } { [3 x i64] [i64 5577199879563532693, i64 4611686018427388093, i64 7], [6 x ptr] [ptr @subtype_test, ptr @IntArrayIterator_hashtbl, ptr @IntArrayIterator_offset_tbl, ptr @_size_IntArrayIterator, ptr @_box_Default, ptr @_unbox_Default], [8 x ptr] [ptr @IntArrayIterator_field_array, ptr @IntArrayIterator_field_index, ptr @IntArrayIterator_B_init_arrayIntArray, ptr @IntArrayIterator_B_next_, ptr @IntArrayIterator_init_arrayIntArray, ptr @IntArrayIterator_next_, ptr @IntArrayIterator_B_next_, ptr @IntArrayIterator_next_] }
@Pair_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @Pair, ptr null]
@Pair_offset_tbl = constant [4 x i32] [i32 19, i32 9, i32 9, i32 0]
@Pair = constant { [3 x i64], [6 x ptr], [10 x ptr] } { [3 x i64] [i64 9197944775169318296, i64 4611686018427388081, i64 3], [6 x ptr] [ptr @subtype_test, ptr @Pair_hashtbl, ptr @Pair_offset_tbl, ptr @_size_Pair, ptr @_box_Default, ptr @_unbox_Default], [10 x ptr] [ptr @Pair_field_Pair_0, ptr @Pair_field_Pair_1, ptr @Pair_field_first, ptr @Pair_field_second, ptr @Pair_B_init_firstT_secondU, ptr @Pair_B_first_, ptr @Pair_B_second_, ptr @Pair_init_firstT_secondU, ptr @Pair_first_, ptr @Pair_second_] }
@Iterator2_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @Iterator2, ptr null]
@Iterator2_offset_tbl = constant [4 x i32] [i32 12, i32 9, i32 9, i32 0]
@Iterator2 = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 4189192806087951739, i64 4611686018427388081, i64 3], [6 x ptr] [ptr @subtype_test, ptr @Iterator2_hashtbl, ptr @Iterator2_offset_tbl, ptr @_size_Iterator2, ptr @_box_Default, ptr @_unbox_Default], [0 x ptr] undef }
@Iterable2_hashtbl = constant [4 x ptr] [ptr @Object, ptr null, ptr @any_typ, ptr @Iterable2]
@Iterable2_offset_tbl = constant [4 x i32] [i32 32, i32 0, i32 9, i32 9]
@Iterable2 = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 5693646204635713916, i64 4611686018427388091, i64 3], [6 x ptr] [ptr @subtype_test, ptr @Iterable2_hashtbl, ptr @Iterable2_offset_tbl, ptr @_size_Iterable2, ptr @_box_Default, ptr @_unbox_Default], [0 x ptr] undef }
@Array_hashtbl = constant [4 x ptr] [ptr @Object, ptr @Iterable2, ptr @Array, ptr @any_typ]
@Array_offset_tbl = constant [4 x i32] [i32 78, i32 55, i32 9, i32 9]
@Array = constant { [3 x i64], [6 x ptr], [69 x ptr] } { [3 x i64] [i64 -5261542750394134544, i64 4611686018427388721, i64 3], [6 x ptr] [ptr @subtype_test, ptr @Array_hashtbl, ptr @Array_offset_tbl, ptr @_size_Array, ptr @_box_Default, ptr @_unbox_Default], [69 x ptr] [ptr @Array_field_Array_0, ptr @Array_field_buffer, ptr @Array_field_length, ptr @Array_field_capacity, ptr @Array_B__Self_from_iterable_iterableIterable2T, ptr @Array_B_init_, ptr @Array_B_init_capacityPtri32, ptr @Array_B_length_, ptr @Array_B_capacity_, ptr @Array_B_append_xT, ptr @Array_B_grow_, ptr @Array_B__index_xPtri32, ptr @Array_B_throw_oob_xPtri32, ptr @Array_B_unsafe_index_xPtri32, ptr @Array_B_iterator_, ptr @Array_B_each_fFunctionT_to_Nothing, ptr @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Array_B_all_fFunctionT_to_Ptri1, ptr @Array_B_any_fFunctionT_to_Ptri1, ptr @Array_B_map_fFunctionT_to_U, ptr @Array_B_filter_fFunctionT_to_Ptri1, ptr @Array_B_chain_otherIterable2T, ptr @Array_B_interleave_otherIterable2T, ptr @Array_B_zip_otherIterable2U, ptr @Array_B_product_otherIterable2U, ptr @Array__Self_from_iterable_iterableIterable2T, ptr @Array_init_, ptr @Array_init_capacityPtri32, ptr @Array_length_, ptr @Array_capacity_, ptr @Array_append_xT, ptr @Array_grow_, ptr @Array__index_xPtri32, ptr @Array_throw_oob_xPtri32, ptr @Array_unsafe_index_xPtri32, ptr @Array_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U, ptr @Array_field_Array_0, ptr @Array_B_iterator_, ptr @Array_B_each_fFunctionT_to_Nothing, ptr @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Array_B_all_fFunctionT_to_Ptri1, ptr @Array_B_any_fFunctionT_to_Ptri1, ptr @Array_B_map_fFunctionT_to_U, ptr @Array_B_filter_fFunctionT_to_Ptri1, ptr @Array_B_chain_otherIterable2T, ptr @Array_B_interleave_otherIterable2T, ptr @Array_B_zip_otherIterable2U, ptr @Array_B_product_otherIterable2U, ptr @Array_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U] }
@ArrayIterator_hashtbl = constant [4 x ptr] [ptr @ArrayIterator, ptr @Object, ptr @any_typ, ptr @Iterator2]
@ArrayIterator_offset_tbl = constant [4 x i32] [i32 9, i32 19, i32 9, i32 16]
@ArrayIterator = constant { [3 x i64], [6 x ptr], [10 x ptr] } { [3 x i64] [i64 3447345754186651411, i64 4611686018427388181, i64 3], [6 x ptr] [ptr @subtype_test, ptr @ArrayIterator_hashtbl, ptr @ArrayIterator_offset_tbl, ptr @_size_ArrayIterator, ptr @_box_Default, ptr @_unbox_Default], [10 x ptr] [ptr @ArrayIterator_field_ArrayIterator_0, ptr @ArrayIterator_field_array, ptr @ArrayIterator_field_index, ptr @ArrayIterator_B_init_arrayArrayT, ptr @ArrayIterator_B_next_, ptr @ArrayIterator_init_arrayArrayT, ptr @ArrayIterator_next_, ptr @ArrayIterator_field_ArrayIterator_0, ptr @ArrayIterator_B_next_, ptr @ArrayIterator_next_] }
@MapIterable2_hashtbl = constant [4 x ptr] [ptr @Object, ptr @MapIterable2, ptr @any_typ, ptr @Iterable2]
@MapIterable2_offset_tbl = constant [4 x i32] [i32 60, i32 9, i32 9, i32 37]
@MapIterable2 = constant { [3 x i64], [6 x ptr], [51 x ptr] } { [3 x i64] [i64 -1724859134596891929, i64 4611686018427388091, i64 3], [6 x ptr] [ptr @subtype_test, ptr @MapIterable2_hashtbl, ptr @MapIterable2_offset_tbl, ptr @_size_MapIterable2, ptr @_box_Default, ptr @_unbox_Default], [51 x ptr] [ptr @MapIterable2_field_MapIterable2_0, ptr @MapIterable2_field_MapIterable2_1, ptr @MapIterable2_field_iterable, ptr @MapIterable2_field_f, ptr @MapIterable2_B_init_iterableIterable2T_fFunctionT_to_U, ptr @MapIterable2_B_iterator_, ptr @MapIterable2_B_each_fFunctionT_to_Nothing, ptr @MapIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @MapIterable2_B_all_fFunctionT_to_Ptri1, ptr @MapIterable2_B_any_fFunctionT_to_Ptri1, ptr @MapIterable2_B_map_fFunctionT_to_U, ptr @MapIterable2_B_filter_fFunctionT_to_Ptri1, ptr @MapIterable2_B_chain_otherIterable2T, ptr @MapIterable2_B_interleave_otherIterable2T, ptr @MapIterable2_B_zip_otherIterable2U, ptr @MapIterable2_B_product_otherIterable2U, ptr @MapIterable2_init_iterableIterable2T_fFunctionT_to_U, ptr @MapIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U, ptr @MapIterable2_field_MapIterable2_1, ptr @MapIterable2_B_iterator_, ptr @MapIterable2_B_each_fFunctionT_to_Nothing, ptr @MapIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @MapIterable2_B_all_fFunctionT_to_Ptri1, ptr @MapIterable2_B_any_fFunctionT_to_Ptri1, ptr @MapIterable2_B_map_fFunctionT_to_U, ptr @MapIterable2_B_filter_fFunctionT_to_Ptri1, ptr @MapIterable2_B_chain_otherIterable2T, ptr @MapIterable2_B_interleave_otherIterable2T, ptr @MapIterable2_B_zip_otherIterable2U, ptr @MapIterable2_B_product_otherIterable2U, ptr @MapIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U] }
@MapIterator2_hashtbl = constant [4 x ptr] [ptr @Object, ptr @Iterator2, ptr @MapIterator2, ptr @any_typ]
@MapIterator2_offset_tbl = constant [4 x i32] [i32 20, i32 17, i32 9, i32 9]
@MapIterator2 = constant { [3 x i64], [6 x ptr], [11 x ptr] } { [3 x i64] [i64 -10255947709272500, i64 4611686018427388279, i64 3], [6 x ptr] [ptr @subtype_test, ptr @MapIterator2_hashtbl, ptr @MapIterator2_offset_tbl, ptr @_size_MapIterator2, ptr @_box_Default, ptr @_unbox_Default], [11 x ptr] [ptr @MapIterator2_field_MapIterator2_0, ptr @MapIterator2_field_MapIterator2_1, ptr @MapIterator2_field_iterator, ptr @MapIterator2_field_f, ptr @MapIterator2_B_init_iteratorIterator2T_fFunctionT_to_U, ptr @MapIterator2_B_next_, ptr @MapIterator2_init_iteratorIterator2T_fFunctionT_to_U, ptr @MapIterator2_next_, ptr @MapIterator2_field_MapIterator2_1, ptr @MapIterator2_B_next_, ptr @MapIterator2_next_] }
@FilterIterable2_hashtbl = constant [4 x ptr] [ptr @Iterable2, ptr @FilterIterable2, ptr @any_typ, ptr @Object]
@FilterIterable2_offset_tbl = constant [4 x i32] [i32 36, i32 9, i32 9, i32 59]
@FilterIterable2 = constant { [3 x i64], [6 x ptr], [50 x ptr] } { [3 x i64] [i64 1178467452958968374, i64 4611686018427388093, i64 3], [6 x ptr] [ptr @subtype_test, ptr @FilterIterable2_hashtbl, ptr @FilterIterable2_offset_tbl, ptr @_size_FilterIterable2, ptr @_box_Default, ptr @_unbox_Default], [50 x ptr] [ptr @FilterIterable2_field_FilterIterable2_0, ptr @FilterIterable2_field_iterable, ptr @FilterIterable2_field_f, ptr @FilterIterable2_B_init_iterableIterable2T_fFunctionT_to_Ptri1, ptr @FilterIterable2_B_iterator_, ptr @FilterIterable2_B_each_fFunctionT_to_Nothing, ptr @FilterIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @FilterIterable2_B_all_fFunctionT_to_Ptri1, ptr @FilterIterable2_B_any_fFunctionT_to_Ptri1, ptr @FilterIterable2_B_map_fFunctionT_to_U, ptr @FilterIterable2_B_filter_fFunctionT_to_Ptri1, ptr @FilterIterable2_B_chain_otherIterable2T, ptr @FilterIterable2_B_interleave_otherIterable2T, ptr @FilterIterable2_B_zip_otherIterable2U, ptr @FilterIterable2_B_product_otherIterable2U, ptr @FilterIterable2_init_iterableIterable2T_fFunctionT_to_Ptri1, ptr @FilterIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U, ptr @FilterIterable2_field_FilterIterable2_0, ptr @FilterIterable2_B_iterator_, ptr @FilterIterable2_B_each_fFunctionT_to_Nothing, ptr @FilterIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @FilterIterable2_B_all_fFunctionT_to_Ptri1, ptr @FilterIterable2_B_any_fFunctionT_to_Ptri1, ptr @FilterIterable2_B_map_fFunctionT_to_U, ptr @FilterIterable2_B_filter_fFunctionT_to_Ptri1, ptr @FilterIterable2_B_chain_otherIterable2T, ptr @FilterIterable2_B_interleave_otherIterable2T, ptr @FilterIterable2_B_zip_otherIterable2U, ptr @FilterIterable2_B_product_otherIterable2U, ptr @FilterIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U] }
@FilterIterator2_hashtbl = constant [4 x ptr] [ptr @any_typ, ptr @Object, ptr @Iterator2, ptr @FilterIterator2]
@FilterIterator2_offset_tbl = constant [4 x i32] [i32 9, i32 19, i32 16, i32 9]
@FilterIterator2 = constant { [3 x i64], [6 x ptr], [10 x ptr] } { [3 x i64] [i64 8213847504843366470, i64 4611686018427388387, i64 3], [6 x ptr] [ptr @subtype_test, ptr @FilterIterator2_hashtbl, ptr @FilterIterator2_offset_tbl, ptr @_size_FilterIterator2, ptr @_box_Default, ptr @_unbox_Default], [10 x ptr] [ptr @FilterIterator2_field_FilterIterator2_0, ptr @FilterIterator2_field_iterator, ptr @FilterIterator2_field_f, ptr @FilterIterator2_B_init_iteratorIterator2T_fFunctionT_to_Ptri1, ptr @FilterIterator2_B_next_, ptr @FilterIterator2_init_iteratorIterator2T_fFunctionT_to_Ptri1, ptr @FilterIterator2_next_, ptr @FilterIterator2_field_FilterIterator2_0, ptr @FilterIterator2_B_next_, ptr @FilterIterator2_next_] }
@ChainIterable2_hashtbl = constant [4 x ptr] [ptr @Object, ptr @Iterable2, ptr @ChainIterable2, ptr @any_typ]
@ChainIterable2_offset_tbl = constant [4 x i32] [i32 59, i32 36, i32 9, i32 9]
@ChainIterable2 = constant { [3 x i64], [6 x ptr], [50 x ptr] } { [3 x i64] [i64 -5233298072945030060, i64 4611686018427388279, i64 3], [6 x ptr] [ptr @subtype_test, ptr @ChainIterable2_hashtbl, ptr @ChainIterable2_offset_tbl, ptr @_size_ChainIterable2, ptr @_box_Default, ptr @_unbox_Default], [50 x ptr] [ptr @ChainIterable2_field_ChainIterable2_0, ptr @ChainIterable2_field_first, ptr @ChainIterable2_field_second, ptr @ChainIterable2_B_init_firstIterable2T_secondIterable2T, ptr @ChainIterable2_B_iterator_, ptr @ChainIterable2_B_each_fFunctionT_to_Nothing, ptr @ChainIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ChainIterable2_B_all_fFunctionT_to_Ptri1, ptr @ChainIterable2_B_any_fFunctionT_to_Ptri1, ptr @ChainIterable2_B_map_fFunctionT_to_U, ptr @ChainIterable2_B_filter_fFunctionT_to_Ptri1, ptr @ChainIterable2_B_chain_otherIterable2T, ptr @ChainIterable2_B_interleave_otherIterable2T, ptr @ChainIterable2_B_zip_otherIterable2U, ptr @ChainIterable2_B_product_otherIterable2U, ptr @ChainIterable2_init_firstIterable2T_secondIterable2T, ptr @ChainIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U, ptr @ChainIterable2_field_ChainIterable2_0, ptr @ChainIterable2_B_iterator_, ptr @ChainIterable2_B_each_fFunctionT_to_Nothing, ptr @ChainIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ChainIterable2_B_all_fFunctionT_to_Ptri1, ptr @ChainIterable2_B_any_fFunctionT_to_Ptri1, ptr @ChainIterable2_B_map_fFunctionT_to_U, ptr @ChainIterable2_B_filter_fFunctionT_to_Ptri1, ptr @ChainIterable2_B_chain_otherIterable2T, ptr @ChainIterable2_B_interleave_otherIterable2T, ptr @ChainIterable2_B_zip_otherIterable2U, ptr @ChainIterable2_B_product_otherIterable2U, ptr @ChainIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U] }
@ChainIterator2_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @Iterator2, ptr @ChainIterator2]
@ChainIterator2_offset_tbl = constant [4 x i32] [i32 20, i32 9, i32 17, i32 9]
@ChainIterator2 = constant { [3 x i64], [6 x ptr], [11 x ptr] } { [3 x i64] [i64 -228267985060461774, i64 4611686018427388081, i64 3], [6 x ptr] [ptr @subtype_test, ptr @ChainIterator2_hashtbl, ptr @ChainIterator2_offset_tbl, ptr @_size_ChainIterator2, ptr @_box_Default, ptr @_unbox_Default], [11 x ptr] [ptr @ChainIterator2_field_ChainIterator2_0, ptr @ChainIterator2_field_first, ptr @ChainIterator2_field_second, ptr @ChainIterator2_field_on_first, ptr @ChainIterator2_B_init_firstIterator2T_secondIterator2T, ptr @ChainIterator2_B_next_, ptr @ChainIterator2_init_firstIterator2T_secondIterator2T, ptr @ChainIterator2_next_, ptr @ChainIterator2_field_ChainIterator2_0, ptr @ChainIterator2_B_next_, ptr @ChainIterator2_next_] }
@InterleaveIterable2_hashtbl = constant [4 x ptr] [ptr @Iterable2, ptr @InterleaveIterable2, ptr @any_typ, ptr @Object]
@InterleaveIterable2_offset_tbl = constant [4 x i32] [i32 36, i32 9, i32 9, i32 59]
@InterleaveIterable2 = constant { [3 x i64], [6 x ptr], [50 x ptr] } { [3 x i64] [i64 -6258231685215461775, i64 4611686018427388093, i64 3], [6 x ptr] [ptr @subtype_test, ptr @InterleaveIterable2_hashtbl, ptr @InterleaveIterable2_offset_tbl, ptr @_size_InterleaveIterable2, ptr @_box_Default, ptr @_unbox_Default], [50 x ptr] [ptr @InterleaveIterable2_field_InterleaveIterable2_0, ptr @InterleaveIterable2_field_first, ptr @InterleaveIterable2_field_second, ptr @InterleaveIterable2_B_init_firstIterable2T_secondIterable2T, ptr @InterleaveIterable2_B_iterator_, ptr @InterleaveIterable2_B_each_fFunctionT_to_Nothing, ptr @InterleaveIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @InterleaveIterable2_B_all_fFunctionT_to_Ptri1, ptr @InterleaveIterable2_B_any_fFunctionT_to_Ptri1, ptr @InterleaveIterable2_B_map_fFunctionT_to_U, ptr @InterleaveIterable2_B_filter_fFunctionT_to_Ptri1, ptr @InterleaveIterable2_B_chain_otherIterable2T, ptr @InterleaveIterable2_B_interleave_otherIterable2T, ptr @InterleaveIterable2_B_zip_otherIterable2U, ptr @InterleaveIterable2_B_product_otherIterable2U, ptr @InterleaveIterable2_init_firstIterable2T_secondIterable2T, ptr @InterleaveIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U, ptr @InterleaveIterable2_field_InterleaveIterable2_0, ptr @InterleaveIterable2_B_iterator_, ptr @InterleaveIterable2_B_each_fFunctionT_to_Nothing, ptr @InterleaveIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @InterleaveIterable2_B_all_fFunctionT_to_Ptri1, ptr @InterleaveIterable2_B_any_fFunctionT_to_Ptri1, ptr @InterleaveIterable2_B_map_fFunctionT_to_U, ptr @InterleaveIterable2_B_filter_fFunctionT_to_Ptri1, ptr @InterleaveIterable2_B_chain_otherIterable2T, ptr @InterleaveIterable2_B_interleave_otherIterable2T, ptr @InterleaveIterable2_B_zip_otherIterable2U, ptr @InterleaveIterable2_B_product_otherIterable2U, ptr @InterleaveIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U] }
@InterleaveIterator2_hashtbl = constant [4 x ptr] [ptr @Object, ptr @Iterator2, ptr @InterleaveIterator2, ptr @any_typ]
@InterleaveIterator2_offset_tbl = constant [4 x i32] [i32 20, i32 17, i32 9, i32 9]
@InterleaveIterator2 = constant { [3 x i64], [6 x ptr], [11 x ptr] } { [3 x i64] [i64 6709847746581360093, i64 4611686018427388279, i64 3], [6 x ptr] [ptr @subtype_test, ptr @InterleaveIterator2_hashtbl, ptr @InterleaveIterator2_offset_tbl, ptr @_size_InterleaveIterator2, ptr @_box_Default, ptr @_unbox_Default], [11 x ptr] [ptr @InterleaveIterator2_field_InterleaveIterator2_0, ptr @InterleaveIterator2_field_first, ptr @InterleaveIterator2_field_second, ptr @InterleaveIterator2_field_on_first, ptr @InterleaveIterator2_B_init_firstIterator2T_secondIterator2T, ptr @InterleaveIterator2_B_next_, ptr @InterleaveIterator2_init_firstIterator2T_secondIterator2T, ptr @InterleaveIterator2_next_, ptr @InterleaveIterator2_field_InterleaveIterator2_0, ptr @InterleaveIterator2_B_next_, ptr @InterleaveIterator2_next_] }
@ZipIterable2_hashtbl = constant [4 x ptr] [ptr @any_typ, ptr @ZipIterable2, ptr @Iterable2, ptr @Object]
@ZipIterable2_offset_tbl = constant [4 x i32] [i32 9, i32 9, i32 38, i32 61]
@ZipIterable2 = constant { [3 x i64], [6 x ptr], [52 x ptr] } { [3 x i64] [i64 -3218950579047519815, i64 4611686018427388289, i64 3], [6 x ptr] [ptr @subtype_test, ptr @ZipIterable2_hashtbl, ptr @ZipIterable2_offset_tbl, ptr @_size_ZipIterable2, ptr @_box_Default, ptr @_unbox_Default], [52 x ptr] [ptr @ZipIterable2_field_ZipIterable2_0, ptr @ZipIterable2_field_ZipIterable2_1, ptr @ZipIterable2_field_ZipIterable2_2, ptr @ZipIterable2_field_first, ptr @ZipIterable2_field_second, ptr @ZipIterable2_B_init_firstIterable2T_secondIterable2U, ptr @ZipIterable2_B_iterator_, ptr @ZipIterable2_B_each_fFunctionT_to_Nothing, ptr @ZipIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ZipIterable2_B_all_fFunctionT_to_Ptri1, ptr @ZipIterable2_B_any_fFunctionT_to_Ptri1, ptr @ZipIterable2_B_map_fFunctionT_to_U, ptr @ZipIterable2_B_filter_fFunctionT_to_Ptri1, ptr @ZipIterable2_B_chain_otherIterable2T, ptr @ZipIterable2_B_interleave_otherIterable2T, ptr @ZipIterable2_B_zip_otherIterable2U, ptr @ZipIterable2_B_product_otherIterable2U, ptr @ZipIterable2_init_firstIterable2T_secondIterable2U, ptr @ZipIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U, ptr @ZipIterable2_field_ZipIterable2_2, ptr @ZipIterable2_B_iterator_, ptr @ZipIterable2_B_each_fFunctionT_to_Nothing, ptr @ZipIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ZipIterable2_B_all_fFunctionT_to_Ptri1, ptr @ZipIterable2_B_any_fFunctionT_to_Ptri1, ptr @ZipIterable2_B_map_fFunctionT_to_U, ptr @ZipIterable2_B_filter_fFunctionT_to_Ptri1, ptr @ZipIterable2_B_chain_otherIterable2T, ptr @ZipIterable2_B_interleave_otherIterable2T, ptr @ZipIterable2_B_zip_otherIterable2U, ptr @ZipIterable2_B_product_otherIterable2U, ptr @ZipIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U] }
@ZipIterator2_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @Iterator2, ptr @ZipIterator2]
@ZipIterator2_offset_tbl = constant [4 x i32] [i32 21, i32 9, i32 18, i32 9]
@ZipIterator2 = constant { [3 x i64], [6 x ptr], [12 x ptr] } { [3 x i64] [i64 5502728639611621286, i64 4611686018427388081, i64 3], [6 x ptr] [ptr @subtype_test, ptr @ZipIterator2_hashtbl, ptr @ZipIterator2_offset_tbl, ptr @_size_ZipIterator2, ptr @_box_Default, ptr @_unbox_Default], [12 x ptr] [ptr @ZipIterator2_field_ZipIterator2_0, ptr @ZipIterator2_field_ZipIterator2_1, ptr @ZipIterator2_field_ZipIterator2_2, ptr @ZipIterator2_field_first, ptr @ZipIterator2_field_second, ptr @ZipIterator2_B_init_firstIterator2T_secondIterator2U, ptr @ZipIterator2_B_next_, ptr @ZipIterator2_init_firstIterator2T_secondIterator2U, ptr @ZipIterator2_next_, ptr @ZipIterator2_field_ZipIterator2_2, ptr @ZipIterator2_B_next_, ptr @ZipIterator2_next_] }
@ProductIterable2_hashtbl = constant [4 x ptr] [ptr @ProductIterable2, ptr @Object, ptr @any_typ, ptr @Iterable2]
@ProductIterable2_offset_tbl = constant [4 x i32] [i32 9, i32 61, i32 9, i32 38]
@ProductIterable2 = constant { [3 x i64], [6 x ptr], [52 x ptr] } { [3 x i64] [i64 7827074759551300494, i64 4611686018427388319, i64 3], [6 x ptr] [ptr @subtype_test, ptr @ProductIterable2_hashtbl, ptr @ProductIterable2_offset_tbl, ptr @_size_ProductIterable2, ptr @_box_Default, ptr @_unbox_Default], [52 x ptr] [ptr @ProductIterable2_field_ProductIterable2_0, ptr @ProductIterable2_field_ProductIterable2_1, ptr @ProductIterable2_field_ProductIterable2_2, ptr @ProductIterable2_field_first, ptr @ProductIterable2_field_second, ptr @ProductIterable2_B_init_firstIterable2T_secondIterable2U, ptr @ProductIterable2_B_iterator_, ptr @ProductIterable2_B_each_fFunctionT_to_Nothing, ptr @ProductIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ProductIterable2_B_all_fFunctionT_to_Ptri1, ptr @ProductIterable2_B_any_fFunctionT_to_Ptri1, ptr @ProductIterable2_B_map_fFunctionT_to_U, ptr @ProductIterable2_B_filter_fFunctionT_to_Ptri1, ptr @ProductIterable2_B_chain_otherIterable2T, ptr @ProductIterable2_B_interleave_otherIterable2T, ptr @ProductIterable2_B_zip_otherIterable2U, ptr @ProductIterable2_B_product_otherIterable2U, ptr @ProductIterable2_init_firstIterable2T_secondIterable2U, ptr @ProductIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U, ptr @ProductIterable2_field_ProductIterable2_2, ptr @ProductIterable2_B_iterator_, ptr @ProductIterable2_B_each_fFunctionT_to_Nothing, ptr @ProductIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ProductIterable2_B_all_fFunctionT_to_Ptri1, ptr @ProductIterable2_B_any_fFunctionT_to_Ptri1, ptr @ProductIterable2_B_map_fFunctionT_to_U, ptr @ProductIterable2_B_filter_fFunctionT_to_Ptri1, ptr @ProductIterable2_B_chain_otherIterable2T, ptr @ProductIterable2_B_interleave_otherIterable2T, ptr @ProductIterable2_B_zip_otherIterable2U, ptr @ProductIterable2_B_product_otherIterable2U, ptr @ProductIterable2_iterator_, ptr @Iterable2_each_fFunctionT_to_Nothing, ptr @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable2_all_fFunctionT_to_Ptri1, ptr @Iterable2_any_fFunctionT_to_Ptri1, ptr @Iterable2_map_fFunctionT_to_U, ptr @Iterable2_filter_fFunctionT_to_Ptri1, ptr @Iterable2_chain_otherIterable2T, ptr @Iterable2_interleave_otherIterable2T, ptr @Iterable2_zip_otherIterable2U, ptr @Iterable2_product_otherIterable2U] }
@ProductIterator2_hashtbl = constant [4 x ptr] [ptr @ProductIterator2, ptr @Iterator2, ptr @any_typ, ptr @Object]
@ProductIterator2_offset_tbl = constant [4 x i32] [i32 9, i32 20, i32 9, i32 23]
@ProductIterator2 = constant { [3 x i64], [6 x ptr], [14 x ptr] } { [3 x i64] [i64 4440657219728359865, i64 4611686018427388093, i64 3], [6 x ptr] [ptr @subtype_test, ptr @ProductIterator2_hashtbl, ptr @ProductIterator2_offset_tbl, ptr @_size_ProductIterator2, ptr @_box_Default, ptr @_unbox_Default], [14 x ptr] [ptr @ProductIterator2_field_ProductIterator2_0, ptr @ProductIterator2_field_ProductIterator2_1, ptr @ProductIterator2_field_ProductIterator2_2, ptr @ProductIterator2_field_first_iterator, ptr @ProductIterator2_field_second_iterator, ptr @ProductIterator2_field_second_iterable, ptr @ProductIterator2_field_current_first, ptr @ProductIterator2_B_init_first_iterableIterable2T_second_iterableIterable2U, ptr @ProductIterator2_B_next_, ptr @ProductIterator2_init_first_iterableIterable2T_second_iterableIterable2U, ptr @ProductIterator2_next_, ptr @ProductIterator2_field_ProductIterator2_2, ptr @ProductIterator2_B_next_, ptr @ProductIterator2_next_] }
@Math_hashtbl = constant [4 x ptr] [ptr @Object, ptr null, ptr @any_typ, ptr @Math]
@Math_offset_tbl = constant [4 x i32] [i32 26, i32 0, i32 9, i32 9]
@Math = constant { [3 x i64], [6 x ptr], [17 x ptr] } { [3 x i64] [i64 8094150130346788308, i64 4611686018427388091, i64 3], [6 x ptr] [ptr @subtype_test, ptr @Math_hashtbl, ptr @Math_offset_tbl, ptr @_size_Math, ptr @_box_Default, ptr @_unbox_Default], [17 x ptr] [ptr @Math_B__Self_sqrt_xPtrf64, ptr @Math_B__Self_abs_xPtri32__Self_abs_xPtrf64, ptr @Math_B__Self_max_aPtri32_bPtri32__Self_max_aPtrf64_bPtrf64, ptr @Math_B__Self_min_aPtri32_bPtri32__Self_min_aPtrf64_bPtrf64, ptr @Math_B__Self_round_xPtrf64, ptr @Math_B__Self_floor_xPtrf64, ptr @Math_B__Self_ceiling_xPtrf64, ptr @Math__Self_sqrt_xPtrf64, ptr @Math__Self_abs_xPtri32, ptr @Math__Self_abs_xPtrf64, ptr @Math__Self_max_aPtri32_bPtri32, ptr @Math__Self_max_aPtrf64_bPtrf64, ptr @Math__Self_min_aPtri32_bPtri32, ptr @Math__Self_min_aPtrf64_bPtrf64, ptr @Math__Self_round_xPtrf64, ptr @Math__Self_floor_xPtrf64, ptr @Math__Self_ceiling_xPtrf64] }
@Integer_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Integer]
@Integer_offset_tbl = constant [4 x i32] [i32 22, i32 9, i32 0, i32 9]
@Integer = constant { [3 x i64], [6 x ptr], [13 x ptr] } { [3 x i64] [i64 -735147942809078232, i64 4611686018427388081, i64 3], [6 x ptr] [ptr @subtype_test, ptr @Integer_hashtbl, ptr @Integer_offset_tbl, ptr @_size_Integer, ptr @_box_Default, ptr @_unbox_Default], [13 x ptr] [ptr @Integer_field_value, ptr @Integer_B_init_valuePtri32, ptr @Integer_B__ADD_otherPtri32, ptr @Integer_B__SUB_otherPtri32, ptr @Integer_B__MUL_otherPtri32, ptr @Integer_B__DIV_otherPtri32, ptr @Integer_B_print_, ptr @Integer_init_valuePtri32, ptr @Integer__ADD_otherPtri32, ptr @Integer__SUB_otherPtri32, ptr @Integer__MUL_otherPtri32, ptr @Integer__DIV_otherPtri32, ptr @Integer_print_] }
@BigBoy_hashtbl = constant [4 x ptr] [ptr @Representable, ptr @Object, ptr @any_typ, ptr @BigBoy]
@BigBoy_offset_tbl = constant [4 x i32] [i32 13, i32 15, i32 9, i32 9]
@BigBoy = constant { [3 x i64], [6 x ptr], [6 x ptr] } { [3 x i64] [i64 3069357308562348185, i64 4611686018427388361, i64 3], [6 x ptr] [ptr @subtype_test, ptr @BigBoy_hashtbl, ptr @BigBoy_offset_tbl, ptr @_size_BigBoy, ptr @_box_Default, ptr @_unbox_Default], [6 x ptr] [ptr @BigBoy_B_introduce_, ptr @BigBoy_B_repr_, ptr @BigBoy_introduce_, ptr @Representable_repr_, ptr @BigBoy_B_repr_, ptr @Representable_repr_] }
@Integer2_hashtbl = constant [8 x ptr] [ptr null, ptr @Object, ptr @any_typ, ptr @Integer2, ptr @Integer, ptr @Representable, ptr null, ptr @BigBoy]
@Integer2_offset_tbl = constant [8 x i32] [i32 0, i32 41, i32 9, i32 9, i32 28, i32 47, i32 0, i32 41]
@Integer2 = constant { [3 x i64], [6 x ptr], [40 x ptr] } { [3 x i64] [i64 1844024195090879880, i64 4611686018427388181, i64 7], [6 x ptr] [ptr @subtype_test, ptr @Integer2_hashtbl, ptr @Integer2_offset_tbl, ptr @_size_Integer2, ptr @_box_Default, ptr @_unbox_Default], [40 x ptr] [ptr @Integer2_field_value, ptr @Integer2_B_value_, ptr @Integer2_B_init_valuePtri32, ptr @Integer2_B__ADD_otherPtri32, ptr @Integer2_B__SUB_otherPtri32, ptr @Integer2_B__MUL_otherPtri32, ptr @Integer2_B__DIV_otherPtri32, ptr @Integer2_B_print_, ptr @Integer2_B_introduce_, ptr @Integer2_B_repr_, ptr @Integer2_value_, ptr @Integer_init_valuePtri32, ptr @Integer__ADD_otherPtri32, ptr @Integer__SUB_otherPtri32, ptr @Integer__MUL_otherPtri32, ptr @Integer__DIV_otherPtri32, ptr @Integer_print_, ptr @BigBoy_introduce_, ptr @Integer2_repr_, ptr @Integer2_field_value, ptr @Integer2_B_init_valuePtri32, ptr @Integer2_B__ADD_otherPtri32, ptr @Integer2_B__SUB_otherPtri32, ptr @Integer2_B__MUL_otherPtri32, ptr @Integer2_B__DIV_otherPtri32, ptr @Integer2_B_print_, ptr @Integer_init_valuePtri32, ptr @Integer__ADD_otherPtri32, ptr @Integer__SUB_otherPtri32, ptr @Integer__MUL_otherPtri32, ptr @Integer__DIV_otherPtri32, ptr @Integer_print_, ptr @Integer2_B_introduce_, ptr @Integer2_B_repr_, ptr @BigBoy_introduce_, ptr @Integer2_repr_, ptr @Integer2_B_repr_, ptr @Integer2_repr_, ptr @Integer2_B_repr_, ptr @Integer2_repr_] }
@Animal_hashtbl = constant [4 x ptr] [ptr @Object, ptr null, ptr @any_typ, ptr @Animal]
@Animal_offset_tbl = constant [4 x i32] [i32 22, i32 0, i32 9, i32 9]
@Animal = constant { [3 x i64], [6 x ptr], [13 x ptr] } { [3 x i64] [i64 1075018126824711487, i64 4611686018427388091, i64 3], [6 x ptr] [ptr @subtype_test, ptr @Animal_hashtbl, ptr @Animal_offset_tbl, ptr @_size_Animal, ptr @_box_Default, ptr @_unbox_Default], [13 x ptr] [ptr @Animal_field_age, ptr @Animal_field_hp, ptr @Animal_field_skill, ptr @Animal_B_init_agePtri32_hpPtrf64_skillPtri32, ptr @Animal_B_say_age_, ptr @Animal_B_say_skill_, ptr @Animal_B_say_messagePtri32, ptr @Animal_B_do_nothing_, ptr @Animal_init_agePtri32_hpPtrf64_skillPtri32, ptr @Animal_say_age_, ptr @Animal_say_skill_, ptr @Animal_say_messagePtri32, ptr @Animal_do_nothing_] }
@Beaver_hashtbl = constant [4 x ptr] [ptr null, ptr @Object, ptr @any_typ, ptr @Beaver]
@Beaver_offset_tbl = constant [4 x i32] [i32 0, i32 17, i32 9, i32 9]
@Beaver = constant { [3 x i64], [6 x ptr], [8 x ptr] } { [3 x i64] [i64 -6124772949900838462, i64 4611686018427388097, i64 3], [6 x ptr] [ptr @subtype_test, ptr @Beaver_hashtbl, ptr @Beaver_offset_tbl, ptr @_size_Beaver, ptr @_box_Default, ptr @_unbox_Default], [8 x ptr] [ptr @Beaver_field_color, ptr @Beaver_field_name, ptr @Beaver_B_init_colorPtri32_namePtrf64, ptr @Beaver_B__ADD_xPtri32, ptr @Beaver_B_say_color_, ptr @Beaver_init_colorPtri32_namePtrf64, ptr @Beaver__ADD_xPtri32, ptr @Beaver_say_color_] }
@ListNode_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @ListNode]
@ListNode_offset_tbl = constant [4 x i32] [i32 21, i32 9, i32 0, i32 9]
@ListNode = constant { [3 x i64], [6 x ptr], [12 x ptr] } { [3 x i64] [i64 -1756024950533091476, i64 4611686018427388081, i64 3], [6 x ptr] [ptr @subtype_test, ptr @ListNode_hashtbl, ptr @ListNode_offset_tbl, ptr @_size_ListNode, ptr @_box_Default, ptr @_unbox_Default], [12 x ptr] [ptr @ListNode_field_data, ptr @ListNode_field_next, ptr @ListNode_B_init_dataPtri32, ptr @ListNode_B_push_nextListNode, ptr @ListNode_B_next_, ptr @ListNode_B_data_, ptr @ListNode_B_iterator_, ptr @ListNode_init_dataPtri32, ptr @ListNode_push_nextListNode, ptr @ListNode_next_, ptr @ListNode_data_, ptr @ListNode_iterator_] }
@ListIterator_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @ListIterator, ptr null]
@ListIterator_offset_tbl = constant [4 x i32] [i32 14, i32 9, i32 9, i32 0]
@ListIterator = constant { [3 x i64], [6 x ptr], [5 x ptr] } { [3 x i64] [i64 -5838699946612561379, i64 4611686018427388081, i64 3], [6 x ptr] [ptr @subtype_test, ptr @ListIterator_hashtbl, ptr @ListIterator_offset_tbl, ptr @_size_ListIterator, ptr @_box_Default, ptr @_unbox_Default], [5 x ptr] [ptr @ListIterator_field_node, ptr @ListIterator_B_init_nodeListNode, ptr @ListIterator_B_next_, ptr @ListIterator_init_nodeListNode, ptr @ListIterator_next_] }
@Bard_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @Bard, ptr null]
@Bard_offset_tbl = constant [4 x i32] [i32 16, i32 9, i32 9, i32 0]
@Bard = constant { [3 x i64], [6 x ptr], [7 x ptr] } { [3 x i64] [i64 -7979915337087193093, i64 4611686018427388081, i64 3], [6 x ptr] [ptr @subtype_test, ptr @Bard_hashtbl, ptr @Bard_offset_tbl, ptr @_size_Bard, ptr @_box_Default, ptr @_unbox_Default], [7 x ptr] [ptr @Bard_B_init_, ptr @Bard_B_take_aAnimal_bBeaver_take_aPtri32_bPtrf64_take_aPtrf64_bPtrf64_take_aPtri32_bPtri32, ptr @Bard_init_, ptr @Bard_take_aAnimal_bBeaver, ptr @Bard_take_aPtri32_bPtrf64, ptr @Bard_take_aPtrf64_bPtrf64, ptr @Bard_take_aPtri32_bPtri32] }
@String_field_bytes = internal constant { ptr, ptr } { ptr @String_getter_bytes, ptr @String_setter_bytes }
@String_field_length = internal constant { ptr, ptr } { ptr @String_getter_length, ptr @String_setter_length }
@String_field_capacity = internal constant { ptr, ptr } { ptr @String_getter_capacity, ptr @String_setter_capacity }
@Character_field_byte = internal constant { ptr, ptr } { ptr @Character_getter_byte, ptr @Character_setter_byte }
@StringIterator_field_str = internal constant { ptr, ptr } { ptr @StringIterator_getter_str, ptr @StringIterator_setter_str }
@StringIterator_field_index = internal constant { ptr, ptr } { ptr @StringIterator_getter_index, ptr @StringIterator_setter_index }
@Exception_field_line_number = internal constant { ptr, ptr } { ptr @Exception_getter_line_number, ptr @Exception_setter_line_number }
@Exception_field_file_name = internal constant { ptr, ptr } { ptr @Exception_getter_file_name, ptr @Exception_setter_file_name }
@Exception_field_message = internal constant { ptr, ptr } { ptr @Exception_getter_message, ptr @Exception_setter_message }
@Channel_field_value = internal constant { ptr, ptr } { ptr @Channel_getter_value, ptr @Channel_setter_value }
@MapIterable_field_iterable = internal constant { ptr, ptr } { ptr @MapIterable_getter_iterable, ptr @MapIterable_setter_iterable }
@MapIterable_field_f = internal constant { ptr, ptr } { ptr @MapIterable_getter_f, ptr @MapIterable_setter_f }
@MapIterator_field_iterator = internal constant { ptr, ptr } { ptr @MapIterator_getter_iterator, ptr @MapIterator_setter_iterator }
@MapIterator_field_f = internal constant { ptr, ptr } { ptr @MapIterator_getter_f, ptr @MapIterator_setter_f }
@FilterIterable_field_iterable = internal constant { ptr, ptr } { ptr @FilterIterable_getter_iterable, ptr @FilterIterable_setter_iterable }
@FilterIterable_field_f = internal constant { ptr, ptr } { ptr @FilterIterable_getter_f, ptr @FilterIterable_setter_f }
@FilterIterator_field_iterator = internal constant { ptr, ptr } { ptr @FilterIterator_getter_iterator, ptr @FilterIterator_setter_iterator }
@FilterIterator_field_f = internal constant { ptr, ptr } { ptr @FilterIterator_getter_f, ptr @FilterIterator_setter_f }
@ChainIterable_field_first = internal constant { ptr, ptr } { ptr @ChainIterable_getter_first, ptr @ChainIterable_setter_first }
@ChainIterable_field_second = internal constant { ptr, ptr } { ptr @ChainIterable_getter_second, ptr @ChainIterable_setter_second }
@ChainIterator_field_first = internal constant { ptr, ptr } { ptr @ChainIterator_getter_first, ptr @ChainIterator_setter_first }
@ChainIterator_field_second = internal constant { ptr, ptr } { ptr @ChainIterator_getter_second, ptr @ChainIterator_setter_second }
@ChainIterator_field_on_first = internal constant { ptr, ptr } { ptr @ChainIterator_getter_on_first, ptr @ChainIterator_setter_on_first }
@InterleaveIterable_field_first = internal constant { ptr, ptr } { ptr @InterleaveIterable_getter_first, ptr @InterleaveIterable_setter_first }
@InterleaveIterable_field_second = internal constant { ptr, ptr } { ptr @InterleaveIterable_getter_second, ptr @InterleaveIterable_setter_second }
@InterleaveIterator_field_first = internal constant { ptr, ptr } { ptr @InterleaveIterator_getter_first, ptr @InterleaveIterator_setter_first }
@InterleaveIterator_field_second = internal constant { ptr, ptr } { ptr @InterleaveIterator_getter_second, ptr @InterleaveIterator_setter_second }
@InterleaveIterator_field_on_first = internal constant { ptr, ptr } { ptr @InterleaveIterator_getter_on_first, ptr @InterleaveIterator_setter_on_first }
@ZipIterable_field_first = internal constant { ptr, ptr } { ptr @ZipIterable_getter_first, ptr @ZipIterable_setter_first }
@ZipIterable_field_second = internal constant { ptr, ptr } { ptr @ZipIterable_getter_second, ptr @ZipIterable_setter_second }
@ZipIterator_field_first = internal constant { ptr, ptr } { ptr @ZipIterator_getter_first, ptr @ZipIterator_setter_first }
@ZipIterator_field_second = internal constant { ptr, ptr } { ptr @ZipIterator_getter_second, ptr @ZipIterator_setter_second }
@ProductIterable_field_first = internal constant { ptr, ptr } { ptr @ProductIterable_getter_first, ptr @ProductIterable_setter_first }
@ProductIterable_field_second = internal constant { ptr, ptr } { ptr @ProductIterable_getter_second, ptr @ProductIterable_setter_second }
@ProductIterator_field_first_iterator = internal constant { ptr, ptr } { ptr @ProductIterator_getter_first_iterator, ptr @ProductIterator_setter_first_iterator }
@ProductIterator_field_second_iterator = internal constant { ptr, ptr } { ptr @ProductIterator_getter_second_iterator, ptr @ProductIterator_setter_second_iterator }
@ProductIterator_field_second_iterable = internal constant { ptr, ptr } { ptr @ProductIterator_getter_second_iterable, ptr @ProductIterator_setter_second_iterable }
@ProductIterator_field_current_first = internal constant { ptr, ptr } { ptr @ProductIterator_getter_current_first, ptr @ProductIterator_setter_current_first }
@Range_field_start = internal constant { ptr, ptr } { ptr @Range_getter_start, ptr @Range_setter_start }
@Range_field_end = internal constant { ptr, ptr } { ptr @Range_getter_end, ptr @Range_setter_end }
@Range_field_step = internal constant { ptr, ptr } { ptr @Range_getter_step, ptr @Range_setter_step }
@RangeIterator_field_counter = internal constant { ptr, ptr } { ptr @RangeIterator_getter_counter, ptr @RangeIterator_setter_counter }
@RangeIterator_field_end = internal constant { ptr, ptr } { ptr @RangeIterator_getter_end, ptr @RangeIterator_setter_end }
@RangeIterator_field_step = internal constant { ptr, ptr } { ptr @RangeIterator_getter_step, ptr @RangeIterator_setter_step }
@OutOfBoundsDetails_field_bounds = internal constant { ptr, ptr } { ptr @OutOfBoundsDetails_getter_bounds, ptr @OutOfBoundsDetails_setter_bounds }
@OutOfBoundsDetails_field_index = internal constant { ptr, ptr } { ptr @OutOfBoundsDetails_getter_index, ptr @OutOfBoundsDetails_setter_index }
@OutOfBounds_field_details = internal constant { ptr, ptr } { ptr @OutOfBounds_getter_details, ptr @OutOfBounds_setter_details }
@OutOfBounds_field_line_number = internal constant { ptr, ptr } { ptr @OutOfBounds_getter_line_number, ptr @OutOfBounds_setter_line_number }
@OutOfBounds_field_file_name = internal constant { ptr, ptr } { ptr @OutOfBounds_getter_file_name, ptr @OutOfBounds_setter_file_name }
@OutOfBounds_field_message = internal constant { ptr, ptr } { ptr @OutOfBounds_getter_message, ptr @OutOfBounds_setter_message }
@IntArray_field_buffer = internal constant { ptr, ptr } { ptr @IntArray_getter_buffer, ptr @IntArray_setter_buffer }
@IntArray_field_length = internal constant { ptr, ptr } { ptr @IntArray_getter_length, ptr @IntArray_setter_length }
@IntArray_field_capacity = internal constant { ptr, ptr } { ptr @IntArray_getter_capacity, ptr @IntArray_setter_capacity }
@IntArrayIterator_field_array = internal constant { ptr, ptr } { ptr @IntArrayIterator_getter_array, ptr @IntArrayIterator_setter_array }
@IntArrayIterator_field_index = internal constant { ptr, ptr } { ptr @IntArrayIterator_getter_index, ptr @IntArrayIterator_setter_index }
@Pair_field_first = internal constant { ptr, ptr } { ptr @Pair_getter_first, ptr @Pair_setter_first }
@Pair_field_second = internal constant { ptr, ptr } { ptr @Pair_getter_second, ptr @Pair_setter_second }
@Array_field_buffer = internal constant { ptr, ptr } { ptr @Array_getter_buffer, ptr @Array_setter_buffer }
@Array_field_length = internal constant { ptr, ptr } { ptr @Array_getter_length, ptr @Array_setter_length }
@Array_field_capacity = internal constant { ptr, ptr } { ptr @Array_getter_capacity, ptr @Array_setter_capacity }
@ArrayIterator_field_array = internal constant { ptr, ptr } { ptr @ArrayIterator_getter_array, ptr @ArrayIterator_setter_array }
@ArrayIterator_field_index = internal constant { ptr, ptr } { ptr @ArrayIterator_getter_index, ptr @ArrayIterator_setter_index }
@MapIterable2_field_iterable = internal constant { ptr, ptr } { ptr @MapIterable2_getter_iterable, ptr @MapIterable2_setter_iterable }
@MapIterable2_field_f = internal constant { ptr, ptr } { ptr @MapIterable2_getter_f, ptr @MapIterable2_setter_f }
@MapIterator2_field_iterator = internal constant { ptr, ptr } { ptr @MapIterator2_getter_iterator, ptr @MapIterator2_setter_iterator }
@MapIterator2_field_f = internal constant { ptr, ptr } { ptr @MapIterator2_getter_f, ptr @MapIterator2_setter_f }
@FilterIterable2_field_iterable = internal constant { ptr, ptr } { ptr @FilterIterable2_getter_iterable, ptr @FilterIterable2_setter_iterable }
@FilterIterable2_field_f = internal constant { ptr, ptr } { ptr @FilterIterable2_getter_f, ptr @FilterIterable2_setter_f }
@FilterIterator2_field_iterator = internal constant { ptr, ptr } { ptr @FilterIterator2_getter_iterator, ptr @FilterIterator2_setter_iterator }
@FilterIterator2_field_f = internal constant { ptr, ptr } { ptr @FilterIterator2_getter_f, ptr @FilterIterator2_setter_f }
@ChainIterable2_field_first = internal constant { ptr, ptr } { ptr @ChainIterable2_getter_first, ptr @ChainIterable2_setter_first }
@ChainIterable2_field_second = internal constant { ptr, ptr } { ptr @ChainIterable2_getter_second, ptr @ChainIterable2_setter_second }
@ChainIterator2_field_first = internal constant { ptr, ptr } { ptr @ChainIterator2_getter_first, ptr @ChainIterator2_setter_first }
@ChainIterator2_field_second = internal constant { ptr, ptr } { ptr @ChainIterator2_getter_second, ptr @ChainIterator2_setter_second }
@ChainIterator2_field_on_first = internal constant { ptr, ptr } { ptr @ChainIterator2_getter_on_first, ptr @ChainIterator2_setter_on_first }
@InterleaveIterable2_field_first = internal constant { ptr, ptr } { ptr @InterleaveIterable2_getter_first, ptr @InterleaveIterable2_setter_first }
@InterleaveIterable2_field_second = internal constant { ptr, ptr } { ptr @InterleaveIterable2_getter_second, ptr @InterleaveIterable2_setter_second }
@InterleaveIterator2_field_first = internal constant { ptr, ptr } { ptr @InterleaveIterator2_getter_first, ptr @InterleaveIterator2_setter_first }
@InterleaveIterator2_field_second = internal constant { ptr, ptr } { ptr @InterleaveIterator2_getter_second, ptr @InterleaveIterator2_setter_second }
@InterleaveIterator2_field_on_first = internal constant { ptr, ptr } { ptr @InterleaveIterator2_getter_on_first, ptr @InterleaveIterator2_setter_on_first }
@ZipIterable2_field_first = internal constant { ptr, ptr } { ptr @ZipIterable2_getter_first, ptr @ZipIterable2_setter_first }
@ZipIterable2_field_second = internal constant { ptr, ptr } { ptr @ZipIterable2_getter_second, ptr @ZipIterable2_setter_second }
@ZipIterator2_field_first = internal constant { ptr, ptr } { ptr @ZipIterator2_getter_first, ptr @ZipIterator2_setter_first }
@ZipIterator2_field_second = internal constant { ptr, ptr } { ptr @ZipIterator2_getter_second, ptr @ZipIterator2_setter_second }
@ProductIterable2_field_first = internal constant { ptr, ptr } { ptr @ProductIterable2_getter_first, ptr @ProductIterable2_setter_first }
@ProductIterable2_field_second = internal constant { ptr, ptr } { ptr @ProductIterable2_getter_second, ptr @ProductIterable2_setter_second }
@ProductIterator2_field_first_iterator = internal constant { ptr, ptr } { ptr @ProductIterator2_getter_first_iterator, ptr @ProductIterator2_setter_first_iterator }
@ProductIterator2_field_second_iterator = internal constant { ptr, ptr } { ptr @ProductIterator2_getter_second_iterator, ptr @ProductIterator2_setter_second_iterator }
@ProductIterator2_field_second_iterable = internal constant { ptr, ptr } { ptr @ProductIterator2_getter_second_iterable, ptr @ProductIterator2_setter_second_iterable }
@ProductIterator2_field_current_first = internal constant { ptr, ptr } { ptr @ProductIterator2_getter_current_first, ptr @ProductIterator2_setter_current_first }
@Integer_field_value = internal constant { ptr, ptr } { ptr @Integer_getter_value, ptr @Integer_setter_value }
@Integer2_field_value = internal constant { ptr, ptr } { ptr @Integer2_getter_value, ptr @Integer2_setter_value }
@Animal_field_age = internal constant { ptr, ptr } { ptr @Animal_getter_age, ptr @Animal_setter_age }
@Animal_field_hp = internal constant { ptr, ptr } { ptr @Animal_getter_hp, ptr @Animal_setter_hp }
@Animal_field_skill = internal constant { ptr, ptr } { ptr @Animal_getter_skill, ptr @Animal_setter_skill }
@Beaver_field_color = internal constant { ptr, ptr } { ptr @Beaver_getter_color, ptr @Beaver_setter_color }
@Beaver_field_name = internal constant { ptr, ptr } { ptr @Beaver_getter_name, ptr @Beaver_setter_name }
@ListNode_field_data = internal constant { ptr, ptr } { ptr @ListNode_getter_data, ptr @ListNode_setter_data }
@ListNode_field_next = internal constant { ptr, ptr } { ptr @ListNode_getter_next, ptr @ListNode_setter_next }
@ListIterator_field_node = internal constant { ptr, ptr } { ptr @ListIterator_getter_node, ptr @ListIterator_setter_node }
@i32_string = linkonce_odr constant [4 x i8] c"%d\0A\00"
@i64_string = linkonce_odr constant [6 x i8] c"%lld\0A\00"
@string_string = linkonce_odr constant [4 x i8] c"%s\0A\00"
@bool_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @bool_typ]
@bool_typ_offset_tbl = constant [4 x i32] [i32 9, i32 9, i32 0, i32 9]
@bool_typ = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 5801531371504802705, i64 4611686018427388081, i64 3], [6 x ptr] [ptr @subtype_test, ptr @bool_typ_hashtbl, ptr @bool_typ_offset_tbl, ptr @_size_bool_typ, ptr @_box_bool_typ, ptr @_unbox_bool_typ], [0 x ptr] undef }
@i8_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @i8_typ]
@i8_typ_offset_tbl = constant [4 x i32] [i32 9, i32 9, i32 0, i32 9]
@i8_typ = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 2582149688529881115, i64 4611686018427388081, i64 3], [6 x ptr] [ptr @subtype_test, ptr @i8_typ_hashtbl, ptr @i8_typ_offset_tbl, ptr @_size_i8_typ, ptr @_box_i8_typ, ptr @_unbox_i8_typ], [0 x ptr] undef }
@i32_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @i32_typ, ptr null]
@i32_typ_offset_tbl = constant [4 x i32] [i32 9, i32 9, i32 9, i32 0]
@i32_typ = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 -2253724949814257982, i64 4611686018427388081, i64 3], [6 x ptr] [ptr @subtype_test, ptr @i32_typ_hashtbl, ptr @i32_typ_offset_tbl, ptr @_size_i32_typ, ptr @_box_i32_typ, ptr @_unbox_i32_typ], [0 x ptr] undef }
@i64_typ_hashtbl = constant [4 x ptr] [ptr @any_typ, ptr @Object, ptr @i64_typ, ptr null]
@i64_typ_offset_tbl = constant [4 x i32] [i32 9, i32 9, i32 9, i32 0]
@i64_typ = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 -7469797244461771922, i64 4611686018427388157, i64 3], [6 x ptr] [ptr @subtype_test, ptr @i64_typ_hashtbl, ptr @i64_typ_offset_tbl, ptr @_size_i64_typ, ptr @_box_i64_typ, ptr @_unbox_i64_typ], [0 x ptr] undef }
@i128_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @i128_typ, ptr @any_typ, ptr null]
@i128_typ_offset_tbl = constant [4 x i32] [i32 9, i32 9, i32 9, i32 0]
@i128_typ = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 -8755878215469463641, i64 4611686018427388091, i64 3], [6 x ptr] [ptr @subtype_test, ptr @i128_typ_hashtbl, ptr @i128_typ_offset_tbl, ptr @_size_i128_typ, ptr @_box_i128_typ, ptr @_unbox_i128_typ], [0 x ptr] undef }
@f64_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @f64_typ]
@f64_typ_offset_tbl = constant [4 x i32] [i32 9, i32 9, i32 0, i32 9]
@f64_typ = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 -757315540097298781, i64 4611686018427388081, i64 3], [6 x ptr] [ptr @subtype_test, ptr @f64_typ_hashtbl, ptr @f64_typ_offset_tbl, ptr @_size_f64_typ, ptr @_box_f64_typ, ptr @_unbox_f64_typ], [0 x ptr] undef }
@nil_typ_hashtbl = constant [2 x ptr] [ptr @nil_typ, ptr @any_typ]
@nil_typ_offset_tbl = constant [2 x i32] [i32 9, i32 9]
@nil_typ = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 -5126806859456325683, i64 4611686018427388081, i64 1], [6 x ptr] [ptr @subtype_test, ptr @nil_typ_hashtbl, ptr @nil_typ_offset_tbl, ptr @_size_nil_typ, ptr @_box_nil_typ, ptr @_unbox_nil_typ], [0 x ptr] undef }
@any_typ_hashtbl = constant [1 x ptr] [ptr @any_typ]
@any_typ_offset_tbl = constant [1 x i32] [i32 9]
@any_typ = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 3084208142191802847, i64 4611686018427388073, i64 0], [6 x ptr] [ptr @subtype_test, ptr @any_typ_hashtbl, ptr @any_typ_offset_tbl, ptr @_size_any_typ, ptr @_box_Default, ptr @_unbox_Default], [0 x ptr] undef }
@nothing_typ_hashtbl = constant [4 x ptr] [ptr null, ptr @Object, ptr @any_typ, ptr @nothing_typ]
@nothing_typ_offset_tbl = constant [4 x i32] [i32 0, i32 9, i32 9, i32 9]
@nothing_typ = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 -3334456163433371378, i64 4611686018427388097, i64 3], [6 x ptr] [ptr @subtype_test, ptr @nothing_typ_hashtbl, ptr @nothing_typ_offset_tbl, ptr @_size_nothing_typ, ptr @_box_nothing_typ, ptr @_unbox_nothing_typ], [0 x ptr] undef }
@coroutine_typ_hashtbl = constant [4 x ptr] [ptr null, ptr @Object, ptr @any_typ, ptr @coroutine_typ]
@coroutine_typ_offset_tbl = constant [4 x i32] [i32 0, i32 9, i32 9, i32 9]
@coroutine_typ = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 7194361020959218064, i64 4611686018427388097, i64 3], [6 x ptr] [ptr @subtype_test, ptr @coroutine_typ_hashtbl, ptr @coroutine_typ_offset_tbl, ptr @_size_coroutine_typ, ptr @_box_coroutine_typ, ptr @_unbox_coroutine_typ], [0 x ptr] undef }
@function_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @function_typ, ptr null]
@function_typ_offset_tbl = constant [4 x i32] [i32 9, i32 9, i32 9, i32 0]
@function_typ = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 7927147055246173914, i64 4611686018427388081, i64 3], [6 x ptr] [ptr @subtype_test, ptr @function_typ_hashtbl, ptr @function_typ_offset_tbl, ptr @_size_function_typ, ptr @_box_function_typ, ptr @_unbox_function_typ], [0 x ptr] undef }
@buffer_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @buffer_typ, ptr @any_typ, ptr null]
@buffer_typ_offset_tbl = constant [4 x i32] [i32 9, i32 9, i32 9, i32 0]
@buffer_typ = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 -318192747195410237, i64 4611686018427388091, i64 3], [6 x ptr] [ptr @subtype_test, ptr @buffer_typ_hashtbl, ptr @buffer_typ_offset_tbl, ptr @_size_buffer_typ, ptr @_box_buffer_typ, ptr @_unbox_buffer_typ], [0 x ptr] undef }
@tuple_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @tuple_typ]
@tuple_typ_offset_tbl = constant [4 x i32] [i32 9, i32 9, i32 0, i32 9]
@tuple_typ = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 3422634369532007740, i64 4611686018427388081, i64 3], [6 x ptr] [ptr @subtype_test, ptr @tuple_typ_hashtbl, ptr @tuple_typ_offset_tbl, ptr @_size_tuple_typ, ptr @_box_tuple_typ, ptr @_unbox_tuple_typ], [0 x ptr] undef }
@union_typ_hashtbl = constant [4 x ptr] [ptr @union_typ, ptr null, ptr @any_typ, ptr @Object]
@union_typ_offset_tbl = constant [4 x i32] [i32 9, i32 0, i32 9, i32 9]
@union_typ = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 -7543233778997666740, i64 4611686018427388093, i64 3], [6 x ptr] [ptr @subtype_test, ptr @union_typ_hashtbl, ptr @union_typ_offset_tbl, ptr @_size_union_typ, ptr @_box_union_typ, ptr @_unbox_union_typ], [0 x ptr] undef }
@Object_hashtbl = constant [2 x ptr] [ptr @Object, ptr @any_typ]
@Object_offset_tbl = constant [2 x i32] [i32 9, i32 9]
@Object = constant { [3 x i64], [6 x ptr], [0 x ptr] } { [3 x i64] [i64 3282773614056351330, i64 4611686018427388081, i64 1], [6 x ptr] [ptr @subtype_test, ptr @Object_hashtbl, ptr @Object_offset_tbl, ptr @_size_Object, ptr @_box_Default, ptr @_unbox_Default], [0 x ptr] undef }
@string_string.55 = internal constant [4 x i8] c"%s\0A\00"
@float_string = linkonce_odr constant [4 x i8] c"%f\0A\00"
@exception_message = internal constant [45 x i8] c"Error: uncaught exception. Program aborted.\0A\00"
@into_caller_buf = linkonce_odr thread_local global [3 x ptr] zeroinitializer
@current_coroutine = linkonce_odr thread_local global ptr null
@always_one = linkonce thread_local global i1 true
@current_ptr = internal thread_local global ptr null

define { i64, i64 } @_size_Iterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret { i64, i64 } { i64 0, i64 1 }
}

define { i64, i64 } @_size_Iterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret { i64, i64 } { i64 0, i64 1 }
}

define { i64, i64 } @_size_Representable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret { i64, i64 } { i64 0, i64 1 }
}

define ptr @Representable_B_repr_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [2 x ptr], ptr %4, i32 0, i32 1
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define { ptr, ptr, ptr, i32 } @Representable_repr_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Representable)
  %19 = alloca ptr, align 8
  %20 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 7))
  store ptr %20, ptr %19, align 8
  %21 = alloca { ptr }, align 8
  %22 = getelementptr { ptr }, ptr %19, i32 0, i32 0
  %23 = getelementptr { ptr }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %26 = load ptr, ptr %21, align 8
  %27 = load [6 x i8], ptr @jrszw_Object, align 1
  store [6 x i8] %27, ptr %26, align 1
  %28 = alloca [1 x ptr], align 8
  store ptr @String, ptr %28, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr ptr, ptr %29, i32 6
  %31 = load ptr, ptr %30, align 8
  %32 = call { i64, i64 } @size_wrapper(ptr %31, ptr %28)
  %33 = extractvalue { i64, i64 } %32, 0
  %34 = call ptr @bump_malloc(i64 %33)
  %35 = alloca { ptr, ptr, ptr, i32 }, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  store ptr @String, ptr %35, align 8
  store ptr %34, ptr %36, align 8
  store i32 9, ptr %37, align 4
  %38 = call ptr @llvm.invariant.start.p0(i64 16, ptr %35)
  %39 = getelementptr { ptr }, ptr %21, i32 0, i32 0
  %40 = load ptr, ptr %39, align 8
  %41 = insertvalue { ptr } undef, ptr %40, 0
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %43 = load ptr, ptr %42, align 8
  %44 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %43, 0
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %46 = load ptr, ptr %45, align 8
  %47 = insertvalue { ptr, ptr, ptr, i32 } %44, ptr %46, 1
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %49 = load ptr, ptr %48, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } %47, ptr %49, 2
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %52 = load i32, ptr %51, align 4
  %53 = insertvalue { ptr, ptr, ptr, i32 } %50, i32 %52, 3
  %54 = alloca [3 x ptr], align 8
  %55 = getelementptr [3 x ptr], ptr %54, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %55, align 8
  %56 = getelementptr [3 x ptr], ptr %54, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %56, align 8
  %57 = getelementptr [3 x ptr], ptr %54, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %57, align 8
  %58 = call ptr @llvm.invariant.start.p0(i64 9, ptr %54)
  %59 = call ptr @llvm.invariant.start.p0(i64 280, ptr %43)
  %60 = getelementptr ptr, ptr %43, i32 %52
  %61 = getelementptr ptr, ptr %60, i32 4
  %62 = load ptr, ptr %61, align 8
  %63 = alloca { ptr, ptr, ptr }, align 8
  %64 = getelementptr { ptr, ptr, ptr }, ptr %63, i32 0, i32 0
  store ptr @buffer_typ, ptr %64, align 8
  %65 = getelementptr { ptr, ptr, ptr }, ptr %63, i32 0, i32 1
  store ptr @i32_typ, ptr %65, align 8
  %66 = getelementptr { ptr, ptr, ptr }, ptr %63, i32 0, i32 2
  store ptr @i32_typ, ptr %66, align 8
  %67 = call ptr @behavior_wrapper(ptr %62, { ptr, ptr, ptr, i32 } %53, ptr %63)
  call void %67({ ptr, ptr, ptr, i32 } %53, { ptr, ptr, ptr, i32 } %53, ptr %54, { ptr } %41, i32 6, i32 7)
  %68 = alloca { ptr, ptr, ptr, i32 }, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 0
  %71 = load ptr, ptr %69, align 8
  store ptr %71, ptr %70, align 8
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 1
  %74 = load ptr, ptr %72, align 8
  store ptr %74, ptr %73, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 2
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 3
  %80 = load i32, ptr %78, align 4
  store i32 %80, ptr %79, align 4
  call void @set_offset(ptr %68, ptr @String)
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 0
  %82 = load ptr, ptr %81, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %82, 0
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 1
  %85 = load ptr, ptr %84, align 8
  %86 = insertvalue { ptr, ptr, ptr, i32 } %83, ptr %85, 1
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 2
  %88 = load ptr, ptr %87, align 8
  %89 = insertvalue { ptr, ptr, ptr, i32 } %86, ptr %88, 2
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 3
  %91 = load i32, ptr %90, align 4
  %92 = insertvalue { ptr, ptr, ptr, i32 } %89, i32 %91, 3
  ret { ptr, ptr, ptr, i32 } %92
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare ptr @llvm.invariant.start.p0(i64 immarg, ptr nocapture) #0

define { i64, i64 } @_size_String(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @String_B_init_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [35 x ptr], ptr %4, i32 0, i32 17
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @String_B_init_bytesBufferPtri8_lengthPtri32_capacityPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1)
  %4 = getelementptr { ptr, ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -318192747195410237, i64 ptrtoint (ptr @buffer_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %24)
  %26 = getelementptr { ptr, ptr, ptr }, ptr %1, i32 0, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr ptr, ptr %27, i32 1
  %29 = getelementptr ptr, ptr %27, i32 2
  %30 = getelementptr ptr, ptr %27, i32 3
  %31 = getelementptr ptr, ptr %27, i32 4
  %32 = load i64, ptr %28, align 4
  %33 = load i64, ptr %29, align 4
  %34 = load ptr, ptr %30, align 8
  %35 = load ptr, ptr %31, align 8
  %36 = call i1 @subtype_test_wrapper(ptr %34, i64 %33, i64 %32, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %35)
  %37 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %38 = getelementptr [35 x ptr], ptr %37, i32 0, i32 18
  %39 = getelementptr ptr, ptr %38, i32 9
  %40 = load ptr, ptr %39, align 8
  ret ptr %40
}

define ptr @String_B_length_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [35 x ptr], ptr %4, i32 0, i32 19
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @String_B_capacity_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [35 x ptr], ptr %4, i32 0, i32 20
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @String_B_bytes_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [35 x ptr], ptr %4, i32 0, i32 21
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @String_B_append_xPtri8({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 2582149688529881115, i64 ptrtoint (ptr @i8_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [35 x ptr], ptr %15, i32 0, i32 22
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @String_B_extend_strString({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [35 x ptr], ptr %15, i32 0, i32 23
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @String_B__index_xPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [35 x ptr], ptr %15, i32 0, i32 24
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @String_B__EQ_otherString({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [35 x ptr], ptr %15, i32 0, i32 25
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @String_B_pop_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [35 x ptr], ptr %4, i32 0, i32 26
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @String_B_copy_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [35 x ptr], ptr %4, i32 0, i32 27
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @String_B_c_string_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [35 x ptr], ptr %4, i32 0, i32 28
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @String_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [35 x ptr], ptr %4, i32 0, i32 29
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @String_B_repr_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [35 x ptr], ptr %4, i32 0, i32 30
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @String_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @String)
  %19 = alloca ptr, align 8
  %20 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64))
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %22 = load ptr, ptr %21, align 8
  %23 = load ptr, ptr %6, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 280, ptr %23)
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %26 = load i32, ptr %25, align 4
  %27 = getelementptr ptr, ptr %23, i32 %26
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr { ptr, ptr }, ptr %28, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  %31 = getelementptr { ptr }, ptr %19, i32 0, i32 0
  %32 = load ptr, ptr %31, align 8
  %33 = insertvalue { ptr } undef, ptr %32, 0
  call void %30(ptr %22, { ptr } %33) #15
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %35 = load ptr, ptr %34, align 8
  %36 = load ptr, ptr %6, align 8
  %37 = call ptr @llvm.invariant.start.p0(i64 280, ptr %36)
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %39 = load i32, ptr %38, align 4
  %40 = getelementptr ptr, ptr %36, i32 %39
  %41 = getelementptr ptr, ptr %40, i32 2
  %42 = load ptr, ptr %41, align 8
  %43 = getelementptr { ptr, ptr }, ptr %42, i32 0, i32 1
  %44 = load ptr, ptr %43, align 8
  call void %44(ptr %35, i32 1) #15
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %46 = load ptr, ptr %45, align 8
  %47 = load ptr, ptr %6, align 8
  %48 = call ptr @llvm.invariant.start.p0(i64 280, ptr %47)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %50 = load i32, ptr %49, align 4
  %51 = getelementptr ptr, ptr %47, i32 %50
  %52 = getelementptr ptr, ptr %51, i32 1
  %53 = load ptr, ptr %52, align 8
  %54 = getelementptr { ptr, ptr }, ptr %53, i32 0, i32 1
  %55 = load ptr, ptr %54, align 8
  call void %55(ptr %46, i32 0) #15
  ret void
}

define void @String_init_bytesBufferPtri8_lengthPtri32_capacityPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3, i32 %4, i32 %5) {
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %7, align 8
  %8 = call ptr @llvm.invariant.start.p0(i64 16, ptr %7)
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  call void @set_offset(ptr %9, ptr @String)
  %22 = alloca ptr, align 8
  store { ptr } %3, ptr %22, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = load ptr, ptr %9, align 8
  %26 = call ptr @llvm.invariant.start.p0(i64 280, ptr %25)
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %28 = load i32, ptr %27, align 4
  %29 = getelementptr ptr, ptr %25, i32 %28
  %30 = load ptr, ptr %29, align 8
  %31 = getelementptr { ptr, ptr }, ptr %30, i32 0, i32 1
  %32 = load ptr, ptr %31, align 8
  %33 = load ptr, ptr %22, align 8
  %34 = insertvalue { ptr } undef, ptr %33, 0
  call void %32(ptr %24, { ptr } %34) #15
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = load ptr, ptr %9, align 8
  %38 = call ptr @llvm.invariant.start.p0(i64 280, ptr %37)
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %40 = load i32, ptr %39, align 4
  %41 = getelementptr ptr, ptr %37, i32 %40
  %42 = getelementptr ptr, ptr %41, i32 1
  %43 = load ptr, ptr %42, align 8
  %44 = getelementptr { ptr, ptr }, ptr %43, i32 0, i32 1
  %45 = load ptr, ptr %44, align 8
  call void %45(ptr %36, i32 %4) #15
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %47 = load ptr, ptr %46, align 8
  %48 = load ptr, ptr %9, align 8
  %49 = call ptr @llvm.invariant.start.p0(i64 280, ptr %48)
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %51 = load i32, ptr %50, align 4
  %52 = getelementptr ptr, ptr %48, i32 %51
  %53 = getelementptr ptr, ptr %52, i32 2
  %54 = load ptr, ptr %53, align 8
  %55 = getelementptr { ptr, ptr }, ptr %54, i32 0, i32 1
  %56 = load ptr, ptr %55, align 8
  call void %56(ptr %47, i32 %5) #15
  ret void
}

define i32 @String_length_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @String)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 280, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 1
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call i32 %29(ptr %20) #16
  ret i32 %30
}

define i32 @String_capacity_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @String)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 280, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call i32 %29(ptr %20) #16
  ret i32 %30
}

define { ptr } @String_bytes_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @String)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 280, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 0
  %28 = load ptr, ptr %27, align 8
  %29 = call { ptr } %28(ptr %20) #16
  %30 = alloca ptr, align 8
  store { ptr } %29, ptr %30, align 8
  %31 = load ptr, ptr %30, align 8
  %32 = insertvalue { ptr } undef, ptr %31, 0
  ret { ptr } %32
}

define { ptr, ptr, ptr, i32 } @String_append_xPtri8({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i8 %3) {
  %5 = alloca { ptr }, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %11 = alloca ptr, align 8
  %12 = alloca { ptr }, align 8
  %13 = alloca ptr, align 8
  %14 = alloca ptr, align 8
  %15 = alloca { ptr }, align 8
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i1, align 1
  %.reg2mem6 = alloca i32, align 4
  %.reg2mem11 = alloca ptr, align 8
  %.reg2mem13 = alloca ptr, align 8
  %.reg2mem15 = alloca ptr, align 8
  %.reg2mem25 = alloca ptr, align 8
  %.reg2mem28 = alloca ptr, align 8
  %.reg2mem31 = alloca ptr, align 8
  %.reg2mem34 = alloca ptr, align 8
  %.reg2mem37 = alloca ptr, align 8
  %.reg2mem40 = alloca i32, align 4
  %.reg2mem42 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @String)
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %37 = load ptr, ptr %36, align 8
  %38 = load ptr, ptr %23, align 8
  %39 = call ptr @llvm.invariant.start.p0(i64 280, ptr %38)
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %41 = load i32, ptr %40, align 4
  %42 = getelementptr ptr, ptr %38, i32 %41
  %43 = getelementptr ptr, ptr %42, i32 1
  %44 = load ptr, ptr %43, align 8
  %45 = getelementptr { ptr, ptr }, ptr %44, i32 0, i32 0
  %46 = load ptr, ptr %45, align 8
  %47 = call i32 %46(ptr %37) #16
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = load ptr, ptr %23, align 8
  %51 = call ptr @llvm.invariant.start.p0(i64 280, ptr %50)
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %53 = load i32, ptr %52, align 4
  %54 = getelementptr ptr, ptr %50, i32 %53
  %55 = getelementptr ptr, ptr %54, i32 2
  %56 = load ptr, ptr %55, align 8
  %57 = getelementptr { ptr, ptr }, ptr %56, i32 0, i32 0
  %58 = load ptr, ptr %57, align 8
  %59 = call i32 %58(ptr %49) #16
  %60 = icmp slt i32 %47, %59
  %61 = select i1 %60, ptr %5, ptr %15
  store ptr %61, ptr %.reg2mem37, align 8
  %62 = select i1 %60, ptr %6, ptr %16
  store ptr %62, ptr %.reg2mem34, align 8
  %63 = select i1 %60, ptr %7, ptr %17
  store ptr %63, ptr %.reg2mem31, align 8
  %64 = select i1 %60, ptr %8, ptr %18
  store ptr %64, ptr %.reg2mem28, align 8
  %65 = select i1 %60, ptr %9, ptr %19
  store ptr %65, ptr %.reg2mem25, align 8
  %66 = select i1 %60, ptr %10, ptr %20
  store ptr %66, ptr %.reg2mem15, align 8
  br i1 %60, label %67, label %68

67:                                               ; preds = %4
  br label %175

68:                                               ; preds = %4
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %70 = load ptr, ptr %69, align 8
  %71 = load ptr, ptr %23, align 8
  %72 = call ptr @llvm.invariant.start.p0(i64 280, ptr %71)
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %74 = load i32, ptr %73, align 4
  %75 = getelementptr ptr, ptr %71, i32 %74
  %76 = getelementptr ptr, ptr %75, i32 2
  %77 = load ptr, ptr %76, align 8
  %78 = getelementptr { ptr, ptr }, ptr %77, i32 0, i32 0
  %79 = load ptr, ptr %78, align 8
  %80 = call i32 %79(ptr %70) #16
  %81 = mul i32 %80, 2
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %83 = load ptr, ptr %82, align 8
  %84 = load ptr, ptr %23, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 280, ptr %84)
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %87 = load i32, ptr %86, align 4
  %88 = getelementptr ptr, ptr %84, i32 %87
  %89 = getelementptr ptr, ptr %88, i32 2
  %90 = load ptr, ptr %89, align 8
  %91 = getelementptr { ptr, ptr }, ptr %90, i32 0, i32 1
  %92 = load ptr, ptr %91, align 8
  call void %92(ptr %83, i32 %81) #15
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %94 = load ptr, ptr %93, align 8
  %95 = load ptr, ptr %23, align 8
  %96 = call ptr @llvm.invariant.start.p0(i64 280, ptr %95)
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %98 = load i32, ptr %97, align 4
  %99 = getelementptr ptr, ptr %95, i32 %98
  %100 = load ptr, ptr %99, align 8
  %101 = getelementptr { ptr, ptr }, ptr %100, i32 0, i32 0
  %102 = load ptr, ptr %101, align 8
  %103 = call { ptr } %102(ptr %94) #16
  store { ptr } %103, ptr %11, align 8
  %104 = getelementptr { ptr }, ptr %12, i32 0, i32 0
  %105 = load ptr, ptr %11, align 8
  store ptr %105, ptr %104, align 8
  %106 = call ptr @llvm.invariant.start.p0(i64 16, ptr %12)
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %108 = load ptr, ptr %107, align 8
  %109 = load ptr, ptr %23, align 8
  %110 = call ptr @llvm.invariant.start.p0(i64 280, ptr %109)
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %112 = load i32, ptr %111, align 4
  %113 = getelementptr ptr, ptr %109, i32 %112
  %114 = getelementptr ptr, ptr %113, i32 2
  %115 = load ptr, ptr %114, align 8
  %116 = getelementptr { ptr, ptr }, ptr %115, i32 0, i32 0
  %117 = load ptr, ptr %116, align 8
  %118 = call i32 %117(ptr %108) #16
  %119 = sext i32 %118 to i64
  %120 = mul i64 %119, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %121 = call ptr @bump_malloc(i64 %120)
  store ptr %121, ptr %13, align 8
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %123 = load ptr, ptr %122, align 8
  %124 = load ptr, ptr %23, align 8
  %125 = call ptr @llvm.invariant.start.p0(i64 280, ptr %124)
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %127 = load i32, ptr %126, align 4
  %128 = getelementptr ptr, ptr %124, i32 %127
  %129 = load ptr, ptr %128, align 8
  %130 = getelementptr { ptr, ptr }, ptr %129, i32 0, i32 1
  %131 = load ptr, ptr %130, align 8
  %132 = getelementptr { ptr }, ptr %13, i32 0, i32 0
  %133 = load ptr, ptr %132, align 8
  %134 = insertvalue { ptr } undef, ptr %133, 0
  call void %131(ptr %123, { ptr } %134) #15
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  store ptr %135, ptr %.reg2mem13, align 8
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  store ptr %136, ptr %.reg2mem11, align 8
  store i32 0, ptr %.reg2mem42, align 4
  br label %137

137:                                              ; preds = %._crit_edge, %68
  %.reload43 = load i32, ptr %.reg2mem42, align 4
  store i32 %.reload43, ptr %.reg2mem6, align 4
  %.reload14 = load ptr, ptr %.reg2mem13, align 8
  %138 = load ptr, ptr %.reload14, align 8
  %139 = load ptr, ptr %23, align 8
  %140 = call ptr @llvm.invariant.start.p0(i64 280, ptr %139)
  %.reload12 = load ptr, ptr %.reg2mem11, align 8
  %141 = load i32, ptr %.reload12, align 4
  %142 = getelementptr ptr, ptr %139, i32 %141
  %143 = getelementptr ptr, ptr %142, i32 1
  %144 = load ptr, ptr %143, align 8
  %145 = getelementptr { ptr, ptr }, ptr %144, i32 0, i32 0
  %146 = load ptr, ptr %145, align 8
  %147 = call i32 %146(ptr %138) #16
  %.reload10 = load i32, ptr %.reg2mem6, align 4
  %148 = icmp slt i32 %.reload10, %147
  store i1 %148, ptr %.reg2mem3, align 1
  %.reload5 = load i1, ptr %.reg2mem3, align 1
  br i1 %.reload5, label %149, label %171

149:                                              ; preds = %137
  %150 = load ptr, ptr %12, align 8
  %.reload9 = load i32, ptr %.reg2mem6, align 4
  %151 = sext i32 %.reload9 to i64
  %152 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %151
  %153 = getelementptr i8, ptr %150, i64 %152
  %154 = load i8, ptr %153, align 1
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %156 = load ptr, ptr %155, align 8
  %157 = load ptr, ptr %23, align 8
  %158 = call ptr @llvm.invariant.start.p0(i64 280, ptr %157)
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %160 = load i32, ptr %159, align 4
  %161 = getelementptr ptr, ptr %157, i32 %160
  %162 = load ptr, ptr %161, align 8
  %163 = getelementptr { ptr, ptr }, ptr %162, i32 0, i32 0
  %164 = load ptr, ptr %163, align 8
  %165 = call { ptr } %164(ptr %156) #16
  store { ptr } %165, ptr %14, align 8
  %166 = load ptr, ptr %14, align 8
  %.reload8 = load i32, ptr %.reg2mem6, align 4
  %167 = sext i32 %.reload8 to i64
  %168 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %167
  %169 = getelementptr i8, ptr %166, i64 %168
  store i8 %154, ptr %169, align 1
  %.reload7 = load i32, ptr %.reg2mem6, align 4
  %170 = add i32 %.reload7, 1
  store i32 %170, ptr %.reg2mem1, align 4
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem40, align 4
  br label %172

171:                                              ; preds = %137
  store i32 poison, ptr %.reg2mem40, align 4
  br label %172

172:                                              ; preds = %171, %149
  %.reload41 = load i32, ptr %.reg2mem40, align 4
  store i32 %.reload41, ptr %.reg2mem, align 4
  br label %173

173:                                              ; preds = %172
  %.reload4 = load i1, ptr %.reg2mem3, align 1
  br i1 %.reload4, label %._crit_edge, label %174

._crit_edge:                                      ; preds = %173
  %.reload = load i32, ptr %.reg2mem, align 4
  store i32 %.reload, ptr %.reg2mem42, align 4
  br label %137

174:                                              ; preds = %173
  br label %175

175:                                              ; preds = %174, %67
  %176 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %177 = load ptr, ptr %176, align 8
  %178 = load ptr, ptr %23, align 8
  %179 = call ptr @llvm.invariant.start.p0(i64 280, ptr %178)
  %180 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %181 = load i32, ptr %180, align 4
  %182 = getelementptr ptr, ptr %178, i32 %181
  %183 = load ptr, ptr %182, align 8
  %184 = getelementptr { ptr, ptr }, ptr %183, i32 0, i32 0
  %185 = load ptr, ptr %184, align 8
  %186 = call { ptr } %185(ptr %177) #16
  %.reload39 = load ptr, ptr %.reg2mem37, align 8
  store { ptr } %186, ptr %.reload39, align 8
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %188 = load ptr, ptr %187, align 8
  %189 = load ptr, ptr %23, align 8
  %190 = call ptr @llvm.invariant.start.p0(i64 280, ptr %189)
  %191 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %192 = load i32, ptr %191, align 4
  %193 = getelementptr ptr, ptr %189, i32 %192
  %194 = getelementptr ptr, ptr %193, i32 1
  %195 = load ptr, ptr %194, align 8
  %196 = getelementptr { ptr, ptr }, ptr %195, i32 0, i32 0
  %197 = load ptr, ptr %196, align 8
  %198 = call i32 %197(ptr %188) #16
  %.reload36 = load ptr, ptr %.reg2mem34, align 8
  store i32 %198, ptr %.reload36, align 4
  %.reload38 = load ptr, ptr %.reg2mem37, align 8
  %199 = load ptr, ptr %.reload38, align 8
  %.reload35 = load ptr, ptr %.reg2mem34, align 8
  %200 = load i32, ptr %.reload35, align 4
  %201 = sext i32 %200 to i64
  %202 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %201
  %203 = getelementptr i8, ptr %199, i64 %202
  store i8 %3, ptr %203, align 1
  %204 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %205 = load ptr, ptr %204, align 8
  %206 = load ptr, ptr %23, align 8
  %207 = call ptr @llvm.invariant.start.p0(i64 280, ptr %206)
  %208 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %209 = load i32, ptr %208, align 4
  %210 = getelementptr ptr, ptr %206, i32 %209
  %211 = getelementptr ptr, ptr %210, i32 1
  %212 = load ptr, ptr %211, align 8
  %213 = getelementptr { ptr, ptr }, ptr %212, i32 0, i32 0
  %214 = load ptr, ptr %213, align 8
  %215 = call i32 %214(ptr %205) #16
  %.reload33 = load ptr, ptr %.reg2mem31, align 8
  store i32 %215, ptr %.reload33, align 4
  %.reload30 = load ptr, ptr %.reg2mem28, align 8
  store i32 1, ptr %.reload30, align 4
  %.reload32 = load ptr, ptr %.reg2mem31, align 8
  %216 = load i32, ptr %.reload32, align 4
  %.reload29 = load ptr, ptr %.reg2mem28, align 8
  %217 = load i32, ptr %.reload29, align 4
  %218 = add i32 %216, %217
  %.reload27 = load ptr, ptr %.reg2mem25, align 8
  store i32 %218, ptr %.reload27, align 4
  %219 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %220 = load ptr, ptr %219, align 8
  %221 = load ptr, ptr %23, align 8
  %222 = call ptr @llvm.invariant.start.p0(i64 280, ptr %221)
  %223 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %224 = load i32, ptr %223, align 4
  %225 = getelementptr ptr, ptr %221, i32 %224
  %226 = getelementptr ptr, ptr %225, i32 1
  %227 = load ptr, ptr %226, align 8
  %228 = getelementptr { ptr, ptr }, ptr %227, i32 0, i32 1
  %229 = load ptr, ptr %228, align 8
  %.reload26 = load ptr, ptr %.reg2mem25, align 8
  %230 = load i32, ptr %.reload26, align 4
  call void %229(ptr %220, i32 %230) #15
  %231 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %.reload24 = load ptr, ptr %.reg2mem15, align 8
  %232 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload24, i32 0, i32 0
  %233 = load ptr, ptr %231, align 8
  store ptr %233, ptr %232, align 8
  %234 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %.reload23 = load ptr, ptr %.reg2mem15, align 8
  %235 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload23, i32 0, i32 1
  %236 = load ptr, ptr %234, align 8
  store ptr %236, ptr %235, align 8
  %237 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %.reload22 = load ptr, ptr %.reg2mem15, align 8
  %238 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload22, i32 0, i32 2
  %239 = load ptr, ptr %237, align 8
  store ptr %239, ptr %238, align 8
  %240 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %.reload21 = load ptr, ptr %.reg2mem15, align 8
  %241 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload21, i32 0, i32 3
  %242 = load i32, ptr %240, align 4
  store i32 %242, ptr %241, align 4
  %.reload20 = load ptr, ptr %.reg2mem15, align 8
  call void @set_offset(ptr %.reload20, ptr @String)
  %.reload19 = load ptr, ptr %.reg2mem15, align 8
  %243 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload19, i32 0, i32 0
  %244 = load ptr, ptr %243, align 8
  %245 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %244, 0
  %.reload18 = load ptr, ptr %.reg2mem15, align 8
  %246 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload18, i32 0, i32 1
  %247 = load ptr, ptr %246, align 8
  %248 = insertvalue { ptr, ptr, ptr, i32 } %245, ptr %247, 1
  %.reload17 = load ptr, ptr %.reg2mem15, align 8
  %249 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload17, i32 0, i32 2
  %250 = load ptr, ptr %249, align 8
  %251 = insertvalue { ptr, ptr, ptr, i32 } %248, ptr %250, 2
  %.reload16 = load ptr, ptr %.reg2mem15, align 8
  %252 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload16, i32 0, i32 3
  %253 = load i32, ptr %252, align 4
  %254 = insertvalue { ptr, ptr, ptr, i32 } %251, i32 %253, 3
  ret { ptr, ptr, ptr, i32 } %254
}

define { ptr, ptr, ptr, i32 } @String_extend_strString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca ptr, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = alloca ptr, align 8
  %10 = alloca { ptr }, align 8
  %11 = alloca ptr, align 8
  %12 = alloca ptr, align 8
  %13 = alloca ptr, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca { ptr, ptr, ptr, i32 }, align 8
  %17 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem2 = alloca i32, align 4
  %.reg2mem4 = alloca i32, align 4
  %.reg2mem6 = alloca i32, align 4
  %.reg2mem8 = alloca i32, align 4
  %.reg2mem10 = alloca i32, align 4
  %.reg2mem12 = alloca i32, align 4
  %.reg2mem14 = alloca i1, align 1
  %.reg2mem17 = alloca i32, align 4
  %.reg2mem21 = alloca i32, align 4
  %.reg2mem29 = alloca ptr, align 8
  %.reg2mem31 = alloca ptr, align 8
  %.reg2mem33 = alloca i32, align 4
  %.reg2mem35 = alloca i32, align 4
  %.reg2mem37 = alloca i32, align 4
  %.reg2mem39 = alloca i32, align 4
  %.reg2mem41 = alloca i1, align 1
  %.reg2mem44 = alloca i32, align 4
  %.reg2mem47 = alloca i32, align 4
  %.reg2mem51 = alloca ptr, align 8
  %.reg2mem53 = alloca ptr, align 8
  %.reg2mem55 = alloca i32, align 4
  %.reg2mem57 = alloca ptr, align 8
  %.reg2mem67 = alloca ptr, align 8
  %.reg2mem70 = alloca ptr, align 8
  %.reg2mem73 = alloca i32, align 4
  %.reg2mem79 = alloca i32, align 4
  %.reg2mem81 = alloca i32, align 4
  %.reg2mem83 = alloca i32, align 4
  %.reg2mem85 = alloca i32, align 4
  %.reg2mem87 = alloca i32, align 4
  %.reg2mem89 = alloca i32, align 4
  %.reg2mem91 = alloca i32, align 4
  %.reg2mem93 = alloca i32, align 4
  %.reg2mem95 = alloca i32, align 4
  %.reg2mem97 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %17, align 8
  %18 = call ptr @llvm.invariant.start.p0(i64 16, ptr %17)
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 0
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 2
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = load i32, ptr %29, align 4
  store i32 %31, ptr %30, align 4
  call void @set_offset(ptr %19, ptr @String)
  %32 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %32, align 8
  %33 = call ptr @llvm.invariant.start.p0(i64 16, ptr %32)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 0
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %37 = load ptr, ptr %35, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 1
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %40 = load ptr, ptr %38, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 2
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %43 = load ptr, ptr %41, align 8
  store ptr %43, ptr %42, align 8
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 3
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %46 = load i32, ptr %44, align 4
  store i32 %46, ptr %45, align 4
  call void @set_offset(ptr %34, ptr @String)
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %48 = load ptr, ptr %47, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %48, 0
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } %49, ptr %51, 1
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %54 = load ptr, ptr %53, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %54, 2
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %57 = load i32, ptr %56, align 4
  %58 = insertvalue { ptr, ptr, ptr, i32 } %55, i32 %57, 3
  %59 = alloca [0 x ptr], align 8
  %60 = call ptr @llvm.invariant.start.p0(i64 0, ptr %59)
  %61 = call ptr @llvm.invariant.start.p0(i64 280, ptr %48)
  %62 = getelementptr ptr, ptr %48, i32 %57
  %63 = getelementptr ptr, ptr %62, i32 7
  %64 = load ptr, ptr %63, align 8
  %65 = alloca {}, align 8
  %66 = call ptr @behavior_wrapper(ptr %64, { ptr, ptr, ptr, i32 } %58, ptr %65)
  %67 = call { ptr } %66({ ptr, ptr, ptr, i32 } %58, { ptr, ptr, ptr, i32 } %58, ptr %59)
  %68 = alloca ptr, align 8
  store { ptr } %67, ptr %68, align 8
  %69 = alloca { ptr }, align 8
  %70 = getelementptr { ptr }, ptr %69, i32 0, i32 0
  %71 = load ptr, ptr %68, align 8
  store ptr %71, ptr %70, align 8
  %72 = call ptr @llvm.invariant.start.p0(i64 16, ptr %69)
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %74 = load ptr, ptr %73, align 8
  %75 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %74, 0
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %77 = load ptr, ptr %76, align 8
  %78 = insertvalue { ptr, ptr, ptr, i32 } %75, ptr %77, 1
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %80 = load ptr, ptr %79, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } %78, ptr %80, 2
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %83 = load i32, ptr %82, align 4
  %84 = insertvalue { ptr, ptr, ptr, i32 } %81, i32 %83, 3
  %85 = alloca [0 x ptr], align 8
  %86 = call ptr @llvm.invariant.start.p0(i64 0, ptr %85)
  %87 = call ptr @llvm.invariant.start.p0(i64 280, ptr %74)
  %88 = getelementptr ptr, ptr %74, i32 %83
  %89 = getelementptr ptr, ptr %88, i32 5
  %90 = load ptr, ptr %89, align 8
  %91 = alloca {}, align 8
  %92 = call ptr @behavior_wrapper(ptr %90, { ptr, ptr, ptr, i32 } %84, ptr %91)
  %93 = call i32 %92({ ptr, ptr, ptr, i32 } %84, { ptr, ptr, ptr, i32 } %84, ptr %85)
  store i32 %93, ptr %.reg2mem73, align 4
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %95 = load ptr, ptr %94, align 8
  %96 = load ptr, ptr %19, align 8
  %97 = call ptr @llvm.invariant.start.p0(i64 280, ptr %96)
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %99 = load i32, ptr %98, align 4
  %100 = getelementptr ptr, ptr %96, i32 %99
  %101 = getelementptr ptr, ptr %100, i32 1
  %102 = load ptr, ptr %101, align 8
  %103 = getelementptr { ptr, ptr }, ptr %102, i32 0, i32 0
  %104 = load ptr, ptr %103, align 8
  %105 = call i32 %104(ptr %95) #16
  %.reload78 = load i32, ptr %.reg2mem73, align 4
  %106 = add i32 %105, %.reload78
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %108 = load ptr, ptr %107, align 8
  %109 = load ptr, ptr %19, align 8
  %110 = call ptr @llvm.invariant.start.p0(i64 280, ptr %109)
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %112 = load i32, ptr %111, align 4
  %113 = getelementptr ptr, ptr %109, i32 %112
  %114 = getelementptr ptr, ptr %113, i32 2
  %115 = load ptr, ptr %114, align 8
  %116 = getelementptr { ptr, ptr }, ptr %115, i32 0, i32 0
  %117 = load ptr, ptr %116, align 8
  %118 = call i32 %117(ptr %108) #16
  %119 = icmp slt i32 %106, %118
  %120 = select i1 %119, ptr %6, ptr %14
  store ptr %120, ptr %.reg2mem70, align 8
  %121 = select i1 %119, ptr %7, ptr %15
  store ptr %121, ptr %.reg2mem67, align 8
  %122 = select i1 %119, ptr %8, ptr %16
  store ptr %122, ptr %.reg2mem57, align 8
  br i1 %119, label %123, label %178

123:                                              ; preds = %4
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %125 = load ptr, ptr %124, align 8
  %126 = load ptr, ptr %19, align 8
  %127 = call ptr @llvm.invariant.start.p0(i64 280, ptr %126)
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %129 = load i32, ptr %128, align 4
  %130 = getelementptr ptr, ptr %126, i32 %129
  %131 = getelementptr ptr, ptr %130, i32 1
  %132 = load ptr, ptr %131, align 8
  %133 = getelementptr { ptr, ptr }, ptr %132, i32 0, i32 0
  %134 = load ptr, ptr %133, align 8
  %135 = call i32 %134(ptr %125) #16
  store i32 %135, ptr %.reg2mem55, align 4
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  store ptr %136, ptr %.reg2mem53, align 8
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  store ptr %137, ptr %.reg2mem51, align 8
  %.reload56 = load i32, ptr %.reg2mem55, align 4
  store i32 0, ptr %.reg2mem95, align 4
  store i32 %.reload56, ptr %.reg2mem97, align 4
  br label %138

138:                                              ; preds = %._crit_edge, %123
  %.reload98 = load i32, ptr %.reg2mem97, align 4
  %.reload96 = load i32, ptr %.reg2mem95, align 4
  store i32 %.reload98, ptr %.reg2mem47, align 4
  store i32 %.reload96, ptr %.reg2mem44, align 4
  %.reload54 = load ptr, ptr %.reg2mem53, align 8
  %139 = load ptr, ptr %.reload54, align 8
  %140 = load ptr, ptr %19, align 8
  %141 = call ptr @llvm.invariant.start.p0(i64 280, ptr %140)
  %.reload52 = load ptr, ptr %.reg2mem51, align 8
  %142 = load i32, ptr %.reload52, align 4
  %143 = getelementptr ptr, ptr %140, i32 %142
  %144 = getelementptr ptr, ptr %143, i32 1
  %145 = load ptr, ptr %144, align 8
  %146 = getelementptr { ptr, ptr }, ptr %145, i32 0, i32 0
  %147 = load ptr, ptr %146, align 8
  %148 = call i32 %147(ptr %139) #16
  %.reload77 = load i32, ptr %.reg2mem73, align 4
  %149 = add i32 %148, %.reload77
  %.reload50 = load i32, ptr %.reg2mem47, align 4
  %150 = icmp slt i32 %.reload50, %149
  store i1 %150, ptr %.reg2mem41, align 1
  %.reload43 = load i1, ptr %.reg2mem41, align 1
  br i1 %.reload43, label %151, label %174

151:                                              ; preds = %138
  %152 = load ptr, ptr %69, align 8
  %.reload46 = load i32, ptr %.reg2mem44, align 4
  %153 = sext i32 %.reload46 to i64
  %154 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %153
  %155 = getelementptr i8, ptr %152, i64 %154
  %156 = load i8, ptr %155, align 1
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %158 = load ptr, ptr %157, align 8
  %159 = load ptr, ptr %19, align 8
  %160 = call ptr @llvm.invariant.start.p0(i64 280, ptr %159)
  %161 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %162 = load i32, ptr %161, align 4
  %163 = getelementptr ptr, ptr %159, i32 %162
  %164 = load ptr, ptr %163, align 8
  %165 = getelementptr { ptr, ptr }, ptr %164, i32 0, i32 0
  %166 = load ptr, ptr %165, align 8
  %167 = call { ptr } %166(ptr %158) #16
  store { ptr } %167, ptr %5, align 8
  %168 = load ptr, ptr %5, align 8
  %.reload49 = load i32, ptr %.reg2mem47, align 4
  %169 = sext i32 %.reload49 to i64
  %170 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %169
  %171 = getelementptr i8, ptr %168, i64 %170
  store i8 %156, ptr %171, align 1
  %.reload48 = load i32, ptr %.reg2mem47, align 4
  %172 = add i32 %.reload48, 1
  store i32 %172, ptr %.reg2mem39, align 4
  %.reload45 = load i32, ptr %.reg2mem44, align 4
  %173 = add i32 %.reload45, 1
  store i32 %173, ptr %.reg2mem37, align 4
  %.reload38 = load i32, ptr %.reg2mem37, align 4
  %.reload40 = load i32, ptr %.reg2mem39, align 4
  store i32 %.reload38, ptr %.reg2mem91, align 4
  store i32 %.reload40, ptr %.reg2mem93, align 4
  br label %175

174:                                              ; preds = %138
  store i32 poison, ptr %.reg2mem91, align 4
  store i32 poison, ptr %.reg2mem93, align 4
  br label %175

175:                                              ; preds = %174, %151
  %.reload94 = load i32, ptr %.reg2mem93, align 4
  %.reload92 = load i32, ptr %.reg2mem91, align 4
  store i32 %.reload94, ptr %.reg2mem35, align 4
  store i32 %.reload92, ptr %.reg2mem33, align 4
  br label %176

176:                                              ; preds = %175
  %.reload42 = load i1, ptr %.reg2mem41, align 1
  br i1 %.reload42, label %._crit_edge, label %177

._crit_edge:                                      ; preds = %176
  %.reload34 = load i32, ptr %.reg2mem33, align 4
  %.reload36 = load i32, ptr %.reg2mem35, align 4
  store i32 %.reload34, ptr %.reg2mem95, align 4
  store i32 %.reload36, ptr %.reg2mem97, align 4
  br label %138

177:                                              ; preds = %176
  br label %325

178:                                              ; preds = %4
  %179 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %180 = load ptr, ptr %179, align 8
  %181 = load ptr, ptr %19, align 8
  %182 = call ptr @llvm.invariant.start.p0(i64 280, ptr %181)
  %183 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %184 = load i32, ptr %183, align 4
  %185 = getelementptr ptr, ptr %181, i32 %184
  %186 = getelementptr ptr, ptr %185, i32 1
  %187 = load ptr, ptr %186, align 8
  %188 = getelementptr { ptr, ptr }, ptr %187, i32 0, i32 0
  %189 = load ptr, ptr %188, align 8
  %190 = call i32 %189(ptr %180) #16
  %.reload76 = load i32, ptr %.reg2mem73, align 4
  %191 = add i32 %190, %.reload76
  %192 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %193 = load ptr, ptr %192, align 8
  %194 = load ptr, ptr %19, align 8
  %195 = call ptr @llvm.invariant.start.p0(i64 280, ptr %194)
  %196 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %197 = load i32, ptr %196, align 4
  %198 = getelementptr ptr, ptr %194, i32 %197
  %199 = getelementptr ptr, ptr %198, i32 2
  %200 = load ptr, ptr %199, align 8
  %201 = getelementptr { ptr, ptr }, ptr %200, i32 0, i32 1
  %202 = load ptr, ptr %201, align 8
  call void %202(ptr %193, i32 %191) #15
  %203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %204 = load ptr, ptr %203, align 8
  %205 = load ptr, ptr %19, align 8
  %206 = call ptr @llvm.invariant.start.p0(i64 280, ptr %205)
  %207 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %208 = load i32, ptr %207, align 4
  %209 = getelementptr ptr, ptr %205, i32 %208
  %210 = load ptr, ptr %209, align 8
  %211 = getelementptr { ptr, ptr }, ptr %210, i32 0, i32 0
  %212 = load ptr, ptr %211, align 8
  %213 = call { ptr } %212(ptr %204) #16
  store { ptr } %213, ptr %9, align 8
  %214 = getelementptr { ptr }, ptr %10, i32 0, i32 0
  %215 = load ptr, ptr %9, align 8
  store ptr %215, ptr %214, align 8
  %216 = call ptr @llvm.invariant.start.p0(i64 16, ptr %10)
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %218 = load ptr, ptr %217, align 8
  %219 = load ptr, ptr %19, align 8
  %220 = call ptr @llvm.invariant.start.p0(i64 280, ptr %219)
  %221 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %222 = load i32, ptr %221, align 4
  %223 = getelementptr ptr, ptr %219, i32 %222
  %224 = getelementptr ptr, ptr %223, i32 2
  %225 = load ptr, ptr %224, align 8
  %226 = getelementptr { ptr, ptr }, ptr %225, i32 0, i32 0
  %227 = load ptr, ptr %226, align 8
  %228 = call i32 %227(ptr %218) #16
  %229 = sext i32 %228 to i64
  %230 = mul i64 %229, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %231 = call ptr @bump_malloc(i64 %230)
  store ptr %231, ptr %11, align 8
  %232 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %233 = load ptr, ptr %232, align 8
  %234 = load ptr, ptr %19, align 8
  %235 = call ptr @llvm.invariant.start.p0(i64 280, ptr %234)
  %236 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %237 = load i32, ptr %236, align 4
  %238 = getelementptr ptr, ptr %234, i32 %237
  %239 = load ptr, ptr %238, align 8
  %240 = getelementptr { ptr, ptr }, ptr %239, i32 0, i32 1
  %241 = load ptr, ptr %240, align 8
  %242 = getelementptr { ptr }, ptr %11, i32 0, i32 0
  %243 = load ptr, ptr %242, align 8
  %244 = insertvalue { ptr } undef, ptr %243, 0
  call void %241(ptr %233, { ptr } %244) #15
  %245 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  store ptr %245, ptr %.reg2mem31, align 8
  %246 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  store ptr %246, ptr %.reg2mem29, align 8
  store i32 0, ptr %.reg2mem87, align 4
  store i32 0, ptr %.reg2mem89, align 4
  br label %247

247:                                              ; preds = %._crit_edge1, %178
  %.reload90 = load i32, ptr %.reg2mem89, align 4
  %.reload88 = load i32, ptr %.reg2mem87, align 4
  store i32 %.reload90, ptr %.reg2mem21, align 4
  store i32 %.reload88, ptr %.reg2mem17, align 4
  %.reload32 = load ptr, ptr %.reg2mem31, align 8
  %248 = load ptr, ptr %.reload32, align 8
  %249 = load ptr, ptr %19, align 8
  %250 = call ptr @llvm.invariant.start.p0(i64 280, ptr %249)
  %.reload30 = load ptr, ptr %.reg2mem29, align 8
  %251 = load i32, ptr %.reload30, align 4
  %252 = getelementptr ptr, ptr %249, i32 %251
  %253 = getelementptr ptr, ptr %252, i32 1
  %254 = load ptr, ptr %253, align 8
  %255 = getelementptr { ptr, ptr }, ptr %254, i32 0, i32 0
  %256 = load ptr, ptr %255, align 8
  %257 = call i32 %256(ptr %248) #16
  %.reload75 = load i32, ptr %.reg2mem73, align 4
  %258 = add i32 %257, %.reload75
  %.reload28 = load i32, ptr %.reg2mem21, align 4
  %259 = icmp slt i32 %.reload28, %258
  store i1 %259, ptr %.reg2mem14, align 1
  %.reload16 = load i1, ptr %.reg2mem14, align 1
  br i1 %.reload16, label %260, label %321

260:                                              ; preds = %247
  %261 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %262 = load ptr, ptr %261, align 8
  %263 = load ptr, ptr %19, align 8
  %264 = call ptr @llvm.invariant.start.p0(i64 280, ptr %263)
  %265 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %266 = load i32, ptr %265, align 4
  %267 = getelementptr ptr, ptr %263, i32 %266
  %268 = getelementptr ptr, ptr %267, i32 1
  %269 = load ptr, ptr %268, align 8
  %270 = getelementptr { ptr, ptr }, ptr %269, i32 0, i32 0
  %271 = load ptr, ptr %270, align 8
  %272 = call i32 %271(ptr %262) #16
  %.reload27 = load i32, ptr %.reg2mem21, align 4
  %273 = icmp slt i32 %.reload27, %272
  br i1 %273, label %274, label %296

274:                                              ; preds = %260
  %275 = load ptr, ptr %10, align 8
  %.reload26 = load i32, ptr %.reg2mem21, align 4
  %276 = sext i32 %.reload26 to i64
  %277 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %276
  %278 = getelementptr i8, ptr %275, i64 %277
  %279 = load i8, ptr %278, align 1
  %280 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %281 = load ptr, ptr %280, align 8
  %282 = load ptr, ptr %19, align 8
  %283 = call ptr @llvm.invariant.start.p0(i64 280, ptr %282)
  %284 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %285 = load i32, ptr %284, align 4
  %286 = getelementptr ptr, ptr %282, i32 %285
  %287 = load ptr, ptr %286, align 8
  %288 = getelementptr { ptr, ptr }, ptr %287, i32 0, i32 0
  %289 = load ptr, ptr %288, align 8
  %290 = call { ptr } %289(ptr %281) #16
  store { ptr } %290, ptr %12, align 8
  %291 = load ptr, ptr %12, align 8
  %.reload25 = load i32, ptr %.reg2mem21, align 4
  %292 = sext i32 %.reload25 to i64
  %293 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %292
  %294 = getelementptr i8, ptr %291, i64 %293
  store i8 %279, ptr %294, align 1
  %.reload24 = load i32, ptr %.reg2mem21, align 4
  %295 = add i32 %.reload24, 1
  store i32 %295, ptr %.reg2mem12, align 4
  %.reload13 = load i32, ptr %.reg2mem12, align 4
  %.reload18 = load i32, ptr %.reg2mem17, align 4
  store i32 %.reload18, ptr %.reg2mem83, align 4
  store i32 %.reload13, ptr %.reg2mem85, align 4
  br label %319

296:                                              ; preds = %260
  %297 = load ptr, ptr %69, align 8
  %.reload20 = load i32, ptr %.reg2mem17, align 4
  %298 = sext i32 %.reload20 to i64
  %299 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %298
  %300 = getelementptr i8, ptr %297, i64 %299
  %301 = load i8, ptr %300, align 1
  %302 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %303 = load ptr, ptr %302, align 8
  %304 = load ptr, ptr %19, align 8
  %305 = call ptr @llvm.invariant.start.p0(i64 280, ptr %304)
  %306 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %307 = load i32, ptr %306, align 4
  %308 = getelementptr ptr, ptr %304, i32 %307
  %309 = load ptr, ptr %308, align 8
  %310 = getelementptr { ptr, ptr }, ptr %309, i32 0, i32 0
  %311 = load ptr, ptr %310, align 8
  %312 = call { ptr } %311(ptr %303) #16
  store { ptr } %312, ptr %13, align 8
  %313 = load ptr, ptr %13, align 8
  %.reload23 = load i32, ptr %.reg2mem21, align 4
  %314 = sext i32 %.reload23 to i64
  %315 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %314
  %316 = getelementptr i8, ptr %313, i64 %315
  store i8 %301, ptr %316, align 1
  %.reload22 = load i32, ptr %.reg2mem21, align 4
  %317 = add i32 %.reload22, 1
  store i32 %317, ptr %.reg2mem10, align 4
  %.reload19 = load i32, ptr %.reg2mem17, align 4
  %318 = add i32 %.reload19, 1
  store i32 %318, ptr %.reg2mem8, align 4
  %.reload9 = load i32, ptr %.reg2mem8, align 4
  %.reload11 = load i32, ptr %.reg2mem10, align 4
  store i32 %.reload9, ptr %.reg2mem83, align 4
  store i32 %.reload11, ptr %.reg2mem85, align 4
  br label %319

319:                                              ; preds = %296, %274
  %.reload86 = load i32, ptr %.reg2mem85, align 4
  %.reload84 = load i32, ptr %.reg2mem83, align 4
  store i32 %.reload86, ptr %.reg2mem6, align 4
  store i32 %.reload84, ptr %.reg2mem4, align 4
  br label %320

320:                                              ; preds = %319
  %.reload5 = load i32, ptr %.reg2mem4, align 4
  %.reload7 = load i32, ptr %.reg2mem6, align 4
  store i32 %.reload5, ptr %.reg2mem79, align 4
  store i32 %.reload7, ptr %.reg2mem81, align 4
  br label %322

321:                                              ; preds = %247
  store i32 poison, ptr %.reg2mem79, align 4
  store i32 poison, ptr %.reg2mem81, align 4
  br label %322

322:                                              ; preds = %321, %320
  %.reload82 = load i32, ptr %.reg2mem81, align 4
  %.reload80 = load i32, ptr %.reg2mem79, align 4
  store i32 %.reload82, ptr %.reg2mem2, align 4
  store i32 %.reload80, ptr %.reg2mem, align 4
  br label %323

323:                                              ; preds = %322
  %.reload15 = load i1, ptr %.reg2mem14, align 1
  br i1 %.reload15, label %._crit_edge1, label %324

._crit_edge1:                                     ; preds = %323
  %.reload = load i32, ptr %.reg2mem, align 4
  %.reload3 = load i32, ptr %.reg2mem2, align 4
  store i32 %.reload, ptr %.reg2mem87, align 4
  store i32 %.reload3, ptr %.reg2mem89, align 4
  br label %247

324:                                              ; preds = %323
  br label %325

325:                                              ; preds = %324, %177
  %326 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %327 = load ptr, ptr %326, align 8
  %328 = load ptr, ptr %19, align 8
  %329 = call ptr @llvm.invariant.start.p0(i64 280, ptr %328)
  %330 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %331 = load i32, ptr %330, align 4
  %332 = getelementptr ptr, ptr %328, i32 %331
  %333 = getelementptr ptr, ptr %332, i32 1
  %334 = load ptr, ptr %333, align 8
  %335 = getelementptr { ptr, ptr }, ptr %334, i32 0, i32 0
  %336 = load ptr, ptr %335, align 8
  %337 = call i32 %336(ptr %327) #16
  %.reload72 = load ptr, ptr %.reg2mem70, align 8
  store i32 %337, ptr %.reload72, align 4
  %.reload71 = load ptr, ptr %.reg2mem70, align 8
  %338 = load i32, ptr %.reload71, align 4
  %.reload74 = load i32, ptr %.reg2mem73, align 4
  %339 = add i32 %338, %.reload74
  %.reload69 = load ptr, ptr %.reg2mem67, align 8
  store i32 %339, ptr %.reload69, align 4
  %340 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %341 = load ptr, ptr %340, align 8
  %342 = load ptr, ptr %19, align 8
  %343 = call ptr @llvm.invariant.start.p0(i64 280, ptr %342)
  %344 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %345 = load i32, ptr %344, align 4
  %346 = getelementptr ptr, ptr %342, i32 %345
  %347 = getelementptr ptr, ptr %346, i32 1
  %348 = load ptr, ptr %347, align 8
  %349 = getelementptr { ptr, ptr }, ptr %348, i32 0, i32 1
  %350 = load ptr, ptr %349, align 8
  %.reload68 = load ptr, ptr %.reg2mem67, align 8
  %351 = load i32, ptr %.reload68, align 4
  call void %350(ptr %341, i32 %351) #15
  %352 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %.reload66 = load ptr, ptr %.reg2mem57, align 8
  %353 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload66, i32 0, i32 0
  %354 = load ptr, ptr %352, align 8
  store ptr %354, ptr %353, align 8
  %355 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %.reload65 = load ptr, ptr %.reg2mem57, align 8
  %356 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload65, i32 0, i32 1
  %357 = load ptr, ptr %355, align 8
  store ptr %357, ptr %356, align 8
  %358 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %.reload64 = load ptr, ptr %.reg2mem57, align 8
  %359 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload64, i32 0, i32 2
  %360 = load ptr, ptr %358, align 8
  store ptr %360, ptr %359, align 8
  %361 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %.reload63 = load ptr, ptr %.reg2mem57, align 8
  %362 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload63, i32 0, i32 3
  %363 = load i32, ptr %361, align 4
  store i32 %363, ptr %362, align 4
  %.reload62 = load ptr, ptr %.reg2mem57, align 8
  call void @set_offset(ptr %.reload62, ptr @String)
  %.reload61 = load ptr, ptr %.reg2mem57, align 8
  %364 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload61, i32 0, i32 0
  %365 = load ptr, ptr %364, align 8
  %366 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %365, 0
  %.reload60 = load ptr, ptr %.reg2mem57, align 8
  %367 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload60, i32 0, i32 1
  %368 = load ptr, ptr %367, align 8
  %369 = insertvalue { ptr, ptr, ptr, i32 } %366, ptr %368, 1
  %.reload59 = load ptr, ptr %.reg2mem57, align 8
  %370 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload59, i32 0, i32 2
  %371 = load ptr, ptr %370, align 8
  %372 = insertvalue { ptr, ptr, ptr, i32 } %369, ptr %371, 2
  %.reload58 = load ptr, ptr %.reg2mem57, align 8
  %373 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload58, i32 0, i32 3
  %374 = load i32, ptr %373, align 4
  %375 = insertvalue { ptr, ptr, ptr, i32 } %372, i32 %374, 3
  ret { ptr, ptr, ptr, i32 } %375
}

define i8 @String__index_xPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i8, align 1
  %.reg2mem2 = alloca i8, align 1
  %.reg2mem4 = alloca i8, align 1
  %.reg2mem6 = alloca i8, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %7, align 8
  %8 = call ptr @llvm.invariant.start.p0(i64 16, ptr %7)
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  call void @set_offset(ptr %9, ptr @String)
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %23 = load ptr, ptr %22, align 8
  %24 = load ptr, ptr %9, align 8
  %25 = call ptr @llvm.invariant.start.p0(i64 280, ptr %24)
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %27 = load i32, ptr %26, align 4
  %28 = getelementptr ptr, ptr %24, i32 %27
  %29 = getelementptr ptr, ptr %28, i32 1
  %30 = load ptr, ptr %29, align 8
  %31 = getelementptr { ptr, ptr }, ptr %30, i32 0, i32 0
  %32 = load ptr, ptr %31, align 8
  %33 = call i32 %32(ptr %23) #16
  %34 = sub i32 %33, 1
  %35 = icmp sgt i32 %3, %34
  br i1 %35, label %36, label %._crit_edge

._crit_edge:                                      ; preds = %4
  br label %38

36:                                               ; preds = %4
  %37 = call ptr @get_current_coroutine()
  call void @coroutine_yield(ptr %37)
  br label %38

38:                                               ; preds = %._crit_edge, %36
  %39 = icmp sge i32 %3, 0
  br i1 %39, label %40, label %57

40:                                               ; preds = %38
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %42 = load ptr, ptr %41, align 8
  %43 = load ptr, ptr %9, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 280, ptr %43)
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %46 = load i32, ptr %45, align 4
  %47 = getelementptr ptr, ptr %43, i32 %46
  %48 = load ptr, ptr %47, align 8
  %49 = getelementptr { ptr, ptr }, ptr %48, i32 0, i32 0
  %50 = load ptr, ptr %49, align 8
  %51 = call { ptr } %50(ptr %42) #16
  store { ptr } %51, ptr %5, align 8
  %52 = load ptr, ptr %5, align 8
  %53 = sext i32 %3 to i64
  %54 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %53
  %55 = getelementptr i8, ptr %52, i64 %54
  %56 = load i8, ptr %55, align 1
  store i8 %56, ptr %.reg2mem4, align 1
  %.reload5 = load i8, ptr %.reg2mem4, align 1
  store i8 %.reload5, ptr %.reg2mem6, align 1
  br label %104

57:                                               ; preds = %38
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = load ptr, ptr %9, align 8
  %61 = call ptr @llvm.invariant.start.p0(i64 280, ptr %60)
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %63 = load i32, ptr %62, align 4
  %64 = getelementptr ptr, ptr %60, i32 %63
  %65 = getelementptr ptr, ptr %64, i32 1
  %66 = load ptr, ptr %65, align 8
  %67 = getelementptr { ptr, ptr }, ptr %66, i32 0, i32 0
  %68 = load ptr, ptr %67, align 8
  %69 = call i32 %68(ptr %59) #16
  %70 = add i32 %69, %3
  %71 = icmp slt i32 %70, 0
  br i1 %71, label %72, label %._crit_edge1

._crit_edge1:                                     ; preds = %57
  br label %74

72:                                               ; preds = %57
  %73 = call ptr @get_current_coroutine()
  call void @coroutine_yield(ptr %73)
  br label %74

74:                                               ; preds = %._crit_edge1, %72
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %76 = load ptr, ptr %75, align 8
  %77 = load ptr, ptr %9, align 8
  %78 = call ptr @llvm.invariant.start.p0(i64 280, ptr %77)
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %80 = load i32, ptr %79, align 4
  %81 = getelementptr ptr, ptr %77, i32 %80
  %82 = load ptr, ptr %81, align 8
  %83 = getelementptr { ptr, ptr }, ptr %82, i32 0, i32 0
  %84 = load ptr, ptr %83, align 8
  %85 = call { ptr } %84(ptr %76) #16
  store { ptr } %85, ptr %6, align 8
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %87 = load ptr, ptr %86, align 8
  %88 = load ptr, ptr %9, align 8
  %89 = call ptr @llvm.invariant.start.p0(i64 280, ptr %88)
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %91 = load i32, ptr %90, align 4
  %92 = getelementptr ptr, ptr %88, i32 %91
  %93 = getelementptr ptr, ptr %92, i32 1
  %94 = load ptr, ptr %93, align 8
  %95 = getelementptr { ptr, ptr }, ptr %94, i32 0, i32 0
  %96 = load ptr, ptr %95, align 8
  %97 = call i32 %96(ptr %87) #16
  %98 = add i32 %97, %3
  %99 = load ptr, ptr %6, align 8
  %100 = sext i32 %98 to i64
  %101 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %100
  %102 = getelementptr i8, ptr %99, i64 %101
  %103 = load i8, ptr %102, align 1
  store i8 %103, ptr %.reg2mem2, align 1
  %.reload3 = load i8, ptr %.reg2mem2, align 1
  store i8 %.reload3, ptr %.reg2mem6, align 1
  br label %104

104:                                              ; preds = %74, %40
  %.reload7 = load i8, ptr %.reg2mem6, align 1
  store i8 %.reload7, ptr %.reg2mem, align 1
  br label %105

105:                                              ; preds = %104
  %.reload = load i8, ptr %.reg2mem, align 1
  ret i8 %.reload
}

define i1 @String__EQ_otherString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca i1, align 1
  %6 = alloca ptr, align 8
  %7 = alloca [0 x ptr], align 8
  %8 = alloca {}, align 8
  %9 = alloca ptr, align 8
  %10 = alloca i1, align 1
  %11 = alloca i1, align 1
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca ptr, align 8
  %.reg2mem2 = alloca i1, align 1
  %.reg2mem4 = alloca i32, align 4
  %.reg2mem6 = alloca i32, align 4
  %.reg2mem8 = alloca i32, align 4
  %.reg2mem10 = alloca i32, align 4
  %.reg2mem12 = alloca i32, align 4
  %.reg2mem14 = alloca i32, align 4
  %.reg2mem16 = alloca ptr, align 8
  %.reg2mem19 = alloca i1, align 1
  %.reg2mem22 = alloca i32, align 4
  %.reg2mem28 = alloca ptr, align 8
  %.reg2mem30 = alloca ptr, align 8
  %.reg2mem32 = alloca ptr, align 8
  %.reg2mem34 = alloca i1, align 1
  %.reg2mem36 = alloca i32, align 4
  %.reg2mem38 = alloca i32, align 4
  %.reg2mem40 = alloca i32, align 4
  %.reg2mem42 = alloca i32, align 4
  %.reg2mem44 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %12, align 8
  %13 = call ptr @llvm.invariant.start.p0(i64 16, ptr %12)
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 0
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 2
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %26 = load i32, ptr %24, align 4
  store i32 %26, ptr %25, align 4
  call void @set_offset(ptr %14, ptr @String)
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %27, align 8
  %28 = call ptr @llvm.invariant.start.p0(i64 16, ptr %27)
  %29 = alloca { ptr, ptr, ptr, i32 }, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 0
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 1
  %35 = load ptr, ptr %33, align 8
  store ptr %35, ptr %34, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 2
  %38 = load ptr, ptr %36, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 3
  %41 = load i32, ptr %39, align 4
  store i32 %41, ptr %40, align 4
  call void @set_offset(ptr %29, ptr @String)
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %43 = load ptr, ptr %42, align 8
  %44 = load ptr, ptr %14, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 280, ptr %44)
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %47 = load i32, ptr %46, align 4
  %48 = getelementptr ptr, ptr %44, i32 %47
  %49 = getelementptr ptr, ptr %48, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = getelementptr { ptr, ptr }, ptr %50, i32 0, i32 0
  %52 = load ptr, ptr %51, align 8
  %53 = call i32 %52(ptr %43) #16
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 0
  %55 = load ptr, ptr %54, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %55, 0
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = insertvalue { ptr, ptr, ptr, i32 } %56, ptr %58, 1
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 2
  %61 = load ptr, ptr %60, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } %59, ptr %61, 2
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 3
  %64 = load i32, ptr %63, align 4
  %65 = insertvalue { ptr, ptr, ptr, i32 } %62, i32 %64, 3
  %66 = alloca [0 x ptr], align 8
  %67 = call ptr @llvm.invariant.start.p0(i64 0, ptr %66)
  %68 = call ptr @llvm.invariant.start.p0(i64 280, ptr %55)
  %69 = getelementptr ptr, ptr %55, i32 %64
  %70 = getelementptr ptr, ptr %69, i32 5
  %71 = load ptr, ptr %70, align 8
  %72 = alloca {}, align 8
  %73 = call ptr @behavior_wrapper(ptr %71, { ptr, ptr, ptr, i32 } %65, ptr %72)
  %74 = call i32 %73({ ptr, ptr, ptr, i32 } %65, { ptr, ptr, ptr, i32 } %65, ptr %66)
  %75 = icmp ne i32 %53, %74
  br i1 %75, label %76, label %77

76:                                               ; preds = %4
  store ptr %5, ptr %.reg2mem32, align 8
  store i1 false, ptr %.reg2mem34, align 1
  br label %149

77:                                               ; preds = %4
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  store ptr %78, ptr %.reg2mem30, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  store ptr %79, ptr %.reg2mem28, align 8
  store i32 0, ptr %.reg2mem44, align 4
  br label %80

80:                                               ; preds = %147, %77
  %.reload45 = load i32, ptr %.reg2mem44, align 4
  store i32 %.reload45, ptr %.reg2mem22, align 4
  %.reload31 = load ptr, ptr %.reg2mem30, align 8
  %81 = load ptr, ptr %.reload31, align 8
  %82 = load ptr, ptr %14, align 8
  %83 = call ptr @llvm.invariant.start.p0(i64 280, ptr %82)
  %.reload29 = load ptr, ptr %.reg2mem28, align 8
  %84 = load i32, ptr %.reload29, align 4
  %85 = getelementptr ptr, ptr %82, i32 %84
  %86 = getelementptr ptr, ptr %85, i32 1
  %87 = load ptr, ptr %86, align 8
  %88 = getelementptr { ptr, ptr }, ptr %87, i32 0, i32 0
  %89 = load ptr, ptr %88, align 8
  %90 = call i32 %89(ptr %81) #16
  %.reload27 = load i32, ptr %.reg2mem22, align 4
  %91 = icmp slt i32 %.reload27, %90
  %.reload26 = load i32, ptr %.reg2mem22, align 4
  %92 = icmp sge i32 %.reload26, %90
  store i1 %92, ptr %.reg2mem19, align 1
  %93 = select i1 %91, ptr %10, ptr %11
  store ptr %93, ptr %.reg2mem16, align 8
  br i1 %91, label %94, label %143

94:                                               ; preds = %80
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %96 = load ptr, ptr %95, align 8
  %97 = load ptr, ptr %14, align 8
  %98 = call ptr @llvm.invariant.start.p0(i64 280, ptr %97)
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %100 = load i32, ptr %99, align 4
  %101 = getelementptr ptr, ptr %97, i32 %100
  %102 = load ptr, ptr %101, align 8
  %103 = getelementptr { ptr, ptr }, ptr %102, i32 0, i32 0
  %104 = load ptr, ptr %103, align 8
  %105 = call { ptr } %104(ptr %96) #16
  store { ptr } %105, ptr %6, align 8
  %106 = load ptr, ptr %6, align 8
  %.reload25 = load i32, ptr %.reg2mem22, align 4
  %107 = sext i32 %.reload25 to i64
  %108 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %107
  %109 = getelementptr i8, ptr %106, i64 %108
  %110 = load i8, ptr %109, align 1
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 0
  %112 = load ptr, ptr %111, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %112, 0
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 1
  %115 = load ptr, ptr %114, align 8
  %116 = insertvalue { ptr, ptr, ptr, i32 } %113, ptr %115, 1
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 2
  %118 = load ptr, ptr %117, align 8
  %119 = insertvalue { ptr, ptr, ptr, i32 } %116, ptr %118, 2
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 3
  %121 = load i32, ptr %120, align 4
  %122 = insertvalue { ptr, ptr, ptr, i32 } %119, i32 %121, 3
  %123 = call ptr @llvm.invariant.start.p0(i64 0, ptr %7)
  %124 = call ptr @llvm.invariant.start.p0(i64 280, ptr %112)
  %125 = getelementptr ptr, ptr %112, i32 %121
  %126 = getelementptr ptr, ptr %125, i32 7
  %127 = load ptr, ptr %126, align 8
  %128 = call ptr @behavior_wrapper(ptr %127, { ptr, ptr, ptr, i32 } %122, ptr %8)
  %129 = call { ptr } %128({ ptr, ptr, ptr, i32 } %122, { ptr, ptr, ptr, i32 } %122, ptr %7)
  store { ptr } %129, ptr %9, align 8
  %130 = load ptr, ptr %9, align 8
  %.reload24 = load i32, ptr %.reg2mem22, align 4
  %131 = sext i32 %.reload24 to i64
  %132 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %131
  %133 = getelementptr i8, ptr %130, i64 %132
  %134 = load i8, ptr %133, align 1
  %135 = icmp ne i8 %110, %134
  %136 = icmp eq i8 %110, %134
  %137 = zext i1 %136 to i32
  store i32 %137, ptr %.reg2mem14, align 4
  br i1 %135, label %138, label %139

138:                                              ; preds = %94
  store i32 poison, ptr %.reg2mem42, align 4
  br label %141

139:                                              ; preds = %94
  %.reload23 = load i32, ptr %.reg2mem22, align 4
  %140 = add i32 %.reload23, 1
  store i32 %140, ptr %.reg2mem12, align 4
  %.reload13 = load i32, ptr %.reg2mem12, align 4
  store i32 %.reload13, ptr %.reg2mem42, align 4
  br label %141

141:                                              ; preds = %139, %138
  %.reload43 = load i32, ptr %.reg2mem42, align 4
  store i32 %.reload43, ptr %.reg2mem10, align 4
  br label %142

142:                                              ; preds = %141
  %.reload11 = load i32, ptr %.reg2mem10, align 4
  %.reload15 = load i32, ptr %.reg2mem14, align 4
  store i32 %.reload15, ptr %.reg2mem38, align 4
  store i32 %.reload11, ptr %.reg2mem40, align 4
  br label %144

143:                                              ; preds = %80
  store i32 0, ptr %.reg2mem38, align 4
  store i32 poison, ptr %.reg2mem40, align 4
  br label %144

144:                                              ; preds = %143, %142
  %.reload41 = load i32, ptr %.reg2mem40, align 4
  %.reload39 = load i32, ptr %.reg2mem38, align 4
  store i32 %.reload41, ptr %.reg2mem8, align 4
  store i32 %.reload39, ptr %.reg2mem6, align 4
  br label %145

145:                                              ; preds = %144
  %.reload7 = load i32, ptr %.reg2mem6, align 4
  %146 = trunc i32 %.reload7 to i1
  %.reload9 = load i32, ptr %.reg2mem8, align 4
  %.reload18 = load ptr, ptr %.reg2mem16, align 8
  %.reload21 = load i1, ptr %.reg2mem19, align 1
  store i32 %.reload9, ptr %.reg2mem36, align 4
  br i1 %146, label %147, label %148

147:                                              ; preds = %145
  %.reload37 = load i32, ptr %.reg2mem36, align 4
  store i32 %.reload37, ptr %.reg2mem4, align 4
  %.reload5 = load i32, ptr %.reg2mem4, align 4
  store i32 %.reload5, ptr %.reg2mem44, align 4
  br label %80

148:                                              ; preds = %145
  %.reload17 = load ptr, ptr %.reg2mem16, align 8
  %.reload20 = load i1, ptr %.reg2mem19, align 1
  store ptr %.reload17, ptr %.reg2mem32, align 8
  store i1 %.reload20, ptr %.reg2mem34, align 1
  br label %149

149:                                              ; preds = %148, %76
  %.reload35 = load i1, ptr %.reg2mem34, align 1
  %.reload33 = load ptr, ptr %.reg2mem32, align 8
  store i1 %.reload35, ptr %.reg2mem2, align 1
  store ptr %.reload33, ptr %.reg2mem, align 8
  br label %150

150:                                              ; preds = %149
  %.reload1 = load ptr, ptr %.reg2mem, align 8
  %.reload3 = load i1, ptr %.reg2mem2, align 1
  store i1 %.reload3, ptr %.reload1, align 1
  %.reload = load ptr, ptr %.reg2mem, align 8
  %151 = load i1, ptr %.reload, align 1
  ret i1 %151
}

define { ptr, i8 } @String_pop_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i8, align 1
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = alloca i8, align 1
  %8 = alloca ptr, align 8
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i8 }, align 8
  %.reg2mem1 = alloca { ptr, i8 }, align 8
  %.reg2mem3 = alloca { ptr, i8 }, align 8
  %.reg2mem5 = alloca { ptr, i8 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %9, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 16, ptr %9)
  %11 = alloca { ptr, ptr, ptr, i32 }, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 0
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 2
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %23 = load i32, ptr %21, align 4
  store i32 %23, ptr %22, align 4
  call void @set_offset(ptr %11, ptr @String)
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %25 = load ptr, ptr %24, align 8
  %26 = load ptr, ptr %11, align 8
  %27 = call ptr @llvm.invariant.start.p0(i64 280, ptr %26)
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %29 = load i32, ptr %28, align 4
  %30 = getelementptr ptr, ptr %26, i32 %29
  %31 = getelementptr ptr, ptr %30, i32 1
  %32 = load ptr, ptr %31, align 8
  %33 = getelementptr { ptr, ptr }, ptr %32, i32 0, i32 0
  %34 = load ptr, ptr %33, align 8
  %35 = call i32 %34(ptr %25) #16
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %42

37:                                               ; preds = %3
  store [0 x i8] undef, ptr %4, align 1
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %5, align 4
  %38 = load ptr, ptr %5, align 8
  %39 = insertvalue { ptr, i8 } undef, ptr %38, 0
  %40 = load i8, ptr %4, align 1
  %41 = insertvalue { ptr, i8 } %39, i8 %40, 1
  store { ptr, i8 } %41, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i8 }, ptr %.reg2mem3, align 8
  store { ptr, i8 } %.reload4, ptr %.reg2mem5, align 8
  br label %99

42:                                               ; preds = %3
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %44 = load ptr, ptr %43, align 8
  %45 = load ptr, ptr %11, align 8
  %46 = call ptr @llvm.invariant.start.p0(i64 280, ptr %45)
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %48 = load i32, ptr %47, align 4
  %49 = getelementptr ptr, ptr %45, i32 %48
  %50 = getelementptr ptr, ptr %49, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = getelementptr { ptr, ptr }, ptr %51, i32 0, i32 0
  %53 = load ptr, ptr %52, align 8
  %54 = call i32 %53(ptr %44) #16
  %55 = sub i32 %54, 1
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = load ptr, ptr %11, align 8
  %59 = call ptr @llvm.invariant.start.p0(i64 280, ptr %58)
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %61 = load i32, ptr %60, align 4
  %62 = getelementptr ptr, ptr %58, i32 %61
  %63 = getelementptr ptr, ptr %62, i32 1
  %64 = load ptr, ptr %63, align 8
  %65 = getelementptr { ptr, ptr }, ptr %64, i32 0, i32 1
  %66 = load ptr, ptr %65, align 8
  call void %66(ptr %57, i32 %55) #15
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %68 = load ptr, ptr %67, align 8
  %69 = load ptr, ptr %11, align 8
  %70 = call ptr @llvm.invariant.start.p0(i64 280, ptr %69)
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %72 = load i32, ptr %71, align 4
  %73 = getelementptr ptr, ptr %69, i32 %72
  %74 = load ptr, ptr %73, align 8
  %75 = getelementptr { ptr, ptr }, ptr %74, i32 0, i32 0
  %76 = load ptr, ptr %75, align 8
  %77 = call { ptr } %76(ptr %68) #16
  store { ptr } %77, ptr %6, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %79 = load ptr, ptr %78, align 8
  %80 = load ptr, ptr %11, align 8
  %81 = call ptr @llvm.invariant.start.p0(i64 280, ptr %80)
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %83 = load i32, ptr %82, align 4
  %84 = getelementptr ptr, ptr %80, i32 %83
  %85 = getelementptr ptr, ptr %84, i32 1
  %86 = load ptr, ptr %85, align 8
  %87 = getelementptr { ptr, ptr }, ptr %86, i32 0, i32 0
  %88 = load ptr, ptr %87, align 8
  %89 = call i32 %88(ptr %79) #16
  %90 = load ptr, ptr %6, align 8
  %91 = sext i32 %89 to i64
  %92 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %91
  %93 = getelementptr i8, ptr %90, i64 %92
  %94 = load i8, ptr %93, align 1
  store i8 %94, ptr %7, align 1
  store i64 ptrtoint (ptr @i8_typ to i64), ptr %8, align 4
  %95 = load ptr, ptr %8, align 8
  %96 = insertvalue { ptr, i8 } undef, ptr %95, 0
  %97 = load i8, ptr %7, align 1
  %98 = insertvalue { ptr, i8 } %96, i8 %97, 1
  store { ptr, i8 } %98, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i8 }, ptr %.reg2mem1, align 8
  store { ptr, i8 } %.reload2, ptr %.reg2mem5, align 8
  br label %99

99:                                               ; preds = %42, %37
  %.reload6 = load { ptr, i8 }, ptr %.reg2mem5, align 8
  store { ptr, i8 } %.reload6, ptr %.reg2mem, align 8
  br label %100

100:                                              ; preds = %99
  %.reload = load { ptr, i8 }, ptr %.reg2mem, align 8
  ret { ptr, i8 } %.reload
}

define { ptr, ptr, ptr, i32 } @String_copy_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca ptr, align 8
  %5 = alloca [1 x ptr], align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = alloca [3 x ptr], align 8
  %8 = alloca { ptr, ptr, ptr }, align 8
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %11 = alloca { ptr, ptr, ptr, i32 }, align 8
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i1, align 1
  %.reg2mem6 = alloca i32, align 4
  %.reg2mem11 = alloca ptr, align 8
  %.reg2mem13 = alloca ptr, align 8
  %.reg2mem15 = alloca i32, align 4
  %.reg2mem17 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %12, align 8
  %13 = call ptr @llvm.invariant.start.p0(i64 16, ptr %12)
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 0
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 2
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %26 = load i32, ptr %24, align 4
  store i32 %26, ptr %25, align 4
  call void @set_offset(ptr %14, ptr @String)
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = load ptr, ptr %14, align 8
  %30 = call ptr @llvm.invariant.start.p0(i64 280, ptr %29)
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %32 = load i32, ptr %31, align 4
  %33 = getelementptr ptr, ptr %29, i32 %32
  %34 = getelementptr ptr, ptr %33, i32 1
  %35 = load ptr, ptr %34, align 8
  %36 = getelementptr { ptr, ptr }, ptr %35, i32 0, i32 0
  %37 = load ptr, ptr %36, align 8
  %38 = call i32 %37(ptr %28) #16
  %39 = sext i32 %38 to i64
  %40 = alloca ptr, align 8
  %41 = mul i64 %39, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %42 = call ptr @bump_malloc(i64 %41)
  store ptr %42, ptr %40, align 8
  %43 = alloca { ptr }, align 8
  %44 = getelementptr { ptr }, ptr %40, i32 0, i32 0
  %45 = getelementptr { ptr }, ptr %43, i32 0, i32 0
  %46 = load ptr, ptr %44, align 8
  store ptr %46, ptr %45, align 8
  %47 = call ptr @llvm.invariant.start.p0(i64 16, ptr %43)
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  store ptr %48, ptr %.reg2mem13, align 8
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  store ptr %49, ptr %.reg2mem11, align 8
  store i32 0, ptr %.reg2mem17, align 4
  br label %50

50:                                               ; preds = %._crit_edge, %3
  %.reload18 = load i32, ptr %.reg2mem17, align 4
  store i32 %.reload18, ptr %.reg2mem6, align 4
  %.reload14 = load ptr, ptr %.reg2mem13, align 8
  %51 = load ptr, ptr %.reload14, align 8
  %52 = load ptr, ptr %14, align 8
  %53 = call ptr @llvm.invariant.start.p0(i64 280, ptr %52)
  %.reload12 = load ptr, ptr %.reg2mem11, align 8
  %54 = load i32, ptr %.reload12, align 4
  %55 = getelementptr ptr, ptr %52, i32 %54
  %56 = getelementptr ptr, ptr %55, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr { ptr, ptr }, ptr %57, i32 0, i32 0
  %59 = load ptr, ptr %58, align 8
  %60 = call i32 %59(ptr %51) #16
  %.reload10 = load i32, ptr %.reg2mem6, align 4
  %61 = icmp slt i32 %.reload10, %60
  store i1 %61, ptr %.reg2mem3, align 1
  %.reload5 = load i1, ptr %.reg2mem3, align 1
  br i1 %.reload5, label %62, label %84

62:                                               ; preds = %50
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %64 = load ptr, ptr %63, align 8
  %65 = load ptr, ptr %14, align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 280, ptr %65)
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %68 = load i32, ptr %67, align 4
  %69 = getelementptr ptr, ptr %65, i32 %68
  %70 = load ptr, ptr %69, align 8
  %71 = getelementptr { ptr, ptr }, ptr %70, i32 0, i32 0
  %72 = load ptr, ptr %71, align 8
  %73 = call { ptr } %72(ptr %64) #16
  store { ptr } %73, ptr %4, align 8
  %74 = load ptr, ptr %4, align 8
  %.reload9 = load i32, ptr %.reg2mem6, align 4
  %75 = sext i32 %.reload9 to i64
  %76 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %75
  %77 = getelementptr i8, ptr %74, i64 %76
  %78 = load i8, ptr %77, align 1
  %79 = load ptr, ptr %43, align 8
  %.reload8 = load i32, ptr %.reg2mem6, align 4
  %80 = sext i32 %.reload8 to i64
  %81 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %80
  %82 = getelementptr i8, ptr %79, i64 %81
  store i8 %78, ptr %82, align 1
  %.reload7 = load i32, ptr %.reg2mem6, align 4
  %83 = add i32 %.reload7, 1
  store i32 %83, ptr %.reg2mem1, align 4
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem15, align 4
  br label %85

84:                                               ; preds = %50
  store i32 poison, ptr %.reg2mem15, align 4
  br label %85

85:                                               ; preds = %84, %62
  %.reload16 = load i32, ptr %.reg2mem15, align 4
  store i32 %.reload16, ptr %.reg2mem, align 4
  br label %86

86:                                               ; preds = %85
  %.reload4 = load i1, ptr %.reg2mem3, align 1
  br i1 %.reload4, label %._crit_edge, label %87

._crit_edge:                                      ; preds = %86
  %.reload = load i32, ptr %.reg2mem, align 4
  store i32 %.reload, ptr %.reg2mem17, align 4
  br label %50

87:                                               ; preds = %86
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %89 = load ptr, ptr %88, align 8
  %90 = load ptr, ptr %14, align 8
  %91 = call ptr @llvm.invariant.start.p0(i64 280, ptr %90)
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %93 = load i32, ptr %92, align 4
  %94 = getelementptr ptr, ptr %90, i32 %93
  %95 = getelementptr ptr, ptr %94, i32 1
  %96 = load ptr, ptr %95, align 8
  %97 = getelementptr { ptr, ptr }, ptr %96, i32 0, i32 0
  %98 = load ptr, ptr %97, align 8
  %99 = call i32 %98(ptr %89) #16
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %101 = load ptr, ptr %100, align 8
  %102 = load ptr, ptr %14, align 8
  %103 = call ptr @llvm.invariant.start.p0(i64 280, ptr %102)
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %105 = load i32, ptr %104, align 4
  %106 = getelementptr ptr, ptr %102, i32 %105
  %107 = getelementptr ptr, ptr %106, i32 1
  %108 = load ptr, ptr %107, align 8
  %109 = getelementptr { ptr, ptr }, ptr %108, i32 0, i32 0
  %110 = load ptr, ptr %109, align 8
  %111 = call i32 %110(ptr %101) #16
  store ptr @String, ptr %5, align 8
  %112 = load ptr, ptr %5, align 8
  %113 = getelementptr ptr, ptr %112, i32 6
  %114 = load ptr, ptr %113, align 8
  %115 = call { i64, i64 } @size_wrapper(ptr %114, ptr %5)
  %116 = extractvalue { i64, i64 } %115, 0
  %117 = call ptr @bump_malloc(i64 %116)
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  store ptr @String, ptr %6, align 8
  store ptr %117, ptr %118, align 8
  store i32 9, ptr %119, align 4
  %120 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %122 = load ptr, ptr %121, align 8
  %123 = load ptr, ptr %14, align 8
  %124 = call ptr @llvm.invariant.start.p0(i64 280, ptr %123)
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %126 = load i32, ptr %125, align 4
  %127 = getelementptr ptr, ptr %123, i32 %126
  %128 = getelementptr ptr, ptr %127, i32 1
  %129 = load ptr, ptr %128, align 8
  %130 = getelementptr { ptr, ptr }, ptr %129, i32 0, i32 0
  %131 = load ptr, ptr %130, align 8
  %132 = call i32 %131(ptr %122) #16
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %134 = load ptr, ptr %133, align 8
  %135 = load ptr, ptr %14, align 8
  %136 = call ptr @llvm.invariant.start.p0(i64 280, ptr %135)
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %138 = load i32, ptr %137, align 4
  %139 = getelementptr ptr, ptr %135, i32 %138
  %140 = getelementptr ptr, ptr %139, i32 1
  %141 = load ptr, ptr %140, align 8
  %142 = getelementptr { ptr, ptr }, ptr %141, i32 0, i32 0
  %143 = load ptr, ptr %142, align 8
  %144 = call i32 %143(ptr %134) #16
  %145 = getelementptr { ptr }, ptr %43, i32 0, i32 0
  %146 = load ptr, ptr %145, align 8
  %147 = insertvalue { ptr } undef, ptr %146, 0
  %148 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %149 = load ptr, ptr %148, align 8
  %150 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %149, 0
  %151 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %152 = load ptr, ptr %151, align 8
  %153 = insertvalue { ptr, ptr, ptr, i32 } %150, ptr %152, 1
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %155 = load ptr, ptr %154, align 8
  %156 = insertvalue { ptr, ptr, ptr, i32 } %153, ptr %155, 2
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %158 = load i32, ptr %157, align 4
  %159 = insertvalue { ptr, ptr, ptr, i32 } %156, i32 %158, 3
  %160 = getelementptr [3 x ptr], ptr %7, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %160, align 8
  %161 = getelementptr [3 x ptr], ptr %7, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %161, align 8
  %162 = getelementptr [3 x ptr], ptr %7, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %162, align 8
  %163 = call ptr @llvm.invariant.start.p0(i64 9, ptr %7)
  %164 = call ptr @llvm.invariant.start.p0(i64 280, ptr %149)
  %165 = getelementptr ptr, ptr %149, i32 %158
  %166 = getelementptr ptr, ptr %165, i32 4
  %167 = load ptr, ptr %166, align 8
  %168 = getelementptr { ptr, ptr, ptr }, ptr %8, i32 0, i32 0
  store ptr @buffer_typ, ptr %168, align 8
  %169 = getelementptr { ptr, ptr, ptr }, ptr %8, i32 0, i32 1
  store ptr @i32_typ, ptr %169, align 8
  %170 = getelementptr { ptr, ptr, ptr }, ptr %8, i32 0, i32 2
  store ptr @i32_typ, ptr %170, align 8
  %171 = call ptr @behavior_wrapper(ptr %167, { ptr, ptr, ptr, i32 } %159, ptr %8)
  call void %171({ ptr, ptr, ptr, i32 } %159, { ptr, ptr, ptr, i32 } %159, ptr %7, { ptr } %147, i32 %132, i32 %144)
  %172 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %174 = load ptr, ptr %172, align 8
  store ptr %174, ptr %173, align 8
  %175 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %176 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %177 = load ptr, ptr %175, align 8
  store ptr %177, ptr %176, align 8
  %178 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %179 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %180 = load ptr, ptr %178, align 8
  store ptr %180, ptr %179, align 8
  %181 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %182 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %183 = load i32, ptr %181, align 4
  store i32 %183, ptr %182, align 4
  call void @set_offset(ptr %9, ptr @String)
  %184 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %185 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 0
  %186 = load ptr, ptr %184, align 8
  store ptr %186, ptr %185, align 8
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %188 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %189 = load ptr, ptr %187, align 8
  store ptr %189, ptr %188, align 8
  %190 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %191 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 2
  %192 = load ptr, ptr %190, align 8
  store ptr %192, ptr %191, align 8
  %193 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %194 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  %195 = load i32, ptr %193, align 4
  store i32 %195, ptr %194, align 4
  %196 = call ptr @llvm.invariant.start.p0(i64 16, ptr %10)
  %197 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 0
  %198 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 0
  %199 = load ptr, ptr %197, align 8
  store ptr %199, ptr %198, align 8
  %200 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %201 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %202 = load ptr, ptr %200, align 8
  store ptr %202, ptr %201, align 8
  %203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 2
  %204 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 2
  %205 = load ptr, ptr %203, align 8
  store ptr %205, ptr %204, align 8
  %206 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  %207 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %208 = load i32, ptr %206, align 4
  store i32 %208, ptr %207, align 4
  call void @set_offset(ptr %11, ptr @String)
  %209 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 0
  %210 = load ptr, ptr %209, align 8
  %211 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %210, 0
  %212 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %213 = load ptr, ptr %212, align 8
  %214 = insertvalue { ptr, ptr, ptr, i32 } %211, ptr %213, 1
  %215 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 2
  %216 = load ptr, ptr %215, align 8
  %217 = insertvalue { ptr, ptr, ptr, i32 } %214, ptr %216, 2
  %218 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %219 = load i32, ptr %218, align 4
  %220 = insertvalue { ptr, ptr, ptr, i32 } %217, i32 %219, 3
  ret { ptr, ptr, ptr, i32 } %220
}

define { ptr } @String_c_string_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca ptr, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i1, align 1
  %.reg2mem6 = alloca i32, align 4
  %.reg2mem11 = alloca ptr, align 8
  %.reg2mem13 = alloca ptr, align 8
  %.reg2mem15 = alloca i32, align 4
  %.reg2mem17 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @String)
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %21 = load ptr, ptr %20, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 280, ptr %22)
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %25 = load i32, ptr %24, align 4
  %26 = getelementptr ptr, ptr %22, i32 %25
  %27 = getelementptr ptr, ptr %26, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr { ptr, ptr }, ptr %28, i32 0, i32 0
  %30 = load ptr, ptr %29, align 8
  %31 = call i32 %30(ptr %21) #16
  %32 = add i32 %31, 1
  %33 = sext i32 %32 to i64
  %34 = alloca ptr, align 8
  %35 = mul i64 %33, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  %36 = call ptr @bump_malloc(i64 %35)
  store ptr %36, ptr %34, align 8
  %37 = alloca { ptr }, align 8
  %38 = getelementptr { ptr }, ptr %34, i32 0, i32 0
  %39 = getelementptr { ptr }, ptr %37, i32 0, i32 0
  %40 = load ptr, ptr %38, align 8
  store ptr %40, ptr %39, align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 16, ptr %37)
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  store ptr %42, ptr %.reg2mem13, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  store ptr %43, ptr %.reg2mem11, align 8
  store i32 0, ptr %.reg2mem17, align 4
  br label %44

44:                                               ; preds = %._crit_edge, %3
  %.reload18 = load i32, ptr %.reg2mem17, align 4
  store i32 %.reload18, ptr %.reg2mem6, align 4
  %.reload14 = load ptr, ptr %.reg2mem13, align 8
  %45 = load ptr, ptr %.reload14, align 8
  %46 = load ptr, ptr %7, align 8
  %47 = call ptr @llvm.invariant.start.p0(i64 280, ptr %46)
  %.reload12 = load ptr, ptr %.reg2mem11, align 8
  %48 = load i32, ptr %.reload12, align 4
  %49 = getelementptr ptr, ptr %46, i32 %48
  %50 = getelementptr ptr, ptr %49, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = getelementptr { ptr, ptr }, ptr %51, i32 0, i32 0
  %53 = load ptr, ptr %52, align 8
  %54 = call i32 %53(ptr %45) #16
  %.reload10 = load i32, ptr %.reg2mem6, align 4
  %55 = icmp slt i32 %.reload10, %54
  store i1 %55, ptr %.reg2mem3, align 1
  %.reload5 = load i1, ptr %.reg2mem3, align 1
  br i1 %.reload5, label %56, label %78

56:                                               ; preds = %44
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = load ptr, ptr %7, align 8
  %60 = call ptr @llvm.invariant.start.p0(i64 280, ptr %59)
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %62 = load i32, ptr %61, align 4
  %63 = getelementptr ptr, ptr %59, i32 %62
  %64 = load ptr, ptr %63, align 8
  %65 = getelementptr { ptr, ptr }, ptr %64, i32 0, i32 0
  %66 = load ptr, ptr %65, align 8
  %67 = call { ptr } %66(ptr %58) #16
  store { ptr } %67, ptr %4, align 8
  %68 = load ptr, ptr %4, align 8
  %.reload9 = load i32, ptr %.reg2mem6, align 4
  %69 = sext i32 %.reload9 to i64
  %70 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %69
  %71 = getelementptr i8, ptr %68, i64 %70
  %72 = load i8, ptr %71, align 1
  %73 = load ptr, ptr %37, align 8
  %.reload8 = load i32, ptr %.reg2mem6, align 4
  %74 = sext i32 %.reload8 to i64
  %75 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %74
  %76 = getelementptr i8, ptr %73, i64 %75
  store i8 %72, ptr %76, align 1
  %.reload7 = load i32, ptr %.reg2mem6, align 4
  %77 = add i32 %.reload7, 1
  store i32 %77, ptr %.reg2mem1, align 4
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem15, align 4
  br label %79

78:                                               ; preds = %44
  store i32 poison, ptr %.reg2mem15, align 4
  br label %79

79:                                               ; preds = %78, %56
  %.reload16 = load i32, ptr %.reg2mem15, align 4
  store i32 %.reload16, ptr %.reg2mem, align 4
  br label %80

80:                                               ; preds = %79
  %.reload4 = load i1, ptr %.reg2mem3, align 1
  br i1 %.reload4, label %._crit_edge, label %81

._crit_edge:                                      ; preds = %80
  %.reload = load i32, ptr %.reg2mem, align 4
  store i32 %.reload, ptr %.reg2mem17, align 4
  br label %44

81:                                               ; preds = %80
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %83 = load ptr, ptr %82, align 8
  %84 = load ptr, ptr %7, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 280, ptr %84)
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %87 = load i32, ptr %86, align 4
  %88 = getelementptr ptr, ptr %84, i32 %87
  %89 = getelementptr ptr, ptr %88, i32 1
  %90 = load ptr, ptr %89, align 8
  %91 = getelementptr { ptr, ptr }, ptr %90, i32 0, i32 0
  %92 = load ptr, ptr %91, align 8
  %93 = call i32 %92(ptr %83) #16
  %94 = load ptr, ptr %37, align 8
  %95 = sext i32 %93 to i64
  %96 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %95
  %97 = getelementptr i8, ptr %94, i64 %96
  store i8 0, ptr %97, align 1
  %98 = getelementptr { ptr }, ptr %37, i32 0, i32 0
  %99 = load ptr, ptr %98, align 8
  %100 = insertvalue { ptr } undef, ptr %99, 0
  ret { ptr } %100
}

define { ptr, ptr, ptr, i32 } @String_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @String)
  %19 = alloca [1 x ptr], align 8
  store ptr @StringIterator, ptr %19, align 8
  %20 = load ptr, ptr %19, align 8
  %21 = getelementptr ptr, ptr %20, i32 6
  %22 = load ptr, ptr %21, align 8
  %23 = call { i64, i64 } @size_wrapper(ptr %22, ptr %19)
  %24 = extractvalue { i64, i64 } %23, 0
  %25 = call ptr @bump_malloc(i64 %24)
  %26 = alloca { ptr, ptr, ptr, i32 }, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  store ptr @StringIterator, ptr %26, align 8
  store ptr %25, ptr %27, align 8
  store i32 9, ptr %28, align 4
  %29 = call ptr @llvm.invariant.start.p0(i64 16, ptr %26)
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %36 = load ptr, ptr %34, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %42 = load i32, ptr %40, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %30, ptr @String)
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %44 = load ptr, ptr %43, align 8
  %45 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %44, 0
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %47 = load ptr, ptr %46, align 8
  %48 = insertvalue { ptr, ptr, ptr, i32 } %45, ptr %47, 1
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %50 = load ptr, ptr %49, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } %48, ptr %50, 2
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %53 = load i32, ptr %52, align 4
  %54 = insertvalue { ptr, ptr, ptr, i32 } %51, i32 %53, 3
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %56 = load ptr, ptr %55, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %56, 0
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } %57, ptr %59, 1
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %62 = load ptr, ptr %61, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr %62, 2
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %65 = load i32, ptr %64, align 4
  %66 = insertvalue { ptr, ptr, ptr, i32 } %63, i32 %65, 3
  %67 = alloca [1 x ptr], align 8
  %68 = getelementptr [1 x ptr], ptr %67, i32 0, i32 0
  store ptr @_parameterization_String, ptr %68, align 8
  %69 = call ptr @llvm.invariant.start.p0(i64 1, ptr %67)
  %70 = call ptr @llvm.invariant.start.p0(i64 48, ptr %56)
  %71 = getelementptr ptr, ptr %56, i32 %65
  %72 = getelementptr ptr, ptr %71, i32 2
  %73 = load ptr, ptr %72, align 8
  %74 = alloca { ptr }, align 8
  %75 = getelementptr { ptr }, ptr %74, i32 0, i32 0
  store ptr %44, ptr %75, align 8
  %76 = call ptr @behavior_wrapper(ptr %73, { ptr, ptr, ptr, i32 } %66, ptr %74)
  call void %76({ ptr, ptr, ptr, i32 } %66, { ptr, ptr, ptr, i32 } %66, ptr %67, { ptr, ptr, ptr, i32 } %54)
  %77 = alloca { ptr, ptr, ptr, i32 }, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 0
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 1
  %83 = load ptr, ptr %81, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 2
  %86 = load ptr, ptr %84, align 8
  store ptr %86, ptr %85, align 8
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 3
  %89 = load i32, ptr %87, align 4
  store i32 %89, ptr %88, align 4
  call void @set_offset(ptr %77, ptr @Iterator)
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 0
  %91 = load ptr, ptr %90, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %91, 0
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 1
  %94 = load ptr, ptr %93, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %94, 1
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 2
  %97 = load ptr, ptr %96, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %97, 2
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 3
  %100 = load i32, ptr %99, align 4
  %101 = insertvalue { ptr, ptr, ptr, i32 } %98, i32 %100, 3
  ret { ptr, ptr, ptr, i32 } %101
}

define { ptr, ptr, ptr, i32 } @String_repr_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @String)
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = load i32, ptr %29, align 4
  store i32 %31, ptr %30, align 4
  call void @set_offset(ptr %19, ptr @String)
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %33, 0
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %36, 1
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %39 = load ptr, ptr %38, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %39, 2
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %42 = load i32, ptr %41, align 4
  %43 = insertvalue { ptr, ptr, ptr, i32 } %40, i32 %42, 3
  ret { ptr, ptr, ptr, i32 } %43
}

define { i64, i64 } @_size_StringIterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %10
  %12 = urem i64 %11, %5
  %13 = icmp eq i64 %12, 0
  %14 = sub i64 %5, %12
  %15 = select i1 %13, i64 0, i64 %14
  %16 = add i64 %11, %15
  %17 = insertvalue { i64, i64 } undef, i64 %16, 0
  %18 = insertvalue { i64, i64 } %17, i64 %5, 1
  ret { i64, i64 } %18
}

define ptr @StringIterator_B_init_strString({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [6 x ptr], ptr %15, i32 0, i32 4
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @StringIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [6 x ptr], ptr %4, i32 0, i32 5
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @StringIterator_init_strString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @StringIterator)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 16, ptr %20)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %34 = load i32, ptr %32, align 4
  store i32 %34, ptr %33, align 4
  call void @set_offset(ptr %22, ptr @String)
  %35 = alloca { ptr, ptr, ptr, i32 }, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %38 = load ptr, ptr %36, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %41 = load ptr, ptr %39, align 8
  store ptr %41, ptr %40, align 8
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %44 = load ptr, ptr %42, align 8
  store ptr %44, ptr %43, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %47 = load i32, ptr %45, align 4
  store i32 %47, ptr %46, align 4
  call void @set_offset(ptr %35, ptr @String)
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = load ptr, ptr %7, align 8
  %51 = call ptr @llvm.invariant.start.p0(i64 48, ptr %50)
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %53 = load i32, ptr %52, align 4
  %54 = getelementptr ptr, ptr %50, i32 %53
  %55 = load ptr, ptr %54, align 8
  %56 = getelementptr { ptr, ptr }, ptr %55, i32 0, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %59 = load ptr, ptr %58, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %59, 0
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %62 = load ptr, ptr %61, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr %62, 1
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %65 = load ptr, ptr %64, align 8
  %66 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %65, 2
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %68 = load i32, ptr %67, align 4
  %69 = insertvalue { ptr, ptr, ptr, i32 } %66, i32 %68, 3
  call void %57(ptr %49, { ptr, ptr, ptr, i32 } %69) #15
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %71 = load ptr, ptr %70, align 8
  %72 = load ptr, ptr %7, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 48, ptr %72)
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %75 = load i32, ptr %74, align 4
  %76 = getelementptr ptr, ptr %72, i32 %75
  %77 = getelementptr ptr, ptr %76, i32 1
  %78 = load ptr, ptr %77, align 8
  %79 = getelementptr { ptr, ptr }, ptr %78, i32 0, i32 1
  %80 = load ptr, ptr %79, align 8
  call void %80(ptr %71, i32 0) #15
  ret void
}

define { ptr, i160 } @StringIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = alloca [0 x ptr], align 8
  %6 = alloca {}, align 8
  %7 = alloca ptr, align 8
  %8 = alloca [1 x ptr], align 8
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %11 = alloca [0 x ptr], align 8
  %12 = alloca {}, align 8
  %13 = alloca ptr, align 8
  %14 = alloca [1 x ptr], align 8
  %15 = alloca { ptr }, align 8
  %16 = alloca i160, align 8
  %17 = alloca ptr, align 8
  %18 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %18, align 8
  %19 = call ptr @llvm.invariant.start.p0(i64 16, ptr %18)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = load i32, ptr %30, align 4
  store i32 %32, ptr %31, align 4
  call void @set_offset(ptr %20, ptr @StringIterator)
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %34 = load ptr, ptr %33, align 8
  %35 = load ptr, ptr %20, align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 48, ptr %35)
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %38 = load i32, ptr %37, align 4
  %39 = getelementptr ptr, ptr %35, i32 %38
  %40 = getelementptr ptr, ptr %39, i32 1
  %41 = load ptr, ptr %40, align 8
  %42 = getelementptr { ptr, ptr }, ptr %41, i32 0, i32 0
  %43 = load ptr, ptr %42, align 8
  %44 = call i32 %43(ptr %34) #16
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %46 = load ptr, ptr %45, align 8
  %47 = load ptr, ptr %20, align 8
  %48 = call ptr @llvm.invariant.start.p0(i64 48, ptr %47)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %50 = load i32, ptr %49, align 4
  %51 = getelementptr ptr, ptr %47, i32 %50
  %52 = load ptr, ptr %51, align 8
  %53 = getelementptr { ptr, ptr }, ptr %52, i32 0, i32 0
  %54 = load ptr, ptr %53, align 8
  %55 = call { ptr, ptr, ptr, i32 } %54(ptr %46) #16
  %56 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %55, ptr %56, align 8
  %57 = call ptr @llvm.invariant.start.p0(i64 16, ptr %56)
  call void @assume_offset(ptr %56, ptr @String)
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 0
  %59 = load ptr, ptr %58, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %59, 0
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 1
  %62 = load ptr, ptr %61, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr %62, 1
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 2
  %65 = load ptr, ptr %64, align 8
  %66 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %65, 2
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 3
  %68 = load i32, ptr %67, align 4
  %69 = insertvalue { ptr, ptr, ptr, i32 } %66, i32 %68, 3
  %70 = alloca [0 x ptr], align 8
  %71 = call ptr @llvm.invariant.start.p0(i64 0, ptr %70)
  %72 = call ptr @llvm.invariant.start.p0(i64 280, ptr %59)
  %73 = getelementptr ptr, ptr %59, i32 %68
  %74 = getelementptr ptr, ptr %73, i32 5
  %75 = load ptr, ptr %74, align 8
  %76 = alloca {}, align 8
  %77 = call ptr @behavior_wrapper(ptr %75, { ptr, ptr, ptr, i32 } %69, ptr %76)
  %78 = call i32 %77({ ptr, ptr, ptr, i32 } %69, { ptr, ptr, ptr, i32 } %69, ptr %70)
  %79 = icmp slt i32 %44, %78
  br i1 %79, label %80, label %232

80:                                               ; preds = %3
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %82 = load ptr, ptr %81, align 8
  %83 = load ptr, ptr %20, align 8
  %84 = call ptr @llvm.invariant.start.p0(i64 48, ptr %83)
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %86 = load i32, ptr %85, align 4
  %87 = getelementptr ptr, ptr %83, i32 %86
  %88 = getelementptr ptr, ptr %87, i32 1
  %89 = load ptr, ptr %88, align 8
  %90 = getelementptr { ptr, ptr }, ptr %89, i32 0, i32 0
  %91 = load ptr, ptr %90, align 8
  %92 = call i32 %91(ptr %82) #16
  %93 = add i32 %92, 1
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %95 = load ptr, ptr %94, align 8
  %96 = load ptr, ptr %20, align 8
  %97 = call ptr @llvm.invariant.start.p0(i64 48, ptr %96)
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %99 = load i32, ptr %98, align 4
  %100 = getelementptr ptr, ptr %96, i32 %99
  %101 = getelementptr ptr, ptr %100, i32 1
  %102 = load ptr, ptr %101, align 8
  %103 = getelementptr { ptr, ptr }, ptr %102, i32 0, i32 1
  %104 = load ptr, ptr %103, align 8
  call void %104(ptr %95, i32 %93) #15
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %106 = load ptr, ptr %105, align 8
  %107 = load ptr, ptr %20, align 8
  %108 = call ptr @llvm.invariant.start.p0(i64 48, ptr %107)
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %110 = load i32, ptr %109, align 4
  %111 = getelementptr ptr, ptr %107, i32 %110
  %112 = load ptr, ptr %111, align 8
  %113 = getelementptr { ptr, ptr }, ptr %112, i32 0, i32 0
  %114 = load ptr, ptr %113, align 8
  %115 = call { ptr, ptr, ptr, i32 } %114(ptr %106) #16
  store { ptr, ptr, ptr, i32 } %115, ptr %4, align 8
  %116 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  call void @assume_offset(ptr %4, ptr @String)
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %118 = load ptr, ptr %117, align 8
  %119 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %118, 0
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %121 = load ptr, ptr %120, align 8
  %122 = insertvalue { ptr, ptr, ptr, i32 } %119, ptr %121, 1
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %124 = load ptr, ptr %123, align 8
  %125 = insertvalue { ptr, ptr, ptr, i32 } %122, ptr %124, 2
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %127 = load i32, ptr %126, align 4
  %128 = insertvalue { ptr, ptr, ptr, i32 } %125, i32 %127, 3
  %129 = call ptr @llvm.invariant.start.p0(i64 0, ptr %5)
  %130 = call ptr @llvm.invariant.start.p0(i64 280, ptr %118)
  %131 = getelementptr ptr, ptr %118, i32 %127
  %132 = getelementptr ptr, ptr %131, i32 7
  %133 = load ptr, ptr %132, align 8
  %134 = call ptr @behavior_wrapper(ptr %133, { ptr, ptr, ptr, i32 } %128, ptr %6)
  %135 = call { ptr } %134({ ptr, ptr, ptr, i32 } %128, { ptr, ptr, ptr, i32 } %128, ptr %5)
  store { ptr } %135, ptr %7, align 8
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %137 = load ptr, ptr %136, align 8
  %138 = load ptr, ptr %20, align 8
  %139 = call ptr @llvm.invariant.start.p0(i64 48, ptr %138)
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %141 = load i32, ptr %140, align 4
  %142 = getelementptr ptr, ptr %138, i32 %141
  %143 = getelementptr ptr, ptr %142, i32 1
  %144 = load ptr, ptr %143, align 8
  %145 = getelementptr { ptr, ptr }, ptr %144, i32 0, i32 0
  %146 = load ptr, ptr %145, align 8
  %147 = call i32 %146(ptr %137) #16
  store ptr @Character, ptr %8, align 8
  %148 = load ptr, ptr %8, align 8
  %149 = getelementptr ptr, ptr %148, i32 6
  %150 = load ptr, ptr %149, align 8
  %151 = call { i64, i64 } @size_wrapper(ptr %150, ptr %8)
  %152 = extractvalue { i64, i64 } %151, 0
  %153 = call ptr @bump_malloc(i64 %152)
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  store ptr @Character, ptr %9, align 8
  store ptr %153, ptr %154, align 8
  store i32 9, ptr %155, align 4
  %156 = call ptr @llvm.invariant.start.p0(i64 16, ptr %9)
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %158 = load ptr, ptr %157, align 8
  %159 = load ptr, ptr %20, align 8
  %160 = call ptr @llvm.invariant.start.p0(i64 48, ptr %159)
  %161 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %162 = load i32, ptr %161, align 4
  %163 = getelementptr ptr, ptr %159, i32 %162
  %164 = load ptr, ptr %163, align 8
  %165 = getelementptr { ptr, ptr }, ptr %164, i32 0, i32 0
  %166 = load ptr, ptr %165, align 8
  %167 = call { ptr, ptr, ptr, i32 } %166(ptr %158) #16
  store { ptr, ptr, ptr, i32 } %167, ptr %10, align 8
  %168 = call ptr @llvm.invariant.start.p0(i64 16, ptr %10)
  call void @assume_offset(ptr %10, ptr @String)
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 0
  %170 = load ptr, ptr %169, align 8
  %171 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %170, 0
  %172 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %173 = load ptr, ptr %172, align 8
  %174 = insertvalue { ptr, ptr, ptr, i32 } %171, ptr %173, 1
  %175 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 2
  %176 = load ptr, ptr %175, align 8
  %177 = insertvalue { ptr, ptr, ptr, i32 } %174, ptr %176, 2
  %178 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  %179 = load i32, ptr %178, align 4
  %180 = insertvalue { ptr, ptr, ptr, i32 } %177, i32 %179, 3
  %181 = call ptr @llvm.invariant.start.p0(i64 0, ptr %11)
  %182 = call ptr @llvm.invariant.start.p0(i64 280, ptr %170)
  %183 = getelementptr ptr, ptr %170, i32 %179
  %184 = getelementptr ptr, ptr %183, i32 7
  %185 = load ptr, ptr %184, align 8
  %186 = call ptr @behavior_wrapper(ptr %185, { ptr, ptr, ptr, i32 } %180, ptr %12)
  %187 = call { ptr } %186({ ptr, ptr, ptr, i32 } %180, { ptr, ptr, ptr, i32 } %180, ptr %11)
  store { ptr } %187, ptr %13, align 8
  %188 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %189 = load ptr, ptr %188, align 8
  %190 = load ptr, ptr %20, align 8
  %191 = call ptr @llvm.invariant.start.p0(i64 48, ptr %190)
  %192 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %193 = load i32, ptr %192, align 4
  %194 = getelementptr ptr, ptr %190, i32 %193
  %195 = getelementptr ptr, ptr %194, i32 1
  %196 = load ptr, ptr %195, align 8
  %197 = getelementptr { ptr, ptr }, ptr %196, i32 0, i32 0
  %198 = load ptr, ptr %197, align 8
  %199 = call i32 %198(ptr %189) #16
  %200 = sub i32 %199, 1
  %201 = load ptr, ptr %13, align 8
  %202 = sext i32 %200 to i64
  %203 = mul i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %202
  %204 = getelementptr i8, ptr %201, i64 %203
  %205 = load i8, ptr %204, align 1
  %206 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %207 = load ptr, ptr %206, align 8
  %208 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %207, 0
  %209 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %210 = load ptr, ptr %209, align 8
  %211 = insertvalue { ptr, ptr, ptr, i32 } %208, ptr %210, 1
  %212 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %213 = load ptr, ptr %212, align 8
  %214 = insertvalue { ptr, ptr, ptr, i32 } %211, ptr %213, 2
  %215 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %216 = load i32, ptr %215, align 4
  %217 = insertvalue { ptr, ptr, ptr, i32 } %214, i32 %216, 3
  %218 = getelementptr [1 x ptr], ptr %14, i32 0, i32 0
  store ptr @_parameterization_Ptri8, ptr %218, align 8
  %219 = call ptr @llvm.invariant.start.p0(i64 1, ptr %14)
  %220 = call ptr @llvm.invariant.start.p0(i64 40, ptr %207)
  %221 = getelementptr ptr, ptr %207, i32 %216
  %222 = getelementptr ptr, ptr %221, i32 2
  %223 = load ptr, ptr %222, align 8
  %224 = getelementptr { ptr }, ptr %15, i32 0, i32 0
  store ptr @i8_typ, ptr %224, align 8
  %225 = call ptr @behavior_wrapper(ptr %223, { ptr, ptr, ptr, i32 } %217, ptr %15)
  call void %225({ ptr, ptr, ptr, i32 } %217, { ptr, ptr, ptr, i32 } %217, ptr %14, i8 %205)
  %226 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 0
  %227 = load ptr, ptr %226, align 8
  %228 = insertvalue { ptr, i160 } undef, ptr %227, 0
  %229 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 1
  %230 = load i160, ptr %229, align 4
  %231 = insertvalue { ptr, i160 } %228, i160 %230, 1
  store { ptr, i160 } %231, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem5, align 8
  br label %237

232:                                              ; preds = %3
  store [0 x i8] undef, ptr %16, align 1
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %17, align 4
  %233 = load ptr, ptr %17, align 8
  %234 = insertvalue { ptr, i160 } undef, ptr %233, 0
  %235 = load i160, ptr %16, align 4
  %236 = insertvalue { ptr, i160 } %234, i160 %235, 1
  store { ptr, i160 } %236, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem5, align 8
  br label %237

237:                                              ; preds = %232, %80
  %.reload6 = load { ptr, i160 }, ptr %.reg2mem5, align 8
  store { ptr, i160 } %.reload6, ptr %.reg2mem, align 8
  br label %238

238:                                              ; preds = %237
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  ret { ptr, i160 } %.reload
}

define { i64, i64 } @_size_Character(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i8 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i8 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define ptr @Character_B_byte_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [5 x ptr], ptr %4, i32 0, i32 3
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Character_B_init_bytePtri8({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 2582149688529881115, i64 ptrtoint (ptr @i8_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [5 x ptr], ptr %15, i32 0, i32 4
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define i8 @Character_byte_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Character)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 40, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 0
  %28 = load ptr, ptr %27, align 8
  %29 = call i8 %28(ptr %20) #16
  ret i8 %29
}

define void @Character_init_bytePtri8({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i8 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Character)
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %21 = load ptr, ptr %20, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 40, ptr %22)
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %25 = load i32, ptr %24, align 4
  %26 = getelementptr ptr, ptr %22, i32 %25
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 1
  %29 = load ptr, ptr %28, align 8
  call void %29(ptr %21, i8 %3) #15
  ret void
}

define i8 @Character_getter_byte(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = load i8, ptr %2, align 1
  ret i8 %3
}

define void @Character_setter_byte(ptr %0, i8 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  store i8 %1, ptr %3, align 1
  ret void
}

define i32 @StringIterator_getter_index(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = load i32, ptr %7, align 4
  ret i32 %8
}

define void @StringIterator_setter_index(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  store i32 %1, ptr %8, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @StringIterator_getter_str(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @StringIterator_setter_str(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  ret void
}

define i32 @String_getter_capacity(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = load i32, ptr %13, align 4
  ret i32 %14
}

define void @String_setter_capacity(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  store i32 %1, ptr %14, align 4
  ret void
}

define i32 @String_getter_length(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = load i32, ptr %7, align 4
  ret i32 %8
}

define void @String_setter_length(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  store i32 %1, ptr %8, align 4
  ret void
}

define { ptr } @String_getter_bytes(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = getelementptr { ptr }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr } undef, ptr %4, 0
  ret { ptr } %5
}

define void @String_setter_bytes(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca ptr, align 8
  store { ptr } %1, ptr %4, align 8
  %5 = getelementptr { ptr }, ptr %3, i32 0, i32 0
  %6 = load ptr, ptr %4, align 8
  store ptr %6, ptr %5, align 8
  ret void
}

define { i64, i64 } @_size_Exception(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @Exception_B_init_messageString({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [13 x ptr], ptr %15, i32 0, i32 8
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Exception_B_init_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [13 x ptr], ptr %4, i32 0, i32 9
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Exception_B_set_info_line_numberPtri32_file_nameString({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [13 x ptr], ptr %26, i32 0, i32 10
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @Exception_B_report_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [13 x ptr], ptr %4, i32 0, i32 11
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Exception_B_print_message_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [13 x ptr], ptr %4, i32 0, i32 12
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @Exception_init_messageString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Exception)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 16, ptr %20)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %34 = load i32, ptr %32, align 4
  store i32 %34, ptr %33, align 4
  call void @set_offset(ptr %22, ptr @String)
  %35 = alloca { ptr, ptr, ptr, i32 }, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %38 = load ptr, ptr %36, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %41 = load ptr, ptr %39, align 8
  store ptr %41, ptr %40, align 8
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %44 = load ptr, ptr %42, align 8
  store ptr %44, ptr %43, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %47 = load i32, ptr %45, align 4
  store i32 %47, ptr %46, align 4
  call void @set_offset(ptr %35, ptr @String)
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = load ptr, ptr %7, align 8
  %51 = call ptr @llvm.invariant.start.p0(i64 104, ptr %50)
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %53 = load i32, ptr %52, align 4
  %54 = getelementptr ptr, ptr %50, i32 %53
  %55 = getelementptr ptr, ptr %54, i32 2
  %56 = load ptr, ptr %55, align 8
  %57 = getelementptr { ptr, ptr }, ptr %56, i32 0, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %63 = load ptr, ptr %62, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %63, 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %66 = load ptr, ptr %65, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %66, 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %69 = load i32, ptr %68, align 4
  %70 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %69, 3
  call void %58(ptr %49, { ptr, ptr, ptr, i32 } %70) #15
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %72 = load ptr, ptr %71, align 8
  %73 = load ptr, ptr %7, align 8
  %74 = call ptr @llvm.invariant.start.p0(i64 104, ptr %73)
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %76 = load i32, ptr %75, align 4
  %77 = getelementptr ptr, ptr %73, i32 %76
  %78 = load ptr, ptr %77, align 8
  %79 = getelementptr { ptr, ptr }, ptr %78, i32 0, i32 1
  %80 = load ptr, ptr %79, align 8
  call void %80(ptr %72, i32 0) #15
  %81 = alloca ptr, align 8
  %82 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64))
  store ptr %82, ptr %81, align 8
  %83 = alloca { ptr }, align 8
  %84 = getelementptr { ptr }, ptr %81, i32 0, i32 0
  %85 = getelementptr { ptr }, ptr %83, i32 0, i32 0
  %86 = load ptr, ptr %84, align 8
  store ptr %86, ptr %85, align 8
  %87 = call ptr @llvm.invariant.start.p0(i64 16, ptr %83)
  %88 = load ptr, ptr %83, align 8
  %89 = load [0 x i8], ptr @ncamc_, align 1
  store [0 x i8] %89, ptr %88, align 1
  %90 = alloca [1 x ptr], align 8
  store ptr @String, ptr %90, align 8
  %91 = load ptr, ptr %90, align 8
  %92 = getelementptr ptr, ptr %91, i32 6
  %93 = load ptr, ptr %92, align 8
  %94 = call { i64, i64 } @size_wrapper(ptr %93, ptr %90)
  %95 = extractvalue { i64, i64 } %94, 0
  %96 = call ptr @bump_malloc(i64 %95)
  %97 = alloca { ptr, ptr, ptr, i32 }, align 8
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  store ptr @String, ptr %97, align 8
  store ptr %96, ptr %98, align 8
  store i32 9, ptr %99, align 4
  %100 = call ptr @llvm.invariant.start.p0(i64 16, ptr %97)
  %101 = getelementptr { ptr }, ptr %83, i32 0, i32 0
  %102 = load ptr, ptr %101, align 8
  %103 = insertvalue { ptr } undef, ptr %102, 0
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 0
  %105 = load ptr, ptr %104, align 8
  %106 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %105, 0
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %108 = load ptr, ptr %107, align 8
  %109 = insertvalue { ptr, ptr, ptr, i32 } %106, ptr %108, 1
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 2
  %111 = load ptr, ptr %110, align 8
  %112 = insertvalue { ptr, ptr, ptr, i32 } %109, ptr %111, 2
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  %114 = load i32, ptr %113, align 4
  %115 = insertvalue { ptr, ptr, ptr, i32 } %112, i32 %114, 3
  %116 = alloca [3 x ptr], align 8
  %117 = getelementptr [3 x ptr], ptr %116, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %117, align 8
  %118 = getelementptr [3 x ptr], ptr %116, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %118, align 8
  %119 = getelementptr [3 x ptr], ptr %116, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %119, align 8
  %120 = call ptr @llvm.invariant.start.p0(i64 9, ptr %116)
  %121 = call ptr @llvm.invariant.start.p0(i64 280, ptr %105)
  %122 = getelementptr ptr, ptr %105, i32 %114
  %123 = getelementptr ptr, ptr %122, i32 4
  %124 = load ptr, ptr %123, align 8
  %125 = alloca { ptr, ptr, ptr }, align 8
  %126 = getelementptr { ptr, ptr, ptr }, ptr %125, i32 0, i32 0
  store ptr @buffer_typ, ptr %126, align 8
  %127 = getelementptr { ptr, ptr, ptr }, ptr %125, i32 0, i32 1
  store ptr @i32_typ, ptr %127, align 8
  %128 = getelementptr { ptr, ptr, ptr }, ptr %125, i32 0, i32 2
  store ptr @i32_typ, ptr %128, align 8
  %129 = call ptr @behavior_wrapper(ptr %124, { ptr, ptr, ptr, i32 } %115, ptr %125)
  call void %129({ ptr, ptr, ptr, i32 } %115, { ptr, ptr, ptr, i32 } %115, ptr %116, { ptr } %103, i32 0, i32 1)
  %130 = alloca { ptr, ptr, ptr, i32 }, align 8
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 0
  %132 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 0
  %133 = load ptr, ptr %131, align 8
  store ptr %133, ptr %132, align 8
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 1
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 1
  %136 = load ptr, ptr %134, align 8
  store ptr %136, ptr %135, align 8
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 2
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 2
  %139 = load ptr, ptr %137, align 8
  store ptr %139, ptr %138, align 8
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %97, i32 0, i32 3
  %141 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 3
  %142 = load i32, ptr %140, align 4
  store i32 %142, ptr %141, align 4
  call void @set_offset(ptr %130, ptr @String)
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %144 = load ptr, ptr %143, align 8
  %145 = load ptr, ptr %7, align 8
  %146 = call ptr @llvm.invariant.start.p0(i64 104, ptr %145)
  %147 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %148 = load i32, ptr %147, align 4
  %149 = getelementptr ptr, ptr %145, i32 %148
  %150 = getelementptr ptr, ptr %149, i32 1
  %151 = load ptr, ptr %150, align 8
  %152 = getelementptr { ptr, ptr }, ptr %151, i32 0, i32 1
  %153 = load ptr, ptr %152, align 8
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 0
  %155 = load ptr, ptr %154, align 8
  %156 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %155, 0
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 1
  %158 = load ptr, ptr %157, align 8
  %159 = insertvalue { ptr, ptr, ptr, i32 } %156, ptr %158, 1
  %160 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 2
  %161 = load ptr, ptr %160, align 8
  %162 = insertvalue { ptr, ptr, ptr, i32 } %159, ptr %161, 2
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 3
  %164 = load i32, ptr %163, align 4
  %165 = insertvalue { ptr, ptr, ptr, i32 } %162, i32 %164, 3
  call void %153(ptr %144, { ptr, ptr, ptr, i32 } %165) #15
  ret void
}

define void @Exception_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Exception)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 104, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 1
  %28 = load ptr, ptr %27, align 8
  call void %28(ptr %20, i32 0) #15
  %29 = alloca ptr, align 8
  %30 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 7))
  store ptr %30, ptr %29, align 8
  %31 = alloca { ptr }, align 8
  %32 = getelementptr { ptr }, ptr %29, i32 0, i32 0
  %33 = getelementptr { ptr }, ptr %31, i32 0, i32 0
  %34 = load ptr, ptr %32, align 8
  store ptr %34, ptr %33, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 16, ptr %31)
  %36 = load ptr, ptr %31, align 8
  %37 = load [6 x i8], ptr @jrneo_None, align 1
  store [6 x i8] %37, ptr %36, align 1
  %38 = alloca [1 x ptr], align 8
  store ptr @String, ptr %38, align 8
  %39 = load ptr, ptr %38, align 8
  %40 = getelementptr ptr, ptr %39, i32 6
  %41 = load ptr, ptr %40, align 8
  %42 = call { i64, i64 } @size_wrapper(ptr %41, ptr %38)
  %43 = extractvalue { i64, i64 } %42, 0
  %44 = call ptr @bump_malloc(i64 %43)
  %45 = alloca { ptr, ptr, ptr, i32 }, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  store ptr @String, ptr %45, align 8
  store ptr %44, ptr %46, align 8
  store i32 9, ptr %47, align 4
  %48 = call ptr @llvm.invariant.start.p0(i64 16, ptr %45)
  %49 = getelementptr { ptr }, ptr %31, i32 0, i32 0
  %50 = load ptr, ptr %49, align 8
  %51 = insertvalue { ptr } undef, ptr %50, 0
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %53 = load ptr, ptr %52, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %53, 0
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %56 = load ptr, ptr %55, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %56, 1
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %59 = load ptr, ptr %58, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } %57, ptr %59, 2
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %62 = load i32, ptr %61, align 4
  %63 = insertvalue { ptr, ptr, ptr, i32 } %60, i32 %62, 3
  %64 = alloca [3 x ptr], align 8
  %65 = getelementptr [3 x ptr], ptr %64, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %65, align 8
  %66 = getelementptr [3 x ptr], ptr %64, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %66, align 8
  %67 = getelementptr [3 x ptr], ptr %64, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %67, align 8
  %68 = call ptr @llvm.invariant.start.p0(i64 9, ptr %64)
  %69 = call ptr @llvm.invariant.start.p0(i64 280, ptr %53)
  %70 = getelementptr ptr, ptr %53, i32 %62
  %71 = getelementptr ptr, ptr %70, i32 4
  %72 = load ptr, ptr %71, align 8
  %73 = alloca { ptr, ptr, ptr }, align 8
  %74 = getelementptr { ptr, ptr, ptr }, ptr %73, i32 0, i32 0
  store ptr @buffer_typ, ptr %74, align 8
  %75 = getelementptr { ptr, ptr, ptr }, ptr %73, i32 0, i32 1
  store ptr @i32_typ, ptr %75, align 8
  %76 = getelementptr { ptr, ptr, ptr }, ptr %73, i32 0, i32 2
  store ptr @i32_typ, ptr %76, align 8
  %77 = call ptr @behavior_wrapper(ptr %72, { ptr, ptr, ptr, i32 } %63, ptr %73)
  call void %77({ ptr, ptr, ptr, i32 } %63, { ptr, ptr, ptr, i32 } %63, ptr %64, { ptr } %51, i32 6, i32 7)
  %78 = alloca { ptr, ptr, ptr, i32 }, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 0
  %81 = load ptr, ptr %79, align 8
  store ptr %81, ptr %80, align 8
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 1
  %84 = load ptr, ptr %82, align 8
  store ptr %84, ptr %83, align 8
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 2
  %87 = load ptr, ptr %85, align 8
  store ptr %87, ptr %86, align 8
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 3
  %90 = load i32, ptr %88, align 4
  store i32 %90, ptr %89, align 4
  call void @set_offset(ptr %78, ptr @String)
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %92 = load ptr, ptr %91, align 8
  %93 = load ptr, ptr %6, align 8
  %94 = call ptr @llvm.invariant.start.p0(i64 104, ptr %93)
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %96 = load i32, ptr %95, align 4
  %97 = getelementptr ptr, ptr %93, i32 %96
  %98 = getelementptr ptr, ptr %97, i32 2
  %99 = load ptr, ptr %98, align 8
  %100 = getelementptr { ptr, ptr }, ptr %99, i32 0, i32 1
  %101 = load ptr, ptr %100, align 8
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 0
  %103 = load ptr, ptr %102, align 8
  %104 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %103, 0
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 1
  %106 = load ptr, ptr %105, align 8
  %107 = insertvalue { ptr, ptr, ptr, i32 } %104, ptr %106, 1
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 2
  %109 = load ptr, ptr %108, align 8
  %110 = insertvalue { ptr, ptr, ptr, i32 } %107, ptr %109, 2
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 3
  %112 = load i32, ptr %111, align 4
  %113 = insertvalue { ptr, ptr, ptr, i32 } %110, i32 %112, 3
  call void %101(ptr %92, { ptr, ptr, ptr, i32 } %113) #15
  %114 = alloca ptr, align 8
  %115 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64))
  store ptr %115, ptr %114, align 8
  %116 = alloca { ptr }, align 8
  %117 = getelementptr { ptr }, ptr %114, i32 0, i32 0
  %118 = getelementptr { ptr }, ptr %116, i32 0, i32 0
  %119 = load ptr, ptr %117, align 8
  store ptr %119, ptr %118, align 8
  %120 = call ptr @llvm.invariant.start.p0(i64 16, ptr %116)
  %121 = load ptr, ptr %116, align 8
  %122 = load [0 x i8], ptr @ntkeh_, align 1
  store [0 x i8] %122, ptr %121, align 1
  %123 = alloca [1 x ptr], align 8
  store ptr @String, ptr %123, align 8
  %124 = load ptr, ptr %123, align 8
  %125 = getelementptr ptr, ptr %124, i32 6
  %126 = load ptr, ptr %125, align 8
  %127 = call { i64, i64 } @size_wrapper(ptr %126, ptr %123)
  %128 = extractvalue { i64, i64 } %127, 0
  %129 = call ptr @bump_malloc(i64 %128)
  %130 = alloca { ptr, ptr, ptr, i32 }, align 8
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 1
  %132 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 3
  store ptr @String, ptr %130, align 8
  store ptr %129, ptr %131, align 8
  store i32 9, ptr %132, align 4
  %133 = call ptr @llvm.invariant.start.p0(i64 16, ptr %130)
  %134 = getelementptr { ptr }, ptr %116, i32 0, i32 0
  %135 = load ptr, ptr %134, align 8
  %136 = insertvalue { ptr } undef, ptr %135, 0
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 0
  %138 = load ptr, ptr %137, align 8
  %139 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %138, 0
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 1
  %141 = load ptr, ptr %140, align 8
  %142 = insertvalue { ptr, ptr, ptr, i32 } %139, ptr %141, 1
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 2
  %144 = load ptr, ptr %143, align 8
  %145 = insertvalue { ptr, ptr, ptr, i32 } %142, ptr %144, 2
  %146 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 3
  %147 = load i32, ptr %146, align 4
  %148 = insertvalue { ptr, ptr, ptr, i32 } %145, i32 %147, 3
  %149 = alloca [3 x ptr], align 8
  %150 = getelementptr [3 x ptr], ptr %149, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %150, align 8
  %151 = getelementptr [3 x ptr], ptr %149, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %151, align 8
  %152 = getelementptr [3 x ptr], ptr %149, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %152, align 8
  %153 = call ptr @llvm.invariant.start.p0(i64 9, ptr %149)
  %154 = call ptr @llvm.invariant.start.p0(i64 280, ptr %138)
  %155 = getelementptr ptr, ptr %138, i32 %147
  %156 = getelementptr ptr, ptr %155, i32 4
  %157 = load ptr, ptr %156, align 8
  %158 = alloca { ptr, ptr, ptr }, align 8
  %159 = getelementptr { ptr, ptr, ptr }, ptr %158, i32 0, i32 0
  store ptr @buffer_typ, ptr %159, align 8
  %160 = getelementptr { ptr, ptr, ptr }, ptr %158, i32 0, i32 1
  store ptr @i32_typ, ptr %160, align 8
  %161 = getelementptr { ptr, ptr, ptr }, ptr %158, i32 0, i32 2
  store ptr @i32_typ, ptr %161, align 8
  %162 = call ptr @behavior_wrapper(ptr %157, { ptr, ptr, ptr, i32 } %148, ptr %158)
  call void %162({ ptr, ptr, ptr, i32 } %148, { ptr, ptr, ptr, i32 } %148, ptr %149, { ptr } %136, i32 0, i32 1)
  %163 = alloca { ptr, ptr, ptr, i32 }, align 8
  %164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 0
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 0
  %166 = load ptr, ptr %164, align 8
  store ptr %166, ptr %165, align 8
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 1
  %168 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 1
  %169 = load ptr, ptr %167, align 8
  store ptr %169, ptr %168, align 8
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 2
  %171 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 2
  %172 = load ptr, ptr %170, align 8
  store ptr %172, ptr %171, align 8
  %173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 3
  %174 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 3
  %175 = load i32, ptr %173, align 4
  store i32 %175, ptr %174, align 4
  call void @set_offset(ptr %163, ptr @String)
  %176 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %177 = load ptr, ptr %176, align 8
  %178 = load ptr, ptr %6, align 8
  %179 = call ptr @llvm.invariant.start.p0(i64 104, ptr %178)
  %180 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %181 = load i32, ptr %180, align 4
  %182 = getelementptr ptr, ptr %178, i32 %181
  %183 = getelementptr ptr, ptr %182, i32 1
  %184 = load ptr, ptr %183, align 8
  %185 = getelementptr { ptr, ptr }, ptr %184, i32 0, i32 1
  %186 = load ptr, ptr %185, align 8
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 0
  %188 = load ptr, ptr %187, align 8
  %189 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %188, 0
  %190 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 1
  %191 = load ptr, ptr %190, align 8
  %192 = insertvalue { ptr, ptr, ptr, i32 } %189, ptr %191, 1
  %193 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 2
  %194 = load ptr, ptr %193, align 8
  %195 = insertvalue { ptr, ptr, ptr, i32 } %192, ptr %194, 2
  %196 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 3
  %197 = load i32, ptr %196, align 4
  %198 = insertvalue { ptr, ptr, ptr, i32 } %195, i32 %197, 3
  call void %186(ptr %177, { ptr, ptr, ptr, i32 } %198) #15
  ret void
}

define void @Exception_set_info_line_numberPtri32_file_nameString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @Exception)
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %22 = load ptr, ptr %21, align 8
  %23 = load ptr, ptr %8, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 104, ptr %23)
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %26 = load i32, ptr %25, align 4
  %27 = getelementptr ptr, ptr %23, i32 %26
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr { ptr, ptr }, ptr %28, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  call void %30(ptr %22, i32 %3) #15
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %31, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 16, ptr %31)
  %33 = alloca { ptr, ptr, ptr, i32 }, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 0
  %36 = load ptr, ptr %34, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 1
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 2
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 3
  %45 = load i32, ptr %43, align 4
  store i32 %45, ptr %44, align 4
  call void @set_offset(ptr %33, ptr @String)
  %46 = alloca { ptr, ptr, ptr, i32 }, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 0
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %49 = load ptr, ptr %47, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 1
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %52 = load ptr, ptr %50, align 8
  store ptr %52, ptr %51, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 2
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %55 = load ptr, ptr %53, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 3
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %58 = load i32, ptr %56, align 4
  store i32 %58, ptr %57, align 4
  call void @set_offset(ptr %46, ptr @String)
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %60 = load ptr, ptr %59, align 8
  %61 = load ptr, ptr %8, align 8
  %62 = call ptr @llvm.invariant.start.p0(i64 104, ptr %61)
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %64 = load i32, ptr %63, align 4
  %65 = getelementptr ptr, ptr %61, i32 %64
  %66 = getelementptr ptr, ptr %65, i32 1
  %67 = load ptr, ptr %66, align 8
  %68 = getelementptr { ptr, ptr }, ptr %67, i32 0, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %71 = load ptr, ptr %70, align 8
  %72 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %71, 0
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %74 = load ptr, ptr %73, align 8
  %75 = insertvalue { ptr, ptr, ptr, i32 } %72, ptr %74, 1
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %77 = load ptr, ptr %76, align 8
  %78 = insertvalue { ptr, ptr, ptr, i32 } %75, ptr %77, 2
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %80 = load i32, ptr %79, align 4
  %81 = insertvalue { ptr, ptr, ptr, i32 } %78, i32 %80, 3
  call void %69(ptr %60, { ptr, ptr, ptr, i32 } %81) #15
  ret void
}

define void @Exception_report_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Exception)
  %19 = alloca ptr, align 8
  %20 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 10))
  store ptr %20, ptr %19, align 8
  %21 = alloca { ptr }, align 8
  %22 = getelementptr { ptr }, ptr %19, i32 0, i32 0
  %23 = getelementptr { ptr }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %26 = load ptr, ptr %21, align 8
  %27 = load [9 x i8], ptr @lylsz_, align 1
  store [9 x i8] %27, ptr %26, align 1
  %28 = alloca [1 x ptr], align 8
  store ptr @String, ptr %28, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr ptr, ptr %29, i32 6
  %31 = load ptr, ptr %30, align 8
  %32 = call { i64, i64 } @size_wrapper(ptr %31, ptr %28)
  %33 = extractvalue { i64, i64 } %32, 0
  %34 = call ptr @bump_malloc(i64 %33)
  %35 = alloca { ptr, ptr, ptr, i32 }, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  store ptr @String, ptr %35, align 8
  store ptr %34, ptr %36, align 8
  store i32 9, ptr %37, align 4
  %38 = call ptr @llvm.invariant.start.p0(i64 16, ptr %35)
  %39 = getelementptr { ptr }, ptr %21, i32 0, i32 0
  %40 = load ptr, ptr %39, align 8
  %41 = insertvalue { ptr } undef, ptr %40, 0
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %43 = load ptr, ptr %42, align 8
  %44 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %43, 0
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %46 = load ptr, ptr %45, align 8
  %47 = insertvalue { ptr, ptr, ptr, i32 } %44, ptr %46, 1
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %49 = load ptr, ptr %48, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } %47, ptr %49, 2
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %52 = load i32, ptr %51, align 4
  %53 = insertvalue { ptr, ptr, ptr, i32 } %50, i32 %52, 3
  %54 = alloca [3 x ptr], align 8
  %55 = getelementptr [3 x ptr], ptr %54, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %55, align 8
  %56 = getelementptr [3 x ptr], ptr %54, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %56, align 8
  %57 = getelementptr [3 x ptr], ptr %54, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %57, align 8
  %58 = call ptr @llvm.invariant.start.p0(i64 9, ptr %54)
  %59 = call ptr @llvm.invariant.start.p0(i64 280, ptr %43)
  %60 = getelementptr ptr, ptr %43, i32 %52
  %61 = getelementptr ptr, ptr %60, i32 4
  %62 = load ptr, ptr %61, align 8
  %63 = alloca { ptr, ptr, ptr }, align 8
  %64 = getelementptr { ptr, ptr, ptr }, ptr %63, i32 0, i32 0
  store ptr @buffer_typ, ptr %64, align 8
  %65 = getelementptr { ptr, ptr, ptr }, ptr %63, i32 0, i32 1
  store ptr @i32_typ, ptr %65, align 8
  %66 = getelementptr { ptr, ptr, ptr }, ptr %63, i32 0, i32 2
  store ptr @i32_typ, ptr %66, align 8
  %67 = call ptr @behavior_wrapper(ptr %62, { ptr, ptr, ptr, i32 } %53, ptr %63)
  call void %67({ ptr, ptr, ptr, i32 } %53, { ptr, ptr, ptr, i32 } %53, ptr %54, { ptr } %41, i32 9, i32 10)
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %69 = load ptr, ptr %68, align 8
  %70 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %69, 0
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %72 = load ptr, ptr %71, align 8
  %73 = insertvalue { ptr, ptr, ptr, i32 } %70, ptr %72, 1
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %75 = load ptr, ptr %74, align 8
  %76 = insertvalue { ptr, ptr, ptr, i32 } %73, ptr %75, 2
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %78 = load i32, ptr %77, align 4
  %79 = insertvalue { ptr, ptr, ptr, i32 } %76, i32 %78, 3
  %80 = alloca [0 x ptr], align 8
  %81 = call ptr @llvm.invariant.start.p0(i64 0, ptr %80)
  %82 = call ptr @llvm.invariant.start.p0(i64 280, ptr %69)
  %83 = getelementptr ptr, ptr %69, i32 %78
  %84 = getelementptr ptr, ptr %83, i32 14
  %85 = load ptr, ptr %84, align 8
  %86 = alloca {}, align 8
  %87 = call ptr @behavior_wrapper(ptr %85, { ptr, ptr, ptr, i32 } %79, ptr %86)
  %88 = call { ptr } %87({ ptr, ptr, ptr, i32 } %79, { ptr, ptr, ptr, i32 } %79, ptr %80)
  %89 = alloca ptr, align 8
  store { ptr } %88, ptr %89, align 8
  %90 = load ptr, ptr %89, align 8
  %91 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %90)
  %92 = alloca ptr, align 8
  %93 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 27))
  store ptr %93, ptr %92, align 8
  %94 = alloca { ptr }, align 8
  %95 = getelementptr { ptr }, ptr %92, i32 0, i32 0
  %96 = getelementptr { ptr }, ptr %94, i32 0, i32 0
  %97 = load ptr, ptr %95, align 8
  store ptr %97, ptr %96, align 8
  %98 = call ptr @llvm.invariant.start.p0(i64 16, ptr %94)
  %99 = load ptr, ptr %94, align 8
  %100 = load [26 x i8], ptr @qnjoc_Exception_thrown_from_file, align 1
  store [26 x i8] %100, ptr %99, align 1
  %101 = alloca [1 x ptr], align 8
  store ptr @String, ptr %101, align 8
  %102 = load ptr, ptr %101, align 8
  %103 = getelementptr ptr, ptr %102, i32 6
  %104 = load ptr, ptr %103, align 8
  %105 = call { i64, i64 } @size_wrapper(ptr %104, ptr %101)
  %106 = extractvalue { i64, i64 } %105, 0
  %107 = call ptr @bump_malloc(i64 %106)
  %108 = alloca { ptr, ptr, ptr, i32 }, align 8
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 1
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 3
  store ptr @String, ptr %108, align 8
  store ptr %107, ptr %109, align 8
  store i32 9, ptr %110, align 4
  %111 = call ptr @llvm.invariant.start.p0(i64 16, ptr %108)
  %112 = getelementptr { ptr }, ptr %94, i32 0, i32 0
  %113 = load ptr, ptr %112, align 8
  %114 = insertvalue { ptr } undef, ptr %113, 0
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 0
  %116 = load ptr, ptr %115, align 8
  %117 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %116, 0
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 1
  %119 = load ptr, ptr %118, align 8
  %120 = insertvalue { ptr, ptr, ptr, i32 } %117, ptr %119, 1
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 2
  %122 = load ptr, ptr %121, align 8
  %123 = insertvalue { ptr, ptr, ptr, i32 } %120, ptr %122, 2
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 3
  %125 = load i32, ptr %124, align 4
  %126 = insertvalue { ptr, ptr, ptr, i32 } %123, i32 %125, 3
  %127 = alloca [3 x ptr], align 8
  %128 = getelementptr [3 x ptr], ptr %127, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %128, align 8
  %129 = getelementptr [3 x ptr], ptr %127, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %129, align 8
  %130 = getelementptr [3 x ptr], ptr %127, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %130, align 8
  %131 = call ptr @llvm.invariant.start.p0(i64 9, ptr %127)
  %132 = call ptr @llvm.invariant.start.p0(i64 280, ptr %116)
  %133 = getelementptr ptr, ptr %116, i32 %125
  %134 = getelementptr ptr, ptr %133, i32 4
  %135 = load ptr, ptr %134, align 8
  %136 = alloca { ptr, ptr, ptr }, align 8
  %137 = getelementptr { ptr, ptr, ptr }, ptr %136, i32 0, i32 0
  store ptr @buffer_typ, ptr %137, align 8
  %138 = getelementptr { ptr, ptr, ptr }, ptr %136, i32 0, i32 1
  store ptr @i32_typ, ptr %138, align 8
  %139 = getelementptr { ptr, ptr, ptr }, ptr %136, i32 0, i32 2
  store ptr @i32_typ, ptr %139, align 8
  %140 = call ptr @behavior_wrapper(ptr %135, { ptr, ptr, ptr, i32 } %126, ptr %136)
  call void %140({ ptr, ptr, ptr, i32 } %126, { ptr, ptr, ptr, i32 } %126, ptr %127, { ptr } %114, i32 26, i32 27)
  %141 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 0
  %142 = load ptr, ptr %141, align 8
  %143 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %142, 0
  %144 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 1
  %145 = load ptr, ptr %144, align 8
  %146 = insertvalue { ptr, ptr, ptr, i32 } %143, ptr %145, 1
  %147 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 2
  %148 = load ptr, ptr %147, align 8
  %149 = insertvalue { ptr, ptr, ptr, i32 } %146, ptr %148, 2
  %150 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 3
  %151 = load i32, ptr %150, align 4
  %152 = insertvalue { ptr, ptr, ptr, i32 } %149, i32 %151, 3
  %153 = alloca [0 x ptr], align 8
  %154 = call ptr @llvm.invariant.start.p0(i64 0, ptr %153)
  %155 = call ptr @llvm.invariant.start.p0(i64 280, ptr %142)
  %156 = getelementptr ptr, ptr %142, i32 %151
  %157 = getelementptr ptr, ptr %156, i32 14
  %158 = load ptr, ptr %157, align 8
  %159 = alloca {}, align 8
  %160 = call ptr @behavior_wrapper(ptr %158, { ptr, ptr, ptr, i32 } %152, ptr %159)
  %161 = call { ptr } %160({ ptr, ptr, ptr, i32 } %152, { ptr, ptr, ptr, i32 } %152, ptr %153)
  %162 = alloca ptr, align 8
  store { ptr } %161, ptr %162, align 8
  %163 = load ptr, ptr %162, align 8
  %164 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %163)
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %166 = load ptr, ptr %165, align 8
  %167 = load ptr, ptr %6, align 8
  %168 = call ptr @llvm.invariant.start.p0(i64 104, ptr %167)
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %170 = load i32, ptr %169, align 4
  %171 = getelementptr ptr, ptr %167, i32 %170
  %172 = getelementptr ptr, ptr %171, i32 1
  %173 = load ptr, ptr %172, align 8
  %174 = getelementptr { ptr, ptr }, ptr %173, i32 0, i32 0
  %175 = load ptr, ptr %174, align 8
  %176 = call { ptr, ptr, ptr, i32 } %175(ptr %166) #16
  %177 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %176, ptr %177, align 8
  %178 = call ptr @llvm.invariant.start.p0(i64 16, ptr %177)
  call void @assume_offset(ptr %177, ptr @String)
  %179 = getelementptr { ptr, ptr, ptr, i32 }, ptr %177, i32 0, i32 0
  %180 = load ptr, ptr %179, align 8
  %181 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %180, 0
  %182 = getelementptr { ptr, ptr, ptr, i32 }, ptr %177, i32 0, i32 1
  %183 = load ptr, ptr %182, align 8
  %184 = insertvalue { ptr, ptr, ptr, i32 } %181, ptr %183, 1
  %185 = getelementptr { ptr, ptr, ptr, i32 }, ptr %177, i32 0, i32 2
  %186 = load ptr, ptr %185, align 8
  %187 = insertvalue { ptr, ptr, ptr, i32 } %184, ptr %186, 2
  %188 = getelementptr { ptr, ptr, ptr, i32 }, ptr %177, i32 0, i32 3
  %189 = load i32, ptr %188, align 4
  %190 = insertvalue { ptr, ptr, ptr, i32 } %187, i32 %189, 3
  %191 = alloca [0 x ptr], align 8
  %192 = call ptr @llvm.invariant.start.p0(i64 0, ptr %191)
  %193 = call ptr @llvm.invariant.start.p0(i64 280, ptr %180)
  %194 = getelementptr ptr, ptr %180, i32 %189
  %195 = getelementptr ptr, ptr %194, i32 14
  %196 = load ptr, ptr %195, align 8
  %197 = alloca {}, align 8
  %198 = call ptr @behavior_wrapper(ptr %196, { ptr, ptr, ptr, i32 } %190, ptr %197)
  %199 = call { ptr } %198({ ptr, ptr, ptr, i32 } %190, { ptr, ptr, ptr, i32 } %190, ptr %191)
  %200 = alloca ptr, align 8
  store { ptr } %199, ptr %200, align 8
  %201 = load ptr, ptr %200, align 8
  %202 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %201)
  %203 = alloca ptr, align 8
  %204 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 8))
  store ptr %204, ptr %203, align 8
  %205 = alloca { ptr }, align 8
  %206 = getelementptr { ptr }, ptr %203, i32 0, i32 0
  %207 = getelementptr { ptr }, ptr %205, i32 0, i32 0
  %208 = load ptr, ptr %206, align 8
  store ptr %208, ptr %207, align 8
  %209 = call ptr @llvm.invariant.start.p0(i64 16, ptr %205)
  %210 = load ptr, ptr %205, align 8
  %211 = load [7 x i8], ptr @irvbe_At_line, align 1
  store [7 x i8] %211, ptr %210, align 1
  %212 = alloca [1 x ptr], align 8
  store ptr @String, ptr %212, align 8
  %213 = load ptr, ptr %212, align 8
  %214 = getelementptr ptr, ptr %213, i32 6
  %215 = load ptr, ptr %214, align 8
  %216 = call { i64, i64 } @size_wrapper(ptr %215, ptr %212)
  %217 = extractvalue { i64, i64 } %216, 0
  %218 = call ptr @bump_malloc(i64 %217)
  %219 = alloca { ptr, ptr, ptr, i32 }, align 8
  %220 = getelementptr { ptr, ptr, ptr, i32 }, ptr %219, i32 0, i32 1
  %221 = getelementptr { ptr, ptr, ptr, i32 }, ptr %219, i32 0, i32 3
  store ptr @String, ptr %219, align 8
  store ptr %218, ptr %220, align 8
  store i32 9, ptr %221, align 4
  %222 = call ptr @llvm.invariant.start.p0(i64 16, ptr %219)
  %223 = getelementptr { ptr }, ptr %205, i32 0, i32 0
  %224 = load ptr, ptr %223, align 8
  %225 = insertvalue { ptr } undef, ptr %224, 0
  %226 = getelementptr { ptr, ptr, ptr, i32 }, ptr %219, i32 0, i32 0
  %227 = load ptr, ptr %226, align 8
  %228 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %227, 0
  %229 = getelementptr { ptr, ptr, ptr, i32 }, ptr %219, i32 0, i32 1
  %230 = load ptr, ptr %229, align 8
  %231 = insertvalue { ptr, ptr, ptr, i32 } %228, ptr %230, 1
  %232 = getelementptr { ptr, ptr, ptr, i32 }, ptr %219, i32 0, i32 2
  %233 = load ptr, ptr %232, align 8
  %234 = insertvalue { ptr, ptr, ptr, i32 } %231, ptr %233, 2
  %235 = getelementptr { ptr, ptr, ptr, i32 }, ptr %219, i32 0, i32 3
  %236 = load i32, ptr %235, align 4
  %237 = insertvalue { ptr, ptr, ptr, i32 } %234, i32 %236, 3
  %238 = alloca [3 x ptr], align 8
  %239 = getelementptr [3 x ptr], ptr %238, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %239, align 8
  %240 = getelementptr [3 x ptr], ptr %238, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %240, align 8
  %241 = getelementptr [3 x ptr], ptr %238, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %241, align 8
  %242 = call ptr @llvm.invariant.start.p0(i64 9, ptr %238)
  %243 = call ptr @llvm.invariant.start.p0(i64 280, ptr %227)
  %244 = getelementptr ptr, ptr %227, i32 %236
  %245 = getelementptr ptr, ptr %244, i32 4
  %246 = load ptr, ptr %245, align 8
  %247 = alloca { ptr, ptr, ptr }, align 8
  %248 = getelementptr { ptr, ptr, ptr }, ptr %247, i32 0, i32 0
  store ptr @buffer_typ, ptr %248, align 8
  %249 = getelementptr { ptr, ptr, ptr }, ptr %247, i32 0, i32 1
  store ptr @i32_typ, ptr %249, align 8
  %250 = getelementptr { ptr, ptr, ptr }, ptr %247, i32 0, i32 2
  store ptr @i32_typ, ptr %250, align 8
  %251 = call ptr @behavior_wrapper(ptr %246, { ptr, ptr, ptr, i32 } %237, ptr %247)
  call void %251({ ptr, ptr, ptr, i32 } %237, { ptr, ptr, ptr, i32 } %237, ptr %238, { ptr } %225, i32 7, i32 8)
  %252 = getelementptr { ptr, ptr, ptr, i32 }, ptr %219, i32 0, i32 0
  %253 = load ptr, ptr %252, align 8
  %254 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %253, 0
  %255 = getelementptr { ptr, ptr, ptr, i32 }, ptr %219, i32 0, i32 1
  %256 = load ptr, ptr %255, align 8
  %257 = insertvalue { ptr, ptr, ptr, i32 } %254, ptr %256, 1
  %258 = getelementptr { ptr, ptr, ptr, i32 }, ptr %219, i32 0, i32 2
  %259 = load ptr, ptr %258, align 8
  %260 = insertvalue { ptr, ptr, ptr, i32 } %257, ptr %259, 2
  %261 = getelementptr { ptr, ptr, ptr, i32 }, ptr %219, i32 0, i32 3
  %262 = load i32, ptr %261, align 4
  %263 = insertvalue { ptr, ptr, ptr, i32 } %260, i32 %262, 3
  %264 = alloca [0 x ptr], align 8
  %265 = call ptr @llvm.invariant.start.p0(i64 0, ptr %264)
  %266 = call ptr @llvm.invariant.start.p0(i64 280, ptr %253)
  %267 = getelementptr ptr, ptr %253, i32 %262
  %268 = getelementptr ptr, ptr %267, i32 14
  %269 = load ptr, ptr %268, align 8
  %270 = alloca {}, align 8
  %271 = call ptr @behavior_wrapper(ptr %269, { ptr, ptr, ptr, i32 } %263, ptr %270)
  %272 = call { ptr } %271({ ptr, ptr, ptr, i32 } %263, { ptr, ptr, ptr, i32 } %263, ptr %264)
  %273 = alloca ptr, align 8
  store { ptr } %272, ptr %273, align 8
  %274 = load ptr, ptr %273, align 8
  %275 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %274)
  %276 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %277 = load ptr, ptr %276, align 8
  %278 = load ptr, ptr %6, align 8
  %279 = call ptr @llvm.invariant.start.p0(i64 104, ptr %278)
  %280 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %281 = load i32, ptr %280, align 4
  %282 = getelementptr ptr, ptr %278, i32 %281
  %283 = load ptr, ptr %282, align 8
  %284 = getelementptr { ptr, ptr }, ptr %283, i32 0, i32 0
  %285 = load ptr, ptr %284, align 8
  %286 = call i32 %285(ptr %277) #16
  %287 = call i32 (ptr, ...) @printf(ptr @i32_string, i32 %286)
  %288 = alloca ptr, align 8
  %289 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 13))
  store ptr %289, ptr %288, align 8
  %290 = alloca { ptr }, align 8
  %291 = getelementptr { ptr }, ptr %288, i32 0, i32 0
  %292 = getelementptr { ptr }, ptr %290, i32 0, i32 0
  %293 = load ptr, ptr %291, align 8
  store ptr %293, ptr %292, align 8
  %294 = call ptr @llvm.invariant.start.p0(i64 16, ptr %290)
  %295 = load ptr, ptr %290, align 8
  %296 = load [12 x i8], ptr @fmqxk_With_message, align 1
  store [12 x i8] %296, ptr %295, align 1
  %297 = alloca [1 x ptr], align 8
  store ptr @String, ptr %297, align 8
  %298 = load ptr, ptr %297, align 8
  %299 = getelementptr ptr, ptr %298, i32 6
  %300 = load ptr, ptr %299, align 8
  %301 = call { i64, i64 } @size_wrapper(ptr %300, ptr %297)
  %302 = extractvalue { i64, i64 } %301, 0
  %303 = call ptr @bump_malloc(i64 %302)
  %304 = alloca { ptr, ptr, ptr, i32 }, align 8
  %305 = getelementptr { ptr, ptr, ptr, i32 }, ptr %304, i32 0, i32 1
  %306 = getelementptr { ptr, ptr, ptr, i32 }, ptr %304, i32 0, i32 3
  store ptr @String, ptr %304, align 8
  store ptr %303, ptr %305, align 8
  store i32 9, ptr %306, align 4
  %307 = call ptr @llvm.invariant.start.p0(i64 16, ptr %304)
  %308 = getelementptr { ptr }, ptr %290, i32 0, i32 0
  %309 = load ptr, ptr %308, align 8
  %310 = insertvalue { ptr } undef, ptr %309, 0
  %311 = getelementptr { ptr, ptr, ptr, i32 }, ptr %304, i32 0, i32 0
  %312 = load ptr, ptr %311, align 8
  %313 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %312, 0
  %314 = getelementptr { ptr, ptr, ptr, i32 }, ptr %304, i32 0, i32 1
  %315 = load ptr, ptr %314, align 8
  %316 = insertvalue { ptr, ptr, ptr, i32 } %313, ptr %315, 1
  %317 = getelementptr { ptr, ptr, ptr, i32 }, ptr %304, i32 0, i32 2
  %318 = load ptr, ptr %317, align 8
  %319 = insertvalue { ptr, ptr, ptr, i32 } %316, ptr %318, 2
  %320 = getelementptr { ptr, ptr, ptr, i32 }, ptr %304, i32 0, i32 3
  %321 = load i32, ptr %320, align 4
  %322 = insertvalue { ptr, ptr, ptr, i32 } %319, i32 %321, 3
  %323 = alloca [3 x ptr], align 8
  %324 = getelementptr [3 x ptr], ptr %323, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %324, align 8
  %325 = getelementptr [3 x ptr], ptr %323, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %325, align 8
  %326 = getelementptr [3 x ptr], ptr %323, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %326, align 8
  %327 = call ptr @llvm.invariant.start.p0(i64 9, ptr %323)
  %328 = call ptr @llvm.invariant.start.p0(i64 280, ptr %312)
  %329 = getelementptr ptr, ptr %312, i32 %321
  %330 = getelementptr ptr, ptr %329, i32 4
  %331 = load ptr, ptr %330, align 8
  %332 = alloca { ptr, ptr, ptr }, align 8
  %333 = getelementptr { ptr, ptr, ptr }, ptr %332, i32 0, i32 0
  store ptr @buffer_typ, ptr %333, align 8
  %334 = getelementptr { ptr, ptr, ptr }, ptr %332, i32 0, i32 1
  store ptr @i32_typ, ptr %334, align 8
  %335 = getelementptr { ptr, ptr, ptr }, ptr %332, i32 0, i32 2
  store ptr @i32_typ, ptr %335, align 8
  %336 = call ptr @behavior_wrapper(ptr %331, { ptr, ptr, ptr, i32 } %322, ptr %332)
  call void %336({ ptr, ptr, ptr, i32 } %322, { ptr, ptr, ptr, i32 } %322, ptr %323, { ptr } %310, i32 12, i32 13)
  %337 = getelementptr { ptr, ptr, ptr, i32 }, ptr %304, i32 0, i32 0
  %338 = load ptr, ptr %337, align 8
  %339 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %338, 0
  %340 = getelementptr { ptr, ptr, ptr, i32 }, ptr %304, i32 0, i32 1
  %341 = load ptr, ptr %340, align 8
  %342 = insertvalue { ptr, ptr, ptr, i32 } %339, ptr %341, 1
  %343 = getelementptr { ptr, ptr, ptr, i32 }, ptr %304, i32 0, i32 2
  %344 = load ptr, ptr %343, align 8
  %345 = insertvalue { ptr, ptr, ptr, i32 } %342, ptr %344, 2
  %346 = getelementptr { ptr, ptr, ptr, i32 }, ptr %304, i32 0, i32 3
  %347 = load i32, ptr %346, align 4
  %348 = insertvalue { ptr, ptr, ptr, i32 } %345, i32 %347, 3
  %349 = alloca [0 x ptr], align 8
  %350 = call ptr @llvm.invariant.start.p0(i64 0, ptr %349)
  %351 = call ptr @llvm.invariant.start.p0(i64 280, ptr %338)
  %352 = getelementptr ptr, ptr %338, i32 %347
  %353 = getelementptr ptr, ptr %352, i32 14
  %354 = load ptr, ptr %353, align 8
  %355 = alloca {}, align 8
  %356 = call ptr @behavior_wrapper(ptr %354, { ptr, ptr, ptr, i32 } %348, ptr %355)
  %357 = call { ptr } %356({ ptr, ptr, ptr, i32 } %348, { ptr, ptr, ptr, i32 } %348, ptr %349)
  %358 = alloca ptr, align 8
  store { ptr } %357, ptr %358, align 8
  %359 = load ptr, ptr %358, align 8
  %360 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %359)
  %361 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %362 = load ptr, ptr %361, align 8
  %363 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %362, 0
  %364 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %365 = load ptr, ptr %364, align 8
  %366 = insertvalue { ptr, ptr, ptr, i32 } %363, ptr %365, 1
  %367 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %368 = load ptr, ptr %367, align 8
  %369 = insertvalue { ptr, ptr, ptr, i32 } %366, ptr %368, 2
  %370 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %371 = load i32, ptr %370, align 4
  %372 = insertvalue { ptr, ptr, ptr, i32 } %369, i32 %371, 3
  %373 = alloca [0 x ptr], align 8
  %374 = call ptr @llvm.invariant.start.p0(i64 0, ptr %373)
  %375 = call ptr @llvm.invariant.start.p0(i64 104, ptr %362)
  %376 = getelementptr ptr, ptr %362, i32 %371
  %377 = getelementptr ptr, ptr %376, i32 7
  %378 = load ptr, ptr %377, align 8
  %379 = alloca {}, align 8
  %380 = call ptr @behavior_wrapper(ptr %378, { ptr, ptr, ptr, i32 } %372, ptr %379)
  call void %380({ ptr, ptr, ptr, i32 } %372, { ptr, ptr, ptr, i32 } %372, ptr %373)
  %381 = alloca ptr, align 8
  %382 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 10))
  store ptr %382, ptr %381, align 8
  %383 = alloca { ptr }, align 8
  %384 = getelementptr { ptr }, ptr %381, i32 0, i32 0
  %385 = getelementptr { ptr }, ptr %383, i32 0, i32 0
  %386 = load ptr, ptr %384, align 8
  store ptr %386, ptr %385, align 8
  %387 = call ptr @llvm.invariant.start.p0(i64 16, ptr %383)
  %388 = load ptr, ptr %383, align 8
  %389 = load [9 x i8], ptr @nxwxn_, align 1
  store [9 x i8] %389, ptr %388, align 1
  %390 = alloca [1 x ptr], align 8
  store ptr @String, ptr %390, align 8
  %391 = load ptr, ptr %390, align 8
  %392 = getelementptr ptr, ptr %391, i32 6
  %393 = load ptr, ptr %392, align 8
  %394 = call { i64, i64 } @size_wrapper(ptr %393, ptr %390)
  %395 = extractvalue { i64, i64 } %394, 0
  %396 = call ptr @bump_malloc(i64 %395)
  %397 = alloca { ptr, ptr, ptr, i32 }, align 8
  %398 = getelementptr { ptr, ptr, ptr, i32 }, ptr %397, i32 0, i32 1
  %399 = getelementptr { ptr, ptr, ptr, i32 }, ptr %397, i32 0, i32 3
  store ptr @String, ptr %397, align 8
  store ptr %396, ptr %398, align 8
  store i32 9, ptr %399, align 4
  %400 = call ptr @llvm.invariant.start.p0(i64 16, ptr %397)
  %401 = getelementptr { ptr }, ptr %383, i32 0, i32 0
  %402 = load ptr, ptr %401, align 8
  %403 = insertvalue { ptr } undef, ptr %402, 0
  %404 = getelementptr { ptr, ptr, ptr, i32 }, ptr %397, i32 0, i32 0
  %405 = load ptr, ptr %404, align 8
  %406 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %405, 0
  %407 = getelementptr { ptr, ptr, ptr, i32 }, ptr %397, i32 0, i32 1
  %408 = load ptr, ptr %407, align 8
  %409 = insertvalue { ptr, ptr, ptr, i32 } %406, ptr %408, 1
  %410 = getelementptr { ptr, ptr, ptr, i32 }, ptr %397, i32 0, i32 2
  %411 = load ptr, ptr %410, align 8
  %412 = insertvalue { ptr, ptr, ptr, i32 } %409, ptr %411, 2
  %413 = getelementptr { ptr, ptr, ptr, i32 }, ptr %397, i32 0, i32 3
  %414 = load i32, ptr %413, align 4
  %415 = insertvalue { ptr, ptr, ptr, i32 } %412, i32 %414, 3
  %416 = alloca [3 x ptr], align 8
  %417 = getelementptr [3 x ptr], ptr %416, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %417, align 8
  %418 = getelementptr [3 x ptr], ptr %416, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %418, align 8
  %419 = getelementptr [3 x ptr], ptr %416, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %419, align 8
  %420 = call ptr @llvm.invariant.start.p0(i64 9, ptr %416)
  %421 = call ptr @llvm.invariant.start.p0(i64 280, ptr %405)
  %422 = getelementptr ptr, ptr %405, i32 %414
  %423 = getelementptr ptr, ptr %422, i32 4
  %424 = load ptr, ptr %423, align 8
  %425 = alloca { ptr, ptr, ptr }, align 8
  %426 = getelementptr { ptr, ptr, ptr }, ptr %425, i32 0, i32 0
  store ptr @buffer_typ, ptr %426, align 8
  %427 = getelementptr { ptr, ptr, ptr }, ptr %425, i32 0, i32 1
  store ptr @i32_typ, ptr %427, align 8
  %428 = getelementptr { ptr, ptr, ptr }, ptr %425, i32 0, i32 2
  store ptr @i32_typ, ptr %428, align 8
  %429 = call ptr @behavior_wrapper(ptr %424, { ptr, ptr, ptr, i32 } %415, ptr %425)
  call void %429({ ptr, ptr, ptr, i32 } %415, { ptr, ptr, ptr, i32 } %415, ptr %416, { ptr } %403, i32 9, i32 10)
  %430 = getelementptr { ptr, ptr, ptr, i32 }, ptr %397, i32 0, i32 0
  %431 = load ptr, ptr %430, align 8
  %432 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %431, 0
  %433 = getelementptr { ptr, ptr, ptr, i32 }, ptr %397, i32 0, i32 1
  %434 = load ptr, ptr %433, align 8
  %435 = insertvalue { ptr, ptr, ptr, i32 } %432, ptr %434, 1
  %436 = getelementptr { ptr, ptr, ptr, i32 }, ptr %397, i32 0, i32 2
  %437 = load ptr, ptr %436, align 8
  %438 = insertvalue { ptr, ptr, ptr, i32 } %435, ptr %437, 2
  %439 = getelementptr { ptr, ptr, ptr, i32 }, ptr %397, i32 0, i32 3
  %440 = load i32, ptr %439, align 4
  %441 = insertvalue { ptr, ptr, ptr, i32 } %438, i32 %440, 3
  %442 = alloca [0 x ptr], align 8
  %443 = call ptr @llvm.invariant.start.p0(i64 0, ptr %442)
  %444 = call ptr @llvm.invariant.start.p0(i64 280, ptr %431)
  %445 = getelementptr ptr, ptr %431, i32 %440
  %446 = getelementptr ptr, ptr %445, i32 14
  %447 = load ptr, ptr %446, align 8
  %448 = alloca {}, align 8
  %449 = call ptr @behavior_wrapper(ptr %447, { ptr, ptr, ptr, i32 } %441, ptr %448)
  %450 = call { ptr } %449({ ptr, ptr, ptr, i32 } %441, { ptr, ptr, ptr, i32 } %441, ptr %442)
  %451 = alloca ptr, align 8
  store { ptr } %450, ptr %451, align 8
  %452 = load ptr, ptr %451, align 8
  %453 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %452)
  ret void
}

define void @Exception_print_message_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Exception)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 104, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call { ptr, ptr, ptr, i32 } %29(ptr %20) #16
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %30, ptr %31, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 16, ptr %31)
  call void @assume_offset(ptr %31, ptr @String)
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %34 = load ptr, ptr %33, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %34, 0
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  %37 = load ptr, ptr %36, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %37, 1
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %40 = load ptr, ptr %39, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } %38, ptr %40, 2
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  %43 = load i32, ptr %42, align 4
  %44 = insertvalue { ptr, ptr, ptr, i32 } %41, i32 %43, 3
  %45 = alloca [0 x ptr], align 8
  %46 = call ptr @llvm.invariant.start.p0(i64 0, ptr %45)
  %47 = call ptr @llvm.invariant.start.p0(i64 280, ptr %34)
  %48 = getelementptr ptr, ptr %34, i32 %43
  %49 = getelementptr ptr, ptr %48, i32 14
  %50 = load ptr, ptr %49, align 8
  %51 = alloca {}, align 8
  %52 = call ptr @behavior_wrapper(ptr %50, { ptr, ptr, ptr, i32 } %44, ptr %51)
  %53 = call { ptr } %52({ ptr, ptr, ptr, i32 } %44, { ptr, ptr, ptr, i32 } %44, ptr %45)
  %54 = alloca ptr, align 8
  store { ptr } %53, ptr %54, align 8
  %55 = load ptr, ptr %54, align 8
  %56 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %55)
  ret void
}

declare i32 @printf(ptr, ...)

define { ptr, ptr, ptr, i32 } @Exception_getter_message(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %15, 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %21, 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 %24, 3
  ret { ptr, ptr, ptr, i32 } %25
}

define void @Exception_setter_message(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %15, align 8
  %16 = call ptr @llvm.invariant.start.p0(i64 16, ptr %15)
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %28 = load i32, ptr %26, align 4
  store i32 %28, ptr %27, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @Exception_getter_file_name(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @Exception_setter_file_name(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 16, ptr %9)
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %22 = load i32, ptr %20, align 4
  store i32 %22, ptr %21, align 4
  ret void
}

define i32 @Exception_getter_line_number(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @Exception_setter_line_number(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  store i32 %1, ptr %3, align 4
  ret void
}

define { i64, i64 } @_size_IO(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret { i64, i64 } { i64 0, i64 1 }
}

define ptr @IO_B__Self_print_xPtri8__Self_print_xPtri64__Self_print_xCharacter__Self_print_xPtrf64__Self_print_xPtri1__Self_print_xNil__Self_print_xPtri32__Self_print_xString__Self_print_xRepresentable(ptr %0) {
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i32, align 4
  %.reg2mem5 = alloca i32, align 4
  %.reg2mem7 = alloca i32, align 4
  %.reg2mem9 = alloca i32, align 4
  %.reg2mem11 = alloca i32, align 4
  %.reg2mem13 = alloca i32, align 4
  %.reg2mem15 = alloca i32, align 4
  %.reg2mem17 = alloca i32, align 4
  %.reg2mem19 = alloca i32, align 4
  %.reg2mem21 = alloca i32, align 4
  %.reg2mem23 = alloca i32, align 4
  %.reg2mem25 = alloca i32, align 4
  %.reg2mem27 = alloca i32, align 4
  %.reg2mem29 = alloca i32, align 4
  %.reg2mem31 = alloca i32, align 4
  %.reg2mem33 = alloca i32, align 4
  %.reg2mem35 = alloca i32, align 4
  %.reg2mem37 = alloca i32, align 4
  %.reg2mem39 = alloca i32, align 4
  %.reg2mem41 = alloca i32, align 4
  %.reg2mem43 = alloca i32, align 4
  %.reg2mem45 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %3 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr ptr, ptr %4, i32 1
  %6 = getelementptr ptr, ptr %4, i32 2
  %7 = getelementptr ptr, ptr %4, i32 3
  %8 = getelementptr ptr, ptr %4, i32 4
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 -757315540097298781, i64 ptrtoint (ptr @f64_typ to i64), ptr %12)
  br i1 %13, label %14, label %15

14:                                               ; preds = %1
  store i32 4, ptr %.reg2mem25, align 4
  br label %189

15:                                               ; preds = %1
  %16 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %17 = load ptr, ptr %16, align 8
  %18 = getelementptr ptr, ptr %17, i32 1
  %19 = getelementptr ptr, ptr %17, i32 2
  %20 = getelementptr ptr, ptr %17, i32 3
  %21 = getelementptr ptr, ptr %17, i32 4
  %22 = load i64, ptr %18, align 4
  %23 = load i64, ptr %19, align 4
  %24 = load ptr, ptr %20, align 8
  %25 = load ptr, ptr %21, align 8
  %26 = call i1 @subtype_test_wrapper(ptr %24, i64 %23, i64 %22, i64 2582149688529881115, i64 ptrtoint (ptr @i8_typ to i64), ptr %25)
  br i1 %26, label %27, label %28

27:                                               ; preds = %15
  store i32 1, ptr %.reg2mem27, align 4
  br label %187

28:                                               ; preds = %15
  %29 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %30 = load ptr, ptr %29, align 8
  %31 = getelementptr ptr, ptr %30, i32 1
  %32 = getelementptr ptr, ptr %30, i32 2
  %33 = getelementptr ptr, ptr %30, i32 3
  %34 = getelementptr ptr, ptr %30, i32 4
  %35 = load i64, ptr %31, align 4
  %36 = load i64, ptr %32, align 4
  %37 = load ptr, ptr %33, align 8
  %38 = load ptr, ptr %34, align 8
  %39 = call i1 @subtype_test_wrapper(ptr %37, i64 %36, i64 %35, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %38)
  br i1 %39, label %40, label %41

40:                                               ; preds = %28
  store i32 7, ptr %.reg2mem29, align 4
  br label %185

41:                                               ; preds = %28
  %42 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %43 = load ptr, ptr %42, align 8
  %44 = getelementptr ptr, ptr %43, i32 1
  %45 = getelementptr ptr, ptr %43, i32 2
  %46 = getelementptr ptr, ptr %43, i32 3
  %47 = getelementptr ptr, ptr %43, i32 4
  %48 = load i64, ptr %44, align 4
  %49 = load i64, ptr %45, align 4
  %50 = load ptr, ptr %46, align 8
  %51 = load ptr, ptr %47, align 8
  %52 = call i1 @subtype_test_wrapper(ptr %50, i64 %49, i64 %48, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %51)
  br i1 %52, label %53, label %67

53:                                               ; preds = %41
  %54 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %55 = load ptr, ptr %54, align 8
  %56 = getelementptr ptr, ptr %55, i32 1
  %57 = getelementptr ptr, ptr %55, i32 2
  %58 = getelementptr ptr, ptr %55, i32 3
  %59 = getelementptr ptr, ptr %55, i32 4
  %60 = load i64, ptr %56, align 4
  %61 = load i64, ptr %57, align 4
  %62 = load ptr, ptr %58, align 8
  %63 = load ptr, ptr %59, align 8
  %64 = call i1 @subtype_test_wrapper(ptr %62, i64 %61, i64 %60, i64 6681222582356018452, i64 ptrtoint (ptr @Character to i64), ptr %63)
  %65 = xor i1 %64, true
  %66 = zext i1 %65 to i32
  store i32 %66, ptr %.reg2mem23, align 4
  %.reload24 = load i32, ptr %.reg2mem23, align 4
  store i32 %.reload24, ptr %.reg2mem45, align 4
  br label %68

67:                                               ; preds = %41
  store i32 0, ptr %.reg2mem45, align 4
  br label %68

68:                                               ; preds = %67, %53
  %.reload46 = load i32, ptr %.reg2mem45, align 4
  store i32 %.reload46, ptr %.reg2mem21, align 4
  br label %69

69:                                               ; preds = %68
  %.reload22 = load i32, ptr %.reg2mem21, align 4
  %70 = zext i32 %.reload22 to i64
  %71 = trunc i64 %70 to i32
  switch i32 %71, label %183 [
    i32 0, label %72
  ]

72:                                               ; preds = %69
  %73 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %74 = load ptr, ptr %73, align 8
  %75 = getelementptr ptr, ptr %74, i32 1
  %76 = getelementptr ptr, ptr %74, i32 2
  %77 = getelementptr ptr, ptr %74, i32 3
  %78 = getelementptr ptr, ptr %74, i32 4
  %79 = load i64, ptr %75, align 4
  %80 = load i64, ptr %76, align 4
  %81 = load ptr, ptr %77, align 8
  %82 = load ptr, ptr %78, align 8
  %83 = call i1 @subtype_test_wrapper(ptr %81, i64 %80, i64 %79, i64 5801531371504802705, i64 ptrtoint (ptr @bool_typ to i64), ptr %82)
  br i1 %83, label %84, label %85

84:                                               ; preds = %72
  store i32 5, ptr %.reg2mem33, align 4
  br label %181

85:                                               ; preds = %72
  %86 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %87 = load ptr, ptr %86, align 8
  %88 = ptrtoint ptr %87 to i64
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %90, label %91

90:                                               ; preds = %85
  store i32 6, ptr %.reg2mem35, align 4
  br label %179

91:                                               ; preds = %85
  %92 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %93 = load ptr, ptr %92, align 8
  %94 = getelementptr ptr, ptr %93, i32 1
  %95 = getelementptr ptr, ptr %93, i32 2
  %96 = getelementptr ptr, ptr %93, i32 3
  %97 = getelementptr ptr, ptr %93, i32 4
  %98 = load i64, ptr %94, align 4
  %99 = load i64, ptr %95, align 4
  %100 = load ptr, ptr %96, align 8
  %101 = load ptr, ptr %97, align 8
  %102 = call i1 @subtype_test_wrapper(ptr %100, i64 %99, i64 %98, i64 -7469797244461771922, i64 ptrtoint (ptr @i64_typ to i64), ptr %101)
  br i1 %102, label %103, label %104

103:                                              ; preds = %91
  store i32 2, ptr %.reg2mem37, align 4
  br label %177

104:                                              ; preds = %91
  %105 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %106 = load ptr, ptr %105, align 8
  %107 = getelementptr ptr, ptr %106, i32 1
  %108 = getelementptr ptr, ptr %106, i32 2
  %109 = getelementptr ptr, ptr %106, i32 3
  %110 = getelementptr ptr, ptr %106, i32 4
  %111 = load i64, ptr %107, align 4
  %112 = load i64, ptr %108, align 4
  %113 = load ptr, ptr %109, align 8
  %114 = load ptr, ptr %110, align 8
  %115 = call i1 @subtype_test_wrapper(ptr %113, i64 %112, i64 %111, i64 -7260840641129990118, i64 ptrtoint (ptr @Representable to i64), ptr %114)
  br i1 %115, label %116, label %145

116:                                              ; preds = %104
  %117 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %118 = load ptr, ptr %117, align 8
  %119 = getelementptr ptr, ptr %118, i32 1
  %120 = getelementptr ptr, ptr %118, i32 2
  %121 = getelementptr ptr, ptr %118, i32 3
  %122 = getelementptr ptr, ptr %118, i32 4
  %123 = load i64, ptr %119, align 4
  %124 = load i64, ptr %120, align 4
  %125 = load ptr, ptr %121, align 8
  %126 = load ptr, ptr %122, align 8
  %127 = call i1 @subtype_test_wrapper(ptr %125, i64 %124, i64 %123, i64 6681222582356018452, i64 ptrtoint (ptr @Character to i64), ptr %126)
  br i1 %127, label %128, label %129

128:                                              ; preds = %116
  store i32 0, ptr %.reg2mem43, align 4
  br label %143

129:                                              ; preds = %116
  %130 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %131 = load ptr, ptr %130, align 8
  %132 = getelementptr ptr, ptr %131, i32 1
  %133 = getelementptr ptr, ptr %131, i32 2
  %134 = getelementptr ptr, ptr %131, i32 3
  %135 = getelementptr ptr, ptr %131, i32 4
  %136 = load i64, ptr %132, align 4
  %137 = load i64, ptr %133, align 4
  %138 = load ptr, ptr %134, align 8
  %139 = load ptr, ptr %135, align 8
  %140 = call i1 @subtype_test_wrapper(ptr %138, i64 %137, i64 %136, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %139)
  %141 = xor i1 %140, true
  %142 = zext i1 %141 to i32
  store i32 %142, ptr %.reg2mem19, align 4
  %.reload20 = load i32, ptr %.reg2mem19, align 4
  store i32 %.reload20, ptr %.reg2mem43, align 4
  br label %143

143:                                              ; preds = %129, %128
  %.reload44 = load i32, ptr %.reg2mem43, align 4
  store i32 %.reload44, ptr %.reg2mem17, align 4
  br label %144

144:                                              ; preds = %143
  %.reload18 = load i32, ptr %.reg2mem17, align 4
  store i32 %.reload18, ptr %.reg2mem41, align 4
  br label %146

145:                                              ; preds = %104
  store i32 0, ptr %.reg2mem41, align 4
  br label %146

146:                                              ; preds = %145, %144
  %.reload42 = load i32, ptr %.reg2mem41, align 4
  store i32 %.reload42, ptr %.reg2mem15, align 4
  br label %147

147:                                              ; preds = %146
  %.reload16 = load i32, ptr %.reg2mem15, align 4
  %148 = zext i32 %.reload16 to i64
  %149 = trunc i64 %148 to i32
  switch i32 %149, label %175 [
    i32 0, label %150
  ]

150:                                              ; preds = %147
  %151 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %152 = load ptr, ptr %151, align 8
  %153 = getelementptr ptr, ptr %152, i32 1
  %154 = getelementptr ptr, ptr %152, i32 2
  %155 = getelementptr ptr, ptr %152, i32 3
  %156 = getelementptr ptr, ptr %152, i32 4
  %157 = load i64, ptr %153, align 4
  %158 = load i64, ptr %154, align 4
  %159 = load ptr, ptr %155, align 8
  %160 = load ptr, ptr %156, align 8
  %161 = call i1 @subtype_test_wrapper(ptr %159, i64 %158, i64 %157, i64 6681222582356018452, i64 ptrtoint (ptr @Character to i64), ptr %160)
  br i1 %161, label %162, label %._crit_edge

._crit_edge:                                      ; preds = %150
  br label %174

162:                                              ; preds = %150
  %163 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %164 = load ptr, ptr %163, align 8
  %165 = getelementptr ptr, ptr %164, i32 1
  %166 = getelementptr ptr, ptr %164, i32 2
  %167 = getelementptr ptr, ptr %164, i32 3
  %168 = getelementptr ptr, ptr %164, i32 4
  %169 = load i64, ptr %165, align 4
  %170 = load i64, ptr %166, align 4
  %171 = load ptr, ptr %167, align 8
  %172 = load ptr, ptr %168, align 8
  %173 = call i1 @subtype_test_wrapper(ptr %171, i64 %170, i64 %169, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %172)
  br label %174

174:                                              ; preds = %._crit_edge, %162
  store i32 3, ptr %.reg2mem39, align 4
  br label %176

175:                                              ; preds = %147
  store i32 9, ptr %.reg2mem39, align 4
  br label %176

176:                                              ; preds = %175, %174
  %.reload40 = load i32, ptr %.reg2mem39, align 4
  store i32 %.reload40, ptr %.reg2mem13, align 4
  %.reload14 = load i32, ptr %.reg2mem13, align 4
  store i32 %.reload14, ptr %.reg2mem37, align 4
  br label %177

177:                                              ; preds = %176, %103
  %.reload38 = load i32, ptr %.reg2mem37, align 4
  store i32 %.reload38, ptr %.reg2mem11, align 4
  br label %178

178:                                              ; preds = %177
  %.reload12 = load i32, ptr %.reg2mem11, align 4
  store i32 %.reload12, ptr %.reg2mem35, align 4
  br label %179

179:                                              ; preds = %178, %90
  %.reload36 = load i32, ptr %.reg2mem35, align 4
  store i32 %.reload36, ptr %.reg2mem9, align 4
  br label %180

180:                                              ; preds = %179
  %.reload10 = load i32, ptr %.reg2mem9, align 4
  store i32 %.reload10, ptr %.reg2mem33, align 4
  br label %181

181:                                              ; preds = %180, %84
  %.reload34 = load i32, ptr %.reg2mem33, align 4
  store i32 %.reload34, ptr %.reg2mem7, align 4
  br label %182

182:                                              ; preds = %181
  %.reload8 = load i32, ptr %.reg2mem7, align 4
  store i32 %.reload8, ptr %.reg2mem31, align 4
  br label %184

183:                                              ; preds = %69
  store i32 8, ptr %.reg2mem31, align 4
  br label %184

184:                                              ; preds = %183, %182
  %.reload32 = load i32, ptr %.reg2mem31, align 4
  store i32 %.reload32, ptr %.reg2mem5, align 4
  %.reload6 = load i32, ptr %.reg2mem5, align 4
  store i32 %.reload6, ptr %.reg2mem29, align 4
  br label %185

185:                                              ; preds = %184, %40
  %.reload30 = load i32, ptr %.reg2mem29, align 4
  store i32 %.reload30, ptr %.reg2mem3, align 4
  br label %186

186:                                              ; preds = %185
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  store i32 %.reload4, ptr %.reg2mem27, align 4
  br label %187

187:                                              ; preds = %186, %27
  %.reload28 = load i32, ptr %.reg2mem27, align 4
  store i32 %.reload28, ptr %.reg2mem1, align 4
  br label %188

188:                                              ; preds = %187
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem25, align 4
  br label %189

189:                                              ; preds = %188, %14
  %.reload26 = load i32, ptr %.reg2mem25, align 4
  store i32 %.reload26, ptr %.reg2mem, align 4
  br label %190

190:                                              ; preds = %189
  %.reload = load i32, ptr %.reg2mem, align 4
  %191 = zext i32 %.reload to i64
  %192 = or i64 0, %191
  %193 = inttoptr i64 %192 to ptr
  %194 = ptrtoint ptr %193 to i64
  %195 = trunc i64 %194 to i32
  %196 = getelementptr [10 x ptr], ptr @IO, i32 0, i32 %195
  %197 = getelementptr ptr, ptr %196, i32 9
  %198 = load ptr, ptr %197, align 8
  ret ptr %198
}

define void @IO__Self_print_xPtri8(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %5 = load i8, ptr %4, align 1
  %6 = sext i8 %5 to i32
  %7 = call i32 (ptr, ...) @printf(ptr @i32_string, i32 %6)
  ret void
}

define void @IO__Self_print_xPtri64(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %5 = load i64, ptr %4, align 4
  %6 = call i32 (ptr, ...) @printf(ptr @i64_string, i64 %5)
  ret void
}

define void @IO__Self_print_xCharacter(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %6 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %9 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %10 = load i160, ptr %8, align 4
  store i160 %10, ptr %9, align 4
  call void @set_offset(ptr %4, ptr @Character)
  %11 = alloca ptr, align 8
  %12 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 2))
  store ptr %12, ptr %11, align 8
  %13 = alloca { ptr }, align 8
  %14 = getelementptr { ptr }, ptr %11, i32 0, i32 0
  %15 = getelementptr { ptr }, ptr %13, i32 0, i32 0
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = call ptr @llvm.invariant.start.p0(i64 16, ptr %13)
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %19 = load ptr, ptr %18, align 8
  %20 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %19, 0
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %22 = load ptr, ptr %21, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } %20, ptr %22, 1
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %25 = load ptr, ptr %24, align 8
  %26 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %25, 2
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %28 = load i32, ptr %27, align 4
  %29 = insertvalue { ptr, ptr, ptr, i32 } %26, i32 %28, 3
  %30 = alloca [0 x ptr], align 8
  %31 = call ptr @llvm.invariant.start.p0(i64 0, ptr %30)
  %32 = call ptr @llvm.invariant.start.p0(i64 40, ptr %19)
  %33 = getelementptr ptr, ptr %19, i32 %28
  %34 = getelementptr ptr, ptr %33, i32 1
  %35 = load ptr, ptr %34, align 8
  %36 = alloca {}, align 8
  %37 = call ptr @behavior_wrapper(ptr %35, { ptr, ptr, ptr, i32 } %29, ptr %36)
  %38 = call i8 %37({ ptr, ptr, ptr, i32 } %29, { ptr, ptr, ptr, i32 } %29, ptr %30)
  %39 = load ptr, ptr %13, align 8
  store i8 %38, ptr %39, align 1
  %40 = load ptr, ptr %13, align 8
  %41 = getelementptr i8, ptr %40, i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  store i8 0, ptr %41, align 1
  %42 = load ptr, ptr %13, align 8
  %43 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %42)
  ret void
}

define void @IO__Self_print_xPtrf64(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %5 = load double, ptr %4, align 8
  %6 = call i32 (ptr, ...) @printf(ptr @float_string, double %5)
  ret void
}

define void @IO__Self_print_xPtri1(ptr %0, { ptr, i160 } %1) {
  %3 = alloca ptr, align 8
  %4 = alloca { ptr }, align 8
  %5 = alloca [1 x ptr], align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = alloca [3 x ptr], align 8
  %8 = alloca { ptr, ptr, ptr }, align 8
  %9 = alloca [0 x ptr], align 8
  %10 = alloca {}, align 8
  %11 = alloca ptr, align 8
  %12 = alloca ptr, align 8
  %13 = alloca { ptr }, align 8
  %14 = alloca [1 x ptr], align 8
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  %16 = alloca [3 x ptr], align 8
  %17 = alloca { ptr, ptr, ptr }, align 8
  %18 = alloca [0 x ptr], align 8
  %19 = alloca {}, align 8
  %20 = alloca ptr, align 8
  %21 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %21, align 8
  %22 = getelementptr { ptr, i160 }, ptr %21, i32 0, i32 1
  %23 = load i1, ptr %22, align 1
  br i1 %23, label %24, label %89

24:                                               ; preds = %2
  %25 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 5))
  store ptr %25, ptr %3, align 8
  %26 = getelementptr { ptr }, ptr %3, i32 0, i32 0
  %27 = getelementptr { ptr }, ptr %4, i32 0, i32 0
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %30 = load ptr, ptr %4, align 8
  %31 = load [4 x i8], ptr @mvfjt_true, align 1
  store [4 x i8] %31, ptr %30, align 1
  store ptr @String, ptr %5, align 8
  %32 = load ptr, ptr %5, align 8
  %33 = getelementptr ptr, ptr %32, i32 6
  %34 = load ptr, ptr %33, align 8
  %35 = call { i64, i64 } @size_wrapper(ptr %34, ptr %5)
  %36 = extractvalue { i64, i64 } %35, 0
  %37 = call ptr @bump_malloc(i64 %36)
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  store ptr @String, ptr %6, align 8
  store ptr %37, ptr %38, align 8
  store i32 9, ptr %39, align 4
  %40 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %41 = getelementptr { ptr }, ptr %4, i32 0, i32 0
  %42 = load ptr, ptr %41, align 8
  %43 = insertvalue { ptr } undef, ptr %42, 0
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %45 = load ptr, ptr %44, align 8
  %46 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %45, 0
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %48 = load ptr, ptr %47, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } %46, ptr %48, 1
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %51 = load ptr, ptr %50, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } %49, ptr %51, 2
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = insertvalue { ptr, ptr, ptr, i32 } %52, i32 %54, 3
  %56 = getelementptr [3 x ptr], ptr %7, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %56, align 8
  %57 = getelementptr [3 x ptr], ptr %7, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %57, align 8
  %58 = getelementptr [3 x ptr], ptr %7, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %58, align 8
  %59 = call ptr @llvm.invariant.start.p0(i64 9, ptr %7)
  %60 = call ptr @llvm.invariant.start.p0(i64 280, ptr %45)
  %61 = getelementptr ptr, ptr %45, i32 %54
  %62 = getelementptr ptr, ptr %61, i32 4
  %63 = load ptr, ptr %62, align 8
  %64 = getelementptr { ptr, ptr, ptr }, ptr %8, i32 0, i32 0
  store ptr @buffer_typ, ptr %64, align 8
  %65 = getelementptr { ptr, ptr, ptr }, ptr %8, i32 0, i32 1
  store ptr @i32_typ, ptr %65, align 8
  %66 = getelementptr { ptr, ptr, ptr }, ptr %8, i32 0, i32 2
  store ptr @i32_typ, ptr %66, align 8
  %67 = call ptr @behavior_wrapper(ptr %63, { ptr, ptr, ptr, i32 } %55, ptr %8)
  call void %67({ ptr, ptr, ptr, i32 } %55, { ptr, ptr, ptr, i32 } %55, ptr %7, { ptr } %43, i32 4, i32 5)
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %69 = load ptr, ptr %68, align 8
  %70 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %69, 0
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %72 = load ptr, ptr %71, align 8
  %73 = insertvalue { ptr, ptr, ptr, i32 } %70, ptr %72, 1
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %75 = load ptr, ptr %74, align 8
  %76 = insertvalue { ptr, ptr, ptr, i32 } %73, ptr %75, 2
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %78 = load i32, ptr %77, align 4
  %79 = insertvalue { ptr, ptr, ptr, i32 } %76, i32 %78, 3
  %80 = call ptr @llvm.invariant.start.p0(i64 0, ptr %9)
  %81 = call ptr @llvm.invariant.start.p0(i64 280, ptr %69)
  %82 = getelementptr ptr, ptr %69, i32 %78
  %83 = getelementptr ptr, ptr %82, i32 14
  %84 = load ptr, ptr %83, align 8
  %85 = call ptr @behavior_wrapper(ptr %84, { ptr, ptr, ptr, i32 } %79, ptr %10)
  %86 = call { ptr } %85({ ptr, ptr, ptr, i32 } %79, { ptr, ptr, ptr, i32 } %79, ptr %9)
  store { ptr } %86, ptr %11, align 8
  %87 = load ptr, ptr %11, align 8
  %88 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %87)
  br label %154

89:                                               ; preds = %2
  %90 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 6))
  store ptr %90, ptr %12, align 8
  %91 = getelementptr { ptr }, ptr %12, i32 0, i32 0
  %92 = getelementptr { ptr }, ptr %13, i32 0, i32 0
  %93 = load ptr, ptr %91, align 8
  store ptr %93, ptr %92, align 8
  %94 = call ptr @llvm.invariant.start.p0(i64 16, ptr %13)
  %95 = load ptr, ptr %13, align 8
  %96 = load [5 x i8], ptr @lxxnb_false, align 1
  store [5 x i8] %96, ptr %95, align 1
  store ptr @String, ptr %14, align 8
  %97 = load ptr, ptr %14, align 8
  %98 = getelementptr ptr, ptr %97, i32 6
  %99 = load ptr, ptr %98, align 8
  %100 = call { i64, i64 } @size_wrapper(ptr %99, ptr %14)
  %101 = extractvalue { i64, i64 } %100, 0
  %102 = call ptr @bump_malloc(i64 %101)
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  store ptr @String, ptr %15, align 8
  store ptr %102, ptr %103, align 8
  store i32 9, ptr %104, align 4
  %105 = call ptr @llvm.invariant.start.p0(i64 16, ptr %15)
  %106 = getelementptr { ptr }, ptr %13, i32 0, i32 0
  %107 = load ptr, ptr %106, align 8
  %108 = insertvalue { ptr } undef, ptr %107, 0
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %110 = load ptr, ptr %109, align 8
  %111 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %110, 0
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %113 = load ptr, ptr %112, align 8
  %114 = insertvalue { ptr, ptr, ptr, i32 } %111, ptr %113, 1
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %116 = load ptr, ptr %115, align 8
  %117 = insertvalue { ptr, ptr, ptr, i32 } %114, ptr %116, 2
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %119 = load i32, ptr %118, align 4
  %120 = insertvalue { ptr, ptr, ptr, i32 } %117, i32 %119, 3
  %121 = getelementptr [3 x ptr], ptr %16, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %121, align 8
  %122 = getelementptr [3 x ptr], ptr %16, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %122, align 8
  %123 = getelementptr [3 x ptr], ptr %16, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %123, align 8
  %124 = call ptr @llvm.invariant.start.p0(i64 9, ptr %16)
  %125 = call ptr @llvm.invariant.start.p0(i64 280, ptr %110)
  %126 = getelementptr ptr, ptr %110, i32 %119
  %127 = getelementptr ptr, ptr %126, i32 4
  %128 = load ptr, ptr %127, align 8
  %129 = getelementptr { ptr, ptr, ptr }, ptr %17, i32 0, i32 0
  store ptr @buffer_typ, ptr %129, align 8
  %130 = getelementptr { ptr, ptr, ptr }, ptr %17, i32 0, i32 1
  store ptr @i32_typ, ptr %130, align 8
  %131 = getelementptr { ptr, ptr, ptr }, ptr %17, i32 0, i32 2
  store ptr @i32_typ, ptr %131, align 8
  %132 = call ptr @behavior_wrapper(ptr %128, { ptr, ptr, ptr, i32 } %120, ptr %17)
  call void %132({ ptr, ptr, ptr, i32 } %120, { ptr, ptr, ptr, i32 } %120, ptr %16, { ptr } %108, i32 5, i32 6)
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %134 = load ptr, ptr %133, align 8
  %135 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %134, 0
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %137 = load ptr, ptr %136, align 8
  %138 = insertvalue { ptr, ptr, ptr, i32 } %135, ptr %137, 1
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %140 = load ptr, ptr %139, align 8
  %141 = insertvalue { ptr, ptr, ptr, i32 } %138, ptr %140, 2
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %143 = load i32, ptr %142, align 4
  %144 = insertvalue { ptr, ptr, ptr, i32 } %141, i32 %143, 3
  %145 = call ptr @llvm.invariant.start.p0(i64 0, ptr %18)
  %146 = call ptr @llvm.invariant.start.p0(i64 280, ptr %134)
  %147 = getelementptr ptr, ptr %134, i32 %143
  %148 = getelementptr ptr, ptr %147, i32 14
  %149 = load ptr, ptr %148, align 8
  %150 = call ptr @behavior_wrapper(ptr %149, { ptr, ptr, ptr, i32 } %144, ptr %19)
  %151 = call { ptr } %150({ ptr, ptr, ptr, i32 } %144, { ptr, ptr, ptr, i32 } %144, ptr %18)
  store { ptr } %151, ptr %20, align 8
  %152 = load ptr, ptr %20, align 8
  %153 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %152)
  br label %154

154:                                              ; preds = %89, %24
  ret void
}

define void @IO__Self_print_xNil(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca ptr, align 8
  %5 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 4))
  store ptr %5, ptr %4, align 8
  %6 = alloca { ptr }, align 8
  %7 = getelementptr { ptr }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %11 = load ptr, ptr %6, align 8
  %12 = load [3 x i8], ptr @epgmn_nil, align 1
  store [3 x i8] %12, ptr %11, align 1
  %13 = alloca [1 x ptr], align 8
  store ptr @String, ptr %13, align 8
  %14 = load ptr, ptr %13, align 8
  %15 = getelementptr ptr, ptr %14, i32 6
  %16 = load ptr, ptr %15, align 8
  %17 = call { i64, i64 } @size_wrapper(ptr %16, ptr %13)
  %18 = extractvalue { i64, i64 } %17, 0
  %19 = call ptr @bump_malloc(i64 %18)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  store ptr @String, ptr %20, align 8
  store ptr %19, ptr %21, align 8
  store i32 9, ptr %22, align 4
  %23 = call ptr @llvm.invariant.start.p0(i64 16, ptr %20)
  %24 = getelementptr { ptr }, ptr %6, i32 0, i32 0
  %25 = load ptr, ptr %24, align 8
  %26 = insertvalue { ptr } undef, ptr %25, 0
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %28 = load ptr, ptr %27, align 8
  %29 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %28, 0
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %31 = load ptr, ptr %30, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } %29, ptr %31, 1
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %34 = load ptr, ptr %33, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr %34, 2
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %37 = load i32, ptr %36, align 4
  %38 = insertvalue { ptr, ptr, ptr, i32 } %35, i32 %37, 3
  %39 = alloca [3 x ptr], align 8
  %40 = getelementptr [3 x ptr], ptr %39, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %40, align 8
  %41 = getelementptr [3 x ptr], ptr %39, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %41, align 8
  %42 = getelementptr [3 x ptr], ptr %39, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %42, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 9, ptr %39)
  %44 = call ptr @llvm.invariant.start.p0(i64 280, ptr %28)
  %45 = getelementptr ptr, ptr %28, i32 %37
  %46 = getelementptr ptr, ptr %45, i32 4
  %47 = load ptr, ptr %46, align 8
  %48 = alloca { ptr, ptr, ptr }, align 8
  %49 = getelementptr { ptr, ptr, ptr }, ptr %48, i32 0, i32 0
  store ptr @buffer_typ, ptr %49, align 8
  %50 = getelementptr { ptr, ptr, ptr }, ptr %48, i32 0, i32 1
  store ptr @i32_typ, ptr %50, align 8
  %51 = getelementptr { ptr, ptr, ptr }, ptr %48, i32 0, i32 2
  store ptr @i32_typ, ptr %51, align 8
  %52 = call ptr @behavior_wrapper(ptr %47, { ptr, ptr, ptr, i32 } %38, ptr %48)
  call void %52({ ptr, ptr, ptr, i32 } %38, { ptr, ptr, ptr, i32 } %38, ptr %39, { ptr } %26, i32 3, i32 4)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %54 = load ptr, ptr %53, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %54, 0
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %57, 1
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } %58, ptr %60, 2
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %63 = load i32, ptr %62, align 4
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, i32 %63, 3
  %65 = alloca [0 x ptr], align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 0, ptr %65)
  %67 = call ptr @llvm.invariant.start.p0(i64 280, ptr %54)
  %68 = getelementptr ptr, ptr %54, i32 %63
  %69 = getelementptr ptr, ptr %68, i32 14
  %70 = load ptr, ptr %69, align 8
  %71 = alloca {}, align 8
  %72 = call ptr @behavior_wrapper(ptr %70, { ptr, ptr, ptr, i32 } %64, ptr %71)
  %73 = call { ptr } %72({ ptr, ptr, ptr, i32 } %64, { ptr, ptr, ptr, i32 } %64, ptr %65)
  %74 = alloca ptr, align 8
  store { ptr } %73, ptr %74, align 8
  %75 = load ptr, ptr %74, align 8
  %76 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %75)
  ret void
}

define void @IO__Self_print_xPtri32(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %5 = load i32, ptr %4, align 4
  %6 = call i32 (ptr, ...) @printf(ptr @i32_string, i32 %5)
  ret void
}

define void @IO__Self_print_xString(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %6 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %9 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %10 = load i160, ptr %8, align 4
  store i160 %10, ptr %9, align 4
  call void @set_offset(ptr %4, ptr @String)
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %12, 0
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 1
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 2
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %21 = load i32, ptr %20, align 4
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, i32 %21, 3
  %23 = alloca [0 x ptr], align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 0, ptr %23)
  %25 = call ptr @llvm.invariant.start.p0(i64 280, ptr %12)
  %26 = getelementptr ptr, ptr %12, i32 %21
  %27 = getelementptr ptr, ptr %26, i32 14
  %28 = load ptr, ptr %27, align 8
  %29 = alloca {}, align 8
  %30 = call ptr @behavior_wrapper(ptr %28, { ptr, ptr, ptr, i32 } %22, ptr %29)
  %31 = call { ptr } %30({ ptr, ptr, ptr, i32 } %22, { ptr, ptr, ptr, i32 } %22, ptr %23)
  %32 = alloca ptr, align 8
  store { ptr } %31, ptr %32, align 8
  %33 = load ptr, ptr %32, align 8
  %34 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %33)
  ret void
}

define void @IO__Self_print_xRepresentable(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %6 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %9 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %10 = load i160, ptr %8, align 4
  store i160 %10, ptr %9, align 4
  call void @set_offset(ptr %4, ptr @Representable)
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %12, 0
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 1
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 2
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %21 = load i32, ptr %20, align 4
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, i32 %21, 3
  %23 = alloca [0 x ptr], align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 0, ptr %23)
  %25 = call ptr @llvm.invariant.start.p0(i64 16, ptr %12)
  %26 = getelementptr ptr, ptr %12, i32 %21
  %27 = load ptr, ptr %26, align 8
  %28 = alloca {}, align 8
  %29 = call ptr @behavior_wrapper(ptr %27, { ptr, ptr, ptr, i32 } %22, ptr %28)
  %30 = call { ptr, ptr, ptr, i32 } %29({ ptr, ptr, ptr, i32 } %22, { ptr, ptr, ptr, i32 } %22, ptr %23)
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %30, ptr %31, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 16, ptr %31)
  %33 = alloca { ptr, ptr, ptr, i32 }, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 0
  %36 = load ptr, ptr %34, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 1
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 2
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 3
  %45 = load i32, ptr %43, align 4
  store i32 %45, ptr %44, align 4
  call void @set_offset(ptr %33, ptr @String)
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 0
  %47 = load ptr, ptr %46, align 8
  %48 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %47, 0
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } %48, ptr %50, 1
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 2
  %53 = load ptr, ptr %52, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %51, ptr %53, 2
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 3
  %56 = load i32, ptr %55, align 4
  %57 = insertvalue { ptr, ptr, ptr, i32 } %54, i32 %56, 3
  %58 = alloca [0 x ptr], align 8
  %59 = call ptr @llvm.invariant.start.p0(i64 0, ptr %58)
  %60 = call ptr @llvm.invariant.start.p0(i64 280, ptr %47)
  %61 = getelementptr ptr, ptr %47, i32 %56
  %62 = getelementptr ptr, ptr %61, i32 14
  %63 = load ptr, ptr %62, align 8
  %64 = alloca {}, align 8
  %65 = call ptr @behavior_wrapper(ptr %63, { ptr, ptr, ptr, i32 } %57, ptr %64)
  %66 = call { ptr } %65({ ptr, ptr, ptr, i32 } %57, { ptr, ptr, ptr, i32 } %57, ptr %58)
  %67 = alloca ptr, align 8
  store { ptr } %66, ptr %67, align 8
  %68 = load ptr, ptr %67, align 8
  %69 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %68)
  ret void
}

define { i64, i64 } @_size_Blocking(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret { i64, i64 } { i64 0, i64 1 }
}

define ptr @Blocking_B_init_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [2 x ptr], ptr %4, i32 0, i32 1
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @Blocking_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Blocking)
  ret void
}

define { i64, i64 } @_size_Channel(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i32 } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr ({ ptr, i32 }, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr ({ ptr, i32 }, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define ptr @Channel_B_init_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [7 x ptr], ptr %4, i32 0, i32 4
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Channel_B_get_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [7 x ptr], ptr %4, i32 0, i32 5
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Channel_B_put_new_valuePtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [7 x ptr], ptr %15, i32 0, i32 6
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define void @Channel_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Channel)
  %19 = alloca i32, align 4
  %20 = alloca ptr, align 8
  store [0 x i8] undef, ptr %19, align 1
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %20, align 4
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %22 = load ptr, ptr %21, align 8
  %23 = load ptr, ptr %6, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 56, ptr %23)
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %26 = load i32, ptr %25, align 4
  %27 = getelementptr ptr, ptr %23, i32 %26
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr { ptr, ptr }, ptr %28, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  %31 = load ptr, ptr %20, align 8
  %32 = insertvalue { ptr, i32 } undef, ptr %31, 0
  %33 = load i32, ptr %19, align 4
  %34 = insertvalue { ptr, i32 } %32, i32 %33, 1
  call void %30(ptr %22, { ptr, i32 } %34) #15
  ret void
}

define i32 @Channel_get_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, i32 }, align 8
  %5 = alloca i32, align 4
  %6 = alloca ptr, align 8
  %7 = alloca [1 x ptr], align 8
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = alloca [0 x ptr], align 8
  %10 = alloca {}, align 8
  %11 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i1, align 1
  %.reg2mem3 = alloca i32, align 4
  %.reg2mem6 = alloca ptr, align 8
  %.reg2mem8 = alloca ptr, align 8
  %.reg2mem10 = alloca ptr, align 8
  %.reg2mem12 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %11, align 8
  %12 = call ptr @llvm.invariant.start.p0(i64 16, ptr %11)
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 0
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 2
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %25 = load i32, ptr %23, align 4
  store i32 %25, ptr %24, align 4
  call void @set_offset(ptr %13, ptr @Channel)
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  store ptr %26, ptr %.reg2mem10, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  store ptr %27, ptr %.reg2mem8, align 8
  %28 = getelementptr { ptr, i32 }, ptr %4, i32 0, i32 0
  store ptr %28, ptr %.reg2mem6, align 8
  br label %29

29:                                               ; preds = %84, %3
  %.reload11 = load ptr, ptr %.reg2mem10, align 8
  %30 = load ptr, ptr %.reload11, align 8
  %31 = load ptr, ptr %13, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 56, ptr %31)
  %.reload9 = load ptr, ptr %.reg2mem8, align 8
  %33 = load i32, ptr %.reload9, align 4
  %34 = getelementptr ptr, ptr %31, i32 %33
  %35 = load ptr, ptr %34, align 8
  %36 = getelementptr { ptr, ptr }, ptr %35, i32 0, i32 0
  %37 = load ptr, ptr %36, align 8
  %38 = call { ptr, i32 } %37(ptr %30) #16
  store { ptr, i32 } %38, ptr %4, align 8
  %.reload7 = load ptr, ptr %.reg2mem6, align 8
  %39 = load ptr, ptr %.reload7, align 8
  %40 = ptrtoint ptr %39 to i64
  %41 = icmp eq i64 %40, ptrtoint (ptr @nil_typ to i64)
  %42 = icmp eq i64 %40, 0
  %43 = or i1 %41, %42
  %44 = icmp eq i1 %43, false
  %45 = zext i1 %44 to i32
  store i32 %45, ptr %.reg2mem3, align 4
  %46 = icmp ne i1 %43, false
  store i1 %46, ptr %.reg2mem1, align 1
  br i1 %44, label %47, label %48

47:                                               ; preds = %29
  br label %83

48:                                               ; preds = %29
  store ptr @Blocking, ptr %7, align 8
  %49 = load ptr, ptr %7, align 8
  %50 = getelementptr ptr, ptr %49, i32 6
  %51 = load ptr, ptr %50, align 8
  %52 = call { i64, i64 } @size_wrapper(ptr %51, ptr %7)
  %53 = extractvalue { i64, i64 } %52, 0
  %54 = call ptr @bump_malloc(i64 %53)
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  store ptr @Blocking, ptr %8, align 8
  store ptr %54, ptr %55, align 8
  store i32 9, ptr %56, align 4
  %57 = call ptr @llvm.invariant.start.p0(i64 16, ptr %8)
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %59 = load ptr, ptr %58, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %59, 0
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %62 = load ptr, ptr %61, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr %62, 1
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %65 = load ptr, ptr %64, align 8
  %66 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %65, 2
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %68 = load i32, ptr %67, align 4
  %69 = insertvalue { ptr, ptr, ptr, i32 } %66, i32 %68, 3
  %70 = call ptr @llvm.invariant.start.p0(i64 0, ptr %9)
  %71 = call ptr @llvm.invariant.start.p0(i64 16, ptr %59)
  %72 = getelementptr ptr, ptr %59, i32 %68
  %73 = load ptr, ptr %72, align 8
  %74 = call ptr @behavior_wrapper(ptr %73, { ptr, ptr, ptr, i32 } %69, ptr %10)
  call void %74({ ptr, ptr, ptr, i32 } %69, { ptr, ptr, ptr, i32 } %69, ptr %9)
  %75 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 0
  %76 = load ptr, ptr %75, align 8
  %77 = insertvalue { ptr, i160 } undef, ptr %76, 0
  %78 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 1
  %79 = load i160, ptr %78, align 4
  %80 = insertvalue { ptr, i160 } %77, i160 %79, 1
  %81 = call ptr @get_current_coroutine()
  %82 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %81, i32 0, i32 4
  store { ptr, i160 } %80, ptr %82, align 8
  call void @coroutine_yield(ptr %81)
  br label %83

83:                                               ; preds = %48, %47
  %.reload2 = load i1, ptr %.reg2mem1, align 1
  %.reload5 = load i32, ptr %.reg2mem3, align 4
  br i1 %.reload2, label %84, label %85

84:                                               ; preds = %83
  br label %29

85:                                               ; preds = %83
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  %86 = zext i32 %.reload4 to i64
  %87 = trunc i64 %86 to i32
  switch i32 %87, label %105 [
    i32 1, label %88
  ]

88:                                               ; preds = %85
  %89 = getelementptr { ptr, i32 }, ptr %4, i32 0, i32 1
  %90 = load i32, ptr %89, align 4
  store i32 %90, ptr %.reg2mem, align 4
  store [0 x i8] undef, ptr %5, align 1
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %6, align 4
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %92 = load ptr, ptr %91, align 8
  %93 = load ptr, ptr %13, align 8
  %94 = call ptr @llvm.invariant.start.p0(i64 56, ptr %93)
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %96 = load i32, ptr %95, align 4
  %97 = getelementptr ptr, ptr %93, i32 %96
  %98 = load ptr, ptr %97, align 8
  %99 = getelementptr { ptr, ptr }, ptr %98, i32 0, i32 1
  %100 = load ptr, ptr %99, align 8
  %101 = load ptr, ptr %6, align 8
  %102 = insertvalue { ptr, i32 } undef, ptr %101, 0
  %103 = load i32, ptr %5, align 4
  %104 = insertvalue { ptr, i32 } %102, i32 %103, 1
  call void %100(ptr %92, { ptr, i32 } %104) #15
  %.reload = load i32, ptr %.reg2mem, align 4
  store i32 %.reload, ptr %.reg2mem12, align 4
  br label %106

105:                                              ; preds = %85
  store i32 poison, ptr %.reg2mem12, align 4
  br label %106

106:                                              ; preds = %105, %88
  %.reload13 = load i32, ptr %.reg2mem12, align 4
  ret i32 %.reload13
}

define void @Channel_put_new_valuePtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca [1 x ptr], align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = alloca [0 x ptr], align 8
  %8 = alloca {}, align 8
  %9 = alloca { ptr, i32 }, align 8
  %10 = alloca i32, align 4
  %11 = alloca ptr, align 8
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem3 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %12, align 8
  %13 = call ptr @llvm.invariant.start.p0(i64 16, ptr %12)
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 0
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 2
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %26 = load i32, ptr %24, align 4
  store i32 %26, ptr %25, align 4
  call void @set_offset(ptr %14, ptr @Channel)
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = load ptr, ptr %14, align 8
  %30 = call ptr @llvm.invariant.start.p0(i64 56, ptr %29)
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %32 = load i32, ptr %31, align 4
  %33 = getelementptr ptr, ptr %29, i32 %32
  %34 = load ptr, ptr %33, align 8
  %35 = getelementptr { ptr, ptr }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %35, align 8
  %37 = call { ptr, i32 } %36(ptr %28) #16
  %38 = alloca { ptr, i32 }, align 8
  store { ptr, i32 } %37, ptr %38, align 8
  %39 = getelementptr { ptr, i32 }, ptr %38, i32 0, i32 0
  store ptr %39, ptr %.reg2mem3, align 8
  br label %40

40:                                               ; preds = %._crit_edge1, %4
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %41 = load ptr, ptr %.reload4, align 8
  %42 = ptrtoint ptr %41 to i64
  %43 = icmp eq i64 %42, ptrtoint (ptr @nil_typ to i64)
  %44 = icmp eq i64 %42, 0
  %45 = or i1 %43, %44
  %46 = icmp eq i1 %45, false
  store i1 %46, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %47, label %._crit_edge

._crit_edge:                                      ; preds = %40
  br label %99

47:                                               ; preds = %40
  store ptr @Blocking, ptr %5, align 8
  %48 = load ptr, ptr %5, align 8
  %49 = getelementptr ptr, ptr %48, i32 6
  %50 = load ptr, ptr %49, align 8
  %51 = call { i64, i64 } @size_wrapper(ptr %50, ptr %5)
  %52 = extractvalue { i64, i64 } %51, 0
  %53 = call ptr @bump_malloc(i64 %52)
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  store ptr @Blocking, ptr %6, align 8
  store ptr %53, ptr %54, align 8
  store i32 9, ptr %55, align 4
  %56 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %58 = load ptr, ptr %57, align 8
  %59 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %58, 0
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %61 = load ptr, ptr %60, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } %59, ptr %61, 1
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %64 = load ptr, ptr %63, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %62, ptr %64, 2
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %67 = load i32, ptr %66, align 4
  %68 = insertvalue { ptr, ptr, ptr, i32 } %65, i32 %67, 3
  %69 = call ptr @llvm.invariant.start.p0(i64 0, ptr %7)
  %70 = call ptr @llvm.invariant.start.p0(i64 16, ptr %58)
  %71 = getelementptr ptr, ptr %58, i32 %67
  %72 = load ptr, ptr %71, align 8
  %73 = call ptr @behavior_wrapper(ptr %72, { ptr, ptr, ptr, i32 } %68, ptr %8)
  call void %73({ ptr, ptr, ptr, i32 } %68, { ptr, ptr, ptr, i32 } %68, ptr %7)
  %74 = getelementptr { ptr, i160 }, ptr %6, i32 0, i32 0
  %75 = load ptr, ptr %74, align 8
  %76 = insertvalue { ptr, i160 } undef, ptr %75, 0
  %77 = getelementptr { ptr, i160 }, ptr %6, i32 0, i32 1
  %78 = load i160, ptr %77, align 4
  %79 = insertvalue { ptr, i160 } %76, i160 %78, 1
  %80 = call ptr @get_current_coroutine()
  %81 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %80, i32 0, i32 4
  store { ptr, i160 } %79, ptr %81, align 8
  call void @coroutine_yield(ptr %80)
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %83 = load ptr, ptr %82, align 8
  %84 = load ptr, ptr %14, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 56, ptr %84)
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %87 = load i32, ptr %86, align 4
  %88 = getelementptr ptr, ptr %84, i32 %87
  %89 = load ptr, ptr %88, align 8
  %90 = getelementptr { ptr, ptr }, ptr %89, i32 0, i32 0
  %91 = load ptr, ptr %90, align 8
  %92 = call { ptr, i32 } %91(ptr %83) #16
  store { ptr, i32 } %92, ptr %9, align 8
  %93 = getelementptr { ptr, i32 }, ptr %9, i32 0, i32 0
  %94 = getelementptr { ptr, i32 }, ptr %38, i32 0, i32 0
  %95 = load ptr, ptr %93, align 8
  store ptr %95, ptr %94, align 8
  %96 = getelementptr { ptr, i32 }, ptr %9, i32 0, i32 1
  %97 = getelementptr { ptr, i32 }, ptr %38, i32 0, i32 1
  %98 = load i32, ptr %96, align 4
  store i32 %98, ptr %97, align 4
  br label %99

99:                                               ; preds = %._crit_edge, %47
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %100

._crit_edge1:                                     ; preds = %99
  br label %40

100:                                              ; preds = %99
  store i32 %3, ptr %10, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %11, align 4
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %102 = load ptr, ptr %101, align 8
  %103 = load ptr, ptr %14, align 8
  %104 = call ptr @llvm.invariant.start.p0(i64 56, ptr %103)
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %106 = load i32, ptr %105, align 4
  %107 = getelementptr ptr, ptr %103, i32 %106
  %108 = load ptr, ptr %107, align 8
  %109 = getelementptr { ptr, ptr }, ptr %108, i32 0, i32 1
  %110 = load ptr, ptr %109, align 8
  %111 = load ptr, ptr %11, align 8
  %112 = insertvalue { ptr, i32 } undef, ptr %111, 0
  %113 = load i32, ptr %10, align 4
  %114 = insertvalue { ptr, i32 } %112, i32 %113, 1
  call void %110(ptr %102, { ptr, i32 } %114) #15
  ret void
}

define { ptr, i32 } @Channel_getter_value(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = getelementptr { ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load i32, ptr %6, align 4
  %8 = insertvalue { ptr, i32 } %5, i32 %7, 1
  ret { ptr, i32 } %8
}

define void @Channel_setter_value(ptr %0, { ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca { ptr, i32 }, align 8
  store { ptr, i32 } %1, ptr %4, align 8
  %5 = getelementptr { ptr, i32 }, ptr %4, i32 0, i32 0
  %6 = getelementptr { ptr, i32 }, ptr %3, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, i32 }, ptr %4, i32 0, i32 1
  %9 = getelementptr { ptr, i32 }, ptr %3, i32 0, i32 1
  %10 = load i32, ptr %8, align 4
  store i32 %10, ptr %9, align 4
  ret void
}

define { i64, i64 } @_size_IntIterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret { i64, i64 } { i64 0, i64 1 }
}

define { i64, i64 } @_size_IntIterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret { i64, i64 } { i64 0, i64 1 }
}

define { i64, i64 } @_size_MapIterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %10
  %12 = urem i64 %11, %5
  %13 = icmp eq i64 %12, 0
  %14 = sub i64 %5, %12
  %15 = select i1 %13, i64 0, i64 %14
  %16 = add i64 %11, %15
  %17 = insertvalue { i64, i64 } undef, i64 %16, 0
  %18 = insertvalue { i64, i64 } %17, i64 %5, 1
  ret { i64, i64 } %18
}

define ptr @MapIterable_B_init_iterableIntIterable_fFunctionPtri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [52 x ptr], ptr %26, i32 0, i32 14
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @MapIterable_B_each_fFunctionPtri32_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 15
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @MapIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [52 x ptr], ptr %26, i32 0, i32 16
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @MapIterable_B_all_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 17
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @MapIterable_B_any_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 18
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @MapIterable_B_map_fFunctionPtri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 19
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @MapIterable_B_filter_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 20
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @MapIterable_B_chain_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 21
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @MapIterable_B_interleave_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 22
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @MapIterable_B_zip_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 23
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @MapIterable_B_product_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 24
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @MapIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [52 x ptr], ptr %4, i32 0, i32 25
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @MapIterable_init_iterableIntIterable_fFunctionPtri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @MapIterable)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @IntIterable)
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %45 = load ptr, ptr %43, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %48 = load i32, ptr %46, align 4
  store i32 %48, ptr %47, align 4
  call void @set_offset(ptr %36, ptr @IntIterable)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %8, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 416, ptr %51)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = getelementptr ptr, ptr %51, i32 %54
  %56 = load ptr, ptr %55, align 8
  %57 = getelementptr { ptr, ptr }, ptr %56, i32 0, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %63 = load ptr, ptr %62, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %63, 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %66 = load ptr, ptr %65, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %66, 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %69 = load i32, ptr %68, align 4
  %70 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %69, 3
  call void %58(ptr %50, { ptr, ptr, ptr, i32 } %70) #15
  %71 = alloca ptr, align 8
  store { ptr } %4, ptr %71, align 8
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %73 = load ptr, ptr %72, align 8
  %74 = load ptr, ptr %8, align 8
  %75 = call ptr @llvm.invariant.start.p0(i64 416, ptr %74)
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %77 = load i32, ptr %76, align 4
  %78 = getelementptr ptr, ptr %74, i32 %77
  %79 = getelementptr ptr, ptr %78, i32 1
  %80 = load ptr, ptr %79, align 8
  %81 = getelementptr { ptr, ptr }, ptr %80, i32 0, i32 1
  %82 = load ptr, ptr %81, align 8
  %83 = load ptr, ptr %71, align 8
  %84 = insertvalue { ptr } undef, ptr %83, 0
  call void %82(ptr %73, { ptr } %84) #15
  ret void
}

define void @IntIterable_each_fFunctionPtri32_to_Nothing({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca [0 x ptr], align 8
  %6 = alloca {}, align 8
  %7 = alloca { ptr, i32 }, align 8
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem5 = alloca ptr, align 8
  %.reg2mem7 = alloca ptr, align 8
  %.reg2mem9 = alloca ptr, align 8
  %.reg2mem11 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %8, align 8
  %9 = call ptr @llvm.invariant.start.p0(i64 16, ptr %8)
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 0
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 2
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  %22 = load i32, ptr %20, align 4
  store i32 %22, ptr %21, align 4
  call void @set_offset(ptr %10, ptr @IntIterable)
  %23 = alloca ptr, align 8
  store { ptr } %3, ptr %23, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 0
  %25 = load ptr, ptr %24, align 8
  %26 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %25, 0
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = insertvalue { ptr, ptr, ptr, i32 } %26, ptr %28, 1
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 2
  %31 = load ptr, ptr %30, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } %29, ptr %31, 2
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  %34 = load i32, ptr %33, align 4
  %35 = insertvalue { ptr, ptr, ptr, i32 } %32, i32 %34, 3
  %36 = alloca [0 x ptr], align 8
  %37 = call ptr @llvm.invariant.start.p0(i64 0, ptr %36)
  %38 = call ptr @llvm.invariant.start.p0(i64 192, ptr %25)
  %39 = getelementptr ptr, ptr %25, i32 %34
  %40 = getelementptr ptr, ptr %39, i32 10
  %41 = load ptr, ptr %40, align 8
  %42 = alloca {}, align 8
  %43 = call ptr @behavior_wrapper(ptr %41, { ptr, ptr, ptr, i32 } %35, ptr %42)
  %44 = call { ptr, ptr, ptr, i32 } %43({ ptr, ptr, ptr, i32 } %35, { ptr, ptr, ptr, i32 } %35, ptr %36)
  %45 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %44, ptr %45, align 8
  %46 = call ptr @llvm.invariant.start.p0(i64 16, ptr %45)
  %47 = alloca { ptr, ptr, ptr, i32 }, align 8
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 0
  %50 = load ptr, ptr %48, align 8
  store ptr %50, ptr %49, align 8
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 1
  %53 = load ptr, ptr %51, align 8
  store ptr %53, ptr %52, align 8
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 2
  %56 = load ptr, ptr %54, align 8
  store ptr %56, ptr %55, align 8
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 3
  %59 = load i32, ptr %57, align 4
  store i32 %59, ptr %58, align 4
  call void @set_offset(ptr %47, ptr @IntIterator)
  %60 = alloca { ptr, ptr, ptr, i32 }, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %63 = load ptr, ptr %61, align 8
  store ptr %63, ptr %62, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %66 = load ptr, ptr %64, align 8
  store ptr %66, ptr %65, align 8
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %69 = load ptr, ptr %67, align 8
  store ptr %69, ptr %68, align 8
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 3
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %72 = load i32, ptr %70, align 4
  store i32 %72, ptr %71, align 4
  call void @set_offset(ptr %60, ptr @IntIterator)
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %76 = load ptr, ptr %74, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %79 = load ptr, ptr %77, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %82 = load ptr, ptr %80, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %85 = load i32, ptr %83, align 4
  store i32 %85, ptr %84, align 4
  %86 = call ptr @llvm.invariant.start.p0(i64 16, ptr %73)
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  store ptr %87, ptr %.reg2mem11, align 8
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  store ptr %88, ptr %.reg2mem9, align 8
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  store ptr %89, ptr %.reg2mem7, align 8
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  store ptr %90, ptr %.reg2mem5, align 8
  %91 = getelementptr { ptr, i32 }, ptr %7, i32 0, i32 0
  store ptr %91, ptr %.reg2mem3, align 8
  br label %92

92:                                               ; preds = %._crit_edge1, %4
  %.reload12 = load ptr, ptr %.reg2mem11, align 8
  %93 = load ptr, ptr %.reload12, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %93, 0
  %.reload10 = load ptr, ptr %.reg2mem9, align 8
  %95 = load ptr, ptr %.reload10, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr %95, 1
  %.reload8 = load ptr, ptr %.reg2mem7, align 8
  %97 = load ptr, ptr %.reload8, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } %96, ptr %97, 2
  %.reload6 = load ptr, ptr %.reg2mem5, align 8
  %99 = load i32, ptr %.reload6, align 4
  %100 = insertvalue { ptr, ptr, ptr, i32 } %98, i32 %99, 3
  %101 = call ptr @llvm.invariant.start.p0(i64 0, ptr %5)
  %102 = call ptr @llvm.invariant.start.p0(i64 16, ptr %93)
  %103 = getelementptr ptr, ptr %93, i32 %99
  %104 = load ptr, ptr %103, align 8
  %105 = call ptr @behavior_wrapper(ptr %104, { ptr, ptr, ptr, i32 } %100, ptr %6)
  %106 = call { ptr, i32 } %105({ ptr, ptr, ptr, i32 } %100, { ptr, ptr, ptr, i32 } %100, ptr %5)
  store { ptr, i32 } %106, ptr %7, align 8
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %107 = load ptr, ptr %.reload4, align 8
  %108 = ptrtoint ptr %107 to i64
  %109 = icmp eq i64 %108, ptrtoint (ptr @nil_typ to i64)
  %110 = icmp eq i64 %108, 0
  %111 = or i1 %109, %110
  %112 = icmp eq i1 %111, false
  store i1 %112, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %113, label %._crit_edge

._crit_edge:                                      ; preds = %92
  br label %117

113:                                              ; preds = %92
  %114 = getelementptr { ptr, i32 }, ptr %7, i32 0, i32 1
  %115 = load i32, ptr %114, align 4
  %116 = load ptr, ptr %23, align 8
  call void %116(i32 %115)
  store i32 %115, ptr %7, align 4
  br label %117

117:                                              ; preds = %._crit_edge, %113
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %118

._crit_edge1:                                     ; preds = %117
  br label %92

118:                                              ; preds = %117
  ret void
}

define i32 @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3, { ptr } %4) {
  %6 = alloca [0 x ptr], align 8
  %7 = alloca {}, align 8
  %8 = alloca { ptr, i32 }, align 8
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i32, align 4
  %.reg2mem5 = alloca i1, align 1
  %.reg2mem8 = alloca i32, align 4
  %.reg2mem12 = alloca ptr, align 8
  %.reg2mem14 = alloca ptr, align 8
  %.reg2mem16 = alloca ptr, align 8
  %.reg2mem18 = alloca ptr, align 8
  %.reg2mem20 = alloca ptr, align 8
  %.reg2mem22 = alloca i32, align 4
  %.reg2mem24 = alloca i32, align 4
  %.reg2mem26 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %9, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 16, ptr %9)
  %11 = alloca { ptr, ptr, ptr, i32 }, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 0
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 2
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %23 = load i32, ptr %21, align 4
  store i32 %23, ptr %22, align 4
  call void @set_offset(ptr %11, ptr @IntIterable)
  %24 = alloca ptr, align 8
  store { ptr } %4, ptr %24, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %26, 0
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %29 = load ptr, ptr %28, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } %27, ptr %29, 1
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 2
  %32 = load ptr, ptr %31, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %32, 2
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %35 = load i32, ptr %34, align 4
  %36 = insertvalue { ptr, ptr, ptr, i32 } %33, i32 %35, 3
  %37 = alloca [0 x ptr], align 8
  %38 = call ptr @llvm.invariant.start.p0(i64 0, ptr %37)
  %39 = call ptr @llvm.invariant.start.p0(i64 192, ptr %26)
  %40 = getelementptr ptr, ptr %26, i32 %35
  %41 = getelementptr ptr, ptr %40, i32 10
  %42 = load ptr, ptr %41, align 8
  %43 = alloca {}, align 8
  %44 = call ptr @behavior_wrapper(ptr %42, { ptr, ptr, ptr, i32 } %36, ptr %43)
  %45 = call { ptr, ptr, ptr, i32 } %44({ ptr, ptr, ptr, i32 } %36, { ptr, ptr, ptr, i32 } %36, ptr %37)
  %46 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %45, ptr %46, align 8
  %47 = call ptr @llvm.invariant.start.p0(i64 16, ptr %46)
  %48 = alloca { ptr, ptr, ptr, i32 }, align 8
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 0
  %51 = load ptr, ptr %49, align 8
  store ptr %51, ptr %50, align 8
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 1
  %54 = load ptr, ptr %52, align 8
  store ptr %54, ptr %53, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 2
  %57 = load ptr, ptr %55, align 8
  store ptr %57, ptr %56, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 3
  %60 = load i32, ptr %58, align 4
  store i32 %60, ptr %59, align 4
  call void @set_offset(ptr %48, ptr @IntIterator)
  %61 = alloca { ptr, ptr, ptr, i32 }, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 0
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 0
  %64 = load ptr, ptr %62, align 8
  store ptr %64, ptr %63, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 1
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 1
  %67 = load ptr, ptr %65, align 8
  store ptr %67, ptr %66, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 2
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 2
  %70 = load ptr, ptr %68, align 8
  store ptr %70, ptr %69, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 3
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 3
  %73 = load i32, ptr %71, align 4
  store i32 %73, ptr %72, align 4
  call void @set_offset(ptr %61, ptr @IntIterator)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 0
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 1
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 2
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %83 = load ptr, ptr %81, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 3
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %86 = load i32, ptr %84, align 4
  store i32 %86, ptr %85, align 4
  %87 = call ptr @llvm.invariant.start.p0(i64 16, ptr %74)
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  store ptr %88, ptr %.reg2mem20, align 8
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  store ptr %89, ptr %.reg2mem18, align 8
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  store ptr %90, ptr %.reg2mem16, align 8
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  store ptr %91, ptr %.reg2mem14, align 8
  %92 = getelementptr { ptr, i32 }, ptr %8, i32 0, i32 0
  store ptr %92, ptr %.reg2mem12, align 8
  store i32 %3, ptr %.reg2mem26, align 4
  br label %93

93:                                               ; preds = %122, %5
  %.reload27 = load i32, ptr %.reg2mem26, align 4
  store i32 %.reload27, ptr %.reg2mem8, align 4
  %.reload21 = load ptr, ptr %.reg2mem20, align 8
  %94 = load ptr, ptr %.reload21, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %94, 0
  %.reload19 = load ptr, ptr %.reg2mem18, align 8
  %96 = load ptr, ptr %.reload19, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %96, 1
  %.reload17 = load ptr, ptr %.reg2mem16, align 8
  %98 = load ptr, ptr %.reload17, align 8
  %99 = insertvalue { ptr, ptr, ptr, i32 } %97, ptr %98, 2
  %.reload15 = load ptr, ptr %.reg2mem14, align 8
  %100 = load i32, ptr %.reload15, align 4
  %101 = insertvalue { ptr, ptr, ptr, i32 } %99, i32 %100, 3
  %102 = call ptr @llvm.invariant.start.p0(i64 0, ptr %6)
  %103 = call ptr @llvm.invariant.start.p0(i64 16, ptr %94)
  %104 = getelementptr ptr, ptr %94, i32 %100
  %105 = load ptr, ptr %104, align 8
  %106 = call ptr @behavior_wrapper(ptr %105, { ptr, ptr, ptr, i32 } %101, ptr %7)
  %107 = call { ptr, i32 } %106({ ptr, ptr, ptr, i32 } %101, { ptr, ptr, ptr, i32 } %101, ptr %6)
  store { ptr, i32 } %107, ptr %8, align 8
  %.reload13 = load ptr, ptr %.reg2mem12, align 8
  %108 = load ptr, ptr %.reload13, align 8
  %109 = ptrtoint ptr %108 to i64
  %110 = icmp eq i64 %109, ptrtoint (ptr @nil_typ to i64)
  %111 = icmp eq i64 %109, 0
  %112 = or i1 %110, %111
  %113 = icmp eq i1 %112, false
  store i1 %113, ptr %.reg2mem5, align 1
  %.reload7 = load i1, ptr %.reg2mem5, align 1
  br i1 %.reload7, label %114, label %119

114:                                              ; preds = %93
  %115 = getelementptr { ptr, i32 }, ptr %8, i32 0, i32 1
  %116 = load i32, ptr %115, align 4
  %117 = load ptr, ptr %24, align 8
  %.reload11 = load i32, ptr %.reg2mem8, align 4
  %118 = call i32 %117(i32 %.reload11, i32 %116)
  store i32 %118, ptr %.reg2mem3, align 4
  store i32 %116, ptr %8, align 4
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  store i32 %.reload4, ptr %.reg2mem24, align 4
  br label %120

119:                                              ; preds = %93
  store i32 poison, ptr %.reg2mem24, align 4
  br label %120

120:                                              ; preds = %119, %114
  %.reload25 = load i32, ptr %.reg2mem24, align 4
  store i32 %.reload25, ptr %.reg2mem1, align 4
  br label %121

121:                                              ; preds = %120
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  %.reload6 = load i1, ptr %.reg2mem5, align 1
  %.reload10 = load i32, ptr %.reg2mem8, align 4
  store i32 %.reload2, ptr %.reg2mem22, align 4
  br i1 %.reload6, label %122, label %123

122:                                              ; preds = %121
  %.reload23 = load i32, ptr %.reg2mem22, align 4
  store i32 %.reload23, ptr %.reg2mem, align 4
  %.reload = load i32, ptr %.reg2mem, align 4
  store i32 %.reload, ptr %.reg2mem26, align 4
  br label %93

123:                                              ; preds = %121
  %.reload9 = load i32, ptr %.reg2mem8, align 4
  ret i32 %.reload9
}

define i1 @IntIterable_all_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca [0 x ptr], align 8
  %6 = alloca {}, align 8
  %7 = alloca { ptr, i32 }, align 8
  %8 = alloca i1, align 1
  %9 = alloca i1, align 1
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem7 = alloca i1, align 1
  %.reg2mem10 = alloca ptr, align 8
  %.reg2mem12 = alloca ptr, align 8
  %.reg2mem14 = alloca ptr, align 8
  %.reg2mem16 = alloca ptr, align 8
  %.reg2mem18 = alloca ptr, align 8
  %.reg2mem20 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %10, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 16, ptr %10)
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 0
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 0
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 2
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 2
  %21 = load ptr, ptr %19, align 8
  store ptr %21, ptr %20, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  %24 = load i32, ptr %22, align 4
  store i32 %24, ptr %23, align 4
  call void @set_offset(ptr %12, ptr @IntIterable)
  %25 = alloca ptr, align 8
  store { ptr } %3, ptr %25, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 0
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %27, 0
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, ptr %30, 1
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 2
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %33, 2
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  %36 = load i32, ptr %35, align 4
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, i32 %36, 3
  %38 = alloca [0 x ptr], align 8
  %39 = call ptr @llvm.invariant.start.p0(i64 0, ptr %38)
  %40 = call ptr @llvm.invariant.start.p0(i64 192, ptr %27)
  %41 = getelementptr ptr, ptr %27, i32 %36
  %42 = getelementptr ptr, ptr %41, i32 10
  %43 = load ptr, ptr %42, align 8
  %44 = alloca {}, align 8
  %45 = call ptr @behavior_wrapper(ptr %43, { ptr, ptr, ptr, i32 } %37, ptr %44)
  %46 = call { ptr, ptr, ptr, i32 } %45({ ptr, ptr, ptr, i32 } %37, { ptr, ptr, ptr, i32 } %37, ptr %38)
  %47 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %46, ptr %47, align 8
  %48 = call ptr @llvm.invariant.start.p0(i64 16, ptr %47)
  %49 = alloca { ptr, ptr, ptr, i32 }, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 0
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 0
  %52 = load ptr, ptr %50, align 8
  store ptr %52, ptr %51, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 1
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 1
  %55 = load ptr, ptr %53, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 2
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 2
  %58 = load ptr, ptr %56, align 8
  store ptr %58, ptr %57, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 3
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 3
  %61 = load i32, ptr %59, align 4
  store i32 %61, ptr %60, align 4
  call void @set_offset(ptr %49, ptr @IntIterator)
  %62 = alloca { ptr, ptr, ptr, i32 }, align 8
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 0
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 0
  %65 = load ptr, ptr %63, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 1
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 1
  %68 = load ptr, ptr %66, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 2
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 2
  %71 = load ptr, ptr %69, align 8
  store ptr %71, ptr %70, align 8
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 3
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 3
  %74 = load i32, ptr %72, align 4
  store i32 %74, ptr %73, align 4
  call void @set_offset(ptr %62, ptr @IntIterator)
  %75 = alloca { ptr, ptr, ptr, i32 }, align 8
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 0
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 0
  %78 = load ptr, ptr %76, align 8
  store ptr %78, ptr %77, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 1
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 1
  %81 = load ptr, ptr %79, align 8
  store ptr %81, ptr %80, align 8
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 2
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 2
  %84 = load ptr, ptr %82, align 8
  store ptr %84, ptr %83, align 8
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 3
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 3
  %87 = load i32, ptr %85, align 4
  store i32 %87, ptr %86, align 4
  %88 = call ptr @llvm.invariant.start.p0(i64 16, ptr %75)
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 0
  store ptr %89, ptr %.reg2mem18, align 8
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 1
  store ptr %90, ptr %.reg2mem16, align 8
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 2
  store ptr %91, ptr %.reg2mem14, align 8
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 3
  store ptr %92, ptr %.reg2mem12, align 8
  %93 = getelementptr { ptr, i32 }, ptr %7, i32 0, i32 0
  store ptr %93, ptr %.reg2mem10, align 8
  br label %94

94:                                               ; preds = %127, %4
  %.reload19 = load ptr, ptr %.reg2mem18, align 8
  %95 = load ptr, ptr %.reload19, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %95, 0
  %.reload17 = load ptr, ptr %.reg2mem16, align 8
  %97 = load ptr, ptr %.reload17, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } %96, ptr %97, 1
  %.reload15 = load ptr, ptr %.reg2mem14, align 8
  %99 = load ptr, ptr %.reload15, align 8
  %100 = insertvalue { ptr, ptr, ptr, i32 } %98, ptr %99, 2
  %.reload13 = load ptr, ptr %.reg2mem12, align 8
  %101 = load i32, ptr %.reload13, align 4
  %102 = insertvalue { ptr, ptr, ptr, i32 } %100, i32 %101, 3
  %103 = call ptr @llvm.invariant.start.p0(i64 0, ptr %5)
  %104 = call ptr @llvm.invariant.start.p0(i64 16, ptr %95)
  %105 = getelementptr ptr, ptr %95, i32 %101
  %106 = load ptr, ptr %105, align 8
  %107 = call ptr @behavior_wrapper(ptr %106, { ptr, ptr, ptr, i32 } %102, ptr %6)
  %108 = call { ptr, i32 } %107({ ptr, ptr, ptr, i32 } %102, { ptr, ptr, ptr, i32 } %102, ptr %5)
  store { ptr, i32 } %108, ptr %7, align 8
  %.reload11 = load ptr, ptr %.reg2mem10, align 8
  %109 = load ptr, ptr %.reload11, align 8
  %110 = ptrtoint ptr %109 to i64
  %111 = icmp eq i64 %110, ptrtoint (ptr @nil_typ to i64)
  %112 = icmp eq i64 %110, 0
  %113 = or i1 %111, %112
  %114 = icmp eq i1 %113, false
  %115 = icmp ne i1 %113, false
  store i1 %115, ptr %.reg2mem7, align 1
  %116 = select i1 %114, ptr %8, ptr %9
  store ptr %116, ptr %.reg2mem3, align 8
  br i1 %114, label %117, label %123

117:                                              ; preds = %94
  %118 = getelementptr { ptr, i32 }, ptr %7, i32 0, i32 1
  %119 = load i32, ptr %118, align 4
  %120 = load ptr, ptr %25, align 8
  %121 = call i1 %120(i32 %119)
  %122 = zext i1 %121 to i32
  store i32 %122, ptr %.reg2mem1, align 4
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem20, align 4
  br label %124

123:                                              ; preds = %94
  store i32 0, ptr %.reg2mem20, align 4
  br label %124

124:                                              ; preds = %123, %117
  %.reload21 = load i32, ptr %.reg2mem20, align 4
  store i32 %.reload21, ptr %.reg2mem, align 4
  br label %125

125:                                              ; preds = %124
  %.reload = load i32, ptr %.reg2mem, align 4
  %126 = trunc i32 %.reload to i1
  %.reload6 = load ptr, ptr %.reg2mem3, align 8
  %.reload9 = load i1, ptr %.reg2mem7, align 1
  br i1 %126, label %127, label %128

127:                                              ; preds = %125
  br label %94

128:                                              ; preds = %125
  %.reload5 = load ptr, ptr %.reg2mem3, align 8
  %.reload8 = load i1, ptr %.reg2mem7, align 1
  store i1 %.reload8, ptr %.reload5, align 1
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %129 = load i1, ptr %.reload4, align 1
  ret i1 %129
}

define i1 @IntIterable_any_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca [0 x ptr], align 8
  %6 = alloca {}, align 8
  %7 = alloca { ptr, i32 }, align 8
  %8 = alloca i1, align 1
  %9 = alloca i1, align 1
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i32, align 4
  %.reg2mem6 = alloca ptr, align 8
  %.reg2mem10 = alloca i1, align 1
  %.reg2mem15 = alloca ptr, align 8
  %.reg2mem17 = alloca ptr, align 8
  %.reg2mem19 = alloca ptr, align 8
  %.reg2mem21 = alloca ptr, align 8
  %.reg2mem23 = alloca ptr, align 8
  %.reg2mem25 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %10, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 16, ptr %10)
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 0
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 0
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 2
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 2
  %21 = load ptr, ptr %19, align 8
  store ptr %21, ptr %20, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  %24 = load i32, ptr %22, align 4
  store i32 %24, ptr %23, align 4
  call void @set_offset(ptr %12, ptr @IntIterable)
  %25 = alloca ptr, align 8
  store { ptr } %3, ptr %25, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 0
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %27, 0
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, ptr %30, 1
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 2
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %33, 2
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  %36 = load i32, ptr %35, align 4
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, i32 %36, 3
  %38 = alloca [0 x ptr], align 8
  %39 = call ptr @llvm.invariant.start.p0(i64 0, ptr %38)
  %40 = call ptr @llvm.invariant.start.p0(i64 192, ptr %27)
  %41 = getelementptr ptr, ptr %27, i32 %36
  %42 = getelementptr ptr, ptr %41, i32 10
  %43 = load ptr, ptr %42, align 8
  %44 = alloca {}, align 8
  %45 = call ptr @behavior_wrapper(ptr %43, { ptr, ptr, ptr, i32 } %37, ptr %44)
  %46 = call { ptr, ptr, ptr, i32 } %45({ ptr, ptr, ptr, i32 } %37, { ptr, ptr, ptr, i32 } %37, ptr %38)
  %47 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %46, ptr %47, align 8
  %48 = call ptr @llvm.invariant.start.p0(i64 16, ptr %47)
  %49 = alloca { ptr, ptr, ptr, i32 }, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 0
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 0
  %52 = load ptr, ptr %50, align 8
  store ptr %52, ptr %51, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 1
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 1
  %55 = load ptr, ptr %53, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 2
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 2
  %58 = load ptr, ptr %56, align 8
  store ptr %58, ptr %57, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 3
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 3
  %61 = load i32, ptr %59, align 4
  store i32 %61, ptr %60, align 4
  call void @set_offset(ptr %49, ptr @IntIterator)
  %62 = alloca { ptr, ptr, ptr, i32 }, align 8
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 0
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 0
  %65 = load ptr, ptr %63, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 1
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 1
  %68 = load ptr, ptr %66, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 2
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 2
  %71 = load ptr, ptr %69, align 8
  store ptr %71, ptr %70, align 8
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 3
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 3
  %74 = load i32, ptr %72, align 4
  store i32 %74, ptr %73, align 4
  call void @set_offset(ptr %62, ptr @IntIterator)
  %75 = alloca { ptr, ptr, ptr, i32 }, align 8
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 0
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 0
  %78 = load ptr, ptr %76, align 8
  store ptr %78, ptr %77, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 1
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 1
  %81 = load ptr, ptr %79, align 8
  store ptr %81, ptr %80, align 8
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 2
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 2
  %84 = load ptr, ptr %82, align 8
  store ptr %84, ptr %83, align 8
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 3
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 3
  %87 = load i32, ptr %85, align 4
  store i32 %87, ptr %86, align 4
  %88 = call ptr @llvm.invariant.start.p0(i64 16, ptr %75)
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 0
  store ptr %89, ptr %.reg2mem23, align 8
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 1
  store ptr %90, ptr %.reg2mem21, align 8
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 2
  store ptr %91, ptr %.reg2mem19, align 8
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 3
  store ptr %92, ptr %.reg2mem17, align 8
  %93 = getelementptr { ptr, i32 }, ptr %7, i32 0, i32 0
  store ptr %93, ptr %.reg2mem15, align 8
  br label %94

94:                                               ; preds = %130, %4
  %.reload24 = load ptr, ptr %.reg2mem23, align 8
  %95 = load ptr, ptr %.reload24, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %95, 0
  %.reload22 = load ptr, ptr %.reg2mem21, align 8
  %97 = load ptr, ptr %.reload22, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } %96, ptr %97, 1
  %.reload20 = load ptr, ptr %.reg2mem19, align 8
  %99 = load ptr, ptr %.reload20, align 8
  %100 = insertvalue { ptr, ptr, ptr, i32 } %98, ptr %99, 2
  %.reload18 = load ptr, ptr %.reg2mem17, align 8
  %101 = load i32, ptr %.reload18, align 4
  %102 = insertvalue { ptr, ptr, ptr, i32 } %100, i32 %101, 3
  %103 = call ptr @llvm.invariant.start.p0(i64 0, ptr %5)
  %104 = call ptr @llvm.invariant.start.p0(i64 16, ptr %95)
  %105 = getelementptr ptr, ptr %95, i32 %101
  %106 = load ptr, ptr %105, align 8
  %107 = call ptr @behavior_wrapper(ptr %106, { ptr, ptr, ptr, i32 } %102, ptr %6)
  %108 = call { ptr, i32 } %107({ ptr, ptr, ptr, i32 } %102, { ptr, ptr, ptr, i32 } %102, ptr %5)
  store { ptr, i32 } %108, ptr %7, align 8
  %.reload16 = load ptr, ptr %.reg2mem15, align 8
  %109 = load ptr, ptr %.reload16, align 8
  %110 = ptrtoint ptr %109 to i64
  %111 = icmp eq i64 %110, ptrtoint (ptr @nil_typ to i64)
  %112 = icmp eq i64 %110, 0
  %113 = or i1 %111, %112
  %114 = icmp eq i1 %113, false
  store i1 %114, ptr %.reg2mem10, align 1
  %.reload14 = load i1, ptr %.reg2mem10, align 1
  %115 = select i1 %.reload14, ptr %8, ptr %9
  store ptr %115, ptr %.reg2mem6, align 8
  %.reload13 = load i1, ptr %.reg2mem10, align 1
  br i1 %.reload13, label %116, label %126

116:                                              ; preds = %94
  %117 = getelementptr { ptr, i32 }, ptr %7, i32 0, i32 1
  %118 = load i32, ptr %117, align 4
  store i32 %118, ptr %.reg2mem3, align 4
  %119 = load ptr, ptr %25, align 8
  %.reload5 = load i32, ptr %.reg2mem3, align 4
  %120 = call i1 %119(i32 %.reload5)
  %121 = xor i1 %120, true
  %122 = zext i1 %121 to i32
  store i32 %122, ptr %.reg2mem1, align 4
  br i1 %120, label %123, label %124

123:                                              ; preds = %116
  br label %125

124:                                              ; preds = %116
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  store i32 %.reload4, ptr %7, align 4
  br label %125

125:                                              ; preds = %124, %123
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem25, align 4
  br label %127

126:                                              ; preds = %94
  store i32 0, ptr %.reg2mem25, align 4
  br label %127

127:                                              ; preds = %126, %125
  %.reload26 = load i32, ptr %.reg2mem25, align 4
  store i32 %.reload26, ptr %.reg2mem, align 4
  br label %128

128:                                              ; preds = %127
  %.reload = load i32, ptr %.reg2mem, align 4
  %129 = trunc i32 %.reload to i1
  %.reload9 = load ptr, ptr %.reg2mem6, align 8
  %.reload12 = load i1, ptr %.reg2mem10, align 1
  br i1 %129, label %130, label %131

130:                                              ; preds = %128
  br label %94

131:                                              ; preds = %128
  %.reload8 = load ptr, ptr %.reg2mem6, align 8
  %.reload11 = load i1, ptr %.reg2mem10, align 1
  store i1 %.reload11, ptr %.reload8, align 1
  %.reload7 = load ptr, ptr %.reg2mem6, align 8
  %132 = load i1, ptr %.reload7, align 1
  ret i1 %132
}

define { ptr, ptr, ptr, i32 } @IntIterable_map_fFunctionPtri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @IntIterable)
  %20 = alloca ptr, align 8
  store { ptr } %3, ptr %20, align 8
  %21 = alloca [1 x ptr], align 8
  store ptr @MapIterable, ptr %21, align 8
  %22 = load ptr, ptr %21, align 8
  %23 = getelementptr ptr, ptr %22, i32 6
  %24 = load ptr, ptr %23, align 8
  %25 = call { i64, i64 } @size_wrapper(ptr %24, ptr %21)
  %26 = extractvalue { i64, i64 } %25, 0
  %27 = call ptr @bump_malloc(i64 %26)
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 1
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 3
  store ptr @MapIterable, ptr %28, align 8
  store ptr %27, ptr %29, align 8
  store i32 9, ptr %30, align 4
  %31 = call ptr @llvm.invariant.start.p0(i64 16, ptr %28)
  %32 = alloca { ptr, ptr, ptr, i32 }, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 0
  %35 = load ptr, ptr %33, align 8
  store ptr %35, ptr %34, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 1
  %38 = load ptr, ptr %36, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 2
  %41 = load ptr, ptr %39, align 8
  store ptr %41, ptr %40, align 8
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 3
  %44 = load i32, ptr %42, align 4
  store i32 %44, ptr %43, align 4
  call void @set_offset(ptr %32, ptr @IntIterable)
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 0
  %46 = load ptr, ptr %45, align 8
  %47 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %46, 0
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } %47, ptr %49, 1
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 2
  %52 = load ptr, ptr %51, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } %50, ptr %52, 2
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 3
  %55 = load i32, ptr %54, align 4
  %56 = insertvalue { ptr, ptr, ptr, i32 } %53, i32 %55, 3
  %57 = load ptr, ptr %20, align 8
  %58 = insertvalue { ptr } undef, ptr %57, 0
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 0
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 1
  %63 = load ptr, ptr %62, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %63, 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 2
  %66 = load ptr, ptr %65, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %66, 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 3
  %69 = load i32, ptr %68, align 4
  %70 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %69, 3
  %71 = alloca [2 x ptr], align 8
  %72 = getelementptr [2 x ptr], ptr %71, i32 0, i32 0
  store ptr @_parameterization_IntIterable, ptr %72, align 8
  %73 = getelementptr [2 x ptr], ptr %71, i32 0, i32 1
  store ptr @_parameterization_FunctionPtri32_to_Ptri32, ptr %73, align 8
  %74 = call ptr @llvm.invariant.start.p0(i64 4, ptr %71)
  %75 = call ptr @llvm.invariant.start.p0(i64 416, ptr %60)
  %76 = getelementptr ptr, ptr %60, i32 %69
  %77 = getelementptr ptr, ptr %76, i32 2
  %78 = load ptr, ptr %77, align 8
  %79 = alloca { ptr, ptr }, align 8
  %80 = getelementptr { ptr, ptr }, ptr %79, i32 0, i32 0
  store ptr %46, ptr %80, align 8
  %81 = getelementptr { ptr, ptr }, ptr %79, i32 0, i32 1
  store ptr @function_typ, ptr %81, align 8
  %82 = call ptr @behavior_wrapper(ptr %78, { ptr, ptr, ptr, i32 } %70, ptr %79)
  call void %82({ ptr, ptr, ptr, i32 } %70, { ptr, ptr, ptr, i32 } %70, ptr %71, { ptr, ptr, ptr, i32 } %56, { ptr } %58)
  %83 = alloca { ptr, ptr, ptr, i32 }, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 0
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %83, i32 0, i32 0
  %86 = load ptr, ptr %84, align 8
  store ptr %86, ptr %85, align 8
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 1
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %83, i32 0, i32 1
  %89 = load ptr, ptr %87, align 8
  store ptr %89, ptr %88, align 8
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 2
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %83, i32 0, i32 2
  %92 = load ptr, ptr %90, align 8
  store ptr %92, ptr %91, align 8
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 3
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %83, i32 0, i32 3
  %95 = load i32, ptr %93, align 4
  store i32 %95, ptr %94, align 4
  call void @set_offset(ptr %83, ptr @IntIterable)
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %83, i32 0, i32 0
  %97 = load ptr, ptr %96, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %97, 0
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %83, i32 0, i32 1
  %100 = load ptr, ptr %99, align 8
  %101 = insertvalue { ptr, ptr, ptr, i32 } %98, ptr %100, 1
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %83, i32 0, i32 2
  %103 = load ptr, ptr %102, align 8
  %104 = insertvalue { ptr, ptr, ptr, i32 } %101, ptr %103, 2
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %83, i32 0, i32 3
  %106 = load i32, ptr %105, align 4
  %107 = insertvalue { ptr, ptr, ptr, i32 } %104, i32 %106, 3
  ret { ptr, ptr, ptr, i32 } %107
}

define { ptr, ptr, ptr, i32 } @IntIterable_filter_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @IntIterable)
  %20 = alloca ptr, align 8
  store { ptr } %3, ptr %20, align 8
  %21 = alloca [1 x ptr], align 8
  store ptr @FilterIterable, ptr %21, align 8
  %22 = load ptr, ptr %21, align 8
  %23 = getelementptr ptr, ptr %22, i32 6
  %24 = load ptr, ptr %23, align 8
  %25 = call { i64, i64 } @size_wrapper(ptr %24, ptr %21)
  %26 = extractvalue { i64, i64 } %25, 0
  %27 = call ptr @bump_malloc(i64 %26)
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 1
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 3
  store ptr @FilterIterable, ptr %28, align 8
  store ptr %27, ptr %29, align 8
  store i32 9, ptr %30, align 4
  %31 = call ptr @llvm.invariant.start.p0(i64 16, ptr %28)
  %32 = alloca { ptr, ptr, ptr, i32 }, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 0
  %35 = load ptr, ptr %33, align 8
  store ptr %35, ptr %34, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 1
  %38 = load ptr, ptr %36, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 2
  %41 = load ptr, ptr %39, align 8
  store ptr %41, ptr %40, align 8
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 3
  %44 = load i32, ptr %42, align 4
  store i32 %44, ptr %43, align 4
  call void @set_offset(ptr %32, ptr @IntIterable)
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 0
  %46 = load ptr, ptr %45, align 8
  %47 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %46, 0
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } %47, ptr %49, 1
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 2
  %52 = load ptr, ptr %51, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } %50, ptr %52, 2
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 3
  %55 = load i32, ptr %54, align 4
  %56 = insertvalue { ptr, ptr, ptr, i32 } %53, i32 %55, 3
  %57 = load ptr, ptr %20, align 8
  %58 = insertvalue { ptr } undef, ptr %57, 0
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 0
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 1
  %63 = load ptr, ptr %62, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %63, 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 2
  %66 = load ptr, ptr %65, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %66, 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 3
  %69 = load i32, ptr %68, align 4
  %70 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %69, 3
  %71 = alloca [2 x ptr], align 8
  %72 = getelementptr [2 x ptr], ptr %71, i32 0, i32 0
  store ptr @_parameterization_IntIterable, ptr %72, align 8
  %73 = getelementptr [2 x ptr], ptr %71, i32 0, i32 1
  store ptr @_parameterization_FunctionPtri32_to_Ptri1, ptr %73, align 8
  %74 = call ptr @llvm.invariant.start.p0(i64 4, ptr %71)
  %75 = call ptr @llvm.invariant.start.p0(i64 416, ptr %60)
  %76 = getelementptr ptr, ptr %60, i32 %69
  %77 = getelementptr ptr, ptr %76, i32 2
  %78 = load ptr, ptr %77, align 8
  %79 = alloca { ptr, ptr }, align 8
  %80 = getelementptr { ptr, ptr }, ptr %79, i32 0, i32 0
  store ptr %46, ptr %80, align 8
  %81 = getelementptr { ptr, ptr }, ptr %79, i32 0, i32 1
  store ptr @function_typ, ptr %81, align 8
  %82 = call ptr @behavior_wrapper(ptr %78, { ptr, ptr, ptr, i32 } %70, ptr %79)
  call void %82({ ptr, ptr, ptr, i32 } %70, { ptr, ptr, ptr, i32 } %70, ptr %71, { ptr, ptr, ptr, i32 } %56, { ptr } %58)
  %83 = alloca { ptr, ptr, ptr, i32 }, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 0
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %83, i32 0, i32 0
  %86 = load ptr, ptr %84, align 8
  store ptr %86, ptr %85, align 8
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 1
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %83, i32 0, i32 1
  %89 = load ptr, ptr %87, align 8
  store ptr %89, ptr %88, align 8
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 2
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %83, i32 0, i32 2
  %92 = load ptr, ptr %90, align 8
  store ptr %92, ptr %91, align 8
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 3
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %83, i32 0, i32 3
  %95 = load i32, ptr %93, align 4
  store i32 %95, ptr %94, align 4
  call void @set_offset(ptr %83, ptr @IntIterable)
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %83, i32 0, i32 0
  %97 = load ptr, ptr %96, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %97, 0
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %83, i32 0, i32 1
  %100 = load ptr, ptr %99, align 8
  %101 = insertvalue { ptr, ptr, ptr, i32 } %98, ptr %100, 1
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %83, i32 0, i32 2
  %103 = load ptr, ptr %102, align 8
  %104 = insertvalue { ptr, ptr, ptr, i32 } %101, ptr %103, 2
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %83, i32 0, i32 3
  %106 = load i32, ptr %105, align 4
  %107 = insertvalue { ptr, ptr, ptr, i32 } %104, i32 %106, 3
  ret { ptr, ptr, ptr, i32 } %107
}

define { ptr, ptr, ptr, i32 } @IntIterable_chain_otherIntIterable({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @IntIterable)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 16, ptr %20)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %34 = load i32, ptr %32, align 4
  store i32 %34, ptr %33, align 4
  call void @set_offset(ptr %22, ptr @IntIterable)
  %35 = alloca [1 x ptr], align 8
  store ptr @ChainIterable, ptr %35, align 8
  %36 = load ptr, ptr %35, align 8
  %37 = getelementptr ptr, ptr %36, i32 6
  %38 = load ptr, ptr %37, align 8
  %39 = call { i64, i64 } @size_wrapper(ptr %38, ptr %35)
  %40 = extractvalue { i64, i64 } %39, 0
  %41 = call ptr @bump_malloc(i64 %40)
  %42 = alloca { ptr, ptr, ptr, i32 }, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 1
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 3
  store ptr @ChainIterable, ptr %42, align 8
  store ptr %41, ptr %43, align 8
  store i32 9, ptr %44, align 4
  %45 = call ptr @llvm.invariant.start.p0(i64 16, ptr %42)
  %46 = alloca { ptr, ptr, ptr, i32 }, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %49 = load ptr, ptr %47, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %52 = load ptr, ptr %50, align 8
  store ptr %52, ptr %51, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %55 = load ptr, ptr %53, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %58 = load i32, ptr %56, align 4
  store i32 %58, ptr %57, align 4
  call void @set_offset(ptr %46, ptr @IntIterable)
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %63 = load ptr, ptr %62, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %63, 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %66 = load ptr, ptr %65, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %66, 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %69 = load i32, ptr %68, align 4
  %70 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %69, 3
  %71 = alloca { ptr, ptr, ptr, i32 }, align 8
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 0
  %74 = load ptr, ptr %72, align 8
  store ptr %74, ptr %73, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 1
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 2
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 3
  %83 = load i32, ptr %81, align 4
  store i32 %83, ptr %82, align 4
  call void @set_offset(ptr %71, ptr @IntIterable)
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 0
  %85 = load ptr, ptr %84, align 8
  %86 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %85, 0
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 1
  %88 = load ptr, ptr %87, align 8
  %89 = insertvalue { ptr, ptr, ptr, i32 } %86, ptr %88, 1
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 2
  %91 = load ptr, ptr %90, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } %89, ptr %91, 2
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 3
  %94 = load i32, ptr %93, align 4
  %95 = insertvalue { ptr, ptr, ptr, i32 } %92, i32 %94, 3
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 0
  %97 = load ptr, ptr %96, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %97, 0
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 1
  %100 = load ptr, ptr %99, align 8
  %101 = insertvalue { ptr, ptr, ptr, i32 } %98, ptr %100, 1
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 2
  %103 = load ptr, ptr %102, align 8
  %104 = insertvalue { ptr, ptr, ptr, i32 } %101, ptr %103, 2
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 3
  %106 = load i32, ptr %105, align 4
  %107 = insertvalue { ptr, ptr, ptr, i32 } %104, i32 %106, 3
  %108 = alloca [2 x ptr], align 8
  %109 = getelementptr [2 x ptr], ptr %108, i32 0, i32 0
  store ptr @_parameterization_IntIterable, ptr %109, align 8
  %110 = getelementptr [2 x ptr], ptr %108, i32 0, i32 1
  store ptr @_parameterization_IntIterable, ptr %110, align 8
  %111 = call ptr @llvm.invariant.start.p0(i64 4, ptr %108)
  %112 = call ptr @llvm.invariant.start.p0(i64 416, ptr %97)
  %113 = getelementptr ptr, ptr %97, i32 %106
  %114 = getelementptr ptr, ptr %113, i32 2
  %115 = load ptr, ptr %114, align 8
  %116 = alloca { ptr, ptr }, align 8
  %117 = getelementptr { ptr, ptr }, ptr %116, i32 0, i32 0
  store ptr %60, ptr %117, align 8
  %118 = getelementptr { ptr, ptr }, ptr %116, i32 0, i32 1
  store ptr %85, ptr %118, align 8
  %119 = call ptr @behavior_wrapper(ptr %115, { ptr, ptr, ptr, i32 } %107, ptr %116)
  call void %119({ ptr, ptr, ptr, i32 } %107, { ptr, ptr, ptr, i32 } %107, ptr %108, { ptr, ptr, ptr, i32 } %70, { ptr, ptr, ptr, i32 } %95)
  %120 = alloca { ptr, ptr, ptr, i32 }, align 8
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 0
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 0
  %123 = load ptr, ptr %121, align 8
  store ptr %123, ptr %122, align 8
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 1
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 1
  %126 = load ptr, ptr %124, align 8
  store ptr %126, ptr %125, align 8
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 2
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 2
  %129 = load ptr, ptr %127, align 8
  store ptr %129, ptr %128, align 8
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 3
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 3
  %132 = load i32, ptr %130, align 4
  store i32 %132, ptr %131, align 4
  call void @set_offset(ptr %120, ptr @IntIterable)
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 0
  %134 = load ptr, ptr %133, align 8
  %135 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %134, 0
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 1
  %137 = load ptr, ptr %136, align 8
  %138 = insertvalue { ptr, ptr, ptr, i32 } %135, ptr %137, 1
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 2
  %140 = load ptr, ptr %139, align 8
  %141 = insertvalue { ptr, ptr, ptr, i32 } %138, ptr %140, 2
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 3
  %143 = load i32, ptr %142, align 4
  %144 = insertvalue { ptr, ptr, ptr, i32 } %141, i32 %143, 3
  ret { ptr, ptr, ptr, i32 } %144
}

define { ptr, ptr, ptr, i32 } @IntIterable_interleave_otherIntIterable({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @IntIterable)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 16, ptr %20)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %34 = load i32, ptr %32, align 4
  store i32 %34, ptr %33, align 4
  call void @set_offset(ptr %22, ptr @IntIterable)
  %35 = alloca [1 x ptr], align 8
  store ptr @InterleaveIterable, ptr %35, align 8
  %36 = load ptr, ptr %35, align 8
  %37 = getelementptr ptr, ptr %36, i32 6
  %38 = load ptr, ptr %37, align 8
  %39 = call { i64, i64 } @size_wrapper(ptr %38, ptr %35)
  %40 = extractvalue { i64, i64 } %39, 0
  %41 = call ptr @bump_malloc(i64 %40)
  %42 = alloca { ptr, ptr, ptr, i32 }, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 1
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 3
  store ptr @InterleaveIterable, ptr %42, align 8
  store ptr %41, ptr %43, align 8
  store i32 9, ptr %44, align 4
  %45 = call ptr @llvm.invariant.start.p0(i64 16, ptr %42)
  %46 = alloca { ptr, ptr, ptr, i32 }, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %49 = load ptr, ptr %47, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %52 = load ptr, ptr %50, align 8
  store ptr %52, ptr %51, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %55 = load ptr, ptr %53, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %58 = load i32, ptr %56, align 4
  store i32 %58, ptr %57, align 4
  call void @set_offset(ptr %46, ptr @IntIterable)
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %63 = load ptr, ptr %62, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %63, 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %66 = load ptr, ptr %65, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %66, 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %69 = load i32, ptr %68, align 4
  %70 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %69, 3
  %71 = alloca { ptr, ptr, ptr, i32 }, align 8
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 0
  %74 = load ptr, ptr %72, align 8
  store ptr %74, ptr %73, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 1
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 2
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 3
  %83 = load i32, ptr %81, align 4
  store i32 %83, ptr %82, align 4
  call void @set_offset(ptr %71, ptr @IntIterable)
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 0
  %85 = load ptr, ptr %84, align 8
  %86 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %85, 0
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 1
  %88 = load ptr, ptr %87, align 8
  %89 = insertvalue { ptr, ptr, ptr, i32 } %86, ptr %88, 1
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 2
  %91 = load ptr, ptr %90, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } %89, ptr %91, 2
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 3
  %94 = load i32, ptr %93, align 4
  %95 = insertvalue { ptr, ptr, ptr, i32 } %92, i32 %94, 3
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 0
  %97 = load ptr, ptr %96, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %97, 0
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 1
  %100 = load ptr, ptr %99, align 8
  %101 = insertvalue { ptr, ptr, ptr, i32 } %98, ptr %100, 1
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 2
  %103 = load ptr, ptr %102, align 8
  %104 = insertvalue { ptr, ptr, ptr, i32 } %101, ptr %103, 2
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 3
  %106 = load i32, ptr %105, align 4
  %107 = insertvalue { ptr, ptr, ptr, i32 } %104, i32 %106, 3
  %108 = alloca [2 x ptr], align 8
  %109 = getelementptr [2 x ptr], ptr %108, i32 0, i32 0
  store ptr @_parameterization_IntIterable, ptr %109, align 8
  %110 = getelementptr [2 x ptr], ptr %108, i32 0, i32 1
  store ptr @_parameterization_IntIterable, ptr %110, align 8
  %111 = call ptr @llvm.invariant.start.p0(i64 4, ptr %108)
  %112 = call ptr @llvm.invariant.start.p0(i64 416, ptr %97)
  %113 = getelementptr ptr, ptr %97, i32 %106
  %114 = getelementptr ptr, ptr %113, i32 2
  %115 = load ptr, ptr %114, align 8
  %116 = alloca { ptr, ptr }, align 8
  %117 = getelementptr { ptr, ptr }, ptr %116, i32 0, i32 0
  store ptr %60, ptr %117, align 8
  %118 = getelementptr { ptr, ptr }, ptr %116, i32 0, i32 1
  store ptr %85, ptr %118, align 8
  %119 = call ptr @behavior_wrapper(ptr %115, { ptr, ptr, ptr, i32 } %107, ptr %116)
  call void %119({ ptr, ptr, ptr, i32 } %107, { ptr, ptr, ptr, i32 } %107, ptr %108, { ptr, ptr, ptr, i32 } %70, { ptr, ptr, ptr, i32 } %95)
  %120 = alloca { ptr, ptr, ptr, i32 }, align 8
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 0
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 0
  %123 = load ptr, ptr %121, align 8
  store ptr %123, ptr %122, align 8
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 1
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 1
  %126 = load ptr, ptr %124, align 8
  store ptr %126, ptr %125, align 8
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 2
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 2
  %129 = load ptr, ptr %127, align 8
  store ptr %129, ptr %128, align 8
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 3
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 3
  %132 = load i32, ptr %130, align 4
  store i32 %132, ptr %131, align 4
  call void @set_offset(ptr %120, ptr @IntIterable)
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 0
  %134 = load ptr, ptr %133, align 8
  %135 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %134, 0
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 1
  %137 = load ptr, ptr %136, align 8
  %138 = insertvalue { ptr, ptr, ptr, i32 } %135, ptr %137, 1
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 2
  %140 = load ptr, ptr %139, align 8
  %141 = insertvalue { ptr, ptr, ptr, i32 } %138, ptr %140, 2
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 3
  %143 = load i32, ptr %142, align 4
  %144 = insertvalue { ptr, ptr, ptr, i32 } %141, i32 %143, 3
  ret { ptr, ptr, ptr, i32 } %144
}

define { ptr, ptr, ptr, i32 } @IntIterable_zip_otherIntIterable({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @IntIterable)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 16, ptr %20)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %34 = load i32, ptr %32, align 4
  store i32 %34, ptr %33, align 4
  call void @set_offset(ptr %22, ptr @IntIterable)
  %35 = alloca [1 x ptr], align 8
  store ptr @ZipIterable, ptr %35, align 8
  %36 = load ptr, ptr %35, align 8
  %37 = getelementptr ptr, ptr %36, i32 6
  %38 = load ptr, ptr %37, align 8
  %39 = call { i64, i64 } @size_wrapper(ptr %38, ptr %35)
  %40 = extractvalue { i64, i64 } %39, 0
  %41 = call ptr @bump_malloc(i64 %40)
  %42 = alloca { ptr, ptr, ptr, i32 }, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 1
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 3
  store ptr @ZipIterable, ptr %42, align 8
  store ptr %41, ptr %43, align 8
  store i32 9, ptr %44, align 4
  %45 = call ptr @llvm.invariant.start.p0(i64 16, ptr %42)
  %46 = alloca { ptr, ptr, ptr, i32 }, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %49 = load ptr, ptr %47, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %52 = load ptr, ptr %50, align 8
  store ptr %52, ptr %51, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %55 = load ptr, ptr %53, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %58 = load i32, ptr %56, align 4
  store i32 %58, ptr %57, align 4
  call void @set_offset(ptr %46, ptr @IntIterable)
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %63 = load ptr, ptr %62, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %63, 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %66 = load ptr, ptr %65, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %66, 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %69 = load i32, ptr %68, align 4
  %70 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %69, 3
  %71 = alloca { ptr, ptr, ptr, i32 }, align 8
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 0
  %74 = load ptr, ptr %72, align 8
  store ptr %74, ptr %73, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 1
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 2
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 3
  %83 = load i32, ptr %81, align 4
  store i32 %83, ptr %82, align 4
  call void @set_offset(ptr %71, ptr @IntIterable)
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 0
  %85 = load ptr, ptr %84, align 8
  %86 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %85, 0
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 1
  %88 = load ptr, ptr %87, align 8
  %89 = insertvalue { ptr, ptr, ptr, i32 } %86, ptr %88, 1
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 2
  %91 = load ptr, ptr %90, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } %89, ptr %91, 2
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 3
  %94 = load i32, ptr %93, align 4
  %95 = insertvalue { ptr, ptr, ptr, i32 } %92, i32 %94, 3
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 0
  %97 = load ptr, ptr %96, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %97, 0
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 1
  %100 = load ptr, ptr %99, align 8
  %101 = insertvalue { ptr, ptr, ptr, i32 } %98, ptr %100, 1
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 2
  %103 = load ptr, ptr %102, align 8
  %104 = insertvalue { ptr, ptr, ptr, i32 } %101, ptr %103, 2
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 3
  %106 = load i32, ptr %105, align 4
  %107 = insertvalue { ptr, ptr, ptr, i32 } %104, i32 %106, 3
  %108 = alloca [2 x ptr], align 8
  %109 = getelementptr [2 x ptr], ptr %108, i32 0, i32 0
  store ptr @_parameterization_IntIterable, ptr %109, align 8
  %110 = getelementptr [2 x ptr], ptr %108, i32 0, i32 1
  store ptr @_parameterization_IntIterable, ptr %110, align 8
  %111 = call ptr @llvm.invariant.start.p0(i64 4, ptr %108)
  %112 = call ptr @llvm.invariant.start.p0(i64 96, ptr %97)
  %113 = getelementptr ptr, ptr %97, i32 %106
  %114 = getelementptr ptr, ptr %113, i32 2
  %115 = load ptr, ptr %114, align 8
  %116 = alloca { ptr, ptr }, align 8
  %117 = getelementptr { ptr, ptr }, ptr %116, i32 0, i32 0
  store ptr %60, ptr %117, align 8
  %118 = getelementptr { ptr, ptr }, ptr %116, i32 0, i32 1
  store ptr %85, ptr %118, align 8
  %119 = call ptr @behavior_wrapper(ptr %115, { ptr, ptr, ptr, i32 } %107, ptr %116)
  call void %119({ ptr, ptr, ptr, i32 } %107, { ptr, ptr, ptr, i32 } %107, ptr %108, { ptr, ptr, ptr, i32 } %70, { ptr, ptr, ptr, i32 } %95)
  %120 = alloca { ptr, ptr, ptr, i32 }, align 8
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 0
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 0
  %123 = load ptr, ptr %121, align 8
  store ptr %123, ptr %122, align 8
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 1
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 1
  %126 = load ptr, ptr %124, align 8
  store ptr %126, ptr %125, align 8
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 2
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 2
  %129 = load ptr, ptr %127, align 8
  store ptr %129, ptr %128, align 8
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 3
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 3
  %132 = load i32, ptr %130, align 4
  store i32 %132, ptr %131, align 4
  call void @set_offset(ptr %120, ptr @ZipIterable)
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 0
  %134 = load ptr, ptr %133, align 8
  %135 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %134, 0
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 1
  %137 = load ptr, ptr %136, align 8
  %138 = insertvalue { ptr, ptr, ptr, i32 } %135, ptr %137, 1
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 2
  %140 = load ptr, ptr %139, align 8
  %141 = insertvalue { ptr, ptr, ptr, i32 } %138, ptr %140, 2
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 3
  %143 = load i32, ptr %142, align 4
  %144 = insertvalue { ptr, ptr, ptr, i32 } %141, i32 %143, 3
  ret { ptr, ptr, ptr, i32 } %144
}

define { ptr, ptr, ptr, i32 } @IntIterable_product_otherIntIterable({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @IntIterable)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 16, ptr %20)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %34 = load i32, ptr %32, align 4
  store i32 %34, ptr %33, align 4
  call void @set_offset(ptr %22, ptr @IntIterable)
  %35 = alloca [1 x ptr], align 8
  store ptr @ProductIterable, ptr %35, align 8
  %36 = load ptr, ptr %35, align 8
  %37 = getelementptr ptr, ptr %36, i32 6
  %38 = load ptr, ptr %37, align 8
  %39 = call { i64, i64 } @size_wrapper(ptr %38, ptr %35)
  %40 = extractvalue { i64, i64 } %39, 0
  %41 = call ptr @bump_malloc(i64 %40)
  %42 = alloca { ptr, ptr, ptr, i32 }, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 1
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 3
  store ptr @ProductIterable, ptr %42, align 8
  store ptr %41, ptr %43, align 8
  store i32 9, ptr %44, align 4
  %45 = call ptr @llvm.invariant.start.p0(i64 16, ptr %42)
  %46 = alloca { ptr, ptr, ptr, i32 }, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %49 = load ptr, ptr %47, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %52 = load ptr, ptr %50, align 8
  store ptr %52, ptr %51, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %55 = load ptr, ptr %53, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %58 = load i32, ptr %56, align 4
  store i32 %58, ptr %57, align 4
  call void @set_offset(ptr %46, ptr @IntIterable)
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %63 = load ptr, ptr %62, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %63, 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %66 = load ptr, ptr %65, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %66, 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %69 = load i32, ptr %68, align 4
  %70 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %69, 3
  %71 = alloca { ptr, ptr, ptr, i32 }, align 8
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 0
  %74 = load ptr, ptr %72, align 8
  store ptr %74, ptr %73, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 1
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 2
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 3
  %83 = load i32, ptr %81, align 4
  store i32 %83, ptr %82, align 4
  call void @set_offset(ptr %71, ptr @IntIterable)
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 0
  %85 = load ptr, ptr %84, align 8
  %86 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %85, 0
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 1
  %88 = load ptr, ptr %87, align 8
  %89 = insertvalue { ptr, ptr, ptr, i32 } %86, ptr %88, 1
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 2
  %91 = load ptr, ptr %90, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } %89, ptr %91, 2
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 3
  %94 = load i32, ptr %93, align 4
  %95 = insertvalue { ptr, ptr, ptr, i32 } %92, i32 %94, 3
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 0
  %97 = load ptr, ptr %96, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %97, 0
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 1
  %100 = load ptr, ptr %99, align 8
  %101 = insertvalue { ptr, ptr, ptr, i32 } %98, ptr %100, 1
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 2
  %103 = load ptr, ptr %102, align 8
  %104 = insertvalue { ptr, ptr, ptr, i32 } %101, ptr %103, 2
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 3
  %106 = load i32, ptr %105, align 4
  %107 = insertvalue { ptr, ptr, ptr, i32 } %104, i32 %106, 3
  %108 = alloca [2 x ptr], align 8
  %109 = getelementptr [2 x ptr], ptr %108, i32 0, i32 0
  store ptr @_parameterization_IntIterable, ptr %109, align 8
  %110 = getelementptr [2 x ptr], ptr %108, i32 0, i32 1
  store ptr @_parameterization_IntIterable, ptr %110, align 8
  %111 = call ptr @llvm.invariant.start.p0(i64 4, ptr %108)
  %112 = call ptr @llvm.invariant.start.p0(i64 96, ptr %97)
  %113 = getelementptr ptr, ptr %97, i32 %106
  %114 = getelementptr ptr, ptr %113, i32 2
  %115 = load ptr, ptr %114, align 8
  %116 = alloca { ptr, ptr }, align 8
  %117 = getelementptr { ptr, ptr }, ptr %116, i32 0, i32 0
  store ptr %60, ptr %117, align 8
  %118 = getelementptr { ptr, ptr }, ptr %116, i32 0, i32 1
  store ptr %85, ptr %118, align 8
  %119 = call ptr @behavior_wrapper(ptr %115, { ptr, ptr, ptr, i32 } %107, ptr %116)
  call void %119({ ptr, ptr, ptr, i32 } %107, { ptr, ptr, ptr, i32 } %107, ptr %108, { ptr, ptr, ptr, i32 } %70, { ptr, ptr, ptr, i32 } %95)
  %120 = alloca { ptr, ptr, ptr, i32 }, align 8
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 0
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 0
  %123 = load ptr, ptr %121, align 8
  store ptr %123, ptr %122, align 8
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 1
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 1
  %126 = load ptr, ptr %124, align 8
  store ptr %126, ptr %125, align 8
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 2
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 2
  %129 = load ptr, ptr %127, align 8
  store ptr %129, ptr %128, align 8
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 3
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 3
  %132 = load i32, ptr %130, align 4
  store i32 %132, ptr %131, align 4
  call void @set_offset(ptr %120, ptr @ProductIterable)
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 0
  %134 = load ptr, ptr %133, align 8
  %135 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %134, 0
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 1
  %137 = load ptr, ptr %136, align 8
  %138 = insertvalue { ptr, ptr, ptr, i32 } %135, ptr %137, 1
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 2
  %140 = load ptr, ptr %139, align 8
  %141 = insertvalue { ptr, ptr, ptr, i32 } %138, ptr %140, 2
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 3
  %143 = load i32, ptr %142, align 4
  %144 = insertvalue { ptr, ptr, ptr, i32 } %141, i32 %143, 3
  ret { ptr, ptr, ptr, i32 } %144
}

define { ptr, ptr, ptr, i32 } @MapIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @MapIterable)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 416, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 0
  %28 = load ptr, ptr %27, align 8
  %29 = call { ptr, ptr, ptr, i32 } %28(ptr %20) #16
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %29, ptr %30, align 8
  %31 = call ptr @llvm.invariant.start.p0(i64 16, ptr %30)
  call void @assume_offset(ptr %30, ptr @IntIterable)
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %33, 0
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %36, 1
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %39 = load ptr, ptr %38, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %39, 2
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %42 = load i32, ptr %41, align 4
  %43 = insertvalue { ptr, ptr, ptr, i32 } %40, i32 %42, 3
  %44 = alloca [0 x ptr], align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 0, ptr %44)
  %46 = call ptr @llvm.invariant.start.p0(i64 192, ptr %33)
  %47 = getelementptr ptr, ptr %33, i32 %42
  %48 = getelementptr ptr, ptr %47, i32 10
  %49 = load ptr, ptr %48, align 8
  %50 = alloca {}, align 8
  %51 = call ptr @behavior_wrapper(ptr %49, { ptr, ptr, ptr, i32 } %43, ptr %50)
  %52 = call { ptr, ptr, ptr, i32 } %51({ ptr, ptr, ptr, i32 } %43, { ptr, ptr, ptr, i32 } %43, ptr %44)
  %53 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %52, ptr %53, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 16, ptr %53)
  %55 = alloca { ptr, ptr, ptr, i32 }, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 0
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 0
  %58 = load ptr, ptr %56, align 8
  store ptr %58, ptr %57, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 1
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  %61 = load ptr, ptr %59, align 8
  store ptr %61, ptr %60, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 2
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 2
  %64 = load ptr, ptr %62, align 8
  store ptr %64, ptr %63, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 3
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  %67 = load i32, ptr %65, align 4
  store i32 %67, ptr %66, align 4
  call void @set_offset(ptr %55, ptr @IntIterator)
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = load ptr, ptr %6, align 8
  %71 = call ptr @llvm.invariant.start.p0(i64 416, ptr %70)
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %73 = load i32, ptr %72, align 4
  %74 = getelementptr ptr, ptr %70, i32 %73
  %75 = getelementptr ptr, ptr %74, i32 1
  %76 = load ptr, ptr %75, align 8
  %77 = getelementptr { ptr, ptr }, ptr %76, i32 0, i32 0
  %78 = load ptr, ptr %77, align 8
  %79 = call { ptr } %78(ptr %69) #16
  %80 = alloca [1 x ptr], align 8
  store ptr @MapIterator, ptr %80, align 8
  %81 = load ptr, ptr %80, align 8
  %82 = getelementptr ptr, ptr %81, i32 6
  %83 = load ptr, ptr %82, align 8
  %84 = call { i64, i64 } @size_wrapper(ptr %83, ptr %80)
  %85 = extractvalue { i64, i64 } %84, 0
  %86 = call ptr @bump_malloc(i64 %85)
  %87 = alloca { ptr, ptr, ptr, i32 }, align 8
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 1
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 3
  store ptr @MapIterator, ptr %87, align 8
  store ptr %86, ptr %88, align 8
  store i32 9, ptr %89, align 4
  %90 = call ptr @llvm.invariant.start.p0(i64 16, ptr %87)
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %92 = load ptr, ptr %91, align 8
  %93 = load ptr, ptr %6, align 8
  %94 = call ptr @llvm.invariant.start.p0(i64 416, ptr %93)
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %96 = load i32, ptr %95, align 4
  %97 = getelementptr ptr, ptr %93, i32 %96
  %98 = load ptr, ptr %97, align 8
  %99 = getelementptr { ptr, ptr }, ptr %98, i32 0, i32 0
  %100 = load ptr, ptr %99, align 8
  %101 = call { ptr, ptr, ptr, i32 } %100(ptr %92) #16
  %102 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %101, ptr %102, align 8
  %103 = call ptr @llvm.invariant.start.p0(i64 16, ptr %102)
  call void @assume_offset(ptr %102, ptr @IntIterable)
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 0
  %105 = load ptr, ptr %104, align 8
  %106 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %105, 0
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 1
  %108 = load ptr, ptr %107, align 8
  %109 = insertvalue { ptr, ptr, ptr, i32 } %106, ptr %108, 1
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 2
  %111 = load ptr, ptr %110, align 8
  %112 = insertvalue { ptr, ptr, ptr, i32 } %109, ptr %111, 2
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 3
  %114 = load i32, ptr %113, align 4
  %115 = insertvalue { ptr, ptr, ptr, i32 } %112, i32 %114, 3
  %116 = alloca [0 x ptr], align 8
  %117 = call ptr @llvm.invariant.start.p0(i64 0, ptr %116)
  %118 = call ptr @llvm.invariant.start.p0(i64 192, ptr %105)
  %119 = getelementptr ptr, ptr %105, i32 %114
  %120 = getelementptr ptr, ptr %119, i32 10
  %121 = load ptr, ptr %120, align 8
  %122 = alloca {}, align 8
  %123 = call ptr @behavior_wrapper(ptr %121, { ptr, ptr, ptr, i32 } %115, ptr %122)
  %124 = call { ptr, ptr, ptr, i32 } %123({ ptr, ptr, ptr, i32 } %115, { ptr, ptr, ptr, i32 } %115, ptr %116)
  %125 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %124, ptr %125, align 8
  %126 = call ptr @llvm.invariant.start.p0(i64 16, ptr %125)
  %127 = alloca { ptr, ptr, ptr, i32 }, align 8
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 0
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %127, i32 0, i32 0
  %130 = load ptr, ptr %128, align 8
  store ptr %130, ptr %129, align 8
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 1
  %132 = getelementptr { ptr, ptr, ptr, i32 }, ptr %127, i32 0, i32 1
  %133 = load ptr, ptr %131, align 8
  store ptr %133, ptr %132, align 8
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 2
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %127, i32 0, i32 2
  %136 = load ptr, ptr %134, align 8
  store ptr %136, ptr %135, align 8
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 3
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %127, i32 0, i32 3
  %139 = load i32, ptr %137, align 4
  store i32 %139, ptr %138, align 4
  call void @set_offset(ptr %127, ptr @IntIterator)
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %141 = load ptr, ptr %140, align 8
  %142 = load ptr, ptr %6, align 8
  %143 = call ptr @llvm.invariant.start.p0(i64 416, ptr %142)
  %144 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %145 = load i32, ptr %144, align 4
  %146 = getelementptr ptr, ptr %142, i32 %145
  %147 = getelementptr ptr, ptr %146, i32 1
  %148 = load ptr, ptr %147, align 8
  %149 = getelementptr { ptr, ptr }, ptr %148, i32 0, i32 0
  %150 = load ptr, ptr %149, align 8
  %151 = call { ptr } %150(ptr %141) #16
  %152 = alloca ptr, align 8
  store { ptr } %151, ptr %152, align 8
  %153 = alloca { ptr, ptr, ptr, i32 }, align 8
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %127, i32 0, i32 0
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %153, i32 0, i32 0
  %156 = load ptr, ptr %154, align 8
  store ptr %156, ptr %155, align 8
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %127, i32 0, i32 1
  %158 = getelementptr { ptr, ptr, ptr, i32 }, ptr %153, i32 0, i32 1
  %159 = load ptr, ptr %157, align 8
  store ptr %159, ptr %158, align 8
  %160 = getelementptr { ptr, ptr, ptr, i32 }, ptr %127, i32 0, i32 2
  %161 = getelementptr { ptr, ptr, ptr, i32 }, ptr %153, i32 0, i32 2
  %162 = load ptr, ptr %160, align 8
  store ptr %162, ptr %161, align 8
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %127, i32 0, i32 3
  %164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %153, i32 0, i32 3
  %165 = load i32, ptr %163, align 4
  store i32 %165, ptr %164, align 4
  call void @set_offset(ptr %153, ptr @IntIterator)
  %166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %153, i32 0, i32 0
  %167 = load ptr, ptr %166, align 8
  %168 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %167, 0
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %153, i32 0, i32 1
  %170 = load ptr, ptr %169, align 8
  %171 = insertvalue { ptr, ptr, ptr, i32 } %168, ptr %170, 1
  %172 = getelementptr { ptr, ptr, ptr, i32 }, ptr %153, i32 0, i32 2
  %173 = load ptr, ptr %172, align 8
  %174 = insertvalue { ptr, ptr, ptr, i32 } %171, ptr %173, 2
  %175 = getelementptr { ptr, ptr, ptr, i32 }, ptr %153, i32 0, i32 3
  %176 = load i32, ptr %175, align 4
  %177 = insertvalue { ptr, ptr, ptr, i32 } %174, i32 %176, 3
  %178 = load ptr, ptr %152, align 8
  %179 = insertvalue { ptr } undef, ptr %178, 0
  %180 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 0
  %181 = load ptr, ptr %180, align 8
  %182 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %181, 0
  %183 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 1
  %184 = load ptr, ptr %183, align 8
  %185 = insertvalue { ptr, ptr, ptr, i32 } %182, ptr %184, 1
  %186 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 2
  %187 = load ptr, ptr %186, align 8
  %188 = insertvalue { ptr, ptr, ptr, i32 } %185, ptr %187, 2
  %189 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 3
  %190 = load i32, ptr %189, align 4
  %191 = insertvalue { ptr, ptr, ptr, i32 } %188, i32 %190, 3
  %192 = alloca [2 x ptr], align 8
  %193 = getelementptr [2 x ptr], ptr %192, i32 0, i32 0
  store ptr @_parameterization_IntIterator, ptr %193, align 8
  %194 = getelementptr [2 x ptr], ptr %192, i32 0, i32 1
  store ptr @_parameterization_FunctionPtri32_to_Ptri32, ptr %194, align 8
  %195 = call ptr @llvm.invariant.start.p0(i64 4, ptr %192)
  %196 = call ptr @llvm.invariant.start.p0(i64 64, ptr %181)
  %197 = getelementptr ptr, ptr %181, i32 %190
  %198 = getelementptr ptr, ptr %197, i32 2
  %199 = load ptr, ptr %198, align 8
  %200 = alloca { ptr, ptr }, align 8
  %201 = getelementptr { ptr, ptr }, ptr %200, i32 0, i32 0
  store ptr %167, ptr %201, align 8
  %202 = getelementptr { ptr, ptr }, ptr %200, i32 0, i32 1
  store ptr @function_typ, ptr %202, align 8
  %203 = call ptr @behavior_wrapper(ptr %199, { ptr, ptr, ptr, i32 } %191, ptr %200)
  call void %203({ ptr, ptr, ptr, i32 } %191, { ptr, ptr, ptr, i32 } %191, ptr %192, { ptr, ptr, ptr, i32 } %177, { ptr } %179)
  %204 = alloca { ptr, ptr, ptr, i32 }, align 8
  %205 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 0
  %206 = getelementptr { ptr, ptr, ptr, i32 }, ptr %204, i32 0, i32 0
  %207 = load ptr, ptr %205, align 8
  store ptr %207, ptr %206, align 8
  %208 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 1
  %209 = getelementptr { ptr, ptr, ptr, i32 }, ptr %204, i32 0, i32 1
  %210 = load ptr, ptr %208, align 8
  store ptr %210, ptr %209, align 8
  %211 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 2
  %212 = getelementptr { ptr, ptr, ptr, i32 }, ptr %204, i32 0, i32 2
  %213 = load ptr, ptr %211, align 8
  store ptr %213, ptr %212, align 8
  %214 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 3
  %215 = getelementptr { ptr, ptr, ptr, i32 }, ptr %204, i32 0, i32 3
  %216 = load i32, ptr %214, align 4
  store i32 %216, ptr %215, align 4
  call void @set_offset(ptr %204, ptr @Iterator)
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %204, i32 0, i32 0
  %218 = load ptr, ptr %217, align 8
  %219 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %218, 0
  %220 = getelementptr { ptr, ptr, ptr, i32 }, ptr %204, i32 0, i32 1
  %221 = load ptr, ptr %220, align 8
  %222 = insertvalue { ptr, ptr, ptr, i32 } %219, ptr %221, 1
  %223 = getelementptr { ptr, ptr, ptr, i32 }, ptr %204, i32 0, i32 2
  %224 = load ptr, ptr %223, align 8
  %225 = insertvalue { ptr, ptr, ptr, i32 } %222, ptr %224, 2
  %226 = getelementptr { ptr, ptr, ptr, i32 }, ptr %204, i32 0, i32 3
  %227 = load i32, ptr %226, align 4
  %228 = insertvalue { ptr, ptr, ptr, i32 } %225, i32 %227, 3
  ret { ptr, ptr, ptr, i32 } %228
}

define { i64, i64 } @_size_MapIterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %10
  %12 = urem i64 %11, %5
  %13 = icmp eq i64 %12, 0
  %14 = sub i64 %5, %12
  %15 = select i1 %13, i64 0, i64 %14
  %16 = add i64 %11, %15
  %17 = insertvalue { i64, i64 } undef, i64 %16, 0
  %18 = insertvalue { i64, i64 } %17, i64 %5, 1
  ret { i64, i64 } %18
}

define ptr @MapIterator_B_init_iteratorIntIterator_fFunctionPtri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -933084275656658555, i64 ptrtoint (ptr @IntIterator to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [8 x ptr], ptr %26, i32 0, i32 4
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @MapIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [8 x ptr], ptr %4, i32 0, i32 5
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @MapIterator_init_iteratorIntIterator_fFunctionPtri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @MapIterator)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @IntIterator)
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %45 = load ptr, ptr %43, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %48 = load i32, ptr %46, align 4
  store i32 %48, ptr %47, align 4
  call void @set_offset(ptr %36, ptr @IntIterator)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %8, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 64, ptr %51)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = getelementptr ptr, ptr %51, i32 %54
  %56 = load ptr, ptr %55, align 8
  %57 = getelementptr { ptr, ptr }, ptr %56, i32 0, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %63 = load ptr, ptr %62, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %63, 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %66 = load ptr, ptr %65, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %66, 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %69 = load i32, ptr %68, align 4
  %70 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %69, 3
  call void %58(ptr %50, { ptr, ptr, ptr, i32 } %70) #15
  %71 = alloca ptr, align 8
  store { ptr } %4, ptr %71, align 8
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %73 = load ptr, ptr %72, align 8
  %74 = load ptr, ptr %8, align 8
  %75 = call ptr @llvm.invariant.start.p0(i64 64, ptr %74)
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %77 = load i32, ptr %76, align 4
  %78 = getelementptr ptr, ptr %74, i32 %77
  %79 = getelementptr ptr, ptr %78, i32 1
  %80 = load ptr, ptr %79, align 8
  %81 = getelementptr { ptr, ptr }, ptr %80, i32 0, i32 1
  %82 = load ptr, ptr %81, align 8
  %83 = load ptr, ptr %71, align 8
  %84 = insertvalue { ptr } undef, ptr %83, 0
  call void %82(ptr %73, { ptr } %84) #15
  ret void
}

define { ptr, i32 } @MapIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca ptr, align 8
  %5 = alloca i32, align 4
  %6 = alloca ptr, align 8
  %7 = alloca i32, align 4
  %8 = alloca ptr, align 8
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i32 }, align 8
  %.reg2mem1 = alloca { ptr, i32 }, align 8
  %.reg2mem3 = alloca { ptr, i32 }, align 8
  %.reg2mem5 = alloca { ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %9, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 16, ptr %9)
  %11 = alloca { ptr, ptr, ptr, i32 }, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 0
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 2
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %23 = load i32, ptr %21, align 4
  store i32 %23, ptr %22, align 4
  call void @set_offset(ptr %11, ptr @MapIterator)
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %25 = load ptr, ptr %24, align 8
  %26 = load ptr, ptr %11, align 8
  %27 = call ptr @llvm.invariant.start.p0(i64 64, ptr %26)
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %29 = load i32, ptr %28, align 4
  %30 = getelementptr ptr, ptr %26, i32 %29
  %31 = load ptr, ptr %30, align 8
  %32 = getelementptr { ptr, ptr }, ptr %31, i32 0, i32 0
  %33 = load ptr, ptr %32, align 8
  %34 = call { ptr, ptr, ptr, i32 } %33(ptr %25) #16
  %35 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %34, ptr %35, align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 16, ptr %35)
  call void @assume_offset(ptr %35, ptr @IntIterator)
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %38 = load ptr, ptr %37, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %38, 0
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %41 = load ptr, ptr %40, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } %39, ptr %41, 1
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %44 = load ptr, ptr %43, align 8
  %45 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %44, 2
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %47 = load i32, ptr %46, align 4
  %48 = insertvalue { ptr, ptr, ptr, i32 } %45, i32 %47, 3
  %49 = alloca [0 x ptr], align 8
  %50 = call ptr @llvm.invariant.start.p0(i64 0, ptr %49)
  %51 = call ptr @llvm.invariant.start.p0(i64 16, ptr %38)
  %52 = getelementptr ptr, ptr %38, i32 %47
  %53 = load ptr, ptr %52, align 8
  %54 = alloca {}, align 8
  %55 = call ptr @behavior_wrapper(ptr %53, { ptr, ptr, ptr, i32 } %48, ptr %54)
  %56 = call { ptr, i32 } %55({ ptr, ptr, ptr, i32 } %48, { ptr, ptr, ptr, i32 } %48, ptr %49)
  %57 = alloca { ptr, i32 }, align 8
  store { ptr, i32 } %56, ptr %57, align 8
  %58 = getelementptr { ptr, i32 }, ptr %57, i32 0, i32 0
  %59 = load ptr, ptr %58, align 8
  %60 = ptrtoint ptr %59 to i64
  %61 = icmp eq i64 %60, ptrtoint (ptr @nil_typ to i64)
  %62 = icmp eq i64 %60, 0
  %63 = or i1 %61, %62
  %64 = icmp eq i1 %63, false
  br i1 %64, label %65, label %86

65:                                               ; preds = %3
  %66 = getelementptr { ptr, i32 }, ptr %57, i32 0, i32 1
  %67 = load i32, ptr %66, align 4
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = load ptr, ptr %11, align 8
  %71 = call ptr @llvm.invariant.start.p0(i64 64, ptr %70)
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %73 = load i32, ptr %72, align 4
  %74 = getelementptr ptr, ptr %70, i32 %73
  %75 = getelementptr ptr, ptr %74, i32 1
  %76 = load ptr, ptr %75, align 8
  %77 = getelementptr { ptr, ptr }, ptr %76, i32 0, i32 0
  %78 = load ptr, ptr %77, align 8
  %79 = call { ptr } %78(ptr %69) #16
  store { ptr } %79, ptr %4, align 8
  %80 = load ptr, ptr %4, align 8
  %81 = call i32 %80(i32 %67)
  store i32 %81, ptr %5, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %6, align 4
  %82 = load ptr, ptr %6, align 8
  %83 = insertvalue { ptr, i32 } undef, ptr %82, 0
  %84 = load i32, ptr %5, align 4
  %85 = insertvalue { ptr, i32 } %83, i32 %84, 1
  store { ptr, i32 } %85, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i32 }, ptr %.reg2mem3, align 8
  store { ptr, i32 } %.reload4, ptr %.reg2mem5, align 8
  br label %91

86:                                               ; preds = %3
  store [0 x i8] undef, ptr %7, align 1
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %8, align 4
  %87 = load ptr, ptr %8, align 8
  %88 = insertvalue { ptr, i32 } undef, ptr %87, 0
  %89 = load i32, ptr %7, align 4
  %90 = insertvalue { ptr, i32 } %88, i32 %89, 1
  store { ptr, i32 } %90, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i32 }, ptr %.reg2mem1, align 8
  store { ptr, i32 } %.reload2, ptr %.reg2mem5, align 8
  br label %91

91:                                               ; preds = %86, %65
  %.reload6 = load { ptr, i32 }, ptr %.reg2mem5, align 8
  store { ptr, i32 } %.reload6, ptr %.reg2mem, align 8
  br label %92

92:                                               ; preds = %91
  %.reload = load { ptr, i32 }, ptr %.reg2mem, align 8
  ret { ptr, i32 } %.reload
}

define { ptr } @MapIterator_getter_f(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr } undef, ptr %9, 0
  ret { ptr } %10
}

define void @MapIterator_setter_f(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca ptr, align 8
  store { ptr } %1, ptr %9, align 8
  %10 = getelementptr { ptr }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  ret void
}

define { ptr, ptr, ptr, i32 } @MapIterator_getter_iterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @MapIterator_setter_iterator(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  ret void
}

define { i64, i64 } @_size_ProductIterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %10
  %12 = urem i64 %11, %5
  %13 = icmp eq i64 %12, 0
  %14 = sub i64 %5, %12
  %15 = select i1 %13, i64 0, i64 %14
  %16 = add i64 %11, %15
  %17 = insertvalue { i64, i64 } undef, i64 %16, 0
  %18 = insertvalue { i64, i64 } %17, i64 %5, 1
  ret { i64, i64 } %18
}

define ptr @ProductIterable_B_init_firstIntIterable_secondIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [12 x ptr], ptr %26, i32 0, i32 4
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @ProductIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [12 x ptr], ptr %4, i32 0, i32 5
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @ProductIterable_init_firstIntIterable_secondIntIterable({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @ProductIterable)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @IntIterable)
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %45 = load ptr, ptr %43, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %48 = load i32, ptr %46, align 4
  store i32 %48, ptr %47, align 4
  call void @set_offset(ptr %36, ptr @IntIterable)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %8, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 96, ptr %51)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = getelementptr ptr, ptr %51, i32 %54
  %56 = load ptr, ptr %55, align 8
  %57 = getelementptr { ptr, ptr }, ptr %56, i32 0, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %63 = load ptr, ptr %62, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %63, 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %66 = load ptr, ptr %65, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %66, 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %69 = load i32, ptr %68, align 4
  %70 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %69, 3
  call void %58(ptr %50, { ptr, ptr, ptr, i32 } %70) #15
  %71 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %71, align 8
  %72 = call ptr @llvm.invariant.start.p0(i64 16, ptr %71)
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 0
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %76 = load ptr, ptr %74, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 1
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %79 = load ptr, ptr %77, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 2
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %82 = load ptr, ptr %80, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 3
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %85 = load i32, ptr %83, align 4
  store i32 %85, ptr %84, align 4
  call void @set_offset(ptr %73, ptr @IntIterable)
  %86 = alloca { ptr, ptr, ptr, i32 }, align 8
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 0
  %89 = load ptr, ptr %87, align 8
  store ptr %89, ptr %88, align 8
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 1
  %92 = load ptr, ptr %90, align 8
  store ptr %92, ptr %91, align 8
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 2
  %95 = load ptr, ptr %93, align 8
  store ptr %95, ptr %94, align 8
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 3
  %98 = load i32, ptr %96, align 4
  store i32 %98, ptr %97, align 4
  call void @set_offset(ptr %86, ptr @IntIterable)
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %100 = load ptr, ptr %99, align 8
  %101 = load ptr, ptr %8, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 96, ptr %101)
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %104 = load i32, ptr %103, align 4
  %105 = getelementptr ptr, ptr %101, i32 %104
  %106 = getelementptr ptr, ptr %105, i32 1
  %107 = load ptr, ptr %106, align 8
  %108 = getelementptr { ptr, ptr }, ptr %107, i32 0, i32 1
  %109 = load ptr, ptr %108, align 8
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 0
  %111 = load ptr, ptr %110, align 8
  %112 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %111, 0
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 1
  %114 = load ptr, ptr %113, align 8
  %115 = insertvalue { ptr, ptr, ptr, i32 } %112, ptr %114, 1
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 2
  %117 = load ptr, ptr %116, align 8
  %118 = insertvalue { ptr, ptr, ptr, i32 } %115, ptr %117, 2
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 3
  %120 = load i32, ptr %119, align 4
  %121 = insertvalue { ptr, ptr, ptr, i32 } %118, i32 %120, 3
  call void %109(ptr %100, { ptr, ptr, ptr, i32 } %121) #15
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @ProductIterable)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 96, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 0
  %28 = load ptr, ptr %27, align 8
  %29 = call { ptr, ptr, ptr, i32 } %28(ptr %20) #16
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %29, ptr %30, align 8
  %31 = call ptr @llvm.invariant.start.p0(i64 16, ptr %30)
  call void @assume_offset(ptr %30, ptr @IntIterable)
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %33 = load ptr, ptr %32, align 8
  %34 = load ptr, ptr %6, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 96, ptr %34)
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %37 = load i32, ptr %36, align 4
  %38 = getelementptr ptr, ptr %34, i32 %37
  %39 = getelementptr ptr, ptr %38, i32 1
  %40 = load ptr, ptr %39, align 8
  %41 = getelementptr { ptr, ptr }, ptr %40, i32 0, i32 0
  %42 = load ptr, ptr %41, align 8
  %43 = call { ptr, ptr, ptr, i32 } %42(ptr %33) #16
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %43, ptr %44, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 16, ptr %44)
  call void @assume_offset(ptr %44, ptr @IntIterable)
  %46 = alloca [1 x ptr], align 8
  store ptr @ProductIterator, ptr %46, align 8
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr ptr, ptr %47, i32 6
  %49 = load ptr, ptr %48, align 8
  %50 = call { i64, i64 } @size_wrapper(ptr %49, ptr %46)
  %51 = extractvalue { i64, i64 } %50, 0
  %52 = call ptr @bump_malloc(i64 %51)
  %53 = alloca { ptr, ptr, ptr, i32 }, align 8
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 1
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 3
  store ptr @ProductIterator, ptr %53, align 8
  store ptr %52, ptr %54, align 8
  store i32 9, ptr %55, align 4
  %56 = call ptr @llvm.invariant.start.p0(i64 16, ptr %53)
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = load ptr, ptr %6, align 8
  %60 = call ptr @llvm.invariant.start.p0(i64 96, ptr %59)
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %62 = load i32, ptr %61, align 4
  %63 = getelementptr ptr, ptr %59, i32 %62
  %64 = load ptr, ptr %63, align 8
  %65 = getelementptr { ptr, ptr }, ptr %64, i32 0, i32 0
  %66 = load ptr, ptr %65, align 8
  %67 = call { ptr, ptr, ptr, i32 } %66(ptr %58) #16
  %68 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %67, ptr %68, align 8
  %69 = call ptr @llvm.invariant.start.p0(i64 16, ptr %68)
  call void @assume_offset(ptr %68, ptr @IntIterable)
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %71 = load ptr, ptr %70, align 8
  %72 = load ptr, ptr %6, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 96, ptr %72)
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %75 = load i32, ptr %74, align 4
  %76 = getelementptr ptr, ptr %72, i32 %75
  %77 = getelementptr ptr, ptr %76, i32 1
  %78 = load ptr, ptr %77, align 8
  %79 = getelementptr { ptr, ptr }, ptr %78, i32 0, i32 0
  %80 = load ptr, ptr %79, align 8
  %81 = call { ptr, ptr, ptr, i32 } %80(ptr %71) #16
  %82 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %81, ptr %82, align 8
  %83 = call ptr @llvm.invariant.start.p0(i64 16, ptr %82)
  call void @assume_offset(ptr %82, ptr @IntIterable)
  %84 = alloca { ptr, ptr, ptr, i32 }, align 8
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 0
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %84, i32 0, i32 0
  %87 = load ptr, ptr %85, align 8
  store ptr %87, ptr %86, align 8
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 1
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %84, i32 0, i32 1
  %90 = load ptr, ptr %88, align 8
  store ptr %90, ptr %89, align 8
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 2
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %84, i32 0, i32 2
  %93 = load ptr, ptr %91, align 8
  store ptr %93, ptr %92, align 8
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 3
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %84, i32 0, i32 3
  %96 = load i32, ptr %94, align 4
  store i32 %96, ptr %95, align 4
  call void @set_offset(ptr %84, ptr @IntIterable)
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %84, i32 0, i32 0
  %98 = load ptr, ptr %97, align 8
  %99 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %98, 0
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %84, i32 0, i32 1
  %101 = load ptr, ptr %100, align 8
  %102 = insertvalue { ptr, ptr, ptr, i32 } %99, ptr %101, 1
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %84, i32 0, i32 2
  %104 = load ptr, ptr %103, align 8
  %105 = insertvalue { ptr, ptr, ptr, i32 } %102, ptr %104, 2
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %84, i32 0, i32 3
  %107 = load i32, ptr %106, align 4
  %108 = insertvalue { ptr, ptr, ptr, i32 } %105, i32 %107, 3
  %109 = alloca { ptr, ptr, ptr, i32 }, align 8
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 0
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %109, i32 0, i32 0
  %112 = load ptr, ptr %110, align 8
  store ptr %112, ptr %111, align 8
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 1
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %109, i32 0, i32 1
  %115 = load ptr, ptr %113, align 8
  store ptr %115, ptr %114, align 8
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 2
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %109, i32 0, i32 2
  %118 = load ptr, ptr %116, align 8
  store ptr %118, ptr %117, align 8
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 3
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %109, i32 0, i32 3
  %121 = load i32, ptr %119, align 4
  store i32 %121, ptr %120, align 4
  call void @set_offset(ptr %109, ptr @IntIterable)
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %109, i32 0, i32 0
  %123 = load ptr, ptr %122, align 8
  %124 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %123, 0
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %109, i32 0, i32 1
  %126 = load ptr, ptr %125, align 8
  %127 = insertvalue { ptr, ptr, ptr, i32 } %124, ptr %126, 1
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %109, i32 0, i32 2
  %129 = load ptr, ptr %128, align 8
  %130 = insertvalue { ptr, ptr, ptr, i32 } %127, ptr %129, 2
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %109, i32 0, i32 3
  %132 = load i32, ptr %131, align 4
  %133 = insertvalue { ptr, ptr, ptr, i32 } %130, i32 %132, 3
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 0
  %135 = load ptr, ptr %134, align 8
  %136 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %135, 0
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 1
  %138 = load ptr, ptr %137, align 8
  %139 = insertvalue { ptr, ptr, ptr, i32 } %136, ptr %138, 1
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 2
  %141 = load ptr, ptr %140, align 8
  %142 = insertvalue { ptr, ptr, ptr, i32 } %139, ptr %141, 2
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 3
  %144 = load i32, ptr %143, align 4
  %145 = insertvalue { ptr, ptr, ptr, i32 } %142, i32 %144, 3
  %146 = alloca [2 x ptr], align 8
  %147 = getelementptr [2 x ptr], ptr %146, i32 0, i32 0
  store ptr @_parameterization_IntIterable, ptr %147, align 8
  %148 = getelementptr [2 x ptr], ptr %146, i32 0, i32 1
  store ptr @_parameterization_IntIterable, ptr %148, align 8
  %149 = call ptr @llvm.invariant.start.p0(i64 4, ptr %146)
  %150 = call ptr @llvm.invariant.start.p0(i64 64, ptr %135)
  %151 = getelementptr ptr, ptr %135, i32 %144
  %152 = getelementptr ptr, ptr %151, i32 4
  %153 = load ptr, ptr %152, align 8
  %154 = alloca { ptr, ptr }, align 8
  %155 = getelementptr { ptr, ptr }, ptr %154, i32 0, i32 0
  store ptr %98, ptr %155, align 8
  %156 = getelementptr { ptr, ptr }, ptr %154, i32 0, i32 1
  store ptr %123, ptr %156, align 8
  %157 = call ptr @behavior_wrapper(ptr %153, { ptr, ptr, ptr, i32 } %145, ptr %154)
  call void %157({ ptr, ptr, ptr, i32 } %145, { ptr, ptr, ptr, i32 } %145, ptr %146, { ptr, ptr, ptr, i32 } %108, { ptr, ptr, ptr, i32 } %133)
  %158 = alloca { ptr, ptr, ptr, i32 }, align 8
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 0
  %160 = getelementptr { ptr, ptr, ptr, i32 }, ptr %158, i32 0, i32 0
  %161 = load ptr, ptr %159, align 8
  store ptr %161, ptr %160, align 8
  %162 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 1
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %158, i32 0, i32 1
  %164 = load ptr, ptr %162, align 8
  store ptr %164, ptr %163, align 8
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 2
  %166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %158, i32 0, i32 2
  %167 = load ptr, ptr %165, align 8
  store ptr %167, ptr %166, align 8
  %168 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 3
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %158, i32 0, i32 3
  %170 = load i32, ptr %168, align 4
  store i32 %170, ptr %169, align 4
  call void @set_offset(ptr %158, ptr @Iterator)
  %171 = getelementptr { ptr, ptr, ptr, i32 }, ptr %158, i32 0, i32 0
  %172 = load ptr, ptr %171, align 8
  %173 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %172, 0
  %174 = getelementptr { ptr, ptr, ptr, i32 }, ptr %158, i32 0, i32 1
  %175 = load ptr, ptr %174, align 8
  %176 = insertvalue { ptr, ptr, ptr, i32 } %173, ptr %175, 1
  %177 = getelementptr { ptr, ptr, ptr, i32 }, ptr %158, i32 0, i32 2
  %178 = load ptr, ptr %177, align 8
  %179 = insertvalue { ptr, ptr, ptr, i32 } %176, ptr %178, 2
  %180 = getelementptr { ptr, ptr, ptr, i32 }, ptr %158, i32 0, i32 3
  %181 = load i32, ptr %180, align 4
  %182 = insertvalue { ptr, ptr, ptr, i32 } %179, i32 %181, 3
  ret { ptr, ptr, ptr, i32 } %182
}

define { i64, i64 } @_size_ProductIterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr ({ ptr, i32 }, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = urem i64 %27, %21
  %29 = icmp eq i64 %28, 0
  %30 = sub i64 %21, %28
  %31 = select i1 %29, i64 0, i64 %30
  %32 = add i64 %27, %31
  %33 = insertvalue { i64, i64 } undef, i64 %32, 0
  %34 = insertvalue { i64, i64 } %33, i64 %21, 1
  ret { i64, i64 } %34
}

define ptr @ProductIterator_B_init_first_iterableIntIterable_second_iterableIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [8 x ptr], ptr %26, i32 0, i32 6
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @ProductIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [8 x ptr], ptr %4, i32 0, i32 7
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @ProductIterator_init_first_iterableIntIterable_second_iterableIntIterable({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @ProductIterator)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @IntIterable)
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %36, align 8
  %37 = call ptr @llvm.invariant.start.p0(i64 16, ptr %36)
  %38 = alloca { ptr, ptr, ptr, i32 }, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 0
  %41 = load ptr, ptr %39, align 8
  store ptr %41, ptr %40, align 8
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %44 = load ptr, ptr %42, align 8
  store ptr %44, ptr %43, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 2
  %47 = load ptr, ptr %45, align 8
  store ptr %47, ptr %46, align 8
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %50 = load i32, ptr %48, align 4
  store i32 %50, ptr %49, align 4
  call void @set_offset(ptr %38, ptr @IntIterable)
  %51 = alloca { ptr, ptr, ptr, i32 }, align 8
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 0
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 0
  %54 = load ptr, ptr %52, align 8
  store ptr %54, ptr %53, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 1
  %57 = load ptr, ptr %55, align 8
  store ptr %57, ptr %56, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 2
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 2
  %60 = load ptr, ptr %58, align 8
  store ptr %60, ptr %59, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 3
  %63 = load i32, ptr %61, align 4
  store i32 %63, ptr %62, align 4
  call void @set_offset(ptr %51, ptr @IntIterable)
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %65 = load ptr, ptr %64, align 8
  %66 = load ptr, ptr %8, align 8
  %67 = call ptr @llvm.invariant.start.p0(i64 64, ptr %66)
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %69 = load i32, ptr %68, align 4
  %70 = getelementptr ptr, ptr %66, i32 %69
  %71 = getelementptr ptr, ptr %70, i32 2
  %72 = load ptr, ptr %71, align 8
  %73 = getelementptr { ptr, ptr }, ptr %72, i32 0, i32 1
  %74 = load ptr, ptr %73, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 0
  %76 = load ptr, ptr %75, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %76, 0
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 1
  %79 = load ptr, ptr %78, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } %77, ptr %79, 1
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 2
  %82 = load ptr, ptr %81, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } %80, ptr %82, 2
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 3
  %85 = load i32, ptr %84, align 4
  %86 = insertvalue { ptr, ptr, ptr, i32 } %83, i32 %85, 3
  call void %74(ptr %65, { ptr, ptr, ptr, i32 } %86) #15
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %88 = load ptr, ptr %87, align 8
  %89 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %88, 0
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } %89, ptr %91, 1
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %94 = load ptr, ptr %93, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %94, 2
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %97 = load i32, ptr %96, align 4
  %98 = insertvalue { ptr, ptr, ptr, i32 } %95, i32 %97, 3
  %99 = alloca [0 x ptr], align 8
  %100 = call ptr @llvm.invariant.start.p0(i64 0, ptr %99)
  %101 = call ptr @llvm.invariant.start.p0(i64 192, ptr %88)
  %102 = getelementptr ptr, ptr %88, i32 %97
  %103 = getelementptr ptr, ptr %102, i32 10
  %104 = load ptr, ptr %103, align 8
  %105 = alloca {}, align 8
  %106 = call ptr @behavior_wrapper(ptr %104, { ptr, ptr, ptr, i32 } %98, ptr %105)
  %107 = call { ptr, ptr, ptr, i32 } %106({ ptr, ptr, ptr, i32 } %98, { ptr, ptr, ptr, i32 } %98, ptr %99)
  %108 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %107, ptr %108, align 8
  %109 = call ptr @llvm.invariant.start.p0(i64 16, ptr %108)
  %110 = alloca { ptr, ptr, ptr, i32 }, align 8
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 0
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %110, i32 0, i32 0
  %113 = load ptr, ptr %111, align 8
  store ptr %113, ptr %112, align 8
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 1
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %110, i32 0, i32 1
  %116 = load ptr, ptr %114, align 8
  store ptr %116, ptr %115, align 8
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 2
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %110, i32 0, i32 2
  %119 = load ptr, ptr %117, align 8
  store ptr %119, ptr %118, align 8
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 3
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %110, i32 0, i32 3
  %122 = load i32, ptr %120, align 4
  store i32 %122, ptr %121, align 4
  call void @set_offset(ptr %110, ptr @IntIterator)
  %123 = alloca { ptr, ptr, ptr, i32 }, align 8
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %110, i32 0, i32 0
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 0
  %126 = load ptr, ptr %124, align 8
  store ptr %126, ptr %125, align 8
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %110, i32 0, i32 1
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 1
  %129 = load ptr, ptr %127, align 8
  store ptr %129, ptr %128, align 8
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %110, i32 0, i32 2
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 2
  %132 = load ptr, ptr %130, align 8
  store ptr %132, ptr %131, align 8
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %110, i32 0, i32 3
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 3
  %135 = load i32, ptr %133, align 4
  store i32 %135, ptr %134, align 4
  call void @set_offset(ptr %123, ptr @IntIterator)
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %137 = load ptr, ptr %136, align 8
  %138 = load ptr, ptr %8, align 8
  %139 = call ptr @llvm.invariant.start.p0(i64 64, ptr %138)
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %141 = load i32, ptr %140, align 4
  %142 = getelementptr ptr, ptr %138, i32 %141
  %143 = load ptr, ptr %142, align 8
  %144 = getelementptr { ptr, ptr }, ptr %143, i32 0, i32 1
  %145 = load ptr, ptr %144, align 8
  %146 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 0
  %147 = load ptr, ptr %146, align 8
  %148 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %147, 0
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 1
  %150 = load ptr, ptr %149, align 8
  %151 = insertvalue { ptr, ptr, ptr, i32 } %148, ptr %150, 1
  %152 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 2
  %153 = load ptr, ptr %152, align 8
  %154 = insertvalue { ptr, ptr, ptr, i32 } %151, ptr %153, 2
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 3
  %156 = load i32, ptr %155, align 4
  %157 = insertvalue { ptr, ptr, ptr, i32 } %154, i32 %156, 3
  call void %145(ptr %137, { ptr, ptr, ptr, i32 } %157) #15
  %158 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %159 = load ptr, ptr %158, align 8
  %160 = load ptr, ptr %8, align 8
  %161 = call ptr @llvm.invariant.start.p0(i64 64, ptr %160)
  %162 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %163 = load i32, ptr %162, align 4
  %164 = getelementptr ptr, ptr %160, i32 %163
  %165 = getelementptr ptr, ptr %164, i32 2
  %166 = load ptr, ptr %165, align 8
  %167 = getelementptr { ptr, ptr }, ptr %166, i32 0, i32 0
  %168 = load ptr, ptr %167, align 8
  %169 = call { ptr, ptr, ptr, i32 } %168(ptr %159) #16
  %170 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %169, ptr %170, align 8
  %171 = call ptr @llvm.invariant.start.p0(i64 16, ptr %170)
  call void @assume_offset(ptr %170, ptr @IntIterable)
  %172 = getelementptr { ptr, ptr, ptr, i32 }, ptr %170, i32 0, i32 0
  %173 = load ptr, ptr %172, align 8
  %174 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %173, 0
  %175 = getelementptr { ptr, ptr, ptr, i32 }, ptr %170, i32 0, i32 1
  %176 = load ptr, ptr %175, align 8
  %177 = insertvalue { ptr, ptr, ptr, i32 } %174, ptr %176, 1
  %178 = getelementptr { ptr, ptr, ptr, i32 }, ptr %170, i32 0, i32 2
  %179 = load ptr, ptr %178, align 8
  %180 = insertvalue { ptr, ptr, ptr, i32 } %177, ptr %179, 2
  %181 = getelementptr { ptr, ptr, ptr, i32 }, ptr %170, i32 0, i32 3
  %182 = load i32, ptr %181, align 4
  %183 = insertvalue { ptr, ptr, ptr, i32 } %180, i32 %182, 3
  %184 = alloca [0 x ptr], align 8
  %185 = call ptr @llvm.invariant.start.p0(i64 0, ptr %184)
  %186 = call ptr @llvm.invariant.start.p0(i64 192, ptr %173)
  %187 = getelementptr ptr, ptr %173, i32 %182
  %188 = getelementptr ptr, ptr %187, i32 10
  %189 = load ptr, ptr %188, align 8
  %190 = alloca {}, align 8
  %191 = call ptr @behavior_wrapper(ptr %189, { ptr, ptr, ptr, i32 } %183, ptr %190)
  %192 = call { ptr, ptr, ptr, i32 } %191({ ptr, ptr, ptr, i32 } %183, { ptr, ptr, ptr, i32 } %183, ptr %184)
  %193 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %192, ptr %193, align 8
  %194 = call ptr @llvm.invariant.start.p0(i64 16, ptr %193)
  %195 = alloca { ptr, ptr, ptr, i32 }, align 8
  %196 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 0
  %197 = getelementptr { ptr, ptr, ptr, i32 }, ptr %195, i32 0, i32 0
  %198 = load ptr, ptr %196, align 8
  store ptr %198, ptr %197, align 8
  %199 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 1
  %200 = getelementptr { ptr, ptr, ptr, i32 }, ptr %195, i32 0, i32 1
  %201 = load ptr, ptr %199, align 8
  store ptr %201, ptr %200, align 8
  %202 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 2
  %203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %195, i32 0, i32 2
  %204 = load ptr, ptr %202, align 8
  store ptr %204, ptr %203, align 8
  %205 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 3
  %206 = getelementptr { ptr, ptr, ptr, i32 }, ptr %195, i32 0, i32 3
  %207 = load i32, ptr %205, align 4
  store i32 %207, ptr %206, align 4
  call void @set_offset(ptr %195, ptr @IntIterator)
  %208 = alloca { ptr, ptr, ptr, i32 }, align 8
  %209 = getelementptr { ptr, ptr, ptr, i32 }, ptr %195, i32 0, i32 0
  %210 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 0
  %211 = load ptr, ptr %209, align 8
  store ptr %211, ptr %210, align 8
  %212 = getelementptr { ptr, ptr, ptr, i32 }, ptr %195, i32 0, i32 1
  %213 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 1
  %214 = load ptr, ptr %212, align 8
  store ptr %214, ptr %213, align 8
  %215 = getelementptr { ptr, ptr, ptr, i32 }, ptr %195, i32 0, i32 2
  %216 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 2
  %217 = load ptr, ptr %215, align 8
  store ptr %217, ptr %216, align 8
  %218 = getelementptr { ptr, ptr, ptr, i32 }, ptr %195, i32 0, i32 3
  %219 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 3
  %220 = load i32, ptr %218, align 4
  store i32 %220, ptr %219, align 4
  call void @set_offset(ptr %208, ptr @IntIterator)
  %221 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %222 = load ptr, ptr %221, align 8
  %223 = load ptr, ptr %8, align 8
  %224 = call ptr @llvm.invariant.start.p0(i64 64, ptr %223)
  %225 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %226 = load i32, ptr %225, align 4
  %227 = getelementptr ptr, ptr %223, i32 %226
  %228 = getelementptr ptr, ptr %227, i32 1
  %229 = load ptr, ptr %228, align 8
  %230 = getelementptr { ptr, ptr }, ptr %229, i32 0, i32 1
  %231 = load ptr, ptr %230, align 8
  %232 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 0
  %233 = load ptr, ptr %232, align 8
  %234 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %233, 0
  %235 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 1
  %236 = load ptr, ptr %235, align 8
  %237 = insertvalue { ptr, ptr, ptr, i32 } %234, ptr %236, 1
  %238 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 2
  %239 = load ptr, ptr %238, align 8
  %240 = insertvalue { ptr, ptr, ptr, i32 } %237, ptr %239, 2
  %241 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 3
  %242 = load i32, ptr %241, align 4
  %243 = insertvalue { ptr, ptr, ptr, i32 } %240, i32 %242, 3
  call void %231(ptr %222, { ptr, ptr, ptr, i32 } %243) #15
  %244 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %245 = load ptr, ptr %244, align 8
  %246 = load ptr, ptr %8, align 8
  %247 = call ptr @llvm.invariant.start.p0(i64 64, ptr %246)
  %248 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %249 = load i32, ptr %248, align 4
  %250 = getelementptr ptr, ptr %246, i32 %249
  %251 = load ptr, ptr %250, align 8
  %252 = getelementptr { ptr, ptr }, ptr %251, i32 0, i32 0
  %253 = load ptr, ptr %252, align 8
  %254 = call { ptr, ptr, ptr, i32 } %253(ptr %245) #16
  %255 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %254, ptr %255, align 8
  %256 = call ptr @llvm.invariant.start.p0(i64 16, ptr %255)
  call void @assume_offset(ptr %255, ptr @IntIterator)
  %257 = getelementptr { ptr, ptr, ptr, i32 }, ptr %255, i32 0, i32 0
  %258 = load ptr, ptr %257, align 8
  %259 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %258, 0
  %260 = getelementptr { ptr, ptr, ptr, i32 }, ptr %255, i32 0, i32 1
  %261 = load ptr, ptr %260, align 8
  %262 = insertvalue { ptr, ptr, ptr, i32 } %259, ptr %261, 1
  %263 = getelementptr { ptr, ptr, ptr, i32 }, ptr %255, i32 0, i32 2
  %264 = load ptr, ptr %263, align 8
  %265 = insertvalue { ptr, ptr, ptr, i32 } %262, ptr %264, 2
  %266 = getelementptr { ptr, ptr, ptr, i32 }, ptr %255, i32 0, i32 3
  %267 = load i32, ptr %266, align 4
  %268 = insertvalue { ptr, ptr, ptr, i32 } %265, i32 %267, 3
  %269 = alloca [0 x ptr], align 8
  %270 = call ptr @llvm.invariant.start.p0(i64 0, ptr %269)
  %271 = call ptr @llvm.invariant.start.p0(i64 16, ptr %258)
  %272 = getelementptr ptr, ptr %258, i32 %267
  %273 = load ptr, ptr %272, align 8
  %274 = alloca {}, align 8
  %275 = call ptr @behavior_wrapper(ptr %273, { ptr, ptr, ptr, i32 } %268, ptr %274)
  %276 = call { ptr, i32 } %275({ ptr, ptr, ptr, i32 } %268, { ptr, ptr, ptr, i32 } %268, ptr %269)
  %277 = alloca { ptr, i32 }, align 8
  store { ptr, i32 } %276, ptr %277, align 8
  %278 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %279 = load ptr, ptr %278, align 8
  %280 = load ptr, ptr %8, align 8
  %281 = call ptr @llvm.invariant.start.p0(i64 64, ptr %280)
  %282 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %283 = load i32, ptr %282, align 4
  %284 = getelementptr ptr, ptr %280, i32 %283
  %285 = getelementptr ptr, ptr %284, i32 3
  %286 = load ptr, ptr %285, align 8
  %287 = getelementptr { ptr, ptr }, ptr %286, i32 0, i32 1
  %288 = load ptr, ptr %287, align 8
  %289 = getelementptr { ptr, i32 }, ptr %277, i32 0, i32 0
  %290 = load ptr, ptr %289, align 8
  %291 = insertvalue { ptr, i32 } undef, ptr %290, 0
  %292 = getelementptr { ptr, i32 }, ptr %277, i32 0, i32 1
  %293 = load i32, ptr %292, align 4
  %294 = insertvalue { ptr, i32 } %291, i32 %293, 1
  call void %288(ptr %279, { ptr, i32 } %294) #15
  ret void
}

define { ptr, i64 } @ProductIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = alloca [0 x ptr], align 8
  %6 = alloca {}, align 8
  %7 = alloca { ptr, i32 }, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i64, align 8
  %11 = alloca ptr, align 8
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  %13 = alloca [0 x ptr], align 8
  %14 = alloca {}, align 8
  %15 = alloca { ptr, i32 }, align 8
  %16 = alloca { ptr, ptr, ptr, i32 }, align 8
  %17 = alloca [0 x ptr], align 8
  %18 = alloca {}, align 8
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = alloca { ptr, i32 }, align 8
  %23 = alloca i64, align 8
  %24 = alloca ptr, align 8
  %25 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i64 }, align 8
  %.reg2mem1 = alloca { ptr, i64 }, align 8
  %.reg2mem3 = alloca i32, align 4
  %.reg2mem6 = alloca i32, align 4
  %.reg2mem8 = alloca i32, align 4
  %.reg2mem11 = alloca i32, align 4
  %.reg2mem13 = alloca i32, align 4
  %.reg2mem15 = alloca i32, align 4
  %.reg2mem17 = alloca ptr, align 8
  %.reg2mem19 = alloca { ptr, i64 }, align 8
  %.reg2mem21 = alloca i32, align 4
  %.reg2mem23 = alloca i32, align 4
  %.reg2mem25 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %25, align 8
  %26 = call ptr @llvm.invariant.start.p0(i64 16, ptr %25)
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 0
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 1
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 2
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %36 = load ptr, ptr %34, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 3
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %39 = load i32, ptr %37, align 4
  store i32 %39, ptr %38, align 4
  call void @set_offset(ptr %27, ptr @ProductIterator)
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %41 = load ptr, ptr %40, align 8
  %42 = load ptr, ptr %27, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 64, ptr %42)
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %45 = load i32, ptr %44, align 4
  %46 = getelementptr ptr, ptr %42, i32 %45
  %47 = getelementptr ptr, ptr %46, i32 3
  %48 = load ptr, ptr %47, align 8
  %49 = getelementptr { ptr, ptr }, ptr %48, i32 0, i32 0
  %50 = load ptr, ptr %49, align 8
  %51 = call { ptr, i32 } %50(ptr %41) #16
  %52 = alloca { ptr, i32 }, align 8
  store { ptr, i32 } %51, ptr %52, align 8
  %53 = getelementptr { ptr, i32 }, ptr %52, i32 0, i32 0
  store ptr %53, ptr %.reg2mem17, align 8
  br label %54

54:                                               ; preds = %257, %3
  %.reload18 = load ptr, ptr %.reg2mem17, align 8
  %55 = load ptr, ptr %.reload18, align 8
  %56 = ptrtoint ptr %55 to i64
  %57 = icmp eq i64 %56, ptrtoint (ptr @nil_typ to i64)
  %58 = icmp eq i64 %56, 0
  %59 = or i1 %57, %58
  %60 = icmp eq i1 %59, false
  br i1 %60, label %61, label %253

61:                                               ; preds = %54
  %62 = getelementptr { ptr, i32 }, ptr %52, i32 0, i32 1
  %63 = load i32, ptr %62, align 4
  store i32 %63, ptr %.reg2mem15, align 4
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %65 = load ptr, ptr %64, align 8
  %66 = load ptr, ptr %27, align 8
  %67 = call ptr @llvm.invariant.start.p0(i64 64, ptr %66)
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %69 = load i32, ptr %68, align 4
  %70 = getelementptr ptr, ptr %66, i32 %69
  %71 = getelementptr ptr, ptr %70, i32 1
  %72 = load ptr, ptr %71, align 8
  %73 = getelementptr { ptr, ptr }, ptr %72, i32 0, i32 0
  %74 = load ptr, ptr %73, align 8
  %75 = call { ptr, ptr, ptr, i32 } %74(ptr %65) #16
  store { ptr, ptr, ptr, i32 } %75, ptr %4, align 8
  %76 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  call void @assume_offset(ptr %4, ptr @IntIterator)
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %78 = load ptr, ptr %77, align 8
  %79 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %78, 0
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %81 = load ptr, ptr %80, align 8
  %82 = insertvalue { ptr, ptr, ptr, i32 } %79, ptr %81, 1
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %84 = load ptr, ptr %83, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } %82, ptr %84, 2
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %87 = load i32, ptr %86, align 4
  %88 = insertvalue { ptr, ptr, ptr, i32 } %85, i32 %87, 3
  %89 = call ptr @llvm.invariant.start.p0(i64 0, ptr %5)
  %90 = call ptr @llvm.invariant.start.p0(i64 16, ptr %78)
  %91 = getelementptr ptr, ptr %78, i32 %87
  %92 = load ptr, ptr %91, align 8
  %93 = call ptr @behavior_wrapper(ptr %92, { ptr, ptr, ptr, i32 } %88, ptr %6)
  %94 = call { ptr, i32 } %93({ ptr, ptr, ptr, i32 } %88, { ptr, ptr, ptr, i32 } %88, ptr %5)
  store { ptr, i32 } %94, ptr %7, align 8
  %95 = getelementptr { ptr, i32 }, ptr %7, i32 0, i32 0
  %96 = load ptr, ptr %95, align 8
  %97 = ptrtoint ptr %96 to i64
  %98 = icmp eq i64 %97, ptrtoint (ptr @nil_typ to i64)
  %99 = icmp eq i64 %97, 0
  %100 = or i1 %98, %99
  %101 = icmp eq i1 %100, false
  %102 = zext i1 %101 to i32
  store i32 %102, ptr %.reg2mem13, align 4
  %103 = icmp ne i1 %100, false
  %104 = zext i1 %103 to i32
  store i32 %104, ptr %.reg2mem11, align 4
  br i1 %101, label %105, label %106

105:                                              ; preds = %61
  br label %252

106:                                              ; preds = %61
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %108 = load ptr, ptr %107, align 8
  %109 = load ptr, ptr %27, align 8
  %110 = call ptr @llvm.invariant.start.p0(i64 64, ptr %109)
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %112 = load i32, ptr %111, align 4
  %113 = getelementptr ptr, ptr %109, i32 %112
  %114 = load ptr, ptr %113, align 8
  %115 = getelementptr { ptr, ptr }, ptr %114, i32 0, i32 0
  %116 = load ptr, ptr %115, align 8
  %117 = call { ptr, ptr, ptr, i32 } %116(ptr %108) #16
  store { ptr, ptr, ptr, i32 } %117, ptr %12, align 8
  %118 = call ptr @llvm.invariant.start.p0(i64 16, ptr %12)
  call void @assume_offset(ptr %12, ptr @IntIterator)
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 0
  %120 = load ptr, ptr %119, align 8
  %121 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %120, 0
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %123 = load ptr, ptr %122, align 8
  %124 = insertvalue { ptr, ptr, ptr, i32 } %121, ptr %123, 1
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 2
  %126 = load ptr, ptr %125, align 8
  %127 = insertvalue { ptr, ptr, ptr, i32 } %124, ptr %126, 2
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  %129 = load i32, ptr %128, align 4
  %130 = insertvalue { ptr, ptr, ptr, i32 } %127, i32 %129, 3
  %131 = call ptr @llvm.invariant.start.p0(i64 0, ptr %13)
  %132 = call ptr @llvm.invariant.start.p0(i64 16, ptr %120)
  %133 = getelementptr ptr, ptr %120, i32 %129
  %134 = load ptr, ptr %133, align 8
  %135 = call ptr @behavior_wrapper(ptr %134, { ptr, ptr, ptr, i32 } %130, ptr %14)
  %136 = call { ptr, i32 } %135({ ptr, ptr, ptr, i32 } %130, { ptr, ptr, ptr, i32 } %130, ptr %13)
  store { ptr, i32 } %136, ptr %15, align 8
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %138 = load ptr, ptr %137, align 8
  %139 = load ptr, ptr %27, align 8
  %140 = call ptr @llvm.invariant.start.p0(i64 64, ptr %139)
  %141 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %142 = load i32, ptr %141, align 4
  %143 = getelementptr ptr, ptr %139, i32 %142
  %144 = getelementptr ptr, ptr %143, i32 3
  %145 = load ptr, ptr %144, align 8
  %146 = getelementptr { ptr, ptr }, ptr %145, i32 0, i32 1
  %147 = load ptr, ptr %146, align 8
  %148 = getelementptr { ptr, i32 }, ptr %15, i32 0, i32 0
  %149 = load ptr, ptr %148, align 8
  %150 = insertvalue { ptr, i32 } undef, ptr %149, 0
  %151 = getelementptr { ptr, i32 }, ptr %15, i32 0, i32 1
  %152 = load i32, ptr %151, align 4
  %153 = insertvalue { ptr, i32 } %150, i32 %152, 1
  call void %147(ptr %138, { ptr, i32 } %153) #15
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %155 = load ptr, ptr %154, align 8
  %156 = load ptr, ptr %27, align 8
  %157 = call ptr @llvm.invariant.start.p0(i64 64, ptr %156)
  %158 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %159 = load i32, ptr %158, align 4
  %160 = getelementptr ptr, ptr %156, i32 %159
  %161 = getelementptr ptr, ptr %160, i32 2
  %162 = load ptr, ptr %161, align 8
  %163 = getelementptr { ptr, ptr }, ptr %162, i32 0, i32 0
  %164 = load ptr, ptr %163, align 8
  %165 = call { ptr, ptr, ptr, i32 } %164(ptr %155) #16
  store { ptr, ptr, ptr, i32 } %165, ptr %16, align 8
  %166 = call ptr @llvm.invariant.start.p0(i64 16, ptr %16)
  call void @assume_offset(ptr %16, ptr @IntIterable)
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 0
  %168 = load ptr, ptr %167, align 8
  %169 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %168, 0
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %171 = load ptr, ptr %170, align 8
  %172 = insertvalue { ptr, ptr, ptr, i32 } %169, ptr %171, 1
  %173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 2
  %174 = load ptr, ptr %173, align 8
  %175 = insertvalue { ptr, ptr, ptr, i32 } %172, ptr %174, 2
  %176 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %177 = load i32, ptr %176, align 4
  %178 = insertvalue { ptr, ptr, ptr, i32 } %175, i32 %177, 3
  %179 = call ptr @llvm.invariant.start.p0(i64 0, ptr %17)
  %180 = call ptr @llvm.invariant.start.p0(i64 192, ptr %168)
  %181 = getelementptr ptr, ptr %168, i32 %177
  %182 = getelementptr ptr, ptr %181, i32 10
  %183 = load ptr, ptr %182, align 8
  %184 = call ptr @behavior_wrapper(ptr %183, { ptr, ptr, ptr, i32 } %178, ptr %18)
  %185 = call { ptr, ptr, ptr, i32 } %184({ ptr, ptr, ptr, i32 } %178, { ptr, ptr, ptr, i32 } %178, ptr %17)
  store { ptr, ptr, ptr, i32 } %185, ptr %19, align 8
  %186 = call ptr @llvm.invariant.start.p0(i64 16, ptr %19)
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %188 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %189 = load ptr, ptr %187, align 8
  store ptr %189, ptr %188, align 8
  %190 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %191 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %192 = load ptr, ptr %190, align 8
  store ptr %192, ptr %191, align 8
  %193 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %194 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %195 = load ptr, ptr %193, align 8
  store ptr %195, ptr %194, align 8
  %196 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %197 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %198 = load i32, ptr %196, align 4
  store i32 %198, ptr %197, align 4
  call void @set_offset(ptr %20, ptr @IntIterator)
  %199 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %200 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %201 = load ptr, ptr %199, align 8
  store ptr %201, ptr %200, align 8
  %202 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %204 = load ptr, ptr %202, align 8
  store ptr %204, ptr %203, align 8
  %205 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %206 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %207 = load ptr, ptr %205, align 8
  store ptr %207, ptr %206, align 8
  %208 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %209 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %210 = load i32, ptr %208, align 4
  store i32 %210, ptr %209, align 4
  call void @set_offset(ptr %21, ptr @IntIterator)
  %211 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %212 = load ptr, ptr %211, align 8
  %213 = load ptr, ptr %27, align 8
  %214 = call ptr @llvm.invariant.start.p0(i64 64, ptr %213)
  %215 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %216 = load i32, ptr %215, align 4
  %217 = getelementptr ptr, ptr %213, i32 %216
  %218 = getelementptr ptr, ptr %217, i32 1
  %219 = load ptr, ptr %218, align 8
  %220 = getelementptr { ptr, ptr }, ptr %219, i32 0, i32 1
  %221 = load ptr, ptr %220, align 8
  %222 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %223 = load ptr, ptr %222, align 8
  %224 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %223, 0
  %225 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %226 = load ptr, ptr %225, align 8
  %227 = insertvalue { ptr, ptr, ptr, i32 } %224, ptr %226, 1
  %228 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %229 = load ptr, ptr %228, align 8
  %230 = insertvalue { ptr, ptr, ptr, i32 } %227, ptr %229, 2
  %231 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %232 = load i32, ptr %231, align 4
  %233 = insertvalue { ptr, ptr, ptr, i32 } %230, i32 %232, 3
  call void %221(ptr %212, { ptr, ptr, ptr, i32 } %233) #15
  %234 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %235 = load ptr, ptr %234, align 8
  %236 = load ptr, ptr %27, align 8
  %237 = call ptr @llvm.invariant.start.p0(i64 64, ptr %236)
  %238 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %239 = load i32, ptr %238, align 4
  %240 = getelementptr ptr, ptr %236, i32 %239
  %241 = getelementptr ptr, ptr %240, i32 3
  %242 = load ptr, ptr %241, align 8
  %243 = getelementptr { ptr, ptr }, ptr %242, i32 0, i32 0
  %244 = load ptr, ptr %243, align 8
  %245 = call { ptr, i32 } %244(ptr %235) #16
  store { ptr, i32 } %245, ptr %22, align 8
  %246 = getelementptr { ptr, i32 }, ptr %22, i32 0, i32 0
  %247 = getelementptr { ptr, i32 }, ptr %52, i32 0, i32 0
  %248 = load ptr, ptr %246, align 8
  store ptr %248, ptr %247, align 8
  %249 = getelementptr { ptr, i32 }, ptr %22, i32 0, i32 1
  %250 = getelementptr { ptr, i32 }, ptr %52, i32 0, i32 1
  %251 = load i32, ptr %249, align 4
  store i32 %251, ptr %250, align 4
  br label %252

252:                                              ; preds = %106, %105
  %.reload12 = load i32, ptr %.reg2mem11, align 4
  %.reload14 = load i32, ptr %.reg2mem13, align 4
  %.reload16 = load i32, ptr %.reg2mem15, align 4
  store i32 %.reload16, ptr %.reg2mem21, align 4
  store i32 %.reload12, ptr %.reg2mem23, align 4
  store i32 %.reload14, ptr %.reg2mem25, align 4
  br label %254

253:                                              ; preds = %54
  store i32 poison, ptr %.reg2mem21, align 4
  store i32 0, ptr %.reg2mem23, align 4
  store i32 2, ptr %.reg2mem25, align 4
  br label %254

254:                                              ; preds = %253, %252
  %.reload26 = load i32, ptr %.reg2mem25, align 4
  %.reload24 = load i32, ptr %.reg2mem23, align 4
  %.reload22 = load i32, ptr %.reg2mem21, align 4
  store i32 %.reload26, ptr %.reg2mem8, align 4
  store i32 %.reload24, ptr %.reg2mem6, align 4
  store i32 %.reload22, ptr %.reg2mem3, align 4
  br label %255

255:                                              ; preds = %254
  %.reload7 = load i32, ptr %.reg2mem6, align 4
  %256 = trunc i32 %.reload7 to i1
  %.reload5 = load i32, ptr %.reg2mem3, align 4
  %.reload10 = load i32, ptr %.reg2mem8, align 4
  br i1 %256, label %257, label %258

257:                                              ; preds = %255
  br label %54

258:                                              ; preds = %255
  %.reload9 = load i32, ptr %.reg2mem8, align 4
  %259 = zext i32 %.reload9 to i64
  %260 = trunc i64 %259 to i32
  switch i32 %260, label %272 [
    i32 1, label %261
  ]

261:                                              ; preds = %258
  %262 = getelementptr { ptr, i32 }, ptr %7, i32 0, i32 1
  %263 = load i32, ptr %262, align 4
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  store i32 %.reload4, ptr %9, align 4
  store i32 %263, ptr %8, align 4
  %264 = getelementptr { i32, i32 }, ptr %10, i32 0, i32 0
  %265 = load i32, ptr %9, align 4
  store i32 %265, ptr %264, align 4
  %266 = getelementptr { i32, i32 }, ptr %10, i32 0, i32 1
  %267 = load i32, ptr %8, align 4
  store i32 %267, ptr %266, align 4
  store i64 ptrtoint (ptr @tuple_typ to i64), ptr %11, align 4
  %268 = load ptr, ptr %11, align 8
  %269 = insertvalue { ptr, i64 } undef, ptr %268, 0
  %270 = load i64, ptr %10, align 4
  %271 = insertvalue { ptr, i64 } %269, i64 %270, 1
  store { ptr, i64 } %271, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i64 }, ptr %.reg2mem1, align 8
  store { ptr, i64 } %.reload2, ptr %.reg2mem19, align 8
  br label %277

272:                                              ; preds = %258
  store [0 x i8] undef, ptr %23, align 1
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %24, align 4
  %273 = load ptr, ptr %24, align 8
  %274 = insertvalue { ptr, i64 } undef, ptr %273, 0
  %275 = load i64, ptr %23, align 4
  %276 = insertvalue { ptr, i64 } %274, i64 %275, 1
  store { ptr, i64 } %276, ptr %.reg2mem, align 8
  %.reload = load { ptr, i64 }, ptr %.reg2mem, align 8
  store { ptr, i64 } %.reload, ptr %.reg2mem19, align 8
  br label %277

277:                                              ; preds = %272, %261
  %.reload20 = load { ptr, i64 }, ptr %.reg2mem19, align 8
  ret { ptr, i64 } %.reload20
}

define { ptr, i32 } @ProductIterator_getter_current_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = getelementptr { ptr, i32 }, ptr %19, i32 0, i32 0
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, i32 } undef, ptr %21, 0
  %23 = getelementptr { ptr, i32 }, ptr %19, i32 0, i32 1
  %24 = load i32, ptr %23, align 4
  %25 = insertvalue { ptr, i32 } %22, i32 %24, 1
  ret { ptr, i32 } %25
}

define void @ProductIterator_setter_current_first(ptr %0, { ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = alloca { ptr, i32 }, align 8
  store { ptr, i32 } %1, ptr %21, align 8
  %22 = getelementptr { ptr, i32 }, ptr %21, i32 0, i32 0
  %23 = getelementptr { ptr, i32 }, ptr %20, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, i32 }, ptr %21, i32 0, i32 1
  %26 = getelementptr { ptr, i32 }, ptr %20, i32 0, i32 1
  %27 = load i32, ptr %25, align 4
  store i32 %27, ptr %26, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterator_getter_second_iterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %15, 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %21, 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 %24, 3
  ret { ptr, ptr, ptr, i32 } %25
}

define void @ProductIterator_setter_second_iterable(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %15, align 8
  %16 = call ptr @llvm.invariant.start.p0(i64 16, ptr %15)
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %28 = load i32, ptr %26, align 4
  store i32 %28, ptr %27, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterator_getter_second_iterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @ProductIterator_setter_second_iterator(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 16, ptr %9)
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %22 = load i32, ptr %20, align 4
  store i32 %22, ptr %21, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterator_getter_first_iterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @ProductIterator_setter_first_iterator(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterable_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @ProductIterable_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 16, ptr %9)
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %22 = load i32, ptr %20, align 4
  store i32 %22, ptr %21, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterable_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @ProductIterable_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  ret void
}

define { i64, i64 } @_size_IntTupleIterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret { i64, i64 } { i64 0, i64 1 }
}

define { i64, i64 } @_size_ZipIterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %10
  %12 = urem i64 %11, %5
  %13 = icmp eq i64 %12, 0
  %14 = sub i64 %5, %12
  %15 = select i1 %13, i64 0, i64 %14
  %16 = add i64 %11, %15
  %17 = insertvalue { i64, i64 } undef, i64 %16, 0
  %18 = insertvalue { i64, i64 } %17, i64 %5, 1
  ret { i64, i64 } %18
}

define ptr @ZipIterable_B_init_firstIntIterable_secondIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [12 x ptr], ptr %26, i32 0, i32 4
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @ZipIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [12 x ptr], ptr %4, i32 0, i32 5
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @ZipIterable_init_firstIntIterable_secondIntIterable({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @ZipIterable)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @IntIterable)
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %45 = load ptr, ptr %43, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %48 = load i32, ptr %46, align 4
  store i32 %48, ptr %47, align 4
  call void @set_offset(ptr %36, ptr @IntIterable)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %8, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 96, ptr %51)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = getelementptr ptr, ptr %51, i32 %54
  %56 = load ptr, ptr %55, align 8
  %57 = getelementptr { ptr, ptr }, ptr %56, i32 0, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %63 = load ptr, ptr %62, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %63, 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %66 = load ptr, ptr %65, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %66, 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %69 = load i32, ptr %68, align 4
  %70 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %69, 3
  call void %58(ptr %50, { ptr, ptr, ptr, i32 } %70) #15
  %71 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %71, align 8
  %72 = call ptr @llvm.invariant.start.p0(i64 16, ptr %71)
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 0
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %76 = load ptr, ptr %74, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 1
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %79 = load ptr, ptr %77, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 2
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %82 = load ptr, ptr %80, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 3
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %85 = load i32, ptr %83, align 4
  store i32 %85, ptr %84, align 4
  call void @set_offset(ptr %73, ptr @IntIterable)
  %86 = alloca { ptr, ptr, ptr, i32 }, align 8
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 0
  %89 = load ptr, ptr %87, align 8
  store ptr %89, ptr %88, align 8
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 1
  %92 = load ptr, ptr %90, align 8
  store ptr %92, ptr %91, align 8
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 2
  %95 = load ptr, ptr %93, align 8
  store ptr %95, ptr %94, align 8
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 3
  %98 = load i32, ptr %96, align 4
  store i32 %98, ptr %97, align 4
  call void @set_offset(ptr %86, ptr @IntIterable)
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %100 = load ptr, ptr %99, align 8
  %101 = load ptr, ptr %8, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 96, ptr %101)
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %104 = load i32, ptr %103, align 4
  %105 = getelementptr ptr, ptr %101, i32 %104
  %106 = getelementptr ptr, ptr %105, i32 1
  %107 = load ptr, ptr %106, align 8
  %108 = getelementptr { ptr, ptr }, ptr %107, i32 0, i32 1
  %109 = load ptr, ptr %108, align 8
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 0
  %111 = load ptr, ptr %110, align 8
  %112 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %111, 0
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 1
  %114 = load ptr, ptr %113, align 8
  %115 = insertvalue { ptr, ptr, ptr, i32 } %112, ptr %114, 1
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 2
  %117 = load ptr, ptr %116, align 8
  %118 = insertvalue { ptr, ptr, ptr, i32 } %115, ptr %117, 2
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 3
  %120 = load i32, ptr %119, align 4
  %121 = insertvalue { ptr, ptr, ptr, i32 } %118, i32 %120, 3
  call void %109(ptr %100, { ptr, ptr, ptr, i32 } %121) #15
  ret void
}

define { ptr, ptr, ptr, i32 } @ZipIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @ZipIterable)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 96, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 0
  %28 = load ptr, ptr %27, align 8
  %29 = call { ptr, ptr, ptr, i32 } %28(ptr %20) #16
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %29, ptr %30, align 8
  %31 = call ptr @llvm.invariant.start.p0(i64 16, ptr %30)
  call void @assume_offset(ptr %30, ptr @IntIterable)
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %33, 0
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %36, 1
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %39 = load ptr, ptr %38, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %39, 2
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %42 = load i32, ptr %41, align 4
  %43 = insertvalue { ptr, ptr, ptr, i32 } %40, i32 %42, 3
  %44 = alloca [0 x ptr], align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 0, ptr %44)
  %46 = call ptr @llvm.invariant.start.p0(i64 192, ptr %33)
  %47 = getelementptr ptr, ptr %33, i32 %42
  %48 = getelementptr ptr, ptr %47, i32 10
  %49 = load ptr, ptr %48, align 8
  %50 = alloca {}, align 8
  %51 = call ptr @behavior_wrapper(ptr %49, { ptr, ptr, ptr, i32 } %43, ptr %50)
  %52 = call { ptr, ptr, ptr, i32 } %51({ ptr, ptr, ptr, i32 } %43, { ptr, ptr, ptr, i32 } %43, ptr %44)
  %53 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %52, ptr %53, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 16, ptr %53)
  %55 = alloca { ptr, ptr, ptr, i32 }, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 0
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 0
  %58 = load ptr, ptr %56, align 8
  store ptr %58, ptr %57, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 1
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  %61 = load ptr, ptr %59, align 8
  store ptr %61, ptr %60, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 2
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 2
  %64 = load ptr, ptr %62, align 8
  store ptr %64, ptr %63, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 3
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  %67 = load i32, ptr %65, align 4
  store i32 %67, ptr %66, align 4
  call void @set_offset(ptr %55, ptr @IntIterator)
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = load ptr, ptr %6, align 8
  %71 = call ptr @llvm.invariant.start.p0(i64 96, ptr %70)
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %73 = load i32, ptr %72, align 4
  %74 = getelementptr ptr, ptr %70, i32 %73
  %75 = getelementptr ptr, ptr %74, i32 1
  %76 = load ptr, ptr %75, align 8
  %77 = getelementptr { ptr, ptr }, ptr %76, i32 0, i32 0
  %78 = load ptr, ptr %77, align 8
  %79 = call { ptr, ptr, ptr, i32 } %78(ptr %69) #16
  %80 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %79, ptr %80, align 8
  %81 = call ptr @llvm.invariant.start.p0(i64 16, ptr %80)
  call void @assume_offset(ptr %80, ptr @IntIterable)
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %80, i32 0, i32 0
  %83 = load ptr, ptr %82, align 8
  %84 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %83, 0
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %80, i32 0, i32 1
  %86 = load ptr, ptr %85, align 8
  %87 = insertvalue { ptr, ptr, ptr, i32 } %84, ptr %86, 1
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %80, i32 0, i32 2
  %89 = load ptr, ptr %88, align 8
  %90 = insertvalue { ptr, ptr, ptr, i32 } %87, ptr %89, 2
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %80, i32 0, i32 3
  %92 = load i32, ptr %91, align 4
  %93 = insertvalue { ptr, ptr, ptr, i32 } %90, i32 %92, 3
  %94 = alloca [0 x ptr], align 8
  %95 = call ptr @llvm.invariant.start.p0(i64 0, ptr %94)
  %96 = call ptr @llvm.invariant.start.p0(i64 192, ptr %83)
  %97 = getelementptr ptr, ptr %83, i32 %92
  %98 = getelementptr ptr, ptr %97, i32 10
  %99 = load ptr, ptr %98, align 8
  %100 = alloca {}, align 8
  %101 = call ptr @behavior_wrapper(ptr %99, { ptr, ptr, ptr, i32 } %93, ptr %100)
  %102 = call { ptr, ptr, ptr, i32 } %101({ ptr, ptr, ptr, i32 } %93, { ptr, ptr, ptr, i32 } %93, ptr %94)
  %103 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %102, ptr %103, align 8
  %104 = call ptr @llvm.invariant.start.p0(i64 16, ptr %103)
  %105 = alloca { ptr, ptr, ptr, i32 }, align 8
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 0
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 0
  %108 = load ptr, ptr %106, align 8
  store ptr %108, ptr %107, align 8
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 1
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 1
  %111 = load ptr, ptr %109, align 8
  store ptr %111, ptr %110, align 8
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 2
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 2
  %114 = load ptr, ptr %112, align 8
  store ptr %114, ptr %113, align 8
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 3
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 3
  %117 = load i32, ptr %115, align 4
  store i32 %117, ptr %116, align 4
  call void @set_offset(ptr %105, ptr @IntIterator)
  %118 = alloca [1 x ptr], align 8
  store ptr @ZipIterator, ptr %118, align 8
  %119 = load ptr, ptr %118, align 8
  %120 = getelementptr ptr, ptr %119, i32 6
  %121 = load ptr, ptr %120, align 8
  %122 = call { i64, i64 } @size_wrapper(ptr %121, ptr %118)
  %123 = extractvalue { i64, i64 } %122, 0
  %124 = call ptr @bump_malloc(i64 %123)
  %125 = alloca { ptr, ptr, ptr, i32 }, align 8
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 1
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 3
  store ptr @ZipIterator, ptr %125, align 8
  store ptr %124, ptr %126, align 8
  store i32 9, ptr %127, align 4
  %128 = call ptr @llvm.invariant.start.p0(i64 16, ptr %125)
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %130 = load ptr, ptr %129, align 8
  %131 = load ptr, ptr %6, align 8
  %132 = call ptr @llvm.invariant.start.p0(i64 96, ptr %131)
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %134 = load i32, ptr %133, align 4
  %135 = getelementptr ptr, ptr %131, i32 %134
  %136 = load ptr, ptr %135, align 8
  %137 = getelementptr { ptr, ptr }, ptr %136, i32 0, i32 0
  %138 = load ptr, ptr %137, align 8
  %139 = call { ptr, ptr, ptr, i32 } %138(ptr %130) #16
  %140 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %139, ptr %140, align 8
  %141 = call ptr @llvm.invariant.start.p0(i64 16, ptr %140)
  call void @assume_offset(ptr %140, ptr @IntIterable)
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %140, i32 0, i32 0
  %143 = load ptr, ptr %142, align 8
  %144 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %143, 0
  %145 = getelementptr { ptr, ptr, ptr, i32 }, ptr %140, i32 0, i32 1
  %146 = load ptr, ptr %145, align 8
  %147 = insertvalue { ptr, ptr, ptr, i32 } %144, ptr %146, 1
  %148 = getelementptr { ptr, ptr, ptr, i32 }, ptr %140, i32 0, i32 2
  %149 = load ptr, ptr %148, align 8
  %150 = insertvalue { ptr, ptr, ptr, i32 } %147, ptr %149, 2
  %151 = getelementptr { ptr, ptr, ptr, i32 }, ptr %140, i32 0, i32 3
  %152 = load i32, ptr %151, align 4
  %153 = insertvalue { ptr, ptr, ptr, i32 } %150, i32 %152, 3
  %154 = alloca [0 x ptr], align 8
  %155 = call ptr @llvm.invariant.start.p0(i64 0, ptr %154)
  %156 = call ptr @llvm.invariant.start.p0(i64 192, ptr %143)
  %157 = getelementptr ptr, ptr %143, i32 %152
  %158 = getelementptr ptr, ptr %157, i32 10
  %159 = load ptr, ptr %158, align 8
  %160 = alloca {}, align 8
  %161 = call ptr @behavior_wrapper(ptr %159, { ptr, ptr, ptr, i32 } %153, ptr %160)
  %162 = call { ptr, ptr, ptr, i32 } %161({ ptr, ptr, ptr, i32 } %153, { ptr, ptr, ptr, i32 } %153, ptr %154)
  %163 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %162, ptr %163, align 8
  %164 = call ptr @llvm.invariant.start.p0(i64 16, ptr %163)
  %165 = alloca { ptr, ptr, ptr, i32 }, align 8
  %166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 0
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %165, i32 0, i32 0
  %168 = load ptr, ptr %166, align 8
  store ptr %168, ptr %167, align 8
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 1
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %165, i32 0, i32 1
  %171 = load ptr, ptr %169, align 8
  store ptr %171, ptr %170, align 8
  %172 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 2
  %173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %165, i32 0, i32 2
  %174 = load ptr, ptr %172, align 8
  store ptr %174, ptr %173, align 8
  %175 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 3
  %176 = getelementptr { ptr, ptr, ptr, i32 }, ptr %165, i32 0, i32 3
  %177 = load i32, ptr %175, align 4
  store i32 %177, ptr %176, align 4
  call void @set_offset(ptr %165, ptr @IntIterator)
  %178 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %179 = load ptr, ptr %178, align 8
  %180 = load ptr, ptr %6, align 8
  %181 = call ptr @llvm.invariant.start.p0(i64 96, ptr %180)
  %182 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %183 = load i32, ptr %182, align 4
  %184 = getelementptr ptr, ptr %180, i32 %183
  %185 = getelementptr ptr, ptr %184, i32 1
  %186 = load ptr, ptr %185, align 8
  %187 = getelementptr { ptr, ptr }, ptr %186, i32 0, i32 0
  %188 = load ptr, ptr %187, align 8
  %189 = call { ptr, ptr, ptr, i32 } %188(ptr %179) #16
  %190 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %189, ptr %190, align 8
  %191 = call ptr @llvm.invariant.start.p0(i64 16, ptr %190)
  call void @assume_offset(ptr %190, ptr @IntIterable)
  %192 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 0
  %193 = load ptr, ptr %192, align 8
  %194 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %193, 0
  %195 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 1
  %196 = load ptr, ptr %195, align 8
  %197 = insertvalue { ptr, ptr, ptr, i32 } %194, ptr %196, 1
  %198 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 2
  %199 = load ptr, ptr %198, align 8
  %200 = insertvalue { ptr, ptr, ptr, i32 } %197, ptr %199, 2
  %201 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 3
  %202 = load i32, ptr %201, align 4
  %203 = insertvalue { ptr, ptr, ptr, i32 } %200, i32 %202, 3
  %204 = alloca [0 x ptr], align 8
  %205 = call ptr @llvm.invariant.start.p0(i64 0, ptr %204)
  %206 = call ptr @llvm.invariant.start.p0(i64 192, ptr %193)
  %207 = getelementptr ptr, ptr %193, i32 %202
  %208 = getelementptr ptr, ptr %207, i32 10
  %209 = load ptr, ptr %208, align 8
  %210 = alloca {}, align 8
  %211 = call ptr @behavior_wrapper(ptr %209, { ptr, ptr, ptr, i32 } %203, ptr %210)
  %212 = call { ptr, ptr, ptr, i32 } %211({ ptr, ptr, ptr, i32 } %203, { ptr, ptr, ptr, i32 } %203, ptr %204)
  %213 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %212, ptr %213, align 8
  %214 = call ptr @llvm.invariant.start.p0(i64 16, ptr %213)
  %215 = alloca { ptr, ptr, ptr, i32 }, align 8
  %216 = getelementptr { ptr, ptr, ptr, i32 }, ptr %213, i32 0, i32 0
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %215, i32 0, i32 0
  %218 = load ptr, ptr %216, align 8
  store ptr %218, ptr %217, align 8
  %219 = getelementptr { ptr, ptr, ptr, i32 }, ptr %213, i32 0, i32 1
  %220 = getelementptr { ptr, ptr, ptr, i32 }, ptr %215, i32 0, i32 1
  %221 = load ptr, ptr %219, align 8
  store ptr %221, ptr %220, align 8
  %222 = getelementptr { ptr, ptr, ptr, i32 }, ptr %213, i32 0, i32 2
  %223 = getelementptr { ptr, ptr, ptr, i32 }, ptr %215, i32 0, i32 2
  %224 = load ptr, ptr %222, align 8
  store ptr %224, ptr %223, align 8
  %225 = getelementptr { ptr, ptr, ptr, i32 }, ptr %213, i32 0, i32 3
  %226 = getelementptr { ptr, ptr, ptr, i32 }, ptr %215, i32 0, i32 3
  %227 = load i32, ptr %225, align 4
  store i32 %227, ptr %226, align 4
  call void @set_offset(ptr %215, ptr @IntIterator)
  %228 = alloca { ptr, ptr, ptr, i32 }, align 8
  %229 = getelementptr { ptr, ptr, ptr, i32 }, ptr %165, i32 0, i32 0
  %230 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 0
  %231 = load ptr, ptr %229, align 8
  store ptr %231, ptr %230, align 8
  %232 = getelementptr { ptr, ptr, ptr, i32 }, ptr %165, i32 0, i32 1
  %233 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 1
  %234 = load ptr, ptr %232, align 8
  store ptr %234, ptr %233, align 8
  %235 = getelementptr { ptr, ptr, ptr, i32 }, ptr %165, i32 0, i32 2
  %236 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 2
  %237 = load ptr, ptr %235, align 8
  store ptr %237, ptr %236, align 8
  %238 = getelementptr { ptr, ptr, ptr, i32 }, ptr %165, i32 0, i32 3
  %239 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 3
  %240 = load i32, ptr %238, align 4
  store i32 %240, ptr %239, align 4
  call void @set_offset(ptr %228, ptr @IntIterator)
  %241 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 0
  %242 = load ptr, ptr %241, align 8
  %243 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %242, 0
  %244 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 1
  %245 = load ptr, ptr %244, align 8
  %246 = insertvalue { ptr, ptr, ptr, i32 } %243, ptr %245, 1
  %247 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 2
  %248 = load ptr, ptr %247, align 8
  %249 = insertvalue { ptr, ptr, ptr, i32 } %246, ptr %248, 2
  %250 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 3
  %251 = load i32, ptr %250, align 4
  %252 = insertvalue { ptr, ptr, ptr, i32 } %249, i32 %251, 3
  %253 = alloca { ptr, ptr, ptr, i32 }, align 8
  %254 = getelementptr { ptr, ptr, ptr, i32 }, ptr %215, i32 0, i32 0
  %255 = getelementptr { ptr, ptr, ptr, i32 }, ptr %253, i32 0, i32 0
  %256 = load ptr, ptr %254, align 8
  store ptr %256, ptr %255, align 8
  %257 = getelementptr { ptr, ptr, ptr, i32 }, ptr %215, i32 0, i32 1
  %258 = getelementptr { ptr, ptr, ptr, i32 }, ptr %253, i32 0, i32 1
  %259 = load ptr, ptr %257, align 8
  store ptr %259, ptr %258, align 8
  %260 = getelementptr { ptr, ptr, ptr, i32 }, ptr %215, i32 0, i32 2
  %261 = getelementptr { ptr, ptr, ptr, i32 }, ptr %253, i32 0, i32 2
  %262 = load ptr, ptr %260, align 8
  store ptr %262, ptr %261, align 8
  %263 = getelementptr { ptr, ptr, ptr, i32 }, ptr %215, i32 0, i32 3
  %264 = getelementptr { ptr, ptr, ptr, i32 }, ptr %253, i32 0, i32 3
  %265 = load i32, ptr %263, align 4
  store i32 %265, ptr %264, align 4
  call void @set_offset(ptr %253, ptr @IntIterator)
  %266 = getelementptr { ptr, ptr, ptr, i32 }, ptr %253, i32 0, i32 0
  %267 = load ptr, ptr %266, align 8
  %268 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %267, 0
  %269 = getelementptr { ptr, ptr, ptr, i32 }, ptr %253, i32 0, i32 1
  %270 = load ptr, ptr %269, align 8
  %271 = insertvalue { ptr, ptr, ptr, i32 } %268, ptr %270, 1
  %272 = getelementptr { ptr, ptr, ptr, i32 }, ptr %253, i32 0, i32 2
  %273 = load ptr, ptr %272, align 8
  %274 = insertvalue { ptr, ptr, ptr, i32 } %271, ptr %273, 2
  %275 = getelementptr { ptr, ptr, ptr, i32 }, ptr %253, i32 0, i32 3
  %276 = load i32, ptr %275, align 4
  %277 = insertvalue { ptr, ptr, ptr, i32 } %274, i32 %276, 3
  %278 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 0
  %279 = load ptr, ptr %278, align 8
  %280 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %279, 0
  %281 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 1
  %282 = load ptr, ptr %281, align 8
  %283 = insertvalue { ptr, ptr, ptr, i32 } %280, ptr %282, 1
  %284 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 2
  %285 = load ptr, ptr %284, align 8
  %286 = insertvalue { ptr, ptr, ptr, i32 } %283, ptr %285, 2
  %287 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 3
  %288 = load i32, ptr %287, align 4
  %289 = insertvalue { ptr, ptr, ptr, i32 } %286, i32 %288, 3
  %290 = alloca [2 x ptr], align 8
  %291 = getelementptr [2 x ptr], ptr %290, i32 0, i32 0
  store ptr @_parameterization_IntIterator, ptr %291, align 8
  %292 = getelementptr [2 x ptr], ptr %290, i32 0, i32 1
  store ptr @_parameterization_IntIterator, ptr %292, align 8
  %293 = call ptr @llvm.invariant.start.p0(i64 4, ptr %290)
  %294 = call ptr @llvm.invariant.start.p0(i64 64, ptr %279)
  %295 = getelementptr ptr, ptr %279, i32 %288
  %296 = getelementptr ptr, ptr %295, i32 2
  %297 = load ptr, ptr %296, align 8
  %298 = alloca { ptr, ptr }, align 8
  %299 = getelementptr { ptr, ptr }, ptr %298, i32 0, i32 0
  store ptr %242, ptr %299, align 8
  %300 = getelementptr { ptr, ptr }, ptr %298, i32 0, i32 1
  store ptr %267, ptr %300, align 8
  %301 = call ptr @behavior_wrapper(ptr %297, { ptr, ptr, ptr, i32 } %289, ptr %298)
  call void %301({ ptr, ptr, ptr, i32 } %289, { ptr, ptr, ptr, i32 } %289, ptr %290, { ptr, ptr, ptr, i32 } %252, { ptr, ptr, ptr, i32 } %277)
  %302 = alloca { ptr, ptr, ptr, i32 }, align 8
  %303 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 0
  %304 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 0
  %305 = load ptr, ptr %303, align 8
  store ptr %305, ptr %304, align 8
  %306 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 1
  %307 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 1
  %308 = load ptr, ptr %306, align 8
  store ptr %308, ptr %307, align 8
  %309 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 2
  %310 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 2
  %311 = load ptr, ptr %309, align 8
  store ptr %311, ptr %310, align 8
  %312 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 3
  %313 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 3
  %314 = load i32, ptr %312, align 4
  store i32 %314, ptr %313, align 4
  call void @set_offset(ptr %302, ptr @Iterator)
  %315 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 0
  %316 = load ptr, ptr %315, align 8
  %317 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %316, 0
  %318 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 1
  %319 = load ptr, ptr %318, align 8
  %320 = insertvalue { ptr, ptr, ptr, i32 } %317, ptr %319, 1
  %321 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 2
  %322 = load ptr, ptr %321, align 8
  %323 = insertvalue { ptr, ptr, ptr, i32 } %320, ptr %322, 2
  %324 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 3
  %325 = load i32, ptr %324, align 4
  %326 = insertvalue { ptr, ptr, ptr, i32 } %323, i32 %325, 3
  ret { ptr, ptr, ptr, i32 } %326
}

define { i64, i64 } @_size_ZipIterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %10
  %12 = urem i64 %11, %5
  %13 = icmp eq i64 %12, 0
  %14 = sub i64 %5, %12
  %15 = select i1 %13, i64 0, i64 %14
  %16 = add i64 %11, %15
  %17 = insertvalue { i64, i64 } undef, i64 %16, 0
  %18 = insertvalue { i64, i64 } %17, i64 %5, 1
  ret { i64, i64 } %18
}

define ptr @ZipIterator_B_init_firstIntIterator_secondIntIterator({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -933084275656658555, i64 ptrtoint (ptr @IntIterator to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 -933084275656658555, i64 ptrtoint (ptr @IntIterator to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [8 x ptr], ptr %26, i32 0, i32 4
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @ZipIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [8 x ptr], ptr %4, i32 0, i32 5
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @ZipIterator_init_firstIntIterator_secondIntIterator({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @ZipIterator)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @IntIterator)
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %45 = load ptr, ptr %43, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %48 = load i32, ptr %46, align 4
  store i32 %48, ptr %47, align 4
  call void @set_offset(ptr %36, ptr @IntIterator)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %8, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 64, ptr %51)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = getelementptr ptr, ptr %51, i32 %54
  %56 = load ptr, ptr %55, align 8
  %57 = getelementptr { ptr, ptr }, ptr %56, i32 0, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %63 = load ptr, ptr %62, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %63, 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %66 = load ptr, ptr %65, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %66, 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %69 = load i32, ptr %68, align 4
  %70 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %69, 3
  call void %58(ptr %50, { ptr, ptr, ptr, i32 } %70) #15
  %71 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %71, align 8
  %72 = call ptr @llvm.invariant.start.p0(i64 16, ptr %71)
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 0
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %76 = load ptr, ptr %74, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 1
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %79 = load ptr, ptr %77, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 2
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %82 = load ptr, ptr %80, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 3
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %85 = load i32, ptr %83, align 4
  store i32 %85, ptr %84, align 4
  call void @set_offset(ptr %73, ptr @IntIterator)
  %86 = alloca { ptr, ptr, ptr, i32 }, align 8
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 0
  %89 = load ptr, ptr %87, align 8
  store ptr %89, ptr %88, align 8
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 1
  %92 = load ptr, ptr %90, align 8
  store ptr %92, ptr %91, align 8
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 2
  %95 = load ptr, ptr %93, align 8
  store ptr %95, ptr %94, align 8
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 3
  %98 = load i32, ptr %96, align 4
  store i32 %98, ptr %97, align 4
  call void @set_offset(ptr %86, ptr @IntIterator)
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %100 = load ptr, ptr %99, align 8
  %101 = load ptr, ptr %8, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 64, ptr %101)
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %104 = load i32, ptr %103, align 4
  %105 = getelementptr ptr, ptr %101, i32 %104
  %106 = getelementptr ptr, ptr %105, i32 1
  %107 = load ptr, ptr %106, align 8
  %108 = getelementptr { ptr, ptr }, ptr %107, i32 0, i32 1
  %109 = load ptr, ptr %108, align 8
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 0
  %111 = load ptr, ptr %110, align 8
  %112 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %111, 0
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 1
  %114 = load ptr, ptr %113, align 8
  %115 = insertvalue { ptr, ptr, ptr, i32 } %112, ptr %114, 1
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 2
  %117 = load ptr, ptr %116, align 8
  %118 = insertvalue { ptr, ptr, ptr, i32 } %115, ptr %117, 2
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 3
  %120 = load i32, ptr %119, align 4
  %121 = insertvalue { ptr, ptr, ptr, i32 } %118, i32 %120, 3
  call void %109(ptr %100, { ptr, ptr, ptr, i32 } %121) #15
  ret void
}

define { ptr, i64 } @ZipIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i64, align 8
  %7 = alloca ptr, align 8
  %8 = alloca i32, align 4
  %9 = alloca ptr, align 8
  %10 = alloca i64, align 8
  %11 = alloca ptr, align 8
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i64 }, align 8
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca { ptr, i64 }, align 8
  %.reg2mem5 = alloca { ptr, i64 }, align 8
  %.reg2mem7 = alloca { ptr, i64 }, align 8
  %.reg2mem9 = alloca i32, align 4
  %.reg2mem11 = alloca i32, align 4
  %.reg2mem14 = alloca { ptr, i64 }, align 8
  %.reg2mem16 = alloca i32, align 4
  %.reg2mem18 = alloca { ptr, i64 }, align 8
  %.reg2mem20 = alloca { ptr, i64 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %12, align 8
  %13 = call ptr @llvm.invariant.start.p0(i64 16, ptr %12)
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 0
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 2
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %26 = load i32, ptr %24, align 4
  store i32 %26, ptr %25, align 4
  call void @set_offset(ptr %14, ptr @ZipIterator)
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = load ptr, ptr %14, align 8
  %30 = call ptr @llvm.invariant.start.p0(i64 64, ptr %29)
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %32 = load i32, ptr %31, align 4
  %33 = getelementptr ptr, ptr %29, i32 %32
  %34 = load ptr, ptr %33, align 8
  %35 = getelementptr { ptr, ptr }, ptr %34, i32 0, i32 0
  %36 = load ptr, ptr %35, align 8
  %37 = call { ptr, ptr, ptr, i32 } %36(ptr %28) #16
  %38 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %37, ptr %38, align 8
  %39 = call ptr @llvm.invariant.start.p0(i64 16, ptr %38)
  call void @assume_offset(ptr %38, ptr @IntIterator)
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 0
  %41 = load ptr, ptr %40, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %41, 0
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %44 = load ptr, ptr %43, align 8
  %45 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %44, 1
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 2
  %47 = load ptr, ptr %46, align 8
  %48 = insertvalue { ptr, ptr, ptr, i32 } %45, ptr %47, 2
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %50 = load i32, ptr %49, align 4
  %51 = insertvalue { ptr, ptr, ptr, i32 } %48, i32 %50, 3
  %52 = alloca [0 x ptr], align 8
  %53 = call ptr @llvm.invariant.start.p0(i64 0, ptr %52)
  %54 = call ptr @llvm.invariant.start.p0(i64 16, ptr %41)
  %55 = getelementptr ptr, ptr %41, i32 %50
  %56 = load ptr, ptr %55, align 8
  %57 = alloca {}, align 8
  %58 = call ptr @behavior_wrapper(ptr %56, { ptr, ptr, ptr, i32 } %51, ptr %57)
  %59 = call { ptr, i32 } %58({ ptr, ptr, ptr, i32 } %51, { ptr, ptr, ptr, i32 } %51, ptr %52)
  %60 = alloca { ptr, i32 }, align 8
  store { ptr, i32 } %59, ptr %60, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %62 = load ptr, ptr %61, align 8
  %63 = load ptr, ptr %14, align 8
  %64 = call ptr @llvm.invariant.start.p0(i64 64, ptr %63)
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %66 = load i32, ptr %65, align 4
  %67 = getelementptr ptr, ptr %63, i32 %66
  %68 = getelementptr ptr, ptr %67, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = getelementptr { ptr, ptr }, ptr %69, i32 0, i32 0
  %71 = load ptr, ptr %70, align 8
  %72 = call { ptr, ptr, ptr, i32 } %71(ptr %62) #16
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %72, ptr %73, align 8
  %74 = call ptr @llvm.invariant.start.p0(i64 16, ptr %73)
  call void @assume_offset(ptr %73, ptr @IntIterator)
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %76 = load ptr, ptr %75, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %76, 0
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %79 = load ptr, ptr %78, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } %77, ptr %79, 1
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %82 = load ptr, ptr %81, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } %80, ptr %82, 2
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %85 = load i32, ptr %84, align 4
  %86 = insertvalue { ptr, ptr, ptr, i32 } %83, i32 %85, 3
  %87 = alloca [0 x ptr], align 8
  %88 = call ptr @llvm.invariant.start.p0(i64 0, ptr %87)
  %89 = call ptr @llvm.invariant.start.p0(i64 16, ptr %76)
  %90 = getelementptr ptr, ptr %76, i32 %85
  %91 = load ptr, ptr %90, align 8
  %92 = alloca {}, align 8
  %93 = call ptr @behavior_wrapper(ptr %91, { ptr, ptr, ptr, i32 } %86, ptr %92)
  %94 = call { ptr, i32 } %93({ ptr, ptr, ptr, i32 } %86, { ptr, ptr, ptr, i32 } %86, ptr %87)
  %95 = alloca { ptr, i32 }, align 8
  store { ptr, i32 } %94, ptr %95, align 8
  %96 = getelementptr { ptr, i32 }, ptr %60, i32 0, i32 0
  %97 = load ptr, ptr %96, align 8
  %98 = ptrtoint ptr %97 to i64
  %99 = icmp eq i64 %98, ptrtoint (ptr @nil_typ to i64)
  %100 = icmp eq i64 %98, 0
  %101 = or i1 %99, %100
  %102 = icmp eq i1 %101, false
  br i1 %102, label %103, label %133

103:                                              ; preds = %3
  %104 = getelementptr { ptr, i32 }, ptr %60, i32 0, i32 1
  %105 = load i32, ptr %104, align 4
  store i32 %105, ptr %.reg2mem11, align 4
  %106 = getelementptr { ptr, i32 }, ptr %95, i32 0, i32 0
  %107 = load ptr, ptr %106, align 8
  %108 = ptrtoint ptr %107 to i64
  %109 = icmp eq i64 %108, ptrtoint (ptr @nil_typ to i64)
  %110 = icmp eq i64 %108, 0
  %111 = or i1 %109, %110
  %112 = icmp eq i1 %111, false
  %113 = icmp ne i1 %111, false
  %114 = zext i1 %113 to i32
  store i32 %114, ptr %.reg2mem9, align 4
  br i1 %112, label %115, label %126

115:                                              ; preds = %103
  %116 = getelementptr { ptr, i32 }, ptr %95, i32 0, i32 1
  %117 = load i32, ptr %116, align 4
  %.reload13 = load i32, ptr %.reg2mem11, align 4
  store i32 %.reload13, ptr %5, align 4
  store i32 %117, ptr %4, align 4
  %118 = getelementptr { i32, i32 }, ptr %6, i32 0, i32 0
  %119 = load i32, ptr %5, align 4
  store i32 %119, ptr %118, align 4
  %120 = getelementptr { i32, i32 }, ptr %6, i32 0, i32 1
  %121 = load i32, ptr %4, align 4
  store i32 %121, ptr %120, align 4
  store i64 ptrtoint (ptr @tuple_typ to i64), ptr %7, align 4
  %122 = load ptr, ptr %7, align 8
  %123 = insertvalue { ptr, i64 } undef, ptr %122, 0
  %124 = load i64, ptr %6, align 4
  %125 = insertvalue { ptr, i64 } %123, i64 %124, 1
  store { ptr, i64 } %125, ptr %.reg2mem7, align 8
  %.reload8 = load { ptr, i64 }, ptr %.reg2mem7, align 8
  store { ptr, i64 } %.reload8, ptr %.reg2mem20, align 8
  br label %131

126:                                              ; preds = %103
  %.reload12 = load i32, ptr %.reg2mem11, align 4
  store i32 %.reload12, ptr %8, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %9, align 4
  %127 = getelementptr { ptr, i32 }, ptr %60, i32 0, i32 0
  %128 = load ptr, ptr %9, align 8
  store ptr %128, ptr %127, align 8
  %129 = getelementptr { ptr, i32 }, ptr %60, i32 0, i32 1
  %130 = load i32, ptr %8, align 4
  store i32 %130, ptr %129, align 4
  store { ptr, i64 } poison, ptr %.reg2mem20, align 8
  br label %131

131:                                              ; preds = %126, %115
  %.reload21 = load { ptr, i64 }, ptr %.reg2mem20, align 8
  store { ptr, i64 } %.reload21, ptr %.reg2mem5, align 8
  br label %132

132:                                              ; preds = %131
  %.reload6 = load { ptr, i64 }, ptr %.reg2mem5, align 8
  %.reload10 = load i32, ptr %.reg2mem9, align 4
  store i32 %.reload10, ptr %.reg2mem16, align 4
  store { ptr, i64 } %.reload6, ptr %.reg2mem18, align 8
  br label %134

133:                                              ; preds = %3
  store i32 1, ptr %.reg2mem16, align 4
  store { ptr, i64 } poison, ptr %.reg2mem18, align 8
  br label %134

134:                                              ; preds = %133, %132
  %.reload19 = load { ptr, i64 }, ptr %.reg2mem18, align 8
  %.reload17 = load i32, ptr %.reg2mem16, align 4
  store { ptr, i64 } %.reload19, ptr %.reg2mem3, align 8
  store i32 %.reload17, ptr %.reg2mem1, align 4
  br label %135

135:                                              ; preds = %134
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  %136 = zext i32 %.reload2 to i64
  %137 = trunc i64 %136 to i32
  switch i32 %137, label %139 [
    i32 0, label %138
  ]

138:                                              ; preds = %135
  %.reload4 = load { ptr, i64 }, ptr %.reg2mem3, align 8
  store { ptr, i64 } %.reload4, ptr %.reg2mem14, align 8
  br label %144

139:                                              ; preds = %135
  store [0 x i8] undef, ptr %10, align 1
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %11, align 4
  %140 = load ptr, ptr %11, align 8
  %141 = insertvalue { ptr, i64 } undef, ptr %140, 0
  %142 = load i64, ptr %10, align 4
  %143 = insertvalue { ptr, i64 } %141, i64 %142, 1
  store { ptr, i64 } %143, ptr %.reg2mem, align 8
  %.reload = load { ptr, i64 }, ptr %.reg2mem, align 8
  store { ptr, i64 } %.reload, ptr %.reg2mem14, align 8
  br label %144

144:                                              ; preds = %139, %138
  %.reload15 = load { ptr, i64 }, ptr %.reg2mem14, align 8
  ret { ptr, i64 } %.reload15
}

define { ptr, ptr, ptr, i32 } @ZipIterator_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @ZipIterator_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 16, ptr %9)
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %22 = load i32, ptr %20, align 4
  store i32 %22, ptr %21, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ZipIterator_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @ZipIterator_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  ret void
}

define { i64, i64 } @_size_IntTupleIterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret { i64, i64 } { i64 0, i64 1 }
}

define { ptr, ptr, ptr, i32 } @ZipIterable_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @ZipIterable_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 16, ptr %9)
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %22 = load i32, ptr %20, align 4
  store i32 %22, ptr %21, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ZipIterable_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @ZipIterable_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  ret void
}

define { i64, i64 } @_size_InterleaveIterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %10
  %12 = urem i64 %11, %5
  %13 = icmp eq i64 %12, 0
  %14 = sub i64 %5, %12
  %15 = select i1 %13, i64 0, i64 %14
  %16 = add i64 %11, %15
  %17 = insertvalue { i64, i64 } undef, i64 %16, 0
  %18 = insertvalue { i64, i64 } %17, i64 %5, 1
  ret { i64, i64 } %18
}

define ptr @InterleaveIterable_B_init_firstIntIterable_secondIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [52 x ptr], ptr %26, i32 0, i32 14
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @InterleaveIterable_B_each_fFunctionPtri32_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 15
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @InterleaveIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [52 x ptr], ptr %26, i32 0, i32 16
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @InterleaveIterable_B_all_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 17
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @InterleaveIterable_B_any_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 18
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @InterleaveIterable_B_map_fFunctionPtri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 19
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @InterleaveIterable_B_filter_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 20
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @InterleaveIterable_B_chain_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 21
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @InterleaveIterable_B_interleave_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 22
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @InterleaveIterable_B_zip_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 23
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @InterleaveIterable_B_product_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 24
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @InterleaveIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [52 x ptr], ptr %4, i32 0, i32 25
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @InterleaveIterable_init_firstIntIterable_secondIntIterable({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @InterleaveIterable)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @IntIterable)
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %45 = load ptr, ptr %43, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %48 = load i32, ptr %46, align 4
  store i32 %48, ptr %47, align 4
  call void @set_offset(ptr %36, ptr @IntIterable)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %8, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 416, ptr %51)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = getelementptr ptr, ptr %51, i32 %54
  %56 = load ptr, ptr %55, align 8
  %57 = getelementptr { ptr, ptr }, ptr %56, i32 0, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %63 = load ptr, ptr %62, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %63, 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %66 = load ptr, ptr %65, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %66, 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %69 = load i32, ptr %68, align 4
  %70 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %69, 3
  call void %58(ptr %50, { ptr, ptr, ptr, i32 } %70) #15
  %71 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %71, align 8
  %72 = call ptr @llvm.invariant.start.p0(i64 16, ptr %71)
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 0
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %76 = load ptr, ptr %74, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 1
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %79 = load ptr, ptr %77, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 2
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %82 = load ptr, ptr %80, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 3
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %85 = load i32, ptr %83, align 4
  store i32 %85, ptr %84, align 4
  call void @set_offset(ptr %73, ptr @IntIterable)
  %86 = alloca { ptr, ptr, ptr, i32 }, align 8
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 0
  %89 = load ptr, ptr %87, align 8
  store ptr %89, ptr %88, align 8
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 1
  %92 = load ptr, ptr %90, align 8
  store ptr %92, ptr %91, align 8
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 2
  %95 = load ptr, ptr %93, align 8
  store ptr %95, ptr %94, align 8
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 3
  %98 = load i32, ptr %96, align 4
  store i32 %98, ptr %97, align 4
  call void @set_offset(ptr %86, ptr @IntIterable)
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %100 = load ptr, ptr %99, align 8
  %101 = load ptr, ptr %8, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 416, ptr %101)
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %104 = load i32, ptr %103, align 4
  %105 = getelementptr ptr, ptr %101, i32 %104
  %106 = getelementptr ptr, ptr %105, i32 1
  %107 = load ptr, ptr %106, align 8
  %108 = getelementptr { ptr, ptr }, ptr %107, i32 0, i32 1
  %109 = load ptr, ptr %108, align 8
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 0
  %111 = load ptr, ptr %110, align 8
  %112 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %111, 0
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 1
  %114 = load ptr, ptr %113, align 8
  %115 = insertvalue { ptr, ptr, ptr, i32 } %112, ptr %114, 1
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 2
  %117 = load ptr, ptr %116, align 8
  %118 = insertvalue { ptr, ptr, ptr, i32 } %115, ptr %117, 2
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 3
  %120 = load i32, ptr %119, align 4
  %121 = insertvalue { ptr, ptr, ptr, i32 } %118, i32 %120, 3
  call void %109(ptr %100, { ptr, ptr, ptr, i32 } %121) #15
  ret void
}

define { ptr, ptr, ptr, i32 } @InterleaveIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @InterleaveIterable)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 416, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 0
  %28 = load ptr, ptr %27, align 8
  %29 = call { ptr, ptr, ptr, i32 } %28(ptr %20) #16
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %29, ptr %30, align 8
  %31 = call ptr @llvm.invariant.start.p0(i64 16, ptr %30)
  call void @assume_offset(ptr %30, ptr @IntIterable)
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %33, 0
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %36, 1
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %39 = load ptr, ptr %38, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %39, 2
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %42 = load i32, ptr %41, align 4
  %43 = insertvalue { ptr, ptr, ptr, i32 } %40, i32 %42, 3
  %44 = alloca [0 x ptr], align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 0, ptr %44)
  %46 = call ptr @llvm.invariant.start.p0(i64 192, ptr %33)
  %47 = getelementptr ptr, ptr %33, i32 %42
  %48 = getelementptr ptr, ptr %47, i32 10
  %49 = load ptr, ptr %48, align 8
  %50 = alloca {}, align 8
  %51 = call ptr @behavior_wrapper(ptr %49, { ptr, ptr, ptr, i32 } %43, ptr %50)
  %52 = call { ptr, ptr, ptr, i32 } %51({ ptr, ptr, ptr, i32 } %43, { ptr, ptr, ptr, i32 } %43, ptr %44)
  %53 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %52, ptr %53, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 16, ptr %53)
  %55 = alloca { ptr, ptr, ptr, i32 }, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 0
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 0
  %58 = load ptr, ptr %56, align 8
  store ptr %58, ptr %57, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 1
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  %61 = load ptr, ptr %59, align 8
  store ptr %61, ptr %60, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 2
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 2
  %64 = load ptr, ptr %62, align 8
  store ptr %64, ptr %63, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 3
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  %67 = load i32, ptr %65, align 4
  store i32 %67, ptr %66, align 4
  call void @set_offset(ptr %55, ptr @IntIterator)
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = load ptr, ptr %6, align 8
  %71 = call ptr @llvm.invariant.start.p0(i64 416, ptr %70)
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %73 = load i32, ptr %72, align 4
  %74 = getelementptr ptr, ptr %70, i32 %73
  %75 = getelementptr ptr, ptr %74, i32 1
  %76 = load ptr, ptr %75, align 8
  %77 = getelementptr { ptr, ptr }, ptr %76, i32 0, i32 0
  %78 = load ptr, ptr %77, align 8
  %79 = call { ptr, ptr, ptr, i32 } %78(ptr %69) #16
  %80 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %79, ptr %80, align 8
  %81 = call ptr @llvm.invariant.start.p0(i64 16, ptr %80)
  call void @assume_offset(ptr %80, ptr @IntIterable)
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %80, i32 0, i32 0
  %83 = load ptr, ptr %82, align 8
  %84 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %83, 0
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %80, i32 0, i32 1
  %86 = load ptr, ptr %85, align 8
  %87 = insertvalue { ptr, ptr, ptr, i32 } %84, ptr %86, 1
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %80, i32 0, i32 2
  %89 = load ptr, ptr %88, align 8
  %90 = insertvalue { ptr, ptr, ptr, i32 } %87, ptr %89, 2
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %80, i32 0, i32 3
  %92 = load i32, ptr %91, align 4
  %93 = insertvalue { ptr, ptr, ptr, i32 } %90, i32 %92, 3
  %94 = alloca [0 x ptr], align 8
  %95 = call ptr @llvm.invariant.start.p0(i64 0, ptr %94)
  %96 = call ptr @llvm.invariant.start.p0(i64 192, ptr %83)
  %97 = getelementptr ptr, ptr %83, i32 %92
  %98 = getelementptr ptr, ptr %97, i32 10
  %99 = load ptr, ptr %98, align 8
  %100 = alloca {}, align 8
  %101 = call ptr @behavior_wrapper(ptr %99, { ptr, ptr, ptr, i32 } %93, ptr %100)
  %102 = call { ptr, ptr, ptr, i32 } %101({ ptr, ptr, ptr, i32 } %93, { ptr, ptr, ptr, i32 } %93, ptr %94)
  %103 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %102, ptr %103, align 8
  %104 = call ptr @llvm.invariant.start.p0(i64 16, ptr %103)
  %105 = alloca { ptr, ptr, ptr, i32 }, align 8
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 0
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 0
  %108 = load ptr, ptr %106, align 8
  store ptr %108, ptr %107, align 8
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 1
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 1
  %111 = load ptr, ptr %109, align 8
  store ptr %111, ptr %110, align 8
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 2
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 2
  %114 = load ptr, ptr %112, align 8
  store ptr %114, ptr %113, align 8
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 3
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 3
  %117 = load i32, ptr %115, align 4
  store i32 %117, ptr %116, align 4
  call void @set_offset(ptr %105, ptr @IntIterator)
  %118 = alloca [1 x ptr], align 8
  store ptr @InterleaveIterator, ptr %118, align 8
  %119 = load ptr, ptr %118, align 8
  %120 = getelementptr ptr, ptr %119, i32 6
  %121 = load ptr, ptr %120, align 8
  %122 = call { i64, i64 } @size_wrapper(ptr %121, ptr %118)
  %123 = extractvalue { i64, i64 } %122, 0
  %124 = call ptr @bump_malloc(i64 %123)
  %125 = alloca { ptr, ptr, ptr, i32 }, align 8
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 1
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 3
  store ptr @InterleaveIterator, ptr %125, align 8
  store ptr %124, ptr %126, align 8
  store i32 9, ptr %127, align 4
  %128 = call ptr @llvm.invariant.start.p0(i64 16, ptr %125)
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %130 = load ptr, ptr %129, align 8
  %131 = load ptr, ptr %6, align 8
  %132 = call ptr @llvm.invariant.start.p0(i64 416, ptr %131)
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %134 = load i32, ptr %133, align 4
  %135 = getelementptr ptr, ptr %131, i32 %134
  %136 = load ptr, ptr %135, align 8
  %137 = getelementptr { ptr, ptr }, ptr %136, i32 0, i32 0
  %138 = load ptr, ptr %137, align 8
  %139 = call { ptr, ptr, ptr, i32 } %138(ptr %130) #16
  %140 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %139, ptr %140, align 8
  %141 = call ptr @llvm.invariant.start.p0(i64 16, ptr %140)
  call void @assume_offset(ptr %140, ptr @IntIterable)
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %140, i32 0, i32 0
  %143 = load ptr, ptr %142, align 8
  %144 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %143, 0
  %145 = getelementptr { ptr, ptr, ptr, i32 }, ptr %140, i32 0, i32 1
  %146 = load ptr, ptr %145, align 8
  %147 = insertvalue { ptr, ptr, ptr, i32 } %144, ptr %146, 1
  %148 = getelementptr { ptr, ptr, ptr, i32 }, ptr %140, i32 0, i32 2
  %149 = load ptr, ptr %148, align 8
  %150 = insertvalue { ptr, ptr, ptr, i32 } %147, ptr %149, 2
  %151 = getelementptr { ptr, ptr, ptr, i32 }, ptr %140, i32 0, i32 3
  %152 = load i32, ptr %151, align 4
  %153 = insertvalue { ptr, ptr, ptr, i32 } %150, i32 %152, 3
  %154 = alloca [0 x ptr], align 8
  %155 = call ptr @llvm.invariant.start.p0(i64 0, ptr %154)
  %156 = call ptr @llvm.invariant.start.p0(i64 192, ptr %143)
  %157 = getelementptr ptr, ptr %143, i32 %152
  %158 = getelementptr ptr, ptr %157, i32 10
  %159 = load ptr, ptr %158, align 8
  %160 = alloca {}, align 8
  %161 = call ptr @behavior_wrapper(ptr %159, { ptr, ptr, ptr, i32 } %153, ptr %160)
  %162 = call { ptr, ptr, ptr, i32 } %161({ ptr, ptr, ptr, i32 } %153, { ptr, ptr, ptr, i32 } %153, ptr %154)
  %163 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %162, ptr %163, align 8
  %164 = call ptr @llvm.invariant.start.p0(i64 16, ptr %163)
  %165 = alloca { ptr, ptr, ptr, i32 }, align 8
  %166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 0
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %165, i32 0, i32 0
  %168 = load ptr, ptr %166, align 8
  store ptr %168, ptr %167, align 8
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 1
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %165, i32 0, i32 1
  %171 = load ptr, ptr %169, align 8
  store ptr %171, ptr %170, align 8
  %172 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 2
  %173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %165, i32 0, i32 2
  %174 = load ptr, ptr %172, align 8
  store ptr %174, ptr %173, align 8
  %175 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 3
  %176 = getelementptr { ptr, ptr, ptr, i32 }, ptr %165, i32 0, i32 3
  %177 = load i32, ptr %175, align 4
  store i32 %177, ptr %176, align 4
  call void @set_offset(ptr %165, ptr @IntIterator)
  %178 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %179 = load ptr, ptr %178, align 8
  %180 = load ptr, ptr %6, align 8
  %181 = call ptr @llvm.invariant.start.p0(i64 416, ptr %180)
  %182 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %183 = load i32, ptr %182, align 4
  %184 = getelementptr ptr, ptr %180, i32 %183
  %185 = getelementptr ptr, ptr %184, i32 1
  %186 = load ptr, ptr %185, align 8
  %187 = getelementptr { ptr, ptr }, ptr %186, i32 0, i32 0
  %188 = load ptr, ptr %187, align 8
  %189 = call { ptr, ptr, ptr, i32 } %188(ptr %179) #16
  %190 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %189, ptr %190, align 8
  %191 = call ptr @llvm.invariant.start.p0(i64 16, ptr %190)
  call void @assume_offset(ptr %190, ptr @IntIterable)
  %192 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 0
  %193 = load ptr, ptr %192, align 8
  %194 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %193, 0
  %195 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 1
  %196 = load ptr, ptr %195, align 8
  %197 = insertvalue { ptr, ptr, ptr, i32 } %194, ptr %196, 1
  %198 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 2
  %199 = load ptr, ptr %198, align 8
  %200 = insertvalue { ptr, ptr, ptr, i32 } %197, ptr %199, 2
  %201 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 3
  %202 = load i32, ptr %201, align 4
  %203 = insertvalue { ptr, ptr, ptr, i32 } %200, i32 %202, 3
  %204 = alloca [0 x ptr], align 8
  %205 = call ptr @llvm.invariant.start.p0(i64 0, ptr %204)
  %206 = call ptr @llvm.invariant.start.p0(i64 192, ptr %193)
  %207 = getelementptr ptr, ptr %193, i32 %202
  %208 = getelementptr ptr, ptr %207, i32 10
  %209 = load ptr, ptr %208, align 8
  %210 = alloca {}, align 8
  %211 = call ptr @behavior_wrapper(ptr %209, { ptr, ptr, ptr, i32 } %203, ptr %210)
  %212 = call { ptr, ptr, ptr, i32 } %211({ ptr, ptr, ptr, i32 } %203, { ptr, ptr, ptr, i32 } %203, ptr %204)
  %213 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %212, ptr %213, align 8
  %214 = call ptr @llvm.invariant.start.p0(i64 16, ptr %213)
  %215 = alloca { ptr, ptr, ptr, i32 }, align 8
  %216 = getelementptr { ptr, ptr, ptr, i32 }, ptr %213, i32 0, i32 0
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %215, i32 0, i32 0
  %218 = load ptr, ptr %216, align 8
  store ptr %218, ptr %217, align 8
  %219 = getelementptr { ptr, ptr, ptr, i32 }, ptr %213, i32 0, i32 1
  %220 = getelementptr { ptr, ptr, ptr, i32 }, ptr %215, i32 0, i32 1
  %221 = load ptr, ptr %219, align 8
  store ptr %221, ptr %220, align 8
  %222 = getelementptr { ptr, ptr, ptr, i32 }, ptr %213, i32 0, i32 2
  %223 = getelementptr { ptr, ptr, ptr, i32 }, ptr %215, i32 0, i32 2
  %224 = load ptr, ptr %222, align 8
  store ptr %224, ptr %223, align 8
  %225 = getelementptr { ptr, ptr, ptr, i32 }, ptr %213, i32 0, i32 3
  %226 = getelementptr { ptr, ptr, ptr, i32 }, ptr %215, i32 0, i32 3
  %227 = load i32, ptr %225, align 4
  store i32 %227, ptr %226, align 4
  call void @set_offset(ptr %215, ptr @IntIterator)
  %228 = alloca { ptr, ptr, ptr, i32 }, align 8
  %229 = getelementptr { ptr, ptr, ptr, i32 }, ptr %165, i32 0, i32 0
  %230 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 0
  %231 = load ptr, ptr %229, align 8
  store ptr %231, ptr %230, align 8
  %232 = getelementptr { ptr, ptr, ptr, i32 }, ptr %165, i32 0, i32 1
  %233 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 1
  %234 = load ptr, ptr %232, align 8
  store ptr %234, ptr %233, align 8
  %235 = getelementptr { ptr, ptr, ptr, i32 }, ptr %165, i32 0, i32 2
  %236 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 2
  %237 = load ptr, ptr %235, align 8
  store ptr %237, ptr %236, align 8
  %238 = getelementptr { ptr, ptr, ptr, i32 }, ptr %165, i32 0, i32 3
  %239 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 3
  %240 = load i32, ptr %238, align 4
  store i32 %240, ptr %239, align 4
  call void @set_offset(ptr %228, ptr @IntIterator)
  %241 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 0
  %242 = load ptr, ptr %241, align 8
  %243 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %242, 0
  %244 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 1
  %245 = load ptr, ptr %244, align 8
  %246 = insertvalue { ptr, ptr, ptr, i32 } %243, ptr %245, 1
  %247 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 2
  %248 = load ptr, ptr %247, align 8
  %249 = insertvalue { ptr, ptr, ptr, i32 } %246, ptr %248, 2
  %250 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 3
  %251 = load i32, ptr %250, align 4
  %252 = insertvalue { ptr, ptr, ptr, i32 } %249, i32 %251, 3
  %253 = alloca { ptr, ptr, ptr, i32 }, align 8
  %254 = getelementptr { ptr, ptr, ptr, i32 }, ptr %215, i32 0, i32 0
  %255 = getelementptr { ptr, ptr, ptr, i32 }, ptr %253, i32 0, i32 0
  %256 = load ptr, ptr %254, align 8
  store ptr %256, ptr %255, align 8
  %257 = getelementptr { ptr, ptr, ptr, i32 }, ptr %215, i32 0, i32 1
  %258 = getelementptr { ptr, ptr, ptr, i32 }, ptr %253, i32 0, i32 1
  %259 = load ptr, ptr %257, align 8
  store ptr %259, ptr %258, align 8
  %260 = getelementptr { ptr, ptr, ptr, i32 }, ptr %215, i32 0, i32 2
  %261 = getelementptr { ptr, ptr, ptr, i32 }, ptr %253, i32 0, i32 2
  %262 = load ptr, ptr %260, align 8
  store ptr %262, ptr %261, align 8
  %263 = getelementptr { ptr, ptr, ptr, i32 }, ptr %215, i32 0, i32 3
  %264 = getelementptr { ptr, ptr, ptr, i32 }, ptr %253, i32 0, i32 3
  %265 = load i32, ptr %263, align 4
  store i32 %265, ptr %264, align 4
  call void @set_offset(ptr %253, ptr @IntIterator)
  %266 = getelementptr { ptr, ptr, ptr, i32 }, ptr %253, i32 0, i32 0
  %267 = load ptr, ptr %266, align 8
  %268 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %267, 0
  %269 = getelementptr { ptr, ptr, ptr, i32 }, ptr %253, i32 0, i32 1
  %270 = load ptr, ptr %269, align 8
  %271 = insertvalue { ptr, ptr, ptr, i32 } %268, ptr %270, 1
  %272 = getelementptr { ptr, ptr, ptr, i32 }, ptr %253, i32 0, i32 2
  %273 = load ptr, ptr %272, align 8
  %274 = insertvalue { ptr, ptr, ptr, i32 } %271, ptr %273, 2
  %275 = getelementptr { ptr, ptr, ptr, i32 }, ptr %253, i32 0, i32 3
  %276 = load i32, ptr %275, align 4
  %277 = insertvalue { ptr, ptr, ptr, i32 } %274, i32 %276, 3
  %278 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 0
  %279 = load ptr, ptr %278, align 8
  %280 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %279, 0
  %281 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 1
  %282 = load ptr, ptr %281, align 8
  %283 = insertvalue { ptr, ptr, ptr, i32 } %280, ptr %282, 1
  %284 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 2
  %285 = load ptr, ptr %284, align 8
  %286 = insertvalue { ptr, ptr, ptr, i32 } %283, ptr %285, 2
  %287 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 3
  %288 = load i32, ptr %287, align 4
  %289 = insertvalue { ptr, ptr, ptr, i32 } %286, i32 %288, 3
  %290 = alloca [2 x ptr], align 8
  %291 = getelementptr [2 x ptr], ptr %290, i32 0, i32 0
  store ptr @_parameterization_IntIterator, ptr %291, align 8
  %292 = getelementptr [2 x ptr], ptr %290, i32 0, i32 1
  store ptr @_parameterization_IntIterator, ptr %292, align 8
  %293 = call ptr @llvm.invariant.start.p0(i64 4, ptr %290)
  %294 = call ptr @llvm.invariant.start.p0(i64 72, ptr %279)
  %295 = getelementptr ptr, ptr %279, i32 %288
  %296 = getelementptr ptr, ptr %295, i32 3
  %297 = load ptr, ptr %296, align 8
  %298 = alloca { ptr, ptr }, align 8
  %299 = getelementptr { ptr, ptr }, ptr %298, i32 0, i32 0
  store ptr %242, ptr %299, align 8
  %300 = getelementptr { ptr, ptr }, ptr %298, i32 0, i32 1
  store ptr %267, ptr %300, align 8
  %301 = call ptr @behavior_wrapper(ptr %297, { ptr, ptr, ptr, i32 } %289, ptr %298)
  call void %301({ ptr, ptr, ptr, i32 } %289, { ptr, ptr, ptr, i32 } %289, ptr %290, { ptr, ptr, ptr, i32 } %252, { ptr, ptr, ptr, i32 } %277)
  %302 = alloca { ptr, ptr, ptr, i32 }, align 8
  %303 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 0
  %304 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 0
  %305 = load ptr, ptr %303, align 8
  store ptr %305, ptr %304, align 8
  %306 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 1
  %307 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 1
  %308 = load ptr, ptr %306, align 8
  store ptr %308, ptr %307, align 8
  %309 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 2
  %310 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 2
  %311 = load ptr, ptr %309, align 8
  store ptr %311, ptr %310, align 8
  %312 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 3
  %313 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 3
  %314 = load i32, ptr %312, align 4
  store i32 %314, ptr %313, align 4
  call void @set_offset(ptr %302, ptr @Iterator)
  %315 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 0
  %316 = load ptr, ptr %315, align 8
  %317 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %316, 0
  %318 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 1
  %319 = load ptr, ptr %318, align 8
  %320 = insertvalue { ptr, ptr, ptr, i32 } %317, ptr %319, 1
  %321 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 2
  %322 = load ptr, ptr %321, align 8
  %323 = insertvalue { ptr, ptr, ptr, i32 } %320, ptr %322, 2
  %324 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 3
  %325 = load i32, ptr %324, align 4
  %326 = insertvalue { ptr, ptr, ptr, i32 } %323, i32 %325, 3
  ret { ptr, ptr, ptr, i32 } %326
}

define { i64, i64 } @_size_InterleaveIterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (i1, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @InterleaveIterator_B_init_firstIntIterator_secondIntIterator({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -933084275656658555, i64 ptrtoint (ptr @IntIterator to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 -933084275656658555, i64 ptrtoint (ptr @IntIterator to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [9 x ptr], ptr %26, i32 0, i32 5
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @InterleaveIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [9 x ptr], ptr %4, i32 0, i32 6
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @InterleaveIterator_init_firstIntIterator_secondIntIterator({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @InterleaveIterator)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @IntIterator)
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %45 = load ptr, ptr %43, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %48 = load i32, ptr %46, align 4
  store i32 %48, ptr %47, align 4
  call void @set_offset(ptr %36, ptr @IntIterator)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %8, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 72, ptr %51)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = getelementptr ptr, ptr %51, i32 %54
  %56 = load ptr, ptr %55, align 8
  %57 = getelementptr { ptr, ptr }, ptr %56, i32 0, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %63 = load ptr, ptr %62, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %63, 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %66 = load ptr, ptr %65, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %66, 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %69 = load i32, ptr %68, align 4
  %70 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %69, 3
  call void %58(ptr %50, { ptr, ptr, ptr, i32 } %70) #15
  %71 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %71, align 8
  %72 = call ptr @llvm.invariant.start.p0(i64 16, ptr %71)
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 0
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %76 = load ptr, ptr %74, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 1
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %79 = load ptr, ptr %77, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 2
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %82 = load ptr, ptr %80, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 3
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %85 = load i32, ptr %83, align 4
  store i32 %85, ptr %84, align 4
  call void @set_offset(ptr %73, ptr @IntIterator)
  %86 = alloca { ptr, ptr, ptr, i32 }, align 8
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 0
  %89 = load ptr, ptr %87, align 8
  store ptr %89, ptr %88, align 8
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 1
  %92 = load ptr, ptr %90, align 8
  store ptr %92, ptr %91, align 8
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 2
  %95 = load ptr, ptr %93, align 8
  store ptr %95, ptr %94, align 8
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 3
  %98 = load i32, ptr %96, align 4
  store i32 %98, ptr %97, align 4
  call void @set_offset(ptr %86, ptr @IntIterator)
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %100 = load ptr, ptr %99, align 8
  %101 = load ptr, ptr %8, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 72, ptr %101)
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %104 = load i32, ptr %103, align 4
  %105 = getelementptr ptr, ptr %101, i32 %104
  %106 = getelementptr ptr, ptr %105, i32 1
  %107 = load ptr, ptr %106, align 8
  %108 = getelementptr { ptr, ptr }, ptr %107, i32 0, i32 1
  %109 = load ptr, ptr %108, align 8
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 0
  %111 = load ptr, ptr %110, align 8
  %112 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %111, 0
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 1
  %114 = load ptr, ptr %113, align 8
  %115 = insertvalue { ptr, ptr, ptr, i32 } %112, ptr %114, 1
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 2
  %117 = load ptr, ptr %116, align 8
  %118 = insertvalue { ptr, ptr, ptr, i32 } %115, ptr %117, 2
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 3
  %120 = load i32, ptr %119, align 4
  %121 = insertvalue { ptr, ptr, ptr, i32 } %118, i32 %120, 3
  call void %109(ptr %100, { ptr, ptr, ptr, i32 } %121) #15
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %123 = load ptr, ptr %122, align 8
  %124 = load ptr, ptr %8, align 8
  %125 = call ptr @llvm.invariant.start.p0(i64 72, ptr %124)
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %127 = load i32, ptr %126, align 4
  %128 = getelementptr ptr, ptr %124, i32 %127
  %129 = getelementptr ptr, ptr %128, i32 2
  %130 = load ptr, ptr %129, align 8
  %131 = getelementptr { ptr, ptr }, ptr %130, i32 0, i32 1
  %132 = load ptr, ptr %131, align 8
  call void %132(ptr %123, i1 true) #15
  ret void
}

define { ptr, i32 } @InterleaveIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = alloca [0 x ptr], align 8
  %6 = alloca {}, align 8
  %7 = alloca { ptr, i32 }, align 8
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = alloca [0 x ptr], align 8
  %10 = alloca {}, align 8
  %11 = alloca { ptr, i32 }, align 8
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i32 }, align 8
  %.reg2mem1 = alloca { ptr, i32 }, align 8
  %.reg2mem3 = alloca { ptr, i32 }, align 8
  %.reg2mem5 = alloca { ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %12, align 8
  %13 = call ptr @llvm.invariant.start.p0(i64 16, ptr %12)
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 0
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 2
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %26 = load i32, ptr %24, align 4
  store i32 %26, ptr %25, align 4
  call void @set_offset(ptr %14, ptr @InterleaveIterator)
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = load ptr, ptr %14, align 8
  %30 = call ptr @llvm.invariant.start.p0(i64 72, ptr %29)
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %32 = load i32, ptr %31, align 4
  %33 = getelementptr ptr, ptr %29, i32 %32
  %34 = getelementptr ptr, ptr %33, i32 2
  %35 = load ptr, ptr %34, align 8
  %36 = getelementptr { ptr, ptr }, ptr %35, i32 0, i32 0
  %37 = load ptr, ptr %36, align 8
  %38 = call i1 %37(ptr %28) #16
  br i1 %38, label %39, label %87

39:                                               ; preds = %3
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %41 = load ptr, ptr %40, align 8
  %42 = load ptr, ptr %14, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 72, ptr %42)
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %45 = load i32, ptr %44, align 4
  %46 = getelementptr ptr, ptr %42, i32 %45
  %47 = getelementptr ptr, ptr %46, i32 2
  %48 = load ptr, ptr %47, align 8
  %49 = getelementptr { ptr, ptr }, ptr %48, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  call void %50(ptr %41, i1 false) #15
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %52 = load ptr, ptr %51, align 8
  %53 = load ptr, ptr %14, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 72, ptr %53)
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %56 = load i32, ptr %55, align 4
  %57 = getelementptr ptr, ptr %53, i32 %56
  %58 = load ptr, ptr %57, align 8
  %59 = getelementptr { ptr, ptr }, ptr %58, i32 0, i32 0
  %60 = load ptr, ptr %59, align 8
  %61 = call { ptr, ptr, ptr, i32 } %60(ptr %52) #16
  store { ptr, ptr, ptr, i32 } %61, ptr %4, align 8
  %62 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  call void @assume_offset(ptr %4, ptr @IntIterator)
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %64 = load ptr, ptr %63, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %64, 0
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %67 = load ptr, ptr %66, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %67, 1
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %70 = load ptr, ptr %69, align 8
  %71 = insertvalue { ptr, ptr, ptr, i32 } %68, ptr %70, 2
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %73 = load i32, ptr %72, align 4
  %74 = insertvalue { ptr, ptr, ptr, i32 } %71, i32 %73, 3
  %75 = call ptr @llvm.invariant.start.p0(i64 0, ptr %5)
  %76 = call ptr @llvm.invariant.start.p0(i64 16, ptr %64)
  %77 = getelementptr ptr, ptr %64, i32 %73
  %78 = load ptr, ptr %77, align 8
  %79 = call ptr @behavior_wrapper(ptr %78, { ptr, ptr, ptr, i32 } %74, ptr %6)
  %80 = call { ptr, i32 } %79({ ptr, ptr, ptr, i32 } %74, { ptr, ptr, ptr, i32 } %74, ptr %5)
  store { ptr, i32 } %80, ptr %7, align 8
  %81 = getelementptr { ptr, i32 }, ptr %7, i32 0, i32 0
  %82 = load ptr, ptr %81, align 8
  %83 = insertvalue { ptr, i32 } undef, ptr %82, 0
  %84 = getelementptr { ptr, i32 }, ptr %7, i32 0, i32 1
  %85 = load i32, ptr %84, align 4
  %86 = insertvalue { ptr, i32 } %83, i32 %85, 1
  store { ptr, i32 } %86, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i32 }, ptr %.reg2mem3, align 8
  store { ptr, i32 } %.reload4, ptr %.reg2mem5, align 8
  br label %136

87:                                               ; preds = %3
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %89 = load ptr, ptr %88, align 8
  %90 = load ptr, ptr %14, align 8
  %91 = call ptr @llvm.invariant.start.p0(i64 72, ptr %90)
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %93 = load i32, ptr %92, align 4
  %94 = getelementptr ptr, ptr %90, i32 %93
  %95 = getelementptr ptr, ptr %94, i32 2
  %96 = load ptr, ptr %95, align 8
  %97 = getelementptr { ptr, ptr }, ptr %96, i32 0, i32 1
  %98 = load ptr, ptr %97, align 8
  call void %98(ptr %89, i1 true) #15
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %100 = load ptr, ptr %99, align 8
  %101 = load ptr, ptr %14, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 72, ptr %101)
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %104 = load i32, ptr %103, align 4
  %105 = getelementptr ptr, ptr %101, i32 %104
  %106 = getelementptr ptr, ptr %105, i32 1
  %107 = load ptr, ptr %106, align 8
  %108 = getelementptr { ptr, ptr }, ptr %107, i32 0, i32 0
  %109 = load ptr, ptr %108, align 8
  %110 = call { ptr, ptr, ptr, i32 } %109(ptr %100) #16
  store { ptr, ptr, ptr, i32 } %110, ptr %8, align 8
  %111 = call ptr @llvm.invariant.start.p0(i64 16, ptr %8)
  call void @assume_offset(ptr %8, ptr @IntIterator)
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %113 = load ptr, ptr %112, align 8
  %114 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %113, 0
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %116 = load ptr, ptr %115, align 8
  %117 = insertvalue { ptr, ptr, ptr, i32 } %114, ptr %116, 1
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %119 = load ptr, ptr %118, align 8
  %120 = insertvalue { ptr, ptr, ptr, i32 } %117, ptr %119, 2
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %122 = load i32, ptr %121, align 4
  %123 = insertvalue { ptr, ptr, ptr, i32 } %120, i32 %122, 3
  %124 = call ptr @llvm.invariant.start.p0(i64 0, ptr %9)
  %125 = call ptr @llvm.invariant.start.p0(i64 16, ptr %113)
  %126 = getelementptr ptr, ptr %113, i32 %122
  %127 = load ptr, ptr %126, align 8
  %128 = call ptr @behavior_wrapper(ptr %127, { ptr, ptr, ptr, i32 } %123, ptr %10)
  %129 = call { ptr, i32 } %128({ ptr, ptr, ptr, i32 } %123, { ptr, ptr, ptr, i32 } %123, ptr %9)
  store { ptr, i32 } %129, ptr %11, align 8
  %130 = getelementptr { ptr, i32 }, ptr %11, i32 0, i32 0
  %131 = load ptr, ptr %130, align 8
  %132 = insertvalue { ptr, i32 } undef, ptr %131, 0
  %133 = getelementptr { ptr, i32 }, ptr %11, i32 0, i32 1
  %134 = load i32, ptr %133, align 4
  %135 = insertvalue { ptr, i32 } %132, i32 %134, 1
  store { ptr, i32 } %135, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i32 }, ptr %.reg2mem1, align 8
  store { ptr, i32 } %.reload2, ptr %.reg2mem5, align 8
  br label %136

136:                                              ; preds = %87, %39
  %.reload6 = load { ptr, i32 }, ptr %.reg2mem5, align 8
  store { ptr, i32 } %.reload6, ptr %.reg2mem, align 8
  br label %137

137:                                              ; preds = %136
  %.reload = load { ptr, i32 }, ptr %.reg2mem, align 8
  ret { ptr, i32 } %.reload
}

define i1 @InterleaveIterator_getter_on_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = load i1, ptr %13, align 1
  ret i1 %14
}

define void @InterleaveIterator_setter_on_first(ptr %0, i1 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  store i1 %1, ptr %14, align 1
  ret void
}

define { ptr, ptr, ptr, i32 } @InterleaveIterator_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @InterleaveIterator_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 16, ptr %9)
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %22 = load i32, ptr %20, align 4
  store i32 %22, ptr %21, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @InterleaveIterator_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @InterleaveIterator_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @InterleaveIterable_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @InterleaveIterable_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 16, ptr %9)
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %22 = load i32, ptr %20, align 4
  store i32 %22, ptr %21, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @InterleaveIterable_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @InterleaveIterable_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  ret void
}

define { i64, i64 } @_size_ChainIterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %10
  %12 = urem i64 %11, %5
  %13 = icmp eq i64 %12, 0
  %14 = sub i64 %5, %12
  %15 = select i1 %13, i64 0, i64 %14
  %16 = add i64 %11, %15
  %17 = insertvalue { i64, i64 } undef, i64 %16, 0
  %18 = insertvalue { i64, i64 } %17, i64 %5, 1
  ret { i64, i64 } %18
}

define ptr @ChainIterable_B_init_firstIntIterable_secondIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [52 x ptr], ptr %26, i32 0, i32 14
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @ChainIterable_B_each_fFunctionPtri32_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 15
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ChainIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [52 x ptr], ptr %26, i32 0, i32 16
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @ChainIterable_B_all_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 17
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ChainIterable_B_any_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 18
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ChainIterable_B_map_fFunctionPtri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 19
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ChainIterable_B_filter_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 20
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ChainIterable_B_chain_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 21
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ChainIterable_B_interleave_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 22
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ChainIterable_B_zip_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 23
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ChainIterable_B_product_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 24
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ChainIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [52 x ptr], ptr %4, i32 0, i32 25
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @ChainIterable_init_firstIntIterable_secondIntIterable({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @ChainIterable)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @IntIterable)
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %45 = load ptr, ptr %43, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %48 = load i32, ptr %46, align 4
  store i32 %48, ptr %47, align 4
  call void @set_offset(ptr %36, ptr @IntIterable)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %8, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 416, ptr %51)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = getelementptr ptr, ptr %51, i32 %54
  %56 = load ptr, ptr %55, align 8
  %57 = getelementptr { ptr, ptr }, ptr %56, i32 0, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %63 = load ptr, ptr %62, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %63, 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %66 = load ptr, ptr %65, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %66, 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %69 = load i32, ptr %68, align 4
  %70 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %69, 3
  call void %58(ptr %50, { ptr, ptr, ptr, i32 } %70) #15
  %71 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %71, align 8
  %72 = call ptr @llvm.invariant.start.p0(i64 16, ptr %71)
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 0
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %76 = load ptr, ptr %74, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 1
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %79 = load ptr, ptr %77, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 2
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %82 = load ptr, ptr %80, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 3
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %85 = load i32, ptr %83, align 4
  store i32 %85, ptr %84, align 4
  call void @set_offset(ptr %73, ptr @IntIterable)
  %86 = alloca { ptr, ptr, ptr, i32 }, align 8
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 0
  %89 = load ptr, ptr %87, align 8
  store ptr %89, ptr %88, align 8
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 1
  %92 = load ptr, ptr %90, align 8
  store ptr %92, ptr %91, align 8
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 2
  %95 = load ptr, ptr %93, align 8
  store ptr %95, ptr %94, align 8
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 3
  %98 = load i32, ptr %96, align 4
  store i32 %98, ptr %97, align 4
  call void @set_offset(ptr %86, ptr @IntIterable)
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %100 = load ptr, ptr %99, align 8
  %101 = load ptr, ptr %8, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 416, ptr %101)
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %104 = load i32, ptr %103, align 4
  %105 = getelementptr ptr, ptr %101, i32 %104
  %106 = getelementptr ptr, ptr %105, i32 1
  %107 = load ptr, ptr %106, align 8
  %108 = getelementptr { ptr, ptr }, ptr %107, i32 0, i32 1
  %109 = load ptr, ptr %108, align 8
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 0
  %111 = load ptr, ptr %110, align 8
  %112 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %111, 0
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 1
  %114 = load ptr, ptr %113, align 8
  %115 = insertvalue { ptr, ptr, ptr, i32 } %112, ptr %114, 1
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 2
  %117 = load ptr, ptr %116, align 8
  %118 = insertvalue { ptr, ptr, ptr, i32 } %115, ptr %117, 2
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 3
  %120 = load i32, ptr %119, align 4
  %121 = insertvalue { ptr, ptr, ptr, i32 } %118, i32 %120, 3
  call void %109(ptr %100, { ptr, ptr, ptr, i32 } %121) #15
  ret void
}

define { ptr, ptr, ptr, i32 } @ChainIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @ChainIterable)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 416, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 0
  %28 = load ptr, ptr %27, align 8
  %29 = call { ptr, ptr, ptr, i32 } %28(ptr %20) #16
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %29, ptr %30, align 8
  %31 = call ptr @llvm.invariant.start.p0(i64 16, ptr %30)
  call void @assume_offset(ptr %30, ptr @IntIterable)
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %33, 0
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %36, 1
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %39 = load ptr, ptr %38, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %39, 2
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %42 = load i32, ptr %41, align 4
  %43 = insertvalue { ptr, ptr, ptr, i32 } %40, i32 %42, 3
  %44 = alloca [0 x ptr], align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 0, ptr %44)
  %46 = call ptr @llvm.invariant.start.p0(i64 192, ptr %33)
  %47 = getelementptr ptr, ptr %33, i32 %42
  %48 = getelementptr ptr, ptr %47, i32 10
  %49 = load ptr, ptr %48, align 8
  %50 = alloca {}, align 8
  %51 = call ptr @behavior_wrapper(ptr %49, { ptr, ptr, ptr, i32 } %43, ptr %50)
  %52 = call { ptr, ptr, ptr, i32 } %51({ ptr, ptr, ptr, i32 } %43, { ptr, ptr, ptr, i32 } %43, ptr %44)
  %53 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %52, ptr %53, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 16, ptr %53)
  %55 = alloca { ptr, ptr, ptr, i32 }, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 0
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 0
  %58 = load ptr, ptr %56, align 8
  store ptr %58, ptr %57, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 1
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  %61 = load ptr, ptr %59, align 8
  store ptr %61, ptr %60, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 2
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 2
  %64 = load ptr, ptr %62, align 8
  store ptr %64, ptr %63, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 3
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  %67 = load i32, ptr %65, align 4
  store i32 %67, ptr %66, align 4
  call void @set_offset(ptr %55, ptr @IntIterator)
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = load ptr, ptr %6, align 8
  %71 = call ptr @llvm.invariant.start.p0(i64 416, ptr %70)
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %73 = load i32, ptr %72, align 4
  %74 = getelementptr ptr, ptr %70, i32 %73
  %75 = getelementptr ptr, ptr %74, i32 1
  %76 = load ptr, ptr %75, align 8
  %77 = getelementptr { ptr, ptr }, ptr %76, i32 0, i32 0
  %78 = load ptr, ptr %77, align 8
  %79 = call { ptr, ptr, ptr, i32 } %78(ptr %69) #16
  %80 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %79, ptr %80, align 8
  %81 = call ptr @llvm.invariant.start.p0(i64 16, ptr %80)
  call void @assume_offset(ptr %80, ptr @IntIterable)
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %80, i32 0, i32 0
  %83 = load ptr, ptr %82, align 8
  %84 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %83, 0
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %80, i32 0, i32 1
  %86 = load ptr, ptr %85, align 8
  %87 = insertvalue { ptr, ptr, ptr, i32 } %84, ptr %86, 1
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %80, i32 0, i32 2
  %89 = load ptr, ptr %88, align 8
  %90 = insertvalue { ptr, ptr, ptr, i32 } %87, ptr %89, 2
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %80, i32 0, i32 3
  %92 = load i32, ptr %91, align 4
  %93 = insertvalue { ptr, ptr, ptr, i32 } %90, i32 %92, 3
  %94 = alloca [0 x ptr], align 8
  %95 = call ptr @llvm.invariant.start.p0(i64 0, ptr %94)
  %96 = call ptr @llvm.invariant.start.p0(i64 192, ptr %83)
  %97 = getelementptr ptr, ptr %83, i32 %92
  %98 = getelementptr ptr, ptr %97, i32 10
  %99 = load ptr, ptr %98, align 8
  %100 = alloca {}, align 8
  %101 = call ptr @behavior_wrapper(ptr %99, { ptr, ptr, ptr, i32 } %93, ptr %100)
  %102 = call { ptr, ptr, ptr, i32 } %101({ ptr, ptr, ptr, i32 } %93, { ptr, ptr, ptr, i32 } %93, ptr %94)
  %103 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %102, ptr %103, align 8
  %104 = call ptr @llvm.invariant.start.p0(i64 16, ptr %103)
  %105 = alloca { ptr, ptr, ptr, i32 }, align 8
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 0
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 0
  %108 = load ptr, ptr %106, align 8
  store ptr %108, ptr %107, align 8
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 1
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 1
  %111 = load ptr, ptr %109, align 8
  store ptr %111, ptr %110, align 8
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 2
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 2
  %114 = load ptr, ptr %112, align 8
  store ptr %114, ptr %113, align 8
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 3
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 3
  %117 = load i32, ptr %115, align 4
  store i32 %117, ptr %116, align 4
  call void @set_offset(ptr %105, ptr @IntIterator)
  %118 = alloca [1 x ptr], align 8
  store ptr @ChainIterator, ptr %118, align 8
  %119 = load ptr, ptr %118, align 8
  %120 = getelementptr ptr, ptr %119, i32 6
  %121 = load ptr, ptr %120, align 8
  %122 = call { i64, i64 } @size_wrapper(ptr %121, ptr %118)
  %123 = extractvalue { i64, i64 } %122, 0
  %124 = call ptr @bump_malloc(i64 %123)
  %125 = alloca { ptr, ptr, ptr, i32 }, align 8
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 1
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 3
  store ptr @ChainIterator, ptr %125, align 8
  store ptr %124, ptr %126, align 8
  store i32 9, ptr %127, align 4
  %128 = call ptr @llvm.invariant.start.p0(i64 16, ptr %125)
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %130 = load ptr, ptr %129, align 8
  %131 = load ptr, ptr %6, align 8
  %132 = call ptr @llvm.invariant.start.p0(i64 416, ptr %131)
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %134 = load i32, ptr %133, align 4
  %135 = getelementptr ptr, ptr %131, i32 %134
  %136 = load ptr, ptr %135, align 8
  %137 = getelementptr { ptr, ptr }, ptr %136, i32 0, i32 0
  %138 = load ptr, ptr %137, align 8
  %139 = call { ptr, ptr, ptr, i32 } %138(ptr %130) #16
  %140 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %139, ptr %140, align 8
  %141 = call ptr @llvm.invariant.start.p0(i64 16, ptr %140)
  call void @assume_offset(ptr %140, ptr @IntIterable)
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %140, i32 0, i32 0
  %143 = load ptr, ptr %142, align 8
  %144 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %143, 0
  %145 = getelementptr { ptr, ptr, ptr, i32 }, ptr %140, i32 0, i32 1
  %146 = load ptr, ptr %145, align 8
  %147 = insertvalue { ptr, ptr, ptr, i32 } %144, ptr %146, 1
  %148 = getelementptr { ptr, ptr, ptr, i32 }, ptr %140, i32 0, i32 2
  %149 = load ptr, ptr %148, align 8
  %150 = insertvalue { ptr, ptr, ptr, i32 } %147, ptr %149, 2
  %151 = getelementptr { ptr, ptr, ptr, i32 }, ptr %140, i32 0, i32 3
  %152 = load i32, ptr %151, align 4
  %153 = insertvalue { ptr, ptr, ptr, i32 } %150, i32 %152, 3
  %154 = alloca [0 x ptr], align 8
  %155 = call ptr @llvm.invariant.start.p0(i64 0, ptr %154)
  %156 = call ptr @llvm.invariant.start.p0(i64 192, ptr %143)
  %157 = getelementptr ptr, ptr %143, i32 %152
  %158 = getelementptr ptr, ptr %157, i32 10
  %159 = load ptr, ptr %158, align 8
  %160 = alloca {}, align 8
  %161 = call ptr @behavior_wrapper(ptr %159, { ptr, ptr, ptr, i32 } %153, ptr %160)
  %162 = call { ptr, ptr, ptr, i32 } %161({ ptr, ptr, ptr, i32 } %153, { ptr, ptr, ptr, i32 } %153, ptr %154)
  %163 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %162, ptr %163, align 8
  %164 = call ptr @llvm.invariant.start.p0(i64 16, ptr %163)
  %165 = alloca { ptr, ptr, ptr, i32 }, align 8
  %166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 0
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %165, i32 0, i32 0
  %168 = load ptr, ptr %166, align 8
  store ptr %168, ptr %167, align 8
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 1
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %165, i32 0, i32 1
  %171 = load ptr, ptr %169, align 8
  store ptr %171, ptr %170, align 8
  %172 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 2
  %173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %165, i32 0, i32 2
  %174 = load ptr, ptr %172, align 8
  store ptr %174, ptr %173, align 8
  %175 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 3
  %176 = getelementptr { ptr, ptr, ptr, i32 }, ptr %165, i32 0, i32 3
  %177 = load i32, ptr %175, align 4
  store i32 %177, ptr %176, align 4
  call void @set_offset(ptr %165, ptr @IntIterator)
  %178 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %179 = load ptr, ptr %178, align 8
  %180 = load ptr, ptr %6, align 8
  %181 = call ptr @llvm.invariant.start.p0(i64 416, ptr %180)
  %182 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %183 = load i32, ptr %182, align 4
  %184 = getelementptr ptr, ptr %180, i32 %183
  %185 = getelementptr ptr, ptr %184, i32 1
  %186 = load ptr, ptr %185, align 8
  %187 = getelementptr { ptr, ptr }, ptr %186, i32 0, i32 0
  %188 = load ptr, ptr %187, align 8
  %189 = call { ptr, ptr, ptr, i32 } %188(ptr %179) #16
  %190 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %189, ptr %190, align 8
  %191 = call ptr @llvm.invariant.start.p0(i64 16, ptr %190)
  call void @assume_offset(ptr %190, ptr @IntIterable)
  %192 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 0
  %193 = load ptr, ptr %192, align 8
  %194 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %193, 0
  %195 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 1
  %196 = load ptr, ptr %195, align 8
  %197 = insertvalue { ptr, ptr, ptr, i32 } %194, ptr %196, 1
  %198 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 2
  %199 = load ptr, ptr %198, align 8
  %200 = insertvalue { ptr, ptr, ptr, i32 } %197, ptr %199, 2
  %201 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 3
  %202 = load i32, ptr %201, align 4
  %203 = insertvalue { ptr, ptr, ptr, i32 } %200, i32 %202, 3
  %204 = alloca [0 x ptr], align 8
  %205 = call ptr @llvm.invariant.start.p0(i64 0, ptr %204)
  %206 = call ptr @llvm.invariant.start.p0(i64 192, ptr %193)
  %207 = getelementptr ptr, ptr %193, i32 %202
  %208 = getelementptr ptr, ptr %207, i32 10
  %209 = load ptr, ptr %208, align 8
  %210 = alloca {}, align 8
  %211 = call ptr @behavior_wrapper(ptr %209, { ptr, ptr, ptr, i32 } %203, ptr %210)
  %212 = call { ptr, ptr, ptr, i32 } %211({ ptr, ptr, ptr, i32 } %203, { ptr, ptr, ptr, i32 } %203, ptr %204)
  %213 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %212, ptr %213, align 8
  %214 = call ptr @llvm.invariant.start.p0(i64 16, ptr %213)
  %215 = alloca { ptr, ptr, ptr, i32 }, align 8
  %216 = getelementptr { ptr, ptr, ptr, i32 }, ptr %213, i32 0, i32 0
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %215, i32 0, i32 0
  %218 = load ptr, ptr %216, align 8
  store ptr %218, ptr %217, align 8
  %219 = getelementptr { ptr, ptr, ptr, i32 }, ptr %213, i32 0, i32 1
  %220 = getelementptr { ptr, ptr, ptr, i32 }, ptr %215, i32 0, i32 1
  %221 = load ptr, ptr %219, align 8
  store ptr %221, ptr %220, align 8
  %222 = getelementptr { ptr, ptr, ptr, i32 }, ptr %213, i32 0, i32 2
  %223 = getelementptr { ptr, ptr, ptr, i32 }, ptr %215, i32 0, i32 2
  %224 = load ptr, ptr %222, align 8
  store ptr %224, ptr %223, align 8
  %225 = getelementptr { ptr, ptr, ptr, i32 }, ptr %213, i32 0, i32 3
  %226 = getelementptr { ptr, ptr, ptr, i32 }, ptr %215, i32 0, i32 3
  %227 = load i32, ptr %225, align 4
  store i32 %227, ptr %226, align 4
  call void @set_offset(ptr %215, ptr @IntIterator)
  %228 = alloca { ptr, ptr, ptr, i32 }, align 8
  %229 = getelementptr { ptr, ptr, ptr, i32 }, ptr %165, i32 0, i32 0
  %230 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 0
  %231 = load ptr, ptr %229, align 8
  store ptr %231, ptr %230, align 8
  %232 = getelementptr { ptr, ptr, ptr, i32 }, ptr %165, i32 0, i32 1
  %233 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 1
  %234 = load ptr, ptr %232, align 8
  store ptr %234, ptr %233, align 8
  %235 = getelementptr { ptr, ptr, ptr, i32 }, ptr %165, i32 0, i32 2
  %236 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 2
  %237 = load ptr, ptr %235, align 8
  store ptr %237, ptr %236, align 8
  %238 = getelementptr { ptr, ptr, ptr, i32 }, ptr %165, i32 0, i32 3
  %239 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 3
  %240 = load i32, ptr %238, align 4
  store i32 %240, ptr %239, align 4
  call void @set_offset(ptr %228, ptr @IntIterator)
  %241 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 0
  %242 = load ptr, ptr %241, align 8
  %243 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %242, 0
  %244 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 1
  %245 = load ptr, ptr %244, align 8
  %246 = insertvalue { ptr, ptr, ptr, i32 } %243, ptr %245, 1
  %247 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 2
  %248 = load ptr, ptr %247, align 8
  %249 = insertvalue { ptr, ptr, ptr, i32 } %246, ptr %248, 2
  %250 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 3
  %251 = load i32, ptr %250, align 4
  %252 = insertvalue { ptr, ptr, ptr, i32 } %249, i32 %251, 3
  %253 = alloca { ptr, ptr, ptr, i32 }, align 8
  %254 = getelementptr { ptr, ptr, ptr, i32 }, ptr %215, i32 0, i32 0
  %255 = getelementptr { ptr, ptr, ptr, i32 }, ptr %253, i32 0, i32 0
  %256 = load ptr, ptr %254, align 8
  store ptr %256, ptr %255, align 8
  %257 = getelementptr { ptr, ptr, ptr, i32 }, ptr %215, i32 0, i32 1
  %258 = getelementptr { ptr, ptr, ptr, i32 }, ptr %253, i32 0, i32 1
  %259 = load ptr, ptr %257, align 8
  store ptr %259, ptr %258, align 8
  %260 = getelementptr { ptr, ptr, ptr, i32 }, ptr %215, i32 0, i32 2
  %261 = getelementptr { ptr, ptr, ptr, i32 }, ptr %253, i32 0, i32 2
  %262 = load ptr, ptr %260, align 8
  store ptr %262, ptr %261, align 8
  %263 = getelementptr { ptr, ptr, ptr, i32 }, ptr %215, i32 0, i32 3
  %264 = getelementptr { ptr, ptr, ptr, i32 }, ptr %253, i32 0, i32 3
  %265 = load i32, ptr %263, align 4
  store i32 %265, ptr %264, align 4
  call void @set_offset(ptr %253, ptr @IntIterator)
  %266 = getelementptr { ptr, ptr, ptr, i32 }, ptr %253, i32 0, i32 0
  %267 = load ptr, ptr %266, align 8
  %268 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %267, 0
  %269 = getelementptr { ptr, ptr, ptr, i32 }, ptr %253, i32 0, i32 1
  %270 = load ptr, ptr %269, align 8
  %271 = insertvalue { ptr, ptr, ptr, i32 } %268, ptr %270, 1
  %272 = getelementptr { ptr, ptr, ptr, i32 }, ptr %253, i32 0, i32 2
  %273 = load ptr, ptr %272, align 8
  %274 = insertvalue { ptr, ptr, ptr, i32 } %271, ptr %273, 2
  %275 = getelementptr { ptr, ptr, ptr, i32 }, ptr %253, i32 0, i32 3
  %276 = load i32, ptr %275, align 4
  %277 = insertvalue { ptr, ptr, ptr, i32 } %274, i32 %276, 3
  %278 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 0
  %279 = load ptr, ptr %278, align 8
  %280 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %279, 0
  %281 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 1
  %282 = load ptr, ptr %281, align 8
  %283 = insertvalue { ptr, ptr, ptr, i32 } %280, ptr %282, 1
  %284 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 2
  %285 = load ptr, ptr %284, align 8
  %286 = insertvalue { ptr, ptr, ptr, i32 } %283, ptr %285, 2
  %287 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 3
  %288 = load i32, ptr %287, align 4
  %289 = insertvalue { ptr, ptr, ptr, i32 } %286, i32 %288, 3
  %290 = alloca [2 x ptr], align 8
  %291 = getelementptr [2 x ptr], ptr %290, i32 0, i32 0
  store ptr @_parameterization_IntIterator, ptr %291, align 8
  %292 = getelementptr [2 x ptr], ptr %290, i32 0, i32 1
  store ptr @_parameterization_IntIterator, ptr %292, align 8
  %293 = call ptr @llvm.invariant.start.p0(i64 4, ptr %290)
  %294 = call ptr @llvm.invariant.start.p0(i64 72, ptr %279)
  %295 = getelementptr ptr, ptr %279, i32 %288
  %296 = getelementptr ptr, ptr %295, i32 3
  %297 = load ptr, ptr %296, align 8
  %298 = alloca { ptr, ptr }, align 8
  %299 = getelementptr { ptr, ptr }, ptr %298, i32 0, i32 0
  store ptr %242, ptr %299, align 8
  %300 = getelementptr { ptr, ptr }, ptr %298, i32 0, i32 1
  store ptr %267, ptr %300, align 8
  %301 = call ptr @behavior_wrapper(ptr %297, { ptr, ptr, ptr, i32 } %289, ptr %298)
  call void %301({ ptr, ptr, ptr, i32 } %289, { ptr, ptr, ptr, i32 } %289, ptr %290, { ptr, ptr, ptr, i32 } %252, { ptr, ptr, ptr, i32 } %277)
  %302 = alloca { ptr, ptr, ptr, i32 }, align 8
  %303 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 0
  %304 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 0
  %305 = load ptr, ptr %303, align 8
  store ptr %305, ptr %304, align 8
  %306 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 1
  %307 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 1
  %308 = load ptr, ptr %306, align 8
  store ptr %308, ptr %307, align 8
  %309 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 2
  %310 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 2
  %311 = load ptr, ptr %309, align 8
  store ptr %311, ptr %310, align 8
  %312 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 3
  %313 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 3
  %314 = load i32, ptr %312, align 4
  store i32 %314, ptr %313, align 4
  call void @set_offset(ptr %302, ptr @Iterator)
  %315 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 0
  %316 = load ptr, ptr %315, align 8
  %317 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %316, 0
  %318 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 1
  %319 = load ptr, ptr %318, align 8
  %320 = insertvalue { ptr, ptr, ptr, i32 } %317, ptr %319, 1
  %321 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 2
  %322 = load ptr, ptr %321, align 8
  %323 = insertvalue { ptr, ptr, ptr, i32 } %320, ptr %322, 2
  %324 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 3
  %325 = load i32, ptr %324, align 4
  %326 = insertvalue { ptr, ptr, ptr, i32 } %323, i32 %325, 3
  ret { ptr, ptr, ptr, i32 } %326
}

define { i64, i64 } @_size_ChainIterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (i1, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @ChainIterator_B_init_firstIntIterator_secondIntIterator({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -933084275656658555, i64 ptrtoint (ptr @IntIterator to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 -933084275656658555, i64 ptrtoint (ptr @IntIterator to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [9 x ptr], ptr %26, i32 0, i32 5
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @ChainIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [9 x ptr], ptr %4, i32 0, i32 6
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @ChainIterator_init_firstIntIterator_secondIntIterator({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @ChainIterator)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @IntIterator)
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %45 = load ptr, ptr %43, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %48 = load i32, ptr %46, align 4
  store i32 %48, ptr %47, align 4
  call void @set_offset(ptr %36, ptr @IntIterator)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %8, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 72, ptr %51)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = getelementptr ptr, ptr %51, i32 %54
  %56 = load ptr, ptr %55, align 8
  %57 = getelementptr { ptr, ptr }, ptr %56, i32 0, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %63 = load ptr, ptr %62, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %63, 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %66 = load ptr, ptr %65, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %66, 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %69 = load i32, ptr %68, align 4
  %70 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %69, 3
  call void %58(ptr %50, { ptr, ptr, ptr, i32 } %70) #15
  %71 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %71, align 8
  %72 = call ptr @llvm.invariant.start.p0(i64 16, ptr %71)
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 0
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %76 = load ptr, ptr %74, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 1
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %79 = load ptr, ptr %77, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 2
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %82 = load ptr, ptr %80, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 3
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %85 = load i32, ptr %83, align 4
  store i32 %85, ptr %84, align 4
  call void @set_offset(ptr %73, ptr @IntIterator)
  %86 = alloca { ptr, ptr, ptr, i32 }, align 8
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 0
  %89 = load ptr, ptr %87, align 8
  store ptr %89, ptr %88, align 8
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 1
  %92 = load ptr, ptr %90, align 8
  store ptr %92, ptr %91, align 8
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 2
  %95 = load ptr, ptr %93, align 8
  store ptr %95, ptr %94, align 8
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 3
  %98 = load i32, ptr %96, align 4
  store i32 %98, ptr %97, align 4
  call void @set_offset(ptr %86, ptr @IntIterator)
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %100 = load ptr, ptr %99, align 8
  %101 = load ptr, ptr %8, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 72, ptr %101)
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %104 = load i32, ptr %103, align 4
  %105 = getelementptr ptr, ptr %101, i32 %104
  %106 = getelementptr ptr, ptr %105, i32 1
  %107 = load ptr, ptr %106, align 8
  %108 = getelementptr { ptr, ptr }, ptr %107, i32 0, i32 1
  %109 = load ptr, ptr %108, align 8
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 0
  %111 = load ptr, ptr %110, align 8
  %112 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %111, 0
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 1
  %114 = load ptr, ptr %113, align 8
  %115 = insertvalue { ptr, ptr, ptr, i32 } %112, ptr %114, 1
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 2
  %117 = load ptr, ptr %116, align 8
  %118 = insertvalue { ptr, ptr, ptr, i32 } %115, ptr %117, 2
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 3
  %120 = load i32, ptr %119, align 4
  %121 = insertvalue { ptr, ptr, ptr, i32 } %118, i32 %120, 3
  call void %109(ptr %100, { ptr, ptr, ptr, i32 } %121) #15
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %123 = load ptr, ptr %122, align 8
  %124 = load ptr, ptr %8, align 8
  %125 = call ptr @llvm.invariant.start.p0(i64 72, ptr %124)
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %127 = load i32, ptr %126, align 4
  %128 = getelementptr ptr, ptr %124, i32 %127
  %129 = getelementptr ptr, ptr %128, i32 2
  %130 = load ptr, ptr %129, align 8
  %131 = getelementptr { ptr, ptr }, ptr %130, i32 0, i32 1
  %132 = load ptr, ptr %131, align 8
  call void %132(ptr %123, i1 true) #15
  ret void
}

define { ptr, i32 } @ChainIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = alloca [0 x ptr], align 8
  %6 = alloca {}, align 8
  %7 = alloca { ptr, i32 }, align 8
  %8 = alloca i32, align 4
  %9 = alloca ptr, align 8
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %11 = alloca [0 x ptr], align 8
  %12 = alloca {}, align 8
  %13 = alloca { ptr, i32 }, align 8
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i32 }, align 8
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca { ptr, i32 }, align 8
  %.reg2mem5 = alloca { ptr, i32 }, align 8
  %.reg2mem7 = alloca { ptr, i32 }, align 8
  %.reg2mem9 = alloca i32, align 4
  %.reg2mem11 = alloca { ptr, i32 }, align 8
  %.reg2mem13 = alloca i32, align 4
  %.reg2mem15 = alloca { ptr, i32 }, align 8
  %.reg2mem17 = alloca { ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %14, align 8
  %15 = call ptr @llvm.invariant.start.p0(i64 16, ptr %14)
  %16 = alloca { ptr, ptr, ptr, i32 }, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 0
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 2
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %28 = load i32, ptr %26, align 4
  store i32 %28, ptr %27, align 4
  call void @set_offset(ptr %16, ptr @ChainIterator)
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  %31 = load ptr, ptr %16, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 72, ptr %31)
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %34 = load i32, ptr %33, align 4
  %35 = getelementptr ptr, ptr %31, i32 %34
  %36 = getelementptr ptr, ptr %35, i32 2
  %37 = load ptr, ptr %36, align 8
  %38 = getelementptr { ptr, ptr }, ptr %37, i32 0, i32 0
  %39 = load ptr, ptr %38, align 8
  %40 = call i1 %39(ptr %30) #16
  br i1 %40, label %41, label %102

41:                                               ; preds = %3
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %43 = load ptr, ptr %42, align 8
  %44 = load ptr, ptr %16, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 72, ptr %44)
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %47 = load i32, ptr %46, align 4
  %48 = getelementptr ptr, ptr %44, i32 %47
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr { ptr, ptr }, ptr %49, i32 0, i32 0
  %51 = load ptr, ptr %50, align 8
  %52 = call { ptr, ptr, ptr, i32 } %51(ptr %43) #16
  store { ptr, ptr, ptr, i32 } %52, ptr %4, align 8
  %53 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  call void @assume_offset(ptr %4, ptr @IntIterator)
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %55 = load ptr, ptr %54, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %55, 0
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = insertvalue { ptr, ptr, ptr, i32 } %56, ptr %58, 1
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %61 = load ptr, ptr %60, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } %59, ptr %61, 2
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %64 = load i32, ptr %63, align 4
  %65 = insertvalue { ptr, ptr, ptr, i32 } %62, i32 %64, 3
  %66 = call ptr @llvm.invariant.start.p0(i64 0, ptr %5)
  %67 = call ptr @llvm.invariant.start.p0(i64 16, ptr %55)
  %68 = getelementptr ptr, ptr %55, i32 %64
  %69 = load ptr, ptr %68, align 8
  %70 = call ptr @behavior_wrapper(ptr %69, { ptr, ptr, ptr, i32 } %65, ptr %6)
  %71 = call { ptr, i32 } %70({ ptr, ptr, ptr, i32 } %65, { ptr, ptr, ptr, i32 } %65, ptr %5)
  store { ptr, i32 } %71, ptr %7, align 8
  %72 = getelementptr { ptr, i32 }, ptr %7, i32 0, i32 0
  %73 = load ptr, ptr %72, align 8
  %74 = ptrtoint ptr %73 to i64
  %75 = icmp eq i64 %74, ptrtoint (ptr @nil_typ to i64)
  %76 = icmp eq i64 %74, 0
  %77 = or i1 %75, %76
  %78 = icmp eq i1 %77, false
  %79 = icmp ne i1 %77, false
  %80 = zext i1 %79 to i32
  store i32 %80, ptr %.reg2mem9, align 4
  br i1 %78, label %81, label %88

81:                                               ; preds = %41
  %82 = getelementptr { ptr, i32 }, ptr %7, i32 0, i32 1
  %83 = load i32, ptr %82, align 4
  store i32 %83, ptr %8, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %9, align 4
  %84 = load ptr, ptr %9, align 8
  %85 = insertvalue { ptr, i32 } undef, ptr %84, 0
  %86 = load i32, ptr %8, align 4
  %87 = insertvalue { ptr, i32 } %85, i32 %86, 1
  store { ptr, i32 } %87, ptr %.reg2mem7, align 8
  %.reload8 = load { ptr, i32 }, ptr %.reg2mem7, align 8
  store { ptr, i32 } %.reload8, ptr %.reg2mem17, align 8
  br label %100

88:                                               ; preds = %41
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %90 = load ptr, ptr %89, align 8
  %91 = load ptr, ptr %16, align 8
  %92 = call ptr @llvm.invariant.start.p0(i64 72, ptr %91)
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %94 = load i32, ptr %93, align 4
  %95 = getelementptr ptr, ptr %91, i32 %94
  %96 = getelementptr ptr, ptr %95, i32 2
  %97 = load ptr, ptr %96, align 8
  %98 = getelementptr { ptr, ptr }, ptr %97, i32 0, i32 1
  %99 = load ptr, ptr %98, align 8
  call void %99(ptr %90, i1 false) #15
  store { ptr, i32 } poison, ptr %.reg2mem17, align 8
  br label %100

100:                                              ; preds = %88, %81
  %.reload18 = load { ptr, i32 }, ptr %.reg2mem17, align 8
  store { ptr, i32 } %.reload18, ptr %.reg2mem5, align 8
  br label %101

101:                                              ; preds = %100
  %.reload6 = load { ptr, i32 }, ptr %.reg2mem5, align 8
  %.reload10 = load i32, ptr %.reg2mem9, align 4
  store i32 %.reload10, ptr %.reg2mem13, align 4
  store { ptr, i32 } %.reload6, ptr %.reg2mem15, align 8
  br label %103

102:                                              ; preds = %3
  store i32 1, ptr %.reg2mem13, align 4
  store { ptr, i32 } poison, ptr %.reg2mem15, align 8
  br label %103

103:                                              ; preds = %102, %101
  %.reload16 = load { ptr, i32 }, ptr %.reg2mem15, align 8
  %.reload14 = load i32, ptr %.reg2mem13, align 4
  store { ptr, i32 } %.reload16, ptr %.reg2mem3, align 8
  store i32 %.reload14, ptr %.reg2mem1, align 4
  br label %104

104:                                              ; preds = %103
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  %105 = zext i32 %.reload2 to i64
  %106 = trunc i64 %105 to i32
  switch i32 %106, label %108 [
    i32 0, label %107
  ]

107:                                              ; preds = %104
  %.reload4 = load { ptr, i32 }, ptr %.reg2mem3, align 8
  store { ptr, i32 } %.reload4, ptr %.reg2mem11, align 8
  br label %146

108:                                              ; preds = %104
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %110 = load ptr, ptr %109, align 8
  %111 = load ptr, ptr %16, align 8
  %112 = call ptr @llvm.invariant.start.p0(i64 72, ptr %111)
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %114 = load i32, ptr %113, align 4
  %115 = getelementptr ptr, ptr %111, i32 %114
  %116 = getelementptr ptr, ptr %115, i32 1
  %117 = load ptr, ptr %116, align 8
  %118 = getelementptr { ptr, ptr }, ptr %117, i32 0, i32 0
  %119 = load ptr, ptr %118, align 8
  %120 = call { ptr, ptr, ptr, i32 } %119(ptr %110) #16
  store { ptr, ptr, ptr, i32 } %120, ptr %10, align 8
  %121 = call ptr @llvm.invariant.start.p0(i64 16, ptr %10)
  call void @assume_offset(ptr %10, ptr @IntIterator)
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 0
  %123 = load ptr, ptr %122, align 8
  %124 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %123, 0
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %126 = load ptr, ptr %125, align 8
  %127 = insertvalue { ptr, ptr, ptr, i32 } %124, ptr %126, 1
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 2
  %129 = load ptr, ptr %128, align 8
  %130 = insertvalue { ptr, ptr, ptr, i32 } %127, ptr %129, 2
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  %132 = load i32, ptr %131, align 4
  %133 = insertvalue { ptr, ptr, ptr, i32 } %130, i32 %132, 3
  %134 = call ptr @llvm.invariant.start.p0(i64 0, ptr %11)
  %135 = call ptr @llvm.invariant.start.p0(i64 16, ptr %123)
  %136 = getelementptr ptr, ptr %123, i32 %132
  %137 = load ptr, ptr %136, align 8
  %138 = call ptr @behavior_wrapper(ptr %137, { ptr, ptr, ptr, i32 } %133, ptr %12)
  %139 = call { ptr, i32 } %138({ ptr, ptr, ptr, i32 } %133, { ptr, ptr, ptr, i32 } %133, ptr %11)
  store { ptr, i32 } %139, ptr %13, align 8
  %140 = getelementptr { ptr, i32 }, ptr %13, i32 0, i32 0
  %141 = load ptr, ptr %140, align 8
  %142 = insertvalue { ptr, i32 } undef, ptr %141, 0
  %143 = getelementptr { ptr, i32 }, ptr %13, i32 0, i32 1
  %144 = load i32, ptr %143, align 4
  %145 = insertvalue { ptr, i32 } %142, i32 %144, 1
  store { ptr, i32 } %145, ptr %.reg2mem, align 8
  %.reload = load { ptr, i32 }, ptr %.reg2mem, align 8
  store { ptr, i32 } %.reload, ptr %.reg2mem11, align 8
  br label %146

146:                                              ; preds = %108, %107
  %.reload12 = load { ptr, i32 }, ptr %.reg2mem11, align 8
  ret { ptr, i32 } %.reload12
}

define i1 @ChainIterator_getter_on_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = load i1, ptr %13, align 1
  ret i1 %14
}

define void @ChainIterator_setter_on_first(ptr %0, i1 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  store i1 %1, ptr %14, align 1
  ret void
}

define { ptr, ptr, ptr, i32 } @ChainIterator_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @ChainIterator_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 16, ptr %9)
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %22 = load i32, ptr %20, align 4
  store i32 %22, ptr %21, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ChainIterator_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @ChainIterator_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ChainIterable_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @ChainIterable_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 16, ptr %9)
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %22 = load i32, ptr %20, align 4
  store i32 %22, ptr %21, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ChainIterable_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @ChainIterable_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  ret void
}

define { i64, i64 } @_size_FilterIterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %10
  %12 = urem i64 %11, %5
  %13 = icmp eq i64 %12, 0
  %14 = sub i64 %5, %12
  %15 = select i1 %13, i64 0, i64 %14
  %16 = add i64 %11, %15
  %17 = insertvalue { i64, i64 } undef, i64 %16, 0
  %18 = insertvalue { i64, i64 } %17, i64 %5, 1
  ret { i64, i64 } %18
}

define ptr @FilterIterable_B_init_iterableIntIterable_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [52 x ptr], ptr %26, i32 0, i32 14
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @FilterIterable_B_each_fFunctionPtri32_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 15
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @FilterIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [52 x ptr], ptr %26, i32 0, i32 16
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @FilterIterable_B_all_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 17
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @FilterIterable_B_any_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 18
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @FilterIterable_B_map_fFunctionPtri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 19
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @FilterIterable_B_filter_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 20
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @FilterIterable_B_chain_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 21
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @FilterIterable_B_interleave_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 22
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @FilterIterable_B_zip_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 23
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @FilterIterable_B_product_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 24
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @FilterIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [52 x ptr], ptr %4, i32 0, i32 25
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @FilterIterable_init_iterableIntIterable_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @FilterIterable)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @IntIterable)
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %45 = load ptr, ptr %43, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %48 = load i32, ptr %46, align 4
  store i32 %48, ptr %47, align 4
  call void @set_offset(ptr %36, ptr @IntIterable)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %8, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 416, ptr %51)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = getelementptr ptr, ptr %51, i32 %54
  %56 = load ptr, ptr %55, align 8
  %57 = getelementptr { ptr, ptr }, ptr %56, i32 0, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %63 = load ptr, ptr %62, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %63, 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %66 = load ptr, ptr %65, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %66, 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %69 = load i32, ptr %68, align 4
  %70 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %69, 3
  call void %58(ptr %50, { ptr, ptr, ptr, i32 } %70) #15
  %71 = alloca ptr, align 8
  store { ptr } %4, ptr %71, align 8
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %73 = load ptr, ptr %72, align 8
  %74 = load ptr, ptr %8, align 8
  %75 = call ptr @llvm.invariant.start.p0(i64 416, ptr %74)
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %77 = load i32, ptr %76, align 4
  %78 = getelementptr ptr, ptr %74, i32 %77
  %79 = getelementptr ptr, ptr %78, i32 1
  %80 = load ptr, ptr %79, align 8
  %81 = getelementptr { ptr, ptr }, ptr %80, i32 0, i32 1
  %82 = load ptr, ptr %81, align 8
  %83 = load ptr, ptr %71, align 8
  %84 = insertvalue { ptr } undef, ptr %83, 0
  call void %82(ptr %73, { ptr } %84) #15
  ret void
}

define { ptr, ptr, ptr, i32 } @FilterIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @FilterIterable)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 416, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 0
  %28 = load ptr, ptr %27, align 8
  %29 = call { ptr, ptr, ptr, i32 } %28(ptr %20) #16
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %29, ptr %30, align 8
  %31 = call ptr @llvm.invariant.start.p0(i64 16, ptr %30)
  call void @assume_offset(ptr %30, ptr @IntIterable)
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %33, 0
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %36, 1
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %39 = load ptr, ptr %38, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %39, 2
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %42 = load i32, ptr %41, align 4
  %43 = insertvalue { ptr, ptr, ptr, i32 } %40, i32 %42, 3
  %44 = alloca [0 x ptr], align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 0, ptr %44)
  %46 = call ptr @llvm.invariant.start.p0(i64 192, ptr %33)
  %47 = getelementptr ptr, ptr %33, i32 %42
  %48 = getelementptr ptr, ptr %47, i32 10
  %49 = load ptr, ptr %48, align 8
  %50 = alloca {}, align 8
  %51 = call ptr @behavior_wrapper(ptr %49, { ptr, ptr, ptr, i32 } %43, ptr %50)
  %52 = call { ptr, ptr, ptr, i32 } %51({ ptr, ptr, ptr, i32 } %43, { ptr, ptr, ptr, i32 } %43, ptr %44)
  %53 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %52, ptr %53, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 16, ptr %53)
  %55 = alloca { ptr, ptr, ptr, i32 }, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 0
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 0
  %58 = load ptr, ptr %56, align 8
  store ptr %58, ptr %57, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 1
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  %61 = load ptr, ptr %59, align 8
  store ptr %61, ptr %60, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 2
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 2
  %64 = load ptr, ptr %62, align 8
  store ptr %64, ptr %63, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 3
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  %67 = load i32, ptr %65, align 4
  store i32 %67, ptr %66, align 4
  call void @set_offset(ptr %55, ptr @IntIterator)
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = load ptr, ptr %6, align 8
  %71 = call ptr @llvm.invariant.start.p0(i64 416, ptr %70)
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %73 = load i32, ptr %72, align 4
  %74 = getelementptr ptr, ptr %70, i32 %73
  %75 = getelementptr ptr, ptr %74, i32 1
  %76 = load ptr, ptr %75, align 8
  %77 = getelementptr { ptr, ptr }, ptr %76, i32 0, i32 0
  %78 = load ptr, ptr %77, align 8
  %79 = call { ptr } %78(ptr %69) #16
  %80 = alloca [1 x ptr], align 8
  store ptr @FilterIterator, ptr %80, align 8
  %81 = load ptr, ptr %80, align 8
  %82 = getelementptr ptr, ptr %81, i32 6
  %83 = load ptr, ptr %82, align 8
  %84 = call { i64, i64 } @size_wrapper(ptr %83, ptr %80)
  %85 = extractvalue { i64, i64 } %84, 0
  %86 = call ptr @bump_malloc(i64 %85)
  %87 = alloca { ptr, ptr, ptr, i32 }, align 8
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 1
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 3
  store ptr @FilterIterator, ptr %87, align 8
  store ptr %86, ptr %88, align 8
  store i32 9, ptr %89, align 4
  %90 = call ptr @llvm.invariant.start.p0(i64 16, ptr %87)
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %92 = load ptr, ptr %91, align 8
  %93 = load ptr, ptr %6, align 8
  %94 = call ptr @llvm.invariant.start.p0(i64 416, ptr %93)
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %96 = load i32, ptr %95, align 4
  %97 = getelementptr ptr, ptr %93, i32 %96
  %98 = load ptr, ptr %97, align 8
  %99 = getelementptr { ptr, ptr }, ptr %98, i32 0, i32 0
  %100 = load ptr, ptr %99, align 8
  %101 = call { ptr, ptr, ptr, i32 } %100(ptr %92) #16
  %102 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %101, ptr %102, align 8
  %103 = call ptr @llvm.invariant.start.p0(i64 16, ptr %102)
  call void @assume_offset(ptr %102, ptr @IntIterable)
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 0
  %105 = load ptr, ptr %104, align 8
  %106 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %105, 0
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 1
  %108 = load ptr, ptr %107, align 8
  %109 = insertvalue { ptr, ptr, ptr, i32 } %106, ptr %108, 1
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 2
  %111 = load ptr, ptr %110, align 8
  %112 = insertvalue { ptr, ptr, ptr, i32 } %109, ptr %111, 2
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 3
  %114 = load i32, ptr %113, align 4
  %115 = insertvalue { ptr, ptr, ptr, i32 } %112, i32 %114, 3
  %116 = alloca [0 x ptr], align 8
  %117 = call ptr @llvm.invariant.start.p0(i64 0, ptr %116)
  %118 = call ptr @llvm.invariant.start.p0(i64 192, ptr %105)
  %119 = getelementptr ptr, ptr %105, i32 %114
  %120 = getelementptr ptr, ptr %119, i32 10
  %121 = load ptr, ptr %120, align 8
  %122 = alloca {}, align 8
  %123 = call ptr @behavior_wrapper(ptr %121, { ptr, ptr, ptr, i32 } %115, ptr %122)
  %124 = call { ptr, ptr, ptr, i32 } %123({ ptr, ptr, ptr, i32 } %115, { ptr, ptr, ptr, i32 } %115, ptr %116)
  %125 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %124, ptr %125, align 8
  %126 = call ptr @llvm.invariant.start.p0(i64 16, ptr %125)
  %127 = alloca { ptr, ptr, ptr, i32 }, align 8
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 0
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %127, i32 0, i32 0
  %130 = load ptr, ptr %128, align 8
  store ptr %130, ptr %129, align 8
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 1
  %132 = getelementptr { ptr, ptr, ptr, i32 }, ptr %127, i32 0, i32 1
  %133 = load ptr, ptr %131, align 8
  store ptr %133, ptr %132, align 8
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 2
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %127, i32 0, i32 2
  %136 = load ptr, ptr %134, align 8
  store ptr %136, ptr %135, align 8
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %125, i32 0, i32 3
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %127, i32 0, i32 3
  %139 = load i32, ptr %137, align 4
  store i32 %139, ptr %138, align 4
  call void @set_offset(ptr %127, ptr @IntIterator)
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %141 = load ptr, ptr %140, align 8
  %142 = load ptr, ptr %6, align 8
  %143 = call ptr @llvm.invariant.start.p0(i64 416, ptr %142)
  %144 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %145 = load i32, ptr %144, align 4
  %146 = getelementptr ptr, ptr %142, i32 %145
  %147 = getelementptr ptr, ptr %146, i32 1
  %148 = load ptr, ptr %147, align 8
  %149 = getelementptr { ptr, ptr }, ptr %148, i32 0, i32 0
  %150 = load ptr, ptr %149, align 8
  %151 = call { ptr } %150(ptr %141) #16
  %152 = alloca ptr, align 8
  store { ptr } %151, ptr %152, align 8
  %153 = alloca { ptr, ptr, ptr, i32 }, align 8
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %127, i32 0, i32 0
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %153, i32 0, i32 0
  %156 = load ptr, ptr %154, align 8
  store ptr %156, ptr %155, align 8
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %127, i32 0, i32 1
  %158 = getelementptr { ptr, ptr, ptr, i32 }, ptr %153, i32 0, i32 1
  %159 = load ptr, ptr %157, align 8
  store ptr %159, ptr %158, align 8
  %160 = getelementptr { ptr, ptr, ptr, i32 }, ptr %127, i32 0, i32 2
  %161 = getelementptr { ptr, ptr, ptr, i32 }, ptr %153, i32 0, i32 2
  %162 = load ptr, ptr %160, align 8
  store ptr %162, ptr %161, align 8
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %127, i32 0, i32 3
  %164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %153, i32 0, i32 3
  %165 = load i32, ptr %163, align 4
  store i32 %165, ptr %164, align 4
  call void @set_offset(ptr %153, ptr @IntIterator)
  %166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %153, i32 0, i32 0
  %167 = load ptr, ptr %166, align 8
  %168 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %167, 0
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %153, i32 0, i32 1
  %170 = load ptr, ptr %169, align 8
  %171 = insertvalue { ptr, ptr, ptr, i32 } %168, ptr %170, 1
  %172 = getelementptr { ptr, ptr, ptr, i32 }, ptr %153, i32 0, i32 2
  %173 = load ptr, ptr %172, align 8
  %174 = insertvalue { ptr, ptr, ptr, i32 } %171, ptr %173, 2
  %175 = getelementptr { ptr, ptr, ptr, i32 }, ptr %153, i32 0, i32 3
  %176 = load i32, ptr %175, align 4
  %177 = insertvalue { ptr, ptr, ptr, i32 } %174, i32 %176, 3
  %178 = load ptr, ptr %152, align 8
  %179 = insertvalue { ptr } undef, ptr %178, 0
  %180 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 0
  %181 = load ptr, ptr %180, align 8
  %182 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %181, 0
  %183 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 1
  %184 = load ptr, ptr %183, align 8
  %185 = insertvalue { ptr, ptr, ptr, i32 } %182, ptr %184, 1
  %186 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 2
  %187 = load ptr, ptr %186, align 8
  %188 = insertvalue { ptr, ptr, ptr, i32 } %185, ptr %187, 2
  %189 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 3
  %190 = load i32, ptr %189, align 4
  %191 = insertvalue { ptr, ptr, ptr, i32 } %188, i32 %190, 3
  %192 = alloca [2 x ptr], align 8
  %193 = getelementptr [2 x ptr], ptr %192, i32 0, i32 0
  store ptr @_parameterization_IntIterator, ptr %193, align 8
  %194 = getelementptr [2 x ptr], ptr %192, i32 0, i32 1
  store ptr @_parameterization_FunctionPtri32_to_Ptri1, ptr %194, align 8
  %195 = call ptr @llvm.invariant.start.p0(i64 4, ptr %192)
  %196 = call ptr @llvm.invariant.start.p0(i64 64, ptr %181)
  %197 = getelementptr ptr, ptr %181, i32 %190
  %198 = getelementptr ptr, ptr %197, i32 2
  %199 = load ptr, ptr %198, align 8
  %200 = alloca { ptr, ptr }, align 8
  %201 = getelementptr { ptr, ptr }, ptr %200, i32 0, i32 0
  store ptr %167, ptr %201, align 8
  %202 = getelementptr { ptr, ptr }, ptr %200, i32 0, i32 1
  store ptr @function_typ, ptr %202, align 8
  %203 = call ptr @behavior_wrapper(ptr %199, { ptr, ptr, ptr, i32 } %191, ptr %200)
  call void %203({ ptr, ptr, ptr, i32 } %191, { ptr, ptr, ptr, i32 } %191, ptr %192, { ptr, ptr, ptr, i32 } %177, { ptr } %179)
  %204 = alloca { ptr, ptr, ptr, i32 }, align 8
  %205 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 0
  %206 = getelementptr { ptr, ptr, ptr, i32 }, ptr %204, i32 0, i32 0
  %207 = load ptr, ptr %205, align 8
  store ptr %207, ptr %206, align 8
  %208 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 1
  %209 = getelementptr { ptr, ptr, ptr, i32 }, ptr %204, i32 0, i32 1
  %210 = load ptr, ptr %208, align 8
  store ptr %210, ptr %209, align 8
  %211 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 2
  %212 = getelementptr { ptr, ptr, ptr, i32 }, ptr %204, i32 0, i32 2
  %213 = load ptr, ptr %211, align 8
  store ptr %213, ptr %212, align 8
  %214 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 3
  %215 = getelementptr { ptr, ptr, ptr, i32 }, ptr %204, i32 0, i32 3
  %216 = load i32, ptr %214, align 4
  store i32 %216, ptr %215, align 4
  call void @set_offset(ptr %204, ptr @Iterator)
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %204, i32 0, i32 0
  %218 = load ptr, ptr %217, align 8
  %219 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %218, 0
  %220 = getelementptr { ptr, ptr, ptr, i32 }, ptr %204, i32 0, i32 1
  %221 = load ptr, ptr %220, align 8
  %222 = insertvalue { ptr, ptr, ptr, i32 } %219, ptr %221, 1
  %223 = getelementptr { ptr, ptr, ptr, i32 }, ptr %204, i32 0, i32 2
  %224 = load ptr, ptr %223, align 8
  %225 = insertvalue { ptr, ptr, ptr, i32 } %222, ptr %224, 2
  %226 = getelementptr { ptr, ptr, ptr, i32 }, ptr %204, i32 0, i32 3
  %227 = load i32, ptr %226, align 4
  %228 = insertvalue { ptr, ptr, ptr, i32 } %225, i32 %227, 3
  ret { ptr, ptr, ptr, i32 } %228
}

define { i64, i64 } @_size_FilterIterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %10
  %12 = urem i64 %11, %5
  %13 = icmp eq i64 %12, 0
  %14 = sub i64 %5, %12
  %15 = select i1 %13, i64 0, i64 %14
  %16 = add i64 %11, %15
  %17 = insertvalue { i64, i64 } undef, i64 %16, 0
  %18 = insertvalue { i64, i64 } %17, i64 %5, 1
  ret { i64, i64 } %18
}

define ptr @FilterIterator_B_init_iteratorIntIterator_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -933084275656658555, i64 ptrtoint (ptr @IntIterator to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [8 x ptr], ptr %26, i32 0, i32 4
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @FilterIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [8 x ptr], ptr %4, i32 0, i32 5
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @FilterIterator_init_iteratorIntIterator_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @FilterIterator)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @IntIterator)
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %45 = load ptr, ptr %43, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %48 = load i32, ptr %46, align 4
  store i32 %48, ptr %47, align 4
  call void @set_offset(ptr %36, ptr @IntIterator)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %8, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 64, ptr %51)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = getelementptr ptr, ptr %51, i32 %54
  %56 = load ptr, ptr %55, align 8
  %57 = getelementptr { ptr, ptr }, ptr %56, i32 0, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %63 = load ptr, ptr %62, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %63, 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %66 = load ptr, ptr %65, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %66, 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %69 = load i32, ptr %68, align 4
  %70 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %69, 3
  call void %58(ptr %50, { ptr, ptr, ptr, i32 } %70) #15
  %71 = alloca ptr, align 8
  store { ptr } %4, ptr %71, align 8
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %73 = load ptr, ptr %72, align 8
  %74 = load ptr, ptr %8, align 8
  %75 = call ptr @llvm.invariant.start.p0(i64 64, ptr %74)
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %77 = load i32, ptr %76, align 4
  %78 = getelementptr ptr, ptr %74, i32 %77
  %79 = getelementptr ptr, ptr %78, i32 1
  %80 = load ptr, ptr %79, align 8
  %81 = getelementptr { ptr, ptr }, ptr %80, i32 0, i32 1
  %82 = load ptr, ptr %81, align 8
  %83 = load ptr, ptr %71, align 8
  %84 = insertvalue { ptr } undef, ptr %83, 0
  call void %82(ptr %73, { ptr } %84) #15
  ret void
}

define { ptr, i32 } @FilterIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca ptr, align 8
  %5 = alloca i32, align 4
  %6 = alloca ptr, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = alloca [0 x ptr], align 8
  %9 = alloca {}, align 8
  %10 = alloca { ptr, i32 }, align 8
  %11 = alloca i32, align 4
  %12 = alloca ptr, align 8
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i32 }, align 8
  %.reg2mem1 = alloca { ptr, i32 }, align 8
  %.reg2mem3 = alloca i32, align 4
  %.reg2mem6 = alloca i32, align 4
  %.reg2mem8 = alloca i32, align 4
  %.reg2mem11 = alloca i32, align 4
  %.reg2mem13 = alloca i32, align 4
  %.reg2mem15 = alloca i32, align 4
  %.reg2mem18 = alloca ptr, align 8
  %.reg2mem20 = alloca { ptr, i32 }, align 8
  %.reg2mem22 = alloca i32, align 4
  %.reg2mem24 = alloca i32, align 4
  %.reg2mem26 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %13, align 8
  %14 = call ptr @llvm.invariant.start.p0(i64 16, ptr %13)
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %21 = load ptr, ptr %19, align 8
  store ptr %21, ptr %20, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %27 = load i32, ptr %25, align 4
  store i32 %27, ptr %26, align 4
  call void @set_offset(ptr %15, ptr @FilterIterator)
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %15, align 8
  %31 = call ptr @llvm.invariant.start.p0(i64 64, ptr %30)
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %33 = load i32, ptr %32, align 4
  %34 = getelementptr ptr, ptr %30, i32 %33
  %35 = load ptr, ptr %34, align 8
  %36 = getelementptr { ptr, ptr }, ptr %35, i32 0, i32 0
  %37 = load ptr, ptr %36, align 8
  %38 = call { ptr, ptr, ptr, i32 } %37(ptr %29) #16
  %39 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %38, ptr %39, align 8
  %40 = call ptr @llvm.invariant.start.p0(i64 16, ptr %39)
  call void @assume_offset(ptr %39, ptr @IntIterator)
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 0
  %42 = load ptr, ptr %41, align 8
  %43 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %42, 0
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 1
  %45 = load ptr, ptr %44, align 8
  %46 = insertvalue { ptr, ptr, ptr, i32 } %43, ptr %45, 1
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 2
  %48 = load ptr, ptr %47, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } %46, ptr %48, 2
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 3
  %51 = load i32, ptr %50, align 4
  %52 = insertvalue { ptr, ptr, ptr, i32 } %49, i32 %51, 3
  %53 = alloca [0 x ptr], align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 0, ptr %53)
  %55 = call ptr @llvm.invariant.start.p0(i64 16, ptr %42)
  %56 = getelementptr ptr, ptr %42, i32 %51
  %57 = load ptr, ptr %56, align 8
  %58 = alloca {}, align 8
  %59 = call ptr @behavior_wrapper(ptr %57, { ptr, ptr, ptr, i32 } %52, ptr %58)
  %60 = call { ptr, i32 } %59({ ptr, ptr, ptr, i32 } %52, { ptr, ptr, ptr, i32 } %52, ptr %53)
  %61 = alloca { ptr, i32 }, align 8
  store { ptr, i32 } %60, ptr %61, align 8
  %62 = getelementptr { ptr, i32 }, ptr %61, i32 0, i32 0
  store ptr %62, ptr %.reg2mem18, align 8
  br label %63

63:                                               ; preds = %133, %3
  %.reload19 = load ptr, ptr %.reg2mem18, align 8
  %64 = load ptr, ptr %.reload19, align 8
  %65 = ptrtoint ptr %64 to i64
  %66 = icmp eq i64 %65, ptrtoint (ptr @nil_typ to i64)
  %67 = icmp eq i64 %65, 0
  %68 = or i1 %66, %67
  %69 = icmp eq i1 %68, false
  br i1 %69, label %70, label %129

70:                                               ; preds = %63
  %71 = getelementptr { ptr, i32 }, ptr %61, i32 0, i32 1
  %72 = load i32, ptr %71, align 4
  store i32 %72, ptr %.reg2mem15, align 4
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %74 = load ptr, ptr %73, align 8
  %75 = load ptr, ptr %15, align 8
  %76 = call ptr @llvm.invariant.start.p0(i64 64, ptr %75)
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %78 = load i32, ptr %77, align 4
  %79 = getelementptr ptr, ptr %75, i32 %78
  %80 = getelementptr ptr, ptr %79, i32 1
  %81 = load ptr, ptr %80, align 8
  %82 = getelementptr { ptr, ptr }, ptr %81, i32 0, i32 0
  %83 = load ptr, ptr %82, align 8
  %84 = call { ptr } %83(ptr %74) #16
  store { ptr } %84, ptr %4, align 8
  %85 = load ptr, ptr %4, align 8
  %.reload17 = load i32, ptr %.reg2mem15, align 4
  %86 = call i1 %85(i32 %.reload17)
  %87 = zext i1 %86 to i32
  store i32 %87, ptr %.reg2mem13, align 4
  %88 = xor i1 %86, true
  %89 = zext i1 %88 to i32
  store i32 %89, ptr %.reg2mem11, align 4
  br i1 %86, label %90, label %91

90:                                               ; preds = %70
  br label %128

91:                                               ; preds = %70
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %93 = load ptr, ptr %92, align 8
  %94 = load ptr, ptr %15, align 8
  %95 = call ptr @llvm.invariant.start.p0(i64 64, ptr %94)
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %97 = load i32, ptr %96, align 4
  %98 = getelementptr ptr, ptr %94, i32 %97
  %99 = load ptr, ptr %98, align 8
  %100 = getelementptr { ptr, ptr }, ptr %99, i32 0, i32 0
  %101 = load ptr, ptr %100, align 8
  %102 = call { ptr, ptr, ptr, i32 } %101(ptr %93) #16
  store { ptr, ptr, ptr, i32 } %102, ptr %7, align 8
  %103 = call ptr @llvm.invariant.start.p0(i64 16, ptr %7)
  call void @assume_offset(ptr %7, ptr @IntIterator)
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %105 = load ptr, ptr %104, align 8
  %106 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %105, 0
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %108 = load ptr, ptr %107, align 8
  %109 = insertvalue { ptr, ptr, ptr, i32 } %106, ptr %108, 1
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %111 = load ptr, ptr %110, align 8
  %112 = insertvalue { ptr, ptr, ptr, i32 } %109, ptr %111, 2
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %114 = load i32, ptr %113, align 4
  %115 = insertvalue { ptr, ptr, ptr, i32 } %112, i32 %114, 3
  %116 = call ptr @llvm.invariant.start.p0(i64 0, ptr %8)
  %117 = call ptr @llvm.invariant.start.p0(i64 16, ptr %105)
  %118 = getelementptr ptr, ptr %105, i32 %114
  %119 = load ptr, ptr %118, align 8
  %120 = call ptr @behavior_wrapper(ptr %119, { ptr, ptr, ptr, i32 } %115, ptr %9)
  %121 = call { ptr, i32 } %120({ ptr, ptr, ptr, i32 } %115, { ptr, ptr, ptr, i32 } %115, ptr %8)
  store { ptr, i32 } %121, ptr %10, align 8
  %122 = getelementptr { ptr, i32 }, ptr %10, i32 0, i32 0
  %123 = getelementptr { ptr, i32 }, ptr %61, i32 0, i32 0
  %124 = load ptr, ptr %122, align 8
  store ptr %124, ptr %123, align 8
  %125 = getelementptr { ptr, i32 }, ptr %10, i32 0, i32 1
  %126 = getelementptr { ptr, i32 }, ptr %61, i32 0, i32 1
  %127 = load i32, ptr %125, align 4
  store i32 %127, ptr %126, align 4
  br label %128

128:                                              ; preds = %91, %90
  %.reload12 = load i32, ptr %.reg2mem11, align 4
  %.reload14 = load i32, ptr %.reg2mem13, align 4
  %.reload16 = load i32, ptr %.reg2mem15, align 4
  store i32 %.reload16, ptr %.reg2mem22, align 4
  store i32 %.reload12, ptr %.reg2mem24, align 4
  store i32 %.reload14, ptr %.reg2mem26, align 4
  br label %130

129:                                              ; preds = %63
  store i32 poison, ptr %.reg2mem22, align 4
  store i32 0, ptr %.reg2mem24, align 4
  store i32 2, ptr %.reg2mem26, align 4
  br label %130

130:                                              ; preds = %129, %128
  %.reload27 = load i32, ptr %.reg2mem26, align 4
  %.reload25 = load i32, ptr %.reg2mem24, align 4
  %.reload23 = load i32, ptr %.reg2mem22, align 4
  store i32 %.reload27, ptr %.reg2mem8, align 4
  store i32 %.reload25, ptr %.reg2mem6, align 4
  store i32 %.reload23, ptr %.reg2mem3, align 4
  br label %131

131:                                              ; preds = %130
  %.reload7 = load i32, ptr %.reg2mem6, align 4
  %132 = trunc i32 %.reload7 to i1
  %.reload5 = load i32, ptr %.reg2mem3, align 4
  %.reload10 = load i32, ptr %.reg2mem8, align 4
  br i1 %132, label %133, label %134

133:                                              ; preds = %131
  br label %63

134:                                              ; preds = %131
  %.reload9 = load i32, ptr %.reg2mem8, align 4
  %135 = zext i32 %.reload9 to i64
  %136 = trunc i64 %135 to i32
  switch i32 %136, label %142 [
    i32 1, label %137
  ]

137:                                              ; preds = %134
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  store i32 %.reload4, ptr %5, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %6, align 4
  %138 = load ptr, ptr %6, align 8
  %139 = insertvalue { ptr, i32 } undef, ptr %138, 0
  %140 = load i32, ptr %5, align 4
  %141 = insertvalue { ptr, i32 } %139, i32 %140, 1
  store { ptr, i32 } %141, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i32 }, ptr %.reg2mem1, align 8
  store { ptr, i32 } %.reload2, ptr %.reg2mem20, align 8
  br label %147

142:                                              ; preds = %134
  store [0 x i8] undef, ptr %11, align 1
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %12, align 4
  %143 = load ptr, ptr %12, align 8
  %144 = insertvalue { ptr, i32 } undef, ptr %143, 0
  %145 = load i32, ptr %11, align 4
  %146 = insertvalue { ptr, i32 } %144, i32 %145, 1
  store { ptr, i32 } %146, ptr %.reg2mem, align 8
  %.reload = load { ptr, i32 }, ptr %.reg2mem, align 8
  store { ptr, i32 } %.reload, ptr %.reg2mem20, align 8
  br label %147

147:                                              ; preds = %142, %137
  %.reload21 = load { ptr, i32 }, ptr %.reg2mem20, align 8
  ret { ptr, i32 } %.reload21
}

define { ptr } @FilterIterator_getter_f(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr } undef, ptr %9, 0
  ret { ptr } %10
}

define void @FilterIterator_setter_f(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca ptr, align 8
  store { ptr } %1, ptr %9, align 8
  %10 = getelementptr { ptr }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  ret void
}

define { ptr, ptr, ptr, i32 } @FilterIterator_getter_iterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @FilterIterator_setter_iterator(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  ret void
}

define { ptr } @FilterIterable_getter_f(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr } undef, ptr %9, 0
  ret { ptr } %10
}

define void @FilterIterable_setter_f(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca ptr, align 8
  store { ptr } %1, ptr %9, align 8
  %10 = getelementptr { ptr }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  ret void
}

define { ptr, ptr, ptr, i32 } @FilterIterable_getter_iterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @FilterIterable_setter_iterable(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  ret void
}

define { ptr } @MapIterable_getter_f(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr } undef, ptr %9, 0
  ret { ptr } %10
}

define void @MapIterable_setter_f(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca ptr, align 8
  store { ptr } %1, ptr %9, align 8
  %10 = getelementptr { ptr }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  ret void
}

define { ptr, ptr, ptr, i32 } @MapIterable_getter_iterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @MapIterable_setter_iterable(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  ret void
}

define { i64, i64 } @_size_Range(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @Range_B_init_endPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [57 x ptr], ptr %15, i32 0, i32 17
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Range_B_init_startPtri32_endPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [57 x ptr], ptr %26, i32 0, i32 18
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @Range_B_step_stepPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [57 x ptr], ptr %15, i32 0, i32 19
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Range_B_each_fFunctionPtri32_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [57 x ptr], ptr %15, i32 0, i32 20
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Range_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [57 x ptr], ptr %26, i32 0, i32 21
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @Range_B_all_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [57 x ptr], ptr %15, i32 0, i32 22
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Range_B_any_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [57 x ptr], ptr %15, i32 0, i32 23
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Range_B_map_fFunctionPtri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [57 x ptr], ptr %15, i32 0, i32 24
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Range_B_filter_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [57 x ptr], ptr %15, i32 0, i32 25
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Range_B_chain_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [57 x ptr], ptr %15, i32 0, i32 26
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Range_B_interleave_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [57 x ptr], ptr %15, i32 0, i32 27
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Range_B_zip_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [57 x ptr], ptr %15, i32 0, i32 28
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Range_B_product_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [57 x ptr], ptr %15, i32 0, i32 29
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Range_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [57 x ptr], ptr %4, i32 0, i32 30
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @Range_init_endPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Range)
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %21 = load ptr, ptr %20, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 456, ptr %22)
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %25 = load i32, ptr %24, align 4
  %26 = getelementptr ptr, ptr %22, i32 %25
  %27 = getelementptr ptr, ptr %26, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr { ptr, ptr }, ptr %28, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  call void %30(ptr %21, i32 %3) #15
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %32 = load ptr, ptr %31, align 8
  %33 = load ptr, ptr %7, align 8
  %34 = call ptr @llvm.invariant.start.p0(i64 456, ptr %33)
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %36 = load i32, ptr %35, align 4
  %37 = getelementptr ptr, ptr %33, i32 %36
  %38 = load ptr, ptr %37, align 8
  %39 = getelementptr { ptr, ptr }, ptr %38, i32 0, i32 1
  %40 = load ptr, ptr %39, align 8
  call void %40(ptr %32, i32 0) #15
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %42 = load ptr, ptr %41, align 8
  %43 = load ptr, ptr %7, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 456, ptr %43)
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %46 = load i32, ptr %45, align 4
  %47 = getelementptr ptr, ptr %43, i32 %46
  %48 = getelementptr ptr, ptr %47, i32 2
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr { ptr, ptr }, ptr %49, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  call void %51(ptr %42, i32 1) #15
  ret void
}

define void @Range_init_startPtri32_endPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3, i32 %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @Range)
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %22 = load ptr, ptr %21, align 8
  %23 = load ptr, ptr %8, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 456, ptr %23)
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %26 = load i32, ptr %25, align 4
  %27 = getelementptr ptr, ptr %23, i32 %26
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr { ptr, ptr }, ptr %28, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  call void %30(ptr %22, i32 %3) #15
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %32 = load ptr, ptr %31, align 8
  %33 = load ptr, ptr %8, align 8
  %34 = call ptr @llvm.invariant.start.p0(i64 456, ptr %33)
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %36 = load i32, ptr %35, align 4
  %37 = getelementptr ptr, ptr %33, i32 %36
  %38 = getelementptr ptr, ptr %37, i32 1
  %39 = load ptr, ptr %38, align 8
  %40 = getelementptr { ptr, ptr }, ptr %39, i32 0, i32 1
  %41 = load ptr, ptr %40, align 8
  call void %41(ptr %32, i32 %4) #15
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %43 = load ptr, ptr %42, align 8
  %44 = load ptr, ptr %8, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 456, ptr %44)
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %47 = load i32, ptr %46, align 4
  %48 = getelementptr ptr, ptr %44, i32 %47
  %49 = getelementptr ptr, ptr %48, i32 2
  %50 = load ptr, ptr %49, align 8
  %51 = getelementptr { ptr, ptr }, ptr %50, i32 0, i32 1
  %52 = load ptr, ptr %51, align 8
  call void %52(ptr %43, i32 1) #15
  ret void
}

define { ptr, ptr, ptr, i32 } @Range_step_stepPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Range)
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %21 = load ptr, ptr %20, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 456, ptr %22)
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %25 = load i32, ptr %24, align 4
  %26 = getelementptr ptr, ptr %22, i32 %25
  %27 = getelementptr ptr, ptr %26, i32 2
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr { ptr, ptr }, ptr %28, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  call void %30(ptr %21, i32 %3) #15
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %34 = load ptr, ptr %32, align 8
  store ptr %34, ptr %33, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  %37 = load ptr, ptr %35, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %40 = load ptr, ptr %38, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  %43 = load i32, ptr %41, align 4
  store i32 %43, ptr %42, align 4
  call void @set_offset(ptr %31, ptr @Range)
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %45 = load ptr, ptr %44, align 8
  %46 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %45, 0
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  %48 = load ptr, ptr %47, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } %46, ptr %48, 1
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %51 = load ptr, ptr %50, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } %49, ptr %51, 2
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = insertvalue { ptr, ptr, ptr, i32 } %52, i32 %54, 3
  ret { ptr, ptr, ptr, i32 } %55
}

define { ptr, ptr, ptr, i32 } @Range_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Range)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 456, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 0
  %28 = load ptr, ptr %27, align 8
  %29 = call i32 %28(ptr %20) #16
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %31 = load ptr, ptr %30, align 8
  %32 = load ptr, ptr %6, align 8
  %33 = call ptr @llvm.invariant.start.p0(i64 456, ptr %32)
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %35 = load i32, ptr %34, align 4
  %36 = getelementptr ptr, ptr %32, i32 %35
  %37 = getelementptr ptr, ptr %36, i32 1
  %38 = load ptr, ptr %37, align 8
  %39 = getelementptr { ptr, ptr }, ptr %38, i32 0, i32 0
  %40 = load ptr, ptr %39, align 8
  %41 = call i32 %40(ptr %31) #16
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %43 = load ptr, ptr %42, align 8
  %44 = load ptr, ptr %6, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 456, ptr %44)
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %47 = load i32, ptr %46, align 4
  %48 = getelementptr ptr, ptr %44, i32 %47
  %49 = getelementptr ptr, ptr %48, i32 2
  %50 = load ptr, ptr %49, align 8
  %51 = getelementptr { ptr, ptr }, ptr %50, i32 0, i32 0
  %52 = load ptr, ptr %51, align 8
  %53 = call i32 %52(ptr %43) #16
  %54 = alloca [1 x ptr], align 8
  store ptr @RangeIterator, ptr %54, align 8
  %55 = load ptr, ptr %54, align 8
  %56 = getelementptr ptr, ptr %55, i32 6
  %57 = load ptr, ptr %56, align 8
  %58 = call { i64, i64 } @size_wrapper(ptr %57, ptr %54)
  %59 = extractvalue { i64, i64 } %58, 0
  %60 = call ptr @bump_malloc(i64 %59)
  %61 = alloca { ptr, ptr, ptr, i32 }, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 1
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 3
  store ptr @RangeIterator, ptr %61, align 8
  store ptr %60, ptr %62, align 8
  store i32 9, ptr %63, align 4
  %64 = call ptr @llvm.invariant.start.p0(i64 16, ptr %61)
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %66 = load ptr, ptr %65, align 8
  %67 = load ptr, ptr %6, align 8
  %68 = call ptr @llvm.invariant.start.p0(i64 456, ptr %67)
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %70 = load i32, ptr %69, align 4
  %71 = getelementptr ptr, ptr %67, i32 %70
  %72 = load ptr, ptr %71, align 8
  %73 = getelementptr { ptr, ptr }, ptr %72, i32 0, i32 0
  %74 = load ptr, ptr %73, align 8
  %75 = call i32 %74(ptr %66) #16
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %77 = load ptr, ptr %76, align 8
  %78 = load ptr, ptr %6, align 8
  %79 = call ptr @llvm.invariant.start.p0(i64 456, ptr %78)
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %81 = load i32, ptr %80, align 4
  %82 = getelementptr ptr, ptr %78, i32 %81
  %83 = getelementptr ptr, ptr %82, i32 1
  %84 = load ptr, ptr %83, align 8
  %85 = getelementptr { ptr, ptr }, ptr %84, i32 0, i32 0
  %86 = load ptr, ptr %85, align 8
  %87 = call i32 %86(ptr %77) #16
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %89 = load ptr, ptr %88, align 8
  %90 = load ptr, ptr %6, align 8
  %91 = call ptr @llvm.invariant.start.p0(i64 456, ptr %90)
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %93 = load i32, ptr %92, align 4
  %94 = getelementptr ptr, ptr %90, i32 %93
  %95 = getelementptr ptr, ptr %94, i32 2
  %96 = load ptr, ptr %95, align 8
  %97 = getelementptr { ptr, ptr }, ptr %96, i32 0, i32 0
  %98 = load ptr, ptr %97, align 8
  %99 = call i32 %98(ptr %89) #16
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 0
  %101 = load ptr, ptr %100, align 8
  %102 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %101, 0
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 1
  %104 = load ptr, ptr %103, align 8
  %105 = insertvalue { ptr, ptr, ptr, i32 } %102, ptr %104, 1
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 2
  %107 = load ptr, ptr %106, align 8
  %108 = insertvalue { ptr, ptr, ptr, i32 } %105, ptr %107, 2
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 3
  %110 = load i32, ptr %109, align 4
  %111 = insertvalue { ptr, ptr, ptr, i32 } %108, i32 %110, 3
  %112 = alloca [3 x ptr], align 8
  %113 = getelementptr [3 x ptr], ptr %112, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %113, align 8
  %114 = getelementptr [3 x ptr], ptr %112, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %114, align 8
  %115 = getelementptr [3 x ptr], ptr %112, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %115, align 8
  %116 = call ptr @llvm.invariant.start.p0(i64 9, ptr %112)
  %117 = call ptr @llvm.invariant.start.p0(i64 72, ptr %101)
  %118 = getelementptr ptr, ptr %101, i32 %110
  %119 = getelementptr ptr, ptr %118, i32 3
  %120 = load ptr, ptr %119, align 8
  %121 = alloca { ptr, ptr, ptr }, align 8
  %122 = getelementptr { ptr, ptr, ptr }, ptr %121, i32 0, i32 0
  store ptr @i32_typ, ptr %122, align 8
  %123 = getelementptr { ptr, ptr, ptr }, ptr %121, i32 0, i32 1
  store ptr @i32_typ, ptr %123, align 8
  %124 = getelementptr { ptr, ptr, ptr }, ptr %121, i32 0, i32 2
  store ptr @i32_typ, ptr %124, align 8
  %125 = call ptr @behavior_wrapper(ptr %120, { ptr, ptr, ptr, i32 } %111, ptr %121)
  call void %125({ ptr, ptr, ptr, i32 } %111, { ptr, ptr, ptr, i32 } %111, ptr %112, i32 %75, i32 %87, i32 %99)
  %126 = alloca { ptr, ptr, ptr, i32 }, align 8
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 0
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %126, i32 0, i32 0
  %129 = load ptr, ptr %127, align 8
  store ptr %129, ptr %128, align 8
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 1
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %126, i32 0, i32 1
  %132 = load ptr, ptr %130, align 8
  store ptr %132, ptr %131, align 8
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 2
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %126, i32 0, i32 2
  %135 = load ptr, ptr %133, align 8
  store ptr %135, ptr %134, align 8
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 3
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %126, i32 0, i32 3
  %138 = load i32, ptr %136, align 4
  store i32 %138, ptr %137, align 4
  call void @set_offset(ptr %126, ptr @Iterator)
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %126, i32 0, i32 0
  %140 = load ptr, ptr %139, align 8
  %141 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %140, 0
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %126, i32 0, i32 1
  %143 = load ptr, ptr %142, align 8
  %144 = insertvalue { ptr, ptr, ptr, i32 } %141, ptr %143, 1
  %145 = getelementptr { ptr, ptr, ptr, i32 }, ptr %126, i32 0, i32 2
  %146 = load ptr, ptr %145, align 8
  %147 = insertvalue { ptr, ptr, ptr, i32 } %144, ptr %146, 2
  %148 = getelementptr { ptr, ptr, ptr, i32 }, ptr %126, i32 0, i32 3
  %149 = load i32, ptr %148, align 4
  %150 = insertvalue { ptr, ptr, ptr, i32 } %147, i32 %149, 3
  ret { ptr, ptr, ptr, i32 } %150
}

define { i64, i64 } @_size_RangeIterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @RangeIterator_B_init_counterPtri32_endPtri32_stepPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1)
  %4 = getelementptr { ptr, ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %24)
  %26 = getelementptr { ptr, ptr, ptr }, ptr %1, i32 0, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr ptr, ptr %27, i32 1
  %29 = getelementptr ptr, ptr %27, i32 2
  %30 = getelementptr ptr, ptr %27, i32 3
  %31 = getelementptr ptr, ptr %27, i32 4
  %32 = load i64, ptr %28, align 4
  %33 = load i64, ptr %29, align 4
  %34 = load ptr, ptr %30, align 8
  %35 = load ptr, ptr %31, align 8
  %36 = call i1 @subtype_test_wrapper(ptr %34, i64 %33, i64 %32, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %35)
  %37 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %38 = getelementptr [9 x ptr], ptr %37, i32 0, i32 5
  %39 = getelementptr ptr, ptr %38, i32 9
  %40 = load ptr, ptr %39, align 8
  ret ptr %40
}

define ptr @RangeIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [9 x ptr], ptr %4, i32 0, i32 6
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @RangeIterator_init_counterPtri32_endPtri32_stepPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3, i32 %4, i32 %5) {
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %7, align 8
  %8 = call ptr @llvm.invariant.start.p0(i64 16, ptr %7)
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  call void @set_offset(ptr %9, ptr @RangeIterator)
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %23 = load ptr, ptr %22, align 8
  %24 = load ptr, ptr %9, align 8
  %25 = call ptr @llvm.invariant.start.p0(i64 72, ptr %24)
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %27 = load i32, ptr %26, align 4
  %28 = getelementptr ptr, ptr %24, i32 %27
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr { ptr, ptr }, ptr %29, i32 0, i32 1
  %31 = load ptr, ptr %30, align 8
  call void %31(ptr %23, i32 %3) #15
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %33 = load ptr, ptr %32, align 8
  %34 = load ptr, ptr %9, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 72, ptr %34)
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %37 = load i32, ptr %36, align 4
  %38 = getelementptr ptr, ptr %34, i32 %37
  %39 = getelementptr ptr, ptr %38, i32 1
  %40 = load ptr, ptr %39, align 8
  %41 = getelementptr { ptr, ptr }, ptr %40, i32 0, i32 1
  %42 = load ptr, ptr %41, align 8
  call void %42(ptr %33, i32 %4) #15
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %44 = load ptr, ptr %43, align 8
  %45 = load ptr, ptr %9, align 8
  %46 = call ptr @llvm.invariant.start.p0(i64 72, ptr %45)
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %48 = load i32, ptr %47, align 4
  %49 = getelementptr ptr, ptr %45, i32 %48
  %50 = getelementptr ptr, ptr %49, i32 2
  %51 = load ptr, ptr %50, align 8
  %52 = getelementptr { ptr, ptr }, ptr %51, i32 0, i32 1
  %53 = load ptr, ptr %52, align 8
  call void %53(ptr %44, i32 %5) #15
  ret void
}

define { ptr, i32 } @RangeIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i32, align 4
  %5 = alloca ptr, align 8
  %6 = alloca i32, align 4
  %7 = alloca ptr, align 8
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i32 }, align 8
  %.reg2mem1 = alloca { ptr, i32 }, align 8
  %.reg2mem3 = alloca { ptr, i32 }, align 8
  %.reg2mem5 = alloca { ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %8, align 8
  %9 = call ptr @llvm.invariant.start.p0(i64 16, ptr %8)
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 0
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 2
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  %22 = load i32, ptr %20, align 4
  store i32 %22, ptr %21, align 4
  call void @set_offset(ptr %10, ptr @RangeIterator)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = load ptr, ptr %10, align 8
  %26 = call ptr @llvm.invariant.start.p0(i64 72, ptr %25)
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  %28 = load i32, ptr %27, align 4
  %29 = getelementptr ptr, ptr %25, i32 %28
  %30 = load ptr, ptr %29, align 8
  %31 = getelementptr { ptr, ptr }, ptr %30, i32 0, i32 0
  %32 = load ptr, ptr %31, align 8
  %33 = call i32 %32(ptr %24) #16
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %35 = load ptr, ptr %34, align 8
  %36 = load ptr, ptr %10, align 8
  %37 = call ptr @llvm.invariant.start.p0(i64 72, ptr %36)
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  %39 = load i32, ptr %38, align 4
  %40 = getelementptr ptr, ptr %36, i32 %39
  %41 = getelementptr ptr, ptr %40, i32 1
  %42 = load ptr, ptr %41, align 8
  %43 = getelementptr { ptr, ptr }, ptr %42, i32 0, i32 0
  %44 = load ptr, ptr %43, align 8
  %45 = call i32 %44(ptr %35) #16
  %46 = icmp sgt i32 %33, %45
  br i1 %46, label %47, label %52

47:                                               ; preds = %3
  store [0 x i8] undef, ptr %4, align 1
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %5, align 4
  %48 = load ptr, ptr %5, align 8
  %49 = insertvalue { ptr, i32 } undef, ptr %48, 0
  %50 = load i32, ptr %4, align 4
  %51 = insertvalue { ptr, i32 } %49, i32 %50, 1
  store { ptr, i32 } %51, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i32 }, ptr %.reg2mem3, align 8
  store { ptr, i32 } %.reload4, ptr %.reg2mem5, align 8
  br label %115

52:                                               ; preds = %3
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %54 = load ptr, ptr %53, align 8
  %55 = load ptr, ptr %10, align 8
  %56 = call ptr @llvm.invariant.start.p0(i64 72, ptr %55)
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  %58 = load i32, ptr %57, align 4
  %59 = getelementptr ptr, ptr %55, i32 %58
  %60 = load ptr, ptr %59, align 8
  %61 = getelementptr { ptr, ptr }, ptr %60, i32 0, i32 0
  %62 = load ptr, ptr %61, align 8
  %63 = call i32 %62(ptr %54) #16
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %65 = load ptr, ptr %64, align 8
  %66 = load ptr, ptr %10, align 8
  %67 = call ptr @llvm.invariant.start.p0(i64 72, ptr %66)
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  %69 = load i32, ptr %68, align 4
  %70 = getelementptr ptr, ptr %66, i32 %69
  %71 = getelementptr ptr, ptr %70, i32 2
  %72 = load ptr, ptr %71, align 8
  %73 = getelementptr { ptr, ptr }, ptr %72, i32 0, i32 0
  %74 = load ptr, ptr %73, align 8
  %75 = call i32 %74(ptr %65) #16
  %76 = add i32 %63, %75
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %78 = load ptr, ptr %77, align 8
  %79 = load ptr, ptr %10, align 8
  %80 = call ptr @llvm.invariant.start.p0(i64 72, ptr %79)
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  %82 = load i32, ptr %81, align 4
  %83 = getelementptr ptr, ptr %79, i32 %82
  %84 = load ptr, ptr %83, align 8
  %85 = getelementptr { ptr, ptr }, ptr %84, i32 0, i32 1
  %86 = load ptr, ptr %85, align 8
  call void %86(ptr %78, i32 %76) #15
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %88 = load ptr, ptr %87, align 8
  %89 = load ptr, ptr %10, align 8
  %90 = call ptr @llvm.invariant.start.p0(i64 72, ptr %89)
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  %92 = load i32, ptr %91, align 4
  %93 = getelementptr ptr, ptr %89, i32 %92
  %94 = load ptr, ptr %93, align 8
  %95 = getelementptr { ptr, ptr }, ptr %94, i32 0, i32 0
  %96 = load ptr, ptr %95, align 8
  %97 = call i32 %96(ptr %88) #16
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %99 = load ptr, ptr %98, align 8
  %100 = load ptr, ptr %10, align 8
  %101 = call ptr @llvm.invariant.start.p0(i64 72, ptr %100)
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  %103 = load i32, ptr %102, align 4
  %104 = getelementptr ptr, ptr %100, i32 %103
  %105 = getelementptr ptr, ptr %104, i32 2
  %106 = load ptr, ptr %105, align 8
  %107 = getelementptr { ptr, ptr }, ptr %106, i32 0, i32 0
  %108 = load ptr, ptr %107, align 8
  %109 = call i32 %108(ptr %99) #16
  %110 = sub i32 %97, %109
  store i32 %110, ptr %6, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %7, align 4
  %111 = load ptr, ptr %7, align 8
  %112 = insertvalue { ptr, i32 } undef, ptr %111, 0
  %113 = load i32, ptr %6, align 4
  %114 = insertvalue { ptr, i32 } %112, i32 %113, 1
  store { ptr, i32 } %114, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i32 }, ptr %.reg2mem1, align 8
  store { ptr, i32 } %.reload2, ptr %.reg2mem5, align 8
  br label %115

115:                                              ; preds = %52, %47
  %.reload6 = load { ptr, i32 }, ptr %.reg2mem5, align 8
  store { ptr, i32 } %.reload6, ptr %.reg2mem, align 8
  br label %116

116:                                              ; preds = %115
  %.reload = load { ptr, i32 }, ptr %.reg2mem, align 8
  ret { ptr, i32 } %.reload
}

define i32 @RangeIterator_getter_step(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = load i32, ptr %13, align 4
  ret i32 %14
}

define void @RangeIterator_setter_step(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  store i32 %1, ptr %14, align 4
  ret void
}

define i32 @RangeIterator_getter_end(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = load i32, ptr %7, align 4
  ret i32 %8
}

define void @RangeIterator_setter_end(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  store i32 %1, ptr %8, align 4
  ret void
}

define i32 @RangeIterator_getter_counter(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @RangeIterator_setter_counter(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  store i32 %1, ptr %3, align 4
  ret void
}

define i32 @Range_getter_step(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = load i32, ptr %13, align 4
  ret i32 %14
}

define void @Range_setter_step(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  store i32 %1, ptr %14, align 4
  ret void
}

define i32 @Range_getter_end(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = load i32, ptr %7, align 4
  ret i32 %8
}

define void @Range_setter_end(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  store i32 %1, ptr %8, align 4
  ret void
}

define i32 @Range_getter_start(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @Range_setter_start(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  store i32 %1, ptr %3, align 4
  ret void
}

define { i64, i64 } @_size_OutOfBoundsDetails(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %10
  %12 = urem i64 %11, %5
  %13 = icmp eq i64 %12, 0
  %14 = sub i64 %5, %12
  %15 = select i1 %13, i64 0, i64 %14
  %16 = add i64 %11, %15
  %17 = insertvalue { i64, i64 } undef, i64 %16, 0
  %18 = insertvalue { i64, i64 } %17, i64 %5, 1
  ret { i64, i64 } %18
}

define ptr @OutOfBoundsDetails_B_init_boundsPtri32_indexPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [6 x ptr], ptr %26, i32 0, i32 4
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @OutOfBoundsDetails_B_report_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [6 x ptr], ptr %4, i32 0, i32 5
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @OutOfBoundsDetails_init_boundsPtri32_indexPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3, i32 %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @OutOfBoundsDetails)
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %22 = load ptr, ptr %21, align 8
  %23 = load ptr, ptr %8, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 48, ptr %23)
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %26 = load i32, ptr %25, align 4
  %27 = getelementptr ptr, ptr %23, i32 %26
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr { ptr, ptr }, ptr %28, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  call void %30(ptr %22, i32 %3) #15
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %32 = load ptr, ptr %31, align 8
  %33 = load ptr, ptr %8, align 8
  %34 = call ptr @llvm.invariant.start.p0(i64 48, ptr %33)
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %36 = load i32, ptr %35, align 4
  %37 = getelementptr ptr, ptr %33, i32 %36
  %38 = getelementptr ptr, ptr %37, i32 1
  %39 = load ptr, ptr %38, align 8
  %40 = getelementptr { ptr, ptr }, ptr %39, i32 0, i32 1
  %41 = load ptr, ptr %40, align 8
  call void %41(ptr %32, i32 %4) #15
  ret void
}

define void @OutOfBoundsDetails_report_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @OutOfBoundsDetails)
  %19 = alloca ptr, align 8
  %20 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 45))
  store ptr %20, ptr %19, align 8
  %21 = alloca { ptr }, align 8
  %22 = getelementptr { ptr }, ptr %19, i32 0, i32 0
  %23 = getelementptr { ptr }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %26 = load ptr, ptr %21, align 8
  %27 = load [44 x i8], ptr @dobxp_The_size_of_the_collection_being_indexed_was, align 1
  store [44 x i8] %27, ptr %26, align 1
  %28 = alloca [1 x ptr], align 8
  store ptr @String, ptr %28, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr ptr, ptr %29, i32 6
  %31 = load ptr, ptr %30, align 8
  %32 = call { i64, i64 } @size_wrapper(ptr %31, ptr %28)
  %33 = extractvalue { i64, i64 } %32, 0
  %34 = call ptr @bump_malloc(i64 %33)
  %35 = alloca { ptr, ptr, ptr, i32 }, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  store ptr @String, ptr %35, align 8
  store ptr %34, ptr %36, align 8
  store i32 9, ptr %37, align 4
  %38 = call ptr @llvm.invariant.start.p0(i64 16, ptr %35)
  %39 = getelementptr { ptr }, ptr %21, i32 0, i32 0
  %40 = load ptr, ptr %39, align 8
  %41 = insertvalue { ptr } undef, ptr %40, 0
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %43 = load ptr, ptr %42, align 8
  %44 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %43, 0
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %46 = load ptr, ptr %45, align 8
  %47 = insertvalue { ptr, ptr, ptr, i32 } %44, ptr %46, 1
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %49 = load ptr, ptr %48, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } %47, ptr %49, 2
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %52 = load i32, ptr %51, align 4
  %53 = insertvalue { ptr, ptr, ptr, i32 } %50, i32 %52, 3
  %54 = alloca [3 x ptr], align 8
  %55 = getelementptr [3 x ptr], ptr %54, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %55, align 8
  %56 = getelementptr [3 x ptr], ptr %54, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %56, align 8
  %57 = getelementptr [3 x ptr], ptr %54, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %57, align 8
  %58 = call ptr @llvm.invariant.start.p0(i64 9, ptr %54)
  %59 = call ptr @llvm.invariant.start.p0(i64 280, ptr %43)
  %60 = getelementptr ptr, ptr %43, i32 %52
  %61 = getelementptr ptr, ptr %60, i32 4
  %62 = load ptr, ptr %61, align 8
  %63 = alloca { ptr, ptr, ptr }, align 8
  %64 = getelementptr { ptr, ptr, ptr }, ptr %63, i32 0, i32 0
  store ptr @buffer_typ, ptr %64, align 8
  %65 = getelementptr { ptr, ptr, ptr }, ptr %63, i32 0, i32 1
  store ptr @i32_typ, ptr %65, align 8
  %66 = getelementptr { ptr, ptr, ptr }, ptr %63, i32 0, i32 2
  store ptr @i32_typ, ptr %66, align 8
  %67 = call ptr @behavior_wrapper(ptr %62, { ptr, ptr, ptr, i32 } %53, ptr %63)
  call void %67({ ptr, ptr, ptr, i32 } %53, { ptr, ptr, ptr, i32 } %53, ptr %54, { ptr } %41, i32 44, i32 45)
  %68 = getelementptr { ptr, i160 }, ptr %35, i32 0, i32 0
  %69 = load ptr, ptr %68, align 8
  %70 = insertvalue { ptr, i160 } undef, ptr %69, 0
  %71 = getelementptr { ptr, i160 }, ptr %35, i32 0, i32 1
  %72 = load i160, ptr %71, align 4
  %73 = insertvalue { ptr, i160 } %70, i160 %72, 1
  %74 = alloca [1 x ptr], align 8
  %75 = getelementptr [1 x ptr], ptr %74, i32 0, i32 0
  store ptr @_parameterization_String, ptr %75, align 8
  %76 = call ptr @llvm.invariant.start.p0(i64 1, ptr %74)
  %77 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %78 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %79 = alloca { ptr }, align 8
  %80 = getelementptr { ptr }, ptr %79, i32 0, i32 0
  store ptr %69, ptr %80, align 8
  %81 = call ptr @class_behavior_wrapper(ptr %78, ptr %79)
  call void %81(ptr %74, { ptr, i160 } %73)
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %83 = load ptr, ptr %82, align 8
  %84 = load ptr, ptr %6, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 48, ptr %84)
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %87 = load i32, ptr %86, align 4
  %88 = getelementptr ptr, ptr %84, i32 %87
  %89 = load ptr, ptr %88, align 8
  %90 = getelementptr { ptr, ptr }, ptr %89, i32 0, i32 0
  %91 = load ptr, ptr %90, align 8
  %92 = call i32 %91(ptr %83) #16
  %93 = alloca i160, align 8
  %94 = alloca ptr, align 8
  store i32 %92, ptr %93, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %94, align 4
  %95 = load ptr, ptr %94, align 8
  %96 = insertvalue { ptr, i160 } undef, ptr %95, 0
  %97 = load i160, ptr %93, align 4
  %98 = insertvalue { ptr, i160 } %96, i160 %97, 1
  %99 = alloca [1 x ptr], align 8
  %100 = getelementptr [1 x ptr], ptr %99, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %100, align 8
  %101 = call ptr @llvm.invariant.start.p0(i64 1, ptr %99)
  %102 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %103 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %104 = alloca { ptr }, align 8
  %105 = getelementptr { ptr }, ptr %104, i32 0, i32 0
  store ptr %95, ptr %105, align 8
  %106 = call ptr @class_behavior_wrapper(ptr %103, ptr %104)
  call void %106(ptr %99, { ptr, i160 } %98)
  %107 = alloca ptr, align 8
  %108 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 26))
  store ptr %108, ptr %107, align 8
  %109 = alloca { ptr }, align 8
  %110 = getelementptr { ptr }, ptr %107, i32 0, i32 0
  %111 = getelementptr { ptr }, ptr %109, i32 0, i32 0
  %112 = load ptr, ptr %110, align 8
  store ptr %112, ptr %111, align 8
  %113 = call ptr @llvm.invariant.start.p0(i64 16, ptr %109)
  %114 = load ptr, ptr %109, align 8
  %115 = load [25 x i8], ptr @dfakx_The_indexing_argument_was, align 1
  store [25 x i8] %115, ptr %114, align 1
  %116 = alloca [1 x ptr], align 8
  store ptr @String, ptr %116, align 8
  %117 = load ptr, ptr %116, align 8
  %118 = getelementptr ptr, ptr %117, i32 6
  %119 = load ptr, ptr %118, align 8
  %120 = call { i64, i64 } @size_wrapper(ptr %119, ptr %116)
  %121 = extractvalue { i64, i64 } %120, 0
  %122 = call ptr @bump_malloc(i64 %121)
  %123 = alloca { ptr, ptr, ptr, i32 }, align 8
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 1
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 3
  store ptr @String, ptr %123, align 8
  store ptr %122, ptr %124, align 8
  store i32 9, ptr %125, align 4
  %126 = call ptr @llvm.invariant.start.p0(i64 16, ptr %123)
  %127 = getelementptr { ptr }, ptr %109, i32 0, i32 0
  %128 = load ptr, ptr %127, align 8
  %129 = insertvalue { ptr } undef, ptr %128, 0
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 0
  %131 = load ptr, ptr %130, align 8
  %132 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %131, 0
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 1
  %134 = load ptr, ptr %133, align 8
  %135 = insertvalue { ptr, ptr, ptr, i32 } %132, ptr %134, 1
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 2
  %137 = load ptr, ptr %136, align 8
  %138 = insertvalue { ptr, ptr, ptr, i32 } %135, ptr %137, 2
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 3
  %140 = load i32, ptr %139, align 4
  %141 = insertvalue { ptr, ptr, ptr, i32 } %138, i32 %140, 3
  %142 = alloca [3 x ptr], align 8
  %143 = getelementptr [3 x ptr], ptr %142, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %143, align 8
  %144 = getelementptr [3 x ptr], ptr %142, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %144, align 8
  %145 = getelementptr [3 x ptr], ptr %142, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %145, align 8
  %146 = call ptr @llvm.invariant.start.p0(i64 9, ptr %142)
  %147 = call ptr @llvm.invariant.start.p0(i64 280, ptr %131)
  %148 = getelementptr ptr, ptr %131, i32 %140
  %149 = getelementptr ptr, ptr %148, i32 4
  %150 = load ptr, ptr %149, align 8
  %151 = alloca { ptr, ptr, ptr }, align 8
  %152 = getelementptr { ptr, ptr, ptr }, ptr %151, i32 0, i32 0
  store ptr @buffer_typ, ptr %152, align 8
  %153 = getelementptr { ptr, ptr, ptr }, ptr %151, i32 0, i32 1
  store ptr @i32_typ, ptr %153, align 8
  %154 = getelementptr { ptr, ptr, ptr }, ptr %151, i32 0, i32 2
  store ptr @i32_typ, ptr %154, align 8
  %155 = call ptr @behavior_wrapper(ptr %150, { ptr, ptr, ptr, i32 } %141, ptr %151)
  call void %155({ ptr, ptr, ptr, i32 } %141, { ptr, ptr, ptr, i32 } %141, ptr %142, { ptr } %129, i32 25, i32 26)
  %156 = getelementptr { ptr, i160 }, ptr %123, i32 0, i32 0
  %157 = load ptr, ptr %156, align 8
  %158 = insertvalue { ptr, i160 } undef, ptr %157, 0
  %159 = getelementptr { ptr, i160 }, ptr %123, i32 0, i32 1
  %160 = load i160, ptr %159, align 4
  %161 = insertvalue { ptr, i160 } %158, i160 %160, 1
  %162 = alloca [1 x ptr], align 8
  %163 = getelementptr [1 x ptr], ptr %162, i32 0, i32 0
  store ptr @_parameterization_String, ptr %163, align 8
  %164 = call ptr @llvm.invariant.start.p0(i64 1, ptr %162)
  %165 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %166 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %167 = alloca { ptr }, align 8
  %168 = getelementptr { ptr }, ptr %167, i32 0, i32 0
  store ptr %157, ptr %168, align 8
  %169 = call ptr @class_behavior_wrapper(ptr %166, ptr %167)
  call void %169(ptr %162, { ptr, i160 } %161)
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %171 = load ptr, ptr %170, align 8
  %172 = load ptr, ptr %6, align 8
  %173 = call ptr @llvm.invariant.start.p0(i64 48, ptr %172)
  %174 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %175 = load i32, ptr %174, align 4
  %176 = getelementptr ptr, ptr %172, i32 %175
  %177 = getelementptr ptr, ptr %176, i32 1
  %178 = load ptr, ptr %177, align 8
  %179 = getelementptr { ptr, ptr }, ptr %178, i32 0, i32 0
  %180 = load ptr, ptr %179, align 8
  %181 = call i32 %180(ptr %171) #16
  %182 = alloca i160, align 8
  %183 = alloca ptr, align 8
  store i32 %181, ptr %182, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %183, align 4
  %184 = load ptr, ptr %183, align 8
  %185 = insertvalue { ptr, i160 } undef, ptr %184, 0
  %186 = load i160, ptr %182, align 4
  %187 = insertvalue { ptr, i160 } %185, i160 %186, 1
  %188 = alloca [1 x ptr], align 8
  %189 = getelementptr [1 x ptr], ptr %188, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %189, align 8
  %190 = call ptr @llvm.invariant.start.p0(i64 1, ptr %188)
  %191 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %192 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %193 = alloca { ptr }, align 8
  %194 = getelementptr { ptr }, ptr %193, i32 0, i32 0
  store ptr %184, ptr %194, align 8
  %195 = call ptr @class_behavior_wrapper(ptr %192, ptr %193)
  call void %195(ptr %188, { ptr, i160 } %187)
  ret void
}

define i32 @OutOfBoundsDetails_getter_index(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = load i32, ptr %7, align 4
  ret i32 %8
}

define void @OutOfBoundsDetails_setter_index(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  store i32 %1, ptr %8, align 4
  ret void
}

define i32 @OutOfBoundsDetails_getter_bounds(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @OutOfBoundsDetails_setter_bounds(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  store i32 %1, ptr %3, align 4
  ret void
}

define { i64, i64 } @_size_OutOfBounds(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = urem i64 %27, %21
  %29 = icmp eq i64 %28, 0
  %30 = sub i64 %21, %28
  %31 = select i1 %29, i64 0, i64 %30
  %32 = add i64 %27, %31
  %33 = insertvalue { i64, i64 } undef, i64 %32, 0
  %34 = insertvalue { i64, i64 } %33, i64 %21, 1
  ret { i64, i64 } %34
}

define ptr @OutOfBounds_B_init_boundsPtri32_indexPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [29 x ptr], ptr %26, i32 0, i32 10
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @OutOfBounds_B_init_messageString({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [29 x ptr], ptr %15, i32 0, i32 11
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @OutOfBounds_B_init_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [29 x ptr], ptr %4, i32 0, i32 12
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @OutOfBounds_B_set_info_line_numberPtri32_file_nameString({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [29 x ptr], ptr %26, i32 0, i32 13
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @OutOfBounds_B_report_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [29 x ptr], ptr %4, i32 0, i32 14
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @OutOfBounds_B_print_message_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [29 x ptr], ptr %4, i32 0, i32 15
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @OutOfBounds_init_boundsPtri32_indexPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3, i32 %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @OutOfBounds)
  %21 = alloca [1 x ptr], align 8
  store ptr @OutOfBoundsDetails, ptr %21, align 8
  %22 = load ptr, ptr %21, align 8
  %23 = getelementptr ptr, ptr %22, i32 6
  %24 = load ptr, ptr %23, align 8
  %25 = call { i64, i64 } @size_wrapper(ptr %24, ptr %21)
  %26 = extractvalue { i64, i64 } %25, 0
  %27 = call ptr @bump_malloc(i64 %26)
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 1
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 3
  store ptr @OutOfBoundsDetails, ptr %28, align 8
  store ptr %27, ptr %29, align 8
  store i32 9, ptr %30, align 4
  %31 = call ptr @llvm.invariant.start.p0(i64 16, ptr %28)
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 0
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %33, 0
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %36, 1
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 2
  %39 = load ptr, ptr %38, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %39, 2
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 3
  %42 = load i32, ptr %41, align 4
  %43 = insertvalue { ptr, ptr, ptr, i32 } %40, i32 %42, 3
  %44 = alloca [2 x ptr], align 8
  %45 = getelementptr [2 x ptr], ptr %44, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %45, align 8
  %46 = getelementptr [2 x ptr], ptr %44, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %46, align 8
  %47 = call ptr @llvm.invariant.start.p0(i64 4, ptr %44)
  %48 = call ptr @llvm.invariant.start.p0(i64 48, ptr %33)
  %49 = getelementptr ptr, ptr %33, i32 %42
  %50 = getelementptr ptr, ptr %49, i32 2
  %51 = load ptr, ptr %50, align 8
  %52 = alloca { ptr, ptr }, align 8
  %53 = getelementptr { ptr, ptr }, ptr %52, i32 0, i32 0
  store ptr @i32_typ, ptr %53, align 8
  %54 = getelementptr { ptr, ptr }, ptr %52, i32 0, i32 1
  store ptr @i32_typ, ptr %54, align 8
  %55 = call ptr @behavior_wrapper(ptr %51, { ptr, ptr, ptr, i32 } %43, ptr %52)
  call void %55({ ptr, ptr, ptr, i32 } %43, { ptr, ptr, ptr, i32 } %43, ptr %44, i32 %3, i32 %4)
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = load ptr, ptr %8, align 8
  %59 = call ptr @llvm.invariant.start.p0(i64 232, ptr %58)
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %61 = load i32, ptr %60, align 4
  %62 = getelementptr ptr, ptr %58, i32 %61
  %63 = load ptr, ptr %62, align 8
  %64 = getelementptr { ptr, ptr }, ptr %63, i32 0, i32 1
  %65 = load ptr, ptr %64, align 8
  %66 = getelementptr { ptr, i160 }, ptr %28, i32 0, i32 0
  %67 = load ptr, ptr %66, align 8
  %68 = insertvalue { ptr, i160 } undef, ptr %67, 0
  %69 = getelementptr { ptr, i160 }, ptr %28, i32 0, i32 1
  %70 = load i160, ptr %69, align 4
  %71 = insertvalue { ptr, i160 } %68, i160 %70, 1
  call void %65(ptr %57, { ptr, i160 } %71) #15
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %73 = load ptr, ptr %72, align 8
  %74 = load ptr, ptr %8, align 8
  %75 = call ptr @llvm.invariant.start.p0(i64 232, ptr %74)
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %77 = load i32, ptr %76, align 4
  %78 = getelementptr ptr, ptr %74, i32 %77
  %79 = getelementptr ptr, ptr %78, i32 1
  %80 = load ptr, ptr %79, align 8
  %81 = getelementptr { ptr, ptr }, ptr %80, i32 0, i32 1
  %82 = load ptr, ptr %81, align 8
  call void %82(ptr %73, i32 0) #15
  %83 = alloca ptr, align 8
  %84 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64))
  store ptr %84, ptr %83, align 8
  %85 = alloca { ptr }, align 8
  %86 = getelementptr { ptr }, ptr %83, i32 0, i32 0
  %87 = getelementptr { ptr }, ptr %85, i32 0, i32 0
  %88 = load ptr, ptr %86, align 8
  store ptr %88, ptr %87, align 8
  %89 = call ptr @llvm.invariant.start.p0(i64 16, ptr %85)
  %90 = load ptr, ptr %85, align 8
  %91 = load [0 x i8], ptr @dxtko_, align 1
  store [0 x i8] %91, ptr %90, align 1
  %92 = alloca [1 x ptr], align 8
  store ptr @String, ptr %92, align 8
  %93 = load ptr, ptr %92, align 8
  %94 = getelementptr ptr, ptr %93, i32 6
  %95 = load ptr, ptr %94, align 8
  %96 = call { i64, i64 } @size_wrapper(ptr %95, ptr %92)
  %97 = extractvalue { i64, i64 } %96, 0
  %98 = call ptr @bump_malloc(i64 %97)
  %99 = alloca { ptr, ptr, ptr, i32 }, align 8
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %99, i32 0, i32 1
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %99, i32 0, i32 3
  store ptr @String, ptr %99, align 8
  store ptr %98, ptr %100, align 8
  store i32 9, ptr %101, align 4
  %102 = call ptr @llvm.invariant.start.p0(i64 16, ptr %99)
  %103 = getelementptr { ptr }, ptr %85, i32 0, i32 0
  %104 = load ptr, ptr %103, align 8
  %105 = insertvalue { ptr } undef, ptr %104, 0
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %99, i32 0, i32 0
  %107 = load ptr, ptr %106, align 8
  %108 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %107, 0
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %99, i32 0, i32 1
  %110 = load ptr, ptr %109, align 8
  %111 = insertvalue { ptr, ptr, ptr, i32 } %108, ptr %110, 1
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %99, i32 0, i32 2
  %113 = load ptr, ptr %112, align 8
  %114 = insertvalue { ptr, ptr, ptr, i32 } %111, ptr %113, 2
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %99, i32 0, i32 3
  %116 = load i32, ptr %115, align 4
  %117 = insertvalue { ptr, ptr, ptr, i32 } %114, i32 %116, 3
  %118 = alloca [3 x ptr], align 8
  %119 = getelementptr [3 x ptr], ptr %118, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %119, align 8
  %120 = getelementptr [3 x ptr], ptr %118, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %120, align 8
  %121 = getelementptr [3 x ptr], ptr %118, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %121, align 8
  %122 = call ptr @llvm.invariant.start.p0(i64 9, ptr %118)
  %123 = call ptr @llvm.invariant.start.p0(i64 280, ptr %107)
  %124 = getelementptr ptr, ptr %107, i32 %116
  %125 = getelementptr ptr, ptr %124, i32 4
  %126 = load ptr, ptr %125, align 8
  %127 = alloca { ptr, ptr, ptr }, align 8
  %128 = getelementptr { ptr, ptr, ptr }, ptr %127, i32 0, i32 0
  store ptr @buffer_typ, ptr %128, align 8
  %129 = getelementptr { ptr, ptr, ptr }, ptr %127, i32 0, i32 1
  store ptr @i32_typ, ptr %129, align 8
  %130 = getelementptr { ptr, ptr, ptr }, ptr %127, i32 0, i32 2
  store ptr @i32_typ, ptr %130, align 8
  %131 = call ptr @behavior_wrapper(ptr %126, { ptr, ptr, ptr, i32 } %117, ptr %127)
  call void %131({ ptr, ptr, ptr, i32 } %117, { ptr, ptr, ptr, i32 } %117, ptr %118, { ptr } %105, i32 0, i32 1)
  %132 = alloca { ptr, ptr, ptr, i32 }, align 8
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %99, i32 0, i32 0
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %132, i32 0, i32 0
  %135 = load ptr, ptr %133, align 8
  store ptr %135, ptr %134, align 8
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %99, i32 0, i32 1
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %132, i32 0, i32 1
  %138 = load ptr, ptr %136, align 8
  store ptr %138, ptr %137, align 8
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %99, i32 0, i32 2
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %132, i32 0, i32 2
  %141 = load ptr, ptr %139, align 8
  store ptr %141, ptr %140, align 8
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %99, i32 0, i32 3
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %132, i32 0, i32 3
  %144 = load i32, ptr %142, align 4
  store i32 %144, ptr %143, align 4
  call void @set_offset(ptr %132, ptr @String)
  %145 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %146 = load ptr, ptr %145, align 8
  %147 = load ptr, ptr %8, align 8
  %148 = call ptr @llvm.invariant.start.p0(i64 232, ptr %147)
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %150 = load i32, ptr %149, align 4
  %151 = getelementptr ptr, ptr %147, i32 %150
  %152 = getelementptr ptr, ptr %151, i32 2
  %153 = load ptr, ptr %152, align 8
  %154 = getelementptr { ptr, ptr }, ptr %153, i32 0, i32 1
  %155 = load ptr, ptr %154, align 8
  %156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %132, i32 0, i32 0
  %157 = load ptr, ptr %156, align 8
  %158 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %157, 0
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %132, i32 0, i32 1
  %160 = load ptr, ptr %159, align 8
  %161 = insertvalue { ptr, ptr, ptr, i32 } %158, ptr %160, 1
  %162 = getelementptr { ptr, ptr, ptr, i32 }, ptr %132, i32 0, i32 2
  %163 = load ptr, ptr %162, align 8
  %164 = insertvalue { ptr, ptr, ptr, i32 } %161, ptr %163, 2
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %132, i32 0, i32 3
  %166 = load i32, ptr %165, align 4
  %167 = insertvalue { ptr, ptr, ptr, i32 } %164, i32 %166, 3
  call void %155(ptr %146, { ptr, ptr, ptr, i32 } %167) #15
  %168 = alloca ptr, align 8
  %169 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 66))
  store ptr %169, ptr %168, align 8
  %170 = alloca { ptr }, align 8
  %171 = getelementptr { ptr }, ptr %168, i32 0, i32 0
  %172 = getelementptr { ptr }, ptr %170, i32 0, i32 0
  %173 = load ptr, ptr %171, align 8
  store ptr %173, ptr %172, align 8
  %174 = call ptr @llvm.invariant.start.p0(i64 16, ptr %170)
  %175 = load ptr, ptr %170, align 8
  %176 = load [65 x i8], ptr @avsdp_An_outofbounds_error_occurred_while_indexing_into_a_collection, align 1
  store [65 x i8] %176, ptr %175, align 1
  %177 = alloca [1 x ptr], align 8
  store ptr @String, ptr %177, align 8
  %178 = load ptr, ptr %177, align 8
  %179 = getelementptr ptr, ptr %178, i32 6
  %180 = load ptr, ptr %179, align 8
  %181 = call { i64, i64 } @size_wrapper(ptr %180, ptr %177)
  %182 = extractvalue { i64, i64 } %181, 0
  %183 = call ptr @bump_malloc(i64 %182)
  %184 = alloca { ptr, ptr, ptr, i32 }, align 8
  %185 = getelementptr { ptr, ptr, ptr, i32 }, ptr %184, i32 0, i32 1
  %186 = getelementptr { ptr, ptr, ptr, i32 }, ptr %184, i32 0, i32 3
  store ptr @String, ptr %184, align 8
  store ptr %183, ptr %185, align 8
  store i32 9, ptr %186, align 4
  %187 = call ptr @llvm.invariant.start.p0(i64 16, ptr %184)
  %188 = getelementptr { ptr }, ptr %170, i32 0, i32 0
  %189 = load ptr, ptr %188, align 8
  %190 = insertvalue { ptr } undef, ptr %189, 0
  %191 = getelementptr { ptr, ptr, ptr, i32 }, ptr %184, i32 0, i32 0
  %192 = load ptr, ptr %191, align 8
  %193 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %192, 0
  %194 = getelementptr { ptr, ptr, ptr, i32 }, ptr %184, i32 0, i32 1
  %195 = load ptr, ptr %194, align 8
  %196 = insertvalue { ptr, ptr, ptr, i32 } %193, ptr %195, 1
  %197 = getelementptr { ptr, ptr, ptr, i32 }, ptr %184, i32 0, i32 2
  %198 = load ptr, ptr %197, align 8
  %199 = insertvalue { ptr, ptr, ptr, i32 } %196, ptr %198, 2
  %200 = getelementptr { ptr, ptr, ptr, i32 }, ptr %184, i32 0, i32 3
  %201 = load i32, ptr %200, align 4
  %202 = insertvalue { ptr, ptr, ptr, i32 } %199, i32 %201, 3
  %203 = alloca [3 x ptr], align 8
  %204 = getelementptr [3 x ptr], ptr %203, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %204, align 8
  %205 = getelementptr [3 x ptr], ptr %203, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %205, align 8
  %206 = getelementptr [3 x ptr], ptr %203, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %206, align 8
  %207 = call ptr @llvm.invariant.start.p0(i64 9, ptr %203)
  %208 = call ptr @llvm.invariant.start.p0(i64 280, ptr %192)
  %209 = getelementptr ptr, ptr %192, i32 %201
  %210 = getelementptr ptr, ptr %209, i32 4
  %211 = load ptr, ptr %210, align 8
  %212 = alloca { ptr, ptr, ptr }, align 8
  %213 = getelementptr { ptr, ptr, ptr }, ptr %212, i32 0, i32 0
  store ptr @buffer_typ, ptr %213, align 8
  %214 = getelementptr { ptr, ptr, ptr }, ptr %212, i32 0, i32 1
  store ptr @i32_typ, ptr %214, align 8
  %215 = getelementptr { ptr, ptr, ptr }, ptr %212, i32 0, i32 2
  store ptr @i32_typ, ptr %215, align 8
  %216 = call ptr @behavior_wrapper(ptr %211, { ptr, ptr, ptr, i32 } %202, ptr %212)
  call void %216({ ptr, ptr, ptr, i32 } %202, { ptr, ptr, ptr, i32 } %202, ptr %203, { ptr } %190, i32 65, i32 66)
  %217 = alloca { ptr, ptr, ptr, i32 }, align 8
  %218 = getelementptr { ptr, ptr, ptr, i32 }, ptr %184, i32 0, i32 0
  %219 = getelementptr { ptr, ptr, ptr, i32 }, ptr %217, i32 0, i32 0
  %220 = load ptr, ptr %218, align 8
  store ptr %220, ptr %219, align 8
  %221 = getelementptr { ptr, ptr, ptr, i32 }, ptr %184, i32 0, i32 1
  %222 = getelementptr { ptr, ptr, ptr, i32 }, ptr %217, i32 0, i32 1
  %223 = load ptr, ptr %221, align 8
  store ptr %223, ptr %222, align 8
  %224 = getelementptr { ptr, ptr, ptr, i32 }, ptr %184, i32 0, i32 2
  %225 = getelementptr { ptr, ptr, ptr, i32 }, ptr %217, i32 0, i32 2
  %226 = load ptr, ptr %224, align 8
  store ptr %226, ptr %225, align 8
  %227 = getelementptr { ptr, ptr, ptr, i32 }, ptr %184, i32 0, i32 3
  %228 = getelementptr { ptr, ptr, ptr, i32 }, ptr %217, i32 0, i32 3
  %229 = load i32, ptr %227, align 4
  store i32 %229, ptr %228, align 4
  call void @set_offset(ptr %217, ptr @String)
  %230 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %231 = load ptr, ptr %230, align 8
  %232 = load ptr, ptr %8, align 8
  %233 = call ptr @llvm.invariant.start.p0(i64 232, ptr %232)
  %234 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %235 = load i32, ptr %234, align 4
  %236 = getelementptr ptr, ptr %232, i32 %235
  %237 = getelementptr ptr, ptr %236, i32 3
  %238 = load ptr, ptr %237, align 8
  %239 = getelementptr { ptr, ptr }, ptr %238, i32 0, i32 1
  %240 = load ptr, ptr %239, align 8
  %241 = getelementptr { ptr, ptr, ptr, i32 }, ptr %217, i32 0, i32 0
  %242 = load ptr, ptr %241, align 8
  %243 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %242, 0
  %244 = getelementptr { ptr, ptr, ptr, i32 }, ptr %217, i32 0, i32 1
  %245 = load ptr, ptr %244, align 8
  %246 = insertvalue { ptr, ptr, ptr, i32 } %243, ptr %245, 1
  %247 = getelementptr { ptr, ptr, ptr, i32 }, ptr %217, i32 0, i32 2
  %248 = load ptr, ptr %247, align 8
  %249 = insertvalue { ptr, ptr, ptr, i32 } %246, ptr %248, 2
  %250 = getelementptr { ptr, ptr, ptr, i32 }, ptr %217, i32 0, i32 3
  %251 = load i32, ptr %250, align 4
  %252 = insertvalue { ptr, ptr, ptr, i32 } %249, i32 %251, 3
  call void %240(ptr %231, { ptr, ptr, ptr, i32 } %252) #15
  ret void
}

define void @OutOfBounds_print_message_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = alloca [0 x ptr], align 8
  %6 = alloca {}, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %7, align 8
  %8 = call ptr @llvm.invariant.start.p0(i64 16, ptr %7)
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  call void @set_offset(ptr %9, ptr @OutOfBounds)
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %23 = load ptr, ptr %22, align 8
  %24 = load ptr, ptr %9, align 8
  %25 = call ptr @llvm.invariant.start.p0(i64 232, ptr %24)
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %27 = load i32, ptr %26, align 4
  %28 = getelementptr ptr, ptr %24, i32 %27
  %29 = getelementptr ptr, ptr %28, i32 3
  %30 = load ptr, ptr %29, align 8
  %31 = getelementptr { ptr, ptr }, ptr %30, i32 0, i32 0
  %32 = load ptr, ptr %31, align 8
  %33 = call { ptr, ptr, ptr, i32 } %32(ptr %23) #16
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %33, ptr %34, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 16, ptr %34)
  call void @assume_offset(ptr %34, ptr @String)
  %36 = getelementptr { ptr, i160 }, ptr %34, i32 0, i32 0
  %37 = load ptr, ptr %36, align 8
  %38 = insertvalue { ptr, i160 } undef, ptr %37, 0
  %39 = getelementptr { ptr, i160 }, ptr %34, i32 0, i32 1
  %40 = load i160, ptr %39, align 4
  %41 = insertvalue { ptr, i160 } %38, i160 %40, 1
  %42 = alloca [1 x ptr], align 8
  %43 = getelementptr [1 x ptr], ptr %42, i32 0, i32 0
  store ptr @_parameterization_String, ptr %43, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 1, ptr %42)
  %45 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %46 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %47 = alloca { ptr }, align 8
  %48 = getelementptr { ptr }, ptr %47, i32 0, i32 0
  store ptr %37, ptr %48, align 8
  %49 = call ptr @class_behavior_wrapper(ptr %46, ptr %47)
  call void %49(ptr %42, { ptr, i160 } %41)
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = load ptr, ptr %9, align 8
  %53 = call ptr @llvm.invariant.start.p0(i64 232, ptr %52)
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %55 = load i32, ptr %54, align 4
  %56 = getelementptr ptr, ptr %52, i32 %55
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr { ptr, ptr }, ptr %57, i32 0, i32 0
  %59 = load ptr, ptr %58, align 8
  %60 = call { ptr, i160 } %59(ptr %51) #16
  %61 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %60, ptr %61, align 8
  %62 = getelementptr { ptr, i160 }, ptr %61, i32 0, i32 0
  %63 = load ptr, ptr %62, align 8
  %64 = ptrtoint ptr %63 to i64
  %65 = icmp eq i64 %64, ptrtoint (ptr @nil_typ to i64)
  %66 = icmp eq i64 %64, 0
  %67 = or i1 %65, %66
  %68 = icmp eq i1 %67, false
  br i1 %68, label %69, label %._crit_edge

._crit_edge:                                      ; preds = %3
  br label %100

69:                                               ; preds = %3
  %70 = getelementptr { ptr, i160 }, ptr %61, i32 0, i32 0
  %71 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 0
  %72 = load ptr, ptr %70, align 8
  store ptr %72, ptr %71, align 8
  %73 = getelementptr { ptr, i160 }, ptr %61, i32 0, i32 1
  %74 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %75 = load i160, ptr %73, align 4
  store i160 %75, ptr %74, align 4
  call void @set_offset(ptr %4, ptr @OutOfBoundsDetails)
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %77 = load ptr, ptr %76, align 8
  %78 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %77, 0
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %80 = load ptr, ptr %79, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } %78, ptr %80, 1
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %83 = load ptr, ptr %82, align 8
  %84 = insertvalue { ptr, ptr, ptr, i32 } %81, ptr %83, 2
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %86 = load i32, ptr %85, align 4
  %87 = insertvalue { ptr, ptr, ptr, i32 } %84, i32 %86, 3
  %88 = call ptr @llvm.invariant.start.p0(i64 0, ptr %5)
  %89 = call ptr @llvm.invariant.start.p0(i64 48, ptr %77)
  %90 = getelementptr ptr, ptr %77, i32 %86
  %91 = getelementptr ptr, ptr %90, i32 3
  %92 = load ptr, ptr %91, align 8
  %93 = call ptr @behavior_wrapper(ptr %92, { ptr, ptr, ptr, i32 } %87, ptr %6)
  call void %93({ ptr, ptr, ptr, i32 } %87, { ptr, ptr, ptr, i32 } %87, ptr %5)
  %94 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 0
  %95 = getelementptr { ptr, i160 }, ptr %61, i32 0, i32 0
  %96 = load ptr, ptr %94, align 8
  store ptr %96, ptr %95, align 8
  %97 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %98 = getelementptr { ptr, i160 }, ptr %61, i32 0, i32 1
  %99 = load i160, ptr %97, align 4
  store i160 %99, ptr %98, align 4
  br label %100

100:                                              ; preds = %._crit_edge, %69
  ret void
}

define { ptr, ptr, ptr, i32 } @OutOfBounds_getter_message(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %21, 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %24, 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } %25, ptr %27, 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %30 = load i32, ptr %29, align 4
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, i32 %30, 3
  ret { ptr, ptr, ptr, i32 } %31
}

define void @OutOfBounds_setter_message(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %34 = load i32, ptr %32, align 4
  store i32 %34, ptr %33, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @OutOfBounds_getter_file_name(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %15, 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %21, 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 %24, 3
  ret { ptr, ptr, ptr, i32 } %25
}

define void @OutOfBounds_setter_file_name(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %15, align 8
  %16 = call ptr @llvm.invariant.start.p0(i64 16, ptr %15)
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %28 = load i32, ptr %26, align 4
  store i32 %28, ptr %27, align 4
  ret void
}

define i32 @OutOfBounds_getter_line_number(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = load i32, ptr %7, align 4
  ret i32 %8
}

define void @OutOfBounds_setter_line_number(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  store i32 %1, ptr %8, align 4
  ret void
}

define { ptr, i160 } @OutOfBounds_getter_details(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = getelementptr { ptr, i160 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, i160 } undef, ptr %4, 0
  %6 = getelementptr { ptr, i160 }, ptr %2, i32 0, i32 1
  %7 = load i160, ptr %6, align 4
  %8 = insertvalue { ptr, i160 } %5, i160 %7, 1
  ret { ptr, i160 } %8
}

define void @OutOfBounds_setter_details(ptr %0, { ptr, i160 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %1, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 0
  %6 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %9 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %10 = load i160, ptr %8, align 4
  store i160 %10, ptr %9, align 4
  ret void
}

define { i64, i64 } @_size_IntArray(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @IntArray_B__Self_from_iterable_iterableIntIterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %3 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr ptr, ptr %4, i32 1
  %6 = getelementptr ptr, ptr %4, i32 2
  %7 = getelementptr ptr, ptr %4, i32 3
  %8 = getelementptr ptr, ptr %4, i32 4
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %12)
  %14 = load ptr, ptr getelementptr (ptr, ptr getelementptr ([77 x ptr], ptr @IntArray, i32 0, i32 26), i32 9), align 8
  ret ptr %14
}

define ptr @IntArray_B_init_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [77 x ptr], ptr %4, i32 0, i32 27
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @IntArray_B_init_bufferBufferPtri32_lengthPtri32_capacityPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1)
  %4 = getelementptr { ptr, ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -318192747195410237, i64 ptrtoint (ptr @buffer_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %24)
  %26 = getelementptr { ptr, ptr, ptr }, ptr %1, i32 0, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr ptr, ptr %27, i32 1
  %29 = getelementptr ptr, ptr %27, i32 2
  %30 = getelementptr ptr, ptr %27, i32 3
  %31 = getelementptr ptr, ptr %27, i32 4
  %32 = load i64, ptr %28, align 4
  %33 = load i64, ptr %29, align 4
  %34 = load ptr, ptr %30, align 8
  %35 = load ptr, ptr %31, align 8
  %36 = call i1 @subtype_test_wrapper(ptr %34, i64 %33, i64 %32, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %35)
  %37 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %38 = getelementptr [77 x ptr], ptr %37, i32 0, i32 28
  %39 = getelementptr ptr, ptr %38, i32 9
  %40 = load ptr, ptr %39, align 8
  ret ptr %40
}

define ptr @IntArray_B_length_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [77 x ptr], ptr %4, i32 0, i32 29
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @IntArray_B_capacity_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [77 x ptr], ptr %4, i32 0, i32 30
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @IntArray_B_buffer_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [77 x ptr], ptr %4, i32 0, i32 31
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @IntArray_B_append_xPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [77 x ptr], ptr %15, i32 0, i32 32
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @IntArray_B_extend_aryIntArray({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7629948565578263212, i64 ptrtoint (ptr @IntArray to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [77 x ptr], ptr %15, i32 0, i32 33
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @IntArray_B__index_xPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [77 x ptr], ptr %15, i32 0, i32 34
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @IntArray_B_pop_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [77 x ptr], ptr %4, i32 0, i32 35
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @IntArray_B_copy_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [77 x ptr], ptr %4, i32 0, i32 36
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @IntArray_B_each_fFunctionPtri32_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [77 x ptr], ptr %15, i32 0, i32 37
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @IntArray_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [77 x ptr], ptr %26, i32 0, i32 38
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @IntArray_B_all_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [77 x ptr], ptr %15, i32 0, i32 39
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @IntArray_B_any_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [77 x ptr], ptr %15, i32 0, i32 40
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @IntArray_B_map_fFunctionPtri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [77 x ptr], ptr %15, i32 0, i32 41
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @IntArray_B_filter_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [77 x ptr], ptr %15, i32 0, i32 42
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @IntArray_B_chain_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [77 x ptr], ptr %15, i32 0, i32 43
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @IntArray_B_interleave_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [77 x ptr], ptr %15, i32 0, i32 44
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @IntArray_B_zip_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [77 x ptr], ptr %15, i32 0, i32 45
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @IntArray_B_product_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [77 x ptr], ptr %15, i32 0, i32 46
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @IntArray_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [77 x ptr], ptr %4, i32 0, i32 47
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @IntArray_B_repr_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [77 x ptr], ptr %4, i32 0, i32 48
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define { ptr, ptr, ptr, i32 } @IntArray__Self_from_iterable_iterableIntIterable(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %3 = alloca [0 x ptr], align 8
  %4 = alloca {}, align 8
  %5 = alloca { ptr, i32 }, align 8
  %6 = alloca [1 x ptr], align 8
  %7 = alloca { ptr }, align 8
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %11 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem5 = alloca ptr, align 8
  %.reg2mem7 = alloca ptr, align 8
  %.reg2mem9 = alloca ptr, align 8
  %.reg2mem11 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %1, ptr %11, align 8
  %12 = call ptr @llvm.invariant.start.p0(i64 16, ptr %11)
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 0
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 2
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %25 = load i32, ptr %23, align 4
  store i32 %25, ptr %24, align 4
  call void @set_offset(ptr %13, ptr @IntIterable)
  %26 = alloca ptr, align 8
  %27 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64))
  store ptr %27, ptr %26, align 8
  %28 = alloca { ptr }, align 8
  %29 = getelementptr { ptr }, ptr %26, i32 0, i32 0
  %30 = getelementptr { ptr }, ptr %28, i32 0, i32 0
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 16, ptr %28)
  %33 = alloca [1 x ptr], align 8
  store ptr @IntArray, ptr %33, align 8
  %34 = load ptr, ptr %33, align 8
  %35 = getelementptr ptr, ptr %34, i32 6
  %36 = load ptr, ptr %35, align 8
  %37 = call { i64, i64 } @size_wrapper(ptr %36, ptr %33)
  %38 = extractvalue { i64, i64 } %37, 0
  %39 = call ptr @bump_malloc(i64 %38)
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 1
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 3
  store ptr @IntArray, ptr %40, align 8
  store ptr %39, ptr %41, align 8
  store i32 9, ptr %42, align 4
  %43 = call ptr @llvm.invariant.start.p0(i64 16, ptr %40)
  %44 = getelementptr { ptr }, ptr %28, i32 0, i32 0
  %45 = load ptr, ptr %44, align 8
  %46 = insertvalue { ptr } undef, ptr %45, 0
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 0
  %48 = load ptr, ptr %47, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %48, 0
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } %49, ptr %51, 1
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 2
  %54 = load ptr, ptr %53, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %54, 2
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 3
  %57 = load i32, ptr %56, align 4
  %58 = insertvalue { ptr, ptr, ptr, i32 } %55, i32 %57, 3
  %59 = alloca [3 x ptr], align 8
  %60 = getelementptr [3 x ptr], ptr %59, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %60, align 8
  %61 = getelementptr [3 x ptr], ptr %59, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %61, align 8
  %62 = getelementptr [3 x ptr], ptr %59, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %62, align 8
  %63 = call ptr @llvm.invariant.start.p0(i64 9, ptr %59)
  %64 = call ptr @llvm.invariant.start.p0(i64 616, ptr %48)
  %65 = getelementptr ptr, ptr %48, i32 %57
  %66 = getelementptr ptr, ptr %65, i32 5
  %67 = load ptr, ptr %66, align 8
  %68 = alloca { ptr, ptr, ptr }, align 8
  %69 = getelementptr { ptr, ptr, ptr }, ptr %68, i32 0, i32 0
  store ptr @buffer_typ, ptr %69, align 8
  %70 = getelementptr { ptr, ptr, ptr }, ptr %68, i32 0, i32 1
  store ptr @i32_typ, ptr %70, align 8
  %71 = getelementptr { ptr, ptr, ptr }, ptr %68, i32 0, i32 2
  store ptr @i32_typ, ptr %71, align 8
  %72 = call ptr @behavior_wrapper(ptr %67, { ptr, ptr, ptr, i32 } %58, ptr %68)
  call void %72({ ptr, ptr, ptr, i32 } %58, { ptr, ptr, ptr, i32 } %58, ptr %59, { ptr } %46, i32 0, i32 1)
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 0
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %76 = load ptr, ptr %74, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 1
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %79 = load ptr, ptr %77, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 2
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %82 = load ptr, ptr %80, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 3
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %85 = load i32, ptr %83, align 4
  store i32 %85, ptr %84, align 4
  call void @set_offset(ptr %73, ptr @IntArray)
  %86 = alloca { ptr, ptr, ptr, i32 }, align 8
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 0
  %89 = load ptr, ptr %87, align 8
  store ptr %89, ptr %88, align 8
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 1
  %92 = load ptr, ptr %90, align 8
  store ptr %92, ptr %91, align 8
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 2
  %95 = load ptr, ptr %93, align 8
  store ptr %95, ptr %94, align 8
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 3
  %98 = load i32, ptr %96, align 4
  store i32 %98, ptr %97, align 4
  %99 = call ptr @llvm.invariant.start.p0(i64 16, ptr %86)
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %101 = load ptr, ptr %100, align 8
  %102 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %101, 0
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %104 = load ptr, ptr %103, align 8
  %105 = insertvalue { ptr, ptr, ptr, i32 } %102, ptr %104, 1
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %107 = load ptr, ptr %106, align 8
  %108 = insertvalue { ptr, ptr, ptr, i32 } %105, ptr %107, 2
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %110 = load i32, ptr %109, align 4
  %111 = insertvalue { ptr, ptr, ptr, i32 } %108, i32 %110, 3
  %112 = alloca [0 x ptr], align 8
  %113 = call ptr @llvm.invariant.start.p0(i64 0, ptr %112)
  %114 = call ptr @llvm.invariant.start.p0(i64 192, ptr %101)
  %115 = getelementptr ptr, ptr %101, i32 %110
  %116 = getelementptr ptr, ptr %115, i32 10
  %117 = load ptr, ptr %116, align 8
  %118 = alloca {}, align 8
  %119 = call ptr @behavior_wrapper(ptr %117, { ptr, ptr, ptr, i32 } %111, ptr %118)
  %120 = call { ptr, ptr, ptr, i32 } %119({ ptr, ptr, ptr, i32 } %111, { ptr, ptr, ptr, i32 } %111, ptr %112)
  %121 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %120, ptr %121, align 8
  %122 = call ptr @llvm.invariant.start.p0(i64 16, ptr %121)
  %123 = alloca { ptr, ptr, ptr, i32 }, align 8
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %121, i32 0, i32 0
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 0
  %126 = load ptr, ptr %124, align 8
  store ptr %126, ptr %125, align 8
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %121, i32 0, i32 1
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 1
  %129 = load ptr, ptr %127, align 8
  store ptr %129, ptr %128, align 8
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %121, i32 0, i32 2
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 2
  %132 = load ptr, ptr %130, align 8
  store ptr %132, ptr %131, align 8
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %121, i32 0, i32 3
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 3
  %135 = load i32, ptr %133, align 4
  store i32 %135, ptr %134, align 4
  call void @set_offset(ptr %123, ptr @IntIterator)
  %136 = alloca { ptr, ptr, ptr, i32 }, align 8
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 0
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %136, i32 0, i32 0
  %139 = load ptr, ptr %137, align 8
  store ptr %139, ptr %138, align 8
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 1
  %141 = getelementptr { ptr, ptr, ptr, i32 }, ptr %136, i32 0, i32 1
  %142 = load ptr, ptr %140, align 8
  store ptr %142, ptr %141, align 8
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 2
  %144 = getelementptr { ptr, ptr, ptr, i32 }, ptr %136, i32 0, i32 2
  %145 = load ptr, ptr %143, align 8
  store ptr %145, ptr %144, align 8
  %146 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 3
  %147 = getelementptr { ptr, ptr, ptr, i32 }, ptr %136, i32 0, i32 3
  %148 = load i32, ptr %146, align 4
  store i32 %148, ptr %147, align 4
  call void @set_offset(ptr %136, ptr @IntIterator)
  %149 = alloca { ptr, ptr, ptr, i32 }, align 8
  %150 = getelementptr { ptr, ptr, ptr, i32 }, ptr %136, i32 0, i32 0
  %151 = getelementptr { ptr, ptr, ptr, i32 }, ptr %149, i32 0, i32 0
  %152 = load ptr, ptr %150, align 8
  store ptr %152, ptr %151, align 8
  %153 = getelementptr { ptr, ptr, ptr, i32 }, ptr %136, i32 0, i32 1
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %149, i32 0, i32 1
  %155 = load ptr, ptr %153, align 8
  store ptr %155, ptr %154, align 8
  %156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %136, i32 0, i32 2
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %149, i32 0, i32 2
  %158 = load ptr, ptr %156, align 8
  store ptr %158, ptr %157, align 8
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %136, i32 0, i32 3
  %160 = getelementptr { ptr, ptr, ptr, i32 }, ptr %149, i32 0, i32 3
  %161 = load i32, ptr %159, align 4
  store i32 %161, ptr %160, align 4
  %162 = call ptr @llvm.invariant.start.p0(i64 16, ptr %149)
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %149, i32 0, i32 0
  store ptr %163, ptr %.reg2mem11, align 8
  %164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %149, i32 0, i32 1
  store ptr %164, ptr %.reg2mem9, align 8
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %149, i32 0, i32 2
  store ptr %165, ptr %.reg2mem7, align 8
  %166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %149, i32 0, i32 3
  store ptr %166, ptr %.reg2mem5, align 8
  %167 = getelementptr { ptr, i32 }, ptr %5, i32 0, i32 0
  store ptr %167, ptr %.reg2mem3, align 8
  br label %168

168:                                              ; preds = %._crit_edge1, %2
  %.reload12 = load ptr, ptr %.reg2mem11, align 8
  %169 = load ptr, ptr %.reload12, align 8
  %170 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %169, 0
  %.reload10 = load ptr, ptr %.reg2mem9, align 8
  %171 = load ptr, ptr %.reload10, align 8
  %172 = insertvalue { ptr, ptr, ptr, i32 } %170, ptr %171, 1
  %.reload8 = load ptr, ptr %.reg2mem7, align 8
  %173 = load ptr, ptr %.reload8, align 8
  %174 = insertvalue { ptr, ptr, ptr, i32 } %172, ptr %173, 2
  %.reload6 = load ptr, ptr %.reg2mem5, align 8
  %175 = load i32, ptr %.reload6, align 4
  %176 = insertvalue { ptr, ptr, ptr, i32 } %174, i32 %175, 3
  %177 = call ptr @llvm.invariant.start.p0(i64 0, ptr %3)
  %178 = call ptr @llvm.invariant.start.p0(i64 16, ptr %169)
  %179 = getelementptr ptr, ptr %169, i32 %175
  %180 = load ptr, ptr %179, align 8
  %181 = call ptr @behavior_wrapper(ptr %180, { ptr, ptr, ptr, i32 } %176, ptr %4)
  %182 = call { ptr, i32 } %181({ ptr, ptr, ptr, i32 } %176, { ptr, ptr, ptr, i32 } %176, ptr %3)
  store { ptr, i32 } %182, ptr %5, align 8
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %183 = load ptr, ptr %.reload4, align 8
  %184 = ptrtoint ptr %183 to i64
  %185 = icmp eq i64 %184, ptrtoint (ptr @nil_typ to i64)
  %186 = icmp eq i64 %184, 0
  %187 = or i1 %185, %186
  %188 = icmp eq i1 %187, false
  store i1 %188, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %189, label %._crit_edge

._crit_edge:                                      ; preds = %168
  br label %226

189:                                              ; preds = %168
  %190 = getelementptr { ptr, i32 }, ptr %5, i32 0, i32 1
  %191 = load i32, ptr %190, align 4
  %192 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 0
  %193 = load ptr, ptr %192, align 8
  %194 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %193, 0
  %195 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 1
  %196 = load ptr, ptr %195, align 8
  %197 = insertvalue { ptr, ptr, ptr, i32 } %194, ptr %196, 1
  %198 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 2
  %199 = load ptr, ptr %198, align 8
  %200 = insertvalue { ptr, ptr, ptr, i32 } %197, ptr %199, 2
  %201 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 3
  %202 = load i32, ptr %201, align 4
  %203 = insertvalue { ptr, ptr, ptr, i32 } %200, i32 %202, 3
  %204 = getelementptr [1 x ptr], ptr %6, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %204, align 8
  %205 = call ptr @llvm.invariant.start.p0(i64 1, ptr %6)
  %206 = call ptr @llvm.invariant.start.p0(i64 616, ptr %193)
  %207 = getelementptr ptr, ptr %193, i32 %202
  %208 = getelementptr ptr, ptr %207, i32 9
  %209 = load ptr, ptr %208, align 8
  %210 = getelementptr { ptr }, ptr %7, i32 0, i32 0
  store ptr @i32_typ, ptr %210, align 8
  %211 = call ptr @behavior_wrapper(ptr %209, { ptr, ptr, ptr, i32 } %203, ptr %7)
  %212 = call { ptr, ptr, ptr, i32 } %211({ ptr, ptr, ptr, i32 } %203, { ptr, ptr, ptr, i32 } %203, ptr %6, i32 %191)
  store { ptr, ptr, ptr, i32 } %212, ptr %8, align 8
  %213 = call ptr @llvm.invariant.start.p0(i64 16, ptr %8)
  %214 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %215 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %216 = load ptr, ptr %214, align 8
  store ptr %216, ptr %215, align 8
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %218 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %219 = load ptr, ptr %217, align 8
  store ptr %219, ptr %218, align 8
  %220 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %221 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %222 = load ptr, ptr %220, align 8
  store ptr %222, ptr %221, align 8
  %223 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %224 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %225 = load i32, ptr %223, align 4
  store i32 %225, ptr %224, align 4
  call void @set_offset(ptr %9, ptr @IntArray)
  store i32 %191, ptr %5, align 4
  br label %226

226:                                              ; preds = %._crit_edge, %189
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %227

._crit_edge1:                                     ; preds = %226
  br label %168

227:                                              ; preds = %226
  %228 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 0
  %229 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 0
  %230 = load ptr, ptr %228, align 8
  store ptr %230, ptr %229, align 8
  %231 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 1
  %232 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %233 = load ptr, ptr %231, align 8
  store ptr %233, ptr %232, align 8
  %234 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 2
  %235 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 2
  %236 = load ptr, ptr %234, align 8
  store ptr %236, ptr %235, align 8
  %237 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 3
  %238 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  %239 = load i32, ptr %237, align 4
  store i32 %239, ptr %238, align 4
  call void @set_offset(ptr %10, ptr @IntArray)
  %240 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 0
  %241 = load ptr, ptr %240, align 8
  %242 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %241, 0
  %243 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %244 = load ptr, ptr %243, align 8
  %245 = insertvalue { ptr, ptr, ptr, i32 } %242, ptr %244, 1
  %246 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 2
  %247 = load ptr, ptr %246, align 8
  %248 = insertvalue { ptr, ptr, ptr, i32 } %245, ptr %247, 2
  %249 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  %250 = load i32, ptr %249, align 4
  %251 = insertvalue { ptr, ptr, ptr, i32 } %248, i32 %250, 3
  ret { ptr, ptr, ptr, i32 } %251
}

define void @IntArray_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @IntArray)
  %19 = alloca ptr, align 8
  %20 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64))
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %22 = load ptr, ptr %21, align 8
  %23 = load ptr, ptr %6, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 616, ptr %23)
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %26 = load i32, ptr %25, align 4
  %27 = getelementptr ptr, ptr %23, i32 %26
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr { ptr, ptr }, ptr %28, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  %31 = getelementptr { ptr }, ptr %19, i32 0, i32 0
  %32 = load ptr, ptr %31, align 8
  %33 = insertvalue { ptr } undef, ptr %32, 0
  call void %30(ptr %22, { ptr } %33) #15
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %35 = load ptr, ptr %34, align 8
  %36 = load ptr, ptr %6, align 8
  %37 = call ptr @llvm.invariant.start.p0(i64 616, ptr %36)
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %39 = load i32, ptr %38, align 4
  %40 = getelementptr ptr, ptr %36, i32 %39
  %41 = getelementptr ptr, ptr %40, i32 2
  %42 = load ptr, ptr %41, align 8
  %43 = getelementptr { ptr, ptr }, ptr %42, i32 0, i32 1
  %44 = load ptr, ptr %43, align 8
  call void %44(ptr %35, i32 1) #15
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %46 = load ptr, ptr %45, align 8
  %47 = load ptr, ptr %6, align 8
  %48 = call ptr @llvm.invariant.start.p0(i64 616, ptr %47)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %50 = load i32, ptr %49, align 4
  %51 = getelementptr ptr, ptr %47, i32 %50
  %52 = getelementptr ptr, ptr %51, i32 1
  %53 = load ptr, ptr %52, align 8
  %54 = getelementptr { ptr, ptr }, ptr %53, i32 0, i32 1
  %55 = load ptr, ptr %54, align 8
  call void %55(ptr %46, i32 0) #15
  ret void
}

define void @IntArray_init_bufferBufferPtri32_lengthPtri32_capacityPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3, i32 %4, i32 %5) {
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %7, align 8
  %8 = call ptr @llvm.invariant.start.p0(i64 16, ptr %7)
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  call void @set_offset(ptr %9, ptr @IntArray)
  %22 = alloca ptr, align 8
  store { ptr } %3, ptr %22, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = load ptr, ptr %9, align 8
  %26 = call ptr @llvm.invariant.start.p0(i64 616, ptr %25)
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %28 = load i32, ptr %27, align 4
  %29 = getelementptr ptr, ptr %25, i32 %28
  %30 = load ptr, ptr %29, align 8
  %31 = getelementptr { ptr, ptr }, ptr %30, i32 0, i32 1
  %32 = load ptr, ptr %31, align 8
  %33 = load ptr, ptr %22, align 8
  %34 = insertvalue { ptr } undef, ptr %33, 0
  call void %32(ptr %24, { ptr } %34) #15
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = load ptr, ptr %9, align 8
  %38 = call ptr @llvm.invariant.start.p0(i64 616, ptr %37)
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %40 = load i32, ptr %39, align 4
  %41 = getelementptr ptr, ptr %37, i32 %40
  %42 = getelementptr ptr, ptr %41, i32 1
  %43 = load ptr, ptr %42, align 8
  %44 = getelementptr { ptr, ptr }, ptr %43, i32 0, i32 1
  %45 = load ptr, ptr %44, align 8
  call void %45(ptr %36, i32 %4) #15
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %47 = load ptr, ptr %46, align 8
  %48 = load ptr, ptr %9, align 8
  %49 = call ptr @llvm.invariant.start.p0(i64 616, ptr %48)
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %51 = load i32, ptr %50, align 4
  %52 = getelementptr ptr, ptr %48, i32 %51
  %53 = getelementptr ptr, ptr %52, i32 2
  %54 = load ptr, ptr %53, align 8
  %55 = getelementptr { ptr, ptr }, ptr %54, i32 0, i32 1
  %56 = load ptr, ptr %55, align 8
  call void %56(ptr %47, i32 %5) #15
  ret void
}

define i32 @IntArray_length_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @IntArray)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 616, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 1
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call i32 %29(ptr %20) #16
  ret i32 %30
}

define i32 @IntArray_capacity_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @IntArray)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 616, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call i32 %29(ptr %20) #16
  ret i32 %30
}

define { ptr } @IntArray_buffer_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @IntArray)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 616, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 0
  %28 = load ptr, ptr %27, align 8
  %29 = call { ptr } %28(ptr %20) #16
  %30 = alloca ptr, align 8
  store { ptr } %29, ptr %30, align 8
  %31 = load ptr, ptr %30, align 8
  %32 = insertvalue { ptr } undef, ptr %31, 0
  ret { ptr } %32
}

define { ptr, ptr, ptr, i32 } @IntArray_append_xPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr }, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %11 = alloca ptr, align 8
  %12 = alloca { ptr }, align 8
  %13 = alloca ptr, align 8
  %14 = alloca ptr, align 8
  %15 = alloca { ptr }, align 8
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i1, align 1
  %.reg2mem6 = alloca i32, align 4
  %.reg2mem11 = alloca ptr, align 8
  %.reg2mem13 = alloca ptr, align 8
  %.reg2mem15 = alloca ptr, align 8
  %.reg2mem25 = alloca ptr, align 8
  %.reg2mem28 = alloca ptr, align 8
  %.reg2mem31 = alloca ptr, align 8
  %.reg2mem34 = alloca ptr, align 8
  %.reg2mem37 = alloca ptr, align 8
  %.reg2mem40 = alloca i32, align 4
  %.reg2mem42 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @IntArray)
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %37 = load ptr, ptr %36, align 8
  %38 = load ptr, ptr %23, align 8
  %39 = call ptr @llvm.invariant.start.p0(i64 616, ptr %38)
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %41 = load i32, ptr %40, align 4
  %42 = getelementptr ptr, ptr %38, i32 %41
  %43 = getelementptr ptr, ptr %42, i32 1
  %44 = load ptr, ptr %43, align 8
  %45 = getelementptr { ptr, ptr }, ptr %44, i32 0, i32 0
  %46 = load ptr, ptr %45, align 8
  %47 = call i32 %46(ptr %37) #16
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = load ptr, ptr %23, align 8
  %51 = call ptr @llvm.invariant.start.p0(i64 616, ptr %50)
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %53 = load i32, ptr %52, align 4
  %54 = getelementptr ptr, ptr %50, i32 %53
  %55 = getelementptr ptr, ptr %54, i32 2
  %56 = load ptr, ptr %55, align 8
  %57 = getelementptr { ptr, ptr }, ptr %56, i32 0, i32 0
  %58 = load ptr, ptr %57, align 8
  %59 = call i32 %58(ptr %49) #16
  %60 = icmp slt i32 %47, %59
  %61 = select i1 %60, ptr %5, ptr %15
  store ptr %61, ptr %.reg2mem37, align 8
  %62 = select i1 %60, ptr %6, ptr %16
  store ptr %62, ptr %.reg2mem34, align 8
  %63 = select i1 %60, ptr %7, ptr %17
  store ptr %63, ptr %.reg2mem31, align 8
  %64 = select i1 %60, ptr %8, ptr %18
  store ptr %64, ptr %.reg2mem28, align 8
  %65 = select i1 %60, ptr %9, ptr %19
  store ptr %65, ptr %.reg2mem25, align 8
  %66 = select i1 %60, ptr %10, ptr %20
  store ptr %66, ptr %.reg2mem15, align 8
  br i1 %60, label %67, label %68

67:                                               ; preds = %4
  br label %175

68:                                               ; preds = %4
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %70 = load ptr, ptr %69, align 8
  %71 = load ptr, ptr %23, align 8
  %72 = call ptr @llvm.invariant.start.p0(i64 616, ptr %71)
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %74 = load i32, ptr %73, align 4
  %75 = getelementptr ptr, ptr %71, i32 %74
  %76 = getelementptr ptr, ptr %75, i32 2
  %77 = load ptr, ptr %76, align 8
  %78 = getelementptr { ptr, ptr }, ptr %77, i32 0, i32 0
  %79 = load ptr, ptr %78, align 8
  %80 = call i32 %79(ptr %70) #16
  %81 = mul i32 %80, 2
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %83 = load ptr, ptr %82, align 8
  %84 = load ptr, ptr %23, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 616, ptr %84)
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %87 = load i32, ptr %86, align 4
  %88 = getelementptr ptr, ptr %84, i32 %87
  %89 = getelementptr ptr, ptr %88, i32 2
  %90 = load ptr, ptr %89, align 8
  %91 = getelementptr { ptr, ptr }, ptr %90, i32 0, i32 1
  %92 = load ptr, ptr %91, align 8
  call void %92(ptr %83, i32 %81) #15
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %94 = load ptr, ptr %93, align 8
  %95 = load ptr, ptr %23, align 8
  %96 = call ptr @llvm.invariant.start.p0(i64 616, ptr %95)
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %98 = load i32, ptr %97, align 4
  %99 = getelementptr ptr, ptr %95, i32 %98
  %100 = load ptr, ptr %99, align 8
  %101 = getelementptr { ptr, ptr }, ptr %100, i32 0, i32 0
  %102 = load ptr, ptr %101, align 8
  %103 = call { ptr } %102(ptr %94) #16
  store { ptr } %103, ptr %11, align 8
  %104 = getelementptr { ptr }, ptr %12, i32 0, i32 0
  %105 = load ptr, ptr %11, align 8
  store ptr %105, ptr %104, align 8
  %106 = call ptr @llvm.invariant.start.p0(i64 16, ptr %12)
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %108 = load ptr, ptr %107, align 8
  %109 = load ptr, ptr %23, align 8
  %110 = call ptr @llvm.invariant.start.p0(i64 616, ptr %109)
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %112 = load i32, ptr %111, align 4
  %113 = getelementptr ptr, ptr %109, i32 %112
  %114 = getelementptr ptr, ptr %113, i32 2
  %115 = load ptr, ptr %114, align 8
  %116 = getelementptr { ptr, ptr }, ptr %115, i32 0, i32 0
  %117 = load ptr, ptr %116, align 8
  %118 = call i32 %117(ptr %108) #16
  %119 = sext i32 %118 to i64
  %120 = mul i64 %119, ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64)
  %121 = call ptr @bump_malloc(i64 %120)
  store ptr %121, ptr %13, align 8
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %123 = load ptr, ptr %122, align 8
  %124 = load ptr, ptr %23, align 8
  %125 = call ptr @llvm.invariant.start.p0(i64 616, ptr %124)
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %127 = load i32, ptr %126, align 4
  %128 = getelementptr ptr, ptr %124, i32 %127
  %129 = load ptr, ptr %128, align 8
  %130 = getelementptr { ptr, ptr }, ptr %129, i32 0, i32 1
  %131 = load ptr, ptr %130, align 8
  %132 = getelementptr { ptr }, ptr %13, i32 0, i32 0
  %133 = load ptr, ptr %132, align 8
  %134 = insertvalue { ptr } undef, ptr %133, 0
  call void %131(ptr %123, { ptr } %134) #15
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  store ptr %135, ptr %.reg2mem13, align 8
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  store ptr %136, ptr %.reg2mem11, align 8
  store i32 0, ptr %.reg2mem42, align 4
  br label %137

137:                                              ; preds = %._crit_edge, %68
  %.reload43 = load i32, ptr %.reg2mem42, align 4
  store i32 %.reload43, ptr %.reg2mem6, align 4
  %.reload14 = load ptr, ptr %.reg2mem13, align 8
  %138 = load ptr, ptr %.reload14, align 8
  %139 = load ptr, ptr %23, align 8
  %140 = call ptr @llvm.invariant.start.p0(i64 616, ptr %139)
  %.reload12 = load ptr, ptr %.reg2mem11, align 8
  %141 = load i32, ptr %.reload12, align 4
  %142 = getelementptr ptr, ptr %139, i32 %141
  %143 = getelementptr ptr, ptr %142, i32 1
  %144 = load ptr, ptr %143, align 8
  %145 = getelementptr { ptr, ptr }, ptr %144, i32 0, i32 0
  %146 = load ptr, ptr %145, align 8
  %147 = call i32 %146(ptr %138) #16
  %.reload10 = load i32, ptr %.reg2mem6, align 4
  %148 = icmp slt i32 %.reload10, %147
  store i1 %148, ptr %.reg2mem3, align 1
  %.reload5 = load i1, ptr %.reg2mem3, align 1
  br i1 %.reload5, label %149, label %171

149:                                              ; preds = %137
  %150 = load ptr, ptr %12, align 8
  %.reload9 = load i32, ptr %.reg2mem6, align 4
  %151 = sext i32 %.reload9 to i64
  %152 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %151
  %153 = getelementptr i8, ptr %150, i64 %152
  %154 = load i32, ptr %153, align 4
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %156 = load ptr, ptr %155, align 8
  %157 = load ptr, ptr %23, align 8
  %158 = call ptr @llvm.invariant.start.p0(i64 616, ptr %157)
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %160 = load i32, ptr %159, align 4
  %161 = getelementptr ptr, ptr %157, i32 %160
  %162 = load ptr, ptr %161, align 8
  %163 = getelementptr { ptr, ptr }, ptr %162, i32 0, i32 0
  %164 = load ptr, ptr %163, align 8
  %165 = call { ptr } %164(ptr %156) #16
  store { ptr } %165, ptr %14, align 8
  %166 = load ptr, ptr %14, align 8
  %.reload8 = load i32, ptr %.reg2mem6, align 4
  %167 = sext i32 %.reload8 to i64
  %168 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %167
  %169 = getelementptr i8, ptr %166, i64 %168
  store i32 %154, ptr %169, align 4
  %.reload7 = load i32, ptr %.reg2mem6, align 4
  %170 = add i32 %.reload7, 1
  store i32 %170, ptr %.reg2mem1, align 4
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem40, align 4
  br label %172

171:                                              ; preds = %137
  store i32 poison, ptr %.reg2mem40, align 4
  br label %172

172:                                              ; preds = %171, %149
  %.reload41 = load i32, ptr %.reg2mem40, align 4
  store i32 %.reload41, ptr %.reg2mem, align 4
  br label %173

173:                                              ; preds = %172
  %.reload4 = load i1, ptr %.reg2mem3, align 1
  br i1 %.reload4, label %._crit_edge, label %174

._crit_edge:                                      ; preds = %173
  %.reload = load i32, ptr %.reg2mem, align 4
  store i32 %.reload, ptr %.reg2mem42, align 4
  br label %137

174:                                              ; preds = %173
  br label %175

175:                                              ; preds = %174, %67
  %176 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %177 = load ptr, ptr %176, align 8
  %178 = load ptr, ptr %23, align 8
  %179 = call ptr @llvm.invariant.start.p0(i64 616, ptr %178)
  %180 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %181 = load i32, ptr %180, align 4
  %182 = getelementptr ptr, ptr %178, i32 %181
  %183 = load ptr, ptr %182, align 8
  %184 = getelementptr { ptr, ptr }, ptr %183, i32 0, i32 0
  %185 = load ptr, ptr %184, align 8
  %186 = call { ptr } %185(ptr %177) #16
  %.reload39 = load ptr, ptr %.reg2mem37, align 8
  store { ptr } %186, ptr %.reload39, align 8
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %188 = load ptr, ptr %187, align 8
  %189 = load ptr, ptr %23, align 8
  %190 = call ptr @llvm.invariant.start.p0(i64 616, ptr %189)
  %191 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %192 = load i32, ptr %191, align 4
  %193 = getelementptr ptr, ptr %189, i32 %192
  %194 = getelementptr ptr, ptr %193, i32 1
  %195 = load ptr, ptr %194, align 8
  %196 = getelementptr { ptr, ptr }, ptr %195, i32 0, i32 0
  %197 = load ptr, ptr %196, align 8
  %198 = call i32 %197(ptr %188) #16
  %.reload36 = load ptr, ptr %.reg2mem34, align 8
  store i32 %198, ptr %.reload36, align 4
  %.reload38 = load ptr, ptr %.reg2mem37, align 8
  %199 = load ptr, ptr %.reload38, align 8
  %.reload35 = load ptr, ptr %.reg2mem34, align 8
  %200 = load i32, ptr %.reload35, align 4
  %201 = sext i32 %200 to i64
  %202 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %201
  %203 = getelementptr i8, ptr %199, i64 %202
  store i32 %3, ptr %203, align 4
  %204 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %205 = load ptr, ptr %204, align 8
  %206 = load ptr, ptr %23, align 8
  %207 = call ptr @llvm.invariant.start.p0(i64 616, ptr %206)
  %208 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %209 = load i32, ptr %208, align 4
  %210 = getelementptr ptr, ptr %206, i32 %209
  %211 = getelementptr ptr, ptr %210, i32 1
  %212 = load ptr, ptr %211, align 8
  %213 = getelementptr { ptr, ptr }, ptr %212, i32 0, i32 0
  %214 = load ptr, ptr %213, align 8
  %215 = call i32 %214(ptr %205) #16
  %.reload33 = load ptr, ptr %.reg2mem31, align 8
  store i32 %215, ptr %.reload33, align 4
  %.reload30 = load ptr, ptr %.reg2mem28, align 8
  store i32 1, ptr %.reload30, align 4
  %.reload32 = load ptr, ptr %.reg2mem31, align 8
  %216 = load i32, ptr %.reload32, align 4
  %.reload29 = load ptr, ptr %.reg2mem28, align 8
  %217 = load i32, ptr %.reload29, align 4
  %218 = add i32 %216, %217
  %.reload27 = load ptr, ptr %.reg2mem25, align 8
  store i32 %218, ptr %.reload27, align 4
  %219 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %220 = load ptr, ptr %219, align 8
  %221 = load ptr, ptr %23, align 8
  %222 = call ptr @llvm.invariant.start.p0(i64 616, ptr %221)
  %223 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %224 = load i32, ptr %223, align 4
  %225 = getelementptr ptr, ptr %221, i32 %224
  %226 = getelementptr ptr, ptr %225, i32 1
  %227 = load ptr, ptr %226, align 8
  %228 = getelementptr { ptr, ptr }, ptr %227, i32 0, i32 1
  %229 = load ptr, ptr %228, align 8
  %.reload26 = load ptr, ptr %.reg2mem25, align 8
  %230 = load i32, ptr %.reload26, align 4
  call void %229(ptr %220, i32 %230) #15
  %231 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %.reload24 = load ptr, ptr %.reg2mem15, align 8
  %232 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload24, i32 0, i32 0
  %233 = load ptr, ptr %231, align 8
  store ptr %233, ptr %232, align 8
  %234 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %.reload23 = load ptr, ptr %.reg2mem15, align 8
  %235 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload23, i32 0, i32 1
  %236 = load ptr, ptr %234, align 8
  store ptr %236, ptr %235, align 8
  %237 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %.reload22 = load ptr, ptr %.reg2mem15, align 8
  %238 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload22, i32 0, i32 2
  %239 = load ptr, ptr %237, align 8
  store ptr %239, ptr %238, align 8
  %240 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %.reload21 = load ptr, ptr %.reg2mem15, align 8
  %241 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload21, i32 0, i32 3
  %242 = load i32, ptr %240, align 4
  store i32 %242, ptr %241, align 4
  %.reload20 = load ptr, ptr %.reg2mem15, align 8
  call void @set_offset(ptr %.reload20, ptr @IntArray)
  %.reload19 = load ptr, ptr %.reg2mem15, align 8
  %243 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload19, i32 0, i32 0
  %244 = load ptr, ptr %243, align 8
  %245 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %244, 0
  %.reload18 = load ptr, ptr %.reg2mem15, align 8
  %246 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload18, i32 0, i32 1
  %247 = load ptr, ptr %246, align 8
  %248 = insertvalue { ptr, ptr, ptr, i32 } %245, ptr %247, 1
  %.reload17 = load ptr, ptr %.reg2mem15, align 8
  %249 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload17, i32 0, i32 2
  %250 = load ptr, ptr %249, align 8
  %251 = insertvalue { ptr, ptr, ptr, i32 } %248, ptr %250, 2
  %.reload16 = load ptr, ptr %.reg2mem15, align 8
  %252 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload16, i32 0, i32 3
  %253 = load i32, ptr %252, align 4
  %254 = insertvalue { ptr, ptr, ptr, i32 } %251, i32 %253, 3
  ret { ptr, ptr, ptr, i32 } %254
}

define { ptr, ptr, ptr, i32 } @IntArray_extend_aryIntArray({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca ptr, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = alloca ptr, align 8
  %10 = alloca { ptr }, align 8
  %11 = alloca ptr, align 8
  %12 = alloca ptr, align 8
  %13 = alloca ptr, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca { ptr, ptr, ptr, i32 }, align 8
  %17 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem2 = alloca i32, align 4
  %.reg2mem4 = alloca i32, align 4
  %.reg2mem6 = alloca i32, align 4
  %.reg2mem8 = alloca i32, align 4
  %.reg2mem10 = alloca i32, align 4
  %.reg2mem12 = alloca i32, align 4
  %.reg2mem14 = alloca i1, align 1
  %.reg2mem17 = alloca i32, align 4
  %.reg2mem21 = alloca i32, align 4
  %.reg2mem29 = alloca ptr, align 8
  %.reg2mem31 = alloca ptr, align 8
  %.reg2mem33 = alloca i32, align 4
  %.reg2mem35 = alloca i32, align 4
  %.reg2mem37 = alloca i32, align 4
  %.reg2mem39 = alloca i32, align 4
  %.reg2mem41 = alloca i1, align 1
  %.reg2mem44 = alloca i32, align 4
  %.reg2mem47 = alloca i32, align 4
  %.reg2mem51 = alloca ptr, align 8
  %.reg2mem53 = alloca ptr, align 8
  %.reg2mem55 = alloca i32, align 4
  %.reg2mem57 = alloca ptr, align 8
  %.reg2mem67 = alloca ptr, align 8
  %.reg2mem70 = alloca ptr, align 8
  %.reg2mem73 = alloca i32, align 4
  %.reg2mem79 = alloca i32, align 4
  %.reg2mem81 = alloca i32, align 4
  %.reg2mem83 = alloca i32, align 4
  %.reg2mem85 = alloca i32, align 4
  %.reg2mem87 = alloca i32, align 4
  %.reg2mem89 = alloca i32, align 4
  %.reg2mem91 = alloca i32, align 4
  %.reg2mem93 = alloca i32, align 4
  %.reg2mem95 = alloca i32, align 4
  %.reg2mem97 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %17, align 8
  %18 = call ptr @llvm.invariant.start.p0(i64 16, ptr %17)
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 0
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 2
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = load i32, ptr %29, align 4
  store i32 %31, ptr %30, align 4
  call void @set_offset(ptr %19, ptr @IntArray)
  %32 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %32, align 8
  %33 = call ptr @llvm.invariant.start.p0(i64 16, ptr %32)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 0
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %37 = load ptr, ptr %35, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 1
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %40 = load ptr, ptr %38, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 2
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %43 = load ptr, ptr %41, align 8
  store ptr %43, ptr %42, align 8
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 3
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %46 = load i32, ptr %44, align 4
  store i32 %46, ptr %45, align 4
  call void @set_offset(ptr %34, ptr @IntArray)
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %48 = load ptr, ptr %47, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %48, 0
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } %49, ptr %51, 1
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %54 = load ptr, ptr %53, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %54, 2
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %57 = load i32, ptr %56, align 4
  %58 = insertvalue { ptr, ptr, ptr, i32 } %55, i32 %57, 3
  %59 = alloca [0 x ptr], align 8
  %60 = call ptr @llvm.invariant.start.p0(i64 0, ptr %59)
  %61 = call ptr @llvm.invariant.start.p0(i64 616, ptr %48)
  %62 = getelementptr ptr, ptr %48, i32 %57
  %63 = getelementptr ptr, ptr %62, i32 8
  %64 = load ptr, ptr %63, align 8
  %65 = alloca {}, align 8
  %66 = call ptr @behavior_wrapper(ptr %64, { ptr, ptr, ptr, i32 } %58, ptr %65)
  %67 = call { ptr } %66({ ptr, ptr, ptr, i32 } %58, { ptr, ptr, ptr, i32 } %58, ptr %59)
  %68 = alloca ptr, align 8
  store { ptr } %67, ptr %68, align 8
  %69 = alloca { ptr }, align 8
  %70 = getelementptr { ptr }, ptr %69, i32 0, i32 0
  %71 = load ptr, ptr %68, align 8
  store ptr %71, ptr %70, align 8
  %72 = call ptr @llvm.invariant.start.p0(i64 16, ptr %69)
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 0
  %74 = load ptr, ptr %73, align 8
  %75 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %74, 0
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 1
  %77 = load ptr, ptr %76, align 8
  %78 = insertvalue { ptr, ptr, ptr, i32 } %75, ptr %77, 1
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 2
  %80 = load ptr, ptr %79, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } %78, ptr %80, 2
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %34, i32 0, i32 3
  %83 = load i32, ptr %82, align 4
  %84 = insertvalue { ptr, ptr, ptr, i32 } %81, i32 %83, 3
  %85 = alloca [0 x ptr], align 8
  %86 = call ptr @llvm.invariant.start.p0(i64 0, ptr %85)
  %87 = call ptr @llvm.invariant.start.p0(i64 616, ptr %74)
  %88 = getelementptr ptr, ptr %74, i32 %83
  %89 = getelementptr ptr, ptr %88, i32 6
  %90 = load ptr, ptr %89, align 8
  %91 = alloca {}, align 8
  %92 = call ptr @behavior_wrapper(ptr %90, { ptr, ptr, ptr, i32 } %84, ptr %91)
  %93 = call i32 %92({ ptr, ptr, ptr, i32 } %84, { ptr, ptr, ptr, i32 } %84, ptr %85)
  store i32 %93, ptr %.reg2mem73, align 4
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %95 = load ptr, ptr %94, align 8
  %96 = load ptr, ptr %19, align 8
  %97 = call ptr @llvm.invariant.start.p0(i64 616, ptr %96)
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %99 = load i32, ptr %98, align 4
  %100 = getelementptr ptr, ptr %96, i32 %99
  %101 = getelementptr ptr, ptr %100, i32 1
  %102 = load ptr, ptr %101, align 8
  %103 = getelementptr { ptr, ptr }, ptr %102, i32 0, i32 0
  %104 = load ptr, ptr %103, align 8
  %105 = call i32 %104(ptr %95) #16
  %.reload78 = load i32, ptr %.reg2mem73, align 4
  %106 = add i32 %105, %.reload78
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %108 = load ptr, ptr %107, align 8
  %109 = load ptr, ptr %19, align 8
  %110 = call ptr @llvm.invariant.start.p0(i64 616, ptr %109)
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %112 = load i32, ptr %111, align 4
  %113 = getelementptr ptr, ptr %109, i32 %112
  %114 = getelementptr ptr, ptr %113, i32 2
  %115 = load ptr, ptr %114, align 8
  %116 = getelementptr { ptr, ptr }, ptr %115, i32 0, i32 0
  %117 = load ptr, ptr %116, align 8
  %118 = call i32 %117(ptr %108) #16
  %119 = icmp slt i32 %106, %118
  %120 = select i1 %119, ptr %6, ptr %14
  store ptr %120, ptr %.reg2mem70, align 8
  %121 = select i1 %119, ptr %7, ptr %15
  store ptr %121, ptr %.reg2mem67, align 8
  %122 = select i1 %119, ptr %8, ptr %16
  store ptr %122, ptr %.reg2mem57, align 8
  br i1 %119, label %123, label %178

123:                                              ; preds = %4
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %125 = load ptr, ptr %124, align 8
  %126 = load ptr, ptr %19, align 8
  %127 = call ptr @llvm.invariant.start.p0(i64 616, ptr %126)
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %129 = load i32, ptr %128, align 4
  %130 = getelementptr ptr, ptr %126, i32 %129
  %131 = getelementptr ptr, ptr %130, i32 1
  %132 = load ptr, ptr %131, align 8
  %133 = getelementptr { ptr, ptr }, ptr %132, i32 0, i32 0
  %134 = load ptr, ptr %133, align 8
  %135 = call i32 %134(ptr %125) #16
  store i32 %135, ptr %.reg2mem55, align 4
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  store ptr %136, ptr %.reg2mem53, align 8
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  store ptr %137, ptr %.reg2mem51, align 8
  %.reload56 = load i32, ptr %.reg2mem55, align 4
  store i32 0, ptr %.reg2mem95, align 4
  store i32 %.reload56, ptr %.reg2mem97, align 4
  br label %138

138:                                              ; preds = %._crit_edge, %123
  %.reload98 = load i32, ptr %.reg2mem97, align 4
  %.reload96 = load i32, ptr %.reg2mem95, align 4
  store i32 %.reload98, ptr %.reg2mem47, align 4
  store i32 %.reload96, ptr %.reg2mem44, align 4
  %.reload54 = load ptr, ptr %.reg2mem53, align 8
  %139 = load ptr, ptr %.reload54, align 8
  %140 = load ptr, ptr %19, align 8
  %141 = call ptr @llvm.invariant.start.p0(i64 616, ptr %140)
  %.reload52 = load ptr, ptr %.reg2mem51, align 8
  %142 = load i32, ptr %.reload52, align 4
  %143 = getelementptr ptr, ptr %140, i32 %142
  %144 = getelementptr ptr, ptr %143, i32 1
  %145 = load ptr, ptr %144, align 8
  %146 = getelementptr { ptr, ptr }, ptr %145, i32 0, i32 0
  %147 = load ptr, ptr %146, align 8
  %148 = call i32 %147(ptr %139) #16
  %.reload77 = load i32, ptr %.reg2mem73, align 4
  %149 = add i32 %148, %.reload77
  %.reload50 = load i32, ptr %.reg2mem47, align 4
  %150 = icmp slt i32 %.reload50, %149
  store i1 %150, ptr %.reg2mem41, align 1
  %.reload43 = load i1, ptr %.reg2mem41, align 1
  br i1 %.reload43, label %151, label %174

151:                                              ; preds = %138
  %152 = load ptr, ptr %69, align 8
  %.reload46 = load i32, ptr %.reg2mem44, align 4
  %153 = sext i32 %.reload46 to i64
  %154 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %153
  %155 = getelementptr i8, ptr %152, i64 %154
  %156 = load i32, ptr %155, align 4
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %158 = load ptr, ptr %157, align 8
  %159 = load ptr, ptr %19, align 8
  %160 = call ptr @llvm.invariant.start.p0(i64 616, ptr %159)
  %161 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %162 = load i32, ptr %161, align 4
  %163 = getelementptr ptr, ptr %159, i32 %162
  %164 = load ptr, ptr %163, align 8
  %165 = getelementptr { ptr, ptr }, ptr %164, i32 0, i32 0
  %166 = load ptr, ptr %165, align 8
  %167 = call { ptr } %166(ptr %158) #16
  store { ptr } %167, ptr %5, align 8
  %168 = load ptr, ptr %5, align 8
  %.reload49 = load i32, ptr %.reg2mem47, align 4
  %169 = sext i32 %.reload49 to i64
  %170 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %169
  %171 = getelementptr i8, ptr %168, i64 %170
  store i32 %156, ptr %171, align 4
  %.reload48 = load i32, ptr %.reg2mem47, align 4
  %172 = add i32 %.reload48, 1
  store i32 %172, ptr %.reg2mem39, align 4
  %.reload45 = load i32, ptr %.reg2mem44, align 4
  %173 = add i32 %.reload45, 1
  store i32 %173, ptr %.reg2mem37, align 4
  %.reload38 = load i32, ptr %.reg2mem37, align 4
  %.reload40 = load i32, ptr %.reg2mem39, align 4
  store i32 %.reload38, ptr %.reg2mem91, align 4
  store i32 %.reload40, ptr %.reg2mem93, align 4
  br label %175

174:                                              ; preds = %138
  store i32 poison, ptr %.reg2mem91, align 4
  store i32 poison, ptr %.reg2mem93, align 4
  br label %175

175:                                              ; preds = %174, %151
  %.reload94 = load i32, ptr %.reg2mem93, align 4
  %.reload92 = load i32, ptr %.reg2mem91, align 4
  store i32 %.reload94, ptr %.reg2mem35, align 4
  store i32 %.reload92, ptr %.reg2mem33, align 4
  br label %176

176:                                              ; preds = %175
  %.reload42 = load i1, ptr %.reg2mem41, align 1
  br i1 %.reload42, label %._crit_edge, label %177

._crit_edge:                                      ; preds = %176
  %.reload34 = load i32, ptr %.reg2mem33, align 4
  %.reload36 = load i32, ptr %.reg2mem35, align 4
  store i32 %.reload34, ptr %.reg2mem95, align 4
  store i32 %.reload36, ptr %.reg2mem97, align 4
  br label %138

177:                                              ; preds = %176
  br label %325

178:                                              ; preds = %4
  %179 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %180 = load ptr, ptr %179, align 8
  %181 = load ptr, ptr %19, align 8
  %182 = call ptr @llvm.invariant.start.p0(i64 616, ptr %181)
  %183 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %184 = load i32, ptr %183, align 4
  %185 = getelementptr ptr, ptr %181, i32 %184
  %186 = getelementptr ptr, ptr %185, i32 1
  %187 = load ptr, ptr %186, align 8
  %188 = getelementptr { ptr, ptr }, ptr %187, i32 0, i32 0
  %189 = load ptr, ptr %188, align 8
  %190 = call i32 %189(ptr %180) #16
  %.reload76 = load i32, ptr %.reg2mem73, align 4
  %191 = add i32 %190, %.reload76
  %192 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %193 = load ptr, ptr %192, align 8
  %194 = load ptr, ptr %19, align 8
  %195 = call ptr @llvm.invariant.start.p0(i64 616, ptr %194)
  %196 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %197 = load i32, ptr %196, align 4
  %198 = getelementptr ptr, ptr %194, i32 %197
  %199 = getelementptr ptr, ptr %198, i32 2
  %200 = load ptr, ptr %199, align 8
  %201 = getelementptr { ptr, ptr }, ptr %200, i32 0, i32 1
  %202 = load ptr, ptr %201, align 8
  call void %202(ptr %193, i32 %191) #15
  %203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %204 = load ptr, ptr %203, align 8
  %205 = load ptr, ptr %19, align 8
  %206 = call ptr @llvm.invariant.start.p0(i64 616, ptr %205)
  %207 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %208 = load i32, ptr %207, align 4
  %209 = getelementptr ptr, ptr %205, i32 %208
  %210 = load ptr, ptr %209, align 8
  %211 = getelementptr { ptr, ptr }, ptr %210, i32 0, i32 0
  %212 = load ptr, ptr %211, align 8
  %213 = call { ptr } %212(ptr %204) #16
  store { ptr } %213, ptr %9, align 8
  %214 = getelementptr { ptr }, ptr %10, i32 0, i32 0
  %215 = load ptr, ptr %9, align 8
  store ptr %215, ptr %214, align 8
  %216 = call ptr @llvm.invariant.start.p0(i64 16, ptr %10)
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %218 = load ptr, ptr %217, align 8
  %219 = load ptr, ptr %19, align 8
  %220 = call ptr @llvm.invariant.start.p0(i64 616, ptr %219)
  %221 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %222 = load i32, ptr %221, align 4
  %223 = getelementptr ptr, ptr %219, i32 %222
  %224 = getelementptr ptr, ptr %223, i32 2
  %225 = load ptr, ptr %224, align 8
  %226 = getelementptr { ptr, ptr }, ptr %225, i32 0, i32 0
  %227 = load ptr, ptr %226, align 8
  %228 = call i32 %227(ptr %218) #16
  %229 = sext i32 %228 to i64
  %230 = mul i64 %229, ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64)
  %231 = call ptr @bump_malloc(i64 %230)
  store ptr %231, ptr %11, align 8
  %232 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %233 = load ptr, ptr %232, align 8
  %234 = load ptr, ptr %19, align 8
  %235 = call ptr @llvm.invariant.start.p0(i64 616, ptr %234)
  %236 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %237 = load i32, ptr %236, align 4
  %238 = getelementptr ptr, ptr %234, i32 %237
  %239 = load ptr, ptr %238, align 8
  %240 = getelementptr { ptr, ptr }, ptr %239, i32 0, i32 1
  %241 = load ptr, ptr %240, align 8
  %242 = getelementptr { ptr }, ptr %11, i32 0, i32 0
  %243 = load ptr, ptr %242, align 8
  %244 = insertvalue { ptr } undef, ptr %243, 0
  call void %241(ptr %233, { ptr } %244) #15
  %245 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  store ptr %245, ptr %.reg2mem31, align 8
  %246 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  store ptr %246, ptr %.reg2mem29, align 8
  store i32 0, ptr %.reg2mem87, align 4
  store i32 0, ptr %.reg2mem89, align 4
  br label %247

247:                                              ; preds = %._crit_edge1, %178
  %.reload90 = load i32, ptr %.reg2mem89, align 4
  %.reload88 = load i32, ptr %.reg2mem87, align 4
  store i32 %.reload90, ptr %.reg2mem21, align 4
  store i32 %.reload88, ptr %.reg2mem17, align 4
  %.reload32 = load ptr, ptr %.reg2mem31, align 8
  %248 = load ptr, ptr %.reload32, align 8
  %249 = load ptr, ptr %19, align 8
  %250 = call ptr @llvm.invariant.start.p0(i64 616, ptr %249)
  %.reload30 = load ptr, ptr %.reg2mem29, align 8
  %251 = load i32, ptr %.reload30, align 4
  %252 = getelementptr ptr, ptr %249, i32 %251
  %253 = getelementptr ptr, ptr %252, i32 1
  %254 = load ptr, ptr %253, align 8
  %255 = getelementptr { ptr, ptr }, ptr %254, i32 0, i32 0
  %256 = load ptr, ptr %255, align 8
  %257 = call i32 %256(ptr %248) #16
  %.reload75 = load i32, ptr %.reg2mem73, align 4
  %258 = add i32 %257, %.reload75
  %.reload28 = load i32, ptr %.reg2mem21, align 4
  %259 = icmp slt i32 %.reload28, %258
  store i1 %259, ptr %.reg2mem14, align 1
  %.reload16 = load i1, ptr %.reg2mem14, align 1
  br i1 %.reload16, label %260, label %321

260:                                              ; preds = %247
  %261 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %262 = load ptr, ptr %261, align 8
  %263 = load ptr, ptr %19, align 8
  %264 = call ptr @llvm.invariant.start.p0(i64 616, ptr %263)
  %265 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %266 = load i32, ptr %265, align 4
  %267 = getelementptr ptr, ptr %263, i32 %266
  %268 = getelementptr ptr, ptr %267, i32 1
  %269 = load ptr, ptr %268, align 8
  %270 = getelementptr { ptr, ptr }, ptr %269, i32 0, i32 0
  %271 = load ptr, ptr %270, align 8
  %272 = call i32 %271(ptr %262) #16
  %.reload27 = load i32, ptr %.reg2mem21, align 4
  %273 = icmp slt i32 %.reload27, %272
  br i1 %273, label %274, label %296

274:                                              ; preds = %260
  %275 = load ptr, ptr %10, align 8
  %.reload26 = load i32, ptr %.reg2mem21, align 4
  %276 = sext i32 %.reload26 to i64
  %277 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %276
  %278 = getelementptr i8, ptr %275, i64 %277
  %279 = load i32, ptr %278, align 4
  %280 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %281 = load ptr, ptr %280, align 8
  %282 = load ptr, ptr %19, align 8
  %283 = call ptr @llvm.invariant.start.p0(i64 616, ptr %282)
  %284 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %285 = load i32, ptr %284, align 4
  %286 = getelementptr ptr, ptr %282, i32 %285
  %287 = load ptr, ptr %286, align 8
  %288 = getelementptr { ptr, ptr }, ptr %287, i32 0, i32 0
  %289 = load ptr, ptr %288, align 8
  %290 = call { ptr } %289(ptr %281) #16
  store { ptr } %290, ptr %12, align 8
  %291 = load ptr, ptr %12, align 8
  %.reload25 = load i32, ptr %.reg2mem21, align 4
  %292 = sext i32 %.reload25 to i64
  %293 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %292
  %294 = getelementptr i8, ptr %291, i64 %293
  store i32 %279, ptr %294, align 4
  %.reload24 = load i32, ptr %.reg2mem21, align 4
  %295 = add i32 %.reload24, 1
  store i32 %295, ptr %.reg2mem12, align 4
  %.reload13 = load i32, ptr %.reg2mem12, align 4
  %.reload18 = load i32, ptr %.reg2mem17, align 4
  store i32 %.reload18, ptr %.reg2mem83, align 4
  store i32 %.reload13, ptr %.reg2mem85, align 4
  br label %319

296:                                              ; preds = %260
  %297 = load ptr, ptr %69, align 8
  %.reload20 = load i32, ptr %.reg2mem17, align 4
  %298 = sext i32 %.reload20 to i64
  %299 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %298
  %300 = getelementptr i8, ptr %297, i64 %299
  %301 = load i32, ptr %300, align 4
  %302 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %303 = load ptr, ptr %302, align 8
  %304 = load ptr, ptr %19, align 8
  %305 = call ptr @llvm.invariant.start.p0(i64 616, ptr %304)
  %306 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %307 = load i32, ptr %306, align 4
  %308 = getelementptr ptr, ptr %304, i32 %307
  %309 = load ptr, ptr %308, align 8
  %310 = getelementptr { ptr, ptr }, ptr %309, i32 0, i32 0
  %311 = load ptr, ptr %310, align 8
  %312 = call { ptr } %311(ptr %303) #16
  store { ptr } %312, ptr %13, align 8
  %313 = load ptr, ptr %13, align 8
  %.reload23 = load i32, ptr %.reg2mem21, align 4
  %314 = sext i32 %.reload23 to i64
  %315 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %314
  %316 = getelementptr i8, ptr %313, i64 %315
  store i32 %301, ptr %316, align 4
  %.reload22 = load i32, ptr %.reg2mem21, align 4
  %317 = add i32 %.reload22, 1
  store i32 %317, ptr %.reg2mem10, align 4
  %.reload19 = load i32, ptr %.reg2mem17, align 4
  %318 = add i32 %.reload19, 1
  store i32 %318, ptr %.reg2mem8, align 4
  %.reload9 = load i32, ptr %.reg2mem8, align 4
  %.reload11 = load i32, ptr %.reg2mem10, align 4
  store i32 %.reload9, ptr %.reg2mem83, align 4
  store i32 %.reload11, ptr %.reg2mem85, align 4
  br label %319

319:                                              ; preds = %296, %274
  %.reload86 = load i32, ptr %.reg2mem85, align 4
  %.reload84 = load i32, ptr %.reg2mem83, align 4
  store i32 %.reload86, ptr %.reg2mem6, align 4
  store i32 %.reload84, ptr %.reg2mem4, align 4
  br label %320

320:                                              ; preds = %319
  %.reload5 = load i32, ptr %.reg2mem4, align 4
  %.reload7 = load i32, ptr %.reg2mem6, align 4
  store i32 %.reload5, ptr %.reg2mem79, align 4
  store i32 %.reload7, ptr %.reg2mem81, align 4
  br label %322

321:                                              ; preds = %247
  store i32 poison, ptr %.reg2mem79, align 4
  store i32 poison, ptr %.reg2mem81, align 4
  br label %322

322:                                              ; preds = %321, %320
  %.reload82 = load i32, ptr %.reg2mem81, align 4
  %.reload80 = load i32, ptr %.reg2mem79, align 4
  store i32 %.reload82, ptr %.reg2mem2, align 4
  store i32 %.reload80, ptr %.reg2mem, align 4
  br label %323

323:                                              ; preds = %322
  %.reload15 = load i1, ptr %.reg2mem14, align 1
  br i1 %.reload15, label %._crit_edge1, label %324

._crit_edge1:                                     ; preds = %323
  %.reload = load i32, ptr %.reg2mem, align 4
  %.reload3 = load i32, ptr %.reg2mem2, align 4
  store i32 %.reload, ptr %.reg2mem87, align 4
  store i32 %.reload3, ptr %.reg2mem89, align 4
  br label %247

324:                                              ; preds = %323
  br label %325

325:                                              ; preds = %324, %177
  %326 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %327 = load ptr, ptr %326, align 8
  %328 = load ptr, ptr %19, align 8
  %329 = call ptr @llvm.invariant.start.p0(i64 616, ptr %328)
  %330 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %331 = load i32, ptr %330, align 4
  %332 = getelementptr ptr, ptr %328, i32 %331
  %333 = getelementptr ptr, ptr %332, i32 1
  %334 = load ptr, ptr %333, align 8
  %335 = getelementptr { ptr, ptr }, ptr %334, i32 0, i32 0
  %336 = load ptr, ptr %335, align 8
  %337 = call i32 %336(ptr %327) #16
  %.reload72 = load ptr, ptr %.reg2mem70, align 8
  store i32 %337, ptr %.reload72, align 4
  %.reload71 = load ptr, ptr %.reg2mem70, align 8
  %338 = load i32, ptr %.reload71, align 4
  %.reload74 = load i32, ptr %.reg2mem73, align 4
  %339 = add i32 %338, %.reload74
  %.reload69 = load ptr, ptr %.reg2mem67, align 8
  store i32 %339, ptr %.reload69, align 4
  %340 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %341 = load ptr, ptr %340, align 8
  %342 = load ptr, ptr %19, align 8
  %343 = call ptr @llvm.invariant.start.p0(i64 616, ptr %342)
  %344 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %345 = load i32, ptr %344, align 4
  %346 = getelementptr ptr, ptr %342, i32 %345
  %347 = getelementptr ptr, ptr %346, i32 1
  %348 = load ptr, ptr %347, align 8
  %349 = getelementptr { ptr, ptr }, ptr %348, i32 0, i32 1
  %350 = load ptr, ptr %349, align 8
  %.reload68 = load ptr, ptr %.reg2mem67, align 8
  %351 = load i32, ptr %.reload68, align 4
  call void %350(ptr %341, i32 %351) #15
  %352 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %.reload66 = load ptr, ptr %.reg2mem57, align 8
  %353 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload66, i32 0, i32 0
  %354 = load ptr, ptr %352, align 8
  store ptr %354, ptr %353, align 8
  %355 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %.reload65 = load ptr, ptr %.reg2mem57, align 8
  %356 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload65, i32 0, i32 1
  %357 = load ptr, ptr %355, align 8
  store ptr %357, ptr %356, align 8
  %358 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %.reload64 = load ptr, ptr %.reg2mem57, align 8
  %359 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload64, i32 0, i32 2
  %360 = load ptr, ptr %358, align 8
  store ptr %360, ptr %359, align 8
  %361 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %.reload63 = load ptr, ptr %.reg2mem57, align 8
  %362 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload63, i32 0, i32 3
  %363 = load i32, ptr %361, align 4
  store i32 %363, ptr %362, align 4
  %.reload62 = load ptr, ptr %.reg2mem57, align 8
  call void @set_offset(ptr %.reload62, ptr @IntArray)
  %.reload61 = load ptr, ptr %.reg2mem57, align 8
  %364 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload61, i32 0, i32 0
  %365 = load ptr, ptr %364, align 8
  %366 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %365, 0
  %.reload60 = load ptr, ptr %.reg2mem57, align 8
  %367 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload60, i32 0, i32 1
  %368 = load ptr, ptr %367, align 8
  %369 = insertvalue { ptr, ptr, ptr, i32 } %366, ptr %368, 1
  %.reload59 = load ptr, ptr %.reg2mem57, align 8
  %370 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload59, i32 0, i32 2
  %371 = load ptr, ptr %370, align 8
  %372 = insertvalue { ptr, ptr, ptr, i32 } %369, ptr %371, 2
  %.reload58 = load ptr, ptr %.reg2mem57, align 8
  %373 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload58, i32 0, i32 3
  %374 = load i32, ptr %373, align 4
  %375 = insertvalue { ptr, ptr, ptr, i32 } %372, i32 %374, 3
  ret { ptr, ptr, ptr, i32 } %375
}

define i32 @IntArray__index_xPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca [1 x ptr], align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = alloca [2 x ptr], align 8
  %8 = alloca { ptr, ptr }, align 8
  %9 = alloca ptr, align 8
  %10 = alloca { ptr }, align 8
  %11 = alloca [1 x ptr], align 8
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  %13 = alloca [3 x ptr], align 8
  %14 = alloca { ptr, ptr, ptr }, align 8
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  %16 = alloca [2 x ptr], align 8
  %17 = alloca { ptr, ptr }, align 8
  %18 = alloca ptr, align 8
  %19 = alloca [1 x ptr], align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = alloca [2 x ptr], align 8
  %22 = alloca { ptr, ptr }, align 8
  %23 = alloca ptr, align 8
  %24 = alloca { ptr }, align 8
  %25 = alloca [1 x ptr], align 8
  %26 = alloca { ptr, ptr, ptr, i32 }, align 8
  %27 = alloca [3 x ptr], align 8
  %28 = alloca { ptr, ptr, ptr }, align 8
  %29 = alloca { ptr, ptr, ptr, i32 }, align 8
  %30 = alloca [2 x ptr], align 8
  %31 = alloca { ptr, ptr }, align 8
  %32 = alloca ptr, align 8
  %33 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem2 = alloca i32, align 4
  %.reg2mem4 = alloca i32, align 4
  %.reg2mem6 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %33, align 8
  %34 = call ptr @llvm.invariant.start.p0(i64 16, ptr %33)
  %35 = alloca { ptr, ptr, ptr, i32 }, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 0
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %38 = load ptr, ptr %36, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 1
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %41 = load ptr, ptr %39, align 8
  store ptr %41, ptr %40, align 8
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 2
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %44 = load ptr, ptr %42, align 8
  store ptr %44, ptr %43, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 3
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %47 = load i32, ptr %45, align 4
  store i32 %47, ptr %46, align 4
  call void @set_offset(ptr %35, ptr @IntArray)
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = load ptr, ptr %35, align 8
  %51 = call ptr @llvm.invariant.start.p0(i64 616, ptr %50)
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %53 = load i32, ptr %52, align 4
  %54 = getelementptr ptr, ptr %50, i32 %53
  %55 = getelementptr ptr, ptr %54, i32 1
  %56 = load ptr, ptr %55, align 8
  %57 = getelementptr { ptr, ptr }, ptr %56, i32 0, i32 0
  %58 = load ptr, ptr %57, align 8
  %59 = call i32 %58(ptr %49) #16
  %60 = sub i32 %59, 1
  %61 = icmp sgt i32 %3, %60
  br i1 %61, label %62, label %._crit_edge

._crit_edge:                                      ; preds = %4
  br label %215

62:                                               ; preds = %4
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %64 = load ptr, ptr %63, align 8
  %65 = load ptr, ptr %35, align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 616, ptr %65)
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %68 = load i32, ptr %67, align 4
  %69 = getelementptr ptr, ptr %65, i32 %68
  %70 = getelementptr ptr, ptr %69, i32 1
  %71 = load ptr, ptr %70, align 8
  %72 = getelementptr { ptr, ptr }, ptr %71, i32 0, i32 0
  %73 = load ptr, ptr %72, align 8
  %74 = call i32 %73(ptr %64) #16
  store ptr @OutOfBounds, ptr %5, align 8
  %75 = load ptr, ptr %5, align 8
  %76 = getelementptr ptr, ptr %75, i32 6
  %77 = load ptr, ptr %76, align 8
  %78 = call { i64, i64 } @size_wrapper(ptr %77, ptr %5)
  %79 = extractvalue { i64, i64 } %78, 0
  %80 = call ptr @bump_malloc(i64 %79)
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  store ptr @OutOfBounds, ptr %6, align 8
  store ptr %80, ptr %81, align 8
  store i32 9, ptr %82, align 4
  %83 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %85 = load ptr, ptr %84, align 8
  %86 = load ptr, ptr %35, align 8
  %87 = call ptr @llvm.invariant.start.p0(i64 616, ptr %86)
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %89 = load i32, ptr %88, align 4
  %90 = getelementptr ptr, ptr %86, i32 %89
  %91 = getelementptr ptr, ptr %90, i32 1
  %92 = load ptr, ptr %91, align 8
  %93 = getelementptr { ptr, ptr }, ptr %92, i32 0, i32 0
  %94 = load ptr, ptr %93, align 8
  %95 = call i32 %94(ptr %85) #16
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %97 = load ptr, ptr %96, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %97, 0
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %100 = load ptr, ptr %99, align 8
  %101 = insertvalue { ptr, ptr, ptr, i32 } %98, ptr %100, 1
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %103 = load ptr, ptr %102, align 8
  %104 = insertvalue { ptr, ptr, ptr, i32 } %101, ptr %103, 2
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %106 = load i32, ptr %105, align 4
  %107 = insertvalue { ptr, ptr, ptr, i32 } %104, i32 %106, 3
  %108 = getelementptr [2 x ptr], ptr %7, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %108, align 8
  %109 = getelementptr [2 x ptr], ptr %7, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %109, align 8
  %110 = call ptr @llvm.invariant.start.p0(i64 4, ptr %7)
  %111 = call ptr @llvm.invariant.start.p0(i64 232, ptr %97)
  %112 = getelementptr ptr, ptr %97, i32 %106
  %113 = getelementptr ptr, ptr %112, i32 4
  %114 = load ptr, ptr %113, align 8
  %115 = getelementptr { ptr, ptr }, ptr %8, i32 0, i32 0
  store ptr @i32_typ, ptr %115, align 8
  %116 = getelementptr { ptr, ptr }, ptr %8, i32 0, i32 1
  store ptr @i32_typ, ptr %116, align 8
  %117 = call ptr @behavior_wrapper(ptr %114, { ptr, ptr, ptr, i32 } %107, ptr %8)
  call void %117({ ptr, ptr, ptr, i32 } %107, { ptr, ptr, ptr, i32 } %107, ptr %7, i32 %95, i32 %3)
  %118 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 11))
  store ptr %118, ptr %9, align 8
  %119 = getelementptr { ptr }, ptr %9, i32 0, i32 0
  %120 = getelementptr { ptr }, ptr %10, i32 0, i32 0
  %121 = load ptr, ptr %119, align 8
  store ptr %121, ptr %120, align 8
  %122 = call ptr @llvm.invariant.start.p0(i64 16, ptr %10)
  %123 = load ptr, ptr %10, align 8
  %124 = load [10 x i8], ptr @cbume_testsmini, align 1
  store [10 x i8] %124, ptr %123, align 1
  store ptr @String, ptr %11, align 8
  %125 = load ptr, ptr %11, align 8
  %126 = getelementptr ptr, ptr %125, i32 6
  %127 = load ptr, ptr %126, align 8
  %128 = call { i64, i64 } @size_wrapper(ptr %127, ptr %11)
  %129 = extractvalue { i64, i64 } %128, 0
  %130 = call ptr @bump_malloc(i64 %129)
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %132 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  store ptr @String, ptr %12, align 8
  store ptr %130, ptr %131, align 8
  store i32 9, ptr %132, align 4
  %133 = call ptr @llvm.invariant.start.p0(i64 16, ptr %12)
  %134 = getelementptr { ptr }, ptr %10, i32 0, i32 0
  %135 = load ptr, ptr %134, align 8
  %136 = insertvalue { ptr } undef, ptr %135, 0
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 0
  %138 = load ptr, ptr %137, align 8
  %139 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %138, 0
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %141 = load ptr, ptr %140, align 8
  %142 = insertvalue { ptr, ptr, ptr, i32 } %139, ptr %141, 1
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 2
  %144 = load ptr, ptr %143, align 8
  %145 = insertvalue { ptr, ptr, ptr, i32 } %142, ptr %144, 2
  %146 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  %147 = load i32, ptr %146, align 4
  %148 = insertvalue { ptr, ptr, ptr, i32 } %145, i32 %147, 3
  %149 = getelementptr [3 x ptr], ptr %13, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %149, align 8
  %150 = getelementptr [3 x ptr], ptr %13, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %150, align 8
  %151 = getelementptr [3 x ptr], ptr %13, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %151, align 8
  %152 = call ptr @llvm.invariant.start.p0(i64 9, ptr %13)
  %153 = call ptr @llvm.invariant.start.p0(i64 280, ptr %138)
  %154 = getelementptr ptr, ptr %138, i32 %147
  %155 = getelementptr ptr, ptr %154, i32 4
  %156 = load ptr, ptr %155, align 8
  %157 = getelementptr { ptr, ptr, ptr }, ptr %14, i32 0, i32 0
  store ptr @buffer_typ, ptr %157, align 8
  %158 = getelementptr { ptr, ptr, ptr }, ptr %14, i32 0, i32 1
  store ptr @i32_typ, ptr %158, align 8
  %159 = getelementptr { ptr, ptr, ptr }, ptr %14, i32 0, i32 2
  store ptr @i32_typ, ptr %159, align 8
  %160 = call ptr @behavior_wrapper(ptr %156, { ptr, ptr, ptr, i32 } %148, ptr %14)
  call void %160({ ptr, ptr, ptr, i32 } %148, { ptr, ptr, ptr, i32 } %148, ptr %13, { ptr } %136, i32 10, i32 11)
  %161 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 0
  %162 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %163 = load ptr, ptr %161, align 8
  store ptr %163, ptr %162, align 8
  %164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %166 = load ptr, ptr %164, align 8
  store ptr %166, ptr %165, align 8
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 2
  %168 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %169 = load ptr, ptr %167, align 8
  store ptr %169, ptr %168, align 8
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  %171 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %172 = load i32, ptr %170, align 4
  store i32 %172, ptr %171, align 4
  call void @set_offset(ptr %15, ptr @String)
  %173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %174 = load ptr, ptr %173, align 8
  %175 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %174, 0
  %176 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %177 = load ptr, ptr %176, align 8
  %178 = insertvalue { ptr, ptr, ptr, i32 } %175, ptr %177, 1
  %179 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %180 = load ptr, ptr %179, align 8
  %181 = insertvalue { ptr, ptr, ptr, i32 } %178, ptr %180, 2
  %182 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %183 = load i32, ptr %182, align 4
  %184 = insertvalue { ptr, ptr, ptr, i32 } %181, i32 %183, 3
  %185 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %186 = load ptr, ptr %185, align 8
  %187 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %186, 0
  %188 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %189 = load ptr, ptr %188, align 8
  %190 = insertvalue { ptr, ptr, ptr, i32 } %187, ptr %189, 1
  %191 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %192 = load ptr, ptr %191, align 8
  %193 = insertvalue { ptr, ptr, ptr, i32 } %190, ptr %192, 2
  %194 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %195 = load i32, ptr %194, align 4
  %196 = insertvalue { ptr, ptr, ptr, i32 } %193, i32 %195, 3
  %197 = getelementptr [2 x ptr], ptr %16, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %197, align 8
  %198 = getelementptr [2 x ptr], ptr %16, i32 0, i32 1
  store ptr @_parameterization_String, ptr %198, align 8
  %199 = call ptr @llvm.invariant.start.p0(i64 4, ptr %16)
  %200 = call ptr @llvm.invariant.start.p0(i64 232, ptr %186)
  %201 = getelementptr ptr, ptr %186, i32 %195
  %202 = getelementptr ptr, ptr %201, i32 7
  %203 = load ptr, ptr %202, align 8
  %204 = getelementptr { ptr, ptr }, ptr %17, i32 0, i32 0
  store ptr @i32_typ, ptr %204, align 8
  %205 = getelementptr { ptr, ptr }, ptr %17, i32 0, i32 1
  store ptr %174, ptr %205, align 8
  %206 = call ptr @behavior_wrapper(ptr %203, { ptr, ptr, ptr, i32 } %196, ptr %17)
  call void %206({ ptr, ptr, ptr, i32 } %196, { ptr, ptr, ptr, i32 } %196, ptr %16, i32 618, { ptr, ptr, ptr, i32 } %184)
  %207 = getelementptr { ptr, i160 }, ptr %6, i32 0, i32 0
  %208 = load ptr, ptr %207, align 8
  %209 = insertvalue { ptr, i160 } undef, ptr %208, 0
  %210 = getelementptr { ptr, i160 }, ptr %6, i32 0, i32 1
  %211 = load i160, ptr %210, align 4
  %212 = insertvalue { ptr, i160 } %209, i160 %211, 1
  %213 = call ptr @get_current_coroutine()
  %214 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %213, i32 0, i32 4
  store { ptr, i160 } %212, ptr %214, align 8
  call void @coroutine_yield(ptr %213)
  br label %215

215:                                              ; preds = %._crit_edge, %62
  %216 = icmp sge i32 %3, 0
  br i1 %216, label %217, label %234

217:                                              ; preds = %215
  %218 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %219 = load ptr, ptr %218, align 8
  %220 = load ptr, ptr %35, align 8
  %221 = call ptr @llvm.invariant.start.p0(i64 616, ptr %220)
  %222 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %223 = load i32, ptr %222, align 4
  %224 = getelementptr ptr, ptr %220, i32 %223
  %225 = load ptr, ptr %224, align 8
  %226 = getelementptr { ptr, ptr }, ptr %225, i32 0, i32 0
  %227 = load ptr, ptr %226, align 8
  %228 = call { ptr } %227(ptr %219) #16
  store { ptr } %228, ptr %18, align 8
  %229 = load ptr, ptr %18, align 8
  %230 = sext i32 %3 to i64
  %231 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %230
  %232 = getelementptr i8, ptr %229, i64 %231
  %233 = load i32, ptr %232, align 4
  store i32 %233, ptr %.reg2mem4, align 4
  %.reload5 = load i32, ptr %.reg2mem4, align 4
  store i32 %.reload5, ptr %.reg2mem6, align 4
  br label %432

234:                                              ; preds = %215
  %235 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %236 = load ptr, ptr %235, align 8
  %237 = load ptr, ptr %35, align 8
  %238 = call ptr @llvm.invariant.start.p0(i64 616, ptr %237)
  %239 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %240 = load i32, ptr %239, align 4
  %241 = getelementptr ptr, ptr %237, i32 %240
  %242 = getelementptr ptr, ptr %241, i32 1
  %243 = load ptr, ptr %242, align 8
  %244 = getelementptr { ptr, ptr }, ptr %243, i32 0, i32 0
  %245 = load ptr, ptr %244, align 8
  %246 = call i32 %245(ptr %236) #16
  %247 = add i32 %246, %3
  %248 = icmp slt i32 %247, 0
  br i1 %248, label %249, label %._crit_edge1

._crit_edge1:                                     ; preds = %234
  br label %402

249:                                              ; preds = %234
  %250 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %251 = load ptr, ptr %250, align 8
  %252 = load ptr, ptr %35, align 8
  %253 = call ptr @llvm.invariant.start.p0(i64 616, ptr %252)
  %254 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %255 = load i32, ptr %254, align 4
  %256 = getelementptr ptr, ptr %252, i32 %255
  %257 = getelementptr ptr, ptr %256, i32 1
  %258 = load ptr, ptr %257, align 8
  %259 = getelementptr { ptr, ptr }, ptr %258, i32 0, i32 0
  %260 = load ptr, ptr %259, align 8
  %261 = call i32 %260(ptr %251) #16
  store ptr @OutOfBounds, ptr %19, align 8
  %262 = load ptr, ptr %19, align 8
  %263 = getelementptr ptr, ptr %262, i32 6
  %264 = load ptr, ptr %263, align 8
  %265 = call { i64, i64 } @size_wrapper(ptr %264, ptr %19)
  %266 = extractvalue { i64, i64 } %265, 0
  %267 = call ptr @bump_malloc(i64 %266)
  %268 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %269 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  store ptr @OutOfBounds, ptr %20, align 8
  store ptr %267, ptr %268, align 8
  store i32 9, ptr %269, align 4
  %270 = call ptr @llvm.invariant.start.p0(i64 16, ptr %20)
  %271 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %272 = load ptr, ptr %271, align 8
  %273 = load ptr, ptr %35, align 8
  %274 = call ptr @llvm.invariant.start.p0(i64 616, ptr %273)
  %275 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %276 = load i32, ptr %275, align 4
  %277 = getelementptr ptr, ptr %273, i32 %276
  %278 = getelementptr ptr, ptr %277, i32 1
  %279 = load ptr, ptr %278, align 8
  %280 = getelementptr { ptr, ptr }, ptr %279, i32 0, i32 0
  %281 = load ptr, ptr %280, align 8
  %282 = call i32 %281(ptr %272) #16
  %283 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %284 = load ptr, ptr %283, align 8
  %285 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %284, 0
  %286 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %287 = load ptr, ptr %286, align 8
  %288 = insertvalue { ptr, ptr, ptr, i32 } %285, ptr %287, 1
  %289 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %290 = load ptr, ptr %289, align 8
  %291 = insertvalue { ptr, ptr, ptr, i32 } %288, ptr %290, 2
  %292 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %293 = load i32, ptr %292, align 4
  %294 = insertvalue { ptr, ptr, ptr, i32 } %291, i32 %293, 3
  %295 = getelementptr [2 x ptr], ptr %21, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %295, align 8
  %296 = getelementptr [2 x ptr], ptr %21, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %296, align 8
  %297 = call ptr @llvm.invariant.start.p0(i64 4, ptr %21)
  %298 = call ptr @llvm.invariant.start.p0(i64 232, ptr %284)
  %299 = getelementptr ptr, ptr %284, i32 %293
  %300 = getelementptr ptr, ptr %299, i32 4
  %301 = load ptr, ptr %300, align 8
  %302 = getelementptr { ptr, ptr }, ptr %22, i32 0, i32 0
  store ptr @i32_typ, ptr %302, align 8
  %303 = getelementptr { ptr, ptr }, ptr %22, i32 0, i32 1
  store ptr @i32_typ, ptr %303, align 8
  %304 = call ptr @behavior_wrapper(ptr %301, { ptr, ptr, ptr, i32 } %294, ptr %22)
  call void %304({ ptr, ptr, ptr, i32 } %294, { ptr, ptr, ptr, i32 } %294, ptr %21, i32 %282, i32 %3)
  %305 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 11))
  store ptr %305, ptr %23, align 8
  %306 = getelementptr { ptr }, ptr %23, i32 0, i32 0
  %307 = getelementptr { ptr }, ptr %24, i32 0, i32 0
  %308 = load ptr, ptr %306, align 8
  store ptr %308, ptr %307, align 8
  %309 = call ptr @llvm.invariant.start.p0(i64 16, ptr %24)
  %310 = load ptr, ptr %24, align 8
  %311 = load [10 x i8], ptr @xmsyx_testsmini, align 1
  store [10 x i8] %311, ptr %310, align 1
  store ptr @String, ptr %25, align 8
  %312 = load ptr, ptr %25, align 8
  %313 = getelementptr ptr, ptr %312, i32 6
  %314 = load ptr, ptr %313, align 8
  %315 = call { i64, i64 } @size_wrapper(ptr %314, ptr %25)
  %316 = extractvalue { i64, i64 } %315, 0
  %317 = call ptr @bump_malloc(i64 %316)
  %318 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %319 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  store ptr @String, ptr %26, align 8
  store ptr %317, ptr %318, align 8
  store i32 9, ptr %319, align 4
  %320 = call ptr @llvm.invariant.start.p0(i64 16, ptr %26)
  %321 = getelementptr { ptr }, ptr %24, i32 0, i32 0
  %322 = load ptr, ptr %321, align 8
  %323 = insertvalue { ptr } undef, ptr %322, 0
  %324 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %325 = load ptr, ptr %324, align 8
  %326 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %325, 0
  %327 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %328 = load ptr, ptr %327, align 8
  %329 = insertvalue { ptr, ptr, ptr, i32 } %326, ptr %328, 1
  %330 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %331 = load ptr, ptr %330, align 8
  %332 = insertvalue { ptr, ptr, ptr, i32 } %329, ptr %331, 2
  %333 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %334 = load i32, ptr %333, align 4
  %335 = insertvalue { ptr, ptr, ptr, i32 } %332, i32 %334, 3
  %336 = getelementptr [3 x ptr], ptr %27, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %336, align 8
  %337 = getelementptr [3 x ptr], ptr %27, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %337, align 8
  %338 = getelementptr [3 x ptr], ptr %27, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %338, align 8
  %339 = call ptr @llvm.invariant.start.p0(i64 9, ptr %27)
  %340 = call ptr @llvm.invariant.start.p0(i64 280, ptr %325)
  %341 = getelementptr ptr, ptr %325, i32 %334
  %342 = getelementptr ptr, ptr %341, i32 4
  %343 = load ptr, ptr %342, align 8
  %344 = getelementptr { ptr, ptr, ptr }, ptr %28, i32 0, i32 0
  store ptr @buffer_typ, ptr %344, align 8
  %345 = getelementptr { ptr, ptr, ptr }, ptr %28, i32 0, i32 1
  store ptr @i32_typ, ptr %345, align 8
  %346 = getelementptr { ptr, ptr, ptr }, ptr %28, i32 0, i32 2
  store ptr @i32_typ, ptr %346, align 8
  %347 = call ptr @behavior_wrapper(ptr %343, { ptr, ptr, ptr, i32 } %335, ptr %28)
  call void %347({ ptr, ptr, ptr, i32 } %335, { ptr, ptr, ptr, i32 } %335, ptr %27, { ptr } %323, i32 10, i32 11)
  %348 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %349 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 0
  %350 = load ptr, ptr %348, align 8
  store ptr %350, ptr %349, align 8
  %351 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %352 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 1
  %353 = load ptr, ptr %351, align 8
  store ptr %353, ptr %352, align 8
  %354 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %355 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 2
  %356 = load ptr, ptr %354, align 8
  store ptr %356, ptr %355, align 8
  %357 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %358 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 3
  %359 = load i32, ptr %357, align 4
  store i32 %359, ptr %358, align 4
  call void @set_offset(ptr %29, ptr @String)
  %360 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 0
  %361 = load ptr, ptr %360, align 8
  %362 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %361, 0
  %363 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 1
  %364 = load ptr, ptr %363, align 8
  %365 = insertvalue { ptr, ptr, ptr, i32 } %362, ptr %364, 1
  %366 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 2
  %367 = load ptr, ptr %366, align 8
  %368 = insertvalue { ptr, ptr, ptr, i32 } %365, ptr %367, 2
  %369 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 3
  %370 = load i32, ptr %369, align 4
  %371 = insertvalue { ptr, ptr, ptr, i32 } %368, i32 %370, 3
  %372 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %373 = load ptr, ptr %372, align 8
  %374 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %373, 0
  %375 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %376 = load ptr, ptr %375, align 8
  %377 = insertvalue { ptr, ptr, ptr, i32 } %374, ptr %376, 1
  %378 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %379 = load ptr, ptr %378, align 8
  %380 = insertvalue { ptr, ptr, ptr, i32 } %377, ptr %379, 2
  %381 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %382 = load i32, ptr %381, align 4
  %383 = insertvalue { ptr, ptr, ptr, i32 } %380, i32 %382, 3
  %384 = getelementptr [2 x ptr], ptr %30, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %384, align 8
  %385 = getelementptr [2 x ptr], ptr %30, i32 0, i32 1
  store ptr @_parameterization_String, ptr %385, align 8
  %386 = call ptr @llvm.invariant.start.p0(i64 4, ptr %30)
  %387 = call ptr @llvm.invariant.start.p0(i64 232, ptr %373)
  %388 = getelementptr ptr, ptr %373, i32 %382
  %389 = getelementptr ptr, ptr %388, i32 7
  %390 = load ptr, ptr %389, align 8
  %391 = getelementptr { ptr, ptr }, ptr %31, i32 0, i32 0
  store ptr @i32_typ, ptr %391, align 8
  %392 = getelementptr { ptr, ptr }, ptr %31, i32 0, i32 1
  store ptr %361, ptr %392, align 8
  %393 = call ptr @behavior_wrapper(ptr %390, { ptr, ptr, ptr, i32 } %383, ptr %31)
  call void %393({ ptr, ptr, ptr, i32 } %383, { ptr, ptr, ptr, i32 } %383, ptr %30, i32 620, { ptr, ptr, ptr, i32 } %371)
  %394 = getelementptr { ptr, i160 }, ptr %20, i32 0, i32 0
  %395 = load ptr, ptr %394, align 8
  %396 = insertvalue { ptr, i160 } undef, ptr %395, 0
  %397 = getelementptr { ptr, i160 }, ptr %20, i32 0, i32 1
  %398 = load i160, ptr %397, align 4
  %399 = insertvalue { ptr, i160 } %396, i160 %398, 1
  %400 = call ptr @get_current_coroutine()
  %401 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %400, i32 0, i32 4
  store { ptr, i160 } %399, ptr %401, align 8
  call void @coroutine_yield(ptr %400)
  br label %402

402:                                              ; preds = %._crit_edge1, %249
  %403 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %404 = load ptr, ptr %403, align 8
  %405 = load ptr, ptr %35, align 8
  %406 = call ptr @llvm.invariant.start.p0(i64 616, ptr %405)
  %407 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %408 = load i32, ptr %407, align 4
  %409 = getelementptr ptr, ptr %405, i32 %408
  %410 = load ptr, ptr %409, align 8
  %411 = getelementptr { ptr, ptr }, ptr %410, i32 0, i32 0
  %412 = load ptr, ptr %411, align 8
  %413 = call { ptr } %412(ptr %404) #16
  store { ptr } %413, ptr %32, align 8
  %414 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %415 = load ptr, ptr %414, align 8
  %416 = load ptr, ptr %35, align 8
  %417 = call ptr @llvm.invariant.start.p0(i64 616, ptr %416)
  %418 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %419 = load i32, ptr %418, align 4
  %420 = getelementptr ptr, ptr %416, i32 %419
  %421 = getelementptr ptr, ptr %420, i32 1
  %422 = load ptr, ptr %421, align 8
  %423 = getelementptr { ptr, ptr }, ptr %422, i32 0, i32 0
  %424 = load ptr, ptr %423, align 8
  %425 = call i32 %424(ptr %415) #16
  %426 = add i32 %425, %3
  %427 = load ptr, ptr %32, align 8
  %428 = sext i32 %426 to i64
  %429 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %428
  %430 = getelementptr i8, ptr %427, i64 %429
  %431 = load i32, ptr %430, align 4
  store i32 %431, ptr %.reg2mem2, align 4
  %.reload3 = load i32, ptr %.reg2mem2, align 4
  store i32 %.reload3, ptr %.reg2mem6, align 4
  br label %432

432:                                              ; preds = %402, %217
  %.reload7 = load i32, ptr %.reg2mem6, align 4
  store i32 %.reload7, ptr %.reg2mem, align 4
  br label %433

433:                                              ; preds = %432
  %.reload = load i32, ptr %.reg2mem, align 4
  ret i32 %.reload
}

define { ptr, i32 } @IntArray_pop_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i32, align 4
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = alloca i32, align 4
  %8 = alloca ptr, align 8
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i32 }, align 8
  %.reg2mem1 = alloca { ptr, i32 }, align 8
  %.reg2mem3 = alloca { ptr, i32 }, align 8
  %.reg2mem5 = alloca { ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %9, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 16, ptr %9)
  %11 = alloca { ptr, ptr, ptr, i32 }, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 0
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 2
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %23 = load i32, ptr %21, align 4
  store i32 %23, ptr %22, align 4
  call void @set_offset(ptr %11, ptr @IntArray)
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %25 = load ptr, ptr %24, align 8
  %26 = load ptr, ptr %11, align 8
  %27 = call ptr @llvm.invariant.start.p0(i64 616, ptr %26)
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %29 = load i32, ptr %28, align 4
  %30 = getelementptr ptr, ptr %26, i32 %29
  %31 = getelementptr ptr, ptr %30, i32 1
  %32 = load ptr, ptr %31, align 8
  %33 = getelementptr { ptr, ptr }, ptr %32, i32 0, i32 0
  %34 = load ptr, ptr %33, align 8
  %35 = call i32 %34(ptr %25) #16
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %42

37:                                               ; preds = %3
  store [0 x i8] undef, ptr %4, align 1
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %5, align 4
  %38 = load ptr, ptr %5, align 8
  %39 = insertvalue { ptr, i32 } undef, ptr %38, 0
  %40 = load i32, ptr %4, align 4
  %41 = insertvalue { ptr, i32 } %39, i32 %40, 1
  store { ptr, i32 } %41, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i32 }, ptr %.reg2mem3, align 8
  store { ptr, i32 } %.reload4, ptr %.reg2mem5, align 8
  br label %99

42:                                               ; preds = %3
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %44 = load ptr, ptr %43, align 8
  %45 = load ptr, ptr %11, align 8
  %46 = call ptr @llvm.invariant.start.p0(i64 616, ptr %45)
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %48 = load i32, ptr %47, align 4
  %49 = getelementptr ptr, ptr %45, i32 %48
  %50 = getelementptr ptr, ptr %49, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = getelementptr { ptr, ptr }, ptr %51, i32 0, i32 0
  %53 = load ptr, ptr %52, align 8
  %54 = call i32 %53(ptr %44) #16
  %55 = sub i32 %54, 1
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = load ptr, ptr %11, align 8
  %59 = call ptr @llvm.invariant.start.p0(i64 616, ptr %58)
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %61 = load i32, ptr %60, align 4
  %62 = getelementptr ptr, ptr %58, i32 %61
  %63 = getelementptr ptr, ptr %62, i32 1
  %64 = load ptr, ptr %63, align 8
  %65 = getelementptr { ptr, ptr }, ptr %64, i32 0, i32 1
  %66 = load ptr, ptr %65, align 8
  call void %66(ptr %57, i32 %55) #15
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %68 = load ptr, ptr %67, align 8
  %69 = load ptr, ptr %11, align 8
  %70 = call ptr @llvm.invariant.start.p0(i64 616, ptr %69)
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %72 = load i32, ptr %71, align 4
  %73 = getelementptr ptr, ptr %69, i32 %72
  %74 = load ptr, ptr %73, align 8
  %75 = getelementptr { ptr, ptr }, ptr %74, i32 0, i32 0
  %76 = load ptr, ptr %75, align 8
  %77 = call { ptr } %76(ptr %68) #16
  store { ptr } %77, ptr %6, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %79 = load ptr, ptr %78, align 8
  %80 = load ptr, ptr %11, align 8
  %81 = call ptr @llvm.invariant.start.p0(i64 616, ptr %80)
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %83 = load i32, ptr %82, align 4
  %84 = getelementptr ptr, ptr %80, i32 %83
  %85 = getelementptr ptr, ptr %84, i32 1
  %86 = load ptr, ptr %85, align 8
  %87 = getelementptr { ptr, ptr }, ptr %86, i32 0, i32 0
  %88 = load ptr, ptr %87, align 8
  %89 = call i32 %88(ptr %79) #16
  %90 = load ptr, ptr %6, align 8
  %91 = sext i32 %89 to i64
  %92 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %91
  %93 = getelementptr i8, ptr %90, i64 %92
  %94 = load i32, ptr %93, align 4
  store i32 %94, ptr %7, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %8, align 4
  %95 = load ptr, ptr %8, align 8
  %96 = insertvalue { ptr, i32 } undef, ptr %95, 0
  %97 = load i32, ptr %7, align 4
  %98 = insertvalue { ptr, i32 } %96, i32 %97, 1
  store { ptr, i32 } %98, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i32 }, ptr %.reg2mem1, align 8
  store { ptr, i32 } %.reload2, ptr %.reg2mem5, align 8
  br label %99

99:                                               ; preds = %42, %37
  %.reload6 = load { ptr, i32 }, ptr %.reg2mem5, align 8
  store { ptr, i32 } %.reload6, ptr %.reg2mem, align 8
  br label %100

100:                                              ; preds = %99
  %.reload = load { ptr, i32 }, ptr %.reg2mem, align 8
  ret { ptr, i32 } %.reload
}

define { ptr, ptr, ptr, i32 } @IntArray_copy_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca ptr, align 8
  %5 = alloca [1 x ptr], align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = alloca [3 x ptr], align 8
  %8 = alloca { ptr, ptr, ptr }, align 8
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %11 = alloca { ptr, ptr, ptr, i32 }, align 8
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i1, align 1
  %.reg2mem6 = alloca i32, align 4
  %.reg2mem11 = alloca ptr, align 8
  %.reg2mem13 = alloca ptr, align 8
  %.reg2mem15 = alloca i32, align 4
  %.reg2mem17 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %12, align 8
  %13 = call ptr @llvm.invariant.start.p0(i64 16, ptr %12)
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 0
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 2
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %26 = load i32, ptr %24, align 4
  store i32 %26, ptr %25, align 4
  call void @set_offset(ptr %14, ptr @IntArray)
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = load ptr, ptr %14, align 8
  %30 = call ptr @llvm.invariant.start.p0(i64 616, ptr %29)
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %32 = load i32, ptr %31, align 4
  %33 = getelementptr ptr, ptr %29, i32 %32
  %34 = getelementptr ptr, ptr %33, i32 1
  %35 = load ptr, ptr %34, align 8
  %36 = getelementptr { ptr, ptr }, ptr %35, i32 0, i32 0
  %37 = load ptr, ptr %36, align 8
  %38 = call i32 %37(ptr %28) #16
  %39 = sext i32 %38 to i64
  %40 = alloca ptr, align 8
  %41 = mul i64 %39, ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64)
  %42 = call ptr @bump_malloc(i64 %41)
  store ptr %42, ptr %40, align 8
  %43 = alloca { ptr }, align 8
  %44 = getelementptr { ptr }, ptr %40, i32 0, i32 0
  %45 = getelementptr { ptr }, ptr %43, i32 0, i32 0
  %46 = load ptr, ptr %44, align 8
  store ptr %46, ptr %45, align 8
  %47 = call ptr @llvm.invariant.start.p0(i64 16, ptr %43)
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  store ptr %48, ptr %.reg2mem13, align 8
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  store ptr %49, ptr %.reg2mem11, align 8
  store i32 0, ptr %.reg2mem17, align 4
  br label %50

50:                                               ; preds = %._crit_edge, %3
  %.reload18 = load i32, ptr %.reg2mem17, align 4
  store i32 %.reload18, ptr %.reg2mem6, align 4
  %.reload14 = load ptr, ptr %.reg2mem13, align 8
  %51 = load ptr, ptr %.reload14, align 8
  %52 = load ptr, ptr %14, align 8
  %53 = call ptr @llvm.invariant.start.p0(i64 616, ptr %52)
  %.reload12 = load ptr, ptr %.reg2mem11, align 8
  %54 = load i32, ptr %.reload12, align 4
  %55 = getelementptr ptr, ptr %52, i32 %54
  %56 = getelementptr ptr, ptr %55, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr { ptr, ptr }, ptr %57, i32 0, i32 0
  %59 = load ptr, ptr %58, align 8
  %60 = call i32 %59(ptr %51) #16
  %.reload10 = load i32, ptr %.reg2mem6, align 4
  %61 = icmp slt i32 %.reload10, %60
  store i1 %61, ptr %.reg2mem3, align 1
  %.reload5 = load i1, ptr %.reg2mem3, align 1
  br i1 %.reload5, label %62, label %84

62:                                               ; preds = %50
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %64 = load ptr, ptr %63, align 8
  %65 = load ptr, ptr %14, align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 616, ptr %65)
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %68 = load i32, ptr %67, align 4
  %69 = getelementptr ptr, ptr %65, i32 %68
  %70 = load ptr, ptr %69, align 8
  %71 = getelementptr { ptr, ptr }, ptr %70, i32 0, i32 0
  %72 = load ptr, ptr %71, align 8
  %73 = call { ptr } %72(ptr %64) #16
  store { ptr } %73, ptr %4, align 8
  %74 = load ptr, ptr %4, align 8
  %.reload9 = load i32, ptr %.reg2mem6, align 4
  %75 = sext i32 %.reload9 to i64
  %76 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %75
  %77 = getelementptr i8, ptr %74, i64 %76
  %78 = load i32, ptr %77, align 4
  %79 = load ptr, ptr %43, align 8
  %.reload8 = load i32, ptr %.reg2mem6, align 4
  %80 = sext i32 %.reload8 to i64
  %81 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %80
  %82 = getelementptr i8, ptr %79, i64 %81
  store i32 %78, ptr %82, align 4
  %.reload7 = load i32, ptr %.reg2mem6, align 4
  %83 = add i32 %.reload7, 1
  store i32 %83, ptr %.reg2mem1, align 4
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem15, align 4
  br label %85

84:                                               ; preds = %50
  store i32 poison, ptr %.reg2mem15, align 4
  br label %85

85:                                               ; preds = %84, %62
  %.reload16 = load i32, ptr %.reg2mem15, align 4
  store i32 %.reload16, ptr %.reg2mem, align 4
  br label %86

86:                                               ; preds = %85
  %.reload4 = load i1, ptr %.reg2mem3, align 1
  br i1 %.reload4, label %._crit_edge, label %87

._crit_edge:                                      ; preds = %86
  %.reload = load i32, ptr %.reg2mem, align 4
  store i32 %.reload, ptr %.reg2mem17, align 4
  br label %50

87:                                               ; preds = %86
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %89 = load ptr, ptr %88, align 8
  %90 = load ptr, ptr %14, align 8
  %91 = call ptr @llvm.invariant.start.p0(i64 616, ptr %90)
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %93 = load i32, ptr %92, align 4
  %94 = getelementptr ptr, ptr %90, i32 %93
  %95 = getelementptr ptr, ptr %94, i32 1
  %96 = load ptr, ptr %95, align 8
  %97 = getelementptr { ptr, ptr }, ptr %96, i32 0, i32 0
  %98 = load ptr, ptr %97, align 8
  %99 = call i32 %98(ptr %89) #16
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %101 = load ptr, ptr %100, align 8
  %102 = load ptr, ptr %14, align 8
  %103 = call ptr @llvm.invariant.start.p0(i64 616, ptr %102)
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %105 = load i32, ptr %104, align 4
  %106 = getelementptr ptr, ptr %102, i32 %105
  %107 = getelementptr ptr, ptr %106, i32 1
  %108 = load ptr, ptr %107, align 8
  %109 = getelementptr { ptr, ptr }, ptr %108, i32 0, i32 0
  %110 = load ptr, ptr %109, align 8
  %111 = call i32 %110(ptr %101) #16
  store ptr @IntArray, ptr %5, align 8
  %112 = load ptr, ptr %5, align 8
  %113 = getelementptr ptr, ptr %112, i32 6
  %114 = load ptr, ptr %113, align 8
  %115 = call { i64, i64 } @size_wrapper(ptr %114, ptr %5)
  %116 = extractvalue { i64, i64 } %115, 0
  %117 = call ptr @bump_malloc(i64 %116)
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  store ptr @IntArray, ptr %6, align 8
  store ptr %117, ptr %118, align 8
  store i32 9, ptr %119, align 4
  %120 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %122 = load ptr, ptr %121, align 8
  %123 = load ptr, ptr %14, align 8
  %124 = call ptr @llvm.invariant.start.p0(i64 616, ptr %123)
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %126 = load i32, ptr %125, align 4
  %127 = getelementptr ptr, ptr %123, i32 %126
  %128 = getelementptr ptr, ptr %127, i32 1
  %129 = load ptr, ptr %128, align 8
  %130 = getelementptr { ptr, ptr }, ptr %129, i32 0, i32 0
  %131 = load ptr, ptr %130, align 8
  %132 = call i32 %131(ptr %122) #16
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %134 = load ptr, ptr %133, align 8
  %135 = load ptr, ptr %14, align 8
  %136 = call ptr @llvm.invariant.start.p0(i64 616, ptr %135)
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %138 = load i32, ptr %137, align 4
  %139 = getelementptr ptr, ptr %135, i32 %138
  %140 = getelementptr ptr, ptr %139, i32 1
  %141 = load ptr, ptr %140, align 8
  %142 = getelementptr { ptr, ptr }, ptr %141, i32 0, i32 0
  %143 = load ptr, ptr %142, align 8
  %144 = call i32 %143(ptr %134) #16
  %145 = getelementptr { ptr }, ptr %43, i32 0, i32 0
  %146 = load ptr, ptr %145, align 8
  %147 = insertvalue { ptr } undef, ptr %146, 0
  %148 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %149 = load ptr, ptr %148, align 8
  %150 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %149, 0
  %151 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %152 = load ptr, ptr %151, align 8
  %153 = insertvalue { ptr, ptr, ptr, i32 } %150, ptr %152, 1
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %155 = load ptr, ptr %154, align 8
  %156 = insertvalue { ptr, ptr, ptr, i32 } %153, ptr %155, 2
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %158 = load i32, ptr %157, align 4
  %159 = insertvalue { ptr, ptr, ptr, i32 } %156, i32 %158, 3
  %160 = getelementptr [3 x ptr], ptr %7, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %160, align 8
  %161 = getelementptr [3 x ptr], ptr %7, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %161, align 8
  %162 = getelementptr [3 x ptr], ptr %7, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %162, align 8
  %163 = call ptr @llvm.invariant.start.p0(i64 9, ptr %7)
  %164 = call ptr @llvm.invariant.start.p0(i64 616, ptr %149)
  %165 = getelementptr ptr, ptr %149, i32 %158
  %166 = getelementptr ptr, ptr %165, i32 5
  %167 = load ptr, ptr %166, align 8
  %168 = getelementptr { ptr, ptr, ptr }, ptr %8, i32 0, i32 0
  store ptr @buffer_typ, ptr %168, align 8
  %169 = getelementptr { ptr, ptr, ptr }, ptr %8, i32 0, i32 1
  store ptr @i32_typ, ptr %169, align 8
  %170 = getelementptr { ptr, ptr, ptr }, ptr %8, i32 0, i32 2
  store ptr @i32_typ, ptr %170, align 8
  %171 = call ptr @behavior_wrapper(ptr %167, { ptr, ptr, ptr, i32 } %159, ptr %8)
  call void %171({ ptr, ptr, ptr, i32 } %159, { ptr, ptr, ptr, i32 } %159, ptr %7, { ptr } %147, i32 %132, i32 %144)
  %172 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %174 = load ptr, ptr %172, align 8
  store ptr %174, ptr %173, align 8
  %175 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %176 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %177 = load ptr, ptr %175, align 8
  store ptr %177, ptr %176, align 8
  %178 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %179 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %180 = load ptr, ptr %178, align 8
  store ptr %180, ptr %179, align 8
  %181 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %182 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %183 = load i32, ptr %181, align 4
  store i32 %183, ptr %182, align 4
  call void @set_offset(ptr %9, ptr @IntArray)
  %184 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %185 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 0
  %186 = load ptr, ptr %184, align 8
  store ptr %186, ptr %185, align 8
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %188 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %189 = load ptr, ptr %187, align 8
  store ptr %189, ptr %188, align 8
  %190 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %191 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 2
  %192 = load ptr, ptr %190, align 8
  store ptr %192, ptr %191, align 8
  %193 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %194 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  %195 = load i32, ptr %193, align 4
  store i32 %195, ptr %194, align 4
  %196 = call ptr @llvm.invariant.start.p0(i64 16, ptr %10)
  %197 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 0
  %198 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 0
  %199 = load ptr, ptr %197, align 8
  store ptr %199, ptr %198, align 8
  %200 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %201 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %202 = load ptr, ptr %200, align 8
  store ptr %202, ptr %201, align 8
  %203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 2
  %204 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 2
  %205 = load ptr, ptr %203, align 8
  store ptr %205, ptr %204, align 8
  %206 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  %207 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %208 = load i32, ptr %206, align 4
  store i32 %208, ptr %207, align 4
  call void @set_offset(ptr %11, ptr @IntArray)
  %209 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 0
  %210 = load ptr, ptr %209, align 8
  %211 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %210, 0
  %212 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %213 = load ptr, ptr %212, align 8
  %214 = insertvalue { ptr, ptr, ptr, i32 } %211, ptr %213, 1
  %215 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 2
  %216 = load ptr, ptr %215, align 8
  %217 = insertvalue { ptr, ptr, ptr, i32 } %214, ptr %216, 2
  %218 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %219 = load i32, ptr %218, align 4
  %220 = insertvalue { ptr, ptr, ptr, i32 } %217, i32 %219, 3
  ret { ptr, ptr, ptr, i32 } %220
}

define { ptr, ptr, ptr, i32 } @IntArray_map_fFunctionPtri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca ptr, align 8
  %6 = alloca [1 x ptr], align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = alloca [3 x ptr], align 8
  %9 = alloca { ptr, ptr, ptr }, align 8
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %11 = alloca { ptr, ptr, ptr, i32 }, align 8
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i1, align 1
  %.reg2mem6 = alloca i32, align 4
  %.reg2mem11 = alloca ptr, align 8
  %.reg2mem13 = alloca ptr, align 8
  %.reg2mem15 = alloca i32, align 4
  %.reg2mem17 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %13, align 8
  %14 = call ptr @llvm.invariant.start.p0(i64 16, ptr %13)
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %21 = load ptr, ptr %19, align 8
  store ptr %21, ptr %20, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %27 = load i32, ptr %25, align 4
  store i32 %27, ptr %26, align 4
  call void @set_offset(ptr %15, ptr @IntArray)
  %28 = alloca ptr, align 8
  store { ptr } %3, ptr %28, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  %31 = load ptr, ptr %15, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 616, ptr %31)
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %34 = load i32, ptr %33, align 4
  %35 = getelementptr ptr, ptr %31, i32 %34
  %36 = getelementptr ptr, ptr %35, i32 1
  %37 = load ptr, ptr %36, align 8
  %38 = getelementptr { ptr, ptr }, ptr %37, i32 0, i32 0
  %39 = load ptr, ptr %38, align 8
  %40 = call i32 %39(ptr %30) #16
  %41 = sext i32 %40 to i64
  %42 = alloca ptr, align 8
  %43 = mul i64 %41, ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64)
  %44 = call ptr @bump_malloc(i64 %43)
  store ptr %44, ptr %42, align 8
  %45 = alloca { ptr }, align 8
  %46 = getelementptr { ptr }, ptr %42, i32 0, i32 0
  %47 = getelementptr { ptr }, ptr %45, i32 0, i32 0
  %48 = load ptr, ptr %46, align 8
  store ptr %48, ptr %47, align 8
  %49 = call ptr @llvm.invariant.start.p0(i64 16, ptr %45)
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  store ptr %50, ptr %.reg2mem13, align 8
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  store ptr %51, ptr %.reg2mem11, align 8
  store i32 0, ptr %.reg2mem17, align 4
  br label %52

52:                                               ; preds = %._crit_edge, %4
  %.reload18 = load i32, ptr %.reg2mem17, align 4
  store i32 %.reload18, ptr %.reg2mem6, align 4
  %.reload14 = load ptr, ptr %.reg2mem13, align 8
  %53 = load ptr, ptr %.reload14, align 8
  %54 = load ptr, ptr %15, align 8
  %55 = call ptr @llvm.invariant.start.p0(i64 616, ptr %54)
  %.reload12 = load ptr, ptr %.reg2mem11, align 8
  %56 = load i32, ptr %.reload12, align 4
  %57 = getelementptr ptr, ptr %54, i32 %56
  %58 = getelementptr ptr, ptr %57, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr { ptr, ptr }, ptr %59, i32 0, i32 0
  %61 = load ptr, ptr %60, align 8
  %62 = call i32 %61(ptr %53) #16
  %.reload10 = load i32, ptr %.reg2mem6, align 4
  %63 = icmp slt i32 %.reload10, %62
  store i1 %63, ptr %.reg2mem3, align 1
  %.reload5 = load i1, ptr %.reg2mem3, align 1
  br i1 %.reload5, label %64, label %88

64:                                               ; preds = %52
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %66 = load ptr, ptr %65, align 8
  %67 = load ptr, ptr %15, align 8
  %68 = call ptr @llvm.invariant.start.p0(i64 616, ptr %67)
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %70 = load i32, ptr %69, align 4
  %71 = getelementptr ptr, ptr %67, i32 %70
  %72 = load ptr, ptr %71, align 8
  %73 = getelementptr { ptr, ptr }, ptr %72, i32 0, i32 0
  %74 = load ptr, ptr %73, align 8
  %75 = call { ptr } %74(ptr %66) #16
  store { ptr } %75, ptr %5, align 8
  %76 = load ptr, ptr %5, align 8
  %.reload9 = load i32, ptr %.reg2mem6, align 4
  %77 = sext i32 %.reload9 to i64
  %78 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %77
  %79 = getelementptr i8, ptr %76, i64 %78
  %80 = load i32, ptr %79, align 4
  %81 = load ptr, ptr %28, align 8
  %82 = call i32 %81(i32 %80)
  %83 = load ptr, ptr %45, align 8
  %.reload8 = load i32, ptr %.reg2mem6, align 4
  %84 = sext i32 %.reload8 to i64
  %85 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %84
  %86 = getelementptr i8, ptr %83, i64 %85
  store i32 %82, ptr %86, align 4
  %.reload7 = load i32, ptr %.reg2mem6, align 4
  %87 = add i32 %.reload7, 1
  store i32 %87, ptr %.reg2mem1, align 4
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem15, align 4
  br label %89

88:                                               ; preds = %52
  store i32 poison, ptr %.reg2mem15, align 4
  br label %89

89:                                               ; preds = %88, %64
  %.reload16 = load i32, ptr %.reg2mem15, align 4
  store i32 %.reload16, ptr %.reg2mem, align 4
  br label %90

90:                                               ; preds = %89
  %.reload4 = load i1, ptr %.reg2mem3, align 1
  br i1 %.reload4, label %._crit_edge, label %91

._crit_edge:                                      ; preds = %90
  %.reload = load i32, ptr %.reg2mem, align 4
  store i32 %.reload, ptr %.reg2mem17, align 4
  br label %52

91:                                               ; preds = %90
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %93 = load ptr, ptr %92, align 8
  %94 = load ptr, ptr %15, align 8
  %95 = call ptr @llvm.invariant.start.p0(i64 616, ptr %94)
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %97 = load i32, ptr %96, align 4
  %98 = getelementptr ptr, ptr %94, i32 %97
  %99 = getelementptr ptr, ptr %98, i32 1
  %100 = load ptr, ptr %99, align 8
  %101 = getelementptr { ptr, ptr }, ptr %100, i32 0, i32 0
  %102 = load ptr, ptr %101, align 8
  %103 = call i32 %102(ptr %93) #16
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %105 = load ptr, ptr %104, align 8
  %106 = load ptr, ptr %15, align 8
  %107 = call ptr @llvm.invariant.start.p0(i64 616, ptr %106)
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %109 = load i32, ptr %108, align 4
  %110 = getelementptr ptr, ptr %106, i32 %109
  %111 = getelementptr ptr, ptr %110, i32 1
  %112 = load ptr, ptr %111, align 8
  %113 = getelementptr { ptr, ptr }, ptr %112, i32 0, i32 0
  %114 = load ptr, ptr %113, align 8
  %115 = call i32 %114(ptr %105) #16
  store ptr @IntArray, ptr %6, align 8
  %116 = load ptr, ptr %6, align 8
  %117 = getelementptr ptr, ptr %116, i32 6
  %118 = load ptr, ptr %117, align 8
  %119 = call { i64, i64 } @size_wrapper(ptr %118, ptr %6)
  %120 = extractvalue { i64, i64 } %119, 0
  %121 = call ptr @bump_malloc(i64 %120)
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  store ptr @IntArray, ptr %7, align 8
  store ptr %121, ptr %122, align 8
  store i32 9, ptr %123, align 4
  %124 = call ptr @llvm.invariant.start.p0(i64 16, ptr %7)
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %126 = load ptr, ptr %125, align 8
  %127 = load ptr, ptr %15, align 8
  %128 = call ptr @llvm.invariant.start.p0(i64 616, ptr %127)
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %130 = load i32, ptr %129, align 4
  %131 = getelementptr ptr, ptr %127, i32 %130
  %132 = getelementptr ptr, ptr %131, i32 1
  %133 = load ptr, ptr %132, align 8
  %134 = getelementptr { ptr, ptr }, ptr %133, i32 0, i32 0
  %135 = load ptr, ptr %134, align 8
  %136 = call i32 %135(ptr %126) #16
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %138 = load ptr, ptr %137, align 8
  %139 = load ptr, ptr %15, align 8
  %140 = call ptr @llvm.invariant.start.p0(i64 616, ptr %139)
  %141 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %142 = load i32, ptr %141, align 4
  %143 = getelementptr ptr, ptr %139, i32 %142
  %144 = getelementptr ptr, ptr %143, i32 1
  %145 = load ptr, ptr %144, align 8
  %146 = getelementptr { ptr, ptr }, ptr %145, i32 0, i32 0
  %147 = load ptr, ptr %146, align 8
  %148 = call i32 %147(ptr %138) #16
  %149 = getelementptr { ptr }, ptr %45, i32 0, i32 0
  %150 = load ptr, ptr %149, align 8
  %151 = insertvalue { ptr } undef, ptr %150, 0
  %152 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %153 = load ptr, ptr %152, align 8
  %154 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %153, 0
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %156 = load ptr, ptr %155, align 8
  %157 = insertvalue { ptr, ptr, ptr, i32 } %154, ptr %156, 1
  %158 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %159 = load ptr, ptr %158, align 8
  %160 = insertvalue { ptr, ptr, ptr, i32 } %157, ptr %159, 2
  %161 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %162 = load i32, ptr %161, align 4
  %163 = insertvalue { ptr, ptr, ptr, i32 } %160, i32 %162, 3
  %164 = getelementptr [3 x ptr], ptr %8, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %164, align 8
  %165 = getelementptr [3 x ptr], ptr %8, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %165, align 8
  %166 = getelementptr [3 x ptr], ptr %8, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %166, align 8
  %167 = call ptr @llvm.invariant.start.p0(i64 9, ptr %8)
  %168 = call ptr @llvm.invariant.start.p0(i64 616, ptr %153)
  %169 = getelementptr ptr, ptr %153, i32 %162
  %170 = getelementptr ptr, ptr %169, i32 5
  %171 = load ptr, ptr %170, align 8
  %172 = getelementptr { ptr, ptr, ptr }, ptr %9, i32 0, i32 0
  store ptr @buffer_typ, ptr %172, align 8
  %173 = getelementptr { ptr, ptr, ptr }, ptr %9, i32 0, i32 1
  store ptr @i32_typ, ptr %173, align 8
  %174 = getelementptr { ptr, ptr, ptr }, ptr %9, i32 0, i32 2
  store ptr @i32_typ, ptr %174, align 8
  %175 = call ptr @behavior_wrapper(ptr %171, { ptr, ptr, ptr, i32 } %163, ptr %9)
  call void %175({ ptr, ptr, ptr, i32 } %163, { ptr, ptr, ptr, i32 } %163, ptr %8, { ptr } %151, i32 %136, i32 %148)
  %176 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %177 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 0
  %178 = load ptr, ptr %176, align 8
  store ptr %178, ptr %177, align 8
  %179 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %180 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %181 = load ptr, ptr %179, align 8
  store ptr %181, ptr %180, align 8
  %182 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %183 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 2
  %184 = load ptr, ptr %182, align 8
  store ptr %184, ptr %183, align 8
  %185 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %186 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  %187 = load i32, ptr %185, align 4
  store i32 %187, ptr %186, align 4
  call void @set_offset(ptr %10, ptr @IntArray)
  %188 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 0
  %189 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 0
  %190 = load ptr, ptr %188, align 8
  store ptr %190, ptr %189, align 8
  %191 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %192 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %193 = load ptr, ptr %191, align 8
  store ptr %193, ptr %192, align 8
  %194 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 2
  %195 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 2
  %196 = load ptr, ptr %194, align 8
  store ptr %196, ptr %195, align 8
  %197 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  %198 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %199 = load i32, ptr %197, align 4
  store i32 %199, ptr %198, align 4
  %200 = call ptr @llvm.invariant.start.p0(i64 16, ptr %11)
  %201 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 0
  %202 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 0
  %203 = load ptr, ptr %201, align 8
  store ptr %203, ptr %202, align 8
  %204 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %205 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %206 = load ptr, ptr %204, align 8
  store ptr %206, ptr %205, align 8
  %207 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 2
  %208 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 2
  %209 = load ptr, ptr %207, align 8
  store ptr %209, ptr %208, align 8
  %210 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %211 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  %212 = load i32, ptr %210, align 4
  store i32 %212, ptr %211, align 4
  call void @set_offset(ptr %12, ptr @IntIterable)
  %213 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 0
  %214 = load ptr, ptr %213, align 8
  %215 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %214, 0
  %216 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %217 = load ptr, ptr %216, align 8
  %218 = insertvalue { ptr, ptr, ptr, i32 } %215, ptr %217, 1
  %219 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 2
  %220 = load ptr, ptr %219, align 8
  %221 = insertvalue { ptr, ptr, ptr, i32 } %218, ptr %220, 2
  %222 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  %223 = load i32, ptr %222, align 4
  %224 = insertvalue { ptr, ptr, ptr, i32 } %221, i32 %223, 3
  ret { ptr, ptr, ptr, i32 } %224
}

define { ptr, ptr, ptr, i32 } @IntArray_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @IntArray)
  %19 = alloca [1 x ptr], align 8
  store ptr @IntArrayIterator, ptr %19, align 8
  %20 = load ptr, ptr %19, align 8
  %21 = getelementptr ptr, ptr %20, i32 6
  %22 = load ptr, ptr %21, align 8
  %23 = call { i64, i64 } @size_wrapper(ptr %22, ptr %19)
  %24 = extractvalue { i64, i64 } %23, 0
  %25 = call ptr @bump_malloc(i64 %24)
  %26 = alloca { ptr, ptr, ptr, i32 }, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  store ptr @IntArrayIterator, ptr %26, align 8
  store ptr %25, ptr %27, align 8
  store i32 9, ptr %28, align 4
  %29 = call ptr @llvm.invariant.start.p0(i64 16, ptr %26)
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %36 = load ptr, ptr %34, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %42 = load i32, ptr %40, align 4
  store i32 %42, ptr %41, align 4
  call void @set_offset(ptr %30, ptr @IntArray)
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %44 = load ptr, ptr %43, align 8
  %45 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %44, 0
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %47 = load ptr, ptr %46, align 8
  %48 = insertvalue { ptr, ptr, ptr, i32 } %45, ptr %47, 1
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %50 = load ptr, ptr %49, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } %48, ptr %50, 2
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %53 = load i32, ptr %52, align 4
  %54 = insertvalue { ptr, ptr, ptr, i32 } %51, i32 %53, 3
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %56 = load ptr, ptr %55, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %56, 0
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } %57, ptr %59, 1
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %62 = load ptr, ptr %61, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr %62, 2
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %65 = load i32, ptr %64, align 4
  %66 = insertvalue { ptr, ptr, ptr, i32 } %63, i32 %65, 3
  %67 = alloca [1 x ptr], align 8
  %68 = getelementptr [1 x ptr], ptr %67, i32 0, i32 0
  store ptr @_parameterization_IntArray, ptr %68, align 8
  %69 = call ptr @llvm.invariant.start.p0(i64 1, ptr %67)
  %70 = call ptr @llvm.invariant.start.p0(i64 64, ptr %56)
  %71 = getelementptr ptr, ptr %56, i32 %65
  %72 = getelementptr ptr, ptr %71, i32 2
  %73 = load ptr, ptr %72, align 8
  %74 = alloca { ptr }, align 8
  %75 = getelementptr { ptr }, ptr %74, i32 0, i32 0
  store ptr %44, ptr %75, align 8
  %76 = call ptr @behavior_wrapper(ptr %73, { ptr, ptr, ptr, i32 } %66, ptr %74)
  call void %76({ ptr, ptr, ptr, i32 } %66, { ptr, ptr, ptr, i32 } %66, ptr %67, { ptr, ptr, ptr, i32 } %54)
  %77 = alloca { ptr, ptr, ptr, i32 }, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 0
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 1
  %83 = load ptr, ptr %81, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 2
  %86 = load ptr, ptr %84, align 8
  store ptr %86, ptr %85, align 8
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 3
  %89 = load i32, ptr %87, align 4
  store i32 %89, ptr %88, align 4
  call void @set_offset(ptr %77, ptr @Iterator)
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 0
  %91 = load ptr, ptr %90, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %91, 0
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 1
  %94 = load ptr, ptr %93, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %94, 1
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 2
  %97 = load ptr, ptr %96, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %97, 2
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 3
  %100 = load i32, ptr %99, align 4
  %101 = insertvalue { ptr, ptr, ptr, i32 } %98, i32 %100, 3
  ret { ptr, ptr, ptr, i32 } %101
}

define { i64, i64 } @_size_IntArrayIterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %10
  %12 = urem i64 %11, %5
  %13 = icmp eq i64 %12, 0
  %14 = sub i64 %5, %12
  %15 = select i1 %13, i64 0, i64 %14
  %16 = add i64 %11, %15
  %17 = insertvalue { i64, i64 } undef, i64 %16, 0
  %18 = insertvalue { i64, i64 } %17, i64 %5, 1
  ret { i64, i64 } %18
}

define ptr @IntArrayIterator_B_init_arrayIntArray({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7629948565578263212, i64 ptrtoint (ptr @IntArray to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [8 x ptr], ptr %15, i32 0, i32 4
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @IntArrayIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [8 x ptr], ptr %4, i32 0, i32 5
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @IntArrayIterator_init_arrayIntArray({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @IntArrayIterator)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 16, ptr %20)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %34 = load i32, ptr %32, align 4
  store i32 %34, ptr %33, align 4
  call void @set_offset(ptr %22, ptr @IntArray)
  %35 = alloca { ptr, ptr, ptr, i32 }, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %38 = load ptr, ptr %36, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %41 = load ptr, ptr %39, align 8
  store ptr %41, ptr %40, align 8
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %44 = load ptr, ptr %42, align 8
  store ptr %44, ptr %43, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %47 = load i32, ptr %45, align 4
  store i32 %47, ptr %46, align 4
  call void @set_offset(ptr %35, ptr @IntArray)
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = load ptr, ptr %7, align 8
  %51 = call ptr @llvm.invariant.start.p0(i64 64, ptr %50)
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %53 = load i32, ptr %52, align 4
  %54 = getelementptr ptr, ptr %50, i32 %53
  %55 = load ptr, ptr %54, align 8
  %56 = getelementptr { ptr, ptr }, ptr %55, i32 0, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %59 = load ptr, ptr %58, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %59, 0
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %62 = load ptr, ptr %61, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr %62, 1
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %65 = load ptr, ptr %64, align 8
  %66 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %65, 2
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %68 = load i32, ptr %67, align 4
  %69 = insertvalue { ptr, ptr, ptr, i32 } %66, i32 %68, 3
  call void %57(ptr %49, { ptr, ptr, ptr, i32 } %69) #15
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %71 = load ptr, ptr %70, align 8
  %72 = load ptr, ptr %7, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 64, ptr %72)
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %75 = load i32, ptr %74, align 4
  %76 = getelementptr ptr, ptr %72, i32 %75
  %77 = getelementptr ptr, ptr %76, i32 1
  %78 = load ptr, ptr %77, align 8
  %79 = getelementptr { ptr, ptr }, ptr %78, i32 0, i32 1
  %80 = load ptr, ptr %79, align 8
  call void %80(ptr %71, i32 0) #15
  ret void
}

define { ptr, i32 } @IntArrayIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = alloca [0 x ptr], align 8
  %6 = alloca {}, align 8
  %7 = alloca ptr, align 8
  %8 = alloca i32, align 4
  %9 = alloca ptr, align 8
  %10 = alloca i32, align 4
  %11 = alloca ptr, align 8
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i32 }, align 8
  %.reg2mem1 = alloca { ptr, i32 }, align 8
  %.reg2mem3 = alloca { ptr, i32 }, align 8
  %.reg2mem5 = alloca { ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %12, align 8
  %13 = call ptr @llvm.invariant.start.p0(i64 16, ptr %12)
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 0
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 2
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %26 = load i32, ptr %24, align 4
  store i32 %26, ptr %25, align 4
  call void @set_offset(ptr %14, ptr @IntArrayIterator)
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = load ptr, ptr %14, align 8
  %30 = call ptr @llvm.invariant.start.p0(i64 64, ptr %29)
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %32 = load i32, ptr %31, align 4
  %33 = getelementptr ptr, ptr %29, i32 %32
  %34 = getelementptr ptr, ptr %33, i32 1
  %35 = load ptr, ptr %34, align 8
  %36 = getelementptr { ptr, ptr }, ptr %35, i32 0, i32 0
  %37 = load ptr, ptr %36, align 8
  %38 = call i32 %37(ptr %28) #16
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %40 = load ptr, ptr %39, align 8
  %41 = load ptr, ptr %14, align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 64, ptr %41)
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %44 = load i32, ptr %43, align 4
  %45 = getelementptr ptr, ptr %41, i32 %44
  %46 = load ptr, ptr %45, align 8
  %47 = getelementptr { ptr, ptr }, ptr %46, i32 0, i32 0
  %48 = load ptr, ptr %47, align 8
  %49 = call { ptr, ptr, ptr, i32 } %48(ptr %40) #16
  %50 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %49, ptr %50, align 8
  %51 = call ptr @llvm.invariant.start.p0(i64 16, ptr %50)
  call void @assume_offset(ptr %50, ptr @IntArray)
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 0
  %53 = load ptr, ptr %52, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %53, 0
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 1
  %56 = load ptr, ptr %55, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %56, 1
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 2
  %59 = load ptr, ptr %58, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } %57, ptr %59, 2
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 3
  %62 = load i32, ptr %61, align 4
  %63 = insertvalue { ptr, ptr, ptr, i32 } %60, i32 %62, 3
  %64 = alloca [0 x ptr], align 8
  %65 = call ptr @llvm.invariant.start.p0(i64 0, ptr %64)
  %66 = call ptr @llvm.invariant.start.p0(i64 616, ptr %53)
  %67 = getelementptr ptr, ptr %53, i32 %62
  %68 = getelementptr ptr, ptr %67, i32 6
  %69 = load ptr, ptr %68, align 8
  %70 = alloca {}, align 8
  %71 = call ptr @behavior_wrapper(ptr %69, { ptr, ptr, ptr, i32 } %63, ptr %70)
  %72 = call i32 %71({ ptr, ptr, ptr, i32 } %63, { ptr, ptr, ptr, i32 } %63, ptr %64)
  %73 = icmp slt i32 %38, %72
  br i1 %73, label %74, label %152

74:                                               ; preds = %3
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %76 = load ptr, ptr %75, align 8
  %77 = load ptr, ptr %14, align 8
  %78 = call ptr @llvm.invariant.start.p0(i64 64, ptr %77)
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %80 = load i32, ptr %79, align 4
  %81 = getelementptr ptr, ptr %77, i32 %80
  %82 = getelementptr ptr, ptr %81, i32 1
  %83 = load ptr, ptr %82, align 8
  %84 = getelementptr { ptr, ptr }, ptr %83, i32 0, i32 0
  %85 = load ptr, ptr %84, align 8
  %86 = call i32 %85(ptr %76) #16
  %87 = add i32 %86, 1
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %89 = load ptr, ptr %88, align 8
  %90 = load ptr, ptr %14, align 8
  %91 = call ptr @llvm.invariant.start.p0(i64 64, ptr %90)
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %93 = load i32, ptr %92, align 4
  %94 = getelementptr ptr, ptr %90, i32 %93
  %95 = getelementptr ptr, ptr %94, i32 1
  %96 = load ptr, ptr %95, align 8
  %97 = getelementptr { ptr, ptr }, ptr %96, i32 0, i32 1
  %98 = load ptr, ptr %97, align 8
  call void %98(ptr %89, i32 %87) #15
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %100 = load ptr, ptr %99, align 8
  %101 = load ptr, ptr %14, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 64, ptr %101)
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %104 = load i32, ptr %103, align 4
  %105 = getelementptr ptr, ptr %101, i32 %104
  %106 = load ptr, ptr %105, align 8
  %107 = getelementptr { ptr, ptr }, ptr %106, i32 0, i32 0
  %108 = load ptr, ptr %107, align 8
  %109 = call { ptr, ptr, ptr, i32 } %108(ptr %100) #16
  store { ptr, ptr, ptr, i32 } %109, ptr %4, align 8
  %110 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  call void @assume_offset(ptr %4, ptr @IntArray)
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %112 = load ptr, ptr %111, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %112, 0
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %115 = load ptr, ptr %114, align 8
  %116 = insertvalue { ptr, ptr, ptr, i32 } %113, ptr %115, 1
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %118 = load ptr, ptr %117, align 8
  %119 = insertvalue { ptr, ptr, ptr, i32 } %116, ptr %118, 2
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %121 = load i32, ptr %120, align 4
  %122 = insertvalue { ptr, ptr, ptr, i32 } %119, i32 %121, 3
  %123 = call ptr @llvm.invariant.start.p0(i64 0, ptr %5)
  %124 = call ptr @llvm.invariant.start.p0(i64 616, ptr %112)
  %125 = getelementptr ptr, ptr %112, i32 %121
  %126 = getelementptr ptr, ptr %125, i32 8
  %127 = load ptr, ptr %126, align 8
  %128 = call ptr @behavior_wrapper(ptr %127, { ptr, ptr, ptr, i32 } %122, ptr %6)
  %129 = call { ptr } %128({ ptr, ptr, ptr, i32 } %122, { ptr, ptr, ptr, i32 } %122, ptr %5)
  store { ptr } %129, ptr %7, align 8
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %131 = load ptr, ptr %130, align 8
  %132 = load ptr, ptr %14, align 8
  %133 = call ptr @llvm.invariant.start.p0(i64 64, ptr %132)
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %135 = load i32, ptr %134, align 4
  %136 = getelementptr ptr, ptr %132, i32 %135
  %137 = getelementptr ptr, ptr %136, i32 1
  %138 = load ptr, ptr %137, align 8
  %139 = getelementptr { ptr, ptr }, ptr %138, i32 0, i32 0
  %140 = load ptr, ptr %139, align 8
  %141 = call i32 %140(ptr %131) #16
  %142 = sub i32 %141, 1
  %143 = load ptr, ptr %7, align 8
  %144 = sext i32 %142 to i64
  %145 = mul i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %144
  %146 = getelementptr i8, ptr %143, i64 %145
  %147 = load i32, ptr %146, align 4
  store i32 %147, ptr %8, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %9, align 4
  %148 = load ptr, ptr %9, align 8
  %149 = insertvalue { ptr, i32 } undef, ptr %148, 0
  %150 = load i32, ptr %8, align 4
  %151 = insertvalue { ptr, i32 } %149, i32 %150, 1
  store { ptr, i32 } %151, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i32 }, ptr %.reg2mem3, align 8
  store { ptr, i32 } %.reload4, ptr %.reg2mem5, align 8
  br label %157

152:                                              ; preds = %3
  store [0 x i8] undef, ptr %10, align 1
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %11, align 4
  %153 = load ptr, ptr %11, align 8
  %154 = insertvalue { ptr, i32 } undef, ptr %153, 0
  %155 = load i32, ptr %10, align 4
  %156 = insertvalue { ptr, i32 } %154, i32 %155, 1
  store { ptr, i32 } %156, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i32 }, ptr %.reg2mem1, align 8
  store { ptr, i32 } %.reload2, ptr %.reg2mem5, align 8
  br label %157

157:                                              ; preds = %152, %74
  %.reload6 = load { ptr, i32 }, ptr %.reg2mem5, align 8
  store { ptr, i32 } %.reload6, ptr %.reg2mem, align 8
  br label %158

158:                                              ; preds = %157
  %.reload = load { ptr, i32 }, ptr %.reg2mem, align 8
  ret { ptr, i32 } %.reload
}

define i32 @IntArrayIterator_getter_index(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = load i32, ptr %7, align 4
  ret i32 %8
}

define void @IntArrayIterator_setter_index(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  store i32 %1, ptr %8, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @IntArrayIterator_getter_array(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @IntArrayIterator_setter_array(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  ret void
}

define i32 @IntArray_getter_capacity(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = load i32, ptr %13, align 4
  ret i32 %14
}

define void @IntArray_setter_capacity(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  store i32 %1, ptr %14, align 4
  ret void
}

define i32 @IntArray_getter_length(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = load i32, ptr %7, align 4
  ret i32 %8
}

define void @IntArray_setter_length(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  store i32 %1, ptr %8, align 4
  ret void
}

define { ptr } @IntArray_getter_buffer(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = getelementptr { ptr }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr } undef, ptr %4, 0
  ret { ptr } %5
}

define void @IntArray_setter_buffer(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca ptr, align 8
  store { ptr } %1, ptr %4, align 8
  %5 = getelementptr { ptr }, ptr %3, i32 0, i32 0
  %6 = load ptr, ptr %4, align 8
  store ptr %6, ptr %5, align 8
  ret void
}

define { i64, i64 } @_size_Pair(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = getelementptr ptr, ptr %0, i32 1
  %13 = load ptr, ptr %12, align 8
  %14 = load ptr, ptr %13, align 8
  %15 = getelementptr [7 x ptr], ptr %14, i32 0, i32 6
  %16 = load ptr, ptr %15, align 8
  %17 = call { i64, i64 } @size_wrapper(ptr %16, ptr %13)
  %18 = extractvalue { i64, i64 } %17, 0
  %19 = extractvalue { i64, i64 } %17, 1
  %20 = icmp ugt i64 %19, %5
  %21 = select i1 %20, i64 %19, i64 %5
  %22 = urem i64 %11, %19
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 %19, %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 %18, %25
  %27 = add i64 %11, %26
  %28 = getelementptr ptr, ptr %0, i32 2
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %29, align 8
  %31 = getelementptr [7 x ptr], ptr %30, i32 0, i32 6
  %32 = load ptr, ptr %31, align 8
  %33 = call { i64, i64 } @size_wrapper(ptr %32, ptr %29)
  %34 = extractvalue { i64, i64 } %33, 0
  %35 = extractvalue { i64, i64 } %33, 1
  %36 = icmp ugt i64 %35, %21
  %37 = select i1 %36, i64 %35, i64 %21
  %38 = urem i64 %27, %35
  %39 = icmp eq i64 %38, 0
  %40 = sub i64 %35, %38
  %41 = select i1 %39, i64 0, i64 %40
  %42 = add i64 %34, %41
  %43 = add i64 %27, %42
  %44 = urem i64 %43, %37
  %45 = icmp eq i64 %44, 0
  %46 = sub i64 %37, %44
  %47 = select i1 %45, i64 0, i64 %46
  %48 = add i64 %43, %47
  %49 = insertvalue { i64, i64 } undef, i64 %48, 0
  %50 = insertvalue { i64, i64 } %49, i64 %37, 1
  ret { i64, i64 } %50
}

define ptr @Pair_field_Pair_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @Pair_field_Pair_1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 1
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @Pair_B_init_firstT_secondU({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [10 x ptr], ptr %26, i32 0, i32 7
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @Pair_B_first_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [10 x ptr], ptr %4, i32 0, i32 8
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Pair_B_second_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [10 x ptr], ptr %4, i32 0, i32 9
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @Pair_init_firstT_secondU({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3, { ptr, i160 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @Pair)
  %21 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %21, align 8
  %22 = alloca i160, align 8
  %23 = alloca ptr, align 8
  %24 = getelementptr { ptr, i160 }, ptr %21, i32 0, i32 0
  %25 = load ptr, ptr %24, align 8
  store ptr %25, ptr %23, align 8
  %26 = getelementptr { ptr, i160 }, ptr %21, i32 0, i32 1
  %27 = load i160, ptr %26, align 4
  store i160 %27, ptr %22, align 4
  %28 = alloca i160, align 8
  %29 = alloca ptr, align 8
  %30 = load ptr, ptr %23, align 8
  store ptr %30, ptr %29, align 8
  %31 = load i160, ptr %22, align 4
  store i160 %31, ptr %28, align 4
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %33 = load ptr, ptr %32, align 8
  %34 = load ptr, ptr %8, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 80, ptr %34)
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %37 = load i32, ptr %36, align 4
  %38 = getelementptr ptr, ptr %34, i32 %37
  %39 = getelementptr ptr, ptr %38, i32 2
  %40 = load ptr, ptr %39, align 8
  %41 = getelementptr { ptr, ptr }, ptr %40, i32 0, i32 1
  %42 = load ptr, ptr %41, align 8
  %43 = load ptr, ptr %29, align 8
  %44 = insertvalue { ptr, i160 } undef, ptr %43, 0
  %45 = load i160, ptr %28, align 4
  %46 = insertvalue { ptr, i160 } %44, i160 %45, 1
  call void %42(ptr %33, { ptr, i160 } %46) #15
  %47 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %4, ptr %47, align 8
  %48 = alloca i160, align 8
  %49 = alloca ptr, align 8
  %50 = getelementptr { ptr, i160 }, ptr %47, i32 0, i32 0
  %51 = load ptr, ptr %50, align 8
  store ptr %51, ptr %49, align 8
  %52 = getelementptr { ptr, i160 }, ptr %47, i32 0, i32 1
  %53 = load i160, ptr %52, align 4
  store i160 %53, ptr %48, align 4
  %54 = alloca i160, align 8
  %55 = alloca ptr, align 8
  %56 = load ptr, ptr %49, align 8
  store ptr %56, ptr %55, align 8
  %57 = load i160, ptr %48, align 4
  store i160 %57, ptr %54, align 4
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = load ptr, ptr %8, align 8
  %61 = call ptr @llvm.invariant.start.p0(i64 80, ptr %60)
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %63 = load i32, ptr %62, align 4
  %64 = getelementptr ptr, ptr %60, i32 %63
  %65 = getelementptr ptr, ptr %64, i32 3
  %66 = load ptr, ptr %65, align 8
  %67 = getelementptr { ptr, ptr }, ptr %66, i32 0, i32 1
  %68 = load ptr, ptr %67, align 8
  %69 = load ptr, ptr %55, align 8
  %70 = insertvalue { ptr, i160 } undef, ptr %69, 0
  %71 = load i160, ptr %54, align 4
  %72 = insertvalue { ptr, i160 } %70, i160 %71, 1
  call void %68(ptr %59, { ptr, i160 } %72) #15
  ret void
}

define { ptr, i160 } @Pair_first_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Pair)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 80, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call { ptr, i160 } %29(ptr %20) #16
  %31 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %30, ptr %31, align 8
  %32 = alloca i160, align 8
  %33 = alloca ptr, align 8
  %34 = getelementptr { ptr, i160 }, ptr %31, i32 0, i32 0
  %35 = load ptr, ptr %34, align 8
  store ptr %35, ptr %33, align 8
  %36 = getelementptr { ptr, i160 }, ptr %31, i32 0, i32 1
  %37 = load i160, ptr %36, align 4
  store i160 %37, ptr %32, align 4
  %38 = alloca i160, align 8
  %39 = alloca ptr, align 8
  %40 = load ptr, ptr %33, align 8
  store ptr %40, ptr %39, align 8
  %41 = load i160, ptr %32, align 4
  store i160 %41, ptr %38, align 4
  %42 = load ptr, ptr %39, align 8
  %43 = insertvalue { ptr, i160 } undef, ptr %42, 0
  %44 = load i160, ptr %38, align 4
  %45 = insertvalue { ptr, i160 } %43, i160 %44, 1
  ret { ptr, i160 } %45
}

define { ptr, i160 } @Pair_second_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Pair)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 80, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 3
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call { ptr, i160 } %29(ptr %20) #16
  %31 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %30, ptr %31, align 8
  %32 = alloca i160, align 8
  %33 = alloca ptr, align 8
  %34 = getelementptr { ptr, i160 }, ptr %31, i32 0, i32 0
  %35 = load ptr, ptr %34, align 8
  store ptr %35, ptr %33, align 8
  %36 = getelementptr { ptr, i160 }, ptr %31, i32 0, i32 1
  %37 = load i160, ptr %36, align 4
  store i160 %37, ptr %32, align 4
  %38 = alloca i160, align 8
  %39 = alloca ptr, align 8
  %40 = load ptr, ptr %33, align 8
  store ptr %40, ptr %39, align 8
  %41 = load i160, ptr %32, align 4
  store i160 %41, ptr %38, align 4
  %42 = load ptr, ptr %39, align 8
  %43 = insertvalue { ptr, i160 } undef, ptr %42, 0
  %44 = load i160, ptr %38, align 4
  %45 = insertvalue { ptr, i160 } %43, i160 %44, 1
  ret { ptr, i160 } %45
}

define { ptr, i160 } @Pair_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = load ptr, ptr %0, align 8
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr ptr, ptr %9, i32 6
  %11 = load ptr, ptr %10, align 8
  %12 = call { i64, i64 } @size_wrapper(ptr %11, ptr %8)
  %13 = extractvalue { i64, i64 } %12, 0
  %14 = extractvalue { i64, i64 } %12, 1
  %15 = urem i64 %7, %14
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 %14, %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %13, %18
  %20 = add i64 %7, %19
  %21 = getelementptr ptr, ptr %0, i32 1
  %22 = load ptr, ptr %21, align 8
  %23 = load ptr, ptr %22, align 8
  %24 = getelementptr ptr, ptr %23, i32 6
  %25 = load ptr, ptr %24, align 8
  %26 = call { i64, i64 } @size_wrapper(ptr %25, ptr %22)
  %27 = extractvalue { i64, i64 } %26, 1
  %28 = urem i64 %20, %27
  %29 = icmp eq i64 %28, 0
  %30 = sub i64 %27, %28
  %31 = select i1 %29, i64 0, i64 %30
  %32 = add i64 %20, %31
  %33 = getelementptr i8, ptr %0, i64 %32
  %34 = getelementptr ptr, ptr %0, i32 1
  %35 = load ptr, ptr %34, align 8
  %36 = load ptr, ptr %35, align 8
  %37 = getelementptr ptr, ptr %36, i32 7
  %38 = load ptr, ptr %37, align 8
  %39 = call { ptr, i160 } @box_wrapper(ptr %38, ptr %33, ptr %35)
  ret { ptr, i160 } %39
}

define void @Pair_setter_second(ptr %0, { ptr, i160 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = load ptr, ptr %0, align 8
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr ptr, ptr %10, i32 6
  %12 = load ptr, ptr %11, align 8
  %13 = call { i64, i64 } @size_wrapper(ptr %12, ptr %9)
  %14 = extractvalue { i64, i64 } %13, 0
  %15 = extractvalue { i64, i64 } %13, 1
  %16 = urem i64 %8, %15
  %17 = icmp eq i64 %16, 0
  %18 = sub i64 %15, %16
  %19 = select i1 %17, i64 0, i64 %18
  %20 = add i64 %14, %19
  %21 = add i64 %8, %20
  %22 = getelementptr ptr, ptr %0, i32 1
  %23 = load ptr, ptr %22, align 8
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr ptr, ptr %24, i32 6
  %26 = load ptr, ptr %25, align 8
  %27 = call { i64, i64 } @size_wrapper(ptr %26, ptr %23)
  %28 = extractvalue { i64, i64 } %27, 1
  %29 = urem i64 %21, %28
  %30 = icmp eq i64 %29, 0
  %31 = sub i64 %28, %29
  %32 = select i1 %30, i64 0, i64 %31
  %33 = add i64 %21, %32
  %34 = getelementptr i8, ptr %0, i64 %33
  %35 = getelementptr ptr, ptr %0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = load ptr, ptr %36, align 8
  %38 = getelementptr ptr, ptr %37, i32 8
  %39 = load ptr, ptr %38, align 8
  call void @unbox_wrapper(ptr %39, { ptr, i160 } %1, ptr %36, ptr %34)
  ret void
}

define { ptr, i160 } @Pair_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = load ptr, ptr %0, align 8
  %9 = load ptr, ptr %8, align 8
  %10 = getelementptr ptr, ptr %9, i32 6
  %11 = load ptr, ptr %10, align 8
  %12 = call { i64, i64 } @size_wrapper(ptr %11, ptr %8)
  %13 = extractvalue { i64, i64 } %12, 1
  %14 = urem i64 %7, %13
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 %13, %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %7, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = load ptr, ptr %0, align 8
  %21 = load ptr, ptr %20, align 8
  %22 = getelementptr ptr, ptr %21, i32 7
  %23 = load ptr, ptr %22, align 8
  %24 = call { ptr, i160 } @box_wrapper(ptr %23, ptr %19, ptr %20)
  ret { ptr, i160 } %24
}

define void @Pair_setter_first(ptr %0, { ptr, i160 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = load ptr, ptr %0, align 8
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr ptr, ptr %10, i32 6
  %12 = load ptr, ptr %11, align 8
  %13 = call { i64, i64 } @size_wrapper(ptr %12, ptr %9)
  %14 = extractvalue { i64, i64 } %13, 1
  %15 = urem i64 %8, %14
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 %14, %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %8, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = load ptr, ptr %0, align 8
  %22 = load ptr, ptr %21, align 8
  %23 = getelementptr ptr, ptr %22, i32 8
  %24 = load ptr, ptr %23, align 8
  call void @unbox_wrapper(ptr %24, { ptr, i160 } %1, ptr %21, ptr %20)
  ret void
}

define { i64, i64 } @_size_Iterator2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { i64, i64 } @_size_Iterable2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { i64, i64 } @_size_Array(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = urem i64 %27, %21
  %29 = icmp eq i64 %28, 0
  %30 = sub i64 %21, %28
  %31 = select i1 %29, i64 0, i64 %30
  %32 = add i64 %27, %31
  %33 = insertvalue { i64, i64 } undef, i64 %32, 0
  %34 = insertvalue { i64, i64 } %33, i64 %21, 1
  ret { i64, i64 } %34
}

define ptr @Array_field_Array_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @Array_B__Self_from_iterable_iterableIterable2T(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %3 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr ptr, ptr %4, i32 1
  %6 = getelementptr ptr, ptr %4, i32 2
  %7 = getelementptr ptr, ptr %4, i32 3
  %8 = getelementptr ptr, ptr %4, i32 4
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %12)
  %14 = load ptr, ptr getelementptr (ptr, ptr getelementptr ([69 x ptr], ptr @Array, i32 0, i32 25), i32 9), align 8
  ret ptr %14
}

define ptr @Array_B_init_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [69 x ptr], ptr %4, i32 0, i32 26
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Array_B_init_capacityPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [69 x ptr], ptr %15, i32 0, i32 27
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Array_B_length_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [69 x ptr], ptr %4, i32 0, i32 28
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Array_B_capacity_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [69 x ptr], ptr %4, i32 0, i32 29
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Array_B_append_xT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [69 x ptr], ptr %15, i32 0, i32 30
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Array_B_grow_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [69 x ptr], ptr %4, i32 0, i32 31
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Array_B__index_xPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [69 x ptr], ptr %15, i32 0, i32 32
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Array_B_throw_oob_xPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [69 x ptr], ptr %15, i32 0, i32 33
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Array_B_unsafe_index_xPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [69 x ptr], ptr %15, i32 0, i32 34
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Array_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [69 x ptr], ptr %4, i32 0, i32 35
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Array_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [69 x ptr], ptr %15, i32 0, i32 36
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Array_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [69 x ptr], ptr %26, i32 0, i32 37
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @Array_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [69 x ptr], ptr %15, i32 0, i32 38
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Array_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [69 x ptr], ptr %15, i32 0, i32 39
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Array_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [69 x ptr], ptr %15, i32 0, i32 40
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Array_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [69 x ptr], ptr %15, i32 0, i32 41
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Array_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [69 x ptr], ptr %15, i32 0, i32 42
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Array_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [69 x ptr], ptr %15, i32 0, i32 43
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Array_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [69 x ptr], ptr %15, i32 0, i32 44
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Array_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [69 x ptr], ptr %15, i32 0, i32 45
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define { ptr, ptr, ptr, i32 } @Array__Self_from_iterable_iterableIterable2T(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %3 = alloca [0 x ptr], align 8
  %4 = alloca {}, align 8
  %5 = alloca { ptr, i160 }, align 8
  %6 = alloca i160, align 8
  %7 = alloca ptr, align 8
  %8 = alloca i160, align 8
  %9 = alloca ptr, align 8
  %10 = alloca [1 x ptr], align 8
  %11 = alloca { ptr }, align 8
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  %14 = alloca i160, align 8
  %15 = alloca ptr, align 8
  %16 = alloca { ptr, ptr, ptr, i32 }, align 8
  %17 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem5 = alloca ptr, align 8
  %.reg2mem7 = alloca ptr, align 8
  %.reg2mem9 = alloca ptr, align 8
  %.reg2mem11 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %1, ptr %17, align 8
  %18 = call ptr @llvm.invariant.start.p0(i64 16, ptr %17)
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 0
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 2
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = load i32, ptr %29, align 4
  store i32 %31, ptr %30, align 4
  call void @set_offset(ptr %19, ptr @Iterable2)
  %32 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([2 x ptr], ptr null, i32 1) to i64))
  %33 = getelementptr [2 x ptr], ptr %32, i32 0, i32 1
  store ptr null, ptr %33, align 8
  %34 = call ptr @llvm.invariant.start.p0(i64 8, ptr %32)
  store ptr @any_typ, ptr %32, align 8
  %35 = alloca [2 x ptr], align 8
  store ptr @Array, ptr %35, align 8
  %36 = getelementptr ptr, ptr %35, i32 1
  store ptr %32, ptr %36, align 8
  %37 = load ptr, ptr %35, align 8
  %38 = getelementptr ptr, ptr %37, i32 6
  %39 = load ptr, ptr %38, align 8
  %40 = call { i64, i64 } @size_wrapper(ptr %39, ptr %35)
  %41 = extractvalue { i64, i64 } %40, 0
  %42 = call ptr @bump_malloc(i64 %41)
  store ptr %32, ptr %42, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 8, ptr %42)
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 1
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 3
  store ptr @Array, ptr %44, align 8
  store ptr %42, ptr %45, align 8
  store i32 9, ptr %46, align 4
  %47 = call ptr @llvm.invariant.start.p0(i64 16, ptr %44)
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 0
  %49 = load ptr, ptr %48, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %49, 0
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 1
  %52 = load ptr, ptr %51, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } %50, ptr %52, 1
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 2
  %55 = load ptr, ptr %54, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %55, 2
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 3
  %58 = load i32, ptr %57, align 4
  %59 = insertvalue { ptr, ptr, ptr, i32 } %56, i32 %58, 3
  %60 = alloca [0 x ptr], align 8
  %61 = call ptr @llvm.invariant.start.p0(i64 0, ptr %60)
  %62 = call ptr @llvm.invariant.start.p0(i64 552, ptr %49)
  %63 = getelementptr ptr, ptr %49, i32 %58
  %64 = getelementptr ptr, ptr %63, i32 5
  %65 = load ptr, ptr %64, align 8
  %66 = alloca {}, align 8
  %67 = call ptr @behavior_wrapper(ptr %65, { ptr, ptr, ptr, i32 } %59, ptr %66)
  call void %67({ ptr, ptr, ptr, i32 } %59, { ptr, ptr, ptr, i32 } %59, ptr %60)
  %68 = alloca { ptr, ptr, ptr, i32 }, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 0
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 0
  %71 = load ptr, ptr %69, align 8
  store ptr %71, ptr %70, align 8
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 1
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 1
  %74 = load ptr, ptr %72, align 8
  store ptr %74, ptr %73, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 2
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 2
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 3
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 3
  %80 = load i32, ptr %78, align 4
  store i32 %80, ptr %79, align 4
  call void @set_offset(ptr %68, ptr @Array)
  %81 = alloca { ptr, ptr, ptr, i32 }, align 8
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 0
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 0
  %84 = load ptr, ptr %82, align 8
  store ptr %84, ptr %83, align 8
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 1
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 1
  %87 = load ptr, ptr %85, align 8
  store ptr %87, ptr %86, align 8
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 2
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 2
  %90 = load ptr, ptr %88, align 8
  store ptr %90, ptr %89, align 8
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 3
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 3
  %93 = load i32, ptr %91, align 4
  store i32 %93, ptr %92, align 4
  %94 = call ptr @llvm.invariant.start.p0(i64 16, ptr %81)
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %96 = load ptr, ptr %95, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %96, 0
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %99 = load ptr, ptr %98, align 8
  %100 = insertvalue { ptr, ptr, ptr, i32 } %97, ptr %99, 1
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %102 = load ptr, ptr %101, align 8
  %103 = insertvalue { ptr, ptr, ptr, i32 } %100, ptr %102, 2
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %105 = load i32, ptr %104, align 4
  %106 = insertvalue { ptr, ptr, ptr, i32 } %103, i32 %105, 3
  %107 = alloca [0 x ptr], align 8
  %108 = call ptr @llvm.invariant.start.p0(i64 0, ptr %107)
  %109 = call ptr @llvm.invariant.start.p0(i64 184, ptr %96)
  %110 = getelementptr ptr, ptr %96, i32 %105
  %111 = getelementptr ptr, ptr %110, i32 1
  %112 = load ptr, ptr %111, align 8
  %113 = alloca {}, align 8
  %114 = call ptr @behavior_wrapper(ptr %112, { ptr, ptr, ptr, i32 } %106, ptr %113)
  %115 = call { ptr, ptr, ptr, i32 } %114({ ptr, ptr, ptr, i32 } %106, { ptr, ptr, ptr, i32 } %106, ptr %107)
  %116 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %115, ptr %116, align 8
  %117 = call ptr @llvm.invariant.start.p0(i64 16, ptr %116)
  %118 = alloca { ptr, ptr, ptr, i32 }, align 8
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 0
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 0
  %121 = load ptr, ptr %119, align 8
  store ptr %121, ptr %120, align 8
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 1
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 1
  %124 = load ptr, ptr %122, align 8
  store ptr %124, ptr %123, align 8
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 2
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 2
  %127 = load ptr, ptr %125, align 8
  store ptr %127, ptr %126, align 8
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 3
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 3
  %130 = load i32, ptr %128, align 4
  store i32 %130, ptr %129, align 4
  call void @set_offset(ptr %118, ptr @Iterator2)
  %131 = alloca { ptr, ptr, ptr, i32 }, align 8
  %132 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 0
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %131, i32 0, i32 0
  %134 = load ptr, ptr %132, align 8
  store ptr %134, ptr %133, align 8
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 1
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %131, i32 0, i32 1
  %137 = load ptr, ptr %135, align 8
  store ptr %137, ptr %136, align 8
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 2
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %131, i32 0, i32 2
  %140 = load ptr, ptr %138, align 8
  store ptr %140, ptr %139, align 8
  %141 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 3
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %131, i32 0, i32 3
  %143 = load i32, ptr %141, align 4
  store i32 %143, ptr %142, align 4
  call void @set_offset(ptr %131, ptr @Iterator2)
  %144 = alloca { ptr, ptr, ptr, i32 }, align 8
  %145 = getelementptr { ptr, ptr, ptr, i32 }, ptr %131, i32 0, i32 0
  %146 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 0
  %147 = load ptr, ptr %145, align 8
  store ptr %147, ptr %146, align 8
  %148 = getelementptr { ptr, ptr, ptr, i32 }, ptr %131, i32 0, i32 1
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 1
  %150 = load ptr, ptr %148, align 8
  store ptr %150, ptr %149, align 8
  %151 = getelementptr { ptr, ptr, ptr, i32 }, ptr %131, i32 0, i32 2
  %152 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 2
  %153 = load ptr, ptr %151, align 8
  store ptr %153, ptr %152, align 8
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %131, i32 0, i32 3
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 3
  %156 = load i32, ptr %154, align 4
  store i32 %156, ptr %155, align 4
  %157 = call ptr @llvm.invariant.start.p0(i64 16, ptr %144)
  %158 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 0
  store ptr %158, ptr %.reg2mem11, align 8
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 1
  store ptr %159, ptr %.reg2mem9, align 8
  %160 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 2
  store ptr %160, ptr %.reg2mem7, align 8
  %161 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 3
  store ptr %161, ptr %.reg2mem5, align 8
  %162 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 0
  store ptr %162, ptr %.reg2mem3, align 8
  br label %163

163:                                              ; preds = %._crit_edge1, %2
  %.reload12 = load ptr, ptr %.reg2mem11, align 8
  %164 = load ptr, ptr %.reload12, align 8
  %165 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %164, 0
  %.reload10 = load ptr, ptr %.reg2mem9, align 8
  %166 = load ptr, ptr %.reload10, align 8
  %167 = insertvalue { ptr, ptr, ptr, i32 } %165, ptr %166, 1
  %.reload8 = load ptr, ptr %.reg2mem7, align 8
  %168 = load ptr, ptr %.reload8, align 8
  %169 = insertvalue { ptr, ptr, ptr, i32 } %167, ptr %168, 2
  %.reload6 = load ptr, ptr %.reg2mem5, align 8
  %170 = load i32, ptr %.reload6, align 4
  %171 = insertvalue { ptr, ptr, ptr, i32 } %169, i32 %170, 3
  %172 = call ptr @llvm.invariant.start.p0(i64 0, ptr %3)
  %173 = call ptr @llvm.invariant.start.p0(i64 24, ptr %164)
  %174 = getelementptr ptr, ptr %164, i32 %170
  %175 = getelementptr ptr, ptr %174, i32 1
  %176 = load ptr, ptr %175, align 8
  %177 = call ptr @behavior_wrapper(ptr %176, { ptr, ptr, ptr, i32 } %171, ptr %4)
  %178 = call { ptr, i160 } %177({ ptr, ptr, ptr, i32 } %171, { ptr, ptr, ptr, i32 } %171, ptr %3)
  store { ptr, i160 } %178, ptr %5, align 8
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %179 = load ptr, ptr %.reload4, align 8
  %180 = ptrtoint ptr %179 to i64
  %181 = icmp eq i64 %180, ptrtoint (ptr @nil_typ to i64)
  %182 = icmp eq i64 %180, 0
  %183 = or i1 %181, %182
  %184 = icmp eq i1 %183, false
  store i1 %184, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %185, label %._crit_edge

._crit_edge:                                      ; preds = %163
  br label %239

185:                                              ; preds = %163
  %186 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 0
  %187 = load ptr, ptr %186, align 8
  store ptr %187, ptr %7, align 8
  %188 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 1
  %189 = load i160, ptr %188, align 4
  store i160 %189, ptr %6, align 4
  %190 = load ptr, ptr %7, align 8
  store ptr %190, ptr %9, align 8
  %191 = load i160, ptr %6, align 4
  store i160 %191, ptr %8, align 4
  %192 = load ptr, ptr %9, align 8
  %193 = insertvalue { ptr, i160 } undef, ptr %192, 0
  %194 = load i160, ptr %8, align 4
  %195 = insertvalue { ptr, i160 } %193, i160 %194, 1
  %196 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 0
  %197 = load ptr, ptr %196, align 8
  %198 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %197, 0
  %199 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 1
  %200 = load ptr, ptr %199, align 8
  %201 = insertvalue { ptr, ptr, ptr, i32 } %198, ptr %200, 1
  %202 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 2
  %203 = load ptr, ptr %202, align 8
  %204 = insertvalue { ptr, ptr, ptr, i32 } %201, ptr %203, 2
  %205 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 3
  %206 = load i32, ptr %205, align 4
  %207 = insertvalue { ptr, ptr, ptr, i32 } %204, i32 %206, 3
  %208 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([2 x ptr], ptr null, i32 1) to i64))
  %209 = getelementptr [2 x ptr], ptr %208, i32 0, i32 1
  store ptr null, ptr %209, align 8
  %210 = call ptr @llvm.invariant.start.p0(i64 8, ptr %208)
  store ptr @any_typ, ptr %208, align 8
  %211 = getelementptr [1 x ptr], ptr %10, i32 0, i32 0
  store ptr %208, ptr %211, align 8
  %212 = call ptr @llvm.invariant.start.p0(i64 1, ptr %10)
  %213 = call ptr @llvm.invariant.start.p0(i64 552, ptr %197)
  %214 = getelementptr ptr, ptr %197, i32 %206
  %215 = getelementptr ptr, ptr %214, i32 9
  %216 = load ptr, ptr %215, align 8
  %217 = getelementptr { ptr }, ptr %11, i32 0, i32 0
  store ptr %192, ptr %217, align 8
  %218 = call ptr @behavior_wrapper(ptr %216, { ptr, ptr, ptr, i32 } %207, ptr %11)
  %219 = call { ptr, ptr, ptr, i32 } %218({ ptr, ptr, ptr, i32 } %207, { ptr, ptr, ptr, i32 } %207, ptr %10, { ptr, i160 } %195)
  store { ptr, ptr, ptr, i32 } %219, ptr %12, align 8
  %220 = call ptr @llvm.invariant.start.p0(i64 16, ptr %12)
  %221 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 0
  %222 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %223 = load ptr, ptr %221, align 8
  store ptr %223, ptr %222, align 8
  %224 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %225 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %226 = load ptr, ptr %224, align 8
  store ptr %226, ptr %225, align 8
  %227 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 2
  %228 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %229 = load ptr, ptr %227, align 8
  store ptr %229, ptr %228, align 8
  %230 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  %231 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %232 = load i32, ptr %230, align 4
  store i32 %232, ptr %231, align 4
  call void @set_offset(ptr %13, ptr @Array)
  %233 = load ptr, ptr %7, align 8
  store ptr %233, ptr %15, align 8
  %234 = load i160, ptr %6, align 4
  store i160 %234, ptr %14, align 4
  %235 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 0
  %236 = load ptr, ptr %15, align 8
  store ptr %236, ptr %235, align 8
  %237 = getelementptr { ptr, i160 }, ptr %5, i32 0, i32 1
  %238 = load i160, ptr %14, align 4
  store i160 %238, ptr %237, align 4
  br label %239

239:                                              ; preds = %._crit_edge, %185
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %240

._crit_edge1:                                     ; preds = %239
  br label %163

240:                                              ; preds = %239
  %241 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 0
  %242 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 0
  %243 = load ptr, ptr %241, align 8
  store ptr %243, ptr %242, align 8
  %244 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 1
  %245 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %246 = load ptr, ptr %244, align 8
  store ptr %246, ptr %245, align 8
  %247 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 2
  %248 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 2
  %249 = load ptr, ptr %247, align 8
  store ptr %249, ptr %248, align 8
  %250 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 3
  %251 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %252 = load i32, ptr %250, align 4
  store i32 %252, ptr %251, align 4
  call void @set_offset(ptr %16, ptr @Array)
  %253 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 0
  %254 = load ptr, ptr %253, align 8
  %255 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %254, 0
  %256 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %257 = load ptr, ptr %256, align 8
  %258 = insertvalue { ptr, ptr, ptr, i32 } %255, ptr %257, 1
  %259 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 2
  %260 = load ptr, ptr %259, align 8
  %261 = insertvalue { ptr, ptr, ptr, i32 } %258, ptr %260, 2
  %262 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %263 = load i32, ptr %262, align 4
  %264 = insertvalue { ptr, ptr, ptr, i32 } %261, i32 %263, 3
  ret { ptr, ptr, ptr, i32 } %264
}

define void @Array_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Array)
  %19 = alloca ptr, align 8
  %20 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64))
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %22 = load ptr, ptr %21, align 8
  %23 = load ptr, ptr %6, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 552, ptr %23)
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %26 = load i32, ptr %25, align 4
  %27 = getelementptr ptr, ptr %23, i32 %26
  %28 = getelementptr ptr, ptr %27, i32 1
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr { ptr, ptr }, ptr %29, i32 0, i32 1
  %31 = load ptr, ptr %30, align 8
  %32 = getelementptr { ptr }, ptr %19, i32 0, i32 0
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr } undef, ptr %33, 0
  call void %31(ptr %22, { ptr } %34) #15
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = load ptr, ptr %6, align 8
  %38 = call ptr @llvm.invariant.start.p0(i64 552, ptr %37)
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %40 = load i32, ptr %39, align 4
  %41 = getelementptr ptr, ptr %37, i32 %40
  %42 = getelementptr ptr, ptr %41, i32 2
  %43 = load ptr, ptr %42, align 8
  %44 = getelementptr { ptr, ptr }, ptr %43, i32 0, i32 1
  %45 = load ptr, ptr %44, align 8
  call void %45(ptr %36, i32 0) #15
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %47 = load ptr, ptr %46, align 8
  %48 = load ptr, ptr %6, align 8
  %49 = call ptr @llvm.invariant.start.p0(i64 552, ptr %48)
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %51 = load i32, ptr %50, align 4
  %52 = getelementptr ptr, ptr %48, i32 %51
  %53 = getelementptr ptr, ptr %52, i32 3
  %54 = load ptr, ptr %53, align 8
  %55 = getelementptr { ptr, ptr }, ptr %54, i32 0, i32 1
  %56 = load ptr, ptr %55, align 8
  call void %56(ptr %47, i32 1) #15
  ret void
}

define void @Array_init_capacityPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Array)
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %21 = load ptr, ptr %20, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 552, ptr %22)
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %25 = load i32, ptr %24, align 4
  %26 = getelementptr ptr, ptr %22, i32 %25
  %27 = getelementptr ptr, ptr %26, i32 3
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr { ptr, ptr }, ptr %28, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  call void %30(ptr %21, i32 %3) #15
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %32 = load ptr, ptr %31, align 8
  %33 = load ptr, ptr %7, align 8
  %34 = call ptr @llvm.invariant.start.p0(i64 552, ptr %33)
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %36 = load i32, ptr %35, align 4
  %37 = getelementptr ptr, ptr %33, i32 %36
  %38 = getelementptr ptr, ptr %37, i32 3
  %39 = load ptr, ptr %38, align 8
  %40 = getelementptr { ptr, ptr }, ptr %39, i32 0, i32 0
  %41 = load ptr, ptr %40, align 8
  %42 = call i32 %41(ptr %32) #16
  %43 = sext i32 %42 to i64
  %44 = alloca ptr, align 8
  %45 = mul i64 %43, ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64)
  %46 = call ptr @bump_malloc(i64 %45)
  store ptr %46, ptr %44, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %48 = load ptr, ptr %47, align 8
  %49 = load ptr, ptr %7, align 8
  %50 = call ptr @llvm.invariant.start.p0(i64 552, ptr %49)
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %52 = load i32, ptr %51, align 4
  %53 = getelementptr ptr, ptr %49, i32 %52
  %54 = getelementptr ptr, ptr %53, i32 1
  %55 = load ptr, ptr %54, align 8
  %56 = getelementptr { ptr, ptr }, ptr %55, i32 0, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr { ptr }, ptr %44, i32 0, i32 0
  %59 = load ptr, ptr %58, align 8
  %60 = insertvalue { ptr } undef, ptr %59, 0
  call void %57(ptr %48, { ptr } %60) #15
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %62 = load ptr, ptr %61, align 8
  %63 = load ptr, ptr %7, align 8
  %64 = call ptr @llvm.invariant.start.p0(i64 552, ptr %63)
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %66 = load i32, ptr %65, align 4
  %67 = getelementptr ptr, ptr %63, i32 %66
  %68 = getelementptr ptr, ptr %67, i32 2
  %69 = load ptr, ptr %68, align 8
  %70 = getelementptr { ptr, ptr }, ptr %69, i32 0, i32 1
  %71 = load ptr, ptr %70, align 8
  call void %71(ptr %62, i32 0) #15
  ret void
}

define i32 @Array_length_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Array)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 552, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call i32 %29(ptr %20) #16
  ret i32 %30
}

define i32 @Array_capacity_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Array)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 552, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 3
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call i32 %29(ptr %20) #16
  ret i32 %30
}

define { ptr, ptr, ptr, i32 } @Array_append_xT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3) {
  %5 = alloca [0 x ptr], align 8
  %6 = alloca {}, align 8
  %7 = alloca ptr, align 8
  %8 = alloca i160, align 8
  %9 = alloca ptr, align 8
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %11 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %11, align 8
  %12 = call ptr @llvm.invariant.start.p0(i64 16, ptr %11)
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 0
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 2
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %25 = load i32, ptr %23, align 4
  store i32 %25, ptr %24, align 4
  call void @set_offset(ptr %13, ptr @Array)
  %26 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %26, align 8
  %27 = alloca i160, align 8
  %28 = alloca ptr, align 8
  %29 = getelementptr { ptr, i160 }, ptr %26, i32 0, i32 0
  %30 = load ptr, ptr %29, align 8
  store ptr %30, ptr %28, align 8
  %31 = getelementptr { ptr, i160 }, ptr %26, i32 0, i32 1
  %32 = load i160, ptr %31, align 4
  store i160 %32, ptr %27, align 4
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %34 = load ptr, ptr %33, align 8
  %35 = load ptr, ptr %13, align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 552, ptr %35)
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %38 = load i32, ptr %37, align 4
  %39 = getelementptr ptr, ptr %35, i32 %38
  %40 = getelementptr ptr, ptr %39, i32 2
  %41 = load ptr, ptr %40, align 8
  %42 = getelementptr { ptr, ptr }, ptr %41, i32 0, i32 0
  %43 = load ptr, ptr %42, align 8
  %44 = call i32 %43(ptr %34) #16
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %46 = load ptr, ptr %45, align 8
  %47 = load ptr, ptr %13, align 8
  %48 = call ptr @llvm.invariant.start.p0(i64 552, ptr %47)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %50 = load i32, ptr %49, align 4
  %51 = getelementptr ptr, ptr %47, i32 %50
  %52 = getelementptr ptr, ptr %51, i32 3
  %53 = load ptr, ptr %52, align 8
  %54 = getelementptr { ptr, ptr }, ptr %53, i32 0, i32 0
  %55 = load ptr, ptr %54, align 8
  %56 = call i32 %55(ptr %46) #16
  %57 = icmp sge i32 %44, %56
  br i1 %57, label %58, label %._crit_edge

._crit_edge:                                      ; preds = %4
  br label %86

58:                                               ; preds = %4
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %63 = load ptr, ptr %62, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %63, 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %66 = load ptr, ptr %65, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %66, 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %69 = load i32, ptr %68, align 4
  %70 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %69, 3
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %72 = load ptr, ptr %71, align 8
  %73 = load ptr, ptr %13, align 8
  %74 = call ptr @llvm.invariant.start.p0(i64 552, ptr %73)
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %76 = load i32, ptr %75, align 4
  %77 = getelementptr ptr, ptr %73, i32 %76
  %78 = load ptr, ptr %77, align 8
  %79 = call ptr @typegetter_wrapper(ptr %78, ptr %72)
  %80 = call ptr @llvm.invariant.start.p0(i64 0, ptr %5)
  %81 = call ptr @llvm.invariant.start.p0(i64 552, ptr %60)
  %82 = getelementptr ptr, ptr %60, i32 %69
  %83 = getelementptr ptr, ptr %82, i32 10
  %84 = load ptr, ptr %83, align 8
  %85 = call ptr @behavior_wrapper(ptr %84, { ptr, ptr, ptr, i32 } %70, ptr %6)
  call void %85({ ptr, ptr, ptr, i32 } %70, { ptr, ptr, ptr, i32 } %70, ptr %5)
  br label %86

86:                                               ; preds = %._crit_edge, %58
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %88 = load ptr, ptr %87, align 8
  %89 = load ptr, ptr %13, align 8
  %90 = call ptr @llvm.invariant.start.p0(i64 552, ptr %89)
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %92 = load i32, ptr %91, align 4
  %93 = getelementptr ptr, ptr %89, i32 %92
  %94 = getelementptr ptr, ptr %93, i32 1
  %95 = load ptr, ptr %94, align 8
  %96 = getelementptr { ptr, ptr }, ptr %95, i32 0, i32 0
  %97 = load ptr, ptr %96, align 8
  %98 = call { ptr } %97(ptr %88) #16
  store { ptr } %98, ptr %7, align 8
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %100 = load ptr, ptr %99, align 8
  %101 = load ptr, ptr %13, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 552, ptr %101)
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %104 = load i32, ptr %103, align 4
  %105 = getelementptr ptr, ptr %101, i32 %104
  %106 = getelementptr ptr, ptr %105, i32 2
  %107 = load ptr, ptr %106, align 8
  %108 = getelementptr { ptr, ptr }, ptr %107, i32 0, i32 0
  %109 = load ptr, ptr %108, align 8
  %110 = call i32 %109(ptr %100) #16
  %111 = load ptr, ptr %28, align 8
  store ptr %111, ptr %9, align 8
  %112 = load i160, ptr %27, align 4
  store i160 %112, ptr %8, align 4
  %113 = load ptr, ptr %7, align 8
  %114 = sext i32 %110 to i64
  %115 = mul i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), %114
  %116 = getelementptr i8, ptr %113, i64 %115
  %117 = getelementptr { ptr, i160 }, ptr %116, i32 0, i32 0
  %118 = load ptr, ptr %9, align 8
  store ptr %118, ptr %117, align 8
  %119 = getelementptr { ptr, i160 }, ptr %116, i32 0, i32 1
  %120 = load i160, ptr %8, align 4
  store i160 %120, ptr %119, align 4
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %122 = load ptr, ptr %121, align 8
  %123 = load ptr, ptr %13, align 8
  %124 = call ptr @llvm.invariant.start.p0(i64 552, ptr %123)
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %126 = load i32, ptr %125, align 4
  %127 = getelementptr ptr, ptr %123, i32 %126
  %128 = getelementptr ptr, ptr %127, i32 2
  %129 = load ptr, ptr %128, align 8
  %130 = getelementptr { ptr, ptr }, ptr %129, i32 0, i32 0
  %131 = load ptr, ptr %130, align 8
  %132 = call i32 %131(ptr %122) #16
  %133 = add i32 %132, 1
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %135 = load ptr, ptr %134, align 8
  %136 = load ptr, ptr %13, align 8
  %137 = call ptr @llvm.invariant.start.p0(i64 552, ptr %136)
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %139 = load i32, ptr %138, align 4
  %140 = getelementptr ptr, ptr %136, i32 %139
  %141 = getelementptr ptr, ptr %140, i32 2
  %142 = load ptr, ptr %141, align 8
  %143 = getelementptr { ptr, ptr }, ptr %142, i32 0, i32 1
  %144 = load ptr, ptr %143, align 8
  call void %144(ptr %135, i32 %133) #15
  %145 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %146 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 0
  %147 = load ptr, ptr %145, align 8
  store ptr %147, ptr %146, align 8
  %148 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %150 = load ptr, ptr %148, align 8
  store ptr %150, ptr %149, align 8
  %151 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %152 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 2
  %153 = load ptr, ptr %151, align 8
  store ptr %153, ptr %152, align 8
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  %156 = load i32, ptr %154, align 4
  store i32 %156, ptr %155, align 4
  call void @set_offset(ptr %10, ptr @Array)
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 0
  %158 = load ptr, ptr %157, align 8
  %159 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %158, 0
  %160 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %161 = load ptr, ptr %160, align 8
  %162 = insertvalue { ptr, ptr, ptr, i32 } %159, ptr %161, 1
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 2
  %164 = load ptr, ptr %163, align 8
  %165 = insertvalue { ptr, ptr, ptr, i32 } %162, ptr %164, 2
  %166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  %167 = load i32, ptr %166, align 4
  %168 = insertvalue { ptr, ptr, ptr, i32 } %165, i32 %167, 3
  ret { ptr, ptr, ptr, i32 } %168
}

define void @Array_grow_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i160, align 8
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = alloca i160, align 8
  %8 = alloca ptr, align 8
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i1, align 1
  %.reg2mem6 = alloca i32, align 4
  %.reg2mem11 = alloca ptr, align 8
  %.reg2mem13 = alloca ptr, align 8
  %.reg2mem15 = alloca i32, align 4
  %.reg2mem17 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %9, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 16, ptr %9)
  %11 = alloca { ptr, ptr, ptr, i32 }, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 0
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 2
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %23 = load i32, ptr %21, align 4
  store i32 %23, ptr %22, align 4
  call void @set_offset(ptr %11, ptr @Array)
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %25 = load ptr, ptr %24, align 8
  %26 = load ptr, ptr %11, align 8
  %27 = call ptr @llvm.invariant.start.p0(i64 552, ptr %26)
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %29 = load i32, ptr %28, align 4
  %30 = getelementptr ptr, ptr %26, i32 %29
  %31 = getelementptr ptr, ptr %30, i32 3
  %32 = load ptr, ptr %31, align 8
  %33 = getelementptr { ptr, ptr }, ptr %32, i32 0, i32 0
  %34 = load ptr, ptr %33, align 8
  %35 = call i32 %34(ptr %25) #16
  %36 = mul i32 %35, 2
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %38 = load ptr, ptr %37, align 8
  %39 = load ptr, ptr %11, align 8
  %40 = call ptr @llvm.invariant.start.p0(i64 552, ptr %39)
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %42 = load i32, ptr %41, align 4
  %43 = getelementptr ptr, ptr %39, i32 %42
  %44 = getelementptr ptr, ptr %43, i32 3
  %45 = load ptr, ptr %44, align 8
  %46 = getelementptr { ptr, ptr }, ptr %45, i32 0, i32 1
  %47 = load ptr, ptr %46, align 8
  call void %47(ptr %38, i32 %36) #15
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = load ptr, ptr %11, align 8
  %51 = call ptr @llvm.invariant.start.p0(i64 552, ptr %50)
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %53 = load i32, ptr %52, align 4
  %54 = getelementptr ptr, ptr %50, i32 %53
  %55 = getelementptr ptr, ptr %54, i32 1
  %56 = load ptr, ptr %55, align 8
  %57 = getelementptr { ptr, ptr }, ptr %56, i32 0, i32 0
  %58 = load ptr, ptr %57, align 8
  %59 = call { ptr } %58(ptr %49) #16
  %60 = alloca ptr, align 8
  store { ptr } %59, ptr %60, align 8
  %61 = alloca { ptr }, align 8
  %62 = getelementptr { ptr }, ptr %61, i32 0, i32 0
  %63 = load ptr, ptr %60, align 8
  store ptr %63, ptr %62, align 8
  %64 = call ptr @llvm.invariant.start.p0(i64 16, ptr %61)
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %66 = load ptr, ptr %65, align 8
  %67 = load ptr, ptr %11, align 8
  %68 = call ptr @llvm.invariant.start.p0(i64 552, ptr %67)
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %70 = load i32, ptr %69, align 4
  %71 = getelementptr ptr, ptr %67, i32 %70
  %72 = getelementptr ptr, ptr %71, i32 3
  %73 = load ptr, ptr %72, align 8
  %74 = getelementptr { ptr, ptr }, ptr %73, i32 0, i32 0
  %75 = load ptr, ptr %74, align 8
  %76 = call i32 %75(ptr %66) #16
  %77 = sext i32 %76 to i64
  %78 = alloca ptr, align 8
  %79 = mul i64 %77, ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64)
  %80 = call ptr @bump_malloc(i64 %79)
  store ptr %80, ptr %78, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %82 = load ptr, ptr %81, align 8
  %83 = load ptr, ptr %11, align 8
  %84 = call ptr @llvm.invariant.start.p0(i64 552, ptr %83)
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %86 = load i32, ptr %85, align 4
  %87 = getelementptr ptr, ptr %83, i32 %86
  %88 = getelementptr ptr, ptr %87, i32 1
  %89 = load ptr, ptr %88, align 8
  %90 = getelementptr { ptr, ptr }, ptr %89, i32 0, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = getelementptr { ptr }, ptr %78, i32 0, i32 0
  %93 = load ptr, ptr %92, align 8
  %94 = insertvalue { ptr } undef, ptr %93, 0
  call void %91(ptr %82, { ptr } %94) #15
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  store ptr %95, ptr %.reg2mem13, align 8
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  store ptr %96, ptr %.reg2mem11, align 8
  store i32 0, ptr %.reg2mem17, align 4
  br label %97

97:                                               ; preds = %._crit_edge, %3
  %.reload18 = load i32, ptr %.reg2mem17, align 4
  store i32 %.reload18, ptr %.reg2mem6, align 4
  %.reload14 = load ptr, ptr %.reg2mem13, align 8
  %98 = load ptr, ptr %.reload14, align 8
  %99 = load ptr, ptr %11, align 8
  %100 = call ptr @llvm.invariant.start.p0(i64 552, ptr %99)
  %.reload12 = load ptr, ptr %.reg2mem11, align 8
  %101 = load i32, ptr %.reload12, align 4
  %102 = getelementptr ptr, ptr %99, i32 %101
  %103 = getelementptr ptr, ptr %102, i32 2
  %104 = load ptr, ptr %103, align 8
  %105 = getelementptr { ptr, ptr }, ptr %104, i32 0, i32 0
  %106 = load ptr, ptr %105, align 8
  %107 = call i32 %106(ptr %98) #16
  %.reload10 = load i32, ptr %.reg2mem6, align 4
  %108 = icmp slt i32 %.reload10, %107
  store i1 %108, ptr %.reg2mem3, align 1
  %.reload5 = load i1, ptr %.reg2mem3, align 1
  br i1 %.reload5, label %109, label %141

109:                                              ; preds = %97
  %110 = load ptr, ptr %61, align 8
  %.reload9 = load i32, ptr %.reg2mem6, align 4
  %111 = sext i32 %.reload9 to i64
  %112 = mul i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), %111
  %113 = getelementptr i8, ptr %110, i64 %112
  %114 = getelementptr { ptr, i160 }, ptr %113, i32 0, i32 0
  %115 = load ptr, ptr %114, align 8
  store ptr %115, ptr %5, align 8
  %116 = getelementptr { ptr, i160 }, ptr %113, i32 0, i32 1
  %117 = load i160, ptr %116, align 4
  store i160 %117, ptr %4, align 4
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %119 = load ptr, ptr %118, align 8
  %120 = load ptr, ptr %11, align 8
  %121 = call ptr @llvm.invariant.start.p0(i64 552, ptr %120)
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %123 = load i32, ptr %122, align 4
  %124 = getelementptr ptr, ptr %120, i32 %123
  %125 = getelementptr ptr, ptr %124, i32 1
  %126 = load ptr, ptr %125, align 8
  %127 = getelementptr { ptr, ptr }, ptr %126, i32 0, i32 0
  %128 = load ptr, ptr %127, align 8
  %129 = call { ptr } %128(ptr %119) #16
  store { ptr } %129, ptr %6, align 8
  %130 = load ptr, ptr %5, align 8
  store ptr %130, ptr %8, align 8
  %131 = load i160, ptr %4, align 4
  store i160 %131, ptr %7, align 4
  %132 = load ptr, ptr %6, align 8
  %.reload8 = load i32, ptr %.reg2mem6, align 4
  %133 = sext i32 %.reload8 to i64
  %134 = mul i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), %133
  %135 = getelementptr i8, ptr %132, i64 %134
  %136 = getelementptr { ptr, i160 }, ptr %135, i32 0, i32 0
  %137 = load ptr, ptr %8, align 8
  store ptr %137, ptr %136, align 8
  %138 = getelementptr { ptr, i160 }, ptr %135, i32 0, i32 1
  %139 = load i160, ptr %7, align 4
  store i160 %139, ptr %138, align 4
  %.reload7 = load i32, ptr %.reg2mem6, align 4
  %140 = add i32 %.reload7, 1
  store i32 %140, ptr %.reg2mem1, align 4
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem15, align 4
  br label %142

141:                                              ; preds = %97
  store i32 poison, ptr %.reg2mem15, align 4
  br label %142

142:                                              ; preds = %141, %109
  %.reload16 = load i32, ptr %.reg2mem15, align 4
  store i32 %.reload16, ptr %.reg2mem, align 4
  br label %143

143:                                              ; preds = %142
  %.reload4 = load i1, ptr %.reg2mem3, align 1
  br i1 %.reload4, label %._crit_edge, label %144

._crit_edge:                                      ; preds = %143
  %.reload = load i32, ptr %.reg2mem, align 4
  store i32 %.reload, ptr %.reg2mem17, align 4
  br label %97

144:                                              ; preds = %143
  ret void
}

define { ptr, i160 } @Array__index_xPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca [1 x ptr], align 8
  %6 = alloca { ptr }, align 8
  %7 = alloca ptr, align 8
  %8 = alloca i160, align 8
  %9 = alloca ptr, align 8
  %10 = alloca i160, align 8
  %11 = alloca ptr, align 8
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %12, align 8
  %13 = call ptr @llvm.invariant.start.p0(i64 16, ptr %12)
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 0
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 2
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %26 = load i32, ptr %24, align 4
  store i32 %26, ptr %25, align 4
  call void @set_offset(ptr %14, ptr @Array)
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = load ptr, ptr %14, align 8
  %30 = call ptr @llvm.invariant.start.p0(i64 552, ptr %29)
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %32 = load i32, ptr %31, align 4
  %33 = getelementptr ptr, ptr %29, i32 %32
  %34 = getelementptr ptr, ptr %33, i32 2
  %35 = load ptr, ptr %34, align 8
  %36 = getelementptr { ptr, ptr }, ptr %35, i32 0, i32 0
  %37 = load ptr, ptr %36, align 8
  %38 = call i32 %37(ptr %28) #16
  %39 = sub i32 %38, 1
  %40 = icmp sgt i32 %3, %39
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %42 = load ptr, ptr %41, align 8
  %43 = load ptr, ptr %14, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 552, ptr %43)
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %46 = load i32, ptr %45, align 4
  %47 = getelementptr ptr, ptr %43, i32 %46
  %48 = getelementptr ptr, ptr %47, i32 2
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr { ptr, ptr }, ptr %49, i32 0, i32 0
  %51 = load ptr, ptr %50, align 8
  %52 = call i32 %51(ptr %42) #16
  %53 = add i32 %52, %3
  %54 = icmp slt i32 %53, 0
  %55 = or i1 %40, %54
  br i1 %55, label %56, label %._crit_edge

._crit_edge:                                      ; preds = %4
  br label %86

56:                                               ; preds = %4
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %58 = load ptr, ptr %57, align 8
  %59 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %58, 0
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %61 = load ptr, ptr %60, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } %59, ptr %61, 1
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %64 = load ptr, ptr %63, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %62, ptr %64, 2
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %67 = load i32, ptr %66, align 4
  %68 = insertvalue { ptr, ptr, ptr, i32 } %65, i32 %67, 3
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %70 = load ptr, ptr %69, align 8
  %71 = load ptr, ptr %14, align 8
  %72 = call ptr @llvm.invariant.start.p0(i64 552, ptr %71)
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %74 = load i32, ptr %73, align 4
  %75 = getelementptr ptr, ptr %71, i32 %74
  %76 = load ptr, ptr %75, align 8
  %77 = call ptr @typegetter_wrapper(ptr %76, ptr %70)
  %78 = getelementptr [1 x ptr], ptr %5, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %78, align 8
  %79 = call ptr @llvm.invariant.start.p0(i64 1, ptr %5)
  %80 = call ptr @llvm.invariant.start.p0(i64 552, ptr %58)
  %81 = getelementptr ptr, ptr %58, i32 %67
  %82 = getelementptr ptr, ptr %81, i32 12
  %83 = load ptr, ptr %82, align 8
  %84 = getelementptr { ptr }, ptr %6, i32 0, i32 0
  store ptr @i32_typ, ptr %84, align 8
  %85 = call ptr @behavior_wrapper(ptr %83, { ptr, ptr, ptr, i32 } %68, ptr %6)
  call void %85({ ptr, ptr, ptr, i32 } %68, { ptr, ptr, ptr, i32 } %68, ptr %5, i32 %3)
  br label %86

86:                                               ; preds = %._crit_edge, %56
  %87 = icmp slt i32 %3, 0
  br i1 %87, label %88, label %102

88:                                               ; preds = %86
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %90 = load ptr, ptr %89, align 8
  %91 = load ptr, ptr %14, align 8
  %92 = call ptr @llvm.invariant.start.p0(i64 552, ptr %91)
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %94 = load i32, ptr %93, align 4
  %95 = getelementptr ptr, ptr %91, i32 %94
  %96 = getelementptr ptr, ptr %95, i32 2
  %97 = load ptr, ptr %96, align 8
  %98 = getelementptr { ptr, ptr }, ptr %97, i32 0, i32 0
  %99 = load ptr, ptr %98, align 8
  %100 = call i32 %99(ptr %90) #16
  %101 = add i32 %100, %3
  store i32 %101, ptr %.reg2mem1, align 4
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem3, align 4
  br label %103

102:                                              ; preds = %86
  store i32 %3, ptr %.reg2mem3, align 4
  br label %103

103:                                              ; preds = %102, %88
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  store i32 %.reload4, ptr %.reg2mem, align 4
  br label %104

104:                                              ; preds = %103
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %106 = load ptr, ptr %105, align 8
  %107 = load ptr, ptr %14, align 8
  %108 = call ptr @llvm.invariant.start.p0(i64 552, ptr %107)
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %110 = load i32, ptr %109, align 4
  %111 = getelementptr ptr, ptr %107, i32 %110
  %112 = getelementptr ptr, ptr %111, i32 1
  %113 = load ptr, ptr %112, align 8
  %114 = getelementptr { ptr, ptr }, ptr %113, i32 0, i32 0
  %115 = load ptr, ptr %114, align 8
  %116 = call { ptr } %115(ptr %106) #16
  store { ptr } %116, ptr %7, align 8
  %117 = load ptr, ptr %7, align 8
  %.reload = load i32, ptr %.reg2mem, align 4
  %118 = sext i32 %.reload to i64
  %119 = mul i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), %118
  %120 = getelementptr i8, ptr %117, i64 %119
  %121 = getelementptr { ptr, i160 }, ptr %120, i32 0, i32 0
  %122 = load ptr, ptr %121, align 8
  store ptr %122, ptr %9, align 8
  %123 = getelementptr { ptr, i160 }, ptr %120, i32 0, i32 1
  %124 = load i160, ptr %123, align 4
  store i160 %124, ptr %8, align 4
  %125 = load ptr, ptr %9, align 8
  store ptr %125, ptr %11, align 8
  %126 = load i160, ptr %8, align 4
  store i160 %126, ptr %10, align 4
  %127 = load ptr, ptr %11, align 8
  %128 = insertvalue { ptr, i160 } undef, ptr %127, 0
  %129 = load i160, ptr %10, align 4
  %130 = insertvalue { ptr, i160 } %128, i160 %129, 1
  ret { ptr, i160 } %130
}

define void @Array_throw_oob_xPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Array)
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %21 = load ptr, ptr %20, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 552, ptr %22)
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %25 = load i32, ptr %24, align 4
  %26 = getelementptr ptr, ptr %22, i32 %25
  %27 = getelementptr ptr, ptr %26, i32 2
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr { ptr, ptr }, ptr %28, i32 0, i32 0
  %30 = load ptr, ptr %29, align 8
  %31 = call i32 %30(ptr %21) #16
  %32 = alloca [1 x ptr], align 8
  store ptr @OutOfBounds, ptr %32, align 8
  %33 = load ptr, ptr %32, align 8
  %34 = getelementptr ptr, ptr %33, i32 6
  %35 = load ptr, ptr %34, align 8
  %36 = call { i64, i64 } @size_wrapper(ptr %35, ptr %32)
  %37 = extractvalue { i64, i64 } %36, 0
  %38 = call ptr @bump_malloc(i64 %37)
  %39 = alloca { ptr, ptr, ptr, i32 }, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 1
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 3
  store ptr @OutOfBounds, ptr %39, align 8
  store ptr %38, ptr %40, align 8
  store i32 9, ptr %41, align 4
  %42 = call ptr @llvm.invariant.start.p0(i64 16, ptr %39)
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %44 = load ptr, ptr %43, align 8
  %45 = load ptr, ptr %7, align 8
  %46 = call ptr @llvm.invariant.start.p0(i64 552, ptr %45)
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %48 = load i32, ptr %47, align 4
  %49 = getelementptr ptr, ptr %45, i32 %48
  %50 = getelementptr ptr, ptr %49, i32 2
  %51 = load ptr, ptr %50, align 8
  %52 = getelementptr { ptr, ptr }, ptr %51, i32 0, i32 0
  %53 = load ptr, ptr %52, align 8
  %54 = call i32 %53(ptr %44) #16
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 0
  %56 = load ptr, ptr %55, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %56, 0
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } %57, ptr %59, 1
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 2
  %62 = load ptr, ptr %61, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr %62, 2
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 3
  %65 = load i32, ptr %64, align 4
  %66 = insertvalue { ptr, ptr, ptr, i32 } %63, i32 %65, 3
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %68 = load ptr, ptr %67, align 8
  %69 = load ptr, ptr %7, align 8
  %70 = call ptr @llvm.invariant.start.p0(i64 552, ptr %69)
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %72 = load i32, ptr %71, align 4
  %73 = getelementptr ptr, ptr %69, i32 %72
  %74 = load ptr, ptr %73, align 8
  %75 = call ptr @typegetter_wrapper(ptr %74, ptr %68)
  %76 = alloca [2 x ptr], align 8
  %77 = getelementptr [2 x ptr], ptr %76, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %77, align 8
  %78 = getelementptr [2 x ptr], ptr %76, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %78, align 8
  %79 = call ptr @llvm.invariant.start.p0(i64 4, ptr %76)
  %80 = call ptr @llvm.invariant.start.p0(i64 232, ptr %56)
  %81 = getelementptr ptr, ptr %56, i32 %65
  %82 = getelementptr ptr, ptr %81, i32 4
  %83 = load ptr, ptr %82, align 8
  %84 = alloca { ptr, ptr }, align 8
  %85 = getelementptr { ptr, ptr }, ptr %84, i32 0, i32 0
  store ptr @i32_typ, ptr %85, align 8
  %86 = getelementptr { ptr, ptr }, ptr %84, i32 0, i32 1
  store ptr @i32_typ, ptr %86, align 8
  %87 = call ptr @behavior_wrapper(ptr %83, { ptr, ptr, ptr, i32 } %66, ptr %84)
  call void %87({ ptr, ptr, ptr, i32 } %66, { ptr, ptr, ptr, i32 } %66, ptr %76, i32 %54, i32 %3)
  %88 = alloca ptr, align 8
  %89 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 11))
  store ptr %89, ptr %88, align 8
  %90 = alloca { ptr }, align 8
  %91 = getelementptr { ptr }, ptr %88, i32 0, i32 0
  %92 = getelementptr { ptr }, ptr %90, i32 0, i32 0
  %93 = load ptr, ptr %91, align 8
  store ptr %93, ptr %92, align 8
  %94 = call ptr @llvm.invariant.start.p0(i64 16, ptr %90)
  %95 = load ptr, ptr %90, align 8
  %96 = load [10 x i8], ptr @mbdsl_testsmini, align 1
  store [10 x i8] %96, ptr %95, align 1
  %97 = alloca [1 x ptr], align 8
  store ptr @String, ptr %97, align 8
  %98 = load ptr, ptr %97, align 8
  %99 = getelementptr ptr, ptr %98, i32 6
  %100 = load ptr, ptr %99, align 8
  %101 = call { i64, i64 } @size_wrapper(ptr %100, ptr %97)
  %102 = extractvalue { i64, i64 } %101, 0
  %103 = call ptr @bump_malloc(i64 %102)
  %104 = alloca { ptr, ptr, ptr, i32 }, align 8
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %104, i32 0, i32 1
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %104, i32 0, i32 3
  store ptr @String, ptr %104, align 8
  store ptr %103, ptr %105, align 8
  store i32 9, ptr %106, align 4
  %107 = call ptr @llvm.invariant.start.p0(i64 16, ptr %104)
  %108 = getelementptr { ptr }, ptr %90, i32 0, i32 0
  %109 = load ptr, ptr %108, align 8
  %110 = insertvalue { ptr } undef, ptr %109, 0
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %104, i32 0, i32 0
  %112 = load ptr, ptr %111, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %112, 0
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %104, i32 0, i32 1
  %115 = load ptr, ptr %114, align 8
  %116 = insertvalue { ptr, ptr, ptr, i32 } %113, ptr %115, 1
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %104, i32 0, i32 2
  %118 = load ptr, ptr %117, align 8
  %119 = insertvalue { ptr, ptr, ptr, i32 } %116, ptr %118, 2
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %104, i32 0, i32 3
  %121 = load i32, ptr %120, align 4
  %122 = insertvalue { ptr, ptr, ptr, i32 } %119, i32 %121, 3
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %124 = load ptr, ptr %123, align 8
  %125 = load ptr, ptr %7, align 8
  %126 = call ptr @llvm.invariant.start.p0(i64 552, ptr %125)
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %128 = load i32, ptr %127, align 4
  %129 = getelementptr ptr, ptr %125, i32 %128
  %130 = load ptr, ptr %129, align 8
  %131 = call ptr @typegetter_wrapper(ptr %130, ptr %124)
  %132 = alloca [3 x ptr], align 8
  %133 = getelementptr [3 x ptr], ptr %132, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %133, align 8
  %134 = getelementptr [3 x ptr], ptr %132, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %134, align 8
  %135 = getelementptr [3 x ptr], ptr %132, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %135, align 8
  %136 = call ptr @llvm.invariant.start.p0(i64 9, ptr %132)
  %137 = call ptr @llvm.invariant.start.p0(i64 280, ptr %112)
  %138 = getelementptr ptr, ptr %112, i32 %121
  %139 = getelementptr ptr, ptr %138, i32 4
  %140 = load ptr, ptr %139, align 8
  %141 = alloca { ptr, ptr, ptr }, align 8
  %142 = getelementptr { ptr, ptr, ptr }, ptr %141, i32 0, i32 0
  store ptr @buffer_typ, ptr %142, align 8
  %143 = getelementptr { ptr, ptr, ptr }, ptr %141, i32 0, i32 1
  store ptr @i32_typ, ptr %143, align 8
  %144 = getelementptr { ptr, ptr, ptr }, ptr %141, i32 0, i32 2
  store ptr @i32_typ, ptr %144, align 8
  %145 = call ptr @behavior_wrapper(ptr %140, { ptr, ptr, ptr, i32 } %122, ptr %141)
  call void %145({ ptr, ptr, ptr, i32 } %122, { ptr, ptr, ptr, i32 } %122, ptr %132, { ptr } %110, i32 10, i32 11)
  %146 = alloca { ptr, ptr, ptr, i32 }, align 8
  %147 = getelementptr { ptr, ptr, ptr, i32 }, ptr %104, i32 0, i32 0
  %148 = getelementptr { ptr, ptr, ptr, i32 }, ptr %146, i32 0, i32 0
  %149 = load ptr, ptr %147, align 8
  store ptr %149, ptr %148, align 8
  %150 = getelementptr { ptr, ptr, ptr, i32 }, ptr %104, i32 0, i32 1
  %151 = getelementptr { ptr, ptr, ptr, i32 }, ptr %146, i32 0, i32 1
  %152 = load ptr, ptr %150, align 8
  store ptr %152, ptr %151, align 8
  %153 = getelementptr { ptr, ptr, ptr, i32 }, ptr %104, i32 0, i32 2
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %146, i32 0, i32 2
  %155 = load ptr, ptr %153, align 8
  store ptr %155, ptr %154, align 8
  %156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %104, i32 0, i32 3
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %146, i32 0, i32 3
  %158 = load i32, ptr %156, align 4
  store i32 %158, ptr %157, align 4
  call void @set_offset(ptr %146, ptr @String)
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %146, i32 0, i32 0
  %160 = load ptr, ptr %159, align 8
  %161 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %160, 0
  %162 = getelementptr { ptr, ptr, ptr, i32 }, ptr %146, i32 0, i32 1
  %163 = load ptr, ptr %162, align 8
  %164 = insertvalue { ptr, ptr, ptr, i32 } %161, ptr %163, 1
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %146, i32 0, i32 2
  %166 = load ptr, ptr %165, align 8
  %167 = insertvalue { ptr, ptr, ptr, i32 } %164, ptr %166, 2
  %168 = getelementptr { ptr, ptr, ptr, i32 }, ptr %146, i32 0, i32 3
  %169 = load i32, ptr %168, align 4
  %170 = insertvalue { ptr, ptr, ptr, i32 } %167, i32 %169, 3
  %171 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 0
  %172 = load ptr, ptr %171, align 8
  %173 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %172, 0
  %174 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 1
  %175 = load ptr, ptr %174, align 8
  %176 = insertvalue { ptr, ptr, ptr, i32 } %173, ptr %175, 1
  %177 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 2
  %178 = load ptr, ptr %177, align 8
  %179 = insertvalue { ptr, ptr, ptr, i32 } %176, ptr %178, 2
  %180 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 3
  %181 = load i32, ptr %180, align 4
  %182 = insertvalue { ptr, ptr, ptr, i32 } %179, i32 %181, 3
  %183 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %184 = load ptr, ptr %183, align 8
  %185 = load ptr, ptr %7, align 8
  %186 = call ptr @llvm.invariant.start.p0(i64 552, ptr %185)
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %188 = load i32, ptr %187, align 4
  %189 = getelementptr ptr, ptr %185, i32 %188
  %190 = load ptr, ptr %189, align 8
  %191 = call ptr @typegetter_wrapper(ptr %190, ptr %184)
  %192 = alloca [2 x ptr], align 8
  %193 = getelementptr [2 x ptr], ptr %192, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %193, align 8
  %194 = getelementptr [2 x ptr], ptr %192, i32 0, i32 1
  store ptr @_parameterization_String, ptr %194, align 8
  %195 = call ptr @llvm.invariant.start.p0(i64 4, ptr %192)
  %196 = call ptr @llvm.invariant.start.p0(i64 232, ptr %172)
  %197 = getelementptr ptr, ptr %172, i32 %181
  %198 = getelementptr ptr, ptr %197, i32 7
  %199 = load ptr, ptr %198, align 8
  %200 = alloca { ptr, ptr }, align 8
  %201 = getelementptr { ptr, ptr }, ptr %200, i32 0, i32 0
  store ptr @i32_typ, ptr %201, align 8
  %202 = getelementptr { ptr, ptr }, ptr %200, i32 0, i32 1
  store ptr %160, ptr %202, align 8
  %203 = call ptr @behavior_wrapper(ptr %199, { ptr, ptr, ptr, i32 } %182, ptr %200)
  call void %203({ ptr, ptr, ptr, i32 } %182, { ptr, ptr, ptr, i32 } %182, ptr %192, i32 774, { ptr, ptr, ptr, i32 } %170)
  %204 = getelementptr { ptr, i160 }, ptr %39, i32 0, i32 0
  %205 = load ptr, ptr %204, align 8
  %206 = insertvalue { ptr, i160 } undef, ptr %205, 0
  %207 = getelementptr { ptr, i160 }, ptr %39, i32 0, i32 1
  %208 = load i160, ptr %207, align 4
  %209 = insertvalue { ptr, i160 } %206, i160 %208, 1
  %210 = call ptr @get_current_coroutine()
  %211 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %210, i32 0, i32 4
  store { ptr, i160 } %209, ptr %211, align 8
  call void @coroutine_yield(ptr %210)
  ret void
}

define { ptr, i160 } @Array_unsafe_index_xPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Array)
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %21 = load ptr, ptr %20, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 552, ptr %22)
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %25 = load i32, ptr %24, align 4
  %26 = getelementptr ptr, ptr %22, i32 %25
  %27 = getelementptr ptr, ptr %26, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr { ptr, ptr }, ptr %28, i32 0, i32 0
  %30 = load ptr, ptr %29, align 8
  %31 = call { ptr } %30(ptr %21) #16
  %32 = alloca ptr, align 8
  store { ptr } %31, ptr %32, align 8
  %33 = alloca i160, align 8
  %34 = alloca ptr, align 8
  %35 = load ptr, ptr %32, align 8
  %36 = sext i32 %3 to i64
  %37 = mul i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), %36
  %38 = getelementptr i8, ptr %35, i64 %37
  %39 = getelementptr { ptr, i160 }, ptr %38, i32 0, i32 0
  %40 = load ptr, ptr %39, align 8
  store ptr %40, ptr %34, align 8
  %41 = getelementptr { ptr, i160 }, ptr %38, i32 0, i32 1
  %42 = load i160, ptr %41, align 4
  store i160 %42, ptr %33, align 4
  %43 = alloca i160, align 8
  %44 = alloca ptr, align 8
  %45 = load ptr, ptr %34, align 8
  store ptr %45, ptr %44, align 8
  %46 = load i160, ptr %33, align 4
  store i160 %46, ptr %43, align 4
  %47 = load ptr, ptr %44, align 8
  %48 = insertvalue { ptr, i160 } undef, ptr %47, 0
  %49 = load i160, ptr %43, align 4
  %50 = insertvalue { ptr, i160 } %48, i160 %49, 1
  ret { ptr, i160 } %50
}

define { ptr, ptr, ptr, i32 } @Array_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Array)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 552, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = call ptr @typegetter_wrapper(ptr %26, ptr %20)
  %28 = alloca [2 x ptr], align 8
  store ptr @ArrayIterator, ptr %28, align 8
  %29 = getelementptr ptr, ptr %28, i32 1
  store ptr %27, ptr %29, align 8
  %30 = load ptr, ptr %28, align 8
  %31 = getelementptr ptr, ptr %30, i32 6
  %32 = load ptr, ptr %31, align 8
  %33 = call { i64, i64 } @size_wrapper(ptr %32, ptr %28)
  %34 = extractvalue { i64, i64 } %33, 0
  %35 = call ptr @bump_malloc(i64 %34)
  store ptr %27, ptr %35, align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 8, ptr %35)
  %37 = alloca { ptr, ptr, ptr, i32 }, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 1
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 3
  store ptr @ArrayIterator, ptr %37, align 8
  store ptr %35, ptr %38, align 8
  store i32 9, ptr %39, align 4
  %40 = call ptr @llvm.invariant.start.p0(i64 16, ptr %37)
  %41 = alloca { ptr, ptr, ptr, i32 }, align 8
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %41, i32 0, i32 0
  %44 = load ptr, ptr %42, align 8
  store ptr %44, ptr %43, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %41, i32 0, i32 1
  %47 = load ptr, ptr %45, align 8
  store ptr %47, ptr %46, align 8
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %41, i32 0, i32 2
  %50 = load ptr, ptr %48, align 8
  store ptr %50, ptr %49, align 8
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %41, i32 0, i32 3
  %53 = load i32, ptr %51, align 4
  store i32 %53, ptr %52, align 4
  call void @set_offset(ptr %41, ptr @Array)
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %41, i32 0, i32 0
  %55 = load ptr, ptr %54, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %55, 0
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %41, i32 0, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = insertvalue { ptr, ptr, ptr, i32 } %56, ptr %58, 1
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %41, i32 0, i32 2
  %61 = load ptr, ptr %60, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } %59, ptr %61, 2
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %41, i32 0, i32 3
  %64 = load i32, ptr %63, align 4
  %65 = insertvalue { ptr, ptr, ptr, i32 } %62, i32 %64, 3
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 0
  %67 = load ptr, ptr %66, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %67, 0
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 1
  %70 = load ptr, ptr %69, align 8
  %71 = insertvalue { ptr, ptr, ptr, i32 } %68, ptr %70, 1
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 2
  %73 = load ptr, ptr %72, align 8
  %74 = insertvalue { ptr, ptr, ptr, i32 } %71, ptr %73, 2
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 3
  %76 = load i32, ptr %75, align 4
  %77 = insertvalue { ptr, ptr, ptr, i32 } %74, i32 %76, 3
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %79 = load ptr, ptr %78, align 8
  %80 = load ptr, ptr %6, align 8
  %81 = call ptr @llvm.invariant.start.p0(i64 552, ptr %80)
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %83 = load i32, ptr %82, align 4
  %84 = getelementptr ptr, ptr %80, i32 %83
  %85 = load ptr, ptr %84, align 8
  %86 = call ptr @typegetter_wrapper(ptr %85, ptr %79)
  %87 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %88 = getelementptr [3 x ptr], ptr %87, i32 0, i32 1
  store ptr %86, ptr %88, align 8
  %89 = getelementptr [3 x ptr], ptr %87, i32 0, i32 2
  store ptr null, ptr %89, align 8
  %90 = call ptr @llvm.invariant.start.p0(i64 16, ptr %87)
  store ptr @Array, ptr %87, align 8
  %91 = alloca [1 x ptr], align 8
  %92 = getelementptr [1 x ptr], ptr %91, i32 0, i32 0
  store ptr %87, ptr %92, align 8
  %93 = call ptr @llvm.invariant.start.p0(i64 1, ptr %91)
  %94 = call ptr @llvm.invariant.start.p0(i64 80, ptr %67)
  %95 = getelementptr ptr, ptr %67, i32 %76
  %96 = getelementptr ptr, ptr %95, i32 3
  %97 = load ptr, ptr %96, align 8
  %98 = alloca { ptr }, align 8
  %99 = getelementptr { ptr }, ptr %98, i32 0, i32 0
  store ptr %55, ptr %99, align 8
  %100 = call ptr @behavior_wrapper(ptr %97, { ptr, ptr, ptr, i32 } %77, ptr %98)
  call void %100({ ptr, ptr, ptr, i32 } %77, { ptr, ptr, ptr, i32 } %77, ptr %91, { ptr, ptr, ptr, i32 } %65)
  %101 = alloca { ptr, ptr, ptr, i32 }, align 8
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 0
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %101, i32 0, i32 0
  %104 = load ptr, ptr %102, align 8
  store ptr %104, ptr %103, align 8
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 1
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %101, i32 0, i32 1
  %107 = load ptr, ptr %105, align 8
  store ptr %107, ptr %106, align 8
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 2
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %101, i32 0, i32 2
  %110 = load ptr, ptr %108, align 8
  store ptr %110, ptr %109, align 8
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 3
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %101, i32 0, i32 3
  %113 = load i32, ptr %111, align 4
  store i32 %113, ptr %112, align 4
  call void @set_offset(ptr %101, ptr @Iterator2)
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %101, i32 0, i32 0
  %115 = load ptr, ptr %114, align 8
  %116 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %115, 0
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %101, i32 0, i32 1
  %118 = load ptr, ptr %117, align 8
  %119 = insertvalue { ptr, ptr, ptr, i32 } %116, ptr %118, 1
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %101, i32 0, i32 2
  %121 = load ptr, ptr %120, align 8
  %122 = insertvalue { ptr, ptr, ptr, i32 } %119, ptr %121, 2
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %101, i32 0, i32 3
  %124 = load i32, ptr %123, align 4
  %125 = insertvalue { ptr, ptr, ptr, i32 } %122, i32 %124, 3
  ret { ptr, ptr, ptr, i32 } %125
}

define void @Iterable2_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca [0 x ptr], align 8
  %6 = alloca {}, align 8
  %7 = alloca { ptr, i160 }, align 8
  %8 = alloca i160, align 8
  %9 = alloca ptr, align 8
  %10 = alloca i160, align 8
  %11 = alloca ptr, align 8
  %12 = alloca i160, align 8
  %13 = alloca ptr, align 8
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem5 = alloca ptr, align 8
  %.reg2mem7 = alloca ptr, align 8
  %.reg2mem9 = alloca ptr, align 8
  %.reg2mem11 = alloca ptr, align 8
  %.reg2mem13 = alloca ptr, align 8
  %.reg2mem15 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %14, align 8
  %15 = call ptr @llvm.invariant.start.p0(i64 16, ptr %14)
  %16 = alloca { ptr, ptr, ptr, i32 }, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 0
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 2
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %28 = load i32, ptr %26, align 4
  store i32 %28, ptr %27, align 4
  call void @set_offset(ptr %16, ptr @Iterable2)
  %29 = alloca ptr, align 8
  store { ptr } %3, ptr %29, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 0
  %31 = load ptr, ptr %30, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %31, 0
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %34 = load ptr, ptr %33, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr %34, 1
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 2
  %37 = load ptr, ptr %36, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %37, 2
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %40 = load i32, ptr %39, align 4
  %41 = insertvalue { ptr, ptr, ptr, i32 } %38, i32 %40, 3
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %43 = load ptr, ptr %42, align 8
  %44 = load ptr, ptr %16, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 184, ptr %44)
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %47 = load i32, ptr %46, align 4
  %48 = getelementptr ptr, ptr %44, i32 %47
  %49 = load ptr, ptr %48, align 8
  %50 = call ptr @typegetter_wrapper(ptr %49, ptr %43)
  %51 = alloca [0 x ptr], align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 0, ptr %51)
  %53 = call ptr @llvm.invariant.start.p0(i64 184, ptr %31)
  %54 = getelementptr ptr, ptr %31, i32 %40
  %55 = getelementptr ptr, ptr %54, i32 1
  %56 = load ptr, ptr %55, align 8
  %57 = alloca {}, align 8
  %58 = call ptr @behavior_wrapper(ptr %56, { ptr, ptr, ptr, i32 } %41, ptr %57)
  %59 = call { ptr, ptr, ptr, i32 } %58({ ptr, ptr, ptr, i32 } %41, { ptr, ptr, ptr, i32 } %41, ptr %51)
  %60 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %59, ptr %60, align 8
  %61 = call ptr @llvm.invariant.start.p0(i64 16, ptr %60)
  %62 = alloca { ptr, ptr, ptr, i32 }, align 8
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 0
  %65 = load ptr, ptr %63, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 1
  %68 = load ptr, ptr %66, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 2
  %71 = load ptr, ptr %69, align 8
  store ptr %71, ptr %70, align 8
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 3
  %74 = load i32, ptr %72, align 4
  store i32 %74, ptr %73, align 4
  call void @set_offset(ptr %62, ptr @Iterator2)
  %75 = alloca { ptr, ptr, ptr, i32 }, align 8
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 0
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 0
  %78 = load ptr, ptr %76, align 8
  store ptr %78, ptr %77, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 1
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 1
  %81 = load ptr, ptr %79, align 8
  store ptr %81, ptr %80, align 8
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 2
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 2
  %84 = load ptr, ptr %82, align 8
  store ptr %84, ptr %83, align 8
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 3
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 3
  %87 = load i32, ptr %85, align 4
  store i32 %87, ptr %86, align 4
  call void @set_offset(ptr %75, ptr @Iterator2)
  %88 = alloca { ptr, ptr, ptr, i32 }, align 8
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 0
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %88, i32 0, i32 0
  %91 = load ptr, ptr %89, align 8
  store ptr %91, ptr %90, align 8
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 1
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %88, i32 0, i32 1
  %94 = load ptr, ptr %92, align 8
  store ptr %94, ptr %93, align 8
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 2
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %88, i32 0, i32 2
  %97 = load ptr, ptr %95, align 8
  store ptr %97, ptr %96, align 8
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 3
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %88, i32 0, i32 3
  %100 = load i32, ptr %98, align 4
  store i32 %100, ptr %99, align 4
  %101 = call ptr @llvm.invariant.start.p0(i64 16, ptr %88)
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %88, i32 0, i32 0
  store ptr %102, ptr %.reg2mem15, align 8
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %88, i32 0, i32 1
  store ptr %103, ptr %.reg2mem13, align 8
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %88, i32 0, i32 2
  store ptr %104, ptr %.reg2mem11, align 8
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %88, i32 0, i32 3
  store ptr %105, ptr %.reg2mem9, align 8
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  store ptr %106, ptr %.reg2mem7, align 8
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  store ptr %107, ptr %.reg2mem5, align 8
  %108 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 0
  store ptr %108, ptr %.reg2mem3, align 8
  br label %109

109:                                              ; preds = %._crit_edge1, %4
  %.reload16 = load ptr, ptr %.reg2mem15, align 8
  %110 = load ptr, ptr %.reload16, align 8
  %111 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %110, 0
  %.reload14 = load ptr, ptr %.reg2mem13, align 8
  %112 = load ptr, ptr %.reload14, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } %111, ptr %112, 1
  %.reload12 = load ptr, ptr %.reg2mem11, align 8
  %114 = load ptr, ptr %.reload12, align 8
  %115 = insertvalue { ptr, ptr, ptr, i32 } %113, ptr %114, 2
  %.reload10 = load ptr, ptr %.reg2mem9, align 8
  %116 = load i32, ptr %.reload10, align 4
  %117 = insertvalue { ptr, ptr, ptr, i32 } %115, i32 %116, 3
  %.reload8 = load ptr, ptr %.reg2mem7, align 8
  %118 = load ptr, ptr %.reload8, align 8
  %119 = load ptr, ptr %16, align 8
  %120 = call ptr @llvm.invariant.start.p0(i64 184, ptr %119)
  %.reload6 = load ptr, ptr %.reg2mem5, align 8
  %121 = load i32, ptr %.reload6, align 4
  %122 = getelementptr ptr, ptr %119, i32 %121
  %123 = load ptr, ptr %122, align 8
  %124 = call ptr @typegetter_wrapper(ptr %123, ptr %118)
  %125 = call ptr @llvm.invariant.start.p0(i64 0, ptr %5)
  %126 = call ptr @llvm.invariant.start.p0(i64 24, ptr %110)
  %127 = getelementptr ptr, ptr %110, i32 %116
  %128 = getelementptr ptr, ptr %127, i32 1
  %129 = load ptr, ptr %128, align 8
  %130 = call ptr @behavior_wrapper(ptr %129, { ptr, ptr, ptr, i32 } %117, ptr %6)
  %131 = call { ptr, i160 } %130({ ptr, ptr, ptr, i32 } %117, { ptr, ptr, ptr, i32 } %117, ptr %5)
  store { ptr, i160 } %131, ptr %7, align 8
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %132 = load ptr, ptr %.reload4, align 8
  %133 = ptrtoint ptr %132 to i64
  %134 = icmp eq i64 %133, ptrtoint (ptr @nil_typ to i64)
  %135 = icmp eq i64 %133, 0
  %136 = or i1 %134, %135
  %137 = icmp eq i1 %136, false
  store i1 %137, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %138, label %._crit_edge

._crit_edge:                                      ; preds = %109
  br label %156

138:                                              ; preds = %109
  %139 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 0
  %140 = load ptr, ptr %139, align 8
  store ptr %140, ptr %9, align 8
  %141 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 1
  %142 = load i160, ptr %141, align 4
  store i160 %142, ptr %8, align 4
  %143 = load ptr, ptr %9, align 8
  store ptr %143, ptr %11, align 8
  %144 = load i160, ptr %8, align 4
  store i160 %144, ptr %10, align 4
  %145 = load ptr, ptr %11, align 8
  %146 = insertvalue { ptr, i160 } undef, ptr %145, 0
  %147 = load i160, ptr %10, align 4
  %148 = insertvalue { ptr, i160 } %146, i160 %147, 1
  %149 = load ptr, ptr %29, align 8
  call void %149({ ptr, i160 } %148)
  %150 = load ptr, ptr %9, align 8
  store ptr %150, ptr %13, align 8
  %151 = load i160, ptr %8, align 4
  store i160 %151, ptr %12, align 4
  %152 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 0
  %153 = load ptr, ptr %13, align 8
  store ptr %153, ptr %152, align 8
  %154 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 1
  %155 = load i160, ptr %12, align 4
  store i160 %155, ptr %154, align 4
  br label %156

156:                                              ; preds = %._crit_edge, %138
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %157

._crit_edge1:                                     ; preds = %156
  br label %109

157:                                              ; preds = %156
  ret void
}

define { ptr, i160 } @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3, { ptr } %4) {
  %6 = alloca [0 x ptr], align 8
  %7 = alloca {}, align 8
  %8 = alloca { ptr, i160 }, align 8
  %9 = alloca i160, align 8
  %10 = alloca ptr, align 8
  %11 = alloca i160, align 8
  %12 = alloca ptr, align 8
  %13 = alloca i160, align 8
  %14 = alloca ptr, align 8
  %15 = alloca { ptr, i160 }, align 8
  %16 = alloca i160, align 8
  %17 = alloca ptr, align 8
  %18 = alloca i160, align 8
  %19 = alloca ptr, align 8
  %20 = alloca i160, align 8
  %21 = alloca ptr, align 8
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem5 = alloca ptr, align 8
  %.reg2mem7 = alloca ptr, align 8
  %.reg2mem9 = alloca ptr, align 8
  %.reg2mem11 = alloca ptr, align 8
  %.reg2mem13 = alloca ptr, align 8
  %.reg2mem15 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %22, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 16, ptr %22)
  %24 = alloca { ptr, ptr, ptr, i32 }, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %36 = load i32, ptr %34, align 4
  store i32 %36, ptr %35, align 4
  call void @set_offset(ptr %24, ptr @Iterable2)
  %37 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %37, align 8
  %38 = alloca i160, align 8
  %39 = alloca ptr, align 8
  %40 = getelementptr { ptr, i160 }, ptr %37, i32 0, i32 0
  %41 = load ptr, ptr %40, align 8
  store ptr %41, ptr %39, align 8
  %42 = getelementptr { ptr, i160 }, ptr %37, i32 0, i32 1
  %43 = load i160, ptr %42, align 4
  store i160 %43, ptr %38, align 4
  %44 = alloca ptr, align 8
  store { ptr } %4, ptr %44, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %46 = load ptr, ptr %45, align 8
  %47 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %46, 0
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } %47, ptr %49, 1
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %52 = load ptr, ptr %51, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } %50, ptr %52, 2
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %55 = load i32, ptr %54, align 4
  %56 = insertvalue { ptr, ptr, ptr, i32 } %53, i32 %55, 3
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = load ptr, ptr %24, align 8
  %60 = call ptr @llvm.invariant.start.p0(i64 184, ptr %59)
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %62 = load i32, ptr %61, align 4
  %63 = getelementptr ptr, ptr %59, i32 %62
  %64 = load ptr, ptr %63, align 8
  %65 = call ptr @typegetter_wrapper(ptr %64, ptr %58)
  %66 = alloca [0 x ptr], align 8
  %67 = call ptr @llvm.invariant.start.p0(i64 0, ptr %66)
  %68 = call ptr @llvm.invariant.start.p0(i64 184, ptr %46)
  %69 = getelementptr ptr, ptr %46, i32 %55
  %70 = getelementptr ptr, ptr %69, i32 1
  %71 = load ptr, ptr %70, align 8
  %72 = alloca {}, align 8
  %73 = call ptr @behavior_wrapper(ptr %71, { ptr, ptr, ptr, i32 } %56, ptr %72)
  %74 = call { ptr, ptr, ptr, i32 } %73({ ptr, ptr, ptr, i32 } %56, { ptr, ptr, ptr, i32 } %56, ptr %66)
  %75 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %74, ptr %75, align 8
  %76 = call ptr @llvm.invariant.start.p0(i64 16, ptr %75)
  %77 = alloca { ptr, ptr, ptr, i32 }, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 0
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 0
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 1
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 1
  %83 = load ptr, ptr %81, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 2
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 2
  %86 = load ptr, ptr %84, align 8
  store ptr %86, ptr %85, align 8
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 3
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 3
  %89 = load i32, ptr %87, align 4
  store i32 %89, ptr %88, align 4
  call void @set_offset(ptr %77, ptr @Iterator2)
  %90 = alloca { ptr, ptr, ptr, i32 }, align 8
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 0
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 0
  %93 = load ptr, ptr %91, align 8
  store ptr %93, ptr %92, align 8
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 1
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 1
  %96 = load ptr, ptr %94, align 8
  store ptr %96, ptr %95, align 8
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 2
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 2
  %99 = load ptr, ptr %97, align 8
  store ptr %99, ptr %98, align 8
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 3
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 3
  %102 = load i32, ptr %100, align 4
  store i32 %102, ptr %101, align 4
  call void @set_offset(ptr %90, ptr @Iterator2)
  %103 = alloca { ptr, ptr, ptr, i32 }, align 8
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 0
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 0
  %106 = load ptr, ptr %104, align 8
  store ptr %106, ptr %105, align 8
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 1
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 1
  %109 = load ptr, ptr %107, align 8
  store ptr %109, ptr %108, align 8
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 2
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 2
  %112 = load ptr, ptr %110, align 8
  store ptr %112, ptr %111, align 8
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 3
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 3
  %115 = load i32, ptr %113, align 4
  store i32 %115, ptr %114, align 4
  %116 = call ptr @llvm.invariant.start.p0(i64 16, ptr %103)
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 0
  store ptr %117, ptr %.reg2mem15, align 8
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 1
  store ptr %118, ptr %.reg2mem13, align 8
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 2
  store ptr %119, ptr %.reg2mem11, align 8
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 3
  store ptr %120, ptr %.reg2mem9, align 8
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  store ptr %121, ptr %.reg2mem7, align 8
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  store ptr %122, ptr %.reg2mem5, align 8
  %123 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 0
  store ptr %123, ptr %.reg2mem3, align 8
  br label %124

124:                                              ; preds = %._crit_edge1, %5
  %.reload16 = load ptr, ptr %.reg2mem15, align 8
  %125 = load ptr, ptr %.reload16, align 8
  %126 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %125, 0
  %.reload14 = load ptr, ptr %.reg2mem13, align 8
  %127 = load ptr, ptr %.reload14, align 8
  %128 = insertvalue { ptr, ptr, ptr, i32 } %126, ptr %127, 1
  %.reload12 = load ptr, ptr %.reg2mem11, align 8
  %129 = load ptr, ptr %.reload12, align 8
  %130 = insertvalue { ptr, ptr, ptr, i32 } %128, ptr %129, 2
  %.reload10 = load ptr, ptr %.reg2mem9, align 8
  %131 = load i32, ptr %.reload10, align 4
  %132 = insertvalue { ptr, ptr, ptr, i32 } %130, i32 %131, 3
  %.reload8 = load ptr, ptr %.reg2mem7, align 8
  %133 = load ptr, ptr %.reload8, align 8
  %134 = load ptr, ptr %24, align 8
  %135 = call ptr @llvm.invariant.start.p0(i64 184, ptr %134)
  %.reload6 = load ptr, ptr %.reg2mem5, align 8
  %136 = load i32, ptr %.reload6, align 4
  %137 = getelementptr ptr, ptr %134, i32 %136
  %138 = load ptr, ptr %137, align 8
  %139 = call ptr @typegetter_wrapper(ptr %138, ptr %133)
  %140 = call ptr @llvm.invariant.start.p0(i64 0, ptr %6)
  %141 = call ptr @llvm.invariant.start.p0(i64 24, ptr %125)
  %142 = getelementptr ptr, ptr %125, i32 %131
  %143 = getelementptr ptr, ptr %142, i32 1
  %144 = load ptr, ptr %143, align 8
  %145 = call ptr @behavior_wrapper(ptr %144, { ptr, ptr, ptr, i32 } %132, ptr %7)
  %146 = call { ptr, i160 } %145({ ptr, ptr, ptr, i32 } %132, { ptr, ptr, ptr, i32 } %132, ptr %6)
  store { ptr, i160 } %146, ptr %8, align 8
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %147 = load ptr, ptr %.reload4, align 8
  %148 = ptrtoint ptr %147 to i64
  %149 = icmp eq i64 %148, ptrtoint (ptr @nil_typ to i64)
  %150 = icmp eq i64 %148, 0
  %151 = or i1 %149, %150
  %152 = icmp eq i1 %151, false
  store i1 %152, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %153, label %._crit_edge

._crit_edge:                                      ; preds = %124
  br label %184

153:                                              ; preds = %124
  %154 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 0
  %155 = load ptr, ptr %154, align 8
  store ptr %155, ptr %10, align 8
  %156 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 1
  %157 = load i160, ptr %156, align 4
  store i160 %157, ptr %9, align 4
  %158 = load ptr, ptr %39, align 8
  store ptr %158, ptr %12, align 8
  %159 = load i160, ptr %38, align 4
  store i160 %159, ptr %11, align 4
  %160 = load ptr, ptr %12, align 8
  %161 = insertvalue { ptr, i160 } undef, ptr %160, 0
  %162 = load i160, ptr %11, align 4
  %163 = insertvalue { ptr, i160 } %161, i160 %162, 1
  %164 = load ptr, ptr %10, align 8
  store ptr %164, ptr %14, align 8
  %165 = load i160, ptr %9, align 4
  store i160 %165, ptr %13, align 4
  %166 = load ptr, ptr %14, align 8
  %167 = insertvalue { ptr, i160 } undef, ptr %166, 0
  %168 = load i160, ptr %13, align 4
  %169 = insertvalue { ptr, i160 } %167, i160 %168, 1
  %170 = load ptr, ptr %44, align 8
  %171 = call { ptr, i160 } %170({ ptr, i160 } %163, { ptr, i160 } %169)
  store { ptr, i160 } %171, ptr %15, align 8
  %172 = getelementptr { ptr, i160 }, ptr %15, i32 0, i32 0
  %173 = load ptr, ptr %172, align 8
  store ptr %173, ptr %17, align 8
  %174 = getelementptr { ptr, i160 }, ptr %15, i32 0, i32 1
  %175 = load i160, ptr %174, align 4
  store i160 %175, ptr %16, align 4
  %176 = load ptr, ptr %17, align 8
  store ptr %176, ptr %39, align 8
  %177 = load i160, ptr %16, align 4
  store i160 %177, ptr %38, align 4
  %178 = load ptr, ptr %10, align 8
  store ptr %178, ptr %19, align 8
  %179 = load i160, ptr %9, align 4
  store i160 %179, ptr %18, align 4
  %180 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 0
  %181 = load ptr, ptr %19, align 8
  store ptr %181, ptr %180, align 8
  %182 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 1
  %183 = load i160, ptr %18, align 4
  store i160 %183, ptr %182, align 4
  br label %184

184:                                              ; preds = %._crit_edge, %153
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %185

._crit_edge1:                                     ; preds = %184
  br label %124

185:                                              ; preds = %184
  %186 = load ptr, ptr %39, align 8
  store ptr %186, ptr %21, align 8
  %187 = load i160, ptr %38, align 4
  store i160 %187, ptr %20, align 4
  %188 = load ptr, ptr %21, align 8
  %189 = insertvalue { ptr, i160 } undef, ptr %188, 0
  %190 = load i160, ptr %20, align 4
  %191 = insertvalue { ptr, i160 } %189, i160 %190, 1
  ret { ptr, i160 } %191
}

define i1 @Iterable2_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca [0 x ptr], align 8
  %6 = alloca {}, align 8
  %7 = alloca { ptr, i160 }, align 8
  %8 = alloca i160, align 8
  %9 = alloca ptr, align 8
  %10 = alloca i160, align 8
  %11 = alloca ptr, align 8
  %12 = alloca i1, align 1
  %13 = alloca i1, align 1
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem7 = alloca i1, align 1
  %.reg2mem10 = alloca ptr, align 8
  %.reg2mem12 = alloca ptr, align 8
  %.reg2mem14 = alloca ptr, align 8
  %.reg2mem16 = alloca ptr, align 8
  %.reg2mem18 = alloca ptr, align 8
  %.reg2mem20 = alloca ptr, align 8
  %.reg2mem22 = alloca ptr, align 8
  %.reg2mem24 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %14, align 8
  %15 = call ptr @llvm.invariant.start.p0(i64 16, ptr %14)
  %16 = alloca { ptr, ptr, ptr, i32 }, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 0
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 2
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %28 = load i32, ptr %26, align 4
  store i32 %28, ptr %27, align 4
  call void @set_offset(ptr %16, ptr @Iterable2)
  %29 = alloca ptr, align 8
  store { ptr } %3, ptr %29, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 0
  %31 = load ptr, ptr %30, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %31, 0
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %34 = load ptr, ptr %33, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr %34, 1
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 2
  %37 = load ptr, ptr %36, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %37, 2
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %40 = load i32, ptr %39, align 4
  %41 = insertvalue { ptr, ptr, ptr, i32 } %38, i32 %40, 3
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %43 = load ptr, ptr %42, align 8
  %44 = load ptr, ptr %16, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 184, ptr %44)
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %47 = load i32, ptr %46, align 4
  %48 = getelementptr ptr, ptr %44, i32 %47
  %49 = load ptr, ptr %48, align 8
  %50 = call ptr @typegetter_wrapper(ptr %49, ptr %43)
  %51 = alloca [0 x ptr], align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 0, ptr %51)
  %53 = call ptr @llvm.invariant.start.p0(i64 184, ptr %31)
  %54 = getelementptr ptr, ptr %31, i32 %40
  %55 = getelementptr ptr, ptr %54, i32 1
  %56 = load ptr, ptr %55, align 8
  %57 = alloca {}, align 8
  %58 = call ptr @behavior_wrapper(ptr %56, { ptr, ptr, ptr, i32 } %41, ptr %57)
  %59 = call { ptr, ptr, ptr, i32 } %58({ ptr, ptr, ptr, i32 } %41, { ptr, ptr, ptr, i32 } %41, ptr %51)
  %60 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %59, ptr %60, align 8
  %61 = call ptr @llvm.invariant.start.p0(i64 16, ptr %60)
  %62 = alloca { ptr, ptr, ptr, i32 }, align 8
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 0
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 0
  %65 = load ptr, ptr %63, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 1
  %68 = load ptr, ptr %66, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 2
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 2
  %71 = load ptr, ptr %69, align 8
  store ptr %71, ptr %70, align 8
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %60, i32 0, i32 3
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 3
  %74 = load i32, ptr %72, align 4
  store i32 %74, ptr %73, align 4
  call void @set_offset(ptr %62, ptr @Iterator2)
  %75 = alloca { ptr, ptr, ptr, i32 }, align 8
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 0
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 0
  %78 = load ptr, ptr %76, align 8
  store ptr %78, ptr %77, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 1
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 1
  %81 = load ptr, ptr %79, align 8
  store ptr %81, ptr %80, align 8
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 2
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 2
  %84 = load ptr, ptr %82, align 8
  store ptr %84, ptr %83, align 8
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 3
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 3
  %87 = load i32, ptr %85, align 4
  store i32 %87, ptr %86, align 4
  call void @set_offset(ptr %75, ptr @Iterator2)
  %88 = alloca { ptr, ptr, ptr, i32 }, align 8
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 0
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %88, i32 0, i32 0
  %91 = load ptr, ptr %89, align 8
  store ptr %91, ptr %90, align 8
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 1
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %88, i32 0, i32 1
  %94 = load ptr, ptr %92, align 8
  store ptr %94, ptr %93, align 8
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 2
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %88, i32 0, i32 2
  %97 = load ptr, ptr %95, align 8
  store ptr %97, ptr %96, align 8
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 3
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %88, i32 0, i32 3
  %100 = load i32, ptr %98, align 4
  store i32 %100, ptr %99, align 4
  %101 = call ptr @llvm.invariant.start.p0(i64 16, ptr %88)
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %88, i32 0, i32 0
  store ptr %102, ptr %.reg2mem22, align 8
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %88, i32 0, i32 1
  store ptr %103, ptr %.reg2mem20, align 8
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %88, i32 0, i32 2
  store ptr %104, ptr %.reg2mem18, align 8
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %88, i32 0, i32 3
  store ptr %105, ptr %.reg2mem16, align 8
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  store ptr %106, ptr %.reg2mem14, align 8
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  store ptr %107, ptr %.reg2mem12, align 8
  %108 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 0
  store ptr %108, ptr %.reg2mem10, align 8
  br label %109

109:                                              ; preds = %158, %4
  %.reload23 = load ptr, ptr %.reg2mem22, align 8
  %110 = load ptr, ptr %.reload23, align 8
  %111 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %110, 0
  %.reload21 = load ptr, ptr %.reg2mem20, align 8
  %112 = load ptr, ptr %.reload21, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } %111, ptr %112, 1
  %.reload19 = load ptr, ptr %.reg2mem18, align 8
  %114 = load ptr, ptr %.reload19, align 8
  %115 = insertvalue { ptr, ptr, ptr, i32 } %113, ptr %114, 2
  %.reload17 = load ptr, ptr %.reg2mem16, align 8
  %116 = load i32, ptr %.reload17, align 4
  %117 = insertvalue { ptr, ptr, ptr, i32 } %115, i32 %116, 3
  %.reload15 = load ptr, ptr %.reg2mem14, align 8
  %118 = load ptr, ptr %.reload15, align 8
  %119 = load ptr, ptr %16, align 8
  %120 = call ptr @llvm.invariant.start.p0(i64 184, ptr %119)
  %.reload13 = load ptr, ptr %.reg2mem12, align 8
  %121 = load i32, ptr %.reload13, align 4
  %122 = getelementptr ptr, ptr %119, i32 %121
  %123 = load ptr, ptr %122, align 8
  %124 = call ptr @typegetter_wrapper(ptr %123, ptr %118)
  %125 = call ptr @llvm.invariant.start.p0(i64 0, ptr %5)
  %126 = call ptr @llvm.invariant.start.p0(i64 24, ptr %110)
  %127 = getelementptr ptr, ptr %110, i32 %116
  %128 = getelementptr ptr, ptr %127, i32 1
  %129 = load ptr, ptr %128, align 8
  %130 = call ptr @behavior_wrapper(ptr %129, { ptr, ptr, ptr, i32 } %117, ptr %6)
  %131 = call { ptr, i160 } %130({ ptr, ptr, ptr, i32 } %117, { ptr, ptr, ptr, i32 } %117, ptr %5)
  store { ptr, i160 } %131, ptr %7, align 8
  %.reload11 = load ptr, ptr %.reg2mem10, align 8
  %132 = load ptr, ptr %.reload11, align 8
  %133 = ptrtoint ptr %132 to i64
  %134 = icmp eq i64 %133, ptrtoint (ptr @nil_typ to i64)
  %135 = icmp eq i64 %133, 0
  %136 = or i1 %134, %135
  %137 = icmp eq i1 %136, false
  %138 = icmp ne i1 %136, false
  store i1 %138, ptr %.reg2mem7, align 1
  %139 = select i1 %137, ptr %12, ptr %13
  store ptr %139, ptr %.reg2mem3, align 8
  br i1 %137, label %140, label %154

140:                                              ; preds = %109
  %141 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 0
  %142 = load ptr, ptr %141, align 8
  store ptr %142, ptr %9, align 8
  %143 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 1
  %144 = load i160, ptr %143, align 4
  store i160 %144, ptr %8, align 4
  %145 = load ptr, ptr %9, align 8
  store ptr %145, ptr %11, align 8
  %146 = load i160, ptr %8, align 4
  store i160 %146, ptr %10, align 4
  %147 = load ptr, ptr %11, align 8
  %148 = insertvalue { ptr, i160 } undef, ptr %147, 0
  %149 = load i160, ptr %10, align 4
  %150 = insertvalue { ptr, i160 } %148, i160 %149, 1
  %151 = load ptr, ptr %29, align 8
  %152 = call i1 %151({ ptr, i160 } %150)
  %153 = zext i1 %152 to i32
  store i32 %153, ptr %.reg2mem1, align 4
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem24, align 4
  br label %155

154:                                              ; preds = %109
  store i32 0, ptr %.reg2mem24, align 4
  br label %155

155:                                              ; preds = %154, %140
  %.reload25 = load i32, ptr %.reg2mem24, align 4
  store i32 %.reload25, ptr %.reg2mem, align 4
  br label %156

156:                                              ; preds = %155
  %.reload = load i32, ptr %.reg2mem, align 4
  %157 = trunc i32 %.reload to i1
  %.reload6 = load ptr, ptr %.reg2mem3, align 8
  %.reload9 = load i1, ptr %.reg2mem7, align 1
  br i1 %157, label %158, label %159

158:                                              ; preds = %156
  br label %109

159:                                              ; preds = %156
  %.reload5 = load ptr, ptr %.reg2mem3, align 8
  %.reload8 = load i1, ptr %.reg2mem7, align 1
  store i1 %.reload8, ptr %.reload5, align 1
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %160 = load i1, ptr %.reload4, align 1
  ret i1 %160
}

define i1 @Iterable2_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca [0 x ptr], align 8
  %6 = alloca {}, align 8
  %7 = alloca { ptr, i160 }, align 8
  %8 = alloca i160, align 8
  %9 = alloca ptr, align 8
  %10 = alloca i160, align 8
  %11 = alloca ptr, align 8
  %12 = alloca i1, align 1
  %13 = alloca i160, align 8
  %14 = alloca ptr, align 8
  %15 = alloca i1, align 1
  %16 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem7 = alloca i1, align 1
  %.reg2mem12 = alloca ptr, align 8
  %.reg2mem14 = alloca ptr, align 8
  %.reg2mem16 = alloca ptr, align 8
  %.reg2mem18 = alloca ptr, align 8
  %.reg2mem20 = alloca ptr, align 8
  %.reg2mem22 = alloca ptr, align 8
  %.reg2mem24 = alloca ptr, align 8
  %.reg2mem26 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %16, align 8
  %17 = call ptr @llvm.invariant.start.p0(i64 16, ptr %16)
  %18 = alloca { ptr, ptr, ptr, i32 }, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 0
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 0
  %21 = load ptr, ptr %19, align 8
  store ptr %21, ptr %20, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 2
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 2
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  %30 = load i32, ptr %28, align 4
  store i32 %30, ptr %29, align 4
  call void @set_offset(ptr %18, ptr @Iterable2)
  %31 = alloca ptr, align 8
  store { ptr } %3, ptr %31, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 0
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %33, 0
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %36, 1
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 2
  %39 = load ptr, ptr %38, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %39, 2
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  %42 = load i32, ptr %41, align 4
  %43 = insertvalue { ptr, ptr, ptr, i32 } %40, i32 %42, 3
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  %45 = load ptr, ptr %44, align 8
  %46 = load ptr, ptr %18, align 8
  %47 = call ptr @llvm.invariant.start.p0(i64 184, ptr %46)
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  %49 = load i32, ptr %48, align 4
  %50 = getelementptr ptr, ptr %46, i32 %49
  %51 = load ptr, ptr %50, align 8
  %52 = call ptr @typegetter_wrapper(ptr %51, ptr %45)
  %53 = alloca [0 x ptr], align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 0, ptr %53)
  %55 = call ptr @llvm.invariant.start.p0(i64 184, ptr %33)
  %56 = getelementptr ptr, ptr %33, i32 %42
  %57 = getelementptr ptr, ptr %56, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = alloca {}, align 8
  %60 = call ptr @behavior_wrapper(ptr %58, { ptr, ptr, ptr, i32 } %43, ptr %59)
  %61 = call { ptr, ptr, ptr, i32 } %60({ ptr, ptr, ptr, i32 } %43, { ptr, ptr, ptr, i32 } %43, ptr %53)
  %62 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %61, ptr %62, align 8
  %63 = call ptr @llvm.invariant.start.p0(i64 16, ptr %62)
  %64 = alloca { ptr, ptr, ptr, i32 }, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 0
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 0
  %67 = load ptr, ptr %65, align 8
  store ptr %67, ptr %66, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 1
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 1
  %70 = load ptr, ptr %68, align 8
  store ptr %70, ptr %69, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 2
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 2
  %73 = load ptr, ptr %71, align 8
  store ptr %73, ptr %72, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 3
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 3
  %76 = load i32, ptr %74, align 4
  store i32 %76, ptr %75, align 4
  call void @set_offset(ptr %64, ptr @Iterator2)
  %77 = alloca { ptr, ptr, ptr, i32 }, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 0
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 0
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 1
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 1
  %83 = load ptr, ptr %81, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 2
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 2
  %86 = load ptr, ptr %84, align 8
  store ptr %86, ptr %85, align 8
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %64, i32 0, i32 3
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 3
  %89 = load i32, ptr %87, align 4
  store i32 %89, ptr %88, align 4
  call void @set_offset(ptr %77, ptr @Iterator2)
  %90 = alloca { ptr, ptr, ptr, i32 }, align 8
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 0
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 0
  %93 = load ptr, ptr %91, align 8
  store ptr %93, ptr %92, align 8
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 1
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 1
  %96 = load ptr, ptr %94, align 8
  store ptr %96, ptr %95, align 8
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 2
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 2
  %99 = load ptr, ptr %97, align 8
  store ptr %99, ptr %98, align 8
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 3
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 3
  %102 = load i32, ptr %100, align 4
  store i32 %102, ptr %101, align 4
  %103 = call ptr @llvm.invariant.start.p0(i64 16, ptr %90)
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 0
  store ptr %104, ptr %.reg2mem24, align 8
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 1
  store ptr %105, ptr %.reg2mem22, align 8
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 2
  store ptr %106, ptr %.reg2mem20, align 8
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 3
  store ptr %107, ptr %.reg2mem18, align 8
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  store ptr %108, ptr %.reg2mem16, align 8
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  store ptr %109, ptr %.reg2mem14, align 8
  %110 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 0
  store ptr %110, ptr %.reg2mem12, align 8
  br label %111

111:                                              ; preds = %169, %4
  %.reload25 = load ptr, ptr %.reg2mem24, align 8
  %112 = load ptr, ptr %.reload25, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %112, 0
  %.reload23 = load ptr, ptr %.reg2mem22, align 8
  %114 = load ptr, ptr %.reload23, align 8
  %115 = insertvalue { ptr, ptr, ptr, i32 } %113, ptr %114, 1
  %.reload21 = load ptr, ptr %.reg2mem20, align 8
  %116 = load ptr, ptr %.reload21, align 8
  %117 = insertvalue { ptr, ptr, ptr, i32 } %115, ptr %116, 2
  %.reload19 = load ptr, ptr %.reg2mem18, align 8
  %118 = load i32, ptr %.reload19, align 4
  %119 = insertvalue { ptr, ptr, ptr, i32 } %117, i32 %118, 3
  %.reload17 = load ptr, ptr %.reg2mem16, align 8
  %120 = load ptr, ptr %.reload17, align 8
  %121 = load ptr, ptr %18, align 8
  %122 = call ptr @llvm.invariant.start.p0(i64 184, ptr %121)
  %.reload15 = load ptr, ptr %.reg2mem14, align 8
  %123 = load i32, ptr %.reload15, align 4
  %124 = getelementptr ptr, ptr %121, i32 %123
  %125 = load ptr, ptr %124, align 8
  %126 = call ptr @typegetter_wrapper(ptr %125, ptr %120)
  %127 = call ptr @llvm.invariant.start.p0(i64 0, ptr %5)
  %128 = call ptr @llvm.invariant.start.p0(i64 24, ptr %112)
  %129 = getelementptr ptr, ptr %112, i32 %118
  %130 = getelementptr ptr, ptr %129, i32 1
  %131 = load ptr, ptr %130, align 8
  %132 = call ptr @behavior_wrapper(ptr %131, { ptr, ptr, ptr, i32 } %119, ptr %6)
  %133 = call { ptr, i160 } %132({ ptr, ptr, ptr, i32 } %119, { ptr, ptr, ptr, i32 } %119, ptr %5)
  store { ptr, i160 } %133, ptr %7, align 8
  %.reload13 = load ptr, ptr %.reg2mem12, align 8
  %134 = load ptr, ptr %.reload13, align 8
  %135 = ptrtoint ptr %134 to i64
  %136 = icmp eq i64 %135, ptrtoint (ptr @nil_typ to i64)
  %137 = icmp eq i64 %135, 0
  %138 = or i1 %136, %137
  %139 = icmp eq i1 %138, false
  store i1 %139, ptr %.reg2mem7, align 1
  %.reload11 = load i1, ptr %.reg2mem7, align 1
  %140 = select i1 %.reload11, ptr %12, ptr %15
  store ptr %140, ptr %.reg2mem3, align 8
  %.reload10 = load i1, ptr %.reg2mem7, align 1
  br i1 %.reload10, label %141, label %165

141:                                              ; preds = %111
  %142 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 0
  %143 = load ptr, ptr %142, align 8
  store ptr %143, ptr %9, align 8
  %144 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 1
  %145 = load i160, ptr %144, align 4
  store i160 %145, ptr %8, align 4
  %146 = load ptr, ptr %9, align 8
  store ptr %146, ptr %11, align 8
  %147 = load i160, ptr %8, align 4
  store i160 %147, ptr %10, align 4
  %148 = load ptr, ptr %11, align 8
  %149 = insertvalue { ptr, i160 } undef, ptr %148, 0
  %150 = load i160, ptr %10, align 4
  %151 = insertvalue { ptr, i160 } %149, i160 %150, 1
  %152 = load ptr, ptr %31, align 8
  %153 = call i1 %152({ ptr, i160 } %151)
  %154 = xor i1 %153, true
  %155 = zext i1 %154 to i32
  store i32 %155, ptr %.reg2mem1, align 4
  br i1 %153, label %156, label %157

156:                                              ; preds = %141
  br label %164

157:                                              ; preds = %141
  %158 = load ptr, ptr %9, align 8
  store ptr %158, ptr %14, align 8
  %159 = load i160, ptr %8, align 4
  store i160 %159, ptr %13, align 4
  %160 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 0
  %161 = load ptr, ptr %14, align 8
  store ptr %161, ptr %160, align 8
  %162 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 1
  %163 = load i160, ptr %13, align 4
  store i160 %163, ptr %162, align 4
  br label %164

164:                                              ; preds = %157, %156
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem26, align 4
  br label %166

165:                                              ; preds = %111
  store i32 0, ptr %.reg2mem26, align 4
  br label %166

166:                                              ; preds = %165, %164
  %.reload27 = load i32, ptr %.reg2mem26, align 4
  store i32 %.reload27, ptr %.reg2mem, align 4
  br label %167

167:                                              ; preds = %166
  %.reload = load i32, ptr %.reg2mem, align 4
  %168 = trunc i32 %.reload to i1
  %.reload6 = load ptr, ptr %.reg2mem3, align 8
  %.reload9 = load i1, ptr %.reg2mem7, align 1
  br i1 %168, label %169, label %170

169:                                              ; preds = %167
  br label %111

170:                                              ; preds = %167
  %.reload5 = load ptr, ptr %.reg2mem3, align 8
  %.reload8 = load i1, ptr %.reg2mem7, align 1
  store i1 %.reload8, ptr %.reload5, align 1
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %171 = load i1, ptr %.reload4, align 1
  ret i1 %171
}

define { ptr, ptr, ptr, i32 } @Iterable2_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Iterable2)
  %20 = alloca ptr, align 8
  store { ptr } %3, ptr %20, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %22 = load ptr, ptr %21, align 8
  %23 = load ptr, ptr %7, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 184, ptr %23)
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %26 = load i32, ptr %25, align 4
  %27 = getelementptr ptr, ptr %23, i32 %26
  %28 = load ptr, ptr %27, align 8
  %29 = call ptr @typegetter_wrapper(ptr %28, ptr %22)
  %30 = load ptr, ptr %2, align 8
  %31 = getelementptr [1 x ptr], ptr %30, i32 0, i32 1
  %32 = load ptr, ptr %31, align 8
  %33 = alloca [3 x ptr], align 8
  store ptr @MapIterable2, ptr %33, align 8
  %34 = getelementptr ptr, ptr %33, i32 1
  store ptr %29, ptr %34, align 8
  %35 = getelementptr ptr, ptr %33, i32 2
  store ptr %32, ptr %35, align 8
  %36 = load ptr, ptr %33, align 8
  %37 = getelementptr ptr, ptr %36, i32 6
  %38 = load ptr, ptr %37, align 8
  %39 = call { i64, i64 } @size_wrapper(ptr %38, ptr %33)
  %40 = extractvalue { i64, i64 } %39, 0
  %41 = call ptr @bump_malloc(i64 %40)
  store ptr %29, ptr %41, align 8
  %42 = getelementptr ptr, ptr %41, i32 1
  store ptr %32, ptr %42, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 16, ptr %41)
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 1
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 3
  store ptr @MapIterable2, ptr %44, align 8
  store ptr %41, ptr %45, align 8
  store i32 9, ptr %46, align 4
  %47 = call ptr @llvm.invariant.start.p0(i64 16, ptr %44)
  %48 = alloca { ptr, ptr, ptr, i32 }, align 8
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 0
  %51 = load ptr, ptr %49, align 8
  store ptr %51, ptr %50, align 8
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 1
  %54 = load ptr, ptr %52, align 8
  store ptr %54, ptr %53, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 2
  %57 = load ptr, ptr %55, align 8
  store ptr %57, ptr %56, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 3
  %60 = load i32, ptr %58, align 4
  store i32 %60, ptr %59, align 4
  call void @set_offset(ptr %48, ptr @Iterable2)
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 0
  %62 = load ptr, ptr %61, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %62, 0
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 1
  %65 = load ptr, ptr %64, align 8
  %66 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %65, 1
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 2
  %68 = load ptr, ptr %67, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %66, ptr %68, 2
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 3
  %71 = load i32, ptr %70, align 4
  %72 = insertvalue { ptr, ptr, ptr, i32 } %69, i32 %71, 3
  %73 = load ptr, ptr %20, align 8
  %74 = insertvalue { ptr } undef, ptr %73, 0
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 0
  %76 = load ptr, ptr %75, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %76, 0
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 1
  %79 = load ptr, ptr %78, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } %77, ptr %79, 1
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 2
  %82 = load ptr, ptr %81, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } %80, ptr %82, 2
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 3
  %85 = load i32, ptr %84, align 4
  %86 = insertvalue { ptr, ptr, ptr, i32 } %83, i32 %85, 3
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %88 = load ptr, ptr %87, align 8
  %89 = load ptr, ptr %7, align 8
  %90 = call ptr @llvm.invariant.start.p0(i64 184, ptr %89)
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %92 = load i32, ptr %91, align 4
  %93 = getelementptr ptr, ptr %89, i32 %92
  %94 = load ptr, ptr %93, align 8
  %95 = call ptr @typegetter_wrapper(ptr %94, ptr %88)
  %96 = load ptr, ptr %2, align 8
  %97 = getelementptr [1 x ptr], ptr %96, i32 0, i32 1
  %98 = load ptr, ptr %97, align 8
  %99 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %100 = getelementptr [3 x ptr], ptr %99, i32 0, i32 1
  store ptr %95, ptr %100, align 8
  %101 = getelementptr [3 x ptr], ptr %99, i32 0, i32 2
  store ptr null, ptr %101, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 16, ptr %99)
  store ptr @Iterable2, ptr %99, align 8
  %103 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %104 = getelementptr [4 x ptr], ptr %103, i32 0, i32 2
  store ptr %95, ptr %104, align 8
  %105 = getelementptr [4 x ptr], ptr %103, i32 0, i32 1
  store ptr %98, ptr %105, align 8
  %106 = getelementptr [4 x ptr], ptr %103, i32 0, i32 3
  store ptr null, ptr %106, align 8
  %107 = call ptr @llvm.invariant.start.p0(i64 24, ptr %103)
  store ptr @function_typ, ptr %103, align 8
  %108 = alloca [2 x ptr], align 8
  %109 = getelementptr [2 x ptr], ptr %108, i32 0, i32 0
  store ptr %99, ptr %109, align 8
  %110 = getelementptr [2 x ptr], ptr %108, i32 0, i32 1
  store ptr %103, ptr %110, align 8
  %111 = call ptr @llvm.invariant.start.p0(i64 4, ptr %108)
  %112 = call ptr @llvm.invariant.start.p0(i64 408, ptr %76)
  %113 = getelementptr ptr, ptr %76, i32 %85
  %114 = getelementptr ptr, ptr %113, i32 4
  %115 = load ptr, ptr %114, align 8
  %116 = alloca { ptr, ptr }, align 8
  %117 = getelementptr { ptr, ptr }, ptr %116, i32 0, i32 0
  store ptr %62, ptr %117, align 8
  %118 = getelementptr { ptr, ptr }, ptr %116, i32 0, i32 1
  store ptr @function_typ, ptr %118, align 8
  %119 = call ptr @behavior_wrapper(ptr %115, { ptr, ptr, ptr, i32 } %86, ptr %116)
  call void %119({ ptr, ptr, ptr, i32 } %86, { ptr, ptr, ptr, i32 } %86, ptr %108, { ptr, ptr, ptr, i32 } %72, { ptr } %74)
  %120 = alloca { ptr, ptr, ptr, i32 }, align 8
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 0
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 0
  %123 = load ptr, ptr %121, align 8
  store ptr %123, ptr %122, align 8
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 1
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 1
  %126 = load ptr, ptr %124, align 8
  store ptr %126, ptr %125, align 8
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 2
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 2
  %129 = load ptr, ptr %127, align 8
  store ptr %129, ptr %128, align 8
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 3
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 3
  %132 = load i32, ptr %130, align 4
  store i32 %132, ptr %131, align 4
  call void @set_offset(ptr %120, ptr @Iterable2)
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 0
  %134 = load ptr, ptr %133, align 8
  %135 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %134, 0
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 1
  %137 = load ptr, ptr %136, align 8
  %138 = insertvalue { ptr, ptr, ptr, i32 } %135, ptr %137, 1
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 2
  %140 = load ptr, ptr %139, align 8
  %141 = insertvalue { ptr, ptr, ptr, i32 } %138, ptr %140, 2
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 3
  %143 = load i32, ptr %142, align 4
  %144 = insertvalue { ptr, ptr, ptr, i32 } %141, i32 %143, 3
  ret { ptr, ptr, ptr, i32 } %144
}

define { ptr, ptr, ptr, i32 } @Iterable2_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Iterable2)
  %20 = alloca ptr, align 8
  store { ptr } %3, ptr %20, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %22 = load ptr, ptr %21, align 8
  %23 = load ptr, ptr %7, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 184, ptr %23)
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %26 = load i32, ptr %25, align 4
  %27 = getelementptr ptr, ptr %23, i32 %26
  %28 = load ptr, ptr %27, align 8
  %29 = call ptr @typegetter_wrapper(ptr %28, ptr %22)
  %30 = alloca [2 x ptr], align 8
  store ptr @FilterIterable2, ptr %30, align 8
  %31 = getelementptr ptr, ptr %30, i32 1
  store ptr %29, ptr %31, align 8
  %32 = load ptr, ptr %30, align 8
  %33 = getelementptr ptr, ptr %32, i32 6
  %34 = load ptr, ptr %33, align 8
  %35 = call { i64, i64 } @size_wrapper(ptr %34, ptr %30)
  %36 = extractvalue { i64, i64 } %35, 0
  %37 = call ptr @bump_malloc(i64 %36)
  store ptr %29, ptr %37, align 8
  %38 = call ptr @llvm.invariant.start.p0(i64 8, ptr %37)
  %39 = alloca { ptr, ptr, ptr, i32 }, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 1
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 3
  store ptr @FilterIterable2, ptr %39, align 8
  store ptr %37, ptr %40, align 8
  store i32 9, ptr %41, align 4
  %42 = call ptr @llvm.invariant.start.p0(i64 16, ptr %39)
  %43 = alloca { ptr, ptr, ptr, i32 }, align 8
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 0
  %46 = load ptr, ptr %44, align 8
  store ptr %46, ptr %45, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 1
  %49 = load ptr, ptr %47, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 2
  %52 = load ptr, ptr %50, align 8
  store ptr %52, ptr %51, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 3
  %55 = load i32, ptr %53, align 4
  store i32 %55, ptr %54, align 4
  call void @set_offset(ptr %43, ptr @Iterable2)
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 0
  %57 = load ptr, ptr %56, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %57, 0
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 1
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } %58, ptr %60, 1
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 2
  %63 = load ptr, ptr %62, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %63, 2
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 3
  %66 = load i32, ptr %65, align 4
  %67 = insertvalue { ptr, ptr, ptr, i32 } %64, i32 %66, 3
  %68 = load ptr, ptr %20, align 8
  %69 = insertvalue { ptr } undef, ptr %68, 0
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 0
  %71 = load ptr, ptr %70, align 8
  %72 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %71, 0
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 1
  %74 = load ptr, ptr %73, align 8
  %75 = insertvalue { ptr, ptr, ptr, i32 } %72, ptr %74, 1
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 2
  %77 = load ptr, ptr %76, align 8
  %78 = insertvalue { ptr, ptr, ptr, i32 } %75, ptr %77, 2
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 3
  %80 = load i32, ptr %79, align 4
  %81 = insertvalue { ptr, ptr, ptr, i32 } %78, i32 %80, 3
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %83 = load ptr, ptr %82, align 8
  %84 = load ptr, ptr %7, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 184, ptr %84)
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %87 = load i32, ptr %86, align 4
  %88 = getelementptr ptr, ptr %84, i32 %87
  %89 = load ptr, ptr %88, align 8
  %90 = call ptr @typegetter_wrapper(ptr %89, ptr %83)
  %91 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %92 = getelementptr [3 x ptr], ptr %91, i32 0, i32 1
  store ptr %90, ptr %92, align 8
  %93 = getelementptr [3 x ptr], ptr %91, i32 0, i32 2
  store ptr null, ptr %93, align 8
  %94 = call ptr @llvm.invariant.start.p0(i64 16, ptr %91)
  store ptr @Iterable2, ptr %91, align 8
  %95 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %96 = getelementptr [4 x ptr], ptr %95, i32 0, i32 2
  store ptr %90, ptr %96, align 8
  %97 = getelementptr [4 x ptr], ptr %95, i32 0, i32 1
  store ptr @_parameterization_Ptri1, ptr %97, align 8
  %98 = getelementptr [4 x ptr], ptr %95, i32 0, i32 3
  store ptr null, ptr %98, align 8
  %99 = call ptr @llvm.invariant.start.p0(i64 24, ptr %95)
  store ptr @function_typ, ptr %95, align 8
  %100 = alloca [2 x ptr], align 8
  %101 = getelementptr [2 x ptr], ptr %100, i32 0, i32 0
  store ptr %91, ptr %101, align 8
  %102 = getelementptr [2 x ptr], ptr %100, i32 0, i32 1
  store ptr %95, ptr %102, align 8
  %103 = call ptr @llvm.invariant.start.p0(i64 4, ptr %100)
  %104 = call ptr @llvm.invariant.start.p0(i64 400, ptr %71)
  %105 = getelementptr ptr, ptr %71, i32 %80
  %106 = getelementptr ptr, ptr %105, i32 3
  %107 = load ptr, ptr %106, align 8
  %108 = alloca { ptr, ptr }, align 8
  %109 = getelementptr { ptr, ptr }, ptr %108, i32 0, i32 0
  store ptr %57, ptr %109, align 8
  %110 = getelementptr { ptr, ptr }, ptr %108, i32 0, i32 1
  store ptr @function_typ, ptr %110, align 8
  %111 = call ptr @behavior_wrapper(ptr %107, { ptr, ptr, ptr, i32 } %81, ptr %108)
  call void %111({ ptr, ptr, ptr, i32 } %81, { ptr, ptr, ptr, i32 } %81, ptr %100, { ptr, ptr, ptr, i32 } %67, { ptr } %69)
  %112 = alloca { ptr, ptr, ptr, i32 }, align 8
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 0
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 0
  %115 = load ptr, ptr %113, align 8
  store ptr %115, ptr %114, align 8
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 1
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 1
  %118 = load ptr, ptr %116, align 8
  store ptr %118, ptr %117, align 8
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 2
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 2
  %121 = load ptr, ptr %119, align 8
  store ptr %121, ptr %120, align 8
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 3
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 3
  %124 = load i32, ptr %122, align 4
  store i32 %124, ptr %123, align 4
  call void @set_offset(ptr %112, ptr @Iterable2)
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 0
  %126 = load ptr, ptr %125, align 8
  %127 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %126, 0
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 1
  %129 = load ptr, ptr %128, align 8
  %130 = insertvalue { ptr, ptr, ptr, i32 } %127, ptr %129, 1
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 2
  %132 = load ptr, ptr %131, align 8
  %133 = insertvalue { ptr, ptr, ptr, i32 } %130, ptr %132, 2
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %112, i32 0, i32 3
  %135 = load i32, ptr %134, align 4
  %136 = insertvalue { ptr, ptr, ptr, i32 } %133, i32 %135, 3
  ret { ptr, ptr, ptr, i32 } %136
}

define { ptr, ptr, ptr, i32 } @Iterable2_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Iterable2)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 16, ptr %20)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %34 = load i32, ptr %32, align 4
  store i32 %34, ptr %33, align 4
  call void @set_offset(ptr %22, ptr @Iterable2)
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = load ptr, ptr %7, align 8
  %38 = call ptr @llvm.invariant.start.p0(i64 184, ptr %37)
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %40 = load i32, ptr %39, align 4
  %41 = getelementptr ptr, ptr %37, i32 %40
  %42 = load ptr, ptr %41, align 8
  %43 = call ptr @typegetter_wrapper(ptr %42, ptr %36)
  %44 = alloca [2 x ptr], align 8
  store ptr @ChainIterable2, ptr %44, align 8
  %45 = getelementptr ptr, ptr %44, i32 1
  store ptr %43, ptr %45, align 8
  %46 = load ptr, ptr %44, align 8
  %47 = getelementptr ptr, ptr %46, i32 6
  %48 = load ptr, ptr %47, align 8
  %49 = call { i64, i64 } @size_wrapper(ptr %48, ptr %44)
  %50 = extractvalue { i64, i64 } %49, 0
  %51 = call ptr @bump_malloc(i64 %50)
  store ptr %43, ptr %51, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 8, ptr %51)
  %53 = alloca { ptr, ptr, ptr, i32 }, align 8
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 1
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 3
  store ptr @ChainIterable2, ptr %53, align 8
  store ptr %51, ptr %54, align 8
  store i32 9, ptr %55, align 4
  %56 = call ptr @llvm.invariant.start.p0(i64 16, ptr %53)
  %57 = alloca { ptr, ptr, ptr, i32 }, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 0
  %60 = load ptr, ptr %58, align 8
  store ptr %60, ptr %59, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 1
  %63 = load ptr, ptr %61, align 8
  store ptr %63, ptr %62, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 2
  %66 = load ptr, ptr %64, align 8
  store ptr %66, ptr %65, align 8
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 3
  %69 = load i32, ptr %67, align 4
  store i32 %69, ptr %68, align 4
  call void @set_offset(ptr %57, ptr @Iterable2)
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 0
  %71 = load ptr, ptr %70, align 8
  %72 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %71, 0
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 1
  %74 = load ptr, ptr %73, align 8
  %75 = insertvalue { ptr, ptr, ptr, i32 } %72, ptr %74, 1
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 2
  %77 = load ptr, ptr %76, align 8
  %78 = insertvalue { ptr, ptr, ptr, i32 } %75, ptr %77, 2
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 3
  %80 = load i32, ptr %79, align 4
  %81 = insertvalue { ptr, ptr, ptr, i32 } %78, i32 %80, 3
  %82 = alloca { ptr, ptr, ptr, i32 }, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 0
  %85 = load ptr, ptr %83, align 8
  store ptr %85, ptr %84, align 8
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 1
  %88 = load ptr, ptr %86, align 8
  store ptr %88, ptr %87, align 8
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 2
  %91 = load ptr, ptr %89, align 8
  store ptr %91, ptr %90, align 8
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 3
  %94 = load i32, ptr %92, align 4
  store i32 %94, ptr %93, align 4
  call void @set_offset(ptr %82, ptr @Iterable2)
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 0
  %96 = load ptr, ptr %95, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %96, 0
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 1
  %99 = load ptr, ptr %98, align 8
  %100 = insertvalue { ptr, ptr, ptr, i32 } %97, ptr %99, 1
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 2
  %102 = load ptr, ptr %101, align 8
  %103 = insertvalue { ptr, ptr, ptr, i32 } %100, ptr %102, 2
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 3
  %105 = load i32, ptr %104, align 4
  %106 = insertvalue { ptr, ptr, ptr, i32 } %103, i32 %105, 3
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 0
  %108 = load ptr, ptr %107, align 8
  %109 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %108, 0
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 1
  %111 = load ptr, ptr %110, align 8
  %112 = insertvalue { ptr, ptr, ptr, i32 } %109, ptr %111, 1
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 2
  %114 = load ptr, ptr %113, align 8
  %115 = insertvalue { ptr, ptr, ptr, i32 } %112, ptr %114, 2
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 3
  %117 = load i32, ptr %116, align 4
  %118 = insertvalue { ptr, ptr, ptr, i32 } %115, i32 %117, 3
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %120 = load ptr, ptr %119, align 8
  %121 = load ptr, ptr %7, align 8
  %122 = call ptr @llvm.invariant.start.p0(i64 184, ptr %121)
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %124 = load i32, ptr %123, align 4
  %125 = getelementptr ptr, ptr %121, i32 %124
  %126 = load ptr, ptr %125, align 8
  %127 = call ptr @typegetter_wrapper(ptr %126, ptr %120)
  %128 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %129 = getelementptr [3 x ptr], ptr %128, i32 0, i32 1
  store ptr %127, ptr %129, align 8
  %130 = getelementptr [3 x ptr], ptr %128, i32 0, i32 2
  store ptr null, ptr %130, align 8
  %131 = call ptr @llvm.invariant.start.p0(i64 16, ptr %128)
  store ptr @Iterable2, ptr %128, align 8
  %132 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %133 = getelementptr [3 x ptr], ptr %132, i32 0, i32 1
  store ptr %127, ptr %133, align 8
  %134 = getelementptr [3 x ptr], ptr %132, i32 0, i32 2
  store ptr null, ptr %134, align 8
  %135 = call ptr @llvm.invariant.start.p0(i64 16, ptr %132)
  store ptr @Iterable2, ptr %132, align 8
  %136 = alloca [2 x ptr], align 8
  %137 = getelementptr [2 x ptr], ptr %136, i32 0, i32 0
  store ptr %128, ptr %137, align 8
  %138 = getelementptr [2 x ptr], ptr %136, i32 0, i32 1
  store ptr %132, ptr %138, align 8
  %139 = call ptr @llvm.invariant.start.p0(i64 4, ptr %136)
  %140 = call ptr @llvm.invariant.start.p0(i64 400, ptr %108)
  %141 = getelementptr ptr, ptr %108, i32 %117
  %142 = getelementptr ptr, ptr %141, i32 3
  %143 = load ptr, ptr %142, align 8
  %144 = alloca { ptr, ptr }, align 8
  %145 = getelementptr { ptr, ptr }, ptr %144, i32 0, i32 0
  store ptr %71, ptr %145, align 8
  %146 = getelementptr { ptr, ptr }, ptr %144, i32 0, i32 1
  store ptr %96, ptr %146, align 8
  %147 = call ptr @behavior_wrapper(ptr %143, { ptr, ptr, ptr, i32 } %118, ptr %144)
  call void %147({ ptr, ptr, ptr, i32 } %118, { ptr, ptr, ptr, i32 } %118, ptr %136, { ptr, ptr, ptr, i32 } %81, { ptr, ptr, ptr, i32 } %106)
  %148 = alloca { ptr, ptr, ptr, i32 }, align 8
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 0
  %150 = getelementptr { ptr, ptr, ptr, i32 }, ptr %148, i32 0, i32 0
  %151 = load ptr, ptr %149, align 8
  store ptr %151, ptr %150, align 8
  %152 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 1
  %153 = getelementptr { ptr, ptr, ptr, i32 }, ptr %148, i32 0, i32 1
  %154 = load ptr, ptr %152, align 8
  store ptr %154, ptr %153, align 8
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 2
  %156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %148, i32 0, i32 2
  %157 = load ptr, ptr %155, align 8
  store ptr %157, ptr %156, align 8
  %158 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 3
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %148, i32 0, i32 3
  %160 = load i32, ptr %158, align 4
  store i32 %160, ptr %159, align 4
  call void @set_offset(ptr %148, ptr @Iterable2)
  %161 = getelementptr { ptr, ptr, ptr, i32 }, ptr %148, i32 0, i32 0
  %162 = load ptr, ptr %161, align 8
  %163 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %162, 0
  %164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %148, i32 0, i32 1
  %165 = load ptr, ptr %164, align 8
  %166 = insertvalue { ptr, ptr, ptr, i32 } %163, ptr %165, 1
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %148, i32 0, i32 2
  %168 = load ptr, ptr %167, align 8
  %169 = insertvalue { ptr, ptr, ptr, i32 } %166, ptr %168, 2
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %148, i32 0, i32 3
  %171 = load i32, ptr %170, align 4
  %172 = insertvalue { ptr, ptr, ptr, i32 } %169, i32 %171, 3
  ret { ptr, ptr, ptr, i32 } %172
}

define { ptr, ptr, ptr, i32 } @Iterable2_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Iterable2)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 16, ptr %20)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %34 = load i32, ptr %32, align 4
  store i32 %34, ptr %33, align 4
  call void @set_offset(ptr %22, ptr @Iterable2)
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = load ptr, ptr %7, align 8
  %38 = call ptr @llvm.invariant.start.p0(i64 184, ptr %37)
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %40 = load i32, ptr %39, align 4
  %41 = getelementptr ptr, ptr %37, i32 %40
  %42 = load ptr, ptr %41, align 8
  %43 = call ptr @typegetter_wrapper(ptr %42, ptr %36)
  %44 = alloca [2 x ptr], align 8
  store ptr @InterleaveIterable2, ptr %44, align 8
  %45 = getelementptr ptr, ptr %44, i32 1
  store ptr %43, ptr %45, align 8
  %46 = load ptr, ptr %44, align 8
  %47 = getelementptr ptr, ptr %46, i32 6
  %48 = load ptr, ptr %47, align 8
  %49 = call { i64, i64 } @size_wrapper(ptr %48, ptr %44)
  %50 = extractvalue { i64, i64 } %49, 0
  %51 = call ptr @bump_malloc(i64 %50)
  store ptr %43, ptr %51, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 8, ptr %51)
  %53 = alloca { ptr, ptr, ptr, i32 }, align 8
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 1
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 3
  store ptr @InterleaveIterable2, ptr %53, align 8
  store ptr %51, ptr %54, align 8
  store i32 9, ptr %55, align 4
  %56 = call ptr @llvm.invariant.start.p0(i64 16, ptr %53)
  %57 = alloca { ptr, ptr, ptr, i32 }, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 0
  %60 = load ptr, ptr %58, align 8
  store ptr %60, ptr %59, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 1
  %63 = load ptr, ptr %61, align 8
  store ptr %63, ptr %62, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 2
  %66 = load ptr, ptr %64, align 8
  store ptr %66, ptr %65, align 8
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 3
  %69 = load i32, ptr %67, align 4
  store i32 %69, ptr %68, align 4
  call void @set_offset(ptr %57, ptr @Iterable2)
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 0
  %71 = load ptr, ptr %70, align 8
  %72 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %71, 0
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 1
  %74 = load ptr, ptr %73, align 8
  %75 = insertvalue { ptr, ptr, ptr, i32 } %72, ptr %74, 1
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 2
  %77 = load ptr, ptr %76, align 8
  %78 = insertvalue { ptr, ptr, ptr, i32 } %75, ptr %77, 2
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 3
  %80 = load i32, ptr %79, align 4
  %81 = insertvalue { ptr, ptr, ptr, i32 } %78, i32 %80, 3
  %82 = alloca { ptr, ptr, ptr, i32 }, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 0
  %85 = load ptr, ptr %83, align 8
  store ptr %85, ptr %84, align 8
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 1
  %88 = load ptr, ptr %86, align 8
  store ptr %88, ptr %87, align 8
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 2
  %91 = load ptr, ptr %89, align 8
  store ptr %91, ptr %90, align 8
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 3
  %94 = load i32, ptr %92, align 4
  store i32 %94, ptr %93, align 4
  call void @set_offset(ptr %82, ptr @Iterable2)
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 0
  %96 = load ptr, ptr %95, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %96, 0
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 1
  %99 = load ptr, ptr %98, align 8
  %100 = insertvalue { ptr, ptr, ptr, i32 } %97, ptr %99, 1
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 2
  %102 = load ptr, ptr %101, align 8
  %103 = insertvalue { ptr, ptr, ptr, i32 } %100, ptr %102, 2
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %82, i32 0, i32 3
  %105 = load i32, ptr %104, align 4
  %106 = insertvalue { ptr, ptr, ptr, i32 } %103, i32 %105, 3
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 0
  %108 = load ptr, ptr %107, align 8
  %109 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %108, 0
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 1
  %111 = load ptr, ptr %110, align 8
  %112 = insertvalue { ptr, ptr, ptr, i32 } %109, ptr %111, 1
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 2
  %114 = load ptr, ptr %113, align 8
  %115 = insertvalue { ptr, ptr, ptr, i32 } %112, ptr %114, 2
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 3
  %117 = load i32, ptr %116, align 4
  %118 = insertvalue { ptr, ptr, ptr, i32 } %115, i32 %117, 3
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %120 = load ptr, ptr %119, align 8
  %121 = load ptr, ptr %7, align 8
  %122 = call ptr @llvm.invariant.start.p0(i64 184, ptr %121)
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %124 = load i32, ptr %123, align 4
  %125 = getelementptr ptr, ptr %121, i32 %124
  %126 = load ptr, ptr %125, align 8
  %127 = call ptr @typegetter_wrapper(ptr %126, ptr %120)
  %128 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %129 = getelementptr [3 x ptr], ptr %128, i32 0, i32 1
  store ptr %127, ptr %129, align 8
  %130 = getelementptr [3 x ptr], ptr %128, i32 0, i32 2
  store ptr null, ptr %130, align 8
  %131 = call ptr @llvm.invariant.start.p0(i64 16, ptr %128)
  store ptr @Iterable2, ptr %128, align 8
  %132 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %133 = getelementptr [3 x ptr], ptr %132, i32 0, i32 1
  store ptr %127, ptr %133, align 8
  %134 = getelementptr [3 x ptr], ptr %132, i32 0, i32 2
  store ptr null, ptr %134, align 8
  %135 = call ptr @llvm.invariant.start.p0(i64 16, ptr %132)
  store ptr @Iterable2, ptr %132, align 8
  %136 = alloca [2 x ptr], align 8
  %137 = getelementptr [2 x ptr], ptr %136, i32 0, i32 0
  store ptr %128, ptr %137, align 8
  %138 = getelementptr [2 x ptr], ptr %136, i32 0, i32 1
  store ptr %132, ptr %138, align 8
  %139 = call ptr @llvm.invariant.start.p0(i64 4, ptr %136)
  %140 = call ptr @llvm.invariant.start.p0(i64 400, ptr %108)
  %141 = getelementptr ptr, ptr %108, i32 %117
  %142 = getelementptr ptr, ptr %141, i32 3
  %143 = load ptr, ptr %142, align 8
  %144 = alloca { ptr, ptr }, align 8
  %145 = getelementptr { ptr, ptr }, ptr %144, i32 0, i32 0
  store ptr %71, ptr %145, align 8
  %146 = getelementptr { ptr, ptr }, ptr %144, i32 0, i32 1
  store ptr %96, ptr %146, align 8
  %147 = call ptr @behavior_wrapper(ptr %143, { ptr, ptr, ptr, i32 } %118, ptr %144)
  call void %147({ ptr, ptr, ptr, i32 } %118, { ptr, ptr, ptr, i32 } %118, ptr %136, { ptr, ptr, ptr, i32 } %81, { ptr, ptr, ptr, i32 } %106)
  %148 = alloca { ptr, ptr, ptr, i32 }, align 8
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 0
  %150 = getelementptr { ptr, ptr, ptr, i32 }, ptr %148, i32 0, i32 0
  %151 = load ptr, ptr %149, align 8
  store ptr %151, ptr %150, align 8
  %152 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 1
  %153 = getelementptr { ptr, ptr, ptr, i32 }, ptr %148, i32 0, i32 1
  %154 = load ptr, ptr %152, align 8
  store ptr %154, ptr %153, align 8
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 2
  %156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %148, i32 0, i32 2
  %157 = load ptr, ptr %155, align 8
  store ptr %157, ptr %156, align 8
  %158 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 3
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %148, i32 0, i32 3
  %160 = load i32, ptr %158, align 4
  store i32 %160, ptr %159, align 4
  call void @set_offset(ptr %148, ptr @Iterable2)
  %161 = getelementptr { ptr, ptr, ptr, i32 }, ptr %148, i32 0, i32 0
  %162 = load ptr, ptr %161, align 8
  %163 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %162, 0
  %164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %148, i32 0, i32 1
  %165 = load ptr, ptr %164, align 8
  %166 = insertvalue { ptr, ptr, ptr, i32 } %163, ptr %165, 1
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %148, i32 0, i32 2
  %168 = load ptr, ptr %167, align 8
  %169 = insertvalue { ptr, ptr, ptr, i32 } %166, ptr %168, 2
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %148, i32 0, i32 3
  %171 = load i32, ptr %170, align 4
  %172 = insertvalue { ptr, ptr, ptr, i32 } %169, i32 %171, 3
  ret { ptr, ptr, ptr, i32 } %172
}

define { ptr, ptr, ptr, i32 } @Iterable2_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Iterable2)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 16, ptr %20)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %34 = load i32, ptr %32, align 4
  store i32 %34, ptr %33, align 4
  call void @set_offset(ptr %22, ptr @Iterable2)
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = load ptr, ptr %7, align 8
  %38 = call ptr @llvm.invariant.start.p0(i64 184, ptr %37)
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %40 = load i32, ptr %39, align 4
  %41 = getelementptr ptr, ptr %37, i32 %40
  %42 = load ptr, ptr %41, align 8
  %43 = call ptr @typegetter_wrapper(ptr %42, ptr %36)
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %44, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 16, ptr %44)
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 1
  %47 = load ptr, ptr %46, align 8
  %48 = load ptr, ptr %44, align 8
  %49 = call ptr @llvm.invariant.start.p0(i64 184, ptr %48)
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 3
  %51 = load i32, ptr %50, align 4
  %52 = getelementptr ptr, ptr %48, i32 %51
  %53 = load ptr, ptr %52, align 8
  %54 = call ptr @typegetter_wrapper(ptr %53, ptr %47)
  %55 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %56 = getelementptr [4 x ptr], ptr %55, i32 0, i32 2
  store ptr %54, ptr %56, align 8
  %57 = getelementptr [4 x ptr], ptr %55, i32 0, i32 1
  store ptr %43, ptr %57, align 8
  %58 = getelementptr [4 x ptr], ptr %55, i32 0, i32 3
  store ptr null, ptr %58, align 8
  %59 = call ptr @llvm.invariant.start.p0(i64 24, ptr %55)
  store ptr @Pair, ptr %55, align 8
  %60 = alloca [4 x ptr], align 8
  store ptr @ZipIterable2, ptr %60, align 8
  %61 = getelementptr ptr, ptr %60, i32 1
  store ptr %43, ptr %61, align 8
  %62 = getelementptr ptr, ptr %60, i32 2
  store ptr %54, ptr %62, align 8
  %63 = getelementptr ptr, ptr %60, i32 3
  store ptr %55, ptr %63, align 8
  %64 = load ptr, ptr %60, align 8
  %65 = getelementptr ptr, ptr %64, i32 6
  %66 = load ptr, ptr %65, align 8
  %67 = call { i64, i64 } @size_wrapper(ptr %66, ptr %60)
  %68 = extractvalue { i64, i64 } %67, 0
  %69 = call ptr @bump_malloc(i64 %68)
  store ptr %43, ptr %69, align 8
  %70 = getelementptr ptr, ptr %69, i32 1
  store ptr %54, ptr %70, align 8
  %71 = getelementptr ptr, ptr %69, i32 2
  store ptr %55, ptr %71, align 8
  %72 = call ptr @llvm.invariant.start.p0(i64 24, ptr %69)
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  store ptr @ZipIterable2, ptr %73, align 8
  store ptr %69, ptr %74, align 8
  store i32 9, ptr %75, align 4
  %76 = call ptr @llvm.invariant.start.p0(i64 16, ptr %73)
  %77 = alloca { ptr, ptr, ptr, i32 }, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 0
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 1
  %83 = load ptr, ptr %81, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 2
  %86 = load ptr, ptr %84, align 8
  store ptr %86, ptr %85, align 8
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 3
  %89 = load i32, ptr %87, align 4
  store i32 %89, ptr %88, align 4
  call void @set_offset(ptr %77, ptr @Iterable2)
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 0
  %91 = load ptr, ptr %90, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %91, 0
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 1
  %94 = load ptr, ptr %93, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %94, 1
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 2
  %97 = load ptr, ptr %96, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %97, 2
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 3
  %100 = load i32, ptr %99, align 4
  %101 = insertvalue { ptr, ptr, ptr, i32 } %98, i32 %100, 3
  %102 = alloca { ptr, ptr, ptr, i32 }, align 8
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 0
  %105 = load ptr, ptr %103, align 8
  store ptr %105, ptr %104, align 8
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 1
  %108 = load ptr, ptr %106, align 8
  store ptr %108, ptr %107, align 8
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 2
  %111 = load ptr, ptr %109, align 8
  store ptr %111, ptr %110, align 8
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 3
  %114 = load i32, ptr %112, align 4
  store i32 %114, ptr %113, align 4
  call void @set_offset(ptr %102, ptr @Iterable2)
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 0
  %116 = load ptr, ptr %115, align 8
  %117 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %116, 0
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 1
  %119 = load ptr, ptr %118, align 8
  %120 = insertvalue { ptr, ptr, ptr, i32 } %117, ptr %119, 1
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 2
  %122 = load ptr, ptr %121, align 8
  %123 = insertvalue { ptr, ptr, ptr, i32 } %120, ptr %122, 2
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 3
  %125 = load i32, ptr %124, align 4
  %126 = insertvalue { ptr, ptr, ptr, i32 } %123, i32 %125, 3
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %128 = load ptr, ptr %127, align 8
  %129 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %128, 0
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %131 = load ptr, ptr %130, align 8
  %132 = insertvalue { ptr, ptr, ptr, i32 } %129, ptr %131, 1
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %134 = load ptr, ptr %133, align 8
  %135 = insertvalue { ptr, ptr, ptr, i32 } %132, ptr %134, 2
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %137 = load i32, ptr %136, align 4
  %138 = insertvalue { ptr, ptr, ptr, i32 } %135, i32 %137, 3
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %140 = load ptr, ptr %139, align 8
  %141 = load ptr, ptr %7, align 8
  %142 = call ptr @llvm.invariant.start.p0(i64 184, ptr %141)
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %144 = load i32, ptr %143, align 4
  %145 = getelementptr ptr, ptr %141, i32 %144
  %146 = load ptr, ptr %145, align 8
  %147 = call ptr @typegetter_wrapper(ptr %146, ptr %140)
  %148 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %148, align 8
  %149 = call ptr @llvm.invariant.start.p0(i64 16, ptr %148)
  %150 = getelementptr { ptr, ptr, ptr, i32 }, ptr %148, i32 0, i32 1
  %151 = load ptr, ptr %150, align 8
  %152 = load ptr, ptr %148, align 8
  %153 = call ptr @llvm.invariant.start.p0(i64 184, ptr %152)
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %148, i32 0, i32 3
  %155 = load i32, ptr %154, align 4
  %156 = getelementptr ptr, ptr %152, i32 %155
  %157 = load ptr, ptr %156, align 8
  %158 = call ptr @typegetter_wrapper(ptr %157, ptr %151)
  %159 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %160 = getelementptr [3 x ptr], ptr %159, i32 0, i32 1
  store ptr %147, ptr %160, align 8
  %161 = getelementptr [3 x ptr], ptr %159, i32 0, i32 2
  store ptr null, ptr %161, align 8
  %162 = call ptr @llvm.invariant.start.p0(i64 16, ptr %159)
  store ptr @Iterable2, ptr %159, align 8
  %163 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %164 = getelementptr [3 x ptr], ptr %163, i32 0, i32 1
  store ptr %158, ptr %164, align 8
  %165 = getelementptr [3 x ptr], ptr %163, i32 0, i32 2
  store ptr null, ptr %165, align 8
  %166 = call ptr @llvm.invariant.start.p0(i64 16, ptr %163)
  store ptr @Iterable2, ptr %163, align 8
  %167 = alloca [2 x ptr], align 8
  %168 = getelementptr [2 x ptr], ptr %167, i32 0, i32 0
  store ptr %159, ptr %168, align 8
  %169 = getelementptr [2 x ptr], ptr %167, i32 0, i32 1
  store ptr %163, ptr %169, align 8
  %170 = call ptr @llvm.invariant.start.p0(i64 4, ptr %167)
  %171 = call ptr @llvm.invariant.start.p0(i64 416, ptr %128)
  %172 = getelementptr ptr, ptr %128, i32 %137
  %173 = getelementptr ptr, ptr %172, i32 5
  %174 = load ptr, ptr %173, align 8
  %175 = alloca { ptr, ptr }, align 8
  %176 = getelementptr { ptr, ptr }, ptr %175, i32 0, i32 0
  store ptr %91, ptr %176, align 8
  %177 = getelementptr { ptr, ptr }, ptr %175, i32 0, i32 1
  store ptr %116, ptr %177, align 8
  %178 = call ptr @behavior_wrapper(ptr %174, { ptr, ptr, ptr, i32 } %138, ptr %175)
  call void %178({ ptr, ptr, ptr, i32 } %138, { ptr, ptr, ptr, i32 } %138, ptr %167, { ptr, ptr, ptr, i32 } %101, { ptr, ptr, ptr, i32 } %126)
  %179 = alloca { ptr, ptr, ptr, i32 }, align 8
  %180 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %181 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 0
  %182 = load ptr, ptr %180, align 8
  store ptr %182, ptr %181, align 8
  %183 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %184 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 1
  %185 = load ptr, ptr %183, align 8
  store ptr %185, ptr %184, align 8
  %186 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 2
  %188 = load ptr, ptr %186, align 8
  store ptr %188, ptr %187, align 8
  %189 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %190 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 3
  %191 = load i32, ptr %189, align 4
  store i32 %191, ptr %190, align 4
  call void @set_offset(ptr %179, ptr @ZipIterable2)
  %192 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 0
  %193 = load ptr, ptr %192, align 8
  %194 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %193, 0
  %195 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 1
  %196 = load ptr, ptr %195, align 8
  %197 = insertvalue { ptr, ptr, ptr, i32 } %194, ptr %196, 1
  %198 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 2
  %199 = load ptr, ptr %198, align 8
  %200 = insertvalue { ptr, ptr, ptr, i32 } %197, ptr %199, 2
  %201 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 3
  %202 = load i32, ptr %201, align 4
  %203 = insertvalue { ptr, ptr, ptr, i32 } %200, i32 %202, 3
  ret { ptr, ptr, ptr, i32 } %203
}

define { ptr, ptr, ptr, i32 } @Iterable2_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Iterable2)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 16, ptr %20)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %34 = load i32, ptr %32, align 4
  store i32 %34, ptr %33, align 4
  call void @set_offset(ptr %22, ptr @Iterable2)
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = load ptr, ptr %7, align 8
  %38 = call ptr @llvm.invariant.start.p0(i64 184, ptr %37)
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %40 = load i32, ptr %39, align 4
  %41 = getelementptr ptr, ptr %37, i32 %40
  %42 = load ptr, ptr %41, align 8
  %43 = call ptr @typegetter_wrapper(ptr %42, ptr %36)
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %44, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 16, ptr %44)
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 1
  %47 = load ptr, ptr %46, align 8
  %48 = load ptr, ptr %44, align 8
  %49 = call ptr @llvm.invariant.start.p0(i64 184, ptr %48)
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 3
  %51 = load i32, ptr %50, align 4
  %52 = getelementptr ptr, ptr %48, i32 %51
  %53 = load ptr, ptr %52, align 8
  %54 = call ptr @typegetter_wrapper(ptr %53, ptr %47)
  %55 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %56 = getelementptr [4 x ptr], ptr %55, i32 0, i32 2
  store ptr %54, ptr %56, align 8
  %57 = getelementptr [4 x ptr], ptr %55, i32 0, i32 1
  store ptr %43, ptr %57, align 8
  %58 = getelementptr [4 x ptr], ptr %55, i32 0, i32 3
  store ptr null, ptr %58, align 8
  %59 = call ptr @llvm.invariant.start.p0(i64 24, ptr %55)
  store ptr @Pair, ptr %55, align 8
  %60 = alloca [4 x ptr], align 8
  store ptr @ProductIterable2, ptr %60, align 8
  %61 = getelementptr ptr, ptr %60, i32 1
  store ptr %43, ptr %61, align 8
  %62 = getelementptr ptr, ptr %60, i32 2
  store ptr %54, ptr %62, align 8
  %63 = getelementptr ptr, ptr %60, i32 3
  store ptr %55, ptr %63, align 8
  %64 = load ptr, ptr %60, align 8
  %65 = getelementptr ptr, ptr %64, i32 6
  %66 = load ptr, ptr %65, align 8
  %67 = call { i64, i64 } @size_wrapper(ptr %66, ptr %60)
  %68 = extractvalue { i64, i64 } %67, 0
  %69 = call ptr @bump_malloc(i64 %68)
  store ptr %43, ptr %69, align 8
  %70 = getelementptr ptr, ptr %69, i32 1
  store ptr %54, ptr %70, align 8
  %71 = getelementptr ptr, ptr %69, i32 2
  store ptr %55, ptr %71, align 8
  %72 = call ptr @llvm.invariant.start.p0(i64 24, ptr %69)
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  store ptr @ProductIterable2, ptr %73, align 8
  store ptr %69, ptr %74, align 8
  store i32 9, ptr %75, align 4
  %76 = call ptr @llvm.invariant.start.p0(i64 16, ptr %73)
  %77 = alloca { ptr, ptr, ptr, i32 }, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 0
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 1
  %83 = load ptr, ptr %81, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 2
  %86 = load ptr, ptr %84, align 8
  store ptr %86, ptr %85, align 8
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 3
  %89 = load i32, ptr %87, align 4
  store i32 %89, ptr %88, align 4
  call void @set_offset(ptr %77, ptr @Iterable2)
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 0
  %91 = load ptr, ptr %90, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %91, 0
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 1
  %94 = load ptr, ptr %93, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %94, 1
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 2
  %97 = load ptr, ptr %96, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %97, 2
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 3
  %100 = load i32, ptr %99, align 4
  %101 = insertvalue { ptr, ptr, ptr, i32 } %98, i32 %100, 3
  %102 = alloca { ptr, ptr, ptr, i32 }, align 8
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 0
  %105 = load ptr, ptr %103, align 8
  store ptr %105, ptr %104, align 8
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 1
  %108 = load ptr, ptr %106, align 8
  store ptr %108, ptr %107, align 8
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 2
  %111 = load ptr, ptr %109, align 8
  store ptr %111, ptr %110, align 8
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 3
  %114 = load i32, ptr %112, align 4
  store i32 %114, ptr %113, align 4
  call void @set_offset(ptr %102, ptr @Iterable2)
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 0
  %116 = load ptr, ptr %115, align 8
  %117 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %116, 0
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 1
  %119 = load ptr, ptr %118, align 8
  %120 = insertvalue { ptr, ptr, ptr, i32 } %117, ptr %119, 1
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 2
  %122 = load ptr, ptr %121, align 8
  %123 = insertvalue { ptr, ptr, ptr, i32 } %120, ptr %122, 2
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %102, i32 0, i32 3
  %125 = load i32, ptr %124, align 4
  %126 = insertvalue { ptr, ptr, ptr, i32 } %123, i32 %125, 3
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %128 = load ptr, ptr %127, align 8
  %129 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %128, 0
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %131 = load ptr, ptr %130, align 8
  %132 = insertvalue { ptr, ptr, ptr, i32 } %129, ptr %131, 1
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %134 = load ptr, ptr %133, align 8
  %135 = insertvalue { ptr, ptr, ptr, i32 } %132, ptr %134, 2
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %137 = load i32, ptr %136, align 4
  %138 = insertvalue { ptr, ptr, ptr, i32 } %135, i32 %137, 3
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %140 = load ptr, ptr %139, align 8
  %141 = load ptr, ptr %7, align 8
  %142 = call ptr @llvm.invariant.start.p0(i64 184, ptr %141)
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %144 = load i32, ptr %143, align 4
  %145 = getelementptr ptr, ptr %141, i32 %144
  %146 = load ptr, ptr %145, align 8
  %147 = call ptr @typegetter_wrapper(ptr %146, ptr %140)
  %148 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %148, align 8
  %149 = call ptr @llvm.invariant.start.p0(i64 16, ptr %148)
  %150 = getelementptr { ptr, ptr, ptr, i32 }, ptr %148, i32 0, i32 1
  %151 = load ptr, ptr %150, align 8
  %152 = load ptr, ptr %148, align 8
  %153 = call ptr @llvm.invariant.start.p0(i64 184, ptr %152)
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %148, i32 0, i32 3
  %155 = load i32, ptr %154, align 4
  %156 = getelementptr ptr, ptr %152, i32 %155
  %157 = load ptr, ptr %156, align 8
  %158 = call ptr @typegetter_wrapper(ptr %157, ptr %151)
  %159 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %160 = getelementptr [3 x ptr], ptr %159, i32 0, i32 1
  store ptr %147, ptr %160, align 8
  %161 = getelementptr [3 x ptr], ptr %159, i32 0, i32 2
  store ptr null, ptr %161, align 8
  %162 = call ptr @llvm.invariant.start.p0(i64 16, ptr %159)
  store ptr @Iterable2, ptr %159, align 8
  %163 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %164 = getelementptr [3 x ptr], ptr %163, i32 0, i32 1
  store ptr %158, ptr %164, align 8
  %165 = getelementptr [3 x ptr], ptr %163, i32 0, i32 2
  store ptr null, ptr %165, align 8
  %166 = call ptr @llvm.invariant.start.p0(i64 16, ptr %163)
  store ptr @Iterable2, ptr %163, align 8
  %167 = alloca [2 x ptr], align 8
  %168 = getelementptr [2 x ptr], ptr %167, i32 0, i32 0
  store ptr %159, ptr %168, align 8
  %169 = getelementptr [2 x ptr], ptr %167, i32 0, i32 1
  store ptr %163, ptr %169, align 8
  %170 = call ptr @llvm.invariant.start.p0(i64 4, ptr %167)
  %171 = call ptr @llvm.invariant.start.p0(i64 416, ptr %128)
  %172 = getelementptr ptr, ptr %128, i32 %137
  %173 = getelementptr ptr, ptr %172, i32 5
  %174 = load ptr, ptr %173, align 8
  %175 = alloca { ptr, ptr }, align 8
  %176 = getelementptr { ptr, ptr }, ptr %175, i32 0, i32 0
  store ptr %91, ptr %176, align 8
  %177 = getelementptr { ptr, ptr }, ptr %175, i32 0, i32 1
  store ptr %116, ptr %177, align 8
  %178 = call ptr @behavior_wrapper(ptr %174, { ptr, ptr, ptr, i32 } %138, ptr %175)
  call void %178({ ptr, ptr, ptr, i32 } %138, { ptr, ptr, ptr, i32 } %138, ptr %167, { ptr, ptr, ptr, i32 } %101, { ptr, ptr, ptr, i32 } %126)
  %179 = alloca { ptr, ptr, ptr, i32 }, align 8
  %180 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %181 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 0
  %182 = load ptr, ptr %180, align 8
  store ptr %182, ptr %181, align 8
  %183 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %184 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 1
  %185 = load ptr, ptr %183, align 8
  store ptr %185, ptr %184, align 8
  %186 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 2
  %188 = load ptr, ptr %186, align 8
  store ptr %188, ptr %187, align 8
  %189 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %190 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 3
  %191 = load i32, ptr %189, align 4
  store i32 %191, ptr %190, align 4
  call void @set_offset(ptr %179, ptr @ProductIterable2)
  %192 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 0
  %193 = load ptr, ptr %192, align 8
  %194 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %193, 0
  %195 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 1
  %196 = load ptr, ptr %195, align 8
  %197 = insertvalue { ptr, ptr, ptr, i32 } %194, ptr %196, 1
  %198 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 2
  %199 = load ptr, ptr %198, align 8
  %200 = insertvalue { ptr, ptr, ptr, i32 } %197, ptr %199, 2
  %201 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 3
  %202 = load i32, ptr %201, align 4
  %203 = insertvalue { ptr, ptr, ptr, i32 } %200, i32 %202, 3
  ret { ptr, ptr, ptr, i32 } %203
}

define { i64, i64 } @_size_ProductIterable2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %29 = select i1 %28, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %21
  %30 = urem i64 %27, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %31 = icmp eq i64 %30, 0
  %32 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %30
  %33 = select i1 %31, i64 0, i64 %32
  %34 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %33
  %35 = add i64 %27, %34
  %36 = urem i64 %35, %29
  %37 = icmp eq i64 %36, 0
  %38 = sub i64 %29, %36
  %39 = select i1 %37, i64 0, i64 %38
  %40 = add i64 %35, %39
  %41 = insertvalue { i64, i64 } undef, i64 %40, 0
  %42 = insertvalue { i64, i64 } %41, i64 %29, 1
  ret { i64, i64 } %42
}

define ptr @ProductIterable2_field_ProductIterable2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @ProductIterable2_field_ProductIterable2_1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 1
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @ProductIterable2_field_ProductIterable2_2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 2
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @ProductIterable2_B_init_firstIterable2T_secondIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [52 x ptr], ptr %26, i32 0, i32 17
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @ProductIterable2_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [52 x ptr], ptr %4, i32 0, i32 18
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @ProductIterable2_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 19
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ProductIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 9197944775169318296, i64 ptrtoint (ptr @Pair to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [52 x ptr], ptr %26, i32 0, i32 20
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @ProductIterable2_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 21
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ProductIterable2_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 22
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ProductIterable2_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 23
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ProductIterable2_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 24
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ProductIterable2_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 25
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ProductIterable2_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 26
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ProductIterable2_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 27
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ProductIterable2_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 28
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define void @ProductIterable2_init_firstIterable2T_secondIterable2U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @ProductIterable2)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @Iterable2)
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %45 = load ptr, ptr %43, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %48 = load i32, ptr %46, align 4
  store i32 %48, ptr %47, align 4
  call void @set_offset(ptr %36, ptr @Iterable2)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %8, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 416, ptr %51)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = getelementptr ptr, ptr %51, i32 %54
  %56 = getelementptr ptr, ptr %55, i32 3
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr { ptr, ptr }, ptr %57, i32 0, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %61 = load ptr, ptr %60, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %61, 0
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %64 = load ptr, ptr %63, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %62, ptr %64, 1
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %67 = load ptr, ptr %66, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %67, 2
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %70 = load i32, ptr %69, align 4
  %71 = insertvalue { ptr, ptr, ptr, i32 } %68, i32 %70, 3
  call void %59(ptr %50, { ptr, ptr, ptr, i32 } %71) #15
  %72 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %72, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 16, ptr %72)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 0
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 1
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 2
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %83 = load ptr, ptr %81, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 3
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %86 = load i32, ptr %84, align 4
  store i32 %86, ptr %85, align 4
  call void @set_offset(ptr %74, ptr @Iterable2)
  %87 = alloca { ptr, ptr, ptr, i32 }, align 8
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 0
  %90 = load ptr, ptr %88, align 8
  store ptr %90, ptr %89, align 8
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 1
  %93 = load ptr, ptr %91, align 8
  store ptr %93, ptr %92, align 8
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 2
  %96 = load ptr, ptr %94, align 8
  store ptr %96, ptr %95, align 8
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 3
  %99 = load i32, ptr %97, align 4
  store i32 %99, ptr %98, align 4
  call void @set_offset(ptr %87, ptr @Iterable2)
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %101 = load ptr, ptr %100, align 8
  %102 = load ptr, ptr %8, align 8
  %103 = call ptr @llvm.invariant.start.p0(i64 416, ptr %102)
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %105 = load i32, ptr %104, align 4
  %106 = getelementptr ptr, ptr %102, i32 %105
  %107 = getelementptr ptr, ptr %106, i32 4
  %108 = load ptr, ptr %107, align 8
  %109 = getelementptr { ptr, ptr }, ptr %108, i32 0, i32 1
  %110 = load ptr, ptr %109, align 8
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 0
  %112 = load ptr, ptr %111, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %112, 0
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 1
  %115 = load ptr, ptr %114, align 8
  %116 = insertvalue { ptr, ptr, ptr, i32 } %113, ptr %115, 1
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 2
  %118 = load ptr, ptr %117, align 8
  %119 = insertvalue { ptr, ptr, ptr, i32 } %116, ptr %118, 2
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 3
  %121 = load i32, ptr %120, align 4
  %122 = insertvalue { ptr, ptr, ptr, i32 } %119, i32 %121, 3
  call void %110(ptr %101, { ptr, ptr, ptr, i32 } %122) #15
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterable2_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @ProductIterable2)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 416, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 3
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call { ptr, ptr, ptr, i32 } %29(ptr %20) #16
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %30, ptr %31, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 16, ptr %31)
  call void @assume_offset(ptr %31, ptr @Iterable2)
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %34 = load ptr, ptr %33, align 8
  %35 = load ptr, ptr %6, align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 416, ptr %35)
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %38 = load i32, ptr %37, align 4
  %39 = getelementptr ptr, ptr %35, i32 %38
  %40 = getelementptr ptr, ptr %39, i32 4
  %41 = load ptr, ptr %40, align 8
  %42 = getelementptr { ptr, ptr }, ptr %41, i32 0, i32 0
  %43 = load ptr, ptr %42, align 8
  %44 = call { ptr, ptr, ptr, i32 } %43(ptr %34) #16
  %45 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %44, ptr %45, align 8
  %46 = call ptr @llvm.invariant.start.p0(i64 16, ptr %45)
  call void @assume_offset(ptr %45, ptr @Iterable2)
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %48 = load ptr, ptr %47, align 8
  %49 = load ptr, ptr %6, align 8
  %50 = call ptr @llvm.invariant.start.p0(i64 416, ptr %49)
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %52 = load i32, ptr %51, align 4
  %53 = getelementptr ptr, ptr %49, i32 %52
  %54 = load ptr, ptr %53, align 8
  %55 = call ptr @typegetter_wrapper(ptr %54, ptr %48)
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = load ptr, ptr %6, align 8
  %59 = call ptr @llvm.invariant.start.p0(i64 416, ptr %58)
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %61 = load i32, ptr %60, align 4
  %62 = getelementptr ptr, ptr %58, i32 %61
  %63 = getelementptr ptr, ptr %62, i32 1
  %64 = load ptr, ptr %63, align 8
  %65 = call ptr @typegetter_wrapper(ptr %64, ptr %57)
  %66 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %67 = getelementptr [4 x ptr], ptr %66, i32 0, i32 2
  store ptr %65, ptr %67, align 8
  %68 = getelementptr [4 x ptr], ptr %66, i32 0, i32 1
  store ptr %55, ptr %68, align 8
  %69 = getelementptr [4 x ptr], ptr %66, i32 0, i32 3
  store ptr null, ptr %69, align 8
  %70 = call ptr @llvm.invariant.start.p0(i64 24, ptr %66)
  store ptr @Pair, ptr %66, align 8
  %71 = alloca [4 x ptr], align 8
  store ptr @ProductIterator2, ptr %71, align 8
  %72 = getelementptr ptr, ptr %71, i32 1
  store ptr %55, ptr %72, align 8
  %73 = getelementptr ptr, ptr %71, i32 2
  store ptr %65, ptr %73, align 8
  %74 = getelementptr ptr, ptr %71, i32 3
  store ptr %66, ptr %74, align 8
  %75 = load ptr, ptr %71, align 8
  %76 = getelementptr ptr, ptr %75, i32 6
  %77 = load ptr, ptr %76, align 8
  %78 = call { i64, i64 } @size_wrapper(ptr %77, ptr %71)
  %79 = extractvalue { i64, i64 } %78, 0
  %80 = call ptr @bump_malloc(i64 %79)
  store ptr %55, ptr %80, align 8
  %81 = getelementptr ptr, ptr %80, i32 1
  store ptr %65, ptr %81, align 8
  %82 = getelementptr ptr, ptr %80, i32 2
  store ptr %66, ptr %82, align 8
  %83 = call ptr @llvm.invariant.start.p0(i64 24, ptr %80)
  %84 = alloca { ptr, ptr, ptr, i32 }, align 8
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %84, i32 0, i32 1
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %84, i32 0, i32 3
  store ptr @ProductIterator2, ptr %84, align 8
  store ptr %80, ptr %85, align 8
  store i32 9, ptr %86, align 4
  %87 = call ptr @llvm.invariant.start.p0(i64 16, ptr %84)
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %89 = load ptr, ptr %88, align 8
  %90 = load ptr, ptr %6, align 8
  %91 = call ptr @llvm.invariant.start.p0(i64 416, ptr %90)
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %93 = load i32, ptr %92, align 4
  %94 = getelementptr ptr, ptr %90, i32 %93
  %95 = getelementptr ptr, ptr %94, i32 3
  %96 = load ptr, ptr %95, align 8
  %97 = getelementptr { ptr, ptr }, ptr %96, i32 0, i32 0
  %98 = load ptr, ptr %97, align 8
  %99 = call { ptr, ptr, ptr, i32 } %98(ptr %89) #16
  %100 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %99, ptr %100, align 8
  %101 = call ptr @llvm.invariant.start.p0(i64 16, ptr %100)
  call void @assume_offset(ptr %100, ptr @Iterable2)
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %103 = load ptr, ptr %102, align 8
  %104 = load ptr, ptr %6, align 8
  %105 = call ptr @llvm.invariant.start.p0(i64 416, ptr %104)
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %107 = load i32, ptr %106, align 4
  %108 = getelementptr ptr, ptr %104, i32 %107
  %109 = getelementptr ptr, ptr %108, i32 4
  %110 = load ptr, ptr %109, align 8
  %111 = getelementptr { ptr, ptr }, ptr %110, i32 0, i32 0
  %112 = load ptr, ptr %111, align 8
  %113 = call { ptr, ptr, ptr, i32 } %112(ptr %103) #16
  %114 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %113, ptr %114, align 8
  %115 = call ptr @llvm.invariant.start.p0(i64 16, ptr %114)
  call void @assume_offset(ptr %114, ptr @Iterable2)
  %116 = alloca { ptr, ptr, ptr, i32 }, align 8
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %100, i32 0, i32 0
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 0
  %119 = load ptr, ptr %117, align 8
  store ptr %119, ptr %118, align 8
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %100, i32 0, i32 1
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 1
  %122 = load ptr, ptr %120, align 8
  store ptr %122, ptr %121, align 8
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %100, i32 0, i32 2
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 2
  %125 = load ptr, ptr %123, align 8
  store ptr %125, ptr %124, align 8
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %100, i32 0, i32 3
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 3
  %128 = load i32, ptr %126, align 4
  store i32 %128, ptr %127, align 4
  call void @set_offset(ptr %116, ptr @Iterable2)
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 0
  %130 = load ptr, ptr %129, align 8
  %131 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %130, 0
  %132 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 1
  %133 = load ptr, ptr %132, align 8
  %134 = insertvalue { ptr, ptr, ptr, i32 } %131, ptr %133, 1
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 2
  %136 = load ptr, ptr %135, align 8
  %137 = insertvalue { ptr, ptr, ptr, i32 } %134, ptr %136, 2
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 3
  %139 = load i32, ptr %138, align 4
  %140 = insertvalue { ptr, ptr, ptr, i32 } %137, i32 %139, 3
  %141 = alloca { ptr, ptr, ptr, i32 }, align 8
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 0
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 0
  %144 = load ptr, ptr %142, align 8
  store ptr %144, ptr %143, align 8
  %145 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 1
  %146 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 1
  %147 = load ptr, ptr %145, align 8
  store ptr %147, ptr %146, align 8
  %148 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 2
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 2
  %150 = load ptr, ptr %148, align 8
  store ptr %150, ptr %149, align 8
  %151 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 3
  %152 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 3
  %153 = load i32, ptr %151, align 4
  store i32 %153, ptr %152, align 4
  call void @set_offset(ptr %141, ptr @Iterable2)
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 0
  %155 = load ptr, ptr %154, align 8
  %156 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %155, 0
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 1
  %158 = load ptr, ptr %157, align 8
  %159 = insertvalue { ptr, ptr, ptr, i32 } %156, ptr %158, 1
  %160 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 2
  %161 = load ptr, ptr %160, align 8
  %162 = insertvalue { ptr, ptr, ptr, i32 } %159, ptr %161, 2
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 3
  %164 = load i32, ptr %163, align 4
  %165 = insertvalue { ptr, ptr, ptr, i32 } %162, i32 %164, 3
  %166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %84, i32 0, i32 0
  %167 = load ptr, ptr %166, align 8
  %168 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %167, 0
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %84, i32 0, i32 1
  %170 = load ptr, ptr %169, align 8
  %171 = insertvalue { ptr, ptr, ptr, i32 } %168, ptr %170, 1
  %172 = getelementptr { ptr, ptr, ptr, i32 }, ptr %84, i32 0, i32 2
  %173 = load ptr, ptr %172, align 8
  %174 = insertvalue { ptr, ptr, ptr, i32 } %171, ptr %173, 2
  %175 = getelementptr { ptr, ptr, ptr, i32 }, ptr %84, i32 0, i32 3
  %176 = load i32, ptr %175, align 4
  %177 = insertvalue { ptr, ptr, ptr, i32 } %174, i32 %176, 3
  %178 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %179 = load ptr, ptr %178, align 8
  %180 = load ptr, ptr %6, align 8
  %181 = call ptr @llvm.invariant.start.p0(i64 416, ptr %180)
  %182 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %183 = load i32, ptr %182, align 4
  %184 = getelementptr ptr, ptr %180, i32 %183
  %185 = load ptr, ptr %184, align 8
  %186 = call ptr @typegetter_wrapper(ptr %185, ptr %179)
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %188 = load ptr, ptr %187, align 8
  %189 = load ptr, ptr %6, align 8
  %190 = call ptr @llvm.invariant.start.p0(i64 416, ptr %189)
  %191 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %192 = load i32, ptr %191, align 4
  %193 = getelementptr ptr, ptr %189, i32 %192
  %194 = getelementptr ptr, ptr %193, i32 1
  %195 = load ptr, ptr %194, align 8
  %196 = call ptr @typegetter_wrapper(ptr %195, ptr %188)
  %197 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %198 = getelementptr [3 x ptr], ptr %197, i32 0, i32 1
  store ptr %186, ptr %198, align 8
  %199 = getelementptr [3 x ptr], ptr %197, i32 0, i32 2
  store ptr null, ptr %199, align 8
  %200 = call ptr @llvm.invariant.start.p0(i64 16, ptr %197)
  store ptr @Iterable2, ptr %197, align 8
  %201 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %202 = getelementptr [3 x ptr], ptr %201, i32 0, i32 1
  store ptr %196, ptr %202, align 8
  %203 = getelementptr [3 x ptr], ptr %201, i32 0, i32 2
  store ptr null, ptr %203, align 8
  %204 = call ptr @llvm.invariant.start.p0(i64 16, ptr %201)
  store ptr @Iterable2, ptr %201, align 8
  %205 = alloca [2 x ptr], align 8
  %206 = getelementptr [2 x ptr], ptr %205, i32 0, i32 0
  store ptr %197, ptr %206, align 8
  %207 = getelementptr [2 x ptr], ptr %205, i32 0, i32 1
  store ptr %201, ptr %207, align 8
  %208 = call ptr @llvm.invariant.start.p0(i64 4, ptr %205)
  %209 = call ptr @llvm.invariant.start.p0(i64 112, ptr %167)
  %210 = getelementptr ptr, ptr %167, i32 %176
  %211 = getelementptr ptr, ptr %210, i32 7
  %212 = load ptr, ptr %211, align 8
  %213 = alloca { ptr, ptr }, align 8
  %214 = getelementptr { ptr, ptr }, ptr %213, i32 0, i32 0
  store ptr %130, ptr %214, align 8
  %215 = getelementptr { ptr, ptr }, ptr %213, i32 0, i32 1
  store ptr %155, ptr %215, align 8
  %216 = call ptr @behavior_wrapper(ptr %212, { ptr, ptr, ptr, i32 } %177, ptr %213)
  call void %216({ ptr, ptr, ptr, i32 } %177, { ptr, ptr, ptr, i32 } %177, ptr %205, { ptr, ptr, ptr, i32 } %140, { ptr, ptr, ptr, i32 } %165)
  %217 = alloca { ptr, ptr, ptr, i32 }, align 8
  %218 = getelementptr { ptr, ptr, ptr, i32 }, ptr %84, i32 0, i32 0
  %219 = getelementptr { ptr, ptr, ptr, i32 }, ptr %217, i32 0, i32 0
  %220 = load ptr, ptr %218, align 8
  store ptr %220, ptr %219, align 8
  %221 = getelementptr { ptr, ptr, ptr, i32 }, ptr %84, i32 0, i32 1
  %222 = getelementptr { ptr, ptr, ptr, i32 }, ptr %217, i32 0, i32 1
  %223 = load ptr, ptr %221, align 8
  store ptr %223, ptr %222, align 8
  %224 = getelementptr { ptr, ptr, ptr, i32 }, ptr %84, i32 0, i32 2
  %225 = getelementptr { ptr, ptr, ptr, i32 }, ptr %217, i32 0, i32 2
  %226 = load ptr, ptr %224, align 8
  store ptr %226, ptr %225, align 8
  %227 = getelementptr { ptr, ptr, ptr, i32 }, ptr %84, i32 0, i32 3
  %228 = getelementptr { ptr, ptr, ptr, i32 }, ptr %217, i32 0, i32 3
  %229 = load i32, ptr %227, align 4
  store i32 %229, ptr %228, align 4
  call void @set_offset(ptr %217, ptr @Iterator2)
  %230 = getelementptr { ptr, ptr, ptr, i32 }, ptr %217, i32 0, i32 0
  %231 = load ptr, ptr %230, align 8
  %232 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %231, 0
  %233 = getelementptr { ptr, ptr, ptr, i32 }, ptr %217, i32 0, i32 1
  %234 = load ptr, ptr %233, align 8
  %235 = insertvalue { ptr, ptr, ptr, i32 } %232, ptr %234, 1
  %236 = getelementptr { ptr, ptr, ptr, i32 }, ptr %217, i32 0, i32 2
  %237 = load ptr, ptr %236, align 8
  %238 = insertvalue { ptr, ptr, ptr, i32 } %235, ptr %237, 2
  %239 = getelementptr { ptr, ptr, ptr, i32 }, ptr %217, i32 0, i32 3
  %240 = load i32, ptr %239, align 4
  %241 = insertvalue { ptr, ptr, ptr, i32 } %238, i32 %240, 3
  ret { ptr, ptr, ptr, i32 } %241
}

define { i64, i64 } @_size_ProductIterator2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %29 = select i1 %28, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %21
  %30 = urem i64 %27, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %31 = icmp eq i64 %30, 0
  %32 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %30
  %33 = select i1 %31, i64 0, i64 %32
  %34 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %33
  %35 = add i64 %27, %34
  %36 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %29
  %37 = select i1 %36, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %29
  %38 = urem i64 %35, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %39 = icmp eq i64 %38, 0
  %40 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %38
  %41 = select i1 %39, i64 0, i64 %40
  %42 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %41
  %43 = add i64 %35, %42
  %44 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), %37
  %45 = select i1 %44, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), i64 %37
  %46 = urem i64 %43, ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64)
  %47 = icmp eq i64 %46, 0
  %48 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), %46
  %49 = select i1 %47, i64 0, i64 %48
  %50 = add i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), %49
  %51 = add i64 %43, %50
  %52 = urem i64 %51, %45
  %53 = icmp eq i64 %52, 0
  %54 = sub i64 %45, %52
  %55 = select i1 %53, i64 0, i64 %54
  %56 = add i64 %51, %55
  %57 = insertvalue { i64, i64 } undef, i64 %56, 0
  %58 = insertvalue { i64, i64 } %57, i64 %45, 1
  ret { i64, i64 } %58
}

define ptr @ProductIterator2_field_ProductIterator2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @ProductIterator2_field_ProductIterator2_1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 1
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @ProductIterator2_field_ProductIterator2_2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 2
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @ProductIterator2_B_init_first_iterableIterable2T_second_iterableIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [14 x ptr], ptr %26, i32 0, i32 9
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @ProductIterator2_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [14 x ptr], ptr %4, i32 0, i32 10
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @ProductIterator2_init_first_iterableIterable2T_second_iterableIterable2U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @ProductIterator2)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @Iterable2)
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %36, align 8
  %37 = call ptr @llvm.invariant.start.p0(i64 16, ptr %36)
  %38 = alloca { ptr, ptr, ptr, i32 }, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 0
  %41 = load ptr, ptr %39, align 8
  store ptr %41, ptr %40, align 8
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %44 = load ptr, ptr %42, align 8
  store ptr %44, ptr %43, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 2
  %47 = load ptr, ptr %45, align 8
  store ptr %47, ptr %46, align 8
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %50 = load i32, ptr %48, align 4
  store i32 %50, ptr %49, align 4
  call void @set_offset(ptr %38, ptr @Iterable2)
  %51 = alloca { ptr, ptr, ptr, i32 }, align 8
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 0
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 0
  %54 = load ptr, ptr %52, align 8
  store ptr %54, ptr %53, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 1
  %57 = load ptr, ptr %55, align 8
  store ptr %57, ptr %56, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 2
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 2
  %60 = load ptr, ptr %58, align 8
  store ptr %60, ptr %59, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 3
  %63 = load i32, ptr %61, align 4
  store i32 %63, ptr %62, align 4
  call void @set_offset(ptr %51, ptr @Iterable2)
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %65 = load ptr, ptr %64, align 8
  %66 = load ptr, ptr %8, align 8
  %67 = call ptr @llvm.invariant.start.p0(i64 112, ptr %66)
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %69 = load i32, ptr %68, align 4
  %70 = getelementptr ptr, ptr %66, i32 %69
  %71 = getelementptr ptr, ptr %70, i32 5
  %72 = load ptr, ptr %71, align 8
  %73 = getelementptr { ptr, ptr }, ptr %72, i32 0, i32 1
  %74 = load ptr, ptr %73, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 0
  %76 = load ptr, ptr %75, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %76, 0
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 1
  %79 = load ptr, ptr %78, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } %77, ptr %79, 1
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 2
  %82 = load ptr, ptr %81, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } %80, ptr %82, 2
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 3
  %85 = load i32, ptr %84, align 4
  %86 = insertvalue { ptr, ptr, ptr, i32 } %83, i32 %85, 3
  call void %74(ptr %65, { ptr, ptr, ptr, i32 } %86) #15
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %88 = load ptr, ptr %87, align 8
  %89 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %88, 0
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } %89, ptr %91, 1
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %94 = load ptr, ptr %93, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %94, 2
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %97 = load i32, ptr %96, align 4
  %98 = insertvalue { ptr, ptr, ptr, i32 } %95, i32 %97, 3
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %100 = load ptr, ptr %99, align 8
  %101 = load ptr, ptr %8, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 112, ptr %101)
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %104 = load i32, ptr %103, align 4
  %105 = getelementptr ptr, ptr %101, i32 %104
  %106 = load ptr, ptr %105, align 8
  %107 = call ptr @typegetter_wrapper(ptr %106, ptr %100)
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %109 = load ptr, ptr %108, align 8
  %110 = load ptr, ptr %8, align 8
  %111 = call ptr @llvm.invariant.start.p0(i64 112, ptr %110)
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %113 = load i32, ptr %112, align 4
  %114 = getelementptr ptr, ptr %110, i32 %113
  %115 = getelementptr ptr, ptr %114, i32 1
  %116 = load ptr, ptr %115, align 8
  %117 = call ptr @typegetter_wrapper(ptr %116, ptr %109)
  %118 = alloca [0 x ptr], align 8
  %119 = call ptr @llvm.invariant.start.p0(i64 0, ptr %118)
  %120 = call ptr @llvm.invariant.start.p0(i64 184, ptr %88)
  %121 = getelementptr ptr, ptr %88, i32 %97
  %122 = getelementptr ptr, ptr %121, i32 1
  %123 = load ptr, ptr %122, align 8
  %124 = alloca {}, align 8
  %125 = call ptr @behavior_wrapper(ptr %123, { ptr, ptr, ptr, i32 } %98, ptr %124)
  %126 = call { ptr, ptr, ptr, i32 } %125({ ptr, ptr, ptr, i32 } %98, { ptr, ptr, ptr, i32 } %98, ptr %118)
  %127 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %126, ptr %127, align 8
  %128 = call ptr @llvm.invariant.start.p0(i64 16, ptr %127)
  %129 = alloca { ptr, ptr, ptr, i32 }, align 8
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %127, i32 0, i32 0
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %129, i32 0, i32 0
  %132 = load ptr, ptr %130, align 8
  store ptr %132, ptr %131, align 8
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %127, i32 0, i32 1
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %129, i32 0, i32 1
  %135 = load ptr, ptr %133, align 8
  store ptr %135, ptr %134, align 8
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %127, i32 0, i32 2
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %129, i32 0, i32 2
  %138 = load ptr, ptr %136, align 8
  store ptr %138, ptr %137, align 8
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %127, i32 0, i32 3
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %129, i32 0, i32 3
  %141 = load i32, ptr %139, align 4
  store i32 %141, ptr %140, align 4
  call void @set_offset(ptr %129, ptr @Iterator2)
  %142 = alloca { ptr, ptr, ptr, i32 }, align 8
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %129, i32 0, i32 0
  %144 = getelementptr { ptr, ptr, ptr, i32 }, ptr %142, i32 0, i32 0
  %145 = load ptr, ptr %143, align 8
  store ptr %145, ptr %144, align 8
  %146 = getelementptr { ptr, ptr, ptr, i32 }, ptr %129, i32 0, i32 1
  %147 = getelementptr { ptr, ptr, ptr, i32 }, ptr %142, i32 0, i32 1
  %148 = load ptr, ptr %146, align 8
  store ptr %148, ptr %147, align 8
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %129, i32 0, i32 2
  %150 = getelementptr { ptr, ptr, ptr, i32 }, ptr %142, i32 0, i32 2
  %151 = load ptr, ptr %149, align 8
  store ptr %151, ptr %150, align 8
  %152 = getelementptr { ptr, ptr, ptr, i32 }, ptr %129, i32 0, i32 3
  %153 = getelementptr { ptr, ptr, ptr, i32 }, ptr %142, i32 0, i32 3
  %154 = load i32, ptr %152, align 4
  store i32 %154, ptr %153, align 4
  call void @set_offset(ptr %142, ptr @Iterator2)
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %156 = load ptr, ptr %155, align 8
  %157 = load ptr, ptr %8, align 8
  %158 = call ptr @llvm.invariant.start.p0(i64 112, ptr %157)
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %160 = load i32, ptr %159, align 4
  %161 = getelementptr ptr, ptr %157, i32 %160
  %162 = getelementptr ptr, ptr %161, i32 3
  %163 = load ptr, ptr %162, align 8
  %164 = getelementptr { ptr, ptr }, ptr %163, i32 0, i32 1
  %165 = load ptr, ptr %164, align 8
  %166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %142, i32 0, i32 0
  %167 = load ptr, ptr %166, align 8
  %168 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %167, 0
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %142, i32 0, i32 1
  %170 = load ptr, ptr %169, align 8
  %171 = insertvalue { ptr, ptr, ptr, i32 } %168, ptr %170, 1
  %172 = getelementptr { ptr, ptr, ptr, i32 }, ptr %142, i32 0, i32 2
  %173 = load ptr, ptr %172, align 8
  %174 = insertvalue { ptr, ptr, ptr, i32 } %171, ptr %173, 2
  %175 = getelementptr { ptr, ptr, ptr, i32 }, ptr %142, i32 0, i32 3
  %176 = load i32, ptr %175, align 4
  %177 = insertvalue { ptr, ptr, ptr, i32 } %174, i32 %176, 3
  call void %165(ptr %156, { ptr, ptr, ptr, i32 } %177) #15
  %178 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %179 = load ptr, ptr %178, align 8
  %180 = load ptr, ptr %8, align 8
  %181 = call ptr @llvm.invariant.start.p0(i64 112, ptr %180)
  %182 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %183 = load i32, ptr %182, align 4
  %184 = getelementptr ptr, ptr %180, i32 %183
  %185 = getelementptr ptr, ptr %184, i32 5
  %186 = load ptr, ptr %185, align 8
  %187 = getelementptr { ptr, ptr }, ptr %186, i32 0, i32 0
  %188 = load ptr, ptr %187, align 8
  %189 = call { ptr, ptr, ptr, i32 } %188(ptr %179) #16
  %190 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %189, ptr %190, align 8
  %191 = call ptr @llvm.invariant.start.p0(i64 16, ptr %190)
  call void @assume_offset(ptr %190, ptr @Iterable2)
  %192 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 0
  %193 = load ptr, ptr %192, align 8
  %194 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %193, 0
  %195 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 1
  %196 = load ptr, ptr %195, align 8
  %197 = insertvalue { ptr, ptr, ptr, i32 } %194, ptr %196, 1
  %198 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 2
  %199 = load ptr, ptr %198, align 8
  %200 = insertvalue { ptr, ptr, ptr, i32 } %197, ptr %199, 2
  %201 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 3
  %202 = load i32, ptr %201, align 4
  %203 = insertvalue { ptr, ptr, ptr, i32 } %200, i32 %202, 3
  %204 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %205 = load ptr, ptr %204, align 8
  %206 = load ptr, ptr %8, align 8
  %207 = call ptr @llvm.invariant.start.p0(i64 112, ptr %206)
  %208 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %209 = load i32, ptr %208, align 4
  %210 = getelementptr ptr, ptr %206, i32 %209
  %211 = load ptr, ptr %210, align 8
  %212 = call ptr @typegetter_wrapper(ptr %211, ptr %205)
  %213 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %214 = load ptr, ptr %213, align 8
  %215 = load ptr, ptr %8, align 8
  %216 = call ptr @llvm.invariant.start.p0(i64 112, ptr %215)
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %218 = load i32, ptr %217, align 4
  %219 = getelementptr ptr, ptr %215, i32 %218
  %220 = getelementptr ptr, ptr %219, i32 1
  %221 = load ptr, ptr %220, align 8
  %222 = call ptr @typegetter_wrapper(ptr %221, ptr %214)
  %223 = alloca [0 x ptr], align 8
  %224 = call ptr @llvm.invariant.start.p0(i64 0, ptr %223)
  %225 = call ptr @llvm.invariant.start.p0(i64 184, ptr %193)
  %226 = getelementptr ptr, ptr %193, i32 %202
  %227 = getelementptr ptr, ptr %226, i32 1
  %228 = load ptr, ptr %227, align 8
  %229 = alloca {}, align 8
  %230 = call ptr @behavior_wrapper(ptr %228, { ptr, ptr, ptr, i32 } %203, ptr %229)
  %231 = call { ptr, ptr, ptr, i32 } %230({ ptr, ptr, ptr, i32 } %203, { ptr, ptr, ptr, i32 } %203, ptr %223)
  %232 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %231, ptr %232, align 8
  %233 = call ptr @llvm.invariant.start.p0(i64 16, ptr %232)
  %234 = alloca { ptr, ptr, ptr, i32 }, align 8
  %235 = getelementptr { ptr, ptr, ptr, i32 }, ptr %232, i32 0, i32 0
  %236 = getelementptr { ptr, ptr, ptr, i32 }, ptr %234, i32 0, i32 0
  %237 = load ptr, ptr %235, align 8
  store ptr %237, ptr %236, align 8
  %238 = getelementptr { ptr, ptr, ptr, i32 }, ptr %232, i32 0, i32 1
  %239 = getelementptr { ptr, ptr, ptr, i32 }, ptr %234, i32 0, i32 1
  %240 = load ptr, ptr %238, align 8
  store ptr %240, ptr %239, align 8
  %241 = getelementptr { ptr, ptr, ptr, i32 }, ptr %232, i32 0, i32 2
  %242 = getelementptr { ptr, ptr, ptr, i32 }, ptr %234, i32 0, i32 2
  %243 = load ptr, ptr %241, align 8
  store ptr %243, ptr %242, align 8
  %244 = getelementptr { ptr, ptr, ptr, i32 }, ptr %232, i32 0, i32 3
  %245 = getelementptr { ptr, ptr, ptr, i32 }, ptr %234, i32 0, i32 3
  %246 = load i32, ptr %244, align 4
  store i32 %246, ptr %245, align 4
  call void @set_offset(ptr %234, ptr @Iterator2)
  %247 = alloca { ptr, ptr, ptr, i32 }, align 8
  %248 = getelementptr { ptr, ptr, ptr, i32 }, ptr %234, i32 0, i32 0
  %249 = getelementptr { ptr, ptr, ptr, i32 }, ptr %247, i32 0, i32 0
  %250 = load ptr, ptr %248, align 8
  store ptr %250, ptr %249, align 8
  %251 = getelementptr { ptr, ptr, ptr, i32 }, ptr %234, i32 0, i32 1
  %252 = getelementptr { ptr, ptr, ptr, i32 }, ptr %247, i32 0, i32 1
  %253 = load ptr, ptr %251, align 8
  store ptr %253, ptr %252, align 8
  %254 = getelementptr { ptr, ptr, ptr, i32 }, ptr %234, i32 0, i32 2
  %255 = getelementptr { ptr, ptr, ptr, i32 }, ptr %247, i32 0, i32 2
  %256 = load ptr, ptr %254, align 8
  store ptr %256, ptr %255, align 8
  %257 = getelementptr { ptr, ptr, ptr, i32 }, ptr %234, i32 0, i32 3
  %258 = getelementptr { ptr, ptr, ptr, i32 }, ptr %247, i32 0, i32 3
  %259 = load i32, ptr %257, align 4
  store i32 %259, ptr %258, align 4
  call void @set_offset(ptr %247, ptr @Iterator2)
  %260 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %261 = load ptr, ptr %260, align 8
  %262 = load ptr, ptr %8, align 8
  %263 = call ptr @llvm.invariant.start.p0(i64 112, ptr %262)
  %264 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %265 = load i32, ptr %264, align 4
  %266 = getelementptr ptr, ptr %262, i32 %265
  %267 = getelementptr ptr, ptr %266, i32 4
  %268 = load ptr, ptr %267, align 8
  %269 = getelementptr { ptr, ptr }, ptr %268, i32 0, i32 1
  %270 = load ptr, ptr %269, align 8
  %271 = getelementptr { ptr, ptr, ptr, i32 }, ptr %247, i32 0, i32 0
  %272 = load ptr, ptr %271, align 8
  %273 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %272, 0
  %274 = getelementptr { ptr, ptr, ptr, i32 }, ptr %247, i32 0, i32 1
  %275 = load ptr, ptr %274, align 8
  %276 = insertvalue { ptr, ptr, ptr, i32 } %273, ptr %275, 1
  %277 = getelementptr { ptr, ptr, ptr, i32 }, ptr %247, i32 0, i32 2
  %278 = load ptr, ptr %277, align 8
  %279 = insertvalue { ptr, ptr, ptr, i32 } %276, ptr %278, 2
  %280 = getelementptr { ptr, ptr, ptr, i32 }, ptr %247, i32 0, i32 3
  %281 = load i32, ptr %280, align 4
  %282 = insertvalue { ptr, ptr, ptr, i32 } %279, i32 %281, 3
  call void %270(ptr %261, { ptr, ptr, ptr, i32 } %282) #15
  %283 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %284 = load ptr, ptr %283, align 8
  %285 = load ptr, ptr %8, align 8
  %286 = call ptr @llvm.invariant.start.p0(i64 112, ptr %285)
  %287 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %288 = load i32, ptr %287, align 4
  %289 = getelementptr ptr, ptr %285, i32 %288
  %290 = getelementptr ptr, ptr %289, i32 3
  %291 = load ptr, ptr %290, align 8
  %292 = getelementptr { ptr, ptr }, ptr %291, i32 0, i32 0
  %293 = load ptr, ptr %292, align 8
  %294 = call { ptr, ptr, ptr, i32 } %293(ptr %284) #16
  %295 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %294, ptr %295, align 8
  %296 = call ptr @llvm.invariant.start.p0(i64 16, ptr %295)
  call void @assume_offset(ptr %295, ptr @Iterator2)
  %297 = getelementptr { ptr, ptr, ptr, i32 }, ptr %295, i32 0, i32 0
  %298 = load ptr, ptr %297, align 8
  %299 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %298, 0
  %300 = getelementptr { ptr, ptr, ptr, i32 }, ptr %295, i32 0, i32 1
  %301 = load ptr, ptr %300, align 8
  %302 = insertvalue { ptr, ptr, ptr, i32 } %299, ptr %301, 1
  %303 = getelementptr { ptr, ptr, ptr, i32 }, ptr %295, i32 0, i32 2
  %304 = load ptr, ptr %303, align 8
  %305 = insertvalue { ptr, ptr, ptr, i32 } %302, ptr %304, 2
  %306 = getelementptr { ptr, ptr, ptr, i32 }, ptr %295, i32 0, i32 3
  %307 = load i32, ptr %306, align 4
  %308 = insertvalue { ptr, ptr, ptr, i32 } %305, i32 %307, 3
  %309 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %310 = load ptr, ptr %309, align 8
  %311 = load ptr, ptr %8, align 8
  %312 = call ptr @llvm.invariant.start.p0(i64 112, ptr %311)
  %313 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %314 = load i32, ptr %313, align 4
  %315 = getelementptr ptr, ptr %311, i32 %314
  %316 = load ptr, ptr %315, align 8
  %317 = call ptr @typegetter_wrapper(ptr %316, ptr %310)
  %318 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %319 = load ptr, ptr %318, align 8
  %320 = load ptr, ptr %8, align 8
  %321 = call ptr @llvm.invariant.start.p0(i64 112, ptr %320)
  %322 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %323 = load i32, ptr %322, align 4
  %324 = getelementptr ptr, ptr %320, i32 %323
  %325 = getelementptr ptr, ptr %324, i32 1
  %326 = load ptr, ptr %325, align 8
  %327 = call ptr @typegetter_wrapper(ptr %326, ptr %319)
  %328 = alloca [0 x ptr], align 8
  %329 = call ptr @llvm.invariant.start.p0(i64 0, ptr %328)
  %330 = call ptr @llvm.invariant.start.p0(i64 24, ptr %298)
  %331 = getelementptr ptr, ptr %298, i32 %307
  %332 = getelementptr ptr, ptr %331, i32 1
  %333 = load ptr, ptr %332, align 8
  %334 = alloca {}, align 8
  %335 = call ptr @behavior_wrapper(ptr %333, { ptr, ptr, ptr, i32 } %308, ptr %334)
  %336 = call { ptr, i160 } %335({ ptr, ptr, ptr, i32 } %308, { ptr, ptr, ptr, i32 } %308, ptr %328)
  %337 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %336, ptr %337, align 8
  %338 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %339 = load ptr, ptr %338, align 8
  %340 = load ptr, ptr %8, align 8
  %341 = call ptr @llvm.invariant.start.p0(i64 112, ptr %340)
  %342 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %343 = load i32, ptr %342, align 4
  %344 = getelementptr ptr, ptr %340, i32 %343
  %345 = getelementptr ptr, ptr %344, i32 6
  %346 = load ptr, ptr %345, align 8
  %347 = getelementptr { ptr, ptr }, ptr %346, i32 0, i32 1
  %348 = load ptr, ptr %347, align 8
  %349 = getelementptr { ptr, i160 }, ptr %337, i32 0, i32 0
  %350 = load ptr, ptr %349, align 8
  %351 = insertvalue { ptr, i160 } undef, ptr %350, 0
  %352 = getelementptr { ptr, i160 }, ptr %337, i32 0, i32 1
  %353 = load i160, ptr %352, align 4
  %354 = insertvalue { ptr, i160 } %351, i160 %353, 1
  call void %348(ptr %339, { ptr, i160 } %354) #15
  ret void
}

define { ptr, i160 } @ProductIterator2_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i160, align 8
  %5 = alloca ptr, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = alloca [0 x ptr], align 8
  %8 = alloca {}, align 8
  %9 = alloca { ptr, i160 }, align 8
  %10 = alloca i160, align 8
  %11 = alloca ptr, align 8
  %12 = alloca [3 x ptr], align 8
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  %14 = alloca i160, align 8
  %15 = alloca ptr, align 8
  %16 = alloca i160, align 8
  %17 = alloca ptr, align 8
  %18 = alloca [2 x ptr], align 8
  %19 = alloca { ptr, ptr }, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = alloca [0 x ptr], align 8
  %22 = alloca {}, align 8
  %23 = alloca { ptr, i160 }, align 8
  %24 = alloca { ptr, ptr, ptr, i32 }, align 8
  %25 = alloca [0 x ptr], align 8
  %26 = alloca {}, align 8
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  %29 = alloca { ptr, ptr, ptr, i32 }, align 8
  %30 = alloca { ptr, i160 }, align 8
  %31 = alloca i160, align 8
  %32 = alloca ptr, align 8
  %33 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca i32, align 4
  %.reg2mem5 = alloca i32, align 4
  %.reg2mem8 = alloca i32, align 4
  %.reg2mem10 = alloca i32, align 4
  %.reg2mem12 = alloca ptr, align 8
  %.reg2mem14 = alloca { ptr, i160 }, align 8
  %.reg2mem16 = alloca i32, align 4
  %.reg2mem18 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %33, align 8
  %34 = call ptr @llvm.invariant.start.p0(i64 16, ptr %33)
  %35 = alloca { ptr, ptr, ptr, i32 }, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 0
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %38 = load ptr, ptr %36, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 1
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %41 = load ptr, ptr %39, align 8
  store ptr %41, ptr %40, align 8
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 2
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %44 = load ptr, ptr %42, align 8
  store ptr %44, ptr %43, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 3
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %47 = load i32, ptr %45, align 4
  store i32 %47, ptr %46, align 4
  call void @set_offset(ptr %35, ptr @ProductIterator2)
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = load ptr, ptr %35, align 8
  %51 = call ptr @llvm.invariant.start.p0(i64 112, ptr %50)
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %53 = load i32, ptr %52, align 4
  %54 = getelementptr ptr, ptr %50, i32 %53
  %55 = getelementptr ptr, ptr %54, i32 6
  %56 = load ptr, ptr %55, align 8
  %57 = getelementptr { ptr, ptr }, ptr %56, i32 0, i32 0
  %58 = load ptr, ptr %57, align 8
  %59 = call { ptr, i160 } %58(ptr %49) #16
  %60 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %59, ptr %60, align 8
  %61 = getelementptr { ptr, i160 }, ptr %60, i32 0, i32 0
  store ptr %61, ptr %.reg2mem12, align 8
  br label %62

62:                                               ; preds = %327, %3
  %.reload13 = load ptr, ptr %.reg2mem12, align 8
  %63 = load ptr, ptr %.reload13, align 8
  %64 = ptrtoint ptr %63 to i64
  %65 = icmp eq i64 %64, ptrtoint (ptr @nil_typ to i64)
  %66 = icmp eq i64 %64, 0
  %67 = or i1 %65, %66
  %68 = icmp eq i1 %67, false
  br i1 %68, label %69, label %323

69:                                               ; preds = %62
  %70 = getelementptr { ptr, i160 }, ptr %60, i32 0, i32 0
  %71 = load ptr, ptr %70, align 8
  store ptr %71, ptr %5, align 8
  %72 = getelementptr { ptr, i160 }, ptr %60, i32 0, i32 1
  %73 = load i160, ptr %72, align 4
  store i160 %73, ptr %4, align 4
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %75 = load ptr, ptr %74, align 8
  %76 = load ptr, ptr %35, align 8
  %77 = call ptr @llvm.invariant.start.p0(i64 112, ptr %76)
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %79 = load i32, ptr %78, align 4
  %80 = getelementptr ptr, ptr %76, i32 %79
  %81 = getelementptr ptr, ptr %80, i32 4
  %82 = load ptr, ptr %81, align 8
  %83 = getelementptr { ptr, ptr }, ptr %82, i32 0, i32 0
  %84 = load ptr, ptr %83, align 8
  %85 = call { ptr, ptr, ptr, i32 } %84(ptr %75) #16
  store { ptr, ptr, ptr, i32 } %85, ptr %6, align 8
  %86 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  call void @assume_offset(ptr %6, ptr @Iterator2)
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %88 = load ptr, ptr %87, align 8
  %89 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %88, 0
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } %89, ptr %91, 1
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %94 = load ptr, ptr %93, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %94, 2
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %97 = load i32, ptr %96, align 4
  %98 = insertvalue { ptr, ptr, ptr, i32 } %95, i32 %97, 3
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %100 = load ptr, ptr %99, align 8
  %101 = load ptr, ptr %35, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 112, ptr %101)
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %104 = load i32, ptr %103, align 4
  %105 = getelementptr ptr, ptr %101, i32 %104
  %106 = load ptr, ptr %105, align 8
  %107 = call ptr @typegetter_wrapper(ptr %106, ptr %100)
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %109 = load ptr, ptr %108, align 8
  %110 = load ptr, ptr %35, align 8
  %111 = call ptr @llvm.invariant.start.p0(i64 112, ptr %110)
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %113 = load i32, ptr %112, align 4
  %114 = getelementptr ptr, ptr %110, i32 %113
  %115 = getelementptr ptr, ptr %114, i32 1
  %116 = load ptr, ptr %115, align 8
  %117 = call ptr @typegetter_wrapper(ptr %116, ptr %109)
  %118 = call ptr @llvm.invariant.start.p0(i64 0, ptr %7)
  %119 = call ptr @llvm.invariant.start.p0(i64 24, ptr %88)
  %120 = getelementptr ptr, ptr %88, i32 %97
  %121 = getelementptr ptr, ptr %120, i32 1
  %122 = load ptr, ptr %121, align 8
  %123 = call ptr @behavior_wrapper(ptr %122, { ptr, ptr, ptr, i32 } %98, ptr %8)
  %124 = call { ptr, i160 } %123({ ptr, ptr, ptr, i32 } %98, { ptr, ptr, ptr, i32 } %98, ptr %7)
  store { ptr, i160 } %124, ptr %9, align 8
  %125 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 0
  %126 = load ptr, ptr %125, align 8
  %127 = ptrtoint ptr %126 to i64
  %128 = icmp eq i64 %127, ptrtoint (ptr @nil_typ to i64)
  %129 = icmp eq i64 %127, 0
  %130 = or i1 %128, %129
  %131 = icmp eq i1 %130, false
  %132 = zext i1 %131 to i32
  store i32 %132, ptr %.reg2mem10, align 4
  %133 = icmp ne i1 %130, false
  %134 = zext i1 %133 to i32
  store i32 %134, ptr %.reg2mem8, align 4
  br i1 %131, label %135, label %136

135:                                              ; preds = %69
  br label %322

136:                                              ; preds = %69
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %138 = load ptr, ptr %137, align 8
  %139 = load ptr, ptr %35, align 8
  %140 = call ptr @llvm.invariant.start.p0(i64 112, ptr %139)
  %141 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %142 = load i32, ptr %141, align 4
  %143 = getelementptr ptr, ptr %139, i32 %142
  %144 = getelementptr ptr, ptr %143, i32 3
  %145 = load ptr, ptr %144, align 8
  %146 = getelementptr { ptr, ptr }, ptr %145, i32 0, i32 0
  %147 = load ptr, ptr %146, align 8
  %148 = call { ptr, ptr, ptr, i32 } %147(ptr %138) #16
  store { ptr, ptr, ptr, i32 } %148, ptr %20, align 8
  %149 = call ptr @llvm.invariant.start.p0(i64 16, ptr %20)
  call void @assume_offset(ptr %20, ptr @Iterator2)
  %150 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %151 = load ptr, ptr %150, align 8
  %152 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %151, 0
  %153 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %154 = load ptr, ptr %153, align 8
  %155 = insertvalue { ptr, ptr, ptr, i32 } %152, ptr %154, 1
  %156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %157 = load ptr, ptr %156, align 8
  %158 = insertvalue { ptr, ptr, ptr, i32 } %155, ptr %157, 2
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %160 = load i32, ptr %159, align 4
  %161 = insertvalue { ptr, ptr, ptr, i32 } %158, i32 %160, 3
  %162 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %163 = load ptr, ptr %162, align 8
  %164 = load ptr, ptr %35, align 8
  %165 = call ptr @llvm.invariant.start.p0(i64 112, ptr %164)
  %166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %167 = load i32, ptr %166, align 4
  %168 = getelementptr ptr, ptr %164, i32 %167
  %169 = load ptr, ptr %168, align 8
  %170 = call ptr @typegetter_wrapper(ptr %169, ptr %163)
  %171 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %172 = load ptr, ptr %171, align 8
  %173 = load ptr, ptr %35, align 8
  %174 = call ptr @llvm.invariant.start.p0(i64 112, ptr %173)
  %175 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %176 = load i32, ptr %175, align 4
  %177 = getelementptr ptr, ptr %173, i32 %176
  %178 = getelementptr ptr, ptr %177, i32 1
  %179 = load ptr, ptr %178, align 8
  %180 = call ptr @typegetter_wrapper(ptr %179, ptr %172)
  %181 = call ptr @llvm.invariant.start.p0(i64 0, ptr %21)
  %182 = call ptr @llvm.invariant.start.p0(i64 24, ptr %151)
  %183 = getelementptr ptr, ptr %151, i32 %160
  %184 = getelementptr ptr, ptr %183, i32 1
  %185 = load ptr, ptr %184, align 8
  %186 = call ptr @behavior_wrapper(ptr %185, { ptr, ptr, ptr, i32 } %161, ptr %22)
  %187 = call { ptr, i160 } %186({ ptr, ptr, ptr, i32 } %161, { ptr, ptr, ptr, i32 } %161, ptr %21)
  store { ptr, i160 } %187, ptr %23, align 8
  %188 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %189 = load ptr, ptr %188, align 8
  %190 = load ptr, ptr %35, align 8
  %191 = call ptr @llvm.invariant.start.p0(i64 112, ptr %190)
  %192 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %193 = load i32, ptr %192, align 4
  %194 = getelementptr ptr, ptr %190, i32 %193
  %195 = getelementptr ptr, ptr %194, i32 6
  %196 = load ptr, ptr %195, align 8
  %197 = getelementptr { ptr, ptr }, ptr %196, i32 0, i32 1
  %198 = load ptr, ptr %197, align 8
  %199 = getelementptr { ptr, i160 }, ptr %23, i32 0, i32 0
  %200 = load ptr, ptr %199, align 8
  %201 = insertvalue { ptr, i160 } undef, ptr %200, 0
  %202 = getelementptr { ptr, i160 }, ptr %23, i32 0, i32 1
  %203 = load i160, ptr %202, align 4
  %204 = insertvalue { ptr, i160 } %201, i160 %203, 1
  call void %198(ptr %189, { ptr, i160 } %204) #15
  %205 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %206 = load ptr, ptr %205, align 8
  %207 = load ptr, ptr %35, align 8
  %208 = call ptr @llvm.invariant.start.p0(i64 112, ptr %207)
  %209 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %210 = load i32, ptr %209, align 4
  %211 = getelementptr ptr, ptr %207, i32 %210
  %212 = getelementptr ptr, ptr %211, i32 5
  %213 = load ptr, ptr %212, align 8
  %214 = getelementptr { ptr, ptr }, ptr %213, i32 0, i32 0
  %215 = load ptr, ptr %214, align 8
  %216 = call { ptr, ptr, ptr, i32 } %215(ptr %206) #16
  store { ptr, ptr, ptr, i32 } %216, ptr %24, align 8
  %217 = call ptr @llvm.invariant.start.p0(i64 16, ptr %24)
  call void @assume_offset(ptr %24, ptr @Iterable2)
  %218 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %219 = load ptr, ptr %218, align 8
  %220 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %219, 0
  %221 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %222 = load ptr, ptr %221, align 8
  %223 = insertvalue { ptr, ptr, ptr, i32 } %220, ptr %222, 1
  %224 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %225 = load ptr, ptr %224, align 8
  %226 = insertvalue { ptr, ptr, ptr, i32 } %223, ptr %225, 2
  %227 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %228 = load i32, ptr %227, align 4
  %229 = insertvalue { ptr, ptr, ptr, i32 } %226, i32 %228, 3
  %230 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %231 = load ptr, ptr %230, align 8
  %232 = load ptr, ptr %35, align 8
  %233 = call ptr @llvm.invariant.start.p0(i64 112, ptr %232)
  %234 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %235 = load i32, ptr %234, align 4
  %236 = getelementptr ptr, ptr %232, i32 %235
  %237 = load ptr, ptr %236, align 8
  %238 = call ptr @typegetter_wrapper(ptr %237, ptr %231)
  %239 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %240 = load ptr, ptr %239, align 8
  %241 = load ptr, ptr %35, align 8
  %242 = call ptr @llvm.invariant.start.p0(i64 112, ptr %241)
  %243 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %244 = load i32, ptr %243, align 4
  %245 = getelementptr ptr, ptr %241, i32 %244
  %246 = getelementptr ptr, ptr %245, i32 1
  %247 = load ptr, ptr %246, align 8
  %248 = call ptr @typegetter_wrapper(ptr %247, ptr %240)
  %249 = call ptr @llvm.invariant.start.p0(i64 0, ptr %25)
  %250 = call ptr @llvm.invariant.start.p0(i64 184, ptr %219)
  %251 = getelementptr ptr, ptr %219, i32 %228
  %252 = getelementptr ptr, ptr %251, i32 1
  %253 = load ptr, ptr %252, align 8
  %254 = call ptr @behavior_wrapper(ptr %253, { ptr, ptr, ptr, i32 } %229, ptr %26)
  %255 = call { ptr, ptr, ptr, i32 } %254({ ptr, ptr, ptr, i32 } %229, { ptr, ptr, ptr, i32 } %229, ptr %25)
  store { ptr, ptr, ptr, i32 } %255, ptr %27, align 8
  %256 = call ptr @llvm.invariant.start.p0(i64 16, ptr %27)
  %257 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %258 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 0
  %259 = load ptr, ptr %257, align 8
  store ptr %259, ptr %258, align 8
  %260 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %261 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 1
  %262 = load ptr, ptr %260, align 8
  store ptr %262, ptr %261, align 8
  %263 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %264 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 2
  %265 = load ptr, ptr %263, align 8
  store ptr %265, ptr %264, align 8
  %266 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %267 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 3
  %268 = load i32, ptr %266, align 4
  store i32 %268, ptr %267, align 4
  call void @set_offset(ptr %28, ptr @Iterator2)
  %269 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 0
  %270 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 0
  %271 = load ptr, ptr %269, align 8
  store ptr %271, ptr %270, align 8
  %272 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 1
  %273 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 1
  %274 = load ptr, ptr %272, align 8
  store ptr %274, ptr %273, align 8
  %275 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 2
  %276 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 2
  %277 = load ptr, ptr %275, align 8
  store ptr %277, ptr %276, align 8
  %278 = getelementptr { ptr, ptr, ptr, i32 }, ptr %28, i32 0, i32 3
  %279 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 3
  %280 = load i32, ptr %278, align 4
  store i32 %280, ptr %279, align 4
  call void @set_offset(ptr %29, ptr @Iterator2)
  %281 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %282 = load ptr, ptr %281, align 8
  %283 = load ptr, ptr %35, align 8
  %284 = call ptr @llvm.invariant.start.p0(i64 112, ptr %283)
  %285 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %286 = load i32, ptr %285, align 4
  %287 = getelementptr ptr, ptr %283, i32 %286
  %288 = getelementptr ptr, ptr %287, i32 4
  %289 = load ptr, ptr %288, align 8
  %290 = getelementptr { ptr, ptr }, ptr %289, i32 0, i32 1
  %291 = load ptr, ptr %290, align 8
  %292 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 0
  %293 = load ptr, ptr %292, align 8
  %294 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %293, 0
  %295 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 1
  %296 = load ptr, ptr %295, align 8
  %297 = insertvalue { ptr, ptr, ptr, i32 } %294, ptr %296, 1
  %298 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 2
  %299 = load ptr, ptr %298, align 8
  %300 = insertvalue { ptr, ptr, ptr, i32 } %297, ptr %299, 2
  %301 = getelementptr { ptr, ptr, ptr, i32 }, ptr %29, i32 0, i32 3
  %302 = load i32, ptr %301, align 4
  %303 = insertvalue { ptr, ptr, ptr, i32 } %300, i32 %302, 3
  call void %291(ptr %282, { ptr, ptr, ptr, i32 } %303) #15
  %304 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %305 = load ptr, ptr %304, align 8
  %306 = load ptr, ptr %35, align 8
  %307 = call ptr @llvm.invariant.start.p0(i64 112, ptr %306)
  %308 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %309 = load i32, ptr %308, align 4
  %310 = getelementptr ptr, ptr %306, i32 %309
  %311 = getelementptr ptr, ptr %310, i32 6
  %312 = load ptr, ptr %311, align 8
  %313 = getelementptr { ptr, ptr }, ptr %312, i32 0, i32 0
  %314 = load ptr, ptr %313, align 8
  %315 = call { ptr, i160 } %314(ptr %305) #16
  store { ptr, i160 } %315, ptr %30, align 8
  %316 = getelementptr { ptr, i160 }, ptr %30, i32 0, i32 0
  %317 = getelementptr { ptr, i160 }, ptr %60, i32 0, i32 0
  %318 = load ptr, ptr %316, align 8
  store ptr %318, ptr %317, align 8
  %319 = getelementptr { ptr, i160 }, ptr %30, i32 0, i32 1
  %320 = getelementptr { ptr, i160 }, ptr %60, i32 0, i32 1
  %321 = load i160, ptr %319, align 4
  store i160 %321, ptr %320, align 4
  br label %322

322:                                              ; preds = %136, %135
  %.reload9 = load i32, ptr %.reg2mem8, align 4
  %.reload11 = load i32, ptr %.reg2mem10, align 4
  store i32 %.reload9, ptr %.reg2mem16, align 4
  store i32 %.reload11, ptr %.reg2mem18, align 4
  br label %324

323:                                              ; preds = %62
  store i32 0, ptr %.reg2mem16, align 4
  store i32 2, ptr %.reg2mem18, align 4
  br label %324

324:                                              ; preds = %323, %322
  %.reload19 = load i32, ptr %.reg2mem18, align 4
  %.reload17 = load i32, ptr %.reg2mem16, align 4
  store i32 %.reload19, ptr %.reg2mem5, align 4
  store i32 %.reload17, ptr %.reg2mem3, align 4
  br label %325

325:                                              ; preds = %324
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  %326 = trunc i32 %.reload4 to i1
  %.reload7 = load i32, ptr %.reg2mem5, align 4
  br i1 %326, label %327, label %328

327:                                              ; preds = %325
  br label %62

328:                                              ; preds = %325
  %.reload6 = load i32, ptr %.reg2mem5, align 4
  %329 = zext i32 %.reload6 to i64
  %330 = trunc i64 %329 to i32
  switch i32 %330, label %427 [
    i32 1, label %331
  ]

331:                                              ; preds = %328
  %332 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 0
  %333 = load ptr, ptr %332, align 8
  store ptr %333, ptr %11, align 8
  %334 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 1
  %335 = load i160, ptr %334, align 4
  store i160 %335, ptr %10, align 4
  %336 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %337 = load ptr, ptr %336, align 8
  %338 = load ptr, ptr %35, align 8
  %339 = call ptr @llvm.invariant.start.p0(i64 112, ptr %338)
  %340 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %341 = load i32, ptr %340, align 4
  %342 = getelementptr ptr, ptr %338, i32 %341
  %343 = load ptr, ptr %342, align 8
  %344 = call ptr @typegetter_wrapper(ptr %343, ptr %337)
  %345 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %346 = load ptr, ptr %345, align 8
  %347 = load ptr, ptr %35, align 8
  %348 = call ptr @llvm.invariant.start.p0(i64 112, ptr %347)
  %349 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %350 = load i32, ptr %349, align 4
  %351 = getelementptr ptr, ptr %347, i32 %350
  %352 = getelementptr ptr, ptr %351, i32 1
  %353 = load ptr, ptr %352, align 8
  %354 = call ptr @typegetter_wrapper(ptr %353, ptr %346)
  store ptr @Pair, ptr %12, align 8
  %355 = getelementptr ptr, ptr %12, i32 1
  store ptr %344, ptr %355, align 8
  %356 = getelementptr ptr, ptr %12, i32 2
  store ptr %354, ptr %356, align 8
  %357 = load ptr, ptr %12, align 8
  %358 = getelementptr ptr, ptr %357, i32 6
  %359 = load ptr, ptr %358, align 8
  %360 = call { i64, i64 } @size_wrapper(ptr %359, ptr %12)
  %361 = extractvalue { i64, i64 } %360, 0
  %362 = call ptr @bump_malloc(i64 %361)
  store ptr %344, ptr %362, align 8
  %363 = getelementptr ptr, ptr %362, i32 1
  store ptr %354, ptr %363, align 8
  %364 = call ptr @llvm.invariant.start.p0(i64 16, ptr %362)
  %365 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %366 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  store ptr @Pair, ptr %13, align 8
  store ptr %362, ptr %365, align 8
  store i32 9, ptr %366, align 4
  %367 = call ptr @llvm.invariant.start.p0(i64 16, ptr %13)
  %368 = load ptr, ptr %5, align 8
  store ptr %368, ptr %15, align 8
  %369 = load i160, ptr %4, align 4
  store i160 %369, ptr %14, align 4
  %370 = load ptr, ptr %15, align 8
  %371 = insertvalue { ptr, i160 } undef, ptr %370, 0
  %372 = load i160, ptr %14, align 4
  %373 = insertvalue { ptr, i160 } %371, i160 %372, 1
  %374 = load ptr, ptr %11, align 8
  store ptr %374, ptr %17, align 8
  %375 = load i160, ptr %10, align 4
  store i160 %375, ptr %16, align 4
  %376 = load ptr, ptr %17, align 8
  %377 = insertvalue { ptr, i160 } undef, ptr %376, 0
  %378 = load i160, ptr %16, align 4
  %379 = insertvalue { ptr, i160 } %377, i160 %378, 1
  %380 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %381 = load ptr, ptr %380, align 8
  %382 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %381, 0
  %383 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %384 = load ptr, ptr %383, align 8
  %385 = insertvalue { ptr, ptr, ptr, i32 } %382, ptr %384, 1
  %386 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %387 = load ptr, ptr %386, align 8
  %388 = insertvalue { ptr, ptr, ptr, i32 } %385, ptr %387, 2
  %389 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %390 = load i32, ptr %389, align 4
  %391 = insertvalue { ptr, ptr, ptr, i32 } %388, i32 %390, 3
  %392 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %393 = load ptr, ptr %392, align 8
  %394 = load ptr, ptr %35, align 8
  %395 = call ptr @llvm.invariant.start.p0(i64 112, ptr %394)
  %396 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %397 = load i32, ptr %396, align 4
  %398 = getelementptr ptr, ptr %394, i32 %397
  %399 = load ptr, ptr %398, align 8
  %400 = call ptr @typegetter_wrapper(ptr %399, ptr %393)
  %401 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %402 = load ptr, ptr %401, align 8
  %403 = load ptr, ptr %35, align 8
  %404 = call ptr @llvm.invariant.start.p0(i64 112, ptr %403)
  %405 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %406 = load i32, ptr %405, align 4
  %407 = getelementptr ptr, ptr %403, i32 %406
  %408 = getelementptr ptr, ptr %407, i32 1
  %409 = load ptr, ptr %408, align 8
  %410 = call ptr @typegetter_wrapper(ptr %409, ptr %402)
  %411 = getelementptr [2 x ptr], ptr %18, i32 0, i32 0
  store ptr %400, ptr %411, align 8
  %412 = getelementptr [2 x ptr], ptr %18, i32 0, i32 1
  store ptr %410, ptr %412, align 8
  %413 = call ptr @llvm.invariant.start.p0(i64 4, ptr %18)
  %414 = call ptr @llvm.invariant.start.p0(i64 80, ptr %381)
  %415 = getelementptr ptr, ptr %381, i32 %390
  %416 = getelementptr ptr, ptr %415, i32 4
  %417 = load ptr, ptr %416, align 8
  %418 = getelementptr { ptr, ptr }, ptr %19, i32 0, i32 0
  store ptr %370, ptr %418, align 8
  %419 = getelementptr { ptr, ptr }, ptr %19, i32 0, i32 1
  store ptr %376, ptr %419, align 8
  %420 = call ptr @behavior_wrapper(ptr %417, { ptr, ptr, ptr, i32 } %391, ptr %19)
  call void %420({ ptr, ptr, ptr, i32 } %391, { ptr, ptr, ptr, i32 } %391, ptr %18, { ptr, i160 } %373, { ptr, i160 } %379)
  %421 = getelementptr { ptr, i160 }, ptr %13, i32 0, i32 0
  %422 = load ptr, ptr %421, align 8
  %423 = insertvalue { ptr, i160 } undef, ptr %422, 0
  %424 = getelementptr { ptr, i160 }, ptr %13, i32 0, i32 1
  %425 = load i160, ptr %424, align 4
  %426 = insertvalue { ptr, i160 } %423, i160 %425, 1
  store { ptr, i160 } %426, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem14, align 8
  br label %432

427:                                              ; preds = %328
  store [0 x i8] undef, ptr %31, align 1
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %32, align 4
  %428 = load ptr, ptr %32, align 8
  %429 = insertvalue { ptr, i160 } undef, ptr %428, 0
  %430 = load i160, ptr %31, align 4
  %431 = insertvalue { ptr, i160 } %429, i160 %430, 1
  store { ptr, i160 } %431, ptr %.reg2mem, align 8
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  store { ptr, i160 } %.reload, ptr %.reg2mem14, align 8
  br label %432

432:                                              ; preds = %427, %331
  %.reload15 = load { ptr, i160 }, ptr %.reg2mem14, align 8
  ret { ptr, i160 } %.reload15
}

define { ptr, i160 } @ProductIterator2_getter_current_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %13, %18
  %20 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %23
  %25 = add i64 %19, %24
  %26 = urem i64 %25, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %27 = icmp eq i64 %26, 0
  %28 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %26
  %29 = select i1 %27, i64 0, i64 %28
  %30 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %29
  %31 = add i64 %25, %30
  %32 = urem i64 %31, ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64)
  %33 = icmp eq i64 %32, 0
  %34 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), %32
  %35 = select i1 %33, i64 0, i64 %34
  %36 = add i64 %31, %35
  %37 = getelementptr i8, ptr %0, i64 %36
  %38 = getelementptr { ptr, i160 }, ptr %37, i32 0, i32 0
  %39 = load ptr, ptr %38, align 8
  %40 = insertvalue { ptr, i160 } undef, ptr %39, 0
  %41 = getelementptr { ptr, i160 }, ptr %37, i32 0, i32 1
  %42 = load i160, ptr %41, align 4
  %43 = insertvalue { ptr, i160 } %40, i160 %42, 1
  ret { ptr, i160 } %43
}

define void @ProductIterator2_setter_current_first(ptr %0, { ptr, i160 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %18
  %20 = add i64 %14, %19
  %21 = urem i64 %20, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %22 = icmp eq i64 %21, 0
  %23 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %24 = select i1 %22, i64 0, i64 %23
  %25 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %24
  %26 = add i64 %20, %25
  %27 = urem i64 %26, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %28 = icmp eq i64 %27, 0
  %29 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %27
  %30 = select i1 %28, i64 0, i64 %29
  %31 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %30
  %32 = add i64 %26, %31
  %33 = urem i64 %32, ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64)
  %34 = icmp eq i64 %33, 0
  %35 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), %33
  %36 = select i1 %34, i64 0, i64 %35
  %37 = add i64 %32, %36
  %38 = getelementptr i8, ptr %0, i64 %37
  %39 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %1, ptr %39, align 8
  %40 = getelementptr { ptr, i160 }, ptr %39, i32 0, i32 0
  %41 = getelementptr { ptr, i160 }, ptr %38, i32 0, i32 0
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, i160 }, ptr %39, i32 0, i32 1
  %44 = getelementptr { ptr, i160 }, ptr %38, i32 0, i32 1
  %45 = load i160, ptr %43, align 4
  store i160 %45, ptr %44, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterator2_getter_second_iterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %13, %18
  %20 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %23
  %25 = add i64 %19, %24
  %26 = urem i64 %25, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %27 = icmp eq i64 %26, 0
  %28 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %26
  %29 = select i1 %27, i64 0, i64 %28
  %30 = add i64 %25, %29
  %31 = getelementptr i8, ptr %0, i64 %30
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %33, 0
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %36, 1
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %39 = load ptr, ptr %38, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %39, 2
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  %42 = load i32, ptr %41, align 4
  %43 = insertvalue { ptr, ptr, ptr, i32 } %40, i32 %42, 3
  ret { ptr, ptr, ptr, i32 } %43
}

define void @ProductIterator2_setter_second_iterable(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %18
  %20 = add i64 %14, %19
  %21 = urem i64 %20, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %22 = icmp eq i64 %21, 0
  %23 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %24 = select i1 %22, i64 0, i64 %23
  %25 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %24
  %26 = add i64 %20, %25
  %27 = urem i64 %26, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %28 = icmp eq i64 %27, 0
  %29 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %27
  %30 = select i1 %28, i64 0, i64 %29
  %31 = add i64 %26, %30
  %32 = getelementptr i8, ptr %0, i64 %31
  %33 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %33, align 8
  %34 = call ptr @llvm.invariant.start.p0(i64 16, ptr %33)
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 0
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 0
  %37 = load ptr, ptr %35, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 1
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 1
  %40 = load ptr, ptr %38, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 2
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 2
  %43 = load ptr, ptr %41, align 8
  store ptr %43, ptr %42, align 8
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 3
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 3
  %46 = load i32, ptr %44, align 4
  store i32 %46, ptr %45, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterator2_getter_second_iterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %13, %18
  %20 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = getelementptr i8, ptr %0, i64 %24
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 0
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %27, 0
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, ptr %30, 1
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 2
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %33, 2
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 3
  %36 = load i32, ptr %35, align 4
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, i32 %36, 3
  ret { ptr, ptr, ptr, i32 } %37
}

define void @ProductIterator2_setter_second_iterator(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %18
  %20 = add i64 %14, %19
  %21 = urem i64 %20, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %22 = icmp eq i64 %21, 0
  %23 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %24 = select i1 %22, i64 0, i64 %23
  %25 = add i64 %20, %24
  %26 = getelementptr i8, ptr %0, i64 %25
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %27, align 8
  %28 = call ptr @llvm.invariant.start.p0(i64 16, ptr %27)
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %34 = load ptr, ptr %32, align 8
  store ptr %34, ptr %33, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %37 = load ptr, ptr %35, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %40 = load i32, ptr %38, align 4
  store i32 %40, ptr %39, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterator2_getter_first_iterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %21, 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %24, 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } %25, ptr %27, 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %30 = load i32, ptr %29, align 4
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, i32 %30, 3
  ret { ptr, ptr, ptr, i32 } %31
}

define void @ProductIterator2_setter_first_iterator(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %34 = load i32, ptr %32, align 4
  store i32 %34, ptr %33, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterable2_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %13, %18
  %20 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = getelementptr i8, ptr %0, i64 %24
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 0
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %27, 0
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, ptr %30, 1
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 2
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %33, 2
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 3
  %36 = load i32, ptr %35, align 4
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, i32 %36, 3
  ret { ptr, ptr, ptr, i32 } %37
}

define void @ProductIterable2_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %18
  %20 = add i64 %14, %19
  %21 = urem i64 %20, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %22 = icmp eq i64 %21, 0
  %23 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %24 = select i1 %22, i64 0, i64 %23
  %25 = add i64 %20, %24
  %26 = getelementptr i8, ptr %0, i64 %25
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %27, align 8
  %28 = call ptr @llvm.invariant.start.p0(i64 16, ptr %27)
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %34 = load ptr, ptr %32, align 8
  store ptr %34, ptr %33, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %37 = load ptr, ptr %35, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %40 = load i32, ptr %38, align 4
  store i32 %40, ptr %39, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterable2_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %21, 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %24, 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } %25, ptr %27, 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %30 = load i32, ptr %29, align 4
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, i32 %30, 3
  ret { ptr, ptr, ptr, i32 } %31
}

define void @ProductIterable2_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %34 = load i32, ptr %32, align 4
  store i32 %34, ptr %33, align 4
  ret void
}

define { i64, i64 } @_size_ZipIterable2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %29 = select i1 %28, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %21
  %30 = urem i64 %27, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %31 = icmp eq i64 %30, 0
  %32 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %30
  %33 = select i1 %31, i64 0, i64 %32
  %34 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %33
  %35 = add i64 %27, %34
  %36 = urem i64 %35, %29
  %37 = icmp eq i64 %36, 0
  %38 = sub i64 %29, %36
  %39 = select i1 %37, i64 0, i64 %38
  %40 = add i64 %35, %39
  %41 = insertvalue { i64, i64 } undef, i64 %40, 0
  %42 = insertvalue { i64, i64 } %41, i64 %29, 1
  ret { i64, i64 } %42
}

define ptr @ZipIterable2_field_ZipIterable2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @ZipIterable2_field_ZipIterable2_1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 1
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @ZipIterable2_field_ZipIterable2_2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 2
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @ZipIterable2_B_init_firstIterable2T_secondIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [52 x ptr], ptr %26, i32 0, i32 17
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @ZipIterable2_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [52 x ptr], ptr %4, i32 0, i32 18
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @ZipIterable2_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 19
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ZipIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 9197944775169318296, i64 ptrtoint (ptr @Pair to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [52 x ptr], ptr %26, i32 0, i32 20
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @ZipIterable2_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 21
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ZipIterable2_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 22
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ZipIterable2_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 23
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ZipIterable2_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 24
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ZipIterable2_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 25
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ZipIterable2_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 26
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ZipIterable2_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 27
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ZipIterable2_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 28
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define void @ZipIterable2_init_firstIterable2T_secondIterable2U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @ZipIterable2)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @Iterable2)
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %45 = load ptr, ptr %43, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %48 = load i32, ptr %46, align 4
  store i32 %48, ptr %47, align 4
  call void @set_offset(ptr %36, ptr @Iterable2)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %8, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 416, ptr %51)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = getelementptr ptr, ptr %51, i32 %54
  %56 = getelementptr ptr, ptr %55, i32 3
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr { ptr, ptr }, ptr %57, i32 0, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %61 = load ptr, ptr %60, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %61, 0
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %64 = load ptr, ptr %63, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %62, ptr %64, 1
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %67 = load ptr, ptr %66, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %67, 2
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %70 = load i32, ptr %69, align 4
  %71 = insertvalue { ptr, ptr, ptr, i32 } %68, i32 %70, 3
  call void %59(ptr %50, { ptr, ptr, ptr, i32 } %71) #15
  %72 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %72, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 16, ptr %72)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 0
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 1
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 2
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %83 = load ptr, ptr %81, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 3
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %86 = load i32, ptr %84, align 4
  store i32 %86, ptr %85, align 4
  call void @set_offset(ptr %74, ptr @Iterable2)
  %87 = alloca { ptr, ptr, ptr, i32 }, align 8
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 0
  %90 = load ptr, ptr %88, align 8
  store ptr %90, ptr %89, align 8
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 1
  %93 = load ptr, ptr %91, align 8
  store ptr %93, ptr %92, align 8
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 2
  %96 = load ptr, ptr %94, align 8
  store ptr %96, ptr %95, align 8
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 3
  %99 = load i32, ptr %97, align 4
  store i32 %99, ptr %98, align 4
  call void @set_offset(ptr %87, ptr @Iterable2)
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %101 = load ptr, ptr %100, align 8
  %102 = load ptr, ptr %8, align 8
  %103 = call ptr @llvm.invariant.start.p0(i64 416, ptr %102)
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %105 = load i32, ptr %104, align 4
  %106 = getelementptr ptr, ptr %102, i32 %105
  %107 = getelementptr ptr, ptr %106, i32 4
  %108 = load ptr, ptr %107, align 8
  %109 = getelementptr { ptr, ptr }, ptr %108, i32 0, i32 1
  %110 = load ptr, ptr %109, align 8
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 0
  %112 = load ptr, ptr %111, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %112, 0
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 1
  %115 = load ptr, ptr %114, align 8
  %116 = insertvalue { ptr, ptr, ptr, i32 } %113, ptr %115, 1
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 2
  %118 = load ptr, ptr %117, align 8
  %119 = insertvalue { ptr, ptr, ptr, i32 } %116, ptr %118, 2
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 3
  %121 = load i32, ptr %120, align 4
  %122 = insertvalue { ptr, ptr, ptr, i32 } %119, i32 %121, 3
  call void %110(ptr %101, { ptr, ptr, ptr, i32 } %122) #15
  ret void
}

define { ptr, ptr, ptr, i32 } @ZipIterable2_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @ZipIterable2)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 416, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 3
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call { ptr, ptr, ptr, i32 } %29(ptr %20) #16
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %30, ptr %31, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 16, ptr %31)
  call void @assume_offset(ptr %31, ptr @Iterable2)
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %34 = load ptr, ptr %33, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %34, 0
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  %37 = load ptr, ptr %36, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %37, 1
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %40 = load ptr, ptr %39, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } %38, ptr %40, 2
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  %43 = load i32, ptr %42, align 4
  %44 = insertvalue { ptr, ptr, ptr, i32 } %41, i32 %43, 3
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %46 = load ptr, ptr %45, align 8
  %47 = load ptr, ptr %6, align 8
  %48 = call ptr @llvm.invariant.start.p0(i64 416, ptr %47)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %50 = load i32, ptr %49, align 4
  %51 = getelementptr ptr, ptr %47, i32 %50
  %52 = load ptr, ptr %51, align 8
  %53 = call ptr @typegetter_wrapper(ptr %52, ptr %46)
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %55 = load ptr, ptr %54, align 8
  %56 = load ptr, ptr %6, align 8
  %57 = call ptr @llvm.invariant.start.p0(i64 416, ptr %56)
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %59 = load i32, ptr %58, align 4
  %60 = getelementptr ptr, ptr %56, i32 %59
  %61 = getelementptr ptr, ptr %60, i32 1
  %62 = load ptr, ptr %61, align 8
  %63 = call ptr @typegetter_wrapper(ptr %62, ptr %55)
  %64 = alloca [0 x ptr], align 8
  %65 = call ptr @llvm.invariant.start.p0(i64 0, ptr %64)
  %66 = call ptr @llvm.invariant.start.p0(i64 184, ptr %34)
  %67 = getelementptr ptr, ptr %34, i32 %43
  %68 = getelementptr ptr, ptr %67, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = alloca {}, align 8
  %71 = call ptr @behavior_wrapper(ptr %69, { ptr, ptr, ptr, i32 } %44, ptr %70)
  %72 = call { ptr, ptr, ptr, i32 } %71({ ptr, ptr, ptr, i32 } %44, { ptr, ptr, ptr, i32 } %44, ptr %64)
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %72, ptr %73, align 8
  %74 = call ptr @llvm.invariant.start.p0(i64 16, ptr %73)
  %75 = alloca { ptr, ptr, ptr, i32 }, align 8
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 0
  %78 = load ptr, ptr %76, align 8
  store ptr %78, ptr %77, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 1
  %81 = load ptr, ptr %79, align 8
  store ptr %81, ptr %80, align 8
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 2
  %84 = load ptr, ptr %82, align 8
  store ptr %84, ptr %83, align 8
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 3
  %87 = load i32, ptr %85, align 4
  store i32 %87, ptr %86, align 4
  call void @set_offset(ptr %75, ptr @Iterator2)
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %89 = load ptr, ptr %88, align 8
  %90 = load ptr, ptr %6, align 8
  %91 = call ptr @llvm.invariant.start.p0(i64 416, ptr %90)
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %93 = load i32, ptr %92, align 4
  %94 = getelementptr ptr, ptr %90, i32 %93
  %95 = getelementptr ptr, ptr %94, i32 4
  %96 = load ptr, ptr %95, align 8
  %97 = getelementptr { ptr, ptr }, ptr %96, i32 0, i32 0
  %98 = load ptr, ptr %97, align 8
  %99 = call { ptr, ptr, ptr, i32 } %98(ptr %89) #16
  %100 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %99, ptr %100, align 8
  %101 = call ptr @llvm.invariant.start.p0(i64 16, ptr %100)
  call void @assume_offset(ptr %100, ptr @Iterable2)
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %100, i32 0, i32 0
  %103 = load ptr, ptr %102, align 8
  %104 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %103, 0
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %100, i32 0, i32 1
  %106 = load ptr, ptr %105, align 8
  %107 = insertvalue { ptr, ptr, ptr, i32 } %104, ptr %106, 1
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %100, i32 0, i32 2
  %109 = load ptr, ptr %108, align 8
  %110 = insertvalue { ptr, ptr, ptr, i32 } %107, ptr %109, 2
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %100, i32 0, i32 3
  %112 = load i32, ptr %111, align 4
  %113 = insertvalue { ptr, ptr, ptr, i32 } %110, i32 %112, 3
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %115 = load ptr, ptr %114, align 8
  %116 = load ptr, ptr %6, align 8
  %117 = call ptr @llvm.invariant.start.p0(i64 416, ptr %116)
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %119 = load i32, ptr %118, align 4
  %120 = getelementptr ptr, ptr %116, i32 %119
  %121 = load ptr, ptr %120, align 8
  %122 = call ptr @typegetter_wrapper(ptr %121, ptr %115)
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %124 = load ptr, ptr %123, align 8
  %125 = load ptr, ptr %6, align 8
  %126 = call ptr @llvm.invariant.start.p0(i64 416, ptr %125)
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %128 = load i32, ptr %127, align 4
  %129 = getelementptr ptr, ptr %125, i32 %128
  %130 = getelementptr ptr, ptr %129, i32 1
  %131 = load ptr, ptr %130, align 8
  %132 = call ptr @typegetter_wrapper(ptr %131, ptr %124)
  %133 = alloca [0 x ptr], align 8
  %134 = call ptr @llvm.invariant.start.p0(i64 0, ptr %133)
  %135 = call ptr @llvm.invariant.start.p0(i64 184, ptr %103)
  %136 = getelementptr ptr, ptr %103, i32 %112
  %137 = getelementptr ptr, ptr %136, i32 1
  %138 = load ptr, ptr %137, align 8
  %139 = alloca {}, align 8
  %140 = call ptr @behavior_wrapper(ptr %138, { ptr, ptr, ptr, i32 } %113, ptr %139)
  %141 = call { ptr, ptr, ptr, i32 } %140({ ptr, ptr, ptr, i32 } %113, { ptr, ptr, ptr, i32 } %113, ptr %133)
  %142 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %141, ptr %142, align 8
  %143 = call ptr @llvm.invariant.start.p0(i64 16, ptr %142)
  %144 = alloca { ptr, ptr, ptr, i32 }, align 8
  %145 = getelementptr { ptr, ptr, ptr, i32 }, ptr %142, i32 0, i32 0
  %146 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 0
  %147 = load ptr, ptr %145, align 8
  store ptr %147, ptr %146, align 8
  %148 = getelementptr { ptr, ptr, ptr, i32 }, ptr %142, i32 0, i32 1
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 1
  %150 = load ptr, ptr %148, align 8
  store ptr %150, ptr %149, align 8
  %151 = getelementptr { ptr, ptr, ptr, i32 }, ptr %142, i32 0, i32 2
  %152 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 2
  %153 = load ptr, ptr %151, align 8
  store ptr %153, ptr %152, align 8
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %142, i32 0, i32 3
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 3
  %156 = load i32, ptr %154, align 4
  store i32 %156, ptr %155, align 4
  call void @set_offset(ptr %144, ptr @Iterator2)
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %158 = load ptr, ptr %157, align 8
  %159 = load ptr, ptr %6, align 8
  %160 = call ptr @llvm.invariant.start.p0(i64 416, ptr %159)
  %161 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %162 = load i32, ptr %161, align 4
  %163 = getelementptr ptr, ptr %159, i32 %162
  %164 = load ptr, ptr %163, align 8
  %165 = call ptr @typegetter_wrapper(ptr %164, ptr %158)
  %166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %167 = load ptr, ptr %166, align 8
  %168 = load ptr, ptr %6, align 8
  %169 = call ptr @llvm.invariant.start.p0(i64 416, ptr %168)
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %171 = load i32, ptr %170, align 4
  %172 = getelementptr ptr, ptr %168, i32 %171
  %173 = getelementptr ptr, ptr %172, i32 1
  %174 = load ptr, ptr %173, align 8
  %175 = call ptr @typegetter_wrapper(ptr %174, ptr %167)
  %176 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %177 = getelementptr [4 x ptr], ptr %176, i32 0, i32 2
  store ptr %175, ptr %177, align 8
  %178 = getelementptr [4 x ptr], ptr %176, i32 0, i32 1
  store ptr %165, ptr %178, align 8
  %179 = getelementptr [4 x ptr], ptr %176, i32 0, i32 3
  store ptr null, ptr %179, align 8
  %180 = call ptr @llvm.invariant.start.p0(i64 24, ptr %176)
  store ptr @Pair, ptr %176, align 8
  %181 = alloca [4 x ptr], align 8
  store ptr @ZipIterator2, ptr %181, align 8
  %182 = getelementptr ptr, ptr %181, i32 1
  store ptr %165, ptr %182, align 8
  %183 = getelementptr ptr, ptr %181, i32 2
  store ptr %175, ptr %183, align 8
  %184 = getelementptr ptr, ptr %181, i32 3
  store ptr %176, ptr %184, align 8
  %185 = load ptr, ptr %181, align 8
  %186 = getelementptr ptr, ptr %185, i32 6
  %187 = load ptr, ptr %186, align 8
  %188 = call { i64, i64 } @size_wrapper(ptr %187, ptr %181)
  %189 = extractvalue { i64, i64 } %188, 0
  %190 = call ptr @bump_malloc(i64 %189)
  store ptr %165, ptr %190, align 8
  %191 = getelementptr ptr, ptr %190, i32 1
  store ptr %175, ptr %191, align 8
  %192 = getelementptr ptr, ptr %190, i32 2
  store ptr %176, ptr %192, align 8
  %193 = call ptr @llvm.invariant.start.p0(i64 24, ptr %190)
  %194 = alloca { ptr, ptr, ptr, i32 }, align 8
  %195 = getelementptr { ptr, ptr, ptr, i32 }, ptr %194, i32 0, i32 1
  %196 = getelementptr { ptr, ptr, ptr, i32 }, ptr %194, i32 0, i32 3
  store ptr @ZipIterator2, ptr %194, align 8
  store ptr %190, ptr %195, align 8
  store i32 9, ptr %196, align 4
  %197 = call ptr @llvm.invariant.start.p0(i64 16, ptr %194)
  %198 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %199 = load ptr, ptr %198, align 8
  %200 = load ptr, ptr %6, align 8
  %201 = call ptr @llvm.invariant.start.p0(i64 416, ptr %200)
  %202 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %203 = load i32, ptr %202, align 4
  %204 = getelementptr ptr, ptr %200, i32 %203
  %205 = getelementptr ptr, ptr %204, i32 3
  %206 = load ptr, ptr %205, align 8
  %207 = getelementptr { ptr, ptr }, ptr %206, i32 0, i32 0
  %208 = load ptr, ptr %207, align 8
  %209 = call { ptr, ptr, ptr, i32 } %208(ptr %199) #16
  %210 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %209, ptr %210, align 8
  %211 = call ptr @llvm.invariant.start.p0(i64 16, ptr %210)
  call void @assume_offset(ptr %210, ptr @Iterable2)
  %212 = getelementptr { ptr, ptr, ptr, i32 }, ptr %210, i32 0, i32 0
  %213 = load ptr, ptr %212, align 8
  %214 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %213, 0
  %215 = getelementptr { ptr, ptr, ptr, i32 }, ptr %210, i32 0, i32 1
  %216 = load ptr, ptr %215, align 8
  %217 = insertvalue { ptr, ptr, ptr, i32 } %214, ptr %216, 1
  %218 = getelementptr { ptr, ptr, ptr, i32 }, ptr %210, i32 0, i32 2
  %219 = load ptr, ptr %218, align 8
  %220 = insertvalue { ptr, ptr, ptr, i32 } %217, ptr %219, 2
  %221 = getelementptr { ptr, ptr, ptr, i32 }, ptr %210, i32 0, i32 3
  %222 = load i32, ptr %221, align 4
  %223 = insertvalue { ptr, ptr, ptr, i32 } %220, i32 %222, 3
  %224 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %225 = load ptr, ptr %224, align 8
  %226 = load ptr, ptr %6, align 8
  %227 = call ptr @llvm.invariant.start.p0(i64 416, ptr %226)
  %228 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %229 = load i32, ptr %228, align 4
  %230 = getelementptr ptr, ptr %226, i32 %229
  %231 = load ptr, ptr %230, align 8
  %232 = call ptr @typegetter_wrapper(ptr %231, ptr %225)
  %233 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %234 = load ptr, ptr %233, align 8
  %235 = load ptr, ptr %6, align 8
  %236 = call ptr @llvm.invariant.start.p0(i64 416, ptr %235)
  %237 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %238 = load i32, ptr %237, align 4
  %239 = getelementptr ptr, ptr %235, i32 %238
  %240 = getelementptr ptr, ptr %239, i32 1
  %241 = load ptr, ptr %240, align 8
  %242 = call ptr @typegetter_wrapper(ptr %241, ptr %234)
  %243 = alloca [0 x ptr], align 8
  %244 = call ptr @llvm.invariant.start.p0(i64 0, ptr %243)
  %245 = call ptr @llvm.invariant.start.p0(i64 184, ptr %213)
  %246 = getelementptr ptr, ptr %213, i32 %222
  %247 = getelementptr ptr, ptr %246, i32 1
  %248 = load ptr, ptr %247, align 8
  %249 = alloca {}, align 8
  %250 = call ptr @behavior_wrapper(ptr %248, { ptr, ptr, ptr, i32 } %223, ptr %249)
  %251 = call { ptr, ptr, ptr, i32 } %250({ ptr, ptr, ptr, i32 } %223, { ptr, ptr, ptr, i32 } %223, ptr %243)
  %252 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %251, ptr %252, align 8
  %253 = call ptr @llvm.invariant.start.p0(i64 16, ptr %252)
  %254 = alloca { ptr, ptr, ptr, i32 }, align 8
  %255 = getelementptr { ptr, ptr, ptr, i32 }, ptr %252, i32 0, i32 0
  %256 = getelementptr { ptr, ptr, ptr, i32 }, ptr %254, i32 0, i32 0
  %257 = load ptr, ptr %255, align 8
  store ptr %257, ptr %256, align 8
  %258 = getelementptr { ptr, ptr, ptr, i32 }, ptr %252, i32 0, i32 1
  %259 = getelementptr { ptr, ptr, ptr, i32 }, ptr %254, i32 0, i32 1
  %260 = load ptr, ptr %258, align 8
  store ptr %260, ptr %259, align 8
  %261 = getelementptr { ptr, ptr, ptr, i32 }, ptr %252, i32 0, i32 2
  %262 = getelementptr { ptr, ptr, ptr, i32 }, ptr %254, i32 0, i32 2
  %263 = load ptr, ptr %261, align 8
  store ptr %263, ptr %262, align 8
  %264 = getelementptr { ptr, ptr, ptr, i32 }, ptr %252, i32 0, i32 3
  %265 = getelementptr { ptr, ptr, ptr, i32 }, ptr %254, i32 0, i32 3
  %266 = load i32, ptr %264, align 4
  store i32 %266, ptr %265, align 4
  call void @set_offset(ptr %254, ptr @Iterator2)
  %267 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %268 = load ptr, ptr %267, align 8
  %269 = load ptr, ptr %6, align 8
  %270 = call ptr @llvm.invariant.start.p0(i64 416, ptr %269)
  %271 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %272 = load i32, ptr %271, align 4
  %273 = getelementptr ptr, ptr %269, i32 %272
  %274 = getelementptr ptr, ptr %273, i32 4
  %275 = load ptr, ptr %274, align 8
  %276 = getelementptr { ptr, ptr }, ptr %275, i32 0, i32 0
  %277 = load ptr, ptr %276, align 8
  %278 = call { ptr, ptr, ptr, i32 } %277(ptr %268) #16
  %279 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %278, ptr %279, align 8
  %280 = call ptr @llvm.invariant.start.p0(i64 16, ptr %279)
  call void @assume_offset(ptr %279, ptr @Iterable2)
  %281 = getelementptr { ptr, ptr, ptr, i32 }, ptr %279, i32 0, i32 0
  %282 = load ptr, ptr %281, align 8
  %283 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %282, 0
  %284 = getelementptr { ptr, ptr, ptr, i32 }, ptr %279, i32 0, i32 1
  %285 = load ptr, ptr %284, align 8
  %286 = insertvalue { ptr, ptr, ptr, i32 } %283, ptr %285, 1
  %287 = getelementptr { ptr, ptr, ptr, i32 }, ptr %279, i32 0, i32 2
  %288 = load ptr, ptr %287, align 8
  %289 = insertvalue { ptr, ptr, ptr, i32 } %286, ptr %288, 2
  %290 = getelementptr { ptr, ptr, ptr, i32 }, ptr %279, i32 0, i32 3
  %291 = load i32, ptr %290, align 4
  %292 = insertvalue { ptr, ptr, ptr, i32 } %289, i32 %291, 3
  %293 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %294 = load ptr, ptr %293, align 8
  %295 = load ptr, ptr %6, align 8
  %296 = call ptr @llvm.invariant.start.p0(i64 416, ptr %295)
  %297 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %298 = load i32, ptr %297, align 4
  %299 = getelementptr ptr, ptr %295, i32 %298
  %300 = load ptr, ptr %299, align 8
  %301 = call ptr @typegetter_wrapper(ptr %300, ptr %294)
  %302 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %303 = load ptr, ptr %302, align 8
  %304 = load ptr, ptr %6, align 8
  %305 = call ptr @llvm.invariant.start.p0(i64 416, ptr %304)
  %306 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %307 = load i32, ptr %306, align 4
  %308 = getelementptr ptr, ptr %304, i32 %307
  %309 = getelementptr ptr, ptr %308, i32 1
  %310 = load ptr, ptr %309, align 8
  %311 = call ptr @typegetter_wrapper(ptr %310, ptr %303)
  %312 = alloca [0 x ptr], align 8
  %313 = call ptr @llvm.invariant.start.p0(i64 0, ptr %312)
  %314 = call ptr @llvm.invariant.start.p0(i64 184, ptr %282)
  %315 = getelementptr ptr, ptr %282, i32 %291
  %316 = getelementptr ptr, ptr %315, i32 1
  %317 = load ptr, ptr %316, align 8
  %318 = alloca {}, align 8
  %319 = call ptr @behavior_wrapper(ptr %317, { ptr, ptr, ptr, i32 } %292, ptr %318)
  %320 = call { ptr, ptr, ptr, i32 } %319({ ptr, ptr, ptr, i32 } %292, { ptr, ptr, ptr, i32 } %292, ptr %312)
  %321 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %320, ptr %321, align 8
  %322 = call ptr @llvm.invariant.start.p0(i64 16, ptr %321)
  %323 = alloca { ptr, ptr, ptr, i32 }, align 8
  %324 = getelementptr { ptr, ptr, ptr, i32 }, ptr %321, i32 0, i32 0
  %325 = getelementptr { ptr, ptr, ptr, i32 }, ptr %323, i32 0, i32 0
  %326 = load ptr, ptr %324, align 8
  store ptr %326, ptr %325, align 8
  %327 = getelementptr { ptr, ptr, ptr, i32 }, ptr %321, i32 0, i32 1
  %328 = getelementptr { ptr, ptr, ptr, i32 }, ptr %323, i32 0, i32 1
  %329 = load ptr, ptr %327, align 8
  store ptr %329, ptr %328, align 8
  %330 = getelementptr { ptr, ptr, ptr, i32 }, ptr %321, i32 0, i32 2
  %331 = getelementptr { ptr, ptr, ptr, i32 }, ptr %323, i32 0, i32 2
  %332 = load ptr, ptr %330, align 8
  store ptr %332, ptr %331, align 8
  %333 = getelementptr { ptr, ptr, ptr, i32 }, ptr %321, i32 0, i32 3
  %334 = getelementptr { ptr, ptr, ptr, i32 }, ptr %323, i32 0, i32 3
  %335 = load i32, ptr %333, align 4
  store i32 %335, ptr %334, align 4
  call void @set_offset(ptr %323, ptr @Iterator2)
  %336 = alloca { ptr, ptr, ptr, i32 }, align 8
  %337 = getelementptr { ptr, ptr, ptr, i32 }, ptr %254, i32 0, i32 0
  %338 = getelementptr { ptr, ptr, ptr, i32 }, ptr %336, i32 0, i32 0
  %339 = load ptr, ptr %337, align 8
  store ptr %339, ptr %338, align 8
  %340 = getelementptr { ptr, ptr, ptr, i32 }, ptr %254, i32 0, i32 1
  %341 = getelementptr { ptr, ptr, ptr, i32 }, ptr %336, i32 0, i32 1
  %342 = load ptr, ptr %340, align 8
  store ptr %342, ptr %341, align 8
  %343 = getelementptr { ptr, ptr, ptr, i32 }, ptr %254, i32 0, i32 2
  %344 = getelementptr { ptr, ptr, ptr, i32 }, ptr %336, i32 0, i32 2
  %345 = load ptr, ptr %343, align 8
  store ptr %345, ptr %344, align 8
  %346 = getelementptr { ptr, ptr, ptr, i32 }, ptr %254, i32 0, i32 3
  %347 = getelementptr { ptr, ptr, ptr, i32 }, ptr %336, i32 0, i32 3
  %348 = load i32, ptr %346, align 4
  store i32 %348, ptr %347, align 4
  call void @set_offset(ptr %336, ptr @Iterator2)
  %349 = getelementptr { ptr, ptr, ptr, i32 }, ptr %336, i32 0, i32 0
  %350 = load ptr, ptr %349, align 8
  %351 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %350, 0
  %352 = getelementptr { ptr, ptr, ptr, i32 }, ptr %336, i32 0, i32 1
  %353 = load ptr, ptr %352, align 8
  %354 = insertvalue { ptr, ptr, ptr, i32 } %351, ptr %353, 1
  %355 = getelementptr { ptr, ptr, ptr, i32 }, ptr %336, i32 0, i32 2
  %356 = load ptr, ptr %355, align 8
  %357 = insertvalue { ptr, ptr, ptr, i32 } %354, ptr %356, 2
  %358 = getelementptr { ptr, ptr, ptr, i32 }, ptr %336, i32 0, i32 3
  %359 = load i32, ptr %358, align 4
  %360 = insertvalue { ptr, ptr, ptr, i32 } %357, i32 %359, 3
  %361 = alloca { ptr, ptr, ptr, i32 }, align 8
  %362 = getelementptr { ptr, ptr, ptr, i32 }, ptr %323, i32 0, i32 0
  %363 = getelementptr { ptr, ptr, ptr, i32 }, ptr %361, i32 0, i32 0
  %364 = load ptr, ptr %362, align 8
  store ptr %364, ptr %363, align 8
  %365 = getelementptr { ptr, ptr, ptr, i32 }, ptr %323, i32 0, i32 1
  %366 = getelementptr { ptr, ptr, ptr, i32 }, ptr %361, i32 0, i32 1
  %367 = load ptr, ptr %365, align 8
  store ptr %367, ptr %366, align 8
  %368 = getelementptr { ptr, ptr, ptr, i32 }, ptr %323, i32 0, i32 2
  %369 = getelementptr { ptr, ptr, ptr, i32 }, ptr %361, i32 0, i32 2
  %370 = load ptr, ptr %368, align 8
  store ptr %370, ptr %369, align 8
  %371 = getelementptr { ptr, ptr, ptr, i32 }, ptr %323, i32 0, i32 3
  %372 = getelementptr { ptr, ptr, ptr, i32 }, ptr %361, i32 0, i32 3
  %373 = load i32, ptr %371, align 4
  store i32 %373, ptr %372, align 4
  call void @set_offset(ptr %361, ptr @Iterator2)
  %374 = getelementptr { ptr, ptr, ptr, i32 }, ptr %361, i32 0, i32 0
  %375 = load ptr, ptr %374, align 8
  %376 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %375, 0
  %377 = getelementptr { ptr, ptr, ptr, i32 }, ptr %361, i32 0, i32 1
  %378 = load ptr, ptr %377, align 8
  %379 = insertvalue { ptr, ptr, ptr, i32 } %376, ptr %378, 1
  %380 = getelementptr { ptr, ptr, ptr, i32 }, ptr %361, i32 0, i32 2
  %381 = load ptr, ptr %380, align 8
  %382 = insertvalue { ptr, ptr, ptr, i32 } %379, ptr %381, 2
  %383 = getelementptr { ptr, ptr, ptr, i32 }, ptr %361, i32 0, i32 3
  %384 = load i32, ptr %383, align 4
  %385 = insertvalue { ptr, ptr, ptr, i32 } %382, i32 %384, 3
  %386 = getelementptr { ptr, ptr, ptr, i32 }, ptr %194, i32 0, i32 0
  %387 = load ptr, ptr %386, align 8
  %388 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %387, 0
  %389 = getelementptr { ptr, ptr, ptr, i32 }, ptr %194, i32 0, i32 1
  %390 = load ptr, ptr %389, align 8
  %391 = insertvalue { ptr, ptr, ptr, i32 } %388, ptr %390, 1
  %392 = getelementptr { ptr, ptr, ptr, i32 }, ptr %194, i32 0, i32 2
  %393 = load ptr, ptr %392, align 8
  %394 = insertvalue { ptr, ptr, ptr, i32 } %391, ptr %393, 2
  %395 = getelementptr { ptr, ptr, ptr, i32 }, ptr %194, i32 0, i32 3
  %396 = load i32, ptr %395, align 4
  %397 = insertvalue { ptr, ptr, ptr, i32 } %394, i32 %396, 3
  %398 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %399 = load ptr, ptr %398, align 8
  %400 = load ptr, ptr %6, align 8
  %401 = call ptr @llvm.invariant.start.p0(i64 416, ptr %400)
  %402 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %403 = load i32, ptr %402, align 4
  %404 = getelementptr ptr, ptr %400, i32 %403
  %405 = load ptr, ptr %404, align 8
  %406 = call ptr @typegetter_wrapper(ptr %405, ptr %399)
  %407 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %408 = load ptr, ptr %407, align 8
  %409 = load ptr, ptr %6, align 8
  %410 = call ptr @llvm.invariant.start.p0(i64 416, ptr %409)
  %411 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %412 = load i32, ptr %411, align 4
  %413 = getelementptr ptr, ptr %409, i32 %412
  %414 = getelementptr ptr, ptr %413, i32 1
  %415 = load ptr, ptr %414, align 8
  %416 = call ptr @typegetter_wrapper(ptr %415, ptr %408)
  %417 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %418 = getelementptr [3 x ptr], ptr %417, i32 0, i32 1
  store ptr %406, ptr %418, align 8
  %419 = getelementptr [3 x ptr], ptr %417, i32 0, i32 2
  store ptr null, ptr %419, align 8
  %420 = call ptr @llvm.invariant.start.p0(i64 16, ptr %417)
  store ptr @Iterator2, ptr %417, align 8
  %421 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %422 = getelementptr [3 x ptr], ptr %421, i32 0, i32 1
  store ptr %416, ptr %422, align 8
  %423 = getelementptr [3 x ptr], ptr %421, i32 0, i32 2
  store ptr null, ptr %423, align 8
  %424 = call ptr @llvm.invariant.start.p0(i64 16, ptr %421)
  store ptr @Iterator2, ptr %421, align 8
  %425 = alloca [2 x ptr], align 8
  %426 = getelementptr [2 x ptr], ptr %425, i32 0, i32 0
  store ptr %417, ptr %426, align 8
  %427 = getelementptr [2 x ptr], ptr %425, i32 0, i32 1
  store ptr %421, ptr %427, align 8
  %428 = call ptr @llvm.invariant.start.p0(i64 4, ptr %425)
  %429 = call ptr @llvm.invariant.start.p0(i64 96, ptr %387)
  %430 = getelementptr ptr, ptr %387, i32 %396
  %431 = getelementptr ptr, ptr %430, i32 5
  %432 = load ptr, ptr %431, align 8
  %433 = alloca { ptr, ptr }, align 8
  %434 = getelementptr { ptr, ptr }, ptr %433, i32 0, i32 0
  store ptr %350, ptr %434, align 8
  %435 = getelementptr { ptr, ptr }, ptr %433, i32 0, i32 1
  store ptr %375, ptr %435, align 8
  %436 = call ptr @behavior_wrapper(ptr %432, { ptr, ptr, ptr, i32 } %397, ptr %433)
  call void %436({ ptr, ptr, ptr, i32 } %397, { ptr, ptr, ptr, i32 } %397, ptr %425, { ptr, ptr, ptr, i32 } %360, { ptr, ptr, ptr, i32 } %385)
  %437 = alloca { ptr, ptr, ptr, i32 }, align 8
  %438 = getelementptr { ptr, ptr, ptr, i32 }, ptr %194, i32 0, i32 0
  %439 = getelementptr { ptr, ptr, ptr, i32 }, ptr %437, i32 0, i32 0
  %440 = load ptr, ptr %438, align 8
  store ptr %440, ptr %439, align 8
  %441 = getelementptr { ptr, ptr, ptr, i32 }, ptr %194, i32 0, i32 1
  %442 = getelementptr { ptr, ptr, ptr, i32 }, ptr %437, i32 0, i32 1
  %443 = load ptr, ptr %441, align 8
  store ptr %443, ptr %442, align 8
  %444 = getelementptr { ptr, ptr, ptr, i32 }, ptr %194, i32 0, i32 2
  %445 = getelementptr { ptr, ptr, ptr, i32 }, ptr %437, i32 0, i32 2
  %446 = load ptr, ptr %444, align 8
  store ptr %446, ptr %445, align 8
  %447 = getelementptr { ptr, ptr, ptr, i32 }, ptr %194, i32 0, i32 3
  %448 = getelementptr { ptr, ptr, ptr, i32 }, ptr %437, i32 0, i32 3
  %449 = load i32, ptr %447, align 4
  store i32 %449, ptr %448, align 4
  call void @set_offset(ptr %437, ptr @Iterator2)
  %450 = getelementptr { ptr, ptr, ptr, i32 }, ptr %437, i32 0, i32 0
  %451 = load ptr, ptr %450, align 8
  %452 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %451, 0
  %453 = getelementptr { ptr, ptr, ptr, i32 }, ptr %437, i32 0, i32 1
  %454 = load ptr, ptr %453, align 8
  %455 = insertvalue { ptr, ptr, ptr, i32 } %452, ptr %454, 1
  %456 = getelementptr { ptr, ptr, ptr, i32 }, ptr %437, i32 0, i32 2
  %457 = load ptr, ptr %456, align 8
  %458 = insertvalue { ptr, ptr, ptr, i32 } %455, ptr %457, 2
  %459 = getelementptr { ptr, ptr, ptr, i32 }, ptr %437, i32 0, i32 3
  %460 = load i32, ptr %459, align 4
  %461 = insertvalue { ptr, ptr, ptr, i32 } %458, i32 %460, 3
  ret { ptr, ptr, ptr, i32 } %461
}

define { i64, i64 } @_size_ZipIterator2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %29 = select i1 %28, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %21
  %30 = urem i64 %27, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %31 = icmp eq i64 %30, 0
  %32 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %30
  %33 = select i1 %31, i64 0, i64 %32
  %34 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %33
  %35 = add i64 %27, %34
  %36 = urem i64 %35, %29
  %37 = icmp eq i64 %36, 0
  %38 = sub i64 %29, %36
  %39 = select i1 %37, i64 0, i64 %38
  %40 = add i64 %35, %39
  %41 = insertvalue { i64, i64 } undef, i64 %40, 0
  %42 = insertvalue { i64, i64 } %41, i64 %29, 1
  ret { i64, i64 } %42
}

define ptr @ZipIterator2_field_ZipIterator2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @ZipIterator2_field_ZipIterator2_1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 1
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @ZipIterator2_field_ZipIterator2_2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 2
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @ZipIterator2_B_init_firstIterator2T_secondIterator2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 4189192806087951739, i64 ptrtoint (ptr @Iterator2 to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 4189192806087951739, i64 ptrtoint (ptr @Iterator2 to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [12 x ptr], ptr %26, i32 0, i32 7
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @ZipIterator2_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [12 x ptr], ptr %4, i32 0, i32 8
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @ZipIterator2_init_firstIterator2T_secondIterator2U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @ZipIterator2)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @Iterator2)
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %45 = load ptr, ptr %43, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %48 = load i32, ptr %46, align 4
  store i32 %48, ptr %47, align 4
  call void @set_offset(ptr %36, ptr @Iterator2)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %8, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 96, ptr %51)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = getelementptr ptr, ptr %51, i32 %54
  %56 = getelementptr ptr, ptr %55, i32 3
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr { ptr, ptr }, ptr %57, i32 0, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %61 = load ptr, ptr %60, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %61, 0
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %64 = load ptr, ptr %63, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %62, ptr %64, 1
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %67 = load ptr, ptr %66, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %67, 2
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %70 = load i32, ptr %69, align 4
  %71 = insertvalue { ptr, ptr, ptr, i32 } %68, i32 %70, 3
  call void %59(ptr %50, { ptr, ptr, ptr, i32 } %71) #15
  %72 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %72, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 16, ptr %72)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 0
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 1
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 2
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %83 = load ptr, ptr %81, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 3
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %86 = load i32, ptr %84, align 4
  store i32 %86, ptr %85, align 4
  call void @set_offset(ptr %74, ptr @Iterator2)
  %87 = alloca { ptr, ptr, ptr, i32 }, align 8
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 0
  %90 = load ptr, ptr %88, align 8
  store ptr %90, ptr %89, align 8
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 1
  %93 = load ptr, ptr %91, align 8
  store ptr %93, ptr %92, align 8
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 2
  %96 = load ptr, ptr %94, align 8
  store ptr %96, ptr %95, align 8
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 3
  %99 = load i32, ptr %97, align 4
  store i32 %99, ptr %98, align 4
  call void @set_offset(ptr %87, ptr @Iterator2)
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %101 = load ptr, ptr %100, align 8
  %102 = load ptr, ptr %8, align 8
  %103 = call ptr @llvm.invariant.start.p0(i64 96, ptr %102)
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %105 = load i32, ptr %104, align 4
  %106 = getelementptr ptr, ptr %102, i32 %105
  %107 = getelementptr ptr, ptr %106, i32 4
  %108 = load ptr, ptr %107, align 8
  %109 = getelementptr { ptr, ptr }, ptr %108, i32 0, i32 1
  %110 = load ptr, ptr %109, align 8
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 0
  %112 = load ptr, ptr %111, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %112, 0
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 1
  %115 = load ptr, ptr %114, align 8
  %116 = insertvalue { ptr, ptr, ptr, i32 } %113, ptr %115, 1
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 2
  %118 = load ptr, ptr %117, align 8
  %119 = insertvalue { ptr, ptr, ptr, i32 } %116, ptr %118, 2
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 3
  %121 = load i32, ptr %120, align 4
  %122 = insertvalue { ptr, ptr, ptr, i32 } %119, i32 %121, 3
  call void %110(ptr %101, { ptr, ptr, ptr, i32 } %122) #15
  ret void
}

define { ptr, i160 } @ZipIterator2_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i160, align 8
  %5 = alloca ptr, align 8
  %6 = alloca i160, align 8
  %7 = alloca ptr, align 8
  %8 = alloca [3 x ptr], align 8
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = alloca i160, align 8
  %11 = alloca ptr, align 8
  %12 = alloca i160, align 8
  %13 = alloca ptr, align 8
  %14 = alloca [2 x ptr], align 8
  %15 = alloca { ptr, ptr }, align 8
  %16 = alloca i160, align 8
  %17 = alloca ptr, align 8
  %18 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca { ptr, i160 }, align 8
  %.reg2mem7 = alloca { ptr, i160 }, align 8
  %.reg2mem9 = alloca i32, align 4
  %.reg2mem11 = alloca { ptr, i160 }, align 8
  %.reg2mem13 = alloca i32, align 4
  %.reg2mem15 = alloca { ptr, i160 }, align 8
  %.reg2mem17 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %18, align 8
  %19 = call ptr @llvm.invariant.start.p0(i64 16, ptr %18)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = load i32, ptr %30, align 4
  store i32 %32, ptr %31, align 4
  call void @set_offset(ptr %20, ptr @ZipIterator2)
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %34 = load ptr, ptr %33, align 8
  %35 = load ptr, ptr %20, align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 96, ptr %35)
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %38 = load i32, ptr %37, align 4
  %39 = getelementptr ptr, ptr %35, i32 %38
  %40 = getelementptr ptr, ptr %39, i32 3
  %41 = load ptr, ptr %40, align 8
  %42 = getelementptr { ptr, ptr }, ptr %41, i32 0, i32 0
  %43 = load ptr, ptr %42, align 8
  %44 = call { ptr, ptr, ptr, i32 } %43(ptr %34) #16
  %45 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %44, ptr %45, align 8
  %46 = call ptr @llvm.invariant.start.p0(i64 16, ptr %45)
  call void @assume_offset(ptr %45, ptr @Iterator2)
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %48 = load ptr, ptr %47, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %48, 0
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } %49, ptr %51, 1
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %54 = load ptr, ptr %53, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %54, 2
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %57 = load i32, ptr %56, align 4
  %58 = insertvalue { ptr, ptr, ptr, i32 } %55, i32 %57, 3
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %60 = load ptr, ptr %59, align 8
  %61 = load ptr, ptr %20, align 8
  %62 = call ptr @llvm.invariant.start.p0(i64 96, ptr %61)
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %64 = load i32, ptr %63, align 4
  %65 = getelementptr ptr, ptr %61, i32 %64
  %66 = load ptr, ptr %65, align 8
  %67 = call ptr @typegetter_wrapper(ptr %66, ptr %60)
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = load ptr, ptr %20, align 8
  %71 = call ptr @llvm.invariant.start.p0(i64 96, ptr %70)
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %73 = load i32, ptr %72, align 4
  %74 = getelementptr ptr, ptr %70, i32 %73
  %75 = getelementptr ptr, ptr %74, i32 1
  %76 = load ptr, ptr %75, align 8
  %77 = call ptr @typegetter_wrapper(ptr %76, ptr %69)
  %78 = alloca [0 x ptr], align 8
  %79 = call ptr @llvm.invariant.start.p0(i64 0, ptr %78)
  %80 = call ptr @llvm.invariant.start.p0(i64 24, ptr %48)
  %81 = getelementptr ptr, ptr %48, i32 %57
  %82 = getelementptr ptr, ptr %81, i32 1
  %83 = load ptr, ptr %82, align 8
  %84 = alloca {}, align 8
  %85 = call ptr @behavior_wrapper(ptr %83, { ptr, ptr, ptr, i32 } %58, ptr %84)
  %86 = call { ptr, i160 } %85({ ptr, ptr, ptr, i32 } %58, { ptr, ptr, ptr, i32 } %58, ptr %78)
  %87 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %86, ptr %87, align 8
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %89 = load ptr, ptr %88, align 8
  %90 = load ptr, ptr %20, align 8
  %91 = call ptr @llvm.invariant.start.p0(i64 96, ptr %90)
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %93 = load i32, ptr %92, align 4
  %94 = getelementptr ptr, ptr %90, i32 %93
  %95 = getelementptr ptr, ptr %94, i32 4
  %96 = load ptr, ptr %95, align 8
  %97 = getelementptr { ptr, ptr }, ptr %96, i32 0, i32 0
  %98 = load ptr, ptr %97, align 8
  %99 = call { ptr, ptr, ptr, i32 } %98(ptr %89) #16
  %100 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %99, ptr %100, align 8
  %101 = call ptr @llvm.invariant.start.p0(i64 16, ptr %100)
  call void @assume_offset(ptr %100, ptr @Iterator2)
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %100, i32 0, i32 0
  %103 = load ptr, ptr %102, align 8
  %104 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %103, 0
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %100, i32 0, i32 1
  %106 = load ptr, ptr %105, align 8
  %107 = insertvalue { ptr, ptr, ptr, i32 } %104, ptr %106, 1
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %100, i32 0, i32 2
  %109 = load ptr, ptr %108, align 8
  %110 = insertvalue { ptr, ptr, ptr, i32 } %107, ptr %109, 2
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %100, i32 0, i32 3
  %112 = load i32, ptr %111, align 4
  %113 = insertvalue { ptr, ptr, ptr, i32 } %110, i32 %112, 3
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %115 = load ptr, ptr %114, align 8
  %116 = load ptr, ptr %20, align 8
  %117 = call ptr @llvm.invariant.start.p0(i64 96, ptr %116)
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %119 = load i32, ptr %118, align 4
  %120 = getelementptr ptr, ptr %116, i32 %119
  %121 = load ptr, ptr %120, align 8
  %122 = call ptr @typegetter_wrapper(ptr %121, ptr %115)
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %124 = load ptr, ptr %123, align 8
  %125 = load ptr, ptr %20, align 8
  %126 = call ptr @llvm.invariant.start.p0(i64 96, ptr %125)
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %128 = load i32, ptr %127, align 4
  %129 = getelementptr ptr, ptr %125, i32 %128
  %130 = getelementptr ptr, ptr %129, i32 1
  %131 = load ptr, ptr %130, align 8
  %132 = call ptr @typegetter_wrapper(ptr %131, ptr %124)
  %133 = alloca [0 x ptr], align 8
  %134 = call ptr @llvm.invariant.start.p0(i64 0, ptr %133)
  %135 = call ptr @llvm.invariant.start.p0(i64 24, ptr %103)
  %136 = getelementptr ptr, ptr %103, i32 %112
  %137 = getelementptr ptr, ptr %136, i32 1
  %138 = load ptr, ptr %137, align 8
  %139 = alloca {}, align 8
  %140 = call ptr @behavior_wrapper(ptr %138, { ptr, ptr, ptr, i32 } %113, ptr %139)
  %141 = call { ptr, i160 } %140({ ptr, ptr, ptr, i32 } %113, { ptr, ptr, ptr, i32 } %113, ptr %133)
  %142 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %141, ptr %142, align 8
  %143 = getelementptr { ptr, i160 }, ptr %87, i32 0, i32 0
  %144 = load ptr, ptr %143, align 8
  %145 = ptrtoint ptr %144 to i64
  %146 = icmp eq i64 %145, ptrtoint (ptr @nil_typ to i64)
  %147 = icmp eq i64 %145, 0
  %148 = or i1 %146, %147
  %149 = icmp eq i1 %148, false
  br i1 %149, label %150, label %267

150:                                              ; preds = %3
  %151 = getelementptr { ptr, i160 }, ptr %87, i32 0, i32 0
  %152 = load ptr, ptr %151, align 8
  store ptr %152, ptr %5, align 8
  %153 = getelementptr { ptr, i160 }, ptr %87, i32 0, i32 1
  %154 = load i160, ptr %153, align 4
  store i160 %154, ptr %4, align 4
  %155 = getelementptr { ptr, i160 }, ptr %142, i32 0, i32 0
  %156 = load ptr, ptr %155, align 8
  %157 = ptrtoint ptr %156 to i64
  %158 = icmp eq i64 %157, ptrtoint (ptr @nil_typ to i64)
  %159 = icmp eq i64 %157, 0
  %160 = or i1 %158, %159
  %161 = icmp eq i1 %160, false
  %162 = icmp ne i1 %160, false
  %163 = zext i1 %162 to i32
  store i32 %163, ptr %.reg2mem9, align 4
  br i1 %161, label %164, label %260

164:                                              ; preds = %150
  %165 = getelementptr { ptr, i160 }, ptr %142, i32 0, i32 0
  %166 = load ptr, ptr %165, align 8
  store ptr %166, ptr %7, align 8
  %167 = getelementptr { ptr, i160 }, ptr %142, i32 0, i32 1
  %168 = load i160, ptr %167, align 4
  store i160 %168, ptr %6, align 4
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %170 = load ptr, ptr %169, align 8
  %171 = load ptr, ptr %20, align 8
  %172 = call ptr @llvm.invariant.start.p0(i64 96, ptr %171)
  %173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %174 = load i32, ptr %173, align 4
  %175 = getelementptr ptr, ptr %171, i32 %174
  %176 = load ptr, ptr %175, align 8
  %177 = call ptr @typegetter_wrapper(ptr %176, ptr %170)
  %178 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %179 = load ptr, ptr %178, align 8
  %180 = load ptr, ptr %20, align 8
  %181 = call ptr @llvm.invariant.start.p0(i64 96, ptr %180)
  %182 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %183 = load i32, ptr %182, align 4
  %184 = getelementptr ptr, ptr %180, i32 %183
  %185 = getelementptr ptr, ptr %184, i32 1
  %186 = load ptr, ptr %185, align 8
  %187 = call ptr @typegetter_wrapper(ptr %186, ptr %179)
  store ptr @Pair, ptr %8, align 8
  %188 = getelementptr ptr, ptr %8, i32 1
  store ptr %177, ptr %188, align 8
  %189 = getelementptr ptr, ptr %8, i32 2
  store ptr %187, ptr %189, align 8
  %190 = load ptr, ptr %8, align 8
  %191 = getelementptr ptr, ptr %190, i32 6
  %192 = load ptr, ptr %191, align 8
  %193 = call { i64, i64 } @size_wrapper(ptr %192, ptr %8)
  %194 = extractvalue { i64, i64 } %193, 0
  %195 = call ptr @bump_malloc(i64 %194)
  store ptr %177, ptr %195, align 8
  %196 = getelementptr ptr, ptr %195, i32 1
  store ptr %187, ptr %196, align 8
  %197 = call ptr @llvm.invariant.start.p0(i64 16, ptr %195)
  %198 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %199 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  store ptr @Pair, ptr %9, align 8
  store ptr %195, ptr %198, align 8
  store i32 9, ptr %199, align 4
  %200 = call ptr @llvm.invariant.start.p0(i64 16, ptr %9)
  %201 = load ptr, ptr %5, align 8
  store ptr %201, ptr %11, align 8
  %202 = load i160, ptr %4, align 4
  store i160 %202, ptr %10, align 4
  %203 = load ptr, ptr %11, align 8
  %204 = insertvalue { ptr, i160 } undef, ptr %203, 0
  %205 = load i160, ptr %10, align 4
  %206 = insertvalue { ptr, i160 } %204, i160 %205, 1
  %207 = load ptr, ptr %7, align 8
  store ptr %207, ptr %13, align 8
  %208 = load i160, ptr %6, align 4
  store i160 %208, ptr %12, align 4
  %209 = load ptr, ptr %13, align 8
  %210 = insertvalue { ptr, i160 } undef, ptr %209, 0
  %211 = load i160, ptr %12, align 4
  %212 = insertvalue { ptr, i160 } %210, i160 %211, 1
  %213 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %214 = load ptr, ptr %213, align 8
  %215 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %214, 0
  %216 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %217 = load ptr, ptr %216, align 8
  %218 = insertvalue { ptr, ptr, ptr, i32 } %215, ptr %217, 1
  %219 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %220 = load ptr, ptr %219, align 8
  %221 = insertvalue { ptr, ptr, ptr, i32 } %218, ptr %220, 2
  %222 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %223 = load i32, ptr %222, align 4
  %224 = insertvalue { ptr, ptr, ptr, i32 } %221, i32 %223, 3
  %225 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %226 = load ptr, ptr %225, align 8
  %227 = load ptr, ptr %20, align 8
  %228 = call ptr @llvm.invariant.start.p0(i64 96, ptr %227)
  %229 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %230 = load i32, ptr %229, align 4
  %231 = getelementptr ptr, ptr %227, i32 %230
  %232 = load ptr, ptr %231, align 8
  %233 = call ptr @typegetter_wrapper(ptr %232, ptr %226)
  %234 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %235 = load ptr, ptr %234, align 8
  %236 = load ptr, ptr %20, align 8
  %237 = call ptr @llvm.invariant.start.p0(i64 96, ptr %236)
  %238 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %239 = load i32, ptr %238, align 4
  %240 = getelementptr ptr, ptr %236, i32 %239
  %241 = getelementptr ptr, ptr %240, i32 1
  %242 = load ptr, ptr %241, align 8
  %243 = call ptr @typegetter_wrapper(ptr %242, ptr %235)
  %244 = getelementptr [2 x ptr], ptr %14, i32 0, i32 0
  store ptr %233, ptr %244, align 8
  %245 = getelementptr [2 x ptr], ptr %14, i32 0, i32 1
  store ptr %243, ptr %245, align 8
  %246 = call ptr @llvm.invariant.start.p0(i64 4, ptr %14)
  %247 = call ptr @llvm.invariant.start.p0(i64 80, ptr %214)
  %248 = getelementptr ptr, ptr %214, i32 %223
  %249 = getelementptr ptr, ptr %248, i32 4
  %250 = load ptr, ptr %249, align 8
  %251 = getelementptr { ptr, ptr }, ptr %15, i32 0, i32 0
  store ptr %203, ptr %251, align 8
  %252 = getelementptr { ptr, ptr }, ptr %15, i32 0, i32 1
  store ptr %209, ptr %252, align 8
  %253 = call ptr @behavior_wrapper(ptr %250, { ptr, ptr, ptr, i32 } %224, ptr %15)
  call void %253({ ptr, ptr, ptr, i32 } %224, { ptr, ptr, ptr, i32 } %224, ptr %14, { ptr, i160 } %206, { ptr, i160 } %212)
  %254 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 0
  %255 = load ptr, ptr %254, align 8
  %256 = insertvalue { ptr, i160 } undef, ptr %255, 0
  %257 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 1
  %258 = load i160, ptr %257, align 4
  %259 = insertvalue { ptr, i160 } %256, i160 %258, 1
  store { ptr, i160 } %259, ptr %.reg2mem7, align 8
  %.reload8 = load { ptr, i160 }, ptr %.reg2mem7, align 8
  store { ptr, i160 } %.reload8, ptr %.reg2mem17, align 8
  br label %265

260:                                              ; preds = %150
  %261 = getelementptr { ptr, i160 }, ptr %87, i32 0, i32 0
  %262 = load ptr, ptr %5, align 8
  store ptr %262, ptr %261, align 8
  %263 = getelementptr { ptr, i160 }, ptr %87, i32 0, i32 1
  %264 = load i160, ptr %4, align 4
  store i160 %264, ptr %263, align 4
  store { ptr, i160 } poison, ptr %.reg2mem17, align 8
  br label %265

265:                                              ; preds = %260, %164
  %.reload18 = load { ptr, i160 }, ptr %.reg2mem17, align 8
  store { ptr, i160 } %.reload18, ptr %.reg2mem5, align 8
  br label %266

266:                                              ; preds = %265
  %.reload6 = load { ptr, i160 }, ptr %.reg2mem5, align 8
  %.reload10 = load i32, ptr %.reg2mem9, align 4
  store i32 %.reload10, ptr %.reg2mem13, align 4
  store { ptr, i160 } %.reload6, ptr %.reg2mem15, align 8
  br label %268

267:                                              ; preds = %3
  store i32 1, ptr %.reg2mem13, align 4
  store { ptr, i160 } poison, ptr %.reg2mem15, align 8
  br label %268

268:                                              ; preds = %267, %266
  %.reload16 = load { ptr, i160 }, ptr %.reg2mem15, align 8
  %.reload14 = load i32, ptr %.reg2mem13, align 4
  store { ptr, i160 } %.reload16, ptr %.reg2mem3, align 8
  store i32 %.reload14, ptr %.reg2mem1, align 4
  br label %269

269:                                              ; preds = %268
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  %270 = zext i32 %.reload2 to i64
  %271 = trunc i64 %270 to i32
  switch i32 %271, label %273 [
    i32 0, label %272
  ]

272:                                              ; preds = %269
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem11, align 8
  br label %278

273:                                              ; preds = %269
  store [0 x i8] undef, ptr %16, align 1
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %17, align 4
  %274 = load ptr, ptr %17, align 8
  %275 = insertvalue { ptr, i160 } undef, ptr %274, 0
  %276 = load i160, ptr %16, align 4
  %277 = insertvalue { ptr, i160 } %275, i160 %276, 1
  store { ptr, i160 } %277, ptr %.reg2mem, align 8
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  store { ptr, i160 } %.reload, ptr %.reg2mem11, align 8
  br label %278

278:                                              ; preds = %273, %272
  %.reload12 = load { ptr, i160 }, ptr %.reg2mem11, align 8
  ret { ptr, i160 } %.reload12
}

define { ptr, ptr, ptr, i32 } @ZipIterator2_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %13, %18
  %20 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = getelementptr i8, ptr %0, i64 %24
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 0
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %27, 0
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, ptr %30, 1
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 2
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %33, 2
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 3
  %36 = load i32, ptr %35, align 4
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, i32 %36, 3
  ret { ptr, ptr, ptr, i32 } %37
}

define void @ZipIterator2_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %18
  %20 = add i64 %14, %19
  %21 = urem i64 %20, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %22 = icmp eq i64 %21, 0
  %23 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %24 = select i1 %22, i64 0, i64 %23
  %25 = add i64 %20, %24
  %26 = getelementptr i8, ptr %0, i64 %25
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %27, align 8
  %28 = call ptr @llvm.invariant.start.p0(i64 16, ptr %27)
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %34 = load ptr, ptr %32, align 8
  store ptr %34, ptr %33, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %37 = load ptr, ptr %35, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %40 = load i32, ptr %38, align 4
  store i32 %40, ptr %39, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ZipIterator2_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %21, 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %24, 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } %25, ptr %27, 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %30 = load i32, ptr %29, align 4
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, i32 %30, 3
  ret { ptr, ptr, ptr, i32 } %31
}

define void @ZipIterator2_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %34 = load i32, ptr %32, align 4
  store i32 %34, ptr %33, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ZipIterable2_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %13, %18
  %20 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = getelementptr i8, ptr %0, i64 %24
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 0
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %27, 0
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, ptr %30, 1
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 2
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %33, 2
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 3
  %36 = load i32, ptr %35, align 4
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, i32 %36, 3
  ret { ptr, ptr, ptr, i32 } %37
}

define void @ZipIterable2_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %18
  %20 = add i64 %14, %19
  %21 = urem i64 %20, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %22 = icmp eq i64 %21, 0
  %23 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %21
  %24 = select i1 %22, i64 0, i64 %23
  %25 = add i64 %20, %24
  %26 = getelementptr i8, ptr %0, i64 %25
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %27, align 8
  %28 = call ptr @llvm.invariant.start.p0(i64 16, ptr %27)
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 0
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 1
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %34 = load ptr, ptr %32, align 8
  store ptr %34, ptr %33, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 2
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %37 = load ptr, ptr %35, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %27, i32 0, i32 3
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %40 = load i32, ptr %38, align 4
  store i32 %40, ptr %39, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ZipIterable2_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %21, 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %24, 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } %25, ptr %27, 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %30 = load i32, ptr %29, align 4
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, i32 %30, 3
  ret { ptr, ptr, ptr, i32 } %31
}

define void @ZipIterable2_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %34 = load i32, ptr %32, align 4
  store i32 %34, ptr %33, align 4
  ret void
}

define { i64, i64 } @_size_InterleaveIterable2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @InterleaveIterable2_field_InterleaveIterable2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @InterleaveIterable2_B_init_firstIterable2T_secondIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [50 x ptr], ptr %26, i32 0, i32 15
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @InterleaveIterable2_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [50 x ptr], ptr %4, i32 0, i32 16
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @InterleaveIterable2_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 17
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @InterleaveIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [50 x ptr], ptr %26, i32 0, i32 18
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @InterleaveIterable2_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 19
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @InterleaveIterable2_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 20
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @InterleaveIterable2_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 21
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @InterleaveIterable2_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 22
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @InterleaveIterable2_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 23
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @InterleaveIterable2_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 24
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @InterleaveIterable2_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 25
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @InterleaveIterable2_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 26
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define void @InterleaveIterable2_init_firstIterable2T_secondIterable2T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @InterleaveIterable2)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @Iterable2)
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %45 = load ptr, ptr %43, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %48 = load i32, ptr %46, align 4
  store i32 %48, ptr %47, align 4
  call void @set_offset(ptr %36, ptr @Iterable2)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %8, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 400, ptr %51)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = getelementptr ptr, ptr %51, i32 %54
  %56 = getelementptr ptr, ptr %55, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr { ptr, ptr }, ptr %57, i32 0, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %61 = load ptr, ptr %60, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %61, 0
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %64 = load ptr, ptr %63, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %62, ptr %64, 1
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %67 = load ptr, ptr %66, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %67, 2
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %70 = load i32, ptr %69, align 4
  %71 = insertvalue { ptr, ptr, ptr, i32 } %68, i32 %70, 3
  call void %59(ptr %50, { ptr, ptr, ptr, i32 } %71) #15
  %72 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %72, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 16, ptr %72)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 0
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 1
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 2
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %83 = load ptr, ptr %81, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 3
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %86 = load i32, ptr %84, align 4
  store i32 %86, ptr %85, align 4
  call void @set_offset(ptr %74, ptr @Iterable2)
  %87 = alloca { ptr, ptr, ptr, i32 }, align 8
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 0
  %90 = load ptr, ptr %88, align 8
  store ptr %90, ptr %89, align 8
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 1
  %93 = load ptr, ptr %91, align 8
  store ptr %93, ptr %92, align 8
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 2
  %96 = load ptr, ptr %94, align 8
  store ptr %96, ptr %95, align 8
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 3
  %99 = load i32, ptr %97, align 4
  store i32 %99, ptr %98, align 4
  call void @set_offset(ptr %87, ptr @Iterable2)
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %101 = load ptr, ptr %100, align 8
  %102 = load ptr, ptr %8, align 8
  %103 = call ptr @llvm.invariant.start.p0(i64 400, ptr %102)
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %105 = load i32, ptr %104, align 4
  %106 = getelementptr ptr, ptr %102, i32 %105
  %107 = getelementptr ptr, ptr %106, i32 2
  %108 = load ptr, ptr %107, align 8
  %109 = getelementptr { ptr, ptr }, ptr %108, i32 0, i32 1
  %110 = load ptr, ptr %109, align 8
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 0
  %112 = load ptr, ptr %111, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %112, 0
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 1
  %115 = load ptr, ptr %114, align 8
  %116 = insertvalue { ptr, ptr, ptr, i32 } %113, ptr %115, 1
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 2
  %118 = load ptr, ptr %117, align 8
  %119 = insertvalue { ptr, ptr, ptr, i32 } %116, ptr %118, 2
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 3
  %121 = load i32, ptr %120, align 4
  %122 = insertvalue { ptr, ptr, ptr, i32 } %119, i32 %121, 3
  call void %110(ptr %101, { ptr, ptr, ptr, i32 } %122) #15
  ret void
}

define { ptr, ptr, ptr, i32 } @InterleaveIterable2_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @InterleaveIterable2)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 400, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 1
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call { ptr, ptr, ptr, i32 } %29(ptr %20) #16
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %30, ptr %31, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 16, ptr %31)
  call void @assume_offset(ptr %31, ptr @Iterable2)
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %34 = load ptr, ptr %33, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %34, 0
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  %37 = load ptr, ptr %36, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %37, 1
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %40 = load ptr, ptr %39, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } %38, ptr %40, 2
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  %43 = load i32, ptr %42, align 4
  %44 = insertvalue { ptr, ptr, ptr, i32 } %41, i32 %43, 3
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %46 = load ptr, ptr %45, align 8
  %47 = load ptr, ptr %6, align 8
  %48 = call ptr @llvm.invariant.start.p0(i64 400, ptr %47)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %50 = load i32, ptr %49, align 4
  %51 = getelementptr ptr, ptr %47, i32 %50
  %52 = load ptr, ptr %51, align 8
  %53 = call ptr @typegetter_wrapper(ptr %52, ptr %46)
  %54 = alloca [0 x ptr], align 8
  %55 = call ptr @llvm.invariant.start.p0(i64 0, ptr %54)
  %56 = call ptr @llvm.invariant.start.p0(i64 184, ptr %34)
  %57 = getelementptr ptr, ptr %34, i32 %43
  %58 = getelementptr ptr, ptr %57, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = alloca {}, align 8
  %61 = call ptr @behavior_wrapper(ptr %59, { ptr, ptr, ptr, i32 } %44, ptr %60)
  %62 = call { ptr, ptr, ptr, i32 } %61({ ptr, ptr, ptr, i32 } %44, { ptr, ptr, ptr, i32 } %44, ptr %54)
  %63 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %62, ptr %63, align 8
  %64 = call ptr @llvm.invariant.start.p0(i64 16, ptr %63)
  %65 = alloca { ptr, ptr, ptr, i32 }, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 0
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 0
  %68 = load ptr, ptr %66, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 1
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %71 = load ptr, ptr %69, align 8
  store ptr %71, ptr %70, align 8
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 2
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 2
  %74 = load ptr, ptr %72, align 8
  store ptr %74, ptr %73, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 3
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %77 = load i32, ptr %75, align 4
  store i32 %77, ptr %76, align 4
  call void @set_offset(ptr %65, ptr @Iterator2)
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %79 = load ptr, ptr %78, align 8
  %80 = load ptr, ptr %6, align 8
  %81 = call ptr @llvm.invariant.start.p0(i64 400, ptr %80)
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %83 = load i32, ptr %82, align 4
  %84 = getelementptr ptr, ptr %80, i32 %83
  %85 = getelementptr ptr, ptr %84, i32 2
  %86 = load ptr, ptr %85, align 8
  %87 = getelementptr { ptr, ptr }, ptr %86, i32 0, i32 0
  %88 = load ptr, ptr %87, align 8
  %89 = call { ptr, ptr, ptr, i32 } %88(ptr %79) #16
  %90 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %89, ptr %90, align 8
  %91 = call ptr @llvm.invariant.start.p0(i64 16, ptr %90)
  call void @assume_offset(ptr %90, ptr @Iterable2)
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 0
  %93 = load ptr, ptr %92, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %93, 0
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 1
  %96 = load ptr, ptr %95, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr %96, 1
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 2
  %99 = load ptr, ptr %98, align 8
  %100 = insertvalue { ptr, ptr, ptr, i32 } %97, ptr %99, 2
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 3
  %102 = load i32, ptr %101, align 4
  %103 = insertvalue { ptr, ptr, ptr, i32 } %100, i32 %102, 3
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %105 = load ptr, ptr %104, align 8
  %106 = load ptr, ptr %6, align 8
  %107 = call ptr @llvm.invariant.start.p0(i64 400, ptr %106)
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %109 = load i32, ptr %108, align 4
  %110 = getelementptr ptr, ptr %106, i32 %109
  %111 = load ptr, ptr %110, align 8
  %112 = call ptr @typegetter_wrapper(ptr %111, ptr %105)
  %113 = alloca [0 x ptr], align 8
  %114 = call ptr @llvm.invariant.start.p0(i64 0, ptr %113)
  %115 = call ptr @llvm.invariant.start.p0(i64 184, ptr %93)
  %116 = getelementptr ptr, ptr %93, i32 %102
  %117 = getelementptr ptr, ptr %116, i32 1
  %118 = load ptr, ptr %117, align 8
  %119 = alloca {}, align 8
  %120 = call ptr @behavior_wrapper(ptr %118, { ptr, ptr, ptr, i32 } %103, ptr %119)
  %121 = call { ptr, ptr, ptr, i32 } %120({ ptr, ptr, ptr, i32 } %103, { ptr, ptr, ptr, i32 } %103, ptr %113)
  %122 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %121, ptr %122, align 8
  %123 = call ptr @llvm.invariant.start.p0(i64 16, ptr %122)
  %124 = alloca { ptr, ptr, ptr, i32 }, align 8
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %122, i32 0, i32 0
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %124, i32 0, i32 0
  %127 = load ptr, ptr %125, align 8
  store ptr %127, ptr %126, align 8
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %122, i32 0, i32 1
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %124, i32 0, i32 1
  %130 = load ptr, ptr %128, align 8
  store ptr %130, ptr %129, align 8
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %122, i32 0, i32 2
  %132 = getelementptr { ptr, ptr, ptr, i32 }, ptr %124, i32 0, i32 2
  %133 = load ptr, ptr %131, align 8
  store ptr %133, ptr %132, align 8
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %122, i32 0, i32 3
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %124, i32 0, i32 3
  %136 = load i32, ptr %134, align 4
  store i32 %136, ptr %135, align 4
  call void @set_offset(ptr %124, ptr @Iterator2)
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %138 = load ptr, ptr %137, align 8
  %139 = load ptr, ptr %6, align 8
  %140 = call ptr @llvm.invariant.start.p0(i64 400, ptr %139)
  %141 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %142 = load i32, ptr %141, align 4
  %143 = getelementptr ptr, ptr %139, i32 %142
  %144 = load ptr, ptr %143, align 8
  %145 = call ptr @typegetter_wrapper(ptr %144, ptr %138)
  %146 = alloca [2 x ptr], align 8
  store ptr @InterleaveIterator2, ptr %146, align 8
  %147 = getelementptr ptr, ptr %146, i32 1
  store ptr %145, ptr %147, align 8
  %148 = load ptr, ptr %146, align 8
  %149 = getelementptr ptr, ptr %148, i32 6
  %150 = load ptr, ptr %149, align 8
  %151 = call { i64, i64 } @size_wrapper(ptr %150, ptr %146)
  %152 = extractvalue { i64, i64 } %151, 0
  %153 = call ptr @bump_malloc(i64 %152)
  store ptr %145, ptr %153, align 8
  %154 = call ptr @llvm.invariant.start.p0(i64 8, ptr %153)
  %155 = alloca { ptr, ptr, ptr, i32 }, align 8
  %156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 1
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 3
  store ptr @InterleaveIterator2, ptr %155, align 8
  store ptr %153, ptr %156, align 8
  store i32 9, ptr %157, align 4
  %158 = call ptr @llvm.invariant.start.p0(i64 16, ptr %155)
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %160 = load ptr, ptr %159, align 8
  %161 = load ptr, ptr %6, align 8
  %162 = call ptr @llvm.invariant.start.p0(i64 400, ptr %161)
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %164 = load i32, ptr %163, align 4
  %165 = getelementptr ptr, ptr %161, i32 %164
  %166 = getelementptr ptr, ptr %165, i32 1
  %167 = load ptr, ptr %166, align 8
  %168 = getelementptr { ptr, ptr }, ptr %167, i32 0, i32 0
  %169 = load ptr, ptr %168, align 8
  %170 = call { ptr, ptr, ptr, i32 } %169(ptr %160) #16
  %171 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %170, ptr %171, align 8
  %172 = call ptr @llvm.invariant.start.p0(i64 16, ptr %171)
  call void @assume_offset(ptr %171, ptr @Iterable2)
  %173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %171, i32 0, i32 0
  %174 = load ptr, ptr %173, align 8
  %175 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %174, 0
  %176 = getelementptr { ptr, ptr, ptr, i32 }, ptr %171, i32 0, i32 1
  %177 = load ptr, ptr %176, align 8
  %178 = insertvalue { ptr, ptr, ptr, i32 } %175, ptr %177, 1
  %179 = getelementptr { ptr, ptr, ptr, i32 }, ptr %171, i32 0, i32 2
  %180 = load ptr, ptr %179, align 8
  %181 = insertvalue { ptr, ptr, ptr, i32 } %178, ptr %180, 2
  %182 = getelementptr { ptr, ptr, ptr, i32 }, ptr %171, i32 0, i32 3
  %183 = load i32, ptr %182, align 4
  %184 = insertvalue { ptr, ptr, ptr, i32 } %181, i32 %183, 3
  %185 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %186 = load ptr, ptr %185, align 8
  %187 = load ptr, ptr %6, align 8
  %188 = call ptr @llvm.invariant.start.p0(i64 400, ptr %187)
  %189 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %190 = load i32, ptr %189, align 4
  %191 = getelementptr ptr, ptr %187, i32 %190
  %192 = load ptr, ptr %191, align 8
  %193 = call ptr @typegetter_wrapper(ptr %192, ptr %186)
  %194 = alloca [0 x ptr], align 8
  %195 = call ptr @llvm.invariant.start.p0(i64 0, ptr %194)
  %196 = call ptr @llvm.invariant.start.p0(i64 184, ptr %174)
  %197 = getelementptr ptr, ptr %174, i32 %183
  %198 = getelementptr ptr, ptr %197, i32 1
  %199 = load ptr, ptr %198, align 8
  %200 = alloca {}, align 8
  %201 = call ptr @behavior_wrapper(ptr %199, { ptr, ptr, ptr, i32 } %184, ptr %200)
  %202 = call { ptr, ptr, ptr, i32 } %201({ ptr, ptr, ptr, i32 } %184, { ptr, ptr, ptr, i32 } %184, ptr %194)
  %203 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %202, ptr %203, align 8
  %204 = call ptr @llvm.invariant.start.p0(i64 16, ptr %203)
  %205 = alloca { ptr, ptr, ptr, i32 }, align 8
  %206 = getelementptr { ptr, ptr, ptr, i32 }, ptr %203, i32 0, i32 0
  %207 = getelementptr { ptr, ptr, ptr, i32 }, ptr %205, i32 0, i32 0
  %208 = load ptr, ptr %206, align 8
  store ptr %208, ptr %207, align 8
  %209 = getelementptr { ptr, ptr, ptr, i32 }, ptr %203, i32 0, i32 1
  %210 = getelementptr { ptr, ptr, ptr, i32 }, ptr %205, i32 0, i32 1
  %211 = load ptr, ptr %209, align 8
  store ptr %211, ptr %210, align 8
  %212 = getelementptr { ptr, ptr, ptr, i32 }, ptr %203, i32 0, i32 2
  %213 = getelementptr { ptr, ptr, ptr, i32 }, ptr %205, i32 0, i32 2
  %214 = load ptr, ptr %212, align 8
  store ptr %214, ptr %213, align 8
  %215 = getelementptr { ptr, ptr, ptr, i32 }, ptr %203, i32 0, i32 3
  %216 = getelementptr { ptr, ptr, ptr, i32 }, ptr %205, i32 0, i32 3
  %217 = load i32, ptr %215, align 4
  store i32 %217, ptr %216, align 4
  call void @set_offset(ptr %205, ptr @Iterator2)
  %218 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %219 = load ptr, ptr %218, align 8
  %220 = load ptr, ptr %6, align 8
  %221 = call ptr @llvm.invariant.start.p0(i64 400, ptr %220)
  %222 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %223 = load i32, ptr %222, align 4
  %224 = getelementptr ptr, ptr %220, i32 %223
  %225 = getelementptr ptr, ptr %224, i32 2
  %226 = load ptr, ptr %225, align 8
  %227 = getelementptr { ptr, ptr }, ptr %226, i32 0, i32 0
  %228 = load ptr, ptr %227, align 8
  %229 = call { ptr, ptr, ptr, i32 } %228(ptr %219) #16
  %230 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %229, ptr %230, align 8
  %231 = call ptr @llvm.invariant.start.p0(i64 16, ptr %230)
  call void @assume_offset(ptr %230, ptr @Iterable2)
  %232 = getelementptr { ptr, ptr, ptr, i32 }, ptr %230, i32 0, i32 0
  %233 = load ptr, ptr %232, align 8
  %234 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %233, 0
  %235 = getelementptr { ptr, ptr, ptr, i32 }, ptr %230, i32 0, i32 1
  %236 = load ptr, ptr %235, align 8
  %237 = insertvalue { ptr, ptr, ptr, i32 } %234, ptr %236, 1
  %238 = getelementptr { ptr, ptr, ptr, i32 }, ptr %230, i32 0, i32 2
  %239 = load ptr, ptr %238, align 8
  %240 = insertvalue { ptr, ptr, ptr, i32 } %237, ptr %239, 2
  %241 = getelementptr { ptr, ptr, ptr, i32 }, ptr %230, i32 0, i32 3
  %242 = load i32, ptr %241, align 4
  %243 = insertvalue { ptr, ptr, ptr, i32 } %240, i32 %242, 3
  %244 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %245 = load ptr, ptr %244, align 8
  %246 = load ptr, ptr %6, align 8
  %247 = call ptr @llvm.invariant.start.p0(i64 400, ptr %246)
  %248 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %249 = load i32, ptr %248, align 4
  %250 = getelementptr ptr, ptr %246, i32 %249
  %251 = load ptr, ptr %250, align 8
  %252 = call ptr @typegetter_wrapper(ptr %251, ptr %245)
  %253 = alloca [0 x ptr], align 8
  %254 = call ptr @llvm.invariant.start.p0(i64 0, ptr %253)
  %255 = call ptr @llvm.invariant.start.p0(i64 184, ptr %233)
  %256 = getelementptr ptr, ptr %233, i32 %242
  %257 = getelementptr ptr, ptr %256, i32 1
  %258 = load ptr, ptr %257, align 8
  %259 = alloca {}, align 8
  %260 = call ptr @behavior_wrapper(ptr %258, { ptr, ptr, ptr, i32 } %243, ptr %259)
  %261 = call { ptr, ptr, ptr, i32 } %260({ ptr, ptr, ptr, i32 } %243, { ptr, ptr, ptr, i32 } %243, ptr %253)
  %262 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %261, ptr %262, align 8
  %263 = call ptr @llvm.invariant.start.p0(i64 16, ptr %262)
  %264 = alloca { ptr, ptr, ptr, i32 }, align 8
  %265 = getelementptr { ptr, ptr, ptr, i32 }, ptr %262, i32 0, i32 0
  %266 = getelementptr { ptr, ptr, ptr, i32 }, ptr %264, i32 0, i32 0
  %267 = load ptr, ptr %265, align 8
  store ptr %267, ptr %266, align 8
  %268 = getelementptr { ptr, ptr, ptr, i32 }, ptr %262, i32 0, i32 1
  %269 = getelementptr { ptr, ptr, ptr, i32 }, ptr %264, i32 0, i32 1
  %270 = load ptr, ptr %268, align 8
  store ptr %270, ptr %269, align 8
  %271 = getelementptr { ptr, ptr, ptr, i32 }, ptr %262, i32 0, i32 2
  %272 = getelementptr { ptr, ptr, ptr, i32 }, ptr %264, i32 0, i32 2
  %273 = load ptr, ptr %271, align 8
  store ptr %273, ptr %272, align 8
  %274 = getelementptr { ptr, ptr, ptr, i32 }, ptr %262, i32 0, i32 3
  %275 = getelementptr { ptr, ptr, ptr, i32 }, ptr %264, i32 0, i32 3
  %276 = load i32, ptr %274, align 4
  store i32 %276, ptr %275, align 4
  call void @set_offset(ptr %264, ptr @Iterator2)
  %277 = alloca { ptr, ptr, ptr, i32 }, align 8
  %278 = getelementptr { ptr, ptr, ptr, i32 }, ptr %205, i32 0, i32 0
  %279 = getelementptr { ptr, ptr, ptr, i32 }, ptr %277, i32 0, i32 0
  %280 = load ptr, ptr %278, align 8
  store ptr %280, ptr %279, align 8
  %281 = getelementptr { ptr, ptr, ptr, i32 }, ptr %205, i32 0, i32 1
  %282 = getelementptr { ptr, ptr, ptr, i32 }, ptr %277, i32 0, i32 1
  %283 = load ptr, ptr %281, align 8
  store ptr %283, ptr %282, align 8
  %284 = getelementptr { ptr, ptr, ptr, i32 }, ptr %205, i32 0, i32 2
  %285 = getelementptr { ptr, ptr, ptr, i32 }, ptr %277, i32 0, i32 2
  %286 = load ptr, ptr %284, align 8
  store ptr %286, ptr %285, align 8
  %287 = getelementptr { ptr, ptr, ptr, i32 }, ptr %205, i32 0, i32 3
  %288 = getelementptr { ptr, ptr, ptr, i32 }, ptr %277, i32 0, i32 3
  %289 = load i32, ptr %287, align 4
  store i32 %289, ptr %288, align 4
  call void @set_offset(ptr %277, ptr @Iterator2)
  %290 = getelementptr { ptr, ptr, ptr, i32 }, ptr %277, i32 0, i32 0
  %291 = load ptr, ptr %290, align 8
  %292 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %291, 0
  %293 = getelementptr { ptr, ptr, ptr, i32 }, ptr %277, i32 0, i32 1
  %294 = load ptr, ptr %293, align 8
  %295 = insertvalue { ptr, ptr, ptr, i32 } %292, ptr %294, 1
  %296 = getelementptr { ptr, ptr, ptr, i32 }, ptr %277, i32 0, i32 2
  %297 = load ptr, ptr %296, align 8
  %298 = insertvalue { ptr, ptr, ptr, i32 } %295, ptr %297, 2
  %299 = getelementptr { ptr, ptr, ptr, i32 }, ptr %277, i32 0, i32 3
  %300 = load i32, ptr %299, align 4
  %301 = insertvalue { ptr, ptr, ptr, i32 } %298, i32 %300, 3
  %302 = alloca { ptr, ptr, ptr, i32 }, align 8
  %303 = getelementptr { ptr, ptr, ptr, i32 }, ptr %264, i32 0, i32 0
  %304 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 0
  %305 = load ptr, ptr %303, align 8
  store ptr %305, ptr %304, align 8
  %306 = getelementptr { ptr, ptr, ptr, i32 }, ptr %264, i32 0, i32 1
  %307 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 1
  %308 = load ptr, ptr %306, align 8
  store ptr %308, ptr %307, align 8
  %309 = getelementptr { ptr, ptr, ptr, i32 }, ptr %264, i32 0, i32 2
  %310 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 2
  %311 = load ptr, ptr %309, align 8
  store ptr %311, ptr %310, align 8
  %312 = getelementptr { ptr, ptr, ptr, i32 }, ptr %264, i32 0, i32 3
  %313 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 3
  %314 = load i32, ptr %312, align 4
  store i32 %314, ptr %313, align 4
  call void @set_offset(ptr %302, ptr @Iterator2)
  %315 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 0
  %316 = load ptr, ptr %315, align 8
  %317 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %316, 0
  %318 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 1
  %319 = load ptr, ptr %318, align 8
  %320 = insertvalue { ptr, ptr, ptr, i32 } %317, ptr %319, 1
  %321 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 2
  %322 = load ptr, ptr %321, align 8
  %323 = insertvalue { ptr, ptr, ptr, i32 } %320, ptr %322, 2
  %324 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 3
  %325 = load i32, ptr %324, align 4
  %326 = insertvalue { ptr, ptr, ptr, i32 } %323, i32 %325, 3
  %327 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 0
  %328 = load ptr, ptr %327, align 8
  %329 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %328, 0
  %330 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 1
  %331 = load ptr, ptr %330, align 8
  %332 = insertvalue { ptr, ptr, ptr, i32 } %329, ptr %331, 1
  %333 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 2
  %334 = load ptr, ptr %333, align 8
  %335 = insertvalue { ptr, ptr, ptr, i32 } %332, ptr %334, 2
  %336 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 3
  %337 = load i32, ptr %336, align 4
  %338 = insertvalue { ptr, ptr, ptr, i32 } %335, i32 %337, 3
  %339 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %340 = load ptr, ptr %339, align 8
  %341 = load ptr, ptr %6, align 8
  %342 = call ptr @llvm.invariant.start.p0(i64 400, ptr %341)
  %343 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %344 = load i32, ptr %343, align 4
  %345 = getelementptr ptr, ptr %341, i32 %344
  %346 = load ptr, ptr %345, align 8
  %347 = call ptr @typegetter_wrapper(ptr %346, ptr %340)
  %348 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %349 = getelementptr [3 x ptr], ptr %348, i32 0, i32 1
  store ptr %347, ptr %349, align 8
  %350 = getelementptr [3 x ptr], ptr %348, i32 0, i32 2
  store ptr null, ptr %350, align 8
  %351 = call ptr @llvm.invariant.start.p0(i64 16, ptr %348)
  store ptr @Iterator2, ptr %348, align 8
  %352 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %353 = getelementptr [3 x ptr], ptr %352, i32 0, i32 1
  store ptr %347, ptr %353, align 8
  %354 = getelementptr [3 x ptr], ptr %352, i32 0, i32 2
  store ptr null, ptr %354, align 8
  %355 = call ptr @llvm.invariant.start.p0(i64 16, ptr %352)
  store ptr @Iterator2, ptr %352, align 8
  %356 = alloca [2 x ptr], align 8
  %357 = getelementptr [2 x ptr], ptr %356, i32 0, i32 0
  store ptr %348, ptr %357, align 8
  %358 = getelementptr [2 x ptr], ptr %356, i32 0, i32 1
  store ptr %352, ptr %358, align 8
  %359 = call ptr @llvm.invariant.start.p0(i64 4, ptr %356)
  %360 = call ptr @llvm.invariant.start.p0(i64 88, ptr %328)
  %361 = getelementptr ptr, ptr %328, i32 %337
  %362 = getelementptr ptr, ptr %361, i32 4
  %363 = load ptr, ptr %362, align 8
  %364 = alloca { ptr, ptr }, align 8
  %365 = getelementptr { ptr, ptr }, ptr %364, i32 0, i32 0
  store ptr %291, ptr %365, align 8
  %366 = getelementptr { ptr, ptr }, ptr %364, i32 0, i32 1
  store ptr %316, ptr %366, align 8
  %367 = call ptr @behavior_wrapper(ptr %363, { ptr, ptr, ptr, i32 } %338, ptr %364)
  call void %367({ ptr, ptr, ptr, i32 } %338, { ptr, ptr, ptr, i32 } %338, ptr %356, { ptr, ptr, ptr, i32 } %301, { ptr, ptr, ptr, i32 } %326)
  %368 = alloca { ptr, ptr, ptr, i32 }, align 8
  %369 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 0
  %370 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 0
  %371 = load ptr, ptr %369, align 8
  store ptr %371, ptr %370, align 8
  %372 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 1
  %373 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 1
  %374 = load ptr, ptr %372, align 8
  store ptr %374, ptr %373, align 8
  %375 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 2
  %376 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 2
  %377 = load ptr, ptr %375, align 8
  store ptr %377, ptr %376, align 8
  %378 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 3
  %379 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 3
  %380 = load i32, ptr %378, align 4
  store i32 %380, ptr %379, align 4
  call void @set_offset(ptr %368, ptr @Iterator2)
  %381 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 0
  %382 = load ptr, ptr %381, align 8
  %383 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %382, 0
  %384 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 1
  %385 = load ptr, ptr %384, align 8
  %386 = insertvalue { ptr, ptr, ptr, i32 } %383, ptr %385, 1
  %387 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 2
  %388 = load ptr, ptr %387, align 8
  %389 = insertvalue { ptr, ptr, ptr, i32 } %386, ptr %388, 2
  %390 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 3
  %391 = load i32, ptr %390, align 4
  %392 = insertvalue { ptr, ptr, ptr, i32 } %389, i32 %391, 3
  ret { ptr, ptr, ptr, i32 } %392
}

define { i64, i64 } @_size_InterleaveIterator2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr (i1, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = urem i64 %27, %21
  %29 = icmp eq i64 %28, 0
  %30 = sub i64 %21, %28
  %31 = select i1 %29, i64 0, i64 %30
  %32 = add i64 %27, %31
  %33 = insertvalue { i64, i64 } undef, i64 %32, 0
  %34 = insertvalue { i64, i64 } %33, i64 %21, 1
  ret { i64, i64 } %34
}

define ptr @InterleaveIterator2_field_InterleaveIterator2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @InterleaveIterator2_B_init_firstIterator2T_secondIterator2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 4189192806087951739, i64 ptrtoint (ptr @Iterator2 to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 4189192806087951739, i64 ptrtoint (ptr @Iterator2 to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [11 x ptr], ptr %26, i32 0, i32 6
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @InterleaveIterator2_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [11 x ptr], ptr %4, i32 0, i32 7
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @InterleaveIterator2_init_firstIterator2T_secondIterator2T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @InterleaveIterator2)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @Iterator2)
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %45 = load ptr, ptr %43, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %48 = load i32, ptr %46, align 4
  store i32 %48, ptr %47, align 4
  call void @set_offset(ptr %36, ptr @Iterator2)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %8, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 88, ptr %51)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = getelementptr ptr, ptr %51, i32 %54
  %56 = getelementptr ptr, ptr %55, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr { ptr, ptr }, ptr %57, i32 0, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %61 = load ptr, ptr %60, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %61, 0
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %64 = load ptr, ptr %63, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %62, ptr %64, 1
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %67 = load ptr, ptr %66, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %67, 2
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %70 = load i32, ptr %69, align 4
  %71 = insertvalue { ptr, ptr, ptr, i32 } %68, i32 %70, 3
  call void %59(ptr %50, { ptr, ptr, ptr, i32 } %71) #15
  %72 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %72, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 16, ptr %72)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 0
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 1
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 2
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %83 = load ptr, ptr %81, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 3
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %86 = load i32, ptr %84, align 4
  store i32 %86, ptr %85, align 4
  call void @set_offset(ptr %74, ptr @Iterator2)
  %87 = alloca { ptr, ptr, ptr, i32 }, align 8
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 0
  %90 = load ptr, ptr %88, align 8
  store ptr %90, ptr %89, align 8
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 1
  %93 = load ptr, ptr %91, align 8
  store ptr %93, ptr %92, align 8
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 2
  %96 = load ptr, ptr %94, align 8
  store ptr %96, ptr %95, align 8
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 3
  %99 = load i32, ptr %97, align 4
  store i32 %99, ptr %98, align 4
  call void @set_offset(ptr %87, ptr @Iterator2)
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %101 = load ptr, ptr %100, align 8
  %102 = load ptr, ptr %8, align 8
  %103 = call ptr @llvm.invariant.start.p0(i64 88, ptr %102)
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %105 = load i32, ptr %104, align 4
  %106 = getelementptr ptr, ptr %102, i32 %105
  %107 = getelementptr ptr, ptr %106, i32 2
  %108 = load ptr, ptr %107, align 8
  %109 = getelementptr { ptr, ptr }, ptr %108, i32 0, i32 1
  %110 = load ptr, ptr %109, align 8
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 0
  %112 = load ptr, ptr %111, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %112, 0
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 1
  %115 = load ptr, ptr %114, align 8
  %116 = insertvalue { ptr, ptr, ptr, i32 } %113, ptr %115, 1
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 2
  %118 = load ptr, ptr %117, align 8
  %119 = insertvalue { ptr, ptr, ptr, i32 } %116, ptr %118, 2
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 3
  %121 = load i32, ptr %120, align 4
  %122 = insertvalue { ptr, ptr, ptr, i32 } %119, i32 %121, 3
  call void %110(ptr %101, { ptr, ptr, ptr, i32 } %122) #15
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %124 = load ptr, ptr %123, align 8
  %125 = load ptr, ptr %8, align 8
  %126 = call ptr @llvm.invariant.start.p0(i64 88, ptr %125)
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %128 = load i32, ptr %127, align 4
  %129 = getelementptr ptr, ptr %125, i32 %128
  %130 = getelementptr ptr, ptr %129, i32 3
  %131 = load ptr, ptr %130, align 8
  %132 = getelementptr { ptr, ptr }, ptr %131, i32 0, i32 1
  %133 = load ptr, ptr %132, align 8
  call void %133(ptr %124, i1 true) #15
  ret void
}

define { ptr, i160 } @InterleaveIterator2_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = alloca [0 x ptr], align 8
  %6 = alloca {}, align 8
  %7 = alloca { ptr, i160 }, align 8
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = alloca [0 x ptr], align 8
  %10 = alloca {}, align 8
  %11 = alloca { ptr, i160 }, align 8
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %12, align 8
  %13 = call ptr @llvm.invariant.start.p0(i64 16, ptr %12)
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 0
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 2
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %26 = load i32, ptr %24, align 4
  store i32 %26, ptr %25, align 4
  call void @set_offset(ptr %14, ptr @InterleaveIterator2)
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = load ptr, ptr %14, align 8
  %30 = call ptr @llvm.invariant.start.p0(i64 88, ptr %29)
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %32 = load i32, ptr %31, align 4
  %33 = getelementptr ptr, ptr %29, i32 %32
  %34 = getelementptr ptr, ptr %33, i32 3
  %35 = load ptr, ptr %34, align 8
  %36 = getelementptr { ptr, ptr }, ptr %35, i32 0, i32 0
  %37 = load ptr, ptr %36, align 8
  %38 = call i1 %37(ptr %28) #16
  br i1 %38, label %39, label %98

39:                                               ; preds = %3
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %41 = load ptr, ptr %40, align 8
  %42 = load ptr, ptr %14, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 88, ptr %42)
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %45 = load i32, ptr %44, align 4
  %46 = getelementptr ptr, ptr %42, i32 %45
  %47 = getelementptr ptr, ptr %46, i32 3
  %48 = load ptr, ptr %47, align 8
  %49 = getelementptr { ptr, ptr }, ptr %48, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  call void %50(ptr %41, i1 false) #15
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %52 = load ptr, ptr %51, align 8
  %53 = load ptr, ptr %14, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 88, ptr %53)
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %56 = load i32, ptr %55, align 4
  %57 = getelementptr ptr, ptr %53, i32 %56
  %58 = getelementptr ptr, ptr %57, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr { ptr, ptr }, ptr %59, i32 0, i32 0
  %61 = load ptr, ptr %60, align 8
  %62 = call { ptr, ptr, ptr, i32 } %61(ptr %52) #16
  store { ptr, ptr, ptr, i32 } %62, ptr %4, align 8
  %63 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  call void @assume_offset(ptr %4, ptr @Iterator2)
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %65 = load ptr, ptr %64, align 8
  %66 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %65, 0
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %68 = load ptr, ptr %67, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %66, ptr %68, 1
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %71 = load ptr, ptr %70, align 8
  %72 = insertvalue { ptr, ptr, ptr, i32 } %69, ptr %71, 2
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %74 = load i32, ptr %73, align 4
  %75 = insertvalue { ptr, ptr, ptr, i32 } %72, i32 %74, 3
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %77 = load ptr, ptr %76, align 8
  %78 = load ptr, ptr %14, align 8
  %79 = call ptr @llvm.invariant.start.p0(i64 88, ptr %78)
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %81 = load i32, ptr %80, align 4
  %82 = getelementptr ptr, ptr %78, i32 %81
  %83 = load ptr, ptr %82, align 8
  %84 = call ptr @typegetter_wrapper(ptr %83, ptr %77)
  %85 = call ptr @llvm.invariant.start.p0(i64 0, ptr %5)
  %86 = call ptr @llvm.invariant.start.p0(i64 24, ptr %65)
  %87 = getelementptr ptr, ptr %65, i32 %74
  %88 = getelementptr ptr, ptr %87, i32 1
  %89 = load ptr, ptr %88, align 8
  %90 = call ptr @behavior_wrapper(ptr %89, { ptr, ptr, ptr, i32 } %75, ptr %6)
  %91 = call { ptr, i160 } %90({ ptr, ptr, ptr, i32 } %75, { ptr, ptr, ptr, i32 } %75, ptr %5)
  store { ptr, i160 } %91, ptr %7, align 8
  %92 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 0
  %93 = load ptr, ptr %92, align 8
  %94 = insertvalue { ptr, i160 } undef, ptr %93, 0
  %95 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 1
  %96 = load i160, ptr %95, align 4
  %97 = insertvalue { ptr, i160 } %94, i160 %96, 1
  store { ptr, i160 } %97, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem5, align 8
  br label %157

98:                                               ; preds = %3
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %100 = load ptr, ptr %99, align 8
  %101 = load ptr, ptr %14, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 88, ptr %101)
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %104 = load i32, ptr %103, align 4
  %105 = getelementptr ptr, ptr %101, i32 %104
  %106 = getelementptr ptr, ptr %105, i32 3
  %107 = load ptr, ptr %106, align 8
  %108 = getelementptr { ptr, ptr }, ptr %107, i32 0, i32 1
  %109 = load ptr, ptr %108, align 8
  call void %109(ptr %100, i1 true) #15
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %111 = load ptr, ptr %110, align 8
  %112 = load ptr, ptr %14, align 8
  %113 = call ptr @llvm.invariant.start.p0(i64 88, ptr %112)
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %115 = load i32, ptr %114, align 4
  %116 = getelementptr ptr, ptr %112, i32 %115
  %117 = getelementptr ptr, ptr %116, i32 2
  %118 = load ptr, ptr %117, align 8
  %119 = getelementptr { ptr, ptr }, ptr %118, i32 0, i32 0
  %120 = load ptr, ptr %119, align 8
  %121 = call { ptr, ptr, ptr, i32 } %120(ptr %111) #16
  store { ptr, ptr, ptr, i32 } %121, ptr %8, align 8
  %122 = call ptr @llvm.invariant.start.p0(i64 16, ptr %8)
  call void @assume_offset(ptr %8, ptr @Iterator2)
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %124 = load ptr, ptr %123, align 8
  %125 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %124, 0
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %127 = load ptr, ptr %126, align 8
  %128 = insertvalue { ptr, ptr, ptr, i32 } %125, ptr %127, 1
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %130 = load ptr, ptr %129, align 8
  %131 = insertvalue { ptr, ptr, ptr, i32 } %128, ptr %130, 2
  %132 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %133 = load i32, ptr %132, align 4
  %134 = insertvalue { ptr, ptr, ptr, i32 } %131, i32 %133, 3
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %136 = load ptr, ptr %135, align 8
  %137 = load ptr, ptr %14, align 8
  %138 = call ptr @llvm.invariant.start.p0(i64 88, ptr %137)
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %140 = load i32, ptr %139, align 4
  %141 = getelementptr ptr, ptr %137, i32 %140
  %142 = load ptr, ptr %141, align 8
  %143 = call ptr @typegetter_wrapper(ptr %142, ptr %136)
  %144 = call ptr @llvm.invariant.start.p0(i64 0, ptr %9)
  %145 = call ptr @llvm.invariant.start.p0(i64 24, ptr %124)
  %146 = getelementptr ptr, ptr %124, i32 %133
  %147 = getelementptr ptr, ptr %146, i32 1
  %148 = load ptr, ptr %147, align 8
  %149 = call ptr @behavior_wrapper(ptr %148, { ptr, ptr, ptr, i32 } %134, ptr %10)
  %150 = call { ptr, i160 } %149({ ptr, ptr, ptr, i32 } %134, { ptr, ptr, ptr, i32 } %134, ptr %9)
  store { ptr, i160 } %150, ptr %11, align 8
  %151 = getelementptr { ptr, i160 }, ptr %11, i32 0, i32 0
  %152 = load ptr, ptr %151, align 8
  %153 = insertvalue { ptr, i160 } undef, ptr %152, 0
  %154 = getelementptr { ptr, i160 }, ptr %11, i32 0, i32 1
  %155 = load i160, ptr %154, align 4
  %156 = insertvalue { ptr, i160 } %153, i160 %155, 1
  store { ptr, i160 } %156, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem5, align 8
  br label %157

157:                                              ; preds = %98, %39
  %.reload6 = load { ptr, i160 }, ptr %.reg2mem5, align 8
  store { ptr, i160 } %.reload6, ptr %.reg2mem, align 8
  br label %158

158:                                              ; preds = %157
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  ret { ptr, i160 } %.reload
}

define i1 @InterleaveIterator2_getter_on_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = load i1, ptr %19, align 1
  ret i1 %20
}

define void @InterleaveIterator2_setter_on_first(ptr %0, i1 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  store i1 %1, ptr %20, align 1
  ret void
}

define { ptr, ptr, ptr, i32 } @InterleaveIterator2_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %15, 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %21, 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 %24, 3
  ret { ptr, ptr, ptr, i32 } %25
}

define void @InterleaveIterator2_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %15, align 8
  %16 = call ptr @llvm.invariant.start.p0(i64 16, ptr %15)
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %28 = load i32, ptr %26, align 4
  store i32 %28, ptr %27, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @InterleaveIterator2_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @InterleaveIterator2_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 16, ptr %9)
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %22 = load i32, ptr %20, align 4
  store i32 %22, ptr %21, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @InterleaveIterable2_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %15, 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %21, 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 %24, 3
  ret { ptr, ptr, ptr, i32 } %25
}

define void @InterleaveIterable2_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %15, align 8
  %16 = call ptr @llvm.invariant.start.p0(i64 16, ptr %15)
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %28 = load i32, ptr %26, align 4
  store i32 %28, ptr %27, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @InterleaveIterable2_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @InterleaveIterable2_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 16, ptr %9)
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %22 = load i32, ptr %20, align 4
  store i32 %22, ptr %21, align 4
  ret void
}

define { i64, i64 } @_size_ChainIterable2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @ChainIterable2_field_ChainIterable2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @ChainIterable2_B_init_firstIterable2T_secondIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [50 x ptr], ptr %26, i32 0, i32 15
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @ChainIterable2_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [50 x ptr], ptr %4, i32 0, i32 16
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @ChainIterable2_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 17
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ChainIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [50 x ptr], ptr %26, i32 0, i32 18
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @ChainIterable2_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 19
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ChainIterable2_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 20
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ChainIterable2_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 21
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ChainIterable2_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 22
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ChainIterable2_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 23
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ChainIterable2_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 24
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ChainIterable2_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 25
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ChainIterable2_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 26
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define void @ChainIterable2_init_firstIterable2T_secondIterable2T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @ChainIterable2)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @Iterable2)
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %45 = load ptr, ptr %43, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %48 = load i32, ptr %46, align 4
  store i32 %48, ptr %47, align 4
  call void @set_offset(ptr %36, ptr @Iterable2)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %8, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 400, ptr %51)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = getelementptr ptr, ptr %51, i32 %54
  %56 = getelementptr ptr, ptr %55, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr { ptr, ptr }, ptr %57, i32 0, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %61 = load ptr, ptr %60, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %61, 0
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %64 = load ptr, ptr %63, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %62, ptr %64, 1
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %67 = load ptr, ptr %66, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %67, 2
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %70 = load i32, ptr %69, align 4
  %71 = insertvalue { ptr, ptr, ptr, i32 } %68, i32 %70, 3
  call void %59(ptr %50, { ptr, ptr, ptr, i32 } %71) #15
  %72 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %72, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 16, ptr %72)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 0
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 1
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 2
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %83 = load ptr, ptr %81, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 3
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %86 = load i32, ptr %84, align 4
  store i32 %86, ptr %85, align 4
  call void @set_offset(ptr %74, ptr @Iterable2)
  %87 = alloca { ptr, ptr, ptr, i32 }, align 8
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 0
  %90 = load ptr, ptr %88, align 8
  store ptr %90, ptr %89, align 8
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 1
  %93 = load ptr, ptr %91, align 8
  store ptr %93, ptr %92, align 8
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 2
  %96 = load ptr, ptr %94, align 8
  store ptr %96, ptr %95, align 8
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 3
  %99 = load i32, ptr %97, align 4
  store i32 %99, ptr %98, align 4
  call void @set_offset(ptr %87, ptr @Iterable2)
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %101 = load ptr, ptr %100, align 8
  %102 = load ptr, ptr %8, align 8
  %103 = call ptr @llvm.invariant.start.p0(i64 400, ptr %102)
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %105 = load i32, ptr %104, align 4
  %106 = getelementptr ptr, ptr %102, i32 %105
  %107 = getelementptr ptr, ptr %106, i32 2
  %108 = load ptr, ptr %107, align 8
  %109 = getelementptr { ptr, ptr }, ptr %108, i32 0, i32 1
  %110 = load ptr, ptr %109, align 8
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 0
  %112 = load ptr, ptr %111, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %112, 0
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 1
  %115 = load ptr, ptr %114, align 8
  %116 = insertvalue { ptr, ptr, ptr, i32 } %113, ptr %115, 1
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 2
  %118 = load ptr, ptr %117, align 8
  %119 = insertvalue { ptr, ptr, ptr, i32 } %116, ptr %118, 2
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 3
  %121 = load i32, ptr %120, align 4
  %122 = insertvalue { ptr, ptr, ptr, i32 } %119, i32 %121, 3
  call void %110(ptr %101, { ptr, ptr, ptr, i32 } %122) #15
  ret void
}

define { ptr, ptr, ptr, i32 } @ChainIterable2_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @ChainIterable2)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 400, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 1
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call { ptr, ptr, ptr, i32 } %29(ptr %20) #16
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %30, ptr %31, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 16, ptr %31)
  call void @assume_offset(ptr %31, ptr @Iterable2)
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %34 = load ptr, ptr %33, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %34, 0
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  %37 = load ptr, ptr %36, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %37, 1
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %40 = load ptr, ptr %39, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } %38, ptr %40, 2
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  %43 = load i32, ptr %42, align 4
  %44 = insertvalue { ptr, ptr, ptr, i32 } %41, i32 %43, 3
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %46 = load ptr, ptr %45, align 8
  %47 = load ptr, ptr %6, align 8
  %48 = call ptr @llvm.invariant.start.p0(i64 400, ptr %47)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %50 = load i32, ptr %49, align 4
  %51 = getelementptr ptr, ptr %47, i32 %50
  %52 = load ptr, ptr %51, align 8
  %53 = call ptr @typegetter_wrapper(ptr %52, ptr %46)
  %54 = alloca [0 x ptr], align 8
  %55 = call ptr @llvm.invariant.start.p0(i64 0, ptr %54)
  %56 = call ptr @llvm.invariant.start.p0(i64 184, ptr %34)
  %57 = getelementptr ptr, ptr %34, i32 %43
  %58 = getelementptr ptr, ptr %57, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = alloca {}, align 8
  %61 = call ptr @behavior_wrapper(ptr %59, { ptr, ptr, ptr, i32 } %44, ptr %60)
  %62 = call { ptr, ptr, ptr, i32 } %61({ ptr, ptr, ptr, i32 } %44, { ptr, ptr, ptr, i32 } %44, ptr %54)
  %63 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %62, ptr %63, align 8
  %64 = call ptr @llvm.invariant.start.p0(i64 16, ptr %63)
  %65 = alloca { ptr, ptr, ptr, i32 }, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 0
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 0
  %68 = load ptr, ptr %66, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 1
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %71 = load ptr, ptr %69, align 8
  store ptr %71, ptr %70, align 8
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 2
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 2
  %74 = load ptr, ptr %72, align 8
  store ptr %74, ptr %73, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 3
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %77 = load i32, ptr %75, align 4
  store i32 %77, ptr %76, align 4
  call void @set_offset(ptr %65, ptr @Iterator2)
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %79 = load ptr, ptr %78, align 8
  %80 = load ptr, ptr %6, align 8
  %81 = call ptr @llvm.invariant.start.p0(i64 400, ptr %80)
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %83 = load i32, ptr %82, align 4
  %84 = getelementptr ptr, ptr %80, i32 %83
  %85 = getelementptr ptr, ptr %84, i32 2
  %86 = load ptr, ptr %85, align 8
  %87 = getelementptr { ptr, ptr }, ptr %86, i32 0, i32 0
  %88 = load ptr, ptr %87, align 8
  %89 = call { ptr, ptr, ptr, i32 } %88(ptr %79) #16
  %90 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %89, ptr %90, align 8
  %91 = call ptr @llvm.invariant.start.p0(i64 16, ptr %90)
  call void @assume_offset(ptr %90, ptr @Iterable2)
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 0
  %93 = load ptr, ptr %92, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %93, 0
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 1
  %96 = load ptr, ptr %95, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr %96, 1
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 2
  %99 = load ptr, ptr %98, align 8
  %100 = insertvalue { ptr, ptr, ptr, i32 } %97, ptr %99, 2
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 3
  %102 = load i32, ptr %101, align 4
  %103 = insertvalue { ptr, ptr, ptr, i32 } %100, i32 %102, 3
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %105 = load ptr, ptr %104, align 8
  %106 = load ptr, ptr %6, align 8
  %107 = call ptr @llvm.invariant.start.p0(i64 400, ptr %106)
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %109 = load i32, ptr %108, align 4
  %110 = getelementptr ptr, ptr %106, i32 %109
  %111 = load ptr, ptr %110, align 8
  %112 = call ptr @typegetter_wrapper(ptr %111, ptr %105)
  %113 = alloca [0 x ptr], align 8
  %114 = call ptr @llvm.invariant.start.p0(i64 0, ptr %113)
  %115 = call ptr @llvm.invariant.start.p0(i64 184, ptr %93)
  %116 = getelementptr ptr, ptr %93, i32 %102
  %117 = getelementptr ptr, ptr %116, i32 1
  %118 = load ptr, ptr %117, align 8
  %119 = alloca {}, align 8
  %120 = call ptr @behavior_wrapper(ptr %118, { ptr, ptr, ptr, i32 } %103, ptr %119)
  %121 = call { ptr, ptr, ptr, i32 } %120({ ptr, ptr, ptr, i32 } %103, { ptr, ptr, ptr, i32 } %103, ptr %113)
  %122 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %121, ptr %122, align 8
  %123 = call ptr @llvm.invariant.start.p0(i64 16, ptr %122)
  %124 = alloca { ptr, ptr, ptr, i32 }, align 8
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %122, i32 0, i32 0
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %124, i32 0, i32 0
  %127 = load ptr, ptr %125, align 8
  store ptr %127, ptr %126, align 8
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %122, i32 0, i32 1
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %124, i32 0, i32 1
  %130 = load ptr, ptr %128, align 8
  store ptr %130, ptr %129, align 8
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %122, i32 0, i32 2
  %132 = getelementptr { ptr, ptr, ptr, i32 }, ptr %124, i32 0, i32 2
  %133 = load ptr, ptr %131, align 8
  store ptr %133, ptr %132, align 8
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %122, i32 0, i32 3
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %124, i32 0, i32 3
  %136 = load i32, ptr %134, align 4
  store i32 %136, ptr %135, align 4
  call void @set_offset(ptr %124, ptr @Iterator2)
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %138 = load ptr, ptr %137, align 8
  %139 = load ptr, ptr %6, align 8
  %140 = call ptr @llvm.invariant.start.p0(i64 400, ptr %139)
  %141 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %142 = load i32, ptr %141, align 4
  %143 = getelementptr ptr, ptr %139, i32 %142
  %144 = load ptr, ptr %143, align 8
  %145 = call ptr @typegetter_wrapper(ptr %144, ptr %138)
  %146 = alloca [2 x ptr], align 8
  store ptr @ChainIterator2, ptr %146, align 8
  %147 = getelementptr ptr, ptr %146, i32 1
  store ptr %145, ptr %147, align 8
  %148 = load ptr, ptr %146, align 8
  %149 = getelementptr ptr, ptr %148, i32 6
  %150 = load ptr, ptr %149, align 8
  %151 = call { i64, i64 } @size_wrapper(ptr %150, ptr %146)
  %152 = extractvalue { i64, i64 } %151, 0
  %153 = call ptr @bump_malloc(i64 %152)
  store ptr %145, ptr %153, align 8
  %154 = call ptr @llvm.invariant.start.p0(i64 8, ptr %153)
  %155 = alloca { ptr, ptr, ptr, i32 }, align 8
  %156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 1
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 3
  store ptr @ChainIterator2, ptr %155, align 8
  store ptr %153, ptr %156, align 8
  store i32 9, ptr %157, align 4
  %158 = call ptr @llvm.invariant.start.p0(i64 16, ptr %155)
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %160 = load ptr, ptr %159, align 8
  %161 = load ptr, ptr %6, align 8
  %162 = call ptr @llvm.invariant.start.p0(i64 400, ptr %161)
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %164 = load i32, ptr %163, align 4
  %165 = getelementptr ptr, ptr %161, i32 %164
  %166 = getelementptr ptr, ptr %165, i32 1
  %167 = load ptr, ptr %166, align 8
  %168 = getelementptr { ptr, ptr }, ptr %167, i32 0, i32 0
  %169 = load ptr, ptr %168, align 8
  %170 = call { ptr, ptr, ptr, i32 } %169(ptr %160) #16
  %171 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %170, ptr %171, align 8
  %172 = call ptr @llvm.invariant.start.p0(i64 16, ptr %171)
  call void @assume_offset(ptr %171, ptr @Iterable2)
  %173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %171, i32 0, i32 0
  %174 = load ptr, ptr %173, align 8
  %175 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %174, 0
  %176 = getelementptr { ptr, ptr, ptr, i32 }, ptr %171, i32 0, i32 1
  %177 = load ptr, ptr %176, align 8
  %178 = insertvalue { ptr, ptr, ptr, i32 } %175, ptr %177, 1
  %179 = getelementptr { ptr, ptr, ptr, i32 }, ptr %171, i32 0, i32 2
  %180 = load ptr, ptr %179, align 8
  %181 = insertvalue { ptr, ptr, ptr, i32 } %178, ptr %180, 2
  %182 = getelementptr { ptr, ptr, ptr, i32 }, ptr %171, i32 0, i32 3
  %183 = load i32, ptr %182, align 4
  %184 = insertvalue { ptr, ptr, ptr, i32 } %181, i32 %183, 3
  %185 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %186 = load ptr, ptr %185, align 8
  %187 = load ptr, ptr %6, align 8
  %188 = call ptr @llvm.invariant.start.p0(i64 400, ptr %187)
  %189 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %190 = load i32, ptr %189, align 4
  %191 = getelementptr ptr, ptr %187, i32 %190
  %192 = load ptr, ptr %191, align 8
  %193 = call ptr @typegetter_wrapper(ptr %192, ptr %186)
  %194 = alloca [0 x ptr], align 8
  %195 = call ptr @llvm.invariant.start.p0(i64 0, ptr %194)
  %196 = call ptr @llvm.invariant.start.p0(i64 184, ptr %174)
  %197 = getelementptr ptr, ptr %174, i32 %183
  %198 = getelementptr ptr, ptr %197, i32 1
  %199 = load ptr, ptr %198, align 8
  %200 = alloca {}, align 8
  %201 = call ptr @behavior_wrapper(ptr %199, { ptr, ptr, ptr, i32 } %184, ptr %200)
  %202 = call { ptr, ptr, ptr, i32 } %201({ ptr, ptr, ptr, i32 } %184, { ptr, ptr, ptr, i32 } %184, ptr %194)
  %203 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %202, ptr %203, align 8
  %204 = call ptr @llvm.invariant.start.p0(i64 16, ptr %203)
  %205 = alloca { ptr, ptr, ptr, i32 }, align 8
  %206 = getelementptr { ptr, ptr, ptr, i32 }, ptr %203, i32 0, i32 0
  %207 = getelementptr { ptr, ptr, ptr, i32 }, ptr %205, i32 0, i32 0
  %208 = load ptr, ptr %206, align 8
  store ptr %208, ptr %207, align 8
  %209 = getelementptr { ptr, ptr, ptr, i32 }, ptr %203, i32 0, i32 1
  %210 = getelementptr { ptr, ptr, ptr, i32 }, ptr %205, i32 0, i32 1
  %211 = load ptr, ptr %209, align 8
  store ptr %211, ptr %210, align 8
  %212 = getelementptr { ptr, ptr, ptr, i32 }, ptr %203, i32 0, i32 2
  %213 = getelementptr { ptr, ptr, ptr, i32 }, ptr %205, i32 0, i32 2
  %214 = load ptr, ptr %212, align 8
  store ptr %214, ptr %213, align 8
  %215 = getelementptr { ptr, ptr, ptr, i32 }, ptr %203, i32 0, i32 3
  %216 = getelementptr { ptr, ptr, ptr, i32 }, ptr %205, i32 0, i32 3
  %217 = load i32, ptr %215, align 4
  store i32 %217, ptr %216, align 4
  call void @set_offset(ptr %205, ptr @Iterator2)
  %218 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %219 = load ptr, ptr %218, align 8
  %220 = load ptr, ptr %6, align 8
  %221 = call ptr @llvm.invariant.start.p0(i64 400, ptr %220)
  %222 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %223 = load i32, ptr %222, align 4
  %224 = getelementptr ptr, ptr %220, i32 %223
  %225 = getelementptr ptr, ptr %224, i32 2
  %226 = load ptr, ptr %225, align 8
  %227 = getelementptr { ptr, ptr }, ptr %226, i32 0, i32 0
  %228 = load ptr, ptr %227, align 8
  %229 = call { ptr, ptr, ptr, i32 } %228(ptr %219) #16
  %230 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %229, ptr %230, align 8
  %231 = call ptr @llvm.invariant.start.p0(i64 16, ptr %230)
  call void @assume_offset(ptr %230, ptr @Iterable2)
  %232 = getelementptr { ptr, ptr, ptr, i32 }, ptr %230, i32 0, i32 0
  %233 = load ptr, ptr %232, align 8
  %234 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %233, 0
  %235 = getelementptr { ptr, ptr, ptr, i32 }, ptr %230, i32 0, i32 1
  %236 = load ptr, ptr %235, align 8
  %237 = insertvalue { ptr, ptr, ptr, i32 } %234, ptr %236, 1
  %238 = getelementptr { ptr, ptr, ptr, i32 }, ptr %230, i32 0, i32 2
  %239 = load ptr, ptr %238, align 8
  %240 = insertvalue { ptr, ptr, ptr, i32 } %237, ptr %239, 2
  %241 = getelementptr { ptr, ptr, ptr, i32 }, ptr %230, i32 0, i32 3
  %242 = load i32, ptr %241, align 4
  %243 = insertvalue { ptr, ptr, ptr, i32 } %240, i32 %242, 3
  %244 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %245 = load ptr, ptr %244, align 8
  %246 = load ptr, ptr %6, align 8
  %247 = call ptr @llvm.invariant.start.p0(i64 400, ptr %246)
  %248 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %249 = load i32, ptr %248, align 4
  %250 = getelementptr ptr, ptr %246, i32 %249
  %251 = load ptr, ptr %250, align 8
  %252 = call ptr @typegetter_wrapper(ptr %251, ptr %245)
  %253 = alloca [0 x ptr], align 8
  %254 = call ptr @llvm.invariant.start.p0(i64 0, ptr %253)
  %255 = call ptr @llvm.invariant.start.p0(i64 184, ptr %233)
  %256 = getelementptr ptr, ptr %233, i32 %242
  %257 = getelementptr ptr, ptr %256, i32 1
  %258 = load ptr, ptr %257, align 8
  %259 = alloca {}, align 8
  %260 = call ptr @behavior_wrapper(ptr %258, { ptr, ptr, ptr, i32 } %243, ptr %259)
  %261 = call { ptr, ptr, ptr, i32 } %260({ ptr, ptr, ptr, i32 } %243, { ptr, ptr, ptr, i32 } %243, ptr %253)
  %262 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %261, ptr %262, align 8
  %263 = call ptr @llvm.invariant.start.p0(i64 16, ptr %262)
  %264 = alloca { ptr, ptr, ptr, i32 }, align 8
  %265 = getelementptr { ptr, ptr, ptr, i32 }, ptr %262, i32 0, i32 0
  %266 = getelementptr { ptr, ptr, ptr, i32 }, ptr %264, i32 0, i32 0
  %267 = load ptr, ptr %265, align 8
  store ptr %267, ptr %266, align 8
  %268 = getelementptr { ptr, ptr, ptr, i32 }, ptr %262, i32 0, i32 1
  %269 = getelementptr { ptr, ptr, ptr, i32 }, ptr %264, i32 0, i32 1
  %270 = load ptr, ptr %268, align 8
  store ptr %270, ptr %269, align 8
  %271 = getelementptr { ptr, ptr, ptr, i32 }, ptr %262, i32 0, i32 2
  %272 = getelementptr { ptr, ptr, ptr, i32 }, ptr %264, i32 0, i32 2
  %273 = load ptr, ptr %271, align 8
  store ptr %273, ptr %272, align 8
  %274 = getelementptr { ptr, ptr, ptr, i32 }, ptr %262, i32 0, i32 3
  %275 = getelementptr { ptr, ptr, ptr, i32 }, ptr %264, i32 0, i32 3
  %276 = load i32, ptr %274, align 4
  store i32 %276, ptr %275, align 4
  call void @set_offset(ptr %264, ptr @Iterator2)
  %277 = alloca { ptr, ptr, ptr, i32 }, align 8
  %278 = getelementptr { ptr, ptr, ptr, i32 }, ptr %205, i32 0, i32 0
  %279 = getelementptr { ptr, ptr, ptr, i32 }, ptr %277, i32 0, i32 0
  %280 = load ptr, ptr %278, align 8
  store ptr %280, ptr %279, align 8
  %281 = getelementptr { ptr, ptr, ptr, i32 }, ptr %205, i32 0, i32 1
  %282 = getelementptr { ptr, ptr, ptr, i32 }, ptr %277, i32 0, i32 1
  %283 = load ptr, ptr %281, align 8
  store ptr %283, ptr %282, align 8
  %284 = getelementptr { ptr, ptr, ptr, i32 }, ptr %205, i32 0, i32 2
  %285 = getelementptr { ptr, ptr, ptr, i32 }, ptr %277, i32 0, i32 2
  %286 = load ptr, ptr %284, align 8
  store ptr %286, ptr %285, align 8
  %287 = getelementptr { ptr, ptr, ptr, i32 }, ptr %205, i32 0, i32 3
  %288 = getelementptr { ptr, ptr, ptr, i32 }, ptr %277, i32 0, i32 3
  %289 = load i32, ptr %287, align 4
  store i32 %289, ptr %288, align 4
  call void @set_offset(ptr %277, ptr @Iterator2)
  %290 = getelementptr { ptr, ptr, ptr, i32 }, ptr %277, i32 0, i32 0
  %291 = load ptr, ptr %290, align 8
  %292 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %291, 0
  %293 = getelementptr { ptr, ptr, ptr, i32 }, ptr %277, i32 0, i32 1
  %294 = load ptr, ptr %293, align 8
  %295 = insertvalue { ptr, ptr, ptr, i32 } %292, ptr %294, 1
  %296 = getelementptr { ptr, ptr, ptr, i32 }, ptr %277, i32 0, i32 2
  %297 = load ptr, ptr %296, align 8
  %298 = insertvalue { ptr, ptr, ptr, i32 } %295, ptr %297, 2
  %299 = getelementptr { ptr, ptr, ptr, i32 }, ptr %277, i32 0, i32 3
  %300 = load i32, ptr %299, align 4
  %301 = insertvalue { ptr, ptr, ptr, i32 } %298, i32 %300, 3
  %302 = alloca { ptr, ptr, ptr, i32 }, align 8
  %303 = getelementptr { ptr, ptr, ptr, i32 }, ptr %264, i32 0, i32 0
  %304 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 0
  %305 = load ptr, ptr %303, align 8
  store ptr %305, ptr %304, align 8
  %306 = getelementptr { ptr, ptr, ptr, i32 }, ptr %264, i32 0, i32 1
  %307 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 1
  %308 = load ptr, ptr %306, align 8
  store ptr %308, ptr %307, align 8
  %309 = getelementptr { ptr, ptr, ptr, i32 }, ptr %264, i32 0, i32 2
  %310 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 2
  %311 = load ptr, ptr %309, align 8
  store ptr %311, ptr %310, align 8
  %312 = getelementptr { ptr, ptr, ptr, i32 }, ptr %264, i32 0, i32 3
  %313 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 3
  %314 = load i32, ptr %312, align 4
  store i32 %314, ptr %313, align 4
  call void @set_offset(ptr %302, ptr @Iterator2)
  %315 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 0
  %316 = load ptr, ptr %315, align 8
  %317 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %316, 0
  %318 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 1
  %319 = load ptr, ptr %318, align 8
  %320 = insertvalue { ptr, ptr, ptr, i32 } %317, ptr %319, 1
  %321 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 2
  %322 = load ptr, ptr %321, align 8
  %323 = insertvalue { ptr, ptr, ptr, i32 } %320, ptr %322, 2
  %324 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 3
  %325 = load i32, ptr %324, align 4
  %326 = insertvalue { ptr, ptr, ptr, i32 } %323, i32 %325, 3
  %327 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 0
  %328 = load ptr, ptr %327, align 8
  %329 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %328, 0
  %330 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 1
  %331 = load ptr, ptr %330, align 8
  %332 = insertvalue { ptr, ptr, ptr, i32 } %329, ptr %331, 1
  %333 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 2
  %334 = load ptr, ptr %333, align 8
  %335 = insertvalue { ptr, ptr, ptr, i32 } %332, ptr %334, 2
  %336 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 3
  %337 = load i32, ptr %336, align 4
  %338 = insertvalue { ptr, ptr, ptr, i32 } %335, i32 %337, 3
  %339 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %340 = load ptr, ptr %339, align 8
  %341 = load ptr, ptr %6, align 8
  %342 = call ptr @llvm.invariant.start.p0(i64 400, ptr %341)
  %343 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %344 = load i32, ptr %343, align 4
  %345 = getelementptr ptr, ptr %341, i32 %344
  %346 = load ptr, ptr %345, align 8
  %347 = call ptr @typegetter_wrapper(ptr %346, ptr %340)
  %348 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %349 = getelementptr [3 x ptr], ptr %348, i32 0, i32 1
  store ptr %347, ptr %349, align 8
  %350 = getelementptr [3 x ptr], ptr %348, i32 0, i32 2
  store ptr null, ptr %350, align 8
  %351 = call ptr @llvm.invariant.start.p0(i64 16, ptr %348)
  store ptr @Iterator2, ptr %348, align 8
  %352 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %353 = getelementptr [3 x ptr], ptr %352, i32 0, i32 1
  store ptr %347, ptr %353, align 8
  %354 = getelementptr [3 x ptr], ptr %352, i32 0, i32 2
  store ptr null, ptr %354, align 8
  %355 = call ptr @llvm.invariant.start.p0(i64 16, ptr %352)
  store ptr @Iterator2, ptr %352, align 8
  %356 = alloca [2 x ptr], align 8
  %357 = getelementptr [2 x ptr], ptr %356, i32 0, i32 0
  store ptr %348, ptr %357, align 8
  %358 = getelementptr [2 x ptr], ptr %356, i32 0, i32 1
  store ptr %352, ptr %358, align 8
  %359 = call ptr @llvm.invariant.start.p0(i64 4, ptr %356)
  %360 = call ptr @llvm.invariant.start.p0(i64 88, ptr %328)
  %361 = getelementptr ptr, ptr %328, i32 %337
  %362 = getelementptr ptr, ptr %361, i32 4
  %363 = load ptr, ptr %362, align 8
  %364 = alloca { ptr, ptr }, align 8
  %365 = getelementptr { ptr, ptr }, ptr %364, i32 0, i32 0
  store ptr %291, ptr %365, align 8
  %366 = getelementptr { ptr, ptr }, ptr %364, i32 0, i32 1
  store ptr %316, ptr %366, align 8
  %367 = call ptr @behavior_wrapper(ptr %363, { ptr, ptr, ptr, i32 } %338, ptr %364)
  call void %367({ ptr, ptr, ptr, i32 } %338, { ptr, ptr, ptr, i32 } %338, ptr %356, { ptr, ptr, ptr, i32 } %301, { ptr, ptr, ptr, i32 } %326)
  %368 = alloca { ptr, ptr, ptr, i32 }, align 8
  %369 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 0
  %370 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 0
  %371 = load ptr, ptr %369, align 8
  store ptr %371, ptr %370, align 8
  %372 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 1
  %373 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 1
  %374 = load ptr, ptr %372, align 8
  store ptr %374, ptr %373, align 8
  %375 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 2
  %376 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 2
  %377 = load ptr, ptr %375, align 8
  store ptr %377, ptr %376, align 8
  %378 = getelementptr { ptr, ptr, ptr, i32 }, ptr %155, i32 0, i32 3
  %379 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 3
  %380 = load i32, ptr %378, align 4
  store i32 %380, ptr %379, align 4
  call void @set_offset(ptr %368, ptr @Iterator2)
  %381 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 0
  %382 = load ptr, ptr %381, align 8
  %383 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %382, 0
  %384 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 1
  %385 = load ptr, ptr %384, align 8
  %386 = insertvalue { ptr, ptr, ptr, i32 } %383, ptr %385, 1
  %387 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 2
  %388 = load ptr, ptr %387, align 8
  %389 = insertvalue { ptr, ptr, ptr, i32 } %386, ptr %388, 2
  %390 = getelementptr { ptr, ptr, ptr, i32 }, ptr %368, i32 0, i32 3
  %391 = load i32, ptr %390, align 4
  %392 = insertvalue { ptr, ptr, ptr, i32 } %389, i32 %391, 3
  ret { ptr, ptr, ptr, i32 } %392
}

define { i64, i64 } @_size_ChainIterator2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr (i1, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = urem i64 %27, %21
  %29 = icmp eq i64 %28, 0
  %30 = sub i64 %21, %28
  %31 = select i1 %29, i64 0, i64 %30
  %32 = add i64 %27, %31
  %33 = insertvalue { i64, i64 } undef, i64 %32, 0
  %34 = insertvalue { i64, i64 } %33, i64 %21, 1
  ret { i64, i64 } %34
}

define ptr @ChainIterator2_field_ChainIterator2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @ChainIterator2_B_init_firstIterator2T_secondIterator2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 4189192806087951739, i64 ptrtoint (ptr @Iterator2 to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 4189192806087951739, i64 ptrtoint (ptr @Iterator2 to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [11 x ptr], ptr %26, i32 0, i32 6
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @ChainIterator2_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [11 x ptr], ptr %4, i32 0, i32 7
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @ChainIterator2_init_firstIterator2T_secondIterator2T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @ChainIterator2)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @Iterator2)
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %45 = load ptr, ptr %43, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %48 = load i32, ptr %46, align 4
  store i32 %48, ptr %47, align 4
  call void @set_offset(ptr %36, ptr @Iterator2)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %8, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 88, ptr %51)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = getelementptr ptr, ptr %51, i32 %54
  %56 = getelementptr ptr, ptr %55, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr { ptr, ptr }, ptr %57, i32 0, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %61 = load ptr, ptr %60, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %61, 0
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %64 = load ptr, ptr %63, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %62, ptr %64, 1
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %67 = load ptr, ptr %66, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %67, 2
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %70 = load i32, ptr %69, align 4
  %71 = insertvalue { ptr, ptr, ptr, i32 } %68, i32 %70, 3
  call void %59(ptr %50, { ptr, ptr, ptr, i32 } %71) #15
  %72 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %72, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 16, ptr %72)
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 0
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 1
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 2
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %83 = load ptr, ptr %81, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 3
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %86 = load i32, ptr %84, align 4
  store i32 %86, ptr %85, align 4
  call void @set_offset(ptr %74, ptr @Iterator2)
  %87 = alloca { ptr, ptr, ptr, i32 }, align 8
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 0
  %90 = load ptr, ptr %88, align 8
  store ptr %90, ptr %89, align 8
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 1
  %93 = load ptr, ptr %91, align 8
  store ptr %93, ptr %92, align 8
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 2
  %96 = load ptr, ptr %94, align 8
  store ptr %96, ptr %95, align 8
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 3
  %99 = load i32, ptr %97, align 4
  store i32 %99, ptr %98, align 4
  call void @set_offset(ptr %87, ptr @Iterator2)
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %101 = load ptr, ptr %100, align 8
  %102 = load ptr, ptr %8, align 8
  %103 = call ptr @llvm.invariant.start.p0(i64 88, ptr %102)
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %105 = load i32, ptr %104, align 4
  %106 = getelementptr ptr, ptr %102, i32 %105
  %107 = getelementptr ptr, ptr %106, i32 2
  %108 = load ptr, ptr %107, align 8
  %109 = getelementptr { ptr, ptr }, ptr %108, i32 0, i32 1
  %110 = load ptr, ptr %109, align 8
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 0
  %112 = load ptr, ptr %111, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %112, 0
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 1
  %115 = load ptr, ptr %114, align 8
  %116 = insertvalue { ptr, ptr, ptr, i32 } %113, ptr %115, 1
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 2
  %118 = load ptr, ptr %117, align 8
  %119 = insertvalue { ptr, ptr, ptr, i32 } %116, ptr %118, 2
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %87, i32 0, i32 3
  %121 = load i32, ptr %120, align 4
  %122 = insertvalue { ptr, ptr, ptr, i32 } %119, i32 %121, 3
  call void %110(ptr %101, { ptr, ptr, ptr, i32 } %122) #15
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %124 = load ptr, ptr %123, align 8
  %125 = load ptr, ptr %8, align 8
  %126 = call ptr @llvm.invariant.start.p0(i64 88, ptr %125)
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %128 = load i32, ptr %127, align 4
  %129 = getelementptr ptr, ptr %125, i32 %128
  %130 = getelementptr ptr, ptr %129, i32 3
  %131 = load ptr, ptr %130, align 8
  %132 = getelementptr { ptr, ptr }, ptr %131, i32 0, i32 1
  %133 = load ptr, ptr %132, align 8
  call void %133(ptr %124, i1 true) #15
  ret void
}

define { ptr, i160 } @ChainIterator2_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = alloca [0 x ptr], align 8
  %6 = alloca {}, align 8
  %7 = alloca { ptr, i160 }, align 8
  %8 = alloca i160, align 8
  %9 = alloca ptr, align 8
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %11 = alloca [0 x ptr], align 8
  %12 = alloca {}, align 8
  %13 = alloca { ptr, i160 }, align 8
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca { ptr, i160 }, align 8
  %.reg2mem7 = alloca { ptr, i160 }, align 8
  %.reg2mem9 = alloca i32, align 4
  %.reg2mem11 = alloca { ptr, i160 }, align 8
  %.reg2mem13 = alloca i32, align 4
  %.reg2mem15 = alloca { ptr, i160 }, align 8
  %.reg2mem17 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %14, align 8
  %15 = call ptr @llvm.invariant.start.p0(i64 16, ptr %14)
  %16 = alloca { ptr, ptr, ptr, i32 }, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 0
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 2
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %28 = load i32, ptr %26, align 4
  store i32 %28, ptr %27, align 4
  call void @set_offset(ptr %16, ptr @ChainIterator2)
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  %31 = load ptr, ptr %16, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 88, ptr %31)
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %34 = load i32, ptr %33, align 4
  %35 = getelementptr ptr, ptr %31, i32 %34
  %36 = getelementptr ptr, ptr %35, i32 3
  %37 = load ptr, ptr %36, align 8
  %38 = getelementptr { ptr, ptr }, ptr %37, i32 0, i32 0
  %39 = load ptr, ptr %38, align 8
  %40 = call i1 %39(ptr %30) #16
  br i1 %40, label %41, label %115

41:                                               ; preds = %3
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %43 = load ptr, ptr %42, align 8
  %44 = load ptr, ptr %16, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 88, ptr %44)
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %47 = load i32, ptr %46, align 4
  %48 = getelementptr ptr, ptr %44, i32 %47
  %49 = getelementptr ptr, ptr %48, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = getelementptr { ptr, ptr }, ptr %50, i32 0, i32 0
  %52 = load ptr, ptr %51, align 8
  %53 = call { ptr, ptr, ptr, i32 } %52(ptr %43) #16
  store { ptr, ptr, ptr, i32 } %53, ptr %4, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  call void @assume_offset(ptr %4, ptr @Iterator2)
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %56 = load ptr, ptr %55, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %56, 0
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } %57, ptr %59, 1
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %62 = load ptr, ptr %61, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr %62, 2
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %65 = load i32, ptr %64, align 4
  %66 = insertvalue { ptr, ptr, ptr, i32 } %63, i32 %65, 3
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %68 = load ptr, ptr %67, align 8
  %69 = load ptr, ptr %16, align 8
  %70 = call ptr @llvm.invariant.start.p0(i64 88, ptr %69)
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %72 = load i32, ptr %71, align 4
  %73 = getelementptr ptr, ptr %69, i32 %72
  %74 = load ptr, ptr %73, align 8
  %75 = call ptr @typegetter_wrapper(ptr %74, ptr %68)
  %76 = call ptr @llvm.invariant.start.p0(i64 0, ptr %5)
  %77 = call ptr @llvm.invariant.start.p0(i64 24, ptr %56)
  %78 = getelementptr ptr, ptr %56, i32 %65
  %79 = getelementptr ptr, ptr %78, i32 1
  %80 = load ptr, ptr %79, align 8
  %81 = call ptr @behavior_wrapper(ptr %80, { ptr, ptr, ptr, i32 } %66, ptr %6)
  %82 = call { ptr, i160 } %81({ ptr, ptr, ptr, i32 } %66, { ptr, ptr, ptr, i32 } %66, ptr %5)
  store { ptr, i160 } %82, ptr %7, align 8
  %83 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 0
  %84 = load ptr, ptr %83, align 8
  %85 = ptrtoint ptr %84 to i64
  %86 = icmp eq i64 %85, ptrtoint (ptr @nil_typ to i64)
  %87 = icmp eq i64 %85, 0
  %88 = or i1 %86, %87
  %89 = icmp eq i1 %88, false
  %90 = icmp ne i1 %88, false
  %91 = zext i1 %90 to i32
  store i32 %91, ptr %.reg2mem9, align 4
  br i1 %89, label %92, label %101

92:                                               ; preds = %41
  %93 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 0
  %94 = load ptr, ptr %93, align 8
  store ptr %94, ptr %9, align 8
  %95 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 1
  %96 = load i160, ptr %95, align 4
  store i160 %96, ptr %8, align 4
  %97 = load ptr, ptr %9, align 8
  %98 = insertvalue { ptr, i160 } undef, ptr %97, 0
  %99 = load i160, ptr %8, align 4
  %100 = insertvalue { ptr, i160 } %98, i160 %99, 1
  store { ptr, i160 } %100, ptr %.reg2mem7, align 8
  %.reload8 = load { ptr, i160 }, ptr %.reg2mem7, align 8
  store { ptr, i160 } %.reload8, ptr %.reg2mem17, align 8
  br label %113

101:                                              ; preds = %41
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %103 = load ptr, ptr %102, align 8
  %104 = load ptr, ptr %16, align 8
  %105 = call ptr @llvm.invariant.start.p0(i64 88, ptr %104)
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %107 = load i32, ptr %106, align 4
  %108 = getelementptr ptr, ptr %104, i32 %107
  %109 = getelementptr ptr, ptr %108, i32 3
  %110 = load ptr, ptr %109, align 8
  %111 = getelementptr { ptr, ptr }, ptr %110, i32 0, i32 1
  %112 = load ptr, ptr %111, align 8
  call void %112(ptr %103, i1 false) #15
  store { ptr, i160 } poison, ptr %.reg2mem17, align 8
  br label %113

113:                                              ; preds = %101, %92
  %.reload18 = load { ptr, i160 }, ptr %.reg2mem17, align 8
  store { ptr, i160 } %.reload18, ptr %.reg2mem5, align 8
  br label %114

114:                                              ; preds = %113
  %.reload6 = load { ptr, i160 }, ptr %.reg2mem5, align 8
  %.reload10 = load i32, ptr %.reg2mem9, align 4
  store i32 %.reload10, ptr %.reg2mem13, align 4
  store { ptr, i160 } %.reload6, ptr %.reg2mem15, align 8
  br label %116

115:                                              ; preds = %3
  store i32 1, ptr %.reg2mem13, align 4
  store { ptr, i160 } poison, ptr %.reg2mem15, align 8
  br label %116

116:                                              ; preds = %115, %114
  %.reload16 = load { ptr, i160 }, ptr %.reg2mem15, align 8
  %.reload14 = load i32, ptr %.reg2mem13, align 4
  store { ptr, i160 } %.reload16, ptr %.reg2mem3, align 8
  store i32 %.reload14, ptr %.reg2mem1, align 4
  br label %117

117:                                              ; preds = %116
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  %118 = zext i32 %.reload2 to i64
  %119 = trunc i64 %118 to i32
  switch i32 %119, label %121 [
    i32 0, label %120
  ]

120:                                              ; preds = %117
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem11, align 8
  br label %169

121:                                              ; preds = %117
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %123 = load ptr, ptr %122, align 8
  %124 = load ptr, ptr %16, align 8
  %125 = call ptr @llvm.invariant.start.p0(i64 88, ptr %124)
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %127 = load i32, ptr %126, align 4
  %128 = getelementptr ptr, ptr %124, i32 %127
  %129 = getelementptr ptr, ptr %128, i32 2
  %130 = load ptr, ptr %129, align 8
  %131 = getelementptr { ptr, ptr }, ptr %130, i32 0, i32 0
  %132 = load ptr, ptr %131, align 8
  %133 = call { ptr, ptr, ptr, i32 } %132(ptr %123) #16
  store { ptr, ptr, ptr, i32 } %133, ptr %10, align 8
  %134 = call ptr @llvm.invariant.start.p0(i64 16, ptr %10)
  call void @assume_offset(ptr %10, ptr @Iterator2)
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 0
  %136 = load ptr, ptr %135, align 8
  %137 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %136, 0
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %139 = load ptr, ptr %138, align 8
  %140 = insertvalue { ptr, ptr, ptr, i32 } %137, ptr %139, 1
  %141 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 2
  %142 = load ptr, ptr %141, align 8
  %143 = insertvalue { ptr, ptr, ptr, i32 } %140, ptr %142, 2
  %144 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  %145 = load i32, ptr %144, align 4
  %146 = insertvalue { ptr, ptr, ptr, i32 } %143, i32 %145, 3
  %147 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 1
  %148 = load ptr, ptr %147, align 8
  %149 = load ptr, ptr %16, align 8
  %150 = call ptr @llvm.invariant.start.p0(i64 88, ptr %149)
  %151 = getelementptr { ptr, ptr, ptr, i32 }, ptr %16, i32 0, i32 3
  %152 = load i32, ptr %151, align 4
  %153 = getelementptr ptr, ptr %149, i32 %152
  %154 = load ptr, ptr %153, align 8
  %155 = call ptr @typegetter_wrapper(ptr %154, ptr %148)
  %156 = call ptr @llvm.invariant.start.p0(i64 0, ptr %11)
  %157 = call ptr @llvm.invariant.start.p0(i64 24, ptr %136)
  %158 = getelementptr ptr, ptr %136, i32 %145
  %159 = getelementptr ptr, ptr %158, i32 1
  %160 = load ptr, ptr %159, align 8
  %161 = call ptr @behavior_wrapper(ptr %160, { ptr, ptr, ptr, i32 } %146, ptr %12)
  %162 = call { ptr, i160 } %161({ ptr, ptr, ptr, i32 } %146, { ptr, ptr, ptr, i32 } %146, ptr %11)
  store { ptr, i160 } %162, ptr %13, align 8
  %163 = getelementptr { ptr, i160 }, ptr %13, i32 0, i32 0
  %164 = load ptr, ptr %163, align 8
  %165 = insertvalue { ptr, i160 } undef, ptr %164, 0
  %166 = getelementptr { ptr, i160 }, ptr %13, i32 0, i32 1
  %167 = load i160, ptr %166, align 4
  %168 = insertvalue { ptr, i160 } %165, i160 %167, 1
  store { ptr, i160 } %168, ptr %.reg2mem, align 8
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  store { ptr, i160 } %.reload, ptr %.reg2mem11, align 8
  br label %169

169:                                              ; preds = %121, %120
  %.reload12 = load { ptr, i160 }, ptr %.reg2mem11, align 8
  ret { ptr, i160 } %.reload12
}

define i1 @ChainIterator2_getter_on_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = load i1, ptr %19, align 1
  ret i1 %20
}

define void @ChainIterator2_setter_on_first(ptr %0, i1 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  store i1 %1, ptr %20, align 1
  ret void
}

define { ptr, ptr, ptr, i32 } @ChainIterator2_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %15, 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %21, 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 %24, 3
  ret { ptr, ptr, ptr, i32 } %25
}

define void @ChainIterator2_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %15, align 8
  %16 = call ptr @llvm.invariant.start.p0(i64 16, ptr %15)
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %28 = load i32, ptr %26, align 4
  store i32 %28, ptr %27, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ChainIterator2_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @ChainIterator2_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 16, ptr %9)
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %22 = load i32, ptr %20, align 4
  store i32 %22, ptr %21, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ChainIterable2_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %15, 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %21, 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 %24, 3
  ret { ptr, ptr, ptr, i32 } %25
}

define void @ChainIterable2_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %15, align 8
  %16 = call ptr @llvm.invariant.start.p0(i64 16, ptr %15)
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %28 = load i32, ptr %26, align 4
  store i32 %28, ptr %27, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ChainIterable2_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @ChainIterable2_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 16, ptr %9)
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %22 = load i32, ptr %20, align 4
  store i32 %22, ptr %21, align 4
  ret void
}

define { i64, i64 } @_size_FilterIterable2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @FilterIterable2_field_FilterIterable2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @FilterIterable2_B_init_iterableIterable2T_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [50 x ptr], ptr %26, i32 0, i32 15
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @FilterIterable2_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [50 x ptr], ptr %4, i32 0, i32 16
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @FilterIterable2_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 17
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @FilterIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [50 x ptr], ptr %26, i32 0, i32 18
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @FilterIterable2_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 19
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @FilterIterable2_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 20
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @FilterIterable2_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 21
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @FilterIterable2_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 22
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @FilterIterable2_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 23
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @FilterIterable2_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 24
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @FilterIterable2_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 25
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @FilterIterable2_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [50 x ptr], ptr %15, i32 0, i32 26
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define void @FilterIterable2_init_iterableIterable2T_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @FilterIterable2)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @Iterable2)
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %45 = load ptr, ptr %43, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %48 = load i32, ptr %46, align 4
  store i32 %48, ptr %47, align 4
  call void @set_offset(ptr %36, ptr @Iterable2)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %8, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 400, ptr %51)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = getelementptr ptr, ptr %51, i32 %54
  %56 = getelementptr ptr, ptr %55, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr { ptr, ptr }, ptr %57, i32 0, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %61 = load ptr, ptr %60, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %61, 0
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %64 = load ptr, ptr %63, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %62, ptr %64, 1
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %67 = load ptr, ptr %66, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %67, 2
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %70 = load i32, ptr %69, align 4
  %71 = insertvalue { ptr, ptr, ptr, i32 } %68, i32 %70, 3
  call void %59(ptr %50, { ptr, ptr, ptr, i32 } %71) #15
  %72 = alloca ptr, align 8
  store { ptr } %4, ptr %72, align 8
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %74 = load ptr, ptr %73, align 8
  %75 = load ptr, ptr %8, align 8
  %76 = call ptr @llvm.invariant.start.p0(i64 400, ptr %75)
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %78 = load i32, ptr %77, align 4
  %79 = getelementptr ptr, ptr %75, i32 %78
  %80 = getelementptr ptr, ptr %79, i32 2
  %81 = load ptr, ptr %80, align 8
  %82 = getelementptr { ptr, ptr }, ptr %81, i32 0, i32 1
  %83 = load ptr, ptr %82, align 8
  %84 = load ptr, ptr %72, align 8
  %85 = insertvalue { ptr } undef, ptr %84, 0
  call void %83(ptr %74, { ptr } %85) #15
  ret void
}

define { ptr, ptr, ptr, i32 } @FilterIterable2_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @FilterIterable2)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 400, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 1
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call { ptr, ptr, ptr, i32 } %29(ptr %20) #16
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %30, ptr %31, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 16, ptr %31)
  call void @assume_offset(ptr %31, ptr @Iterable2)
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %34 = load ptr, ptr %33, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %34, 0
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  %37 = load ptr, ptr %36, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %37, 1
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %40 = load ptr, ptr %39, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } %38, ptr %40, 2
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  %43 = load i32, ptr %42, align 4
  %44 = insertvalue { ptr, ptr, ptr, i32 } %41, i32 %43, 3
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %46 = load ptr, ptr %45, align 8
  %47 = load ptr, ptr %6, align 8
  %48 = call ptr @llvm.invariant.start.p0(i64 400, ptr %47)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %50 = load i32, ptr %49, align 4
  %51 = getelementptr ptr, ptr %47, i32 %50
  %52 = load ptr, ptr %51, align 8
  %53 = call ptr @typegetter_wrapper(ptr %52, ptr %46)
  %54 = alloca [0 x ptr], align 8
  %55 = call ptr @llvm.invariant.start.p0(i64 0, ptr %54)
  %56 = call ptr @llvm.invariant.start.p0(i64 184, ptr %34)
  %57 = getelementptr ptr, ptr %34, i32 %43
  %58 = getelementptr ptr, ptr %57, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = alloca {}, align 8
  %61 = call ptr @behavior_wrapper(ptr %59, { ptr, ptr, ptr, i32 } %44, ptr %60)
  %62 = call { ptr, ptr, ptr, i32 } %61({ ptr, ptr, ptr, i32 } %44, { ptr, ptr, ptr, i32 } %44, ptr %54)
  %63 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %62, ptr %63, align 8
  %64 = call ptr @llvm.invariant.start.p0(i64 16, ptr %63)
  %65 = alloca { ptr, ptr, ptr, i32 }, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 0
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 0
  %68 = load ptr, ptr %66, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 1
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %71 = load ptr, ptr %69, align 8
  store ptr %71, ptr %70, align 8
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 2
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 2
  %74 = load ptr, ptr %72, align 8
  store ptr %74, ptr %73, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 3
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %77 = load i32, ptr %75, align 4
  store i32 %77, ptr %76, align 4
  call void @set_offset(ptr %65, ptr @Iterator2)
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %79 = load ptr, ptr %78, align 8
  %80 = load ptr, ptr %6, align 8
  %81 = call ptr @llvm.invariant.start.p0(i64 400, ptr %80)
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %83 = load i32, ptr %82, align 4
  %84 = getelementptr ptr, ptr %80, i32 %83
  %85 = getelementptr ptr, ptr %84, i32 2
  %86 = load ptr, ptr %85, align 8
  %87 = getelementptr { ptr, ptr }, ptr %86, i32 0, i32 0
  %88 = load ptr, ptr %87, align 8
  %89 = call { ptr } %88(ptr %79) #16
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = load ptr, ptr %6, align 8
  %93 = call ptr @llvm.invariant.start.p0(i64 400, ptr %92)
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %95 = load i32, ptr %94, align 4
  %96 = getelementptr ptr, ptr %92, i32 %95
  %97 = load ptr, ptr %96, align 8
  %98 = call ptr @typegetter_wrapper(ptr %97, ptr %91)
  %99 = alloca [2 x ptr], align 8
  store ptr @FilterIterator2, ptr %99, align 8
  %100 = getelementptr ptr, ptr %99, i32 1
  store ptr %98, ptr %100, align 8
  %101 = load ptr, ptr %99, align 8
  %102 = getelementptr ptr, ptr %101, i32 6
  %103 = load ptr, ptr %102, align 8
  %104 = call { i64, i64 } @size_wrapper(ptr %103, ptr %99)
  %105 = extractvalue { i64, i64 } %104, 0
  %106 = call ptr @bump_malloc(i64 %105)
  store ptr %98, ptr %106, align 8
  %107 = call ptr @llvm.invariant.start.p0(i64 8, ptr %106)
  %108 = alloca { ptr, ptr, ptr, i32 }, align 8
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 1
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 3
  store ptr @FilterIterator2, ptr %108, align 8
  store ptr %106, ptr %109, align 8
  store i32 9, ptr %110, align 4
  %111 = call ptr @llvm.invariant.start.p0(i64 16, ptr %108)
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %113 = load ptr, ptr %112, align 8
  %114 = load ptr, ptr %6, align 8
  %115 = call ptr @llvm.invariant.start.p0(i64 400, ptr %114)
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %117 = load i32, ptr %116, align 4
  %118 = getelementptr ptr, ptr %114, i32 %117
  %119 = getelementptr ptr, ptr %118, i32 1
  %120 = load ptr, ptr %119, align 8
  %121 = getelementptr { ptr, ptr }, ptr %120, i32 0, i32 0
  %122 = load ptr, ptr %121, align 8
  %123 = call { ptr, ptr, ptr, i32 } %122(ptr %113) #16
  %124 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %123, ptr %124, align 8
  %125 = call ptr @llvm.invariant.start.p0(i64 16, ptr %124)
  call void @assume_offset(ptr %124, ptr @Iterable2)
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %124, i32 0, i32 0
  %127 = load ptr, ptr %126, align 8
  %128 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %127, 0
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %124, i32 0, i32 1
  %130 = load ptr, ptr %129, align 8
  %131 = insertvalue { ptr, ptr, ptr, i32 } %128, ptr %130, 1
  %132 = getelementptr { ptr, ptr, ptr, i32 }, ptr %124, i32 0, i32 2
  %133 = load ptr, ptr %132, align 8
  %134 = insertvalue { ptr, ptr, ptr, i32 } %131, ptr %133, 2
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %124, i32 0, i32 3
  %136 = load i32, ptr %135, align 4
  %137 = insertvalue { ptr, ptr, ptr, i32 } %134, i32 %136, 3
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %139 = load ptr, ptr %138, align 8
  %140 = load ptr, ptr %6, align 8
  %141 = call ptr @llvm.invariant.start.p0(i64 400, ptr %140)
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %143 = load i32, ptr %142, align 4
  %144 = getelementptr ptr, ptr %140, i32 %143
  %145 = load ptr, ptr %144, align 8
  %146 = call ptr @typegetter_wrapper(ptr %145, ptr %139)
  %147 = alloca [0 x ptr], align 8
  %148 = call ptr @llvm.invariant.start.p0(i64 0, ptr %147)
  %149 = call ptr @llvm.invariant.start.p0(i64 184, ptr %127)
  %150 = getelementptr ptr, ptr %127, i32 %136
  %151 = getelementptr ptr, ptr %150, i32 1
  %152 = load ptr, ptr %151, align 8
  %153 = alloca {}, align 8
  %154 = call ptr @behavior_wrapper(ptr %152, { ptr, ptr, ptr, i32 } %137, ptr %153)
  %155 = call { ptr, ptr, ptr, i32 } %154({ ptr, ptr, ptr, i32 } %137, { ptr, ptr, ptr, i32 } %137, ptr %147)
  %156 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %155, ptr %156, align 8
  %157 = call ptr @llvm.invariant.start.p0(i64 16, ptr %156)
  %158 = alloca { ptr, ptr, ptr, i32 }, align 8
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %156, i32 0, i32 0
  %160 = getelementptr { ptr, ptr, ptr, i32 }, ptr %158, i32 0, i32 0
  %161 = load ptr, ptr %159, align 8
  store ptr %161, ptr %160, align 8
  %162 = getelementptr { ptr, ptr, ptr, i32 }, ptr %156, i32 0, i32 1
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %158, i32 0, i32 1
  %164 = load ptr, ptr %162, align 8
  store ptr %164, ptr %163, align 8
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %156, i32 0, i32 2
  %166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %158, i32 0, i32 2
  %167 = load ptr, ptr %165, align 8
  store ptr %167, ptr %166, align 8
  %168 = getelementptr { ptr, ptr, ptr, i32 }, ptr %156, i32 0, i32 3
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %158, i32 0, i32 3
  %170 = load i32, ptr %168, align 4
  store i32 %170, ptr %169, align 4
  call void @set_offset(ptr %158, ptr @Iterator2)
  %171 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %172 = load ptr, ptr %171, align 8
  %173 = load ptr, ptr %6, align 8
  %174 = call ptr @llvm.invariant.start.p0(i64 400, ptr %173)
  %175 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %176 = load i32, ptr %175, align 4
  %177 = getelementptr ptr, ptr %173, i32 %176
  %178 = getelementptr ptr, ptr %177, i32 2
  %179 = load ptr, ptr %178, align 8
  %180 = getelementptr { ptr, ptr }, ptr %179, i32 0, i32 0
  %181 = load ptr, ptr %180, align 8
  %182 = call { ptr } %181(ptr %172) #16
  %183 = alloca ptr, align 8
  store { ptr } %182, ptr %183, align 8
  %184 = alloca { ptr, ptr, ptr, i32 }, align 8
  %185 = getelementptr { ptr, ptr, ptr, i32 }, ptr %158, i32 0, i32 0
  %186 = getelementptr { ptr, ptr, ptr, i32 }, ptr %184, i32 0, i32 0
  %187 = load ptr, ptr %185, align 8
  store ptr %187, ptr %186, align 8
  %188 = getelementptr { ptr, ptr, ptr, i32 }, ptr %158, i32 0, i32 1
  %189 = getelementptr { ptr, ptr, ptr, i32 }, ptr %184, i32 0, i32 1
  %190 = load ptr, ptr %188, align 8
  store ptr %190, ptr %189, align 8
  %191 = getelementptr { ptr, ptr, ptr, i32 }, ptr %158, i32 0, i32 2
  %192 = getelementptr { ptr, ptr, ptr, i32 }, ptr %184, i32 0, i32 2
  %193 = load ptr, ptr %191, align 8
  store ptr %193, ptr %192, align 8
  %194 = getelementptr { ptr, ptr, ptr, i32 }, ptr %158, i32 0, i32 3
  %195 = getelementptr { ptr, ptr, ptr, i32 }, ptr %184, i32 0, i32 3
  %196 = load i32, ptr %194, align 4
  store i32 %196, ptr %195, align 4
  call void @set_offset(ptr %184, ptr @Iterator2)
  %197 = getelementptr { ptr, ptr, ptr, i32 }, ptr %184, i32 0, i32 0
  %198 = load ptr, ptr %197, align 8
  %199 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %198, 0
  %200 = getelementptr { ptr, ptr, ptr, i32 }, ptr %184, i32 0, i32 1
  %201 = load ptr, ptr %200, align 8
  %202 = insertvalue { ptr, ptr, ptr, i32 } %199, ptr %201, 1
  %203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %184, i32 0, i32 2
  %204 = load ptr, ptr %203, align 8
  %205 = insertvalue { ptr, ptr, ptr, i32 } %202, ptr %204, 2
  %206 = getelementptr { ptr, ptr, ptr, i32 }, ptr %184, i32 0, i32 3
  %207 = load i32, ptr %206, align 4
  %208 = insertvalue { ptr, ptr, ptr, i32 } %205, i32 %207, 3
  %209 = load ptr, ptr %183, align 8
  %210 = insertvalue { ptr } undef, ptr %209, 0
  %211 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 0
  %212 = load ptr, ptr %211, align 8
  %213 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %212, 0
  %214 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 1
  %215 = load ptr, ptr %214, align 8
  %216 = insertvalue { ptr, ptr, ptr, i32 } %213, ptr %215, 1
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 2
  %218 = load ptr, ptr %217, align 8
  %219 = insertvalue { ptr, ptr, ptr, i32 } %216, ptr %218, 2
  %220 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 3
  %221 = load i32, ptr %220, align 4
  %222 = insertvalue { ptr, ptr, ptr, i32 } %219, i32 %221, 3
  %223 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %224 = load ptr, ptr %223, align 8
  %225 = load ptr, ptr %6, align 8
  %226 = call ptr @llvm.invariant.start.p0(i64 400, ptr %225)
  %227 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %228 = load i32, ptr %227, align 4
  %229 = getelementptr ptr, ptr %225, i32 %228
  %230 = load ptr, ptr %229, align 8
  %231 = call ptr @typegetter_wrapper(ptr %230, ptr %224)
  %232 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %233 = getelementptr [3 x ptr], ptr %232, i32 0, i32 1
  store ptr %231, ptr %233, align 8
  %234 = getelementptr [3 x ptr], ptr %232, i32 0, i32 2
  store ptr null, ptr %234, align 8
  %235 = call ptr @llvm.invariant.start.p0(i64 16, ptr %232)
  store ptr @Iterator2, ptr %232, align 8
  %236 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %237 = getelementptr [4 x ptr], ptr %236, i32 0, i32 2
  store ptr %231, ptr %237, align 8
  %238 = getelementptr [4 x ptr], ptr %236, i32 0, i32 1
  store ptr @_parameterization_Ptri1, ptr %238, align 8
  %239 = getelementptr [4 x ptr], ptr %236, i32 0, i32 3
  store ptr null, ptr %239, align 8
  %240 = call ptr @llvm.invariant.start.p0(i64 24, ptr %236)
  store ptr @function_typ, ptr %236, align 8
  %241 = alloca [2 x ptr], align 8
  %242 = getelementptr [2 x ptr], ptr %241, i32 0, i32 0
  store ptr %232, ptr %242, align 8
  %243 = getelementptr [2 x ptr], ptr %241, i32 0, i32 1
  store ptr %236, ptr %243, align 8
  %244 = call ptr @llvm.invariant.start.p0(i64 4, ptr %241)
  %245 = call ptr @llvm.invariant.start.p0(i64 80, ptr %212)
  %246 = getelementptr ptr, ptr %212, i32 %221
  %247 = getelementptr ptr, ptr %246, i32 3
  %248 = load ptr, ptr %247, align 8
  %249 = alloca { ptr, ptr }, align 8
  %250 = getelementptr { ptr, ptr }, ptr %249, i32 0, i32 0
  store ptr %198, ptr %250, align 8
  %251 = getelementptr { ptr, ptr }, ptr %249, i32 0, i32 1
  store ptr @function_typ, ptr %251, align 8
  %252 = call ptr @behavior_wrapper(ptr %248, { ptr, ptr, ptr, i32 } %222, ptr %249)
  call void %252({ ptr, ptr, ptr, i32 } %222, { ptr, ptr, ptr, i32 } %222, ptr %241, { ptr, ptr, ptr, i32 } %208, { ptr } %210)
  %253 = alloca { ptr, ptr, ptr, i32 }, align 8
  %254 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 0
  %255 = getelementptr { ptr, ptr, ptr, i32 }, ptr %253, i32 0, i32 0
  %256 = load ptr, ptr %254, align 8
  store ptr %256, ptr %255, align 8
  %257 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 1
  %258 = getelementptr { ptr, ptr, ptr, i32 }, ptr %253, i32 0, i32 1
  %259 = load ptr, ptr %257, align 8
  store ptr %259, ptr %258, align 8
  %260 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 2
  %261 = getelementptr { ptr, ptr, ptr, i32 }, ptr %253, i32 0, i32 2
  %262 = load ptr, ptr %260, align 8
  store ptr %262, ptr %261, align 8
  %263 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 3
  %264 = getelementptr { ptr, ptr, ptr, i32 }, ptr %253, i32 0, i32 3
  %265 = load i32, ptr %263, align 4
  store i32 %265, ptr %264, align 4
  call void @set_offset(ptr %253, ptr @Iterator2)
  %266 = getelementptr { ptr, ptr, ptr, i32 }, ptr %253, i32 0, i32 0
  %267 = load ptr, ptr %266, align 8
  %268 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %267, 0
  %269 = getelementptr { ptr, ptr, ptr, i32 }, ptr %253, i32 0, i32 1
  %270 = load ptr, ptr %269, align 8
  %271 = insertvalue { ptr, ptr, ptr, i32 } %268, ptr %270, 1
  %272 = getelementptr { ptr, ptr, ptr, i32 }, ptr %253, i32 0, i32 2
  %273 = load ptr, ptr %272, align 8
  %274 = insertvalue { ptr, ptr, ptr, i32 } %271, ptr %273, 2
  %275 = getelementptr { ptr, ptr, ptr, i32 }, ptr %253, i32 0, i32 3
  %276 = load i32, ptr %275, align 4
  %277 = insertvalue { ptr, ptr, ptr, i32 } %274, i32 %276, 3
  ret { ptr, ptr, ptr, i32 } %277
}

define { i64, i64 } @_size_FilterIterator2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @FilterIterator2_field_FilterIterator2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @FilterIterator2_B_init_iteratorIterator2T_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 4189192806087951739, i64 ptrtoint (ptr @Iterator2 to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [10 x ptr], ptr %26, i32 0, i32 5
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @FilterIterator2_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [10 x ptr], ptr %4, i32 0, i32 6
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @FilterIterator2_init_iteratorIterator2T_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @FilterIterator2)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @Iterator2)
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %45 = load ptr, ptr %43, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %48 = load i32, ptr %46, align 4
  store i32 %48, ptr %47, align 4
  call void @set_offset(ptr %36, ptr @Iterator2)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %8, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 80, ptr %51)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = getelementptr ptr, ptr %51, i32 %54
  %56 = getelementptr ptr, ptr %55, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr { ptr, ptr }, ptr %57, i32 0, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %61 = load ptr, ptr %60, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %61, 0
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %64 = load ptr, ptr %63, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %62, ptr %64, 1
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %67 = load ptr, ptr %66, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %67, 2
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %70 = load i32, ptr %69, align 4
  %71 = insertvalue { ptr, ptr, ptr, i32 } %68, i32 %70, 3
  call void %59(ptr %50, { ptr, ptr, ptr, i32 } %71) #15
  %72 = alloca ptr, align 8
  store { ptr } %4, ptr %72, align 8
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %74 = load ptr, ptr %73, align 8
  %75 = load ptr, ptr %8, align 8
  %76 = call ptr @llvm.invariant.start.p0(i64 80, ptr %75)
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %78 = load i32, ptr %77, align 4
  %79 = getelementptr ptr, ptr %75, i32 %78
  %80 = getelementptr ptr, ptr %79, i32 2
  %81 = load ptr, ptr %80, align 8
  %82 = getelementptr { ptr, ptr }, ptr %81, i32 0, i32 1
  %83 = load ptr, ptr %82, align 8
  %84 = load ptr, ptr %72, align 8
  %85 = insertvalue { ptr } undef, ptr %84, 0
  call void %83(ptr %74, { ptr } %85) #15
  ret void
}

define { ptr, i160 } @FilterIterator2_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i160, align 8
  %5 = alloca ptr, align 8
  %6 = alloca i160, align 8
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = alloca [0 x ptr], align 8
  %11 = alloca {}, align 8
  %12 = alloca { ptr, i160 }, align 8
  %13 = alloca i160, align 8
  %14 = alloca ptr, align 8
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca i32, align 4
  %.reg2mem5 = alloca i32, align 4
  %.reg2mem8 = alloca i32, align 4
  %.reg2mem10 = alloca i32, align 4
  %.reg2mem12 = alloca ptr, align 8
  %.reg2mem14 = alloca { ptr, i160 }, align 8
  %.reg2mem16 = alloca i32, align 4
  %.reg2mem18 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %15, align 8
  %16 = call ptr @llvm.invariant.start.p0(i64 16, ptr %15)
  %17 = alloca { ptr, ptr, ptr, i32 }, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 0
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 2
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  %29 = load i32, ptr %27, align 4
  store i32 %29, ptr %28, align 4
  call void @set_offset(ptr %17, ptr @FilterIterator2)
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %31 = load ptr, ptr %30, align 8
  %32 = load ptr, ptr %17, align 8
  %33 = call ptr @llvm.invariant.start.p0(i64 80, ptr %32)
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  %35 = load i32, ptr %34, align 4
  %36 = getelementptr ptr, ptr %32, i32 %35
  %37 = getelementptr ptr, ptr %36, i32 1
  %38 = load ptr, ptr %37, align 8
  %39 = getelementptr { ptr, ptr }, ptr %38, i32 0, i32 0
  %40 = load ptr, ptr %39, align 8
  %41 = call { ptr, ptr, ptr, i32 } %40(ptr %31) #16
  %42 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %41, ptr %42, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 16, ptr %42)
  call void @assume_offset(ptr %42, ptr @Iterator2)
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 0
  %45 = load ptr, ptr %44, align 8
  %46 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %45, 0
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 1
  %48 = load ptr, ptr %47, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } %46, ptr %48, 1
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 2
  %51 = load ptr, ptr %50, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } %49, ptr %51, 2
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = insertvalue { ptr, ptr, ptr, i32 } %52, i32 %54, 3
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = load ptr, ptr %17, align 8
  %59 = call ptr @llvm.invariant.start.p0(i64 80, ptr %58)
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  %61 = load i32, ptr %60, align 4
  %62 = getelementptr ptr, ptr %58, i32 %61
  %63 = load ptr, ptr %62, align 8
  %64 = call ptr @typegetter_wrapper(ptr %63, ptr %57)
  %65 = alloca [0 x ptr], align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 0, ptr %65)
  %67 = call ptr @llvm.invariant.start.p0(i64 24, ptr %45)
  %68 = getelementptr ptr, ptr %45, i32 %54
  %69 = getelementptr ptr, ptr %68, i32 1
  %70 = load ptr, ptr %69, align 8
  %71 = alloca {}, align 8
  %72 = call ptr @behavior_wrapper(ptr %70, { ptr, ptr, ptr, i32 } %55, ptr %71)
  %73 = call { ptr, i160 } %72({ ptr, ptr, ptr, i32 } %55, { ptr, ptr, ptr, i32 } %55, ptr %65)
  %74 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %73, ptr %74, align 8
  %75 = getelementptr { ptr, i160 }, ptr %74, i32 0, i32 0
  store ptr %75, ptr %.reg2mem12, align 8
  br label %76

76:                                               ; preds = %165, %3
  %.reload13 = load ptr, ptr %.reg2mem12, align 8
  %77 = load ptr, ptr %.reload13, align 8
  %78 = ptrtoint ptr %77 to i64
  %79 = icmp eq i64 %78, ptrtoint (ptr @nil_typ to i64)
  %80 = icmp eq i64 %78, 0
  %81 = or i1 %79, %80
  %82 = icmp eq i1 %81, false
  br i1 %82, label %83, label %161

83:                                               ; preds = %76
  %84 = getelementptr { ptr, i160 }, ptr %74, i32 0, i32 0
  %85 = load ptr, ptr %84, align 8
  store ptr %85, ptr %5, align 8
  %86 = getelementptr { ptr, i160 }, ptr %74, i32 0, i32 1
  %87 = load i160, ptr %86, align 4
  store i160 %87, ptr %4, align 4
  %88 = load ptr, ptr %5, align 8
  store ptr %88, ptr %7, align 8
  %89 = load i160, ptr %4, align 4
  store i160 %89, ptr %6, align 4
  %90 = load ptr, ptr %7, align 8
  %91 = insertvalue { ptr, i160 } undef, ptr %90, 0
  %92 = load i160, ptr %6, align 4
  %93 = insertvalue { ptr, i160 } %91, i160 %92, 1
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %95 = load ptr, ptr %94, align 8
  %96 = load ptr, ptr %17, align 8
  %97 = call ptr @llvm.invariant.start.p0(i64 80, ptr %96)
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  %99 = load i32, ptr %98, align 4
  %100 = getelementptr ptr, ptr %96, i32 %99
  %101 = getelementptr ptr, ptr %100, i32 2
  %102 = load ptr, ptr %101, align 8
  %103 = getelementptr { ptr, ptr }, ptr %102, i32 0, i32 0
  %104 = load ptr, ptr %103, align 8
  %105 = call { ptr } %104(ptr %95) #16
  store { ptr } %105, ptr %8, align 8
  %106 = load ptr, ptr %8, align 8
  %107 = call i1 %106({ ptr, i160 } %93)
  %108 = zext i1 %107 to i32
  store i32 %108, ptr %.reg2mem10, align 4
  %109 = xor i1 %107, true
  %110 = zext i1 %109 to i32
  store i32 %110, ptr %.reg2mem8, align 4
  br i1 %107, label %111, label %112

111:                                              ; preds = %83
  br label %160

112:                                              ; preds = %83
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %114 = load ptr, ptr %113, align 8
  %115 = load ptr, ptr %17, align 8
  %116 = call ptr @llvm.invariant.start.p0(i64 80, ptr %115)
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  %118 = load i32, ptr %117, align 4
  %119 = getelementptr ptr, ptr %115, i32 %118
  %120 = getelementptr ptr, ptr %119, i32 1
  %121 = load ptr, ptr %120, align 8
  %122 = getelementptr { ptr, ptr }, ptr %121, i32 0, i32 0
  %123 = load ptr, ptr %122, align 8
  %124 = call { ptr, ptr, ptr, i32 } %123(ptr %114) #16
  store { ptr, ptr, ptr, i32 } %124, ptr %9, align 8
  %125 = call ptr @llvm.invariant.start.p0(i64 16, ptr %9)
  call void @assume_offset(ptr %9, ptr @Iterator2)
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %127 = load ptr, ptr %126, align 8
  %128 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %127, 0
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %130 = load ptr, ptr %129, align 8
  %131 = insertvalue { ptr, ptr, ptr, i32 } %128, ptr %130, 1
  %132 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %133 = load ptr, ptr %132, align 8
  %134 = insertvalue { ptr, ptr, ptr, i32 } %131, ptr %133, 2
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %136 = load i32, ptr %135, align 4
  %137 = insertvalue { ptr, ptr, ptr, i32 } %134, i32 %136, 3
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %139 = load ptr, ptr %138, align 8
  %140 = load ptr, ptr %17, align 8
  %141 = call ptr @llvm.invariant.start.p0(i64 80, ptr %140)
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  %143 = load i32, ptr %142, align 4
  %144 = getelementptr ptr, ptr %140, i32 %143
  %145 = load ptr, ptr %144, align 8
  %146 = call ptr @typegetter_wrapper(ptr %145, ptr %139)
  %147 = call ptr @llvm.invariant.start.p0(i64 0, ptr %10)
  %148 = call ptr @llvm.invariant.start.p0(i64 24, ptr %127)
  %149 = getelementptr ptr, ptr %127, i32 %136
  %150 = getelementptr ptr, ptr %149, i32 1
  %151 = load ptr, ptr %150, align 8
  %152 = call ptr @behavior_wrapper(ptr %151, { ptr, ptr, ptr, i32 } %137, ptr %11)
  %153 = call { ptr, i160 } %152({ ptr, ptr, ptr, i32 } %137, { ptr, ptr, ptr, i32 } %137, ptr %10)
  store { ptr, i160 } %153, ptr %12, align 8
  %154 = getelementptr { ptr, i160 }, ptr %12, i32 0, i32 0
  %155 = getelementptr { ptr, i160 }, ptr %74, i32 0, i32 0
  %156 = load ptr, ptr %154, align 8
  store ptr %156, ptr %155, align 8
  %157 = getelementptr { ptr, i160 }, ptr %12, i32 0, i32 1
  %158 = getelementptr { ptr, i160 }, ptr %74, i32 0, i32 1
  %159 = load i160, ptr %157, align 4
  store i160 %159, ptr %158, align 4
  br label %160

160:                                              ; preds = %112, %111
  %.reload9 = load i32, ptr %.reg2mem8, align 4
  %.reload11 = load i32, ptr %.reg2mem10, align 4
  store i32 %.reload9, ptr %.reg2mem16, align 4
  store i32 %.reload11, ptr %.reg2mem18, align 4
  br label %162

161:                                              ; preds = %76
  store i32 0, ptr %.reg2mem16, align 4
  store i32 2, ptr %.reg2mem18, align 4
  br label %162

162:                                              ; preds = %161, %160
  %.reload19 = load i32, ptr %.reg2mem18, align 4
  %.reload17 = load i32, ptr %.reg2mem16, align 4
  store i32 %.reload19, ptr %.reg2mem5, align 4
  store i32 %.reload17, ptr %.reg2mem3, align 4
  br label %163

163:                                              ; preds = %162
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  %164 = trunc i32 %.reload4 to i1
  %.reload7 = load i32, ptr %.reg2mem5, align 4
  br i1 %164, label %165, label %166

165:                                              ; preds = %163
  br label %76

166:                                              ; preds = %163
  %.reload6 = load i32, ptr %.reg2mem5, align 4
  %167 = zext i32 %.reload6 to i64
  %168 = trunc i64 %167 to i32
  switch i32 %168, label %174 [
    i32 1, label %169
  ]

169:                                              ; preds = %166
  %170 = load ptr, ptr %5, align 8
  %171 = insertvalue { ptr, i160 } undef, ptr %170, 0
  %172 = load i160, ptr %4, align 4
  %173 = insertvalue { ptr, i160 } %171, i160 %172, 1
  store { ptr, i160 } %173, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem14, align 8
  br label %179

174:                                              ; preds = %166
  store [0 x i8] undef, ptr %13, align 1
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %14, align 4
  %175 = load ptr, ptr %14, align 8
  %176 = insertvalue { ptr, i160 } undef, ptr %175, 0
  %177 = load i160, ptr %13, align 4
  %178 = insertvalue { ptr, i160 } %176, i160 %177, 1
  store { ptr, i160 } %178, ptr %.reg2mem, align 8
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  store { ptr, i160 } %.reload, ptr %.reg2mem14, align 8
  br label %179

179:                                              ; preds = %174, %169
  %.reload15 = load { ptr, i160 }, ptr %.reg2mem14, align 8
  ret { ptr, i160 } %.reload15
}

define { ptr } @FilterIterator2_getter_f(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr } undef, ptr %15, 0
  ret { ptr } %16
}

define void @FilterIterator2_setter_f(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca ptr, align 8
  store { ptr } %1, ptr %15, align 8
  %16 = getelementptr { ptr }, ptr %14, i32 0, i32 0
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  ret void
}

define { ptr, ptr, ptr, i32 } @FilterIterator2_getter_iterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @FilterIterator2_setter_iterator(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 16, ptr %9)
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %22 = load i32, ptr %20, align 4
  store i32 %22, ptr %21, align 4
  ret void
}

define { ptr } @FilterIterable2_getter_f(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr } undef, ptr %15, 0
  ret { ptr } %16
}

define void @FilterIterable2_setter_f(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca ptr, align 8
  store { ptr } %1, ptr %15, align 8
  %16 = getelementptr { ptr }, ptr %14, i32 0, i32 0
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  ret void
}

define { ptr, ptr, ptr, i32 } @FilterIterable2_getter_iterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @FilterIterable2_setter_iterable(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 16, ptr %9)
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %22 = load i32, ptr %20, align 4
  store i32 %22, ptr %21, align 4
  ret void
}

define { i64, i64 } @_size_MapIterable2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = urem i64 %27, %21
  %29 = icmp eq i64 %28, 0
  %30 = sub i64 %21, %28
  %31 = select i1 %29, i64 0, i64 %30
  %32 = add i64 %27, %31
  %33 = insertvalue { i64, i64 } undef, i64 %32, 0
  %34 = insertvalue { i64, i64 } %33, i64 %21, 1
  ret { i64, i64 } %34
}

define ptr @MapIterable2_field_MapIterable2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @MapIterable2_field_MapIterable2_1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 1
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @MapIterable2_B_init_iterableIterable2T_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [51 x ptr], ptr %26, i32 0, i32 16
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @MapIterable2_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [51 x ptr], ptr %4, i32 0, i32 17
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @MapIterable2_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [51 x ptr], ptr %15, i32 0, i32 18
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @MapIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [51 x ptr], ptr %26, i32 0, i32 19
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @MapIterable2_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [51 x ptr], ptr %15, i32 0, i32 20
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @MapIterable2_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [51 x ptr], ptr %15, i32 0, i32 21
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @MapIterable2_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [51 x ptr], ptr %15, i32 0, i32 22
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @MapIterable2_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [51 x ptr], ptr %15, i32 0, i32 23
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @MapIterable2_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [51 x ptr], ptr %15, i32 0, i32 24
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @MapIterable2_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [51 x ptr], ptr %15, i32 0, i32 25
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @MapIterable2_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [51 x ptr], ptr %15, i32 0, i32 26
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @MapIterable2_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [51 x ptr], ptr %15, i32 0, i32 27
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define void @MapIterable2_init_iterableIterable2T_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @MapIterable2)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @Iterable2)
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %45 = load ptr, ptr %43, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %48 = load i32, ptr %46, align 4
  store i32 %48, ptr %47, align 4
  call void @set_offset(ptr %36, ptr @Iterable2)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %8, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 408, ptr %51)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = getelementptr ptr, ptr %51, i32 %54
  %56 = getelementptr ptr, ptr %55, i32 2
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr { ptr, ptr }, ptr %57, i32 0, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %61 = load ptr, ptr %60, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %61, 0
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %64 = load ptr, ptr %63, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %62, ptr %64, 1
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %67 = load ptr, ptr %66, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %67, 2
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %70 = load i32, ptr %69, align 4
  %71 = insertvalue { ptr, ptr, ptr, i32 } %68, i32 %70, 3
  call void %59(ptr %50, { ptr, ptr, ptr, i32 } %71) #15
  %72 = alloca ptr, align 8
  store { ptr } %4, ptr %72, align 8
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %74 = load ptr, ptr %73, align 8
  %75 = load ptr, ptr %8, align 8
  %76 = call ptr @llvm.invariant.start.p0(i64 408, ptr %75)
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %78 = load i32, ptr %77, align 4
  %79 = getelementptr ptr, ptr %75, i32 %78
  %80 = getelementptr ptr, ptr %79, i32 3
  %81 = load ptr, ptr %80, align 8
  %82 = getelementptr { ptr, ptr }, ptr %81, i32 0, i32 1
  %83 = load ptr, ptr %82, align 8
  %84 = load ptr, ptr %72, align 8
  %85 = insertvalue { ptr } undef, ptr %84, 0
  call void %83(ptr %74, { ptr } %85) #15
  ret void
}

define { ptr, ptr, ptr, i32 } @MapIterable2_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @MapIterable2)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 408, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call { ptr, ptr, ptr, i32 } %29(ptr %20) #16
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %30, ptr %31, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 16, ptr %31)
  call void @assume_offset(ptr %31, ptr @Iterable2)
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %34 = load ptr, ptr %33, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %34, 0
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  %37 = load ptr, ptr %36, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %37, 1
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %40 = load ptr, ptr %39, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } %38, ptr %40, 2
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  %43 = load i32, ptr %42, align 4
  %44 = insertvalue { ptr, ptr, ptr, i32 } %41, i32 %43, 3
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %46 = load ptr, ptr %45, align 8
  %47 = load ptr, ptr %6, align 8
  %48 = call ptr @llvm.invariant.start.p0(i64 408, ptr %47)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %50 = load i32, ptr %49, align 4
  %51 = getelementptr ptr, ptr %47, i32 %50
  %52 = load ptr, ptr %51, align 8
  %53 = call ptr @typegetter_wrapper(ptr %52, ptr %46)
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %55 = load ptr, ptr %54, align 8
  %56 = load ptr, ptr %6, align 8
  %57 = call ptr @llvm.invariant.start.p0(i64 408, ptr %56)
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %59 = load i32, ptr %58, align 4
  %60 = getelementptr ptr, ptr %56, i32 %59
  %61 = getelementptr ptr, ptr %60, i32 1
  %62 = load ptr, ptr %61, align 8
  %63 = call ptr @typegetter_wrapper(ptr %62, ptr %55)
  %64 = alloca [0 x ptr], align 8
  %65 = call ptr @llvm.invariant.start.p0(i64 0, ptr %64)
  %66 = call ptr @llvm.invariant.start.p0(i64 184, ptr %34)
  %67 = getelementptr ptr, ptr %34, i32 %43
  %68 = getelementptr ptr, ptr %67, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = alloca {}, align 8
  %71 = call ptr @behavior_wrapper(ptr %69, { ptr, ptr, ptr, i32 } %44, ptr %70)
  %72 = call { ptr, ptr, ptr, i32 } %71({ ptr, ptr, ptr, i32 } %44, { ptr, ptr, ptr, i32 } %44, ptr %64)
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %72, ptr %73, align 8
  %74 = call ptr @llvm.invariant.start.p0(i64 16, ptr %73)
  %75 = alloca { ptr, ptr, ptr, i32 }, align 8
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 0
  %78 = load ptr, ptr %76, align 8
  store ptr %78, ptr %77, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 1
  %81 = load ptr, ptr %79, align 8
  store ptr %81, ptr %80, align 8
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 2
  %84 = load ptr, ptr %82, align 8
  store ptr %84, ptr %83, align 8
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %75, i32 0, i32 3
  %87 = load i32, ptr %85, align 4
  store i32 %87, ptr %86, align 4
  call void @set_offset(ptr %75, ptr @Iterator2)
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %89 = load ptr, ptr %88, align 8
  %90 = load ptr, ptr %6, align 8
  %91 = call ptr @llvm.invariant.start.p0(i64 408, ptr %90)
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %93 = load i32, ptr %92, align 4
  %94 = getelementptr ptr, ptr %90, i32 %93
  %95 = getelementptr ptr, ptr %94, i32 3
  %96 = load ptr, ptr %95, align 8
  %97 = getelementptr { ptr, ptr }, ptr %96, i32 0, i32 0
  %98 = load ptr, ptr %97, align 8
  %99 = call { ptr } %98(ptr %89) #16
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %101 = load ptr, ptr %100, align 8
  %102 = load ptr, ptr %6, align 8
  %103 = call ptr @llvm.invariant.start.p0(i64 408, ptr %102)
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %105 = load i32, ptr %104, align 4
  %106 = getelementptr ptr, ptr %102, i32 %105
  %107 = load ptr, ptr %106, align 8
  %108 = call ptr @typegetter_wrapper(ptr %107, ptr %101)
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %110 = load ptr, ptr %109, align 8
  %111 = load ptr, ptr %6, align 8
  %112 = call ptr @llvm.invariant.start.p0(i64 408, ptr %111)
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %114 = load i32, ptr %113, align 4
  %115 = getelementptr ptr, ptr %111, i32 %114
  %116 = getelementptr ptr, ptr %115, i32 1
  %117 = load ptr, ptr %116, align 8
  %118 = call ptr @typegetter_wrapper(ptr %117, ptr %110)
  %119 = alloca [3 x ptr], align 8
  store ptr @MapIterator2, ptr %119, align 8
  %120 = getelementptr ptr, ptr %119, i32 1
  store ptr %108, ptr %120, align 8
  %121 = getelementptr ptr, ptr %119, i32 2
  store ptr %118, ptr %121, align 8
  %122 = load ptr, ptr %119, align 8
  %123 = getelementptr ptr, ptr %122, i32 6
  %124 = load ptr, ptr %123, align 8
  %125 = call { i64, i64 } @size_wrapper(ptr %124, ptr %119)
  %126 = extractvalue { i64, i64 } %125, 0
  %127 = call ptr @bump_malloc(i64 %126)
  store ptr %108, ptr %127, align 8
  %128 = getelementptr ptr, ptr %127, i32 1
  store ptr %118, ptr %128, align 8
  %129 = call ptr @llvm.invariant.start.p0(i64 16, ptr %127)
  %130 = alloca { ptr, ptr, ptr, i32 }, align 8
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 1
  %132 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 3
  store ptr @MapIterator2, ptr %130, align 8
  store ptr %127, ptr %131, align 8
  store i32 9, ptr %132, align 4
  %133 = call ptr @llvm.invariant.start.p0(i64 16, ptr %130)
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %135 = load ptr, ptr %134, align 8
  %136 = load ptr, ptr %6, align 8
  %137 = call ptr @llvm.invariant.start.p0(i64 408, ptr %136)
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %139 = load i32, ptr %138, align 4
  %140 = getelementptr ptr, ptr %136, i32 %139
  %141 = getelementptr ptr, ptr %140, i32 2
  %142 = load ptr, ptr %141, align 8
  %143 = getelementptr { ptr, ptr }, ptr %142, i32 0, i32 0
  %144 = load ptr, ptr %143, align 8
  %145 = call { ptr, ptr, ptr, i32 } %144(ptr %135) #16
  %146 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %145, ptr %146, align 8
  %147 = call ptr @llvm.invariant.start.p0(i64 16, ptr %146)
  call void @assume_offset(ptr %146, ptr @Iterable2)
  %148 = getelementptr { ptr, ptr, ptr, i32 }, ptr %146, i32 0, i32 0
  %149 = load ptr, ptr %148, align 8
  %150 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %149, 0
  %151 = getelementptr { ptr, ptr, ptr, i32 }, ptr %146, i32 0, i32 1
  %152 = load ptr, ptr %151, align 8
  %153 = insertvalue { ptr, ptr, ptr, i32 } %150, ptr %152, 1
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %146, i32 0, i32 2
  %155 = load ptr, ptr %154, align 8
  %156 = insertvalue { ptr, ptr, ptr, i32 } %153, ptr %155, 2
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %146, i32 0, i32 3
  %158 = load i32, ptr %157, align 4
  %159 = insertvalue { ptr, ptr, ptr, i32 } %156, i32 %158, 3
  %160 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %161 = load ptr, ptr %160, align 8
  %162 = load ptr, ptr %6, align 8
  %163 = call ptr @llvm.invariant.start.p0(i64 408, ptr %162)
  %164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %165 = load i32, ptr %164, align 4
  %166 = getelementptr ptr, ptr %162, i32 %165
  %167 = load ptr, ptr %166, align 8
  %168 = call ptr @typegetter_wrapper(ptr %167, ptr %161)
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %170 = load ptr, ptr %169, align 8
  %171 = load ptr, ptr %6, align 8
  %172 = call ptr @llvm.invariant.start.p0(i64 408, ptr %171)
  %173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %174 = load i32, ptr %173, align 4
  %175 = getelementptr ptr, ptr %171, i32 %174
  %176 = getelementptr ptr, ptr %175, i32 1
  %177 = load ptr, ptr %176, align 8
  %178 = call ptr @typegetter_wrapper(ptr %177, ptr %170)
  %179 = alloca [0 x ptr], align 8
  %180 = call ptr @llvm.invariant.start.p0(i64 0, ptr %179)
  %181 = call ptr @llvm.invariant.start.p0(i64 184, ptr %149)
  %182 = getelementptr ptr, ptr %149, i32 %158
  %183 = getelementptr ptr, ptr %182, i32 1
  %184 = load ptr, ptr %183, align 8
  %185 = alloca {}, align 8
  %186 = call ptr @behavior_wrapper(ptr %184, { ptr, ptr, ptr, i32 } %159, ptr %185)
  %187 = call { ptr, ptr, ptr, i32 } %186({ ptr, ptr, ptr, i32 } %159, { ptr, ptr, ptr, i32 } %159, ptr %179)
  %188 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %187, ptr %188, align 8
  %189 = call ptr @llvm.invariant.start.p0(i64 16, ptr %188)
  %190 = alloca { ptr, ptr, ptr, i32 }, align 8
  %191 = getelementptr { ptr, ptr, ptr, i32 }, ptr %188, i32 0, i32 0
  %192 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 0
  %193 = load ptr, ptr %191, align 8
  store ptr %193, ptr %192, align 8
  %194 = getelementptr { ptr, ptr, ptr, i32 }, ptr %188, i32 0, i32 1
  %195 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 1
  %196 = load ptr, ptr %194, align 8
  store ptr %196, ptr %195, align 8
  %197 = getelementptr { ptr, ptr, ptr, i32 }, ptr %188, i32 0, i32 2
  %198 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 2
  %199 = load ptr, ptr %197, align 8
  store ptr %199, ptr %198, align 8
  %200 = getelementptr { ptr, ptr, ptr, i32 }, ptr %188, i32 0, i32 3
  %201 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 3
  %202 = load i32, ptr %200, align 4
  store i32 %202, ptr %201, align 4
  call void @set_offset(ptr %190, ptr @Iterator2)
  %203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %204 = load ptr, ptr %203, align 8
  %205 = load ptr, ptr %6, align 8
  %206 = call ptr @llvm.invariant.start.p0(i64 408, ptr %205)
  %207 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %208 = load i32, ptr %207, align 4
  %209 = getelementptr ptr, ptr %205, i32 %208
  %210 = getelementptr ptr, ptr %209, i32 3
  %211 = load ptr, ptr %210, align 8
  %212 = getelementptr { ptr, ptr }, ptr %211, i32 0, i32 0
  %213 = load ptr, ptr %212, align 8
  %214 = call { ptr } %213(ptr %204) #16
  %215 = alloca ptr, align 8
  store { ptr } %214, ptr %215, align 8
  %216 = alloca { ptr, ptr, ptr, i32 }, align 8
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 0
  %218 = getelementptr { ptr, ptr, ptr, i32 }, ptr %216, i32 0, i32 0
  %219 = load ptr, ptr %217, align 8
  store ptr %219, ptr %218, align 8
  %220 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 1
  %221 = getelementptr { ptr, ptr, ptr, i32 }, ptr %216, i32 0, i32 1
  %222 = load ptr, ptr %220, align 8
  store ptr %222, ptr %221, align 8
  %223 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 2
  %224 = getelementptr { ptr, ptr, ptr, i32 }, ptr %216, i32 0, i32 2
  %225 = load ptr, ptr %223, align 8
  store ptr %225, ptr %224, align 8
  %226 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 3
  %227 = getelementptr { ptr, ptr, ptr, i32 }, ptr %216, i32 0, i32 3
  %228 = load i32, ptr %226, align 4
  store i32 %228, ptr %227, align 4
  call void @set_offset(ptr %216, ptr @Iterator2)
  %229 = getelementptr { ptr, ptr, ptr, i32 }, ptr %216, i32 0, i32 0
  %230 = load ptr, ptr %229, align 8
  %231 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %230, 0
  %232 = getelementptr { ptr, ptr, ptr, i32 }, ptr %216, i32 0, i32 1
  %233 = load ptr, ptr %232, align 8
  %234 = insertvalue { ptr, ptr, ptr, i32 } %231, ptr %233, 1
  %235 = getelementptr { ptr, ptr, ptr, i32 }, ptr %216, i32 0, i32 2
  %236 = load ptr, ptr %235, align 8
  %237 = insertvalue { ptr, ptr, ptr, i32 } %234, ptr %236, 2
  %238 = getelementptr { ptr, ptr, ptr, i32 }, ptr %216, i32 0, i32 3
  %239 = load i32, ptr %238, align 4
  %240 = insertvalue { ptr, ptr, ptr, i32 } %237, i32 %239, 3
  %241 = load ptr, ptr %215, align 8
  %242 = insertvalue { ptr } undef, ptr %241, 0
  %243 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 0
  %244 = load ptr, ptr %243, align 8
  %245 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %244, 0
  %246 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 1
  %247 = load ptr, ptr %246, align 8
  %248 = insertvalue { ptr, ptr, ptr, i32 } %245, ptr %247, 1
  %249 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 2
  %250 = load ptr, ptr %249, align 8
  %251 = insertvalue { ptr, ptr, ptr, i32 } %248, ptr %250, 2
  %252 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 3
  %253 = load i32, ptr %252, align 4
  %254 = insertvalue { ptr, ptr, ptr, i32 } %251, i32 %253, 3
  %255 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %256 = load ptr, ptr %255, align 8
  %257 = load ptr, ptr %6, align 8
  %258 = call ptr @llvm.invariant.start.p0(i64 408, ptr %257)
  %259 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %260 = load i32, ptr %259, align 4
  %261 = getelementptr ptr, ptr %257, i32 %260
  %262 = load ptr, ptr %261, align 8
  %263 = call ptr @typegetter_wrapper(ptr %262, ptr %256)
  %264 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %265 = load ptr, ptr %264, align 8
  %266 = load ptr, ptr %6, align 8
  %267 = call ptr @llvm.invariant.start.p0(i64 408, ptr %266)
  %268 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %269 = load i32, ptr %268, align 4
  %270 = getelementptr ptr, ptr %266, i32 %269
  %271 = getelementptr ptr, ptr %270, i32 1
  %272 = load ptr, ptr %271, align 8
  %273 = call ptr @typegetter_wrapper(ptr %272, ptr %265)
  %274 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([3 x ptr], ptr null, i32 1) to i64))
  %275 = getelementptr [3 x ptr], ptr %274, i32 0, i32 1
  store ptr %263, ptr %275, align 8
  %276 = getelementptr [3 x ptr], ptr %274, i32 0, i32 2
  store ptr null, ptr %276, align 8
  %277 = call ptr @llvm.invariant.start.p0(i64 16, ptr %274)
  store ptr @Iterator2, ptr %274, align 8
  %278 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ([4 x ptr], ptr null, i32 1) to i64))
  %279 = getelementptr [4 x ptr], ptr %278, i32 0, i32 2
  store ptr %263, ptr %279, align 8
  %280 = getelementptr [4 x ptr], ptr %278, i32 0, i32 1
  store ptr %273, ptr %280, align 8
  %281 = getelementptr [4 x ptr], ptr %278, i32 0, i32 3
  store ptr null, ptr %281, align 8
  %282 = call ptr @llvm.invariant.start.p0(i64 24, ptr %278)
  store ptr @function_typ, ptr %278, align 8
  %283 = alloca [2 x ptr], align 8
  %284 = getelementptr [2 x ptr], ptr %283, i32 0, i32 0
  store ptr %274, ptr %284, align 8
  %285 = getelementptr [2 x ptr], ptr %283, i32 0, i32 1
  store ptr %278, ptr %285, align 8
  %286 = call ptr @llvm.invariant.start.p0(i64 4, ptr %283)
  %287 = call ptr @llvm.invariant.start.p0(i64 88, ptr %244)
  %288 = getelementptr ptr, ptr %244, i32 %253
  %289 = getelementptr ptr, ptr %288, i32 4
  %290 = load ptr, ptr %289, align 8
  %291 = alloca { ptr, ptr }, align 8
  %292 = getelementptr { ptr, ptr }, ptr %291, i32 0, i32 0
  store ptr %230, ptr %292, align 8
  %293 = getelementptr { ptr, ptr }, ptr %291, i32 0, i32 1
  store ptr @function_typ, ptr %293, align 8
  %294 = call ptr @behavior_wrapper(ptr %290, { ptr, ptr, ptr, i32 } %254, ptr %291)
  call void %294({ ptr, ptr, ptr, i32 } %254, { ptr, ptr, ptr, i32 } %254, ptr %283, { ptr, ptr, ptr, i32 } %240, { ptr } %242)
  %295 = alloca { ptr, ptr, ptr, i32 }, align 8
  %296 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 0
  %297 = getelementptr { ptr, ptr, ptr, i32 }, ptr %295, i32 0, i32 0
  %298 = load ptr, ptr %296, align 8
  store ptr %298, ptr %297, align 8
  %299 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 1
  %300 = getelementptr { ptr, ptr, ptr, i32 }, ptr %295, i32 0, i32 1
  %301 = load ptr, ptr %299, align 8
  store ptr %301, ptr %300, align 8
  %302 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 2
  %303 = getelementptr { ptr, ptr, ptr, i32 }, ptr %295, i32 0, i32 2
  %304 = load ptr, ptr %302, align 8
  store ptr %304, ptr %303, align 8
  %305 = getelementptr { ptr, ptr, ptr, i32 }, ptr %130, i32 0, i32 3
  %306 = getelementptr { ptr, ptr, ptr, i32 }, ptr %295, i32 0, i32 3
  %307 = load i32, ptr %305, align 4
  store i32 %307, ptr %306, align 4
  call void @set_offset(ptr %295, ptr @Iterator2)
  %308 = getelementptr { ptr, ptr, ptr, i32 }, ptr %295, i32 0, i32 0
  %309 = load ptr, ptr %308, align 8
  %310 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %309, 0
  %311 = getelementptr { ptr, ptr, ptr, i32 }, ptr %295, i32 0, i32 1
  %312 = load ptr, ptr %311, align 8
  %313 = insertvalue { ptr, ptr, ptr, i32 } %310, ptr %312, 1
  %314 = getelementptr { ptr, ptr, ptr, i32 }, ptr %295, i32 0, i32 2
  %315 = load ptr, ptr %314, align 8
  %316 = insertvalue { ptr, ptr, ptr, i32 } %313, ptr %315, 2
  %317 = getelementptr { ptr, ptr, ptr, i32 }, ptr %295, i32 0, i32 3
  %318 = load i32, ptr %317, align 4
  %319 = insertvalue { ptr, ptr, ptr, i32 } %316, i32 %318, 3
  ret { ptr, ptr, ptr, i32 } %319
}

define { i64, i64 } @_size_MapIterator2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %13
  %21 = select i1 %20, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 %13
  %22 = urem i64 %19, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %25
  %27 = add i64 %19, %26
  %28 = urem i64 %27, %21
  %29 = icmp eq i64 %28, 0
  %30 = sub i64 %21, %28
  %31 = select i1 %29, i64 0, i64 %30
  %32 = add i64 %27, %31
  %33 = insertvalue { i64, i64 } undef, i64 %32, 0
  %34 = insertvalue { i64, i64 } %33, i64 %21, 1
  ret { i64, i64 } %34
}

define ptr @MapIterator2_field_MapIterator2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @MapIterator2_field_MapIterator2_1(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr ptr, ptr %0, i32 1
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @MapIterator2_B_init_iteratorIterator2T_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 4189192806087951739, i64 ptrtoint (ptr @Iterator2 to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [11 x ptr], ptr %26, i32 0, i32 6
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @MapIterator2_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [11 x ptr], ptr %4, i32 0, i32 7
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @MapIterator2_init_iteratorIterator2T_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @MapIterator2)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @Iterator2)
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %45 = load ptr, ptr %43, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %48 = load i32, ptr %46, align 4
  store i32 %48, ptr %47, align 4
  call void @set_offset(ptr %36, ptr @Iterator2)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %8, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 88, ptr %51)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = getelementptr ptr, ptr %51, i32 %54
  %56 = getelementptr ptr, ptr %55, i32 2
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr { ptr, ptr }, ptr %57, i32 0, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %61 = load ptr, ptr %60, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %61, 0
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %64 = load ptr, ptr %63, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %62, ptr %64, 1
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %67 = load ptr, ptr %66, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %67, 2
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %70 = load i32, ptr %69, align 4
  %71 = insertvalue { ptr, ptr, ptr, i32 } %68, i32 %70, 3
  call void %59(ptr %50, { ptr, ptr, ptr, i32 } %71) #15
  %72 = alloca ptr, align 8
  store { ptr } %4, ptr %72, align 8
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %74 = load ptr, ptr %73, align 8
  %75 = load ptr, ptr %8, align 8
  %76 = call ptr @llvm.invariant.start.p0(i64 88, ptr %75)
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %78 = load i32, ptr %77, align 4
  %79 = getelementptr ptr, ptr %75, i32 %78
  %80 = getelementptr ptr, ptr %79, i32 3
  %81 = load ptr, ptr %80, align 8
  %82 = getelementptr { ptr, ptr }, ptr %81, i32 0, i32 1
  %83 = load ptr, ptr %82, align 8
  %84 = load ptr, ptr %72, align 8
  %85 = insertvalue { ptr } undef, ptr %84, 0
  call void %83(ptr %74, { ptr } %85) #15
  ret void
}

define { ptr, i160 } @MapIterator2_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i160, align 8
  %5 = alloca ptr, align 8
  %6 = alloca i160, align 8
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  %9 = alloca { ptr, i160 }, align 8
  %10 = alloca i160, align 8
  %11 = alloca ptr, align 8
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %12, align 8
  %13 = call ptr @llvm.invariant.start.p0(i64 16, ptr %12)
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 0
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 2
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %26 = load i32, ptr %24, align 4
  store i32 %26, ptr %25, align 4
  call void @set_offset(ptr %14, ptr @MapIterator2)
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = load ptr, ptr %14, align 8
  %30 = call ptr @llvm.invariant.start.p0(i64 88, ptr %29)
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %32 = load i32, ptr %31, align 4
  %33 = getelementptr ptr, ptr %29, i32 %32
  %34 = getelementptr ptr, ptr %33, i32 2
  %35 = load ptr, ptr %34, align 8
  %36 = getelementptr { ptr, ptr }, ptr %35, i32 0, i32 0
  %37 = load ptr, ptr %36, align 8
  %38 = call { ptr, ptr, ptr, i32 } %37(ptr %28) #16
  %39 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %38, ptr %39, align 8
  %40 = call ptr @llvm.invariant.start.p0(i64 16, ptr %39)
  call void @assume_offset(ptr %39, ptr @Iterator2)
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 0
  %42 = load ptr, ptr %41, align 8
  %43 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %42, 0
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 1
  %45 = load ptr, ptr %44, align 8
  %46 = insertvalue { ptr, ptr, ptr, i32 } %43, ptr %45, 1
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 2
  %48 = load ptr, ptr %47, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } %46, ptr %48, 2
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 3
  %51 = load i32, ptr %50, align 4
  %52 = insertvalue { ptr, ptr, ptr, i32 } %49, i32 %51, 3
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %54 = load ptr, ptr %53, align 8
  %55 = load ptr, ptr %14, align 8
  %56 = call ptr @llvm.invariant.start.p0(i64 88, ptr %55)
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %58 = load i32, ptr %57, align 4
  %59 = getelementptr ptr, ptr %55, i32 %58
  %60 = load ptr, ptr %59, align 8
  %61 = call ptr @typegetter_wrapper(ptr %60, ptr %54)
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %63 = load ptr, ptr %62, align 8
  %64 = load ptr, ptr %14, align 8
  %65 = call ptr @llvm.invariant.start.p0(i64 88, ptr %64)
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %67 = load i32, ptr %66, align 4
  %68 = getelementptr ptr, ptr %64, i32 %67
  %69 = getelementptr ptr, ptr %68, i32 1
  %70 = load ptr, ptr %69, align 8
  %71 = call ptr @typegetter_wrapper(ptr %70, ptr %63)
  %72 = alloca [0 x ptr], align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 0, ptr %72)
  %74 = call ptr @llvm.invariant.start.p0(i64 24, ptr %42)
  %75 = getelementptr ptr, ptr %42, i32 %51
  %76 = getelementptr ptr, ptr %75, i32 1
  %77 = load ptr, ptr %76, align 8
  %78 = alloca {}, align 8
  %79 = call ptr @behavior_wrapper(ptr %77, { ptr, ptr, ptr, i32 } %52, ptr %78)
  %80 = call { ptr, i160 } %79({ ptr, ptr, ptr, i32 } %52, { ptr, ptr, ptr, i32 } %52, ptr %72)
  %81 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %80, ptr %81, align 8
  %82 = getelementptr { ptr, i160 }, ptr %81, i32 0, i32 0
  %83 = load ptr, ptr %82, align 8
  %84 = ptrtoint ptr %83 to i64
  %85 = icmp eq i64 %84, ptrtoint (ptr @nil_typ to i64)
  %86 = icmp eq i64 %84, 0
  %87 = or i1 %85, %86
  %88 = icmp eq i1 %87, false
  br i1 %88, label %89, label %120

89:                                               ; preds = %3
  %90 = getelementptr { ptr, i160 }, ptr %81, i32 0, i32 0
  %91 = load ptr, ptr %90, align 8
  store ptr %91, ptr %5, align 8
  %92 = getelementptr { ptr, i160 }, ptr %81, i32 0, i32 1
  %93 = load i160, ptr %92, align 4
  store i160 %93, ptr %4, align 4
  %94 = load ptr, ptr %5, align 8
  store ptr %94, ptr %7, align 8
  %95 = load i160, ptr %4, align 4
  store i160 %95, ptr %6, align 4
  %96 = load ptr, ptr %7, align 8
  %97 = insertvalue { ptr, i160 } undef, ptr %96, 0
  %98 = load i160, ptr %6, align 4
  %99 = insertvalue { ptr, i160 } %97, i160 %98, 1
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %101 = load ptr, ptr %100, align 8
  %102 = load ptr, ptr %14, align 8
  %103 = call ptr @llvm.invariant.start.p0(i64 88, ptr %102)
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %105 = load i32, ptr %104, align 4
  %106 = getelementptr ptr, ptr %102, i32 %105
  %107 = getelementptr ptr, ptr %106, i32 3
  %108 = load ptr, ptr %107, align 8
  %109 = getelementptr { ptr, ptr }, ptr %108, i32 0, i32 0
  %110 = load ptr, ptr %109, align 8
  %111 = call { ptr } %110(ptr %101) #16
  store { ptr } %111, ptr %8, align 8
  %112 = load ptr, ptr %8, align 8
  %113 = call { ptr, i160 } %112({ ptr, i160 } %99)
  store { ptr, i160 } %113, ptr %9, align 8
  %114 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 0
  %115 = load ptr, ptr %114, align 8
  %116 = insertvalue { ptr, i160 } undef, ptr %115, 0
  %117 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 1
  %118 = load i160, ptr %117, align 4
  %119 = insertvalue { ptr, i160 } %116, i160 %118, 1
  store { ptr, i160 } %119, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem5, align 8
  br label %125

120:                                              ; preds = %3
  store [0 x i8] undef, ptr %10, align 1
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %11, align 4
  %121 = load ptr, ptr %11, align 8
  %122 = insertvalue { ptr, i160 } undef, ptr %121, 0
  %123 = load i160, ptr %10, align 4
  %124 = insertvalue { ptr, i160 } %122, i160 %123, 1
  store { ptr, i160 } %124, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem5, align 8
  br label %125

125:                                              ; preds = %120, %89
  %.reload6 = load { ptr, i160 }, ptr %.reg2mem5, align 8
  store { ptr, i160 } %.reload6, ptr %.reg2mem, align 8
  br label %126

126:                                              ; preds = %125
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  ret { ptr, i160 } %.reload
}

define { ptr } @MapIterator2_getter_f(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = getelementptr { ptr }, ptr %19, i32 0, i32 0
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr } undef, ptr %21, 0
  ret { ptr } %22
}

define void @MapIterator2_setter_f(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = alloca ptr, align 8
  store { ptr } %1, ptr %21, align 8
  %22 = getelementptr { ptr }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  ret void
}

define { ptr, ptr, ptr, i32 } @MapIterator2_getter_iterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %15, 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %21, 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 %24, 3
  ret { ptr, ptr, ptr, i32 } %25
}

define void @MapIterator2_setter_iterator(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %15, align 8
  %16 = call ptr @llvm.invariant.start.p0(i64 16, ptr %15)
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %28 = load i32, ptr %26, align 4
  store i32 %28, ptr %27, align 4
  ret void
}

define { ptr } @MapIterable2_getter_f(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = getelementptr { ptr }, ptr %19, i32 0, i32 0
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr } undef, ptr %21, 0
  ret { ptr } %22
}

define void @MapIterable2_setter_f(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  %21 = alloca ptr, align 8
  store { ptr } %1, ptr %21, align 8
  %22 = getelementptr { ptr }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  ret void
}

define { ptr, ptr, ptr, i32 } @MapIterable2_getter_iterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %15, 0
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %21, 2
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 %24, 3
  ret { ptr, ptr, ptr, i32 } %25
}

define void @MapIterable2_setter_iterable(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %15, align 8
  %16 = call ptr @llvm.invariant.start.p0(i64 16, ptr %15)
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %28 = load i32, ptr %26, align 4
  store i32 %28, ptr %27, align 4
  ret void
}

define { i64, i64 } @_size_ArrayIterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, ptr }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @ArrayIterator_field_ArrayIterator_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @ArrayIterator_B_init_arrayArrayT({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -5261542750394134544, i64 ptrtoint (ptr @Array to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [10 x ptr], ptr %15, i32 0, i32 5
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ArrayIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [10 x ptr], ptr %4, i32 0, i32 6
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @ArrayIterator_init_arrayArrayT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @ArrayIterator)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 16, ptr %20)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %34 = load i32, ptr %32, align 4
  store i32 %34, ptr %33, align 4
  call void @set_offset(ptr %22, ptr @Array)
  %35 = alloca { ptr, ptr, ptr, i32 }, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %38 = load ptr, ptr %36, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %41 = load ptr, ptr %39, align 8
  store ptr %41, ptr %40, align 8
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %44 = load ptr, ptr %42, align 8
  store ptr %44, ptr %43, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %47 = load i32, ptr %45, align 4
  store i32 %47, ptr %46, align 4
  call void @set_offset(ptr %35, ptr @Array)
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = load ptr, ptr %7, align 8
  %51 = call ptr @llvm.invariant.start.p0(i64 80, ptr %50)
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %53 = load i32, ptr %52, align 4
  %54 = getelementptr ptr, ptr %50, i32 %53
  %55 = getelementptr ptr, ptr %54, i32 1
  %56 = load ptr, ptr %55, align 8
  %57 = getelementptr { ptr, ptr }, ptr %56, i32 0, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %63 = load ptr, ptr %62, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %63, 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %66 = load ptr, ptr %65, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %66, 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %69 = load i32, ptr %68, align 4
  %70 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %69, 3
  call void %58(ptr %49, { ptr, ptr, ptr, i32 } %70) #15
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %72 = load ptr, ptr %71, align 8
  %73 = load ptr, ptr %7, align 8
  %74 = call ptr @llvm.invariant.start.p0(i64 80, ptr %73)
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %76 = load i32, ptr %75, align 4
  %77 = getelementptr ptr, ptr %73, i32 %76
  %78 = getelementptr ptr, ptr %77, i32 2
  %79 = load ptr, ptr %78, align 8
  %80 = getelementptr { ptr, ptr }, ptr %79, i32 0, i32 1
  %81 = load ptr, ptr %80, align 8
  call void %81(ptr %72, i32 0) #15
  ret void
}

define { ptr, i160 } @ArrayIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i160, align 8
  %5 = alloca ptr, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = alloca [1 x ptr], align 8
  %8 = alloca { ptr }, align 8
  %9 = alloca { ptr, i160 }, align 8
  %10 = alloca i160, align 8
  %11 = alloca ptr, align 8
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %12, align 8
  %13 = call ptr @llvm.invariant.start.p0(i64 16, ptr %12)
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 0
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 2
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %26 = load i32, ptr %24, align 4
  store i32 %26, ptr %25, align 4
  call void @set_offset(ptr %14, ptr @ArrayIterator)
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = load ptr, ptr %14, align 8
  %30 = call ptr @llvm.invariant.start.p0(i64 80, ptr %29)
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %32 = load i32, ptr %31, align 4
  %33 = getelementptr ptr, ptr %29, i32 %32
  %34 = getelementptr ptr, ptr %33, i32 2
  %35 = load ptr, ptr %34, align 8
  %36 = getelementptr { ptr, ptr }, ptr %35, i32 0, i32 0
  %37 = load ptr, ptr %36, align 8
  %38 = call i32 %37(ptr %28) #16
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %40 = load ptr, ptr %39, align 8
  %41 = load ptr, ptr %14, align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 80, ptr %41)
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %44 = load i32, ptr %43, align 4
  %45 = getelementptr ptr, ptr %41, i32 %44
  %46 = getelementptr ptr, ptr %45, i32 1
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr { ptr, ptr }, ptr %47, i32 0, i32 0
  %49 = load ptr, ptr %48, align 8
  %50 = call { ptr, ptr, ptr, i32 } %49(ptr %40) #16
  %51 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %50, ptr %51, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 16, ptr %51)
  call void @assume_offset(ptr %51, ptr @Array)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 0
  %54 = load ptr, ptr %53, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %54, 0
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %57, 1
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 2
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } %58, ptr %60, 2
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 3
  %63 = load i32, ptr %62, align 4
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, i32 %63, 3
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %66 = load ptr, ptr %65, align 8
  %67 = load ptr, ptr %14, align 8
  %68 = call ptr @llvm.invariant.start.p0(i64 80, ptr %67)
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %70 = load i32, ptr %69, align 4
  %71 = getelementptr ptr, ptr %67, i32 %70
  %72 = load ptr, ptr %71, align 8
  %73 = call ptr @typegetter_wrapper(ptr %72, ptr %66)
  %74 = alloca [0 x ptr], align 8
  %75 = call ptr @llvm.invariant.start.p0(i64 0, ptr %74)
  %76 = call ptr @llvm.invariant.start.p0(i64 552, ptr %54)
  %77 = getelementptr ptr, ptr %54, i32 %63
  %78 = getelementptr ptr, ptr %77, i32 7
  %79 = load ptr, ptr %78, align 8
  %80 = alloca {}, align 8
  %81 = call ptr @behavior_wrapper(ptr %79, { ptr, ptr, ptr, i32 } %64, ptr %80)
  %82 = call i32 %81({ ptr, ptr, ptr, i32 } %64, { ptr, ptr, ptr, i32 } %64, ptr %74)
  %83 = icmp sge i32 %38, %82
  br i1 %83, label %84, label %89

84:                                               ; preds = %3
  store [0 x i8] undef, ptr %4, align 1
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %5, align 4
  %85 = load ptr, ptr %5, align 8
  %86 = insertvalue { ptr, i160 } undef, ptr %85, 0
  %87 = load i160, ptr %4, align 4
  %88 = insertvalue { ptr, i160 } %86, i160 %87, 1
  store { ptr, i160 } %88, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem5, align 8
  br label %178

89:                                               ; preds = %3
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = load ptr, ptr %14, align 8
  %93 = call ptr @llvm.invariant.start.p0(i64 80, ptr %92)
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %95 = load i32, ptr %94, align 4
  %96 = getelementptr ptr, ptr %92, i32 %95
  %97 = getelementptr ptr, ptr %96, i32 2
  %98 = load ptr, ptr %97, align 8
  %99 = getelementptr { ptr, ptr }, ptr %98, i32 0, i32 0
  %100 = load ptr, ptr %99, align 8
  %101 = call i32 %100(ptr %91) #16
  %102 = add i32 %101, 1
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %104 = load ptr, ptr %103, align 8
  %105 = load ptr, ptr %14, align 8
  %106 = call ptr @llvm.invariant.start.p0(i64 80, ptr %105)
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %108 = load i32, ptr %107, align 4
  %109 = getelementptr ptr, ptr %105, i32 %108
  %110 = getelementptr ptr, ptr %109, i32 2
  %111 = load ptr, ptr %110, align 8
  %112 = getelementptr { ptr, ptr }, ptr %111, i32 0, i32 1
  %113 = load ptr, ptr %112, align 8
  call void %113(ptr %104, i32 %102) #15
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %115 = load ptr, ptr %114, align 8
  %116 = load ptr, ptr %14, align 8
  %117 = call ptr @llvm.invariant.start.p0(i64 80, ptr %116)
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %119 = load i32, ptr %118, align 4
  %120 = getelementptr ptr, ptr %116, i32 %119
  %121 = getelementptr ptr, ptr %120, i32 2
  %122 = load ptr, ptr %121, align 8
  %123 = getelementptr { ptr, ptr }, ptr %122, i32 0, i32 0
  %124 = load ptr, ptr %123, align 8
  %125 = call i32 %124(ptr %115) #16
  %126 = sub i32 %125, 1
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %128 = load ptr, ptr %127, align 8
  %129 = load ptr, ptr %14, align 8
  %130 = call ptr @llvm.invariant.start.p0(i64 80, ptr %129)
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %132 = load i32, ptr %131, align 4
  %133 = getelementptr ptr, ptr %129, i32 %132
  %134 = getelementptr ptr, ptr %133, i32 1
  %135 = load ptr, ptr %134, align 8
  %136 = getelementptr { ptr, ptr }, ptr %135, i32 0, i32 0
  %137 = load ptr, ptr %136, align 8
  %138 = call { ptr, ptr, ptr, i32 } %137(ptr %128) #16
  store { ptr, ptr, ptr, i32 } %138, ptr %6, align 8
  %139 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  call void @assume_offset(ptr %6, ptr @Array)
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %141 = load ptr, ptr %140, align 8
  %142 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %141, 0
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %144 = load ptr, ptr %143, align 8
  %145 = insertvalue { ptr, ptr, ptr, i32 } %142, ptr %144, 1
  %146 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %147 = load ptr, ptr %146, align 8
  %148 = insertvalue { ptr, ptr, ptr, i32 } %145, ptr %147, 2
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %150 = load i32, ptr %149, align 4
  %151 = insertvalue { ptr, ptr, ptr, i32 } %148, i32 %150, 3
  %152 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %153 = load ptr, ptr %152, align 8
  %154 = load ptr, ptr %14, align 8
  %155 = call ptr @llvm.invariant.start.p0(i64 80, ptr %154)
  %156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %157 = load i32, ptr %156, align 4
  %158 = getelementptr ptr, ptr %154, i32 %157
  %159 = load ptr, ptr %158, align 8
  %160 = call ptr @typegetter_wrapper(ptr %159, ptr %153)
  %161 = getelementptr [1 x ptr], ptr %7, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %161, align 8
  %162 = call ptr @llvm.invariant.start.p0(i64 1, ptr %7)
  %163 = call ptr @llvm.invariant.start.p0(i64 552, ptr %141)
  %164 = getelementptr ptr, ptr %141, i32 %150
  %165 = getelementptr ptr, ptr %164, i32 13
  %166 = load ptr, ptr %165, align 8
  %167 = getelementptr { ptr }, ptr %8, i32 0, i32 0
  store ptr @i32_typ, ptr %167, align 8
  %168 = call ptr @behavior_wrapper(ptr %166, { ptr, ptr, ptr, i32 } %151, ptr %8)
  %169 = call { ptr, i160 } %168({ ptr, ptr, ptr, i32 } %151, { ptr, ptr, ptr, i32 } %151, ptr %7, i32 %126)
  store { ptr, i160 } %169, ptr %9, align 8
  %170 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 0
  %171 = load ptr, ptr %170, align 8
  store ptr %171, ptr %11, align 8
  %172 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 1
  %173 = load i160, ptr %172, align 4
  store i160 %173, ptr %10, align 4
  %174 = load ptr, ptr %11, align 8
  %175 = insertvalue { ptr, i160 } undef, ptr %174, 0
  %176 = load i160, ptr %10, align 4
  %177 = insertvalue { ptr, i160 } %175, i160 %176, 1
  store { ptr, i160 } %177, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem5, align 8
  br label %178

178:                                              ; preds = %89, %84
  %.reload6 = load { ptr, i160 }, ptr %.reg2mem5, align 8
  store { ptr, i160 } %.reload6, ptr %.reg2mem, align 8
  br label %179

179:                                              ; preds = %178
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  ret { ptr, i160 } %.reload
}

define i32 @ArrayIterator_getter_index(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = load i32, ptr %13, align 4
  ret i32 %14
}

define void @ArrayIterator_setter_index(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  store i32 %1, ptr %14, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ArrayIterator_getter_array(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %18 = load i32, ptr %17, align 4
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %19
}

define void @ArrayIterator_setter_array(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %9, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 16, ptr %9)
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %22 = load i32, ptr %20, align 4
  store i32 %22, ptr %21, align 4
  ret void
}

define i32 @Array_getter_capacity(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %11
  %13 = add i64 %7, %12
  %14 = urem i64 %13, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %13, %17
  %19 = getelementptr i8, ptr %0, i64 %18
  %20 = load i32, ptr %19, align 4
  ret i32 %20
}

define void @Array_setter_capacity(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %12
  %14 = add i64 %8, %13
  %15 = urem i64 %14, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %16 = icmp eq i64 %15, 0
  %17 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %15
  %18 = select i1 %16, i64 0, i64 %17
  %19 = add i64 %14, %18
  %20 = getelementptr i8, ptr %0, i64 %19
  store i32 %1, ptr %20, align 4
  ret void
}

define i32 @Array_getter_length(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = load i32, ptr %13, align 4
  ret i32 %14
}

define void @Array_setter_length(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  store i32 %1, ptr %14, align 4
  ret void
}

define { ptr } @Array_getter_buffer(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr } undef, ptr %9, 0
  ret { ptr } %10
}

define void @Array_setter_buffer(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (ptr, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca ptr, align 8
  store { ptr } %1, ptr %9, align 8
  %10 = getelementptr { ptr }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  ret void
}

define { i64, i64 } @_size_Math(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret { i64, i64 } { i64 0, i64 1 }
}

define ptr @Math_B__Self_sqrt_xPtrf64(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %3 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr ptr, ptr %4, i32 1
  %6 = getelementptr ptr, ptr %4, i32 2
  %7 = getelementptr ptr, ptr %4, i32 3
  %8 = getelementptr ptr, ptr %4, i32 4
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 -757315540097298781, i64 ptrtoint (ptr @f64_typ to i64), ptr %12)
  %14 = load ptr, ptr getelementptr (ptr, ptr getelementptr ([17 x ptr], ptr @Math, i32 0, i32 7), i32 9), align 8
  ret ptr %14
}

define ptr @Math_B__Self_abs_xPtri32__Self_abs_xPtrf64(ptr %0) {
  %.reg2mem = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %3 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr ptr, ptr %4, i32 1
  %6 = getelementptr ptr, ptr %4, i32 2
  %7 = getelementptr ptr, ptr %4, i32 3
  %8 = getelementptr ptr, ptr %4, i32 4
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 -757315540097298781, i64 ptrtoint (ptr @f64_typ to i64), ptr %12)
  %14 = select i1 %13, i32 9, i32 8
  store i32 %14, ptr %.reg2mem, align 4
  br i1 %13, label %15, label %16

15:                                               ; preds = %1
  br label %28

16:                                               ; preds = %1
  %17 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr ptr, ptr %18, i32 1
  %20 = getelementptr ptr, ptr %18, i32 2
  %21 = getelementptr ptr, ptr %18, i32 3
  %22 = getelementptr ptr, ptr %18, i32 4
  %23 = load i64, ptr %19, align 4
  %24 = load i64, ptr %20, align 4
  %25 = load ptr, ptr %21, align 8
  %26 = load ptr, ptr %22, align 8
  %27 = call i1 @subtype_test_wrapper(ptr %25, i64 %24, i64 %23, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %26)
  br label %28

28:                                               ; preds = %16, %15
  %.reload = load i32, ptr %.reg2mem, align 4
  %29 = zext i32 %.reload to i64
  %30 = or i64 0, %29
  %31 = inttoptr i64 %30 to ptr
  %32 = ptrtoint ptr %31 to i64
  %33 = trunc i64 %32 to i32
  %34 = getelementptr [17 x ptr], ptr @Math, i32 0, i32 %33
  %35 = getelementptr ptr, ptr %34, i32 9
  %36 = load ptr, ptr %35, align 8
  ret ptr %36
}

define ptr @Math_B__Self_max_aPtri32_bPtri32__Self_max_aPtrf64_bPtrf64(ptr %0) {
  %.reg2mem = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = call ptr @llvm.invariant.start.p0(i64 16, ptr %0)
  %3 = getelementptr { ptr, ptr }, ptr %0, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr ptr, ptr %4, i32 1
  %6 = getelementptr ptr, ptr %4, i32 2
  %7 = getelementptr ptr, ptr %4, i32 3
  %8 = getelementptr ptr, ptr %4, i32 4
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %12)
  %14 = select i1 %13, i32 10, i32 11
  store i32 %14, ptr %.reg2mem, align 4
  br i1 %13, label %15, label %27

15:                                               ; preds = %1
  %16 = getelementptr { ptr, ptr }, ptr %0, i32 0, i32 1
  %17 = load ptr, ptr %16, align 8
  %18 = getelementptr ptr, ptr %17, i32 1
  %19 = getelementptr ptr, ptr %17, i32 2
  %20 = getelementptr ptr, ptr %17, i32 3
  %21 = getelementptr ptr, ptr %17, i32 4
  %22 = load i64, ptr %18, align 4
  %23 = load i64, ptr %19, align 4
  %24 = load ptr, ptr %20, align 8
  %25 = load ptr, ptr %21, align 8
  %26 = call i1 @subtype_test_wrapper(ptr %24, i64 %23, i64 %22, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %25)
  br label %50

27:                                               ; preds = %1
  %28 = getelementptr { ptr, ptr }, ptr %0, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr ptr, ptr %29, i32 1
  %31 = getelementptr ptr, ptr %29, i32 2
  %32 = getelementptr ptr, ptr %29, i32 3
  %33 = getelementptr ptr, ptr %29, i32 4
  %34 = load i64, ptr %30, align 4
  %35 = load i64, ptr %31, align 4
  %36 = load ptr, ptr %32, align 8
  %37 = load ptr, ptr %33, align 8
  %38 = call i1 @subtype_test_wrapper(ptr %36, i64 %35, i64 %34, i64 -757315540097298781, i64 ptrtoint (ptr @f64_typ to i64), ptr %37)
  %39 = getelementptr { ptr, ptr }, ptr %0, i32 0, i32 1
  %40 = load ptr, ptr %39, align 8
  %41 = getelementptr ptr, ptr %40, i32 1
  %42 = getelementptr ptr, ptr %40, i32 2
  %43 = getelementptr ptr, ptr %40, i32 3
  %44 = getelementptr ptr, ptr %40, i32 4
  %45 = load i64, ptr %41, align 4
  %46 = load i64, ptr %42, align 4
  %47 = load ptr, ptr %43, align 8
  %48 = load ptr, ptr %44, align 8
  %49 = call i1 @subtype_test_wrapper(ptr %47, i64 %46, i64 %45, i64 -757315540097298781, i64 ptrtoint (ptr @f64_typ to i64), ptr %48)
  br label %50

50:                                               ; preds = %27, %15
  %.reload = load i32, ptr %.reg2mem, align 4
  %51 = zext i32 %.reload to i64
  %52 = or i64 0, %51
  %53 = inttoptr i64 %52 to ptr
  %54 = ptrtoint ptr %53 to i64
  %55 = trunc i64 %54 to i32
  %56 = getelementptr [17 x ptr], ptr @Math, i32 0, i32 %55
  %57 = getelementptr ptr, ptr %56, i32 9
  %58 = load ptr, ptr %57, align 8
  ret ptr %58
}

define ptr @Math_B__Self_min_aPtri32_bPtri32__Self_min_aPtrf64_bPtrf64(ptr %0) {
  %.reg2mem = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = call ptr @llvm.invariant.start.p0(i64 16, ptr %0)
  %3 = getelementptr { ptr, ptr }, ptr %0, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr ptr, ptr %4, i32 1
  %6 = getelementptr ptr, ptr %4, i32 2
  %7 = getelementptr ptr, ptr %4, i32 3
  %8 = getelementptr ptr, ptr %4, i32 4
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 -757315540097298781, i64 ptrtoint (ptr @f64_typ to i64), ptr %12)
  %14 = select i1 %13, i32 13, i32 12
  store i32 %14, ptr %.reg2mem, align 4
  br i1 %13, label %15, label %27

15:                                               ; preds = %1
  %16 = getelementptr { ptr, ptr }, ptr %0, i32 0, i32 1
  %17 = load ptr, ptr %16, align 8
  %18 = getelementptr ptr, ptr %17, i32 1
  %19 = getelementptr ptr, ptr %17, i32 2
  %20 = getelementptr ptr, ptr %17, i32 3
  %21 = getelementptr ptr, ptr %17, i32 4
  %22 = load i64, ptr %18, align 4
  %23 = load i64, ptr %19, align 4
  %24 = load ptr, ptr %20, align 8
  %25 = load ptr, ptr %21, align 8
  %26 = call i1 @subtype_test_wrapper(ptr %24, i64 %23, i64 %22, i64 -757315540097298781, i64 ptrtoint (ptr @f64_typ to i64), ptr %25)
  br label %50

27:                                               ; preds = %1
  %28 = getelementptr { ptr, ptr }, ptr %0, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr ptr, ptr %29, i32 1
  %31 = getelementptr ptr, ptr %29, i32 2
  %32 = getelementptr ptr, ptr %29, i32 3
  %33 = getelementptr ptr, ptr %29, i32 4
  %34 = load i64, ptr %30, align 4
  %35 = load i64, ptr %31, align 4
  %36 = load ptr, ptr %32, align 8
  %37 = load ptr, ptr %33, align 8
  %38 = call i1 @subtype_test_wrapper(ptr %36, i64 %35, i64 %34, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %37)
  %39 = getelementptr { ptr, ptr }, ptr %0, i32 0, i32 1
  %40 = load ptr, ptr %39, align 8
  %41 = getelementptr ptr, ptr %40, i32 1
  %42 = getelementptr ptr, ptr %40, i32 2
  %43 = getelementptr ptr, ptr %40, i32 3
  %44 = getelementptr ptr, ptr %40, i32 4
  %45 = load i64, ptr %41, align 4
  %46 = load i64, ptr %42, align 4
  %47 = load ptr, ptr %43, align 8
  %48 = load ptr, ptr %44, align 8
  %49 = call i1 @subtype_test_wrapper(ptr %47, i64 %46, i64 %45, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %48)
  br label %50

50:                                               ; preds = %27, %15
  %.reload = load i32, ptr %.reg2mem, align 4
  %51 = zext i32 %.reload to i64
  %52 = or i64 0, %51
  %53 = inttoptr i64 %52 to ptr
  %54 = ptrtoint ptr %53 to i64
  %55 = trunc i64 %54 to i32
  %56 = getelementptr [17 x ptr], ptr @Math, i32 0, i32 %55
  %57 = getelementptr ptr, ptr %56, i32 9
  %58 = load ptr, ptr %57, align 8
  ret ptr %58
}

define ptr @Math_B__Self_round_xPtrf64(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %3 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr ptr, ptr %4, i32 1
  %6 = getelementptr ptr, ptr %4, i32 2
  %7 = getelementptr ptr, ptr %4, i32 3
  %8 = getelementptr ptr, ptr %4, i32 4
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 -757315540097298781, i64 ptrtoint (ptr @f64_typ to i64), ptr %12)
  %14 = load ptr, ptr getelementptr (ptr, ptr getelementptr ([17 x ptr], ptr @Math, i32 0, i32 14), i32 9), align 8
  ret ptr %14
}

define ptr @Math_B__Self_floor_xPtrf64(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %3 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr ptr, ptr %4, i32 1
  %6 = getelementptr ptr, ptr %4, i32 2
  %7 = getelementptr ptr, ptr %4, i32 3
  %8 = getelementptr ptr, ptr %4, i32 4
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 -757315540097298781, i64 ptrtoint (ptr @f64_typ to i64), ptr %12)
  %14 = load ptr, ptr getelementptr (ptr, ptr getelementptr ([17 x ptr], ptr @Math, i32 0, i32 15), i32 9), align 8
  ret ptr %14
}

define ptr @Math_B__Self_ceiling_xPtrf64(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %3 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr ptr, ptr %4, i32 1
  %6 = getelementptr ptr, ptr %4, i32 2
  %7 = getelementptr ptr, ptr %4, i32 3
  %8 = getelementptr ptr, ptr %4, i32 4
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 -757315540097298781, i64 ptrtoint (ptr @f64_typ to i64), ptr %12)
  %14 = load ptr, ptr getelementptr (ptr, ptr getelementptr ([17 x ptr], ptr @Math, i32 0, i32 16), i32 9), align 8
  ret ptr %14
}

define double @Math__Self_sqrt_xPtrf64(ptr %0, double %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call double @llvm.sqrt.f64(double %1)
  ret double %3
}

define { ptr, i64 } @Math__Self_abs_xPtri32(ptr %0, { ptr, i64 } %1) {
  %3 = alloca i64, align 8
  %4 = alloca ptr, align 8
  %5 = alloca i64, align 8
  %6 = alloca ptr, align 8
  %7 = alloca { ptr, i64 }, align 8
  %.reg2mem = alloca { ptr, i64 }, align 8
  %.reg2mem1 = alloca { ptr, i64 }, align 8
  %.reg2mem3 = alloca { ptr, i64 }, align 8
  %.reg2mem5 = alloca i32, align 4
  %.reg2mem9 = alloca { ptr, i64 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i64 } %1, ptr %7, align 8
  %8 = getelementptr { ptr, i64 }, ptr %7, i32 0, i32 1
  %9 = load i32, ptr %8, align 4
  store i32 %9, ptr %.reg2mem5, align 4
  %.reload8 = load i32, ptr %.reg2mem5, align 4
  %10 = icmp sge i32 %.reload8, 0
  br i1 %10, label %11, label %16

11:                                               ; preds = %2
  %.reload7 = load i32, ptr %.reg2mem5, align 4
  store i32 %.reload7, ptr %3, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %4, align 4
  %12 = load ptr, ptr %4, align 8
  %13 = insertvalue { ptr, i64 } undef, ptr %12, 0
  %14 = load i64, ptr %3, align 4
  %15 = insertvalue { ptr, i64 } %13, i64 %14, 1
  store { ptr, i64 } %15, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i64 }, ptr %.reg2mem3, align 8
  store { ptr, i64 } %.reload4, ptr %.reg2mem9, align 8
  br label %22

16:                                               ; preds = %2
  %.reload6 = load i32, ptr %.reg2mem5, align 4
  %17 = mul i32 %.reload6, -1
  store i32 %17, ptr %5, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %6, align 4
  %18 = load ptr, ptr %6, align 8
  %19 = insertvalue { ptr, i64 } undef, ptr %18, 0
  %20 = load i64, ptr %5, align 4
  %21 = insertvalue { ptr, i64 } %19, i64 %20, 1
  store { ptr, i64 } %21, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i64 }, ptr %.reg2mem1, align 8
  store { ptr, i64 } %.reload2, ptr %.reg2mem9, align 8
  br label %22

22:                                               ; preds = %16, %11
  %.reload10 = load { ptr, i64 }, ptr %.reg2mem9, align 8
  store { ptr, i64 } %.reload10, ptr %.reg2mem, align 8
  br label %23

23:                                               ; preds = %22
  %.reload = load { ptr, i64 }, ptr %.reg2mem, align 8
  ret { ptr, i64 } %.reload
}

define { ptr, i64 } @Math__Self_abs_xPtrf64(ptr %0, { ptr, i64 } %1) {
  %3 = alloca i64, align 8
  %4 = alloca ptr, align 8
  %5 = alloca i64, align 8
  %6 = alloca ptr, align 8
  %7 = alloca { ptr, i64 }, align 8
  %.reg2mem = alloca { ptr, i64 }, align 8
  %.reg2mem1 = alloca { ptr, i64 }, align 8
  %.reg2mem3 = alloca { ptr, i64 }, align 8
  %.reg2mem5 = alloca double, align 8
  %.reg2mem9 = alloca { ptr, i64 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i64 } %1, ptr %7, align 8
  %8 = getelementptr { ptr, i64 }, ptr %7, i32 0, i32 1
  %9 = load double, ptr %8, align 8
  store double %9, ptr %.reg2mem5, align 8
  %.reload8 = load double, ptr %.reg2mem5, align 8
  %10 = fcmp oge double %.reload8, 0.000000e+00
  br i1 %10, label %11, label %16

11:                                               ; preds = %2
  %.reload7 = load double, ptr %.reg2mem5, align 8
  store double %.reload7, ptr %3, align 8
  store i64 ptrtoint (ptr @f64_typ to i64), ptr %4, align 4
  %12 = load ptr, ptr %4, align 8
  %13 = insertvalue { ptr, i64 } undef, ptr %12, 0
  %14 = load i64, ptr %3, align 4
  %15 = insertvalue { ptr, i64 } %13, i64 %14, 1
  store { ptr, i64 } %15, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i64 }, ptr %.reg2mem3, align 8
  store { ptr, i64 } %.reload4, ptr %.reg2mem9, align 8
  br label %22

16:                                               ; preds = %2
  %.reload6 = load double, ptr %.reg2mem5, align 8
  %17 = fmul double %.reload6, -1.000000e+00
  store double %17, ptr %5, align 8
  store i64 ptrtoint (ptr @f64_typ to i64), ptr %6, align 4
  %18 = load ptr, ptr %6, align 8
  %19 = insertvalue { ptr, i64 } undef, ptr %18, 0
  %20 = load i64, ptr %5, align 4
  %21 = insertvalue { ptr, i64 } %19, i64 %20, 1
  store { ptr, i64 } %21, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i64 }, ptr %.reg2mem1, align 8
  store { ptr, i64 } %.reload2, ptr %.reg2mem9, align 8
  br label %22

22:                                               ; preds = %16, %11
  %.reload10 = load { ptr, i64 }, ptr %.reg2mem9, align 8
  store { ptr, i64 } %.reload10, ptr %.reg2mem, align 8
  br label %23

23:                                               ; preds = %22
  %.reload = load { ptr, i64 }, ptr %.reg2mem, align 8
  ret { ptr, i64 } %.reload
}

define { ptr, i64 } @Math__Self_max_aPtri32_bPtri32(ptr %0, { ptr, i64 } %1, { ptr, i64 } %2) {
  %4 = alloca { ptr, i64 }, align 8
  %5 = alloca i64, align 8
  %6 = alloca { ptr, i64 }, align 8
  %7 = alloca i64, align 8
  %8 = alloca { ptr, i64 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i64 } %1, ptr %8, align 8
  %9 = alloca i32, align 4
  %10 = getelementptr { ptr, i64 }, ptr %8, i32 0, i32 1
  %11 = load i32, ptr %10, align 4
  store i32 %11, ptr %9, align 4
  %12 = alloca { ptr, i64 }, align 8
  store { ptr, i64 } %2, ptr %12, align 8
  %13 = alloca i32, align 4
  %14 = getelementptr { ptr, i64 }, ptr %12, i32 0, i32 1
  %15 = load i32, ptr %14, align 4
  store i32 %15, ptr %13, align 4
  %16 = load i32, ptr %9, align 4
  %17 = load i32, ptr %13, align 4
  %18 = icmp sgt i32 %16, %17
  %19 = select i1 %18, ptr %4, ptr %6
  %20 = select i1 %18, ptr %9, ptr %13
  %21 = select i1 %18, ptr %5, ptr %7
  %22 = getelementptr { ptr, i64 }, ptr %19, i32 0, i32 1
  %23 = load i32, ptr %20, align 4
  store i32 %23, ptr %22, align 4
  %24 = getelementptr { ptr, i64 }, ptr %19, i32 0, i32 0
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %21, align 4
  %25 = load i64, ptr %21, align 4
  store i64 %25, ptr %24, align 4
  %26 = getelementptr { ptr, i64 }, ptr %19, i32 0, i32 0
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, i64 } undef, ptr %27, 0
  %29 = getelementptr { ptr, i64 }, ptr %19, i32 0, i32 1
  %30 = load i64, ptr %29, align 4
  %31 = insertvalue { ptr, i64 } %28, i64 %30, 1
  ret { ptr, i64 } %31
}

define { ptr, i64 } @Math__Self_max_aPtrf64_bPtrf64(ptr %0, { ptr, i64 } %1, { ptr, i64 } %2) {
  %4 = alloca { ptr, i64 }, align 8
  %5 = alloca i64, align 8
  %6 = alloca { ptr, i64 }, align 8
  %7 = alloca i64, align 8
  %8 = alloca { ptr, i64 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i64 } %1, ptr %8, align 8
  %9 = alloca double, align 8
  %10 = getelementptr { ptr, i64 }, ptr %8, i32 0, i32 1
  %11 = load double, ptr %10, align 8
  store double %11, ptr %9, align 8
  %12 = alloca { ptr, i64 }, align 8
  store { ptr, i64 } %2, ptr %12, align 8
  %13 = alloca double, align 8
  %14 = getelementptr { ptr, i64 }, ptr %12, i32 0, i32 1
  %15 = load double, ptr %14, align 8
  store double %15, ptr %13, align 8
  %16 = load double, ptr %9, align 8
  %17 = load double, ptr %13, align 8
  %18 = fcmp ogt double %16, %17
  %19 = select i1 %18, ptr %4, ptr %6
  %20 = select i1 %18, ptr %9, ptr %13
  %21 = select i1 %18, ptr %5, ptr %7
  %22 = getelementptr { ptr, i64 }, ptr %19, i32 0, i32 1
  %23 = load double, ptr %20, align 8
  store double %23, ptr %22, align 8
  %24 = getelementptr { ptr, i64 }, ptr %19, i32 0, i32 0
  store i64 ptrtoint (ptr @f64_typ to i64), ptr %21, align 4
  %25 = load i64, ptr %21, align 4
  store i64 %25, ptr %24, align 4
  %26 = getelementptr { ptr, i64 }, ptr %19, i32 0, i32 0
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, i64 } undef, ptr %27, 0
  %29 = getelementptr { ptr, i64 }, ptr %19, i32 0, i32 1
  %30 = load i64, ptr %29, align 4
  %31 = insertvalue { ptr, i64 } %28, i64 %30, 1
  ret { ptr, i64 } %31
}

define { ptr, i64 } @Math__Self_min_aPtri32_bPtri32(ptr %0, { ptr, i64 } %1, { ptr, i64 } %2) {
  %4 = alloca { ptr, i64 }, align 8
  %5 = alloca i64, align 8
  %6 = alloca { ptr, i64 }, align 8
  %7 = alloca i64, align 8
  %8 = alloca { ptr, i64 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i64 } %1, ptr %8, align 8
  %9 = alloca i32, align 4
  %10 = getelementptr { ptr, i64 }, ptr %8, i32 0, i32 1
  %11 = load i32, ptr %10, align 4
  store i32 %11, ptr %9, align 4
  %12 = alloca { ptr, i64 }, align 8
  store { ptr, i64 } %2, ptr %12, align 8
  %13 = alloca i32, align 4
  %14 = getelementptr { ptr, i64 }, ptr %12, i32 0, i32 1
  %15 = load i32, ptr %14, align 4
  store i32 %15, ptr %13, align 4
  %16 = load i32, ptr %9, align 4
  %17 = load i32, ptr %13, align 4
  %18 = icmp slt i32 %16, %17
  %19 = select i1 %18, ptr %4, ptr %6
  %20 = select i1 %18, ptr %9, ptr %13
  %21 = select i1 %18, ptr %5, ptr %7
  %22 = getelementptr { ptr, i64 }, ptr %19, i32 0, i32 1
  %23 = load i32, ptr %20, align 4
  store i32 %23, ptr %22, align 4
  %24 = getelementptr { ptr, i64 }, ptr %19, i32 0, i32 0
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %21, align 4
  %25 = load i64, ptr %21, align 4
  store i64 %25, ptr %24, align 4
  %26 = getelementptr { ptr, i64 }, ptr %19, i32 0, i32 0
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, i64 } undef, ptr %27, 0
  %29 = getelementptr { ptr, i64 }, ptr %19, i32 0, i32 1
  %30 = load i64, ptr %29, align 4
  %31 = insertvalue { ptr, i64 } %28, i64 %30, 1
  ret { ptr, i64 } %31
}

define { ptr, i64 } @Math__Self_min_aPtrf64_bPtrf64(ptr %0, { ptr, i64 } %1, { ptr, i64 } %2) {
  %4 = alloca { ptr, i64 }, align 8
  %5 = alloca i64, align 8
  %6 = alloca { ptr, i64 }, align 8
  %7 = alloca i64, align 8
  %8 = alloca { ptr, i64 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i64 } %1, ptr %8, align 8
  %9 = alloca double, align 8
  %10 = getelementptr { ptr, i64 }, ptr %8, i32 0, i32 1
  %11 = load double, ptr %10, align 8
  store double %11, ptr %9, align 8
  %12 = alloca { ptr, i64 }, align 8
  store { ptr, i64 } %2, ptr %12, align 8
  %13 = alloca double, align 8
  %14 = getelementptr { ptr, i64 }, ptr %12, i32 0, i32 1
  %15 = load double, ptr %14, align 8
  store double %15, ptr %13, align 8
  %16 = load double, ptr %9, align 8
  %17 = load double, ptr %13, align 8
  %18 = fcmp olt double %16, %17
  %19 = select i1 %18, ptr %4, ptr %6
  %20 = select i1 %18, ptr %9, ptr %13
  %21 = select i1 %18, ptr %5, ptr %7
  %22 = getelementptr { ptr, i64 }, ptr %19, i32 0, i32 1
  %23 = load double, ptr %20, align 8
  store double %23, ptr %22, align 8
  %24 = getelementptr { ptr, i64 }, ptr %19, i32 0, i32 0
  store i64 ptrtoint (ptr @f64_typ to i64), ptr %21, align 4
  %25 = load i64, ptr %21, align 4
  store i64 %25, ptr %24, align 4
  %26 = getelementptr { ptr, i64 }, ptr %19, i32 0, i32 0
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, i64 } undef, ptr %27, 0
  %29 = getelementptr { ptr, i64 }, ptr %19, i32 0, i32 1
  %30 = load i64, ptr %29, align 4
  %31 = insertvalue { ptr, i64 } %28, i64 %30, 1
  ret { ptr, i64 } %31
}

define double @Math__Self_round_xPtrf64(ptr %0, double %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call double @llvm.round.f64(double %1)
  ret double %3
}

define double @Math__Self_floor_xPtrf64(ptr %0, double %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call double @llvm.floor.f64(double %1)
  ret double %3
}

define double @Math__Self_ceiling_xPtrf64(ptr %0, double %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call double @llvm.ceil.f64(double %1)
  ret double %3
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.ceil.f64(double) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.floor.f64(double) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.round.f64(double) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.sqrt.f64(double) #1

define { i64, i64 } @_size_Integer(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define ptr @Integer_B_init_valuePtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [13 x ptr], ptr %15, i32 0, i32 7
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Integer_B__ADD_otherPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [13 x ptr], ptr %15, i32 0, i32 8
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Integer_B__SUB_otherPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [13 x ptr], ptr %15, i32 0, i32 9
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Integer_B__MUL_otherPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [13 x ptr], ptr %15, i32 0, i32 10
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Integer_B__DIV_otherPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [13 x ptr], ptr %15, i32 0, i32 11
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Integer_B_print_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [13 x ptr], ptr %4, i32 0, i32 12
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @Integer_init_valuePtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Integer)
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %21 = load ptr, ptr %20, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 104, ptr %22)
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %25 = load i32, ptr %24, align 4
  %26 = getelementptr ptr, ptr %22, i32 %25
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 1
  %29 = load ptr, ptr %28, align 8
  call void %29(ptr %21, i32 %3) #15
  ret void
}

define { ptr, ptr, ptr, i32 } @Integer__ADD_otherPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Integer)
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %21 = load ptr, ptr %20, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 104, ptr %22)
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %25 = load i32, ptr %24, align 4
  %26 = getelementptr ptr, ptr %22, i32 %25
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call i32 %29(ptr %21) #16
  %31 = alloca [1 x ptr], align 8
  store ptr @Integer, ptr %31, align 8
  %32 = load ptr, ptr %31, align 8
  %33 = getelementptr ptr, ptr %32, i32 6
  %34 = load ptr, ptr %33, align 8
  %35 = call { i64, i64 } @size_wrapper(ptr %34, ptr %31)
  %36 = extractvalue { i64, i64 } %35, 0
  %37 = call ptr @bump_malloc(i64 %36)
  %38 = alloca { ptr, ptr, ptr, i32 }, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  store ptr @Integer, ptr %38, align 8
  store ptr %37, ptr %39, align 8
  store i32 9, ptr %40, align 4
  %41 = call ptr @llvm.invariant.start.p0(i64 16, ptr %38)
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %43 = load ptr, ptr %42, align 8
  %44 = load ptr, ptr %7, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 104, ptr %44)
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %47 = load i32, ptr %46, align 4
  %48 = getelementptr ptr, ptr %44, i32 %47
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr { ptr, ptr }, ptr %49, i32 0, i32 0
  %51 = load ptr, ptr %50, align 8
  %52 = call i32 %51(ptr %43) #16
  %53 = add i32 %52, %3
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 0
  %55 = load ptr, ptr %54, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %55, 0
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = insertvalue { ptr, ptr, ptr, i32 } %56, ptr %58, 1
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 2
  %61 = load ptr, ptr %60, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } %59, ptr %61, 2
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %64 = load i32, ptr %63, align 4
  %65 = insertvalue { ptr, ptr, ptr, i32 } %62, i32 %64, 3
  %66 = alloca [1 x ptr], align 8
  %67 = getelementptr [1 x ptr], ptr %66, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %67, align 8
  %68 = call ptr @llvm.invariant.start.p0(i64 1, ptr %66)
  %69 = call ptr @llvm.invariant.start.p0(i64 104, ptr %55)
  %70 = getelementptr ptr, ptr %55, i32 %64
  %71 = getelementptr ptr, ptr %70, i32 1
  %72 = load ptr, ptr %71, align 8
  %73 = alloca { ptr }, align 8
  %74 = getelementptr { ptr }, ptr %73, i32 0, i32 0
  store ptr @i32_typ, ptr %74, align 8
  %75 = call ptr @behavior_wrapper(ptr %72, { ptr, ptr, ptr, i32 } %65, ptr %73)
  call void %75({ ptr, ptr, ptr, i32 } %65, { ptr, ptr, ptr, i32 } %65, ptr %66, i32 %53)
  %76 = alloca { ptr, ptr, ptr, i32 }, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 0
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 0
  %79 = load ptr, ptr %77, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 1
  %82 = load ptr, ptr %80, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 2
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 2
  %85 = load ptr, ptr %83, align 8
  store ptr %85, ptr %84, align 8
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 3
  %88 = load i32, ptr %86, align 4
  store i32 %88, ptr %87, align 4
  call void @set_offset(ptr %76, ptr @Integer)
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 0
  %90 = load ptr, ptr %89, align 8
  %91 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %90, 0
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 1
  %93 = load ptr, ptr %92, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } %91, ptr %93, 1
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 2
  %96 = load ptr, ptr %95, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr %96, 2
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 3
  %99 = load i32, ptr %98, align 4
  %100 = insertvalue { ptr, ptr, ptr, i32 } %97, i32 %99, 3
  ret { ptr, ptr, ptr, i32 } %100
}

define { ptr, ptr, ptr, i32 } @Integer__SUB_otherPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Integer)
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %21 = load ptr, ptr %20, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 104, ptr %22)
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %25 = load i32, ptr %24, align 4
  %26 = getelementptr ptr, ptr %22, i32 %25
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call i32 %29(ptr %21) #16
  %31 = alloca [1 x ptr], align 8
  store ptr @Integer, ptr %31, align 8
  %32 = load ptr, ptr %31, align 8
  %33 = getelementptr ptr, ptr %32, i32 6
  %34 = load ptr, ptr %33, align 8
  %35 = call { i64, i64 } @size_wrapper(ptr %34, ptr %31)
  %36 = extractvalue { i64, i64 } %35, 0
  %37 = call ptr @bump_malloc(i64 %36)
  %38 = alloca { ptr, ptr, ptr, i32 }, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  store ptr @Integer, ptr %38, align 8
  store ptr %37, ptr %39, align 8
  store i32 9, ptr %40, align 4
  %41 = call ptr @llvm.invariant.start.p0(i64 16, ptr %38)
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %43 = load ptr, ptr %42, align 8
  %44 = load ptr, ptr %7, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 104, ptr %44)
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %47 = load i32, ptr %46, align 4
  %48 = getelementptr ptr, ptr %44, i32 %47
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr { ptr, ptr }, ptr %49, i32 0, i32 0
  %51 = load ptr, ptr %50, align 8
  %52 = call i32 %51(ptr %43) #16
  %53 = sub i32 %52, %3
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 0
  %55 = load ptr, ptr %54, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %55, 0
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = insertvalue { ptr, ptr, ptr, i32 } %56, ptr %58, 1
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 2
  %61 = load ptr, ptr %60, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } %59, ptr %61, 2
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %64 = load i32, ptr %63, align 4
  %65 = insertvalue { ptr, ptr, ptr, i32 } %62, i32 %64, 3
  %66 = alloca [1 x ptr], align 8
  %67 = getelementptr [1 x ptr], ptr %66, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %67, align 8
  %68 = call ptr @llvm.invariant.start.p0(i64 1, ptr %66)
  %69 = call ptr @llvm.invariant.start.p0(i64 104, ptr %55)
  %70 = getelementptr ptr, ptr %55, i32 %64
  %71 = getelementptr ptr, ptr %70, i32 1
  %72 = load ptr, ptr %71, align 8
  %73 = alloca { ptr }, align 8
  %74 = getelementptr { ptr }, ptr %73, i32 0, i32 0
  store ptr @i32_typ, ptr %74, align 8
  %75 = call ptr @behavior_wrapper(ptr %72, { ptr, ptr, ptr, i32 } %65, ptr %73)
  call void %75({ ptr, ptr, ptr, i32 } %65, { ptr, ptr, ptr, i32 } %65, ptr %66, i32 %53)
  %76 = alloca { ptr, ptr, ptr, i32 }, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 0
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 0
  %79 = load ptr, ptr %77, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 1
  %82 = load ptr, ptr %80, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 2
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 2
  %85 = load ptr, ptr %83, align 8
  store ptr %85, ptr %84, align 8
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 3
  %88 = load i32, ptr %86, align 4
  store i32 %88, ptr %87, align 4
  call void @set_offset(ptr %76, ptr @Integer)
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 0
  %90 = load ptr, ptr %89, align 8
  %91 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %90, 0
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 1
  %93 = load ptr, ptr %92, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } %91, ptr %93, 1
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 2
  %96 = load ptr, ptr %95, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr %96, 2
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 3
  %99 = load i32, ptr %98, align 4
  %100 = insertvalue { ptr, ptr, ptr, i32 } %97, i32 %99, 3
  ret { ptr, ptr, ptr, i32 } %100
}

define { ptr, ptr, ptr, i32 } @Integer__MUL_otherPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Integer)
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %21 = load ptr, ptr %20, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 104, ptr %22)
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %25 = load i32, ptr %24, align 4
  %26 = getelementptr ptr, ptr %22, i32 %25
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call i32 %29(ptr %21) #16
  %31 = alloca [1 x ptr], align 8
  store ptr @Integer, ptr %31, align 8
  %32 = load ptr, ptr %31, align 8
  %33 = getelementptr ptr, ptr %32, i32 6
  %34 = load ptr, ptr %33, align 8
  %35 = call { i64, i64 } @size_wrapper(ptr %34, ptr %31)
  %36 = extractvalue { i64, i64 } %35, 0
  %37 = call ptr @bump_malloc(i64 %36)
  %38 = alloca { ptr, ptr, ptr, i32 }, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  store ptr @Integer, ptr %38, align 8
  store ptr %37, ptr %39, align 8
  store i32 9, ptr %40, align 4
  %41 = call ptr @llvm.invariant.start.p0(i64 16, ptr %38)
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %43 = load ptr, ptr %42, align 8
  %44 = load ptr, ptr %7, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 104, ptr %44)
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %47 = load i32, ptr %46, align 4
  %48 = getelementptr ptr, ptr %44, i32 %47
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr { ptr, ptr }, ptr %49, i32 0, i32 0
  %51 = load ptr, ptr %50, align 8
  %52 = call i32 %51(ptr %43) #16
  %53 = mul i32 %52, %3
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 0
  %55 = load ptr, ptr %54, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %55, 0
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = insertvalue { ptr, ptr, ptr, i32 } %56, ptr %58, 1
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 2
  %61 = load ptr, ptr %60, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } %59, ptr %61, 2
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %64 = load i32, ptr %63, align 4
  %65 = insertvalue { ptr, ptr, ptr, i32 } %62, i32 %64, 3
  %66 = alloca [1 x ptr], align 8
  %67 = getelementptr [1 x ptr], ptr %66, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %67, align 8
  %68 = call ptr @llvm.invariant.start.p0(i64 1, ptr %66)
  %69 = call ptr @llvm.invariant.start.p0(i64 104, ptr %55)
  %70 = getelementptr ptr, ptr %55, i32 %64
  %71 = getelementptr ptr, ptr %70, i32 1
  %72 = load ptr, ptr %71, align 8
  %73 = alloca { ptr }, align 8
  %74 = getelementptr { ptr }, ptr %73, i32 0, i32 0
  store ptr @i32_typ, ptr %74, align 8
  %75 = call ptr @behavior_wrapper(ptr %72, { ptr, ptr, ptr, i32 } %65, ptr %73)
  call void %75({ ptr, ptr, ptr, i32 } %65, { ptr, ptr, ptr, i32 } %65, ptr %66, i32 %53)
  %76 = alloca { ptr, ptr, ptr, i32 }, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 0
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 0
  %79 = load ptr, ptr %77, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 1
  %82 = load ptr, ptr %80, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 2
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 2
  %85 = load ptr, ptr %83, align 8
  store ptr %85, ptr %84, align 8
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 3
  %88 = load i32, ptr %86, align 4
  store i32 %88, ptr %87, align 4
  call void @set_offset(ptr %76, ptr @Integer)
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 0
  %90 = load ptr, ptr %89, align 8
  %91 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %90, 0
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 1
  %93 = load ptr, ptr %92, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } %91, ptr %93, 1
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 2
  %96 = load ptr, ptr %95, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr %96, 2
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 3
  %99 = load i32, ptr %98, align 4
  %100 = insertvalue { ptr, ptr, ptr, i32 } %97, i32 %99, 3
  ret { ptr, ptr, ptr, i32 } %100
}

define { ptr, ptr, ptr, i32 } @Integer__DIV_otherPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Integer)
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %21 = load ptr, ptr %20, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 104, ptr %22)
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %25 = load i32, ptr %24, align 4
  %26 = getelementptr ptr, ptr %22, i32 %25
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call i32 %29(ptr %21) #16
  %31 = alloca [1 x ptr], align 8
  store ptr @Integer, ptr %31, align 8
  %32 = load ptr, ptr %31, align 8
  %33 = getelementptr ptr, ptr %32, i32 6
  %34 = load ptr, ptr %33, align 8
  %35 = call { i64, i64 } @size_wrapper(ptr %34, ptr %31)
  %36 = extractvalue { i64, i64 } %35, 0
  %37 = call ptr @bump_malloc(i64 %36)
  %38 = alloca { ptr, ptr, ptr, i32 }, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  store ptr @Integer, ptr %38, align 8
  store ptr %37, ptr %39, align 8
  store i32 9, ptr %40, align 4
  %41 = call ptr @llvm.invariant.start.p0(i64 16, ptr %38)
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %43 = load ptr, ptr %42, align 8
  %44 = load ptr, ptr %7, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 104, ptr %44)
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %47 = load i32, ptr %46, align 4
  %48 = getelementptr ptr, ptr %44, i32 %47
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr { ptr, ptr }, ptr %49, i32 0, i32 0
  %51 = load ptr, ptr %50, align 8
  %52 = call i32 %51(ptr %43) #16
  %53 = sdiv i32 %52, %3
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 0
  %55 = load ptr, ptr %54, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %55, 0
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = insertvalue { ptr, ptr, ptr, i32 } %56, ptr %58, 1
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 2
  %61 = load ptr, ptr %60, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } %59, ptr %61, 2
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %64 = load i32, ptr %63, align 4
  %65 = insertvalue { ptr, ptr, ptr, i32 } %62, i32 %64, 3
  %66 = alloca [1 x ptr], align 8
  %67 = getelementptr [1 x ptr], ptr %66, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %67, align 8
  %68 = call ptr @llvm.invariant.start.p0(i64 1, ptr %66)
  %69 = call ptr @llvm.invariant.start.p0(i64 104, ptr %55)
  %70 = getelementptr ptr, ptr %55, i32 %64
  %71 = getelementptr ptr, ptr %70, i32 1
  %72 = load ptr, ptr %71, align 8
  %73 = alloca { ptr }, align 8
  %74 = getelementptr { ptr }, ptr %73, i32 0, i32 0
  store ptr @i32_typ, ptr %74, align 8
  %75 = call ptr @behavior_wrapper(ptr %72, { ptr, ptr, ptr, i32 } %65, ptr %73)
  call void %75({ ptr, ptr, ptr, i32 } %65, { ptr, ptr, ptr, i32 } %65, ptr %66, i32 %53)
  %76 = alloca { ptr, ptr, ptr, i32 }, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 0
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 0
  %79 = load ptr, ptr %77, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 1
  %82 = load ptr, ptr %80, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 2
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 2
  %85 = load ptr, ptr %83, align 8
  store ptr %85, ptr %84, align 8
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 3
  %88 = load i32, ptr %86, align 4
  store i32 %88, ptr %87, align 4
  call void @set_offset(ptr %76, ptr @Integer)
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 0
  %90 = load ptr, ptr %89, align 8
  %91 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %90, 0
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 1
  %93 = load ptr, ptr %92, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } %91, ptr %93, 1
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 2
  %96 = load ptr, ptr %95, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr %96, 2
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 3
  %99 = load i32, ptr %98, align 4
  %100 = insertvalue { ptr, ptr, ptr, i32 } %97, i32 %99, 3
  ret { ptr, ptr, ptr, i32 } %100
}

define void @Integer_print_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Integer)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 104, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 0
  %28 = load ptr, ptr %27, align 8
  %29 = call i32 %28(ptr %20) #16
  %30 = alloca i160, align 8
  %31 = alloca ptr, align 8
  store i32 %29, ptr %30, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %31, align 4
  %32 = load ptr, ptr %31, align 8
  %33 = insertvalue { ptr, i160 } undef, ptr %32, 0
  %34 = load i160, ptr %30, align 4
  %35 = insertvalue { ptr, i160 } %33, i160 %34, 1
  %36 = alloca [1 x ptr], align 8
  %37 = getelementptr [1 x ptr], ptr %36, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %37, align 8
  %38 = call ptr @llvm.invariant.start.p0(i64 1, ptr %36)
  %39 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %40 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %41 = alloca { ptr }, align 8
  %42 = getelementptr { ptr }, ptr %41, i32 0, i32 0
  store ptr %32, ptr %42, align 8
  %43 = call ptr @class_behavior_wrapper(ptr %40, ptr %41)
  call void %43(ptr %36, { ptr, i160 } %35)
  ret void
}

define i32 @Integer_getter_value(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @Integer_setter_value(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  store i32 %1, ptr %3, align 4
  ret void
}

define { i64, i64 } @_size_BigBoy(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret { i64, i64 } { i64 0, i64 1 }
}

define ptr @BigBoy_B_introduce_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [6 x ptr], ptr %4, i32 0, i32 2
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @BigBoy_B_repr_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [6 x ptr], ptr %4, i32 0, i32 3
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @BigBoy_introduce_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @BigBoy)
  %19 = alloca ptr, align 8
  %20 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 11))
  store ptr %20, ptr %19, align 8
  %21 = alloca { ptr }, align 8
  %22 = getelementptr { ptr }, ptr %19, i32 0, i32 0
  %23 = getelementptr { ptr }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %26 = load ptr, ptr %21, align 8
  %27 = load [10 x i8], ptr @xsqji_Here_I_am, align 1
  store [10 x i8] %27, ptr %26, align 1
  %28 = alloca [1 x ptr], align 8
  store ptr @String, ptr %28, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr ptr, ptr %29, i32 6
  %31 = load ptr, ptr %30, align 8
  %32 = call { i64, i64 } @size_wrapper(ptr %31, ptr %28)
  %33 = extractvalue { i64, i64 } %32, 0
  %34 = call ptr @bump_malloc(i64 %33)
  %35 = alloca { ptr, ptr, ptr, i32 }, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  store ptr @String, ptr %35, align 8
  store ptr %34, ptr %36, align 8
  store i32 9, ptr %37, align 4
  %38 = call ptr @llvm.invariant.start.p0(i64 16, ptr %35)
  %39 = getelementptr { ptr }, ptr %21, i32 0, i32 0
  %40 = load ptr, ptr %39, align 8
  %41 = insertvalue { ptr } undef, ptr %40, 0
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %43 = load ptr, ptr %42, align 8
  %44 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %43, 0
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %46 = load ptr, ptr %45, align 8
  %47 = insertvalue { ptr, ptr, ptr, i32 } %44, ptr %46, 1
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %49 = load ptr, ptr %48, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } %47, ptr %49, 2
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %52 = load i32, ptr %51, align 4
  %53 = insertvalue { ptr, ptr, ptr, i32 } %50, i32 %52, 3
  %54 = alloca [3 x ptr], align 8
  %55 = getelementptr [3 x ptr], ptr %54, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %55, align 8
  %56 = getelementptr [3 x ptr], ptr %54, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %56, align 8
  %57 = getelementptr [3 x ptr], ptr %54, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %57, align 8
  %58 = call ptr @llvm.invariant.start.p0(i64 9, ptr %54)
  %59 = call ptr @llvm.invariant.start.p0(i64 280, ptr %43)
  %60 = getelementptr ptr, ptr %43, i32 %52
  %61 = getelementptr ptr, ptr %60, i32 4
  %62 = load ptr, ptr %61, align 8
  %63 = alloca { ptr, ptr, ptr }, align 8
  %64 = getelementptr { ptr, ptr, ptr }, ptr %63, i32 0, i32 0
  store ptr @buffer_typ, ptr %64, align 8
  %65 = getelementptr { ptr, ptr, ptr }, ptr %63, i32 0, i32 1
  store ptr @i32_typ, ptr %65, align 8
  %66 = getelementptr { ptr, ptr, ptr }, ptr %63, i32 0, i32 2
  store ptr @i32_typ, ptr %66, align 8
  %67 = call ptr @behavior_wrapper(ptr %62, { ptr, ptr, ptr, i32 } %53, ptr %63)
  call void %67({ ptr, ptr, ptr, i32 } %53, { ptr, ptr, ptr, i32 } %53, ptr %54, { ptr } %41, i32 10, i32 11)
  %68 = getelementptr { ptr, i160 }, ptr %35, i32 0, i32 0
  %69 = load ptr, ptr %68, align 8
  %70 = insertvalue { ptr, i160 } undef, ptr %69, 0
  %71 = getelementptr { ptr, i160 }, ptr %35, i32 0, i32 1
  %72 = load i160, ptr %71, align 4
  %73 = insertvalue { ptr, i160 } %70, i160 %72, 1
  %74 = alloca [1 x ptr], align 8
  %75 = getelementptr [1 x ptr], ptr %74, i32 0, i32 0
  store ptr @_parameterization_String, ptr %75, align 8
  %76 = call ptr @llvm.invariant.start.p0(i64 1, ptr %74)
  %77 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %78 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %79 = alloca { ptr }, align 8
  %80 = getelementptr { ptr }, ptr %79, i32 0, i32 0
  store ptr %69, ptr %80, align 8
  %81 = call ptr @class_behavior_wrapper(ptr %78, ptr %79)
  call void %81(ptr %74, { ptr, i160 } %73)
  ret void
}

define { i64, i64 } @_size_Integer2(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define ptr @Integer2_B_value_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [40 x ptr], ptr %4, i32 0, i32 10
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Integer2_B_init_valuePtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [40 x ptr], ptr %15, i32 0, i32 11
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Integer2_B__ADD_otherPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [40 x ptr], ptr %15, i32 0, i32 12
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Integer2_B__SUB_otherPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [40 x ptr], ptr %15, i32 0, i32 13
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Integer2_B__MUL_otherPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [40 x ptr], ptr %15, i32 0, i32 14
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Integer2_B__DIV_otherPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [40 x ptr], ptr %15, i32 0, i32 15
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Integer2_B_print_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [40 x ptr], ptr %4, i32 0, i32 16
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Integer2_B_introduce_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [40 x ptr], ptr %4, i32 0, i32 17
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Integer2_B_repr_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [40 x ptr], ptr %4, i32 0, i32 18
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define i32 @Integer2_value_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Integer2)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 320, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 0
  %28 = load ptr, ptr %27, align 8
  %29 = call i32 %28(ptr %20) #16
  ret i32 %29
}

define { ptr, ptr, ptr, i32 } @Integer2_repr_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Integer2)
  %19 = alloca ptr, align 8
  %20 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 9))
  store ptr %20, ptr %19, align 8
  %21 = alloca { ptr }, align 8
  %22 = getelementptr { ptr }, ptr %19, i32 0, i32 0
  %23 = getelementptr { ptr }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %26 = load ptr, ptr %21, align 8
  %27 = load [8 x i8], ptr @qznzq_Integer, align 1
  store [8 x i8] %27, ptr %26, align 1
  %28 = alloca [1 x ptr], align 8
  store ptr @String, ptr %28, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr ptr, ptr %29, i32 6
  %31 = load ptr, ptr %30, align 8
  %32 = call { i64, i64 } @size_wrapper(ptr %31, ptr %28)
  %33 = extractvalue { i64, i64 } %32, 0
  %34 = call ptr @bump_malloc(i64 %33)
  %35 = alloca { ptr, ptr, ptr, i32 }, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  store ptr @String, ptr %35, align 8
  store ptr %34, ptr %36, align 8
  store i32 9, ptr %37, align 4
  %38 = call ptr @llvm.invariant.start.p0(i64 16, ptr %35)
  %39 = getelementptr { ptr }, ptr %21, i32 0, i32 0
  %40 = load ptr, ptr %39, align 8
  %41 = insertvalue { ptr } undef, ptr %40, 0
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %43 = load ptr, ptr %42, align 8
  %44 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %43, 0
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %46 = load ptr, ptr %45, align 8
  %47 = insertvalue { ptr, ptr, ptr, i32 } %44, ptr %46, 1
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %49 = load ptr, ptr %48, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } %47, ptr %49, 2
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %52 = load i32, ptr %51, align 4
  %53 = insertvalue { ptr, ptr, ptr, i32 } %50, i32 %52, 3
  %54 = alloca [3 x ptr], align 8
  %55 = getelementptr [3 x ptr], ptr %54, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %55, align 8
  %56 = getelementptr [3 x ptr], ptr %54, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %56, align 8
  %57 = getelementptr [3 x ptr], ptr %54, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %57, align 8
  %58 = call ptr @llvm.invariant.start.p0(i64 9, ptr %54)
  %59 = call ptr @llvm.invariant.start.p0(i64 280, ptr %43)
  %60 = getelementptr ptr, ptr %43, i32 %52
  %61 = getelementptr ptr, ptr %60, i32 4
  %62 = load ptr, ptr %61, align 8
  %63 = alloca { ptr, ptr, ptr }, align 8
  %64 = getelementptr { ptr, ptr, ptr }, ptr %63, i32 0, i32 0
  store ptr @buffer_typ, ptr %64, align 8
  %65 = getelementptr { ptr, ptr, ptr }, ptr %63, i32 0, i32 1
  store ptr @i32_typ, ptr %65, align 8
  %66 = getelementptr { ptr, ptr, ptr }, ptr %63, i32 0, i32 2
  store ptr @i32_typ, ptr %66, align 8
  %67 = call ptr @behavior_wrapper(ptr %62, { ptr, ptr, ptr, i32 } %53, ptr %63)
  call void %67({ ptr, ptr, ptr, i32 } %53, { ptr, ptr, ptr, i32 } %53, ptr %54, { ptr } %41, i32 8, i32 9)
  %68 = alloca { ptr, ptr, ptr, i32 }, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 0
  %71 = load ptr, ptr %69, align 8
  store ptr %71, ptr %70, align 8
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 1
  %74 = load ptr, ptr %72, align 8
  store ptr %74, ptr %73, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 2
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 3
  %80 = load i32, ptr %78, align 4
  store i32 %80, ptr %79, align 4
  call void @set_offset(ptr %68, ptr @String)
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 0
  %82 = load ptr, ptr %81, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %82, 0
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 1
  %85 = load ptr, ptr %84, align 8
  %86 = insertvalue { ptr, ptr, ptr, i32 } %83, ptr %85, 1
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 2
  %88 = load ptr, ptr %87, align 8
  %89 = insertvalue { ptr, ptr, ptr, i32 } %86, ptr %88, 2
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %68, i32 0, i32 3
  %91 = load i32, ptr %90, align 4
  %92 = insertvalue { ptr, ptr, ptr, i32 } %89, i32 %91, 3
  ret { ptr, ptr, ptr, i32 } %92
}

define i32 @Integer2_getter_value(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @Integer2_setter_value(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  store i32 %1, ptr %3, align 4
  ret void
}

define { i64, i64 } @_size_Animal(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %10
  %12 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %5
  %13 = select i1 %12, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 %5
  %14 = urem i64 %11, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %17
  %19 = add i64 %11, %18
  %20 = urem i64 %19, %13
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %13, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = add i64 %19, %23
  %25 = insertvalue { i64, i64 } undef, i64 %24, 0
  %26 = insertvalue { i64, i64 } %25, i64 %13, 1
  ret { i64, i64 } %26
}

define ptr @Animal_B_init_agePtri32_hpPtrf64_skillPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1)
  %4 = getelementptr { ptr, ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 -757315540097298781, i64 ptrtoint (ptr @f64_typ to i64), ptr %24)
  %26 = getelementptr { ptr, ptr, ptr }, ptr %1, i32 0, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr ptr, ptr %27, i32 1
  %29 = getelementptr ptr, ptr %27, i32 2
  %30 = getelementptr ptr, ptr %27, i32 3
  %31 = getelementptr ptr, ptr %27, i32 4
  %32 = load i64, ptr %28, align 4
  %33 = load i64, ptr %29, align 4
  %34 = load ptr, ptr %30, align 8
  %35 = load ptr, ptr %31, align 8
  %36 = call i1 @subtype_test_wrapper(ptr %34, i64 %33, i64 %32, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %35)
  %37 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %38 = getelementptr [13 x ptr], ptr %37, i32 0, i32 8
  %39 = getelementptr ptr, ptr %38, i32 9
  %40 = load ptr, ptr %39, align 8
  ret ptr %40
}

define ptr @Animal_B_say_age_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [13 x ptr], ptr %4, i32 0, i32 9
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Animal_B_say_skill_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [13 x ptr], ptr %4, i32 0, i32 10
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Animal_B_say_messagePtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [13 x ptr], ptr %15, i32 0, i32 11
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Animal_B_do_nothing_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [13 x ptr], ptr %4, i32 0, i32 12
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @Animal_init_agePtri32_hpPtrf64_skillPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3, double %4, i32 %5) {
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %7, align 8
  %8 = call ptr @llvm.invariant.start.p0(i64 16, ptr %7)
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  call void @set_offset(ptr %9, ptr @Animal)
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %23 = load ptr, ptr %22, align 8
  %24 = load ptr, ptr %9, align 8
  %25 = call ptr @llvm.invariant.start.p0(i64 104, ptr %24)
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %27 = load i32, ptr %26, align 4
  %28 = getelementptr ptr, ptr %24, i32 %27
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr { ptr, ptr }, ptr %29, i32 0, i32 1
  %31 = load ptr, ptr %30, align 8
  call void %31(ptr %23, i32 %3) #15
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %33 = load ptr, ptr %32, align 8
  %34 = load ptr, ptr %9, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 104, ptr %34)
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %37 = load i32, ptr %36, align 4
  %38 = getelementptr ptr, ptr %34, i32 %37
  %39 = getelementptr ptr, ptr %38, i32 1
  %40 = load ptr, ptr %39, align 8
  %41 = getelementptr { ptr, ptr }, ptr %40, i32 0, i32 1
  %42 = load ptr, ptr %41, align 8
  call void %42(ptr %33, double %4) #15
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %44 = load ptr, ptr %43, align 8
  %45 = load ptr, ptr %9, align 8
  %46 = call ptr @llvm.invariant.start.p0(i64 104, ptr %45)
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %48 = load i32, ptr %47, align 4
  %49 = getelementptr ptr, ptr %45, i32 %48
  %50 = getelementptr ptr, ptr %49, i32 2
  %51 = load ptr, ptr %50, align 8
  %52 = getelementptr { ptr, ptr }, ptr %51, i32 0, i32 1
  %53 = load ptr, ptr %52, align 8
  call void %53(ptr %44, i32 %5) #15
  ret void
}

define void @Animal_say_age_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Animal)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 104, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 0
  %28 = load ptr, ptr %27, align 8
  %29 = call i32 %28(ptr %20) #16
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %31 = load ptr, ptr %30, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %31, 0
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %34 = load ptr, ptr %33, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr %34, 1
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %37 = load ptr, ptr %36, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %37, 2
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %40 = load i32, ptr %39, align 4
  %41 = insertvalue { ptr, ptr, ptr, i32 } %38, i32 %40, 3
  %42 = alloca [1 x ptr], align 8
  %43 = getelementptr [1 x ptr], ptr %42, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %43, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 1, ptr %42)
  %45 = call ptr @llvm.invariant.start.p0(i64 104, ptr %31)
  %46 = getelementptr ptr, ptr %31, i32 %40
  %47 = getelementptr ptr, ptr %46, i32 6
  %48 = load ptr, ptr %47, align 8
  %49 = alloca { ptr }, align 8
  %50 = getelementptr { ptr }, ptr %49, i32 0, i32 0
  store ptr @i32_typ, ptr %50, align 8
  %51 = call ptr @behavior_wrapper(ptr %48, { ptr, ptr, ptr, i32 } %41, ptr %49)
  call void %51({ ptr, ptr, ptr, i32 } %41, { ptr, ptr, ptr, i32 } %41, ptr %42, i32 %29)
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %53 = load ptr, ptr %52, align 8
  %54 = load ptr, ptr %6, align 8
  %55 = call ptr @llvm.invariant.start.p0(i64 104, ptr %54)
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %57 = load i32, ptr %56, align 4
  %58 = getelementptr ptr, ptr %54, i32 %57
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr { ptr, ptr }, ptr %59, i32 0, i32 0
  %61 = load ptr, ptr %60, align 8
  %62 = call i32 %61(ptr %53) #16
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %64 = load ptr, ptr %63, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %64, 0
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %67 = load ptr, ptr %66, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %67, 1
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %70 = load ptr, ptr %69, align 8
  %71 = insertvalue { ptr, ptr, ptr, i32 } %68, ptr %70, 2
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %73 = load i32, ptr %72, align 4
  %74 = insertvalue { ptr, ptr, ptr, i32 } %71, i32 %73, 3
  %75 = alloca [1 x ptr], align 8
  %76 = getelementptr [1 x ptr], ptr %75, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %76, align 8
  %77 = call ptr @llvm.invariant.start.p0(i64 1, ptr %75)
  %78 = call ptr @llvm.invariant.start.p0(i64 104, ptr %64)
  %79 = getelementptr ptr, ptr %64, i32 %73
  %80 = getelementptr ptr, ptr %79, i32 6
  %81 = load ptr, ptr %80, align 8
  %82 = alloca { ptr }, align 8
  %83 = getelementptr { ptr }, ptr %82, i32 0, i32 0
  store ptr @i32_typ, ptr %83, align 8
  %84 = call ptr @behavior_wrapper(ptr %81, { ptr, ptr, ptr, i32 } %74, ptr %82)
  call void %84({ ptr, ptr, ptr, i32 } %74, { ptr, ptr, ptr, i32 } %74, ptr %75, i32 %62)
  ret void
}

define void @Animal_say_skill_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca i160, align 8
  %5 = alloca ptr, align 8
  %6 = alloca [1 x ptr], align 8
  %7 = alloca { ptr }, align 8
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %8, align 8
  %9 = call ptr @llvm.invariant.start.p0(i64 16, ptr %8)
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 0
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 2
  %19 = load ptr, ptr %17, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  %22 = load i32, ptr %20, align 4
  store i32 %22, ptr %21, align 4
  call void @set_offset(ptr %10, ptr @Animal)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = load ptr, ptr %10, align 8
  %26 = call ptr @llvm.invariant.start.p0(i64 104, ptr %25)
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %10, i32 0, i32 3
  %28 = load i32, ptr %27, align 4
  %29 = getelementptr ptr, ptr %25, i32 %28
  %30 = getelementptr ptr, ptr %29, i32 2
  %31 = load ptr, ptr %30, align 8
  %32 = getelementptr { ptr, ptr }, ptr %31, i32 0, i32 0
  %33 = load ptr, ptr %32, align 8
  %34 = call i32 %33(ptr %24) #16
  store i32 %34, ptr %4, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %5, align 4
  %35 = load ptr, ptr %5, align 8
  %36 = insertvalue { ptr, i160 } undef, ptr %35, 0
  %37 = load i160, ptr %4, align 4
  %38 = insertvalue { ptr, i160 } %36, i160 %37, 1
  %39 = getelementptr [1 x ptr], ptr %6, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %39, align 8
  %40 = call ptr @llvm.invariant.start.p0(i64 1, ptr %6)
  %41 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %42 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %43 = getelementptr { ptr }, ptr %7, i32 0, i32 0
  store ptr %35, ptr %43, align 8
  %44 = call ptr @class_behavior_wrapper(ptr %42, ptr %7)
  call void %44(ptr %6, { ptr, i160 } %38)
  ret void
}

define void @Animal_say_messagePtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Animal)
  %20 = alloca i160, align 8
  %21 = alloca ptr, align 8
  store i32 %3, ptr %20, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %21, align 4
  %22 = load ptr, ptr %21, align 8
  %23 = insertvalue { ptr, i160 } undef, ptr %22, 0
  %24 = load i160, ptr %20, align 4
  %25 = insertvalue { ptr, i160 } %23, i160 %24, 1
  %26 = alloca [1 x ptr], align 8
  %27 = getelementptr [1 x ptr], ptr %26, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %27, align 8
  %28 = call ptr @llvm.invariant.start.p0(i64 1, ptr %26)
  %29 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %30 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %31 = alloca { ptr }, align 8
  %32 = getelementptr { ptr }, ptr %31, i32 0, i32 0
  store ptr %22, ptr %32, align 8
  %33 = call ptr @class_behavior_wrapper(ptr %30, ptr %31)
  call void %33(ptr %26, { ptr, i160 } %25)
  ret void
}

define { ptr, i160 } @Animal_do_nothing_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Animal)
  %19 = alloca [1 x ptr], align 8
  store ptr @Animal, ptr %19, align 8
  %20 = load ptr, ptr %19, align 8
  %21 = getelementptr ptr, ptr %20, i32 6
  %22 = load ptr, ptr %21, align 8
  %23 = call { i64, i64 } @size_wrapper(ptr %22, ptr %19)
  %24 = extractvalue { i64, i64 } %23, 0
  %25 = call ptr @bump_malloc(i64 %24)
  %26 = alloca { ptr, ptr, ptr, i32 }, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  store ptr @Animal, ptr %26, align 8
  store ptr %25, ptr %27, align 8
  store i32 9, ptr %28, align 4
  %29 = call ptr @llvm.invariant.start.p0(i64 16, ptr %26)
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %31 = load ptr, ptr %30, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %31, 0
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %34 = load ptr, ptr %33, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr %34, 1
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %37 = load ptr, ptr %36, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %37, 2
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %40 = load i32, ptr %39, align 4
  %41 = insertvalue { ptr, ptr, ptr, i32 } %38, i32 %40, 3
  %42 = alloca [3 x ptr], align 8
  %43 = getelementptr [3 x ptr], ptr %42, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %43, align 8
  %44 = getelementptr [3 x ptr], ptr %42, i32 0, i32 1
  store ptr @_parameterization_Ptrf64, ptr %44, align 8
  %45 = getelementptr [3 x ptr], ptr %42, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %45, align 8
  %46 = call ptr @llvm.invariant.start.p0(i64 9, ptr %42)
  %47 = call ptr @llvm.invariant.start.p0(i64 104, ptr %31)
  %48 = getelementptr ptr, ptr %31, i32 %40
  %49 = getelementptr ptr, ptr %48, i32 3
  %50 = load ptr, ptr %49, align 8
  %51 = alloca { ptr, ptr, ptr }, align 8
  %52 = getelementptr { ptr, ptr, ptr }, ptr %51, i32 0, i32 0
  store ptr @i32_typ, ptr %52, align 8
  %53 = getelementptr { ptr, ptr, ptr }, ptr %51, i32 0, i32 1
  store ptr @f64_typ, ptr %53, align 8
  %54 = getelementptr { ptr, ptr, ptr }, ptr %51, i32 0, i32 2
  store ptr @i32_typ, ptr %54, align 8
  %55 = call ptr @behavior_wrapper(ptr %50, { ptr, ptr, ptr, i32 } %41, ptr %51)
  call void %55({ ptr, ptr, ptr, i32 } %41, { ptr, ptr, ptr, i32 } %41, ptr %42, i32 5, double 5.000000e+00, i32 5)
  %56 = getelementptr { ptr, i160 }, ptr %26, i32 0, i32 0
  %57 = load ptr, ptr %56, align 8
  %58 = insertvalue { ptr, i160 } undef, ptr %57, 0
  %59 = getelementptr { ptr, i160 }, ptr %26, i32 0, i32 1
  %60 = load i160, ptr %59, align 4
  %61 = insertvalue { ptr, i160 } %58, i160 %60, 1
  ret { ptr, i160 } %61
}

define i32 @Animal_getter_skill(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = urem i64 %7, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %8
  %11 = select i1 %9, i64 0, i64 %10
  %12 = add i64 %7, %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = load i32, ptr %13, align 4
  ret i32 %14
}

define void @Animal_setter_skill(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), %6
  %8 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %7
  %9 = urem i64 %8, ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64)
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %8, %12
  %14 = getelementptr i8, ptr %0, i64 %13
  store i32 %1, ptr %14, align 4
  ret void
}

define double @Animal_getter_hp(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = load double, ptr %7, align 8
  ret double %8
}

define void @Animal_setter_hp(ptr %0, double %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  store double %1, ptr %8, align 8
  ret void
}

define i32 @Animal_getter_age(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @Animal_setter_age(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  store i32 %1, ptr %3, align 4
  ret void
}

define { i64, i64 } @_size_Beaver(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %10
  %12 = urem i64 %11, %5
  %13 = icmp eq i64 %12, 0
  %14 = sub i64 %5, %12
  %15 = select i1 %13, i64 0, i64 %14
  %16 = add i64 %11, %15
  %17 = insertvalue { i64, i64 } undef, i64 %16, 0
  %18 = insertvalue { i64, i64 } %17, i64 %5, 1
  ret { i64, i64 } %18
}

define ptr @Beaver_B_init_colorPtri32_namePtrf64({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 -757315540097298781, i64 ptrtoint (ptr @f64_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [8 x ptr], ptr %26, i32 0, i32 5
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @Beaver_B__ADD_xPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [8 x ptr], ptr %15, i32 0, i32 6
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Beaver_B_say_color_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [8 x ptr], ptr %4, i32 0, i32 7
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @Beaver_init_colorPtri32_namePtrf64({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3, double %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @Beaver)
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %22 = load ptr, ptr %21, align 8
  %23 = load ptr, ptr %8, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 64, ptr %23)
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %26 = load i32, ptr %25, align 4
  %27 = getelementptr ptr, ptr %23, i32 %26
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr { ptr, ptr }, ptr %28, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  call void %30(ptr %22, i32 %3) #15
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %32 = load ptr, ptr %31, align 8
  %33 = load ptr, ptr %8, align 8
  %34 = call ptr @llvm.invariant.start.p0(i64 64, ptr %33)
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %36 = load i32, ptr %35, align 4
  %37 = getelementptr ptr, ptr %33, i32 %36
  %38 = getelementptr ptr, ptr %37, i32 1
  %39 = load ptr, ptr %38, align 8
  %40 = getelementptr { ptr, ptr }, ptr %39, i32 0, i32 1
  %41 = load ptr, ptr %40, align 8
  call void %41(ptr %32, double %4) #15
  ret void
}

define void @Beaver__ADD_xPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Beaver)
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %21 = load ptr, ptr %20, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 64, ptr %22)
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %25 = load i32, ptr %24, align 4
  %26 = getelementptr ptr, ptr %22, i32 %25
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call i32 %29(ptr %21) #16
  %31 = add i32 %30, %3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %33 = load ptr, ptr %32, align 8
  %34 = load ptr, ptr %7, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 64, ptr %34)
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %37 = load i32, ptr %36, align 4
  %38 = getelementptr ptr, ptr %34, i32 %37
  %39 = load ptr, ptr %38, align 8
  %40 = getelementptr { ptr, ptr }, ptr %39, i32 0, i32 1
  %41 = load ptr, ptr %40, align 8
  call void %41(ptr %33, i32 %31) #15
  ret void
}

define void @Beaver_say_color_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Beaver)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 64, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 0
  %28 = load ptr, ptr %27, align 8
  %29 = call i32 %28(ptr %20) #16
  %30 = alloca i160, align 8
  %31 = alloca ptr, align 8
  store i32 %29, ptr %30, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %31, align 4
  %32 = load ptr, ptr %31, align 8
  %33 = insertvalue { ptr, i160 } undef, ptr %32, 0
  %34 = load i160, ptr %30, align 4
  %35 = insertvalue { ptr, i160 } %33, i160 %34, 1
  %36 = alloca [1 x ptr], align 8
  %37 = getelementptr [1 x ptr], ptr %36, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %37, align 8
  %38 = call ptr @llvm.invariant.start.p0(i64 1, ptr %36)
  %39 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %40 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %41 = alloca { ptr }, align 8
  %42 = getelementptr { ptr }, ptr %41, i32 0, i32 0
  store ptr %32, ptr %42, align 8
  %43 = call ptr @class_behavior_wrapper(ptr %40, ptr %41)
  call void %43(ptr %36, { ptr, i160 } %35)
  ret void
}

define double @Beaver_getter_name(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = load double, ptr %7, align 8
  ret double %8
}

define void @Beaver_setter_name(ptr %0, double %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  store double %1, ptr %8, align 8
  ret void
}

define i32 @Beaver_getter_color(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @Beaver_setter_color(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  store i32 %1, ptr %3, align 4
  ret void
}

define { i64, i64 } @_size_ListNode(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), %3
  %5 = select i1 %4, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), i64 %3
  %6 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64)
  %7 = icmp eq i64 %6, 0
  %8 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), %6
  %9 = select i1 %7, i64 0, i64 %8
  %10 = add i64 ptrtoint (ptr getelementptr ({ ptr, i160 }, ptr null, i32 1) to i64), %9
  %11 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %10
  %12 = urem i64 %11, %5
  %13 = icmp eq i64 %12, 0
  %14 = sub i64 %5, %12
  %15 = select i1 %13, i64 0, i64 %14
  %16 = add i64 %11, %15
  %17 = insertvalue { i64, i64 } undef, i64 %16, 0
  %18 = insertvalue { i64, i64 } %17, i64 %5, 1
  ret { i64, i64 } %18
}

define ptr @ListNode_B_init_dataPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [12 x ptr], ptr %15, i32 0, i32 7
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ListNode_B_push_nextListNode({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -1756024950533091476, i64 ptrtoint (ptr @ListNode to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [12 x ptr], ptr %15, i32 0, i32 8
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ListNode_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [12 x ptr], ptr %4, i32 0, i32 9
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @ListNode_B_data_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [12 x ptr], ptr %4, i32 0, i32 10
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @ListNode_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [12 x ptr], ptr %4, i32 0, i32 11
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @ListNode_init_dataPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @ListNode)
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %21 = load ptr, ptr %20, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 96, ptr %22)
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %25 = load i32, ptr %24, align 4
  %26 = getelementptr ptr, ptr %22, i32 %25
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 1
  %29 = load ptr, ptr %28, align 8
  call void %29(ptr %21, i32 %3) #15
  %30 = alloca i160, align 8
  %31 = alloca ptr, align 8
  store [0 x i8] undef, ptr %30, align 1
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %31, align 4
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %33 = load ptr, ptr %32, align 8
  %34 = load ptr, ptr %7, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 96, ptr %34)
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %37 = load i32, ptr %36, align 4
  %38 = getelementptr ptr, ptr %34, i32 %37
  %39 = getelementptr ptr, ptr %38, i32 1
  %40 = load ptr, ptr %39, align 8
  %41 = getelementptr { ptr, ptr }, ptr %40, i32 0, i32 1
  %42 = load ptr, ptr %41, align 8
  %43 = load ptr, ptr %31, align 8
  %44 = insertvalue { ptr, i160 } undef, ptr %43, 0
  %45 = load i160, ptr %30, align 4
  %46 = insertvalue { ptr, i160 } %44, i160 %45, 1
  call void %42(ptr %33, { ptr, i160 } %46) #15
  ret void
}

define { ptr, ptr, ptr, i32 } @ListNode_push_nextListNode({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @ListNode)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 16, ptr %20)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %34 = load i32, ptr %32, align 4
  store i32 %34, ptr %33, align 4
  call void @set_offset(ptr %22, ptr @ListNode)
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = load ptr, ptr %7, align 8
  %38 = call ptr @llvm.invariant.start.p0(i64 96, ptr %37)
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %40 = load i32, ptr %39, align 4
  %41 = getelementptr ptr, ptr %37, i32 %40
  %42 = getelementptr ptr, ptr %41, i32 1
  %43 = load ptr, ptr %42, align 8
  %44 = getelementptr { ptr, ptr }, ptr %43, i32 0, i32 1
  %45 = load ptr, ptr %44, align 8
  %46 = getelementptr { ptr, i160 }, ptr %22, i32 0, i32 0
  %47 = load ptr, ptr %46, align 8
  %48 = insertvalue { ptr, i160 } undef, ptr %47, 0
  %49 = getelementptr { ptr, i160 }, ptr %22, i32 0, i32 1
  %50 = load i160, ptr %49, align 4
  %51 = insertvalue { ptr, i160 } %48, i160 %50, 1
  call void %45(ptr %36, { ptr, i160 } %51) #15
  %52 = alloca { ptr, ptr, ptr, i32 }, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 0
  %55 = load ptr, ptr %53, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 1
  %58 = load ptr, ptr %56, align 8
  store ptr %58, ptr %57, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 2
  %61 = load ptr, ptr %59, align 8
  store ptr %61, ptr %60, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 3
  %64 = load i32, ptr %62, align 4
  store i32 %64, ptr %63, align 4
  call void @set_offset(ptr %52, ptr @ListNode)
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 0
  %66 = load ptr, ptr %65, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %66, 0
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = insertvalue { ptr, ptr, ptr, i32 } %67, ptr %69, 1
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 2
  %72 = load ptr, ptr %71, align 8
  %73 = insertvalue { ptr, ptr, ptr, i32 } %70, ptr %72, 2
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 3
  %75 = load i32, ptr %74, align 4
  %76 = insertvalue { ptr, ptr, ptr, i32 } %73, i32 %75, 3
  ret { ptr, ptr, ptr, i32 } %76
}

define { ptr, i160 } @ListNode_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @ListNode)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 96, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 1
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call { ptr, i160 } %29(ptr %20) #16
  %31 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %30, ptr %31, align 8
  %32 = getelementptr { ptr, i160 }, ptr %31, i32 0, i32 0
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, i160 } undef, ptr %33, 0
  %35 = getelementptr { ptr, i160 }, ptr %31, i32 0, i32 1
  %36 = load i160, ptr %35, align 4
  %37 = insertvalue { ptr, i160 } %34, i160 %36, 1
  ret { ptr, i160 } %37
}

define i32 @ListNode_data_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @ListNode)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 96, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 0
  %28 = load ptr, ptr %27, align 8
  %29 = call i32 %28(ptr %20) #16
  ret i32 %29
}

define { ptr, ptr, ptr, i32 } @ListNode_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @ListNode)
  %19 = alloca [1 x ptr], align 8
  store ptr @ListNode, ptr %19, align 8
  %20 = load ptr, ptr %19, align 8
  %21 = getelementptr ptr, ptr %20, i32 6
  %22 = load ptr, ptr %21, align 8
  %23 = call { i64, i64 } @size_wrapper(ptr %22, ptr %19)
  %24 = extractvalue { i64, i64 } %23, 0
  %25 = call ptr @bump_malloc(i64 %24)
  %26 = alloca { ptr, ptr, ptr, i32 }, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  store ptr @ListNode, ptr %26, align 8
  store ptr %25, ptr %27, align 8
  store i32 9, ptr %28, align 4
  %29 = call ptr @llvm.invariant.start.p0(i64 16, ptr %26)
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %31 = load ptr, ptr %30, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %31, 0
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %34 = load ptr, ptr %33, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr %34, 1
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %37 = load ptr, ptr %36, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %37, 2
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %40 = load i32, ptr %39, align 4
  %41 = insertvalue { ptr, ptr, ptr, i32 } %38, i32 %40, 3
  %42 = alloca [1 x ptr], align 8
  %43 = getelementptr [1 x ptr], ptr %42, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %43, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 1, ptr %42)
  %45 = call ptr @llvm.invariant.start.p0(i64 96, ptr %31)
  %46 = getelementptr ptr, ptr %31, i32 %40
  %47 = getelementptr ptr, ptr %46, i32 2
  %48 = load ptr, ptr %47, align 8
  %49 = alloca { ptr }, align 8
  %50 = getelementptr { ptr }, ptr %49, i32 0, i32 0
  store ptr @i32_typ, ptr %50, align 8
  %51 = call ptr @behavior_wrapper(ptr %48, { ptr, ptr, ptr, i32 } %41, ptr %49)
  call void %51({ ptr, ptr, ptr, i32 } %41, { ptr, ptr, ptr, i32 } %41, ptr %42, i32 0)
  %52 = alloca { ptr, ptr, ptr, i32 }, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 0
  %55 = load ptr, ptr %53, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 1
  %58 = load ptr, ptr %56, align 8
  store ptr %58, ptr %57, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 2
  %61 = load ptr, ptr %59, align 8
  store ptr %61, ptr %60, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 3
  %64 = load i32, ptr %62, align 4
  store i32 %64, ptr %63, align 4
  call void @set_offset(ptr %52, ptr @ListNode)
  %65 = alloca { ptr, ptr, ptr, i32 }, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 0
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 0
  %68 = load ptr, ptr %66, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 1
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %71 = load ptr, ptr %69, align 8
  store ptr %71, ptr %70, align 8
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 2
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 2
  %74 = load ptr, ptr %72, align 8
  store ptr %74, ptr %73, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 3
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %77 = load i32, ptr %75, align 4
  store i32 %77, ptr %76, align 4
  %78 = call ptr @llvm.invariant.start.p0(i64 16, ptr %65)
  %79 = alloca { ptr, ptr, ptr, i32 }, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %79, i32 0, i32 0
  %82 = load ptr, ptr %80, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %79, i32 0, i32 1
  %85 = load ptr, ptr %83, align 8
  store ptr %85, ptr %84, align 8
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %79, i32 0, i32 2
  %88 = load ptr, ptr %86, align 8
  store ptr %88, ptr %87, align 8
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %79, i32 0, i32 3
  %91 = load i32, ptr %89, align 4
  store i32 %91, ptr %90, align 4
  call void @set_offset(ptr %79, ptr @ListNode)
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %79, i32 0, i32 0
  %93 = load ptr, ptr %92, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %93, 0
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %79, i32 0, i32 1
  %96 = load ptr, ptr %95, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr %96, 1
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %79, i32 0, i32 2
  %99 = load ptr, ptr %98, align 8
  %100 = insertvalue { ptr, ptr, ptr, i32 } %97, ptr %99, 2
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %79, i32 0, i32 3
  %102 = load i32, ptr %101, align 4
  %103 = insertvalue { ptr, ptr, ptr, i32 } %100, i32 %102, 3
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 0
  %105 = load ptr, ptr %104, align 8
  %106 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %105, 0
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %108 = load ptr, ptr %107, align 8
  %109 = insertvalue { ptr, ptr, ptr, i32 } %106, ptr %108, 1
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 2
  %111 = load ptr, ptr %110, align 8
  %112 = insertvalue { ptr, ptr, ptr, i32 } %109, ptr %111, 2
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %114 = load i32, ptr %113, align 4
  %115 = insertvalue { ptr, ptr, ptr, i32 } %112, i32 %114, 3
  %116 = alloca [1 x ptr], align 8
  %117 = getelementptr [1 x ptr], ptr %116, i32 0, i32 0
  store ptr @_parameterization_ListNode, ptr %117, align 8
  %118 = call ptr @llvm.invariant.start.p0(i64 1, ptr %116)
  %119 = call ptr @llvm.invariant.start.p0(i64 96, ptr %105)
  %120 = getelementptr ptr, ptr %105, i32 %114
  %121 = getelementptr ptr, ptr %120, i32 3
  %122 = load ptr, ptr %121, align 8
  %123 = alloca { ptr }, align 8
  %124 = getelementptr { ptr }, ptr %123, i32 0, i32 0
  store ptr %93, ptr %124, align 8
  %125 = call ptr @behavior_wrapper(ptr %122, { ptr, ptr, ptr, i32 } %115, ptr %123)
  %126 = call { ptr, ptr, ptr, i32 } %125({ ptr, ptr, ptr, i32 } %115, { ptr, ptr, ptr, i32 } %115, ptr %116, { ptr, ptr, ptr, i32 } %103)
  %127 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %126, ptr %127, align 8
  %128 = call ptr @llvm.invariant.start.p0(i64 16, ptr %127)
  %129 = alloca { ptr, ptr, ptr, i32 }, align 8
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %127, i32 0, i32 0
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %129, i32 0, i32 0
  %132 = load ptr, ptr %130, align 8
  store ptr %132, ptr %131, align 8
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %127, i32 0, i32 1
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %129, i32 0, i32 1
  %135 = load ptr, ptr %133, align 8
  store ptr %135, ptr %134, align 8
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %127, i32 0, i32 2
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %129, i32 0, i32 2
  %138 = load ptr, ptr %136, align 8
  store ptr %138, ptr %137, align 8
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %127, i32 0, i32 3
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %129, i32 0, i32 3
  %141 = load i32, ptr %139, align 4
  store i32 %141, ptr %140, align 4
  call void @set_offset(ptr %129, ptr @ListNode)
  %142 = alloca [1 x ptr], align 8
  store ptr @ListIterator, ptr %142, align 8
  %143 = load ptr, ptr %142, align 8
  %144 = getelementptr ptr, ptr %143, i32 6
  %145 = load ptr, ptr %144, align 8
  %146 = call { i64, i64 } @size_wrapper(ptr %145, ptr %142)
  %147 = extractvalue { i64, i64 } %146, 0
  %148 = call ptr @bump_malloc(i64 %147)
  %149 = alloca { ptr, ptr, ptr, i32 }, align 8
  %150 = getelementptr { ptr, ptr, ptr, i32 }, ptr %149, i32 0, i32 1
  %151 = getelementptr { ptr, ptr, ptr, i32 }, ptr %149, i32 0, i32 3
  store ptr @ListIterator, ptr %149, align 8
  store ptr %148, ptr %150, align 8
  store i32 9, ptr %151, align 4
  %152 = call ptr @llvm.invariant.start.p0(i64 16, ptr %149)
  %153 = alloca { ptr, ptr, ptr, i32 }, align 8
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 0
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %153, i32 0, i32 0
  %156 = load ptr, ptr %154, align 8
  store ptr %156, ptr %155, align 8
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %158 = getelementptr { ptr, ptr, ptr, i32 }, ptr %153, i32 0, i32 1
  %159 = load ptr, ptr %157, align 8
  store ptr %159, ptr %158, align 8
  %160 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 2
  %161 = getelementptr { ptr, ptr, ptr, i32 }, ptr %153, i32 0, i32 2
  %162 = load ptr, ptr %160, align 8
  store ptr %162, ptr %161, align 8
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %153, i32 0, i32 3
  %165 = load i32, ptr %163, align 4
  store i32 %165, ptr %164, align 4
  call void @set_offset(ptr %153, ptr @ListNode)
  %166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %153, i32 0, i32 0
  %167 = load ptr, ptr %166, align 8
  %168 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %167, 0
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %153, i32 0, i32 1
  %170 = load ptr, ptr %169, align 8
  %171 = insertvalue { ptr, ptr, ptr, i32 } %168, ptr %170, 1
  %172 = getelementptr { ptr, ptr, ptr, i32 }, ptr %153, i32 0, i32 2
  %173 = load ptr, ptr %172, align 8
  %174 = insertvalue { ptr, ptr, ptr, i32 } %171, ptr %173, 2
  %175 = getelementptr { ptr, ptr, ptr, i32 }, ptr %153, i32 0, i32 3
  %176 = load i32, ptr %175, align 4
  %177 = insertvalue { ptr, ptr, ptr, i32 } %174, i32 %176, 3
  %178 = getelementptr { ptr, ptr, ptr, i32 }, ptr %149, i32 0, i32 0
  %179 = load ptr, ptr %178, align 8
  %180 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %179, 0
  %181 = getelementptr { ptr, ptr, ptr, i32 }, ptr %149, i32 0, i32 1
  %182 = load ptr, ptr %181, align 8
  %183 = insertvalue { ptr, ptr, ptr, i32 } %180, ptr %182, 1
  %184 = getelementptr { ptr, ptr, ptr, i32 }, ptr %149, i32 0, i32 2
  %185 = load ptr, ptr %184, align 8
  %186 = insertvalue { ptr, ptr, ptr, i32 } %183, ptr %185, 2
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %149, i32 0, i32 3
  %188 = load i32, ptr %187, align 4
  %189 = insertvalue { ptr, ptr, ptr, i32 } %186, i32 %188, 3
  %190 = alloca [1 x ptr], align 8
  %191 = getelementptr [1 x ptr], ptr %190, i32 0, i32 0
  store ptr @_parameterization_ListNode, ptr %191, align 8
  %192 = call ptr @llvm.invariant.start.p0(i64 1, ptr %190)
  %193 = call ptr @llvm.invariant.start.p0(i64 40, ptr %179)
  %194 = getelementptr ptr, ptr %179, i32 %188
  %195 = getelementptr ptr, ptr %194, i32 1
  %196 = load ptr, ptr %195, align 8
  %197 = alloca { ptr }, align 8
  %198 = getelementptr { ptr }, ptr %197, i32 0, i32 0
  store ptr %167, ptr %198, align 8
  %199 = call ptr @behavior_wrapper(ptr %196, { ptr, ptr, ptr, i32 } %189, ptr %197)
  call void %199({ ptr, ptr, ptr, i32 } %189, { ptr, ptr, ptr, i32 } %189, ptr %190, { ptr, ptr, ptr, i32 } %177)
  %200 = alloca { ptr, ptr, ptr, i32 }, align 8
  %201 = getelementptr { ptr, ptr, ptr, i32 }, ptr %149, i32 0, i32 0
  %202 = getelementptr { ptr, ptr, ptr, i32 }, ptr %200, i32 0, i32 0
  %203 = load ptr, ptr %201, align 8
  store ptr %203, ptr %202, align 8
  %204 = getelementptr { ptr, ptr, ptr, i32 }, ptr %149, i32 0, i32 1
  %205 = getelementptr { ptr, ptr, ptr, i32 }, ptr %200, i32 0, i32 1
  %206 = load ptr, ptr %204, align 8
  store ptr %206, ptr %205, align 8
  %207 = getelementptr { ptr, ptr, ptr, i32 }, ptr %149, i32 0, i32 2
  %208 = getelementptr { ptr, ptr, ptr, i32 }, ptr %200, i32 0, i32 2
  %209 = load ptr, ptr %207, align 8
  store ptr %209, ptr %208, align 8
  %210 = getelementptr { ptr, ptr, ptr, i32 }, ptr %149, i32 0, i32 3
  %211 = getelementptr { ptr, ptr, ptr, i32 }, ptr %200, i32 0, i32 3
  %212 = load i32, ptr %210, align 4
  store i32 %212, ptr %211, align 4
  call void @set_offset(ptr %200, ptr @ListIterator)
  %213 = getelementptr { ptr, ptr, ptr, i32 }, ptr %200, i32 0, i32 0
  %214 = load ptr, ptr %213, align 8
  %215 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %214, 0
  %216 = getelementptr { ptr, ptr, ptr, i32 }, ptr %200, i32 0, i32 1
  %217 = load ptr, ptr %216, align 8
  %218 = insertvalue { ptr, ptr, ptr, i32 } %215, ptr %217, 1
  %219 = getelementptr { ptr, ptr, ptr, i32 }, ptr %200, i32 0, i32 2
  %220 = load ptr, ptr %219, align 8
  %221 = insertvalue { ptr, ptr, ptr, i32 } %218, ptr %220, 2
  %222 = getelementptr { ptr, ptr, ptr, i32 }, ptr %200, i32 0, i32 3
  %223 = load i32, ptr %222, align 4
  %224 = insertvalue { ptr, ptr, ptr, i32 } %221, i32 %223, 3
  ret { ptr, ptr, ptr, i32 } %224
}

define { i64, i64 } @_size_ListIterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define ptr @ListIterator_B_init_nodeListNode({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -1756024950533091476, i64 ptrtoint (ptr @ListNode to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [5 x ptr], ptr %15, i32 0, i32 3
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ListIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [5 x ptr], ptr %4, i32 0, i32 4
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @ListIterator_init_nodeListNode({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @ListIterator)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 16, ptr %20)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %34 = load i32, ptr %32, align 4
  store i32 %34, ptr %33, align 4
  call void @set_offset(ptr %22, ptr @ListNode)
  %35 = alloca { ptr, ptr, ptr, i32 }, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %38 = load ptr, ptr %36, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %41 = load ptr, ptr %39, align 8
  store ptr %41, ptr %40, align 8
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %44 = load ptr, ptr %42, align 8
  store ptr %44, ptr %43, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %47 = load i32, ptr %45, align 4
  store i32 %47, ptr %46, align 4
  call void @set_offset(ptr %35, ptr @ListNode)
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = load ptr, ptr %7, align 8
  %51 = call ptr @llvm.invariant.start.p0(i64 40, ptr %50)
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %53 = load i32, ptr %52, align 4
  %54 = getelementptr ptr, ptr %50, i32 %53
  %55 = load ptr, ptr %54, align 8
  %56 = getelementptr { ptr, ptr }, ptr %55, i32 0, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %59 = load ptr, ptr %58, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %59, 0
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %62 = load ptr, ptr %61, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr %62, 1
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %65 = load ptr, ptr %64, align 8
  %66 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %65, 2
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %68 = load i32, ptr %67, align 4
  %69 = insertvalue { ptr, ptr, ptr, i32 } %66, i32 %68, 3
  call void %57(ptr %49, { ptr, ptr, ptr, i32 } %69) #15
  ret void
}

define { ptr, i160 } @ListIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = alloca i160, align 8
  %8 = alloca ptr, align 8
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %9, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 16, ptr %9)
  %11 = alloca { ptr, ptr, ptr, i32 }, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 0
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 2
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %23 = load i32, ptr %21, align 4
  store i32 %23, ptr %22, align 4
  call void @set_offset(ptr %11, ptr @ListIterator)
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %25 = load ptr, ptr %24, align 8
  %26 = load ptr, ptr %11, align 8
  %27 = call ptr @llvm.invariant.start.p0(i64 40, ptr %26)
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %29 = load i32, ptr %28, align 4
  %30 = getelementptr ptr, ptr %26, i32 %29
  %31 = load ptr, ptr %30, align 8
  %32 = getelementptr { ptr, ptr }, ptr %31, i32 0, i32 0
  %33 = load ptr, ptr %32, align 8
  %34 = call { ptr, ptr, ptr, i32 } %33(ptr %25) #16
  %35 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %34, ptr %35, align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 16, ptr %35)
  call void @assume_offset(ptr %35, ptr @ListNode)
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %38 = load ptr, ptr %37, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %38, 0
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %41 = load ptr, ptr %40, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } %39, ptr %41, 1
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %44 = load ptr, ptr %43, align 8
  %45 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %44, 2
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %47 = load i32, ptr %46, align 4
  %48 = insertvalue { ptr, ptr, ptr, i32 } %45, i32 %47, 3
  %49 = alloca [0 x ptr], align 8
  %50 = call ptr @llvm.invariant.start.p0(i64 0, ptr %49)
  %51 = call ptr @llvm.invariant.start.p0(i64 96, ptr %38)
  %52 = getelementptr ptr, ptr %38, i32 %47
  %53 = getelementptr ptr, ptr %52, i32 4
  %54 = load ptr, ptr %53, align 8
  %55 = alloca {}, align 8
  %56 = call ptr @behavior_wrapper(ptr %54, { ptr, ptr, ptr, i32 } %48, ptr %55)
  %57 = call { ptr, i160 } %56({ ptr, ptr, ptr, i32 } %48, { ptr, ptr, ptr, i32 } %48, ptr %49)
  %58 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %57, ptr %58, align 8
  %59 = getelementptr { ptr, i160 }, ptr %58, i32 0, i32 0
  %60 = load ptr, ptr %59, align 8
  %61 = ptrtoint ptr %60 to i64
  %62 = icmp eq i64 %61, ptrtoint (ptr @nil_typ to i64)
  %63 = icmp eq i64 %61, 0
  %64 = or i1 %62, %63
  %65 = icmp eq i1 %64, false
  br i1 %65, label %66, label %125

66:                                               ; preds = %3
  %67 = getelementptr { ptr, i160 }, ptr %58, i32 0, i32 0
  %68 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 0
  %69 = load ptr, ptr %67, align 8
  store ptr %69, ptr %68, align 8
  %70 = getelementptr { ptr, i160 }, ptr %58, i32 0, i32 1
  %71 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %72 = load i160, ptr %70, align 4
  store i160 %72, ptr %71, align 4
  call void @set_offset(ptr %4, ptr @ListNode)
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %75 = load ptr, ptr %73, align 8
  store ptr %75, ptr %74, align 8
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %78 = load ptr, ptr %76, align 8
  store ptr %78, ptr %77, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %81 = load ptr, ptr %79, align 8
  store ptr %81, ptr %80, align 8
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %84 = load i32, ptr %82, align 4
  store i32 %84, ptr %83, align 4
  call void @set_offset(ptr %5, ptr @ListNode)
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %86 = load ptr, ptr %85, align 8
  %87 = load ptr, ptr %11, align 8
  %88 = call ptr @llvm.invariant.start.p0(i64 40, ptr %87)
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %90 = load i32, ptr %89, align 4
  %91 = getelementptr ptr, ptr %87, i32 %90
  %92 = load ptr, ptr %91, align 8
  %93 = getelementptr { ptr, ptr }, ptr %92, i32 0, i32 1
  %94 = load ptr, ptr %93, align 8
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %96 = load ptr, ptr %95, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %96, 0
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %99 = load ptr, ptr %98, align 8
  %100 = insertvalue { ptr, ptr, ptr, i32 } %97, ptr %99, 1
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %102 = load ptr, ptr %101, align 8
  %103 = insertvalue { ptr, ptr, ptr, i32 } %100, ptr %102, 2
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %105 = load i32, ptr %104, align 4
  %106 = insertvalue { ptr, ptr, ptr, i32 } %103, i32 %105, 3
  call void %94(ptr %86, { ptr, ptr, ptr, i32 } %106) #15
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  %108 = load ptr, ptr %107, align 8
  %109 = load ptr, ptr %11, align 8
  %110 = call ptr @llvm.invariant.start.p0(i64 40, ptr %109)
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %11, i32 0, i32 3
  %112 = load i32, ptr %111, align 4
  %113 = getelementptr ptr, ptr %109, i32 %112
  %114 = load ptr, ptr %113, align 8
  %115 = getelementptr { ptr, ptr }, ptr %114, i32 0, i32 0
  %116 = load ptr, ptr %115, align 8
  %117 = call { ptr, ptr, ptr, i32 } %116(ptr %108) #16
  store { ptr, ptr, ptr, i32 } %117, ptr %6, align 8
  %118 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  call void @assume_offset(ptr %6, ptr @ListNode)
  %119 = getelementptr { ptr, i160 }, ptr %6, i32 0, i32 0
  %120 = load ptr, ptr %119, align 8
  %121 = insertvalue { ptr, i160 } undef, ptr %120, 0
  %122 = getelementptr { ptr, i160 }, ptr %6, i32 0, i32 1
  %123 = load i160, ptr %122, align 4
  %124 = insertvalue { ptr, i160 } %121, i160 %123, 1
  store { ptr, i160 } %124, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem5, align 8
  br label %130

125:                                              ; preds = %3
  store [0 x i8] undef, ptr %7, align 1
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %8, align 4
  %126 = load ptr, ptr %8, align 8
  %127 = insertvalue { ptr, i160 } undef, ptr %126, 0
  %128 = load i160, ptr %7, align 4
  %129 = insertvalue { ptr, i160 } %127, i160 %128, 1
  store { ptr, i160 } %129, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem5, align 8
  br label %130

130:                                              ; preds = %125, %66
  %.reload6 = load { ptr, i160 }, ptr %.reg2mem5, align 8
  store { ptr, i160 } %.reload6, ptr %.reg2mem, align 8
  br label %131

131:                                              ; preds = %130
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  ret { ptr, i160 } %.reload
}

define { ptr, ptr, ptr, i32 } @ListIterator_getter_node(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @ListIterator_setter_node(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  ret void
}

define { ptr, i160 } @ListNode_getter_next(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64)
  %3 = icmp eq i64 %2, 0
  %4 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), %2
  %5 = select i1 %3, i64 0, i64 %4
  %6 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %5
  %7 = getelementptr i8, ptr %0, i64 %6
  %8 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, i160 } undef, ptr %9, 0
  %11 = getelementptr { ptr, i160 }, ptr %7, i32 0, i32 1
  %12 = load i160, ptr %11, align 4
  %13 = insertvalue { ptr, i160 } %10, i160 %12, 1
  ret { ptr, i160 } %13
}

define void @ListNode_setter_next(ptr %0, { ptr, i160 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64)
  %4 = icmp eq i64 %3, 0
  %5 = sub i64 ptrtoint (ptr getelementptr ({ i8, { ptr, i160 } }, ptr null, i32 0, i32 1) to i64), %3
  %6 = select i1 %4, i64 0, i64 %5
  %7 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %6
  %8 = getelementptr i8, ptr %0, i64 %7
  %9 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %1, ptr %9, align 8
  %10 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 0
  %11 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 1
  %14 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 1
  %15 = load i160, ptr %13, align 4
  store i160 %15, ptr %14, align 4
  ret void
}

define i32 @ListNode_getter_data(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 0
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @ListNode_setter_data(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr i8, ptr %0, i64 0
  store i32 %1, ptr %3, align 4
  ret void
}

define { i64, i64 } @_size_Bard(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret { i64, i64 } { i64 0, i64 1 }
}

define ptr @Bard_B_init_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [7 x ptr], ptr %4, i32 0, i32 2
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Bard_B_take_aAnimal_bBeaver_take_aPtri32_bPtrf64_take_aPtrf64_bPtrf64_take_aPtri32_bPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i32, align 4
  %.reg2mem5 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  br i1 %14, label %15, label %42

15:                                               ; preds = %2
  %16 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %17 = load ptr, ptr %16, align 8
  %18 = getelementptr ptr, ptr %17, i32 1
  %19 = getelementptr ptr, ptr %17, i32 2
  %20 = getelementptr ptr, ptr %17, i32 3
  %21 = getelementptr ptr, ptr %17, i32 4
  %22 = load i64, ptr %18, align 4
  %23 = load i64, ptr %19, align 4
  %24 = load ptr, ptr %20, align 8
  %25 = load ptr, ptr %21, align 8
  %26 = call i1 @subtype_test_wrapper(ptr %24, i64 %23, i64 %22, i64 -757315540097298781, i64 ptrtoint (ptr @f64_typ to i64), ptr %25)
  %27 = select i1 %26, i32 4, i32 6
  store i32 %27, ptr %.reg2mem3, align 4
  br i1 %26, label %28, label %29

28:                                               ; preds = %15
  br label %41

29:                                               ; preds = %15
  %30 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %31 = load ptr, ptr %30, align 8
  %32 = getelementptr ptr, ptr %31, i32 1
  %33 = getelementptr ptr, ptr %31, i32 2
  %34 = getelementptr ptr, ptr %31, i32 3
  %35 = getelementptr ptr, ptr %31, i32 4
  %36 = load i64, ptr %32, align 4
  %37 = load i64, ptr %33, align 4
  %38 = load ptr, ptr %34, align 8
  %39 = load ptr, ptr %35, align 8
  %40 = call i1 @subtype_test_wrapper(ptr %38, i64 %37, i64 %36, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %39)
  br label %41

41:                                               ; preds = %29, %28
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  store i32 %.reload4, ptr %.reg2mem5, align 4
  br label %91

42:                                               ; preds = %2
  %43 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %44 = load ptr, ptr %43, align 8
  %45 = getelementptr ptr, ptr %44, i32 1
  %46 = getelementptr ptr, ptr %44, i32 2
  %47 = getelementptr ptr, ptr %44, i32 3
  %48 = getelementptr ptr, ptr %44, i32 4
  %49 = load i64, ptr %45, align 4
  %50 = load i64, ptr %46, align 4
  %51 = load ptr, ptr %47, align 8
  %52 = load ptr, ptr %48, align 8
  %53 = call i1 @subtype_test_wrapper(ptr %51, i64 %50, i64 %49, i64 1075018126824711487, i64 ptrtoint (ptr @Animal to i64), ptr %52)
  %54 = select i1 %53, i32 3, i32 5
  store i32 %54, ptr %.reg2mem1, align 4
  br i1 %53, label %55, label %67

55:                                               ; preds = %42
  %56 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr ptr, ptr %57, i32 1
  %59 = getelementptr ptr, ptr %57, i32 2
  %60 = getelementptr ptr, ptr %57, i32 3
  %61 = getelementptr ptr, ptr %57, i32 4
  %62 = load i64, ptr %58, align 4
  %63 = load i64, ptr %59, align 4
  %64 = load ptr, ptr %60, align 8
  %65 = load ptr, ptr %61, align 8
  %66 = call i1 @subtype_test_wrapper(ptr %64, i64 %63, i64 %62, i64 -6124772949900838462, i64 ptrtoint (ptr @Beaver to i64), ptr %65)
  br label %90

67:                                               ; preds = %42
  %68 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %69 = load ptr, ptr %68, align 8
  %70 = getelementptr ptr, ptr %69, i32 1
  %71 = getelementptr ptr, ptr %69, i32 2
  %72 = getelementptr ptr, ptr %69, i32 3
  %73 = getelementptr ptr, ptr %69, i32 4
  %74 = load i64, ptr %70, align 4
  %75 = load i64, ptr %71, align 4
  %76 = load ptr, ptr %72, align 8
  %77 = load ptr, ptr %73, align 8
  %78 = call i1 @subtype_test_wrapper(ptr %76, i64 %75, i64 %74, i64 -757315540097298781, i64 ptrtoint (ptr @f64_typ to i64), ptr %77)
  %79 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %80 = load ptr, ptr %79, align 8
  %81 = getelementptr ptr, ptr %80, i32 1
  %82 = getelementptr ptr, ptr %80, i32 2
  %83 = getelementptr ptr, ptr %80, i32 3
  %84 = getelementptr ptr, ptr %80, i32 4
  %85 = load i64, ptr %81, align 4
  %86 = load i64, ptr %82, align 4
  %87 = load ptr, ptr %83, align 8
  %88 = load ptr, ptr %84, align 8
  %89 = call i1 @subtype_test_wrapper(ptr %87, i64 %86, i64 %85, i64 -757315540097298781, i64 ptrtoint (ptr @f64_typ to i64), ptr %88)
  br label %90

90:                                               ; preds = %67, %55
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem5, align 4
  br label %91

91:                                               ; preds = %90, %41
  %.reload6 = load i32, ptr %.reg2mem5, align 4
  store i32 %.reload6, ptr %.reg2mem, align 4
  br label %92

92:                                               ; preds = %91
  %.reload = load i32, ptr %.reg2mem, align 4
  %93 = zext i32 %.reload to i64
  %94 = or i64 0, %93
  %95 = inttoptr i64 %94 to ptr
  %96 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %97 = ptrtoint ptr %95 to i64
  %98 = trunc i64 %97 to i32
  %99 = getelementptr [7 x ptr], ptr %96, i32 0, i32 %98
  %100 = getelementptr ptr, ptr %99, i32 9
  %101 = load ptr, ptr %100, align 8
  ret ptr %101
}

define void @Bard_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Bard)
  ret void
}

define void @Bard_take_aAnimal_bBeaver({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3, { ptr, i160 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @Bard)
  %21 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %21, align 8
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = getelementptr { ptr, i160 }, ptr %21, i32 0, i32 0
  %24 = getelementptr { ptr, i160 }, ptr %22, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, i160 }, ptr %21, i32 0, i32 1
  %27 = getelementptr { ptr, i160 }, ptr %22, i32 0, i32 1
  %28 = load i160, ptr %26, align 4
  store i160 %28, ptr %27, align 4
  call void @set_offset(ptr %22, ptr @Animal)
  %29 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %4, ptr %29, align 8
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  %31 = getelementptr { ptr, i160 }, ptr %29, i32 0, i32 0
  %32 = getelementptr { ptr, i160 }, ptr %30, i32 0, i32 0
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, i160 }, ptr %29, i32 0, i32 1
  %35 = getelementptr { ptr, i160 }, ptr %30, i32 0, i32 1
  %36 = load i160, ptr %34, align 4
  store i160 %36, ptr %35, align 4
  call void @set_offset(ptr %30, ptr @Beaver)
  %37 = alloca ptr, align 8
  %38 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 8))
  store ptr %38, ptr %37, align 8
  %39 = alloca { ptr }, align 8
  %40 = getelementptr { ptr }, ptr %37, i32 0, i32 0
  %41 = getelementptr { ptr }, ptr %39, i32 0, i32 0
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 16, ptr %39)
  %44 = load ptr, ptr %39, align 8
  %45 = load [7 x i8], ptr @zxrbg_animal, align 1
  store [7 x i8] %45, ptr %44, align 1
  %46 = alloca [1 x ptr], align 8
  store ptr @String, ptr %46, align 8
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr ptr, ptr %47, i32 6
  %49 = load ptr, ptr %48, align 8
  %50 = call { i64, i64 } @size_wrapper(ptr %49, ptr %46)
  %51 = extractvalue { i64, i64 } %50, 0
  %52 = call ptr @bump_malloc(i64 %51)
  %53 = alloca { ptr, ptr, ptr, i32 }, align 8
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 1
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 3
  store ptr @String, ptr %53, align 8
  store ptr %52, ptr %54, align 8
  store i32 9, ptr %55, align 4
  %56 = call ptr @llvm.invariant.start.p0(i64 16, ptr %53)
  %57 = getelementptr { ptr }, ptr %39, i32 0, i32 0
  %58 = load ptr, ptr %57, align 8
  %59 = insertvalue { ptr } undef, ptr %58, 0
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 0
  %61 = load ptr, ptr %60, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %61, 0
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 1
  %64 = load ptr, ptr %63, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %62, ptr %64, 1
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 2
  %67 = load ptr, ptr %66, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %67, 2
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 3
  %70 = load i32, ptr %69, align 4
  %71 = insertvalue { ptr, ptr, ptr, i32 } %68, i32 %70, 3
  %72 = alloca [3 x ptr], align 8
  %73 = getelementptr [3 x ptr], ptr %72, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %73, align 8
  %74 = getelementptr [3 x ptr], ptr %72, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %74, align 8
  %75 = getelementptr [3 x ptr], ptr %72, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %75, align 8
  %76 = call ptr @llvm.invariant.start.p0(i64 9, ptr %72)
  %77 = call ptr @llvm.invariant.start.p0(i64 280, ptr %61)
  %78 = getelementptr ptr, ptr %61, i32 %70
  %79 = getelementptr ptr, ptr %78, i32 4
  %80 = load ptr, ptr %79, align 8
  %81 = alloca { ptr, ptr, ptr }, align 8
  %82 = getelementptr { ptr, ptr, ptr }, ptr %81, i32 0, i32 0
  store ptr @buffer_typ, ptr %82, align 8
  %83 = getelementptr { ptr, ptr, ptr }, ptr %81, i32 0, i32 1
  store ptr @i32_typ, ptr %83, align 8
  %84 = getelementptr { ptr, ptr, ptr }, ptr %81, i32 0, i32 2
  store ptr @i32_typ, ptr %84, align 8
  %85 = call ptr @behavior_wrapper(ptr %80, { ptr, ptr, ptr, i32 } %71, ptr %81)
  call void %85({ ptr, ptr, ptr, i32 } %71, { ptr, ptr, ptr, i32 } %71, ptr %72, { ptr } %59, i32 7, i32 8)
  %86 = getelementptr { ptr, i160 }, ptr %53, i32 0, i32 0
  %87 = load ptr, ptr %86, align 8
  %88 = insertvalue { ptr, i160 } undef, ptr %87, 0
  %89 = getelementptr { ptr, i160 }, ptr %53, i32 0, i32 1
  %90 = load i160, ptr %89, align 4
  %91 = insertvalue { ptr, i160 } %88, i160 %90, 1
  %92 = alloca [1 x ptr], align 8
  %93 = getelementptr [1 x ptr], ptr %92, i32 0, i32 0
  store ptr @_parameterization_String, ptr %93, align 8
  %94 = call ptr @llvm.invariant.start.p0(i64 1, ptr %92)
  %95 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %96 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %97 = alloca { ptr }, align 8
  %98 = getelementptr { ptr }, ptr %97, i32 0, i32 0
  store ptr %87, ptr %98, align 8
  %99 = call ptr @class_behavior_wrapper(ptr %96, ptr %97)
  call void %99(ptr %92, { ptr, i160 } %91)
  %100 = alloca ptr, align 8
  %101 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 8))
  store ptr %101, ptr %100, align 8
  %102 = alloca { ptr }, align 8
  %103 = getelementptr { ptr }, ptr %100, i32 0, i32 0
  %104 = getelementptr { ptr }, ptr %102, i32 0, i32 0
  %105 = load ptr, ptr %103, align 8
  store ptr %105, ptr %104, align 8
  %106 = call ptr @llvm.invariant.start.p0(i64 16, ptr %102)
  %107 = load ptr, ptr %102, align 8
  %108 = load [7 x i8], ptr @oaszo_beaver, align 1
  store [7 x i8] %108, ptr %107, align 1
  %109 = alloca [1 x ptr], align 8
  store ptr @String, ptr %109, align 8
  %110 = load ptr, ptr %109, align 8
  %111 = getelementptr ptr, ptr %110, i32 6
  %112 = load ptr, ptr %111, align 8
  %113 = call { i64, i64 } @size_wrapper(ptr %112, ptr %109)
  %114 = extractvalue { i64, i64 } %113, 0
  %115 = call ptr @bump_malloc(i64 %114)
  %116 = alloca { ptr, ptr, ptr, i32 }, align 8
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 1
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 3
  store ptr @String, ptr %116, align 8
  store ptr %115, ptr %117, align 8
  store i32 9, ptr %118, align 4
  %119 = call ptr @llvm.invariant.start.p0(i64 16, ptr %116)
  %120 = getelementptr { ptr }, ptr %102, i32 0, i32 0
  %121 = load ptr, ptr %120, align 8
  %122 = insertvalue { ptr } undef, ptr %121, 0
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 0
  %124 = load ptr, ptr %123, align 8
  %125 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %124, 0
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 1
  %127 = load ptr, ptr %126, align 8
  %128 = insertvalue { ptr, ptr, ptr, i32 } %125, ptr %127, 1
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 2
  %130 = load ptr, ptr %129, align 8
  %131 = insertvalue { ptr, ptr, ptr, i32 } %128, ptr %130, 2
  %132 = getelementptr { ptr, ptr, ptr, i32 }, ptr %116, i32 0, i32 3
  %133 = load i32, ptr %132, align 4
  %134 = insertvalue { ptr, ptr, ptr, i32 } %131, i32 %133, 3
  %135 = alloca [3 x ptr], align 8
  %136 = getelementptr [3 x ptr], ptr %135, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %136, align 8
  %137 = getelementptr [3 x ptr], ptr %135, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %137, align 8
  %138 = getelementptr [3 x ptr], ptr %135, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %138, align 8
  %139 = call ptr @llvm.invariant.start.p0(i64 9, ptr %135)
  %140 = call ptr @llvm.invariant.start.p0(i64 280, ptr %124)
  %141 = getelementptr ptr, ptr %124, i32 %133
  %142 = getelementptr ptr, ptr %141, i32 4
  %143 = load ptr, ptr %142, align 8
  %144 = alloca { ptr, ptr, ptr }, align 8
  %145 = getelementptr { ptr, ptr, ptr }, ptr %144, i32 0, i32 0
  store ptr @buffer_typ, ptr %145, align 8
  %146 = getelementptr { ptr, ptr, ptr }, ptr %144, i32 0, i32 1
  store ptr @i32_typ, ptr %146, align 8
  %147 = getelementptr { ptr, ptr, ptr }, ptr %144, i32 0, i32 2
  store ptr @i32_typ, ptr %147, align 8
  %148 = call ptr @behavior_wrapper(ptr %143, { ptr, ptr, ptr, i32 } %134, ptr %144)
  call void %148({ ptr, ptr, ptr, i32 } %134, { ptr, ptr, ptr, i32 } %134, ptr %135, { ptr } %122, i32 7, i32 8)
  %149 = getelementptr { ptr, i160 }, ptr %116, i32 0, i32 0
  %150 = load ptr, ptr %149, align 8
  %151 = insertvalue { ptr, i160 } undef, ptr %150, 0
  %152 = getelementptr { ptr, i160 }, ptr %116, i32 0, i32 1
  %153 = load i160, ptr %152, align 4
  %154 = insertvalue { ptr, i160 } %151, i160 %153, 1
  %155 = alloca [1 x ptr], align 8
  %156 = getelementptr [1 x ptr], ptr %155, i32 0, i32 0
  store ptr @_parameterization_String, ptr %156, align 8
  %157 = call ptr @llvm.invariant.start.p0(i64 1, ptr %155)
  %158 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %159 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %160 = alloca { ptr }, align 8
  %161 = getelementptr { ptr }, ptr %160, i32 0, i32 0
  store ptr %150, ptr %161, align 8
  %162 = call ptr @class_behavior_wrapper(ptr %159, ptr %160)
  call void %162(ptr %155, { ptr, i160 } %154)
  ret void
}

define void @Bard_take_aPtri32_bPtrf64({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3, { ptr, i160 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @Bard)
  %21 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %21, align 8
  %22 = getelementptr { ptr, i160 }, ptr %21, i32 0, i32 1
  %23 = load i32, ptr %22, align 4
  %24 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %4, ptr %24, align 8
  %25 = getelementptr { ptr, i160 }, ptr %24, i32 0, i32 1
  %26 = load double, ptr %25, align 8
  %27 = alloca i160, align 8
  %28 = alloca ptr, align 8
  store i32 %23, ptr %27, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %28, align 4
  %29 = load ptr, ptr %28, align 8
  %30 = insertvalue { ptr, i160 } undef, ptr %29, 0
  %31 = load i160, ptr %27, align 4
  %32 = insertvalue { ptr, i160 } %30, i160 %31, 1
  %33 = alloca [1 x ptr], align 8
  %34 = getelementptr [1 x ptr], ptr %33, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %34, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 1, ptr %33)
  %36 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %37 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %38 = alloca { ptr }, align 8
  %39 = getelementptr { ptr }, ptr %38, i32 0, i32 0
  store ptr %29, ptr %39, align 8
  %40 = call ptr @class_behavior_wrapper(ptr %37, ptr %38)
  call void %40(ptr %33, { ptr, i160 } %32)
  %41 = alloca i160, align 8
  %42 = alloca ptr, align 8
  store double %26, ptr %41, align 8
  store i64 ptrtoint (ptr @f64_typ to i64), ptr %42, align 4
  %43 = load ptr, ptr %42, align 8
  %44 = insertvalue { ptr, i160 } undef, ptr %43, 0
  %45 = load i160, ptr %41, align 4
  %46 = insertvalue { ptr, i160 } %44, i160 %45, 1
  %47 = alloca [1 x ptr], align 8
  %48 = getelementptr [1 x ptr], ptr %47, i32 0, i32 0
  store ptr @_parameterization_Ptrf64, ptr %48, align 8
  %49 = call ptr @llvm.invariant.start.p0(i64 1, ptr %47)
  %50 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %51 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %52 = alloca { ptr }, align 8
  %53 = getelementptr { ptr }, ptr %52, i32 0, i32 0
  store ptr %43, ptr %53, align 8
  %54 = call ptr @class_behavior_wrapper(ptr %51, ptr %52)
  call void %54(ptr %47, { ptr, i160 } %46)
  ret void
}

define void @Bard_take_aPtrf64_bPtrf64({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3, { ptr, i160 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @Bard)
  %21 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %21, align 8
  %22 = getelementptr { ptr, i160 }, ptr %21, i32 0, i32 1
  %23 = load double, ptr %22, align 8
  %24 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %4, ptr %24, align 8
  %25 = getelementptr { ptr, i160 }, ptr %24, i32 0, i32 1
  %26 = load double, ptr %25, align 8
  %27 = alloca i160, align 8
  %28 = alloca ptr, align 8
  store double %23, ptr %27, align 8
  store i64 ptrtoint (ptr @f64_typ to i64), ptr %28, align 4
  %29 = load ptr, ptr %28, align 8
  %30 = insertvalue { ptr, i160 } undef, ptr %29, 0
  %31 = load i160, ptr %27, align 4
  %32 = insertvalue { ptr, i160 } %30, i160 %31, 1
  %33 = alloca [1 x ptr], align 8
  %34 = getelementptr [1 x ptr], ptr %33, i32 0, i32 0
  store ptr @_parameterization_Ptrf64, ptr %34, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 1, ptr %33)
  %36 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %37 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %38 = alloca { ptr }, align 8
  %39 = getelementptr { ptr }, ptr %38, i32 0, i32 0
  store ptr %29, ptr %39, align 8
  %40 = call ptr @class_behavior_wrapper(ptr %37, ptr %38)
  call void %40(ptr %33, { ptr, i160 } %32)
  %41 = alloca i160, align 8
  %42 = alloca ptr, align 8
  store double %26, ptr %41, align 8
  store i64 ptrtoint (ptr @f64_typ to i64), ptr %42, align 4
  %43 = load ptr, ptr %42, align 8
  %44 = insertvalue { ptr, i160 } undef, ptr %43, 0
  %45 = load i160, ptr %41, align 4
  %46 = insertvalue { ptr, i160 } %44, i160 %45, 1
  %47 = alloca [1 x ptr], align 8
  %48 = getelementptr [1 x ptr], ptr %47, i32 0, i32 0
  store ptr @_parameterization_Ptrf64, ptr %48, align 8
  %49 = call ptr @llvm.invariant.start.p0(i64 1, ptr %47)
  %50 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %51 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %52 = alloca { ptr }, align 8
  %53 = getelementptr { ptr }, ptr %52, i32 0, i32 0
  store ptr %43, ptr %53, align 8
  %54 = call ptr @class_behavior_wrapper(ptr %51, ptr %52)
  call void %54(ptr %47, { ptr, i160 } %46)
  ret void
}

define void @Bard_take_aPtri32_bPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3, { ptr, i160 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @Bard)
  %21 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %21, align 8
  %22 = getelementptr { ptr, i160 }, ptr %21, i32 0, i32 1
  %23 = load i32, ptr %22, align 4
  %24 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %4, ptr %24, align 8
  %25 = getelementptr { ptr, i160 }, ptr %24, i32 0, i32 1
  %26 = load i32, ptr %25, align 4
  %27 = alloca i160, align 8
  %28 = alloca ptr, align 8
  store i32 %23, ptr %27, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %28, align 4
  %29 = load ptr, ptr %28, align 8
  %30 = insertvalue { ptr, i160 } undef, ptr %29, 0
  %31 = load i160, ptr %27, align 4
  %32 = insertvalue { ptr, i160 } %30, i160 %31, 1
  %33 = alloca [1 x ptr], align 8
  %34 = getelementptr [1 x ptr], ptr %33, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %34, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 1, ptr %33)
  %36 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %37 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %38 = alloca { ptr }, align 8
  %39 = getelementptr { ptr }, ptr %38, i32 0, i32 0
  store ptr %29, ptr %39, align 8
  %40 = call ptr @class_behavior_wrapper(ptr %37, ptr %38)
  call void %40(ptr %33, { ptr, i160 } %32)
  %41 = alloca i160, align 8
  %42 = alloca ptr, align 8
  store i32 %26, ptr %41, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %42, align 4
  %43 = load ptr, ptr %42, align 8
  %44 = insertvalue { ptr, i160 } undef, ptr %43, 0
  %45 = load i160, ptr %41, align 4
  %46 = insertvalue { ptr, i160 } %44, i160 %45, 1
  %47 = alloca [1 x ptr], align 8
  %48 = getelementptr [1 x ptr], ptr %47, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %48, align 8
  %49 = call ptr @llvm.invariant.start.p0(i64 1, ptr %47)
  %50 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %51 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %52 = alloca { ptr }, align 8
  %53 = getelementptr { ptr }, ptr %52, i32 0, i32 0
  store ptr %43, ptr %53, align 8
  %54 = call ptr @class_behavior_wrapper(ptr %51, ptr %52)
  call void %54(ptr %47, { ptr, i160 } %46)
  ret void
}

define ptr @Iterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [2 x ptr], ptr %4, i32 0, i32 1
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @report_exception({ ptr } %0) {
  %2 = alloca { ptr, ptr, ptr, i32 }, align 8
  %3 = alloca [0 x ptr], align 8
  %4 = alloca {}, align 8
  %5 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr } %0, ptr %5, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %6, i32 0, i32 4
  %8 = load { ptr, i160 }, ptr %7, align 8
  %9 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %8, ptr %9, align 8
  %10 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 0
  %11 = load ptr, ptr %10, align 8
  %12 = ptrtoint ptr %11 to i64
  %13 = icmp eq i64 %12, ptrtoint (ptr @nil_typ to i64)
  %14 = icmp eq i64 %12, 0
  %15 = or i1 %13, %14
  %16 = icmp eq i1 %15, false
  br i1 %16, label %17, label %._crit_edge

._crit_edge:                                      ; preds = %1
  br label %48

17:                                               ; preds = %1
  %18 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 0
  %19 = getelementptr { ptr, i160 }, ptr %2, i32 0, i32 0
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 1
  %22 = getelementptr { ptr, i160 }, ptr %2, i32 0, i32 1
  %23 = load i160, ptr %21, align 4
  store i160 %23, ptr %22, align 4
  call void @set_offset(ptr %2, ptr @Exception)
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %25 = load ptr, ptr %24, align 8
  %26 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %25, 0
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = insertvalue { ptr, ptr, ptr, i32 } %26, ptr %28, 1
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %31 = load ptr, ptr %30, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } %29, ptr %31, 2
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %34 = load i32, ptr %33, align 4
  %35 = insertvalue { ptr, ptr, ptr, i32 } %32, i32 %34, 3
  %36 = call ptr @llvm.invariant.start.p0(i64 0, ptr %3)
  %37 = call ptr @llvm.invariant.start.p0(i64 104, ptr %25)
  %38 = getelementptr ptr, ptr %25, i32 %34
  %39 = getelementptr ptr, ptr %38, i32 6
  %40 = load ptr, ptr %39, align 8
  %41 = call ptr @behavior_wrapper(ptr %40, { ptr, ptr, ptr, i32 } %35, ptr %4)
  call void %41({ ptr, ptr, ptr, i32 } %35, { ptr, ptr, ptr, i32 } %35, ptr %3)
  %42 = getelementptr { ptr, i160 }, ptr %2, i32 0, i32 0
  %43 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 0
  %44 = load ptr, ptr %42, align 8
  store ptr %44, ptr %43, align 8
  %45 = getelementptr { ptr, i160 }, ptr %2, i32 0, i32 1
  %46 = getelementptr { ptr, i160 }, ptr %9, i32 0, i32 1
  %47 = load i160, ptr %45, align 4
  store i160 %47, ptr %46, align 4
  br label %48

48:                                               ; preds = %._crit_edge, %17
  ret void
}

define ptr @IntIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [2 x ptr], ptr %4, i32 0, i32 1
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @IntIterable_B_each_fFunctionPtri32_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [24 x ptr], ptr %15, i32 0, i32 11
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @IntIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [24 x ptr], ptr %26, i32 0, i32 12
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @IntIterable_B_all_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [24 x ptr], ptr %15, i32 0, i32 13
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @IntIterable_B_any_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [24 x ptr], ptr %15, i32 0, i32 14
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @IntIterable_B_map_fFunctionPtri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [24 x ptr], ptr %15, i32 0, i32 15
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @IntIterable_B_filter_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [24 x ptr], ptr %15, i32 0, i32 16
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @IntIterable_B_chain_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [24 x ptr], ptr %15, i32 0, i32 17
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @IntIterable_B_interleave_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [24 x ptr], ptr %15, i32 0, i32 18
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @IntIterable_B_zip_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [24 x ptr], ptr %15, i32 0, i32 19
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @IntIterable_B_product_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [24 x ptr], ptr %15, i32 0, i32 20
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @IntIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [24 x ptr], ptr %4, i32 0, i32 21
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @IntTupleIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [4 x ptr], ptr %4, i32 0, i32 1
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @IntTupleIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [2 x ptr], ptr %4, i32 0, i32 1
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Iterator2_field_Iterator2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @Iterator2_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [3 x ptr], ptr %4, i32 0, i32 2
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Iterable2_field_Iterable2_0(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @Iterable2_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [23 x ptr], ptr %4, i32 0, i32 12
  %6 = getelementptr ptr, ptr %5, i32 9
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Iterable2_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [23 x ptr], ptr %15, i32 0, i32 13
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Iterable2_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 3084208142191802847, i64 ptrtoint (ptr @any_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [23 x ptr], ptr %26, i32 0, i32 14
  %28 = getelementptr ptr, ptr %27, i32 9
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @Iterable2_B_all_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [23 x ptr], ptr %15, i32 0, i32 15
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Iterable2_B_any_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [23 x ptr], ptr %15, i32 0, i32 16
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Iterable2_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [23 x ptr], ptr %15, i32 0, i32 17
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Iterable2_B_filter_fFunctionT_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [23 x ptr], ptr %15, i32 0, i32 18
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Iterable2_B_chain_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [23 x ptr], ptr %15, i32 0, i32 19
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Iterable2_B_interleave_otherIterable2T({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [23 x ptr], ptr %15, i32 0, i32 20
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Iterable2_B_zip_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [23 x ptr], ptr %15, i32 0, i32 21
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Iterable2_B_product_otherIterable2U({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 5693646204635713916, i64 ptrtoint (ptr @Iterable2 to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [23 x ptr], ptr %15, i32 0, i32 22
  %17 = getelementptr ptr, ptr %16, i32 9
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define void @number_taker({ ptr, i64 } %0) {
  %2 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 7))
  store ptr %3, ptr %2, align 8
  %4 = alloca { ptr }, align 8
  %5 = getelementptr { ptr }, ptr %2, i32 0, i32 0
  %6 = getelementptr { ptr }, ptr %4, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %9 = load ptr, ptr %4, align 8
  %10 = load [6 x i8], ptr @kqhky_number, align 1
  store [6 x i8] %10, ptr %9, align 1
  %11 = alloca [1 x ptr], align 8
  store ptr @String, ptr %11, align 8
  %12 = load ptr, ptr %11, align 8
  %13 = getelementptr ptr, ptr %12, i32 6
  %14 = load ptr, ptr %13, align 8
  %15 = call { i64, i64 } @size_wrapper(ptr %14, ptr %11)
  %16 = extractvalue { i64, i64 } %15, 0
  %17 = call ptr @bump_malloc(i64 %16)
  %18 = alloca { ptr, ptr, ptr, i32 }, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  store ptr @String, ptr %18, align 8
  store ptr %17, ptr %19, align 8
  store i32 9, ptr %20, align 4
  %21 = call ptr @llvm.invariant.start.p0(i64 16, ptr %18)
  %22 = getelementptr { ptr }, ptr %4, i32 0, i32 0
  %23 = load ptr, ptr %22, align 8
  %24 = insertvalue { ptr } undef, ptr %23, 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %26, 0
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  %29 = load ptr, ptr %28, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } %27, ptr %29, 1
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 2
  %32 = load ptr, ptr %31, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %32, 2
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  %35 = load i32, ptr %34, align 4
  %36 = insertvalue { ptr, ptr, ptr, i32 } %33, i32 %35, 3
  %37 = alloca [3 x ptr], align 8
  %38 = getelementptr [3 x ptr], ptr %37, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %38, align 8
  %39 = getelementptr [3 x ptr], ptr %37, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %39, align 8
  %40 = getelementptr [3 x ptr], ptr %37, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %40, align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 9, ptr %37)
  %42 = call ptr @llvm.invariant.start.p0(i64 280, ptr %26)
  %43 = getelementptr ptr, ptr %26, i32 %35
  %44 = getelementptr ptr, ptr %43, i32 4
  %45 = load ptr, ptr %44, align 8
  %46 = alloca { ptr, ptr, ptr }, align 8
  %47 = getelementptr { ptr, ptr, ptr }, ptr %46, i32 0, i32 0
  store ptr @buffer_typ, ptr %47, align 8
  %48 = getelementptr { ptr, ptr, ptr }, ptr %46, i32 0, i32 1
  store ptr @i32_typ, ptr %48, align 8
  %49 = getelementptr { ptr, ptr, ptr }, ptr %46, i32 0, i32 2
  store ptr @i32_typ, ptr %49, align 8
  %50 = call ptr @behavior_wrapper(ptr %45, { ptr, ptr, ptr, i32 } %36, ptr %46)
  call void %50({ ptr, ptr, ptr, i32 } %36, { ptr, ptr, ptr, i32 } %36, ptr %37, { ptr } %24, i32 6, i32 7)
  %51 = load { ptr, ptr, ptr, i32 }, ptr %18, align 8
  %52 = call i32 (ptr, ...) @printf(ptr @i32_string, { ptr, ptr, ptr, i32 } %51)
  ret void
}

define i32 @early_return_in_else() {
  %1 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store i32 1, ptr %1, align 4
  %2 = load i32, ptr %1, align 4
  ret i32 %2
}

define void @make_em_speak({ ptr, ptr, ptr, i32 } %0) {
  %2 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %2, align 8
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %2)
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = load i32, ptr %14, align 4
  store i32 %16, ptr %15, align 4
  call void @set_offset(ptr %4, ptr @Animal)
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %18, 0
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %21, 1
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %24 = load ptr, ptr %23, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %24, 2
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %27 = load i32, ptr %26, align 4
  %28 = insertvalue { ptr, ptr, ptr, i32 } %25, i32 %27, 3
  %29 = alloca [0 x ptr], align 8
  %30 = call ptr @llvm.invariant.start.p0(i64 0, ptr %29)
  %31 = call ptr @llvm.invariant.start.p0(i64 104, ptr %18)
  %32 = getelementptr ptr, ptr %18, i32 %27
  %33 = getelementptr ptr, ptr %32, i32 4
  %34 = load ptr, ptr %33, align 8
  %35 = alloca {}, align 8
  %36 = call ptr @behavior_wrapper(ptr %34, { ptr, ptr, ptr, i32 } %28, ptr %35)
  call void %36({ ptr, ptr, ptr, i32 } %28, { ptr, ptr, ptr, i32 } %28, ptr %29)
  ret void
}

define i32 @fibonacci(i32 %0) {
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp slt i32 %0, 2
  br i1 %2, label %3, label %4

3:                                                ; preds = %1
  store i32 %0, ptr %.reg2mem3, align 4
  br label %10

4:                                                ; preds = %1
  %5 = sub i32 %0, 2
  %6 = call i32 @fibonacci(i32 %5)
  %7 = sub i32 %0, 1
  %8 = call i32 @fibonacci(i32 %7)
  %9 = add i32 %6, %8
  store i32 %9, ptr %.reg2mem1, align 4
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem3, align 4
  br label %10

10:                                               ; preds = %4, %3
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  store i32 %.reload4, ptr %.reg2mem, align 4
  br label %11

11:                                               ; preds = %10
  %.reload = load i32, ptr %.reg2mem, align 4
  ret i32 %.reload
}

define i32 @factorial(i32 %0) {
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp slt i32 %0, 2
  br i1 %2, label %3, label %4

3:                                                ; preds = %1
  store i32 1, ptr %.reg2mem3, align 4
  br label %8

4:                                                ; preds = %1
  %5 = sub i32 %0, 1
  %6 = call i32 @factorial(i32 %5)
  %7 = mul i32 %0, %6
  store i32 %7, ptr %.reg2mem1, align 4
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem3, align 4
  br label %8

8:                                                ; preds = %4, %3
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  store i32 %.reload4, ptr %.reg2mem, align 4
  br label %9

9:                                                ; preds = %8
  %.reload = load i32, ptr %.reg2mem, align 4
  ret i32 %.reload
}

define void @throw() {
  %1 = alloca [1 x ptr], align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store ptr @Exception, ptr %1, align 8
  %2 = load ptr, ptr %1, align 8
  %3 = getelementptr ptr, ptr %2, i32 6
  %4 = load ptr, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr %4, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  %7 = call ptr @bump_malloc(i64 %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  store ptr @Exception, ptr %8, align 8
  store ptr %7, ptr %9, align 8
  store i32 9, ptr %10, align 4
  %11 = call ptr @llvm.invariant.start.p0(i64 16, ptr %8)
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %13, 0
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = insertvalue { ptr, ptr, ptr, i32 } %14, ptr %16, 1
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %19 = load ptr, ptr %18, align 8
  %20 = insertvalue { ptr, ptr, ptr, i32 } %17, ptr %19, 2
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %22 = load i32, ptr %21, align 4
  %23 = insertvalue { ptr, ptr, ptr, i32 } %20, i32 %22, 3
  %24 = alloca [0 x ptr], align 8
  %25 = call ptr @llvm.invariant.start.p0(i64 0, ptr %24)
  %26 = call ptr @llvm.invariant.start.p0(i64 104, ptr %13)
  %27 = getelementptr ptr, ptr %13, i32 %22
  %28 = getelementptr ptr, ptr %27, i32 4
  %29 = load ptr, ptr %28, align 8
  %30 = alloca {}, align 8
  %31 = call ptr @behavior_wrapper(ptr %29, { ptr, ptr, ptr, i32 } %23, ptr %30)
  call void %31({ ptr, ptr, ptr, i32 } %23, { ptr, ptr, ptr, i32 } %23, ptr %24)
  %32 = alloca ptr, align 8
  %33 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 11))
  store ptr %33, ptr %32, align 8
  %34 = alloca { ptr }, align 8
  %35 = getelementptr { ptr }, ptr %32, i32 0, i32 0
  %36 = getelementptr { ptr }, ptr %34, i32 0, i32 0
  %37 = load ptr, ptr %35, align 8
  store ptr %37, ptr %36, align 8
  %38 = call ptr @llvm.invariant.start.p0(i64 16, ptr %34)
  %39 = load ptr, ptr %34, align 8
  %40 = load [10 x i8], ptr @lckkh_testsmini, align 1
  store [10 x i8] %40, ptr %39, align 1
  %41 = alloca [1 x ptr], align 8
  store ptr @String, ptr %41, align 8
  %42 = load ptr, ptr %41, align 8
  %43 = getelementptr ptr, ptr %42, i32 6
  %44 = load ptr, ptr %43, align 8
  %45 = call { i64, i64 } @size_wrapper(ptr %44, ptr %41)
  %46 = extractvalue { i64, i64 } %45, 0
  %47 = call ptr @bump_malloc(i64 %46)
  %48 = alloca { ptr, ptr, ptr, i32 }, align 8
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 1
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 3
  store ptr @String, ptr %48, align 8
  store ptr %47, ptr %49, align 8
  store i32 9, ptr %50, align 4
  %51 = call ptr @llvm.invariant.start.p0(i64 16, ptr %48)
  %52 = getelementptr { ptr }, ptr %34, i32 0, i32 0
  %53 = load ptr, ptr %52, align 8
  %54 = insertvalue { ptr } undef, ptr %53, 0
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 0
  %56 = load ptr, ptr %55, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %56, 0
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } %57, ptr %59, 1
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 2
  %62 = load ptr, ptr %61, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr %62, 2
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 3
  %65 = load i32, ptr %64, align 4
  %66 = insertvalue { ptr, ptr, ptr, i32 } %63, i32 %65, 3
  %67 = alloca [3 x ptr], align 8
  %68 = getelementptr [3 x ptr], ptr %67, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %68, align 8
  %69 = getelementptr [3 x ptr], ptr %67, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %69, align 8
  %70 = getelementptr [3 x ptr], ptr %67, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %70, align 8
  %71 = call ptr @llvm.invariant.start.p0(i64 9, ptr %67)
  %72 = call ptr @llvm.invariant.start.p0(i64 280, ptr %56)
  %73 = getelementptr ptr, ptr %56, i32 %65
  %74 = getelementptr ptr, ptr %73, i32 4
  %75 = load ptr, ptr %74, align 8
  %76 = alloca { ptr, ptr, ptr }, align 8
  %77 = getelementptr { ptr, ptr, ptr }, ptr %76, i32 0, i32 0
  store ptr @buffer_typ, ptr %77, align 8
  %78 = getelementptr { ptr, ptr, ptr }, ptr %76, i32 0, i32 1
  store ptr @i32_typ, ptr %78, align 8
  %79 = getelementptr { ptr, ptr, ptr }, ptr %76, i32 0, i32 2
  store ptr @i32_typ, ptr %79, align 8
  %80 = call ptr @behavior_wrapper(ptr %75, { ptr, ptr, ptr, i32 } %66, ptr %76)
  call void %80({ ptr, ptr, ptr, i32 } %66, { ptr, ptr, ptr, i32 } %66, ptr %67, { ptr } %54, i32 10, i32 11)
  %81 = alloca { ptr, ptr, ptr, i32 }, align 8
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 0
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 0
  %84 = load ptr, ptr %82, align 8
  store ptr %84, ptr %83, align 8
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 1
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 1
  %87 = load ptr, ptr %85, align 8
  store ptr %87, ptr %86, align 8
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 2
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 2
  %90 = load ptr, ptr %88, align 8
  store ptr %90, ptr %89, align 8
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 3
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 3
  %93 = load i32, ptr %91, align 4
  store i32 %93, ptr %92, align 4
  call void @set_offset(ptr %81, ptr @String)
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 0
  %95 = load ptr, ptr %94, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %95, 0
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 1
  %98 = load ptr, ptr %97, align 8
  %99 = insertvalue { ptr, ptr, ptr, i32 } %96, ptr %98, 1
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 2
  %101 = load ptr, ptr %100, align 8
  %102 = insertvalue { ptr, ptr, ptr, i32 } %99, ptr %101, 2
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 3
  %104 = load i32, ptr %103, align 4
  %105 = insertvalue { ptr, ptr, ptr, i32 } %102, i32 %104, 3
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %107 = load ptr, ptr %106, align 8
  %108 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %107, 0
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %110 = load ptr, ptr %109, align 8
  %111 = insertvalue { ptr, ptr, ptr, i32 } %108, ptr %110, 1
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %113 = load ptr, ptr %112, align 8
  %114 = insertvalue { ptr, ptr, ptr, i32 } %111, ptr %113, 2
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %116 = load i32, ptr %115, align 4
  %117 = insertvalue { ptr, ptr, ptr, i32 } %114, i32 %116, 3
  %118 = alloca [2 x ptr], align 8
  %119 = getelementptr [2 x ptr], ptr %118, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %119, align 8
  %120 = getelementptr [2 x ptr], ptr %118, i32 0, i32 1
  store ptr @_parameterization_String, ptr %120, align 8
  %121 = call ptr @llvm.invariant.start.p0(i64 4, ptr %118)
  %122 = call ptr @llvm.invariant.start.p0(i64 104, ptr %107)
  %123 = getelementptr ptr, ptr %107, i32 %116
  %124 = getelementptr ptr, ptr %123, i32 5
  %125 = load ptr, ptr %124, align 8
  %126 = alloca { ptr, ptr }, align 8
  %127 = getelementptr { ptr, ptr }, ptr %126, i32 0, i32 0
  store ptr @i32_typ, ptr %127, align 8
  %128 = getelementptr { ptr, ptr }, ptr %126, i32 0, i32 1
  store ptr %95, ptr %128, align 8
  %129 = call ptr @behavior_wrapper(ptr %125, { ptr, ptr, ptr, i32 } %117, ptr %126)
  call void %129({ ptr, ptr, ptr, i32 } %117, { ptr, ptr, ptr, i32 } %117, ptr %118, i32 1205, { ptr, ptr, ptr, i32 } %105)
  %130 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 0
  %131 = load ptr, ptr %130, align 8
  %132 = insertvalue { ptr, i160 } undef, ptr %131, 0
  %133 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 1
  %134 = load i160, ptr %133, align 4
  %135 = insertvalue { ptr, i160 } %132, i160 %134, 1
  %136 = call ptr @get_current_coroutine()
  %137 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %136, i32 0, i32 4
  store { ptr, i160 } %135, ptr %137, align 8
  call void @coroutine_yield(ptr %136)
  ret void
}

define void @print88() {
  %1 = alloca i160, align 8
  %2 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store i32 88, ptr %1, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %2, align 4
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, i160 } undef, ptr %3, 0
  %5 = load i160, ptr %1, align 4
  %6 = insertvalue { ptr, i160 } %4, i160 %5, 1
  %7 = alloca [1 x ptr], align 8
  %8 = getelementptr [1 x ptr], ptr %7, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %8, align 8
  %9 = call ptr @llvm.invariant.start.p0(i64 1, ptr %7)
  %10 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %11 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %12 = alloca { ptr }, align 8
  %13 = getelementptr { ptr }, ptr %12, i32 0, i32 0
  store ptr %3, ptr %13, align 8
  %14 = call ptr @class_behavior_wrapper(ptr %11, ptr %12)
  call void %14(ptr %7, { ptr, i160 } %6)
  %15 = call ptr @get_current_coroutine()
  call void @coroutine_yield(ptr %15)
  %16 = alloca i160, align 8
  %17 = alloca ptr, align 8
  store i32 90, ptr %16, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %17, align 4
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, i160 } undef, ptr %18, 0
  %20 = load i160, ptr %16, align 4
  %21 = insertvalue { ptr, i160 } %19, i160 %20, 1
  %22 = alloca [1 x ptr], align 8
  %23 = getelementptr [1 x ptr], ptr %22, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %23, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 1, ptr %22)
  %25 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %26 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %27 = alloca { ptr }, align 8
  %28 = getelementptr { ptr }, ptr %27, i32 0, i32 0
  store ptr %18, ptr %28, align 8
  %29 = call ptr @class_behavior_wrapper(ptr %26, ptr %27)
  call void %29(ptr %22, { ptr, i160 } %21)
  ret void
}

define void @coroutine_fjtnnnlntu_passer(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  call void %2()
  ret void
}

define void @coroutine_fjtnnnlntu_buffer_filler(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret void
}

define void @grabo() {
  %1 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 4))
  store ptr %2, ptr %1, align 8
  %3 = alloca { ptr }, align 8
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = getelementptr { ptr }, ptr %3, i32 0, i32 0
  %6 = load ptr, ptr %4, align 8
  store ptr %6, ptr %5, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %3)
  %8 = load ptr, ptr %3, align 8
  %9 = load [3 x i8], ptr @ihxbq_one, align 1
  store [3 x i8] %9, ptr %8, align 1
  %10 = alloca [1 x ptr], align 8
  store ptr @String, ptr %10, align 8
  %11 = load ptr, ptr %10, align 8
  %12 = getelementptr ptr, ptr %11, i32 6
  %13 = load ptr, ptr %12, align 8
  %14 = call { i64, i64 } @size_wrapper(ptr %13, ptr %10)
  %15 = extractvalue { i64, i64 } %14, 0
  %16 = call ptr @bump_malloc(i64 %15)
  %17 = alloca { ptr, ptr, ptr, i32 }, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  store ptr @String, ptr %17, align 8
  store ptr %16, ptr %18, align 8
  store i32 9, ptr %19, align 4
  %20 = call ptr @llvm.invariant.start.p0(i64 16, ptr %17)
  %21 = getelementptr { ptr }, ptr %3, i32 0, i32 0
  %22 = load ptr, ptr %21, align 8
  %23 = insertvalue { ptr } undef, ptr %22, 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 0
  %25 = load ptr, ptr %24, align 8
  %26 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %25, 0
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = insertvalue { ptr, ptr, ptr, i32 } %26, ptr %28, 1
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 2
  %31 = load ptr, ptr %30, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } %29, ptr %31, 2
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  %34 = load i32, ptr %33, align 4
  %35 = insertvalue { ptr, ptr, ptr, i32 } %32, i32 %34, 3
  %36 = alloca [3 x ptr], align 8
  %37 = getelementptr [3 x ptr], ptr %36, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %37, align 8
  %38 = getelementptr [3 x ptr], ptr %36, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %38, align 8
  %39 = getelementptr [3 x ptr], ptr %36, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %39, align 8
  %40 = call ptr @llvm.invariant.start.p0(i64 9, ptr %36)
  %41 = call ptr @llvm.invariant.start.p0(i64 280, ptr %25)
  %42 = getelementptr ptr, ptr %25, i32 %34
  %43 = getelementptr ptr, ptr %42, i32 4
  %44 = load ptr, ptr %43, align 8
  %45 = alloca { ptr, ptr, ptr }, align 8
  %46 = getelementptr { ptr, ptr, ptr }, ptr %45, i32 0, i32 0
  store ptr @buffer_typ, ptr %46, align 8
  %47 = getelementptr { ptr, ptr, ptr }, ptr %45, i32 0, i32 1
  store ptr @i32_typ, ptr %47, align 8
  %48 = getelementptr { ptr, ptr, ptr }, ptr %45, i32 0, i32 2
  store ptr @i32_typ, ptr %48, align 8
  %49 = call ptr @behavior_wrapper(ptr %44, { ptr, ptr, ptr, i32 } %35, ptr %45)
  call void %49({ ptr, ptr, ptr, i32 } %35, { ptr, ptr, ptr, i32 } %35, ptr %36, { ptr } %23, i32 3, i32 4)
  %50 = getelementptr { ptr, i160 }, ptr %17, i32 0, i32 0
  %51 = load ptr, ptr %50, align 8
  %52 = insertvalue { ptr, i160 } undef, ptr %51, 0
  %53 = getelementptr { ptr, i160 }, ptr %17, i32 0, i32 1
  %54 = load i160, ptr %53, align 4
  %55 = insertvalue { ptr, i160 } %52, i160 %54, 1
  %56 = alloca [1 x ptr], align 8
  %57 = getelementptr [1 x ptr], ptr %56, i32 0, i32 0
  store ptr @_parameterization_String, ptr %57, align 8
  %58 = call ptr @llvm.invariant.start.p0(i64 1, ptr %56)
  %59 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %60 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %61 = alloca { ptr }, align 8
  %62 = getelementptr { ptr }, ptr %61, i32 0, i32 0
  store ptr %51, ptr %62, align 8
  %63 = call ptr @class_behavior_wrapper(ptr %60, ptr %61)
  call void %63(ptr %56, { ptr, i160 } %55)
  ret void
}

define i32 @_functionliteral_dkhwrqqsxh(i32 %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = add i32 %0, %1
  ret i32 %3
}

define i32 @_functionliteral_yoimaxtxbn(i32 %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = mul i32 %0, 2
  ret i32 %2
}

define i32 @_functionliteral_cfqtdswlvs() {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret i32 5
}

define void @_functionliteral_gtkwgeihcc(i32 %0) {
  %2 = alloca i160, align 8
  %3 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store i32 %0, ptr %2, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %3, align 4
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, i160 } undef, ptr %4, 0
  %6 = load i160, ptr %2, align 4
  %7 = insertvalue { ptr, i160 } %5, i160 %6, 1
  %8 = alloca [1 x ptr], align 8
  %9 = getelementptr [1 x ptr], ptr %8, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %9, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 1, ptr %8)
  %11 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %12 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %13 = alloca { ptr }, align 8
  %14 = getelementptr { ptr }, ptr %13, i32 0, i32 0
  store ptr %4, ptr %14, align 8
  %15 = call ptr @class_behavior_wrapper(ptr %12, ptr %13)
  call void %15(ptr %8, { ptr, i160 } %7)
  ret void
}

define i8 @i32toi8(i32 %0) {
  %.reg2mem = alloca i8, align 1
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i8, align 1
  %.reg2mem5 = alloca i32, align 4
  %.reg2mem7 = alloca i32, align 4
  %.reg2mem9 = alloca i8, align 1
  %.reg2mem11 = alloca i1, align 1
  %.reg2mem14 = alloca i8, align 1
  %.reg2mem18 = alloca i32, align 4
  %.reg2mem21 = alloca i8, align 1
  %.reg2mem23 = alloca i32, align 4
  %.reg2mem25 = alloca i8, align 1
  %.reg2mem27 = alloca i32, align 4
  %.reg2mem29 = alloca i8, align 1
  %.reg2mem31 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store i8 0, ptr %.reg2mem29, align 1
  store i32 0, ptr %.reg2mem31, align 4
  br label %2

2:                                                ; preds = %10, %1
  %.reload32 = load i32, ptr %.reg2mem31, align 4
  %.reload30 = load i8, ptr %.reg2mem29, align 1
  store i32 %.reload32, ptr %.reg2mem18, align 4
  store i8 %.reload30, ptr %.reg2mem14, align 1
  %.reload20 = load i32, ptr %.reg2mem18, align 4
  %3 = icmp slt i32 %.reload20, %0
  store i1 %3, ptr %.reg2mem11, align 1
  %.reload13 = load i1, ptr %.reg2mem11, align 1
  br i1 %.reload13, label %4, label %7

4:                                                ; preds = %2
  %.reload17 = load i8, ptr %.reg2mem14, align 1
  %5 = add i8 %.reload17, 1
  store i8 %5, ptr %.reg2mem9, align 1
  %.reload19 = load i32, ptr %.reg2mem18, align 4
  %6 = add i32 %.reload19, 1
  store i32 %6, ptr %.reg2mem7, align 4
  %.reload8 = load i32, ptr %.reg2mem7, align 4
  %.reload10 = load i8, ptr %.reg2mem9, align 1
  store i8 %.reload10, ptr %.reg2mem25, align 1
  store i32 %.reload8, ptr %.reg2mem27, align 4
  br label %8

7:                                                ; preds = %2
  store i8 poison, ptr %.reg2mem25, align 1
  store i32 poison, ptr %.reg2mem27, align 4
  br label %8

8:                                                ; preds = %7, %4
  %.reload28 = load i32, ptr %.reg2mem27, align 4
  %.reload26 = load i8, ptr %.reg2mem25, align 1
  store i32 %.reload28, ptr %.reg2mem5, align 4
  store i8 %.reload26, ptr %.reg2mem3, align 1
  br label %9

9:                                                ; preds = %8
  %.reload4 = load i8, ptr %.reg2mem3, align 1
  %.reload6 = load i32, ptr %.reg2mem5, align 4
  %.reload12 = load i1, ptr %.reg2mem11, align 1
  %.reload16 = load i8, ptr %.reg2mem14, align 1
  store i8 %.reload4, ptr %.reg2mem21, align 1
  store i32 %.reload6, ptr %.reg2mem23, align 4
  br i1 %.reload12, label %10, label %11

10:                                               ; preds = %9
  %.reload24 = load i32, ptr %.reg2mem23, align 4
  %.reload22 = load i8, ptr %.reg2mem21, align 1
  store i32 %.reload24, ptr %.reg2mem1, align 4
  store i8 %.reload22, ptr %.reg2mem, align 1
  %.reload = load i8, ptr %.reg2mem, align 1
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i8 %.reload, ptr %.reg2mem29, align 1
  store i32 %.reload2, ptr %.reg2mem31, align 4
  br label %2

11:                                               ; preds = %9
  %.reload15 = load i8, ptr %.reg2mem14, align 1
  ret i8 %.reload15
}

define { ptr, ptr, ptr, i32 } @read_file({ ptr, ptr, ptr, i32 } %0) {
  %2 = alloca [1 x ptr], align 8
  %3 = alloca { ptr }, align 8
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem5 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %7, align 8
  %8 = call ptr @llvm.invariant.start.p0(i64 16, ptr %7)
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  call void @set_offset(ptr %9, ptr @String)
  %22 = alloca ptr, align 8
  %23 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64))
  store ptr %23, ptr %22, align 8
  %24 = alloca { ptr }, align 8
  %25 = getelementptr { ptr }, ptr %22, i32 0, i32 0
  %26 = getelementptr { ptr }, ptr %24, i32 0, i32 0
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = call ptr @llvm.invariant.start.p0(i64 16, ptr %24)
  %29 = load ptr, ptr %24, align 8
  %30 = load [0 x i8], ptr @domjs_, align 1
  store [0 x i8] %30, ptr %29, align 1
  %31 = alloca [1 x ptr], align 8
  store ptr @String, ptr %31, align 8
  %32 = load ptr, ptr %31, align 8
  %33 = getelementptr ptr, ptr %32, i32 6
  %34 = load ptr, ptr %33, align 8
  %35 = call { i64, i64 } @size_wrapper(ptr %34, ptr %31)
  %36 = extractvalue { i64, i64 } %35, 0
  %37 = call ptr @bump_malloc(i64 %36)
  %38 = alloca { ptr, ptr, ptr, i32 }, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  store ptr @String, ptr %38, align 8
  store ptr %37, ptr %39, align 8
  store i32 9, ptr %40, align 4
  %41 = call ptr @llvm.invariant.start.p0(i64 16, ptr %38)
  %42 = getelementptr { ptr }, ptr %24, i32 0, i32 0
  %43 = load ptr, ptr %42, align 8
  %44 = insertvalue { ptr } undef, ptr %43, 0
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 0
  %46 = load ptr, ptr %45, align 8
  %47 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %46, 0
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } %47, ptr %49, 1
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 2
  %52 = load ptr, ptr %51, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } %50, ptr %52, 2
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %55 = load i32, ptr %54, align 4
  %56 = insertvalue { ptr, ptr, ptr, i32 } %53, i32 %55, 3
  %57 = alloca [3 x ptr], align 8
  %58 = getelementptr [3 x ptr], ptr %57, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %58, align 8
  %59 = getelementptr [3 x ptr], ptr %57, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %59, align 8
  %60 = getelementptr [3 x ptr], ptr %57, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %60, align 8
  %61 = call ptr @llvm.invariant.start.p0(i64 9, ptr %57)
  %62 = call ptr @llvm.invariant.start.p0(i64 280, ptr %46)
  %63 = getelementptr ptr, ptr %46, i32 %55
  %64 = getelementptr ptr, ptr %63, i32 4
  %65 = load ptr, ptr %64, align 8
  %66 = alloca { ptr, ptr, ptr }, align 8
  %67 = getelementptr { ptr, ptr, ptr }, ptr %66, i32 0, i32 0
  store ptr @buffer_typ, ptr %67, align 8
  %68 = getelementptr { ptr, ptr, ptr }, ptr %66, i32 0, i32 1
  store ptr @i32_typ, ptr %68, align 8
  %69 = getelementptr { ptr, ptr, ptr }, ptr %66, i32 0, i32 2
  store ptr @i32_typ, ptr %69, align 8
  %70 = call ptr @behavior_wrapper(ptr %65, { ptr, ptr, ptr, i32 } %56, ptr %66)
  call void %70({ ptr, ptr, ptr, i32 } %56, { ptr, ptr, ptr, i32 } %56, ptr %57, { ptr } %44, i32 0, i32 1)
  %71 = alloca { ptr, ptr, ptr, i32 }, align 8
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 0
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 0
  %74 = load ptr, ptr %72, align 8
  store ptr %74, ptr %73, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 1
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 2
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 2
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 3
  %83 = load i32, ptr %81, align 4
  store i32 %83, ptr %82, align 4
  call void @set_offset(ptr %71, ptr @String)
  %84 = alloca { ptr, ptr, ptr, i32 }, align 8
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 0
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %84, i32 0, i32 0
  %87 = load ptr, ptr %85, align 8
  store ptr %87, ptr %86, align 8
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 1
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %84, i32 0, i32 1
  %90 = load ptr, ptr %88, align 8
  store ptr %90, ptr %89, align 8
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 2
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %84, i32 0, i32 2
  %93 = load ptr, ptr %91, align 8
  store ptr %93, ptr %92, align 8
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 3
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %84, i32 0, i32 3
  %96 = load i32, ptr %94, align 4
  store i32 %96, ptr %95, align 4
  %97 = call ptr @llvm.invariant.start.p0(i64 16, ptr %84)
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %99 = load ptr, ptr %98, align 8
  %100 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %99, 0
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %102 = load ptr, ptr %101, align 8
  %103 = insertvalue { ptr, ptr, ptr, i32 } %100, ptr %102, 1
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %105 = load ptr, ptr %104, align 8
  %106 = insertvalue { ptr, ptr, ptr, i32 } %103, ptr %105, 2
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %108 = load i32, ptr %107, align 4
  %109 = insertvalue { ptr, ptr, ptr, i32 } %106, i32 %108, 3
  %110 = alloca [0 x ptr], align 8
  %111 = call ptr @llvm.invariant.start.p0(i64 0, ptr %110)
  %112 = call ptr @llvm.invariant.start.p0(i64 280, ptr %99)
  %113 = getelementptr ptr, ptr %99, i32 %108
  %114 = getelementptr ptr, ptr %113, i32 14
  %115 = load ptr, ptr %114, align 8
  %116 = alloca {}, align 8
  %117 = call ptr @behavior_wrapper(ptr %115, { ptr, ptr, ptr, i32 } %109, ptr %116)
  %118 = call { ptr } %117({ ptr, ptr, ptr, i32 } %109, { ptr, ptr, ptr, i32 } %109, ptr %110)
  %119 = alloca ptr, align 8
  store { ptr } %118, ptr %119, align 8
  %120 = alloca ptr, align 8
  %121 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 2))
  store ptr %121, ptr %120, align 8
  %122 = alloca { ptr }, align 8
  %123 = getelementptr { ptr }, ptr %120, i32 0, i32 0
  %124 = getelementptr { ptr }, ptr %122, i32 0, i32 0
  %125 = load ptr, ptr %123, align 8
  store ptr %125, ptr %124, align 8
  %126 = call ptr @llvm.invariant.start.p0(i64 16, ptr %122)
  %127 = load ptr, ptr %122, align 8
  %128 = load [1 x i8], ptr @dlyex_r, align 1
  store [1 x i8] %128, ptr %127, align 1
  %129 = alloca [1 x ptr], align 8
  store ptr @String, ptr %129, align 8
  %130 = load ptr, ptr %129, align 8
  %131 = getelementptr ptr, ptr %130, i32 6
  %132 = load ptr, ptr %131, align 8
  %133 = call { i64, i64 } @size_wrapper(ptr %132, ptr %129)
  %134 = extractvalue { i64, i64 } %133, 0
  %135 = call ptr @bump_malloc(i64 %134)
  %136 = alloca { ptr, ptr, ptr, i32 }, align 8
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %136, i32 0, i32 1
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %136, i32 0, i32 3
  store ptr @String, ptr %136, align 8
  store ptr %135, ptr %137, align 8
  store i32 9, ptr %138, align 4
  %139 = call ptr @llvm.invariant.start.p0(i64 16, ptr %136)
  %140 = getelementptr { ptr }, ptr %122, i32 0, i32 0
  %141 = load ptr, ptr %140, align 8
  %142 = insertvalue { ptr } undef, ptr %141, 0
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %136, i32 0, i32 0
  %144 = load ptr, ptr %143, align 8
  %145 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %144, 0
  %146 = getelementptr { ptr, ptr, ptr, i32 }, ptr %136, i32 0, i32 1
  %147 = load ptr, ptr %146, align 8
  %148 = insertvalue { ptr, ptr, ptr, i32 } %145, ptr %147, 1
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %136, i32 0, i32 2
  %150 = load ptr, ptr %149, align 8
  %151 = insertvalue { ptr, ptr, ptr, i32 } %148, ptr %150, 2
  %152 = getelementptr { ptr, ptr, ptr, i32 }, ptr %136, i32 0, i32 3
  %153 = load i32, ptr %152, align 4
  %154 = insertvalue { ptr, ptr, ptr, i32 } %151, i32 %153, 3
  %155 = alloca [3 x ptr], align 8
  %156 = getelementptr [3 x ptr], ptr %155, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %156, align 8
  %157 = getelementptr [3 x ptr], ptr %155, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %157, align 8
  %158 = getelementptr [3 x ptr], ptr %155, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %158, align 8
  %159 = call ptr @llvm.invariant.start.p0(i64 9, ptr %155)
  %160 = call ptr @llvm.invariant.start.p0(i64 280, ptr %144)
  %161 = getelementptr ptr, ptr %144, i32 %153
  %162 = getelementptr ptr, ptr %161, i32 4
  %163 = load ptr, ptr %162, align 8
  %164 = alloca { ptr, ptr, ptr }, align 8
  %165 = getelementptr { ptr, ptr, ptr }, ptr %164, i32 0, i32 0
  store ptr @buffer_typ, ptr %165, align 8
  %166 = getelementptr { ptr, ptr, ptr }, ptr %164, i32 0, i32 1
  store ptr @i32_typ, ptr %166, align 8
  %167 = getelementptr { ptr, ptr, ptr }, ptr %164, i32 0, i32 2
  store ptr @i32_typ, ptr %167, align 8
  %168 = call ptr @behavior_wrapper(ptr %163, { ptr, ptr, ptr, i32 } %154, ptr %164)
  call void %168({ ptr, ptr, ptr, i32 } %154, { ptr, ptr, ptr, i32 } %154, ptr %155, { ptr } %142, i32 1, i32 2)
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %136, i32 0, i32 0
  %170 = load ptr, ptr %169, align 8
  %171 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %170, 0
  %172 = getelementptr { ptr, ptr, ptr, i32 }, ptr %136, i32 0, i32 1
  %173 = load ptr, ptr %172, align 8
  %174 = insertvalue { ptr, ptr, ptr, i32 } %171, ptr %173, 1
  %175 = getelementptr { ptr, ptr, ptr, i32 }, ptr %136, i32 0, i32 2
  %176 = load ptr, ptr %175, align 8
  %177 = insertvalue { ptr, ptr, ptr, i32 } %174, ptr %176, 2
  %178 = getelementptr { ptr, ptr, ptr, i32 }, ptr %136, i32 0, i32 3
  %179 = load i32, ptr %178, align 4
  %180 = insertvalue { ptr, ptr, ptr, i32 } %177, i32 %179, 3
  %181 = alloca [0 x ptr], align 8
  %182 = call ptr @llvm.invariant.start.p0(i64 0, ptr %181)
  %183 = call ptr @llvm.invariant.start.p0(i64 280, ptr %170)
  %184 = getelementptr ptr, ptr %170, i32 %179
  %185 = getelementptr ptr, ptr %184, i32 14
  %186 = load ptr, ptr %185, align 8
  %187 = alloca {}, align 8
  %188 = call ptr @behavior_wrapper(ptr %186, { ptr, ptr, ptr, i32 } %180, ptr %187)
  %189 = call { ptr } %188({ ptr, ptr, ptr, i32 } %180, { ptr, ptr, ptr, i32 } %180, ptr %181)
  %190 = alloca ptr, align 8
  store { ptr } %189, ptr %190, align 8
  %191 = load ptr, ptr %119, align 8
  %192 = insertvalue { ptr } undef, ptr %191, 0
  %193 = load ptr, ptr %190, align 8
  %194 = insertvalue { ptr } undef, ptr %193, 0
  %195 = call { ptr } @fopen({ ptr } %192, { ptr } %194)
  %196 = alloca ptr, align 8
  store { ptr } %195, ptr %196, align 8
  %197 = alloca { ptr }, align 8
  %198 = getelementptr { ptr }, ptr %197, i32 0, i32 0
  %199 = load ptr, ptr %196, align 8
  store ptr %199, ptr %198, align 8
  %200 = call ptr @llvm.invariant.start.p0(i64 16, ptr %197)
  %201 = getelementptr { ptr }, ptr %197, i32 0, i32 0
  store ptr %201, ptr %.reg2mem5, align 8
  br label %202

202:                                              ; preds = %._crit_edge, %1
  %.reload6 = load ptr, ptr %.reg2mem5, align 8
  %203 = load ptr, ptr %.reload6, align 8
  %204 = insertvalue { ptr } undef, ptr %203, 0
  %205 = call i32 @fgetc({ ptr } %204)
  store i32 %205, ptr %.reg2mem1, align 4
  %.reload4 = load i32, ptr %.reg2mem1, align 4
  %206 = icmp eq i32 %.reload4, -1
  %.reload3 = load i32, ptr %.reg2mem1, align 4
  %207 = icmp ne i32 %.reload3, -1
  store i1 %207, ptr %.reg2mem, align 1
  br i1 %206, label %208, label %209

208:                                              ; preds = %202
  br label %245

209:                                              ; preds = %202
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  %210 = call i8 @i32toi8(i32 %.reload2)
  %211 = getelementptr { ptr, ptr, ptr, i32 }, ptr %84, i32 0, i32 0
  %212 = load ptr, ptr %211, align 8
  %213 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %212, 0
  %214 = getelementptr { ptr, ptr, ptr, i32 }, ptr %84, i32 0, i32 1
  %215 = load ptr, ptr %214, align 8
  %216 = insertvalue { ptr, ptr, ptr, i32 } %213, ptr %215, 1
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %84, i32 0, i32 2
  %218 = load ptr, ptr %217, align 8
  %219 = insertvalue { ptr, ptr, ptr, i32 } %216, ptr %218, 2
  %220 = getelementptr { ptr, ptr, ptr, i32 }, ptr %84, i32 0, i32 3
  %221 = load i32, ptr %220, align 4
  %222 = insertvalue { ptr, ptr, ptr, i32 } %219, i32 %221, 3
  %223 = getelementptr [1 x ptr], ptr %2, i32 0, i32 0
  store ptr @_parameterization_Ptri8, ptr %223, align 8
  %224 = call ptr @llvm.invariant.start.p0(i64 1, ptr %2)
  %225 = call ptr @llvm.invariant.start.p0(i64 280, ptr %212)
  %226 = getelementptr ptr, ptr %212, i32 %221
  %227 = getelementptr ptr, ptr %226, i32 8
  %228 = load ptr, ptr %227, align 8
  %229 = getelementptr { ptr }, ptr %3, i32 0, i32 0
  store ptr @i8_typ, ptr %229, align 8
  %230 = call ptr @behavior_wrapper(ptr %228, { ptr, ptr, ptr, i32 } %222, ptr %3)
  %231 = call { ptr, ptr, ptr, i32 } %230({ ptr, ptr, ptr, i32 } %222, { ptr, ptr, ptr, i32 } %222, ptr %2, i8 %210)
  store { ptr, ptr, ptr, i32 } %231, ptr %4, align 8
  %232 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %233 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %234 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %235 = load ptr, ptr %233, align 8
  store ptr %235, ptr %234, align 8
  %236 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %237 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %238 = load ptr, ptr %236, align 8
  store ptr %238, ptr %237, align 8
  %239 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %240 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %241 = load ptr, ptr %239, align 8
  store ptr %241, ptr %240, align 8
  %242 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %243 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %244 = load i32, ptr %242, align 4
  store i32 %244, ptr %243, align 4
  call void @set_offset(ptr %5, ptr @String)
  br label %245

245:                                              ; preds = %209, %208
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge, label %246

._crit_edge:                                      ; preds = %245
  br label %202

246:                                              ; preds = %245
  %247 = getelementptr { ptr }, ptr %197, i32 0, i32 0
  %248 = load ptr, ptr %247, align 8
  %249 = insertvalue { ptr } undef, ptr %248, 0
  %250 = call i32 @fclose({ ptr } %249)
  %251 = getelementptr { ptr, ptr, ptr, i32 }, ptr %84, i32 0, i32 0
  %252 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %253 = load ptr, ptr %251, align 8
  store ptr %253, ptr %252, align 8
  %254 = getelementptr { ptr, ptr, ptr, i32 }, ptr %84, i32 0, i32 1
  %255 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %256 = load ptr, ptr %254, align 8
  store ptr %256, ptr %255, align 8
  %257 = getelementptr { ptr, ptr, ptr, i32 }, ptr %84, i32 0, i32 2
  %258 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %259 = load ptr, ptr %257, align 8
  store ptr %259, ptr %258, align 8
  %260 = getelementptr { ptr, ptr, ptr, i32 }, ptr %84, i32 0, i32 3
  %261 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %262 = load i32, ptr %260, align 4
  store i32 %262, ptr %261, align 4
  call void @set_offset(ptr %6, ptr @String)
  %263 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %264 = load ptr, ptr %263, align 8
  %265 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %264, 0
  %266 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %267 = load ptr, ptr %266, align 8
  %268 = insertvalue { ptr, ptr, ptr, i32 } %265, ptr %267, 1
  %269 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %270 = load ptr, ptr %269, align 8
  %271 = insertvalue { ptr, ptr, ptr, i32 } %268, ptr %270, 2
  %272 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %273 = load i32, ptr %272, align 4
  %274 = insertvalue { ptr, ptr, ptr, i32 } %271, i32 %273, 3
  ret { ptr, ptr, ptr, i32 } %274
}

declare { ptr } @fopen({ ptr }, { ptr })

declare i32 @fgetc({ ptr })

declare i32 @fclose({ ptr })

define void @write_file({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1) {
  %3 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %3, align 8
  %4 = call ptr @llvm.invariant.start.p0(i64 16, ptr %3)
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @String)
  %18 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %18, align 8
  %19 = call ptr @llvm.invariant.start.p0(i64 16, ptr %18)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = load i32, ptr %30, align 4
  store i32 %32, ptr %31, align 4
  call void @set_offset(ptr %20, ptr @String)
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %34 = load ptr, ptr %33, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %34, 0
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %37 = load ptr, ptr %36, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %37, 1
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %40 = load ptr, ptr %39, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } %38, ptr %40, 2
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %43 = load i32, ptr %42, align 4
  %44 = insertvalue { ptr, ptr, ptr, i32 } %41, i32 %43, 3
  %45 = alloca [0 x ptr], align 8
  %46 = call ptr @llvm.invariant.start.p0(i64 0, ptr %45)
  %47 = call ptr @llvm.invariant.start.p0(i64 280, ptr %34)
  %48 = getelementptr ptr, ptr %34, i32 %43
  %49 = getelementptr ptr, ptr %48, i32 14
  %50 = load ptr, ptr %49, align 8
  %51 = alloca {}, align 8
  %52 = call ptr @behavior_wrapper(ptr %50, { ptr, ptr, ptr, i32 } %44, ptr %51)
  %53 = call { ptr } %52({ ptr, ptr, ptr, i32 } %44, { ptr, ptr, ptr, i32 } %44, ptr %45)
  %54 = alloca ptr, align 8
  store { ptr } %53, ptr %54, align 8
  %55 = alloca ptr, align 8
  %56 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 2))
  store ptr %56, ptr %55, align 8
  %57 = alloca { ptr }, align 8
  %58 = getelementptr { ptr }, ptr %55, i32 0, i32 0
  %59 = getelementptr { ptr }, ptr %57, i32 0, i32 0
  %60 = load ptr, ptr %58, align 8
  store ptr %60, ptr %59, align 8
  %61 = call ptr @llvm.invariant.start.p0(i64 16, ptr %57)
  %62 = load ptr, ptr %57, align 8
  %63 = load [1 x i8], ptr @oidpj_w, align 1
  store [1 x i8] %63, ptr %62, align 1
  %64 = alloca [1 x ptr], align 8
  store ptr @String, ptr %64, align 8
  %65 = load ptr, ptr %64, align 8
  %66 = getelementptr ptr, ptr %65, i32 6
  %67 = load ptr, ptr %66, align 8
  %68 = call { i64, i64 } @size_wrapper(ptr %67, ptr %64)
  %69 = extractvalue { i64, i64 } %68, 0
  %70 = call ptr @bump_malloc(i64 %69)
  %71 = alloca { ptr, ptr, ptr, i32 }, align 8
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 1
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 3
  store ptr @String, ptr %71, align 8
  store ptr %70, ptr %72, align 8
  store i32 9, ptr %73, align 4
  %74 = call ptr @llvm.invariant.start.p0(i64 16, ptr %71)
  %75 = getelementptr { ptr }, ptr %57, i32 0, i32 0
  %76 = load ptr, ptr %75, align 8
  %77 = insertvalue { ptr } undef, ptr %76, 0
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 0
  %79 = load ptr, ptr %78, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %79, 0
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 1
  %82 = load ptr, ptr %81, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } %80, ptr %82, 1
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 2
  %85 = load ptr, ptr %84, align 8
  %86 = insertvalue { ptr, ptr, ptr, i32 } %83, ptr %85, 2
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 3
  %88 = load i32, ptr %87, align 4
  %89 = insertvalue { ptr, ptr, ptr, i32 } %86, i32 %88, 3
  %90 = alloca [3 x ptr], align 8
  %91 = getelementptr [3 x ptr], ptr %90, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %91, align 8
  %92 = getelementptr [3 x ptr], ptr %90, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %92, align 8
  %93 = getelementptr [3 x ptr], ptr %90, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %93, align 8
  %94 = call ptr @llvm.invariant.start.p0(i64 9, ptr %90)
  %95 = call ptr @llvm.invariant.start.p0(i64 280, ptr %79)
  %96 = getelementptr ptr, ptr %79, i32 %88
  %97 = getelementptr ptr, ptr %96, i32 4
  %98 = load ptr, ptr %97, align 8
  %99 = alloca { ptr, ptr, ptr }, align 8
  %100 = getelementptr { ptr, ptr, ptr }, ptr %99, i32 0, i32 0
  store ptr @buffer_typ, ptr %100, align 8
  %101 = getelementptr { ptr, ptr, ptr }, ptr %99, i32 0, i32 1
  store ptr @i32_typ, ptr %101, align 8
  %102 = getelementptr { ptr, ptr, ptr }, ptr %99, i32 0, i32 2
  store ptr @i32_typ, ptr %102, align 8
  %103 = call ptr @behavior_wrapper(ptr %98, { ptr, ptr, ptr, i32 } %89, ptr %99)
  call void %103({ ptr, ptr, ptr, i32 } %89, { ptr, ptr, ptr, i32 } %89, ptr %90, { ptr } %77, i32 1, i32 2)
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 0
  %105 = load ptr, ptr %104, align 8
  %106 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %105, 0
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 1
  %108 = load ptr, ptr %107, align 8
  %109 = insertvalue { ptr, ptr, ptr, i32 } %106, ptr %108, 1
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 2
  %111 = load ptr, ptr %110, align 8
  %112 = insertvalue { ptr, ptr, ptr, i32 } %109, ptr %111, 2
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 3
  %114 = load i32, ptr %113, align 4
  %115 = insertvalue { ptr, ptr, ptr, i32 } %112, i32 %114, 3
  %116 = alloca [0 x ptr], align 8
  %117 = call ptr @llvm.invariant.start.p0(i64 0, ptr %116)
  %118 = call ptr @llvm.invariant.start.p0(i64 280, ptr %105)
  %119 = getelementptr ptr, ptr %105, i32 %114
  %120 = getelementptr ptr, ptr %119, i32 14
  %121 = load ptr, ptr %120, align 8
  %122 = alloca {}, align 8
  %123 = call ptr @behavior_wrapper(ptr %121, { ptr, ptr, ptr, i32 } %115, ptr %122)
  %124 = call { ptr } %123({ ptr, ptr, ptr, i32 } %115, { ptr, ptr, ptr, i32 } %115, ptr %116)
  %125 = alloca ptr, align 8
  store { ptr } %124, ptr %125, align 8
  %126 = load ptr, ptr %54, align 8
  %127 = insertvalue { ptr } undef, ptr %126, 0
  %128 = load ptr, ptr %125, align 8
  %129 = insertvalue { ptr } undef, ptr %128, 0
  %130 = call { ptr } @fopen({ ptr } %127, { ptr } %129)
  %131 = alloca ptr, align 8
  store { ptr } %130, ptr %131, align 8
  %132 = alloca { ptr }, align 8
  %133 = getelementptr { ptr }, ptr %132, i32 0, i32 0
  %134 = load ptr, ptr %131, align 8
  store ptr %134, ptr %133, align 8
  %135 = call ptr @llvm.invariant.start.p0(i64 16, ptr %132)
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %137 = load ptr, ptr %136, align 8
  %138 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %137, 0
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %140 = load ptr, ptr %139, align 8
  %141 = insertvalue { ptr, ptr, ptr, i32 } %138, ptr %140, 1
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %143 = load ptr, ptr %142, align 8
  %144 = insertvalue { ptr, ptr, ptr, i32 } %141, ptr %143, 2
  %145 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %146 = load i32, ptr %145, align 4
  %147 = insertvalue { ptr, ptr, ptr, i32 } %144, i32 %146, 3
  %148 = alloca [0 x ptr], align 8
  %149 = call ptr @llvm.invariant.start.p0(i64 0, ptr %148)
  %150 = call ptr @llvm.invariant.start.p0(i64 280, ptr %137)
  %151 = getelementptr ptr, ptr %137, i32 %146
  %152 = getelementptr ptr, ptr %151, i32 14
  %153 = load ptr, ptr %152, align 8
  %154 = alloca {}, align 8
  %155 = call ptr @behavior_wrapper(ptr %153, { ptr, ptr, ptr, i32 } %147, ptr %154)
  %156 = call { ptr } %155({ ptr, ptr, ptr, i32 } %147, { ptr, ptr, ptr, i32 } %147, ptr %148)
  %157 = alloca ptr, align 8
  store { ptr } %156, ptr %157, align 8
  %158 = getelementptr { ptr }, ptr %132, i32 0, i32 0
  %159 = load ptr, ptr %158, align 8
  %160 = insertvalue { ptr } undef, ptr %159, 0
  %161 = load ptr, ptr %157, align 8
  %162 = insertvalue { ptr } undef, ptr %161, 0
  %163 = call i32 @fprintf({ ptr } %160, { ptr } %162)
  %164 = getelementptr { ptr }, ptr %132, i32 0, i32 0
  %165 = load ptr, ptr %164, align 8
  %166 = insertvalue { ptr } undef, ptr %165, 0
  %167 = call i32 @fclose({ ptr } %166)
  ret void
}

declare i32 @fprintf({ ptr }, { ptr })

define void @_functionliteral_qlcqxadlob(i32 %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = mul i32 %0, %0
  %3 = alloca i160, align 8
  %4 = alloca ptr, align 8
  store i32 %2, ptr %3, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %4, align 4
  %5 = load ptr, ptr %4, align 8
  %6 = insertvalue { ptr, i160 } undef, ptr %5, 0
  %7 = load i160, ptr %3, align 4
  %8 = insertvalue { ptr, i160 } %6, i160 %7, 1
  %9 = alloca [1 x ptr], align 8
  %10 = getelementptr [1 x ptr], ptr %9, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %10, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 1, ptr %9)
  %12 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %13 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %14 = alloca { ptr }, align 8
  %15 = getelementptr { ptr }, ptr %14, i32 0, i32 0
  store ptr %5, ptr %15, align 8
  %16 = call ptr @class_behavior_wrapper(ptr %13, ptr %14)
  call void %16(ptr %9, { ptr, i160 } %8)
  ret void
}

define i32 @_functionliteral_kmrwghhhmp(i32 %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = add i32 %0, %1
  ret i32 %3
}

define void @_functionliteral_lqicruiyxk(i32 %0, i32 %1) {
  %3 = alloca i32, align 4
  %4 = alloca ptr, align 8
  %5 = alloca { ptr, i32 }, align 8
  %6 = alloca i32, align 4
  %7 = alloca ptr, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i32, align 4
  %.reg2mem7 = alloca ptr, align 8
  %.reg2mem9 = alloca i32, align 4
  %.reg2mem11 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %8 = getelementptr { ptr, i32 }, ptr %5, i32 0, i32 0
  store ptr %8, ptr %.reg2mem7, align 8
  store i32 7, ptr %.reg2mem11, align 4
  br label %9

9:                                                ; preds = %._crit_edge, %2
  %.reload12 = load i32, ptr %.reg2mem11, align 4
  store i32 %.reload12, ptr %.reg2mem3, align 4
  %10 = call i32 @_functionliteral_kmrwghhhmp(i32 %0, i32 %1)
  %.reload6 = load i32, ptr %.reg2mem3, align 4
  %11 = add i32 %10, %.reload6
  store i32 %11, ptr %3, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %4, align 4
  %12 = load ptr, ptr %4, align 8
  %13 = insertvalue { ptr, i32 } undef, ptr %12, 0
  %14 = load i32, ptr %3, align 4
  %15 = insertvalue { ptr, i32 } %13, i32 %14, 1
  %16 = call ptr @get_current_coroutine()
  %17 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i32 } }, ptr %16, i32 0, i32 4
  store { ptr, i32 } %15, ptr %17, align 8
  call void @coroutine_yield(ptr %16)
  %18 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i32 } }, ptr %16, i32 0, i32 4
  %19 = load { ptr, i32 }, ptr %18, align 8
  store { ptr, i32 } %19, ptr %5, align 8
  %.reload8 = load ptr, ptr %.reg2mem7, align 8
  %20 = load ptr, ptr %.reload8, align 8
  %21 = ptrtoint ptr %20 to i64
  %22 = icmp eq i64 %21, ptrtoint (ptr @nil_typ to i64)
  %23 = icmp eq i64 %21, 0
  %24 = or i1 %22, %23
  %25 = icmp eq i1 %24, false
  br i1 %25, label %26, label %34

26:                                               ; preds = %9
  %27 = getelementptr { ptr, i32 }, ptr %5, i32 0, i32 1
  %28 = load i32, ptr %27, align 4
  %.reload5 = load i32, ptr %.reg2mem3, align 4
  %29 = add i32 %.reload5, %28
  store i32 %29, ptr %.reg2mem1, align 4
  store i32 %28, ptr %6, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %7, align 4
  %30 = getelementptr { ptr, i32 }, ptr %5, i32 0, i32 0
  %31 = load ptr, ptr %7, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, i32 }, ptr %5, i32 0, i32 1
  %33 = load i32, ptr %6, align 4
  store i32 %33, ptr %32, align 4
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem9, align 4
  br label %35

34:                                               ; preds = %9
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  store i32 %.reload4, ptr %.reg2mem9, align 4
  br label %35

35:                                               ; preds = %34, %26
  %.reload10 = load i32, ptr %.reg2mem9, align 4
  store i32 %.reload10, ptr %.reg2mem, align 4
  br label %36

36:                                               ; preds = %35
  br i1 true, label %._crit_edge, label %37

._crit_edge:                                      ; preds = %36
  %.reload = load i32, ptr %.reg2mem, align 4
  store i32 %.reload, ptr %.reg2mem11, align 4
  br label %9

37:                                               ; preds = %36
  ret void
}

define void @coroutine_gmfsuqovfy_passer(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { ptr, [3 x ptr], ptr, i1, { { ptr, i32 }, i32, i32 } }, ptr %0, i32 0, i32 4, i32 1
  %3 = getelementptr { ptr, [3 x ptr], ptr, i1, { { ptr, i32 }, i32, i32 } }, ptr %0, i32 0, i32 4, i32 2
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %3, align 4
  %6 = load ptr, ptr %0, align 8
  call void %6(i32 %4, i32 %5)
  ret void
}

define void @coroutine_gmfsuqovfy_buffer_filler(ptr %0, i32 %1, i32 %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, [3 x ptr], ptr, i1, { { ptr, i32 }, i32, i32 } }, ptr %0, i32 0, i32 4, i32 1
  %5 = getelementptr { ptr, [3 x ptr], ptr, i1, { { ptr, i32 }, i32, i32 } }, ptr %0, i32 0, i32 4, i32 2
  store i32 %1, ptr %4, align 4
  store i32 %2, ptr %5, align 4
  ret void
}

define void @coroutine_zkkgdtskwo_passer(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  %3 = call i32 %2()
  %4 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i32 } }, ptr %0, i32 0, i32 4, i32 1
  store i32 %3, ptr %4, align 4
  %5 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i32 } }, ptr %0, i32 0, i32 4, i32 0
  store ptr @i32_typ, ptr %5, align 8
  ret void
}

define void @coroutine_zkkgdtskwo_buffer_filler(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret void
}

define void @coroutine_mkcqinrtzp_passer(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { ptr, [3 x ptr], ptr, i1, { { ptr, i160 }, { ptr, ptr, ptr, i32 } } }, ptr %0, i32 0, i32 4, i32 1
  %3 = load { ptr, ptr, ptr, i32 }, ptr %2, align 8
  %4 = load ptr, ptr %0, align 8
  call void %4({ ptr, ptr, ptr, i32 } %3)
  ret void
}

define void @coroutine_mkcqinrtzp_buffer_filler(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { ptr, [3 x ptr], ptr, i1, { { ptr, i160 }, { ptr, ptr, ptr, i32 } } }, ptr %0, i32 0, i32 4, i32 1
  store { ptr, ptr, ptr, i32 } %1, ptr %3, align 8
  ret void
}

define void @_functionliteral_kqpipzhidm({ ptr, ptr, ptr, i32 } %0) {
  %2 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %2, align 8
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %2)
  %4 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %5, 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %8 = load ptr, ptr %7, align 8
  %9 = insertvalue { ptr, ptr, ptr, i32 } %6, ptr %8, 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %11 = load ptr, ptr %10, align 8
  %12 = insertvalue { ptr, ptr, ptr, i32 } %9, ptr %11, 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %14 = load i32, ptr %13, align 4
  %15 = insertvalue { ptr, ptr, ptr, i32 } %12, i32 %14, 3
  %16 = alloca [1 x ptr], align 8
  %17 = getelementptr [1 x ptr], ptr %16, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %17, align 8
  %18 = call ptr @llvm.invariant.start.p0(i64 1, ptr %16)
  %19 = call ptr @llvm.invariant.start.p0(i64 56, ptr %5)
  %20 = getelementptr ptr, ptr %5, i32 %14
  %21 = getelementptr ptr, ptr %20, i32 3
  %22 = load ptr, ptr %21, align 8
  %23 = alloca { ptr }, align 8
  %24 = getelementptr { ptr }, ptr %23, i32 0, i32 0
  store ptr @i32_typ, ptr %24, align 8
  %25 = call ptr @behavior_wrapper(ptr %22, { ptr, ptr, ptr, i32 } %15, ptr %23)
  call void %25({ ptr, ptr, ptr, i32 } %15, { ptr, ptr, ptr, i32 } %15, ptr %16, i32 88)
  ret void
}

define i1 @_functionliteral_vkpdhaudnl(i32 %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = srem i32 %0, 2
  %3 = icmp eq i32 %2, 0
  ret i1 %3
}

define i32 @_functionliteral_knnabvgqzw(i32 %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = mul i32 %0, %0
  ret i32 %2
}

define i32 @main() {
  %1 = alloca i160, align 8
  %2 = alloca ptr, align 8
  %3 = alloca [1 x ptr], align 8
  %4 = alloca { ptr }, align 8
  %5 = alloca ptr, align 8
  %6 = alloca { ptr }, align 8
  %7 = alloca [1 x ptr], align 8
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = alloca [3 x ptr], align 8
  %10 = alloca { ptr, ptr, ptr }, align 8
  %11 = alloca [1 x ptr], align 8
  %12 = alloca { ptr }, align 8
  %13 = alloca i160, align 8
  %14 = alloca ptr, align 8
  %15 = alloca [1 x ptr], align 8
  %16 = alloca { ptr }, align 8
  %17 = alloca [1 x ptr], align 8
  %18 = alloca { ptr, ptr, ptr, i32 }, align 8
  %19 = alloca [0 x ptr], align 8
  %20 = alloca {}, align 8
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = alloca i160, align 8
  %24 = alloca ptr, align 8
  %25 = alloca i160, align 8
  %26 = alloca ptr, align 8
  %27 = alloca [2 x ptr], align 8
  %28 = alloca { ptr, ptr }, align 8
  %29 = alloca i64, align 8
  %30 = alloca ptr, align 8
  %31 = alloca { ptr, i64 }, align 8
  %32 = alloca i160, align 8
  %33 = alloca ptr, align 8
  %34 = alloca [2 x ptr], align 8
  %35 = alloca { ptr, ptr }, align 8
  %36 = alloca ptr, align 8
  %37 = alloca { ptr }, align 8
  %38 = alloca [1 x ptr], align 8
  %39 = alloca { ptr, ptr, ptr, i32 }, align 8
  %40 = alloca [3 x ptr], align 8
  %41 = alloca { ptr, ptr, ptr }, align 8
  %42 = alloca [1 x ptr], align 8
  %43 = alloca { ptr }, align 8
  %44 = alloca [1 x ptr], align 8
  %45 = alloca { ptr, ptr, ptr, i32 }, align 8
  %46 = alloca [3 x ptr], align 8
  %47 = alloca { ptr, ptr, ptr }, align 8
  %48 = alloca { ptr, ptr, ptr, i32 }, align 8
  %49 = alloca { ptr, ptr, ptr, i32 }, align 8
  %50 = alloca ptr, align 8
  %51 = alloca { ptr }, align 8
  %52 = alloca [1 x ptr], align 8
  %53 = alloca { ptr, ptr, ptr, i32 }, align 8
  %54 = alloca [3 x ptr], align 8
  %55 = alloca { ptr, ptr, ptr }, align 8
  %56 = alloca [1 x ptr], align 8
  %57 = alloca { ptr }, align 8
  %58 = alloca [1 x ptr], align 8
  %59 = alloca { ptr, ptr, ptr, i32 }, align 8
  %60 = alloca [2 x ptr], align 8
  %61 = alloca { ptr, ptr }, align 8
  %62 = alloca { ptr, ptr, ptr, i32 }, align 8
  %63 = alloca { ptr, ptr, ptr, i32 }, align 8
  %64 = alloca [2 x ptr], align 8
  %65 = alloca { ptr, ptr }, align 8
  %66 = alloca i160, align 8
  %67 = alloca ptr, align 8
  %68 = alloca { ptr, i64 }, align 8
  %69 = alloca [2 x ptr], align 8
  %70 = alloca { ptr, ptr }, align 8
  %71 = alloca ptr, align 8
  %72 = alloca { ptr }, align 8
  %73 = alloca [1 x ptr], align 8
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = alloca [3 x ptr], align 8
  %76 = alloca { ptr, ptr, ptr }, align 8
  %77 = alloca [1 x ptr], align 8
  %78 = alloca { ptr }, align 8
  %79 = alloca [0 x ptr], align 8
  %80 = alloca {}, align 8
  %81 = alloca [1 x ptr], align 8
  %82 = alloca { ptr }, align 8
  %83 = alloca [0 x ptr], align 8
  %84 = alloca {}, align 8
  %85 = alloca [1 x ptr], align 8
  %86 = alloca { ptr, ptr, ptr, i32 }, align 8
  %87 = alloca [1 x ptr], align 8
  %88 = alloca { ptr }, align 8
  %89 = alloca { ptr, ptr, ptr, i32 }, align 8
  %90 = alloca { ptr, ptr, ptr, i32 }, align 8
  %91 = alloca [1 x ptr], align 8
  %92 = alloca { ptr }, align 8
  %93 = alloca { ptr, ptr, ptr, i32 }, align 8
  %94 = alloca { ptr, ptr, ptr, i32 }, align 8
  %95 = alloca [0 x ptr], align 8
  %96 = alloca {}, align 8
  %97 = alloca [1 x ptr], align 8
  %98 = alloca { ptr }, align 8
  %99 = alloca i64, align 8
  %100 = alloca ptr, align 8
  %101 = alloca [1 x ptr], align 8
  %102 = alloca { ptr }, align 8
  %103 = alloca { ptr, i64 }, align 8
  %104 = alloca i160, align 8
  %105 = alloca ptr, align 8
  %106 = alloca [1 x ptr], align 8
  %107 = alloca { ptr }, align 8
  %108 = alloca i160, align 8
  %109 = alloca ptr, align 8
  %110 = alloca [1 x ptr], align 8
  %111 = alloca { ptr }, align 8
  %112 = alloca [0 x ptr], align 8
  %113 = alloca {}, align 8
  %114 = alloca i160, align 8
  %115 = alloca ptr, align 8
  %116 = alloca i160, align 8
  %117 = alloca ptr, align 8
  %118 = alloca [1 x ptr], align 8
  %119 = alloca { ptr }, align 8
  %120 = alloca i160, align 8
  %121 = alloca ptr, align 8
  %122 = alloca [1 x ptr], align 8
  %123 = alloca { ptr, ptr, ptr, i32 }, align 8
  %124 = alloca [3 x ptr], align 8
  %125 = alloca { ptr, ptr, ptr }, align 8
  %126 = alloca { ptr, ptr, ptr, i32 }, align 8
  %127 = alloca { ptr, ptr, ptr, i32 }, align 8
  %128 = alloca i160, align 8
  %129 = alloca ptr, align 8
  %130 = alloca [1 x ptr], align 8
  %131 = alloca { ptr }, align 8
  %132 = alloca i160, align 8
  %133 = alloca ptr, align 8
  %134 = alloca { ptr, ptr, ptr, i32 }, align 8
  %135 = alloca [0 x ptr], align 8
  %136 = alloca {}, align 8
  %137 = alloca [1 x ptr], align 8
  %138 = alloca { ptr, ptr, ptr, i32 }, align 8
  %139 = alloca [1 x ptr], align 8
  %140 = alloca { ptr }, align 8
  %141 = alloca { ptr, ptr, ptr, i32 }, align 8
  %142 = alloca { ptr, ptr, ptr, i32 }, align 8
  %143 = alloca { ptr, ptr, ptr, i32 }, align 8
  %144 = alloca { ptr, ptr, ptr, i32 }, align 8
  %145 = alloca [1 x ptr], align 8
  %146 = alloca { ptr, ptr, ptr, i32 }, align 8
  %147 = alloca [2 x ptr], align 8
  %148 = alloca { ptr, ptr }, align 8
  %149 = alloca [0 x ptr], align 8
  %150 = alloca {}, align 8
  %151 = alloca { ptr, ptr, ptr, i32 }, align 8
  %152 = alloca { ptr, ptr, ptr, i32 }, align 8
  %153 = alloca { ptr, ptr, ptr, i32 }, align 8
  %154 = alloca { ptr, ptr, ptr, i32 }, align 8
  %155 = alloca [0 x ptr], align 8
  %156 = alloca {}, align 8
  %157 = alloca { ptr, i32 }, align 8
  %158 = alloca [1 x ptr], align 8
  %159 = alloca { ptr, ptr, ptr, i32 }, align 8
  %160 = alloca [1 x ptr], align 8
  %161 = alloca { ptr }, align 8
  %162 = alloca { ptr, ptr, ptr, i32 }, align 8
  %163 = alloca [1 x ptr], align 8
  %164 = alloca { ptr }, align 8
  %165 = alloca { ptr, ptr, ptr, i32 }, align 8
  %166 = alloca { ptr, ptr, ptr, i32 }, align 8
  %167 = alloca { ptr, ptr, ptr, i32 }, align 8
  %168 = alloca [0 x ptr], align 8
  %169 = alloca {}, align 8
  %170 = alloca i160, align 8
  %171 = alloca ptr, align 8
  %172 = alloca [1 x ptr], align 8
  %173 = alloca { ptr }, align 8
  %174 = alloca [0 x ptr], align 8
  %175 = alloca {}, align 8
  %176 = alloca { ptr, ptr, ptr, i32 }, align 8
  %177 = alloca { ptr, ptr, ptr, i32 }, align 8
  %178 = alloca { ptr, ptr, ptr, i32 }, align 8
  %179 = alloca { ptr, ptr, ptr, i32 }, align 8
  %180 = alloca [0 x ptr], align 8
  %181 = alloca {}, align 8
  %182 = alloca { ptr, i160 }, align 8
  %183 = alloca { ptr, ptr, ptr, i32 }, align 8
  %184 = alloca [0 x ptr], align 8
  %185 = alloca {}, align 8
  %186 = alloca i160, align 8
  %187 = alloca ptr, align 8
  %188 = alloca [1 x ptr], align 8
  %189 = alloca { ptr }, align 8
  %190 = alloca { ptr, ptr, ptr, i32 }, align 8
  %191 = alloca ptr, align 8
  %192 = alloca { ptr }, align 8
  %193 = alloca i160, align 8
  %194 = alloca ptr, align 8
  %195 = alloca [1 x ptr], align 8
  %196 = alloca { ptr }, align 8
  %197 = alloca [1 x ptr], align 8
  %198 = alloca { ptr, ptr, ptr, i32 }, align 8
  %199 = alloca [2 x ptr], align 8
  %200 = alloca { ptr, ptr }, align 8
  %201 = alloca [0 x ptr], align 8
  %202 = alloca {}, align 8
  %203 = alloca { ptr, ptr, ptr, i32 }, align 8
  %204 = alloca { ptr, ptr, ptr, i32 }, align 8
  %205 = alloca { ptr, ptr, ptr, i32 }, align 8
  %206 = alloca { ptr, ptr, ptr, i32 }, align 8
  %207 = alloca [0 x ptr], align 8
  %208 = alloca {}, align 8
  %209 = alloca { ptr, i32 }, align 8
  %210 = alloca i160, align 8
  %211 = alloca ptr, align 8
  %212 = alloca [1 x ptr], align 8
  %213 = alloca { ptr }, align 8
  %214 = alloca ptr, align 8
  %215 = alloca { ptr }, align 8
  %216 = alloca [1 x ptr], align 8
  %217 = alloca { ptr, ptr, ptr, i32 }, align 8
  %218 = alloca [3 x ptr], align 8
  %219 = alloca { ptr, ptr, ptr }, align 8
  %220 = alloca { ptr, ptr, ptr, i32 }, align 8
  %221 = alloca { ptr, ptr, ptr, i32 }, align 8
  %222 = alloca ptr, align 8
  %223 = alloca { ptr }, align 8
  %224 = alloca [1 x ptr], align 8
  %225 = alloca { ptr, ptr, ptr, i32 }, align 8
  %226 = alloca [3 x ptr], align 8
  %227 = alloca { ptr, ptr, ptr }, align 8
  %228 = alloca { ptr, ptr, ptr, i32 }, align 8
  %229 = alloca [1 x ptr], align 8
  %230 = alloca { ptr }, align 8
  %231 = alloca { ptr, ptr, ptr, i32 }, align 8
  %232 = alloca { ptr, ptr, ptr, i32 }, align 8
  %233 = alloca [1 x ptr], align 8
  %234 = alloca { ptr }, align 8
  %235 = alloca i160, align 8
  %236 = alloca ptr, align 8
  %237 = alloca [1 x ptr], align 8
  %238 = alloca { ptr }, align 8
  %239 = alloca ptr, align 8
  %240 = alloca { ptr }, align 8
  %241 = alloca [1 x ptr], align 8
  %242 = alloca { ptr, ptr, ptr, i32 }, align 8
  %243 = alloca [3 x ptr], align 8
  %244 = alloca { ptr, ptr, ptr }, align 8
  %245 = alloca { ptr, ptr, ptr, i32 }, align 8
  %246 = alloca { ptr, ptr, ptr, i32 }, align 8
  %247 = alloca ptr, align 8
  %248 = alloca { ptr }, align 8
  %249 = alloca [1 x ptr], align 8
  %250 = alloca { ptr, ptr, ptr, i32 }, align 8
  %251 = alloca [3 x ptr], align 8
  %252 = alloca { ptr, ptr, ptr }, align 8
  %253 = alloca { ptr, ptr, ptr, i32 }, align 8
  %254 = alloca [1 x ptr], align 8
  %255 = alloca { ptr }, align 8
  %256 = alloca { ptr, ptr, ptr, i32 }, align 8
  %257 = alloca { ptr, ptr, ptr, i32 }, align 8
  %258 = alloca [1 x ptr], align 8
  %259 = alloca { ptr }, align 8
  %260 = alloca i160, align 8
  %261 = alloca ptr, align 8
  %262 = alloca [1 x ptr], align 8
  %263 = alloca { ptr }, align 8
  %264 = alloca [1 x ptr], align 8
  %265 = alloca { ptr }, align 8
  %266 = alloca ptr, align 8
  %267 = alloca { ptr }, align 8
  %268 = alloca [1 x ptr], align 8
  %269 = alloca { ptr, ptr, ptr, i32 }, align 8
  %270 = alloca [3 x ptr], align 8
  %271 = alloca { ptr, ptr, ptr }, align 8
  %272 = alloca [1 x ptr], align 8
  %273 = alloca { ptr }, align 8
  %274 = alloca i160, align 8
  %275 = alloca ptr, align 8
  %276 = alloca [1 x ptr], align 8
  %277 = alloca { ptr }, align 8
  %278 = alloca i160, align 8
  %279 = alloca ptr, align 8
  %280 = alloca [1 x ptr], align 8
  %281 = alloca { ptr }, align 8
  %282 = alloca [1 x ptr], align 8
  %283 = alloca { ptr, ptr, ptr, i32 }, align 8
  %284 = alloca [2 x ptr], align 8
  %285 = alloca { ptr, ptr }, align 8
  %286 = alloca [0 x ptr], align 8
  %287 = alloca {}, align 8
  %288 = alloca { ptr, ptr, ptr, i32 }, align 8
  %289 = alloca { ptr, ptr, ptr, i32 }, align 8
  %290 = alloca { ptr, ptr, ptr, i32 }, align 8
  %291 = alloca { ptr, ptr, ptr, i32 }, align 8
  %292 = alloca [0 x ptr], align 8
  %293 = alloca {}, align 8
  %294 = alloca { ptr, i32 }, align 8
  %295 = alloca i160, align 8
  %296 = alloca ptr, align 8
  %297 = alloca [1 x ptr], align 8
  %298 = alloca { ptr }, align 8
  %299 = alloca ptr, align 8
  %300 = alloca { ptr }, align 8
  %301 = alloca [1 x ptr], align 8
  %302 = alloca { ptr, ptr, ptr, i32 }, align 8
  %303 = alloca [3 x ptr], align 8
  %304 = alloca { ptr, ptr, ptr }, align 8
  %305 = alloca [0 x ptr], align 8
  %306 = alloca {}, align 8
  %307 = alloca { ptr, ptr, ptr, i32 }, align 8
  %308 = alloca { ptr, ptr, ptr, i32 }, align 8
  %309 = alloca { ptr, ptr, ptr, i32 }, align 8
  %310 = alloca { ptr, ptr, ptr, i32 }, align 8
  %311 = alloca [0 x ptr], align 8
  %312 = alloca {}, align 8
  %313 = alloca { ptr, i32 }, align 8
  %314 = alloca i160, align 8
  %315 = alloca ptr, align 8
  %316 = alloca [1 x ptr], align 8
  %317 = alloca { ptr }, align 8
  %318 = alloca i160, align 8
  %319 = alloca ptr, align 8
  %320 = alloca [1 x ptr], align 8
  %321 = alloca { ptr }, align 8
  %322 = alloca ptr, align 8
  %323 = alloca { ptr }, align 8
  %324 = alloca [1 x ptr], align 8
  %325 = alloca { ptr, ptr, ptr, i32 }, align 8
  %326 = alloca [3 x ptr], align 8
  %327 = alloca { ptr, ptr, ptr }, align 8
  %328 = alloca [0 x ptr], align 8
  %329 = alloca {}, align 8
  %330 = alloca { ptr, ptr, ptr, i32 }, align 8
  %331 = alloca { ptr, ptr, ptr, i32 }, align 8
  %332 = alloca { ptr, ptr, ptr, i32 }, align 8
  %333 = alloca { ptr, ptr, ptr, i32 }, align 8
  %334 = alloca [0 x ptr], align 8
  %335 = alloca {}, align 8
  %336 = alloca { ptr, i160 }, align 8
  %337 = alloca { ptr, ptr, ptr, i32 }, align 8
  %338 = alloca [1 x ptr], align 8
  %339 = alloca { ptr }, align 8
  %340 = alloca { ptr, ptr, ptr, i32 }, align 8
  %341 = alloca ptr, align 8
  %342 = alloca { ptr }, align 8
  %343 = alloca [1 x ptr], align 8
  %344 = alloca { ptr, ptr, ptr, i32 }, align 8
  %345 = alloca [3 x ptr], align 8
  %346 = alloca { ptr, ptr, ptr }, align 8
  %347 = alloca [0 x ptr], align 8
  %348 = alloca {}, align 8
  %349 = alloca { ptr, ptr, ptr, i32 }, align 8
  %350 = alloca { ptr, ptr, ptr, i32 }, align 8
  %351 = alloca [1 x ptr], align 8
  %352 = alloca { ptr }, align 8
  %353 = alloca [1 x ptr], align 8
  %354 = alloca { ptr, ptr, ptr, i32 }, align 8
  %355 = alloca [1 x ptr], align 8
  %356 = alloca { ptr }, align 8
  %357 = alloca { ptr, ptr, ptr, i32 }, align 8
  %358 = alloca { ptr, ptr, ptr, i32 }, align 8
  %359 = alloca [0 x ptr], align 8
  %360 = alloca {}, align 8
  %361 = alloca [1 x ptr], align 8
  %362 = alloca { ptr }, align 8
  %363 = alloca [0 x ptr], align 8
  %364 = alloca {}, align 8
  %365 = alloca [1 x ptr], align 8
  %366 = alloca { ptr, ptr, ptr, i32 }, align 8
  %367 = alloca [2 x ptr], align 8
  %368 = alloca { ptr, ptr }, align 8
  %369 = alloca [1 x ptr], align 8
  %370 = alloca { ptr }, align 8
  %371 = alloca { ptr, ptr, ptr, i32 }, align 8
  %372 = alloca { ptr, ptr, ptr, i32 }, align 8
  %373 = alloca [0 x ptr], align 8
  %374 = alloca {}, align 8
  %375 = alloca { ptr, ptr, ptr, i32 }, align 8
  %376 = alloca { ptr, ptr, ptr, i32 }, align 8
  %377 = alloca { ptr, ptr, ptr, i32 }, align 8
  %378 = alloca { ptr, ptr, ptr, i32 }, align 8
  %379 = alloca [0 x ptr], align 8
  %380 = alloca {}, align 8
  %381 = alloca { ptr, i32 }, align 8
  %382 = alloca i160, align 8
  %383 = alloca ptr, align 8
  %384 = alloca [1 x ptr], align 8
  %385 = alloca { ptr }, align 8
  %386 = alloca ptr, align 8
  %387 = alloca ptr, align 8
  %388 = alloca ptr, align 8
  %389 = alloca { ptr }, align 8
  %390 = alloca [1 x ptr], align 8
  %391 = alloca { ptr, ptr, ptr, i32 }, align 8
  %392 = alloca [3 x ptr], align 8
  %393 = alloca { ptr, ptr, ptr }, align 8
  %394 = alloca [1 x ptr], align 8
  %395 = alloca { ptr }, align 8
  %396 = alloca { ptr, ptr, ptr, i32 }, align 8
  %397 = alloca { ptr, ptr, ptr, i32 }, align 8
  %398 = alloca [2 x ptr], align 8
  %399 = alloca { ptr, ptr }, align 8
  %400 = alloca i160, align 8
  %401 = alloca ptr, align 8
  %402 = alloca [1 x ptr], align 8
  %403 = alloca { ptr }, align 8
  %404 = alloca ptr, align 8
  %405 = alloca ptr, align 8
  %406 = alloca { ptr }, align 8
  %407 = alloca [1 x ptr], align 8
  %408 = alloca { ptr, ptr, ptr, i32 }, align 8
  %409 = alloca [3 x ptr], align 8
  %410 = alloca { ptr, ptr, ptr }, align 8
  %411 = alloca [1 x ptr], align 8
  %412 = alloca { ptr }, align 8
  %413 = alloca ptr, align 8
  %414 = alloca { ptr }, align 8
  %415 = alloca [1 x ptr], align 8
  %416 = alloca { ptr, ptr, ptr, i32 }, align 8
  %417 = alloca [3 x ptr], align 8
  %418 = alloca { ptr, ptr, ptr }, align 8
  %419 = alloca ptr, align 8
  %420 = alloca { ptr }, align 8
  %421 = alloca [1 x ptr], align 8
  %422 = alloca { ptr, ptr, ptr, i32 }, align 8
  %423 = alloca [3 x ptr], align 8
  %424 = alloca { ptr, ptr, ptr }, align 8
  %425 = alloca ptr, align 8
  %426 = alloca { ptr }, align 8
  %427 = alloca [1 x ptr], align 8
  %428 = alloca { ptr, ptr, ptr, i32 }, align 8
  %429 = alloca [3 x ptr], align 8
  %430 = alloca { ptr, ptr, ptr }, align 8
  %431 = alloca { ptr, ptr, ptr, i32 }, align 8
  %432 = alloca [1 x ptr], align 8
  %433 = alloca { ptr }, align 8
  %434 = alloca ptr, align 8
  %435 = alloca [1 x ptr], align 8
  %436 = alloca { ptr, ptr, ptr, i32 }, align 8
  %437 = alloca [2 x ptr], align 8
  %438 = alloca { ptr, ptr }, align 8
  %439 = alloca [1 x ptr], align 8
  %440 = alloca { ptr }, align 8
  %441 = alloca i160, align 8
  %442 = alloca ptr, align 8
  %443 = alloca [1 x ptr], align 8
  %444 = alloca { ptr }, align 8
  %445 = alloca ptr, align 8
  %446 = alloca { ptr }, align 8
  %447 = alloca i32, align 4
  %448 = alloca ptr, align 8
  %449 = alloca { ptr, i32 }, align 8
  %450 = alloca { ptr, i32 }, align 8
  %451 = alloca [1 x ptr], align 8
  %452 = alloca { ptr }, align 8
  %453 = alloca i32, align 4
  %454 = alloca ptr, align 8
  %455 = alloca { ptr, i32 }, align 8
  %456 = alloca { ptr, i32 }, align 8
  %457 = alloca [1 x ptr], align 8
  %458 = alloca { ptr }, align 8
  %459 = alloca ptr, align 8
  %460 = alloca { ptr }, align 8
  %461 = alloca { ptr, i32 }, align 8
  %462 = alloca { ptr, i32 }, align 8
  %463 = alloca [1 x ptr], align 8
  %464 = alloca { ptr }, align 8
  %465 = alloca [1 x ptr], align 8
  %466 = alloca { ptr, ptr, ptr, i32 }, align 8
  %467 = alloca [0 x ptr], align 8
  %468 = alloca {}, align 8
  %469 = alloca { ptr, ptr, ptr, i32 }, align 8
  %470 = alloca { ptr, ptr, ptr, i32 }, align 8
  %471 = alloca ptr, align 8
  %472 = alloca { ptr }, align 8
  %473 = alloca [0 x ptr], align 8
  %474 = alloca {}, align 8
  %475 = alloca i160, align 8
  %476 = alloca ptr, align 8
  %477 = alloca [1 x ptr], align 8
  %478 = alloca { ptr }, align 8
  %479 = alloca ptr, align 8
  %480 = alloca ptr, align 8
  %481 = alloca [1 x ptr], align 8
  %482 = alloca { ptr, ptr, ptr, i32 }, align 8
  %483 = alloca [2 x ptr], align 8
  %484 = alloca { ptr, ptr }, align 8
  %485 = alloca [1 x ptr], align 8
  %486 = alloca { ptr }, align 8
  %487 = alloca { ptr, ptr, ptr, i32 }, align 8
  %488 = alloca { ptr, ptr, ptr, i32 }, align 8
  %489 = alloca [1 x ptr], align 8
  %490 = alloca { ptr }, align 8
  %491 = alloca { ptr, ptr, ptr, i32 }, align 8
  %492 = alloca { ptr, ptr, ptr, i32 }, align 8
  %493 = alloca [2 x ptr], align 8
  %494 = alloca { ptr, ptr }, align 8
  %495 = alloca i160, align 8
  %496 = alloca ptr, align 8
  %497 = alloca [1 x ptr], align 8
  %498 = alloca { ptr }, align 8
  %499 = alloca i160, align 8
  %500 = alloca ptr, align 8
  %501 = alloca [1 x ptr], align 8
  %502 = alloca { ptr }, align 8
  %503 = alloca i32, align 4
  %504 = alloca i32, align 4
  %505 = alloca i32, align 4
  %506 = alloca i160, align 8
  %507 = alloca ptr, align 8
  %508 = alloca [1 x ptr], align 8
  %509 = alloca { ptr }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem20 = alloca ptr, align 8
  %.reg2mem22 = alloca ptr, align 8
  %.reg2mem24 = alloca ptr, align 8
  %.reg2mem26 = alloca ptr, align 8
  %.reg2mem28 = alloca ptr, align 8
  %.reg2mem30 = alloca i1, align 1
  %.reg2mem33 = alloca ptr, align 8
  %.reg2mem35 = alloca ptr, align 8
  %.reg2mem37 = alloca ptr, align 8
  %.reg2mem39 = alloca ptr, align 8
  %.reg2mem41 = alloca ptr, align 8
  %.reg2mem43 = alloca i1, align 1
  %.reg2mem46 = alloca ptr, align 8
  %.reg2mem48 = alloca ptr, align 8
  %.reg2mem50 = alloca ptr, align 8
  %.reg2mem52 = alloca ptr, align 8
  %.reg2mem54 = alloca ptr, align 8
  %.reg2mem56 = alloca i1, align 1
  %.reg2mem59 = alloca ptr, align 8
  %.reg2mem61 = alloca ptr, align 8
  %.reg2mem63 = alloca ptr, align 8
  %.reg2mem65 = alloca ptr, align 8
  %.reg2mem67 = alloca ptr, align 8
  %.reg2mem69 = alloca i32, align 4
  %.reg2mem71 = alloca i32, align 4
  %.reg2mem73 = alloca i32, align 4
  %.reg2mem78 = alloca ptr, align 8
  %.reg2mem80 = alloca ptr, align 8
  %.reg2mem82 = alloca ptr, align 8
  %.reg2mem84 = alloca ptr, align 8
  %.reg2mem86 = alloca ptr, align 8
  %.reg2mem88 = alloca i1, align 1
  %.reg2mem91 = alloca ptr, align 8
  %.reg2mem93 = alloca ptr, align 8
  %.reg2mem95 = alloca ptr, align 8
  %.reg2mem97 = alloca ptr, align 8
  %.reg2mem99 = alloca ptr, align 8
  %.reg2mem101 = alloca i1, align 1
  %.reg2mem104 = alloca ptr, align 8
  %.reg2mem106 = alloca ptr, align 8
  %.reg2mem108 = alloca ptr, align 8
  %.reg2mem110 = alloca ptr, align 8
  %.reg2mem112 = alloca ptr, align 8
  %.reg2mem114 = alloca i1, align 1
  %.reg2mem117 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  call void @setup_landing_pad()
  store i32 3, ptr %1, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %2, align 4
  %510 = load ptr, ptr %2, align 8
  %511 = insertvalue { ptr, i160 } undef, ptr %510, 0
  %512 = load i160, ptr %1, align 4
  %513 = insertvalue { ptr, i160 } %511, i160 %512, 1
  %514 = getelementptr [1 x ptr], ptr %3, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %514, align 8
  %515 = call ptr @llvm.invariant.start.p0(i64 1, ptr %3)
  %516 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %517 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %518 = getelementptr { ptr }, ptr %4, i32 0, i32 0
  store ptr %510, ptr %518, align 8
  %519 = call ptr @class_behavior_wrapper(ptr %517, ptr %4)
  call void %519(ptr %3, { ptr, i160 } %513)
  %520 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 14))
  store ptr %520, ptr %5, align 8
  %521 = getelementptr { ptr }, ptr %5, i32 0, i32 0
  %522 = getelementptr { ptr }, ptr %6, i32 0, i32 0
  %523 = load ptr, ptr %521, align 8
  store ptr %523, ptr %522, align 8
  %524 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %525 = load ptr, ptr %6, align 8
  %526 = load [13 x i8], ptr @vhuiw_Hello_World, align 1
  store [13 x i8] %526, ptr %525, align 1
  store ptr @String, ptr %7, align 8
  %527 = load ptr, ptr %7, align 8
  %528 = getelementptr ptr, ptr %527, i32 6
  %529 = load ptr, ptr %528, align 8
  %530 = call { i64, i64 } @size_wrapper(ptr %529, ptr %7)
  %531 = extractvalue { i64, i64 } %530, 0
  %532 = call ptr @bump_malloc(i64 %531)
  %533 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %534 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  store ptr @String, ptr %8, align 8
  store ptr %532, ptr %533, align 8
  store i32 9, ptr %534, align 4
  %535 = call ptr @llvm.invariant.start.p0(i64 16, ptr %8)
  %536 = getelementptr { ptr }, ptr %6, i32 0, i32 0
  %537 = load ptr, ptr %536, align 8
  %538 = insertvalue { ptr } undef, ptr %537, 0
  %539 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %540 = load ptr, ptr %539, align 8
  %541 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %540, 0
  %542 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %543 = load ptr, ptr %542, align 8
  %544 = insertvalue { ptr, ptr, ptr, i32 } %541, ptr %543, 1
  %545 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %546 = load ptr, ptr %545, align 8
  %547 = insertvalue { ptr, ptr, ptr, i32 } %544, ptr %546, 2
  %548 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %549 = load i32, ptr %548, align 4
  %550 = insertvalue { ptr, ptr, ptr, i32 } %547, i32 %549, 3
  %551 = getelementptr [3 x ptr], ptr %9, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %551, align 8
  %552 = getelementptr [3 x ptr], ptr %9, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %552, align 8
  %553 = getelementptr [3 x ptr], ptr %9, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %553, align 8
  %554 = call ptr @llvm.invariant.start.p0(i64 9, ptr %9)
  %555 = call ptr @llvm.invariant.start.p0(i64 280, ptr %540)
  %556 = getelementptr ptr, ptr %540, i32 %549
  %557 = getelementptr ptr, ptr %556, i32 4
  %558 = load ptr, ptr %557, align 8
  %559 = getelementptr { ptr, ptr, ptr }, ptr %10, i32 0, i32 0
  store ptr @buffer_typ, ptr %559, align 8
  %560 = getelementptr { ptr, ptr, ptr }, ptr %10, i32 0, i32 1
  store ptr @i32_typ, ptr %560, align 8
  %561 = getelementptr { ptr, ptr, ptr }, ptr %10, i32 0, i32 2
  store ptr @i32_typ, ptr %561, align 8
  %562 = call ptr @behavior_wrapper(ptr %558, { ptr, ptr, ptr, i32 } %550, ptr %10)
  call void %562({ ptr, ptr, ptr, i32 } %550, { ptr, ptr, ptr, i32 } %550, ptr %9, { ptr } %538, i32 13, i32 14)
  %563 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 0
  %564 = load ptr, ptr %563, align 8
  %565 = insertvalue { ptr, i160 } undef, ptr %564, 0
  %566 = getelementptr { ptr, i160 }, ptr %8, i32 0, i32 1
  %567 = load i160, ptr %566, align 4
  %568 = insertvalue { ptr, i160 } %565, i160 %567, 1
  %569 = getelementptr [1 x ptr], ptr %11, i32 0, i32 0
  store ptr @_parameterization_String, ptr %569, align 8
  %570 = call ptr @llvm.invariant.start.p0(i64 1, ptr %11)
  %571 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %572 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %573 = getelementptr { ptr }, ptr %12, i32 0, i32 0
  store ptr %564, ptr %573, align 8
  %574 = call ptr @class_behavior_wrapper(ptr %572, ptr %12)
  call void %574(ptr %11, { ptr, i160 } %568)
  store i1 false, ptr %13, align 1
  store i64 ptrtoint (ptr @bool_typ to i64), ptr %14, align 4
  %575 = load ptr, ptr %14, align 8
  %576 = insertvalue { ptr, i160 } undef, ptr %575, 0
  %577 = load i160, ptr %13, align 4
  %578 = insertvalue { ptr, i160 } %576, i160 %577, 1
  %579 = getelementptr [1 x ptr], ptr %15, i32 0, i32 0
  store ptr @_parameterization_Ptri1, ptr %579, align 8
  %580 = call ptr @llvm.invariant.start.p0(i64 1, ptr %15)
  %581 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %582 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %583 = getelementptr { ptr }, ptr %16, i32 0, i32 0
  store ptr %575, ptr %583, align 8
  %584 = call ptr @class_behavior_wrapper(ptr %582, ptr %16)
  call void %584(ptr %15, { ptr, i160 } %578)
  store ptr @Bard, ptr %17, align 8
  %585 = load ptr, ptr %17, align 8
  %586 = getelementptr ptr, ptr %585, i32 6
  %587 = load ptr, ptr %586, align 8
  %588 = call { i64, i64 } @size_wrapper(ptr %587, ptr %17)
  %589 = extractvalue { i64, i64 } %588, 0
  %590 = call ptr @bump_malloc(i64 %589)
  %591 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  %592 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  store ptr @Bard, ptr %18, align 8
  store ptr %590, ptr %591, align 8
  store i32 9, ptr %592, align 4
  %593 = call ptr @llvm.invariant.start.p0(i64 16, ptr %18)
  %594 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 0
  %595 = load ptr, ptr %594, align 8
  %596 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %595, 0
  %597 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  %598 = load ptr, ptr %597, align 8
  %599 = insertvalue { ptr, ptr, ptr, i32 } %596, ptr %598, 1
  %600 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 2
  %601 = load ptr, ptr %600, align 8
  %602 = insertvalue { ptr, ptr, ptr, i32 } %599, ptr %601, 2
  %603 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  %604 = load i32, ptr %603, align 4
  %605 = insertvalue { ptr, ptr, ptr, i32 } %602, i32 %604, 3
  %606 = call ptr @llvm.invariant.start.p0(i64 0, ptr %19)
  %607 = call ptr @llvm.invariant.start.p0(i64 56, ptr %595)
  %608 = getelementptr ptr, ptr %595, i32 %604
  %609 = load ptr, ptr %608, align 8
  %610 = call ptr @behavior_wrapper(ptr %609, { ptr, ptr, ptr, i32 } %605, ptr %20)
  call void %610({ ptr, ptr, ptr, i32 } %605, { ptr, ptr, ptr, i32 } %605, ptr %19)
  %611 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 0
  %612 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %613 = load ptr, ptr %611, align 8
  store ptr %613, ptr %612, align 8
  %614 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  %615 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %616 = load ptr, ptr %614, align 8
  store ptr %616, ptr %615, align 8
  %617 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 2
  %618 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %619 = load ptr, ptr %617, align 8
  store ptr %619, ptr %618, align 8
  %620 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  %621 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %622 = load i32, ptr %620, align 4
  store i32 %622, ptr %621, align 4
  call void @set_offset(ptr %21, ptr @Bard)
  %623 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %624 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %625 = load ptr, ptr %623, align 8
  store ptr %625, ptr %624, align 8
  %626 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %627 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %628 = load ptr, ptr %626, align 8
  store ptr %628, ptr %627, align 8
  %629 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %630 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %631 = load ptr, ptr %629, align 8
  store ptr %631, ptr %630, align 8
  %632 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %633 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %634 = load i32, ptr %632, align 4
  store i32 %634, ptr %633, align 4
  %635 = call ptr @llvm.invariant.start.p0(i64 16, ptr %22)
  store i32 5, ptr %23, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %24, align 4
  %636 = load ptr, ptr %24, align 8
  %637 = insertvalue { ptr, i160 } undef, ptr %636, 0
  %638 = load i160, ptr %23, align 4
  %639 = insertvalue { ptr, i160 } %637, i160 %638, 1
  store i32 10, ptr %25, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %26, align 4
  %640 = load ptr, ptr %26, align 8
  %641 = insertvalue { ptr, i160 } undef, ptr %640, 0
  %642 = load i160, ptr %25, align 4
  %643 = insertvalue { ptr, i160 } %641, i160 %642, 1
  %644 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %645 = load ptr, ptr %644, align 8
  %646 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %645, 0
  %647 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %648 = load ptr, ptr %647, align 8
  %649 = insertvalue { ptr, ptr, ptr, i32 } %646, ptr %648, 1
  %650 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %651 = load ptr, ptr %650, align 8
  %652 = insertvalue { ptr, ptr, ptr, i32 } %649, ptr %651, 2
  %653 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %654 = load i32, ptr %653, align 4
  %655 = insertvalue { ptr, ptr, ptr, i32 } %652, i32 %654, 3
  %656 = getelementptr [2 x ptr], ptr %27, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %656, align 8
  %657 = getelementptr [2 x ptr], ptr %27, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %657, align 8
  %658 = call ptr @llvm.invariant.start.p0(i64 4, ptr %27)
  %659 = call ptr @llvm.invariant.start.p0(i64 56, ptr %645)
  %660 = getelementptr ptr, ptr %645, i32 %654
  %661 = getelementptr ptr, ptr %660, i32 1
  %662 = load ptr, ptr %661, align 8
  %663 = getelementptr { ptr, ptr }, ptr %28, i32 0, i32 0
  store ptr %636, ptr %663, align 8
  %664 = getelementptr { ptr, ptr }, ptr %28, i32 0, i32 1
  store ptr %640, ptr %664, align 8
  %665 = call ptr @behavior_wrapper(ptr %662, { ptr, ptr, ptr, i32 } %655, ptr %28)
  call void %665({ ptr, ptr, ptr, i32 } %655, { ptr, ptr, ptr, i32 } %655, ptr %27, { ptr, i160 } %639, { ptr, i160 } %643)
  store double 7.000000e+00, ptr %29, align 8
  store i64 ptrtoint (ptr @f64_typ to i64), ptr %30, align 4
  %666 = getelementptr { ptr, i64 }, ptr %31, i32 0, i32 0
  %667 = load ptr, ptr %30, align 8
  store ptr %667, ptr %666, align 8
  %668 = getelementptr { ptr, i64 }, ptr %31, i32 0, i32 1
  %669 = load i64, ptr %29, align 4
  store i64 %669, ptr %668, align 4
  %670 = getelementptr { ptr, i160 }, ptr %31, i32 0, i32 0
  %671 = load ptr, ptr %670, align 8
  %672 = insertvalue { ptr, i160 } undef, ptr %671, 0
  %673 = getelementptr { ptr, i160 }, ptr %31, i32 0, i32 1
  %674 = load i160, ptr %673, align 4
  %675 = insertvalue { ptr, i160 } %672, i160 %674, 1
  store double 1.400000e+01, ptr %32, align 8
  store i64 ptrtoint (ptr @f64_typ to i64), ptr %33, align 4
  %676 = load ptr, ptr %33, align 8
  %677 = insertvalue { ptr, i160 } undef, ptr %676, 0
  %678 = load i160, ptr %32, align 4
  %679 = insertvalue { ptr, i160 } %677, i160 %678, 1
  %680 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %681 = load ptr, ptr %680, align 8
  %682 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %681, 0
  %683 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %684 = load ptr, ptr %683, align 8
  %685 = insertvalue { ptr, ptr, ptr, i32 } %682, ptr %684, 1
  %686 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %687 = load ptr, ptr %686, align 8
  %688 = insertvalue { ptr, ptr, ptr, i32 } %685, ptr %687, 2
  %689 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %690 = load i32, ptr %689, align 4
  %691 = insertvalue { ptr, ptr, ptr, i32 } %688, i32 %690, 3
  %692 = getelementptr [2 x ptr], ptr %34, i32 0, i32 0
  store ptr @_parameterization_Ptri32_or_Ptrf64, ptr %692, align 8
  %693 = getelementptr [2 x ptr], ptr %34, i32 0, i32 1
  store ptr @_parameterization_Ptrf64, ptr %693, align 8
  %694 = call ptr @llvm.invariant.start.p0(i64 4, ptr %34)
  %695 = call ptr @llvm.invariant.start.p0(i64 56, ptr %681)
  %696 = getelementptr ptr, ptr %681, i32 %690
  %697 = getelementptr ptr, ptr %696, i32 1
  %698 = load ptr, ptr %697, align 8
  %699 = getelementptr { ptr, ptr }, ptr %35, i32 0, i32 0
  store ptr %671, ptr %699, align 8
  %700 = getelementptr { ptr, ptr }, ptr %35, i32 0, i32 1
  store ptr %676, ptr %700, align 8
  %701 = call ptr @behavior_wrapper(ptr %698, { ptr, ptr, ptr, i32 } %691, ptr %35)
  call void %701({ ptr, ptr, ptr, i32 } %691, { ptr, ptr, ptr, i32 } %691, ptr %34, { ptr, i160 } %675, { ptr, i160 } %679)
  %702 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 6))
  store ptr %702, ptr %36, align 8
  %703 = getelementptr { ptr }, ptr %36, i32 0, i32 0
  %704 = getelementptr { ptr }, ptr %37, i32 0, i32 0
  %705 = load ptr, ptr %703, align 8
  store ptr %705, ptr %704, align 8
  %706 = call ptr @llvm.invariant.start.p0(i64 16, ptr %37)
  %707 = load ptr, ptr %37, align 8
  %708 = load [5 x i8], ptr @tjisx_start, align 1
  store [5 x i8] %708, ptr %707, align 1
  store ptr @String, ptr %38, align 8
  %709 = load ptr, ptr %38, align 8
  %710 = getelementptr ptr, ptr %709, i32 6
  %711 = load ptr, ptr %710, align 8
  %712 = call { i64, i64 } @size_wrapper(ptr %711, ptr %38)
  %713 = extractvalue { i64, i64 } %712, 0
  %714 = call ptr @bump_malloc(i64 %713)
  %715 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 1
  %716 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 3
  store ptr @String, ptr %39, align 8
  store ptr %714, ptr %715, align 8
  store i32 9, ptr %716, align 4
  %717 = call ptr @llvm.invariant.start.p0(i64 16, ptr %39)
  %718 = getelementptr { ptr }, ptr %37, i32 0, i32 0
  %719 = load ptr, ptr %718, align 8
  %720 = insertvalue { ptr } undef, ptr %719, 0
  %721 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 0
  %722 = load ptr, ptr %721, align 8
  %723 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %722, 0
  %724 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 1
  %725 = load ptr, ptr %724, align 8
  %726 = insertvalue { ptr, ptr, ptr, i32 } %723, ptr %725, 1
  %727 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 2
  %728 = load ptr, ptr %727, align 8
  %729 = insertvalue { ptr, ptr, ptr, i32 } %726, ptr %728, 2
  %730 = getelementptr { ptr, ptr, ptr, i32 }, ptr %39, i32 0, i32 3
  %731 = load i32, ptr %730, align 4
  %732 = insertvalue { ptr, ptr, ptr, i32 } %729, i32 %731, 3
  %733 = getelementptr [3 x ptr], ptr %40, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %733, align 8
  %734 = getelementptr [3 x ptr], ptr %40, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %734, align 8
  %735 = getelementptr [3 x ptr], ptr %40, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %735, align 8
  %736 = call ptr @llvm.invariant.start.p0(i64 9, ptr %40)
  %737 = call ptr @llvm.invariant.start.p0(i64 280, ptr %722)
  %738 = getelementptr ptr, ptr %722, i32 %731
  %739 = getelementptr ptr, ptr %738, i32 4
  %740 = load ptr, ptr %739, align 8
  %741 = getelementptr { ptr, ptr, ptr }, ptr %41, i32 0, i32 0
  store ptr @buffer_typ, ptr %741, align 8
  %742 = getelementptr { ptr, ptr, ptr }, ptr %41, i32 0, i32 1
  store ptr @i32_typ, ptr %742, align 8
  %743 = getelementptr { ptr, ptr, ptr }, ptr %41, i32 0, i32 2
  store ptr @i32_typ, ptr %743, align 8
  %744 = call ptr @behavior_wrapper(ptr %740, { ptr, ptr, ptr, i32 } %732, ptr %41)
  call void %744({ ptr, ptr, ptr, i32 } %732, { ptr, ptr, ptr, i32 } %732, ptr %40, { ptr } %720, i32 5, i32 6)
  %745 = getelementptr { ptr, i160 }, ptr %39, i32 0, i32 0
  %746 = load ptr, ptr %745, align 8
  %747 = insertvalue { ptr, i160 } undef, ptr %746, 0
  %748 = getelementptr { ptr, i160 }, ptr %39, i32 0, i32 1
  %749 = load i160, ptr %748, align 4
  %750 = insertvalue { ptr, i160 } %747, i160 %749, 1
  %751 = getelementptr [1 x ptr], ptr %42, i32 0, i32 0
  store ptr @_parameterization_String, ptr %751, align 8
  %752 = call ptr @llvm.invariant.start.p0(i64 1, ptr %42)
  %753 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %754 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %755 = getelementptr { ptr }, ptr %43, i32 0, i32 0
  store ptr %746, ptr %755, align 8
  %756 = call ptr @class_behavior_wrapper(ptr %754, ptr %43)
  call void %756(ptr %42, { ptr, i160 } %750)
  store ptr @Animal, ptr %44, align 8
  %757 = load ptr, ptr %44, align 8
  %758 = getelementptr ptr, ptr %757, i32 6
  %759 = load ptr, ptr %758, align 8
  %760 = call { i64, i64 } @size_wrapper(ptr %759, ptr %44)
  %761 = extractvalue { i64, i64 } %760, 0
  %762 = call ptr @bump_malloc(i64 %761)
  %763 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %764 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  store ptr @Animal, ptr %45, align 8
  store ptr %762, ptr %763, align 8
  store i32 9, ptr %764, align 4
  %765 = call ptr @llvm.invariant.start.p0(i64 16, ptr %45)
  %766 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %767 = load ptr, ptr %766, align 8
  %768 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %767, 0
  %769 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %770 = load ptr, ptr %769, align 8
  %771 = insertvalue { ptr, ptr, ptr, i32 } %768, ptr %770, 1
  %772 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %773 = load ptr, ptr %772, align 8
  %774 = insertvalue { ptr, ptr, ptr, i32 } %771, ptr %773, 2
  %775 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %776 = load i32, ptr %775, align 4
  %777 = insertvalue { ptr, ptr, ptr, i32 } %774, i32 %776, 3
  %778 = getelementptr [3 x ptr], ptr %46, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %778, align 8
  %779 = getelementptr [3 x ptr], ptr %46, i32 0, i32 1
  store ptr @_parameterization_Ptrf64, ptr %779, align 8
  %780 = getelementptr [3 x ptr], ptr %46, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %780, align 8
  %781 = call ptr @llvm.invariant.start.p0(i64 9, ptr %46)
  %782 = call ptr @llvm.invariant.start.p0(i64 104, ptr %767)
  %783 = getelementptr ptr, ptr %767, i32 %776
  %784 = getelementptr ptr, ptr %783, i32 3
  %785 = load ptr, ptr %784, align 8
  %786 = getelementptr { ptr, ptr, ptr }, ptr %47, i32 0, i32 0
  store ptr @i32_typ, ptr %786, align 8
  %787 = getelementptr { ptr, ptr, ptr }, ptr %47, i32 0, i32 1
  store ptr @f64_typ, ptr %787, align 8
  %788 = getelementptr { ptr, ptr, ptr }, ptr %47, i32 0, i32 2
  store ptr @i32_typ, ptr %788, align 8
  %789 = call ptr @behavior_wrapper(ptr %785, { ptr, ptr, ptr, i32 } %777, ptr %47)
  call void %789({ ptr, ptr, ptr, i32 } %777, { ptr, ptr, ptr, i32 } %777, ptr %46, i32 55, double 8.000000e+00, i32 13)
  %790 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %791 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 0
  %792 = load ptr, ptr %790, align 8
  store ptr %792, ptr %791, align 8
  %793 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %794 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 1
  %795 = load ptr, ptr %793, align 8
  store ptr %795, ptr %794, align 8
  %796 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %797 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 2
  %798 = load ptr, ptr %796, align 8
  store ptr %798, ptr %797, align 8
  %799 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %800 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 3
  %801 = load i32, ptr %799, align 4
  store i32 %801, ptr %800, align 4
  call void @set_offset(ptr %48, ptr @Animal)
  %802 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 0
  %803 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 0
  %804 = load ptr, ptr %802, align 8
  store ptr %804, ptr %803, align 8
  %805 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 1
  %806 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 1
  %807 = load ptr, ptr %805, align 8
  store ptr %807, ptr %806, align 8
  %808 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 2
  %809 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 2
  %810 = load ptr, ptr %808, align 8
  store ptr %810, ptr %809, align 8
  %811 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 3
  %812 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 3
  %813 = load i32, ptr %811, align 4
  store i32 %813, ptr %812, align 4
  %814 = call ptr @llvm.invariant.start.p0(i64 16, ptr %49)
  %815 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 14))
  store ptr %815, ptr %50, align 8
  %816 = getelementptr { ptr }, ptr %50, i32 0, i32 0
  %817 = getelementptr { ptr }, ptr %51, i32 0, i32 0
  %818 = load ptr, ptr %816, align 8
  store ptr %818, ptr %817, align 8
  %819 = call ptr @llvm.invariant.start.p0(i64 16, ptr %51)
  %820 = load ptr, ptr %51, align 8
  %821 = load [13 x i8], ptr @pwuuc_did_get_here, align 1
  store [13 x i8] %821, ptr %820, align 1
  store ptr @String, ptr %52, align 8
  %822 = load ptr, ptr %52, align 8
  %823 = getelementptr ptr, ptr %822, i32 6
  %824 = load ptr, ptr %823, align 8
  %825 = call { i64, i64 } @size_wrapper(ptr %824, ptr %52)
  %826 = extractvalue { i64, i64 } %825, 0
  %827 = call ptr @bump_malloc(i64 %826)
  %828 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 1
  %829 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 3
  store ptr @String, ptr %53, align 8
  store ptr %827, ptr %828, align 8
  store i32 9, ptr %829, align 4
  %830 = call ptr @llvm.invariant.start.p0(i64 16, ptr %53)
  %831 = getelementptr { ptr }, ptr %51, i32 0, i32 0
  %832 = load ptr, ptr %831, align 8
  %833 = insertvalue { ptr } undef, ptr %832, 0
  %834 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 0
  %835 = load ptr, ptr %834, align 8
  %836 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %835, 0
  %837 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 1
  %838 = load ptr, ptr %837, align 8
  %839 = insertvalue { ptr, ptr, ptr, i32 } %836, ptr %838, 1
  %840 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 2
  %841 = load ptr, ptr %840, align 8
  %842 = insertvalue { ptr, ptr, ptr, i32 } %839, ptr %841, 2
  %843 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 3
  %844 = load i32, ptr %843, align 4
  %845 = insertvalue { ptr, ptr, ptr, i32 } %842, i32 %844, 3
  %846 = getelementptr [3 x ptr], ptr %54, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %846, align 8
  %847 = getelementptr [3 x ptr], ptr %54, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %847, align 8
  %848 = getelementptr [3 x ptr], ptr %54, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %848, align 8
  %849 = call ptr @llvm.invariant.start.p0(i64 9, ptr %54)
  %850 = call ptr @llvm.invariant.start.p0(i64 280, ptr %835)
  %851 = getelementptr ptr, ptr %835, i32 %844
  %852 = getelementptr ptr, ptr %851, i32 4
  %853 = load ptr, ptr %852, align 8
  %854 = getelementptr { ptr, ptr, ptr }, ptr %55, i32 0, i32 0
  store ptr @buffer_typ, ptr %854, align 8
  %855 = getelementptr { ptr, ptr, ptr }, ptr %55, i32 0, i32 1
  store ptr @i32_typ, ptr %855, align 8
  %856 = getelementptr { ptr, ptr, ptr }, ptr %55, i32 0, i32 2
  store ptr @i32_typ, ptr %856, align 8
  %857 = call ptr @behavior_wrapper(ptr %853, { ptr, ptr, ptr, i32 } %845, ptr %55)
  call void %857({ ptr, ptr, ptr, i32 } %845, { ptr, ptr, ptr, i32 } %845, ptr %54, { ptr } %833, i32 13, i32 14)
  %858 = getelementptr { ptr, i160 }, ptr %53, i32 0, i32 0
  %859 = load ptr, ptr %858, align 8
  %860 = insertvalue { ptr, i160 } undef, ptr %859, 0
  %861 = getelementptr { ptr, i160 }, ptr %53, i32 0, i32 1
  %862 = load i160, ptr %861, align 4
  %863 = insertvalue { ptr, i160 } %860, i160 %862, 1
  %864 = getelementptr [1 x ptr], ptr %56, i32 0, i32 0
  store ptr @_parameterization_String, ptr %864, align 8
  %865 = call ptr @llvm.invariant.start.p0(i64 1, ptr %56)
  %866 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %867 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %868 = getelementptr { ptr }, ptr %57, i32 0, i32 0
  store ptr %859, ptr %868, align 8
  %869 = call ptr @class_behavior_wrapper(ptr %867, ptr %57)
  call void %869(ptr %56, { ptr, i160 } %863)
  store ptr @Beaver, ptr %58, align 8
  %870 = load ptr, ptr %58, align 8
  %871 = getelementptr ptr, ptr %870, i32 6
  %872 = load ptr, ptr %871, align 8
  %873 = call { i64, i64 } @size_wrapper(ptr %872, ptr %58)
  %874 = extractvalue { i64, i64 } %873, 0
  %875 = call ptr @bump_malloc(i64 %874)
  %876 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 1
  %877 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 3
  store ptr @Beaver, ptr %59, align 8
  store ptr %875, ptr %876, align 8
  store i32 9, ptr %877, align 4
  %878 = call ptr @llvm.invariant.start.p0(i64 16, ptr %59)
  %879 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 0
  %880 = load ptr, ptr %879, align 8
  %881 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %880, 0
  %882 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 1
  %883 = load ptr, ptr %882, align 8
  %884 = insertvalue { ptr, ptr, ptr, i32 } %881, ptr %883, 1
  %885 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 2
  %886 = load ptr, ptr %885, align 8
  %887 = insertvalue { ptr, ptr, ptr, i32 } %884, ptr %886, 2
  %888 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 3
  %889 = load i32, ptr %888, align 4
  %890 = insertvalue { ptr, ptr, ptr, i32 } %887, i32 %889, 3
  %891 = getelementptr [2 x ptr], ptr %60, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %891, align 8
  %892 = getelementptr [2 x ptr], ptr %60, i32 0, i32 1
  store ptr @_parameterization_Ptrf64, ptr %892, align 8
  %893 = call ptr @llvm.invariant.start.p0(i64 4, ptr %60)
  %894 = call ptr @llvm.invariant.start.p0(i64 64, ptr %880)
  %895 = getelementptr ptr, ptr %880, i32 %889
  %896 = getelementptr ptr, ptr %895, i32 2
  %897 = load ptr, ptr %896, align 8
  %898 = getelementptr { ptr, ptr }, ptr %61, i32 0, i32 0
  store ptr @i32_typ, ptr %898, align 8
  %899 = getelementptr { ptr, ptr }, ptr %61, i32 0, i32 1
  store ptr @f64_typ, ptr %899, align 8
  %900 = call ptr @behavior_wrapper(ptr %897, { ptr, ptr, ptr, i32 } %890, ptr %61)
  call void %900({ ptr, ptr, ptr, i32 } %890, { ptr, ptr, ptr, i32 } %890, ptr %60, i32 10, double 1.000000e+01)
  %901 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 0
  %902 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 0
  %903 = load ptr, ptr %901, align 8
  store ptr %903, ptr %902, align 8
  %904 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 1
  %905 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 1
  %906 = load ptr, ptr %904, align 8
  store ptr %906, ptr %905, align 8
  %907 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 2
  %908 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 2
  %909 = load ptr, ptr %907, align 8
  store ptr %909, ptr %908, align 8
  %910 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 3
  %911 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 3
  %912 = load i32, ptr %910, align 4
  store i32 %912, ptr %911, align 4
  call void @set_offset(ptr %62, ptr @Beaver)
  %913 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 0
  %914 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 0
  %915 = load ptr, ptr %913, align 8
  store ptr %915, ptr %914, align 8
  %916 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 1
  %917 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 1
  %918 = load ptr, ptr %916, align 8
  store ptr %918, ptr %917, align 8
  %919 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 2
  %920 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 2
  %921 = load ptr, ptr %919, align 8
  store ptr %921, ptr %920, align 8
  %922 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 3
  %923 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 3
  %924 = load i32, ptr %922, align 4
  store i32 %924, ptr %923, align 4
  %925 = call ptr @llvm.invariant.start.p0(i64 16, ptr %63)
  %926 = getelementptr { ptr, i160 }, ptr %49, i32 0, i32 0
  %927 = load ptr, ptr %926, align 8
  %928 = insertvalue { ptr, i160 } undef, ptr %927, 0
  %929 = getelementptr { ptr, i160 }, ptr %49, i32 0, i32 1
  %930 = load i160, ptr %929, align 4
  %931 = insertvalue { ptr, i160 } %928, i160 %930, 1
  %932 = getelementptr { ptr, i160 }, ptr %63, i32 0, i32 0
  %933 = load ptr, ptr %932, align 8
  %934 = insertvalue { ptr, i160 } undef, ptr %933, 0
  %935 = getelementptr { ptr, i160 }, ptr %63, i32 0, i32 1
  %936 = load i160, ptr %935, align 4
  %937 = insertvalue { ptr, i160 } %934, i160 %936, 1
  %938 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %939 = load ptr, ptr %938, align 8
  %940 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %939, 0
  %941 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %942 = load ptr, ptr %941, align 8
  %943 = insertvalue { ptr, ptr, ptr, i32 } %940, ptr %942, 1
  %944 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %945 = load ptr, ptr %944, align 8
  %946 = insertvalue { ptr, ptr, ptr, i32 } %943, ptr %945, 2
  %947 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %948 = load i32, ptr %947, align 4
  %949 = insertvalue { ptr, ptr, ptr, i32 } %946, i32 %948, 3
  %950 = getelementptr [2 x ptr], ptr %64, i32 0, i32 0
  store ptr @_parameterization_Animal, ptr %950, align 8
  %951 = getelementptr [2 x ptr], ptr %64, i32 0, i32 1
  store ptr @_parameterization_Beaver, ptr %951, align 8
  %952 = call ptr @llvm.invariant.start.p0(i64 4, ptr %64)
  %953 = call ptr @llvm.invariant.start.p0(i64 56, ptr %939)
  %954 = getelementptr ptr, ptr %939, i32 %948
  %955 = getelementptr ptr, ptr %954, i32 1
  %956 = load ptr, ptr %955, align 8
  %957 = getelementptr { ptr, ptr }, ptr %65, i32 0, i32 0
  store ptr %927, ptr %957, align 8
  %958 = getelementptr { ptr, ptr }, ptr %65, i32 0, i32 1
  store ptr %933, ptr %958, align 8
  %959 = call ptr @behavior_wrapper(ptr %956, { ptr, ptr, ptr, i32 } %949, ptr %65)
  call void %959({ ptr, ptr, ptr, i32 } %949, { ptr, ptr, ptr, i32 } %949, ptr %64, { ptr, i160 } %931, { ptr, i160 } %937)
  store i32 7, ptr %66, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %67, align 4
  %960 = load ptr, ptr %67, align 8
  %961 = insertvalue { ptr, i160 } undef, ptr %960, 0
  %962 = load i160, ptr %66, align 4
  %963 = insertvalue { ptr, i160 } %961, i160 %962, 1
  %964 = getelementptr { ptr, i64 }, ptr %68, i32 0, i32 0
  %965 = load ptr, ptr %30, align 8
  store ptr %965, ptr %964, align 8
  %966 = getelementptr { ptr, i64 }, ptr %68, i32 0, i32 1
  %967 = load i64, ptr %29, align 4
  store i64 %967, ptr %966, align 4
  %968 = getelementptr { ptr, i160 }, ptr %68, i32 0, i32 0
  %969 = load ptr, ptr %968, align 8
  %970 = insertvalue { ptr, i160 } undef, ptr %969, 0
  %971 = getelementptr { ptr, i160 }, ptr %68, i32 0, i32 1
  %972 = load i160, ptr %971, align 4
  %973 = insertvalue { ptr, i160 } %970, i160 %972, 1
  %974 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %975 = load ptr, ptr %974, align 8
  %976 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %975, 0
  %977 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %978 = load ptr, ptr %977, align 8
  %979 = insertvalue { ptr, ptr, ptr, i32 } %976, ptr %978, 1
  %980 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %981 = load ptr, ptr %980, align 8
  %982 = insertvalue { ptr, ptr, ptr, i32 } %979, ptr %981, 2
  %983 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %984 = load i32, ptr %983, align 4
  %985 = insertvalue { ptr, ptr, ptr, i32 } %982, i32 %984, 3
  %986 = getelementptr [2 x ptr], ptr %69, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %986, align 8
  %987 = getelementptr [2 x ptr], ptr %69, i32 0, i32 1
  store ptr @_parameterization_Ptri32_or_Ptrf64, ptr %987, align 8
  %988 = call ptr @llvm.invariant.start.p0(i64 4, ptr %69)
  %989 = call ptr @llvm.invariant.start.p0(i64 56, ptr %975)
  %990 = getelementptr ptr, ptr %975, i32 %984
  %991 = getelementptr ptr, ptr %990, i32 1
  %992 = load ptr, ptr %991, align 8
  %993 = getelementptr { ptr, ptr }, ptr %70, i32 0, i32 0
  store ptr %960, ptr %993, align 8
  %994 = getelementptr { ptr, ptr }, ptr %70, i32 0, i32 1
  store ptr %969, ptr %994, align 8
  %995 = call ptr @behavior_wrapper(ptr %992, { ptr, ptr, ptr, i32 } %985, ptr %70)
  call void %995({ ptr, ptr, ptr, i32 } %985, { ptr, ptr, ptr, i32 } %985, ptr %69, { ptr, i160 } %963, { ptr, i160 } %973)
  %996 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 17))
  store ptr %996, ptr %71, align 8
  %997 = getelementptr { ptr }, ptr %71, i32 0, i32 0
  %998 = getelementptr { ptr }, ptr %72, i32 0, i32 0
  %999 = load ptr, ptr %997, align 8
  store ptr %999, ptr %998, align 8
  %1000 = call ptr @llvm.invariant.start.p0(i64 16, ptr %72)
  %1001 = load ptr, ptr %72, align 8
  %1002 = load [16 x i8], ptr @nriyb_barrys_color_is, align 1
  store [16 x i8] %1002, ptr %1001, align 1
  store ptr @String, ptr %73, align 8
  %1003 = load ptr, ptr %73, align 8
  %1004 = getelementptr ptr, ptr %1003, i32 6
  %1005 = load ptr, ptr %1004, align 8
  %1006 = call { i64, i64 } @size_wrapper(ptr %1005, ptr %73)
  %1007 = extractvalue { i64, i64 } %1006, 0
  %1008 = call ptr @bump_malloc(i64 %1007)
  %1009 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %1010 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  store ptr @String, ptr %74, align 8
  store ptr %1008, ptr %1009, align 8
  store i32 9, ptr %1010, align 4
  %1011 = call ptr @llvm.invariant.start.p0(i64 16, ptr %74)
  %1012 = getelementptr { ptr }, ptr %72, i32 0, i32 0
  %1013 = load ptr, ptr %1012, align 8
  %1014 = insertvalue { ptr } undef, ptr %1013, 0
  %1015 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %1016 = load ptr, ptr %1015, align 8
  %1017 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1016, 0
  %1018 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %1019 = load ptr, ptr %1018, align 8
  %1020 = insertvalue { ptr, ptr, ptr, i32 } %1017, ptr %1019, 1
  %1021 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %1022 = load ptr, ptr %1021, align 8
  %1023 = insertvalue { ptr, ptr, ptr, i32 } %1020, ptr %1022, 2
  %1024 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %1025 = load i32, ptr %1024, align 4
  %1026 = insertvalue { ptr, ptr, ptr, i32 } %1023, i32 %1025, 3
  %1027 = getelementptr [3 x ptr], ptr %75, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %1027, align 8
  %1028 = getelementptr [3 x ptr], ptr %75, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %1028, align 8
  %1029 = getelementptr [3 x ptr], ptr %75, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %1029, align 8
  %1030 = call ptr @llvm.invariant.start.p0(i64 9, ptr %75)
  %1031 = call ptr @llvm.invariant.start.p0(i64 280, ptr %1016)
  %1032 = getelementptr ptr, ptr %1016, i32 %1025
  %1033 = getelementptr ptr, ptr %1032, i32 4
  %1034 = load ptr, ptr %1033, align 8
  %1035 = getelementptr { ptr, ptr, ptr }, ptr %76, i32 0, i32 0
  store ptr @buffer_typ, ptr %1035, align 8
  %1036 = getelementptr { ptr, ptr, ptr }, ptr %76, i32 0, i32 1
  store ptr @i32_typ, ptr %1036, align 8
  %1037 = getelementptr { ptr, ptr, ptr }, ptr %76, i32 0, i32 2
  store ptr @i32_typ, ptr %1037, align 8
  %1038 = call ptr @behavior_wrapper(ptr %1034, { ptr, ptr, ptr, i32 } %1026, ptr %76)
  call void %1038({ ptr, ptr, ptr, i32 } %1026, { ptr, ptr, ptr, i32 } %1026, ptr %75, { ptr } %1014, i32 16, i32 17)
  %1039 = getelementptr { ptr, i160 }, ptr %74, i32 0, i32 0
  %1040 = load ptr, ptr %1039, align 8
  %1041 = insertvalue { ptr, i160 } undef, ptr %1040, 0
  %1042 = getelementptr { ptr, i160 }, ptr %74, i32 0, i32 1
  %1043 = load i160, ptr %1042, align 4
  %1044 = insertvalue { ptr, i160 } %1041, i160 %1043, 1
  %1045 = getelementptr [1 x ptr], ptr %77, i32 0, i32 0
  store ptr @_parameterization_String, ptr %1045, align 8
  %1046 = call ptr @llvm.invariant.start.p0(i64 1, ptr %77)
  %1047 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1048 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %1049 = getelementptr { ptr }, ptr %78, i32 0, i32 0
  store ptr %1040, ptr %1049, align 8
  %1050 = call ptr @class_behavior_wrapper(ptr %1048, ptr %78)
  call void %1050(ptr %77, { ptr, i160 } %1044)
  %1051 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 0
  %1052 = load ptr, ptr %1051, align 8
  %1053 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1052, 0
  %1054 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 1
  %1055 = load ptr, ptr %1054, align 8
  %1056 = insertvalue { ptr, ptr, ptr, i32 } %1053, ptr %1055, 1
  %1057 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 2
  %1058 = load ptr, ptr %1057, align 8
  %1059 = insertvalue { ptr, ptr, ptr, i32 } %1056, ptr %1058, 2
  %1060 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 3
  %1061 = load i32, ptr %1060, align 4
  %1062 = insertvalue { ptr, ptr, ptr, i32 } %1059, i32 %1061, 3
  %1063 = call ptr @llvm.invariant.start.p0(i64 0, ptr %79)
  %1064 = call ptr @llvm.invariant.start.p0(i64 64, ptr %1052)
  %1065 = getelementptr ptr, ptr %1052, i32 %1061
  %1066 = getelementptr ptr, ptr %1065, i32 4
  %1067 = load ptr, ptr %1066, align 8
  %1068 = call ptr @behavior_wrapper(ptr %1067, { ptr, ptr, ptr, i32 } %1062, ptr %80)
  call void %1068({ ptr, ptr, ptr, i32 } %1062, { ptr, ptr, ptr, i32 } %1062, ptr %79)
  %1069 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 0
  %1070 = load ptr, ptr %1069, align 8
  %1071 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1070, 0
  %1072 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 1
  %1073 = load ptr, ptr %1072, align 8
  %1074 = insertvalue { ptr, ptr, ptr, i32 } %1071, ptr %1073, 1
  %1075 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 2
  %1076 = load ptr, ptr %1075, align 8
  %1077 = insertvalue { ptr, ptr, ptr, i32 } %1074, ptr %1076, 2
  %1078 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 3
  %1079 = load i32, ptr %1078, align 4
  %1080 = insertvalue { ptr, ptr, ptr, i32 } %1077, i32 %1079, 3
  %1081 = getelementptr [1 x ptr], ptr %81, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1081, align 8
  %1082 = call ptr @llvm.invariant.start.p0(i64 1, ptr %81)
  %1083 = call ptr @llvm.invariant.start.p0(i64 64, ptr %1070)
  %1084 = getelementptr ptr, ptr %1070, i32 %1079
  %1085 = getelementptr ptr, ptr %1084, i32 3
  %1086 = load ptr, ptr %1085, align 8
  %1087 = getelementptr { ptr }, ptr %82, i32 0, i32 0
  store ptr @i32_typ, ptr %1087, align 8
  %1088 = call ptr @behavior_wrapper(ptr %1086, { ptr, ptr, ptr, i32 } %1080, ptr %82)
  call void %1088({ ptr, ptr, ptr, i32 } %1080, { ptr, ptr, ptr, i32 } %1080, ptr %81, i32 5)
  %1089 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 0
  %1090 = load ptr, ptr %1089, align 8
  %1091 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1090, 0
  %1092 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 1
  %1093 = load ptr, ptr %1092, align 8
  %1094 = insertvalue { ptr, ptr, ptr, i32 } %1091, ptr %1093, 1
  %1095 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 2
  %1096 = load ptr, ptr %1095, align 8
  %1097 = insertvalue { ptr, ptr, ptr, i32 } %1094, ptr %1096, 2
  %1098 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 3
  %1099 = load i32, ptr %1098, align 4
  %1100 = insertvalue { ptr, ptr, ptr, i32 } %1097, i32 %1099, 3
  %1101 = call ptr @llvm.invariant.start.p0(i64 0, ptr %83)
  %1102 = call ptr @llvm.invariant.start.p0(i64 64, ptr %1090)
  %1103 = getelementptr ptr, ptr %1090, i32 %1099
  %1104 = getelementptr ptr, ptr %1103, i32 4
  %1105 = load ptr, ptr %1104, align 8
  %1106 = call ptr @behavior_wrapper(ptr %1105, { ptr, ptr, ptr, i32 } %1100, ptr %84)
  call void %1106({ ptr, ptr, ptr, i32 } %1100, { ptr, ptr, ptr, i32 } %1100, ptr %83)
  store ptr @Integer, ptr %85, align 8
  %1107 = load ptr, ptr %85, align 8
  %1108 = getelementptr ptr, ptr %1107, i32 6
  %1109 = load ptr, ptr %1108, align 8
  %1110 = call { i64, i64 } @size_wrapper(ptr %1109, ptr %85)
  %1111 = extractvalue { i64, i64 } %1110, 0
  %1112 = call ptr @bump_malloc(i64 %1111)
  %1113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 1
  %1114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 3
  store ptr @Integer, ptr %86, align 8
  store ptr %1112, ptr %1113, align 8
  store i32 9, ptr %1114, align 4
  %1115 = call ptr @llvm.invariant.start.p0(i64 16, ptr %86)
  %1116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 0
  %1117 = load ptr, ptr %1116, align 8
  %1118 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1117, 0
  %1119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 1
  %1120 = load ptr, ptr %1119, align 8
  %1121 = insertvalue { ptr, ptr, ptr, i32 } %1118, ptr %1120, 1
  %1122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 2
  %1123 = load ptr, ptr %1122, align 8
  %1124 = insertvalue { ptr, ptr, ptr, i32 } %1121, ptr %1123, 2
  %1125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 3
  %1126 = load i32, ptr %1125, align 4
  %1127 = insertvalue { ptr, ptr, ptr, i32 } %1124, i32 %1126, 3
  %1128 = getelementptr [1 x ptr], ptr %87, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1128, align 8
  %1129 = call ptr @llvm.invariant.start.p0(i64 1, ptr %87)
  %1130 = call ptr @llvm.invariant.start.p0(i64 104, ptr %1117)
  %1131 = getelementptr ptr, ptr %1117, i32 %1126
  %1132 = getelementptr ptr, ptr %1131, i32 1
  %1133 = load ptr, ptr %1132, align 8
  %1134 = getelementptr { ptr }, ptr %88, i32 0, i32 0
  store ptr @i32_typ, ptr %1134, align 8
  %1135 = call ptr @behavior_wrapper(ptr %1133, { ptr, ptr, ptr, i32 } %1127, ptr %88)
  call void %1135({ ptr, ptr, ptr, i32 } %1127, { ptr, ptr, ptr, i32 } %1127, ptr %87, i32 89)
  %1136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 0
  %1137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %89, i32 0, i32 0
  %1138 = load ptr, ptr %1136, align 8
  store ptr %1138, ptr %1137, align 8
  %1139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 1
  %1140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %89, i32 0, i32 1
  %1141 = load ptr, ptr %1139, align 8
  store ptr %1141, ptr %1140, align 8
  %1142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 2
  %1143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %89, i32 0, i32 2
  %1144 = load ptr, ptr %1142, align 8
  store ptr %1144, ptr %1143, align 8
  %1145 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 3
  %1146 = getelementptr { ptr, ptr, ptr, i32 }, ptr %89, i32 0, i32 3
  %1147 = load i32, ptr %1145, align 4
  store i32 %1147, ptr %1146, align 4
  call void @set_offset(ptr %89, ptr @Integer)
  %1148 = getelementptr { ptr, ptr, ptr, i32 }, ptr %89, i32 0, i32 0
  %1149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 0
  %1150 = load ptr, ptr %1148, align 8
  store ptr %1150, ptr %1149, align 8
  %1151 = getelementptr { ptr, ptr, ptr, i32 }, ptr %89, i32 0, i32 1
  %1152 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 1
  %1153 = load ptr, ptr %1151, align 8
  store ptr %1153, ptr %1152, align 8
  %1154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %89, i32 0, i32 2
  %1155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 2
  %1156 = load ptr, ptr %1154, align 8
  store ptr %1156, ptr %1155, align 8
  %1157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %89, i32 0, i32 3
  %1158 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 3
  %1159 = load i32, ptr %1157, align 4
  store i32 %1159, ptr %1158, align 4
  %1160 = call ptr @llvm.invariant.start.p0(i64 16, ptr %90)
  %1161 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 0
  %1162 = load ptr, ptr %1161, align 8
  %1163 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1162, 0
  %1164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 1
  %1165 = load ptr, ptr %1164, align 8
  %1166 = insertvalue { ptr, ptr, ptr, i32 } %1163, ptr %1165, 1
  %1167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 2
  %1168 = load ptr, ptr %1167, align 8
  %1169 = insertvalue { ptr, ptr, ptr, i32 } %1166, ptr %1168, 2
  %1170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %90, i32 0, i32 3
  %1171 = load i32, ptr %1170, align 4
  %1172 = insertvalue { ptr, ptr, ptr, i32 } %1169, i32 %1171, 3
  %1173 = getelementptr [1 x ptr], ptr %91, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1173, align 8
  %1174 = call ptr @llvm.invariant.start.p0(i64 1, ptr %91)
  %1175 = call ptr @llvm.invariant.start.p0(i64 104, ptr %1162)
  %1176 = getelementptr ptr, ptr %1162, i32 %1171
  %1177 = getelementptr ptr, ptr %1176, i32 3
  %1178 = load ptr, ptr %1177, align 8
  %1179 = getelementptr { ptr }, ptr %92, i32 0, i32 0
  store ptr @i32_typ, ptr %1179, align 8
  %1180 = call ptr @behavior_wrapper(ptr %1178, { ptr, ptr, ptr, i32 } %1172, ptr %92)
  %1181 = call { ptr, ptr, ptr, i32 } %1180({ ptr, ptr, ptr, i32 } %1172, { ptr, ptr, ptr, i32 } %1172, ptr %91, i32 7)
  store { ptr, ptr, ptr, i32 } %1181, ptr %93, align 8
  %1182 = call ptr @llvm.invariant.start.p0(i64 16, ptr %93)
  %1183 = getelementptr { ptr, ptr, ptr, i32 }, ptr %93, i32 0, i32 0
  %1184 = getelementptr { ptr, ptr, ptr, i32 }, ptr %94, i32 0, i32 0
  %1185 = load ptr, ptr %1183, align 8
  store ptr %1185, ptr %1184, align 8
  %1186 = getelementptr { ptr, ptr, ptr, i32 }, ptr %93, i32 0, i32 1
  %1187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %94, i32 0, i32 1
  %1188 = load ptr, ptr %1186, align 8
  store ptr %1188, ptr %1187, align 8
  %1189 = getelementptr { ptr, ptr, ptr, i32 }, ptr %93, i32 0, i32 2
  %1190 = getelementptr { ptr, ptr, ptr, i32 }, ptr %94, i32 0, i32 2
  %1191 = load ptr, ptr %1189, align 8
  store ptr %1191, ptr %1190, align 8
  %1192 = getelementptr { ptr, ptr, ptr, i32 }, ptr %93, i32 0, i32 3
  %1193 = getelementptr { ptr, ptr, ptr, i32 }, ptr %94, i32 0, i32 3
  %1194 = load i32, ptr %1192, align 4
  store i32 %1194, ptr %1193, align 4
  call void @set_offset(ptr %94, ptr @Integer)
  %1195 = getelementptr { ptr, ptr, ptr, i32 }, ptr %94, i32 0, i32 0
  %1196 = load ptr, ptr %1195, align 8
  %1197 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1196, 0
  %1198 = getelementptr { ptr, ptr, ptr, i32 }, ptr %94, i32 0, i32 1
  %1199 = load ptr, ptr %1198, align 8
  %1200 = insertvalue { ptr, ptr, ptr, i32 } %1197, ptr %1199, 1
  %1201 = getelementptr { ptr, ptr, ptr, i32 }, ptr %94, i32 0, i32 2
  %1202 = load ptr, ptr %1201, align 8
  %1203 = insertvalue { ptr, ptr, ptr, i32 } %1200, ptr %1202, 2
  %1204 = getelementptr { ptr, ptr, ptr, i32 }, ptr %94, i32 0, i32 3
  %1205 = load i32, ptr %1204, align 4
  %1206 = insertvalue { ptr, ptr, ptr, i32 } %1203, i32 %1205, 3
  %1207 = call ptr @llvm.invariant.start.p0(i64 0, ptr %95)
  %1208 = call ptr @llvm.invariant.start.p0(i64 104, ptr %1196)
  %1209 = getelementptr ptr, ptr %1196, i32 %1205
  %1210 = getelementptr ptr, ptr %1209, i32 6
  %1211 = load ptr, ptr %1210, align 8
  %1212 = call ptr @behavior_wrapper(ptr %1211, { ptr, ptr, ptr, i32 } %1206, ptr %96)
  call void %1212({ ptr, ptr, ptr, i32 } %1206, { ptr, ptr, ptr, i32 } %1206, ptr %95)
  %1213 = getelementptr [1 x ptr], ptr %97, i32 0, i32 0
  store ptr @_parameterization_Ptrf64, ptr %1213, align 8
  %1214 = call ptr @llvm.invariant.start.p0(i64 1, ptr %97)
  %1215 = call ptr @llvm.invariant.start.p0(i64 136, ptr @Math)
  %1216 = load ptr, ptr getelementptr (ptr, ptr @Math, i32 9), align 8
  %1217 = getelementptr { ptr }, ptr %98, i32 0, i32 0
  store ptr @f64_typ, ptr %1217, align 8
  %1218 = call ptr @class_behavior_wrapper(ptr %1216, ptr %98)
  %1219 = call double %1218(ptr %97, double 9.000000e+00)
  store i32 -9, ptr %99, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %100, align 4
  %1220 = load ptr, ptr %100, align 8
  %1221 = insertvalue { ptr, i64 } undef, ptr %1220, 0
  %1222 = load i64, ptr %99, align 4
  %1223 = insertvalue { ptr, i64 } %1221, i64 %1222, 1
  %1224 = getelementptr [1 x ptr], ptr %101, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1224, align 8
  %1225 = call ptr @llvm.invariant.start.p0(i64 1, ptr %101)
  %1226 = call ptr @llvm.invariant.start.p0(i64 136, ptr @Math)
  %1227 = load ptr, ptr getelementptr (ptr, ptr getelementptr (ptr, ptr @Math, i32 9), i32 1), align 8
  %1228 = getelementptr { ptr }, ptr %102, i32 0, i32 0
  store ptr %1220, ptr %1228, align 8
  %1229 = call ptr @class_behavior_wrapper(ptr %1227, ptr %102)
  %1230 = call { ptr, i64 } %1229(ptr %101, { ptr, i64 } %1223)
  store { ptr, i64 } %1230, ptr %103, align 8
  %1231 = getelementptr { ptr, i64 }, ptr %103, i32 0, i32 1
  %1232 = load i32, ptr %1231, align 4
  store i32 %1232, ptr %104, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %105, align 4
  %1233 = load ptr, ptr %105, align 8
  %1234 = insertvalue { ptr, i160 } undef, ptr %1233, 0
  %1235 = load i160, ptr %104, align 4
  %1236 = insertvalue { ptr, i160 } %1234, i160 %1235, 1
  %1237 = getelementptr [1 x ptr], ptr %106, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1237, align 8
  %1238 = call ptr @llvm.invariant.start.p0(i64 1, ptr %106)
  %1239 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1240 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %1241 = getelementptr { ptr }, ptr %107, i32 0, i32 0
  store ptr %1233, ptr %1241, align 8
  %1242 = call ptr @class_behavior_wrapper(ptr %1240, ptr %107)
  call void %1242(ptr %106, { ptr, i160 } %1236)
  store double %1219, ptr %108, align 8
  store i64 ptrtoint (ptr @f64_typ to i64), ptr %109, align 4
  %1243 = load ptr, ptr %109, align 8
  %1244 = insertvalue { ptr, i160 } undef, ptr %1243, 0
  %1245 = load i160, ptr %108, align 4
  %1246 = insertvalue { ptr, i160 } %1244, i160 %1245, 1
  %1247 = getelementptr [1 x ptr], ptr %110, i32 0, i32 0
  store ptr @_parameterization_Ptrf64, ptr %1247, align 8
  %1248 = call ptr @llvm.invariant.start.p0(i64 1, ptr %110)
  %1249 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1250 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %1251 = getelementptr { ptr }, ptr %111, i32 0, i32 0
  store ptr %1243, ptr %1251, align 8
  %1252 = call ptr @class_behavior_wrapper(ptr %1250, ptr %111)
  call void %1252(ptr %110, { ptr, i160 } %1246)
  %1253 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 0
  %1254 = load ptr, ptr %1253, align 8
  %1255 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1254, 0
  %1256 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 1
  %1257 = load ptr, ptr %1256, align 8
  %1258 = insertvalue { ptr, ptr, ptr, i32 } %1255, ptr %1257, 1
  %1259 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 2
  %1260 = load ptr, ptr %1259, align 8
  %1261 = insertvalue { ptr, ptr, ptr, i32 } %1258, ptr %1260, 2
  %1262 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 3
  %1263 = load i32, ptr %1262, align 4
  %1264 = insertvalue { ptr, ptr, ptr, i32 } %1261, i32 %1263, 3
  call void @make_em_speak({ ptr, ptr, ptr, i32 } %1264)
  %1265 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 0
  %1266 = load ptr, ptr %1265, align 8
  %1267 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1266, 0
  %1268 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 1
  %1269 = load ptr, ptr %1268, align 8
  %1270 = insertvalue { ptr, ptr, ptr, i32 } %1267, ptr %1269, 1
  %1271 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 2
  %1272 = load ptr, ptr %1271, align 8
  %1273 = insertvalue { ptr, ptr, ptr, i32 } %1270, ptr %1272, 2
  %1274 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 3
  %1275 = load i32, ptr %1274, align 4
  %1276 = insertvalue { ptr, ptr, ptr, i32 } %1273, i32 %1275, 3
  %1277 = call ptr @llvm.invariant.start.p0(i64 0, ptr %112)
  %1278 = call ptr @llvm.invariant.start.p0(i64 104, ptr %1266)
  %1279 = getelementptr ptr, ptr %1266, i32 %1275
  %1280 = getelementptr ptr, ptr %1279, i32 7
  %1281 = load ptr, ptr %1280, align 8
  %1282 = call ptr @behavior_wrapper(ptr %1281, { ptr, ptr, ptr, i32 } %1276, ptr %113)
  %1283 = call { ptr, i160 } %1282({ ptr, ptr, ptr, i32 } %1276, { ptr, ptr, ptr, i32 } %1276, ptr %112)
  store i32 5, ptr %114, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %115, align 4
  br label %1284

1284:                                             ; preds = %._crit_edge2, %0
  %1285 = load ptr, ptr %115, align 8
  %1286 = ptrtoint ptr %1285 to i64
  %1287 = icmp eq i64 %1286, ptrtoint (ptr @i32_typ to i64)
  store i1 %1287, ptr %.reg2mem114, align 1
  %.reload116 = load i1, ptr %.reg2mem114, align 1
  br i1 %.reload116, label %1288, label %._crit_edge

._crit_edge:                                      ; preds = %1284
  br label %1368

1288:                                             ; preds = %1284
  %1289 = load i32, ptr %114, align 4
  store i32 %1289, ptr %116, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %117, align 4
  %1290 = load ptr, ptr %117, align 8
  %1291 = insertvalue { ptr, i160 } undef, ptr %1290, 0
  %1292 = load i160, ptr %116, align 4
  %1293 = insertvalue { ptr, i160 } %1291, i160 %1292, 1
  %1294 = getelementptr [1 x ptr], ptr %118, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1294, align 8
  %1295 = call ptr @llvm.invariant.start.p0(i64 1, ptr %118)
  %1296 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1297 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %1298 = getelementptr { ptr }, ptr %119, i32 0, i32 0
  store ptr %1290, ptr %1298, align 8
  %1299 = call ptr @class_behavior_wrapper(ptr %1297, ptr %119)
  call void %1299(ptr %118, { ptr, i160 } %1293)
  %1300 = add i32 %1289, 1
  %1301 = icmp eq i32 %1300, 9
  store i32 %1300, ptr %120, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %121, align 4
  br i1 %1301, label %1302, label %._crit_edge1

._crit_edge1:                                     ; preds = %1288
  br label %1365

1302:                                             ; preds = %1288
  store ptr @Animal, ptr %122, align 8
  %1303 = load ptr, ptr %122, align 8
  %1304 = getelementptr ptr, ptr %1303, i32 6
  %1305 = load ptr, ptr %1304, align 8
  %1306 = call { i64, i64 } @size_wrapper(ptr %1305, ptr %122)
  %1307 = extractvalue { i64, i64 } %1306, 0
  %1308 = call ptr @bump_malloc(i64 %1307)
  %1309 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 1
  %1310 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 3
  store ptr @Animal, ptr %123, align 8
  store ptr %1308, ptr %1309, align 8
  store i32 9, ptr %1310, align 4
  %1311 = call ptr @llvm.invariant.start.p0(i64 16, ptr %123)
  %1312 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 0
  %1313 = load ptr, ptr %1312, align 8
  %1314 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1313, 0
  %1315 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 1
  %1316 = load ptr, ptr %1315, align 8
  %1317 = insertvalue { ptr, ptr, ptr, i32 } %1314, ptr %1316, 1
  %1318 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 2
  %1319 = load ptr, ptr %1318, align 8
  %1320 = insertvalue { ptr, ptr, ptr, i32 } %1317, ptr %1319, 2
  %1321 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 3
  %1322 = load i32, ptr %1321, align 4
  %1323 = insertvalue { ptr, ptr, ptr, i32 } %1320, i32 %1322, 3
  %1324 = getelementptr [3 x ptr], ptr %124, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1324, align 8
  %1325 = getelementptr [3 x ptr], ptr %124, i32 0, i32 1
  store ptr @_parameterization_Ptrf64, ptr %1325, align 8
  %1326 = getelementptr [3 x ptr], ptr %124, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %1326, align 8
  %1327 = call ptr @llvm.invariant.start.p0(i64 9, ptr %124)
  %1328 = call ptr @llvm.invariant.start.p0(i64 104, ptr %1313)
  %1329 = getelementptr ptr, ptr %1313, i32 %1322
  %1330 = getelementptr ptr, ptr %1329, i32 3
  %1331 = load ptr, ptr %1330, align 8
  %1332 = getelementptr { ptr, ptr, ptr }, ptr %125, i32 0, i32 0
  store ptr @i32_typ, ptr %1332, align 8
  %1333 = getelementptr { ptr, ptr, ptr }, ptr %125, i32 0, i32 1
  store ptr @f64_typ, ptr %1333, align 8
  %1334 = getelementptr { ptr, ptr, ptr }, ptr %125, i32 0, i32 2
  store ptr @i32_typ, ptr %1334, align 8
  %1335 = call ptr @behavior_wrapper(ptr %1331, { ptr, ptr, ptr, i32 } %1323, ptr %125)
  call void %1335({ ptr, ptr, ptr, i32 } %1323, { ptr, ptr, ptr, i32 } %1323, ptr %124, i32 65, double 1.800000e+01, i32 23)
  %1336 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 0
  %1337 = getelementptr { ptr, ptr, ptr, i32 }, ptr %126, i32 0, i32 0
  %1338 = load ptr, ptr %1336, align 8
  store ptr %1338, ptr %1337, align 8
  %1339 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 1
  %1340 = getelementptr { ptr, ptr, ptr, i32 }, ptr %126, i32 0, i32 1
  %1341 = load ptr, ptr %1339, align 8
  store ptr %1341, ptr %1340, align 8
  %1342 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 2
  %1343 = getelementptr { ptr, ptr, ptr, i32 }, ptr %126, i32 0, i32 2
  %1344 = load ptr, ptr %1342, align 8
  store ptr %1344, ptr %1343, align 8
  %1345 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 3
  %1346 = getelementptr { ptr, ptr, ptr, i32 }, ptr %126, i32 0, i32 3
  %1347 = load i32, ptr %1345, align 4
  store i32 %1347, ptr %1346, align 4
  call void @set_offset(ptr %126, ptr @Animal)
  %1348 = getelementptr { ptr, ptr, ptr, i32 }, ptr %126, i32 0, i32 0
  %1349 = getelementptr { ptr, ptr, ptr, i32 }, ptr %127, i32 0, i32 0
  %1350 = load ptr, ptr %1348, align 8
  store ptr %1350, ptr %1349, align 8
  %1351 = getelementptr { ptr, ptr, ptr, i32 }, ptr %126, i32 0, i32 1
  %1352 = getelementptr { ptr, ptr, ptr, i32 }, ptr %127, i32 0, i32 1
  %1353 = load ptr, ptr %1351, align 8
  store ptr %1353, ptr %1352, align 8
  %1354 = getelementptr { ptr, ptr, ptr, i32 }, ptr %126, i32 0, i32 2
  %1355 = getelementptr { ptr, ptr, ptr, i32 }, ptr %127, i32 0, i32 2
  %1356 = load ptr, ptr %1354, align 8
  store ptr %1356, ptr %1355, align 8
  %1357 = getelementptr { ptr, ptr, ptr, i32 }, ptr %126, i32 0, i32 3
  %1358 = getelementptr { ptr, ptr, ptr, i32 }, ptr %127, i32 0, i32 3
  %1359 = load i32, ptr %1357, align 4
  store i32 %1359, ptr %1358, align 4
  %1360 = call ptr @llvm.invariant.start.p0(i64 16, ptr %127)
  %1361 = getelementptr { ptr, i160 }, ptr %127, i32 0, i32 0
  %1362 = load ptr, ptr %1361, align 8
  store ptr %1362, ptr %121, align 8
  %1363 = getelementptr { ptr, i160 }, ptr %127, i32 0, i32 1
  %1364 = load i160, ptr %1363, align 4
  store i160 %1364, ptr %120, align 4
  br label %1365

1365:                                             ; preds = %._crit_edge1, %1302
  %1366 = load ptr, ptr %121, align 8
  store ptr %1366, ptr %115, align 8
  %1367 = load i160, ptr %120, align 4
  store i160 %1367, ptr %114, align 4
  br label %1368

1368:                                             ; preds = %._crit_edge, %1365
  %.reload115 = load i1, ptr %.reg2mem114, align 1
  br i1 %.reload115, label %._crit_edge2, label %1369

._crit_edge2:                                     ; preds = %1368
  br label %1284

1369:                                             ; preds = %1368
  %1370 = load ptr, ptr %115, align 8
  %1371 = ptrtoint ptr %1370 to i64
  %1372 = icmp eq i64 %1371, ptrtoint (ptr @i32_typ to i64)
  br i1 %1372, label %1373, label %._crit_edge3

._crit_edge3:                                     ; preds = %1369
  br label %1387

1373:                                             ; preds = %1369
  %1374 = load i32, ptr %114, align 4
  store i32 %1374, ptr %128, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %129, align 4
  %1375 = load ptr, ptr %129, align 8
  %1376 = insertvalue { ptr, i160 } undef, ptr %1375, 0
  %1377 = load i160, ptr %128, align 4
  %1378 = insertvalue { ptr, i160 } %1376, i160 %1377, 1
  %1379 = getelementptr [1 x ptr], ptr %130, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1379, align 8
  %1380 = call ptr @llvm.invariant.start.p0(i64 1, ptr %130)
  %1381 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1382 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %1383 = getelementptr { ptr }, ptr %131, i32 0, i32 0
  store ptr %1375, ptr %1383, align 8
  %1384 = call ptr @class_behavior_wrapper(ptr %1382, ptr %131)
  call void %1384(ptr %130, { ptr, i160 } %1378)
  store i32 %1374, ptr %132, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %133, align 4
  %1385 = load ptr, ptr %133, align 8
  store ptr %1385, ptr %115, align 8
  %1386 = load i160, ptr %132, align 4
  store i160 %1386, ptr %114, align 4
  br label %1387

1387:                                             ; preds = %._crit_edge3, %1373
  %1388 = load ptr, ptr %115, align 8
  %1389 = getelementptr { [3 x i64], [3 x ptr] }, ptr %1388, i32 0, i32 0, i32 1
  %1390 = getelementptr { [3 x i64], [3 x ptr] }, ptr %1388, i32 0, i32 0, i32 2
  %1391 = getelementptr { [3 x i64], [3 x ptr] }, ptr %1388, i32 0, i32 1, i32 0
  %1392 = getelementptr { [3 x i64], [3 x ptr] }, ptr %1388, i32 0, i32 1, i32 1
  %1393 = load i64, ptr %1389, align 4
  %1394 = load i64, ptr %1390, align 4
  %1395 = load ptr, ptr %1391, align 8
  %1396 = load ptr, ptr %1392, align 8
  %1397 = load i64, ptr @Animal, align 4
  %1398 = call i1 @subtype_test_wrapper(ptr %1395, i64 %1394, i64 %1393, i64 %1397, i64 ptrtoint (ptr @Animal to i64), ptr %1396)
  br i1 %1398, label %1399, label %._crit_edge4

._crit_edge4:                                     ; preds = %1387
  br label %1420

1399:                                             ; preds = %1387
  %1400 = getelementptr { ptr, i160 }, ptr %134, i32 0, i32 0
  %1401 = load ptr, ptr %115, align 8
  store ptr %1401, ptr %1400, align 8
  %1402 = getelementptr { ptr, i160 }, ptr %134, i32 0, i32 1
  %1403 = load i160, ptr %114, align 4
  store i160 %1403, ptr %1402, align 4
  call void @set_offset(ptr %134, ptr @Animal)
  %1404 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 0
  %1405 = load ptr, ptr %1404, align 8
  %1406 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1405, 0
  %1407 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 1
  %1408 = load ptr, ptr %1407, align 8
  %1409 = insertvalue { ptr, ptr, ptr, i32 } %1406, ptr %1408, 1
  %1410 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 2
  %1411 = load ptr, ptr %1410, align 8
  %1412 = insertvalue { ptr, ptr, ptr, i32 } %1409, ptr %1411, 2
  %1413 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 3
  %1414 = load i32, ptr %1413, align 4
  %1415 = insertvalue { ptr, ptr, ptr, i32 } %1412, i32 %1414, 3
  call void @make_em_speak({ ptr, ptr, ptr, i32 } %1415)
  %1416 = getelementptr { ptr, i160 }, ptr %134, i32 0, i32 0
  %1417 = load ptr, ptr %1416, align 8
  store ptr %1417, ptr %115, align 8
  %1418 = getelementptr { ptr, i160 }, ptr %134, i32 0, i32 1
  %1419 = load i160, ptr %1418, align 4
  store i160 %1419, ptr %114, align 4
  br label %1420

1420:                                             ; preds = %._crit_edge4, %1399
  %1421 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 0
  %1422 = load ptr, ptr %1421, align 8
  %1423 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1422, 0
  %1424 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 1
  %1425 = load ptr, ptr %1424, align 8
  %1426 = insertvalue { ptr, ptr, ptr, i32 } %1423, ptr %1425, 1
  %1427 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 2
  %1428 = load ptr, ptr %1427, align 8
  %1429 = insertvalue { ptr, ptr, ptr, i32 } %1426, ptr %1428, 2
  %1430 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 3
  %1431 = load i32, ptr %1430, align 4
  %1432 = insertvalue { ptr, ptr, ptr, i32 } %1429, i32 %1431, 3
  %1433 = call ptr @llvm.invariant.start.p0(i64 0, ptr %135)
  %1434 = call ptr @llvm.invariant.start.p0(i64 104, ptr %1422)
  %1435 = getelementptr ptr, ptr %1422, i32 %1431
  %1436 = getelementptr ptr, ptr %1435, i32 5
  %1437 = load ptr, ptr %1436, align 8
  %1438 = call ptr @behavior_wrapper(ptr %1437, { ptr, ptr, ptr, i32 } %1432, ptr %136)
  call void %1438({ ptr, ptr, ptr, i32 } %1432, { ptr, ptr, ptr, i32 } %1432, ptr %135)
  store ptr @ListNode, ptr %137, align 8
  %1439 = load ptr, ptr %137, align 8
  %1440 = getelementptr ptr, ptr %1439, i32 6
  %1441 = load ptr, ptr %1440, align 8
  %1442 = call { i64, i64 } @size_wrapper(ptr %1441, ptr %137)
  %1443 = extractvalue { i64, i64 } %1442, 0
  %1444 = call ptr @bump_malloc(i64 %1443)
  %1445 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 1
  %1446 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 3
  store ptr @ListNode, ptr %138, align 8
  store ptr %1444, ptr %1445, align 8
  store i32 9, ptr %1446, align 4
  %1447 = call ptr @llvm.invariant.start.p0(i64 16, ptr %138)
  %1448 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 0
  %1449 = load ptr, ptr %1448, align 8
  %1450 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1449, 0
  %1451 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 1
  %1452 = load ptr, ptr %1451, align 8
  %1453 = insertvalue { ptr, ptr, ptr, i32 } %1450, ptr %1452, 1
  %1454 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 2
  %1455 = load ptr, ptr %1454, align 8
  %1456 = insertvalue { ptr, ptr, ptr, i32 } %1453, ptr %1455, 2
  %1457 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 3
  %1458 = load i32, ptr %1457, align 4
  %1459 = insertvalue { ptr, ptr, ptr, i32 } %1456, i32 %1458, 3
  %1460 = getelementptr [1 x ptr], ptr %139, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1460, align 8
  %1461 = call ptr @llvm.invariant.start.p0(i64 1, ptr %139)
  %1462 = call ptr @llvm.invariant.start.p0(i64 96, ptr %1449)
  %1463 = getelementptr ptr, ptr %1449, i32 %1458
  %1464 = getelementptr ptr, ptr %1463, i32 2
  %1465 = load ptr, ptr %1464, align 8
  %1466 = getelementptr { ptr }, ptr %140, i32 0, i32 0
  store ptr @i32_typ, ptr %1466, align 8
  %1467 = call ptr @behavior_wrapper(ptr %1465, { ptr, ptr, ptr, i32 } %1459, ptr %140)
  call void %1467({ ptr, ptr, ptr, i32 } %1459, { ptr, ptr, ptr, i32 } %1459, ptr %139, i32 0)
  %1468 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 0
  %1469 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 0
  %1470 = load ptr, ptr %1468, align 8
  store ptr %1470, ptr %1469, align 8
  %1471 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 1
  %1472 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 1
  %1473 = load ptr, ptr %1471, align 8
  store ptr %1473, ptr %1472, align 8
  %1474 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 2
  %1475 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 2
  %1476 = load ptr, ptr %1474, align 8
  store ptr %1476, ptr %1475, align 8
  %1477 = getelementptr { ptr, ptr, ptr, i32 }, ptr %138, i32 0, i32 3
  %1478 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 3
  %1479 = load i32, ptr %1477, align 4
  store i32 %1479, ptr %1478, align 4
  call void @set_offset(ptr %141, ptr @ListNode)
  %1480 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 0
  %1481 = getelementptr { ptr, ptr, ptr, i32 }, ptr %142, i32 0, i32 0
  %1482 = load ptr, ptr %1480, align 8
  store ptr %1482, ptr %1481, align 8
  %1483 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 1
  %1484 = getelementptr { ptr, ptr, ptr, i32 }, ptr %142, i32 0, i32 1
  %1485 = load ptr, ptr %1483, align 8
  store ptr %1485, ptr %1484, align 8
  %1486 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 2
  %1487 = getelementptr { ptr, ptr, ptr, i32 }, ptr %142, i32 0, i32 2
  %1488 = load ptr, ptr %1486, align 8
  store ptr %1488, ptr %1487, align 8
  %1489 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 3
  %1490 = getelementptr { ptr, ptr, ptr, i32 }, ptr %142, i32 0, i32 3
  %1491 = load i32, ptr %1489, align 4
  store i32 %1491, ptr %1490, align 4
  %1492 = call ptr @llvm.invariant.start.p0(i64 16, ptr %142)
  %1493 = getelementptr { ptr, ptr, ptr, i32 }, ptr %142, i32 0, i32 0
  %1494 = getelementptr { ptr, ptr, ptr, i32 }, ptr %143, i32 0, i32 0
  %1495 = load ptr, ptr %1493, align 8
  store ptr %1495, ptr %1494, align 8
  %1496 = getelementptr { ptr, ptr, ptr, i32 }, ptr %142, i32 0, i32 1
  %1497 = getelementptr { ptr, ptr, ptr, i32 }, ptr %143, i32 0, i32 1
  %1498 = load ptr, ptr %1496, align 8
  store ptr %1498, ptr %1497, align 8
  %1499 = getelementptr { ptr, ptr, ptr, i32 }, ptr %142, i32 0, i32 2
  %1500 = getelementptr { ptr, ptr, ptr, i32 }, ptr %143, i32 0, i32 2
  %1501 = load ptr, ptr %1499, align 8
  store ptr %1501, ptr %1500, align 8
  %1502 = getelementptr { ptr, ptr, ptr, i32 }, ptr %142, i32 0, i32 3
  %1503 = getelementptr { ptr, ptr, ptr, i32 }, ptr %143, i32 0, i32 3
  %1504 = load i32, ptr %1502, align 4
  store i32 %1504, ptr %1503, align 4
  call void @set_offset(ptr %143, ptr @ListNode)
  %1505 = getelementptr { ptr, ptr, ptr, i32 }, ptr %143, i32 0, i32 0
  %1506 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 0
  %1507 = load ptr, ptr %1505, align 8
  store ptr %1507, ptr %1506, align 8
  %1508 = getelementptr { ptr, ptr, ptr, i32 }, ptr %143, i32 0, i32 1
  %1509 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 1
  %1510 = load ptr, ptr %1508, align 8
  store ptr %1510, ptr %1509, align 8
  %1511 = getelementptr { ptr, ptr, ptr, i32 }, ptr %143, i32 0, i32 2
  %1512 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 2
  %1513 = load ptr, ptr %1511, align 8
  store ptr %1513, ptr %1512, align 8
  %1514 = getelementptr { ptr, ptr, ptr, i32 }, ptr %143, i32 0, i32 3
  %1515 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 3
  %1516 = load i32, ptr %1514, align 4
  store i32 %1516, ptr %1515, align 4
  %1517 = call ptr @llvm.invariant.start.p0(i64 16, ptr %144)
  store ptr @Range, ptr %145, align 8
  %1518 = load ptr, ptr %145, align 8
  %1519 = getelementptr ptr, ptr %1518, i32 6
  %1520 = load ptr, ptr %1519, align 8
  %1521 = call { i64, i64 } @size_wrapper(ptr %1520, ptr %145)
  %1522 = extractvalue { i64, i64 } %1521, 0
  %1523 = call ptr @bump_malloc(i64 %1522)
  %1524 = getelementptr { ptr, ptr, ptr, i32 }, ptr %146, i32 0, i32 1
  %1525 = getelementptr { ptr, ptr, ptr, i32 }, ptr %146, i32 0, i32 3
  store ptr @Range, ptr %146, align 8
  store ptr %1523, ptr %1524, align 8
  store i32 9, ptr %1525, align 4
  %1526 = call ptr @llvm.invariant.start.p0(i64 16, ptr %146)
  %1527 = getelementptr { ptr, ptr, ptr, i32 }, ptr %146, i32 0, i32 0
  %1528 = load ptr, ptr %1527, align 8
  %1529 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1528, 0
  %1530 = getelementptr { ptr, ptr, ptr, i32 }, ptr %146, i32 0, i32 1
  %1531 = load ptr, ptr %1530, align 8
  %1532 = insertvalue { ptr, ptr, ptr, i32 } %1529, ptr %1531, 1
  %1533 = getelementptr { ptr, ptr, ptr, i32 }, ptr %146, i32 0, i32 2
  %1534 = load ptr, ptr %1533, align 8
  %1535 = insertvalue { ptr, ptr, ptr, i32 } %1532, ptr %1534, 2
  %1536 = getelementptr { ptr, ptr, ptr, i32 }, ptr %146, i32 0, i32 3
  %1537 = load i32, ptr %1536, align 4
  %1538 = insertvalue { ptr, ptr, ptr, i32 } %1535, i32 %1537, 3
  %1539 = getelementptr [2 x ptr], ptr %147, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1539, align 8
  %1540 = getelementptr [2 x ptr], ptr %147, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %1540, align 8
  %1541 = call ptr @llvm.invariant.start.p0(i64 4, ptr %147)
  %1542 = call ptr @llvm.invariant.start.p0(i64 456, ptr %1528)
  %1543 = getelementptr ptr, ptr %1528, i32 %1537
  %1544 = getelementptr ptr, ptr %1543, i32 4
  %1545 = load ptr, ptr %1544, align 8
  %1546 = getelementptr { ptr, ptr }, ptr %148, i32 0, i32 0
  store ptr @i32_typ, ptr %1546, align 8
  %1547 = getelementptr { ptr, ptr }, ptr %148, i32 0, i32 1
  store ptr @i32_typ, ptr %1547, align 8
  %1548 = call ptr @behavior_wrapper(ptr %1545, { ptr, ptr, ptr, i32 } %1538, ptr %148)
  call void %1548({ ptr, ptr, ptr, i32 } %1538, { ptr, ptr, ptr, i32 } %1538, ptr %147, i32 1, i32 10)
  %1549 = getelementptr { ptr, ptr, ptr, i32 }, ptr %146, i32 0, i32 0
  %1550 = load ptr, ptr %1549, align 8
  %1551 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1550, 0
  %1552 = getelementptr { ptr, ptr, ptr, i32 }, ptr %146, i32 0, i32 1
  %1553 = load ptr, ptr %1552, align 8
  %1554 = insertvalue { ptr, ptr, ptr, i32 } %1551, ptr %1553, 1
  %1555 = getelementptr { ptr, ptr, ptr, i32 }, ptr %146, i32 0, i32 2
  %1556 = load ptr, ptr %1555, align 8
  %1557 = insertvalue { ptr, ptr, ptr, i32 } %1554, ptr %1556, 2
  %1558 = getelementptr { ptr, ptr, ptr, i32 }, ptr %146, i32 0, i32 3
  %1559 = load i32, ptr %1558, align 4
  %1560 = insertvalue { ptr, ptr, ptr, i32 } %1557, i32 %1559, 3
  %1561 = call ptr @llvm.invariant.start.p0(i64 0, ptr %149)
  %1562 = call ptr @llvm.invariant.start.p0(i64 456, ptr %1550)
  %1563 = getelementptr ptr, ptr %1550, i32 %1559
  %1564 = getelementptr ptr, ptr %1563, i32 16
  %1565 = load ptr, ptr %1564, align 8
  %1566 = call ptr @behavior_wrapper(ptr %1565, { ptr, ptr, ptr, i32 } %1560, ptr %150)
  %1567 = call { ptr, ptr, ptr, i32 } %1566({ ptr, ptr, ptr, i32 } %1560, { ptr, ptr, ptr, i32 } %1560, ptr %149)
  store { ptr, ptr, ptr, i32 } %1567, ptr %151, align 8
  %1568 = call ptr @llvm.invariant.start.p0(i64 16, ptr %151)
  %1569 = getelementptr { ptr, ptr, ptr, i32 }, ptr %151, i32 0, i32 0
  %1570 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 0
  %1571 = load ptr, ptr %1569, align 8
  store ptr %1571, ptr %1570, align 8
  %1572 = getelementptr { ptr, ptr, ptr, i32 }, ptr %151, i32 0, i32 1
  %1573 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 1
  %1574 = load ptr, ptr %1572, align 8
  store ptr %1574, ptr %1573, align 8
  %1575 = getelementptr { ptr, ptr, ptr, i32 }, ptr %151, i32 0, i32 2
  %1576 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 2
  %1577 = load ptr, ptr %1575, align 8
  store ptr %1577, ptr %1576, align 8
  %1578 = getelementptr { ptr, ptr, ptr, i32 }, ptr %151, i32 0, i32 3
  %1579 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 3
  %1580 = load i32, ptr %1578, align 4
  store i32 %1580, ptr %1579, align 4
  call void @set_offset(ptr %152, ptr @RangeIterator)
  %1581 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 0
  %1582 = getelementptr { ptr, ptr, ptr, i32 }, ptr %153, i32 0, i32 0
  %1583 = load ptr, ptr %1581, align 8
  store ptr %1583, ptr %1582, align 8
  %1584 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 1
  %1585 = getelementptr { ptr, ptr, ptr, i32 }, ptr %153, i32 0, i32 1
  %1586 = load ptr, ptr %1584, align 8
  store ptr %1586, ptr %1585, align 8
  %1587 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 2
  %1588 = getelementptr { ptr, ptr, ptr, i32 }, ptr %153, i32 0, i32 2
  %1589 = load ptr, ptr %1587, align 8
  store ptr %1589, ptr %1588, align 8
  %1590 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 3
  %1591 = getelementptr { ptr, ptr, ptr, i32 }, ptr %153, i32 0, i32 3
  %1592 = load i32, ptr %1590, align 4
  store i32 %1592, ptr %1591, align 4
  call void @set_offset(ptr %153, ptr @RangeIterator)
  %1593 = getelementptr { ptr, ptr, ptr, i32 }, ptr %153, i32 0, i32 0
  %1594 = getelementptr { ptr, ptr, ptr, i32 }, ptr %154, i32 0, i32 0
  %1595 = load ptr, ptr %1593, align 8
  store ptr %1595, ptr %1594, align 8
  %1596 = getelementptr { ptr, ptr, ptr, i32 }, ptr %153, i32 0, i32 1
  %1597 = getelementptr { ptr, ptr, ptr, i32 }, ptr %154, i32 0, i32 1
  %1598 = load ptr, ptr %1596, align 8
  store ptr %1598, ptr %1597, align 8
  %1599 = getelementptr { ptr, ptr, ptr, i32 }, ptr %153, i32 0, i32 2
  %1600 = getelementptr { ptr, ptr, ptr, i32 }, ptr %154, i32 0, i32 2
  %1601 = load ptr, ptr %1599, align 8
  store ptr %1601, ptr %1600, align 8
  %1602 = getelementptr { ptr, ptr, ptr, i32 }, ptr %153, i32 0, i32 3
  %1603 = getelementptr { ptr, ptr, ptr, i32 }, ptr %154, i32 0, i32 3
  %1604 = load i32, ptr %1602, align 4
  store i32 %1604, ptr %1603, align 4
  %1605 = call ptr @llvm.invariant.start.p0(i64 16, ptr %154)
  %1606 = getelementptr { ptr, ptr, ptr, i32 }, ptr %154, i32 0, i32 0
  store ptr %1606, ptr %.reg2mem112, align 8
  %1607 = getelementptr { ptr, ptr, ptr, i32 }, ptr %154, i32 0, i32 1
  store ptr %1607, ptr %.reg2mem110, align 8
  %1608 = getelementptr { ptr, ptr, ptr, i32 }, ptr %154, i32 0, i32 2
  store ptr %1608, ptr %.reg2mem108, align 8
  %1609 = getelementptr { ptr, ptr, ptr, i32 }, ptr %154, i32 0, i32 3
  store ptr %1609, ptr %.reg2mem106, align 8
  %1610 = getelementptr { ptr, i32 }, ptr %157, i32 0, i32 0
  store ptr %1610, ptr %.reg2mem104, align 8
  br label %1611

1611:                                             ; preds = %._crit_edge6, %1420
  %.reload113 = load ptr, ptr %.reg2mem112, align 8
  %1612 = load ptr, ptr %.reload113, align 8
  %1613 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1612, 0
  %.reload111 = load ptr, ptr %.reg2mem110, align 8
  %1614 = load ptr, ptr %.reload111, align 8
  %1615 = insertvalue { ptr, ptr, ptr, i32 } %1613, ptr %1614, 1
  %.reload109 = load ptr, ptr %.reg2mem108, align 8
  %1616 = load ptr, ptr %.reload109, align 8
  %1617 = insertvalue { ptr, ptr, ptr, i32 } %1615, ptr %1616, 2
  %.reload107 = load ptr, ptr %.reg2mem106, align 8
  %1618 = load i32, ptr %.reload107, align 4
  %1619 = insertvalue { ptr, ptr, ptr, i32 } %1617, i32 %1618, 3
  %1620 = call ptr @llvm.invariant.start.p0(i64 0, ptr %155)
  %1621 = call ptr @llvm.invariant.start.p0(i64 72, ptr %1612)
  %1622 = getelementptr ptr, ptr %1612, i32 %1618
  %1623 = getelementptr ptr, ptr %1622, i32 4
  %1624 = load ptr, ptr %1623, align 8
  %1625 = call ptr @behavior_wrapper(ptr %1624, { ptr, ptr, ptr, i32 } %1619, ptr %156)
  %1626 = call { ptr, i32 } %1625({ ptr, ptr, ptr, i32 } %1619, { ptr, ptr, ptr, i32 } %1619, ptr %155)
  store { ptr, i32 } %1626, ptr %157, align 8
  %.reload105 = load ptr, ptr %.reg2mem104, align 8
  %1627 = load ptr, ptr %.reload105, align 8
  %1628 = ptrtoint ptr %1627 to i64
  %1629 = icmp eq i64 %1628, ptrtoint (ptr @nil_typ to i64)
  %1630 = icmp eq i64 %1628, 0
  %1631 = or i1 %1629, %1630
  %1632 = icmp eq i1 %1631, false
  store i1 %1632, ptr %.reg2mem101, align 1
  %.reload103 = load i1, ptr %.reg2mem101, align 1
  br i1 %.reload103, label %1633, label %._crit_edge5

._crit_edge5:                                     ; preds = %1611
  br label %1747

1633:                                             ; preds = %1611
  %1634 = getelementptr { ptr, i32 }, ptr %157, i32 0, i32 1
  %1635 = load i32, ptr %1634, align 4
  store ptr @ListNode, ptr %158, align 8
  %1636 = load ptr, ptr %158, align 8
  %1637 = getelementptr ptr, ptr %1636, i32 6
  %1638 = load ptr, ptr %1637, align 8
  %1639 = call { i64, i64 } @size_wrapper(ptr %1638, ptr %158)
  %1640 = extractvalue { i64, i64 } %1639, 0
  %1641 = call ptr @bump_malloc(i64 %1640)
  %1642 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 1
  %1643 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 3
  store ptr @ListNode, ptr %159, align 8
  store ptr %1641, ptr %1642, align 8
  store i32 9, ptr %1643, align 4
  %1644 = call ptr @llvm.invariant.start.p0(i64 16, ptr %159)
  %1645 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 0
  %1646 = load ptr, ptr %1645, align 8
  %1647 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1646, 0
  %1648 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 1
  %1649 = load ptr, ptr %1648, align 8
  %1650 = insertvalue { ptr, ptr, ptr, i32 } %1647, ptr %1649, 1
  %1651 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 2
  %1652 = load ptr, ptr %1651, align 8
  %1653 = insertvalue { ptr, ptr, ptr, i32 } %1650, ptr %1652, 2
  %1654 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 3
  %1655 = load i32, ptr %1654, align 4
  %1656 = insertvalue { ptr, ptr, ptr, i32 } %1653, i32 %1655, 3
  %1657 = getelementptr [1 x ptr], ptr %160, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1657, align 8
  %1658 = call ptr @llvm.invariant.start.p0(i64 1, ptr %160)
  %1659 = call ptr @llvm.invariant.start.p0(i64 96, ptr %1646)
  %1660 = getelementptr ptr, ptr %1646, i32 %1655
  %1661 = getelementptr ptr, ptr %1660, i32 2
  %1662 = load ptr, ptr %1661, align 8
  %1663 = getelementptr { ptr }, ptr %161, i32 0, i32 0
  store ptr @i32_typ, ptr %1663, align 8
  %1664 = call ptr @behavior_wrapper(ptr %1662, { ptr, ptr, ptr, i32 } %1656, ptr %161)
  call void %1664({ ptr, ptr, ptr, i32 } %1656, { ptr, ptr, ptr, i32 } %1656, ptr %160, i32 %1635)
  %1665 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 0
  %1666 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 0
  %1667 = load ptr, ptr %1665, align 8
  store ptr %1667, ptr %1666, align 8
  %1668 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 1
  %1669 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 1
  %1670 = load ptr, ptr %1668, align 8
  store ptr %1670, ptr %1669, align 8
  %1671 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 2
  %1672 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 2
  %1673 = load ptr, ptr %1671, align 8
  store ptr %1673, ptr %1672, align 8
  %1674 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 3
  %1675 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 3
  %1676 = load i32, ptr %1674, align 4
  store i32 %1676, ptr %1675, align 4
  call void @set_offset(ptr %162, ptr @ListNode)
  %1677 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 0
  %1678 = load ptr, ptr %1677, align 8
  %1679 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1678, 0
  %1680 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 1
  %1681 = load ptr, ptr %1680, align 8
  %1682 = insertvalue { ptr, ptr, ptr, i32 } %1679, ptr %1681, 1
  %1683 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 2
  %1684 = load ptr, ptr %1683, align 8
  %1685 = insertvalue { ptr, ptr, ptr, i32 } %1682, ptr %1684, 2
  %1686 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 3
  %1687 = load i32, ptr %1686, align 4
  %1688 = insertvalue { ptr, ptr, ptr, i32 } %1685, i32 %1687, 3
  %1689 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 0
  %1690 = load ptr, ptr %1689, align 8
  %1691 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1690, 0
  %1692 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 1
  %1693 = load ptr, ptr %1692, align 8
  %1694 = insertvalue { ptr, ptr, ptr, i32 } %1691, ptr %1693, 1
  %1695 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 2
  %1696 = load ptr, ptr %1695, align 8
  %1697 = insertvalue { ptr, ptr, ptr, i32 } %1694, ptr %1696, 2
  %1698 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 3
  %1699 = load i32, ptr %1698, align 4
  %1700 = insertvalue { ptr, ptr, ptr, i32 } %1697, i32 %1699, 3
  %1701 = getelementptr [1 x ptr], ptr %163, i32 0, i32 0
  store ptr @_parameterization_ListNode, ptr %1701, align 8
  %1702 = call ptr @llvm.invariant.start.p0(i64 1, ptr %163)
  %1703 = call ptr @llvm.invariant.start.p0(i64 96, ptr %1690)
  %1704 = getelementptr ptr, ptr %1690, i32 %1699
  %1705 = getelementptr ptr, ptr %1704, i32 3
  %1706 = load ptr, ptr %1705, align 8
  %1707 = getelementptr { ptr }, ptr %164, i32 0, i32 0
  store ptr %1678, ptr %1707, align 8
  %1708 = call ptr @behavior_wrapper(ptr %1706, { ptr, ptr, ptr, i32 } %1700, ptr %164)
  %1709 = call { ptr, ptr, ptr, i32 } %1708({ ptr, ptr, ptr, i32 } %1700, { ptr, ptr, ptr, i32 } %1700, ptr %163, { ptr, ptr, ptr, i32 } %1688)
  store { ptr, ptr, ptr, i32 } %1709, ptr %165, align 8
  %1710 = call ptr @llvm.invariant.start.p0(i64 16, ptr %165)
  %1711 = getelementptr { ptr, ptr, ptr, i32 }, ptr %165, i32 0, i32 0
  %1712 = getelementptr { ptr, ptr, ptr, i32 }, ptr %166, i32 0, i32 0
  %1713 = load ptr, ptr %1711, align 8
  store ptr %1713, ptr %1712, align 8
  %1714 = getelementptr { ptr, ptr, ptr, i32 }, ptr %165, i32 0, i32 1
  %1715 = getelementptr { ptr, ptr, ptr, i32 }, ptr %166, i32 0, i32 1
  %1716 = load ptr, ptr %1714, align 8
  store ptr %1716, ptr %1715, align 8
  %1717 = getelementptr { ptr, ptr, ptr, i32 }, ptr %165, i32 0, i32 2
  %1718 = getelementptr { ptr, ptr, ptr, i32 }, ptr %166, i32 0, i32 2
  %1719 = load ptr, ptr %1717, align 8
  store ptr %1719, ptr %1718, align 8
  %1720 = getelementptr { ptr, ptr, ptr, i32 }, ptr %165, i32 0, i32 3
  %1721 = getelementptr { ptr, ptr, ptr, i32 }, ptr %166, i32 0, i32 3
  %1722 = load i32, ptr %1720, align 4
  store i32 %1722, ptr %1721, align 4
  call void @set_offset(ptr %166, ptr @ListNode)
  %1723 = getelementptr { ptr, ptr, ptr, i32 }, ptr %166, i32 0, i32 0
  %1724 = getelementptr { ptr, ptr, ptr, i32 }, ptr %167, i32 0, i32 0
  %1725 = load ptr, ptr %1723, align 8
  store ptr %1725, ptr %1724, align 8
  %1726 = getelementptr { ptr, ptr, ptr, i32 }, ptr %166, i32 0, i32 1
  %1727 = getelementptr { ptr, ptr, ptr, i32 }, ptr %167, i32 0, i32 1
  %1728 = load ptr, ptr %1726, align 8
  store ptr %1728, ptr %1727, align 8
  %1729 = getelementptr { ptr, ptr, ptr, i32 }, ptr %166, i32 0, i32 2
  %1730 = getelementptr { ptr, ptr, ptr, i32 }, ptr %167, i32 0, i32 2
  %1731 = load ptr, ptr %1729, align 8
  store ptr %1731, ptr %1730, align 8
  %1732 = getelementptr { ptr, ptr, ptr, i32 }, ptr %166, i32 0, i32 3
  %1733 = getelementptr { ptr, ptr, ptr, i32 }, ptr %167, i32 0, i32 3
  %1734 = load i32, ptr %1732, align 4
  store i32 %1734, ptr %1733, align 4
  call void @set_offset(ptr %167, ptr @ListNode)
  %1735 = getelementptr { ptr, ptr, ptr, i32 }, ptr %167, i32 0, i32 0
  %1736 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 0
  %1737 = load ptr, ptr %1735, align 8
  store ptr %1737, ptr %1736, align 8
  %1738 = getelementptr { ptr, ptr, ptr, i32 }, ptr %167, i32 0, i32 1
  %1739 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 1
  %1740 = load ptr, ptr %1738, align 8
  store ptr %1740, ptr %1739, align 8
  %1741 = getelementptr { ptr, ptr, ptr, i32 }, ptr %167, i32 0, i32 2
  %1742 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 2
  %1743 = load ptr, ptr %1741, align 8
  store ptr %1743, ptr %1742, align 8
  %1744 = getelementptr { ptr, ptr, ptr, i32 }, ptr %167, i32 0, i32 3
  %1745 = getelementptr { ptr, ptr, ptr, i32 }, ptr %144, i32 0, i32 3
  %1746 = load i32, ptr %1744, align 4
  store i32 %1746, ptr %1745, align 4
  store i32 %1635, ptr %157, align 4
  br label %1747

1747:                                             ; preds = %._crit_edge5, %1633
  %.reload102 = load i1, ptr %.reg2mem101, align 1
  br i1 %.reload102, label %._crit_edge6, label %1748

._crit_edge6:                                     ; preds = %1747
  br label %1611

1748:                                             ; preds = %1747
  %1749 = getelementptr { ptr, ptr, ptr, i32 }, ptr %142, i32 0, i32 0
  %1750 = load ptr, ptr %1749, align 8
  %1751 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1750, 0
  %1752 = getelementptr { ptr, ptr, ptr, i32 }, ptr %142, i32 0, i32 1
  %1753 = load ptr, ptr %1752, align 8
  %1754 = insertvalue { ptr, ptr, ptr, i32 } %1751, ptr %1753, 1
  %1755 = getelementptr { ptr, ptr, ptr, i32 }, ptr %142, i32 0, i32 2
  %1756 = load ptr, ptr %1755, align 8
  %1757 = insertvalue { ptr, ptr, ptr, i32 } %1754, ptr %1756, 2
  %1758 = getelementptr { ptr, ptr, ptr, i32 }, ptr %142, i32 0, i32 3
  %1759 = load i32, ptr %1758, align 4
  %1760 = insertvalue { ptr, ptr, ptr, i32 } %1757, i32 %1759, 3
  %1761 = call ptr @llvm.invariant.start.p0(i64 0, ptr %168)
  %1762 = call ptr @llvm.invariant.start.p0(i64 96, ptr %1750)
  %1763 = getelementptr ptr, ptr %1750, i32 %1759
  %1764 = getelementptr ptr, ptr %1763, i32 5
  %1765 = load ptr, ptr %1764, align 8
  %1766 = call ptr @behavior_wrapper(ptr %1765, { ptr, ptr, ptr, i32 } %1760, ptr %169)
  %1767 = call i32 %1766({ ptr, ptr, ptr, i32 } %1760, { ptr, ptr, ptr, i32 } %1760, ptr %168)
  store i32 %1767, ptr %170, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %171, align 4
  %1768 = load ptr, ptr %171, align 8
  %1769 = insertvalue { ptr, i160 } undef, ptr %1768, 0
  %1770 = load i160, ptr %170, align 4
  %1771 = insertvalue { ptr, i160 } %1769, i160 %1770, 1
  %1772 = getelementptr [1 x ptr], ptr %172, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1772, align 8
  %1773 = call ptr @llvm.invariant.start.p0(i64 1, ptr %172)
  %1774 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1775 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %1776 = getelementptr { ptr }, ptr %173, i32 0, i32 0
  store ptr %1768, ptr %1776, align 8
  %1777 = call ptr @class_behavior_wrapper(ptr %1775, ptr %173)
  call void %1777(ptr %172, { ptr, i160 } %1771)
  %1778 = getelementptr { ptr, ptr, ptr, i32 }, ptr %142, i32 0, i32 0
  %1779 = load ptr, ptr %1778, align 8
  %1780 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1779, 0
  %1781 = getelementptr { ptr, ptr, ptr, i32 }, ptr %142, i32 0, i32 1
  %1782 = load ptr, ptr %1781, align 8
  %1783 = insertvalue { ptr, ptr, ptr, i32 } %1780, ptr %1782, 1
  %1784 = getelementptr { ptr, ptr, ptr, i32 }, ptr %142, i32 0, i32 2
  %1785 = load ptr, ptr %1784, align 8
  %1786 = insertvalue { ptr, ptr, ptr, i32 } %1783, ptr %1785, 2
  %1787 = getelementptr { ptr, ptr, ptr, i32 }, ptr %142, i32 0, i32 3
  %1788 = load i32, ptr %1787, align 4
  %1789 = insertvalue { ptr, ptr, ptr, i32 } %1786, i32 %1788, 3
  %1790 = call ptr @llvm.invariant.start.p0(i64 0, ptr %174)
  %1791 = call ptr @llvm.invariant.start.p0(i64 96, ptr %1779)
  %1792 = getelementptr ptr, ptr %1779, i32 %1788
  %1793 = getelementptr ptr, ptr %1792, i32 6
  %1794 = load ptr, ptr %1793, align 8
  %1795 = call ptr @behavior_wrapper(ptr %1794, { ptr, ptr, ptr, i32 } %1789, ptr %175)
  %1796 = call { ptr, ptr, ptr, i32 } %1795({ ptr, ptr, ptr, i32 } %1789, { ptr, ptr, ptr, i32 } %1789, ptr %174)
  store { ptr, ptr, ptr, i32 } %1796, ptr %176, align 8
  %1797 = call ptr @llvm.invariant.start.p0(i64 16, ptr %176)
  %1798 = getelementptr { ptr, ptr, ptr, i32 }, ptr %176, i32 0, i32 0
  %1799 = getelementptr { ptr, ptr, ptr, i32 }, ptr %177, i32 0, i32 0
  %1800 = load ptr, ptr %1798, align 8
  store ptr %1800, ptr %1799, align 8
  %1801 = getelementptr { ptr, ptr, ptr, i32 }, ptr %176, i32 0, i32 1
  %1802 = getelementptr { ptr, ptr, ptr, i32 }, ptr %177, i32 0, i32 1
  %1803 = load ptr, ptr %1801, align 8
  store ptr %1803, ptr %1802, align 8
  %1804 = getelementptr { ptr, ptr, ptr, i32 }, ptr %176, i32 0, i32 2
  %1805 = getelementptr { ptr, ptr, ptr, i32 }, ptr %177, i32 0, i32 2
  %1806 = load ptr, ptr %1804, align 8
  store ptr %1806, ptr %1805, align 8
  %1807 = getelementptr { ptr, ptr, ptr, i32 }, ptr %176, i32 0, i32 3
  %1808 = getelementptr { ptr, ptr, ptr, i32 }, ptr %177, i32 0, i32 3
  %1809 = load i32, ptr %1807, align 4
  store i32 %1809, ptr %1808, align 4
  call void @set_offset(ptr %177, ptr @ListIterator)
  %1810 = getelementptr { ptr, ptr, ptr, i32 }, ptr %177, i32 0, i32 0
  %1811 = getelementptr { ptr, ptr, ptr, i32 }, ptr %178, i32 0, i32 0
  %1812 = load ptr, ptr %1810, align 8
  store ptr %1812, ptr %1811, align 8
  %1813 = getelementptr { ptr, ptr, ptr, i32 }, ptr %177, i32 0, i32 1
  %1814 = getelementptr { ptr, ptr, ptr, i32 }, ptr %178, i32 0, i32 1
  %1815 = load ptr, ptr %1813, align 8
  store ptr %1815, ptr %1814, align 8
  %1816 = getelementptr { ptr, ptr, ptr, i32 }, ptr %177, i32 0, i32 2
  %1817 = getelementptr { ptr, ptr, ptr, i32 }, ptr %178, i32 0, i32 2
  %1818 = load ptr, ptr %1816, align 8
  store ptr %1818, ptr %1817, align 8
  %1819 = getelementptr { ptr, ptr, ptr, i32 }, ptr %177, i32 0, i32 3
  %1820 = getelementptr { ptr, ptr, ptr, i32 }, ptr %178, i32 0, i32 3
  %1821 = load i32, ptr %1819, align 4
  store i32 %1821, ptr %1820, align 4
  call void @set_offset(ptr %178, ptr @ListIterator)
  %1822 = getelementptr { ptr, ptr, ptr, i32 }, ptr %178, i32 0, i32 0
  %1823 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 0
  %1824 = load ptr, ptr %1822, align 8
  store ptr %1824, ptr %1823, align 8
  %1825 = getelementptr { ptr, ptr, ptr, i32 }, ptr %178, i32 0, i32 1
  %1826 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 1
  %1827 = load ptr, ptr %1825, align 8
  store ptr %1827, ptr %1826, align 8
  %1828 = getelementptr { ptr, ptr, ptr, i32 }, ptr %178, i32 0, i32 2
  %1829 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 2
  %1830 = load ptr, ptr %1828, align 8
  store ptr %1830, ptr %1829, align 8
  %1831 = getelementptr { ptr, ptr, ptr, i32 }, ptr %178, i32 0, i32 3
  %1832 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 3
  %1833 = load i32, ptr %1831, align 4
  store i32 %1833, ptr %1832, align 4
  %1834 = call ptr @llvm.invariant.start.p0(i64 16, ptr %179)
  %1835 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 0
  store ptr %1835, ptr %.reg2mem99, align 8
  %1836 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 1
  store ptr %1836, ptr %.reg2mem97, align 8
  %1837 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 2
  store ptr %1837, ptr %.reg2mem95, align 8
  %1838 = getelementptr { ptr, ptr, ptr, i32 }, ptr %179, i32 0, i32 3
  store ptr %1838, ptr %.reg2mem93, align 8
  %1839 = getelementptr { ptr, i160 }, ptr %182, i32 0, i32 0
  store ptr %1839, ptr %.reg2mem91, align 8
  br label %1840

1840:                                             ; preds = %._crit_edge8, %1748
  %.reload100 = load ptr, ptr %.reg2mem99, align 8
  %1841 = load ptr, ptr %.reload100, align 8
  %1842 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1841, 0
  %.reload98 = load ptr, ptr %.reg2mem97, align 8
  %1843 = load ptr, ptr %.reload98, align 8
  %1844 = insertvalue { ptr, ptr, ptr, i32 } %1842, ptr %1843, 1
  %.reload96 = load ptr, ptr %.reg2mem95, align 8
  %1845 = load ptr, ptr %.reload96, align 8
  %1846 = insertvalue { ptr, ptr, ptr, i32 } %1844, ptr %1845, 2
  %.reload94 = load ptr, ptr %.reg2mem93, align 8
  %1847 = load i32, ptr %.reload94, align 4
  %1848 = insertvalue { ptr, ptr, ptr, i32 } %1846, i32 %1847, 3
  %1849 = call ptr @llvm.invariant.start.p0(i64 0, ptr %180)
  %1850 = call ptr @llvm.invariant.start.p0(i64 40, ptr %1841)
  %1851 = getelementptr ptr, ptr %1841, i32 %1847
  %1852 = getelementptr ptr, ptr %1851, i32 2
  %1853 = load ptr, ptr %1852, align 8
  %1854 = call ptr @behavior_wrapper(ptr %1853, { ptr, ptr, ptr, i32 } %1848, ptr %181)
  %1855 = call { ptr, i160 } %1854({ ptr, ptr, ptr, i32 } %1848, { ptr, ptr, ptr, i32 } %1848, ptr %180)
  store { ptr, i160 } %1855, ptr %182, align 8
  %.reload92 = load ptr, ptr %.reg2mem91, align 8
  %1856 = load ptr, ptr %.reload92, align 8
  %1857 = ptrtoint ptr %1856 to i64
  %1858 = icmp eq i64 %1857, ptrtoint (ptr @nil_typ to i64)
  %1859 = icmp eq i64 %1857, 0
  %1860 = or i1 %1858, %1859
  %1861 = icmp eq i1 %1860, false
  store i1 %1861, ptr %.reg2mem88, align 1
  %.reload90 = load i1, ptr %.reg2mem88, align 1
  br i1 %.reload90, label %1862, label %._crit_edge7

._crit_edge7:                                     ; preds = %1840
  br label %1922

1862:                                             ; preds = %1840
  %1863 = getelementptr { ptr, i160 }, ptr %182, i32 0, i32 0
  %1864 = getelementptr { ptr, i160 }, ptr %183, i32 0, i32 0
  %1865 = load ptr, ptr %1863, align 8
  store ptr %1865, ptr %1864, align 8
  %1866 = getelementptr { ptr, i160 }, ptr %182, i32 0, i32 1
  %1867 = getelementptr { ptr, i160 }, ptr %183, i32 0, i32 1
  %1868 = load i160, ptr %1866, align 4
  store i160 %1868, ptr %1867, align 4
  call void @set_offset(ptr %183, ptr @ListNode)
  %1869 = getelementptr { ptr, ptr, ptr, i32 }, ptr %183, i32 0, i32 0
  %1870 = load ptr, ptr %1869, align 8
  %1871 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1870, 0
  %1872 = getelementptr { ptr, ptr, ptr, i32 }, ptr %183, i32 0, i32 1
  %1873 = load ptr, ptr %1872, align 8
  %1874 = insertvalue { ptr, ptr, ptr, i32 } %1871, ptr %1873, 1
  %1875 = getelementptr { ptr, ptr, ptr, i32 }, ptr %183, i32 0, i32 2
  %1876 = load ptr, ptr %1875, align 8
  %1877 = insertvalue { ptr, ptr, ptr, i32 } %1874, ptr %1876, 2
  %1878 = getelementptr { ptr, ptr, ptr, i32 }, ptr %183, i32 0, i32 3
  %1879 = load i32, ptr %1878, align 4
  %1880 = insertvalue { ptr, ptr, ptr, i32 } %1877, i32 %1879, 3
  %1881 = call ptr @llvm.invariant.start.p0(i64 0, ptr %184)
  %1882 = call ptr @llvm.invariant.start.p0(i64 96, ptr %1870)
  %1883 = getelementptr ptr, ptr %1870, i32 %1879
  %1884 = getelementptr ptr, ptr %1883, i32 5
  %1885 = load ptr, ptr %1884, align 8
  %1886 = call ptr @behavior_wrapper(ptr %1885, { ptr, ptr, ptr, i32 } %1880, ptr %185)
  %1887 = call i32 %1886({ ptr, ptr, ptr, i32 } %1880, { ptr, ptr, ptr, i32 } %1880, ptr %184)
  store i32 %1887, ptr %186, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %187, align 4
  %1888 = load ptr, ptr %187, align 8
  %1889 = insertvalue { ptr, i160 } undef, ptr %1888, 0
  %1890 = load i160, ptr %186, align 4
  %1891 = insertvalue { ptr, i160 } %1889, i160 %1890, 1
  %1892 = getelementptr [1 x ptr], ptr %188, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1892, align 8
  %1893 = call ptr @llvm.invariant.start.p0(i64 1, ptr %188)
  %1894 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1895 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %1896 = getelementptr { ptr }, ptr %189, i32 0, i32 0
  store ptr %1888, ptr %1896, align 8
  %1897 = call ptr @class_behavior_wrapper(ptr %1895, ptr %189)
  call void %1897(ptr %188, { ptr, i160 } %1891)
  %1898 = getelementptr { ptr, ptr, ptr, i32 }, ptr %183, i32 0, i32 0
  %1899 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 0
  %1900 = load ptr, ptr %1898, align 8
  store ptr %1900, ptr %1899, align 8
  %1901 = getelementptr { ptr, ptr, ptr, i32 }, ptr %183, i32 0, i32 1
  %1902 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 1
  %1903 = load ptr, ptr %1901, align 8
  store ptr %1903, ptr %1902, align 8
  %1904 = getelementptr { ptr, ptr, ptr, i32 }, ptr %183, i32 0, i32 2
  %1905 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 2
  %1906 = load ptr, ptr %1904, align 8
  store ptr %1906, ptr %1905, align 8
  %1907 = getelementptr { ptr, ptr, ptr, i32 }, ptr %183, i32 0, i32 3
  %1908 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 3
  %1909 = load i32, ptr %1907, align 4
  store i32 %1909, ptr %1908, align 4
  call void @set_offset(ptr %190, ptr @ListNode)
  %1910 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 0
  %1911 = getelementptr { ptr, ptr, ptr, i32 }, ptr %182, i32 0, i32 0
  %1912 = load ptr, ptr %1910, align 8
  store ptr %1912, ptr %1911, align 8
  %1913 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 1
  %1914 = getelementptr { ptr, ptr, ptr, i32 }, ptr %182, i32 0, i32 1
  %1915 = load ptr, ptr %1913, align 8
  store ptr %1915, ptr %1914, align 8
  %1916 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 2
  %1917 = getelementptr { ptr, ptr, ptr, i32 }, ptr %182, i32 0, i32 2
  %1918 = load ptr, ptr %1916, align 8
  store ptr %1918, ptr %1917, align 8
  %1919 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 3
  %1920 = getelementptr { ptr, ptr, ptr, i32 }, ptr %182, i32 0, i32 3
  %1921 = load i32, ptr %1919, align 4
  store i32 %1921, ptr %1920, align 4
  br label %1922

1922:                                             ; preds = %._crit_edge7, %1862
  %.reload89 = load i1, ptr %.reg2mem88, align 1
  br i1 %.reload89, label %._crit_edge8, label %1923

._crit_edge8:                                     ; preds = %1922
  br label %1840

1923:                                             ; preds = %1922
  %1924 = call ptr @coroutine_create(ptr @print88, ptr @coroutine_fjtnnnlntu_passer)
  call void @coroutine_fjtnnnlntu_buffer_filler(ptr %1924)
  store ptr %1924, ptr %191, align 8
  %1925 = getelementptr { ptr }, ptr %191, i32 0, i32 0
  %1926 = getelementptr { ptr }, ptr %192, i32 0, i32 0
  %1927 = load ptr, ptr %1925, align 8
  store ptr %1927, ptr %1926, align 8
  %1928 = call ptr @llvm.invariant.start.p0(i64 16, ptr %192)
  %1929 = load ptr, ptr %192, align 8
  call void @coroutine_call(ptr %1929)
  store i32 89, ptr %193, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %194, align 4
  %1930 = load ptr, ptr %194, align 8
  %1931 = insertvalue { ptr, i160 } undef, ptr %1930, 0
  %1932 = load i160, ptr %193, align 4
  %1933 = insertvalue { ptr, i160 } %1931, i160 %1932, 1
  %1934 = getelementptr [1 x ptr], ptr %195, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1934, align 8
  %1935 = call ptr @llvm.invariant.start.p0(i64 1, ptr %195)
  %1936 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1937 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %1938 = getelementptr { ptr }, ptr %196, i32 0, i32 0
  store ptr %1930, ptr %1938, align 8
  %1939 = call ptr @class_behavior_wrapper(ptr %1937, ptr %196)
  call void %1939(ptr %195, { ptr, i160 } %1933)
  %1940 = load ptr, ptr %192, align 8
  call void @coroutine_call(ptr %1940)
  store ptr @Range, ptr %197, align 8
  %1941 = load ptr, ptr %197, align 8
  %1942 = getelementptr ptr, ptr %1941, i32 6
  %1943 = load ptr, ptr %1942, align 8
  %1944 = call { i64, i64 } @size_wrapper(ptr %1943, ptr %197)
  %1945 = extractvalue { i64, i64 } %1944, 0
  %1946 = call ptr @bump_malloc(i64 %1945)
  %1947 = getelementptr { ptr, ptr, ptr, i32 }, ptr %198, i32 0, i32 1
  %1948 = getelementptr { ptr, ptr, ptr, i32 }, ptr %198, i32 0, i32 3
  store ptr @Range, ptr %198, align 8
  store ptr %1946, ptr %1947, align 8
  store i32 9, ptr %1948, align 4
  %1949 = call ptr @llvm.invariant.start.p0(i64 16, ptr %198)
  %1950 = getelementptr { ptr, ptr, ptr, i32 }, ptr %198, i32 0, i32 0
  %1951 = load ptr, ptr %1950, align 8
  %1952 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1951, 0
  %1953 = getelementptr { ptr, ptr, ptr, i32 }, ptr %198, i32 0, i32 1
  %1954 = load ptr, ptr %1953, align 8
  %1955 = insertvalue { ptr, ptr, ptr, i32 } %1952, ptr %1954, 1
  %1956 = getelementptr { ptr, ptr, ptr, i32 }, ptr %198, i32 0, i32 2
  %1957 = load ptr, ptr %1956, align 8
  %1958 = insertvalue { ptr, ptr, ptr, i32 } %1955, ptr %1957, 2
  %1959 = getelementptr { ptr, ptr, ptr, i32 }, ptr %198, i32 0, i32 3
  %1960 = load i32, ptr %1959, align 4
  %1961 = insertvalue { ptr, ptr, ptr, i32 } %1958, i32 %1960, 3
  %1962 = getelementptr [2 x ptr], ptr %199, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1962, align 8
  %1963 = getelementptr [2 x ptr], ptr %199, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %1963, align 8
  %1964 = call ptr @llvm.invariant.start.p0(i64 4, ptr %199)
  %1965 = call ptr @llvm.invariant.start.p0(i64 456, ptr %1951)
  %1966 = getelementptr ptr, ptr %1951, i32 %1960
  %1967 = getelementptr ptr, ptr %1966, i32 4
  %1968 = load ptr, ptr %1967, align 8
  %1969 = getelementptr { ptr, ptr }, ptr %200, i32 0, i32 0
  store ptr @i32_typ, ptr %1969, align 8
  %1970 = getelementptr { ptr, ptr }, ptr %200, i32 0, i32 1
  store ptr @i32_typ, ptr %1970, align 8
  %1971 = call ptr @behavior_wrapper(ptr %1968, { ptr, ptr, ptr, i32 } %1961, ptr %200)
  call void %1971({ ptr, ptr, ptr, i32 } %1961, { ptr, ptr, ptr, i32 } %1961, ptr %199, i32 1, i32 10)
  %1972 = getelementptr { ptr, ptr, ptr, i32 }, ptr %198, i32 0, i32 0
  %1973 = load ptr, ptr %1972, align 8
  %1974 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1973, 0
  %1975 = getelementptr { ptr, ptr, ptr, i32 }, ptr %198, i32 0, i32 1
  %1976 = load ptr, ptr %1975, align 8
  %1977 = insertvalue { ptr, ptr, ptr, i32 } %1974, ptr %1976, 1
  %1978 = getelementptr { ptr, ptr, ptr, i32 }, ptr %198, i32 0, i32 2
  %1979 = load ptr, ptr %1978, align 8
  %1980 = insertvalue { ptr, ptr, ptr, i32 } %1977, ptr %1979, 2
  %1981 = getelementptr { ptr, ptr, ptr, i32 }, ptr %198, i32 0, i32 3
  %1982 = load i32, ptr %1981, align 4
  %1983 = insertvalue { ptr, ptr, ptr, i32 } %1980, i32 %1982, 3
  %1984 = call ptr @llvm.invariant.start.p0(i64 0, ptr %201)
  %1985 = call ptr @llvm.invariant.start.p0(i64 456, ptr %1973)
  %1986 = getelementptr ptr, ptr %1973, i32 %1982
  %1987 = getelementptr ptr, ptr %1986, i32 16
  %1988 = load ptr, ptr %1987, align 8
  %1989 = call ptr @behavior_wrapper(ptr %1988, { ptr, ptr, ptr, i32 } %1983, ptr %202)
  %1990 = call { ptr, ptr, ptr, i32 } %1989({ ptr, ptr, ptr, i32 } %1983, { ptr, ptr, ptr, i32 } %1983, ptr %201)
  store { ptr, ptr, ptr, i32 } %1990, ptr %203, align 8
  %1991 = call ptr @llvm.invariant.start.p0(i64 16, ptr %203)
  %1992 = getelementptr { ptr, ptr, ptr, i32 }, ptr %203, i32 0, i32 0
  %1993 = getelementptr { ptr, ptr, ptr, i32 }, ptr %204, i32 0, i32 0
  %1994 = load ptr, ptr %1992, align 8
  store ptr %1994, ptr %1993, align 8
  %1995 = getelementptr { ptr, ptr, ptr, i32 }, ptr %203, i32 0, i32 1
  %1996 = getelementptr { ptr, ptr, ptr, i32 }, ptr %204, i32 0, i32 1
  %1997 = load ptr, ptr %1995, align 8
  store ptr %1997, ptr %1996, align 8
  %1998 = getelementptr { ptr, ptr, ptr, i32 }, ptr %203, i32 0, i32 2
  %1999 = getelementptr { ptr, ptr, ptr, i32 }, ptr %204, i32 0, i32 2
  %2000 = load ptr, ptr %1998, align 8
  store ptr %2000, ptr %1999, align 8
  %2001 = getelementptr { ptr, ptr, ptr, i32 }, ptr %203, i32 0, i32 3
  %2002 = getelementptr { ptr, ptr, ptr, i32 }, ptr %204, i32 0, i32 3
  %2003 = load i32, ptr %2001, align 4
  store i32 %2003, ptr %2002, align 4
  call void @set_offset(ptr %204, ptr @RangeIterator)
  %2004 = getelementptr { ptr, ptr, ptr, i32 }, ptr %204, i32 0, i32 0
  %2005 = getelementptr { ptr, ptr, ptr, i32 }, ptr %205, i32 0, i32 0
  %2006 = load ptr, ptr %2004, align 8
  store ptr %2006, ptr %2005, align 8
  %2007 = getelementptr { ptr, ptr, ptr, i32 }, ptr %204, i32 0, i32 1
  %2008 = getelementptr { ptr, ptr, ptr, i32 }, ptr %205, i32 0, i32 1
  %2009 = load ptr, ptr %2007, align 8
  store ptr %2009, ptr %2008, align 8
  %2010 = getelementptr { ptr, ptr, ptr, i32 }, ptr %204, i32 0, i32 2
  %2011 = getelementptr { ptr, ptr, ptr, i32 }, ptr %205, i32 0, i32 2
  %2012 = load ptr, ptr %2010, align 8
  store ptr %2012, ptr %2011, align 8
  %2013 = getelementptr { ptr, ptr, ptr, i32 }, ptr %204, i32 0, i32 3
  %2014 = getelementptr { ptr, ptr, ptr, i32 }, ptr %205, i32 0, i32 3
  %2015 = load i32, ptr %2013, align 4
  store i32 %2015, ptr %2014, align 4
  call void @set_offset(ptr %205, ptr @RangeIterator)
  %2016 = getelementptr { ptr, ptr, ptr, i32 }, ptr %205, i32 0, i32 0
  %2017 = getelementptr { ptr, ptr, ptr, i32 }, ptr %206, i32 0, i32 0
  %2018 = load ptr, ptr %2016, align 8
  store ptr %2018, ptr %2017, align 8
  %2019 = getelementptr { ptr, ptr, ptr, i32 }, ptr %205, i32 0, i32 1
  %2020 = getelementptr { ptr, ptr, ptr, i32 }, ptr %206, i32 0, i32 1
  %2021 = load ptr, ptr %2019, align 8
  store ptr %2021, ptr %2020, align 8
  %2022 = getelementptr { ptr, ptr, ptr, i32 }, ptr %205, i32 0, i32 2
  %2023 = getelementptr { ptr, ptr, ptr, i32 }, ptr %206, i32 0, i32 2
  %2024 = load ptr, ptr %2022, align 8
  store ptr %2024, ptr %2023, align 8
  %2025 = getelementptr { ptr, ptr, ptr, i32 }, ptr %205, i32 0, i32 3
  %2026 = getelementptr { ptr, ptr, ptr, i32 }, ptr %206, i32 0, i32 3
  %2027 = load i32, ptr %2025, align 4
  store i32 %2027, ptr %2026, align 4
  %2028 = call ptr @llvm.invariant.start.p0(i64 16, ptr %206)
  %2029 = getelementptr { ptr, ptr, ptr, i32 }, ptr %206, i32 0, i32 0
  store ptr %2029, ptr %.reg2mem86, align 8
  %2030 = getelementptr { ptr, ptr, ptr, i32 }, ptr %206, i32 0, i32 1
  store ptr %2030, ptr %.reg2mem84, align 8
  %2031 = getelementptr { ptr, ptr, ptr, i32 }, ptr %206, i32 0, i32 2
  store ptr %2031, ptr %.reg2mem82, align 8
  %2032 = getelementptr { ptr, ptr, ptr, i32 }, ptr %206, i32 0, i32 3
  store ptr %2032, ptr %.reg2mem80, align 8
  %2033 = getelementptr { ptr, i32 }, ptr %209, i32 0, i32 0
  store ptr %2033, ptr %.reg2mem78, align 8
  br label %2034

2034:                                             ; preds = %._crit_edge9, %1923
  %.reload87 = load ptr, ptr %.reg2mem86, align 8
  %2035 = load ptr, ptr %.reload87, align 8
  %2036 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2035, 0
  %.reload85 = load ptr, ptr %.reg2mem84, align 8
  %2037 = load ptr, ptr %.reload85, align 8
  %2038 = insertvalue { ptr, ptr, ptr, i32 } %2036, ptr %2037, 1
  %.reload83 = load ptr, ptr %.reg2mem82, align 8
  %2039 = load ptr, ptr %.reload83, align 8
  %2040 = insertvalue { ptr, ptr, ptr, i32 } %2038, ptr %2039, 2
  %.reload81 = load ptr, ptr %.reg2mem80, align 8
  %2041 = load i32, ptr %.reload81, align 4
  %2042 = insertvalue { ptr, ptr, ptr, i32 } %2040, i32 %2041, 3
  %2043 = call ptr @llvm.invariant.start.p0(i64 0, ptr %207)
  %2044 = call ptr @llvm.invariant.start.p0(i64 72, ptr %2035)
  %2045 = getelementptr ptr, ptr %2035, i32 %2041
  %2046 = getelementptr ptr, ptr %2045, i32 4
  %2047 = load ptr, ptr %2046, align 8
  %2048 = call ptr @behavior_wrapper(ptr %2047, { ptr, ptr, ptr, i32 } %2042, ptr %208)
  %2049 = call { ptr, i32 } %2048({ ptr, ptr, ptr, i32 } %2042, { ptr, ptr, ptr, i32 } %2042, ptr %207)
  store { ptr, i32 } %2049, ptr %209, align 8
  %.reload79 = load ptr, ptr %.reg2mem78, align 8
  %2050 = load ptr, ptr %.reload79, align 8
  %2051 = ptrtoint ptr %2050 to i64
  %2052 = icmp eq i64 %2051, ptrtoint (ptr @nil_typ to i64)
  %2053 = icmp eq i64 %2051, 0
  %2054 = or i1 %2052, %2053
  %2055 = icmp eq i1 %2054, false
  br i1 %2055, label %2056, label %2075

2056:                                             ; preds = %2034
  %2057 = getelementptr { ptr, i32 }, ptr %209, i32 0, i32 1
  %2058 = load i32, ptr %2057, align 4
  store i32 %2058, ptr %.reg2mem73, align 4
  %.reload77 = load i32, ptr %.reg2mem73, align 4
  %2059 = icmp eq i32 %.reload77, 5
  %.reload76 = load i32, ptr %.reg2mem73, align 4
  %2060 = icmp ne i32 %.reload76, 5
  %2061 = zext i1 %2060 to i32
  store i32 %2061, ptr %.reg2mem71, align 4
  br i1 %2059, label %2062, label %2063

2062:                                             ; preds = %2056
  br label %2074

2063:                                             ; preds = %2056
  %.reload75 = load i32, ptr %.reg2mem73, align 4
  store i32 %.reload75, ptr %210, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %211, align 4
  %2064 = load ptr, ptr %211, align 8
  %2065 = insertvalue { ptr, i160 } undef, ptr %2064, 0
  %2066 = load i160, ptr %210, align 4
  %2067 = insertvalue { ptr, i160 } %2065, i160 %2066, 1
  %2068 = getelementptr [1 x ptr], ptr %212, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %2068, align 8
  %2069 = call ptr @llvm.invariant.start.p0(i64 1, ptr %212)
  %2070 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %2071 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %2072 = getelementptr { ptr }, ptr %213, i32 0, i32 0
  store ptr %2064, ptr %2072, align 8
  %2073 = call ptr @class_behavior_wrapper(ptr %2071, ptr %213)
  call void %2073(ptr %212, { ptr, i160 } %2067)
  %.reload74 = load i32, ptr %.reg2mem73, align 4
  store i32 %.reload74, ptr %209, align 4
  br label %2074

2074:                                             ; preds = %2063, %2062
  %.reload72 = load i32, ptr %.reg2mem71, align 4
  store i32 %.reload72, ptr %.reg2mem117, align 4
  br label %2076

2075:                                             ; preds = %2034
  store i32 0, ptr %.reg2mem117, align 4
  br label %2076

2076:                                             ; preds = %2075, %2074
  %.reload118 = load i32, ptr %.reg2mem117, align 4
  store i32 %.reload118, ptr %.reg2mem69, align 4
  br label %2077

2077:                                             ; preds = %2076
  %.reload70 = load i32, ptr %.reg2mem69, align 4
  %2078 = trunc i32 %.reload70 to i1
  br i1 %2078, label %._crit_edge9, label %2079

._crit_edge9:                                     ; preds = %2077
  br label %2034

2079:                                             ; preds = %2077
  %2080 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), i64 5))
  store ptr %2080, ptr %214, align 8
  %2081 = getelementptr { ptr }, ptr %214, i32 0, i32 0
  %2082 = getelementptr { ptr }, ptr %215, i32 0, i32 0
  %2083 = load ptr, ptr %2081, align 8
  store ptr %2083, ptr %2082, align 8
  %2084 = call ptr @llvm.invariant.start.p0(i64 16, ptr %215)
  store ptr @IntArray, ptr %216, align 8
  %2085 = load ptr, ptr %216, align 8
  %2086 = getelementptr ptr, ptr %2085, i32 6
  %2087 = load ptr, ptr %2086, align 8
  %2088 = call { i64, i64 } @size_wrapper(ptr %2087, ptr %216)
  %2089 = extractvalue { i64, i64 } %2088, 0
  %2090 = call ptr @bump_malloc(i64 %2089)
  %2091 = getelementptr { ptr, ptr, ptr, i32 }, ptr %217, i32 0, i32 1
  %2092 = getelementptr { ptr, ptr, ptr, i32 }, ptr %217, i32 0, i32 3
  store ptr @IntArray, ptr %217, align 8
  store ptr %2090, ptr %2091, align 8
  store i32 9, ptr %2092, align 4
  %2093 = call ptr @llvm.invariant.start.p0(i64 16, ptr %217)
  %2094 = getelementptr { ptr }, ptr %215, i32 0, i32 0
  %2095 = load ptr, ptr %2094, align 8
  %2096 = insertvalue { ptr } undef, ptr %2095, 0
  %2097 = getelementptr { ptr, ptr, ptr, i32 }, ptr %217, i32 0, i32 0
  %2098 = load ptr, ptr %2097, align 8
  %2099 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2098, 0
  %2100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %217, i32 0, i32 1
  %2101 = load ptr, ptr %2100, align 8
  %2102 = insertvalue { ptr, ptr, ptr, i32 } %2099, ptr %2101, 1
  %2103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %217, i32 0, i32 2
  %2104 = load ptr, ptr %2103, align 8
  %2105 = insertvalue { ptr, ptr, ptr, i32 } %2102, ptr %2104, 2
  %2106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %217, i32 0, i32 3
  %2107 = load i32, ptr %2106, align 4
  %2108 = insertvalue { ptr, ptr, ptr, i32 } %2105, i32 %2107, 3
  %2109 = getelementptr [3 x ptr], ptr %218, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %2109, align 8
  %2110 = getelementptr [3 x ptr], ptr %218, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %2110, align 8
  %2111 = getelementptr [3 x ptr], ptr %218, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %2111, align 8
  %2112 = call ptr @llvm.invariant.start.p0(i64 9, ptr %218)
  %2113 = call ptr @llvm.invariant.start.p0(i64 616, ptr %2098)
  %2114 = getelementptr ptr, ptr %2098, i32 %2107
  %2115 = getelementptr ptr, ptr %2114, i32 5
  %2116 = load ptr, ptr %2115, align 8
  %2117 = getelementptr { ptr, ptr, ptr }, ptr %219, i32 0, i32 0
  store ptr @buffer_typ, ptr %2117, align 8
  %2118 = getelementptr { ptr, ptr, ptr }, ptr %219, i32 0, i32 1
  store ptr @i32_typ, ptr %2118, align 8
  %2119 = getelementptr { ptr, ptr, ptr }, ptr %219, i32 0, i32 2
  store ptr @i32_typ, ptr %2119, align 8
  %2120 = call ptr @behavior_wrapper(ptr %2116, { ptr, ptr, ptr, i32 } %2108, ptr %219)
  call void %2120({ ptr, ptr, ptr, i32 } %2108, { ptr, ptr, ptr, i32 } %2108, ptr %218, { ptr } %2096, i32 4, i32 5)
  %2121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %217, i32 0, i32 0
  %2122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %220, i32 0, i32 0
  %2123 = load ptr, ptr %2121, align 8
  store ptr %2123, ptr %2122, align 8
  %2124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %217, i32 0, i32 1
  %2125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %220, i32 0, i32 1
  %2126 = load ptr, ptr %2124, align 8
  store ptr %2126, ptr %2125, align 8
  %2127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %217, i32 0, i32 2
  %2128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %220, i32 0, i32 2
  %2129 = load ptr, ptr %2127, align 8
  store ptr %2129, ptr %2128, align 8
  %2130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %217, i32 0, i32 3
  %2131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %220, i32 0, i32 3
  %2132 = load i32, ptr %2130, align 4
  store i32 %2132, ptr %2131, align 4
  call void @set_offset(ptr %220, ptr @IntArray)
  %2133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %220, i32 0, i32 0
  %2134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %221, i32 0, i32 0
  %2135 = load ptr, ptr %2133, align 8
  store ptr %2135, ptr %2134, align 8
  %2136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %220, i32 0, i32 1
  %2137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %221, i32 0, i32 1
  %2138 = load ptr, ptr %2136, align 8
  store ptr %2138, ptr %2137, align 8
  %2139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %220, i32 0, i32 2
  %2140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %221, i32 0, i32 2
  %2141 = load ptr, ptr %2139, align 8
  store ptr %2141, ptr %2140, align 8
  %2142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %220, i32 0, i32 3
  %2143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %221, i32 0, i32 3
  %2144 = load i32, ptr %2142, align 4
  store i32 %2144, ptr %2143, align 4
  %2145 = call ptr @llvm.invariant.start.p0(i64 16, ptr %221)
  %2146 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), i64 7))
  store ptr %2146, ptr %222, align 8
  %2147 = getelementptr { ptr }, ptr %222, i32 0, i32 0
  %2148 = getelementptr { ptr }, ptr %223, i32 0, i32 0
  %2149 = load ptr, ptr %2147, align 8
  store ptr %2149, ptr %2148, align 8
  %2150 = call ptr @llvm.invariant.start.p0(i64 16, ptr %223)
  store ptr @IntArray, ptr %224, align 8
  %2151 = load ptr, ptr %224, align 8
  %2152 = getelementptr ptr, ptr %2151, i32 6
  %2153 = load ptr, ptr %2152, align 8
  %2154 = call { i64, i64 } @size_wrapper(ptr %2153, ptr %224)
  %2155 = extractvalue { i64, i64 } %2154, 0
  %2156 = call ptr @bump_malloc(i64 %2155)
  %2157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %225, i32 0, i32 1
  %2158 = getelementptr { ptr, ptr, ptr, i32 }, ptr %225, i32 0, i32 3
  store ptr @IntArray, ptr %225, align 8
  store ptr %2156, ptr %2157, align 8
  store i32 9, ptr %2158, align 4
  %2159 = call ptr @llvm.invariant.start.p0(i64 16, ptr %225)
  %2160 = getelementptr { ptr }, ptr %223, i32 0, i32 0
  %2161 = load ptr, ptr %2160, align 8
  %2162 = insertvalue { ptr } undef, ptr %2161, 0
  %2163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %225, i32 0, i32 0
  %2164 = load ptr, ptr %2163, align 8
  %2165 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2164, 0
  %2166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %225, i32 0, i32 1
  %2167 = load ptr, ptr %2166, align 8
  %2168 = insertvalue { ptr, ptr, ptr, i32 } %2165, ptr %2167, 1
  %2169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %225, i32 0, i32 2
  %2170 = load ptr, ptr %2169, align 8
  %2171 = insertvalue { ptr, ptr, ptr, i32 } %2168, ptr %2170, 2
  %2172 = getelementptr { ptr, ptr, ptr, i32 }, ptr %225, i32 0, i32 3
  %2173 = load i32, ptr %2172, align 4
  %2174 = insertvalue { ptr, ptr, ptr, i32 } %2171, i32 %2173, 3
  %2175 = getelementptr [3 x ptr], ptr %226, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %2175, align 8
  %2176 = getelementptr [3 x ptr], ptr %226, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %2176, align 8
  %2177 = getelementptr [3 x ptr], ptr %226, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %2177, align 8
  %2178 = call ptr @llvm.invariant.start.p0(i64 9, ptr %226)
  %2179 = call ptr @llvm.invariant.start.p0(i64 616, ptr %2164)
  %2180 = getelementptr ptr, ptr %2164, i32 %2173
  %2181 = getelementptr ptr, ptr %2180, i32 5
  %2182 = load ptr, ptr %2181, align 8
  %2183 = getelementptr { ptr, ptr, ptr }, ptr %227, i32 0, i32 0
  store ptr @buffer_typ, ptr %2183, align 8
  %2184 = getelementptr { ptr, ptr, ptr }, ptr %227, i32 0, i32 1
  store ptr @i32_typ, ptr %2184, align 8
  %2185 = getelementptr { ptr, ptr, ptr }, ptr %227, i32 0, i32 2
  store ptr @i32_typ, ptr %2185, align 8
  %2186 = call ptr @behavior_wrapper(ptr %2182, { ptr, ptr, ptr, i32 } %2174, ptr %227)
  call void %2186({ ptr, ptr, ptr, i32 } %2174, { ptr, ptr, ptr, i32 } %2174, ptr %226, { ptr } %2162, i32 6, i32 7)
  %2187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %225, i32 0, i32 0
  %2188 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 0
  %2189 = load ptr, ptr %2187, align 8
  store ptr %2189, ptr %2188, align 8
  %2190 = getelementptr { ptr, ptr, ptr, i32 }, ptr %225, i32 0, i32 1
  %2191 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 1
  %2192 = load ptr, ptr %2190, align 8
  store ptr %2192, ptr %2191, align 8
  %2193 = getelementptr { ptr, ptr, ptr, i32 }, ptr %225, i32 0, i32 2
  %2194 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 2
  %2195 = load ptr, ptr %2193, align 8
  store ptr %2195, ptr %2194, align 8
  %2196 = getelementptr { ptr, ptr, ptr, i32 }, ptr %225, i32 0, i32 3
  %2197 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 3
  %2198 = load i32, ptr %2196, align 4
  store i32 %2198, ptr %2197, align 4
  call void @set_offset(ptr %228, ptr @IntArray)
  %2199 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 0
  %2200 = load ptr, ptr %2199, align 8
  %2201 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2200, 0
  %2202 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 1
  %2203 = load ptr, ptr %2202, align 8
  %2204 = insertvalue { ptr, ptr, ptr, i32 } %2201, ptr %2203, 1
  %2205 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 2
  %2206 = load ptr, ptr %2205, align 8
  %2207 = insertvalue { ptr, ptr, ptr, i32 } %2204, ptr %2206, 2
  %2208 = getelementptr { ptr, ptr, ptr, i32 }, ptr %228, i32 0, i32 3
  %2209 = load i32, ptr %2208, align 4
  %2210 = insertvalue { ptr, ptr, ptr, i32 } %2207, i32 %2209, 3
  %2211 = getelementptr { ptr, ptr, ptr, i32 }, ptr %221, i32 0, i32 0
  %2212 = load ptr, ptr %2211, align 8
  %2213 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2212, 0
  %2214 = getelementptr { ptr, ptr, ptr, i32 }, ptr %221, i32 0, i32 1
  %2215 = load ptr, ptr %2214, align 8
  %2216 = insertvalue { ptr, ptr, ptr, i32 } %2213, ptr %2215, 1
  %2217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %221, i32 0, i32 2
  %2218 = load ptr, ptr %2217, align 8
  %2219 = insertvalue { ptr, ptr, ptr, i32 } %2216, ptr %2218, 2
  %2220 = getelementptr { ptr, ptr, ptr, i32 }, ptr %221, i32 0, i32 3
  %2221 = load i32, ptr %2220, align 4
  %2222 = insertvalue { ptr, ptr, ptr, i32 } %2219, i32 %2221, 3
  %2223 = getelementptr [1 x ptr], ptr %229, i32 0, i32 0
  store ptr @_parameterization_IntArray, ptr %2223, align 8
  %2224 = call ptr @llvm.invariant.start.p0(i64 1, ptr %229)
  %2225 = call ptr @llvm.invariant.start.p0(i64 616, ptr %2212)
  %2226 = getelementptr ptr, ptr %2212, i32 %2221
  %2227 = getelementptr ptr, ptr %2226, i32 10
  %2228 = load ptr, ptr %2227, align 8
  %2229 = getelementptr { ptr }, ptr %230, i32 0, i32 0
  store ptr %2200, ptr %2229, align 8
  %2230 = call ptr @behavior_wrapper(ptr %2228, { ptr, ptr, ptr, i32 } %2222, ptr %230)
  %2231 = call { ptr, ptr, ptr, i32 } %2230({ ptr, ptr, ptr, i32 } %2222, { ptr, ptr, ptr, i32 } %2222, ptr %229, { ptr, ptr, ptr, i32 } %2210)
  store { ptr, ptr, ptr, i32 } %2231, ptr %231, align 8
  %2232 = call ptr @llvm.invariant.start.p0(i64 16, ptr %231)
  %2233 = getelementptr { ptr, ptr, ptr, i32 }, ptr %231, i32 0, i32 0
  %2234 = getelementptr { ptr, ptr, ptr, i32 }, ptr %232, i32 0, i32 0
  %2235 = load ptr, ptr %2233, align 8
  store ptr %2235, ptr %2234, align 8
  %2236 = getelementptr { ptr, ptr, ptr, i32 }, ptr %231, i32 0, i32 1
  %2237 = getelementptr { ptr, ptr, ptr, i32 }, ptr %232, i32 0, i32 1
  %2238 = load ptr, ptr %2236, align 8
  store ptr %2238, ptr %2237, align 8
  %2239 = getelementptr { ptr, ptr, ptr, i32 }, ptr %231, i32 0, i32 2
  %2240 = getelementptr { ptr, ptr, ptr, i32 }, ptr %232, i32 0, i32 2
  %2241 = load ptr, ptr %2239, align 8
  store ptr %2241, ptr %2240, align 8
  %2242 = getelementptr { ptr, ptr, ptr, i32 }, ptr %231, i32 0, i32 3
  %2243 = getelementptr { ptr, ptr, ptr, i32 }, ptr %232, i32 0, i32 3
  %2244 = load i32, ptr %2242, align 4
  store i32 %2244, ptr %2243, align 4
  call void @set_offset(ptr %232, ptr @IntArray)
  %2245 = getelementptr { ptr, ptr, ptr, i32 }, ptr %221, i32 0, i32 0
  %2246 = load ptr, ptr %2245, align 8
  %2247 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2246, 0
  %2248 = getelementptr { ptr, ptr, ptr, i32 }, ptr %221, i32 0, i32 1
  %2249 = load ptr, ptr %2248, align 8
  %2250 = insertvalue { ptr, ptr, ptr, i32 } %2247, ptr %2249, 1
  %2251 = getelementptr { ptr, ptr, ptr, i32 }, ptr %221, i32 0, i32 2
  %2252 = load ptr, ptr %2251, align 8
  %2253 = insertvalue { ptr, ptr, ptr, i32 } %2250, ptr %2252, 2
  %2254 = getelementptr { ptr, ptr, ptr, i32 }, ptr %221, i32 0, i32 3
  %2255 = load i32, ptr %2254, align 4
  %2256 = insertvalue { ptr, ptr, ptr, i32 } %2253, i32 %2255, 3
  %2257 = getelementptr [1 x ptr], ptr %233, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %2257, align 8
  %2258 = call ptr @llvm.invariant.start.p0(i64 1, ptr %233)
  %2259 = call ptr @llvm.invariant.start.p0(i64 616, ptr %2246)
  %2260 = getelementptr ptr, ptr %2246, i32 %2255
  %2261 = getelementptr ptr, ptr %2260, i32 11
  %2262 = load ptr, ptr %2261, align 8
  %2263 = getelementptr { ptr }, ptr %234, i32 0, i32 0
  store ptr @i32_typ, ptr %2263, align 8
  %2264 = call ptr @behavior_wrapper(ptr %2262, { ptr, ptr, ptr, i32 } %2256, ptr %234)
  %2265 = call i32 %2264({ ptr, ptr, ptr, i32 } %2256, { ptr, ptr, ptr, i32 } %2256, ptr %233, i32 7)
  store i32 %2265, ptr %235, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %236, align 4
  %2266 = load ptr, ptr %236, align 8
  %2267 = insertvalue { ptr, i160 } undef, ptr %2266, 0
  %2268 = load i160, ptr %235, align 4
  %2269 = insertvalue { ptr, i160 } %2267, i160 %2268, 1
  %2270 = getelementptr [1 x ptr], ptr %237, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %2270, align 8
  %2271 = call ptr @llvm.invariant.start.p0(i64 1, ptr %237)
  %2272 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %2273 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %2274 = getelementptr { ptr }, ptr %238, i32 0, i32 0
  store ptr %2266, ptr %2274, align 8
  %2275 = call ptr @class_behavior_wrapper(ptr %2273, ptr %238)
  call void %2275(ptr %237, { ptr, i160 } %2269)
  %2276 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64))
  store ptr %2276, ptr %239, align 8
  %2277 = getelementptr { ptr }, ptr %239, i32 0, i32 0
  %2278 = getelementptr { ptr }, ptr %240, i32 0, i32 0
  %2279 = load ptr, ptr %2277, align 8
  store ptr %2279, ptr %2278, align 8
  %2280 = call ptr @llvm.invariant.start.p0(i64 16, ptr %240)
  store ptr @IntArray, ptr %241, align 8
  %2281 = load ptr, ptr %241, align 8
  %2282 = getelementptr ptr, ptr %2281, i32 6
  %2283 = load ptr, ptr %2282, align 8
  %2284 = call { i64, i64 } @size_wrapper(ptr %2283, ptr %241)
  %2285 = extractvalue { i64, i64 } %2284, 0
  %2286 = call ptr @bump_malloc(i64 %2285)
  %2287 = getelementptr { ptr, ptr, ptr, i32 }, ptr %242, i32 0, i32 1
  %2288 = getelementptr { ptr, ptr, ptr, i32 }, ptr %242, i32 0, i32 3
  store ptr @IntArray, ptr %242, align 8
  store ptr %2286, ptr %2287, align 8
  store i32 9, ptr %2288, align 4
  %2289 = call ptr @llvm.invariant.start.p0(i64 16, ptr %242)
  %2290 = getelementptr { ptr }, ptr %240, i32 0, i32 0
  %2291 = load ptr, ptr %2290, align 8
  %2292 = insertvalue { ptr } undef, ptr %2291, 0
  %2293 = getelementptr { ptr, ptr, ptr, i32 }, ptr %242, i32 0, i32 0
  %2294 = load ptr, ptr %2293, align 8
  %2295 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2294, 0
  %2296 = getelementptr { ptr, ptr, ptr, i32 }, ptr %242, i32 0, i32 1
  %2297 = load ptr, ptr %2296, align 8
  %2298 = insertvalue { ptr, ptr, ptr, i32 } %2295, ptr %2297, 1
  %2299 = getelementptr { ptr, ptr, ptr, i32 }, ptr %242, i32 0, i32 2
  %2300 = load ptr, ptr %2299, align 8
  %2301 = insertvalue { ptr, ptr, ptr, i32 } %2298, ptr %2300, 2
  %2302 = getelementptr { ptr, ptr, ptr, i32 }, ptr %242, i32 0, i32 3
  %2303 = load i32, ptr %2302, align 4
  %2304 = insertvalue { ptr, ptr, ptr, i32 } %2301, i32 %2303, 3
  %2305 = getelementptr [3 x ptr], ptr %243, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %2305, align 8
  %2306 = getelementptr [3 x ptr], ptr %243, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %2306, align 8
  %2307 = getelementptr [3 x ptr], ptr %243, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %2307, align 8
  %2308 = call ptr @llvm.invariant.start.p0(i64 9, ptr %243)
  %2309 = call ptr @llvm.invariant.start.p0(i64 616, ptr %2294)
  %2310 = getelementptr ptr, ptr %2294, i32 %2303
  %2311 = getelementptr ptr, ptr %2310, i32 5
  %2312 = load ptr, ptr %2311, align 8
  %2313 = getelementptr { ptr, ptr, ptr }, ptr %244, i32 0, i32 0
  store ptr @buffer_typ, ptr %2313, align 8
  %2314 = getelementptr { ptr, ptr, ptr }, ptr %244, i32 0, i32 1
  store ptr @i32_typ, ptr %2314, align 8
  %2315 = getelementptr { ptr, ptr, ptr }, ptr %244, i32 0, i32 2
  store ptr @i32_typ, ptr %2315, align 8
  %2316 = call ptr @behavior_wrapper(ptr %2312, { ptr, ptr, ptr, i32 } %2304, ptr %244)
  call void %2316({ ptr, ptr, ptr, i32 } %2304, { ptr, ptr, ptr, i32 } %2304, ptr %243, { ptr } %2292, i32 0, i32 1)
  %2317 = getelementptr { ptr, ptr, ptr, i32 }, ptr %242, i32 0, i32 0
  %2318 = getelementptr { ptr, ptr, ptr, i32 }, ptr %245, i32 0, i32 0
  %2319 = load ptr, ptr %2317, align 8
  store ptr %2319, ptr %2318, align 8
  %2320 = getelementptr { ptr, ptr, ptr, i32 }, ptr %242, i32 0, i32 1
  %2321 = getelementptr { ptr, ptr, ptr, i32 }, ptr %245, i32 0, i32 1
  %2322 = load ptr, ptr %2320, align 8
  store ptr %2322, ptr %2321, align 8
  %2323 = getelementptr { ptr, ptr, ptr, i32 }, ptr %242, i32 0, i32 2
  %2324 = getelementptr { ptr, ptr, ptr, i32 }, ptr %245, i32 0, i32 2
  %2325 = load ptr, ptr %2323, align 8
  store ptr %2325, ptr %2324, align 8
  %2326 = getelementptr { ptr, ptr, ptr, i32 }, ptr %242, i32 0, i32 3
  %2327 = getelementptr { ptr, ptr, ptr, i32 }, ptr %245, i32 0, i32 3
  %2328 = load i32, ptr %2326, align 4
  store i32 %2328, ptr %2327, align 4
  call void @set_offset(ptr %245, ptr @IntArray)
  %2329 = getelementptr { ptr, ptr, ptr, i32 }, ptr %245, i32 0, i32 0
  %2330 = getelementptr { ptr, ptr, ptr, i32 }, ptr %246, i32 0, i32 0
  %2331 = load ptr, ptr %2329, align 8
  store ptr %2331, ptr %2330, align 8
  %2332 = getelementptr { ptr, ptr, ptr, i32 }, ptr %245, i32 0, i32 1
  %2333 = getelementptr { ptr, ptr, ptr, i32 }, ptr %246, i32 0, i32 1
  %2334 = load ptr, ptr %2332, align 8
  store ptr %2334, ptr %2333, align 8
  %2335 = getelementptr { ptr, ptr, ptr, i32 }, ptr %245, i32 0, i32 2
  %2336 = getelementptr { ptr, ptr, ptr, i32 }, ptr %246, i32 0, i32 2
  %2337 = load ptr, ptr %2335, align 8
  store ptr %2337, ptr %2336, align 8
  %2338 = getelementptr { ptr, ptr, ptr, i32 }, ptr %245, i32 0, i32 3
  %2339 = getelementptr { ptr, ptr, ptr, i32 }, ptr %246, i32 0, i32 3
  %2340 = load i32, ptr %2338, align 4
  store i32 %2340, ptr %2339, align 4
  %2341 = call ptr @llvm.invariant.start.p0(i64 16, ptr %246)
  %2342 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), i64 5))
  store ptr %2342, ptr %247, align 8
  %2343 = getelementptr { ptr }, ptr %247, i32 0, i32 0
  %2344 = getelementptr { ptr }, ptr %248, i32 0, i32 0
  %2345 = load ptr, ptr %2343, align 8
  store ptr %2345, ptr %2344, align 8
  %2346 = call ptr @llvm.invariant.start.p0(i64 16, ptr %248)
  store ptr @IntArray, ptr %249, align 8
  %2347 = load ptr, ptr %249, align 8
  %2348 = getelementptr ptr, ptr %2347, i32 6
  %2349 = load ptr, ptr %2348, align 8
  %2350 = call { i64, i64 } @size_wrapper(ptr %2349, ptr %249)
  %2351 = extractvalue { i64, i64 } %2350, 0
  %2352 = call ptr @bump_malloc(i64 %2351)
  %2353 = getelementptr { ptr, ptr, ptr, i32 }, ptr %250, i32 0, i32 1
  %2354 = getelementptr { ptr, ptr, ptr, i32 }, ptr %250, i32 0, i32 3
  store ptr @IntArray, ptr %250, align 8
  store ptr %2352, ptr %2353, align 8
  store i32 9, ptr %2354, align 4
  %2355 = call ptr @llvm.invariant.start.p0(i64 16, ptr %250)
  %2356 = getelementptr { ptr }, ptr %248, i32 0, i32 0
  %2357 = load ptr, ptr %2356, align 8
  %2358 = insertvalue { ptr } undef, ptr %2357, 0
  %2359 = getelementptr { ptr, ptr, ptr, i32 }, ptr %250, i32 0, i32 0
  %2360 = load ptr, ptr %2359, align 8
  %2361 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2360, 0
  %2362 = getelementptr { ptr, ptr, ptr, i32 }, ptr %250, i32 0, i32 1
  %2363 = load ptr, ptr %2362, align 8
  %2364 = insertvalue { ptr, ptr, ptr, i32 } %2361, ptr %2363, 1
  %2365 = getelementptr { ptr, ptr, ptr, i32 }, ptr %250, i32 0, i32 2
  %2366 = load ptr, ptr %2365, align 8
  %2367 = insertvalue { ptr, ptr, ptr, i32 } %2364, ptr %2366, 2
  %2368 = getelementptr { ptr, ptr, ptr, i32 }, ptr %250, i32 0, i32 3
  %2369 = load i32, ptr %2368, align 4
  %2370 = insertvalue { ptr, ptr, ptr, i32 } %2367, i32 %2369, 3
  %2371 = getelementptr [3 x ptr], ptr %251, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %2371, align 8
  %2372 = getelementptr [3 x ptr], ptr %251, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %2372, align 8
  %2373 = getelementptr [3 x ptr], ptr %251, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %2373, align 8
  %2374 = call ptr @llvm.invariant.start.p0(i64 9, ptr %251)
  %2375 = call ptr @llvm.invariant.start.p0(i64 616, ptr %2360)
  %2376 = getelementptr ptr, ptr %2360, i32 %2369
  %2377 = getelementptr ptr, ptr %2376, i32 5
  %2378 = load ptr, ptr %2377, align 8
  %2379 = getelementptr { ptr, ptr, ptr }, ptr %252, i32 0, i32 0
  store ptr @buffer_typ, ptr %2379, align 8
  %2380 = getelementptr { ptr, ptr, ptr }, ptr %252, i32 0, i32 1
  store ptr @i32_typ, ptr %2380, align 8
  %2381 = getelementptr { ptr, ptr, ptr }, ptr %252, i32 0, i32 2
  store ptr @i32_typ, ptr %2381, align 8
  %2382 = call ptr @behavior_wrapper(ptr %2378, { ptr, ptr, ptr, i32 } %2370, ptr %252)
  call void %2382({ ptr, ptr, ptr, i32 } %2370, { ptr, ptr, ptr, i32 } %2370, ptr %251, { ptr } %2358, i32 4, i32 5)
  %2383 = getelementptr { ptr, ptr, ptr, i32 }, ptr %250, i32 0, i32 0
  %2384 = getelementptr { ptr, ptr, ptr, i32 }, ptr %253, i32 0, i32 0
  %2385 = load ptr, ptr %2383, align 8
  store ptr %2385, ptr %2384, align 8
  %2386 = getelementptr { ptr, ptr, ptr, i32 }, ptr %250, i32 0, i32 1
  %2387 = getelementptr { ptr, ptr, ptr, i32 }, ptr %253, i32 0, i32 1
  %2388 = load ptr, ptr %2386, align 8
  store ptr %2388, ptr %2387, align 8
  %2389 = getelementptr { ptr, ptr, ptr, i32 }, ptr %250, i32 0, i32 2
  %2390 = getelementptr { ptr, ptr, ptr, i32 }, ptr %253, i32 0, i32 2
  %2391 = load ptr, ptr %2389, align 8
  store ptr %2391, ptr %2390, align 8
  %2392 = getelementptr { ptr, ptr, ptr, i32 }, ptr %250, i32 0, i32 3
  %2393 = getelementptr { ptr, ptr, ptr, i32 }, ptr %253, i32 0, i32 3
  %2394 = load i32, ptr %2392, align 4
  store i32 %2394, ptr %2393, align 4
  call void @set_offset(ptr %253, ptr @IntArray)
  %2395 = getelementptr { ptr, ptr, ptr, i32 }, ptr %253, i32 0, i32 0
  %2396 = load ptr, ptr %2395, align 8
  %2397 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2396, 0
  %2398 = getelementptr { ptr, ptr, ptr, i32 }, ptr %253, i32 0, i32 1
  %2399 = load ptr, ptr %2398, align 8
  %2400 = insertvalue { ptr, ptr, ptr, i32 } %2397, ptr %2399, 1
  %2401 = getelementptr { ptr, ptr, ptr, i32 }, ptr %253, i32 0, i32 2
  %2402 = load ptr, ptr %2401, align 8
  %2403 = insertvalue { ptr, ptr, ptr, i32 } %2400, ptr %2402, 2
  %2404 = getelementptr { ptr, ptr, ptr, i32 }, ptr %253, i32 0, i32 3
  %2405 = load i32, ptr %2404, align 4
  %2406 = insertvalue { ptr, ptr, ptr, i32 } %2403, i32 %2405, 3
  %2407 = getelementptr { ptr, ptr, ptr, i32 }, ptr %246, i32 0, i32 0
  %2408 = load ptr, ptr %2407, align 8
  %2409 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2408, 0
  %2410 = getelementptr { ptr, ptr, ptr, i32 }, ptr %246, i32 0, i32 1
  %2411 = load ptr, ptr %2410, align 8
  %2412 = insertvalue { ptr, ptr, ptr, i32 } %2409, ptr %2411, 1
  %2413 = getelementptr { ptr, ptr, ptr, i32 }, ptr %246, i32 0, i32 2
  %2414 = load ptr, ptr %2413, align 8
  %2415 = insertvalue { ptr, ptr, ptr, i32 } %2412, ptr %2414, 2
  %2416 = getelementptr { ptr, ptr, ptr, i32 }, ptr %246, i32 0, i32 3
  %2417 = load i32, ptr %2416, align 4
  %2418 = insertvalue { ptr, ptr, ptr, i32 } %2415, i32 %2417, 3
  %2419 = getelementptr [1 x ptr], ptr %254, i32 0, i32 0
  store ptr @_parameterization_IntArray, ptr %2419, align 8
  %2420 = call ptr @llvm.invariant.start.p0(i64 1, ptr %254)
  %2421 = call ptr @llvm.invariant.start.p0(i64 616, ptr %2408)
  %2422 = getelementptr ptr, ptr %2408, i32 %2417
  %2423 = getelementptr ptr, ptr %2422, i32 10
  %2424 = load ptr, ptr %2423, align 8
  %2425 = getelementptr { ptr }, ptr %255, i32 0, i32 0
  store ptr %2396, ptr %2425, align 8
  %2426 = call ptr @behavior_wrapper(ptr %2424, { ptr, ptr, ptr, i32 } %2418, ptr %255)
  %2427 = call { ptr, ptr, ptr, i32 } %2426({ ptr, ptr, ptr, i32 } %2418, { ptr, ptr, ptr, i32 } %2418, ptr %254, { ptr, ptr, ptr, i32 } %2406)
  store { ptr, ptr, ptr, i32 } %2427, ptr %256, align 8
  %2428 = call ptr @llvm.invariant.start.p0(i64 16, ptr %256)
  %2429 = getelementptr { ptr, ptr, ptr, i32 }, ptr %256, i32 0, i32 0
  %2430 = getelementptr { ptr, ptr, ptr, i32 }, ptr %257, i32 0, i32 0
  %2431 = load ptr, ptr %2429, align 8
  store ptr %2431, ptr %2430, align 8
  %2432 = getelementptr { ptr, ptr, ptr, i32 }, ptr %256, i32 0, i32 1
  %2433 = getelementptr { ptr, ptr, ptr, i32 }, ptr %257, i32 0, i32 1
  %2434 = load ptr, ptr %2432, align 8
  store ptr %2434, ptr %2433, align 8
  %2435 = getelementptr { ptr, ptr, ptr, i32 }, ptr %256, i32 0, i32 2
  %2436 = getelementptr { ptr, ptr, ptr, i32 }, ptr %257, i32 0, i32 2
  %2437 = load ptr, ptr %2435, align 8
  store ptr %2437, ptr %2436, align 8
  %2438 = getelementptr { ptr, ptr, ptr, i32 }, ptr %256, i32 0, i32 3
  %2439 = getelementptr { ptr, ptr, ptr, i32 }, ptr %257, i32 0, i32 3
  %2440 = load i32, ptr %2438, align 4
  store i32 %2440, ptr %2439, align 4
  call void @set_offset(ptr %257, ptr @IntArray)
  %2441 = getelementptr { ptr, ptr, ptr, i32 }, ptr %246, i32 0, i32 0
  %2442 = load ptr, ptr %2441, align 8
  %2443 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2442, 0
  %2444 = getelementptr { ptr, ptr, ptr, i32 }, ptr %246, i32 0, i32 1
  %2445 = load ptr, ptr %2444, align 8
  %2446 = insertvalue { ptr, ptr, ptr, i32 } %2443, ptr %2445, 1
  %2447 = getelementptr { ptr, ptr, ptr, i32 }, ptr %246, i32 0, i32 2
  %2448 = load ptr, ptr %2447, align 8
  %2449 = insertvalue { ptr, ptr, ptr, i32 } %2446, ptr %2448, 2
  %2450 = getelementptr { ptr, ptr, ptr, i32 }, ptr %246, i32 0, i32 3
  %2451 = load i32, ptr %2450, align 4
  %2452 = insertvalue { ptr, ptr, ptr, i32 } %2449, i32 %2451, 3
  %2453 = getelementptr [1 x ptr], ptr %258, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %2453, align 8
  %2454 = call ptr @llvm.invariant.start.p0(i64 1, ptr %258)
  %2455 = call ptr @llvm.invariant.start.p0(i64 616, ptr %2442)
  %2456 = getelementptr ptr, ptr %2442, i32 %2451
  %2457 = getelementptr ptr, ptr %2456, i32 11
  %2458 = load ptr, ptr %2457, align 8
  %2459 = getelementptr { ptr }, ptr %259, i32 0, i32 0
  store ptr @i32_typ, ptr %2459, align 8
  %2460 = call ptr @behavior_wrapper(ptr %2458, { ptr, ptr, ptr, i32 } %2452, ptr %259)
  %2461 = call i32 %2460({ ptr, ptr, ptr, i32 } %2452, { ptr, ptr, ptr, i32 } %2452, ptr %258, i32 3)
  store i32 %2461, ptr %260, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %261, align 4
  %2462 = load ptr, ptr %261, align 8
  %2463 = insertvalue { ptr, i160 } undef, ptr %2462, 0
  %2464 = load i160, ptr %260, align 4
  %2465 = insertvalue { ptr, i160 } %2463, i160 %2464, 1
  %2466 = getelementptr [1 x ptr], ptr %262, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %2466, align 8
  %2467 = call ptr @llvm.invariant.start.p0(i64 1, ptr %262)
  %2468 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %2469 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %2470 = getelementptr { ptr }, ptr %263, i32 0, i32 0
  store ptr %2462, ptr %2470, align 8
  %2471 = call ptr @class_behavior_wrapper(ptr %2469, ptr %263)
  call void %2471(ptr %262, { ptr, i160 } %2465)
  call void @grabo()
  %2472 = getelementptr { ptr, ptr, ptr, i32 }, ptr %221, i32 0, i32 0
  %2473 = load ptr, ptr %2472, align 8
  %2474 = getelementptr { [3 x i64], [3 x ptr] }, ptr %2473, i32 0, i32 0, i32 1
  %2475 = getelementptr { [3 x i64], [3 x ptr] }, ptr %2473, i32 0, i32 0, i32 2
  %2476 = getelementptr { [3 x i64], [3 x ptr] }, ptr %2473, i32 0, i32 1, i32 0
  %2477 = getelementptr { [3 x i64], [3 x ptr] }, ptr %2473, i32 0, i32 1, i32 1
  %2478 = load i64, ptr %2474, align 4
  %2479 = load i64, ptr %2475, align 4
  %2480 = load ptr, ptr %2476, align 8
  %2481 = load ptr, ptr %2477, align 8
  %2482 = load i64, ptr @IntArray, align 4
  %2483 = call i1 @subtype_test_wrapper(ptr %2480, i64 %2479, i64 %2478, i64 %2482, i64 ptrtoint (ptr @IntArray to i64), ptr %2481)
  %2484 = getelementptr { ptr, ptr, ptr, i32 }, ptr %221, i32 0, i32 0
  %2485 = load ptr, ptr %2484, align 8
  %2486 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2485, 0
  %2487 = getelementptr { ptr, ptr, ptr, i32 }, ptr %221, i32 0, i32 1
  %2488 = load ptr, ptr %2487, align 8
  %2489 = insertvalue { ptr, ptr, ptr, i32 } %2486, ptr %2488, 1
  %2490 = getelementptr { ptr, ptr, ptr, i32 }, ptr %221, i32 0, i32 2
  %2491 = load ptr, ptr %2490, align 8
  %2492 = insertvalue { ptr, ptr, ptr, i32 } %2489, ptr %2491, 2
  %2493 = getelementptr { ptr, ptr, ptr, i32 }, ptr %221, i32 0, i32 3
  %2494 = load i32, ptr %2493, align 4
  %2495 = insertvalue { ptr, ptr, ptr, i32 } %2492, i32 %2494, 3
  %2496 = getelementptr [1 x ptr], ptr %264, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %2496, align 8
  %2497 = call ptr @llvm.invariant.start.p0(i64 1, ptr %264)
  %2498 = call ptr @llvm.invariant.start.p0(i64 616, ptr %2485)
  %2499 = getelementptr ptr, ptr %2485, i32 %2494
  %2500 = getelementptr ptr, ptr %2499, i32 11
  %2501 = load ptr, ptr %2500, align 8
  %2502 = getelementptr { ptr }, ptr %265, i32 0, i32 0
  store ptr @i32_typ, ptr %2502, align 8
  %2503 = call ptr @behavior_wrapper(ptr %2501, { ptr, ptr, ptr, i32 } %2495, ptr %265)
  %2504 = call i32 %2503({ ptr, ptr, ptr, i32 } %2495, { ptr, ptr, ptr, i32 } %2495, ptr %264, i32 0)
  %2505 = icmp eq i32 %2504, 5
  %2506 = and i1 %2483, %2505
  br i1 %2506, label %2507, label %._crit_edge10

._crit_edge10:                                    ; preds = %2079
  br label %2563

2507:                                             ; preds = %2079
  %2508 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 15))
  store ptr %2508, ptr %266, align 8
  %2509 = getelementptr { ptr }, ptr %266, i32 0, i32 0
  %2510 = getelementptr { ptr }, ptr %267, i32 0, i32 0
  %2511 = load ptr, ptr %2509, align 8
  store ptr %2511, ptr %2510, align 8
  %2512 = call ptr @llvm.invariant.start.p0(i64 16, ptr %267)
  %2513 = load ptr, ptr %267, align 8
  %2514 = load [14 x i8], ptr @ufxup_so_it_is_true, align 1
  store [14 x i8] %2514, ptr %2513, align 1
  store ptr @String, ptr %268, align 8
  %2515 = load ptr, ptr %268, align 8
  %2516 = getelementptr ptr, ptr %2515, i32 6
  %2517 = load ptr, ptr %2516, align 8
  %2518 = call { i64, i64 } @size_wrapper(ptr %2517, ptr %268)
  %2519 = extractvalue { i64, i64 } %2518, 0
  %2520 = call ptr @bump_malloc(i64 %2519)
  %2521 = getelementptr { ptr, ptr, ptr, i32 }, ptr %269, i32 0, i32 1
  %2522 = getelementptr { ptr, ptr, ptr, i32 }, ptr %269, i32 0, i32 3
  store ptr @String, ptr %269, align 8
  store ptr %2520, ptr %2521, align 8
  store i32 9, ptr %2522, align 4
  %2523 = call ptr @llvm.invariant.start.p0(i64 16, ptr %269)
  %2524 = getelementptr { ptr }, ptr %267, i32 0, i32 0
  %2525 = load ptr, ptr %2524, align 8
  %2526 = insertvalue { ptr } undef, ptr %2525, 0
  %2527 = getelementptr { ptr, ptr, ptr, i32 }, ptr %269, i32 0, i32 0
  %2528 = load ptr, ptr %2527, align 8
  %2529 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2528, 0
  %2530 = getelementptr { ptr, ptr, ptr, i32 }, ptr %269, i32 0, i32 1
  %2531 = load ptr, ptr %2530, align 8
  %2532 = insertvalue { ptr, ptr, ptr, i32 } %2529, ptr %2531, 1
  %2533 = getelementptr { ptr, ptr, ptr, i32 }, ptr %269, i32 0, i32 2
  %2534 = load ptr, ptr %2533, align 8
  %2535 = insertvalue { ptr, ptr, ptr, i32 } %2532, ptr %2534, 2
  %2536 = getelementptr { ptr, ptr, ptr, i32 }, ptr %269, i32 0, i32 3
  %2537 = load i32, ptr %2536, align 4
  %2538 = insertvalue { ptr, ptr, ptr, i32 } %2535, i32 %2537, 3
  %2539 = getelementptr [3 x ptr], ptr %270, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %2539, align 8
  %2540 = getelementptr [3 x ptr], ptr %270, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %2540, align 8
  %2541 = getelementptr [3 x ptr], ptr %270, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %2541, align 8
  %2542 = call ptr @llvm.invariant.start.p0(i64 9, ptr %270)
  %2543 = call ptr @llvm.invariant.start.p0(i64 280, ptr %2528)
  %2544 = getelementptr ptr, ptr %2528, i32 %2537
  %2545 = getelementptr ptr, ptr %2544, i32 4
  %2546 = load ptr, ptr %2545, align 8
  %2547 = getelementptr { ptr, ptr, ptr }, ptr %271, i32 0, i32 0
  store ptr @buffer_typ, ptr %2547, align 8
  %2548 = getelementptr { ptr, ptr, ptr }, ptr %271, i32 0, i32 1
  store ptr @i32_typ, ptr %2548, align 8
  %2549 = getelementptr { ptr, ptr, ptr }, ptr %271, i32 0, i32 2
  store ptr @i32_typ, ptr %2549, align 8
  %2550 = call ptr @behavior_wrapper(ptr %2546, { ptr, ptr, ptr, i32 } %2538, ptr %271)
  call void %2550({ ptr, ptr, ptr, i32 } %2538, { ptr, ptr, ptr, i32 } %2538, ptr %270, { ptr } %2526, i32 14, i32 15)
  %2551 = getelementptr { ptr, i160 }, ptr %269, i32 0, i32 0
  %2552 = load ptr, ptr %2551, align 8
  %2553 = insertvalue { ptr, i160 } undef, ptr %2552, 0
  %2554 = getelementptr { ptr, i160 }, ptr %269, i32 0, i32 1
  %2555 = load i160, ptr %2554, align 4
  %2556 = insertvalue { ptr, i160 } %2553, i160 %2555, 1
  %2557 = getelementptr [1 x ptr], ptr %272, i32 0, i32 0
  store ptr @_parameterization_String, ptr %2557, align 8
  %2558 = call ptr @llvm.invariant.start.p0(i64 1, ptr %272)
  %2559 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %2560 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %2561 = getelementptr { ptr }, ptr %273, i32 0, i32 0
  store ptr %2552, ptr %2561, align 8
  %2562 = call ptr @class_behavior_wrapper(ptr %2560, ptr %273)
  call void %2562(ptr %272, { ptr, i160 } %2556)
  br label %2563

2563:                                             ; preds = %._crit_edge10, %2507
  store i64 5, ptr %274, align 4
  store i64 ptrtoint (ptr @i64_typ to i64), ptr %275, align 4
  %2564 = load ptr, ptr %275, align 8
  %2565 = insertvalue { ptr, i160 } undef, ptr %2564, 0
  %2566 = load i160, ptr %274, align 4
  %2567 = insertvalue { ptr, i160 } %2565, i160 %2566, 1
  %2568 = getelementptr [1 x ptr], ptr %276, i32 0, i32 0
  store ptr @_parameterization_Ptri64, ptr %2568, align 8
  %2569 = call ptr @llvm.invariant.start.p0(i64 1, ptr %276)
  %2570 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %2571 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %2572 = getelementptr { ptr }, ptr %277, i32 0, i32 0
  store ptr %2564, ptr %2572, align 8
  %2573 = call ptr @class_behavior_wrapper(ptr %2571, ptr %277)
  call void %2573(ptr %276, { ptr, i160 } %2567)
  store double 5.000000e+00, ptr %278, align 8
  store i64 ptrtoint (ptr @f64_typ to i64), ptr %279, align 4
  %2574 = load ptr, ptr %279, align 8
  %2575 = insertvalue { ptr, i160 } undef, ptr %2574, 0
  %2576 = load i160, ptr %278, align 4
  %2577 = insertvalue { ptr, i160 } %2575, i160 %2576, 1
  %2578 = getelementptr [1 x ptr], ptr %280, i32 0, i32 0
  store ptr @_parameterization_Ptrf64, ptr %2578, align 8
  %2579 = call ptr @llvm.invariant.start.p0(i64 1, ptr %280)
  %2580 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %2581 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %2582 = getelementptr { ptr }, ptr %281, i32 0, i32 0
  store ptr %2574, ptr %2582, align 8
  %2583 = call ptr @class_behavior_wrapper(ptr %2581, ptr %281)
  call void %2583(ptr %280, { ptr, i160 } %2577)
  store ptr @Range, ptr %282, align 8
  %2584 = load ptr, ptr %282, align 8
  %2585 = getelementptr ptr, ptr %2584, i32 6
  %2586 = load ptr, ptr %2585, align 8
  %2587 = call { i64, i64 } @size_wrapper(ptr %2586, ptr %282)
  %2588 = extractvalue { i64, i64 } %2587, 0
  %2589 = call ptr @bump_malloc(i64 %2588)
  %2590 = getelementptr { ptr, ptr, ptr, i32 }, ptr %283, i32 0, i32 1
  %2591 = getelementptr { ptr, ptr, ptr, i32 }, ptr %283, i32 0, i32 3
  store ptr @Range, ptr %283, align 8
  store ptr %2589, ptr %2590, align 8
  store i32 9, ptr %2591, align 4
  %2592 = call ptr @llvm.invariant.start.p0(i64 16, ptr %283)
  %2593 = getelementptr { ptr, ptr, ptr, i32 }, ptr %283, i32 0, i32 0
  %2594 = load ptr, ptr %2593, align 8
  %2595 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2594, 0
  %2596 = getelementptr { ptr, ptr, ptr, i32 }, ptr %283, i32 0, i32 1
  %2597 = load ptr, ptr %2596, align 8
  %2598 = insertvalue { ptr, ptr, ptr, i32 } %2595, ptr %2597, 1
  %2599 = getelementptr { ptr, ptr, ptr, i32 }, ptr %283, i32 0, i32 2
  %2600 = load ptr, ptr %2599, align 8
  %2601 = insertvalue { ptr, ptr, ptr, i32 } %2598, ptr %2600, 2
  %2602 = getelementptr { ptr, ptr, ptr, i32 }, ptr %283, i32 0, i32 3
  %2603 = load i32, ptr %2602, align 4
  %2604 = insertvalue { ptr, ptr, ptr, i32 } %2601, i32 %2603, 3
  %2605 = getelementptr [2 x ptr], ptr %284, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %2605, align 8
  %2606 = getelementptr [2 x ptr], ptr %284, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %2606, align 8
  %2607 = call ptr @llvm.invariant.start.p0(i64 4, ptr %284)
  %2608 = call ptr @llvm.invariant.start.p0(i64 456, ptr %2594)
  %2609 = getelementptr ptr, ptr %2594, i32 %2603
  %2610 = getelementptr ptr, ptr %2609, i32 4
  %2611 = load ptr, ptr %2610, align 8
  %2612 = getelementptr { ptr, ptr }, ptr %285, i32 0, i32 0
  store ptr @i32_typ, ptr %2612, align 8
  %2613 = getelementptr { ptr, ptr }, ptr %285, i32 0, i32 1
  store ptr @i32_typ, ptr %2613, align 8
  %2614 = call ptr @behavior_wrapper(ptr %2611, { ptr, ptr, ptr, i32 } %2604, ptr %285)
  call void %2614({ ptr, ptr, ptr, i32 } %2604, { ptr, ptr, ptr, i32 } %2604, ptr %284, i32 11, i32 14)
  %2615 = getelementptr { ptr, ptr, ptr, i32 }, ptr %283, i32 0, i32 0
  %2616 = load ptr, ptr %2615, align 8
  %2617 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2616, 0
  %2618 = getelementptr { ptr, ptr, ptr, i32 }, ptr %283, i32 0, i32 1
  %2619 = load ptr, ptr %2618, align 8
  %2620 = insertvalue { ptr, ptr, ptr, i32 } %2617, ptr %2619, 1
  %2621 = getelementptr { ptr, ptr, ptr, i32 }, ptr %283, i32 0, i32 2
  %2622 = load ptr, ptr %2621, align 8
  %2623 = insertvalue { ptr, ptr, ptr, i32 } %2620, ptr %2622, 2
  %2624 = getelementptr { ptr, ptr, ptr, i32 }, ptr %283, i32 0, i32 3
  %2625 = load i32, ptr %2624, align 4
  %2626 = insertvalue { ptr, ptr, ptr, i32 } %2623, i32 %2625, 3
  %2627 = call ptr @llvm.invariant.start.p0(i64 0, ptr %286)
  %2628 = call ptr @llvm.invariant.start.p0(i64 456, ptr %2616)
  %2629 = getelementptr ptr, ptr %2616, i32 %2625
  %2630 = getelementptr ptr, ptr %2629, i32 16
  %2631 = load ptr, ptr %2630, align 8
  %2632 = call ptr @behavior_wrapper(ptr %2631, { ptr, ptr, ptr, i32 } %2626, ptr %287)
  %2633 = call { ptr, ptr, ptr, i32 } %2632({ ptr, ptr, ptr, i32 } %2626, { ptr, ptr, ptr, i32 } %2626, ptr %286)
  store { ptr, ptr, ptr, i32 } %2633, ptr %288, align 8
  %2634 = call ptr @llvm.invariant.start.p0(i64 16, ptr %288)
  %2635 = getelementptr { ptr, ptr, ptr, i32 }, ptr %288, i32 0, i32 0
  %2636 = getelementptr { ptr, ptr, ptr, i32 }, ptr %289, i32 0, i32 0
  %2637 = load ptr, ptr %2635, align 8
  store ptr %2637, ptr %2636, align 8
  %2638 = getelementptr { ptr, ptr, ptr, i32 }, ptr %288, i32 0, i32 1
  %2639 = getelementptr { ptr, ptr, ptr, i32 }, ptr %289, i32 0, i32 1
  %2640 = load ptr, ptr %2638, align 8
  store ptr %2640, ptr %2639, align 8
  %2641 = getelementptr { ptr, ptr, ptr, i32 }, ptr %288, i32 0, i32 2
  %2642 = getelementptr { ptr, ptr, ptr, i32 }, ptr %289, i32 0, i32 2
  %2643 = load ptr, ptr %2641, align 8
  store ptr %2643, ptr %2642, align 8
  %2644 = getelementptr { ptr, ptr, ptr, i32 }, ptr %288, i32 0, i32 3
  %2645 = getelementptr { ptr, ptr, ptr, i32 }, ptr %289, i32 0, i32 3
  %2646 = load i32, ptr %2644, align 4
  store i32 %2646, ptr %2645, align 4
  call void @set_offset(ptr %289, ptr @RangeIterator)
  %2647 = getelementptr { ptr, ptr, ptr, i32 }, ptr %289, i32 0, i32 0
  %2648 = getelementptr { ptr, ptr, ptr, i32 }, ptr %290, i32 0, i32 0
  %2649 = load ptr, ptr %2647, align 8
  store ptr %2649, ptr %2648, align 8
  %2650 = getelementptr { ptr, ptr, ptr, i32 }, ptr %289, i32 0, i32 1
  %2651 = getelementptr { ptr, ptr, ptr, i32 }, ptr %290, i32 0, i32 1
  %2652 = load ptr, ptr %2650, align 8
  store ptr %2652, ptr %2651, align 8
  %2653 = getelementptr { ptr, ptr, ptr, i32 }, ptr %289, i32 0, i32 2
  %2654 = getelementptr { ptr, ptr, ptr, i32 }, ptr %290, i32 0, i32 2
  %2655 = load ptr, ptr %2653, align 8
  store ptr %2655, ptr %2654, align 8
  %2656 = getelementptr { ptr, ptr, ptr, i32 }, ptr %289, i32 0, i32 3
  %2657 = getelementptr { ptr, ptr, ptr, i32 }, ptr %290, i32 0, i32 3
  %2658 = load i32, ptr %2656, align 4
  store i32 %2658, ptr %2657, align 4
  call void @set_offset(ptr %290, ptr @RangeIterator)
  %2659 = getelementptr { ptr, ptr, ptr, i32 }, ptr %290, i32 0, i32 0
  %2660 = getelementptr { ptr, ptr, ptr, i32 }, ptr %291, i32 0, i32 0
  %2661 = load ptr, ptr %2659, align 8
  store ptr %2661, ptr %2660, align 8
  %2662 = getelementptr { ptr, ptr, ptr, i32 }, ptr %290, i32 0, i32 1
  %2663 = getelementptr { ptr, ptr, ptr, i32 }, ptr %291, i32 0, i32 1
  %2664 = load ptr, ptr %2662, align 8
  store ptr %2664, ptr %2663, align 8
  %2665 = getelementptr { ptr, ptr, ptr, i32 }, ptr %290, i32 0, i32 2
  %2666 = getelementptr { ptr, ptr, ptr, i32 }, ptr %291, i32 0, i32 2
  %2667 = load ptr, ptr %2665, align 8
  store ptr %2667, ptr %2666, align 8
  %2668 = getelementptr { ptr, ptr, ptr, i32 }, ptr %290, i32 0, i32 3
  %2669 = getelementptr { ptr, ptr, ptr, i32 }, ptr %291, i32 0, i32 3
  %2670 = load i32, ptr %2668, align 4
  store i32 %2670, ptr %2669, align 4
  %2671 = call ptr @llvm.invariant.start.p0(i64 16, ptr %291)
  %2672 = getelementptr { ptr, ptr, ptr, i32 }, ptr %291, i32 0, i32 0
  store ptr %2672, ptr %.reg2mem67, align 8
  %2673 = getelementptr { ptr, ptr, ptr, i32 }, ptr %291, i32 0, i32 1
  store ptr %2673, ptr %.reg2mem65, align 8
  %2674 = getelementptr { ptr, ptr, ptr, i32 }, ptr %291, i32 0, i32 2
  store ptr %2674, ptr %.reg2mem63, align 8
  %2675 = getelementptr { ptr, ptr, ptr, i32 }, ptr %291, i32 0, i32 3
  store ptr %2675, ptr %.reg2mem61, align 8
  %2676 = getelementptr { ptr, i32 }, ptr %294, i32 0, i32 0
  store ptr %2676, ptr %.reg2mem59, align 8
  br label %2677

2677:                                             ; preds = %._crit_edge12, %2563
  %.reload68 = load ptr, ptr %.reg2mem67, align 8
  %2678 = load ptr, ptr %.reload68, align 8
  %2679 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2678, 0
  %.reload66 = load ptr, ptr %.reg2mem65, align 8
  %2680 = load ptr, ptr %.reload66, align 8
  %2681 = insertvalue { ptr, ptr, ptr, i32 } %2679, ptr %2680, 1
  %.reload64 = load ptr, ptr %.reg2mem63, align 8
  %2682 = load ptr, ptr %.reload64, align 8
  %2683 = insertvalue { ptr, ptr, ptr, i32 } %2681, ptr %2682, 2
  %.reload62 = load ptr, ptr %.reg2mem61, align 8
  %2684 = load i32, ptr %.reload62, align 4
  %2685 = insertvalue { ptr, ptr, ptr, i32 } %2683, i32 %2684, 3
  %2686 = call ptr @llvm.invariant.start.p0(i64 0, ptr %292)
  %2687 = call ptr @llvm.invariant.start.p0(i64 72, ptr %2678)
  %2688 = getelementptr ptr, ptr %2678, i32 %2684
  %2689 = getelementptr ptr, ptr %2688, i32 4
  %2690 = load ptr, ptr %2689, align 8
  %2691 = call ptr @behavior_wrapper(ptr %2690, { ptr, ptr, ptr, i32 } %2685, ptr %293)
  %2692 = call { ptr, i32 } %2691({ ptr, ptr, ptr, i32 } %2685, { ptr, ptr, ptr, i32 } %2685, ptr %292)
  store { ptr, i32 } %2692, ptr %294, align 8
  %.reload60 = load ptr, ptr %.reg2mem59, align 8
  %2693 = load ptr, ptr %.reload60, align 8
  %2694 = ptrtoint ptr %2693 to i64
  %2695 = icmp eq i64 %2694, ptrtoint (ptr @nil_typ to i64)
  %2696 = icmp eq i64 %2694, 0
  %2697 = or i1 %2695, %2696
  %2698 = icmp eq i1 %2697, false
  store i1 %2698, ptr %.reg2mem56, align 1
  %.reload58 = load i1, ptr %.reg2mem56, align 1
  br i1 %.reload58, label %2699, label %._crit_edge11

._crit_edge11:                                    ; preds = %2677
  br label %2712

2699:                                             ; preds = %2677
  %2700 = getelementptr { ptr, i32 }, ptr %294, i32 0, i32 1
  %2701 = load i32, ptr %2700, align 4
  store i32 %2701, ptr %295, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %296, align 4
  %2702 = load ptr, ptr %296, align 8
  %2703 = insertvalue { ptr, i160 } undef, ptr %2702, 0
  %2704 = load i160, ptr %295, align 4
  %2705 = insertvalue { ptr, i160 } %2703, i160 %2704, 1
  %2706 = getelementptr [1 x ptr], ptr %297, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %2706, align 8
  %2707 = call ptr @llvm.invariant.start.p0(i64 1, ptr %297)
  %2708 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %2709 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %2710 = getelementptr { ptr }, ptr %298, i32 0, i32 0
  store ptr %2702, ptr %2710, align 8
  %2711 = call ptr @class_behavior_wrapper(ptr %2709, ptr %298)
  call void %2711(ptr %297, { ptr, i160 } %2705)
  store i32 %2701, ptr %294, align 4
  br label %2712

2712:                                             ; preds = %._crit_edge11, %2699
  %.reload57 = load i1, ptr %.reg2mem56, align 1
  br i1 %.reload57, label %._crit_edge12, label %2713

._crit_edge12:                                    ; preds = %2712
  br label %2677

2713:                                             ; preds = %2712
  %2714 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), i64 4))
  store ptr %2714, ptr %299, align 8
  %2715 = getelementptr { ptr }, ptr %299, i32 0, i32 0
  %2716 = getelementptr { ptr }, ptr %300, i32 0, i32 0
  %2717 = load ptr, ptr %2715, align 8
  store ptr %2717, ptr %2716, align 8
  %2718 = call ptr @llvm.invariant.start.p0(i64 16, ptr %300)
  store ptr @IntArray, ptr %301, align 8
  %2719 = load ptr, ptr %301, align 8
  %2720 = getelementptr ptr, ptr %2719, i32 6
  %2721 = load ptr, ptr %2720, align 8
  %2722 = call { i64, i64 } @size_wrapper(ptr %2721, ptr %301)
  %2723 = extractvalue { i64, i64 } %2722, 0
  %2724 = call ptr @bump_malloc(i64 %2723)
  %2725 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 1
  %2726 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 3
  store ptr @IntArray, ptr %302, align 8
  store ptr %2724, ptr %2725, align 8
  store i32 9, ptr %2726, align 4
  %2727 = call ptr @llvm.invariant.start.p0(i64 16, ptr %302)
  %2728 = getelementptr { ptr }, ptr %300, i32 0, i32 0
  %2729 = load ptr, ptr %2728, align 8
  %2730 = insertvalue { ptr } undef, ptr %2729, 0
  %2731 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 0
  %2732 = load ptr, ptr %2731, align 8
  %2733 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2732, 0
  %2734 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 1
  %2735 = load ptr, ptr %2734, align 8
  %2736 = insertvalue { ptr, ptr, ptr, i32 } %2733, ptr %2735, 1
  %2737 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 2
  %2738 = load ptr, ptr %2737, align 8
  %2739 = insertvalue { ptr, ptr, ptr, i32 } %2736, ptr %2738, 2
  %2740 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 3
  %2741 = load i32, ptr %2740, align 4
  %2742 = insertvalue { ptr, ptr, ptr, i32 } %2739, i32 %2741, 3
  %2743 = getelementptr [3 x ptr], ptr %303, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %2743, align 8
  %2744 = getelementptr [3 x ptr], ptr %303, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %2744, align 8
  %2745 = getelementptr [3 x ptr], ptr %303, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %2745, align 8
  %2746 = call ptr @llvm.invariant.start.p0(i64 9, ptr %303)
  %2747 = call ptr @llvm.invariant.start.p0(i64 616, ptr %2732)
  %2748 = getelementptr ptr, ptr %2732, i32 %2741
  %2749 = getelementptr ptr, ptr %2748, i32 5
  %2750 = load ptr, ptr %2749, align 8
  %2751 = getelementptr { ptr, ptr, ptr }, ptr %304, i32 0, i32 0
  store ptr @buffer_typ, ptr %2751, align 8
  %2752 = getelementptr { ptr, ptr, ptr }, ptr %304, i32 0, i32 1
  store ptr @i32_typ, ptr %2752, align 8
  %2753 = getelementptr { ptr, ptr, ptr }, ptr %304, i32 0, i32 2
  store ptr @i32_typ, ptr %2753, align 8
  %2754 = call ptr @behavior_wrapper(ptr %2750, { ptr, ptr, ptr, i32 } %2742, ptr %304)
  call void %2754({ ptr, ptr, ptr, i32 } %2742, { ptr, ptr, ptr, i32 } %2742, ptr %303, { ptr } %2730, i32 3, i32 4)
  %2755 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 0
  %2756 = load ptr, ptr %2755, align 8
  %2757 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2756, 0
  %2758 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 1
  %2759 = load ptr, ptr %2758, align 8
  %2760 = insertvalue { ptr, ptr, ptr, i32 } %2757, ptr %2759, 1
  %2761 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 2
  %2762 = load ptr, ptr %2761, align 8
  %2763 = insertvalue { ptr, ptr, ptr, i32 } %2760, ptr %2762, 2
  %2764 = getelementptr { ptr, ptr, ptr, i32 }, ptr %302, i32 0, i32 3
  %2765 = load i32, ptr %2764, align 4
  %2766 = insertvalue { ptr, ptr, ptr, i32 } %2763, i32 %2765, 3
  %2767 = call ptr @llvm.invariant.start.p0(i64 0, ptr %305)
  %2768 = call ptr @llvm.invariant.start.p0(i64 616, ptr %2756)
  %2769 = getelementptr ptr, ptr %2756, i32 %2765
  %2770 = getelementptr ptr, ptr %2769, i32 24
  %2771 = load ptr, ptr %2770, align 8
  %2772 = call ptr @behavior_wrapper(ptr %2771, { ptr, ptr, ptr, i32 } %2766, ptr %306)
  %2773 = call { ptr, ptr, ptr, i32 } %2772({ ptr, ptr, ptr, i32 } %2766, { ptr, ptr, ptr, i32 } %2766, ptr %305)
  store { ptr, ptr, ptr, i32 } %2773, ptr %307, align 8
  %2774 = call ptr @llvm.invariant.start.p0(i64 16, ptr %307)
  %2775 = getelementptr { ptr, ptr, ptr, i32 }, ptr %307, i32 0, i32 0
  %2776 = getelementptr { ptr, ptr, ptr, i32 }, ptr %308, i32 0, i32 0
  %2777 = load ptr, ptr %2775, align 8
  store ptr %2777, ptr %2776, align 8
  %2778 = getelementptr { ptr, ptr, ptr, i32 }, ptr %307, i32 0, i32 1
  %2779 = getelementptr { ptr, ptr, ptr, i32 }, ptr %308, i32 0, i32 1
  %2780 = load ptr, ptr %2778, align 8
  store ptr %2780, ptr %2779, align 8
  %2781 = getelementptr { ptr, ptr, ptr, i32 }, ptr %307, i32 0, i32 2
  %2782 = getelementptr { ptr, ptr, ptr, i32 }, ptr %308, i32 0, i32 2
  %2783 = load ptr, ptr %2781, align 8
  store ptr %2783, ptr %2782, align 8
  %2784 = getelementptr { ptr, ptr, ptr, i32 }, ptr %307, i32 0, i32 3
  %2785 = getelementptr { ptr, ptr, ptr, i32 }, ptr %308, i32 0, i32 3
  %2786 = load i32, ptr %2784, align 4
  store i32 %2786, ptr %2785, align 4
  call void @set_offset(ptr %308, ptr @IntArrayIterator)
  %2787 = getelementptr { ptr, ptr, ptr, i32 }, ptr %308, i32 0, i32 0
  %2788 = getelementptr { ptr, ptr, ptr, i32 }, ptr %309, i32 0, i32 0
  %2789 = load ptr, ptr %2787, align 8
  store ptr %2789, ptr %2788, align 8
  %2790 = getelementptr { ptr, ptr, ptr, i32 }, ptr %308, i32 0, i32 1
  %2791 = getelementptr { ptr, ptr, ptr, i32 }, ptr %309, i32 0, i32 1
  %2792 = load ptr, ptr %2790, align 8
  store ptr %2792, ptr %2791, align 8
  %2793 = getelementptr { ptr, ptr, ptr, i32 }, ptr %308, i32 0, i32 2
  %2794 = getelementptr { ptr, ptr, ptr, i32 }, ptr %309, i32 0, i32 2
  %2795 = load ptr, ptr %2793, align 8
  store ptr %2795, ptr %2794, align 8
  %2796 = getelementptr { ptr, ptr, ptr, i32 }, ptr %308, i32 0, i32 3
  %2797 = getelementptr { ptr, ptr, ptr, i32 }, ptr %309, i32 0, i32 3
  %2798 = load i32, ptr %2796, align 4
  store i32 %2798, ptr %2797, align 4
  call void @set_offset(ptr %309, ptr @IntArrayIterator)
  %2799 = getelementptr { ptr, ptr, ptr, i32 }, ptr %309, i32 0, i32 0
  %2800 = getelementptr { ptr, ptr, ptr, i32 }, ptr %310, i32 0, i32 0
  %2801 = load ptr, ptr %2799, align 8
  store ptr %2801, ptr %2800, align 8
  %2802 = getelementptr { ptr, ptr, ptr, i32 }, ptr %309, i32 0, i32 1
  %2803 = getelementptr { ptr, ptr, ptr, i32 }, ptr %310, i32 0, i32 1
  %2804 = load ptr, ptr %2802, align 8
  store ptr %2804, ptr %2803, align 8
  %2805 = getelementptr { ptr, ptr, ptr, i32 }, ptr %309, i32 0, i32 2
  %2806 = getelementptr { ptr, ptr, ptr, i32 }, ptr %310, i32 0, i32 2
  %2807 = load ptr, ptr %2805, align 8
  store ptr %2807, ptr %2806, align 8
  %2808 = getelementptr { ptr, ptr, ptr, i32 }, ptr %309, i32 0, i32 3
  %2809 = getelementptr { ptr, ptr, ptr, i32 }, ptr %310, i32 0, i32 3
  %2810 = load i32, ptr %2808, align 4
  store i32 %2810, ptr %2809, align 4
  %2811 = call ptr @llvm.invariant.start.p0(i64 16, ptr %310)
  %2812 = getelementptr { ptr, ptr, ptr, i32 }, ptr %310, i32 0, i32 0
  store ptr %2812, ptr %.reg2mem54, align 8
  %2813 = getelementptr { ptr, ptr, ptr, i32 }, ptr %310, i32 0, i32 1
  store ptr %2813, ptr %.reg2mem52, align 8
  %2814 = getelementptr { ptr, ptr, ptr, i32 }, ptr %310, i32 0, i32 2
  store ptr %2814, ptr %.reg2mem50, align 8
  %2815 = getelementptr { ptr, ptr, ptr, i32 }, ptr %310, i32 0, i32 3
  store ptr %2815, ptr %.reg2mem48, align 8
  %2816 = getelementptr { ptr, i32 }, ptr %313, i32 0, i32 0
  store ptr %2816, ptr %.reg2mem46, align 8
  br label %2817

2817:                                             ; preds = %._crit_edge14, %2713
  %.reload55 = load ptr, ptr %.reg2mem54, align 8
  %2818 = load ptr, ptr %.reload55, align 8
  %2819 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2818, 0
  %.reload53 = load ptr, ptr %.reg2mem52, align 8
  %2820 = load ptr, ptr %.reload53, align 8
  %2821 = insertvalue { ptr, ptr, ptr, i32 } %2819, ptr %2820, 1
  %.reload51 = load ptr, ptr %.reg2mem50, align 8
  %2822 = load ptr, ptr %.reload51, align 8
  %2823 = insertvalue { ptr, ptr, ptr, i32 } %2821, ptr %2822, 2
  %.reload49 = load ptr, ptr %.reg2mem48, align 8
  %2824 = load i32, ptr %.reload49, align 4
  %2825 = insertvalue { ptr, ptr, ptr, i32 } %2823, i32 %2824, 3
  %2826 = call ptr @llvm.invariant.start.p0(i64 0, ptr %311)
  %2827 = call ptr @llvm.invariant.start.p0(i64 64, ptr %2818)
  %2828 = getelementptr ptr, ptr %2818, i32 %2824
  %2829 = getelementptr ptr, ptr %2828, i32 3
  %2830 = load ptr, ptr %2829, align 8
  %2831 = call ptr @behavior_wrapper(ptr %2830, { ptr, ptr, ptr, i32 } %2825, ptr %312)
  %2832 = call { ptr, i32 } %2831({ ptr, ptr, ptr, i32 } %2825, { ptr, ptr, ptr, i32 } %2825, ptr %311)
  store { ptr, i32 } %2832, ptr %313, align 8
  %.reload47 = load ptr, ptr %.reg2mem46, align 8
  %2833 = load ptr, ptr %.reload47, align 8
  %2834 = ptrtoint ptr %2833 to i64
  %2835 = icmp eq i64 %2834, ptrtoint (ptr @nil_typ to i64)
  %2836 = icmp eq i64 %2834, 0
  %2837 = or i1 %2835, %2836
  %2838 = icmp eq i1 %2837, false
  store i1 %2838, ptr %.reg2mem43, align 1
  %.reload45 = load i1, ptr %.reg2mem43, align 1
  br i1 %.reload45, label %2839, label %._crit_edge13

._crit_edge13:                                    ; preds = %2817
  br label %2852

2839:                                             ; preds = %2817
  %2840 = getelementptr { ptr, i32 }, ptr %313, i32 0, i32 1
  %2841 = load i32, ptr %2840, align 4
  store i32 %2841, ptr %314, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %315, align 4
  %2842 = load ptr, ptr %315, align 8
  %2843 = insertvalue { ptr, i160 } undef, ptr %2842, 0
  %2844 = load i160, ptr %314, align 4
  %2845 = insertvalue { ptr, i160 } %2843, i160 %2844, 1
  %2846 = getelementptr [1 x ptr], ptr %316, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %2846, align 8
  %2847 = call ptr @llvm.invariant.start.p0(i64 1, ptr %316)
  %2848 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %2849 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %2850 = getelementptr { ptr }, ptr %317, i32 0, i32 0
  store ptr %2842, ptr %2850, align 8
  %2851 = call ptr @class_behavior_wrapper(ptr %2849, ptr %317)
  call void %2851(ptr %316, { ptr, i160 } %2845)
  store i32 %2841, ptr %313, align 4
  br label %2852

2852:                                             ; preds = %._crit_edge13, %2839
  %.reload44 = load i1, ptr %.reg2mem43, align 1
  br i1 %.reload44, label %._crit_edge14, label %2853

._crit_edge14:                                    ; preds = %2852
  br label %2817

2853:                                             ; preds = %2852
  store i8 3, ptr %318, align 1
  store i64 ptrtoint (ptr @i8_typ to i64), ptr %319, align 4
  %2854 = load ptr, ptr %319, align 8
  %2855 = insertvalue { ptr, i160 } undef, ptr %2854, 0
  %2856 = load i160, ptr %318, align 4
  %2857 = insertvalue { ptr, i160 } %2855, i160 %2856, 1
  %2858 = getelementptr [1 x ptr], ptr %320, i32 0, i32 0
  store ptr @_parameterization_Ptri8, ptr %2858, align 8
  %2859 = call ptr @llvm.invariant.start.p0(i64 1, ptr %320)
  %2860 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %2861 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %2862 = getelementptr { ptr }, ptr %321, i32 0, i32 0
  store ptr %2854, ptr %2862, align 8
  %2863 = call ptr @class_behavior_wrapper(ptr %2861, ptr %321)
  call void %2863(ptr %320, { ptr, i160 } %2857)
  %2864 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 6))
  store ptr %2864, ptr %322, align 8
  %2865 = getelementptr { ptr }, ptr %322, i32 0, i32 0
  %2866 = getelementptr { ptr }, ptr %323, i32 0, i32 0
  %2867 = load ptr, ptr %2865, align 8
  store ptr %2867, ptr %2866, align 8
  %2868 = call ptr @llvm.invariant.start.p0(i64 16, ptr %323)
  %2869 = load ptr, ptr %323, align 8
  %2870 = load [5 x i8], ptr @cwice_boom, align 1
  store [5 x i8] %2870, ptr %2869, align 1
  store ptr @String, ptr %324, align 8
  %2871 = load ptr, ptr %324, align 8
  %2872 = getelementptr ptr, ptr %2871, i32 6
  %2873 = load ptr, ptr %2872, align 8
  %2874 = call { i64, i64 } @size_wrapper(ptr %2873, ptr %324)
  %2875 = extractvalue { i64, i64 } %2874, 0
  %2876 = call ptr @bump_malloc(i64 %2875)
  %2877 = getelementptr { ptr, ptr, ptr, i32 }, ptr %325, i32 0, i32 1
  %2878 = getelementptr { ptr, ptr, ptr, i32 }, ptr %325, i32 0, i32 3
  store ptr @String, ptr %325, align 8
  store ptr %2876, ptr %2877, align 8
  store i32 9, ptr %2878, align 4
  %2879 = call ptr @llvm.invariant.start.p0(i64 16, ptr %325)
  %2880 = getelementptr { ptr }, ptr %323, i32 0, i32 0
  %2881 = load ptr, ptr %2880, align 8
  %2882 = insertvalue { ptr } undef, ptr %2881, 0
  %2883 = getelementptr { ptr, ptr, ptr, i32 }, ptr %325, i32 0, i32 0
  %2884 = load ptr, ptr %2883, align 8
  %2885 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2884, 0
  %2886 = getelementptr { ptr, ptr, ptr, i32 }, ptr %325, i32 0, i32 1
  %2887 = load ptr, ptr %2886, align 8
  %2888 = insertvalue { ptr, ptr, ptr, i32 } %2885, ptr %2887, 1
  %2889 = getelementptr { ptr, ptr, ptr, i32 }, ptr %325, i32 0, i32 2
  %2890 = load ptr, ptr %2889, align 8
  %2891 = insertvalue { ptr, ptr, ptr, i32 } %2888, ptr %2890, 2
  %2892 = getelementptr { ptr, ptr, ptr, i32 }, ptr %325, i32 0, i32 3
  %2893 = load i32, ptr %2892, align 4
  %2894 = insertvalue { ptr, ptr, ptr, i32 } %2891, i32 %2893, 3
  %2895 = getelementptr [3 x ptr], ptr %326, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %2895, align 8
  %2896 = getelementptr [3 x ptr], ptr %326, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %2896, align 8
  %2897 = getelementptr [3 x ptr], ptr %326, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %2897, align 8
  %2898 = call ptr @llvm.invariant.start.p0(i64 9, ptr %326)
  %2899 = call ptr @llvm.invariant.start.p0(i64 280, ptr %2884)
  %2900 = getelementptr ptr, ptr %2884, i32 %2893
  %2901 = getelementptr ptr, ptr %2900, i32 4
  %2902 = load ptr, ptr %2901, align 8
  %2903 = getelementptr { ptr, ptr, ptr }, ptr %327, i32 0, i32 0
  store ptr @buffer_typ, ptr %2903, align 8
  %2904 = getelementptr { ptr, ptr, ptr }, ptr %327, i32 0, i32 1
  store ptr @i32_typ, ptr %2904, align 8
  %2905 = getelementptr { ptr, ptr, ptr }, ptr %327, i32 0, i32 2
  store ptr @i32_typ, ptr %2905, align 8
  %2906 = call ptr @behavior_wrapper(ptr %2902, { ptr, ptr, ptr, i32 } %2894, ptr %327)
  call void %2906({ ptr, ptr, ptr, i32 } %2894, { ptr, ptr, ptr, i32 } %2894, ptr %326, { ptr } %2882, i32 5, i32 6)
  %2907 = getelementptr { ptr, ptr, ptr, i32 }, ptr %325, i32 0, i32 0
  %2908 = load ptr, ptr %2907, align 8
  %2909 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2908, 0
  %2910 = getelementptr { ptr, ptr, ptr, i32 }, ptr %325, i32 0, i32 1
  %2911 = load ptr, ptr %2910, align 8
  %2912 = insertvalue { ptr, ptr, ptr, i32 } %2909, ptr %2911, 1
  %2913 = getelementptr { ptr, ptr, ptr, i32 }, ptr %325, i32 0, i32 2
  %2914 = load ptr, ptr %2913, align 8
  %2915 = insertvalue { ptr, ptr, ptr, i32 } %2912, ptr %2914, 2
  %2916 = getelementptr { ptr, ptr, ptr, i32 }, ptr %325, i32 0, i32 3
  %2917 = load i32, ptr %2916, align 4
  %2918 = insertvalue { ptr, ptr, ptr, i32 } %2915, i32 %2917, 3
  %2919 = call ptr @llvm.invariant.start.p0(i64 0, ptr %328)
  %2920 = call ptr @llvm.invariant.start.p0(i64 280, ptr %2908)
  %2921 = getelementptr ptr, ptr %2908, i32 %2917
  %2922 = getelementptr ptr, ptr %2921, i32 15
  %2923 = load ptr, ptr %2922, align 8
  %2924 = call ptr @behavior_wrapper(ptr %2923, { ptr, ptr, ptr, i32 } %2918, ptr %329)
  %2925 = call { ptr, ptr, ptr, i32 } %2924({ ptr, ptr, ptr, i32 } %2918, { ptr, ptr, ptr, i32 } %2918, ptr %328)
  store { ptr, ptr, ptr, i32 } %2925, ptr %330, align 8
  %2926 = call ptr @llvm.invariant.start.p0(i64 16, ptr %330)
  %2927 = getelementptr { ptr, ptr, ptr, i32 }, ptr %330, i32 0, i32 0
  %2928 = getelementptr { ptr, ptr, ptr, i32 }, ptr %331, i32 0, i32 0
  %2929 = load ptr, ptr %2927, align 8
  store ptr %2929, ptr %2928, align 8
  %2930 = getelementptr { ptr, ptr, ptr, i32 }, ptr %330, i32 0, i32 1
  %2931 = getelementptr { ptr, ptr, ptr, i32 }, ptr %331, i32 0, i32 1
  %2932 = load ptr, ptr %2930, align 8
  store ptr %2932, ptr %2931, align 8
  %2933 = getelementptr { ptr, ptr, ptr, i32 }, ptr %330, i32 0, i32 2
  %2934 = getelementptr { ptr, ptr, ptr, i32 }, ptr %331, i32 0, i32 2
  %2935 = load ptr, ptr %2933, align 8
  store ptr %2935, ptr %2934, align 8
  %2936 = getelementptr { ptr, ptr, ptr, i32 }, ptr %330, i32 0, i32 3
  %2937 = getelementptr { ptr, ptr, ptr, i32 }, ptr %331, i32 0, i32 3
  %2938 = load i32, ptr %2936, align 4
  store i32 %2938, ptr %2937, align 4
  call void @set_offset(ptr %331, ptr @StringIterator)
  %2939 = getelementptr { ptr, ptr, ptr, i32 }, ptr %331, i32 0, i32 0
  %2940 = getelementptr { ptr, ptr, ptr, i32 }, ptr %332, i32 0, i32 0
  %2941 = load ptr, ptr %2939, align 8
  store ptr %2941, ptr %2940, align 8
  %2942 = getelementptr { ptr, ptr, ptr, i32 }, ptr %331, i32 0, i32 1
  %2943 = getelementptr { ptr, ptr, ptr, i32 }, ptr %332, i32 0, i32 1
  %2944 = load ptr, ptr %2942, align 8
  store ptr %2944, ptr %2943, align 8
  %2945 = getelementptr { ptr, ptr, ptr, i32 }, ptr %331, i32 0, i32 2
  %2946 = getelementptr { ptr, ptr, ptr, i32 }, ptr %332, i32 0, i32 2
  %2947 = load ptr, ptr %2945, align 8
  store ptr %2947, ptr %2946, align 8
  %2948 = getelementptr { ptr, ptr, ptr, i32 }, ptr %331, i32 0, i32 3
  %2949 = getelementptr { ptr, ptr, ptr, i32 }, ptr %332, i32 0, i32 3
  %2950 = load i32, ptr %2948, align 4
  store i32 %2950, ptr %2949, align 4
  call void @set_offset(ptr %332, ptr @StringIterator)
  %2951 = getelementptr { ptr, ptr, ptr, i32 }, ptr %332, i32 0, i32 0
  %2952 = getelementptr { ptr, ptr, ptr, i32 }, ptr %333, i32 0, i32 0
  %2953 = load ptr, ptr %2951, align 8
  store ptr %2953, ptr %2952, align 8
  %2954 = getelementptr { ptr, ptr, ptr, i32 }, ptr %332, i32 0, i32 1
  %2955 = getelementptr { ptr, ptr, ptr, i32 }, ptr %333, i32 0, i32 1
  %2956 = load ptr, ptr %2954, align 8
  store ptr %2956, ptr %2955, align 8
  %2957 = getelementptr { ptr, ptr, ptr, i32 }, ptr %332, i32 0, i32 2
  %2958 = getelementptr { ptr, ptr, ptr, i32 }, ptr %333, i32 0, i32 2
  %2959 = load ptr, ptr %2957, align 8
  store ptr %2959, ptr %2958, align 8
  %2960 = getelementptr { ptr, ptr, ptr, i32 }, ptr %332, i32 0, i32 3
  %2961 = getelementptr { ptr, ptr, ptr, i32 }, ptr %333, i32 0, i32 3
  %2962 = load i32, ptr %2960, align 4
  store i32 %2962, ptr %2961, align 4
  %2963 = call ptr @llvm.invariant.start.p0(i64 16, ptr %333)
  %2964 = getelementptr { ptr, ptr, ptr, i32 }, ptr %333, i32 0, i32 0
  store ptr %2964, ptr %.reg2mem41, align 8
  %2965 = getelementptr { ptr, ptr, ptr, i32 }, ptr %333, i32 0, i32 1
  store ptr %2965, ptr %.reg2mem39, align 8
  %2966 = getelementptr { ptr, ptr, ptr, i32 }, ptr %333, i32 0, i32 2
  store ptr %2966, ptr %.reg2mem37, align 8
  %2967 = getelementptr { ptr, ptr, ptr, i32 }, ptr %333, i32 0, i32 3
  store ptr %2967, ptr %.reg2mem35, align 8
  %2968 = getelementptr { ptr, i160 }, ptr %336, i32 0, i32 0
  store ptr %2968, ptr %.reg2mem33, align 8
  br label %2969

2969:                                             ; preds = %._crit_edge16, %2853
  %.reload42 = load ptr, ptr %.reg2mem41, align 8
  %2970 = load ptr, ptr %.reload42, align 8
  %2971 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2970, 0
  %.reload40 = load ptr, ptr %.reg2mem39, align 8
  %2972 = load ptr, ptr %.reload40, align 8
  %2973 = insertvalue { ptr, ptr, ptr, i32 } %2971, ptr %2972, 1
  %.reload38 = load ptr, ptr %.reg2mem37, align 8
  %2974 = load ptr, ptr %.reload38, align 8
  %2975 = insertvalue { ptr, ptr, ptr, i32 } %2973, ptr %2974, 2
  %.reload36 = load ptr, ptr %.reg2mem35, align 8
  %2976 = load i32, ptr %.reload36, align 4
  %2977 = insertvalue { ptr, ptr, ptr, i32 } %2975, i32 %2976, 3
  %2978 = call ptr @llvm.invariant.start.p0(i64 0, ptr %334)
  %2979 = call ptr @llvm.invariant.start.p0(i64 48, ptr %2970)
  %2980 = getelementptr ptr, ptr %2970, i32 %2976
  %2981 = getelementptr ptr, ptr %2980, i32 3
  %2982 = load ptr, ptr %2981, align 8
  %2983 = call ptr @behavior_wrapper(ptr %2982, { ptr, ptr, ptr, i32 } %2977, ptr %335)
  %2984 = call { ptr, i160 } %2983({ ptr, ptr, ptr, i32 } %2977, { ptr, ptr, ptr, i32 } %2977, ptr %334)
  store { ptr, i160 } %2984, ptr %336, align 8
  %.reload34 = load ptr, ptr %.reg2mem33, align 8
  %2985 = load ptr, ptr %.reload34, align 8
  %2986 = ptrtoint ptr %2985 to i64
  %2987 = icmp eq i64 %2986, ptrtoint (ptr @nil_typ to i64)
  %2988 = icmp eq i64 %2986, 0
  %2989 = or i1 %2987, %2988
  %2990 = icmp eq i1 %2989, false
  store i1 %2990, ptr %.reg2mem30, align 1
  %.reload32 = load i1, ptr %.reg2mem30, align 1
  br i1 %.reload32, label %2991, label %._crit_edge15

._crit_edge15:                                    ; preds = %2969
  br label %3034

2991:                                             ; preds = %2969
  %2992 = getelementptr { ptr, i160 }, ptr %336, i32 0, i32 0
  %2993 = getelementptr { ptr, i160 }, ptr %337, i32 0, i32 0
  %2994 = load ptr, ptr %2992, align 8
  store ptr %2994, ptr %2993, align 8
  %2995 = getelementptr { ptr, i160 }, ptr %336, i32 0, i32 1
  %2996 = getelementptr { ptr, i160 }, ptr %337, i32 0, i32 1
  %2997 = load i160, ptr %2995, align 4
  store i160 %2997, ptr %2996, align 4
  call void @set_offset(ptr %337, ptr @Character)
  %2998 = getelementptr { ptr, i160 }, ptr %337, i32 0, i32 0
  %2999 = load ptr, ptr %2998, align 8
  %3000 = insertvalue { ptr, i160 } undef, ptr %2999, 0
  %3001 = getelementptr { ptr, i160 }, ptr %337, i32 0, i32 1
  %3002 = load i160, ptr %3001, align 4
  %3003 = insertvalue { ptr, i160 } %3000, i160 %3002, 1
  %3004 = getelementptr [1 x ptr], ptr %338, i32 0, i32 0
  store ptr @_parameterization_Character, ptr %3004, align 8
  %3005 = call ptr @llvm.invariant.start.p0(i64 1, ptr %338)
  %3006 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %3007 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %3008 = getelementptr { ptr }, ptr %339, i32 0, i32 0
  store ptr %2999, ptr %3008, align 8
  %3009 = call ptr @class_behavior_wrapper(ptr %3007, ptr %339)
  call void %3009(ptr %338, { ptr, i160 } %3003)
  %3010 = getelementptr { ptr, ptr, ptr, i32 }, ptr %337, i32 0, i32 0
  %3011 = getelementptr { ptr, ptr, ptr, i32 }, ptr %340, i32 0, i32 0
  %3012 = load ptr, ptr %3010, align 8
  store ptr %3012, ptr %3011, align 8
  %3013 = getelementptr { ptr, ptr, ptr, i32 }, ptr %337, i32 0, i32 1
  %3014 = getelementptr { ptr, ptr, ptr, i32 }, ptr %340, i32 0, i32 1
  %3015 = load ptr, ptr %3013, align 8
  store ptr %3015, ptr %3014, align 8
  %3016 = getelementptr { ptr, ptr, ptr, i32 }, ptr %337, i32 0, i32 2
  %3017 = getelementptr { ptr, ptr, ptr, i32 }, ptr %340, i32 0, i32 2
  %3018 = load ptr, ptr %3016, align 8
  store ptr %3018, ptr %3017, align 8
  %3019 = getelementptr { ptr, ptr, ptr, i32 }, ptr %337, i32 0, i32 3
  %3020 = getelementptr { ptr, ptr, ptr, i32 }, ptr %340, i32 0, i32 3
  %3021 = load i32, ptr %3019, align 4
  store i32 %3021, ptr %3020, align 4
  call void @set_offset(ptr %340, ptr @Character)
  %3022 = getelementptr { ptr, ptr, ptr, i32 }, ptr %340, i32 0, i32 0
  %3023 = getelementptr { ptr, ptr, ptr, i32 }, ptr %336, i32 0, i32 0
  %3024 = load ptr, ptr %3022, align 8
  store ptr %3024, ptr %3023, align 8
  %3025 = getelementptr { ptr, ptr, ptr, i32 }, ptr %340, i32 0, i32 1
  %3026 = getelementptr { ptr, ptr, ptr, i32 }, ptr %336, i32 0, i32 1
  %3027 = load ptr, ptr %3025, align 8
  store ptr %3027, ptr %3026, align 8
  %3028 = getelementptr { ptr, ptr, ptr, i32 }, ptr %340, i32 0, i32 2
  %3029 = getelementptr { ptr, ptr, ptr, i32 }, ptr %336, i32 0, i32 2
  %3030 = load ptr, ptr %3028, align 8
  store ptr %3030, ptr %3029, align 8
  %3031 = getelementptr { ptr, ptr, ptr, i32 }, ptr %340, i32 0, i32 3
  %3032 = getelementptr { ptr, ptr, ptr, i32 }, ptr %336, i32 0, i32 3
  %3033 = load i32, ptr %3031, align 4
  store i32 %3033, ptr %3032, align 4
  br label %3034

3034:                                             ; preds = %._crit_edge15, %2991
  %.reload31 = load i1, ptr %.reg2mem30, align 1
  br i1 %.reload31, label %._crit_edge16, label %3035

._crit_edge16:                                    ; preds = %3034
  br label %2969

3035:                                             ; preds = %3034
  %3036 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), i64 4))
  store ptr %3036, ptr %341, align 8
  %3037 = getelementptr { ptr }, ptr %341, i32 0, i32 0
  %3038 = getelementptr { ptr }, ptr %342, i32 0, i32 0
  %3039 = load ptr, ptr %3037, align 8
  store ptr %3039, ptr %3038, align 8
  %3040 = call ptr @llvm.invariant.start.p0(i64 16, ptr %342)
  store ptr @IntArray, ptr %343, align 8
  %3041 = load ptr, ptr %343, align 8
  %3042 = getelementptr ptr, ptr %3041, i32 6
  %3043 = load ptr, ptr %3042, align 8
  %3044 = call { i64, i64 } @size_wrapper(ptr %3043, ptr %343)
  %3045 = extractvalue { i64, i64 } %3044, 0
  %3046 = call ptr @bump_malloc(i64 %3045)
  %3047 = getelementptr { ptr, ptr, ptr, i32 }, ptr %344, i32 0, i32 1
  %3048 = getelementptr { ptr, ptr, ptr, i32 }, ptr %344, i32 0, i32 3
  store ptr @IntArray, ptr %344, align 8
  store ptr %3046, ptr %3047, align 8
  store i32 9, ptr %3048, align 4
  %3049 = call ptr @llvm.invariant.start.p0(i64 16, ptr %344)
  %3050 = getelementptr { ptr }, ptr %342, i32 0, i32 0
  %3051 = load ptr, ptr %3050, align 8
  %3052 = insertvalue { ptr } undef, ptr %3051, 0
  %3053 = getelementptr { ptr, ptr, ptr, i32 }, ptr %344, i32 0, i32 0
  %3054 = load ptr, ptr %3053, align 8
  %3055 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3054, 0
  %3056 = getelementptr { ptr, ptr, ptr, i32 }, ptr %344, i32 0, i32 1
  %3057 = load ptr, ptr %3056, align 8
  %3058 = insertvalue { ptr, ptr, ptr, i32 } %3055, ptr %3057, 1
  %3059 = getelementptr { ptr, ptr, ptr, i32 }, ptr %344, i32 0, i32 2
  %3060 = load ptr, ptr %3059, align 8
  %3061 = insertvalue { ptr, ptr, ptr, i32 } %3058, ptr %3060, 2
  %3062 = getelementptr { ptr, ptr, ptr, i32 }, ptr %344, i32 0, i32 3
  %3063 = load i32, ptr %3062, align 4
  %3064 = insertvalue { ptr, ptr, ptr, i32 } %3061, i32 %3063, 3
  %3065 = getelementptr [3 x ptr], ptr %345, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %3065, align 8
  %3066 = getelementptr [3 x ptr], ptr %345, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %3066, align 8
  %3067 = getelementptr [3 x ptr], ptr %345, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %3067, align 8
  %3068 = call ptr @llvm.invariant.start.p0(i64 9, ptr %345)
  %3069 = call ptr @llvm.invariant.start.p0(i64 616, ptr %3054)
  %3070 = getelementptr ptr, ptr %3054, i32 %3063
  %3071 = getelementptr ptr, ptr %3070, i32 5
  %3072 = load ptr, ptr %3071, align 8
  %3073 = getelementptr { ptr, ptr, ptr }, ptr %346, i32 0, i32 0
  store ptr @buffer_typ, ptr %3073, align 8
  %3074 = getelementptr { ptr, ptr, ptr }, ptr %346, i32 0, i32 1
  store ptr @i32_typ, ptr %3074, align 8
  %3075 = getelementptr { ptr, ptr, ptr }, ptr %346, i32 0, i32 2
  store ptr @i32_typ, ptr %3075, align 8
  %3076 = call ptr @behavior_wrapper(ptr %3072, { ptr, ptr, ptr, i32 } %3064, ptr %346)
  call void %3076({ ptr, ptr, ptr, i32 } %3064, { ptr, ptr, ptr, i32 } %3064, ptr %345, { ptr } %3052, i32 3, i32 4)
  %3077 = getelementptr { ptr, ptr, ptr, i32 }, ptr %344, i32 0, i32 0
  %3078 = load ptr, ptr %3077, align 8
  %3079 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3078, 0
  %3080 = getelementptr { ptr, ptr, ptr, i32 }, ptr %344, i32 0, i32 1
  %3081 = load ptr, ptr %3080, align 8
  %3082 = insertvalue { ptr, ptr, ptr, i32 } %3079, ptr %3081, 1
  %3083 = getelementptr { ptr, ptr, ptr, i32 }, ptr %344, i32 0, i32 2
  %3084 = load ptr, ptr %3083, align 8
  %3085 = insertvalue { ptr, ptr, ptr, i32 } %3082, ptr %3084, 2
  %3086 = getelementptr { ptr, ptr, ptr, i32 }, ptr %344, i32 0, i32 3
  %3087 = load i32, ptr %3086, align 4
  %3088 = insertvalue { ptr, ptr, ptr, i32 } %3085, i32 %3087, 3
  %3089 = call ptr @llvm.invariant.start.p0(i64 0, ptr %347)
  %3090 = call ptr @llvm.invariant.start.p0(i64 616, ptr %3078)
  %3091 = getelementptr ptr, ptr %3078, i32 %3087
  %3092 = getelementptr ptr, ptr %3091, i32 25
  %3093 = load ptr, ptr %3092, align 8
  %3094 = call ptr @behavior_wrapper(ptr %3093, { ptr, ptr, ptr, i32 } %3088, ptr %348)
  %3095 = call { ptr, ptr, ptr, i32 } %3094({ ptr, ptr, ptr, i32 } %3088, { ptr, ptr, ptr, i32 } %3088, ptr %347)
  store { ptr, ptr, ptr, i32 } %3095, ptr %349, align 8
  %3096 = call ptr @llvm.invariant.start.p0(i64 16, ptr %349)
  %3097 = getelementptr { ptr, ptr, ptr, i32 }, ptr %349, i32 0, i32 0
  %3098 = getelementptr { ptr, ptr, ptr, i32 }, ptr %350, i32 0, i32 0
  %3099 = load ptr, ptr %3097, align 8
  store ptr %3099, ptr %3098, align 8
  %3100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %349, i32 0, i32 1
  %3101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %350, i32 0, i32 1
  %3102 = load ptr, ptr %3100, align 8
  store ptr %3102, ptr %3101, align 8
  %3103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %349, i32 0, i32 2
  %3104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %350, i32 0, i32 2
  %3105 = load ptr, ptr %3103, align 8
  store ptr %3105, ptr %3104, align 8
  %3106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %349, i32 0, i32 3
  %3107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %350, i32 0, i32 3
  %3108 = load i32, ptr %3106, align 4
  store i32 %3108, ptr %3107, align 4
  call void @set_offset(ptr %350, ptr @String)
  %3109 = getelementptr { ptr, i160 }, ptr %350, i32 0, i32 0
  %3110 = load ptr, ptr %3109, align 8
  %3111 = insertvalue { ptr, i160 } undef, ptr %3110, 0
  %3112 = getelementptr { ptr, i160 }, ptr %350, i32 0, i32 1
  %3113 = load i160, ptr %3112, align 4
  %3114 = insertvalue { ptr, i160 } %3111, i160 %3113, 1
  %3115 = getelementptr [1 x ptr], ptr %351, i32 0, i32 0
  store ptr @_parameterization_String, ptr %3115, align 8
  %3116 = call ptr @llvm.invariant.start.p0(i64 1, ptr %351)
  %3117 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %3118 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %3119 = getelementptr { ptr }, ptr %352, i32 0, i32 0
  store ptr %3110, ptr %3119, align 8
  %3120 = call ptr @class_behavior_wrapper(ptr %3118, ptr %352)
  call void %3120(ptr %351, { ptr, i160 } %3114)
  store ptr @Integer2, ptr %353, align 8
  %3121 = load ptr, ptr %353, align 8
  %3122 = getelementptr ptr, ptr %3121, i32 6
  %3123 = load ptr, ptr %3122, align 8
  %3124 = call { i64, i64 } @size_wrapper(ptr %3123, ptr %353)
  %3125 = extractvalue { i64, i64 } %3124, 0
  %3126 = call ptr @bump_malloc(i64 %3125)
  %3127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %354, i32 0, i32 1
  %3128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %354, i32 0, i32 3
  store ptr @Integer2, ptr %354, align 8
  store ptr %3126, ptr %3127, align 8
  store i32 9, ptr %3128, align 4
  %3129 = call ptr @llvm.invariant.start.p0(i64 16, ptr %354)
  %3130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %354, i32 0, i32 0
  %3131 = load ptr, ptr %3130, align 8
  %3132 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3131, 0
  %3133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %354, i32 0, i32 1
  %3134 = load ptr, ptr %3133, align 8
  %3135 = insertvalue { ptr, ptr, ptr, i32 } %3132, ptr %3134, 1
  %3136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %354, i32 0, i32 2
  %3137 = load ptr, ptr %3136, align 8
  %3138 = insertvalue { ptr, ptr, ptr, i32 } %3135, ptr %3137, 2
  %3139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %354, i32 0, i32 3
  %3140 = load i32, ptr %3139, align 4
  %3141 = insertvalue { ptr, ptr, ptr, i32 } %3138, i32 %3140, 3
  %3142 = getelementptr [1 x ptr], ptr %355, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %3142, align 8
  %3143 = call ptr @llvm.invariant.start.p0(i64 1, ptr %355)
  %3144 = call ptr @llvm.invariant.start.p0(i64 320, ptr %3131)
  %3145 = getelementptr ptr, ptr %3131, i32 %3140
  %3146 = getelementptr ptr, ptr %3145, i32 2
  %3147 = load ptr, ptr %3146, align 8
  %3148 = getelementptr { ptr }, ptr %356, i32 0, i32 0
  store ptr @i32_typ, ptr %3148, align 8
  %3149 = call ptr @behavior_wrapper(ptr %3147, { ptr, ptr, ptr, i32 } %3141, ptr %356)
  call void %3149({ ptr, ptr, ptr, i32 } %3141, { ptr, ptr, ptr, i32 } %3141, ptr %355, i32 77)
  %3150 = getelementptr { ptr, ptr, ptr, i32 }, ptr %354, i32 0, i32 0
  %3151 = getelementptr { ptr, ptr, ptr, i32 }, ptr %357, i32 0, i32 0
  %3152 = load ptr, ptr %3150, align 8
  store ptr %3152, ptr %3151, align 8
  %3153 = getelementptr { ptr, ptr, ptr, i32 }, ptr %354, i32 0, i32 1
  %3154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %357, i32 0, i32 1
  %3155 = load ptr, ptr %3153, align 8
  store ptr %3155, ptr %3154, align 8
  %3156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %354, i32 0, i32 2
  %3157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %357, i32 0, i32 2
  %3158 = load ptr, ptr %3156, align 8
  store ptr %3158, ptr %3157, align 8
  %3159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %354, i32 0, i32 3
  %3160 = getelementptr { ptr, ptr, ptr, i32 }, ptr %357, i32 0, i32 3
  %3161 = load i32, ptr %3159, align 4
  store i32 %3161, ptr %3160, align 4
  call void @set_offset(ptr %357, ptr @Integer2)
  %3162 = getelementptr { ptr, ptr, ptr, i32 }, ptr %357, i32 0, i32 0
  %3163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %358, i32 0, i32 0
  %3164 = load ptr, ptr %3162, align 8
  store ptr %3164, ptr %3163, align 8
  %3165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %357, i32 0, i32 1
  %3166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %358, i32 0, i32 1
  %3167 = load ptr, ptr %3165, align 8
  store ptr %3167, ptr %3166, align 8
  %3168 = getelementptr { ptr, ptr, ptr, i32 }, ptr %357, i32 0, i32 2
  %3169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %358, i32 0, i32 2
  %3170 = load ptr, ptr %3168, align 8
  store ptr %3170, ptr %3169, align 8
  %3171 = getelementptr { ptr, ptr, ptr, i32 }, ptr %357, i32 0, i32 3
  %3172 = getelementptr { ptr, ptr, ptr, i32 }, ptr %358, i32 0, i32 3
  %3173 = load i32, ptr %3171, align 4
  store i32 %3173, ptr %3172, align 4
  %3174 = call ptr @llvm.invariant.start.p0(i64 16, ptr %358)
  %3175 = getelementptr { ptr, ptr, ptr, i32 }, ptr %358, i32 0, i32 0
  %3176 = load ptr, ptr %3175, align 8
  %3177 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3176, 0
  %3178 = getelementptr { ptr, ptr, ptr, i32 }, ptr %358, i32 0, i32 1
  %3179 = load ptr, ptr %3178, align 8
  %3180 = insertvalue { ptr, ptr, ptr, i32 } %3177, ptr %3179, 1
  %3181 = getelementptr { ptr, ptr, ptr, i32 }, ptr %358, i32 0, i32 2
  %3182 = load ptr, ptr %3181, align 8
  %3183 = insertvalue { ptr, ptr, ptr, i32 } %3180, ptr %3182, 2
  %3184 = getelementptr { ptr, ptr, ptr, i32 }, ptr %358, i32 0, i32 3
  %3185 = load i32, ptr %3184, align 4
  %3186 = insertvalue { ptr, ptr, ptr, i32 } %3183, i32 %3185, 3
  %3187 = call ptr @llvm.invariant.start.p0(i64 0, ptr %359)
  %3188 = call ptr @llvm.invariant.start.p0(i64 320, ptr %3176)
  %3189 = getelementptr ptr, ptr %3176, i32 %3185
  %3190 = getelementptr ptr, ptr %3189, i32 7
  %3191 = load ptr, ptr %3190, align 8
  %3192 = call ptr @behavior_wrapper(ptr %3191, { ptr, ptr, ptr, i32 } %3186, ptr %360)
  call void %3192({ ptr, ptr, ptr, i32 } %3186, { ptr, ptr, ptr, i32 } %3186, ptr %359)
  %3193 = getelementptr { ptr, i160 }, ptr %358, i32 0, i32 0
  %3194 = load ptr, ptr %3193, align 8
  %3195 = insertvalue { ptr, i160 } undef, ptr %3194, 0
  %3196 = getelementptr { ptr, i160 }, ptr %358, i32 0, i32 1
  %3197 = load i160, ptr %3196, align 4
  %3198 = insertvalue { ptr, i160 } %3195, i160 %3197, 1
  %3199 = getelementptr [1 x ptr], ptr %361, i32 0, i32 0
  store ptr @_parameterization_Integer2, ptr %3199, align 8
  %3200 = call ptr @llvm.invariant.start.p0(i64 1, ptr %361)
  %3201 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %3202 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %3203 = getelementptr { ptr }, ptr %362, i32 0, i32 0
  store ptr %3194, ptr %3203, align 8
  %3204 = call ptr @class_behavior_wrapper(ptr %3202, ptr %362)
  call void %3204(ptr %361, { ptr, i160 } %3198)
  %3205 = getelementptr { ptr, ptr, ptr, i32 }, ptr %358, i32 0, i32 0
  %3206 = load ptr, ptr %3205, align 8
  %3207 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3206, 0
  %3208 = getelementptr { ptr, ptr, ptr, i32 }, ptr %358, i32 0, i32 1
  %3209 = load ptr, ptr %3208, align 8
  %3210 = insertvalue { ptr, ptr, ptr, i32 } %3207, ptr %3209, 1
  %3211 = getelementptr { ptr, ptr, ptr, i32 }, ptr %358, i32 0, i32 2
  %3212 = load ptr, ptr %3211, align 8
  %3213 = insertvalue { ptr, ptr, ptr, i32 } %3210, ptr %3212, 2
  %3214 = getelementptr { ptr, ptr, ptr, i32 }, ptr %358, i32 0, i32 3
  %3215 = load i32, ptr %3214, align 4
  %3216 = insertvalue { ptr, ptr, ptr, i32 } %3213, i32 %3215, 3
  %3217 = call ptr @llvm.invariant.start.p0(i64 0, ptr %363)
  %3218 = call ptr @llvm.invariant.start.p0(i64 320, ptr %3206)
  %3219 = getelementptr ptr, ptr %3206, i32 %3215
  %3220 = getelementptr ptr, ptr %3219, i32 8
  %3221 = load ptr, ptr %3220, align 8
  %3222 = call ptr @behavior_wrapper(ptr %3221, { ptr, ptr, ptr, i32 } %3216, ptr %364)
  call void %3222({ ptr, ptr, ptr, i32 } %3216, { ptr, ptr, ptr, i32 } %3216, ptr %363)
  store ptr @Range, ptr %365, align 8
  %3223 = load ptr, ptr %365, align 8
  %3224 = getelementptr ptr, ptr %3223, i32 6
  %3225 = load ptr, ptr %3224, align 8
  %3226 = call { i64, i64 } @size_wrapper(ptr %3225, ptr %365)
  %3227 = extractvalue { i64, i64 } %3226, 0
  %3228 = call ptr @bump_malloc(i64 %3227)
  %3229 = getelementptr { ptr, ptr, ptr, i32 }, ptr %366, i32 0, i32 1
  %3230 = getelementptr { ptr, ptr, ptr, i32 }, ptr %366, i32 0, i32 3
  store ptr @Range, ptr %366, align 8
  store ptr %3228, ptr %3229, align 8
  store i32 9, ptr %3230, align 4
  %3231 = call ptr @llvm.invariant.start.p0(i64 16, ptr %366)
  %3232 = getelementptr { ptr, ptr, ptr, i32 }, ptr %366, i32 0, i32 0
  %3233 = load ptr, ptr %3232, align 8
  %3234 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3233, 0
  %3235 = getelementptr { ptr, ptr, ptr, i32 }, ptr %366, i32 0, i32 1
  %3236 = load ptr, ptr %3235, align 8
  %3237 = insertvalue { ptr, ptr, ptr, i32 } %3234, ptr %3236, 1
  %3238 = getelementptr { ptr, ptr, ptr, i32 }, ptr %366, i32 0, i32 2
  %3239 = load ptr, ptr %3238, align 8
  %3240 = insertvalue { ptr, ptr, ptr, i32 } %3237, ptr %3239, 2
  %3241 = getelementptr { ptr, ptr, ptr, i32 }, ptr %366, i32 0, i32 3
  %3242 = load i32, ptr %3241, align 4
  %3243 = insertvalue { ptr, ptr, ptr, i32 } %3240, i32 %3242, 3
  %3244 = getelementptr [2 x ptr], ptr %367, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %3244, align 8
  %3245 = getelementptr [2 x ptr], ptr %367, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %3245, align 8
  %3246 = call ptr @llvm.invariant.start.p0(i64 4, ptr %367)
  %3247 = call ptr @llvm.invariant.start.p0(i64 456, ptr %3233)
  %3248 = getelementptr ptr, ptr %3233, i32 %3242
  %3249 = getelementptr ptr, ptr %3248, i32 4
  %3250 = load ptr, ptr %3249, align 8
  %3251 = getelementptr { ptr, ptr }, ptr %368, i32 0, i32 0
  store ptr @i32_typ, ptr %3251, align 8
  %3252 = getelementptr { ptr, ptr }, ptr %368, i32 0, i32 1
  store ptr @i32_typ, ptr %3252, align 8
  %3253 = call ptr @behavior_wrapper(ptr %3250, { ptr, ptr, ptr, i32 } %3243, ptr %368)
  call void %3253({ ptr, ptr, ptr, i32 } %3243, { ptr, ptr, ptr, i32 } %3243, ptr %367, i32 0, i32 25)
  %3254 = getelementptr { ptr, ptr, ptr, i32 }, ptr %366, i32 0, i32 0
  %3255 = load ptr, ptr %3254, align 8
  %3256 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3255, 0
  %3257 = getelementptr { ptr, ptr, ptr, i32 }, ptr %366, i32 0, i32 1
  %3258 = load ptr, ptr %3257, align 8
  %3259 = insertvalue { ptr, ptr, ptr, i32 } %3256, ptr %3258, 1
  %3260 = getelementptr { ptr, ptr, ptr, i32 }, ptr %366, i32 0, i32 2
  %3261 = load ptr, ptr %3260, align 8
  %3262 = insertvalue { ptr, ptr, ptr, i32 } %3259, ptr %3261, 2
  %3263 = getelementptr { ptr, ptr, ptr, i32 }, ptr %366, i32 0, i32 3
  %3264 = load i32, ptr %3263, align 4
  %3265 = insertvalue { ptr, ptr, ptr, i32 } %3262, i32 %3264, 3
  %3266 = getelementptr [1 x ptr], ptr %369, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %3266, align 8
  %3267 = call ptr @llvm.invariant.start.p0(i64 1, ptr %369)
  %3268 = call ptr @llvm.invariant.start.p0(i64 456, ptr %3255)
  %3269 = getelementptr ptr, ptr %3255, i32 %3264
  %3270 = getelementptr ptr, ptr %3269, i32 5
  %3271 = load ptr, ptr %3270, align 8
  %3272 = getelementptr { ptr }, ptr %370, i32 0, i32 0
  store ptr @i32_typ, ptr %3272, align 8
  %3273 = call ptr @behavior_wrapper(ptr %3271, { ptr, ptr, ptr, i32 } %3265, ptr %370)
  %3274 = call { ptr, ptr, ptr, i32 } %3273({ ptr, ptr, ptr, i32 } %3265, { ptr, ptr, ptr, i32 } %3265, ptr %369, i32 5)
  store { ptr, ptr, ptr, i32 } %3274, ptr %371, align 8
  %3275 = call ptr @llvm.invariant.start.p0(i64 16, ptr %371)
  %3276 = getelementptr { ptr, ptr, ptr, i32 }, ptr %371, i32 0, i32 0
  %3277 = getelementptr { ptr, ptr, ptr, i32 }, ptr %372, i32 0, i32 0
  %3278 = load ptr, ptr %3276, align 8
  store ptr %3278, ptr %3277, align 8
  %3279 = getelementptr { ptr, ptr, ptr, i32 }, ptr %371, i32 0, i32 1
  %3280 = getelementptr { ptr, ptr, ptr, i32 }, ptr %372, i32 0, i32 1
  %3281 = load ptr, ptr %3279, align 8
  store ptr %3281, ptr %3280, align 8
  %3282 = getelementptr { ptr, ptr, ptr, i32 }, ptr %371, i32 0, i32 2
  %3283 = getelementptr { ptr, ptr, ptr, i32 }, ptr %372, i32 0, i32 2
  %3284 = load ptr, ptr %3282, align 8
  store ptr %3284, ptr %3283, align 8
  %3285 = getelementptr { ptr, ptr, ptr, i32 }, ptr %371, i32 0, i32 3
  %3286 = getelementptr { ptr, ptr, ptr, i32 }, ptr %372, i32 0, i32 3
  %3287 = load i32, ptr %3285, align 4
  store i32 %3287, ptr %3286, align 4
  call void @set_offset(ptr %372, ptr @Range)
  %3288 = getelementptr { ptr, ptr, ptr, i32 }, ptr %372, i32 0, i32 0
  %3289 = load ptr, ptr %3288, align 8
  %3290 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3289, 0
  %3291 = getelementptr { ptr, ptr, ptr, i32 }, ptr %372, i32 0, i32 1
  %3292 = load ptr, ptr %3291, align 8
  %3293 = insertvalue { ptr, ptr, ptr, i32 } %3290, ptr %3292, 1
  %3294 = getelementptr { ptr, ptr, ptr, i32 }, ptr %372, i32 0, i32 2
  %3295 = load ptr, ptr %3294, align 8
  %3296 = insertvalue { ptr, ptr, ptr, i32 } %3293, ptr %3295, 2
  %3297 = getelementptr { ptr, ptr, ptr, i32 }, ptr %372, i32 0, i32 3
  %3298 = load i32, ptr %3297, align 4
  %3299 = insertvalue { ptr, ptr, ptr, i32 } %3296, i32 %3298, 3
  %3300 = call ptr @llvm.invariant.start.p0(i64 0, ptr %373)
  %3301 = call ptr @llvm.invariant.start.p0(i64 456, ptr %3289)
  %3302 = getelementptr ptr, ptr %3289, i32 %3298
  %3303 = getelementptr ptr, ptr %3302, i32 16
  %3304 = load ptr, ptr %3303, align 8
  %3305 = call ptr @behavior_wrapper(ptr %3304, { ptr, ptr, ptr, i32 } %3299, ptr %374)
  %3306 = call { ptr, ptr, ptr, i32 } %3305({ ptr, ptr, ptr, i32 } %3299, { ptr, ptr, ptr, i32 } %3299, ptr %373)
  store { ptr, ptr, ptr, i32 } %3306, ptr %375, align 8
  %3307 = call ptr @llvm.invariant.start.p0(i64 16, ptr %375)
  %3308 = getelementptr { ptr, ptr, ptr, i32 }, ptr %375, i32 0, i32 0
  %3309 = getelementptr { ptr, ptr, ptr, i32 }, ptr %376, i32 0, i32 0
  %3310 = load ptr, ptr %3308, align 8
  store ptr %3310, ptr %3309, align 8
  %3311 = getelementptr { ptr, ptr, ptr, i32 }, ptr %375, i32 0, i32 1
  %3312 = getelementptr { ptr, ptr, ptr, i32 }, ptr %376, i32 0, i32 1
  %3313 = load ptr, ptr %3311, align 8
  store ptr %3313, ptr %3312, align 8
  %3314 = getelementptr { ptr, ptr, ptr, i32 }, ptr %375, i32 0, i32 2
  %3315 = getelementptr { ptr, ptr, ptr, i32 }, ptr %376, i32 0, i32 2
  %3316 = load ptr, ptr %3314, align 8
  store ptr %3316, ptr %3315, align 8
  %3317 = getelementptr { ptr, ptr, ptr, i32 }, ptr %375, i32 0, i32 3
  %3318 = getelementptr { ptr, ptr, ptr, i32 }, ptr %376, i32 0, i32 3
  %3319 = load i32, ptr %3317, align 4
  store i32 %3319, ptr %3318, align 4
  call void @set_offset(ptr %376, ptr @RangeIterator)
  %3320 = getelementptr { ptr, ptr, ptr, i32 }, ptr %376, i32 0, i32 0
  %3321 = getelementptr { ptr, ptr, ptr, i32 }, ptr %377, i32 0, i32 0
  %3322 = load ptr, ptr %3320, align 8
  store ptr %3322, ptr %3321, align 8
  %3323 = getelementptr { ptr, ptr, ptr, i32 }, ptr %376, i32 0, i32 1
  %3324 = getelementptr { ptr, ptr, ptr, i32 }, ptr %377, i32 0, i32 1
  %3325 = load ptr, ptr %3323, align 8
  store ptr %3325, ptr %3324, align 8
  %3326 = getelementptr { ptr, ptr, ptr, i32 }, ptr %376, i32 0, i32 2
  %3327 = getelementptr { ptr, ptr, ptr, i32 }, ptr %377, i32 0, i32 2
  %3328 = load ptr, ptr %3326, align 8
  store ptr %3328, ptr %3327, align 8
  %3329 = getelementptr { ptr, ptr, ptr, i32 }, ptr %376, i32 0, i32 3
  %3330 = getelementptr { ptr, ptr, ptr, i32 }, ptr %377, i32 0, i32 3
  %3331 = load i32, ptr %3329, align 4
  store i32 %3331, ptr %3330, align 4
  call void @set_offset(ptr %377, ptr @RangeIterator)
  %3332 = getelementptr { ptr, ptr, ptr, i32 }, ptr %377, i32 0, i32 0
  %3333 = getelementptr { ptr, ptr, ptr, i32 }, ptr %378, i32 0, i32 0
  %3334 = load ptr, ptr %3332, align 8
  store ptr %3334, ptr %3333, align 8
  %3335 = getelementptr { ptr, ptr, ptr, i32 }, ptr %377, i32 0, i32 1
  %3336 = getelementptr { ptr, ptr, ptr, i32 }, ptr %378, i32 0, i32 1
  %3337 = load ptr, ptr %3335, align 8
  store ptr %3337, ptr %3336, align 8
  %3338 = getelementptr { ptr, ptr, ptr, i32 }, ptr %377, i32 0, i32 2
  %3339 = getelementptr { ptr, ptr, ptr, i32 }, ptr %378, i32 0, i32 2
  %3340 = load ptr, ptr %3338, align 8
  store ptr %3340, ptr %3339, align 8
  %3341 = getelementptr { ptr, ptr, ptr, i32 }, ptr %377, i32 0, i32 3
  %3342 = getelementptr { ptr, ptr, ptr, i32 }, ptr %378, i32 0, i32 3
  %3343 = load i32, ptr %3341, align 4
  store i32 %3343, ptr %3342, align 4
  %3344 = call ptr @llvm.invariant.start.p0(i64 16, ptr %378)
  %3345 = getelementptr { ptr, ptr, ptr, i32 }, ptr %378, i32 0, i32 0
  store ptr %3345, ptr %.reg2mem28, align 8
  %3346 = getelementptr { ptr, ptr, ptr, i32 }, ptr %378, i32 0, i32 1
  store ptr %3346, ptr %.reg2mem26, align 8
  %3347 = getelementptr { ptr, ptr, ptr, i32 }, ptr %378, i32 0, i32 2
  store ptr %3347, ptr %.reg2mem24, align 8
  %3348 = getelementptr { ptr, ptr, ptr, i32 }, ptr %378, i32 0, i32 3
  store ptr %3348, ptr %.reg2mem22, align 8
  %3349 = getelementptr { ptr, i32 }, ptr %381, i32 0, i32 0
  store ptr %3349, ptr %.reg2mem20, align 8
  br label %3350

3350:                                             ; preds = %._crit_edge18, %3035
  %.reload29 = load ptr, ptr %.reg2mem28, align 8
  %3351 = load ptr, ptr %.reload29, align 8
  %3352 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3351, 0
  %.reload27 = load ptr, ptr %.reg2mem26, align 8
  %3353 = load ptr, ptr %.reload27, align 8
  %3354 = insertvalue { ptr, ptr, ptr, i32 } %3352, ptr %3353, 1
  %.reload25 = load ptr, ptr %.reg2mem24, align 8
  %3355 = load ptr, ptr %.reload25, align 8
  %3356 = insertvalue { ptr, ptr, ptr, i32 } %3354, ptr %3355, 2
  %.reload23 = load ptr, ptr %.reg2mem22, align 8
  %3357 = load i32, ptr %.reload23, align 4
  %3358 = insertvalue { ptr, ptr, ptr, i32 } %3356, i32 %3357, 3
  %3359 = call ptr @llvm.invariant.start.p0(i64 0, ptr %379)
  %3360 = call ptr @llvm.invariant.start.p0(i64 72, ptr %3351)
  %3361 = getelementptr ptr, ptr %3351, i32 %3357
  %3362 = getelementptr ptr, ptr %3361, i32 4
  %3363 = load ptr, ptr %3362, align 8
  %3364 = call ptr @behavior_wrapper(ptr %3363, { ptr, ptr, ptr, i32 } %3358, ptr %380)
  %3365 = call { ptr, i32 } %3364({ ptr, ptr, ptr, i32 } %3358, { ptr, ptr, ptr, i32 } %3358, ptr %379)
  store { ptr, i32 } %3365, ptr %381, align 8
  %.reload21 = load ptr, ptr %.reg2mem20, align 8
  %3366 = load ptr, ptr %.reload21, align 8
  %3367 = ptrtoint ptr %3366 to i64
  %3368 = icmp eq i64 %3367, ptrtoint (ptr @nil_typ to i64)
  %3369 = icmp eq i64 %3367, 0
  %3370 = or i1 %3368, %3369
  %3371 = icmp eq i1 %3370, false
  store i1 %3371, ptr %.reg2mem, align 1
  %.reload19 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload19, label %3372, label %._crit_edge17

._crit_edge17:                                    ; preds = %3350
  br label %3385

3372:                                             ; preds = %3350
  %3373 = getelementptr { ptr, i32 }, ptr %381, i32 0, i32 1
  %3374 = load i32, ptr %3373, align 4
  store i32 %3374, ptr %382, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %383, align 4
  %3375 = load ptr, ptr %383, align 8
  %3376 = insertvalue { ptr, i160 } undef, ptr %3375, 0
  %3377 = load i160, ptr %382, align 4
  %3378 = insertvalue { ptr, i160 } %3376, i160 %3377, 1
  %3379 = getelementptr [1 x ptr], ptr %384, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %3379, align 8
  %3380 = call ptr @llvm.invariant.start.p0(i64 1, ptr %384)
  %3381 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %3382 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %3383 = getelementptr { ptr }, ptr %385, i32 0, i32 0
  store ptr %3375, ptr %3383, align 8
  %3384 = call ptr @class_behavior_wrapper(ptr %3382, ptr %385)
  call void %3384(ptr %384, { ptr, i160 } %3378)
  store i32 %3374, ptr %381, align 4
  br label %3385

3385:                                             ; preds = %._crit_edge17, %3372
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge18, label %3386

._crit_edge18:                                    ; preds = %3385
  br label %3350

3386:                                             ; preds = %3385
  store ptr @_functionliteral_dkhwrqqsxh, ptr %386, align 8
  store ptr @_functionliteral_yoimaxtxbn, ptr %387, align 8
  %3387 = getelementptr { ptr }, ptr %386, i32 0, i32 0
  %3388 = load ptr, ptr %3387, align 8
  %3389 = insertvalue { ptr } undef, ptr %3388, 0
  %3390 = getelementptr { ptr }, ptr %387, i32 0, i32 0
  %3391 = load ptr, ptr %3390, align 8
  %3392 = insertvalue { ptr } undef, ptr %3391, 0
  %3393 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), i64 5))
  store ptr %3393, ptr %388, align 8
  %3394 = getelementptr { ptr }, ptr %388, i32 0, i32 0
  %3395 = getelementptr { ptr }, ptr %389, i32 0, i32 0
  %3396 = load ptr, ptr %3394, align 8
  store ptr %3396, ptr %3395, align 8
  %3397 = call ptr @llvm.invariant.start.p0(i64 16, ptr %389)
  store ptr @IntArray, ptr %390, align 8
  %3398 = load ptr, ptr %390, align 8
  %3399 = getelementptr ptr, ptr %3398, i32 6
  %3400 = load ptr, ptr %3399, align 8
  %3401 = call { i64, i64 } @size_wrapper(ptr %3400, ptr %390)
  %3402 = extractvalue { i64, i64 } %3401, 0
  %3403 = call ptr @bump_malloc(i64 %3402)
  %3404 = getelementptr { ptr, ptr, ptr, i32 }, ptr %391, i32 0, i32 1
  %3405 = getelementptr { ptr, ptr, ptr, i32 }, ptr %391, i32 0, i32 3
  store ptr @IntArray, ptr %391, align 8
  store ptr %3403, ptr %3404, align 8
  store i32 9, ptr %3405, align 4
  %3406 = call ptr @llvm.invariant.start.p0(i64 16, ptr %391)
  %3407 = getelementptr { ptr }, ptr %389, i32 0, i32 0
  %3408 = load ptr, ptr %3407, align 8
  %3409 = insertvalue { ptr } undef, ptr %3408, 0
  %3410 = getelementptr { ptr, ptr, ptr, i32 }, ptr %391, i32 0, i32 0
  %3411 = load ptr, ptr %3410, align 8
  %3412 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3411, 0
  %3413 = getelementptr { ptr, ptr, ptr, i32 }, ptr %391, i32 0, i32 1
  %3414 = load ptr, ptr %3413, align 8
  %3415 = insertvalue { ptr, ptr, ptr, i32 } %3412, ptr %3414, 1
  %3416 = getelementptr { ptr, ptr, ptr, i32 }, ptr %391, i32 0, i32 2
  %3417 = load ptr, ptr %3416, align 8
  %3418 = insertvalue { ptr, ptr, ptr, i32 } %3415, ptr %3417, 2
  %3419 = getelementptr { ptr, ptr, ptr, i32 }, ptr %391, i32 0, i32 3
  %3420 = load i32, ptr %3419, align 4
  %3421 = insertvalue { ptr, ptr, ptr, i32 } %3418, i32 %3420, 3
  %3422 = getelementptr [3 x ptr], ptr %392, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %3422, align 8
  %3423 = getelementptr [3 x ptr], ptr %392, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %3423, align 8
  %3424 = getelementptr [3 x ptr], ptr %392, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %3424, align 8
  %3425 = call ptr @llvm.invariant.start.p0(i64 9, ptr %392)
  %3426 = call ptr @llvm.invariant.start.p0(i64 616, ptr %3411)
  %3427 = getelementptr ptr, ptr %3411, i32 %3420
  %3428 = getelementptr ptr, ptr %3427, i32 5
  %3429 = load ptr, ptr %3428, align 8
  %3430 = getelementptr { ptr, ptr, ptr }, ptr %393, i32 0, i32 0
  store ptr @buffer_typ, ptr %3430, align 8
  %3431 = getelementptr { ptr, ptr, ptr }, ptr %393, i32 0, i32 1
  store ptr @i32_typ, ptr %3431, align 8
  %3432 = getelementptr { ptr, ptr, ptr }, ptr %393, i32 0, i32 2
  store ptr @i32_typ, ptr %3432, align 8
  %3433 = call ptr @behavior_wrapper(ptr %3429, { ptr, ptr, ptr, i32 } %3421, ptr %393)
  call void %3433({ ptr, ptr, ptr, i32 } %3421, { ptr, ptr, ptr, i32 } %3421, ptr %392, { ptr } %3409, i32 4, i32 5)
  %3434 = getelementptr { ptr, ptr, ptr, i32 }, ptr %391, i32 0, i32 0
  %3435 = load ptr, ptr %3434, align 8
  %3436 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3435, 0
  %3437 = getelementptr { ptr, ptr, ptr, i32 }, ptr %391, i32 0, i32 1
  %3438 = load ptr, ptr %3437, align 8
  %3439 = insertvalue { ptr, ptr, ptr, i32 } %3436, ptr %3438, 1
  %3440 = getelementptr { ptr, ptr, ptr, i32 }, ptr %391, i32 0, i32 2
  %3441 = load ptr, ptr %3440, align 8
  %3442 = insertvalue { ptr, ptr, ptr, i32 } %3439, ptr %3441, 2
  %3443 = getelementptr { ptr, ptr, ptr, i32 }, ptr %391, i32 0, i32 3
  %3444 = load i32, ptr %3443, align 4
  %3445 = insertvalue { ptr, ptr, ptr, i32 } %3442, i32 %3444, 3
  %3446 = getelementptr [1 x ptr], ptr %394, i32 0, i32 0
  store ptr @_parameterization_FunctionPtri32_to_Ptri32, ptr %3446, align 8
  %3447 = call ptr @llvm.invariant.start.p0(i64 1, ptr %394)
  %3448 = call ptr @llvm.invariant.start.p0(i64 616, ptr %3435)
  %3449 = getelementptr ptr, ptr %3435, i32 %3444
  %3450 = getelementptr ptr, ptr %3449, i32 18
  %3451 = load ptr, ptr %3450, align 8
  %3452 = getelementptr { ptr }, ptr %395, i32 0, i32 0
  store ptr @function_typ, ptr %3452, align 8
  %3453 = call ptr @behavior_wrapper(ptr %3451, { ptr, ptr, ptr, i32 } %3445, ptr %395)
  %3454 = call { ptr, ptr, ptr, i32 } %3453({ ptr, ptr, ptr, i32 } %3445, { ptr, ptr, ptr, i32 } %3445, ptr %394, { ptr } %3392)
  store { ptr, ptr, ptr, i32 } %3454, ptr %396, align 8
  %3455 = call ptr @llvm.invariant.start.p0(i64 16, ptr %396)
  %3456 = getelementptr { ptr, ptr, ptr, i32 }, ptr %396, i32 0, i32 0
  %3457 = getelementptr { ptr, ptr, ptr, i32 }, ptr %397, i32 0, i32 0
  %3458 = load ptr, ptr %3456, align 8
  store ptr %3458, ptr %3457, align 8
  %3459 = getelementptr { ptr, ptr, ptr, i32 }, ptr %396, i32 0, i32 1
  %3460 = getelementptr { ptr, ptr, ptr, i32 }, ptr %397, i32 0, i32 1
  %3461 = load ptr, ptr %3459, align 8
  store ptr %3461, ptr %3460, align 8
  %3462 = getelementptr { ptr, ptr, ptr, i32 }, ptr %396, i32 0, i32 2
  %3463 = getelementptr { ptr, ptr, ptr, i32 }, ptr %397, i32 0, i32 2
  %3464 = load ptr, ptr %3462, align 8
  store ptr %3464, ptr %3463, align 8
  %3465 = getelementptr { ptr, ptr, ptr, i32 }, ptr %396, i32 0, i32 3
  %3466 = getelementptr { ptr, ptr, ptr, i32 }, ptr %397, i32 0, i32 3
  %3467 = load i32, ptr %3465, align 4
  store i32 %3467, ptr %3466, align 4
  call void @set_offset(ptr %397, ptr @IntArray)
  %3468 = getelementptr { ptr, ptr, ptr, i32 }, ptr %397, i32 0, i32 0
  %3469 = load ptr, ptr %3468, align 8
  %3470 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3469, 0
  %3471 = getelementptr { ptr, ptr, ptr, i32 }, ptr %397, i32 0, i32 1
  %3472 = load ptr, ptr %3471, align 8
  %3473 = insertvalue { ptr, ptr, ptr, i32 } %3470, ptr %3472, 1
  %3474 = getelementptr { ptr, ptr, ptr, i32 }, ptr %397, i32 0, i32 2
  %3475 = load ptr, ptr %3474, align 8
  %3476 = insertvalue { ptr, ptr, ptr, i32 } %3473, ptr %3475, 2
  %3477 = getelementptr { ptr, ptr, ptr, i32 }, ptr %397, i32 0, i32 3
  %3478 = load i32, ptr %3477, align 4
  %3479 = insertvalue { ptr, ptr, ptr, i32 } %3476, i32 %3478, 3
  %3480 = getelementptr [2 x ptr], ptr %398, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %3480, align 8
  %3481 = getelementptr [2 x ptr], ptr %398, i32 0, i32 1
  store ptr @_parameterization_FunctionPtri32._Ptri32_to_Ptri32, ptr %3481, align 8
  %3482 = call ptr @llvm.invariant.start.p0(i64 4, ptr %398)
  %3483 = call ptr @llvm.invariant.start.p0(i64 616, ptr %3469)
  %3484 = getelementptr ptr, ptr %3469, i32 %3478
  %3485 = getelementptr ptr, ptr %3484, i32 15
  %3486 = load ptr, ptr %3485, align 8
  %3487 = getelementptr { ptr, ptr }, ptr %399, i32 0, i32 0
  store ptr @i32_typ, ptr %3487, align 8
  %3488 = getelementptr { ptr, ptr }, ptr %399, i32 0, i32 1
  store ptr @function_typ, ptr %3488, align 8
  %3489 = call ptr @behavior_wrapper(ptr %3486, { ptr, ptr, ptr, i32 } %3479, ptr %399)
  %3490 = call i32 %3489({ ptr, ptr, ptr, i32 } %3479, { ptr, ptr, ptr, i32 } %3479, ptr %398, i32 0, { ptr } %3389)
  store i32 %3490, ptr %400, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %401, align 4
  %3491 = load ptr, ptr %401, align 8
  %3492 = insertvalue { ptr, i160 } undef, ptr %3491, 0
  %3493 = load i160, ptr %400, align 4
  %3494 = insertvalue { ptr, i160 } %3492, i160 %3493, 1
  %3495 = getelementptr [1 x ptr], ptr %402, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %3495, align 8
  %3496 = call ptr @llvm.invariant.start.p0(i64 1, ptr %402)
  %3497 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %3498 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %3499 = getelementptr { ptr }, ptr %403, i32 0, i32 0
  store ptr %3491, ptr %3499, align 8
  %3500 = call ptr @class_behavior_wrapper(ptr %3498, ptr %403)
  call void %3500(ptr %402, { ptr, i160 } %3494)
  store ptr @_functionliteral_gtkwgeihcc, ptr %404, align 8
  %3501 = getelementptr { ptr }, ptr %404, i32 0, i32 0
  %3502 = load ptr, ptr %3501, align 8
  %3503 = insertvalue { ptr } undef, ptr %3502, 0
  %3504 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), i64 5))
  store ptr %3504, ptr %405, align 8
  %3505 = getelementptr { ptr }, ptr %405, i32 0, i32 0
  %3506 = getelementptr { ptr }, ptr %406, i32 0, i32 0
  %3507 = load ptr, ptr %3505, align 8
  store ptr %3507, ptr %3506, align 8
  %3508 = call ptr @llvm.invariant.start.p0(i64 16, ptr %406)
  store ptr @IntArray, ptr %407, align 8
  %3509 = load ptr, ptr %407, align 8
  %3510 = getelementptr ptr, ptr %3509, i32 6
  %3511 = load ptr, ptr %3510, align 8
  %3512 = call { i64, i64 } @size_wrapper(ptr %3511, ptr %407)
  %3513 = extractvalue { i64, i64 } %3512, 0
  %3514 = call ptr @bump_malloc(i64 %3513)
  %3515 = getelementptr { ptr, ptr, ptr, i32 }, ptr %408, i32 0, i32 1
  %3516 = getelementptr { ptr, ptr, ptr, i32 }, ptr %408, i32 0, i32 3
  store ptr @IntArray, ptr %408, align 8
  store ptr %3514, ptr %3515, align 8
  store i32 9, ptr %3516, align 4
  %3517 = call ptr @llvm.invariant.start.p0(i64 16, ptr %408)
  %3518 = getelementptr { ptr }, ptr %406, i32 0, i32 0
  %3519 = load ptr, ptr %3518, align 8
  %3520 = insertvalue { ptr } undef, ptr %3519, 0
  %3521 = getelementptr { ptr, ptr, ptr, i32 }, ptr %408, i32 0, i32 0
  %3522 = load ptr, ptr %3521, align 8
  %3523 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3522, 0
  %3524 = getelementptr { ptr, ptr, ptr, i32 }, ptr %408, i32 0, i32 1
  %3525 = load ptr, ptr %3524, align 8
  %3526 = insertvalue { ptr, ptr, ptr, i32 } %3523, ptr %3525, 1
  %3527 = getelementptr { ptr, ptr, ptr, i32 }, ptr %408, i32 0, i32 2
  %3528 = load ptr, ptr %3527, align 8
  %3529 = insertvalue { ptr, ptr, ptr, i32 } %3526, ptr %3528, 2
  %3530 = getelementptr { ptr, ptr, ptr, i32 }, ptr %408, i32 0, i32 3
  %3531 = load i32, ptr %3530, align 4
  %3532 = insertvalue { ptr, ptr, ptr, i32 } %3529, i32 %3531, 3
  %3533 = getelementptr [3 x ptr], ptr %409, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %3533, align 8
  %3534 = getelementptr [3 x ptr], ptr %409, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %3534, align 8
  %3535 = getelementptr [3 x ptr], ptr %409, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %3535, align 8
  %3536 = call ptr @llvm.invariant.start.p0(i64 9, ptr %409)
  %3537 = call ptr @llvm.invariant.start.p0(i64 616, ptr %3522)
  %3538 = getelementptr ptr, ptr %3522, i32 %3531
  %3539 = getelementptr ptr, ptr %3538, i32 5
  %3540 = load ptr, ptr %3539, align 8
  %3541 = getelementptr { ptr, ptr, ptr }, ptr %410, i32 0, i32 0
  store ptr @buffer_typ, ptr %3541, align 8
  %3542 = getelementptr { ptr, ptr, ptr }, ptr %410, i32 0, i32 1
  store ptr @i32_typ, ptr %3542, align 8
  %3543 = getelementptr { ptr, ptr, ptr }, ptr %410, i32 0, i32 2
  store ptr @i32_typ, ptr %3543, align 8
  %3544 = call ptr @behavior_wrapper(ptr %3540, { ptr, ptr, ptr, i32 } %3532, ptr %410)
  call void %3544({ ptr, ptr, ptr, i32 } %3532, { ptr, ptr, ptr, i32 } %3532, ptr %409, { ptr } %3520, i32 4, i32 5)
  %3545 = getelementptr { ptr, ptr, ptr, i32 }, ptr %408, i32 0, i32 0
  %3546 = load ptr, ptr %3545, align 8
  %3547 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3546, 0
  %3548 = getelementptr { ptr, ptr, ptr, i32 }, ptr %408, i32 0, i32 1
  %3549 = load ptr, ptr %3548, align 8
  %3550 = insertvalue { ptr, ptr, ptr, i32 } %3547, ptr %3549, 1
  %3551 = getelementptr { ptr, ptr, ptr, i32 }, ptr %408, i32 0, i32 2
  %3552 = load ptr, ptr %3551, align 8
  %3553 = insertvalue { ptr, ptr, ptr, i32 } %3550, ptr %3552, 2
  %3554 = getelementptr { ptr, ptr, ptr, i32 }, ptr %408, i32 0, i32 3
  %3555 = load i32, ptr %3554, align 4
  %3556 = insertvalue { ptr, ptr, ptr, i32 } %3553, i32 %3555, 3
  %3557 = getelementptr [1 x ptr], ptr %411, i32 0, i32 0
  store ptr @_parameterization_FunctionPtri32_to_Nothing, ptr %3557, align 8
  %3558 = call ptr @llvm.invariant.start.p0(i64 1, ptr %411)
  %3559 = call ptr @llvm.invariant.start.p0(i64 616, ptr %3546)
  %3560 = getelementptr ptr, ptr %3546, i32 %3555
  %3561 = getelementptr ptr, ptr %3560, i32 14
  %3562 = load ptr, ptr %3561, align 8
  %3563 = getelementptr { ptr }, ptr %412, i32 0, i32 0
  store ptr @function_typ, ptr %3563, align 8
  %3564 = call ptr @behavior_wrapper(ptr %3562, { ptr, ptr, ptr, i32 } %3556, ptr %412)
  call void %3564({ ptr, ptr, ptr, i32 } %3556, { ptr, ptr, ptr, i32 } %3556, ptr %411, { ptr } %3503)
  %3565 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 13))
  store ptr %3565, ptr %413, align 8
  %3566 = getelementptr { ptr }, ptr %413, i32 0, i32 0
  %3567 = getelementptr { ptr }, ptr %414, i32 0, i32 0
  %3568 = load ptr, ptr %3566, align 8
  store ptr %3568, ptr %3567, align 8
  %3569 = call ptr @llvm.invariant.start.p0(i64 16, ptr %414)
  %3570 = load ptr, ptr %414, align 8
  %3571 = load [12 x i8], ptr @xoqja_bigtingstxt, align 1
  store [12 x i8] %3571, ptr %3570, align 1
  store ptr @String, ptr %415, align 8
  %3572 = load ptr, ptr %415, align 8
  %3573 = getelementptr ptr, ptr %3572, i32 6
  %3574 = load ptr, ptr %3573, align 8
  %3575 = call { i64, i64 } @size_wrapper(ptr %3574, ptr %415)
  %3576 = extractvalue { i64, i64 } %3575, 0
  %3577 = call ptr @bump_malloc(i64 %3576)
  %3578 = getelementptr { ptr, ptr, ptr, i32 }, ptr %416, i32 0, i32 1
  %3579 = getelementptr { ptr, ptr, ptr, i32 }, ptr %416, i32 0, i32 3
  store ptr @String, ptr %416, align 8
  store ptr %3577, ptr %3578, align 8
  store i32 9, ptr %3579, align 4
  %3580 = call ptr @llvm.invariant.start.p0(i64 16, ptr %416)
  %3581 = getelementptr { ptr }, ptr %414, i32 0, i32 0
  %3582 = load ptr, ptr %3581, align 8
  %3583 = insertvalue { ptr } undef, ptr %3582, 0
  %3584 = getelementptr { ptr, ptr, ptr, i32 }, ptr %416, i32 0, i32 0
  %3585 = load ptr, ptr %3584, align 8
  %3586 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3585, 0
  %3587 = getelementptr { ptr, ptr, ptr, i32 }, ptr %416, i32 0, i32 1
  %3588 = load ptr, ptr %3587, align 8
  %3589 = insertvalue { ptr, ptr, ptr, i32 } %3586, ptr %3588, 1
  %3590 = getelementptr { ptr, ptr, ptr, i32 }, ptr %416, i32 0, i32 2
  %3591 = load ptr, ptr %3590, align 8
  %3592 = insertvalue { ptr, ptr, ptr, i32 } %3589, ptr %3591, 2
  %3593 = getelementptr { ptr, ptr, ptr, i32 }, ptr %416, i32 0, i32 3
  %3594 = load i32, ptr %3593, align 4
  %3595 = insertvalue { ptr, ptr, ptr, i32 } %3592, i32 %3594, 3
  %3596 = getelementptr [3 x ptr], ptr %417, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %3596, align 8
  %3597 = getelementptr [3 x ptr], ptr %417, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %3597, align 8
  %3598 = getelementptr [3 x ptr], ptr %417, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %3598, align 8
  %3599 = call ptr @llvm.invariant.start.p0(i64 9, ptr %417)
  %3600 = call ptr @llvm.invariant.start.p0(i64 280, ptr %3585)
  %3601 = getelementptr ptr, ptr %3585, i32 %3594
  %3602 = getelementptr ptr, ptr %3601, i32 4
  %3603 = load ptr, ptr %3602, align 8
  %3604 = getelementptr { ptr, ptr, ptr }, ptr %418, i32 0, i32 0
  store ptr @buffer_typ, ptr %3604, align 8
  %3605 = getelementptr { ptr, ptr, ptr }, ptr %418, i32 0, i32 1
  store ptr @i32_typ, ptr %3605, align 8
  %3606 = getelementptr { ptr, ptr, ptr }, ptr %418, i32 0, i32 2
  store ptr @i32_typ, ptr %3606, align 8
  %3607 = call ptr @behavior_wrapper(ptr %3603, { ptr, ptr, ptr, i32 } %3595, ptr %418)
  call void %3607({ ptr, ptr, ptr, i32 } %3595, { ptr, ptr, ptr, i32 } %3595, ptr %417, { ptr } %3583, i32 12, i32 13)
  %3608 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 21))
  store ptr %3608, ptr %419, align 8
  %3609 = getelementptr { ptr }, ptr %419, i32 0, i32 0
  %3610 = getelementptr { ptr }, ptr %420, i32 0, i32 0
  %3611 = load ptr, ptr %3609, align 8
  store ptr %3611, ptr %3610, align 8
  %3612 = call ptr @llvm.invariant.start.p0(i64 16, ptr %420)
  %3613 = load ptr, ptr %420, align 8
  %3614 = load [20 x i8], ptr @drgvv_thisnis_hownwe_donit, align 1
  store [20 x i8] %3614, ptr %3613, align 1
  store ptr @String, ptr %421, align 8
  %3615 = load ptr, ptr %421, align 8
  %3616 = getelementptr ptr, ptr %3615, i32 6
  %3617 = load ptr, ptr %3616, align 8
  %3618 = call { i64, i64 } @size_wrapper(ptr %3617, ptr %421)
  %3619 = extractvalue { i64, i64 } %3618, 0
  %3620 = call ptr @bump_malloc(i64 %3619)
  %3621 = getelementptr { ptr, ptr, ptr, i32 }, ptr %422, i32 0, i32 1
  %3622 = getelementptr { ptr, ptr, ptr, i32 }, ptr %422, i32 0, i32 3
  store ptr @String, ptr %422, align 8
  store ptr %3620, ptr %3621, align 8
  store i32 9, ptr %3622, align 4
  %3623 = call ptr @llvm.invariant.start.p0(i64 16, ptr %422)
  %3624 = getelementptr { ptr }, ptr %420, i32 0, i32 0
  %3625 = load ptr, ptr %3624, align 8
  %3626 = insertvalue { ptr } undef, ptr %3625, 0
  %3627 = getelementptr { ptr, ptr, ptr, i32 }, ptr %422, i32 0, i32 0
  %3628 = load ptr, ptr %3627, align 8
  %3629 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3628, 0
  %3630 = getelementptr { ptr, ptr, ptr, i32 }, ptr %422, i32 0, i32 1
  %3631 = load ptr, ptr %3630, align 8
  %3632 = insertvalue { ptr, ptr, ptr, i32 } %3629, ptr %3631, 1
  %3633 = getelementptr { ptr, ptr, ptr, i32 }, ptr %422, i32 0, i32 2
  %3634 = load ptr, ptr %3633, align 8
  %3635 = insertvalue { ptr, ptr, ptr, i32 } %3632, ptr %3634, 2
  %3636 = getelementptr { ptr, ptr, ptr, i32 }, ptr %422, i32 0, i32 3
  %3637 = load i32, ptr %3636, align 4
  %3638 = insertvalue { ptr, ptr, ptr, i32 } %3635, i32 %3637, 3
  %3639 = getelementptr [3 x ptr], ptr %423, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %3639, align 8
  %3640 = getelementptr [3 x ptr], ptr %423, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %3640, align 8
  %3641 = getelementptr [3 x ptr], ptr %423, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %3641, align 8
  %3642 = call ptr @llvm.invariant.start.p0(i64 9, ptr %423)
  %3643 = call ptr @llvm.invariant.start.p0(i64 280, ptr %3628)
  %3644 = getelementptr ptr, ptr %3628, i32 %3637
  %3645 = getelementptr ptr, ptr %3644, i32 4
  %3646 = load ptr, ptr %3645, align 8
  %3647 = getelementptr { ptr, ptr, ptr }, ptr %424, i32 0, i32 0
  store ptr @buffer_typ, ptr %3647, align 8
  %3648 = getelementptr { ptr, ptr, ptr }, ptr %424, i32 0, i32 1
  store ptr @i32_typ, ptr %3648, align 8
  %3649 = getelementptr { ptr, ptr, ptr }, ptr %424, i32 0, i32 2
  store ptr @i32_typ, ptr %3649, align 8
  %3650 = call ptr @behavior_wrapper(ptr %3646, { ptr, ptr, ptr, i32 } %3638, ptr %424)
  call void %3650({ ptr, ptr, ptr, i32 } %3638, { ptr, ptr, ptr, i32 } %3638, ptr %423, { ptr } %3626, i32 20, i32 21)
  %3651 = getelementptr { ptr, ptr, ptr, i32 }, ptr %416, i32 0, i32 0
  %3652 = load ptr, ptr %3651, align 8
  %3653 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3652, 0
  %3654 = getelementptr { ptr, ptr, ptr, i32 }, ptr %416, i32 0, i32 1
  %3655 = load ptr, ptr %3654, align 8
  %3656 = insertvalue { ptr, ptr, ptr, i32 } %3653, ptr %3655, 1
  %3657 = getelementptr { ptr, ptr, ptr, i32 }, ptr %416, i32 0, i32 2
  %3658 = load ptr, ptr %3657, align 8
  %3659 = insertvalue { ptr, ptr, ptr, i32 } %3656, ptr %3658, 2
  %3660 = getelementptr { ptr, ptr, ptr, i32 }, ptr %416, i32 0, i32 3
  %3661 = load i32, ptr %3660, align 4
  %3662 = insertvalue { ptr, ptr, ptr, i32 } %3659, i32 %3661, 3
  %3663 = getelementptr { ptr, ptr, ptr, i32 }, ptr %422, i32 0, i32 0
  %3664 = load ptr, ptr %3663, align 8
  %3665 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3664, 0
  %3666 = getelementptr { ptr, ptr, ptr, i32 }, ptr %422, i32 0, i32 1
  %3667 = load ptr, ptr %3666, align 8
  %3668 = insertvalue { ptr, ptr, ptr, i32 } %3665, ptr %3667, 1
  %3669 = getelementptr { ptr, ptr, ptr, i32 }, ptr %422, i32 0, i32 2
  %3670 = load ptr, ptr %3669, align 8
  %3671 = insertvalue { ptr, ptr, ptr, i32 } %3668, ptr %3670, 2
  %3672 = getelementptr { ptr, ptr, ptr, i32 }, ptr %422, i32 0, i32 3
  %3673 = load i32, ptr %3672, align 4
  %3674 = insertvalue { ptr, ptr, ptr, i32 } %3671, i32 %3673, 3
  call void @write_file({ ptr, ptr, ptr, i32 } %3662, { ptr, ptr, ptr, i32 } %3674)
  %3675 = call ptr @bump_malloc(i64 mul (i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 13))
  store ptr %3675, ptr %425, align 8
  %3676 = getelementptr { ptr }, ptr %425, i32 0, i32 0
  %3677 = getelementptr { ptr }, ptr %426, i32 0, i32 0
  %3678 = load ptr, ptr %3676, align 8
  store ptr %3678, ptr %3677, align 8
  %3679 = call ptr @llvm.invariant.start.p0(i64 16, ptr %426)
  %3680 = load ptr, ptr %426, align 8
  %3681 = load [12 x i8], ptr @tmwap_bigtingstxt, align 1
  store [12 x i8] %3681, ptr %3680, align 1
  store ptr @String, ptr %427, align 8
  %3682 = load ptr, ptr %427, align 8
  %3683 = getelementptr ptr, ptr %3682, i32 6
  %3684 = load ptr, ptr %3683, align 8
  %3685 = call { i64, i64 } @size_wrapper(ptr %3684, ptr %427)
  %3686 = extractvalue { i64, i64 } %3685, 0
  %3687 = call ptr @bump_malloc(i64 %3686)
  %3688 = getelementptr { ptr, ptr, ptr, i32 }, ptr %428, i32 0, i32 1
  %3689 = getelementptr { ptr, ptr, ptr, i32 }, ptr %428, i32 0, i32 3
  store ptr @String, ptr %428, align 8
  store ptr %3687, ptr %3688, align 8
  store i32 9, ptr %3689, align 4
  %3690 = call ptr @llvm.invariant.start.p0(i64 16, ptr %428)
  %3691 = getelementptr { ptr }, ptr %426, i32 0, i32 0
  %3692 = load ptr, ptr %3691, align 8
  %3693 = insertvalue { ptr } undef, ptr %3692, 0
  %3694 = getelementptr { ptr, ptr, ptr, i32 }, ptr %428, i32 0, i32 0
  %3695 = load ptr, ptr %3694, align 8
  %3696 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3695, 0
  %3697 = getelementptr { ptr, ptr, ptr, i32 }, ptr %428, i32 0, i32 1
  %3698 = load ptr, ptr %3697, align 8
  %3699 = insertvalue { ptr, ptr, ptr, i32 } %3696, ptr %3698, 1
  %3700 = getelementptr { ptr, ptr, ptr, i32 }, ptr %428, i32 0, i32 2
  %3701 = load ptr, ptr %3700, align 8
  %3702 = insertvalue { ptr, ptr, ptr, i32 } %3699, ptr %3701, 2
  %3703 = getelementptr { ptr, ptr, ptr, i32 }, ptr %428, i32 0, i32 3
  %3704 = load i32, ptr %3703, align 4
  %3705 = insertvalue { ptr, ptr, ptr, i32 } %3702, i32 %3704, 3
  %3706 = getelementptr [3 x ptr], ptr %429, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %3706, align 8
  %3707 = getelementptr [3 x ptr], ptr %429, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %3707, align 8
  %3708 = getelementptr [3 x ptr], ptr %429, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %3708, align 8
  %3709 = call ptr @llvm.invariant.start.p0(i64 9, ptr %429)
  %3710 = call ptr @llvm.invariant.start.p0(i64 280, ptr %3695)
  %3711 = getelementptr ptr, ptr %3695, i32 %3704
  %3712 = getelementptr ptr, ptr %3711, i32 4
  %3713 = load ptr, ptr %3712, align 8
  %3714 = getelementptr { ptr, ptr, ptr }, ptr %430, i32 0, i32 0
  store ptr @buffer_typ, ptr %3714, align 8
  %3715 = getelementptr { ptr, ptr, ptr }, ptr %430, i32 0, i32 1
  store ptr @i32_typ, ptr %3715, align 8
  %3716 = getelementptr { ptr, ptr, ptr }, ptr %430, i32 0, i32 2
  store ptr @i32_typ, ptr %3716, align 8
  %3717 = call ptr @behavior_wrapper(ptr %3713, { ptr, ptr, ptr, i32 } %3705, ptr %430)
  call void %3717({ ptr, ptr, ptr, i32 } %3705, { ptr, ptr, ptr, i32 } %3705, ptr %429, { ptr } %3693, i32 12, i32 13)
  %3718 = getelementptr { ptr, ptr, ptr, i32 }, ptr %428, i32 0, i32 0
  %3719 = load ptr, ptr %3718, align 8
  %3720 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3719, 0
  %3721 = getelementptr { ptr, ptr, ptr, i32 }, ptr %428, i32 0, i32 1
  %3722 = load ptr, ptr %3721, align 8
  %3723 = insertvalue { ptr, ptr, ptr, i32 } %3720, ptr %3722, 1
  %3724 = getelementptr { ptr, ptr, ptr, i32 }, ptr %428, i32 0, i32 2
  %3725 = load ptr, ptr %3724, align 8
  %3726 = insertvalue { ptr, ptr, ptr, i32 } %3723, ptr %3725, 2
  %3727 = getelementptr { ptr, ptr, ptr, i32 }, ptr %428, i32 0, i32 3
  %3728 = load i32, ptr %3727, align 4
  %3729 = insertvalue { ptr, ptr, ptr, i32 } %3726, i32 %3728, 3
  %3730 = call { ptr, ptr, ptr, i32 } @read_file({ ptr, ptr, ptr, i32 } %3729)
  store { ptr, ptr, ptr, i32 } %3730, ptr %431, align 8
  %3731 = call ptr @llvm.invariant.start.p0(i64 16, ptr %431)
  %3732 = getelementptr { ptr, i160 }, ptr %431, i32 0, i32 0
  %3733 = load ptr, ptr %3732, align 8
  %3734 = insertvalue { ptr, i160 } undef, ptr %3733, 0
  %3735 = getelementptr { ptr, i160 }, ptr %431, i32 0, i32 1
  %3736 = load i160, ptr %3735, align 4
  %3737 = insertvalue { ptr, i160 } %3734, i160 %3736, 1
  %3738 = getelementptr [1 x ptr], ptr %432, i32 0, i32 0
  store ptr @_parameterization_String, ptr %3738, align 8
  %3739 = call ptr @llvm.invariant.start.p0(i64 1, ptr %432)
  %3740 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %3741 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %3742 = getelementptr { ptr }, ptr %433, i32 0, i32 0
  store ptr %3733, ptr %3742, align 8
  %3743 = call ptr @class_behavior_wrapper(ptr %3741, ptr %433)
  call void %3743(ptr %432, { ptr, i160 } %3737)
  store ptr @_functionliteral_qlcqxadlob, ptr %434, align 8
  %3744 = getelementptr { ptr }, ptr %434, i32 0, i32 0
  %3745 = load ptr, ptr %3744, align 8
  %3746 = insertvalue { ptr } undef, ptr %3745, 0
  store ptr @Range, ptr %435, align 8
  %3747 = load ptr, ptr %435, align 8
  %3748 = getelementptr ptr, ptr %3747, i32 6
  %3749 = load ptr, ptr %3748, align 8
  %3750 = call { i64, i64 } @size_wrapper(ptr %3749, ptr %435)
  %3751 = extractvalue { i64, i64 } %3750, 0
  %3752 = call ptr @bump_malloc(i64 %3751)
  %3753 = getelementptr { ptr, ptr, ptr, i32 }, ptr %436, i32 0, i32 1
  %3754 = getelementptr { ptr, ptr, ptr, i32 }, ptr %436, i32 0, i32 3
  store ptr @Range, ptr %436, align 8
  store ptr %3752, ptr %3753, align 8
  store i32 9, ptr %3754, align 4
  %3755 = call ptr @llvm.invariant.start.p0(i64 16, ptr %436)
  %3756 = getelementptr { ptr, ptr, ptr, i32 }, ptr %436, i32 0, i32 0
  %3757 = load ptr, ptr %3756, align 8
  %3758 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3757, 0
  %3759 = getelementptr { ptr, ptr, ptr, i32 }, ptr %436, i32 0, i32 1
  %3760 = load ptr, ptr %3759, align 8
  %3761 = insertvalue { ptr, ptr, ptr, i32 } %3758, ptr %3760, 1
  %3762 = getelementptr { ptr, ptr, ptr, i32 }, ptr %436, i32 0, i32 2
  %3763 = load ptr, ptr %3762, align 8
  %3764 = insertvalue { ptr, ptr, ptr, i32 } %3761, ptr %3763, 2
  %3765 = getelementptr { ptr, ptr, ptr, i32 }, ptr %436, i32 0, i32 3
  %3766 = load i32, ptr %3765, align 4
  %3767 = insertvalue { ptr, ptr, ptr, i32 } %3764, i32 %3766, 3
  %3768 = getelementptr [2 x ptr], ptr %437, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %3768, align 8
  %3769 = getelementptr [2 x ptr], ptr %437, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %3769, align 8
  %3770 = call ptr @llvm.invariant.start.p0(i64 4, ptr %437)
  %3771 = call ptr @llvm.invariant.start.p0(i64 456, ptr %3757)
  %3772 = getelementptr ptr, ptr %3757, i32 %3766
  %3773 = getelementptr ptr, ptr %3772, i32 4
  %3774 = load ptr, ptr %3773, align 8
  %3775 = getelementptr { ptr, ptr }, ptr %438, i32 0, i32 0
  store ptr @i32_typ, ptr %3775, align 8
  %3776 = getelementptr { ptr, ptr }, ptr %438, i32 0, i32 1
  store ptr @i32_typ, ptr %3776, align 8
  %3777 = call ptr @behavior_wrapper(ptr %3774, { ptr, ptr, ptr, i32 } %3767, ptr %438)
  call void %3777({ ptr, ptr, ptr, i32 } %3767, { ptr, ptr, ptr, i32 } %3767, ptr %437, i32 2, i32 5)
  %3778 = getelementptr { ptr, ptr, ptr, i32 }, ptr %436, i32 0, i32 0
  %3779 = load ptr, ptr %3778, align 8
  %3780 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3779, 0
  %3781 = getelementptr { ptr, ptr, ptr, i32 }, ptr %436, i32 0, i32 1
  %3782 = load ptr, ptr %3781, align 8
  %3783 = insertvalue { ptr, ptr, ptr, i32 } %3780, ptr %3782, 1
  %3784 = getelementptr { ptr, ptr, ptr, i32 }, ptr %436, i32 0, i32 2
  %3785 = load ptr, ptr %3784, align 8
  %3786 = insertvalue { ptr, ptr, ptr, i32 } %3783, ptr %3785, 2
  %3787 = getelementptr { ptr, ptr, ptr, i32 }, ptr %436, i32 0, i32 3
  %3788 = load i32, ptr %3787, align 4
  %3789 = insertvalue { ptr, ptr, ptr, i32 } %3786, i32 %3788, 3
  %3790 = getelementptr [1 x ptr], ptr %439, i32 0, i32 0
  store ptr @_parameterization_FunctionPtri32_to_Nothing, ptr %3790, align 8
  %3791 = call ptr @llvm.invariant.start.p0(i64 1, ptr %439)
  %3792 = call ptr @llvm.invariant.start.p0(i64 456, ptr %3779)
  %3793 = getelementptr ptr, ptr %3779, i32 %3788
  %3794 = getelementptr ptr, ptr %3793, i32 6
  %3795 = load ptr, ptr %3794, align 8
  %3796 = getelementptr { ptr }, ptr %440, i32 0, i32 0
  store ptr @function_typ, ptr %3796, align 8
  %3797 = call ptr @behavior_wrapper(ptr %3795, { ptr, ptr, ptr, i32 } %3789, ptr %440)
  call void %3797({ ptr, ptr, ptr, i32 } %3789, { ptr, ptr, ptr, i32 } %3789, ptr %439, { ptr } %3746)
  %3798 = call i8 @i32toi8(i32 5)
  store i8 %3798, ptr %441, align 1
  store i64 ptrtoint (ptr @i8_typ to i64), ptr %442, align 4
  %3799 = load ptr, ptr %442, align 8
  %3800 = insertvalue { ptr, i160 } undef, ptr %3799, 0
  %3801 = load i160, ptr %441, align 4
  %3802 = insertvalue { ptr, i160 } %3800, i160 %3801, 1
  %3803 = getelementptr [1 x ptr], ptr %443, i32 0, i32 0
  store ptr @_parameterization_Ptri8, ptr %3803, align 8
  %3804 = call ptr @llvm.invariant.start.p0(i64 1, ptr %443)
  %3805 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %3806 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %3807 = getelementptr { ptr }, ptr %444, i32 0, i32 0
  store ptr %3799, ptr %3807, align 8
  %3808 = call ptr @class_behavior_wrapper(ptr %3806, ptr %444)
  call void %3808(ptr %443, { ptr, i160 } %3802)
  %3809 = call ptr @coroutine_create(ptr @_functionliteral_lqicruiyxk, ptr @coroutine_gmfsuqovfy_passer)
  call void @coroutine_gmfsuqovfy_buffer_filler(ptr %3809, i32 6, i32 4)
  store ptr %3809, ptr %445, align 8
  %3810 = getelementptr { ptr }, ptr %445, i32 0, i32 0
  %3811 = getelementptr { ptr }, ptr %446, i32 0, i32 0
  %3812 = load ptr, ptr %3810, align 8
  store ptr %3812, ptr %3811, align 8
  %3813 = call ptr @llvm.invariant.start.p0(i64 16, ptr %446)
  store i32 2, ptr %447, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %448, align 4
  %3814 = load ptr, ptr %448, align 8
  %3815 = insertvalue { ptr, i32 } undef, ptr %3814, 0
  %3816 = load i32, ptr %447, align 4
  %3817 = insertvalue { ptr, i32 } %3815, i32 %3816, 1
  %3818 = load ptr, ptr %446, align 8
  %3819 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i32 } }, ptr %3818, i32 0, i32 4
  store { ptr, i32 } %3817, ptr %3819, align 8
  %3820 = load ptr, ptr %446, align 8
  %3821 = load ptr, ptr %446, align 8
  call void @coroutine_call(ptr %3821)
  %3822 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i32 } }, ptr %3820, i32 0, i32 4
  %3823 = load { ptr, i32 }, ptr %3822, align 8
  store { ptr, i32 } %3823, ptr %449, align 8
  %3824 = getelementptr { ptr, i32 }, ptr %449, i32 0, i32 0
  %3825 = getelementptr { ptr, i32 }, ptr %450, i32 0, i32 0
  %3826 = load ptr, ptr %3824, align 8
  store ptr %3826, ptr %3825, align 8
  %3827 = getelementptr { ptr, i32 }, ptr %449, i32 0, i32 1
  %3828 = getelementptr { ptr, i32 }, ptr %450, i32 0, i32 1
  %3829 = load i32, ptr %3827, align 4
  store i32 %3829, ptr %3828, align 4
  %3830 = getelementptr { ptr, i160 }, ptr %450, i32 0, i32 0
  %3831 = load ptr, ptr %3830, align 8
  %3832 = insertvalue { ptr, i160 } undef, ptr %3831, 0
  %3833 = getelementptr { ptr, i160 }, ptr %450, i32 0, i32 1
  %3834 = load i160, ptr %3833, align 4
  %3835 = insertvalue { ptr, i160 } %3832, i160 %3834, 1
  %3836 = getelementptr [1 x ptr], ptr %451, i32 0, i32 0
  store ptr @_parameterization_Ptri32_or_Nil, ptr %3836, align 8
  %3837 = call ptr @llvm.invariant.start.p0(i64 1, ptr %451)
  %3838 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %3839 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %3840 = getelementptr { ptr }, ptr %452, i32 0, i32 0
  store ptr %3831, ptr %3840, align 8
  %3841 = call ptr @class_behavior_wrapper(ptr %3839, ptr %452)
  call void %3841(ptr %451, { ptr, i160 } %3835)
  store i32 3, ptr %453, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %454, align 4
  %3842 = load ptr, ptr %454, align 8
  %3843 = insertvalue { ptr, i32 } undef, ptr %3842, 0
  %3844 = load i32, ptr %453, align 4
  %3845 = insertvalue { ptr, i32 } %3843, i32 %3844, 1
  %3846 = load ptr, ptr %446, align 8
  %3847 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i32 } }, ptr %3846, i32 0, i32 4
  store { ptr, i32 } %3845, ptr %3847, align 8
  %3848 = load ptr, ptr %446, align 8
  %3849 = load ptr, ptr %446, align 8
  call void @coroutine_call(ptr %3849)
  %3850 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i32 } }, ptr %3848, i32 0, i32 4
  %3851 = load { ptr, i32 }, ptr %3850, align 8
  store { ptr, i32 } %3851, ptr %455, align 8
  %3852 = getelementptr { ptr, i32 }, ptr %455, i32 0, i32 0
  %3853 = getelementptr { ptr, i32 }, ptr %456, i32 0, i32 0
  %3854 = load ptr, ptr %3852, align 8
  store ptr %3854, ptr %3853, align 8
  %3855 = getelementptr { ptr, i32 }, ptr %455, i32 0, i32 1
  %3856 = getelementptr { ptr, i32 }, ptr %456, i32 0, i32 1
  %3857 = load i32, ptr %3855, align 4
  store i32 %3857, ptr %3856, align 4
  %3858 = getelementptr { ptr, i160 }, ptr %456, i32 0, i32 0
  %3859 = load ptr, ptr %3858, align 8
  %3860 = insertvalue { ptr, i160 } undef, ptr %3859, 0
  %3861 = getelementptr { ptr, i160 }, ptr %456, i32 0, i32 1
  %3862 = load i160, ptr %3861, align 4
  %3863 = insertvalue { ptr, i160 } %3860, i160 %3862, 1
  %3864 = getelementptr [1 x ptr], ptr %457, i32 0, i32 0
  store ptr @_parameterization_Ptri32_or_Nil, ptr %3864, align 8
  %3865 = call ptr @llvm.invariant.start.p0(i64 1, ptr %457)
  %3866 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %3867 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %3868 = getelementptr { ptr }, ptr %458, i32 0, i32 0
  store ptr %3859, ptr %3868, align 8
  %3869 = call ptr @class_behavior_wrapper(ptr %3867, ptr %458)
  call void %3869(ptr %457, { ptr, i160 } %3863)
  %3870 = call ptr @coroutine_create(ptr @_functionliteral_cfqtdswlvs, ptr @coroutine_zkkgdtskwo_passer)
  call void @coroutine_zkkgdtskwo_buffer_filler(ptr %3870)
  store ptr %3870, ptr %459, align 8
  %3871 = getelementptr { ptr }, ptr %459, i32 0, i32 0
  %3872 = getelementptr { ptr }, ptr %460, i32 0, i32 0
  %3873 = load ptr, ptr %3871, align 8
  store ptr %3873, ptr %3872, align 8
  %3874 = call ptr @llvm.invariant.start.p0(i64 16, ptr %460)
  %3875 = load ptr, ptr %460, align 8
  call void @coroutine_call(ptr %3875)
  %3876 = load ptr, ptr %460, align 8
  %3877 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i32 } }, ptr %3876, i32 0, i32 4
  %3878 = load { ptr, i32 }, ptr %3877, align 8
  store { ptr, i32 } %3878, ptr %461, align 8
  %3879 = getelementptr { ptr, i32 }, ptr %461, i32 0, i32 0
  %3880 = getelementptr { ptr, i32 }, ptr %462, i32 0, i32 0
  %3881 = load ptr, ptr %3879, align 8
  store ptr %3881, ptr %3880, align 8
  %3882 = getelementptr { ptr, i32 }, ptr %461, i32 0, i32 1
  %3883 = getelementptr { ptr, i32 }, ptr %462, i32 0, i32 1
  %3884 = load i32, ptr %3882, align 4
  store i32 %3884, ptr %3883, align 4
  %3885 = getelementptr { ptr, i160 }, ptr %462, i32 0, i32 0
  %3886 = load ptr, ptr %3885, align 8
  %3887 = insertvalue { ptr, i160 } undef, ptr %3886, 0
  %3888 = getelementptr { ptr, i160 }, ptr %462, i32 0, i32 1
  %3889 = load i160, ptr %3888, align 4
  %3890 = insertvalue { ptr, i160 } %3887, i160 %3889, 1
  %3891 = getelementptr [1 x ptr], ptr %463, i32 0, i32 0
  store ptr @_parameterization_Ptri32_or_Nil, ptr %3891, align 8
  %3892 = call ptr @llvm.invariant.start.p0(i64 1, ptr %463)
  %3893 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %3894 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %3895 = getelementptr { ptr }, ptr %464, i32 0, i32 0
  store ptr %3886, ptr %3895, align 8
  %3896 = call ptr @class_behavior_wrapper(ptr %3894, ptr %464)
  call void %3896(ptr %463, { ptr, i160 } %3890)
  store ptr @Channel, ptr %465, align 8
  %3897 = load ptr, ptr %465, align 8
  %3898 = getelementptr ptr, ptr %3897, i32 6
  %3899 = load ptr, ptr %3898, align 8
  %3900 = call { i64, i64 } @size_wrapper(ptr %3899, ptr %465)
  %3901 = extractvalue { i64, i64 } %3900, 0
  %3902 = call ptr @bump_malloc(i64 %3901)
  %3903 = getelementptr { ptr, ptr, ptr, i32 }, ptr %466, i32 0, i32 1
  %3904 = getelementptr { ptr, ptr, ptr, i32 }, ptr %466, i32 0, i32 3
  store ptr @Channel, ptr %466, align 8
  store ptr %3902, ptr %3903, align 8
  store i32 9, ptr %3904, align 4
  %3905 = call ptr @llvm.invariant.start.p0(i64 16, ptr %466)
  %3906 = getelementptr { ptr, ptr, ptr, i32 }, ptr %466, i32 0, i32 0
  %3907 = load ptr, ptr %3906, align 8
  %3908 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3907, 0
  %3909 = getelementptr { ptr, ptr, ptr, i32 }, ptr %466, i32 0, i32 1
  %3910 = load ptr, ptr %3909, align 8
  %3911 = insertvalue { ptr, ptr, ptr, i32 } %3908, ptr %3910, 1
  %3912 = getelementptr { ptr, ptr, ptr, i32 }, ptr %466, i32 0, i32 2
  %3913 = load ptr, ptr %3912, align 8
  %3914 = insertvalue { ptr, ptr, ptr, i32 } %3911, ptr %3913, 2
  %3915 = getelementptr { ptr, ptr, ptr, i32 }, ptr %466, i32 0, i32 3
  %3916 = load i32, ptr %3915, align 4
  %3917 = insertvalue { ptr, ptr, ptr, i32 } %3914, i32 %3916, 3
  %3918 = call ptr @llvm.invariant.start.p0(i64 0, ptr %467)
  %3919 = call ptr @llvm.invariant.start.p0(i64 56, ptr %3907)
  %3920 = getelementptr ptr, ptr %3907, i32 %3916
  %3921 = getelementptr ptr, ptr %3920, i32 1
  %3922 = load ptr, ptr %3921, align 8
  %3923 = call ptr @behavior_wrapper(ptr %3922, { ptr, ptr, ptr, i32 } %3917, ptr %468)
  call void %3923({ ptr, ptr, ptr, i32 } %3917, { ptr, ptr, ptr, i32 } %3917, ptr %467)
  %3924 = getelementptr { ptr, ptr, ptr, i32 }, ptr %466, i32 0, i32 0
  %3925 = getelementptr { ptr, ptr, ptr, i32 }, ptr %469, i32 0, i32 0
  %3926 = load ptr, ptr %3924, align 8
  store ptr %3926, ptr %3925, align 8
  %3927 = getelementptr { ptr, ptr, ptr, i32 }, ptr %466, i32 0, i32 1
  %3928 = getelementptr { ptr, ptr, ptr, i32 }, ptr %469, i32 0, i32 1
  %3929 = load ptr, ptr %3927, align 8
  store ptr %3929, ptr %3928, align 8
  %3930 = getelementptr { ptr, ptr, ptr, i32 }, ptr %466, i32 0, i32 2
  %3931 = getelementptr { ptr, ptr, ptr, i32 }, ptr %469, i32 0, i32 2
  %3932 = load ptr, ptr %3930, align 8
  store ptr %3932, ptr %3931, align 8
  %3933 = getelementptr { ptr, ptr, ptr, i32 }, ptr %466, i32 0, i32 3
  %3934 = getelementptr { ptr, ptr, ptr, i32 }, ptr %469, i32 0, i32 3
  %3935 = load i32, ptr %3933, align 4
  store i32 %3935, ptr %3934, align 4
  call void @set_offset(ptr %469, ptr @Channel)
  %3936 = getelementptr { ptr, ptr, ptr, i32 }, ptr %469, i32 0, i32 0
  %3937 = getelementptr { ptr, ptr, ptr, i32 }, ptr %470, i32 0, i32 0
  %3938 = load ptr, ptr %3936, align 8
  store ptr %3938, ptr %3937, align 8
  %3939 = getelementptr { ptr, ptr, ptr, i32 }, ptr %469, i32 0, i32 1
  %3940 = getelementptr { ptr, ptr, ptr, i32 }, ptr %470, i32 0, i32 1
  %3941 = load ptr, ptr %3939, align 8
  store ptr %3941, ptr %3940, align 8
  %3942 = getelementptr { ptr, ptr, ptr, i32 }, ptr %469, i32 0, i32 2
  %3943 = getelementptr { ptr, ptr, ptr, i32 }, ptr %470, i32 0, i32 2
  %3944 = load ptr, ptr %3942, align 8
  store ptr %3944, ptr %3943, align 8
  %3945 = getelementptr { ptr, ptr, ptr, i32 }, ptr %469, i32 0, i32 3
  %3946 = getelementptr { ptr, ptr, ptr, i32 }, ptr %470, i32 0, i32 3
  %3947 = load i32, ptr %3945, align 4
  store i32 %3947, ptr %3946, align 4
  %3948 = call ptr @llvm.invariant.start.p0(i64 16, ptr %470)
  %3949 = getelementptr { ptr, ptr, ptr, i32 }, ptr %470, i32 0, i32 0
  %3950 = load ptr, ptr %3949, align 8
  %3951 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3950, 0
  %3952 = getelementptr { ptr, ptr, ptr, i32 }, ptr %470, i32 0, i32 1
  %3953 = load ptr, ptr %3952, align 8
  %3954 = insertvalue { ptr, ptr, ptr, i32 } %3951, ptr %3953, 1
  %3955 = getelementptr { ptr, ptr, ptr, i32 }, ptr %470, i32 0, i32 2
  %3956 = load ptr, ptr %3955, align 8
  %3957 = insertvalue { ptr, ptr, ptr, i32 } %3954, ptr %3956, 2
  %3958 = getelementptr { ptr, ptr, ptr, i32 }, ptr %470, i32 0, i32 3
  %3959 = load i32, ptr %3958, align 4
  %3960 = insertvalue { ptr, ptr, ptr, i32 } %3957, i32 %3959, 3
  %3961 = call ptr @coroutine_create(ptr @_functionliteral_kqpipzhidm, ptr @coroutine_mkcqinrtzp_passer)
  call void @coroutine_mkcqinrtzp_buffer_filler(ptr %3961, { ptr, ptr, ptr, i32 } %3960)
  store ptr %3961, ptr %471, align 8
  %3962 = getelementptr { ptr }, ptr %471, i32 0, i32 0
  %3963 = getelementptr { ptr }, ptr %472, i32 0, i32 0
  %3964 = load ptr, ptr %3962, align 8
  store ptr %3964, ptr %3963, align 8
  %3965 = call ptr @llvm.invariant.start.p0(i64 16, ptr %472)
  %3966 = load ptr, ptr %472, align 8
  call void @coroutine_call(ptr %3966)
  %3967 = getelementptr { ptr, ptr, ptr, i32 }, ptr %470, i32 0, i32 0
  %3968 = load ptr, ptr %3967, align 8
  %3969 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3968, 0
  %3970 = getelementptr { ptr, ptr, ptr, i32 }, ptr %470, i32 0, i32 1
  %3971 = load ptr, ptr %3970, align 8
  %3972 = insertvalue { ptr, ptr, ptr, i32 } %3969, ptr %3971, 1
  %3973 = getelementptr { ptr, ptr, ptr, i32 }, ptr %470, i32 0, i32 2
  %3974 = load ptr, ptr %3973, align 8
  %3975 = insertvalue { ptr, ptr, ptr, i32 } %3972, ptr %3974, 2
  %3976 = getelementptr { ptr, ptr, ptr, i32 }, ptr %470, i32 0, i32 3
  %3977 = load i32, ptr %3976, align 4
  %3978 = insertvalue { ptr, ptr, ptr, i32 } %3975, i32 %3977, 3
  %3979 = call ptr @llvm.invariant.start.p0(i64 0, ptr %473)
  %3980 = call ptr @llvm.invariant.start.p0(i64 56, ptr %3968)
  %3981 = getelementptr ptr, ptr %3968, i32 %3977
  %3982 = getelementptr ptr, ptr %3981, i32 2
  %3983 = load ptr, ptr %3982, align 8
  %3984 = call ptr @behavior_wrapper(ptr %3983, { ptr, ptr, ptr, i32 } %3978, ptr %474)
  %3985 = call i32 %3984({ ptr, ptr, ptr, i32 } %3978, { ptr, ptr, ptr, i32 } %3978, ptr %473)
  store i32 %3985, ptr %475, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %476, align 4
  %3986 = load ptr, ptr %476, align 8
  %3987 = insertvalue { ptr, i160 } undef, ptr %3986, 0
  %3988 = load i160, ptr %475, align 4
  %3989 = insertvalue { ptr, i160 } %3987, i160 %3988, 1
  %3990 = getelementptr [1 x ptr], ptr %477, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %3990, align 8
  %3991 = call ptr @llvm.invariant.start.p0(i64 1, ptr %477)
  %3992 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %3993 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %3994 = getelementptr { ptr }, ptr %478, i32 0, i32 0
  store ptr %3986, ptr %3994, align 8
  %3995 = call ptr @class_behavior_wrapper(ptr %3993, ptr %478)
  call void %3995(ptr %477, { ptr, i160 } %3989)
  %3996 = getelementptr { ptr }, ptr %386, i32 0, i32 0
  %3997 = load ptr, ptr %3996, align 8
  %3998 = insertvalue { ptr } undef, ptr %3997, 0
  store ptr @_functionliteral_vkpdhaudnl, ptr %479, align 8
  %3999 = getelementptr { ptr }, ptr %479, i32 0, i32 0
  %4000 = load ptr, ptr %3999, align 8
  %4001 = insertvalue { ptr } undef, ptr %4000, 0
  store ptr @_functionliteral_knnabvgqzw, ptr %480, align 8
  %4002 = getelementptr { ptr }, ptr %480, i32 0, i32 0
  %4003 = load ptr, ptr %4002, align 8
  %4004 = insertvalue { ptr } undef, ptr %4003, 0
  store ptr @Range, ptr %481, align 8
  %4005 = load ptr, ptr %481, align 8
  %4006 = getelementptr ptr, ptr %4005, i32 6
  %4007 = load ptr, ptr %4006, align 8
  %4008 = call { i64, i64 } @size_wrapper(ptr %4007, ptr %481)
  %4009 = extractvalue { i64, i64 } %4008, 0
  %4010 = call ptr @bump_malloc(i64 %4009)
  %4011 = getelementptr { ptr, ptr, ptr, i32 }, ptr %482, i32 0, i32 1
  %4012 = getelementptr { ptr, ptr, ptr, i32 }, ptr %482, i32 0, i32 3
  store ptr @Range, ptr %482, align 8
  store ptr %4010, ptr %4011, align 8
  store i32 9, ptr %4012, align 4
  %4013 = call ptr @llvm.invariant.start.p0(i64 16, ptr %482)
  %4014 = getelementptr { ptr, ptr, ptr, i32 }, ptr %482, i32 0, i32 0
  %4015 = load ptr, ptr %4014, align 8
  %4016 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4015, 0
  %4017 = getelementptr { ptr, ptr, ptr, i32 }, ptr %482, i32 0, i32 1
  %4018 = load ptr, ptr %4017, align 8
  %4019 = insertvalue { ptr, ptr, ptr, i32 } %4016, ptr %4018, 1
  %4020 = getelementptr { ptr, ptr, ptr, i32 }, ptr %482, i32 0, i32 2
  %4021 = load ptr, ptr %4020, align 8
  %4022 = insertvalue { ptr, ptr, ptr, i32 } %4019, ptr %4021, 2
  %4023 = getelementptr { ptr, ptr, ptr, i32 }, ptr %482, i32 0, i32 3
  %4024 = load i32, ptr %4023, align 4
  %4025 = insertvalue { ptr, ptr, ptr, i32 } %4022, i32 %4024, 3
  %4026 = getelementptr [2 x ptr], ptr %483, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %4026, align 8
  %4027 = getelementptr [2 x ptr], ptr %483, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %4027, align 8
  %4028 = call ptr @llvm.invariant.start.p0(i64 4, ptr %483)
  %4029 = call ptr @llvm.invariant.start.p0(i64 456, ptr %4015)
  %4030 = getelementptr ptr, ptr %4015, i32 %4024
  %4031 = getelementptr ptr, ptr %4030, i32 4
  %4032 = load ptr, ptr %4031, align 8
  %4033 = getelementptr { ptr, ptr }, ptr %484, i32 0, i32 0
  store ptr @i32_typ, ptr %4033, align 8
  %4034 = getelementptr { ptr, ptr }, ptr %484, i32 0, i32 1
  store ptr @i32_typ, ptr %4034, align 8
  %4035 = call ptr @behavior_wrapper(ptr %4032, { ptr, ptr, ptr, i32 } %4025, ptr %484)
  call void %4035({ ptr, ptr, ptr, i32 } %4025, { ptr, ptr, ptr, i32 } %4025, ptr %483, i32 1, i32 15)
  %4036 = getelementptr { ptr, ptr, ptr, i32 }, ptr %482, i32 0, i32 0
  %4037 = load ptr, ptr %4036, align 8
  %4038 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4037, 0
  %4039 = getelementptr { ptr, ptr, ptr, i32 }, ptr %482, i32 0, i32 1
  %4040 = load ptr, ptr %4039, align 8
  %4041 = insertvalue { ptr, ptr, ptr, i32 } %4038, ptr %4040, 1
  %4042 = getelementptr { ptr, ptr, ptr, i32 }, ptr %482, i32 0, i32 2
  %4043 = load ptr, ptr %4042, align 8
  %4044 = insertvalue { ptr, ptr, ptr, i32 } %4041, ptr %4043, 2
  %4045 = getelementptr { ptr, ptr, ptr, i32 }, ptr %482, i32 0, i32 3
  %4046 = load i32, ptr %4045, align 4
  %4047 = insertvalue { ptr, ptr, ptr, i32 } %4044, i32 %4046, 3
  %4048 = getelementptr [1 x ptr], ptr %485, i32 0, i32 0
  store ptr @_parameterization_FunctionPtri32_to_Ptri32, ptr %4048, align 8
  %4049 = call ptr @llvm.invariant.start.p0(i64 1, ptr %485)
  %4050 = call ptr @llvm.invariant.start.p0(i64 456, ptr %4037)
  %4051 = getelementptr ptr, ptr %4037, i32 %4046
  %4052 = getelementptr ptr, ptr %4051, i32 10
  %4053 = load ptr, ptr %4052, align 8
  %4054 = getelementptr { ptr }, ptr %486, i32 0, i32 0
  store ptr @function_typ, ptr %4054, align 8
  %4055 = call ptr @behavior_wrapper(ptr %4053, { ptr, ptr, ptr, i32 } %4047, ptr %486)
  %4056 = call { ptr, ptr, ptr, i32 } %4055({ ptr, ptr, ptr, i32 } %4047, { ptr, ptr, ptr, i32 } %4047, ptr %485, { ptr } %4004)
  store { ptr, ptr, ptr, i32 } %4056, ptr %487, align 8
  %4057 = call ptr @llvm.invariant.start.p0(i64 16, ptr %487)
  %4058 = getelementptr { ptr, ptr, ptr, i32 }, ptr %487, i32 0, i32 0
  %4059 = getelementptr { ptr, ptr, ptr, i32 }, ptr %488, i32 0, i32 0
  %4060 = load ptr, ptr %4058, align 8
  store ptr %4060, ptr %4059, align 8
  %4061 = getelementptr { ptr, ptr, ptr, i32 }, ptr %487, i32 0, i32 1
  %4062 = getelementptr { ptr, ptr, ptr, i32 }, ptr %488, i32 0, i32 1
  %4063 = load ptr, ptr %4061, align 8
  store ptr %4063, ptr %4062, align 8
  %4064 = getelementptr { ptr, ptr, ptr, i32 }, ptr %487, i32 0, i32 2
  %4065 = getelementptr { ptr, ptr, ptr, i32 }, ptr %488, i32 0, i32 2
  %4066 = load ptr, ptr %4064, align 8
  store ptr %4066, ptr %4065, align 8
  %4067 = getelementptr { ptr, ptr, ptr, i32 }, ptr %487, i32 0, i32 3
  %4068 = getelementptr { ptr, ptr, ptr, i32 }, ptr %488, i32 0, i32 3
  %4069 = load i32, ptr %4067, align 4
  store i32 %4069, ptr %4068, align 4
  call void @set_offset(ptr %488, ptr @IntIterable)
  %4070 = getelementptr { ptr, ptr, ptr, i32 }, ptr %488, i32 0, i32 0
  %4071 = load ptr, ptr %4070, align 8
  %4072 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4071, 0
  %4073 = getelementptr { ptr, ptr, ptr, i32 }, ptr %488, i32 0, i32 1
  %4074 = load ptr, ptr %4073, align 8
  %4075 = insertvalue { ptr, ptr, ptr, i32 } %4072, ptr %4074, 1
  %4076 = getelementptr { ptr, ptr, ptr, i32 }, ptr %488, i32 0, i32 2
  %4077 = load ptr, ptr %4076, align 8
  %4078 = insertvalue { ptr, ptr, ptr, i32 } %4075, ptr %4077, 2
  %4079 = getelementptr { ptr, ptr, ptr, i32 }, ptr %488, i32 0, i32 3
  %4080 = load i32, ptr %4079, align 4
  %4081 = insertvalue { ptr, ptr, ptr, i32 } %4078, i32 %4080, 3
  %4082 = getelementptr [1 x ptr], ptr %489, i32 0, i32 0
  store ptr @_parameterization_FunctionPtri32_to_Ptri1, ptr %4082, align 8
  %4083 = call ptr @llvm.invariant.start.p0(i64 1, ptr %489)
  %4084 = call ptr @llvm.invariant.start.p0(i64 192, ptr %4071)
  %4085 = getelementptr ptr, ptr %4071, i32 %4080
  %4086 = getelementptr ptr, ptr %4085, i32 5
  %4087 = load ptr, ptr %4086, align 8
  %4088 = getelementptr { ptr }, ptr %490, i32 0, i32 0
  store ptr @function_typ, ptr %4088, align 8
  %4089 = call ptr @behavior_wrapper(ptr %4087, { ptr, ptr, ptr, i32 } %4081, ptr %490)
  %4090 = call { ptr, ptr, ptr, i32 } %4089({ ptr, ptr, ptr, i32 } %4081, { ptr, ptr, ptr, i32 } %4081, ptr %489, { ptr } %4001)
  store { ptr, ptr, ptr, i32 } %4090, ptr %491, align 8
  %4091 = call ptr @llvm.invariant.start.p0(i64 16, ptr %491)
  %4092 = getelementptr { ptr, ptr, ptr, i32 }, ptr %491, i32 0, i32 0
  %4093 = getelementptr { ptr, ptr, ptr, i32 }, ptr %492, i32 0, i32 0
  %4094 = load ptr, ptr %4092, align 8
  store ptr %4094, ptr %4093, align 8
  %4095 = getelementptr { ptr, ptr, ptr, i32 }, ptr %491, i32 0, i32 1
  %4096 = getelementptr { ptr, ptr, ptr, i32 }, ptr %492, i32 0, i32 1
  %4097 = load ptr, ptr %4095, align 8
  store ptr %4097, ptr %4096, align 8
  %4098 = getelementptr { ptr, ptr, ptr, i32 }, ptr %491, i32 0, i32 2
  %4099 = getelementptr { ptr, ptr, ptr, i32 }, ptr %492, i32 0, i32 2
  %4100 = load ptr, ptr %4098, align 8
  store ptr %4100, ptr %4099, align 8
  %4101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %491, i32 0, i32 3
  %4102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %492, i32 0, i32 3
  %4103 = load i32, ptr %4101, align 4
  store i32 %4103, ptr %4102, align 4
  call void @set_offset(ptr %492, ptr @IntIterable)
  %4104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %492, i32 0, i32 0
  %4105 = load ptr, ptr %4104, align 8
  %4106 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4105, 0
  %4107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %492, i32 0, i32 1
  %4108 = load ptr, ptr %4107, align 8
  %4109 = insertvalue { ptr, ptr, ptr, i32 } %4106, ptr %4108, 1
  %4110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %492, i32 0, i32 2
  %4111 = load ptr, ptr %4110, align 8
  %4112 = insertvalue { ptr, ptr, ptr, i32 } %4109, ptr %4111, 2
  %4113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %492, i32 0, i32 3
  %4114 = load i32, ptr %4113, align 4
  %4115 = insertvalue { ptr, ptr, ptr, i32 } %4112, i32 %4114, 3
  %4116 = getelementptr [2 x ptr], ptr %493, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %4116, align 8
  %4117 = getelementptr [2 x ptr], ptr %493, i32 0, i32 1
  store ptr @_parameterization_FunctionPtri32._Ptri32_to_Ptri32, ptr %4117, align 8
  %4118 = call ptr @llvm.invariant.start.p0(i64 4, ptr %493)
  %4119 = call ptr @llvm.invariant.start.p0(i64 192, ptr %4105)
  %4120 = getelementptr ptr, ptr %4105, i32 %4114
  %4121 = getelementptr ptr, ptr %4120, i32 1
  %4122 = load ptr, ptr %4121, align 8
  %4123 = getelementptr { ptr, ptr }, ptr %494, i32 0, i32 0
  store ptr @i32_typ, ptr %4123, align 8
  %4124 = getelementptr { ptr, ptr }, ptr %494, i32 0, i32 1
  store ptr @function_typ, ptr %4124, align 8
  %4125 = call ptr @behavior_wrapper(ptr %4122, { ptr, ptr, ptr, i32 } %4115, ptr %494)
  %4126 = call i32 %4125({ ptr, ptr, ptr, i32 } %4115, { ptr, ptr, ptr, i32 } %4115, ptr %493, i32 0, { ptr } %3998)
  store i32 %4126, ptr %495, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %496, align 4
  %4127 = load ptr, ptr %496, align 8
  %4128 = insertvalue { ptr, i160 } undef, ptr %4127, 0
  %4129 = load i160, ptr %495, align 4
  %4130 = insertvalue { ptr, i160 } %4128, i160 %4129, 1
  %4131 = getelementptr [1 x ptr], ptr %497, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %4131, align 8
  %4132 = call ptr @llvm.invariant.start.p0(i64 1, ptr %497)
  %4133 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %4134 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %4135 = getelementptr { ptr }, ptr %498, i32 0, i32 0
  store ptr %4127, ptr %4135, align 8
  %4136 = call ptr @class_behavior_wrapper(ptr %4134, ptr %498)
  call void %4136(ptr %497, { ptr, i160 } %4130)
  store i32 256, ptr %499, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %500, align 4
  %4137 = load ptr, ptr %500, align 8
  %4138 = insertvalue { ptr, i160 } undef, ptr %4137, 0
  %4139 = load i160, ptr %499, align 4
  %4140 = insertvalue { ptr, i160 } %4138, i160 %4139, 1
  %4141 = getelementptr [1 x ptr], ptr %501, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %4141, align 8
  %4142 = call ptr @llvm.invariant.start.p0(i64 1, ptr %501)
  %4143 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %4144 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %4145 = getelementptr { ptr }, ptr %502, i32 0, i32 0
  store ptr %4137, ptr %4145, align 8
  %4146 = call ptr @class_behavior_wrapper(ptr %4144, ptr %502)
  call void %4146(ptr %501, { ptr, i160 } %4140)
  store i32 4, ptr %505, align 4
  store i32 5, ptr %503, align 4
  store i32 6, ptr %504, align 4
  %4147 = load i32, ptr %503, align 4
  store i32 %4147, ptr %506, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %507, align 4
  %4148 = load ptr, ptr %507, align 8
  %4149 = insertvalue { ptr, i160 } undef, ptr %4148, 0
  %4150 = load i160, ptr %506, align 4
  %4151 = insertvalue { ptr, i160 } %4149, i160 %4150, 1
  %4152 = getelementptr [1 x ptr], ptr %508, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %4152, align 8
  %4153 = call ptr @llvm.invariant.start.p0(i64 1, ptr %508)
  %4154 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %4155 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 9), align 8
  %4156 = getelementptr { ptr }, ptr %509, i32 0, i32 0
  store ptr %4148, ptr %4156, align 8
  %4157 = call ptr @class_behavior_wrapper(ptr %4155, ptr %509)
  call void %4157(ptr %508, { ptr, i160 } %4151)
  ret i32 0
}

define { i64, i64 } @_size_bool_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i1 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (i1, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (i1, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_bool_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @bool_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_size_bool_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload6, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload5, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %15 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %16 = load i160, ptr %15, align 4
  %17 = insertvalue { ptr, i160 } %14, i160 %16, 1
  ret { ptr, i160 } %17
}

define void @_unbox_bool_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_size_bool_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.inline.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #2

define { i64, i64 } @_size_any_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr, ptr, ptr, i32 } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { i64, i64 } @_size_Object(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret { i64, i64 } { i64 0, i64 1 }
}

define { i64, i64 } @_size_i8_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i8 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i8 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_i8_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @i8_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_size_i8_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload6, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload5, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %15 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %16 = load i160, ptr %15, align 4
  %17 = insertvalue { ptr, i160 } %14, i160 %16, 1
  ret { ptr, i160 } %17
}

define void @_unbox_i8_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_size_i8_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { i64, i64 } @_size_i32_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i32 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_i32_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @i32_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_size_i32_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload6, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload5, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %15 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %16 = load i160, ptr %15, align 4
  %17 = insertvalue { ptr, i160 } %14, i160 %16, 1
  ret { ptr, i160 } %17
}

define void @_unbox_i32_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_size_i32_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { i64, i64 } @_size_i64_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i64 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i64 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (i64, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (i64, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_i64_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @i64_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_size_i64_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload6, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload5, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %15 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %16 = load i160, ptr %15, align 4
  %17 = insertvalue { ptr, i160 } %14, i160 %16, 1
  ret { ptr, i160 } %17
}

define void @_unbox_i64_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_size_i64_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { i64, i64 } @_size_i128_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, i128 }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, i128 }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (i128, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (i128, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_i128_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @i128_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_size_i128_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload6, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload5, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %15 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %16 = load i160, ptr %15, align 4
  %17 = insertvalue { ptr, i160 } %14, i160 %16, 1
  ret { ptr, i160 } %17
}

define void @_unbox_i128_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_size_i128_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { i64, i64 } @_size_f64_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, double }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_f64_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @f64_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_size_f64_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload6, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload5, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %15 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %16 = load i160, ptr %15, align 4
  %17 = insertvalue { ptr, i160 } %14, i160 %16, 1
  ret { ptr, i160 } %17
}

define void @_unbox_f64_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_size_f64_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { i64, i64 } @_size_nil_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, [0 x i8] }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, [0 x i8] }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr ([0 x i8], ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr ([0 x i8], ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_nil_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @nil_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_size_nil_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload6, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload5, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %15 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %16 = load i160, ptr %15, align 4
  %17 = insertvalue { ptr, i160 } %14, i160 %16, 1
  ret { ptr, i160 } %17
}

define void @_unbox_nil_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_size_nil_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { i64, i64 } @_size_nothing_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, [0 x i8] }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, [0 x i8] }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr ([0 x i8], ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr ([0 x i8], ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_nothing_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @nothing_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_size_nothing_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload6, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload5, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %15 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %16 = load i160, ptr %15, align 4
  %17 = insertvalue { ptr, i160 } %14, i160 %16, 1
  ret { ptr, i160 } %17
}

define void @_unbox_nothing_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_size_nothing_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { i64, i64 } @_size_coroutine_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_coroutine_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @coroutine_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_size_coroutine_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload6, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload5, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %15 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %16 = load i160, ptr %15, align 4
  %17 = insertvalue { ptr, i160 } %14, i160 %16, 1
  ret { ptr, i160 } %17
}

define void @_unbox_coroutine_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_size_coroutine_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { i64, i64 } @_size_function_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_function_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @function_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_size_function_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload6, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload5, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %15 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %16 = load i160, ptr %15, align 4
  %17 = insertvalue { ptr, i160 } %14, i160 %16, 1
  ret { ptr, i160 } %17
}

define void @_unbox_function_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_size_function_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { i64, i64 } @_size_buffer_typ(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp ugt i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), 1
  %3 = select i1 %2, i64 ptrtoint (ptr getelementptr ({ i8, { ptr } }, ptr null, i32 0, i32 1) to i64), i64 1
  %4 = urem i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %3
  %5 = icmp eq i64 %4, 0
  %6 = sub i64 %3, %4
  %7 = select i1 %5, i64 0, i64 %6
  %8 = add i64 ptrtoint (ptr getelementptr ({ ptr }, ptr null, i32 1) to i64), %7
  %9 = insertvalue { i64, i64 } undef, i64 %8, 0
  %10 = insertvalue { i64, i64 } %9, i64 %3, 1
  ret { i64, i64 } %10
}

define { ptr, i160 } @_box_buffer_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @buffer_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_size_buffer_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload6, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload5, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %15 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %16 = load i160, ptr %15, align 4
  %17 = insertvalue { ptr, i160 } %14, i160 %16, 1
  ret { ptr, i160 } %17
}

define void @_unbox_buffer_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_size_buffer_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { ptr, i160 } @_box_tuple_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem4 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem4, align 8
  store ptr @tuple_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_size_tuple_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %7 = icmp sle i64 %.reload3, 16
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %9 = call ptr @bump_malloc(i64 %.reload2)
  %.reload1 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %0, i64 %.reload1, i1 false)
  %.reload6 = load ptr, ptr %.reg2mem4, align 8
  store ptr %9, ptr %.reload6, align 8
  br label %11

10:                                               ; preds = %2
  %.reload = load i64, ptr %.reg2mem, align 4
  %.reload5 = load ptr, ptr %.reg2mem4, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload5, ptr %0, i64 %.reload, i1 false)
  br label %11

11:                                               ; preds = %10, %8
  %12 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, i160 } undef, ptr %13, 0
  %15 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %16 = load i160, ptr %15, align 4
  %17 = insertvalue { ptr, i160 } %14, i160 %16, 1
  ret { ptr, i160 } %17
}

define void @_unbox_tuple_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr @_size_tuple_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = select i1 %9, ptr %5, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %10, i64 %8, i1 false)
  ret void
}

define { ptr, i160 } @_box_union_typ(ptr %0, ptr %1) {
  %3 = alloca { ptr, i160 }, align 8
  %.reg2mem = alloca i64, align 8
  %.reg2mem6 = alloca ptr, align 8
  %.reg2mem9 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  store ptr %4, ptr %.reg2mem6, align 8
  store ptr @union_typ, ptr %3, align 8
  %5 = call { i64, i64 } @size_wrapper(ptr @_size_union_typ, ptr %1)
  %6 = extractvalue { i64, i64 } %5, 0
  store i64 %6, ptr %.reg2mem, align 4
  %.reload5 = load i64, ptr %.reg2mem, align 4
  %7 = icmp eq i64 %.reload5, 32
  br i1 %7, label %._crit_edge, label %9

._crit_edge:                                      ; preds = %2
  store ptr %3, ptr %.reg2mem9, align 8
  br label %8

8:                                                ; preds = %._crit_edge1, %._crit_edge
  %.reload10 = load ptr, ptr %.reg2mem9, align 8
  %.reload4 = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %.reload10, ptr %0, i64 %.reload4, i1 false)
  br label %13

9:                                                ; preds = %2
  %.reload3 = load i64, ptr %.reg2mem, align 4
  %10 = icmp sle i64 %.reload3, 16
  br i1 %10, label %._crit_edge1, label %11

._crit_edge1:                                     ; preds = %9
  %.reload8 = load ptr, ptr %.reg2mem6, align 8
  store ptr %.reload8, ptr %.reg2mem9, align 8
  br label %8

11:                                               ; preds = %9
  %.reload2 = load i64, ptr %.reg2mem, align 4
  %12 = call ptr @bump_malloc(i64 %.reload2)
  %.reload = load i64, ptr %.reg2mem, align 4
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %12, ptr %0, i64 %.reload, i1 false)
  %.reload7 = load ptr, ptr %.reg2mem6, align 8
  store ptr %12, ptr %.reload7, align 8
  br label %13

13:                                               ; preds = %11, %8
  %14 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, i160 } undef, ptr %15, 0
  %17 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %18 = load i160, ptr %17, align 4
  %19 = insertvalue { ptr, i160 } %16, i160 %18, 1
  ret { ptr, i160 } %19
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
define ptr @typegetter_wrapper(ptr %f, ptr nocapture nofree noundef nonnull readonly %0) #3 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %result = call ptr %f(ptr nocapture nofree noundef nonnull readonly %0) #17
  ret ptr %result
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
define { i64, i64 } @size_wrapper(ptr %f, ptr nocapture nofree readonly %0) #3 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %result = call { i64, i64 } %f(ptr nocapture nofree readonly %0) #17
  ret { i64, i64 } %result
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
define { ptr, i160 } @box_wrapper(ptr %f, ptr nocapture nofree readonly %0, ptr nocapture nofree readonly %1) #3 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %result = call { ptr, i160 } %f(ptr nocapture nofree readonly %0, ptr nocapture nofree readonly %1) #17
  ret { ptr, i160 } %result
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: readwrite)
define void @unbox_wrapper(ptr %f, { ptr, i160 } %0, ptr nocapture nofree readonly %1, ptr nocapture nofree writeonly %2) #4 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  call void %f({ ptr, i160 } %0, ptr nocapture nofree readonly %1, ptr nocapture nofree writeonly %2) #18
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(read, inaccessiblemem: none)
define ptr @behavior_wrapper(ptr %f, { ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull %1) #5 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %result = call ptr %f({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull %1) #19
  ret ptr %result
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(read, inaccessiblemem: none)
define ptr @class_behavior_wrapper(ptr %f, ptr nocapture nofree noundef nonnull %0) #5 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %result = call ptr %f(ptr nocapture nofree noundef nonnull %0) #19
  ret ptr %result
}

define ptr @adjust_trampoline(ptr %tramp) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %ret = call ptr @llvm.adjust.trampoline(ptr %tramp) #20
  ret ptr %ret
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: read)
declare ptr @llvm.adjust.trampoline(ptr) #6

; Function Attrs: mustprogress nofree nounwind willreturn allockind("alloc,zeroed") allocsize(0)
define noalias ptr @bump_malloc(i64 noundef %size) #7 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %result = tail call noalias ptr @bump_malloc_inner(i64 noundef %size, ptr @current_ptr) #7
  ret ptr %result
}

; Function Attrs: mustprogress nofree noinline nounwind willreturn allockind("alloc,zeroed") allocsize(0)
define noalias ptr @bump_malloc_inner(i64 noundef %size, ptr %current_ptr) #8 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %size_plus_15 = add i64 %size, 15
  %aligned_size = and i64 %size_plus_15, -16
  %current = load ptr, ptr %current_ptr, align 8
  %new_ptr = getelementptr i8, ptr %current, i64 %aligned_size
  store ptr %new_ptr, ptr %current_ptr, align 8
  ret ptr %current
}

define { i64, i64 } @_size_tuple_typ(ptr %0) {
  %.reg2mem = alloca i64, align 8
  %.reg2mem2 = alloca i64, align 8
  %.reg2mem5 = alloca i64, align 8
  %.reg2mem8 = alloca i64, align 8
  %.reg2mem11 = alloca i64, align 8
  %.reg2mem22.0.lcssa.reg2mem = alloca i64, align 8
  %.reg2mem20.0.lcssa.reg2mem = alloca i64, align 8
  %.reg2mem20.010.reg2mem = alloca i64, align 8
  %.reg2mem22.011.reg2mem = alloca i64, align 8
  %.reg2mem14 = alloca i64, align 8
  %.in.reg2mem = alloca i64, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load i64, ptr %2, align 4
  store i64 %3, ptr %.reg2mem11, align 4
  %.reload13 = load i64, ptr %.reg2mem11, align 4
  %4 = icmp eq i64 %.reload13, 0
  br i1 %4, label %.._crit_edge_crit_edge, label %..lr.ph_crit_edge

..lr.ph_crit_edge:                                ; preds = %1
  %.reload12 = load i64, ptr %.reg2mem11, align 4
  store i64 1, ptr %.reg2mem20.010.reg2mem, align 4
  store i64 0, ptr %.reg2mem22.011.reg2mem, align 4
  store i64 1, ptr %.reg2mem14, align 4
  store i64 %.reload12, ptr %.in.reg2mem, align 4
  br label %.lr.ph

.._crit_edge_crit_edge:                           ; preds = %1
  store i64 0, ptr %.reg2mem22.0.lcssa.reg2mem, align 4
  store i64 1, ptr %.reg2mem20.0.lcssa.reg2mem, align 4
  br label %._crit_edge

.lr.ph:                                           ; preds = %.lr.ph..lr.ph_crit_edge, %..lr.ph_crit_edge
  %.in.reload = load i64, ptr %.in.reg2mem, align 4
  %.reload15 = load i64, ptr %.reg2mem14, align 4
  %.reg2mem22.011.reload = load i64, ptr %.reg2mem22.011.reg2mem, align 4
  %.reg2mem20.010.reload = load i64, ptr %.reg2mem20.010.reg2mem, align 4
  %5 = inttoptr i64 %.in.reload to ptr
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr i8, ptr %6, i64 48
  %8 = load ptr, ptr %7, align 8
  %9 = tail call { i64, i64 } %8(ptr nonnull %5)
  %10 = extractvalue { i64, i64 } %9, 0
  %11 = extractvalue { i64, i64 } %9, 1
  %12 = tail call i64 @llvm.umax.i64(i64 %11, i64 %.reg2mem20.010.reload)
  store i64 %12, ptr %.reg2mem8, align 4
  %13 = urem i64 %.reg2mem22.011.reload, %11
  %14 = icmp eq i64 %13, 0
  %15 = sub i64 %11, %13
  %16 = select i1 %14, i64 0, i64 %15
  %17 = add i64 %10, %.reg2mem22.011.reload
  %18 = add i64 %17, %16
  store i64 %18, ptr %.reg2mem5, align 4
  %19 = add i64 %.reload15, 1
  store i64 %19, ptr %.reg2mem2, align 4
  %.reload3 = load i64, ptr %.reg2mem2, align 4
  %20 = getelementptr ptr, ptr %0, i64 %.reload3
  %21 = load i64, ptr %20, align 4
  store i64 %21, ptr %.reg2mem, align 4
  %.reload = load i64, ptr %.reg2mem, align 4
  %22 = icmp eq i64 %.reload, 0
  br i1 %22, label %.lr.ph.._crit_edge_crit_edge, label %.lr.ph..lr.ph_crit_edge

.lr.ph..lr.ph_crit_edge:                          ; preds = %.lr.ph
  %.reload1 = load i64, ptr %.reg2mem, align 4
  %.reload4 = load i64, ptr %.reg2mem2, align 4
  %.reload7 = load i64, ptr %.reg2mem5, align 4
  %.reload10 = load i64, ptr %.reg2mem8, align 4
  store i64 %.reload10, ptr %.reg2mem20.010.reg2mem, align 4
  store i64 %.reload7, ptr %.reg2mem22.011.reg2mem, align 4
  store i64 %.reload4, ptr %.reg2mem14, align 4
  store i64 %.reload1, ptr %.in.reg2mem, align 4
  br label %.lr.ph

.lr.ph.._crit_edge_crit_edge:                     ; preds = %.lr.ph
  %.reload6 = load i64, ptr %.reg2mem5, align 4
  %.reload9 = load i64, ptr %.reg2mem8, align 4
  store i64 %.reload6, ptr %.reg2mem22.0.lcssa.reg2mem, align 4
  store i64 %.reload9, ptr %.reg2mem20.0.lcssa.reg2mem, align 4
  br label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph.._crit_edge_crit_edge, %.._crit_edge_crit_edge
  %.reg2mem20.0.lcssa.reload = load i64, ptr %.reg2mem20.0.lcssa.reg2mem, align 4
  %.reg2mem22.0.lcssa.reload = load i64, ptr %.reg2mem22.0.lcssa.reg2mem, align 4
  %23 = urem i64 %.reg2mem22.0.lcssa.reload, %.reg2mem20.0.lcssa.reload
  %24 = icmp eq i64 %23, 0
  %25 = sub i64 %.reg2mem20.0.lcssa.reload, %23
  %26 = select i1 %24, i64 0, i64 %25
  %27 = add i64 %26, %.reg2mem22.0.lcssa.reload
  %28 = insertvalue { i64, i64 } undef, i64 %27, 0
  %29 = insertvalue { i64, i64 } %28, i64 %.reg2mem20.0.lcssa.reload, 1
  ret { i64, i64 } %29
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.umax.i64(i64, i64) #1

define { i64, i64 } @_size_union_typ(ptr %0) {
  %.reg2mem = alloca i64, align 8
  %.reg2mem2 = alloca i64, align 8
  %.reg2mem5 = alloca i64, align 8
  %.reg2mem8 = alloca i64, align 8
  %.reg2mem11 = alloca i64, align 8
  %.reg2mem22.0.lcssa.reg2mem = alloca i64, align 8
  %.reg2mem20.0.lcssa.reg2mem = alloca i64, align 8
  %.reg2mem20.010.reg2mem = alloca i64, align 8
  %.reg2mem22.011.reg2mem = alloca i64, align 8
  %.reg2mem14 = alloca i64, align 8
  %.in.reg2mem = alloca i64, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load i64, ptr %2, align 4
  store i64 %3, ptr %.reg2mem11, align 4
  %.reload13 = load i64, ptr %.reg2mem11, align 4
  %4 = icmp eq i64 %.reload13, 0
  br i1 %4, label %.._crit_edge_crit_edge, label %..lr.ph_crit_edge

..lr.ph_crit_edge:                                ; preds = %1
  %.reload12 = load i64, ptr %.reg2mem11, align 4
  store i64 1, ptr %.reg2mem20.010.reg2mem, align 4
  store i64 0, ptr %.reg2mem22.011.reg2mem, align 4
  store i64 1, ptr %.reg2mem14, align 4
  store i64 %.reload12, ptr %.in.reg2mem, align 4
  br label %.lr.ph

.._crit_edge_crit_edge:                           ; preds = %1
  store i64 0, ptr %.reg2mem22.0.lcssa.reg2mem, align 4
  store i64 1, ptr %.reg2mem20.0.lcssa.reg2mem, align 4
  br label %._crit_edge

.lr.ph:                                           ; preds = %.lr.ph..lr.ph_crit_edge, %..lr.ph_crit_edge
  %.in.reload = load i64, ptr %.in.reg2mem, align 4
  %.reload15 = load i64, ptr %.reg2mem14, align 4
  %.reg2mem22.011.reload = load i64, ptr %.reg2mem22.011.reg2mem, align 4
  %.reg2mem20.010.reload = load i64, ptr %.reg2mem20.010.reg2mem, align 4
  %5 = inttoptr i64 %.in.reload to ptr
  %6 = load ptr, ptr %5, align 8
  %7 = getelementptr i8, ptr %6, i64 48
  %8 = load ptr, ptr %7, align 8
  %9 = tail call { i64, i64 } %8(ptr nonnull %5)
  %10 = extractvalue { i64, i64 } %9, 0
  %11 = extractvalue { i64, i64 } %9, 1
  %12 = tail call i64 @llvm.umax.i64(i64 %11, i64 %.reg2mem20.010.reload)
  store i64 %12, ptr %.reg2mem8, align 4
  %13 = urem i64 %.reg2mem22.011.reload, %11
  %14 = icmp eq i64 %13, 0
  %15 = sub i64 %11, %13
  %16 = select i1 %14, i64 0, i64 %15
  %17 = add i64 %10, %.reg2mem22.011.reload
  %18 = tail call i64 @llvm.umax.i64(i64 %17, i64 %16)
  store i64 %18, ptr %.reg2mem5, align 4
  %19 = add i64 %.reload15, 1
  store i64 %19, ptr %.reg2mem2, align 4
  %.reload3 = load i64, ptr %.reg2mem2, align 4
  %20 = getelementptr ptr, ptr %0, i64 %.reload3
  %21 = load i64, ptr %20, align 4
  store i64 %21, ptr %.reg2mem, align 4
  %.reload = load i64, ptr %.reg2mem, align 4
  %22 = icmp eq i64 %.reload, 0
  br i1 %22, label %.lr.ph.._crit_edge_crit_edge, label %.lr.ph..lr.ph_crit_edge

.lr.ph..lr.ph_crit_edge:                          ; preds = %.lr.ph
  %.reload1 = load i64, ptr %.reg2mem, align 4
  %.reload4 = load i64, ptr %.reg2mem2, align 4
  %.reload7 = load i64, ptr %.reg2mem5, align 4
  %.reload10 = load i64, ptr %.reg2mem8, align 4
  store i64 %.reload10, ptr %.reg2mem20.010.reg2mem, align 4
  store i64 %.reload7, ptr %.reg2mem22.011.reg2mem, align 4
  store i64 %.reload4, ptr %.reg2mem14, align 4
  store i64 %.reload1, ptr %.in.reg2mem, align 4
  br label %.lr.ph

.lr.ph.._crit_edge_crit_edge:                     ; preds = %.lr.ph
  %.reload6 = load i64, ptr %.reg2mem5, align 4
  %.reload9 = load i64, ptr %.reg2mem8, align 4
  store i64 %.reload6, ptr %.reg2mem22.0.lcssa.reg2mem, align 4
  store i64 %.reload9, ptr %.reg2mem20.0.lcssa.reg2mem, align 4
  br label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph.._crit_edge_crit_edge, %.._crit_edge_crit_edge
  %.reg2mem20.0.lcssa.reload = load i64, ptr %.reg2mem20.0.lcssa.reg2mem, align 4
  %.reg2mem22.0.lcssa.reload = load i64, ptr %.reg2mem22.0.lcssa.reg2mem, align 4
  %final_size = add i64 %.reg2mem22.0.lcssa.reload, 8
  %23 = urem i64 %final_size, %.reg2mem20.0.lcssa.reload
  %24 = icmp eq i64 %23, 0
  %25 = sub i64 %.reg2mem20.0.lcssa.reload, %23
  %26 = select i1 %24, i64 0, i64 %25
  %27 = add i64 %26, %final_size
  %28 = insertvalue { i64, i64 } undef, i64 %27, 0
  %29 = insertvalue { i64, i64 } %28, i64 %.reg2mem20.0.lcssa.reload, 1
  ret { i64, i64 } %29
}

define void @_unbox_union_typ({ ptr, i160 } %0, ptr %1, ptr %2) {
  %4 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %0, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @_size_union_typ(ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp sle i64 %8, 16
  %10 = icmp eq i64 %8, 32
  %11 = select i1 %9, ptr %5, ptr %6
  %12 = select i1 %10, ptr %4, ptr %11
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %2, ptr %12, i64 %8, i1 false)
  ret void
}

define { ptr, i160 } @_box_Default(ptr %fat_ptr, ptr %parameterization) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %vptr = load ptr, ptr %fat_ptr, align 8
  %1 = insertvalue { ptr, i160 } undef, ptr %vptr, 0
  %2 = getelementptr i8, ptr %fat_ptr, i64 8
  %3 = load i160, ptr %2, align 4
  %4 = insertvalue { ptr, i160 } %1, i160 %3, 1
  ret { ptr, i160 } %4
}

define void @_unbox_Default({ ptr, i160 } %fat_ptr, ptr %parameterization, ptr %destination) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %vptr = extractvalue { ptr, i160 } %fat_ptr, 0
  %data = extractvalue { ptr, i160 } %fat_ptr, 1
  %dest_data = getelementptr i8, ptr %destination, i64 8
  store ptr %vptr, ptr %destination, align 8
  store i160 %data, ptr %dest_data, align 4
  ret void
}

define void @anoint_trampoline(ptr %tramp) {
  %oldProtect = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %result = call i32 @VirtualProtect(ptr %tramp, i64 16, i32 64, ptr %oldProtect) #9
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
declare i32 @VirtualProtect(ptr, i64, i32, ptr) #9

define ptr @coroutine_create(ptr %func, ptr %arg_passer) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %stack = call noalias ptr @VirtualAlloc(ptr null, i64 8388608, i32 12288, i32 4) #21
  %func_ptr = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %stack, i32 0, i32 0
  store ptr %func, ptr %func_ptr, align 8
  %stack_top = getelementptr i8, ptr %stack, i64 8388608
  %stack_top_i64 = ptrtoint ptr %stack_top to i64
  %stack_top_aligned = and i64 %stack_top_i64, -16
  %into_callee_buf = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %stack, i32 0, i32 1
  %arg_passer_slot = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %stack, i32 0, i32 2
  %into_callee_first_word = getelementptr [3 x ptr], ptr %into_callee_buf, i32 0, i32 0
  %into_callee_second_word = getelementptr [3 x ptr], ptr %into_callee_buf, i32 0, i32 1
  %into_callee_third_word = getelementptr [3 x ptr], ptr %into_callee_buf, i32 0, i32 2
  store i64 %stack_top_aligned, ptr %into_callee_first_word, align 4
  store i64 %stack_top_aligned, ptr %into_callee_third_word, align 4
  store ptr %arg_passer, ptr %arg_passer_slot, align 8
  %is_finished = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %stack, i32 0, i32 3
  store i1 false, ptr %is_finished, align 1
  call void @coroutine_trampoline(ptr %into_callee_second_word)
  ret ptr %stack
}

; Function Attrs: mustprogress nofree nounwind willreturn allockind("alloc,zeroed") allocsize(1)
declare noalias ptr @VirtualAlloc(ptr, i64, i32, i32) #10

declare void @coroutine_trampoline(ptr)

define void @setup_landing_pad() {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %region = call noalias ptr @VirtualAlloc(ptr null, i64 21474836480, i32 12288, i32 4) #21
  store ptr %region, ptr @current_ptr, align 8
  %buf_first_word = getelementptr [3 x ptr], ptr @into_caller_buf, i32 0, i32 0
  %buf_second_word = getelementptr [3 x ptr], ptr @into_caller_buf, i32 0, i32 1
  %buf_third_word = getelementptr [3 x ptr], ptr @into_caller_buf, i32 0, i32 2
  %sp = call ptr @llvm.stacksave.p0() #22
  store ptr %sp, ptr %buf_first_word, align 8
  store ptr blockaddress(@setup_landing_pad, %landing_pad), ptr %buf_second_word, align 8
  store ptr %sp, ptr %buf_third_word, align 8
  %current_coroutine = call ptr @coroutine_create(ptr @setup_landing_pad, ptr @arg_passer)
  store ptr %current_coroutine, ptr @current_coroutine, align 8
  %result = call i1 @returns_one()
  br i1 %result, label %exit, label %landing_pad

landing_pad:                                      ; preds = %0
  %ok = call i32 @printf(ptr @string_string.55, ptr @exception_message)
  %cc = load { ptr }, ptr @current_coroutine, align 8
  call void @report_exception({ ptr } %cc)
  call void @exit()
  unreachable

exit:                                             ; preds = %0
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare ptr @llvm.stacksave.p0() #11

define void @arg_passer(ptr %current_coroutine) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %func_ptr = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %current_coroutine, i32 0, i32 0
  %func = load ptr, ptr %func_ptr, align 8
  call void %func()
  ret void
}

define i1 @returns_one() {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %retval = load i1, ptr @always_one, align 1
  ret i1 %retval
}

declare void @exit()

define i32 @get_offset(ptr %vptr, ptr %id_ptr) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %id = load i64, ptr %id_ptr, align 4
  %id_of_casted = load i64, ptr %vptr, align 4
  %hash_coef_ptr = getelementptr i64, ptr %vptr, i32 1
  %tbl_size_ptr = getelementptr i64, ptr %vptr, i32 2
  %offset_tbl_ptr = getelementptr ptr, ptr %vptr, i32 5
  %hash_coef = load i64, ptr %hash_coef_ptr, align 4
  %tbl_size = load i64, ptr %tbl_size_ptr, align 4
  %offset_tbl = load ptr, ptr %offset_tbl_ptr, align 8
  %index = call i64 @hash_to_index(i64 %tbl_size, i64 %hash_coef, i64 %id)
  %offset_ptr = getelementptr i32, ptr %offset_tbl, i64 %index
  %offset = load i32, ptr %offset_ptr, align 4
  ret i32 %offset
}

define i64 @hash_to_index(i64 %tbl_size, i64 %hash_coef, i64 %cand_id) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %product = mul i64 %cand_id, %hash_coef
  %shifted = lshr i64 %product, 32
  %xored = xor i64 %product, %shifted
  %hash = and i64 %xored, %tbl_size
  %bug = icmp sgt i64 %hash, %tbl_size
  ret i64 %hash
}

define void @assume_offset(ptr %fat_ptr, ptr %id_ptr) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %vptr = load ptr, ptr %fat_ptr, align 8
  %id_of_casted = load i64, ptr %vptr, align 4
  %offset = call i32 @get_offset(ptr %vptr, ptr %id_ptr)
  %destination = getelementptr { ptr, ptr, ptr, i32 }, ptr %fat_ptr, i32 0, i32 3
  %dest_value = load i32, ptr %destination, align 4
  %slot = alloca i32, align 4
  store i32 %dest_value, ptr %slot, align 4
  %slotval = load i32, ptr %slot, align 4
  %eq = icmp eq i32 %slotval, %offset
  call void @llvm.assume(i1 %eq) #23
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write)
declare void @llvm.assume(i1 noundef) #12

define void @set_offset(ptr %fat_ptr, ptr %id_ptr) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %vptr = load ptr, ptr %fat_ptr, align 8
  %id_of_casted = load i64, ptr %vptr, align 4
  %offset = call i32 @get_offset(ptr %vptr, ptr %id_ptr)
  %destination = getelementptr { ptr, ptr, ptr, i32 }, ptr %fat_ptr, i32 0, i32 3
  store i32 %offset, ptr %destination, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
define i1 @subtype_test(i64 %tbl_size, i64 %hash_coef, i64 %cand_id, i64 %candidate, ptr %supertype_tbl) #3 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %hash = call i64 @hash_to_index(i64 %tbl_size, i64 %hash_coef, i64 %cand_id)
  %gep = getelementptr i64, ptr %supertype_tbl, i64 %hash
  %stored_val = load i64, ptr %gep, align 4
  %eq = icmp eq i64 %stored_val, %candidate
  ret i1 %eq
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
define i1 @subtype_test_wrapper(ptr %f, i64 %tbl_size, i64 %hash_coef, i64 %cand_id, i64 %candidate, ptr %supertype_tbl) #3 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %result = call i1 %f(i64 %tbl_size, i64 %hash_coef, i64 %cand_id, i64 %candidate, ptr %supertype_tbl) #17
  ret i1 %result
}

define void @arg_buffer_filler(ptr %coroutine) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret void
}

define ptr @get_current_coroutine() {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %current_coroutine = load ptr, ptr @current_coroutine, align 8
  ret ptr %current_coroutine
}

; Function Attrs: noinline nounwind memory(readwrite)
define preserve_nonecc void @context_switch(ptr nocapture writeonly %from_buf, ptr %to_buf) #13 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %from_buf_first_word = getelementptr [3 x ptr], ptr %from_buf, i32 0, i32 0
  %from_buf_second_word = getelementptr [3 x ptr], ptr %from_buf, i32 0, i32 1
  %from_buf_third_word = getelementptr [3 x ptr], ptr %from_buf, i32 0, i32 2
  store ptr blockaddress(@context_switch, %return_from_switch), ptr %from_buf_second_word, align 8
  %sp = call ptr @llvm.stacksave.p0() #22
  store ptr %sp, ptr %from_buf_first_word, align 8
  store ptr %sp, ptr %from_buf_third_word, align 8
  %is_first_time = call i1 @returns_one()
  br i1 %is_first_time, label %do_switch, label %return_from_switch

do_switch:                                        ; preds = %0
  call void @llvm.eh.sjlj.longjmp(ptr %to_buf) #14
  unreachable

return_from_switch:                               ; preds = %0
  ret void
}

; Function Attrs: noreturn nounwind
declare void @llvm.eh.sjlj.longjmp(ptr) #14

define void @coroutine_yield(ptr %current_coroutine) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %into_callee_buf = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %current_coroutine, i32 0, i32 1
  call preserve_nonecc void @context_switch(ptr nocapture writeonly %into_callee_buf, ptr @into_caller_buf) #24
  ret void
}

define void @coroutine_call(ptr %coroutine) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %old_into_caller = load [3 x ptr], ptr @into_caller_buf, align 8
  %old_coroutine = load ptr, ptr @current_coroutine, align 8
  store ptr %coroutine, ptr @current_coroutine, align 8
  %into_callee_buf = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %coroutine, i32 0, i32 1
  call preserve_nonecc void @context_switch(ptr nocapture writeonly @into_caller_buf, ptr %into_callee_buf) #24
  store ptr %old_coroutine, ptr @current_coroutine, align 8
  store [3 x ptr] %old_into_caller, ptr @into_caller_buf, align 8
  ret void
}

attributes #0 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #3 = { mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read) }
attributes #4 = { mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: readwrite) }
attributes #5 = { mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(read, inaccessiblemem: none) }
attributes #6 = { nocallback nofree nosync nounwind willreturn memory(argmem: read) }
attributes #7 = { mustprogress nofree nounwind willreturn allockind("alloc,zeroed") allocsize(0) "alloc-family"="malloc" }
attributes #8 = { mustprogress nofree noinline nounwind willreturn allockind("alloc,zeroed") allocsize(0) "alloc-family"="malloc" }
attributes #9 = { mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #10 = { mustprogress nofree nounwind willreturn allockind("alloc,zeroed") allocsize(1) "alloc-family"="malloc" }
attributes #11 = { nocallback nofree nosync nounwind willreturn }
attributes #12 = { nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write) }
attributes #13 = { noinline nounwind memory(readwrite) }
attributes #14 = { noreturn nounwind }
attributes #15 = { nounwind willreturn memory(argmem: readwrite) }
attributes #16 = { nounwind willreturn memory(argmem: read, inaccessiblemem: readwrite) }
attributes #17 = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read) }
attributes #18 = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: readwrite) }
attributes #19 = { mustprogress nofree norecurse nosync nounwind willreturn memory(read, inaccessiblemem: none) }
attributes #20 = { mustprogress nofree nosync nounwind willreturn memory(argmem: read) }
attributes #21 = { mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(1) "alloc-family"="malloc" }
attributes #22 = { mustprogress nofree nosync nounwind willreturn }
attributes #23 = { mustprogress nofree nosync nounwind willreturn memory(inaccessiblemem: write) }
attributes #24 = { nounwind memory(readwrite) }

!llvm.module.flags = !{!0}

!0 = !{i32 2, !"Debug Info Version", i32 3}
