; ModuleID = '<stdin>'
source_filename = "llvm-link"

@_parameterization_Nothing = linkonce_odr constant [1 x ptr] [ptr @nothing_typ]
@_parameterization_Nil = linkonce_odr constant [1 x ptr] [ptr @nil_typ]
@_parameterization_Nil_or_Ptri32 = linkonce_odr constant [3 x ptr] [ptr @union_typ, ptr @_parameterization_Nil, ptr @_parameterization_Ptri32]
@ohegt_bigtingstxt = internal constant [12 x i8] c"bigtings.txt"
@hjqmb_thisnis_hownwe_donit = internal constant [20 x i8] c"this\0Ais how\0Awe do\0Ait"
@cmgpb_bigtingstxt = internal constant [12 x i8] c"bigtings.txt"
@_parameterization_FunctionPtri32_to_Nothing = linkonce_odr constant [3 x ptr] [ptr @function_typ, ptr @_parameterization_Nothing, ptr @_parameterization_Ptri32]
@_parameterization_FunctionPtri32._Ptri32_to_Ptri32 = linkonce_odr constant [4 x ptr] [ptr @function_typ, ptr @_parameterization_Ptri32, ptr @_parameterization_Ptri32, ptr @_parameterization_Ptri32]
@_parameterization_Integer2 = linkonce_odr constant [1 x ptr] [ptr @Integer2]
@_parameterization_Character = linkonce_odr constant [1 x ptr] [ptr @Character]
@uzgha_boom = internal constant [5 x i8] c"boom!"
@zpyqp_so_it_is_true = internal constant [14 x i8] c"so it is true!"
@cfrmd_barrys_color_is = internal constant [16 x i8] c"barry's color is"
@_parameterization_Beaver = linkonce_odr constant [1 x ptr] [ptr @Beaver]
@_parameterization_Animal = linkonce_odr constant [1 x ptr] [ptr @Animal]
@ajteb_did_get_here = internal constant [13 x i8] c"did get here!"
@aizac_start = internal constant [5 x i8] c"start"
@_parameterization_Ptrf64_or_Ptri32 = linkonce_odr constant [3 x ptr] [ptr @union_typ, ptr @_parameterization_Ptrf64, ptr @_parameterization_Ptri32]
@_parameterization_Ptri64 = linkonce_odr constant [1 x ptr] [ptr @i64_typ]
@yetfi_w = internal constant [1 x i8] c"w"
@gzmae_r = internal constant [1 x i8] c"r"
@qzecq_one = internal constant [3 x i8] c"one"
@eucim_sourcemini = internal constant [11 x i8] c"source.mini"
@dache_beaver = internal constant [7 x i8] c"beaver!"
@gyjjp_animal = internal constant [7 x i8] c"animal!"
@_parameterization_ListNode = linkonce_odr constant [1 x ptr] [ptr @ListNode]
@_parameterization_Ptrf64 = linkonce_odr constant [1 x ptr] [ptr @f64_typ]
@sjsyh_Integer = internal constant [8 x i8] c"Integer2"
@zvqln_Here_I_am = internal constant [10 x i8] c"Here I am!"
@vhfip_number = internal constant [6 x i8] c"number"
@Integer_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Integer]
@Integer_offset_tbl = linkonce_odr constant [4 x i32] [i32 20, i32 7, i32 0, i32 7]
@Integer = constant { [3 x i64], [4 x ptr], [13 x ptr] } { [3 x i64] [i64 -735147942809078232, i64 4611686018427388081, i64 3], [4 x ptr] [ptr @subtype_test, ptr @Integer_hashtbl, ptr @Integer_offset_tbl, ptr getelementptr ({ i32 }, ptr null, i32 1)], [13 x ptr] [ptr @Integer_field_value, ptr @Integer_B_init_valuePtri32, ptr @Integer_B__ADD_otherPtri32, ptr @Integer_B__SUB_otherPtri32, ptr @Integer_B__MUL_otherPtri32, ptr @Integer_B__DIV_otherPtri32, ptr @Integer_B_print_, ptr @Integer_init_valuePtri32, ptr @Integer__ADD_otherPtri32, ptr @Integer__SUB_otherPtri32, ptr @Integer__MUL_otherPtri32, ptr @Integer__DIV_otherPtri32, ptr @Integer_print_] }
@BigBoy_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Representable, ptr @Object, ptr @any_typ, ptr @BigBoy]
@BigBoy_offset_tbl = linkonce_odr constant [4 x i32] [i32 11, i32 13, i32 7, i32 7]
@BigBoy = constant { [3 x i64], [4 x ptr], [6 x ptr] } { [3 x i64] [i64 3069357308562348185, i64 4611686018427388361, i64 3], [4 x ptr] [ptr @subtype_test, ptr @BigBoy_hashtbl, ptr @BigBoy_offset_tbl, ptr getelementptr ({}, ptr null, i32 1)], [6 x ptr] [ptr @BigBoy_B_introduce_, ptr @BigBoy_B_repr_, ptr @BigBoy_introduce_, ptr @Representable_repr_, ptr @BigBoy_B_repr_, ptr @Representable_repr_] }
@Integer2_hashtbl = linkonce_odr constant [8 x ptr] [ptr null, ptr @Object, ptr @any_typ, ptr @Integer2, ptr @Integer, ptr @Representable, ptr null, ptr @BigBoy]
@Integer2_offset_tbl = linkonce_odr constant [8 x i32] [i32 0, i32 39, i32 7, i32 7, i32 26, i32 45, i32 0, i32 39]
@Integer2 = constant { [3 x i64], [4 x ptr], [40 x ptr] } { [3 x i64] [i64 1844024195090879880, i64 4611686018427388181, i64 7], [4 x ptr] [ptr @subtype_test, ptr @Integer2_hashtbl, ptr @Integer2_offset_tbl, ptr getelementptr ({ i32 }, ptr null, i32 1)], [40 x ptr] [ptr @Integer2_field_value, ptr @Integer2_B_value_, ptr @Integer2_B_init_valuePtri32, ptr @Integer2_B__ADD_otherPtri32, ptr @Integer2_B__SUB_otherPtri32, ptr @Integer2_B__MUL_otherPtri32, ptr @Integer2_B__DIV_otherPtri32, ptr @Integer2_B_print_, ptr @Integer2_B_introduce_, ptr @Integer2_B_repr_, ptr @Integer2_value_, ptr @Integer_init_valuePtri32, ptr @Integer__ADD_otherPtri32, ptr @Integer__SUB_otherPtri32, ptr @Integer__MUL_otherPtri32, ptr @Integer__DIV_otherPtri32, ptr @Integer_print_, ptr @BigBoy_introduce_, ptr @Integer2_repr_, ptr @Integer2_field_value, ptr @Integer2_B_init_valuePtri32, ptr @Integer2_B__ADD_otherPtri32, ptr @Integer2_B__SUB_otherPtri32, ptr @Integer2_B__MUL_otherPtri32, ptr @Integer2_B__DIV_otherPtri32, ptr @Integer2_B_print_, ptr @Integer_init_valuePtri32, ptr @Integer__ADD_otherPtri32, ptr @Integer__SUB_otherPtri32, ptr @Integer__MUL_otherPtri32, ptr @Integer__DIV_otherPtri32, ptr @Integer_print_, ptr @Integer2_B_introduce_, ptr @Integer2_B_repr_, ptr @BigBoy_introduce_, ptr @Integer2_repr_, ptr @Integer2_B_repr_, ptr @Integer2_repr_, ptr @Integer2_B_repr_, ptr @Integer2_repr_] }
@Animal_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr null, ptr @any_typ, ptr @Animal]
@Animal_offset_tbl = linkonce_odr constant [4 x i32] [i32 20, i32 0, i32 7, i32 7]
@Animal = constant { [3 x i64], [4 x ptr], [13 x ptr] } { [3 x i64] [i64 1075018126824711487, i64 4611686018427388091, i64 3], [4 x ptr] [ptr @subtype_test, ptr @Animal_hashtbl, ptr @Animal_offset_tbl, ptr getelementptr ({ i32, double, i32 }, ptr null, i32 1)], [13 x ptr] [ptr @Animal_field_age, ptr @Animal_field_hp, ptr @Animal_field_skill, ptr @Animal_B_init_agePtri32_hpPtrf64_skillPtri32, ptr @Animal_B_say_age_, ptr @Animal_B_say_skill_, ptr @Animal_B_say_messagePtri32, ptr @Animal_B_do_nothing_, ptr @Animal_init_agePtri32_hpPtrf64_skillPtri32, ptr @Animal_say_age_, ptr @Animal_say_skill_, ptr @Animal_say_messagePtri32, ptr @Animal_do_nothing_] }
@Beaver_hashtbl = linkonce_odr constant [4 x ptr] [ptr null, ptr @Object, ptr @any_typ, ptr @Beaver]
@Beaver_offset_tbl = linkonce_odr constant [4 x i32] [i32 0, i32 15, i32 7, i32 7]
@Beaver = constant { [3 x i64], [4 x ptr], [8 x ptr] } { [3 x i64] [i64 -6124772949900838462, i64 4611686018427388097, i64 3], [4 x ptr] [ptr @subtype_test, ptr @Beaver_hashtbl, ptr @Beaver_offset_tbl, ptr getelementptr ({ i32, double }, ptr null, i32 1)], [8 x ptr] [ptr @Beaver_field_color, ptr @Beaver_field_name, ptr @Beaver_B_init_colorPtri32_namePtrf64, ptr @Beaver_B__ADD_xPtri32, ptr @Beaver_B_say_color_, ptr @Beaver_init_colorPtri32_namePtrf64, ptr @Beaver__ADD_xPtri32, ptr @Beaver_say_color_] }
@ListNode_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @ListNode]
@ListNode_offset_tbl = linkonce_odr constant [4 x i32] [i32 19, i32 7, i32 0, i32 7]
@ListNode = constant { [3 x i64], [4 x ptr], [12 x ptr] } { [3 x i64] [i64 -1756024950533091476, i64 4611686018427388081, i64 3], [4 x ptr] [ptr @subtype_test, ptr @ListNode_hashtbl, ptr @ListNode_offset_tbl, ptr getelementptr ({ i32, { ptr, i160 } }, ptr null, i32 1)], [12 x ptr] [ptr @ListNode_field_data, ptr @ListNode_field_next, ptr @ListNode_B_init_dataPtri32, ptr @ListNode_B_push_nextListNode, ptr @ListNode_B_next_, ptr @ListNode_B_data_, ptr @ListNode_B_iterator_, ptr @ListNode_init_dataPtri32, ptr @ListNode_push_nextListNode, ptr @ListNode_next_, ptr @ListNode_data_, ptr @ListNode_iterator_] }
@ListIterator_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @ListIterator, ptr null]
@ListIterator_offset_tbl = linkonce_odr constant [4 x i32] [i32 12, i32 7, i32 7, i32 0]
@ListIterator = constant { [3 x i64], [4 x ptr], [5 x ptr] } { [3 x i64] [i64 -5838699946612561379, i64 4611686018427388081, i64 3], [4 x ptr] [ptr @subtype_test, ptr @ListIterator_hashtbl, ptr @ListIterator_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 } }, ptr null, i32 1)], [5 x ptr] [ptr @ListIterator_field_node, ptr @ListIterator_B_init_nodeListNode, ptr @ListIterator_B_next_, ptr @ListIterator_init_nodeListNode, ptr @ListIterator_next_] }
@Bard_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @Bard, ptr null]
@Bard_offset_tbl = linkonce_odr constant [4 x i32] [i32 14, i32 7, i32 7, i32 0]
@Bard = constant { [3 x i64], [4 x ptr], [7 x ptr] } { [3 x i64] [i64 -7979915337087193093, i64 4611686018427388081, i64 3], [4 x ptr] [ptr @subtype_test, ptr @Bard_hashtbl, ptr @Bard_offset_tbl, ptr getelementptr ({}, ptr null, i32 1)], [7 x ptr] [ptr @Bard_B_init_, ptr @Bard_B_take_aPtri32_bPtrf64_take_aPtrf64_bPtrf64_take_aAnimal_bBeaver_take_aPtri32_bPtri32, ptr @Bard_init_, ptr @Bard_take_aPtri32_bPtrf64, ptr @Bard_take_aPtrf64_bPtrf64, ptr @Bard_take_aAnimal_bBeaver, ptr @Bard_take_aPtri32_bPtri32] }
@Integer_field_value = internal constant { ptr, ptr } { ptr @Integer_getter_value, ptr @Integer_setter_value }
@Integer2_field_value = internal constant { ptr, ptr } { ptr @Integer2_getter_value, ptr @Integer2_setter_value }
@Animal_field_age = internal constant { ptr, ptr } { ptr @Animal_getter_age, ptr @Animal_setter_age }
@Animal_field_hp = internal constant { ptr, ptr } { ptr @Animal_getter_hp, ptr @Animal_setter_hp }
@Animal_field_skill = internal constant { ptr, ptr } { ptr @Animal_getter_skill, ptr @Animal_setter_skill }
@Beaver_field_color = internal constant { ptr, ptr } { ptr @Beaver_getter_color, ptr @Beaver_setter_color }
@Beaver_field_name = internal constant { ptr, ptr } { ptr @Beaver_getter_name, ptr @Beaver_setter_name }
@ListNode_field_data = internal constant { ptr, ptr } { ptr @ListNode_getter_data, ptr @ListNode_setter_data }
@ListNode_field_next = internal constant { ptr, ptr } { ptr @ListNode_getter_next, ptr @ListNode_setter_next }
@ListIterator_field_node = internal constant { ptr, ptr } { ptr @ListIterator_getter_node, ptr @ListIterator_setter_node }
@_parameterization_IntArray = linkonce_odr constant [1 x ptr] [ptr @IntArray]
@mdhwx_stdmini = internal constant [8 x i8] c"std.mini"
@yvzmu_stdmini = internal constant [8 x i8] c"std.mini"
@_parameterization_BufferPtri32 = linkonce_odr constant [1 x ptr] [ptr @buffer_typ]
@uhrai_An_outofbounds_error_occurred_while_indexing_into_a_collection = internal constant [65 x i8] c"An out-of-bounds error occurred while indexing into a collection."
@kjkfy_The_indexing_argument_was = internal constant [25 x i8] c"The indexing argument was"
@iwfhc_The_size_of_the_collection_being_indexed_was = internal constant [44 x i8] c"The size of the collection being indexed was"
@OutOfBoundsDetails_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr null, ptr @any_typ, ptr @OutOfBoundsDetails]
@OutOfBoundsDetails_offset_tbl = linkonce_odr constant [4 x i32] [i32 13, i32 0, i32 7, i32 7]
@OutOfBoundsDetails = constant { [3 x i64], [4 x ptr], [6 x ptr] } { [3 x i64] [i64 4650630525701360429, i64 4611686018427388091, i64 3], [4 x ptr] [ptr @subtype_test, ptr @OutOfBoundsDetails_hashtbl, ptr @OutOfBoundsDetails_offset_tbl, ptr getelementptr ({ i32, i32 }, ptr null, i32 1)], [6 x ptr] [ptr @OutOfBoundsDetails_field_bounds, ptr @OutOfBoundsDetails_field_index, ptr @OutOfBoundsDetails_B_init_boundsPtri32_indexPtri32, ptr @OutOfBoundsDetails_B_report_, ptr @OutOfBoundsDetails_init_boundsPtri32_indexPtri32, ptr @OutOfBoundsDetails_report_] }
@OutOfBounds_hashtbl = linkonce_odr constant [4 x ptr] [ptr @any_typ, ptr @Exception, ptr @OutOfBounds, ptr @Object]
@OutOfBounds_offset_tbl = linkonce_odr constant [4 x i32] [i32 7, i32 23, i32 7, i32 36]
@OutOfBounds = constant { [3 x i64], [4 x ptr], [29 x ptr] } { [3 x i64] [i64 5348403617834207535, i64 4611686018427388247, i64 3], [4 x ptr] [ptr @subtype_test, ptr @OutOfBounds_hashtbl, ptr @OutOfBounds_offset_tbl, ptr getelementptr ({ { ptr, i160 }, i32, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr null, i32 1)], [29 x ptr] [ptr @OutOfBounds_field_details, ptr @OutOfBounds_field_line_number, ptr @OutOfBounds_field_file_name, ptr @OutOfBounds_field_message, ptr @OutOfBounds_B_init_boundsPtri32_indexPtri32, ptr @OutOfBounds_B_init_messageString, ptr @OutOfBounds_B_init_, ptr @OutOfBounds_B_set_info_line_numberPtri32_file_nameString, ptr @OutOfBounds_B_report_, ptr @OutOfBounds_B_print_message_, ptr @OutOfBounds_init_boundsPtri32_indexPtri32, ptr @Exception_init_messageString, ptr @Exception_init_, ptr @Exception_set_info_line_numberPtri32_file_nameString, ptr @Exception_report_, ptr @OutOfBounds_print_message_, ptr @OutOfBounds_field_line_number, ptr @OutOfBounds_field_file_name, ptr @OutOfBounds_field_message, ptr @OutOfBounds_B_init_messageString, ptr @OutOfBounds_B_init_, ptr @OutOfBounds_B_set_info_line_numberPtri32_file_nameString, ptr @OutOfBounds_B_report_, ptr @OutOfBounds_B_print_message_, ptr @Exception_init_messageString, ptr @Exception_init_, ptr @Exception_set_info_line_numberPtri32_file_nameString, ptr @Exception_report_, ptr @OutOfBounds_print_message_] }
@IntArray_hashtbl = linkonce_odr constant [8 x ptr] [ptr @Representable, ptr @Iterable, ptr @any_typ, ptr null, ptr null, ptr @IntIterable, ptr @IntArray, ptr @Object]
@IntArray_offset_tbl = linkonce_odr constant [8 x i32] [i32 82, i32 80, i32 7, i32 0, i32 0, i32 56, i32 7, i32 82]
@IntArray = constant { [3 x i64], [4 x ptr], [77 x ptr] } { [3 x i64] [i64 7629948565578263212, i64 4611686018427388093, i64 7], [4 x ptr] [ptr @subtype_test, ptr @IntArray_hashtbl, ptr @IntArray_offset_tbl, ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1)], [77 x ptr] [ptr @IntArray_field_buffer, ptr @IntArray_field_length, ptr @IntArray_field_capacity, ptr @IntArray_B__Self_from_iterable_iterableIntIterable, ptr @IntArray_B_init_, ptr @IntArray_B_init_bufferBufferPtri32_lengthPtri32_capacityPtri32, ptr @IntArray_B_length_, ptr @IntArray_B_capacity_, ptr @IntArray_B_buffer_, ptr @IntArray_B_append_xPtri32, ptr @IntArray_B_extend_aryIntArray, ptr @IntArray_B__index_xPtri32, ptr @IntArray_B_pop_, ptr @IntArray_B_copy_, ptr @IntArray_B_each_fFunctionPtri32_to_Nothing, ptr @IntArray_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntArray_B_all_fFunctionPtri32_to_Ptri1, ptr @IntArray_B_any_fFunctionPtri32_to_Ptri1, ptr @IntArray_B_map_fFunctionPtri32_to_Ptri32, ptr @IntArray_B_filter_fFunctionPtri32_to_Ptri1, ptr @IntArray_B_chain_otherIntIterable, ptr @IntArray_B_interleave_otherIntIterable, ptr @IntArray_B_zip_otherIntIterable, ptr @IntArray_B_product_otherIntIterable, ptr @IntArray_B_iterator_, ptr @IntArray_B_repr_, ptr @IntArray__Self_from_iterable_iterableIntIterable, ptr @IntArray_init_, ptr @IntArray_init_bufferBufferPtri32_lengthPtri32_capacityPtri32, ptr @IntArray_length_, ptr @IntArray_capacity_, ptr @IntArray_buffer_, ptr @IntArray_append_xPtri32, ptr @IntArray_extend_aryIntArray, ptr @IntArray__index_xPtri32, ptr @IntArray_pop_, ptr @IntArray_copy_, ptr @IntIterable_each_fFunctionPtri32_to_Nothing, ptr @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntIterable_all_fFunctionPtri32_to_Ptri1, ptr @IntIterable_any_fFunctionPtri32_to_Ptri1, ptr @IntArray_map_fFunctionPtri32_to_Ptri32, ptr @IntIterable_filter_fFunctionPtri32_to_Ptri1, ptr @IntIterable_chain_otherIntIterable, ptr @IntIterable_interleave_otherIntIterable, ptr @IntIterable_zip_otherIntIterable, ptr @IntIterable_product_otherIntIterable, ptr @IntArray_iterator_, ptr @Representable_repr_, ptr @IntArray_B_each_fFunctionPtri32_to_Nothing, ptr @IntArray_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntArray_B_all_fFunctionPtri32_to_Ptri1, ptr @IntArray_B_any_fFunctionPtri32_to_Ptri1, ptr @IntArray_B_map_fFunctionPtri32_to_Ptri32, ptr @IntArray_B_filter_fFunctionPtri32_to_Ptri1, ptr @IntArray_B_chain_otherIntIterable, ptr @IntArray_B_interleave_otherIntIterable, ptr @IntArray_B_zip_otherIntIterable, ptr @IntArray_B_product_otherIntIterable, ptr @IntArray_B_iterator_, ptr @IntIterable_each_fFunctionPtri32_to_Nothing, ptr @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntIterable_all_fFunctionPtri32_to_Ptri1, ptr @IntIterable_any_fFunctionPtri32_to_Ptri1, ptr @IntArray_map_fFunctionPtri32_to_Ptri32, ptr @IntIterable_filter_fFunctionPtri32_to_Ptri1, ptr @IntIterable_chain_otherIntIterable, ptr @IntIterable_interleave_otherIntIterable, ptr @IntIterable_zip_otherIntIterable, ptr @IntIterable_product_otherIntIterable, ptr @IntArray_iterator_, ptr @IntArray_B_iterator_, ptr @IntArray_iterator_, ptr @IntArray_B_iterator_, ptr @IntArray_iterator_, ptr @IntArray_B_repr_, ptr @Representable_repr_] }
@IntArrayIterator_hashtbl = linkonce_odr constant [8 x ptr] [ptr null, ptr @IntIterator, ptr @any_typ, ptr null, ptr @IntArrayIterator, ptr @Iterator, ptr null, ptr @Object]
@IntArrayIterator_offset_tbl = linkonce_odr constant [8 x i32] [i32 0, i32 13, i32 7, i32 0, i32 7, i32 15, i32 0, i32 15]
@IntArrayIterator = constant { [3 x i64], [4 x ptr], [8 x ptr] } { [3 x i64] [i64 5577199879563532693, i64 4611686018427388093, i64 7], [4 x ptr] [ptr @subtype_test, ptr @IntArrayIterator_hashtbl, ptr @IntArrayIterator_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, i32 }, ptr null, i32 1)], [8 x ptr] [ptr @IntArrayIterator_field_array, ptr @IntArrayIterator_field_index, ptr @IntArrayIterator_B_init_arrayIntArray, ptr @IntArrayIterator_B_next_, ptr @IntArrayIterator_init_arrayIntArray, ptr @IntArrayIterator_next_, ptr @IntArrayIterator_B_next_, ptr @IntArrayIterator_next_] }
@OutOfBoundsDetails_field_bounds = internal constant { ptr, ptr } { ptr @OutOfBoundsDetails_getter_bounds, ptr @OutOfBoundsDetails_setter_bounds }
@OutOfBoundsDetails_field_index = internal constant { ptr, ptr } { ptr @OutOfBoundsDetails_getter_index, ptr @OutOfBoundsDetails_setter_index }
@OutOfBounds_field_details = internal constant { ptr, ptr } { ptr @OutOfBounds_getter_details, ptr @OutOfBounds_setter_details }
@OutOfBounds_field_line_number = internal constant { ptr, ptr } { ptr @OutOfBounds_getter_line_number, ptr @OutOfBounds_setter_line_number }
@OutOfBounds_field_file_name = internal constant { ptr, ptr } { ptr @OutOfBounds_getter_file_name, ptr @OutOfBounds_setter_file_name }
@OutOfBounds_field_message = internal constant { ptr, ptr } { ptr @OutOfBounds_getter_message, ptr @OutOfBounds_setter_message }
@IntArray_field_buffer = internal constant { ptr, ptr } { ptr @IntArray_getter_buffer, ptr @IntArray_setter_buffer }
@IntArray_field_length = internal constant { ptr, ptr } { ptr @IntArray_getter_length, ptr @IntArray_setter_length }
@IntArray_field_capacity = internal constant { ptr, ptr } { ptr @IntArray_getter_capacity, ptr @IntArray_setter_capacity }
@IntArrayIterator_field_array = internal constant { ptr, ptr } { ptr @IntArrayIterator_getter_array, ptr @IntArrayIterator_setter_array }
@IntArrayIterator_field_index = internal constant { ptr, ptr } { ptr @IntArrayIterator_getter_index, ptr @IntArrayIterator_setter_index }
@emnhy_ = internal constant [9 x i8] c"---------"
@oevbi_With_message = internal constant [12 x i8] c"With message"
@tscng_At_line = internal constant [7 x i8] c"At line"
@xhhhv_Exception_thrown_from_file = internal constant [26 x i8] c"Exception thrown from file"
@hwlms_ = internal constant [9 x i8] c"---------"
@rsruf_None = internal constant [6 x i8] c"<None>"
@_parameterization_Ptri8 = linkonce_odr constant [1 x ptr] [ptr @i8_typ]
@_parameterization_String = linkonce_odr constant [1 x ptr] [ptr @String]
@vlprw_Object = internal constant [6 x i8] c"Object"
@Object_hashtbl = linkonce_odr constant [2 x ptr] [ptr @Object, ptr @any_typ]
@Object_offset_tbl = linkonce_odr constant [2 x i32] [i32 7, i32 7]
@Iterator_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr null, ptr @any_typ, ptr @Iterator]
@Iterator_offset_tbl = linkonce_odr constant [4 x i32] [i32 7, i32 0, i32 7, i32 7]
@Iterable_hashtbl = linkonce_odr constant [4 x ptr] [ptr null, ptr @Iterable, ptr @any_typ, ptr @Object]
@Iterable_offset_tbl = linkonce_odr constant [4 x i32] [i32 0, i32 7, i32 7, i32 9]
@Representable_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Representable, ptr null, ptr @any_typ, ptr @Object]
@Representable_offset_tbl = linkonce_odr constant [4 x i32] [i32 7, i32 0, i32 7, i32 9]
@String_hashtbl = linkonce_odr constant [8 x ptr] [ptr @any_typ, ptr null, ptr @String, ptr @Representable, ptr @Object, ptr null, ptr null, ptr @Iterable]
@String_offset_tbl = linkonce_odr constant [8 x i32] [i32 7, i32 0, i32 7, i32 40, i32 40, i32 0, i32 0, i32 38]
@Character_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr null, ptr @any_typ, ptr @Character]
@Character_offset_tbl = linkonce_odr constant [4 x i32] [i32 12, i32 0, i32 7, i32 7]
@StringIterator_hashtbl = linkonce_odr constant [4 x ptr] [ptr @StringIterator, ptr @Object, ptr @any_typ, ptr @Iterator]
@StringIterator_offset_tbl = linkonce_odr constant [4 x i32] [i32 7, i32 13, i32 7, i32 13]
@Exception_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr null, ptr @any_typ, ptr @Exception]
@Exception_offset_tbl = linkonce_odr constant [4 x i32] [i32 20, i32 0, i32 7, i32 7]
@String_field_bytes = internal constant { ptr, ptr } { ptr @String_getter_bytes, ptr @String_setter_bytes }
@String_field_length = internal constant { ptr, ptr } { ptr @String_getter_length, ptr @String_setter_length }
@String_field_capacity = internal constant { ptr, ptr } { ptr @String_getter_capacity, ptr @String_setter_capacity }
@Character_field_byte = internal constant { ptr, ptr } { ptr @Character_getter_byte, ptr @Character_setter_byte }
@StringIterator_field_str = internal constant { ptr, ptr } { ptr @StringIterator_getter_str, ptr @StringIterator_setter_str }
@StringIterator_field_index = internal constant { ptr, ptr } { ptr @StringIterator_getter_index, ptr @StringIterator_setter_index }
@Exception_field_line_number = internal constant { ptr, ptr } { ptr @Exception_getter_line_number, ptr @Exception_setter_line_number }
@Exception_field_file_name = internal constant { ptr, ptr } { ptr @Exception_getter_file_name, ptr @Exception_setter_file_name }
@Exception_field_message = internal constant { ptr, ptr } { ptr @Exception_getter_message, ptr @Exception_setter_message }
@Math_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr null, ptr @any_typ, ptr @Math]
@Math_offset_tbl = linkonce_odr constant [4 x i32] [i32 24, i32 0, i32 7, i32 7]
@Math = constant { [3 x i64], [4 x ptr], [17 x ptr] } { [3 x i64] [i64 8094150130346788308, i64 4611686018427388091, i64 3], [4 x ptr] [ptr @subtype_test, ptr @Math_hashtbl, ptr @Math_offset_tbl, ptr getelementptr ({}, ptr null, i32 1)], [17 x ptr] [ptr @Math_B__Self_sqrt_xPtrf64, ptr @Math_B__Self_abs_xPtrf64__Self_abs_xPtri32, ptr @Math_B__Self_max_aPtri32_bPtri32__Self_max_aPtrf64_bPtrf64, ptr @Math_B__Self_min_aPtrf64_bPtrf64__Self_min_aPtri32_bPtri32, ptr @Math_B__Self_round_xPtrf64, ptr @Math_B__Self_floor_xPtrf64, ptr @Math_B__Self_ceiling_xPtrf64, ptr @Math__Self_sqrt_xPtrf64, ptr @Math__Self_abs_xPtrf64, ptr @Math__Self_abs_xPtri32, ptr @Math__Self_max_aPtri32_bPtri32, ptr @Math__Self_max_aPtrf64_bPtrf64, ptr @Math__Self_min_aPtrf64_bPtrf64, ptr @Math__Self_min_aPtri32_bPtri32, ptr @Math__Self_round_xPtrf64, ptr @Math__Self_floor_xPtrf64, ptr @Math__Self_ceiling_xPtrf64] }
@_parameterization_Ptri1 = linkonce_odr constant [1 x ptr] [ptr @bool_typ]
@_parameterization_IntIterator = linkonce_odr constant [1 x ptr] [ptr @IntIterator]
@_parameterization_FunctionPtri32_to_Ptri1 = linkonce_odr constant [3 x ptr] [ptr @function_typ, ptr @_parameterization_Ptri1, ptr @_parameterization_Ptri32]
@_parameterization_FunctionPtri32_to_Ptri32 = linkonce_odr constant [3 x ptr] [ptr @function_typ, ptr @_parameterization_Ptri32, ptr @_parameterization_Ptri32]
@_parameterization_IntIterable = linkonce_odr constant [1 x ptr] [ptr @IntIterable]
@IntIterator_hashtbl = linkonce_odr constant [4 x ptr] [ptr @any_typ, ptr @Iterator, ptr @IntIterator, ptr @Object]
@IntIterator_offset_tbl = linkonce_odr constant [4 x i32] [i32 7, i32 9, i32 7, i32 9]
@IntIterator = constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 -933084275656658555, i64 4611686018427388247, i64 3], [4 x ptr] [ptr @subtype_test, ptr @IntIterator_hashtbl, ptr @IntIterator_offset_tbl, ptr getelementptr ({}, ptr null, i32 1)], [0 x ptr] undef }
@IntIterable_hashtbl = linkonce_odr constant [4 x ptr] [ptr @any_typ, ptr @Iterable, ptr @IntIterable, ptr @Object]
@IntIterable_offset_tbl = linkonce_odr constant [4 x i32] [i32 7, i32 29, i32 7, i32 31]
@IntIterable = constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 -7984962120415158575, i64 4611686018427388247, i64 3], [4 x ptr] [ptr @subtype_test, ptr @IntIterable_hashtbl, ptr @IntIterable_offset_tbl, ptr getelementptr ({}, ptr null, i32 1)], [0 x ptr] undef }
@MapIterable_hashtbl = linkonce_odr constant [8 x ptr] [ptr @IntIterable, ptr @MapIterable, ptr @Object, ptr null, ptr @any_typ, ptr null, ptr null, ptr @Iterable]
@MapIterable_offset_tbl = linkonce_odr constant [8 x i32] [i32 33, i32 7, i32 59, i32 0, i32 7, i32 0, i32 0, i32 57]
@MapIterable = constant { [3 x i64], [4 x ptr], [52 x ptr] } { [3 x i64] [i64 -7488770571603291722, i64 4611686018427388291, i64 7], [4 x ptr] [ptr @subtype_test, ptr @MapIterable_hashtbl, ptr @MapIterable_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr } }, ptr null, i32 1)], [52 x ptr] [ptr @MapIterable_field_iterable, ptr @MapIterable_field_f, ptr @MapIterable_B_init_iterableIntIterable_fFunctionPtri32_to_Ptri32, ptr @MapIterable_B_each_fFunctionPtri32_to_Nothing, ptr @MapIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @MapIterable_B_all_fFunctionPtri32_to_Ptri1, ptr @MapIterable_B_any_fFunctionPtri32_to_Ptri1, ptr @MapIterable_B_map_fFunctionPtri32_to_Ptri32, ptr @MapIterable_B_filter_fFunctionPtri32_to_Ptri1, ptr @MapIterable_B_chain_otherIntIterable, ptr @MapIterable_B_interleave_otherIntIterable, ptr @MapIterable_B_zip_otherIntIterable, ptr @MapIterable_B_product_otherIntIterable, ptr @MapIterable_B_iterator_, ptr @MapIterable_init_iterableIntIterable_fFunctionPtri32_to_Ptri32, ptr @IntIterable_each_fFunctionPtri32_to_Nothing, ptr @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntIterable_all_fFunctionPtri32_to_Ptri1, ptr @IntIterable_any_fFunctionPtri32_to_Ptri1, ptr @IntIterable_map_fFunctionPtri32_to_Ptri32, ptr @IntIterable_filter_fFunctionPtri32_to_Ptri1, ptr @IntIterable_chain_otherIntIterable, ptr @IntIterable_interleave_otherIntIterable, ptr @IntIterable_zip_otherIntIterable, ptr @IntIterable_product_otherIntIterable, ptr @MapIterable_iterator_, ptr @MapIterable_B_each_fFunctionPtri32_to_Nothing, ptr @MapIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @MapIterable_B_all_fFunctionPtri32_to_Ptri1, ptr @MapIterable_B_any_fFunctionPtri32_to_Ptri1, ptr @MapIterable_B_map_fFunctionPtri32_to_Ptri32, ptr @MapIterable_B_filter_fFunctionPtri32_to_Ptri1, ptr @MapIterable_B_chain_otherIntIterable, ptr @MapIterable_B_interleave_otherIntIterable, ptr @MapIterable_B_zip_otherIntIterable, ptr @MapIterable_B_product_otherIntIterable, ptr @MapIterable_B_iterator_, ptr @IntIterable_each_fFunctionPtri32_to_Nothing, ptr @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntIterable_all_fFunctionPtri32_to_Ptri1, ptr @IntIterable_any_fFunctionPtri32_to_Ptri1, ptr @IntIterable_map_fFunctionPtri32_to_Ptri32, ptr @IntIterable_filter_fFunctionPtri32_to_Ptri1, ptr @IntIterable_chain_otherIntIterable, ptr @IntIterable_interleave_otherIntIterable, ptr @IntIterable_zip_otherIntIterable, ptr @IntIterable_product_otherIntIterable, ptr @MapIterable_iterator_, ptr @MapIterable_B_iterator_, ptr @MapIterable_iterator_, ptr @MapIterable_B_iterator_, ptr @MapIterable_iterator_] }
@MapIterator_hashtbl = linkonce_odr constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr @MapIterator, ptr @IntIterator, ptr null, ptr @Iterator, ptr null, ptr null]
@MapIterator_offset_tbl = linkonce_odr constant [8 x i32] [i32 15, i32 7, i32 7, i32 13, i32 0, i32 15, i32 0, i32 0]
@MapIterator = constant { [3 x i64], [4 x ptr], [8 x ptr] } { [3 x i64] [i64 -146553482626734782, i64 4611686018427388081, i64 7], [4 x ptr] [ptr @subtype_test, ptr @MapIterator_hashtbl, ptr @MapIterator_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr } }, ptr null, i32 1)], [8 x ptr] [ptr @MapIterator_field_iterator, ptr @MapIterator_field_f, ptr @MapIterator_B_init_iteratorIntIterator_fFunctionPtri32_to_Ptri32, ptr @MapIterator_B_next_, ptr @MapIterator_init_iteratorIntIterator_fFunctionPtri32_to_Ptri32, ptr @MapIterator_next_, ptr @MapIterator_B_next_, ptr @MapIterator_next_] }
@FilterIterable_hashtbl = linkonce_odr constant [8 x ptr] [ptr @IntIterable, ptr null, ptr @Object, ptr @FilterIterable, ptr @any_typ, ptr null, ptr null, ptr @Iterable]
@FilterIterable_offset_tbl = linkonce_odr constant [8 x i32] [i32 33, i32 0, i32 59, i32 7, i32 7, i32 0, i32 0, i32 57]
@FilterIterable = constant { [3 x i64], [4 x ptr], [52 x ptr] } { [3 x i64] [i64 8498466713076104350, i64 4611686018427388291, i64 7], [4 x ptr] [ptr @subtype_test, ptr @FilterIterable_hashtbl, ptr @FilterIterable_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr } }, ptr null, i32 1)], [52 x ptr] [ptr @FilterIterable_field_iterable, ptr @FilterIterable_field_f, ptr @FilterIterable_B_init_iterableIntIterable_fFunctionPtri32_to_Ptri1, ptr @FilterIterable_B_each_fFunctionPtri32_to_Nothing, ptr @FilterIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @FilterIterable_B_all_fFunctionPtri32_to_Ptri1, ptr @FilterIterable_B_any_fFunctionPtri32_to_Ptri1, ptr @FilterIterable_B_map_fFunctionPtri32_to_Ptri32, ptr @FilterIterable_B_filter_fFunctionPtri32_to_Ptri1, ptr @FilterIterable_B_chain_otherIntIterable, ptr @FilterIterable_B_interleave_otherIntIterable, ptr @FilterIterable_B_zip_otherIntIterable, ptr @FilterIterable_B_product_otherIntIterable, ptr @FilterIterable_B_iterator_, ptr @FilterIterable_init_iterableIntIterable_fFunctionPtri32_to_Ptri1, ptr @IntIterable_each_fFunctionPtri32_to_Nothing, ptr @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntIterable_all_fFunctionPtri32_to_Ptri1, ptr @IntIterable_any_fFunctionPtri32_to_Ptri1, ptr @IntIterable_map_fFunctionPtri32_to_Ptri32, ptr @IntIterable_filter_fFunctionPtri32_to_Ptri1, ptr @IntIterable_chain_otherIntIterable, ptr @IntIterable_interleave_otherIntIterable, ptr @IntIterable_zip_otherIntIterable, ptr @IntIterable_product_otherIntIterable, ptr @FilterIterable_iterator_, ptr @FilterIterable_B_each_fFunctionPtri32_to_Nothing, ptr @FilterIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @FilterIterable_B_all_fFunctionPtri32_to_Ptri1, ptr @FilterIterable_B_any_fFunctionPtri32_to_Ptri1, ptr @FilterIterable_B_map_fFunctionPtri32_to_Ptri32, ptr @FilterIterable_B_filter_fFunctionPtri32_to_Ptri1, ptr @FilterIterable_B_chain_otherIntIterable, ptr @FilterIterable_B_interleave_otherIntIterable, ptr @FilterIterable_B_zip_otherIntIterable, ptr @FilterIterable_B_product_otherIntIterable, ptr @FilterIterable_B_iterator_, ptr @IntIterable_each_fFunctionPtri32_to_Nothing, ptr @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntIterable_all_fFunctionPtri32_to_Ptri1, ptr @IntIterable_any_fFunctionPtri32_to_Ptri1, ptr @IntIterable_map_fFunctionPtri32_to_Ptri32, ptr @IntIterable_filter_fFunctionPtri32_to_Ptri1, ptr @IntIterable_chain_otherIntIterable, ptr @IntIterable_interleave_otherIntIterable, ptr @IntIterable_zip_otherIntIterable, ptr @IntIterable_product_otherIntIterable, ptr @FilterIterable_iterator_, ptr @FilterIterable_B_iterator_, ptr @FilterIterable_iterator_, ptr @FilterIterable_B_iterator_, ptr @FilterIterable_iterator_] }
@FilterIterator_hashtbl = linkonce_odr constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @IntIterator, ptr null, ptr @Iterator, ptr @FilterIterator, ptr null]
@FilterIterator_offset_tbl = linkonce_odr constant [8 x i32] [i32 15, i32 7, i32 0, i32 13, i32 0, i32 15, i32 7, i32 0]
@FilterIterator = constant { [3 x i64], [4 x ptr], [8 x ptr] } { [3 x i64] [i64 -1221365496900303883, i64 4611686018427388081, i64 7], [4 x ptr] [ptr @subtype_test, ptr @FilterIterator_hashtbl, ptr @FilterIterator_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr } }, ptr null, i32 1)], [8 x ptr] [ptr @FilterIterator_field_iterator, ptr @FilterIterator_field_f, ptr @FilterIterator_B_init_iteratorIntIterator_fFunctionPtri32_to_Ptri1, ptr @FilterIterator_B_next_, ptr @FilterIterator_init_iteratorIntIterator_fFunctionPtri32_to_Ptri1, ptr @FilterIterator_next_, ptr @FilterIterator_B_next_, ptr @FilterIterator_next_] }
@ChainIterable_hashtbl = linkonce_odr constant [8 x ptr] [ptr @any_typ, ptr @Iterable, ptr @IntIterable, ptr @ChainIterable, ptr null, ptr null, ptr null, ptr @Object]
@ChainIterable_offset_tbl = linkonce_odr constant [8 x i32] [i32 7, i32 57, i32 33, i32 7, i32 0, i32 0, i32 0, i32 59]
@ChainIterable = constant { [3 x i64], [4 x ptr], [52 x ptr] } { [3 x i64] [i64 -2370247058431047815, i64 4611686018427388247, i64 7], [4 x ptr] [ptr @subtype_test, ptr @ChainIterable_hashtbl, ptr @ChainIterable_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr null, i32 1)], [52 x ptr] [ptr @ChainIterable_field_first, ptr @ChainIterable_field_second, ptr @ChainIterable_B_init_firstIntIterable_secondIntIterable, ptr @ChainIterable_B_each_fFunctionPtri32_to_Nothing, ptr @ChainIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @ChainIterable_B_all_fFunctionPtri32_to_Ptri1, ptr @ChainIterable_B_any_fFunctionPtri32_to_Ptri1, ptr @ChainIterable_B_map_fFunctionPtri32_to_Ptri32, ptr @ChainIterable_B_filter_fFunctionPtri32_to_Ptri1, ptr @ChainIterable_B_chain_otherIntIterable, ptr @ChainIterable_B_interleave_otherIntIterable, ptr @ChainIterable_B_zip_otherIntIterable, ptr @ChainIterable_B_product_otherIntIterable, ptr @ChainIterable_B_iterator_, ptr @ChainIterable_init_firstIntIterable_secondIntIterable, ptr @IntIterable_each_fFunctionPtri32_to_Nothing, ptr @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntIterable_all_fFunctionPtri32_to_Ptri1, ptr @IntIterable_any_fFunctionPtri32_to_Ptri1, ptr @IntIterable_map_fFunctionPtri32_to_Ptri32, ptr @IntIterable_filter_fFunctionPtri32_to_Ptri1, ptr @IntIterable_chain_otherIntIterable, ptr @IntIterable_interleave_otherIntIterable, ptr @IntIterable_zip_otherIntIterable, ptr @IntIterable_product_otherIntIterable, ptr @ChainIterable_iterator_, ptr @ChainIterable_B_each_fFunctionPtri32_to_Nothing, ptr @ChainIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @ChainIterable_B_all_fFunctionPtri32_to_Ptri1, ptr @ChainIterable_B_any_fFunctionPtri32_to_Ptri1, ptr @ChainIterable_B_map_fFunctionPtri32_to_Ptri32, ptr @ChainIterable_B_filter_fFunctionPtri32_to_Ptri1, ptr @ChainIterable_B_chain_otherIntIterable, ptr @ChainIterable_B_interleave_otherIntIterable, ptr @ChainIterable_B_zip_otherIntIterable, ptr @ChainIterable_B_product_otherIntIterable, ptr @ChainIterable_B_iterator_, ptr @IntIterable_each_fFunctionPtri32_to_Nothing, ptr @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntIterable_all_fFunctionPtri32_to_Ptri1, ptr @IntIterable_any_fFunctionPtri32_to_Ptri1, ptr @IntIterable_map_fFunctionPtri32_to_Ptri32, ptr @IntIterable_filter_fFunctionPtri32_to_Ptri1, ptr @IntIterable_chain_otherIntIterable, ptr @IntIterable_interleave_otherIntIterable, ptr @IntIterable_zip_otherIntIterable, ptr @IntIterable_product_otherIntIterable, ptr @ChainIterable_iterator_, ptr @ChainIterable_B_iterator_, ptr @ChainIterable_iterator_, ptr @ChainIterable_B_iterator_, ptr @ChainIterable_iterator_] }
@ChainIterator_hashtbl = linkonce_odr constant [8 x ptr] [ptr @any_typ, ptr @ChainIterator, ptr null, ptr @Iterator, ptr @Object, ptr null, ptr null, ptr @IntIterator]
@ChainIterator_offset_tbl = linkonce_odr constant [8 x i32] [i32 7, i32 7, i32 0, i32 16, i32 16, i32 0, i32 0, i32 14]
@ChainIterator = constant { [3 x i64], [4 x ptr], [9 x ptr] } { [3 x i64] [i64 6043157723929225452, i64 4611686018427388073, i64 7], [4 x ptr] [ptr @subtype_test, ptr @ChainIterator_hashtbl, ptr @ChainIterator_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, i1 }, ptr null, i32 1)], [9 x ptr] [ptr @ChainIterator_field_first, ptr @ChainIterator_field_second, ptr @ChainIterator_field_on_first, ptr @ChainIterator_B_init_firstIntIterator_secondIntIterator, ptr @ChainIterator_B_next_, ptr @ChainIterator_init_firstIntIterator_secondIntIterator, ptr @ChainIterator_next_, ptr @ChainIterator_B_next_, ptr @ChainIterator_next_] }
@InterleaveIterable_hashtbl = linkonce_odr constant [8 x ptr] [ptr @IntIterable, ptr @InterleaveIterable, ptr @Object, ptr null, ptr @any_typ, ptr null, ptr null, ptr @Iterable]
@InterleaveIterable_offset_tbl = linkonce_odr constant [8 x i32] [i32 33, i32 7, i32 59, i32 0, i32 7, i32 0, i32 0, i32 57]
@InterleaveIterable = constant { [3 x i64], [4 x ptr], [52 x ptr] } { [3 x i64] [i64 4936782714255954462, i64 4611686018427388291, i64 7], [4 x ptr] [ptr @subtype_test, ptr @InterleaveIterable_hashtbl, ptr @InterleaveIterable_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr null, i32 1)], [52 x ptr] [ptr @InterleaveIterable_field_first, ptr @InterleaveIterable_field_second, ptr @InterleaveIterable_B_init_firstIntIterable_secondIntIterable, ptr @InterleaveIterable_B_each_fFunctionPtri32_to_Nothing, ptr @InterleaveIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @InterleaveIterable_B_all_fFunctionPtri32_to_Ptri1, ptr @InterleaveIterable_B_any_fFunctionPtri32_to_Ptri1, ptr @InterleaveIterable_B_map_fFunctionPtri32_to_Ptri32, ptr @InterleaveIterable_B_filter_fFunctionPtri32_to_Ptri1, ptr @InterleaveIterable_B_chain_otherIntIterable, ptr @InterleaveIterable_B_interleave_otherIntIterable, ptr @InterleaveIterable_B_zip_otherIntIterable, ptr @InterleaveIterable_B_product_otherIntIterable, ptr @InterleaveIterable_B_iterator_, ptr @InterleaveIterable_init_firstIntIterable_secondIntIterable, ptr @IntIterable_each_fFunctionPtri32_to_Nothing, ptr @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntIterable_all_fFunctionPtri32_to_Ptri1, ptr @IntIterable_any_fFunctionPtri32_to_Ptri1, ptr @IntIterable_map_fFunctionPtri32_to_Ptri32, ptr @IntIterable_filter_fFunctionPtri32_to_Ptri1, ptr @IntIterable_chain_otherIntIterable, ptr @IntIterable_interleave_otherIntIterable, ptr @IntIterable_zip_otherIntIterable, ptr @IntIterable_product_otherIntIterable, ptr @InterleaveIterable_iterator_, ptr @InterleaveIterable_B_each_fFunctionPtri32_to_Nothing, ptr @InterleaveIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @InterleaveIterable_B_all_fFunctionPtri32_to_Ptri1, ptr @InterleaveIterable_B_any_fFunctionPtri32_to_Ptri1, ptr @InterleaveIterable_B_map_fFunctionPtri32_to_Ptri32, ptr @InterleaveIterable_B_filter_fFunctionPtri32_to_Ptri1, ptr @InterleaveIterable_B_chain_otherIntIterable, ptr @InterleaveIterable_B_interleave_otherIntIterable, ptr @InterleaveIterable_B_zip_otherIntIterable, ptr @InterleaveIterable_B_product_otherIntIterable, ptr @InterleaveIterable_B_iterator_, ptr @IntIterable_each_fFunctionPtri32_to_Nothing, ptr @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntIterable_all_fFunctionPtri32_to_Ptri1, ptr @IntIterable_any_fFunctionPtri32_to_Ptri1, ptr @IntIterable_map_fFunctionPtri32_to_Ptri32, ptr @IntIterable_filter_fFunctionPtri32_to_Ptri1, ptr @IntIterable_chain_otherIntIterable, ptr @IntIterable_interleave_otherIntIterable, ptr @IntIterable_zip_otherIntIterable, ptr @IntIterable_product_otherIntIterable, ptr @InterleaveIterable_iterator_, ptr @InterleaveIterable_B_iterator_, ptr @InterleaveIterable_iterator_, ptr @InterleaveIterable_B_iterator_, ptr @InterleaveIterable_iterator_] }
@InterleaveIterator_hashtbl = linkonce_odr constant [8 x ptr] [ptr @any_typ, ptr null, ptr null, ptr @Iterator, ptr @Object, ptr null, ptr @InterleaveIterator, ptr @IntIterator]
@InterleaveIterator_offset_tbl = linkonce_odr constant [8 x i32] [i32 7, i32 0, i32 0, i32 16, i32 16, i32 0, i32 7, i32 14]
@InterleaveIterator = constant { [3 x i64], [4 x ptr], [9 x ptr] } { [3 x i64] [i64 -3924664358248524505, i64 4611686018427388073, i64 7], [4 x ptr] [ptr @subtype_test, ptr @InterleaveIterator_hashtbl, ptr @InterleaveIterator_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, i1 }, ptr null, i32 1)], [9 x ptr] [ptr @InterleaveIterator_field_first, ptr @InterleaveIterator_field_second, ptr @InterleaveIterator_field_on_first, ptr @InterleaveIterator_B_init_firstIntIterator_secondIntIterator, ptr @InterleaveIterator_B_next_, ptr @InterleaveIterator_init_firstIntIterator_secondIntIterator, ptr @InterleaveIterator_next_, ptr @InterleaveIterator_B_next_, ptr @InterleaveIterator_next_] }
@IntTupleIterable_hashtbl = linkonce_odr constant [4 x ptr] [ptr @any_typ, ptr @Iterable, ptr @IntTupleIterable, ptr @Object]
@IntTupleIterable_offset_tbl = linkonce_odr constant [4 x i32] [i32 7, i32 9, i32 7, i32 11]
@IntTupleIterable = constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 1135628454346210518, i64 4611686018427388247, i64 3], [4 x ptr] [ptr @subtype_test, ptr @IntTupleIterable_hashtbl, ptr @IntTupleIterable_offset_tbl, ptr getelementptr ({}, ptr null, i32 1)], [0 x ptr] undef }
@IntTupleIterator_hashtbl = linkonce_odr constant [4 x ptr] [ptr @any_typ, ptr @Object, ptr @Iterator, ptr @IntTupleIterator]
@IntTupleIterator_offset_tbl = linkonce_odr constant [4 x i32] [i32 7, i32 9, i32 9, i32 7]
@IntTupleIterator = constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 8926924731480624460, i64 4611686018427388157, i64 3], [4 x ptr] [ptr @subtype_test, ptr @IntTupleIterator_hashtbl, ptr @IntTupleIterator_offset_tbl, ptr getelementptr ({}, ptr null, i32 1)], [0 x ptr] undef }
@ZipIterable_hashtbl = linkonce_odr constant [8 x ptr] [ptr @any_typ, ptr null, ptr @IntTupleIterable, ptr null, ptr @Object, ptr @ZipIterable, ptr null, ptr @Iterable]
@ZipIterable_offset_tbl = linkonce_odr constant [8 x i32] [i32 7, i32 0, i32 13, i32 0, i32 19, i32 7, i32 0, i32 17]
@ZipIterable = constant { [3 x i64], [4 x ptr], [12 x ptr] } { [3 x i64] [i64 35232740166152944, i64 4611686018427388073, i64 7], [4 x ptr] [ptr @subtype_test, ptr @ZipIterable_hashtbl, ptr @ZipIterable_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr null, i32 1)], [12 x ptr] [ptr @ZipIterable_field_first, ptr @ZipIterable_field_second, ptr @ZipIterable_B_init_firstIntIterable_secondIntIterable, ptr @ZipIterable_B_iterator_, ptr @ZipIterable_init_firstIntIterable_secondIntIterable, ptr @ZipIterable_iterator_, ptr @ZipIterable_B_iterator_, ptr @ZipIterable_iterator_, ptr @ZipIterable_B_iterator_, ptr @ZipIterable_iterator_, ptr @ZipIterable_B_iterator_, ptr @ZipIterable_iterator_] }
@ZipIterator_hashtbl = linkonce_odr constant [8 x ptr] [ptr @IntTupleIterator, ptr null, ptr null, ptr @Iterator, ptr @Object, ptr null, ptr @any_typ, ptr @ZipIterator]
@ZipIterator_offset_tbl = linkonce_odr constant [8 x i32] [i32 13, i32 0, i32 0, i32 15, i32 15, i32 0, i32 7, i32 7]
@ZipIterator = constant { [3 x i64], [4 x ptr], [8 x ptr] } { [3 x i64] [i64 -2141114445739585318, i64 4611686018427388091, i64 7], [4 x ptr] [ptr @subtype_test, ptr @ZipIterator_hashtbl, ptr @ZipIterator_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr null, i32 1)], [8 x ptr] [ptr @ZipIterator_field_first, ptr @ZipIterator_field_second, ptr @ZipIterator_B_init_firstIntIterator_secondIntIterator, ptr @ZipIterator_B_next_, ptr @ZipIterator_init_firstIntIterator_secondIntIterator, ptr @ZipIterator_next_, ptr @ZipIterator_B_next_, ptr @ZipIterator_next_] }
@ProductIterable_hashtbl = linkonce_odr constant [8 x ptr] [ptr @any_typ, ptr @ProductIterable, ptr @IntTupleIterable, ptr null, ptr @Object, ptr null, ptr null, ptr @Iterable]
@ProductIterable_offset_tbl = linkonce_odr constant [8 x i32] [i32 7, i32 7, i32 13, i32 0, i32 19, i32 0, i32 0, i32 17]
@ProductIterable = constant { [3 x i64], [4 x ptr], [12 x ptr] } { [3 x i64] [i64 4128338911757318636, i64 4611686018427388073, i64 7], [4 x ptr] [ptr @subtype_test, ptr @ProductIterable_hashtbl, ptr @ProductIterable_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr null, i32 1)], [12 x ptr] [ptr @ProductIterable_field_first, ptr @ProductIterable_field_second, ptr @ProductIterable_B_init_firstIntIterable_secondIntIterable, ptr @ProductIterable_B_iterator_, ptr @ProductIterable_init_firstIntIterable_secondIntIterable, ptr @ProductIterable_iterator_, ptr @ProductIterable_B_iterator_, ptr @ProductIterable_iterator_, ptr @ProductIterable_B_iterator_, ptr @ProductIterable_iterator_, ptr @ProductIterable_B_iterator_, ptr @ProductIterable_iterator_] }
@ProductIterator_hashtbl = linkonce_odr constant [4 x ptr] [ptr @any_typ, ptr @Object, ptr @Iterator, ptr @ProductIterator]
@ProductIterator_offset_tbl = linkonce_odr constant [4 x i32] [i32 7, i32 15, i32 15, i32 7]
@ProductIterator = constant { [3 x i64], [4 x ptr], [8 x ptr] } { [3 x i64] [i64 1697250377212095568, i64 4611686018427388157, i64 3], [4 x ptr] [ptr @subtype_test, ptr @ProductIterator_hashtbl, ptr @ProductIterator_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, i32 } }, ptr null, i32 1)], [8 x ptr] [ptr @ProductIterator_field_first_iterator, ptr @ProductIterator_field_second_iterator, ptr @ProductIterator_field_second_iterable, ptr @ProductIterator_field_current_first, ptr @ProductIterator_B_init_first_iterableIntIterable_second_iterableIntIterable, ptr @ProductIterator_B_next_, ptr @ProductIterator_init_first_iterableIntIterable_second_iterableIntIterable, ptr @ProductIterator_next_] }
@Range_hashtbl = linkonce_odr constant [8 x ptr] [ptr @IntIterable, ptr @Range, ptr @Object, ptr null, ptr @any_typ, ptr null, ptr null, ptr @Iterable]
@Range_offset_tbl = linkonce_odr constant [8 x i32] [i32 38, i32 7, i32 64, i32 0, i32 7, i32 0, i32 0, i32 62]
@Range = constant { [3 x i64], [4 x ptr], [57 x ptr] } { [3 x i64] [i64 5490049236840671069, i64 4611686018427388291, i64 7], [4 x ptr] [ptr @subtype_test, ptr @Range_hashtbl, ptr @Range_offset_tbl, ptr getelementptr ({ i32, i32, i32 }, ptr null, i32 1)], [57 x ptr] [ptr @Range_field_start, ptr @Range_field_end, ptr @Range_field_step, ptr @Range_B_init_endPtri32, ptr @Range_B_init_startPtri32_endPtri32, ptr @Range_B_step_stepPtri32, ptr @Range_B_each_fFunctionPtri32_to_Nothing, ptr @Range_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @Range_B_all_fFunctionPtri32_to_Ptri1, ptr @Range_B_any_fFunctionPtri32_to_Ptri1, ptr @Range_B_map_fFunctionPtri32_to_Ptri32, ptr @Range_B_filter_fFunctionPtri32_to_Ptri1, ptr @Range_B_chain_otherIntIterable, ptr @Range_B_interleave_otherIntIterable, ptr @Range_B_zip_otherIntIterable, ptr @Range_B_product_otherIntIterable, ptr @Range_B_iterator_, ptr @Range_init_endPtri32, ptr @Range_init_startPtri32_endPtri32, ptr @Range_step_stepPtri32, ptr @IntIterable_each_fFunctionPtri32_to_Nothing, ptr @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntIterable_all_fFunctionPtri32_to_Ptri1, ptr @IntIterable_any_fFunctionPtri32_to_Ptri1, ptr @IntIterable_map_fFunctionPtri32_to_Ptri32, ptr @IntIterable_filter_fFunctionPtri32_to_Ptri1, ptr @IntIterable_chain_otherIntIterable, ptr @IntIterable_interleave_otherIntIterable, ptr @IntIterable_zip_otherIntIterable, ptr @IntIterable_product_otherIntIterable, ptr @Range_iterator_, ptr @Range_B_each_fFunctionPtri32_to_Nothing, ptr @Range_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @Range_B_all_fFunctionPtri32_to_Ptri1, ptr @Range_B_any_fFunctionPtri32_to_Ptri1, ptr @Range_B_map_fFunctionPtri32_to_Ptri32, ptr @Range_B_filter_fFunctionPtri32_to_Ptri1, ptr @Range_B_chain_otherIntIterable, ptr @Range_B_interleave_otherIntIterable, ptr @Range_B_zip_otherIntIterable, ptr @Range_B_product_otherIntIterable, ptr @Range_B_iterator_, ptr @IntIterable_each_fFunctionPtri32_to_Nothing, ptr @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, ptr @IntIterable_all_fFunctionPtri32_to_Ptri1, ptr @IntIterable_any_fFunctionPtri32_to_Ptri1, ptr @IntIterable_map_fFunctionPtri32_to_Ptri32, ptr @IntIterable_filter_fFunctionPtri32_to_Ptri1, ptr @IntIterable_chain_otherIntIterable, ptr @IntIterable_interleave_otherIntIterable, ptr @IntIterable_zip_otherIntIterable, ptr @IntIterable_product_otherIntIterable, ptr @Range_iterator_, ptr @Range_B_iterator_, ptr @Range_iterator_, ptr @Range_B_iterator_, ptr @Range_iterator_] }
@RangeIterator_hashtbl = linkonce_odr constant [8 x ptr] [ptr @RangeIterator, ptr @IntIterator, ptr @any_typ, ptr null, ptr null, ptr @Iterator, ptr null, ptr @Object]
@RangeIterator_offset_tbl = linkonce_odr constant [8 x i32] [i32 7, i32 14, i32 7, i32 0, i32 0, i32 16, i32 0, i32 16]
@RangeIterator = constant { [3 x i64], [4 x ptr], [9 x ptr] } { [3 x i64] [i64 -913562485944406675, i64 4611686018427388093, i64 7], [4 x ptr] [ptr @subtype_test, ptr @RangeIterator_hashtbl, ptr @RangeIterator_offset_tbl, ptr getelementptr ({ i32, i32, i32 }, ptr null, i32 1)], [9 x ptr] [ptr @RangeIterator_field_counter, ptr @RangeIterator_field_end, ptr @RangeIterator_field_step, ptr @RangeIterator_B_init_counterPtri32_endPtri32_stepPtri32, ptr @RangeIterator_B_next_, ptr @RangeIterator_init_counterPtri32_endPtri32_stepPtri32, ptr @RangeIterator_next_, ptr @RangeIterator_B_next_, ptr @RangeIterator_next_] }
@MapIterable_field_iterable = internal constant { ptr, ptr } { ptr @MapIterable_getter_iterable, ptr @MapIterable_setter_iterable }
@MapIterable_field_f = internal constant { ptr, ptr } { ptr @MapIterable_getter_f, ptr @MapIterable_setter_f }
@MapIterator_field_iterator = internal constant { ptr, ptr } { ptr @MapIterator_getter_iterator, ptr @MapIterator_setter_iterator }
@MapIterator_field_f = internal constant { ptr, ptr } { ptr @MapIterator_getter_f, ptr @MapIterator_setter_f }
@FilterIterable_field_iterable = internal constant { ptr, ptr } { ptr @FilterIterable_getter_iterable, ptr @FilterIterable_setter_iterable }
@FilterIterable_field_f = internal constant { ptr, ptr } { ptr @FilterIterable_getter_f, ptr @FilterIterable_setter_f }
@FilterIterator_field_iterator = internal constant { ptr, ptr } { ptr @FilterIterator_getter_iterator, ptr @FilterIterator_setter_iterator }
@FilterIterator_field_f = internal constant { ptr, ptr } { ptr @FilterIterator_getter_f, ptr @FilterIterator_setter_f }
@ChainIterable_field_first = internal constant { ptr, ptr } { ptr @ChainIterable_getter_first, ptr @ChainIterable_setter_first }
@ChainIterable_field_second = internal constant { ptr, ptr } { ptr @ChainIterable_getter_second, ptr @ChainIterable_setter_second }
@ChainIterator_field_first = internal constant { ptr, ptr } { ptr @ChainIterator_getter_first, ptr @ChainIterator_setter_first }
@ChainIterator_field_second = internal constant { ptr, ptr } { ptr @ChainIterator_getter_second, ptr @ChainIterator_setter_second }
@ChainIterator_field_on_first = internal constant { ptr, ptr } { ptr @ChainIterator_getter_on_first, ptr @ChainIterator_setter_on_first }
@InterleaveIterable_field_first = internal constant { ptr, ptr } { ptr @InterleaveIterable_getter_first, ptr @InterleaveIterable_setter_first }
@InterleaveIterable_field_second = internal constant { ptr, ptr } { ptr @InterleaveIterable_getter_second, ptr @InterleaveIterable_setter_second }
@InterleaveIterator_field_first = internal constant { ptr, ptr } { ptr @InterleaveIterator_getter_first, ptr @InterleaveIterator_setter_first }
@InterleaveIterator_field_second = internal constant { ptr, ptr } { ptr @InterleaveIterator_getter_second, ptr @InterleaveIterator_setter_second }
@InterleaveIterator_field_on_first = internal constant { ptr, ptr } { ptr @InterleaveIterator_getter_on_first, ptr @InterleaveIterator_setter_on_first }
@ZipIterable_field_first = internal constant { ptr, ptr } { ptr @ZipIterable_getter_first, ptr @ZipIterable_setter_first }
@ZipIterable_field_second = internal constant { ptr, ptr } { ptr @ZipIterable_getter_second, ptr @ZipIterable_setter_second }
@ZipIterator_field_first = internal constant { ptr, ptr } { ptr @ZipIterator_getter_first, ptr @ZipIterator_setter_first }
@ZipIterator_field_second = internal constant { ptr, ptr } { ptr @ZipIterator_getter_second, ptr @ZipIterator_setter_second }
@ProductIterable_field_first = internal constant { ptr, ptr } { ptr @ProductIterable_getter_first, ptr @ProductIterable_setter_first }
@ProductIterable_field_second = internal constant { ptr, ptr } { ptr @ProductIterable_getter_second, ptr @ProductIterable_setter_second }
@ProductIterator_field_first_iterator = internal constant { ptr, ptr } { ptr @ProductIterator_getter_first_iterator, ptr @ProductIterator_setter_first_iterator }
@ProductIterator_field_second_iterator = internal constant { ptr, ptr } { ptr @ProductIterator_getter_second_iterator, ptr @ProductIterator_setter_second_iterator }
@ProductIterator_field_second_iterable = internal constant { ptr, ptr } { ptr @ProductIterator_getter_second_iterable, ptr @ProductIterator_setter_second_iterable }
@ProductIterator_field_current_first = internal constant { ptr, ptr } { ptr @ProductIterator_getter_current_first, ptr @ProductIterator_setter_current_first }
@Range_field_start = internal constant { ptr, ptr } { ptr @Range_getter_start, ptr @Range_setter_start }
@Range_field_end = internal constant { ptr, ptr } { ptr @Range_getter_end, ptr @Range_setter_end }
@Range_field_step = internal constant { ptr, ptr } { ptr @Range_getter_step, ptr @Range_setter_step }
@RangeIterator_field_counter = internal constant { ptr, ptr } { ptr @RangeIterator_getter_counter, ptr @RangeIterator_setter_counter }
@RangeIterator_field_end = internal constant { ptr, ptr } { ptr @RangeIterator_getter_end, ptr @RangeIterator_setter_end }
@RangeIterator_field_step = internal constant { ptr, ptr } { ptr @RangeIterator_getter_step, ptr @RangeIterator_setter_step }
@gijio_nil = internal constant [3 x i8] c"nil"
@mxbfz_false = internal constant [5 x i8] c"false"
@_parameterization_Ptri32 = linkonce_odr constant [1 x ptr] [ptr @i32_typ]
@_parameterization_BufferPtri8 = linkonce_odr constant [1 x ptr] [ptr @buffer_typ]
@dlxde_true = internal constant [4 x i8] c"true"
@IO_hashtbl = linkonce_odr constant [4 x ptr] [ptr @any_typ, ptr @IO, ptr null, ptr @Object]
@IO_offset_tbl = linkonce_odr constant [4 x i32] [i32 7, i32 7, i32 0, i32 17]
@IO = constant { [3 x i64], [4 x ptr], [10 x ptr] } { [3 x i64] [i64 5359822646784595218, i64 4611686018427388247, i64 3], [4 x ptr] [ptr @subtype_test, ptr @IO_hashtbl, ptr @IO_offset_tbl, ptr getelementptr ({}, ptr null, i32 1)], [10 x ptr] [ptr @IO_B__Self_print_xPtri8__Self_print_xPtri1__Self_print_xNil__Self_print_xCharacter__Self_print_xPtri64__Self_print_xPtri32__Self_print_xRepresentable__Self_print_xString__Self_print_xPtrf64, ptr @IO__Self_print_xPtri8, ptr @IO__Self_print_xPtri1, ptr @IO__Self_print_xNil, ptr @IO__Self_print_xCharacter, ptr @IO__Self_print_xPtri64, ptr @IO__Self_print_xPtri32, ptr @IO__Self_print_xRepresentable, ptr @IO__Self_print_xString, ptr @IO__Self_print_xPtrf64] }
@i32_string = linkonce_odr constant [4 x i8] c"%d\0A\00"
@i64_string = linkonce_odr constant [6 x i8] c"%lld\0A\00"
@string_string = linkonce_odr constant [4 x i8] c"%s\0A\00"
@bool_typ_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @bool_typ]
@bool_typ_offset_tbl = linkonce_odr constant [4 x i32] [i32 7, i32 7, i32 0, i32 7]
@bool_typ = linkonce_odr constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 5801531371504802705, i64 4611686018427388081, i64 3], [4 x ptr] [ptr @subtype_test, ptr @bool_typ_hashtbl, ptr @bool_typ_offset_tbl, ptr getelementptr (i1, ptr null, i32 1)], [0 x ptr] undef }
@i8_typ_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @i8_typ]
@i8_typ_offset_tbl = linkonce_odr constant [4 x i32] [i32 7, i32 7, i32 0, i32 7]
@i8_typ = linkonce_odr constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 2582149688529881115, i64 4611686018427388081, i64 3], [4 x ptr] [ptr @subtype_test, ptr @i8_typ_hashtbl, ptr @i8_typ_offset_tbl, ptr getelementptr (i8, ptr null, i32 1)], [0 x ptr] undef }
@i32_typ_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @i32_typ, ptr null]
@i32_typ_offset_tbl = linkonce_odr constant [4 x i32] [i32 7, i32 7, i32 7, i32 0]
@i32_typ = linkonce_odr constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 -2253724949814257982, i64 4611686018427388081, i64 3], [4 x ptr] [ptr @subtype_test, ptr @i32_typ_hashtbl, ptr @i32_typ_offset_tbl, ptr getelementptr (i32, ptr null, i32 1)], [0 x ptr] undef }
@i64_typ_hashtbl = linkonce_odr constant [4 x ptr] [ptr @any_typ, ptr @Object, ptr @i64_typ, ptr null]
@i64_typ_offset_tbl = linkonce_odr constant [4 x i32] [i32 7, i32 7, i32 7, i32 0]
@i64_typ = linkonce_odr constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 -7469797244461771922, i64 4611686018427388157, i64 3], [4 x ptr] [ptr @subtype_test, ptr @i64_typ_hashtbl, ptr @i64_typ_offset_tbl, ptr getelementptr (i64, ptr null, i32 1)], [0 x ptr] undef }
@f64_typ_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @f64_typ]
@f64_typ_offset_tbl = linkonce_odr constant [4 x i32] [i32 7, i32 7, i32 0, i32 7]
@f64_typ = linkonce_odr constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 -757315540097298781, i64 4611686018427388081, i64 3], [4 x ptr] [ptr @subtype_test, ptr @f64_typ_hashtbl, ptr @f64_typ_offset_tbl, ptr getelementptr (double, ptr null, i32 1)], [0 x ptr] undef }
@nil_typ_hashtbl = linkonce_odr constant [2 x ptr] [ptr @nil_typ, ptr @any_typ]
@nil_typ_offset_tbl = linkonce_odr constant [2 x i32] [i32 7, i32 7]
@nil_typ = linkonce_odr constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 -5126806859456325683, i64 4611686018427388081, i64 1], [4 x ptr] [ptr @subtype_test, ptr @nil_typ_hashtbl, ptr @nil_typ_offset_tbl, ptr getelementptr ([0 x i8], ptr null, i32 1)], [0 x ptr] undef }
@any_typ_hashtbl = linkonce_odr constant [1 x ptr] [ptr @any_typ]
@any_typ_offset_tbl = linkonce_odr constant [1 x i32] [i32 7]
@any_typ = linkonce_odr constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 3084208142191802847, i64 4611686018427388073, i64 0], [4 x ptr] [ptr @subtype_test, ptr @any_typ_hashtbl, ptr @any_typ_offset_tbl, ptr getelementptr ({ ptr, ptr, ptr, i32 }, ptr null, i32 1)], [0 x ptr] undef }
@nothing_typ_hashtbl = linkonce_odr constant [4 x ptr] [ptr null, ptr @Object, ptr @any_typ, ptr @nothing_typ]
@nothing_typ_offset_tbl = linkonce_odr constant [4 x i32] [i32 0, i32 7, i32 7, i32 7]
@nothing_typ = linkonce_odr constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 -3334456163433371378, i64 4611686018427388097, i64 3], [4 x ptr] [ptr @subtype_test, ptr @nothing_typ_hashtbl, ptr @nothing_typ_offset_tbl, ptr getelementptr ([0 x i8], ptr null, i32 1)], [0 x ptr] undef }
@function_typ_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @function_typ, ptr null]
@function_typ_offset_tbl = linkonce_odr constant [4 x i32] [i32 7, i32 7, i32 7, i32 0]
@function_typ = linkonce_odr constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 7927147055246173914, i64 4611686018427388081, i64 3], [4 x ptr] [ptr @subtype_test, ptr @function_typ_hashtbl, ptr @function_typ_offset_tbl, ptr getelementptr ({ ptr }, ptr null, i32 1)], [0 x ptr] undef }
@buffer_typ_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @buffer_typ, ptr @any_typ, ptr null]
@buffer_typ_offset_tbl = linkonce_odr constant [4 x i32] [i32 7, i32 7, i32 7, i32 0]
@buffer_typ = linkonce_odr constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 -318192747195410237, i64 4611686018427388091, i64 3], [4 x ptr] [ptr @subtype_test, ptr @buffer_typ_hashtbl, ptr @buffer_typ_offset_tbl, ptr getelementptr ({ ptr }, ptr null, i32 1)], [0 x ptr] undef }
@tuple_typ_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @tuple_typ]
@tuple_typ_offset_tbl = linkonce_odr constant [4 x i32] [i32 7, i32 7, i32 0, i32 7]
@tuple_typ = linkonce_odr constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 3422634369532007740, i64 4611686018427388081, i64 3], [4 x ptr] [ptr @subtype_test, ptr @tuple_typ_hashtbl, ptr @tuple_typ_offset_tbl, ptr getelementptr ({}, ptr null, i32 1)], [0 x ptr] undef }
@union_typ_hashtbl = linkonce_odr constant [4 x ptr] [ptr @union_typ, ptr null, ptr @any_typ, ptr @Object]
@union_typ_offset_tbl = linkonce_odr constant [4 x i32] [i32 7, i32 0, i32 7, i32 7]
@union_typ = linkonce_odr constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 -7543233778997666740, i64 4611686018427388093, i64 3], [4 x ptr] [ptr @subtype_test, ptr @union_typ_hashtbl, ptr @union_typ_offset_tbl, ptr getelementptr ({ ptr, i8 }, ptr null, i32 1)], [0 x ptr] undef }
@Object = constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 3282773614056351330, i64 4611686018427388081, i64 1], [4 x ptr] [ptr @subtype_test, ptr @Object_hashtbl, ptr @Object_offset_tbl, ptr getelementptr ({}, ptr null, i32 1)], [0 x ptr] undef }
@Iterator = constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 8673632051301757104, i64 4611686018427388091, i64 3], [4 x ptr] [ptr @subtype_test, ptr @Iterator_hashtbl, ptr @Iterator_offset_tbl, ptr getelementptr ({}, ptr null, i32 1)], [0 x ptr] undef }
@Iterable = constant { [3 x i64], [4 x ptr], [0 x ptr] } { [3 x i64] [i64 3037712219555723519, i64 4611686018427388093, i64 3], [4 x ptr] [ptr @subtype_test, ptr @Iterable_hashtbl, ptr @Iterable_offset_tbl, ptr getelementptr ({}, ptr null, i32 1)], [0 x ptr] undef }
@Representable = constant { [3 x i64], [4 x ptr], [2 x ptr] } { [3 x i64] [i64 -7260840641129990118, i64 4611686018427388093, i64 3], [4 x ptr] [ptr @subtype_test, ptr @Representable_hashtbl, ptr @Representable_offset_tbl, ptr getelementptr ({}, ptr null, i32 1)], [2 x ptr] [ptr @Representable_B_repr_, ptr @Representable_repr_] }
@String = constant { [3 x i64], [4 x ptr], [35 x ptr] } { [3 x i64] [i64 6499063144389013426, i64 4611686018427388073, i64 7], [4 x ptr] [ptr @subtype_test, ptr @String_hashtbl, ptr @String_offset_tbl, ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1)], [35 x ptr] [ptr @String_field_bytes, ptr @String_field_length, ptr @String_field_capacity, ptr @String_B_init_, ptr @String_B_init_bytesBufferPtri8_lengthPtri32_capacityPtri32, ptr @String_B_length_, ptr @String_B_capacity_, ptr @String_B_bytes_, ptr @String_B_append_xPtri8, ptr @String_B_extend_strString, ptr @String_B__index_xPtri32, ptr @String_B__EQ_otherString, ptr @String_B_pop_, ptr @String_B_copy_, ptr @String_B_c_string_, ptr @String_B_iterator_, ptr @String_B_repr_, ptr @String_init_, ptr @String_init_bytesBufferPtri8_lengthPtri32_capacityPtri32, ptr @String_length_, ptr @String_capacity_, ptr @String_bytes_, ptr @String_append_xPtri8, ptr @String_extend_strString, ptr @String__index_xPtri32, ptr @String__EQ_otherString, ptr @String_pop_, ptr @String_copy_, ptr @String_c_string_, ptr @String_iterator_, ptr @String_repr_, ptr @String_B_iterator_, ptr @String_iterator_, ptr @String_B_repr_, ptr @String_repr_] }
@Character = constant { [3 x i64], [4 x ptr], [5 x ptr] } { [3 x i64] [i64 6681222582356018452, i64 4611686018427388091, i64 3], [4 x ptr] [ptr @subtype_test, ptr @Character_hashtbl, ptr @Character_offset_tbl, ptr getelementptr ({ i8 }, ptr null, i32 1)], [5 x ptr] [ptr @Character_field_byte, ptr @Character_B_byte_, ptr @Character_B_init_bytePtri8, ptr @Character_byte_, ptr @Character_init_bytePtri8] }
@StringIterator = constant { [3 x i64], [4 x ptr], [6 x ptr] } { [3 x i64] [i64 -7260570988945952630, i64 4611686018427388097, i64 3], [4 x ptr] [ptr @subtype_test, ptr @StringIterator_hashtbl, ptr @StringIterator_offset_tbl, ptr getelementptr ({ { ptr, ptr, ptr, i32 }, i32 }, ptr null, i32 1)], [6 x ptr] [ptr @StringIterator_field_str, ptr @StringIterator_field_index, ptr @StringIterator_B_init_strString, ptr @StringIterator_B_next_, ptr @StringIterator_init_strString, ptr @StringIterator_next_] }
@Exception = constant { [3 x i64], [4 x ptr], [13 x ptr] } { [3 x i64] [i64 9027164862567808692, i64 4611686018427388091, i64 3], [4 x ptr] [ptr @subtype_test, ptr @Exception_hashtbl, ptr @Exception_offset_tbl, ptr getelementptr ({ i32, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr null, i32 1)], [13 x ptr] [ptr @Exception_field_line_number, ptr @Exception_field_file_name, ptr @Exception_field_message, ptr @Exception_B_init_messageString, ptr @Exception_B_init_, ptr @Exception_B_set_info_line_numberPtri32_file_nameString, ptr @Exception_B_report_, ptr @Exception_B_print_message_, ptr @Exception_init_messageString, ptr @Exception_init_, ptr @Exception_set_info_line_numberPtri32_file_nameString, ptr @Exception_report_, ptr @Exception_print_message_] }
@Blocking_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @Blocking, ptr null]
@Blocking_offset_tbl = linkonce_odr constant [4 x i32] [i32 9, i32 7, i32 7, i32 0]
@Blocking = constant { [3 x i64], [4 x ptr], [2 x ptr] } { [3 x i64] [i64 847773162914674935, i64 4611686018427388081, i64 3], [4 x ptr] [ptr @subtype_test, ptr @Blocking_hashtbl, ptr @Blocking_offset_tbl, ptr getelementptr ({}, ptr null, i32 1)], [2 x ptr] [ptr @Blocking_B_init_, ptr @Blocking_init_] }
@Channel_hashtbl = linkonce_odr constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Channel]
@Channel_offset_tbl = linkonce_odr constant [4 x i32] [i32 14, i32 7, i32 0, i32 7]
@Channel = constant { [3 x i64], [4 x ptr], [7 x ptr] } { [3 x i64] [i64 -3668118116639750450, i64 4611686018427388081, i64 3], [4 x ptr] [ptr @subtype_test, ptr @Channel_hashtbl, ptr @Channel_offset_tbl, ptr getelementptr ({ { ptr, i32 } }, ptr null, i32 1)], [7 x ptr] [ptr @Channel_field_value, ptr @Channel_B_init_, ptr @Channel_B_get_, ptr @Channel_B_put_new_valuePtri32, ptr @Channel_init_, ptr @Channel_get_, ptr @Channel_put_new_valuePtri32] }
@Channel_field_value = internal constant { ptr, ptr } { ptr @Channel_getter_value, ptr @Channel_setter_value }
@string_string.69 = internal constant [4 x i8] c"%s\0A\00"
@float_string = linkonce_odr constant [4 x i8] c"%f\0A\00"
@exception_message = internal constant [45 x i8] c"Error: uncaught exception. Program aborted.\0A\00"
@into_caller_buf = linkonce_odr thread_local global [3 x ptr] zeroinitializer
@current_coroutine = linkonce_odr thread_local global ptr null
@always_one = linkonce thread_local global i1 true
@current_ptr = internal thread_local global ptr null

define ptr @Integer_B_init_valuePtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [13 x ptr], ptr %15, i32 0, i32 7
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Integer_B__ADD_otherPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [13 x ptr], ptr %15, i32 0, i32 8
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Integer_B__SUB_otherPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [13 x ptr], ptr %15, i32 0, i32 9
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Integer_B__MUL_otherPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [13 x ptr], ptr %15, i32 0, i32 10
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Integer_B__DIV_otherPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [13 x ptr], ptr %15, i32 0, i32 11
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Integer_B_print_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [13 x ptr], ptr %4, i32 0, i32 12
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @Integer_init_valuePtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Integer)
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %21 = load ptr, ptr %20, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 104, ptr %22)
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %25 = load i32, ptr %24, align 4
  %26 = getelementptr ptr, ptr %22, i32 %25
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 1
  %29 = load ptr, ptr %28, align 8
  call void %29(ptr %21, i32 %3)
  ret void
}

define { ptr, ptr, ptr, i32 } @Integer__ADD_otherPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Integer)
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %21 = load ptr, ptr %20, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 104, ptr %22)
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %25 = load i32, ptr %24, align 4
  %26 = getelementptr ptr, ptr %22, i32 %25
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call i32 %29(ptr %21)
  %31 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ i32 }, ptr null, i32 1) to i64))
  %32 = alloca { ptr, ptr, ptr, i32 }, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 1
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 3
  store ptr @Integer, ptr %32, align 8
  store ptr %31, ptr %33, align 8
  store i32 7, ptr %34, align 4
  %35 = call ptr @llvm.invariant.start.p0(i64 16, ptr %32)
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %37 = load ptr, ptr %36, align 8
  %38 = load ptr, ptr %7, align 8
  %39 = call ptr @llvm.invariant.start.p0(i64 104, ptr %38)
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %41 = load i32, ptr %40, align 4
  %42 = getelementptr ptr, ptr %38, i32 %41
  %43 = load ptr, ptr %42, align 8
  %44 = getelementptr { ptr, ptr }, ptr %43, i32 0, i32 0
  %45 = load ptr, ptr %44, align 8
  %46 = call i32 %45(ptr %37)
  %47 = add i32 %46, %3
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 0
  %49 = load ptr, ptr %48, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %49, 0
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 1
  %52 = load ptr, ptr %51, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } %50, ptr %52, 1
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 2
  %55 = load ptr, ptr %54, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %55, 2
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 3
  %58 = load i32, ptr %57, align 4
  %59 = insertvalue { ptr, ptr, ptr, i32 } %56, i32 %58, 3
  %60 = alloca [1 x ptr], align 8
  %61 = getelementptr [1 x ptr], ptr %60, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %61, align 8
  %62 = call ptr @llvm.invariant.start.p0(i64 1, ptr %60)
  %63 = call ptr @llvm.invariant.start.p0(i64 104, ptr %49)
  %64 = getelementptr ptr, ptr %49, i32 %58
  %65 = getelementptr ptr, ptr %64, i32 1
  %66 = load ptr, ptr %65, align 8
  %67 = alloca { ptr }, align 8
  %68 = getelementptr { ptr }, ptr %67, i32 0, i32 0
  store ptr @i32_typ, ptr %68, align 8
  %69 = call ptr %66({ ptr, ptr, ptr, i32 } %59, ptr %67)
  call void %69({ ptr, ptr, ptr, i32 } %59, { ptr, ptr, ptr, i32 } %59, ptr %60, i32 %47)
  %70 = alloca { ptr, ptr, ptr, i32 }, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 0
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 0
  %73 = load ptr, ptr %71, align 8
  store ptr %73, ptr %72, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 1
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 1
  %76 = load ptr, ptr %74, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 2
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 2
  %79 = load ptr, ptr %77, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 3
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 3
  %82 = load i32, ptr %80, align 4
  store i32 %82, ptr %81, align 4
  call void @set_offset(ptr %70, ptr @Integer)
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 0
  %84 = load ptr, ptr %83, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %84, 0
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 1
  %87 = load ptr, ptr %86, align 8
  %88 = insertvalue { ptr, ptr, ptr, i32 } %85, ptr %87, 1
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 2
  %90 = load ptr, ptr %89, align 8
  %91 = insertvalue { ptr, ptr, ptr, i32 } %88, ptr %90, 2
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 3
  %93 = load i32, ptr %92, align 4
  %94 = insertvalue { ptr, ptr, ptr, i32 } %91, i32 %93, 3
  ret { ptr, ptr, ptr, i32 } %94
}

define { ptr, ptr, ptr, i32 } @Integer__SUB_otherPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Integer)
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %21 = load ptr, ptr %20, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 104, ptr %22)
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %25 = load i32, ptr %24, align 4
  %26 = getelementptr ptr, ptr %22, i32 %25
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call i32 %29(ptr %21)
  %31 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ i32 }, ptr null, i32 1) to i64))
  %32 = alloca { ptr, ptr, ptr, i32 }, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 1
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 3
  store ptr @Integer, ptr %32, align 8
  store ptr %31, ptr %33, align 8
  store i32 7, ptr %34, align 4
  %35 = call ptr @llvm.invariant.start.p0(i64 16, ptr %32)
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %37 = load ptr, ptr %36, align 8
  %38 = load ptr, ptr %7, align 8
  %39 = call ptr @llvm.invariant.start.p0(i64 104, ptr %38)
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %41 = load i32, ptr %40, align 4
  %42 = getelementptr ptr, ptr %38, i32 %41
  %43 = load ptr, ptr %42, align 8
  %44 = getelementptr { ptr, ptr }, ptr %43, i32 0, i32 0
  %45 = load ptr, ptr %44, align 8
  %46 = call i32 %45(ptr %37)
  %47 = sub i32 %46, %3
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 0
  %49 = load ptr, ptr %48, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %49, 0
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 1
  %52 = load ptr, ptr %51, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } %50, ptr %52, 1
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 2
  %55 = load ptr, ptr %54, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %55, 2
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 3
  %58 = load i32, ptr %57, align 4
  %59 = insertvalue { ptr, ptr, ptr, i32 } %56, i32 %58, 3
  %60 = alloca [1 x ptr], align 8
  %61 = getelementptr [1 x ptr], ptr %60, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %61, align 8
  %62 = call ptr @llvm.invariant.start.p0(i64 1, ptr %60)
  %63 = call ptr @llvm.invariant.start.p0(i64 104, ptr %49)
  %64 = getelementptr ptr, ptr %49, i32 %58
  %65 = getelementptr ptr, ptr %64, i32 1
  %66 = load ptr, ptr %65, align 8
  %67 = alloca { ptr }, align 8
  %68 = getelementptr { ptr }, ptr %67, i32 0, i32 0
  store ptr @i32_typ, ptr %68, align 8
  %69 = call ptr %66({ ptr, ptr, ptr, i32 } %59, ptr %67)
  call void %69({ ptr, ptr, ptr, i32 } %59, { ptr, ptr, ptr, i32 } %59, ptr %60, i32 %47)
  %70 = alloca { ptr, ptr, ptr, i32 }, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 0
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 0
  %73 = load ptr, ptr %71, align 8
  store ptr %73, ptr %72, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 1
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 1
  %76 = load ptr, ptr %74, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 2
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 2
  %79 = load ptr, ptr %77, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 3
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 3
  %82 = load i32, ptr %80, align 4
  store i32 %82, ptr %81, align 4
  call void @set_offset(ptr %70, ptr @Integer)
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 0
  %84 = load ptr, ptr %83, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %84, 0
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 1
  %87 = load ptr, ptr %86, align 8
  %88 = insertvalue { ptr, ptr, ptr, i32 } %85, ptr %87, 1
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 2
  %90 = load ptr, ptr %89, align 8
  %91 = insertvalue { ptr, ptr, ptr, i32 } %88, ptr %90, 2
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 3
  %93 = load i32, ptr %92, align 4
  %94 = insertvalue { ptr, ptr, ptr, i32 } %91, i32 %93, 3
  ret { ptr, ptr, ptr, i32 } %94
}

define { ptr, ptr, ptr, i32 } @Integer__MUL_otherPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Integer)
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %21 = load ptr, ptr %20, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 104, ptr %22)
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %25 = load i32, ptr %24, align 4
  %26 = getelementptr ptr, ptr %22, i32 %25
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call i32 %29(ptr %21)
  %31 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ i32 }, ptr null, i32 1) to i64))
  %32 = alloca { ptr, ptr, ptr, i32 }, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 1
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 3
  store ptr @Integer, ptr %32, align 8
  store ptr %31, ptr %33, align 8
  store i32 7, ptr %34, align 4
  %35 = call ptr @llvm.invariant.start.p0(i64 16, ptr %32)
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %37 = load ptr, ptr %36, align 8
  %38 = load ptr, ptr %7, align 8
  %39 = call ptr @llvm.invariant.start.p0(i64 104, ptr %38)
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %41 = load i32, ptr %40, align 4
  %42 = getelementptr ptr, ptr %38, i32 %41
  %43 = load ptr, ptr %42, align 8
  %44 = getelementptr { ptr, ptr }, ptr %43, i32 0, i32 0
  %45 = load ptr, ptr %44, align 8
  %46 = call i32 %45(ptr %37)
  %47 = mul i32 %46, %3
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 0
  %49 = load ptr, ptr %48, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %49, 0
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 1
  %52 = load ptr, ptr %51, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } %50, ptr %52, 1
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 2
  %55 = load ptr, ptr %54, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %55, 2
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 3
  %58 = load i32, ptr %57, align 4
  %59 = insertvalue { ptr, ptr, ptr, i32 } %56, i32 %58, 3
  %60 = alloca [1 x ptr], align 8
  %61 = getelementptr [1 x ptr], ptr %60, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %61, align 8
  %62 = call ptr @llvm.invariant.start.p0(i64 1, ptr %60)
  %63 = call ptr @llvm.invariant.start.p0(i64 104, ptr %49)
  %64 = getelementptr ptr, ptr %49, i32 %58
  %65 = getelementptr ptr, ptr %64, i32 1
  %66 = load ptr, ptr %65, align 8
  %67 = alloca { ptr }, align 8
  %68 = getelementptr { ptr }, ptr %67, i32 0, i32 0
  store ptr @i32_typ, ptr %68, align 8
  %69 = call ptr %66({ ptr, ptr, ptr, i32 } %59, ptr %67)
  call void %69({ ptr, ptr, ptr, i32 } %59, { ptr, ptr, ptr, i32 } %59, ptr %60, i32 %47)
  %70 = alloca { ptr, ptr, ptr, i32 }, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 0
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 0
  %73 = load ptr, ptr %71, align 8
  store ptr %73, ptr %72, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 1
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 1
  %76 = load ptr, ptr %74, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 2
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 2
  %79 = load ptr, ptr %77, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 3
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 3
  %82 = load i32, ptr %80, align 4
  store i32 %82, ptr %81, align 4
  call void @set_offset(ptr %70, ptr @Integer)
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 0
  %84 = load ptr, ptr %83, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %84, 0
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 1
  %87 = load ptr, ptr %86, align 8
  %88 = insertvalue { ptr, ptr, ptr, i32 } %85, ptr %87, 1
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 2
  %90 = load ptr, ptr %89, align 8
  %91 = insertvalue { ptr, ptr, ptr, i32 } %88, ptr %90, 2
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 3
  %93 = load i32, ptr %92, align 4
  %94 = insertvalue { ptr, ptr, ptr, i32 } %91, i32 %93, 3
  ret { ptr, ptr, ptr, i32 } %94
}

define { ptr, ptr, ptr, i32 } @Integer__DIV_otherPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Integer)
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %21 = load ptr, ptr %20, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 104, ptr %22)
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %25 = load i32, ptr %24, align 4
  %26 = getelementptr ptr, ptr %22, i32 %25
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call i32 %29(ptr %21)
  %31 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ i32 }, ptr null, i32 1) to i64))
  %32 = alloca { ptr, ptr, ptr, i32 }, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 1
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 3
  store ptr @Integer, ptr %32, align 8
  store ptr %31, ptr %33, align 8
  store i32 7, ptr %34, align 4
  %35 = call ptr @llvm.invariant.start.p0(i64 16, ptr %32)
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %37 = load ptr, ptr %36, align 8
  %38 = load ptr, ptr %7, align 8
  %39 = call ptr @llvm.invariant.start.p0(i64 104, ptr %38)
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %41 = load i32, ptr %40, align 4
  %42 = getelementptr ptr, ptr %38, i32 %41
  %43 = load ptr, ptr %42, align 8
  %44 = getelementptr { ptr, ptr }, ptr %43, i32 0, i32 0
  %45 = load ptr, ptr %44, align 8
  %46 = call i32 %45(ptr %37)
  %47 = sdiv i32 %46, %3
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 0
  %49 = load ptr, ptr %48, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %49, 0
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 1
  %52 = load ptr, ptr %51, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } %50, ptr %52, 1
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 2
  %55 = load ptr, ptr %54, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %55, 2
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 3
  %58 = load i32, ptr %57, align 4
  %59 = insertvalue { ptr, ptr, ptr, i32 } %56, i32 %58, 3
  %60 = alloca [1 x ptr], align 8
  %61 = getelementptr [1 x ptr], ptr %60, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %61, align 8
  %62 = call ptr @llvm.invariant.start.p0(i64 1, ptr %60)
  %63 = call ptr @llvm.invariant.start.p0(i64 104, ptr %49)
  %64 = getelementptr ptr, ptr %49, i32 %58
  %65 = getelementptr ptr, ptr %64, i32 1
  %66 = load ptr, ptr %65, align 8
  %67 = alloca { ptr }, align 8
  %68 = getelementptr { ptr }, ptr %67, i32 0, i32 0
  store ptr @i32_typ, ptr %68, align 8
  %69 = call ptr %66({ ptr, ptr, ptr, i32 } %59, ptr %67)
  call void %69({ ptr, ptr, ptr, i32 } %59, { ptr, ptr, ptr, i32 } %59, ptr %60, i32 %47)
  %70 = alloca { ptr, ptr, ptr, i32 }, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 0
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 0
  %73 = load ptr, ptr %71, align 8
  store ptr %73, ptr %72, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 1
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 1
  %76 = load ptr, ptr %74, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 2
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 2
  %79 = load ptr, ptr %77, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 3
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 3
  %82 = load i32, ptr %80, align 4
  store i32 %82, ptr %81, align 4
  call void @set_offset(ptr %70, ptr @Integer)
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 0
  %84 = load ptr, ptr %83, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %84, 0
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 1
  %87 = load ptr, ptr %86, align 8
  %88 = insertvalue { ptr, ptr, ptr, i32 } %85, ptr %87, 1
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 2
  %90 = load ptr, ptr %89, align 8
  %91 = insertvalue { ptr, ptr, ptr, i32 } %88, ptr %90, 2
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 3
  %93 = load i32, ptr %92, align 4
  %94 = insertvalue { ptr, ptr, ptr, i32 } %91, i32 %93, 3
  ret { ptr, ptr, ptr, i32 } %94
}

define void @Integer_print_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Integer)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 104, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 0
  %28 = load ptr, ptr %27, align 8
  %29 = call i32 %28(ptr %20)
  %30 = alloca i160, align 8
  %31 = alloca ptr, align 8
  store i32 %29, ptr %30, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %31, align 4
  %32 = load ptr, ptr %31, align 8
  %33 = insertvalue { ptr, i160 } undef, ptr %32, 0
  %34 = load i160, ptr %30, align 4
  %35 = insertvalue { ptr, i160 } %33, i160 %34, 1
  %36 = alloca [1 x ptr], align 8
  %37 = getelementptr [1 x ptr], ptr %36, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %37, align 8
  %38 = call ptr @llvm.invariant.start.p0(i64 1, ptr %36)
  %39 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %40 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %41 = alloca { ptr }, align 8
  %42 = getelementptr { ptr }, ptr %41, i32 0, i32 0
  store ptr %32, ptr %42, align 8
  %43 = call ptr %40(ptr %41)
  call void %43(ptr %36, { ptr, i160 } %35)
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare ptr @llvm.invariant.start.p0(i64 immarg, ptr nocapture) #0

define i32 @Integer_getter_value(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { i32 }, ptr %0, i32 0, i32 0
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @Integer_setter_value(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { i32 }, ptr %0, i32 0, i32 0
  store i32 %1, ptr %3, align 4
  ret void
}

define ptr @BigBoy_B_introduce_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [6 x ptr], ptr %4, i32 0, i32 2
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @BigBoy_B_repr_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [6 x ptr], ptr %4, i32 0, i32 3
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @BigBoy_introduce_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @BigBoy)
  %19 = alloca ptr, align 8
  %20 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 11) to i64))
  store ptr %20, ptr %19, align 8
  %21 = alloca { ptr }, align 8
  %22 = getelementptr { ptr }, ptr %19, i32 0, i32 0
  %23 = getelementptr { ptr }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %26 = load ptr, ptr %21, align 8
  %27 = getelementptr i8, ptr %26, i64 0
  %28 = load i80, ptr @zvqln_Here_I_am, align 4
  store i80 %28, ptr %27, align 4
  %29 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  store ptr @String, ptr %30, align 8
  store ptr %29, ptr %31, align 8
  store i32 7, ptr %32, align 4
  %33 = call ptr @llvm.invariant.start.p0(i64 16, ptr %30)
  %34 = getelementptr { ptr }, ptr %21, i32 0, i32 0
  %35 = load ptr, ptr %34, align 8
  %36 = insertvalue { ptr } undef, ptr %35, 0
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %38 = load ptr, ptr %37, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %38, 0
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %41 = load ptr, ptr %40, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } %39, ptr %41, 1
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %44 = load ptr, ptr %43, align 8
  %45 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %44, 2
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %47 = load i32, ptr %46, align 4
  %48 = insertvalue { ptr, ptr, ptr, i32 } %45, i32 %47, 3
  %49 = alloca [3 x ptr], align 8
  %50 = getelementptr [3 x ptr], ptr %49, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %50, align 8
  %51 = getelementptr [3 x ptr], ptr %49, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %51, align 8
  %52 = getelementptr [3 x ptr], ptr %49, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %52, align 8
  %53 = call ptr @llvm.invariant.start.p0(i64 9, ptr %49)
  %54 = call ptr @llvm.invariant.start.p0(i64 280, ptr %38)
  %55 = getelementptr ptr, ptr %38, i32 %47
  %56 = getelementptr ptr, ptr %55, i32 4
  %57 = load ptr, ptr %56, align 8
  %58 = alloca { ptr, ptr, ptr }, align 8
  %59 = getelementptr { ptr, ptr, ptr }, ptr %58, i32 0, i32 0
  store ptr @buffer_typ, ptr %59, align 8
  %60 = getelementptr { ptr, ptr, ptr }, ptr %58, i32 0, i32 1
  store ptr @i32_typ, ptr %60, align 8
  %61 = getelementptr { ptr, ptr, ptr }, ptr %58, i32 0, i32 2
  store ptr @i32_typ, ptr %61, align 8
  %62 = call ptr %57({ ptr, ptr, ptr, i32 } %48, ptr %58)
  call void %62({ ptr, ptr, ptr, i32 } %48, { ptr, ptr, ptr, i32 } %48, ptr %49, { ptr } %36, i32 10, i32 11)
  %63 = getelementptr { ptr, i160 }, ptr %30, i32 0, i32 0
  %64 = load ptr, ptr %63, align 8
  %65 = insertvalue { ptr, i160 } undef, ptr %64, 0
  %66 = getelementptr { ptr, i160 }, ptr %30, i32 0, i32 1
  %67 = load i160, ptr %66, align 4
  %68 = insertvalue { ptr, i160 } %65, i160 %67, 1
  %69 = alloca [1 x ptr], align 8
  %70 = getelementptr [1 x ptr], ptr %69, i32 0, i32 0
  store ptr @_parameterization_String, ptr %70, align 8
  %71 = call ptr @llvm.invariant.start.p0(i64 1, ptr %69)
  %72 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %73 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %74 = alloca { ptr }, align 8
  %75 = getelementptr { ptr }, ptr %74, i32 0, i32 0
  store ptr %64, ptr %75, align 8
  %76 = call ptr %73(ptr %74)
  call void %76(ptr %69, { ptr, i160 } %68)
  ret void
}

define ptr @Integer2_B_value_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [40 x ptr], ptr %4, i32 0, i32 10
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Integer2_B_init_valuePtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [40 x ptr], ptr %15, i32 0, i32 11
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Integer2_B__ADD_otherPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [40 x ptr], ptr %15, i32 0, i32 12
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Integer2_B__SUB_otherPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [40 x ptr], ptr %15, i32 0, i32 13
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Integer2_B__MUL_otherPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [40 x ptr], ptr %15, i32 0, i32 14
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Integer2_B__DIV_otherPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [40 x ptr], ptr %15, i32 0, i32 15
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Integer2_B_print_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [40 x ptr], ptr %4, i32 0, i32 16
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Integer2_B_introduce_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [40 x ptr], ptr %4, i32 0, i32 17
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Integer2_B_repr_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [40 x ptr], ptr %4, i32 0, i32 18
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define i32 @Integer2_value_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Integer2)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 320, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 0
  %28 = load ptr, ptr %27, align 8
  %29 = call i32 %28(ptr %20)
  ret i32 %29
}

define { ptr, ptr, ptr, i32 } @Integer2_repr_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Integer2)
  %19 = alloca ptr, align 8
  %20 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 9) to i64))
  store ptr %20, ptr %19, align 8
  %21 = alloca { ptr }, align 8
  %22 = getelementptr { ptr }, ptr %19, i32 0, i32 0
  %23 = getelementptr { ptr }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %26 = load ptr, ptr %21, align 8
  %27 = getelementptr i8, ptr %26, i64 0
  %28 = load i64, ptr @sjsyh_Integer, align 4
  store i64 %28, ptr %27, align 4
  %29 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  store ptr @String, ptr %30, align 8
  store ptr %29, ptr %31, align 8
  store i32 7, ptr %32, align 4
  %33 = call ptr @llvm.invariant.start.p0(i64 16, ptr %30)
  %34 = getelementptr { ptr }, ptr %21, i32 0, i32 0
  %35 = load ptr, ptr %34, align 8
  %36 = insertvalue { ptr } undef, ptr %35, 0
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %38 = load ptr, ptr %37, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %38, 0
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %41 = load ptr, ptr %40, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } %39, ptr %41, 1
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %44 = load ptr, ptr %43, align 8
  %45 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %44, 2
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %47 = load i32, ptr %46, align 4
  %48 = insertvalue { ptr, ptr, ptr, i32 } %45, i32 %47, 3
  %49 = alloca [3 x ptr], align 8
  %50 = getelementptr [3 x ptr], ptr %49, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %50, align 8
  %51 = getelementptr [3 x ptr], ptr %49, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %51, align 8
  %52 = getelementptr [3 x ptr], ptr %49, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %52, align 8
  %53 = call ptr @llvm.invariant.start.p0(i64 9, ptr %49)
  %54 = call ptr @llvm.invariant.start.p0(i64 280, ptr %38)
  %55 = getelementptr ptr, ptr %38, i32 %47
  %56 = getelementptr ptr, ptr %55, i32 4
  %57 = load ptr, ptr %56, align 8
  %58 = alloca { ptr, ptr, ptr }, align 8
  %59 = getelementptr { ptr, ptr, ptr }, ptr %58, i32 0, i32 0
  store ptr @buffer_typ, ptr %59, align 8
  %60 = getelementptr { ptr, ptr, ptr }, ptr %58, i32 0, i32 1
  store ptr @i32_typ, ptr %60, align 8
  %61 = getelementptr { ptr, ptr, ptr }, ptr %58, i32 0, i32 2
  store ptr @i32_typ, ptr %61, align 8
  %62 = call ptr %57({ ptr, ptr, ptr, i32 } %48, ptr %58)
  call void %62({ ptr, ptr, ptr, i32 } %48, { ptr, ptr, ptr, i32 } %48, ptr %49, { ptr } %36, i32 8, i32 9)
  %63 = alloca { ptr, ptr, ptr, i32 }, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 0
  %66 = load ptr, ptr %64, align 8
  store ptr %66, ptr %65, align 8
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 1
  %69 = load ptr, ptr %67, align 8
  store ptr %69, ptr %68, align 8
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 2
  %72 = load ptr, ptr %70, align 8
  store ptr %72, ptr %71, align 8
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 3
  %75 = load i32, ptr %73, align 4
  store i32 %75, ptr %74, align 4
  call void @set_offset(ptr %63, ptr @String)
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 0
  %77 = load ptr, ptr %76, align 8
  %78 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %77, 0
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 1
  %80 = load ptr, ptr %79, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } %78, ptr %80, 1
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 2
  %83 = load ptr, ptr %82, align 8
  %84 = insertvalue { ptr, ptr, ptr, i32 } %81, ptr %83, 2
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 3
  %86 = load i32, ptr %85, align 4
  %87 = insertvalue { ptr, ptr, ptr, i32 } %84, i32 %86, 3
  ret { ptr, ptr, ptr, i32 } %87
}

define i32 @Integer2_getter_value(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { i32 }, ptr %0, i32 0, i32 0
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @Integer2_setter_value(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { i32 }, ptr %0, i32 0, i32 0
  store i32 %1, ptr %3, align 4
  ret void
}

define ptr @Animal_B_init_agePtri32_hpPtrf64_skillPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1)
  %4 = getelementptr { ptr, ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 -757315540097298781, i64 ptrtoint (ptr @f64_typ to i64), ptr %24)
  %26 = getelementptr { ptr, ptr, ptr }, ptr %1, i32 0, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr ptr, ptr %27, i32 1
  %29 = getelementptr ptr, ptr %27, i32 2
  %30 = getelementptr ptr, ptr %27, i32 3
  %31 = getelementptr ptr, ptr %27, i32 4
  %32 = load i64, ptr %28, align 4
  %33 = load i64, ptr %29, align 4
  %34 = load ptr, ptr %30, align 8
  %35 = load ptr, ptr %31, align 8
  %36 = call i1 @subtype_test_wrapper(ptr %34, i64 %33, i64 %32, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %35)
  %37 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %38 = getelementptr [13 x ptr], ptr %37, i32 0, i32 8
  %39 = getelementptr ptr, ptr %38, i32 7
  %40 = load ptr, ptr %39, align 8
  ret ptr %40
}

define ptr @Animal_B_say_age_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [13 x ptr], ptr %4, i32 0, i32 9
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Animal_B_say_skill_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [13 x ptr], ptr %4, i32 0, i32 10
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Animal_B_say_messagePtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [13 x ptr], ptr %15, i32 0, i32 11
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Animal_B_do_nothing_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [13 x ptr], ptr %4, i32 0, i32 12
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @Animal_init_agePtri32_hpPtrf64_skillPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3, double %4, i32 %5) {
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %7, align 8
  %8 = call ptr @llvm.invariant.start.p0(i64 16, ptr %7)
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  call void @set_offset(ptr %9, ptr @Animal)
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %23 = load ptr, ptr %22, align 8
  %24 = load ptr, ptr %9, align 8
  %25 = call ptr @llvm.invariant.start.p0(i64 104, ptr %24)
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %27 = load i32, ptr %26, align 4
  %28 = getelementptr ptr, ptr %24, i32 %27
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr { ptr, ptr }, ptr %29, i32 0, i32 1
  %31 = load ptr, ptr %30, align 8
  call void %31(ptr %23, i32 %3)
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %33 = load ptr, ptr %32, align 8
  %34 = load ptr, ptr %9, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 104, ptr %34)
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %37 = load i32, ptr %36, align 4
  %38 = getelementptr ptr, ptr %34, i32 %37
  %39 = getelementptr ptr, ptr %38, i32 1
  %40 = load ptr, ptr %39, align 8
  %41 = getelementptr { ptr, ptr }, ptr %40, i32 0, i32 1
  %42 = load ptr, ptr %41, align 8
  call void %42(ptr %33, double %4)
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %44 = load ptr, ptr %43, align 8
  %45 = load ptr, ptr %9, align 8
  %46 = call ptr @llvm.invariant.start.p0(i64 104, ptr %45)
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %48 = load i32, ptr %47, align 4
  %49 = getelementptr ptr, ptr %45, i32 %48
  %50 = getelementptr ptr, ptr %49, i32 2
  %51 = load ptr, ptr %50, align 8
  %52 = getelementptr { ptr, ptr }, ptr %51, i32 0, i32 1
  %53 = load ptr, ptr %52, align 8
  call void %53(ptr %44, i32 %5)
  ret void
}

define void @Animal_say_age_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Animal)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 104, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 0
  %28 = load ptr, ptr %27, align 8
  %29 = call i32 %28(ptr %20)
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %31 = load ptr, ptr %30, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %31, 0
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %34 = load ptr, ptr %33, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr %34, 1
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %37 = load ptr, ptr %36, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %37, 2
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %40 = load i32, ptr %39, align 4
  %41 = insertvalue { ptr, ptr, ptr, i32 } %38, i32 %40, 3
  %42 = alloca [1 x ptr], align 8
  %43 = getelementptr [1 x ptr], ptr %42, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %43, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 1, ptr %42)
  %45 = call ptr @llvm.invariant.start.p0(i64 104, ptr %31)
  %46 = getelementptr ptr, ptr %31, i32 %40
  %47 = getelementptr ptr, ptr %46, i32 6
  %48 = load ptr, ptr %47, align 8
  %49 = alloca { ptr }, align 8
  %50 = getelementptr { ptr }, ptr %49, i32 0, i32 0
  store ptr @i32_typ, ptr %50, align 8
  %51 = call ptr %48({ ptr, ptr, ptr, i32 } %41, ptr %49)
  call void %51({ ptr, ptr, ptr, i32 } %41, { ptr, ptr, ptr, i32 } %41, ptr %42, i32 %29)
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %53 = load ptr, ptr %52, align 8
  %54 = load ptr, ptr %6, align 8
  %55 = call ptr @llvm.invariant.start.p0(i64 104, ptr %54)
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %57 = load i32, ptr %56, align 4
  %58 = getelementptr ptr, ptr %54, i32 %57
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr { ptr, ptr }, ptr %59, i32 0, i32 0
  %61 = load ptr, ptr %60, align 8
  %62 = call i32 %61(ptr %53)
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %64 = load ptr, ptr %63, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %64, 0
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %67 = load ptr, ptr %66, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %67, 1
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %70 = load ptr, ptr %69, align 8
  %71 = insertvalue { ptr, ptr, ptr, i32 } %68, ptr %70, 2
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %73 = load i32, ptr %72, align 4
  %74 = insertvalue { ptr, ptr, ptr, i32 } %71, i32 %73, 3
  %75 = alloca [1 x ptr], align 8
  %76 = getelementptr [1 x ptr], ptr %75, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %76, align 8
  %77 = call ptr @llvm.invariant.start.p0(i64 1, ptr %75)
  %78 = call ptr @llvm.invariant.start.p0(i64 104, ptr %64)
  %79 = getelementptr ptr, ptr %64, i32 %73
  %80 = getelementptr ptr, ptr %79, i32 6
  %81 = load ptr, ptr %80, align 8
  %82 = alloca { ptr }, align 8
  %83 = getelementptr { ptr }, ptr %82, i32 0, i32 0
  store ptr @i32_typ, ptr %83, align 8
  %84 = call ptr %81({ ptr, ptr, ptr, i32 } %74, ptr %82)
  call void %84({ ptr, ptr, ptr, i32 } %74, { ptr, ptr, ptr, i32 } %74, ptr %75, i32 %62)
  ret void
}

define void @Animal_say_skill_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Animal)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 104, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call i32 %29(ptr %20)
  %31 = alloca i160, align 8
  %32 = alloca ptr, align 8
  store i32 %30, ptr %31, align 4
  %33 = alloca i64, align 8
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %33, align 4
  %34 = load i64, ptr %33, align 4
  store i64 %34, ptr %32, align 4
  %35 = load ptr, ptr %32, align 8
  %36 = insertvalue { ptr, i160 } undef, ptr %35, 0
  %37 = load i160, ptr %31, align 4
  %38 = insertvalue { ptr, i160 } %36, i160 %37, 1
  %39 = alloca [1 x ptr], align 8
  %40 = getelementptr [1 x ptr], ptr %39, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %40, align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 1, ptr %39)
  %42 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %43 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %44 = alloca { ptr }, align 8
  %45 = getelementptr { ptr }, ptr %44, i32 0, i32 0
  store ptr %35, ptr %45, align 8
  %46 = call ptr %43(ptr %44)
  call void %46(ptr %39, { ptr, i160 } %38)
  ret void
}

define void @Animal_say_messagePtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Animal)
  %20 = alloca i160, align 8
  %21 = alloca ptr, align 8
  store i32 %3, ptr %20, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %21, align 4
  %22 = load ptr, ptr %21, align 8
  %23 = insertvalue { ptr, i160 } undef, ptr %22, 0
  %24 = load i160, ptr %20, align 4
  %25 = insertvalue { ptr, i160 } %23, i160 %24, 1
  %26 = alloca [1 x ptr], align 8
  %27 = getelementptr [1 x ptr], ptr %26, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %27, align 8
  %28 = call ptr @llvm.invariant.start.p0(i64 1, ptr %26)
  %29 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %30 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %31 = alloca { ptr }, align 8
  %32 = getelementptr { ptr }, ptr %31, i32 0, i32 0
  store ptr %22, ptr %32, align 8
  %33 = call ptr %30(ptr %31)
  call void %33(ptr %26, { ptr, i160 } %25)
  ret void
}

define { ptr, i160 } @Animal_do_nothing_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Animal)
  %19 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ i32, double, i32 }, ptr null, i32 1) to i64))
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  store ptr @Animal, ptr %20, align 8
  store ptr %19, ptr %21, align 8
  store i32 7, ptr %22, align 4
  %23 = call ptr @llvm.invariant.start.p0(i64 16, ptr %20)
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %25 = load ptr, ptr %24, align 8
  %26 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %25, 0
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = insertvalue { ptr, ptr, ptr, i32 } %26, ptr %28, 1
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %31 = load ptr, ptr %30, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } %29, ptr %31, 2
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %34 = load i32, ptr %33, align 4
  %35 = insertvalue { ptr, ptr, ptr, i32 } %32, i32 %34, 3
  %36 = alloca [3 x ptr], align 8
  %37 = getelementptr [3 x ptr], ptr %36, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %37, align 8
  %38 = getelementptr [3 x ptr], ptr %36, i32 0, i32 1
  store ptr @_parameterization_Ptrf64, ptr %38, align 8
  %39 = getelementptr [3 x ptr], ptr %36, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %39, align 8
  %40 = call ptr @llvm.invariant.start.p0(i64 9, ptr %36)
  %41 = call ptr @llvm.invariant.start.p0(i64 104, ptr %25)
  %42 = getelementptr ptr, ptr %25, i32 %34
  %43 = getelementptr ptr, ptr %42, i32 3
  %44 = load ptr, ptr %43, align 8
  %45 = alloca { ptr, ptr, ptr }, align 8
  %46 = getelementptr { ptr, ptr, ptr }, ptr %45, i32 0, i32 0
  store ptr @i32_typ, ptr %46, align 8
  %47 = getelementptr { ptr, ptr, ptr }, ptr %45, i32 0, i32 1
  store ptr @f64_typ, ptr %47, align 8
  %48 = getelementptr { ptr, ptr, ptr }, ptr %45, i32 0, i32 2
  store ptr @i32_typ, ptr %48, align 8
  %49 = call ptr %44({ ptr, ptr, ptr, i32 } %35, ptr %45)
  call void %49({ ptr, ptr, ptr, i32 } %35, { ptr, ptr, ptr, i32 } %35, ptr %36, i32 5, double 5.000000e+00, i32 5)
  %50 = getelementptr { ptr, i160 }, ptr %20, i32 0, i32 0
  %51 = load ptr, ptr %50, align 8
  %52 = insertvalue { ptr, i160 } undef, ptr %51, 0
  %53 = getelementptr { ptr, i160 }, ptr %20, i32 0, i32 1
  %54 = load i160, ptr %53, align 4
  %55 = insertvalue { ptr, i160 } %52, i160 %54, 1
  ret { ptr, i160 } %55
}

define i32 @Animal_getter_skill(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { i32, double, i32 }, ptr %0, i32 0, i32 2
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @Animal_setter_skill(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { i32, double, i32 }, ptr %0, i32 0, i32 2
  store i32 %1, ptr %3, align 4
  ret void
}

define double @Animal_getter_hp(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { i32, double, i32 }, ptr %0, i32 0, i32 1
  %3 = load double, ptr %2, align 8
  ret double %3
}

define void @Animal_setter_hp(ptr %0, double %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { i32, double, i32 }, ptr %0, i32 0, i32 1
  store double %1, ptr %3, align 8
  ret void
}

define i32 @Animal_getter_age(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { i32, double, i32 }, ptr %0, i32 0, i32 0
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @Animal_setter_age(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { i32, double, i32 }, ptr %0, i32 0, i32 0
  store i32 %1, ptr %3, align 4
  ret void
}

define ptr @Beaver_B_init_colorPtri32_namePtrf64({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 -757315540097298781, i64 ptrtoint (ptr @f64_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [8 x ptr], ptr %26, i32 0, i32 5
  %28 = getelementptr ptr, ptr %27, i32 7
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @Beaver_B__ADD_xPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [8 x ptr], ptr %15, i32 0, i32 6
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Beaver_B_say_color_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [8 x ptr], ptr %4, i32 0, i32 7
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @Beaver_init_colorPtri32_namePtrf64({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3, double %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @Beaver)
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %22 = load ptr, ptr %21, align 8
  %23 = load ptr, ptr %8, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 64, ptr %23)
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %26 = load i32, ptr %25, align 4
  %27 = getelementptr ptr, ptr %23, i32 %26
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr { ptr, ptr }, ptr %28, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  call void %30(ptr %22, i32 %3)
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %32 = load ptr, ptr %31, align 8
  %33 = load ptr, ptr %8, align 8
  %34 = call ptr @llvm.invariant.start.p0(i64 64, ptr %33)
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %36 = load i32, ptr %35, align 4
  %37 = getelementptr ptr, ptr %33, i32 %36
  %38 = getelementptr ptr, ptr %37, i32 1
  %39 = load ptr, ptr %38, align 8
  %40 = getelementptr { ptr, ptr }, ptr %39, i32 0, i32 1
  %41 = load ptr, ptr %40, align 8
  call void %41(ptr %32, double %4)
  ret void
}

define void @Beaver__ADD_xPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Beaver)
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %21 = load ptr, ptr %20, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 64, ptr %22)
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %25 = load i32, ptr %24, align 4
  %26 = getelementptr ptr, ptr %22, i32 %25
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call i32 %29(ptr %21)
  %31 = add i32 %30, %3
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %33 = load ptr, ptr %32, align 8
  %34 = load ptr, ptr %7, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 64, ptr %34)
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %37 = load i32, ptr %36, align 4
  %38 = getelementptr ptr, ptr %34, i32 %37
  %39 = load ptr, ptr %38, align 8
  %40 = getelementptr { ptr, ptr }, ptr %39, i32 0, i32 1
  %41 = load ptr, ptr %40, align 8
  call void %41(ptr %33, i32 %31)
  ret void
}

define void @Beaver_say_color_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Beaver)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 64, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 0
  %28 = load ptr, ptr %27, align 8
  %29 = call i32 %28(ptr %20)
  %30 = alloca i160, align 8
  %31 = alloca ptr, align 8
  store i32 %29, ptr %30, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %31, align 4
  %32 = load ptr, ptr %31, align 8
  %33 = insertvalue { ptr, i160 } undef, ptr %32, 0
  %34 = load i160, ptr %30, align 4
  %35 = insertvalue { ptr, i160 } %33, i160 %34, 1
  %36 = alloca [1 x ptr], align 8
  %37 = getelementptr [1 x ptr], ptr %36, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %37, align 8
  %38 = call ptr @llvm.invariant.start.p0(i64 1, ptr %36)
  %39 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %40 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %41 = alloca { ptr }, align 8
  %42 = getelementptr { ptr }, ptr %41, i32 0, i32 0
  store ptr %32, ptr %42, align 8
  %43 = call ptr %40(ptr %41)
  call void %43(ptr %36, { ptr, i160 } %35)
  ret void
}

define double @Beaver_getter_name(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { i32, double }, ptr %0, i32 0, i32 1
  %3 = load double, ptr %2, align 8
  ret double %3
}

define void @Beaver_setter_name(ptr %0, double %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { i32, double }, ptr %0, i32 0, i32 1
  store double %1, ptr %3, align 8
  ret void
}

define i32 @Beaver_getter_color(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { i32, double }, ptr %0, i32 0, i32 0
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @Beaver_setter_color(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { i32, double }, ptr %0, i32 0, i32 0
  store i32 %1, ptr %3, align 4
  ret void
}

define ptr @ListNode_B_init_dataPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [12 x ptr], ptr %15, i32 0, i32 7
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ListNode_B_push_nextListNode({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -1756024950533091476, i64 ptrtoint (ptr @ListNode to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [12 x ptr], ptr %15, i32 0, i32 8
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ListNode_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [12 x ptr], ptr %4, i32 0, i32 9
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @ListNode_B_data_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [12 x ptr], ptr %4, i32 0, i32 10
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @ListNode_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [12 x ptr], ptr %4, i32 0, i32 11
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @ListNode_init_dataPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @ListNode)
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %21 = load ptr, ptr %20, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 96, ptr %22)
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %25 = load i32, ptr %24, align 4
  %26 = getelementptr ptr, ptr %22, i32 %25
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 1
  %29 = load ptr, ptr %28, align 8
  call void %29(ptr %21, i32 %3)
  %30 = alloca i160, align 8
  %31 = alloca ptr, align 8
  store [0 x i8] undef, ptr %30, align 1
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %31, align 4
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %33 = load ptr, ptr %32, align 8
  %34 = load ptr, ptr %7, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 96, ptr %34)
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %37 = load i32, ptr %36, align 4
  %38 = getelementptr ptr, ptr %34, i32 %37
  %39 = getelementptr ptr, ptr %38, i32 1
  %40 = load ptr, ptr %39, align 8
  %41 = getelementptr { ptr, ptr }, ptr %40, i32 0, i32 1
  %42 = load ptr, ptr %41, align 8
  %43 = load ptr, ptr %31, align 8
  %44 = insertvalue { ptr, i160 } undef, ptr %43, 0
  %45 = load i160, ptr %30, align 4
  %46 = insertvalue { ptr, i160 } %44, i160 %45, 1
  call void %42(ptr %33, { ptr, i160 } %46)
  ret void
}

define { ptr, ptr, ptr, i32 } @ListNode_push_nextListNode({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @ListNode)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 16, ptr %20)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %34 = load i32, ptr %32, align 4
  store i32 %34, ptr %33, align 4
  call void @set_offset(ptr %22, ptr @ListNode)
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = load ptr, ptr %7, align 8
  %38 = call ptr @llvm.invariant.start.p0(i64 96, ptr %37)
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %40 = load i32, ptr %39, align 4
  %41 = getelementptr ptr, ptr %37, i32 %40
  %42 = getelementptr ptr, ptr %41, i32 1
  %43 = load ptr, ptr %42, align 8
  %44 = getelementptr { ptr, ptr }, ptr %43, i32 0, i32 1
  %45 = load ptr, ptr %44, align 8
  %46 = getelementptr { ptr, i160 }, ptr %22, i32 0, i32 0
  %47 = load ptr, ptr %46, align 8
  %48 = insertvalue { ptr, i160 } undef, ptr %47, 0
  %49 = getelementptr { ptr, i160 }, ptr %22, i32 0, i32 1
  %50 = load i160, ptr %49, align 4
  %51 = insertvalue { ptr, i160 } %48, i160 %50, 1
  call void %45(ptr %36, { ptr, i160 } %51)
  %52 = alloca { ptr, ptr, ptr, i32 }, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 0
  %55 = load ptr, ptr %53, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 1
  %58 = load ptr, ptr %56, align 8
  store ptr %58, ptr %57, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 2
  %61 = load ptr, ptr %59, align 8
  store ptr %61, ptr %60, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 3
  %64 = load i32, ptr %62, align 4
  store i32 %64, ptr %63, align 4
  call void @set_offset(ptr %52, ptr @ListNode)
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 0
  %66 = load ptr, ptr %65, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %66, 0
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = insertvalue { ptr, ptr, ptr, i32 } %67, ptr %69, 1
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 2
  %72 = load ptr, ptr %71, align 8
  %73 = insertvalue { ptr, ptr, ptr, i32 } %70, ptr %72, 2
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 3
  %75 = load i32, ptr %74, align 4
  %76 = insertvalue { ptr, ptr, ptr, i32 } %73, i32 %75, 3
  ret { ptr, ptr, ptr, i32 } %76
}

define { ptr, i160 } @ListNode_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @ListNode)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 96, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 1
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call { ptr, i160 } %29(ptr %20)
  %31 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %30, ptr %31, align 8
  %32 = getelementptr { ptr, i160 }, ptr %31, i32 0, i32 0
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, i160 } undef, ptr %33, 0
  %35 = getelementptr { ptr, i160 }, ptr %31, i32 0, i32 1
  %36 = load i160, ptr %35, align 4
  %37 = insertvalue { ptr, i160 } %34, i160 %36, 1
  ret { ptr, i160 } %37
}

define i32 @ListNode_data_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @ListNode)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 96, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 0
  %28 = load ptr, ptr %27, align 8
  %29 = call i32 %28(ptr %20)
  ret i32 %29
}

define { ptr, ptr, ptr, i32 } @ListNode_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @ListNode)
  %19 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ i32, { ptr, i160 } }, ptr null, i32 1) to i64))
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  store ptr @ListNode, ptr %20, align 8
  store ptr %19, ptr %21, align 8
  store i32 7, ptr %22, align 4
  %23 = call ptr @llvm.invariant.start.p0(i64 16, ptr %20)
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %25 = load ptr, ptr %24, align 8
  %26 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %25, 0
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = insertvalue { ptr, ptr, ptr, i32 } %26, ptr %28, 1
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %31 = load ptr, ptr %30, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } %29, ptr %31, 2
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %34 = load i32, ptr %33, align 4
  %35 = insertvalue { ptr, ptr, ptr, i32 } %32, i32 %34, 3
  %36 = alloca [1 x ptr], align 8
  %37 = getelementptr [1 x ptr], ptr %36, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %37, align 8
  %38 = call ptr @llvm.invariant.start.p0(i64 1, ptr %36)
  %39 = call ptr @llvm.invariant.start.p0(i64 96, ptr %25)
  %40 = getelementptr ptr, ptr %25, i32 %34
  %41 = getelementptr ptr, ptr %40, i32 2
  %42 = load ptr, ptr %41, align 8
  %43 = alloca { ptr }, align 8
  %44 = getelementptr { ptr }, ptr %43, i32 0, i32 0
  store ptr @i32_typ, ptr %44, align 8
  %45 = call ptr %42({ ptr, ptr, ptr, i32 } %35, ptr %43)
  call void %45({ ptr, ptr, ptr, i32 } %35, { ptr, ptr, ptr, i32 } %35, ptr %36, i32 0)
  %46 = alloca { ptr, ptr, ptr, i32 }, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %49 = load ptr, ptr %47, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %52 = load ptr, ptr %50, align 8
  store ptr %52, ptr %51, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %55 = load ptr, ptr %53, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %58 = load i32, ptr %56, align 4
  store i32 %58, ptr %57, align 4
  call void @set_offset(ptr %46, ptr @ListNode)
  %59 = alloca { ptr, ptr, ptr, i32 }, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 0
  %62 = load ptr, ptr %60, align 8
  store ptr %62, ptr %61, align 8
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 1
  %65 = load ptr, ptr %63, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 2
  %68 = load ptr, ptr %66, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 3
  %71 = load i32, ptr %69, align 4
  store i32 %71, ptr %70, align 4
  %72 = call ptr @llvm.invariant.start.p0(i64 16, ptr %59)
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %76 = load ptr, ptr %74, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %79 = load ptr, ptr %77, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %82 = load ptr, ptr %80, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %85 = load i32, ptr %83, align 4
  store i32 %85, ptr %84, align 4
  call void @set_offset(ptr %73, ptr @ListNode)
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %87 = load ptr, ptr %86, align 8
  %88 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %87, 0
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %90 = load ptr, ptr %89, align 8
  %91 = insertvalue { ptr, ptr, ptr, i32 } %88, ptr %90, 1
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %93 = load ptr, ptr %92, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } %91, ptr %93, 2
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %96 = load i32, ptr %95, align 4
  %97 = insertvalue { ptr, ptr, ptr, i32 } %94, i32 %96, 3
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 0
  %99 = load ptr, ptr %98, align 8
  %100 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %99, 0
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 1
  %102 = load ptr, ptr %101, align 8
  %103 = insertvalue { ptr, ptr, ptr, i32 } %100, ptr %102, 1
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 2
  %105 = load ptr, ptr %104, align 8
  %106 = insertvalue { ptr, ptr, ptr, i32 } %103, ptr %105, 2
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 3
  %108 = load i32, ptr %107, align 4
  %109 = insertvalue { ptr, ptr, ptr, i32 } %106, i32 %108, 3
  %110 = alloca [1 x ptr], align 8
  %111 = getelementptr [1 x ptr], ptr %110, i32 0, i32 0
  store ptr @_parameterization_ListNode, ptr %111, align 8
  %112 = call ptr @llvm.invariant.start.p0(i64 1, ptr %110)
  %113 = call ptr @llvm.invariant.start.p0(i64 96, ptr %99)
  %114 = getelementptr ptr, ptr %99, i32 %108
  %115 = getelementptr ptr, ptr %114, i32 3
  %116 = load ptr, ptr %115, align 8
  %117 = alloca { ptr }, align 8
  %118 = getelementptr { ptr }, ptr %117, i32 0, i32 0
  store ptr %87, ptr %118, align 8
  %119 = call ptr %116({ ptr, ptr, ptr, i32 } %109, ptr %117)
  %120 = call { ptr, ptr, ptr, i32 } %119({ ptr, ptr, ptr, i32 } %109, { ptr, ptr, ptr, i32 } %109, ptr %110, { ptr, ptr, ptr, i32 } %97)
  %121 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %120, ptr %121, align 8
  %122 = call ptr @llvm.invariant.start.p0(i64 16, ptr %121)
  %123 = alloca { ptr, ptr, ptr, i32 }, align 8
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %121, i32 0, i32 0
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 0
  %126 = load ptr, ptr %124, align 8
  store ptr %126, ptr %125, align 8
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %121, i32 0, i32 1
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 1
  %129 = load ptr, ptr %127, align 8
  store ptr %129, ptr %128, align 8
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %121, i32 0, i32 2
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 2
  %132 = load ptr, ptr %130, align 8
  store ptr %132, ptr %131, align 8
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %121, i32 0, i32 3
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 3
  %135 = load i32, ptr %133, align 4
  store i32 %135, ptr %134, align 4
  call void @set_offset(ptr %123, ptr @ListNode)
  %136 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr, ptr, ptr, i32 } }, ptr null, i32 1) to i64))
  %137 = alloca { ptr, ptr, ptr, i32 }, align 8
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %137, i32 0, i32 1
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %137, i32 0, i32 3
  store ptr @ListIterator, ptr %137, align 8
  store ptr %136, ptr %138, align 8
  store i32 7, ptr %139, align 4
  %140 = call ptr @llvm.invariant.start.p0(i64 16, ptr %137)
  %141 = alloca { ptr, ptr, ptr, i32 }, align 8
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 0
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 0
  %144 = load ptr, ptr %142, align 8
  store ptr %144, ptr %143, align 8
  %145 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 1
  %146 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 1
  %147 = load ptr, ptr %145, align 8
  store ptr %147, ptr %146, align 8
  %148 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 2
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 2
  %150 = load ptr, ptr %148, align 8
  store ptr %150, ptr %149, align 8
  %151 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 3
  %152 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 3
  %153 = load i32, ptr %151, align 4
  store i32 %153, ptr %152, align 4
  call void @set_offset(ptr %141, ptr @ListNode)
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 0
  %155 = load ptr, ptr %154, align 8
  %156 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %155, 0
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 1
  %158 = load ptr, ptr %157, align 8
  %159 = insertvalue { ptr, ptr, ptr, i32 } %156, ptr %158, 1
  %160 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 2
  %161 = load ptr, ptr %160, align 8
  %162 = insertvalue { ptr, ptr, ptr, i32 } %159, ptr %161, 2
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 3
  %164 = load i32, ptr %163, align 4
  %165 = insertvalue { ptr, ptr, ptr, i32 } %162, i32 %164, 3
  %166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %137, i32 0, i32 0
  %167 = load ptr, ptr %166, align 8
  %168 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %167, 0
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %137, i32 0, i32 1
  %170 = load ptr, ptr %169, align 8
  %171 = insertvalue { ptr, ptr, ptr, i32 } %168, ptr %170, 1
  %172 = getelementptr { ptr, ptr, ptr, i32 }, ptr %137, i32 0, i32 2
  %173 = load ptr, ptr %172, align 8
  %174 = insertvalue { ptr, ptr, ptr, i32 } %171, ptr %173, 2
  %175 = getelementptr { ptr, ptr, ptr, i32 }, ptr %137, i32 0, i32 3
  %176 = load i32, ptr %175, align 4
  %177 = insertvalue { ptr, ptr, ptr, i32 } %174, i32 %176, 3
  %178 = alloca [1 x ptr], align 8
  %179 = getelementptr [1 x ptr], ptr %178, i32 0, i32 0
  store ptr @_parameterization_ListNode, ptr %179, align 8
  %180 = call ptr @llvm.invariant.start.p0(i64 1, ptr %178)
  %181 = call ptr @llvm.invariant.start.p0(i64 40, ptr %167)
  %182 = getelementptr ptr, ptr %167, i32 %176
  %183 = getelementptr ptr, ptr %182, i32 1
  %184 = load ptr, ptr %183, align 8
  %185 = alloca { ptr }, align 8
  %186 = getelementptr { ptr }, ptr %185, i32 0, i32 0
  store ptr %155, ptr %186, align 8
  %187 = call ptr %184({ ptr, ptr, ptr, i32 } %177, ptr %185)
  call void %187({ ptr, ptr, ptr, i32 } %177, { ptr, ptr, ptr, i32 } %177, ptr %178, { ptr, ptr, ptr, i32 } %165)
  %188 = alloca { ptr, ptr, ptr, i32 }, align 8
  %189 = getelementptr { ptr, ptr, ptr, i32 }, ptr %137, i32 0, i32 0
  %190 = getelementptr { ptr, ptr, ptr, i32 }, ptr %188, i32 0, i32 0
  %191 = load ptr, ptr %189, align 8
  store ptr %191, ptr %190, align 8
  %192 = getelementptr { ptr, ptr, ptr, i32 }, ptr %137, i32 0, i32 1
  %193 = getelementptr { ptr, ptr, ptr, i32 }, ptr %188, i32 0, i32 1
  %194 = load ptr, ptr %192, align 8
  store ptr %194, ptr %193, align 8
  %195 = getelementptr { ptr, ptr, ptr, i32 }, ptr %137, i32 0, i32 2
  %196 = getelementptr { ptr, ptr, ptr, i32 }, ptr %188, i32 0, i32 2
  %197 = load ptr, ptr %195, align 8
  store ptr %197, ptr %196, align 8
  %198 = getelementptr { ptr, ptr, ptr, i32 }, ptr %137, i32 0, i32 3
  %199 = getelementptr { ptr, ptr, ptr, i32 }, ptr %188, i32 0, i32 3
  %200 = load i32, ptr %198, align 4
  store i32 %200, ptr %199, align 4
  call void @set_offset(ptr %188, ptr @ListIterator)
  %201 = getelementptr { ptr, ptr, ptr, i32 }, ptr %188, i32 0, i32 0
  %202 = load ptr, ptr %201, align 8
  %203 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %202, 0
  %204 = getelementptr { ptr, ptr, ptr, i32 }, ptr %188, i32 0, i32 1
  %205 = load ptr, ptr %204, align 8
  %206 = insertvalue { ptr, ptr, ptr, i32 } %203, ptr %205, 1
  %207 = getelementptr { ptr, ptr, ptr, i32 }, ptr %188, i32 0, i32 2
  %208 = load ptr, ptr %207, align 8
  %209 = insertvalue { ptr, ptr, ptr, i32 } %206, ptr %208, 2
  %210 = getelementptr { ptr, ptr, ptr, i32 }, ptr %188, i32 0, i32 3
  %211 = load i32, ptr %210, align 4
  %212 = insertvalue { ptr, ptr, ptr, i32 } %209, i32 %211, 3
  ret { ptr, ptr, ptr, i32 } %212
}

define ptr @ListIterator_B_init_nodeListNode({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -1756024950533091476, i64 ptrtoint (ptr @ListNode to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [5 x ptr], ptr %15, i32 0, i32 3
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ListIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [5 x ptr], ptr %4, i32 0, i32 4
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @ListIterator_init_nodeListNode({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @ListIterator)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 16, ptr %20)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %34 = load i32, ptr %32, align 4
  store i32 %34, ptr %33, align 4
  call void @set_offset(ptr %22, ptr @ListNode)
  %35 = alloca { ptr, ptr, ptr, i32 }, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %38 = load ptr, ptr %36, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %41 = load ptr, ptr %39, align 8
  store ptr %41, ptr %40, align 8
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %44 = load ptr, ptr %42, align 8
  store ptr %44, ptr %43, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %47 = load i32, ptr %45, align 4
  store i32 %47, ptr %46, align 4
  call void @set_offset(ptr %35, ptr @ListNode)
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = load ptr, ptr %7, align 8
  %51 = call ptr @llvm.invariant.start.p0(i64 40, ptr %50)
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %53 = load i32, ptr %52, align 4
  %54 = getelementptr ptr, ptr %50, i32 %53
  %55 = load ptr, ptr %54, align 8
  %56 = getelementptr { ptr, ptr }, ptr %55, i32 0, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %59 = load ptr, ptr %58, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %59, 0
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %62 = load ptr, ptr %61, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr %62, 1
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %65 = load ptr, ptr %64, align 8
  %66 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %65, 2
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %68 = load i32, ptr %67, align 4
  %69 = insertvalue { ptr, ptr, ptr, i32 } %66, i32 %68, 3
  call void %57(ptr %49, { ptr, ptr, ptr, i32 } %69)
  ret void
}

define { ptr, i160 } @ListIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @ListIterator)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 40, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 0
  %28 = load ptr, ptr %27, align 8
  %29 = call { ptr, ptr, ptr, i32 } %28(ptr %20)
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %29, ptr %30, align 8
  %31 = call ptr @llvm.invariant.start.p0(i64 16, ptr %30)
  call void @assume_offset(ptr %30, ptr @ListNode)
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %33, 0
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %36, 1
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %39 = load ptr, ptr %38, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %39, 2
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %42 = load i32, ptr %41, align 4
  %43 = insertvalue { ptr, ptr, ptr, i32 } %40, i32 %42, 3
  %44 = alloca [0 x ptr], align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 0, ptr %44)
  %46 = call ptr @llvm.invariant.start.p0(i64 96, ptr %33)
  %47 = getelementptr ptr, ptr %33, i32 %42
  %48 = getelementptr ptr, ptr %47, i32 4
  %49 = load ptr, ptr %48, align 8
  %50 = alloca {}, align 8
  %51 = call ptr %49({ ptr, ptr, ptr, i32 } %43, ptr %50)
  %52 = call { ptr, i160 } %51({ ptr, ptr, ptr, i32 } %43, { ptr, ptr, ptr, i32 } %43, ptr %44)
  %53 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %52, ptr %53, align 8
  %54 = getelementptr { ptr, i160 }, ptr %53, i32 0, i32 0
  %55 = load ptr, ptr %54, align 8
  %56 = ptrtoint ptr %55 to i64
  %57 = icmp eq i64 %56, ptrtoint (ptr @nil_typ to i64)
  %58 = icmp eq i64 %56, 0
  %59 = or i1 %57, %58
  %60 = icmp eq i1 %59, false
  %61 = alloca { ptr, ptr, ptr, i32 }, align 8
  %62 = alloca { ptr, ptr, ptr, i32 }, align 8
  %63 = alloca { ptr, ptr, ptr, i32 }, align 8
  %64 = alloca [0 x i8], align 1
  %65 = alloca i160, align 8
  %66 = alloca ptr, align 8
  %67 = alloca i64, align 8
  br i1 %60, label %68, label %127

68:                                               ; preds = %3
  %69 = getelementptr { ptr, i160 }, ptr %53, i32 0, i32 0
  %70 = getelementptr { ptr, i160 }, ptr %61, i32 0, i32 0
  %71 = load ptr, ptr %69, align 8
  store ptr %71, ptr %70, align 8
  %72 = getelementptr { ptr, i160 }, ptr %53, i32 0, i32 1
  %73 = getelementptr { ptr, i160 }, ptr %61, i32 0, i32 1
  %74 = load i160, ptr %72, align 4
  store i160 %74, ptr %73, align 4
  call void @set_offset(ptr %61, ptr @ListNode)
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 0
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 0
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 1
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 1
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 2
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 2
  %83 = load ptr, ptr %81, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %61, i32 0, i32 3
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 3
  %86 = load i32, ptr %84, align 4
  store i32 %86, ptr %85, align 4
  call void @set_offset(ptr %62, ptr @ListNode)
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %88 = load ptr, ptr %87, align 8
  %89 = load ptr, ptr %6, align 8
  %90 = call ptr @llvm.invariant.start.p0(i64 40, ptr %89)
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %92 = load i32, ptr %91, align 4
  %93 = getelementptr ptr, ptr %89, i32 %92
  %94 = load ptr, ptr %93, align 8
  %95 = getelementptr { ptr, ptr }, ptr %94, i32 0, i32 1
  %96 = load ptr, ptr %95, align 8
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 0
  %98 = load ptr, ptr %97, align 8
  %99 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %98, 0
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 1
  %101 = load ptr, ptr %100, align 8
  %102 = insertvalue { ptr, ptr, ptr, i32 } %99, ptr %101, 1
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 2
  %104 = load ptr, ptr %103, align 8
  %105 = insertvalue { ptr, ptr, ptr, i32 } %102, ptr %104, 2
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 3
  %107 = load i32, ptr %106, align 4
  %108 = insertvalue { ptr, ptr, ptr, i32 } %105, i32 %107, 3
  call void %96(ptr %88, { ptr, ptr, ptr, i32 } %108)
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %110 = load ptr, ptr %109, align 8
  %111 = load ptr, ptr %6, align 8
  %112 = call ptr @llvm.invariant.start.p0(i64 40, ptr %111)
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %114 = load i32, ptr %113, align 4
  %115 = getelementptr ptr, ptr %111, i32 %114
  %116 = load ptr, ptr %115, align 8
  %117 = getelementptr { ptr, ptr }, ptr %116, i32 0, i32 0
  %118 = load ptr, ptr %117, align 8
  %119 = call { ptr, ptr, ptr, i32 } %118(ptr %110)
  store { ptr, ptr, ptr, i32 } %119, ptr %63, align 8
  %120 = call ptr @llvm.invariant.start.p0(i64 16, ptr %63)
  call void @assume_offset(ptr %63, ptr @ListNode)
  %121 = getelementptr { ptr, i160 }, ptr %63, i32 0, i32 0
  %122 = load ptr, ptr %121, align 8
  %123 = insertvalue { ptr, i160 } undef, ptr %122, 0
  %124 = getelementptr { ptr, i160 }, ptr %63, i32 0, i32 1
  %125 = load i160, ptr %124, align 4
  %126 = insertvalue { ptr, i160 } %123, i160 %125, 1
  store { ptr, i160 } %126, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem5, align 8
  br label %134

127:                                              ; preds = %3
  %128 = load [0 x i8], ptr %64, align 1
  store [0 x i8] %128, ptr %65, align 1
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %67, align 4
  %129 = load i64, ptr %67, align 4
  store i64 %129, ptr %66, align 4
  %130 = load ptr, ptr %66, align 8
  %131 = insertvalue { ptr, i160 } undef, ptr %130, 0
  %132 = load i160, ptr %65, align 4
  %133 = insertvalue { ptr, i160 } %131, i160 %132, 1
  store { ptr, i160 } %133, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem5, align 8
  br label %134

134:                                              ; preds = %127, %68
  %.reload6 = load { ptr, i160 }, ptr %.reg2mem5, align 8
  store { ptr, i160 } %.reload6, ptr %.reg2mem, align 8
  br label %135

135:                                              ; preds = %134
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  ret { ptr, i160 } %.reload
}

define { ptr, ptr, ptr, i32 } @ListIterator_getter_node(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 0
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @ListIterator_setter_node(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 0
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  ret void
}

define { ptr, i160 } @ListNode_getter_next(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { i32, { ptr, i160 } }, ptr %0, i32 0, i32 1
  %3 = getelementptr { ptr, i160 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, i160 } undef, ptr %4, 0
  %6 = getelementptr { ptr, i160 }, ptr %2, i32 0, i32 1
  %7 = load i160, ptr %6, align 4
  %8 = insertvalue { ptr, i160 } %5, i160 %7, 1
  ret { ptr, i160 } %8
}

define void @ListNode_setter_next(ptr %0, { ptr, i160 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { i32, { ptr, i160 } }, ptr %0, i32 0, i32 1
  %4 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %1, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 0
  %6 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %9 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %10 = load i160, ptr %8, align 4
  store i160 %10, ptr %9, align 4
  ret void
}

define i32 @ListNode_getter_data(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { i32, { ptr, i160 } }, ptr %0, i32 0, i32 0
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @ListNode_setter_data(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { i32, { ptr, i160 } }, ptr %0, i32 0, i32 0
  store i32 %1, ptr %3, align 4
  ret void
}

define ptr @Bard_B_init_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [7 x ptr], ptr %4, i32 0, i32 2
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Bard_B_take_aPtri32_bPtrf64_take_aPtrf64_bPtrf64_take_aAnimal_bBeaver_take_aPtri32_bPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i32, align 4
  %.reg2mem5 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  br i1 %14, label %15, label %42

15:                                               ; preds = %2
  %16 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %17 = load ptr, ptr %16, align 8
  %18 = getelementptr ptr, ptr %17, i32 1
  %19 = getelementptr ptr, ptr %17, i32 2
  %20 = getelementptr ptr, ptr %17, i32 3
  %21 = getelementptr ptr, ptr %17, i32 4
  %22 = load i64, ptr %18, align 4
  %23 = load i64, ptr %19, align 4
  %24 = load ptr, ptr %20, align 8
  %25 = load ptr, ptr %21, align 8
  %26 = call i1 @subtype_test_wrapper(ptr %24, i64 %23, i64 %22, i64 -757315540097298781, i64 ptrtoint (ptr @f64_typ to i64), ptr %25)
  %27 = select i1 %26, i32 3, i32 6
  store i32 %27, ptr %.reg2mem3, align 4
  br i1 %26, label %28, label %29

28:                                               ; preds = %15
  br label %41

29:                                               ; preds = %15
  %30 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %31 = load ptr, ptr %30, align 8
  %32 = getelementptr ptr, ptr %31, i32 1
  %33 = getelementptr ptr, ptr %31, i32 2
  %34 = getelementptr ptr, ptr %31, i32 3
  %35 = getelementptr ptr, ptr %31, i32 4
  %36 = load i64, ptr %32, align 4
  %37 = load i64, ptr %33, align 4
  %38 = load ptr, ptr %34, align 8
  %39 = load ptr, ptr %35, align 8
  %40 = call i1 @subtype_test_wrapper(ptr %38, i64 %37, i64 %36, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %39)
  br label %41

41:                                               ; preds = %29, %28
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  store i32 %.reload4, ptr %.reg2mem5, align 4
  br label %91

42:                                               ; preds = %2
  %43 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %44 = load ptr, ptr %43, align 8
  %45 = getelementptr ptr, ptr %44, i32 1
  %46 = getelementptr ptr, ptr %44, i32 2
  %47 = getelementptr ptr, ptr %44, i32 3
  %48 = getelementptr ptr, ptr %44, i32 4
  %49 = load i64, ptr %45, align 4
  %50 = load i64, ptr %46, align 4
  %51 = load ptr, ptr %47, align 8
  %52 = load ptr, ptr %48, align 8
  %53 = call i1 @subtype_test_wrapper(ptr %51, i64 %50, i64 %49, i64 -757315540097298781, i64 ptrtoint (ptr @f64_typ to i64), ptr %52)
  %54 = select i1 %53, i32 4, i32 5
  store i32 %54, ptr %.reg2mem1, align 4
  br i1 %53, label %55, label %67

55:                                               ; preds = %42
  %56 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr ptr, ptr %57, i32 1
  %59 = getelementptr ptr, ptr %57, i32 2
  %60 = getelementptr ptr, ptr %57, i32 3
  %61 = getelementptr ptr, ptr %57, i32 4
  %62 = load i64, ptr %58, align 4
  %63 = load i64, ptr %59, align 4
  %64 = load ptr, ptr %60, align 8
  %65 = load ptr, ptr %61, align 8
  %66 = call i1 @subtype_test_wrapper(ptr %64, i64 %63, i64 %62, i64 -757315540097298781, i64 ptrtoint (ptr @f64_typ to i64), ptr %65)
  br label %90

67:                                               ; preds = %42
  %68 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %69 = load ptr, ptr %68, align 8
  %70 = getelementptr ptr, ptr %69, i32 1
  %71 = getelementptr ptr, ptr %69, i32 2
  %72 = getelementptr ptr, ptr %69, i32 3
  %73 = getelementptr ptr, ptr %69, i32 4
  %74 = load i64, ptr %70, align 4
  %75 = load i64, ptr %71, align 4
  %76 = load ptr, ptr %72, align 8
  %77 = load ptr, ptr %73, align 8
  %78 = call i1 @subtype_test_wrapper(ptr %76, i64 %75, i64 %74, i64 1075018126824711487, i64 ptrtoint (ptr @Animal to i64), ptr %77)
  %79 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %80 = load ptr, ptr %79, align 8
  %81 = getelementptr ptr, ptr %80, i32 1
  %82 = getelementptr ptr, ptr %80, i32 2
  %83 = getelementptr ptr, ptr %80, i32 3
  %84 = getelementptr ptr, ptr %80, i32 4
  %85 = load i64, ptr %81, align 4
  %86 = load i64, ptr %82, align 4
  %87 = load ptr, ptr %83, align 8
  %88 = load ptr, ptr %84, align 8
  %89 = call i1 @subtype_test_wrapper(ptr %87, i64 %86, i64 %85, i64 -6124772949900838462, i64 ptrtoint (ptr @Beaver to i64), ptr %88)
  br label %90

90:                                               ; preds = %67, %55
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem5, align 4
  br label %91

91:                                               ; preds = %90, %41
  %.reload6 = load i32, ptr %.reg2mem5, align 4
  store i32 %.reload6, ptr %.reg2mem, align 4
  br label %92

92:                                               ; preds = %91
  %.reload = load i32, ptr %.reg2mem, align 4
  %93 = zext i32 %.reload to i64
  %94 = or i64 0, %93
  %95 = inttoptr i64 %94 to ptr
  %96 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %97 = ptrtoint ptr %95 to i64
  %98 = trunc i64 %97 to i32
  %99 = getelementptr [7 x ptr], ptr %96, i32 0, i32 %98
  %100 = getelementptr ptr, ptr %99, i32 7
  %101 = load ptr, ptr %100, align 8
  ret ptr %101
}

define void @Bard_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Bard)
  ret void
}

define void @Bard_take_aPtri32_bPtrf64({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3, { ptr, i160 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @Bard)
  %21 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %21, align 8
  %22 = getelementptr { ptr, i160 }, ptr %21, i32 0, i32 1
  %23 = load i32, ptr %22, align 4
  %24 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %4, ptr %24, align 8
  %25 = getelementptr { ptr, i160 }, ptr %24, i32 0, i32 1
  %26 = load double, ptr %25, align 8
  %27 = alloca i160, align 8
  %28 = alloca ptr, align 8
  store i32 %23, ptr %27, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %28, align 4
  %29 = load ptr, ptr %28, align 8
  %30 = insertvalue { ptr, i160 } undef, ptr %29, 0
  %31 = load i160, ptr %27, align 4
  %32 = insertvalue { ptr, i160 } %30, i160 %31, 1
  %33 = alloca [1 x ptr], align 8
  %34 = getelementptr [1 x ptr], ptr %33, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %34, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 1, ptr %33)
  %36 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %37 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %38 = alloca { ptr }, align 8
  %39 = getelementptr { ptr }, ptr %38, i32 0, i32 0
  store ptr %29, ptr %39, align 8
  %40 = call ptr %37(ptr %38)
  call void %40(ptr %33, { ptr, i160 } %32)
  %41 = alloca i160, align 8
  %42 = alloca ptr, align 8
  store double %26, ptr %41, align 8
  store i64 ptrtoint (ptr @f64_typ to i64), ptr %42, align 4
  %43 = load ptr, ptr %42, align 8
  %44 = insertvalue { ptr, i160 } undef, ptr %43, 0
  %45 = load i160, ptr %41, align 4
  %46 = insertvalue { ptr, i160 } %44, i160 %45, 1
  %47 = alloca [1 x ptr], align 8
  %48 = getelementptr [1 x ptr], ptr %47, i32 0, i32 0
  store ptr @_parameterization_Ptrf64, ptr %48, align 8
  %49 = call ptr @llvm.invariant.start.p0(i64 1, ptr %47)
  %50 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %51 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %52 = alloca { ptr }, align 8
  %53 = getelementptr { ptr }, ptr %52, i32 0, i32 0
  store ptr %43, ptr %53, align 8
  %54 = call ptr %51(ptr %52)
  call void %54(ptr %47, { ptr, i160 } %46)
  ret void
}

define void @Bard_take_aPtrf64_bPtrf64({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3, { ptr, i160 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @Bard)
  %21 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %21, align 8
  %22 = getelementptr { ptr, i160 }, ptr %21, i32 0, i32 1
  %23 = load double, ptr %22, align 8
  %24 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %4, ptr %24, align 8
  %25 = getelementptr { ptr, i160 }, ptr %24, i32 0, i32 1
  %26 = load double, ptr %25, align 8
  %27 = alloca i160, align 8
  %28 = alloca ptr, align 8
  store double %23, ptr %27, align 8
  store i64 ptrtoint (ptr @f64_typ to i64), ptr %28, align 4
  %29 = load ptr, ptr %28, align 8
  %30 = insertvalue { ptr, i160 } undef, ptr %29, 0
  %31 = load i160, ptr %27, align 4
  %32 = insertvalue { ptr, i160 } %30, i160 %31, 1
  %33 = alloca [1 x ptr], align 8
  %34 = getelementptr [1 x ptr], ptr %33, i32 0, i32 0
  store ptr @_parameterization_Ptrf64, ptr %34, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 1, ptr %33)
  %36 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %37 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %38 = alloca { ptr }, align 8
  %39 = getelementptr { ptr }, ptr %38, i32 0, i32 0
  store ptr %29, ptr %39, align 8
  %40 = call ptr %37(ptr %38)
  call void %40(ptr %33, { ptr, i160 } %32)
  %41 = alloca i160, align 8
  %42 = alloca ptr, align 8
  store double %26, ptr %41, align 8
  store i64 ptrtoint (ptr @f64_typ to i64), ptr %42, align 4
  %43 = load ptr, ptr %42, align 8
  %44 = insertvalue { ptr, i160 } undef, ptr %43, 0
  %45 = load i160, ptr %41, align 4
  %46 = insertvalue { ptr, i160 } %44, i160 %45, 1
  %47 = alloca [1 x ptr], align 8
  %48 = getelementptr [1 x ptr], ptr %47, i32 0, i32 0
  store ptr @_parameterization_Ptrf64, ptr %48, align 8
  %49 = call ptr @llvm.invariant.start.p0(i64 1, ptr %47)
  %50 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %51 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %52 = alloca { ptr }, align 8
  %53 = getelementptr { ptr }, ptr %52, i32 0, i32 0
  store ptr %43, ptr %53, align 8
  %54 = call ptr %51(ptr %52)
  call void %54(ptr %47, { ptr, i160 } %46)
  ret void
}

define void @Bard_take_aAnimal_bBeaver({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3, { ptr, i160 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @Bard)
  %21 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %21, align 8
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = getelementptr { ptr, i160 }, ptr %21, i32 0, i32 0
  %24 = getelementptr { ptr, i160 }, ptr %22, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, i160 }, ptr %21, i32 0, i32 1
  %27 = getelementptr { ptr, i160 }, ptr %22, i32 0, i32 1
  %28 = load i160, ptr %26, align 4
  store i160 %28, ptr %27, align 4
  call void @set_offset(ptr %22, ptr @Animal)
  %29 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %4, ptr %29, align 8
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  %31 = getelementptr { ptr, i160 }, ptr %29, i32 0, i32 0
  %32 = getelementptr { ptr, i160 }, ptr %30, i32 0, i32 0
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, i160 }, ptr %29, i32 0, i32 1
  %35 = getelementptr { ptr, i160 }, ptr %30, i32 0, i32 1
  %36 = load i160, ptr %34, align 4
  store i160 %36, ptr %35, align 4
  call void @set_offset(ptr %30, ptr @Beaver)
  %37 = alloca ptr, align 8
  %38 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 8) to i64))
  store ptr %38, ptr %37, align 8
  %39 = alloca { ptr }, align 8
  %40 = getelementptr { ptr }, ptr %37, i32 0, i32 0
  %41 = getelementptr { ptr }, ptr %39, i32 0, i32 0
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 16, ptr %39)
  %44 = load ptr, ptr %39, align 8
  %45 = getelementptr i8, ptr %44, i64 0
  %46 = load i56, ptr @gyjjp_animal, align 4
  store i56 %46, ptr %45, align 4
  %47 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %48 = alloca { ptr, ptr, ptr, i32 }, align 8
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 1
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 3
  store ptr @String, ptr %48, align 8
  store ptr %47, ptr %49, align 8
  store i32 7, ptr %50, align 4
  %51 = call ptr @llvm.invariant.start.p0(i64 16, ptr %48)
  %52 = getelementptr { ptr }, ptr %39, i32 0, i32 0
  %53 = load ptr, ptr %52, align 8
  %54 = insertvalue { ptr } undef, ptr %53, 0
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 0
  %56 = load ptr, ptr %55, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %56, 0
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } %57, ptr %59, 1
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 2
  %62 = load ptr, ptr %61, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr %62, 2
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %48, i32 0, i32 3
  %65 = load i32, ptr %64, align 4
  %66 = insertvalue { ptr, ptr, ptr, i32 } %63, i32 %65, 3
  %67 = alloca [3 x ptr], align 8
  %68 = getelementptr [3 x ptr], ptr %67, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %68, align 8
  %69 = getelementptr [3 x ptr], ptr %67, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %69, align 8
  %70 = getelementptr [3 x ptr], ptr %67, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %70, align 8
  %71 = call ptr @llvm.invariant.start.p0(i64 9, ptr %67)
  %72 = call ptr @llvm.invariant.start.p0(i64 280, ptr %56)
  %73 = getelementptr ptr, ptr %56, i32 %65
  %74 = getelementptr ptr, ptr %73, i32 4
  %75 = load ptr, ptr %74, align 8
  %76 = alloca { ptr, ptr, ptr }, align 8
  %77 = getelementptr { ptr, ptr, ptr }, ptr %76, i32 0, i32 0
  store ptr @buffer_typ, ptr %77, align 8
  %78 = getelementptr { ptr, ptr, ptr }, ptr %76, i32 0, i32 1
  store ptr @i32_typ, ptr %78, align 8
  %79 = getelementptr { ptr, ptr, ptr }, ptr %76, i32 0, i32 2
  store ptr @i32_typ, ptr %79, align 8
  %80 = call ptr %75({ ptr, ptr, ptr, i32 } %66, ptr %76)
  call void %80({ ptr, ptr, ptr, i32 } %66, { ptr, ptr, ptr, i32 } %66, ptr %67, { ptr } %54, i32 7, i32 8)
  %81 = getelementptr { ptr, i160 }, ptr %48, i32 0, i32 0
  %82 = load ptr, ptr %81, align 8
  %83 = insertvalue { ptr, i160 } undef, ptr %82, 0
  %84 = getelementptr { ptr, i160 }, ptr %48, i32 0, i32 1
  %85 = load i160, ptr %84, align 4
  %86 = insertvalue { ptr, i160 } %83, i160 %85, 1
  %87 = alloca [1 x ptr], align 8
  %88 = getelementptr [1 x ptr], ptr %87, i32 0, i32 0
  store ptr @_parameterization_String, ptr %88, align 8
  %89 = call ptr @llvm.invariant.start.p0(i64 1, ptr %87)
  %90 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %91 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %92 = alloca { ptr }, align 8
  %93 = getelementptr { ptr }, ptr %92, i32 0, i32 0
  store ptr %82, ptr %93, align 8
  %94 = call ptr %91(ptr %92)
  call void %94(ptr %87, { ptr, i160 } %86)
  %95 = alloca ptr, align 8
  %96 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 8) to i64))
  store ptr %96, ptr %95, align 8
  %97 = alloca { ptr }, align 8
  %98 = getelementptr { ptr }, ptr %95, i32 0, i32 0
  %99 = getelementptr { ptr }, ptr %97, i32 0, i32 0
  %100 = load ptr, ptr %98, align 8
  store ptr %100, ptr %99, align 8
  %101 = call ptr @llvm.invariant.start.p0(i64 16, ptr %97)
  %102 = load ptr, ptr %97, align 8
  %103 = getelementptr i8, ptr %102, i64 0
  %104 = load i56, ptr @dache_beaver, align 4
  store i56 %104, ptr %103, align 4
  %105 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %106 = alloca { ptr, ptr, ptr, i32 }, align 8
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %106, i32 0, i32 1
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %106, i32 0, i32 3
  store ptr @String, ptr %106, align 8
  store ptr %105, ptr %107, align 8
  store i32 7, ptr %108, align 4
  %109 = call ptr @llvm.invariant.start.p0(i64 16, ptr %106)
  %110 = getelementptr { ptr }, ptr %97, i32 0, i32 0
  %111 = load ptr, ptr %110, align 8
  %112 = insertvalue { ptr } undef, ptr %111, 0
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %106, i32 0, i32 0
  %114 = load ptr, ptr %113, align 8
  %115 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %114, 0
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %106, i32 0, i32 1
  %117 = load ptr, ptr %116, align 8
  %118 = insertvalue { ptr, ptr, ptr, i32 } %115, ptr %117, 1
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %106, i32 0, i32 2
  %120 = load ptr, ptr %119, align 8
  %121 = insertvalue { ptr, ptr, ptr, i32 } %118, ptr %120, 2
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %106, i32 0, i32 3
  %123 = load i32, ptr %122, align 4
  %124 = insertvalue { ptr, ptr, ptr, i32 } %121, i32 %123, 3
  %125 = alloca [3 x ptr], align 8
  %126 = getelementptr [3 x ptr], ptr %125, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %126, align 8
  %127 = getelementptr [3 x ptr], ptr %125, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %127, align 8
  %128 = getelementptr [3 x ptr], ptr %125, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %128, align 8
  %129 = call ptr @llvm.invariant.start.p0(i64 9, ptr %125)
  %130 = call ptr @llvm.invariant.start.p0(i64 280, ptr %114)
  %131 = getelementptr ptr, ptr %114, i32 %123
  %132 = getelementptr ptr, ptr %131, i32 4
  %133 = load ptr, ptr %132, align 8
  %134 = alloca { ptr, ptr, ptr }, align 8
  %135 = getelementptr { ptr, ptr, ptr }, ptr %134, i32 0, i32 0
  store ptr @buffer_typ, ptr %135, align 8
  %136 = getelementptr { ptr, ptr, ptr }, ptr %134, i32 0, i32 1
  store ptr @i32_typ, ptr %136, align 8
  %137 = getelementptr { ptr, ptr, ptr }, ptr %134, i32 0, i32 2
  store ptr @i32_typ, ptr %137, align 8
  %138 = call ptr %133({ ptr, ptr, ptr, i32 } %124, ptr %134)
  call void %138({ ptr, ptr, ptr, i32 } %124, { ptr, ptr, ptr, i32 } %124, ptr %125, { ptr } %112, i32 7, i32 8)
  %139 = getelementptr { ptr, i160 }, ptr %106, i32 0, i32 0
  %140 = load ptr, ptr %139, align 8
  %141 = insertvalue { ptr, i160 } undef, ptr %140, 0
  %142 = getelementptr { ptr, i160 }, ptr %106, i32 0, i32 1
  %143 = load i160, ptr %142, align 4
  %144 = insertvalue { ptr, i160 } %141, i160 %143, 1
  %145 = alloca [1 x ptr], align 8
  %146 = getelementptr [1 x ptr], ptr %145, i32 0, i32 0
  store ptr @_parameterization_String, ptr %146, align 8
  %147 = call ptr @llvm.invariant.start.p0(i64 1, ptr %145)
  %148 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %149 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %150 = alloca { ptr }, align 8
  %151 = getelementptr { ptr }, ptr %150, i32 0, i32 0
  store ptr %140, ptr %151, align 8
  %152 = call ptr %149(ptr %150)
  call void %152(ptr %145, { ptr, i160 } %144)
  ret void
}

define void @Bard_take_aPtri32_bPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, i160 } %3, { ptr, i160 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @Bard)
  %21 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %3, ptr %21, align 8
  %22 = getelementptr { ptr, i160 }, ptr %21, i32 0, i32 1
  %23 = load i32, ptr %22, align 4
  %24 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %4, ptr %24, align 8
  %25 = getelementptr { ptr, i160 }, ptr %24, i32 0, i32 1
  %26 = load i32, ptr %25, align 4
  %27 = alloca i160, align 8
  %28 = alloca ptr, align 8
  store i32 %23, ptr %27, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %28, align 4
  %29 = load ptr, ptr %28, align 8
  %30 = insertvalue { ptr, i160 } undef, ptr %29, 0
  %31 = load i160, ptr %27, align 4
  %32 = insertvalue { ptr, i160 } %30, i160 %31, 1
  %33 = alloca [1 x ptr], align 8
  %34 = getelementptr [1 x ptr], ptr %33, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %34, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 1, ptr %33)
  %36 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %37 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %38 = alloca { ptr }, align 8
  %39 = getelementptr { ptr }, ptr %38, i32 0, i32 0
  store ptr %29, ptr %39, align 8
  %40 = call ptr %37(ptr %38)
  call void %40(ptr %33, { ptr, i160 } %32)
  %41 = alloca i160, align 8
  %42 = alloca ptr, align 8
  store i32 %26, ptr %41, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %42, align 4
  %43 = load ptr, ptr %42, align 8
  %44 = insertvalue { ptr, i160 } undef, ptr %43, 0
  %45 = load i160, ptr %41, align 4
  %46 = insertvalue { ptr, i160 } %44, i160 %45, 1
  %47 = alloca [1 x ptr], align 8
  %48 = getelementptr [1 x ptr], ptr %47, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %48, align 8
  %49 = call ptr @llvm.invariant.start.p0(i64 1, ptr %47)
  %50 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %51 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %52 = alloca { ptr }, align 8
  %53 = getelementptr { ptr }, ptr %52, i32 0, i32 0
  store ptr %43, ptr %53, align 8
  %54 = call ptr %51(ptr %52)
  call void %54(ptr %47, { ptr, i160 } %46)
  ret void
}

define void @number_taker({ ptr, i64 } %0) {
  %2 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 7) to i64))
  store ptr %3, ptr %2, align 8
  %4 = alloca { ptr }, align 8
  %5 = getelementptr { ptr }, ptr %2, i32 0, i32 0
  %6 = getelementptr { ptr }, ptr %4, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %9 = load ptr, ptr %4, align 8
  %10 = getelementptr i8, ptr %9, i64 0
  %11 = load i48, ptr @vhfip_number, align 4
  store i48 %11, ptr %10, align 4
  %12 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  store ptr @String, ptr %13, align 8
  store ptr %12, ptr %14, align 8
  store i32 7, ptr %15, align 4
  %16 = call ptr @llvm.invariant.start.p0(i64 16, ptr %13)
  %17 = getelementptr { ptr }, ptr %4, i32 0, i32 0
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr } undef, ptr %18, 0
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 0
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %21, 0
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %24, 1
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } %25, ptr %27, 2
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %13, i32 0, i32 3
  %30 = load i32, ptr %29, align 4
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, i32 %30, 3
  %32 = alloca [3 x ptr], align 8
  %33 = getelementptr [3 x ptr], ptr %32, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %33, align 8
  %34 = getelementptr [3 x ptr], ptr %32, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %34, align 8
  %35 = getelementptr [3 x ptr], ptr %32, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %35, align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 9, ptr %32)
  %37 = call ptr @llvm.invariant.start.p0(i64 280, ptr %21)
  %38 = getelementptr ptr, ptr %21, i32 %30
  %39 = getelementptr ptr, ptr %38, i32 4
  %40 = load ptr, ptr %39, align 8
  %41 = alloca { ptr, ptr, ptr }, align 8
  %42 = getelementptr { ptr, ptr, ptr }, ptr %41, i32 0, i32 0
  store ptr @buffer_typ, ptr %42, align 8
  %43 = getelementptr { ptr, ptr, ptr }, ptr %41, i32 0, i32 1
  store ptr @i32_typ, ptr %43, align 8
  %44 = getelementptr { ptr, ptr, ptr }, ptr %41, i32 0, i32 2
  store ptr @i32_typ, ptr %44, align 8
  %45 = call ptr %40({ ptr, ptr, ptr, i32 } %31, ptr %41)
  call void %45({ ptr, ptr, ptr, i32 } %31, { ptr, ptr, ptr, i32 } %31, ptr %32, { ptr } %19, i32 6, i32 7)
  %46 = load { ptr, ptr, ptr, i32 }, ptr %13, align 8
  %47 = call i32 (ptr, ...) @printf(ptr @i32_string, { ptr, ptr, ptr, i32 } %46)
  ret void
}

declare i32 @printf(ptr, ...)

define i32 @early_return_in_else() {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret i32 1
}

define void @make_em_speak({ ptr, ptr, ptr, i32 } %0) {
  %2 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %2, align 8
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %2)
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = load i32, ptr %14, align 4
  store i32 %16, ptr %15, align 4
  call void @set_offset(ptr %4, ptr @Animal)
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %18, 0
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %21, 1
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %24 = load ptr, ptr %23, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %24, 2
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %27 = load i32, ptr %26, align 4
  %28 = insertvalue { ptr, ptr, ptr, i32 } %25, i32 %27, 3
  %29 = alloca [0 x ptr], align 8
  %30 = call ptr @llvm.invariant.start.p0(i64 0, ptr %29)
  %31 = call ptr @llvm.invariant.start.p0(i64 104, ptr %18)
  %32 = getelementptr ptr, ptr %18, i32 %27
  %33 = getelementptr ptr, ptr %32, i32 4
  %34 = load ptr, ptr %33, align 8
  %35 = alloca {}, align 8
  %36 = call ptr %34({ ptr, ptr, ptr, i32 } %28, ptr %35)
  call void %36({ ptr, ptr, ptr, i32 } %28, { ptr, ptr, ptr, i32 } %28, ptr %29)
  ret void
}

define i32 @fibonacci(i32 %0) {
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp slt i32 %0, 2
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  br i1 %2, label %10, label %11

10:                                               ; preds = %1
  store i32 %0, ptr %.reg2mem3, align 4
  br label %24

11:                                               ; preds = %1
  store i32 2, ptr %3, align 4
  %12 = load i32, ptr %3, align 4
  %13 = sub i32 %0, %12
  store i32 %13, ptr %4, align 4
  %14 = load i32, ptr %4, align 4
  %15 = call i32 @fibonacci(i32 %14)
  store i32 %15, ptr %5, align 4
  store i32 1, ptr %6, align 4
  %16 = load i32, ptr %6, align 4
  %17 = sub i32 %0, %16
  store i32 %17, ptr %7, align 4
  %18 = load i32, ptr %7, align 4
  %19 = call i32 @fibonacci(i32 %18)
  store i32 %19, ptr %8, align 4
  %20 = load i32, ptr %5, align 4
  %21 = load i32, ptr %8, align 4
  %22 = add i32 %20, %21
  store i32 %22, ptr %9, align 4
  %23 = load i32, ptr %9, align 4
  store i32 %23, ptr %.reg2mem1, align 4
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem3, align 4
  br label %24

24:                                               ; preds = %11, %10
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  store i32 %.reload4, ptr %.reg2mem, align 4
  br label %25

25:                                               ; preds = %24
  %.reload = load i32, ptr %.reg2mem, align 4
  ret i32 %.reload
}

define i32 @factorial(i32 %0) {
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i32, align 4
  %.reg2mem5 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = icmp slt i32 %0, 2
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  br i1 %2, label %8, label %10

8:                                                ; preds = %1
  store i32 1, ptr %3, align 4
  %9 = load i32, ptr %3, align 4
  store i32 %9, ptr %.reg2mem3, align 4
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  store i32 %.reload4, ptr %.reg2mem5, align 4
  br label %18

10:                                               ; preds = %1
  store i32 1, ptr %4, align 4
  %11 = load i32, ptr %4, align 4
  %12 = sub i32 %0, %11
  store i32 %12, ptr %5, align 4
  %13 = load i32, ptr %5, align 4
  %14 = call i32 @factorial(i32 %13)
  store i32 %14, ptr %6, align 4
  %15 = load i32, ptr %6, align 4
  %16 = mul i32 %0, %15
  store i32 %16, ptr %7, align 4
  %17 = load i32, ptr %7, align 4
  store i32 %17, ptr %.reg2mem1, align 4
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem5, align 4
  br label %18

18:                                               ; preds = %10, %8
  %.reload6 = load i32, ptr %.reg2mem5, align 4
  store i32 %.reload6, ptr %.reg2mem, align 4
  br label %19

19:                                               ; preds = %18
  %.reload = load i32, ptr %.reg2mem, align 4
  ret i32 %.reload
}

define void @throw() {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %1 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ i32, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr null, i32 1) to i64))
  %2 = alloca { ptr, ptr, ptr, i32 }, align 8
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %4 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  store ptr @Exception, ptr %2, align 8
  store ptr %1, ptr %3, align 8
  store i32 7, ptr %4, align 4
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %2)
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %7, 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %13 = load ptr, ptr %12, align 8
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, ptr %13, 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %16 = load i32, ptr %15, align 4
  %17 = insertvalue { ptr, ptr, ptr, i32 } %14, i32 %16, 3
  %18 = alloca [0 x ptr], align 8
  %19 = call ptr @llvm.invariant.start.p0(i64 0, ptr %18)
  %20 = call ptr @llvm.invariant.start.p0(i64 104, ptr %7)
  %21 = getelementptr ptr, ptr %7, i32 %16
  %22 = getelementptr ptr, ptr %21, i32 4
  %23 = load ptr, ptr %22, align 8
  %24 = alloca {}, align 8
  %25 = call ptr %23({ ptr, ptr, ptr, i32 } %17, ptr %24)
  call void %25({ ptr, ptr, ptr, i32 } %17, { ptr, ptr, ptr, i32 } %17, ptr %18)
  %26 = alloca ptr, align 8
  %27 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 12) to i64))
  store ptr %27, ptr %26, align 8
  %28 = alloca { ptr }, align 8
  %29 = getelementptr { ptr }, ptr %26, i32 0, i32 0
  %30 = getelementptr { ptr }, ptr %28, i32 0, i32 0
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 16, ptr %28)
  %33 = load ptr, ptr %28, align 8
  %34 = getelementptr i8, ptr %33, i64 0
  %35 = load i88, ptr @eucim_sourcemini, align 4
  store i88 %35, ptr %34, align 4
  %36 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %37 = alloca { ptr, ptr, ptr, i32 }, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 1
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 3
  store ptr @String, ptr %37, align 8
  store ptr %36, ptr %38, align 8
  store i32 7, ptr %39, align 4
  %40 = call ptr @llvm.invariant.start.p0(i64 16, ptr %37)
  %41 = getelementptr { ptr }, ptr %28, i32 0, i32 0
  %42 = load ptr, ptr %41, align 8
  %43 = insertvalue { ptr } undef, ptr %42, 0
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 0
  %45 = load ptr, ptr %44, align 8
  %46 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %45, 0
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 1
  %48 = load ptr, ptr %47, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } %46, ptr %48, 1
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 2
  %51 = load ptr, ptr %50, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } %49, ptr %51, 2
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = insertvalue { ptr, ptr, ptr, i32 } %52, i32 %54, 3
  %56 = alloca [3 x ptr], align 8
  %57 = getelementptr [3 x ptr], ptr %56, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %57, align 8
  %58 = getelementptr [3 x ptr], ptr %56, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %58, align 8
  %59 = getelementptr [3 x ptr], ptr %56, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %59, align 8
  %60 = call ptr @llvm.invariant.start.p0(i64 9, ptr %56)
  %61 = call ptr @llvm.invariant.start.p0(i64 280, ptr %45)
  %62 = getelementptr ptr, ptr %45, i32 %54
  %63 = getelementptr ptr, ptr %62, i32 4
  %64 = load ptr, ptr %63, align 8
  %65 = alloca { ptr, ptr, ptr }, align 8
  %66 = getelementptr { ptr, ptr, ptr }, ptr %65, i32 0, i32 0
  store ptr @buffer_typ, ptr %66, align 8
  %67 = getelementptr { ptr, ptr, ptr }, ptr %65, i32 0, i32 1
  store ptr @i32_typ, ptr %67, align 8
  %68 = getelementptr { ptr, ptr, ptr }, ptr %65, i32 0, i32 2
  store ptr @i32_typ, ptr %68, align 8
  %69 = call ptr %64({ ptr, ptr, ptr, i32 } %55, ptr %65)
  call void %69({ ptr, ptr, ptr, i32 } %55, { ptr, ptr, ptr, i32 } %55, ptr %56, { ptr } %43, i32 11, i32 12)
  %70 = alloca { ptr, ptr, ptr, i32 }, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 0
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 0
  %73 = load ptr, ptr %71, align 8
  store ptr %73, ptr %72, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 1
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 1
  %76 = load ptr, ptr %74, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 2
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 2
  %79 = load ptr, ptr %77, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 3
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 3
  %82 = load i32, ptr %80, align 4
  store i32 %82, ptr %81, align 4
  call void @set_offset(ptr %70, ptr @String)
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 0
  %84 = load ptr, ptr %83, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %84, 0
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 1
  %87 = load ptr, ptr %86, align 8
  %88 = insertvalue { ptr, ptr, ptr, i32 } %85, ptr %87, 1
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 2
  %90 = load ptr, ptr %89, align 8
  %91 = insertvalue { ptr, ptr, ptr, i32 } %88, ptr %90, 2
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 3
  %93 = load i32, ptr %92, align 4
  %94 = insertvalue { ptr, ptr, ptr, i32 } %91, i32 %93, 3
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %96 = load ptr, ptr %95, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %96, 0
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %99 = load ptr, ptr %98, align 8
  %100 = insertvalue { ptr, ptr, ptr, i32 } %97, ptr %99, 1
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %102 = load ptr, ptr %101, align 8
  %103 = insertvalue { ptr, ptr, ptr, i32 } %100, ptr %102, 2
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %105 = load i32, ptr %104, align 4
  %106 = insertvalue { ptr, ptr, ptr, i32 } %103, i32 %105, 3
  %107 = alloca [2 x ptr], align 8
  %108 = getelementptr [2 x ptr], ptr %107, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %108, align 8
  %109 = getelementptr [2 x ptr], ptr %107, i32 0, i32 1
  store ptr @_parameterization_String, ptr %109, align 8
  %110 = call ptr @llvm.invariant.start.p0(i64 4, ptr %107)
  %111 = call ptr @llvm.invariant.start.p0(i64 104, ptr %96)
  %112 = getelementptr ptr, ptr %96, i32 %105
  %113 = getelementptr ptr, ptr %112, i32 5
  %114 = load ptr, ptr %113, align 8
  %115 = alloca { ptr, ptr }, align 8
  %116 = getelementptr { ptr, ptr }, ptr %115, i32 0, i32 0
  store ptr @i32_typ, ptr %116, align 8
  %117 = getelementptr { ptr, ptr }, ptr %115, i32 0, i32 1
  store ptr %84, ptr %117, align 8
  %118 = call ptr %114({ ptr, ptr, ptr, i32 } %106, ptr %115)
  call void %118({ ptr, ptr, ptr, i32 } %106, { ptr, ptr, ptr, i32 } %106, ptr %107, i32 199, { ptr, ptr, ptr, i32 } %94)
  %119 = getelementptr { ptr, i160 }, ptr %2, i32 0, i32 0
  %120 = load ptr, ptr %119, align 8
  %121 = insertvalue { ptr, i160 } undef, ptr %120, 0
  %122 = getelementptr { ptr, i160 }, ptr %2, i32 0, i32 1
  %123 = load i160, ptr %122, align 4
  %124 = insertvalue { ptr, i160 } %121, i160 %123, 1
  %125 = call ptr @get_current_coroutine()
  %126 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %125, i32 0, i32 4
  store { ptr, i160 } %124, ptr %126, align 8
  call void @coroutine_yield(ptr %125)
  ret void
}

define void @print88() {
  %1 = alloca i160, align 8
  %2 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store i32 88, ptr %1, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %2, align 4
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, i160 } undef, ptr %3, 0
  %5 = load i160, ptr %1, align 4
  %6 = insertvalue { ptr, i160 } %4, i160 %5, 1
  %7 = alloca [1 x ptr], align 8
  %8 = getelementptr [1 x ptr], ptr %7, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %8, align 8
  %9 = call ptr @llvm.invariant.start.p0(i64 1, ptr %7)
  %10 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %11 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %12 = alloca { ptr }, align 8
  %13 = getelementptr { ptr }, ptr %12, i32 0, i32 0
  store ptr %3, ptr %13, align 8
  %14 = call ptr %11(ptr %12)
  call void %14(ptr %7, { ptr, i160 } %6)
  %15 = call ptr @get_current_coroutine()
  call void @coroutine_yield(ptr %15)
  %16 = alloca i160, align 8
  %17 = alloca ptr, align 8
  store i32 90, ptr %16, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %17, align 4
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, i160 } undef, ptr %18, 0
  %20 = load i160, ptr %16, align 4
  %21 = insertvalue { ptr, i160 } %19, i160 %20, 1
  %22 = alloca [1 x ptr], align 8
  %23 = getelementptr [1 x ptr], ptr %22, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %23, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 1, ptr %22)
  %25 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %26 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %27 = alloca { ptr }, align 8
  %28 = getelementptr { ptr }, ptr %27, i32 0, i32 0
  store ptr %18, ptr %28, align 8
  %29 = call ptr %26(ptr %27)
  call void %29(ptr %22, { ptr, i160 } %21)
  ret void
}

define void @coroutine_svgeemrzwj_passer(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  call void %2()
  ret void
}

define void @coroutine_svgeemrzwj_buffer_filler(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret void
}

define void @grabo() {
  %1 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 4) to i64))
  store ptr %2, ptr %1, align 8
  %3 = alloca { ptr }, align 8
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = getelementptr { ptr }, ptr %3, i32 0, i32 0
  %6 = load ptr, ptr %4, align 8
  store ptr %6, ptr %5, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %3)
  %8 = load ptr, ptr %3, align 8
  %9 = getelementptr i8, ptr %8, i64 0
  %10 = load i24, ptr @qzecq_one, align 4
  store i24 %10, ptr %9, align 4
  %11 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  store ptr @String, ptr %12, align 8
  store ptr %11, ptr %13, align 8
  store i32 7, ptr %14, align 4
  %15 = call ptr @llvm.invariant.start.p0(i64 16, ptr %12)
  %16 = getelementptr { ptr }, ptr %3, i32 0, i32 0
  %17 = load ptr, ptr %16, align 8
  %18 = insertvalue { ptr } undef, ptr %17, 0
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 0
  %20 = load ptr, ptr %19, align 8
  %21 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %20, 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %23 = load ptr, ptr %22, align 8
  %24 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr %23, 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 2
  %26 = load ptr, ptr %25, align 8
  %27 = insertvalue { ptr, ptr, ptr, i32 } %24, ptr %26, 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  %29 = load i32, ptr %28, align 4
  %30 = insertvalue { ptr, ptr, ptr, i32 } %27, i32 %29, 3
  %31 = alloca [3 x ptr], align 8
  %32 = getelementptr [3 x ptr], ptr %31, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %32, align 8
  %33 = getelementptr [3 x ptr], ptr %31, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %33, align 8
  %34 = getelementptr [3 x ptr], ptr %31, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %34, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 9, ptr %31)
  %36 = call ptr @llvm.invariant.start.p0(i64 280, ptr %20)
  %37 = getelementptr ptr, ptr %20, i32 %29
  %38 = getelementptr ptr, ptr %37, i32 4
  %39 = load ptr, ptr %38, align 8
  %40 = alloca { ptr, ptr, ptr }, align 8
  %41 = getelementptr { ptr, ptr, ptr }, ptr %40, i32 0, i32 0
  store ptr @buffer_typ, ptr %41, align 8
  %42 = getelementptr { ptr, ptr, ptr }, ptr %40, i32 0, i32 1
  store ptr @i32_typ, ptr %42, align 8
  %43 = getelementptr { ptr, ptr, ptr }, ptr %40, i32 0, i32 2
  store ptr @i32_typ, ptr %43, align 8
  %44 = call ptr %39({ ptr, ptr, ptr, i32 } %30, ptr %40)
  call void %44({ ptr, ptr, ptr, i32 } %30, { ptr, ptr, ptr, i32 } %30, ptr %31, { ptr } %18, i32 3, i32 4)
  %45 = getelementptr { ptr, i160 }, ptr %12, i32 0, i32 0
  %46 = load ptr, ptr %45, align 8
  %47 = insertvalue { ptr, i160 } undef, ptr %46, 0
  %48 = getelementptr { ptr, i160 }, ptr %12, i32 0, i32 1
  %49 = load i160, ptr %48, align 4
  %50 = insertvalue { ptr, i160 } %47, i160 %49, 1
  %51 = alloca [1 x ptr], align 8
  %52 = getelementptr [1 x ptr], ptr %51, i32 0, i32 0
  store ptr @_parameterization_String, ptr %52, align 8
  %53 = call ptr @llvm.invariant.start.p0(i64 1, ptr %51)
  %54 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %55 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %56 = alloca { ptr }, align 8
  %57 = getelementptr { ptr }, ptr %56, i32 0, i32 0
  store ptr %46, ptr %57, align 8
  %58 = call ptr %55(ptr %56)
  call void %58(ptr %51, { ptr, i160 } %50)
  ret void
}

define i32 @_functionliteral_wmogmiluex(i32 %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = add i32 %0, %1
  ret i32 %3
}

define i32 @_functionliteral_qnupfhbweo(i32 %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = mul i32 %0, 2
  ret i32 %2
}

define i32 @_functionliteral_ikjyvtgqci() {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret i32 5
}

define void @_functionliteral_wptylnoeos(i32 %0) {
  %2 = alloca i160, align 8
  %3 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store i32 %0, ptr %2, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %3, align 4
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, i160 } undef, ptr %4, 0
  %6 = load i160, ptr %2, align 4
  %7 = insertvalue { ptr, i160 } %5, i160 %6, 1
  %8 = alloca [1 x ptr], align 8
  %9 = getelementptr [1 x ptr], ptr %8, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %9, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 1, ptr %8)
  %11 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %12 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %13 = alloca { ptr }, align 8
  %14 = getelementptr { ptr }, ptr %13, i32 0, i32 0
  store ptr %4, ptr %14, align 8
  %15 = call ptr %12(ptr %13)
  call void %15(ptr %8, { ptr, i160 } %7)
  ret void
}

define i8 @i32toi8(i32 %0) {
  %.reg2mem = alloca i8, align 1
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i8, align 1
  %.reg2mem5 = alloca i32, align 4
  %.reg2mem7 = alloca i32, align 4
  %.reg2mem9 = alloca i8, align 1
  %.reg2mem11 = alloca i1, align 1
  %.reg2mem14 = alloca i8, align 1
  %.reg2mem18 = alloca i32, align 4
  %.reg2mem21 = alloca i8, align 1
  %.reg2mem23 = alloca i32, align 4
  %.reg2mem25 = alloca i8, align 1
  %.reg2mem27 = alloca i32, align 4
  %.reg2mem29 = alloca i8, align 1
  %.reg2mem31 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store i8 0, ptr %.reg2mem29, align 1
  store i32 0, ptr %.reg2mem31, align 4
  %2 = alloca i1, align 1
  %3 = alloca i8, align 1
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  br label %6

6:                                                ; preds = %18, %1
  %.reload32 = load i32, ptr %.reg2mem31, align 4
  %.reload30 = load i8, ptr %.reg2mem29, align 1
  store i32 %.reload32, ptr %.reg2mem18, align 4
  store i8 %.reload30, ptr %.reg2mem14, align 1
  %.reload20 = load i32, ptr %.reg2mem18, align 4
  %7 = icmp slt i32 %.reload20, %0
  store i1 %7, ptr %2, align 1
  %8 = load i1, ptr %2, align 1
  store i1 %8, ptr %.reg2mem11, align 1
  %.reload13 = load i1, ptr %.reg2mem11, align 1
  br i1 %.reload13, label %9, label %15

9:                                                ; preds = %6
  %.reload17 = load i8, ptr %.reg2mem14, align 1
  %10 = add i8 %.reload17, 1
  store i8 %10, ptr %3, align 1
  %11 = load i8, ptr %3, align 1
  store i8 %11, ptr %.reg2mem9, align 1
  store i32 1, ptr %4, align 4
  %12 = load i32, ptr %4, align 4
  %.reload19 = load i32, ptr %.reg2mem18, align 4
  %13 = add i32 %.reload19, %12
  store i32 %13, ptr %5, align 4
  %14 = load i32, ptr %5, align 4
  store i32 %14, ptr %.reg2mem7, align 4
  %.reload8 = load i32, ptr %.reg2mem7, align 4
  %.reload10 = load i8, ptr %.reg2mem9, align 1
  store i8 %.reload10, ptr %.reg2mem25, align 1
  store i32 %.reload8, ptr %.reg2mem27, align 4
  br label %16

15:                                               ; preds = %6
  store i8 poison, ptr %.reg2mem25, align 1
  store i32 poison, ptr %.reg2mem27, align 4
  br label %16

16:                                               ; preds = %15, %9
  %.reload28 = load i32, ptr %.reg2mem27, align 4
  %.reload26 = load i8, ptr %.reg2mem25, align 1
  store i32 %.reload28, ptr %.reg2mem5, align 4
  store i8 %.reload26, ptr %.reg2mem3, align 1
  br label %17

17:                                               ; preds = %16
  %.reload4 = load i8, ptr %.reg2mem3, align 1
  %.reload6 = load i32, ptr %.reg2mem5, align 4
  %.reload12 = load i1, ptr %.reg2mem11, align 1
  %.reload16 = load i8, ptr %.reg2mem14, align 1
  store i8 %.reload4, ptr %.reg2mem21, align 1
  store i32 %.reload6, ptr %.reg2mem23, align 4
  br i1 %.reload12, label %18, label %19

18:                                               ; preds = %17
  %.reload24 = load i32, ptr %.reg2mem23, align 4
  %.reload22 = load i8, ptr %.reg2mem21, align 1
  store i32 %.reload24, ptr %.reg2mem1, align 4
  store i8 %.reload22, ptr %.reg2mem, align 1
  %.reload = load i8, ptr %.reg2mem, align 1
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i8 %.reload, ptr %.reg2mem29, align 1
  store i32 %.reload2, ptr %.reg2mem31, align 4
  br label %6

19:                                               ; preds = %17
  %.reload15 = load i8, ptr %.reg2mem14, align 1
  ret i8 %.reload15
}

define { ptr, ptr, ptr, i32 } @read_file({ ptr, ptr, ptr, i32 } %0) {
  %2 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem7 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %2, align 8
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %2)
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = load i32, ptr %14, align 4
  store i32 %16, ptr %15, align 4
  call void @set_offset(ptr %4, ptr @String)
  %17 = alloca ptr, align 8
  %18 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64))
  store ptr %18, ptr %17, align 8
  %19 = alloca { ptr }, align 8
  %20 = getelementptr { ptr }, ptr %17, i32 0, i32 0
  %21 = getelementptr { ptr }, ptr %19, i32 0, i32 0
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 16, ptr %19)
  %24 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %25 = alloca { ptr, ptr, ptr, i32 }, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 3
  store ptr @String, ptr %25, align 8
  store ptr %24, ptr %26, align 8
  store i32 7, ptr %27, align 4
  %28 = call ptr @llvm.invariant.start.p0(i64 16, ptr %25)
  %29 = getelementptr { ptr }, ptr %19, i32 0, i32 0
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr } undef, ptr %30, 0
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 0
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %33, 0
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %36, 1
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 2
  %39 = load ptr, ptr %38, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %39, 2
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 3
  %42 = load i32, ptr %41, align 4
  %43 = insertvalue { ptr, ptr, ptr, i32 } %40, i32 %42, 3
  %44 = alloca [3 x ptr], align 8
  %45 = getelementptr [3 x ptr], ptr %44, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %45, align 8
  %46 = getelementptr [3 x ptr], ptr %44, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %46, align 8
  %47 = getelementptr [3 x ptr], ptr %44, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %47, align 8
  %48 = call ptr @llvm.invariant.start.p0(i64 9, ptr %44)
  %49 = call ptr @llvm.invariant.start.p0(i64 280, ptr %33)
  %50 = getelementptr ptr, ptr %33, i32 %42
  %51 = getelementptr ptr, ptr %50, i32 4
  %52 = load ptr, ptr %51, align 8
  %53 = alloca { ptr, ptr, ptr }, align 8
  %54 = getelementptr { ptr, ptr, ptr }, ptr %53, i32 0, i32 0
  store ptr @buffer_typ, ptr %54, align 8
  %55 = getelementptr { ptr, ptr, ptr }, ptr %53, i32 0, i32 1
  store ptr @i32_typ, ptr %55, align 8
  %56 = getelementptr { ptr, ptr, ptr }, ptr %53, i32 0, i32 2
  store ptr @i32_typ, ptr %56, align 8
  %57 = call ptr %52({ ptr, ptr, ptr, i32 } %43, ptr %53)
  call void %57({ ptr, ptr, ptr, i32 } %43, { ptr, ptr, ptr, i32 } %43, ptr %44, { ptr } %31, i32 0, i32 1)
  %58 = alloca { ptr, ptr, ptr, i32 }, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 0
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 0
  %61 = load ptr, ptr %59, align 8
  store ptr %61, ptr %60, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 1
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 1
  %64 = load ptr, ptr %62, align 8
  store ptr %64, ptr %63, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 2
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 2
  %67 = load ptr, ptr %65, align 8
  store ptr %67, ptr %66, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %25, i32 0, i32 3
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 3
  %70 = load i32, ptr %68, align 4
  store i32 %70, ptr %69, align 4
  call void @set_offset(ptr %58, ptr @String)
  %71 = alloca { ptr, ptr, ptr, i32 }, align 8
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 0
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 0
  %74 = load ptr, ptr %72, align 8
  store ptr %74, ptr %73, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 1
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 1
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 2
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 2
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 3
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 3
  %83 = load i32, ptr %81, align 4
  store i32 %83, ptr %82, align 4
  %84 = call ptr @llvm.invariant.start.p0(i64 16, ptr %71)
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %86 = load ptr, ptr %85, align 8
  %87 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %86, 0
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %89 = load ptr, ptr %88, align 8
  %90 = insertvalue { ptr, ptr, ptr, i32 } %87, ptr %89, 1
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %92 = load ptr, ptr %91, align 8
  %93 = insertvalue { ptr, ptr, ptr, i32 } %90, ptr %92, 2
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %95 = load i32, ptr %94, align 4
  %96 = insertvalue { ptr, ptr, ptr, i32 } %93, i32 %95, 3
  %97 = alloca [0 x ptr], align 8
  %98 = call ptr @llvm.invariant.start.p0(i64 0, ptr %97)
  %99 = call ptr @llvm.invariant.start.p0(i64 280, ptr %86)
  %100 = getelementptr ptr, ptr %86, i32 %95
  %101 = getelementptr ptr, ptr %100, i32 14
  %102 = load ptr, ptr %101, align 8
  %103 = alloca {}, align 8
  %104 = call ptr %102({ ptr, ptr, ptr, i32 } %96, ptr %103)
  %105 = call { ptr } %104({ ptr, ptr, ptr, i32 } %96, { ptr, ptr, ptr, i32 } %96, ptr %97)
  %106 = alloca ptr, align 8
  store { ptr } %105, ptr %106, align 8
  %107 = alloca ptr, align 8
  %108 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 2) to i64))
  store ptr %108, ptr %107, align 8
  %109 = alloca { ptr }, align 8
  %110 = getelementptr { ptr }, ptr %107, i32 0, i32 0
  %111 = getelementptr { ptr }, ptr %109, i32 0, i32 0
  %112 = load ptr, ptr %110, align 8
  store ptr %112, ptr %111, align 8
  %113 = call ptr @llvm.invariant.start.p0(i64 16, ptr %109)
  %114 = load ptr, ptr %109, align 8
  %115 = getelementptr i8, ptr %114, i64 0
  %116 = load i8, ptr @gzmae_r, align 1
  store i8 %116, ptr %115, align 1
  %117 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %118 = alloca { ptr, ptr, ptr, i32 }, align 8
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 1
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 3
  store ptr @String, ptr %118, align 8
  store ptr %117, ptr %119, align 8
  store i32 7, ptr %120, align 4
  %121 = call ptr @llvm.invariant.start.p0(i64 16, ptr %118)
  %122 = getelementptr { ptr }, ptr %109, i32 0, i32 0
  %123 = load ptr, ptr %122, align 8
  %124 = insertvalue { ptr } undef, ptr %123, 0
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 0
  %126 = load ptr, ptr %125, align 8
  %127 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %126, 0
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 1
  %129 = load ptr, ptr %128, align 8
  %130 = insertvalue { ptr, ptr, ptr, i32 } %127, ptr %129, 1
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 2
  %132 = load ptr, ptr %131, align 8
  %133 = insertvalue { ptr, ptr, ptr, i32 } %130, ptr %132, 2
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 3
  %135 = load i32, ptr %134, align 4
  %136 = insertvalue { ptr, ptr, ptr, i32 } %133, i32 %135, 3
  %137 = alloca [3 x ptr], align 8
  %138 = getelementptr [3 x ptr], ptr %137, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %138, align 8
  %139 = getelementptr [3 x ptr], ptr %137, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %139, align 8
  %140 = getelementptr [3 x ptr], ptr %137, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %140, align 8
  %141 = call ptr @llvm.invariant.start.p0(i64 9, ptr %137)
  %142 = call ptr @llvm.invariant.start.p0(i64 280, ptr %126)
  %143 = getelementptr ptr, ptr %126, i32 %135
  %144 = getelementptr ptr, ptr %143, i32 4
  %145 = load ptr, ptr %144, align 8
  %146 = alloca { ptr, ptr, ptr }, align 8
  %147 = getelementptr { ptr, ptr, ptr }, ptr %146, i32 0, i32 0
  store ptr @buffer_typ, ptr %147, align 8
  %148 = getelementptr { ptr, ptr, ptr }, ptr %146, i32 0, i32 1
  store ptr @i32_typ, ptr %148, align 8
  %149 = getelementptr { ptr, ptr, ptr }, ptr %146, i32 0, i32 2
  store ptr @i32_typ, ptr %149, align 8
  %150 = call ptr %145({ ptr, ptr, ptr, i32 } %136, ptr %146)
  call void %150({ ptr, ptr, ptr, i32 } %136, { ptr, ptr, ptr, i32 } %136, ptr %137, { ptr } %124, i32 1, i32 2)
  %151 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 0
  %152 = load ptr, ptr %151, align 8
  %153 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %152, 0
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 1
  %155 = load ptr, ptr %154, align 8
  %156 = insertvalue { ptr, ptr, ptr, i32 } %153, ptr %155, 1
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 2
  %158 = load ptr, ptr %157, align 8
  %159 = insertvalue { ptr, ptr, ptr, i32 } %156, ptr %158, 2
  %160 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 3
  %161 = load i32, ptr %160, align 4
  %162 = insertvalue { ptr, ptr, ptr, i32 } %159, i32 %161, 3
  %163 = alloca [0 x ptr], align 8
  %164 = call ptr @llvm.invariant.start.p0(i64 0, ptr %163)
  %165 = call ptr @llvm.invariant.start.p0(i64 280, ptr %152)
  %166 = getelementptr ptr, ptr %152, i32 %161
  %167 = getelementptr ptr, ptr %166, i32 14
  %168 = load ptr, ptr %167, align 8
  %169 = alloca {}, align 8
  %170 = call ptr %168({ ptr, ptr, ptr, i32 } %162, ptr %169)
  %171 = call { ptr } %170({ ptr, ptr, ptr, i32 } %162, { ptr, ptr, ptr, i32 } %162, ptr %163)
  %172 = alloca ptr, align 8
  store { ptr } %171, ptr %172, align 8
  %173 = load ptr, ptr %106, align 8
  %174 = insertvalue { ptr } undef, ptr %173, 0
  %175 = load ptr, ptr %172, align 8
  %176 = insertvalue { ptr } undef, ptr %175, 0
  %177 = call { ptr } @fopen({ ptr } %174, { ptr } %176)
  %178 = alloca ptr, align 8
  store { ptr } %177, ptr %178, align 8
  %179 = alloca { ptr }, align 8
  %180 = getelementptr { ptr }, ptr %179, i32 0, i32 0
  %181 = load ptr, ptr %178, align 8
  store ptr %181, ptr %180, align 8
  %182 = call ptr @llvm.invariant.start.p0(i64 16, ptr %179)
  %183 = alloca i1, align 1
  %184 = alloca i32, align 4
  %185 = alloca i32, align 4
  %186 = alloca i1, align 1
  %187 = alloca i8, align 1
  %188 = alloca [1 x ptr], align 8
  %189 = alloca { ptr }, align 8
  %190 = alloca { ptr, ptr, ptr, i32 }, align 8
  %191 = alloca { ptr, ptr, ptr, i32 }, align 8
  %192 = alloca i32, align 4
  %193 = alloca { ptr, ptr, ptr, i32 }, align 8
  br label %194

194:                                              ; preds = %._crit_edge, %1
  store i1 true, ptr %183, align 1
  %195 = load i1, ptr %183, align 1
  br i1 %195, label %196, label %247

196:                                              ; preds = %194
  %197 = getelementptr { ptr }, ptr %179, i32 0, i32 0
  %198 = load ptr, ptr %197, align 8
  %199 = insertvalue { ptr } undef, ptr %198, 0
  %200 = call i32 @fgetc({ ptr } %199)
  store ptr %184, ptr %.reg2mem3, align 8
  %.reload6 = load ptr, ptr %.reg2mem3, align 8
  store i32 %200, ptr %.reload6, align 4
  store i32 -1, ptr %185, align 4
  %.reload5 = load ptr, ptr %.reg2mem3, align 8
  %201 = load i32, ptr %.reload5, align 4
  %202 = load i32, ptr %185, align 4
  %203 = icmp eq i32 %201, %202
  store i1 %203, ptr %186, align 1
  %204 = load i1, ptr %186, align 1
  %205 = xor i1 %204, true
  %206 = zext i1 %205 to i32
  store i32 %206, ptr %.reg2mem1, align 4
  br i1 %204, label %207, label %208

207:                                              ; preds = %196
  br label %246

208:                                              ; preds = %196
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %209 = load i32, ptr %.reload4, align 4
  %210 = call i8 @i32toi8(i32 %209)
  store i8 %210, ptr %187, align 1
  %211 = load i8, ptr %187, align 1
  %212 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 0
  %213 = load ptr, ptr %212, align 8
  %214 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %213, 0
  %215 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 1
  %216 = load ptr, ptr %215, align 8
  %217 = insertvalue { ptr, ptr, ptr, i32 } %214, ptr %216, 1
  %218 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 2
  %219 = load ptr, ptr %218, align 8
  %220 = insertvalue { ptr, ptr, ptr, i32 } %217, ptr %219, 2
  %221 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 3
  %222 = load i32, ptr %221, align 4
  %223 = insertvalue { ptr, ptr, ptr, i32 } %220, i32 %222, 3
  %224 = getelementptr [1 x ptr], ptr %188, i32 0, i32 0
  store ptr @_parameterization_Ptri8, ptr %224, align 8
  %225 = call ptr @llvm.invariant.start.p0(i64 1, ptr %188)
  %226 = call ptr @llvm.invariant.start.p0(i64 280, ptr %213)
  %227 = getelementptr ptr, ptr %213, i32 %222
  %228 = getelementptr ptr, ptr %227, i32 8
  %229 = load ptr, ptr %228, align 8
  %230 = getelementptr { ptr }, ptr %189, i32 0, i32 0
  store ptr @i8_typ, ptr %230, align 8
  %231 = call ptr %229({ ptr, ptr, ptr, i32 } %223, ptr %189)
  %232 = call { ptr, ptr, ptr, i32 } %231({ ptr, ptr, ptr, i32 } %223, { ptr, ptr, ptr, i32 } %223, ptr %188, i8 %211)
  store { ptr, ptr, ptr, i32 } %232, ptr %190, align 8
  %233 = call ptr @llvm.invariant.start.p0(i64 16, ptr %190)
  %234 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 0
  %235 = getelementptr { ptr, ptr, ptr, i32 }, ptr %191, i32 0, i32 0
  %236 = load ptr, ptr %234, align 8
  store ptr %236, ptr %235, align 8
  %237 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 1
  %238 = getelementptr { ptr, ptr, ptr, i32 }, ptr %191, i32 0, i32 1
  %239 = load ptr, ptr %237, align 8
  store ptr %239, ptr %238, align 8
  %240 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 2
  %241 = getelementptr { ptr, ptr, ptr, i32 }, ptr %191, i32 0, i32 2
  %242 = load ptr, ptr %240, align 8
  store ptr %242, ptr %241, align 8
  %243 = getelementptr { ptr, ptr, ptr, i32 }, ptr %190, i32 0, i32 3
  %244 = getelementptr { ptr, ptr, ptr, i32 }, ptr %191, i32 0, i32 3
  %245 = load i32, ptr %243, align 4
  store i32 %245, ptr %244, align 4
  call void @set_offset(ptr %191, ptr @String)
  br label %246

246:                                              ; preds = %208, %207
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem7, align 4
  br label %248

247:                                              ; preds = %194
  store i32 0, ptr %.reg2mem7, align 4
  br label %248

248:                                              ; preds = %247, %246
  %.reload8 = load i32, ptr %.reg2mem7, align 4
  store i32 %.reload8, ptr %.reg2mem, align 4
  br label %249

249:                                              ; preds = %248
  %.reload = load i32, ptr %.reg2mem, align 4
  %250 = trunc i32 %.reload to i1
  br i1 %250, label %._crit_edge, label %251

._crit_edge:                                      ; preds = %249
  br label %194

251:                                              ; preds = %249
  %252 = getelementptr { ptr }, ptr %179, i32 0, i32 0
  %253 = load ptr, ptr %252, align 8
  %254 = insertvalue { ptr } undef, ptr %253, 0
  %255 = call i32 @fclose({ ptr } %254)
  store i32 %255, ptr %192, align 4
  %256 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 0
  %257 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 0
  %258 = load ptr, ptr %256, align 8
  store ptr %258, ptr %257, align 8
  %259 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 1
  %260 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 1
  %261 = load ptr, ptr %259, align 8
  store ptr %261, ptr %260, align 8
  %262 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 2
  %263 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 2
  %264 = load ptr, ptr %262, align 8
  store ptr %264, ptr %263, align 8
  %265 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 3
  %266 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 3
  %267 = load i32, ptr %265, align 4
  store i32 %267, ptr %266, align 4
  call void @set_offset(ptr %193, ptr @String)
  %268 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 0
  %269 = load ptr, ptr %268, align 8
  %270 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %269, 0
  %271 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 1
  %272 = load ptr, ptr %271, align 8
  %273 = insertvalue { ptr, ptr, ptr, i32 } %270, ptr %272, 1
  %274 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 2
  %275 = load ptr, ptr %274, align 8
  %276 = insertvalue { ptr, ptr, ptr, i32 } %273, ptr %275, 2
  %277 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 3
  %278 = load i32, ptr %277, align 4
  %279 = insertvalue { ptr, ptr, ptr, i32 } %276, i32 %278, 3
  ret { ptr, ptr, ptr, i32 } %279
}

declare { ptr } @fopen({ ptr }, { ptr })

declare i32 @fgetc({ ptr })

declare i32 @fclose({ ptr })

define void @write_file({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1) {
  %3 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %3, align 8
  %4 = call ptr @llvm.invariant.start.p0(i64 16, ptr %3)
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @String)
  %18 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %18, align 8
  %19 = call ptr @llvm.invariant.start.p0(i64 16, ptr %18)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 1
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 2
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %18, i32 0, i32 3
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %32 = load i32, ptr %30, align 4
  store i32 %32, ptr %31, align 4
  call void @set_offset(ptr %20, ptr @String)
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %34 = load ptr, ptr %33, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %34, 0
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %37 = load ptr, ptr %36, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %37, 1
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %40 = load ptr, ptr %39, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } %38, ptr %40, 2
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %43 = load i32, ptr %42, align 4
  %44 = insertvalue { ptr, ptr, ptr, i32 } %41, i32 %43, 3
  %45 = alloca [0 x ptr], align 8
  %46 = call ptr @llvm.invariant.start.p0(i64 0, ptr %45)
  %47 = call ptr @llvm.invariant.start.p0(i64 280, ptr %34)
  %48 = getelementptr ptr, ptr %34, i32 %43
  %49 = getelementptr ptr, ptr %48, i32 14
  %50 = load ptr, ptr %49, align 8
  %51 = alloca {}, align 8
  %52 = call ptr %50({ ptr, ptr, ptr, i32 } %44, ptr %51)
  %53 = call { ptr } %52({ ptr, ptr, ptr, i32 } %44, { ptr, ptr, ptr, i32 } %44, ptr %45)
  %54 = alloca ptr, align 8
  store { ptr } %53, ptr %54, align 8
  %55 = alloca ptr, align 8
  %56 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 2) to i64))
  store ptr %56, ptr %55, align 8
  %57 = alloca { ptr }, align 8
  %58 = getelementptr { ptr }, ptr %55, i32 0, i32 0
  %59 = getelementptr { ptr }, ptr %57, i32 0, i32 0
  %60 = load ptr, ptr %58, align 8
  store ptr %60, ptr %59, align 8
  %61 = call ptr @llvm.invariant.start.p0(i64 16, ptr %57)
  %62 = load ptr, ptr %57, align 8
  %63 = getelementptr i8, ptr %62, i64 0
  %64 = load i8, ptr @yetfi_w, align 1
  store i8 %64, ptr %63, align 1
  %65 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %66 = alloca { ptr, ptr, ptr, i32 }, align 8
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 1
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 3
  store ptr @String, ptr %66, align 8
  store ptr %65, ptr %67, align 8
  store i32 7, ptr %68, align 4
  %69 = call ptr @llvm.invariant.start.p0(i64 16, ptr %66)
  %70 = getelementptr { ptr }, ptr %57, i32 0, i32 0
  %71 = load ptr, ptr %70, align 8
  %72 = insertvalue { ptr } undef, ptr %71, 0
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 0
  %74 = load ptr, ptr %73, align 8
  %75 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %74, 0
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 1
  %77 = load ptr, ptr %76, align 8
  %78 = insertvalue { ptr, ptr, ptr, i32 } %75, ptr %77, 1
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 2
  %80 = load ptr, ptr %79, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } %78, ptr %80, 2
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 3
  %83 = load i32, ptr %82, align 4
  %84 = insertvalue { ptr, ptr, ptr, i32 } %81, i32 %83, 3
  %85 = alloca [3 x ptr], align 8
  %86 = getelementptr [3 x ptr], ptr %85, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %86, align 8
  %87 = getelementptr [3 x ptr], ptr %85, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %87, align 8
  %88 = getelementptr [3 x ptr], ptr %85, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %88, align 8
  %89 = call ptr @llvm.invariant.start.p0(i64 9, ptr %85)
  %90 = call ptr @llvm.invariant.start.p0(i64 280, ptr %74)
  %91 = getelementptr ptr, ptr %74, i32 %83
  %92 = getelementptr ptr, ptr %91, i32 4
  %93 = load ptr, ptr %92, align 8
  %94 = alloca { ptr, ptr, ptr }, align 8
  %95 = getelementptr { ptr, ptr, ptr }, ptr %94, i32 0, i32 0
  store ptr @buffer_typ, ptr %95, align 8
  %96 = getelementptr { ptr, ptr, ptr }, ptr %94, i32 0, i32 1
  store ptr @i32_typ, ptr %96, align 8
  %97 = getelementptr { ptr, ptr, ptr }, ptr %94, i32 0, i32 2
  store ptr @i32_typ, ptr %97, align 8
  %98 = call ptr %93({ ptr, ptr, ptr, i32 } %84, ptr %94)
  call void %98({ ptr, ptr, ptr, i32 } %84, { ptr, ptr, ptr, i32 } %84, ptr %85, { ptr } %72, i32 1, i32 2)
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 0
  %100 = load ptr, ptr %99, align 8
  %101 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %100, 0
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 1
  %103 = load ptr, ptr %102, align 8
  %104 = insertvalue { ptr, ptr, ptr, i32 } %101, ptr %103, 1
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 2
  %106 = load ptr, ptr %105, align 8
  %107 = insertvalue { ptr, ptr, ptr, i32 } %104, ptr %106, 2
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 3
  %109 = load i32, ptr %108, align 4
  %110 = insertvalue { ptr, ptr, ptr, i32 } %107, i32 %109, 3
  %111 = alloca [0 x ptr], align 8
  %112 = call ptr @llvm.invariant.start.p0(i64 0, ptr %111)
  %113 = call ptr @llvm.invariant.start.p0(i64 280, ptr %100)
  %114 = getelementptr ptr, ptr %100, i32 %109
  %115 = getelementptr ptr, ptr %114, i32 14
  %116 = load ptr, ptr %115, align 8
  %117 = alloca {}, align 8
  %118 = call ptr %116({ ptr, ptr, ptr, i32 } %110, ptr %117)
  %119 = call { ptr } %118({ ptr, ptr, ptr, i32 } %110, { ptr, ptr, ptr, i32 } %110, ptr %111)
  %120 = alloca ptr, align 8
  store { ptr } %119, ptr %120, align 8
  %121 = load ptr, ptr %54, align 8
  %122 = insertvalue { ptr } undef, ptr %121, 0
  %123 = load ptr, ptr %120, align 8
  %124 = insertvalue { ptr } undef, ptr %123, 0
  %125 = call { ptr } @fopen({ ptr } %122, { ptr } %124)
  %126 = alloca ptr, align 8
  store { ptr } %125, ptr %126, align 8
  %127 = alloca { ptr }, align 8
  %128 = getelementptr { ptr }, ptr %127, i32 0, i32 0
  %129 = load ptr, ptr %126, align 8
  store ptr %129, ptr %128, align 8
  %130 = call ptr @llvm.invariant.start.p0(i64 16, ptr %127)
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %132 = load ptr, ptr %131, align 8
  %133 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %132, 0
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %135 = load ptr, ptr %134, align 8
  %136 = insertvalue { ptr, ptr, ptr, i32 } %133, ptr %135, 1
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %138 = load ptr, ptr %137, align 8
  %139 = insertvalue { ptr, ptr, ptr, i32 } %136, ptr %138, 2
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %141 = load i32, ptr %140, align 4
  %142 = insertvalue { ptr, ptr, ptr, i32 } %139, i32 %141, 3
  %143 = alloca [0 x ptr], align 8
  %144 = call ptr @llvm.invariant.start.p0(i64 0, ptr %143)
  %145 = call ptr @llvm.invariant.start.p0(i64 280, ptr %132)
  %146 = getelementptr ptr, ptr %132, i32 %141
  %147 = getelementptr ptr, ptr %146, i32 14
  %148 = load ptr, ptr %147, align 8
  %149 = alloca {}, align 8
  %150 = call ptr %148({ ptr, ptr, ptr, i32 } %142, ptr %149)
  %151 = call { ptr } %150({ ptr, ptr, ptr, i32 } %142, { ptr, ptr, ptr, i32 } %142, ptr %143)
  %152 = alloca ptr, align 8
  store { ptr } %151, ptr %152, align 8
  %153 = getelementptr { ptr }, ptr %127, i32 0, i32 0
  %154 = load ptr, ptr %153, align 8
  %155 = insertvalue { ptr } undef, ptr %154, 0
  %156 = load ptr, ptr %152, align 8
  %157 = insertvalue { ptr } undef, ptr %156, 0
  %158 = call i32 @fprintf({ ptr } %155, { ptr } %157)
  %159 = getelementptr { ptr }, ptr %127, i32 0, i32 0
  %160 = load ptr, ptr %159, align 8
  %161 = insertvalue { ptr } undef, ptr %160, 0
  %162 = call i32 @fclose({ ptr } %161)
  ret void
}

declare i32 @fprintf({ ptr }, { ptr })

define void @_functionliteral_qerngvbhux(i32 %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = mul i32 %0, %0
  %3 = alloca i160, align 8
  %4 = alloca ptr, align 8
  store i32 %2, ptr %3, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %4, align 4
  %5 = load ptr, ptr %4, align 8
  %6 = insertvalue { ptr, i160 } undef, ptr %5, 0
  %7 = load i160, ptr %3, align 4
  %8 = insertvalue { ptr, i160 } %6, i160 %7, 1
  %9 = alloca [1 x ptr], align 8
  %10 = getelementptr [1 x ptr], ptr %9, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %10, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 1, ptr %9)
  %12 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %13 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %14 = alloca { ptr }, align 8
  %15 = getelementptr { ptr }, ptr %14, i32 0, i32 0
  store ptr %5, ptr %15, align 8
  %16 = call ptr %13(ptr %14)
  call void %16(ptr %9, { ptr, i160 } %8)
  ret void
}

define i32 @_functionliteral_wzwdhhbnxe(i32 %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = add i32 %0, %1
  ret i32 %3
}

define void @_functionliteral_rnscjkerrq(i32 %0, i32 %1) {
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i32, align 4
  %.reg2mem5 = alloca ptr, align 8
  %.reg2mem11 = alloca i1, align 1
  %.reg2mem14 = alloca i32, align 4
  %.reg2mem18 = alloca i32, align 4
  %.reg2mem20 = alloca i32, align 4
  %.reg2mem22 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store i32 7, ptr %.reg2mem22, align 4
  %3 = alloca i1, align 1
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca ptr, align 8
  %8 = alloca i64, align 8
  %9 = alloca { ptr, i32 }, align 8
  %10 = alloca i64, align 8
  %11 = alloca i1, align 1
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca ptr, align 8
  %16 = alloca i64, align 8
  br label %17

17:                                               ; preds = %._crit_edge, %2
  %.reload23 = load i32, ptr %.reg2mem22, align 4
  store i32 %.reload23, ptr %.reg2mem14, align 4
  store i1 true, ptr %3, align 1
  %18 = load i1, ptr %3, align 1
  store i1 %18, ptr %.reg2mem11, align 1
  %.reload13 = load i1, ptr %.reg2mem11, align 1
  br i1 %.reload13, label %19, label %58

19:                                               ; preds = %17
  %20 = call i32 @_functionliteral_wzwdhhbnxe(i32 %0, i32 %1)
  store i32 %20, ptr %4, align 4
  %21 = load i32, ptr %4, align 4
  %.reload17 = load i32, ptr %.reg2mem14, align 4
  %22 = add i32 %21, %.reload17
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %5, align 4
  store i32 %23, ptr %6, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %8, align 4
  %24 = load i64, ptr %8, align 4
  store i64 %24, ptr %7, align 4
  %25 = load ptr, ptr %7, align 8
  %26 = insertvalue { ptr, i32 } undef, ptr %25, 0
  %27 = load i32, ptr %6, align 4
  %28 = insertvalue { ptr, i32 } %26, i32 %27, 1
  %29 = call ptr @get_current_coroutine()
  %30 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i32 } }, ptr %29, i32 0, i32 4
  store { ptr, i32 } %28, ptr %30, align 8
  call void @coroutine_yield(ptr %29)
  %31 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i32 } }, ptr %29, i32 0, i32 4
  %32 = load { ptr, i32 }, ptr %31, align 8
  store ptr %9, ptr %.reg2mem5, align 8
  %.reload10 = load ptr, ptr %.reg2mem5, align 8
  store { ptr, i32 } %32, ptr %.reload10, align 8
  %.reload9 = load ptr, ptr %.reg2mem5, align 8
  %33 = getelementptr { ptr, i32 }, ptr %.reload9, i32 0, i32 0
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %10, align 4
  %34 = load ptr, ptr %33, align 8
  %35 = ptrtoint ptr %34 to i64
  %36 = load ptr, ptr %10, align 8
  %37 = ptrtoint ptr %36 to i64
  %38 = icmp eq i64 %35, %37
  %39 = icmp eq i64 %35, 0
  %40 = or i1 %38, %39
  %41 = icmp eq i1 %40, false
  store i1 %41, ptr %11, align 1
  %42 = load i1, ptr %11, align 1
  br i1 %42, label %43, label %55

43:                                               ; preds = %19
  %.reload8 = load ptr, ptr %.reg2mem5, align 8
  %44 = getelementptr { ptr, i32 }, ptr %.reload8, i32 0, i32 1
  %45 = load i32, ptr %44, align 4
  store i32 %45, ptr %12, align 4
  %46 = load i32, ptr %12, align 4
  %.reload16 = load i32, ptr %.reg2mem14, align 4
  %47 = add i32 %.reload16, %46
  store i32 %47, ptr %13, align 4
  %48 = load i32, ptr %13, align 4
  store i32 %48, ptr %.reg2mem3, align 4
  %49 = load i32, ptr %12, align 4
  store i32 %49, ptr %14, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %16, align 4
  %50 = load i64, ptr %16, align 4
  store i64 %50, ptr %15, align 4
  %.reload7 = load ptr, ptr %.reg2mem5, align 8
  %51 = getelementptr { ptr, i32 }, ptr %.reload7, i32 0, i32 0
  %52 = load ptr, ptr %15, align 8
  store ptr %52, ptr %51, align 8
  %.reload6 = load ptr, ptr %.reg2mem5, align 8
  %53 = getelementptr { ptr, i32 }, ptr %.reload6, i32 0, i32 1
  %54 = load i32, ptr %14, align 4
  store i32 %54, ptr %53, align 4
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  store i32 %.reload4, ptr %.reg2mem20, align 4
  br label %56

55:                                               ; preds = %19
  %.reload15 = load i32, ptr %.reg2mem14, align 4
  store i32 %.reload15, ptr %.reg2mem20, align 4
  br label %56

56:                                               ; preds = %55, %43
  %.reload21 = load i32, ptr %.reg2mem20, align 4
  store i32 %.reload21, ptr %.reg2mem1, align 4
  br label %57

57:                                               ; preds = %56
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem18, align 4
  br label %59

58:                                               ; preds = %17
  store i32 poison, ptr %.reg2mem18, align 4
  br label %59

59:                                               ; preds = %58, %57
  %.reload19 = load i32, ptr %.reg2mem18, align 4
  store i32 %.reload19, ptr %.reg2mem, align 4
  br label %60

60:                                               ; preds = %59
  %.reload12 = load i1, ptr %.reg2mem11, align 1
  br i1 %.reload12, label %._crit_edge, label %61

._crit_edge:                                      ; preds = %60
  %.reload = load i32, ptr %.reg2mem, align 4
  store i32 %.reload, ptr %.reg2mem22, align 4
  br label %17

61:                                               ; preds = %60
  ret void
}

define void @coroutine_azsxuabqqe_passer(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { ptr, [3 x ptr], ptr, i1, { { ptr, i32 }, i32, i32 } }, ptr %0, i32 0, i32 4, i32 1
  %3 = getelementptr { ptr, [3 x ptr], ptr, i1, { { ptr, i32 }, i32, i32 } }, ptr %0, i32 0, i32 4, i32 2
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %3, align 4
  %6 = load ptr, ptr %0, align 8
  call void %6(i32 %4, i32 %5)
  ret void
}

define void @coroutine_azsxuabqqe_buffer_filler(ptr %0, i32 %1, i32 %2) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %4 = getelementptr { ptr, [3 x ptr], ptr, i1, { { ptr, i32 }, i32, i32 } }, ptr %0, i32 0, i32 4, i32 1
  %5 = getelementptr { ptr, [3 x ptr], ptr, i1, { { ptr, i32 }, i32, i32 } }, ptr %0, i32 0, i32 4, i32 2
  store i32 %1, ptr %4, align 4
  store i32 %2, ptr %5, align 4
  ret void
}

define void @coroutine_eqxwithlrl_passer(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = load ptr, ptr %0, align 8
  %3 = call i32 %2()
  %4 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i32 } }, ptr %0, i32 0, i32 4, i32 1
  store i32 %3, ptr %4, align 4
  %5 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i32 } }, ptr %0, i32 0, i32 4, i32 0
  store ptr @i32_typ, ptr %5, align 8
  ret void
}

define void @coroutine_eqxwithlrl_buffer_filler(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret void
}

define void @coroutine_xhbxxqtegq_passer(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { ptr, [3 x ptr], ptr, i1, { { ptr, i160 }, { ptr, ptr, ptr, i32 } } }, ptr %0, i32 0, i32 4, i32 1
  %3 = load { ptr, ptr, ptr, i32 }, ptr %2, align 8
  %4 = load ptr, ptr %0, align 8
  call void %4({ ptr, ptr, ptr, i32 } %3)
  ret void
}

define void @coroutine_xhbxxqtegq_buffer_filler(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { ptr, [3 x ptr], ptr, i1, { { ptr, i160 }, { ptr, ptr, ptr, i32 } } }, ptr %0, i32 0, i32 4, i32 1
  store { ptr, ptr, ptr, i32 } %1, ptr %3, align 8
  ret void
}

define void @_functionliteral_jdpxdssrdc({ ptr, ptr, ptr, i32 } %0) {
  %2 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %2, align 8
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %2)
  %4 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %5, 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %8 = load ptr, ptr %7, align 8
  %9 = insertvalue { ptr, ptr, ptr, i32 } %6, ptr %8, 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %11 = load ptr, ptr %10, align 8
  %12 = insertvalue { ptr, ptr, ptr, i32 } %9, ptr %11, 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %14 = load i32, ptr %13, align 4
  %15 = insertvalue { ptr, ptr, ptr, i32 } %12, i32 %14, 3
  %16 = alloca [1 x ptr], align 8
  %17 = getelementptr [1 x ptr], ptr %16, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %17, align 8
  %18 = call ptr @llvm.invariant.start.p0(i64 1, ptr %16)
  %19 = call ptr @llvm.invariant.start.p0(i64 56, ptr %5)
  %20 = getelementptr ptr, ptr %5, i32 %14
  %21 = getelementptr ptr, ptr %20, i32 3
  %22 = load ptr, ptr %21, align 8
  %23 = alloca { ptr }, align 8
  %24 = getelementptr { ptr }, ptr %23, i32 0, i32 0
  store ptr @i32_typ, ptr %24, align 8
  %25 = call ptr %22({ ptr, ptr, ptr, i32 } %15, ptr %23)
  call void %25({ ptr, ptr, ptr, i32 } %15, { ptr, ptr, ptr, i32 } %15, ptr %16, i32 88)
  ret void
}

define i1 @_functionliteral_ihfnkenxtj(i32 %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = srem i32 %0, 2
  %3 = icmp eq i32 %2, 0
  ret i1 %3
}

define i32 @_functionliteral_tanqdxfvkj(i32 %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = mul i32 %0, %0
  ret i32 %2
}

define i32 @main() {
  %.reg2mem = alloca i1, align 1
  %.reg2mem20 = alloca ptr, align 8
  %.reg2mem25 = alloca ptr, align 8
  %.reg2mem27 = alloca ptr, align 8
  %.reg2mem29 = alloca ptr, align 8
  %.reg2mem31 = alloca ptr, align 8
  %.reg2mem33 = alloca i1, align 1
  %.reg2mem36 = alloca ptr, align 8
  %.reg2mem45 = alloca ptr, align 8
  %.reg2mem47 = alloca ptr, align 8
  %.reg2mem49 = alloca ptr, align 8
  %.reg2mem51 = alloca ptr, align 8
  %.reg2mem53 = alloca i1, align 1
  %.reg2mem56 = alloca ptr, align 8
  %.reg2mem61 = alloca ptr, align 8
  %.reg2mem63 = alloca ptr, align 8
  %.reg2mem65 = alloca ptr, align 8
  %.reg2mem67 = alloca ptr, align 8
  %.reg2mem69 = alloca i1, align 1
  %.reg2mem72 = alloca ptr, align 8
  %.reg2mem77 = alloca ptr, align 8
  %.reg2mem79 = alloca ptr, align 8
  %.reg2mem81 = alloca ptr, align 8
  %.reg2mem83 = alloca ptr, align 8
  %.reg2mem85 = alloca i32, align 4
  %.reg2mem87 = alloca i32, align 4
  %.reg2mem89 = alloca ptr, align 8
  %.reg2mem94 = alloca ptr, align 8
  %.reg2mem99 = alloca ptr, align 8
  %.reg2mem101 = alloca ptr, align 8
  %.reg2mem103 = alloca ptr, align 8
  %.reg2mem105 = alloca ptr, align 8
  %.reg2mem107 = alloca i1, align 1
  %.reg2mem110 = alloca ptr, align 8
  %.reg2mem119 = alloca ptr, align 8
  %.reg2mem121 = alloca ptr, align 8
  %.reg2mem123 = alloca ptr, align 8
  %.reg2mem125 = alloca ptr, align 8
  %.reg2mem127 = alloca i1, align 1
  %.reg2mem130 = alloca ptr, align 8
  %.reg2mem135 = alloca ptr, align 8
  %.reg2mem137 = alloca ptr, align 8
  %.reg2mem139 = alloca ptr, align 8
  %.reg2mem141 = alloca ptr, align 8
  %.reg2mem143 = alloca ptr, align 8
  %.reg2mem157 = alloca ptr, align 8
  %.reg2mem175 = alloca ptr, align 8
  %.reg2mem179 = alloca ptr, align 8
  %.reg2mem183 = alloca i1, align 1
  %.reg2mem186 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  call void @setup_landing_pad()
  %1 = call i64 @clock()
  %2 = alloca i160, align 8
  %3 = alloca ptr, align 8
  store i64 %1, ptr %2, align 4
  store i64 ptrtoint (ptr @i64_typ to i64), ptr %3, align 4
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, i160 } undef, ptr %4, 0
  %6 = load i160, ptr %2, align 4
  %7 = insertvalue { ptr, i160 } %5, i160 %6, 1
  %8 = alloca [1 x ptr], align 8
  %9 = getelementptr [1 x ptr], ptr %8, i32 0, i32 0
  store ptr @_parameterization_Ptri64, ptr %9, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 1, ptr %8)
  %11 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %12 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %13 = alloca { ptr }, align 8
  %14 = getelementptr { ptr }, ptr %13, i32 0, i32 0
  store ptr %4, ptr %14, align 8
  %15 = call ptr %12(ptr %13)
  call void %15(ptr %8, { ptr, i160 } %7)
  %16 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  %17 = alloca { ptr, ptr, ptr, i32 }, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  store ptr @Bard, ptr %17, align 8
  store ptr %16, ptr %18, align 8
  store i32 7, ptr %19, align 4
  %20 = call ptr @llvm.invariant.start.p0(i64 16, ptr %17)
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 0
  %22 = load ptr, ptr %21, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %22, 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %25 = load ptr, ptr %24, align 8
  %26 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %25, 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 2
  %28 = load ptr, ptr %27, align 8
  %29 = insertvalue { ptr, ptr, ptr, i32 } %26, ptr %28, 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  %31 = load i32, ptr %30, align 4
  %32 = insertvalue { ptr, ptr, ptr, i32 } %29, i32 %31, 3
  %33 = alloca [0 x ptr], align 8
  %34 = call ptr @llvm.invariant.start.p0(i64 0, ptr %33)
  %35 = call ptr @llvm.invariant.start.p0(i64 56, ptr %22)
  %36 = getelementptr ptr, ptr %22, i32 %31
  %37 = load ptr, ptr %36, align 8
  %38 = alloca {}, align 8
  %39 = call ptr %37({ ptr, ptr, ptr, i32 } %32, ptr %38)
  call void %39({ ptr, ptr, ptr, i32 } %32, { ptr, ptr, ptr, i32 } %32, ptr %33)
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 0
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 0
  %43 = load ptr, ptr %41, align 8
  store ptr %43, ptr %42, align 8
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 1
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 1
  %46 = load ptr, ptr %44, align 8
  store ptr %46, ptr %45, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 2
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 2
  %49 = load ptr, ptr %47, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %17, i32 0, i32 3
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 3
  %52 = load i32, ptr %50, align 4
  store i32 %52, ptr %51, align 4
  call void @set_offset(ptr %40, ptr @Bard)
  %53 = alloca { ptr, ptr, ptr, i32 }, align 8
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 0
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 0
  %56 = load ptr, ptr %54, align 8
  store ptr %56, ptr %55, align 8
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 1
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 1
  %59 = load ptr, ptr %57, align 8
  store ptr %59, ptr %58, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 2
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 2
  %62 = load ptr, ptr %60, align 8
  store ptr %62, ptr %61, align 8
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 3
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 3
  %65 = load i32, ptr %63, align 4
  store i32 %65, ptr %64, align 4
  %66 = call ptr @llvm.invariant.start.p0(i64 16, ptr %53)
  %67 = alloca i160, align 8
  %68 = alloca ptr, align 8
  store i32 5, ptr %67, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %68, align 4
  %69 = load ptr, ptr %68, align 8
  %70 = insertvalue { ptr, i160 } undef, ptr %69, 0
  %71 = load i160, ptr %67, align 4
  %72 = insertvalue { ptr, i160 } %70, i160 %71, 1
  %73 = alloca i160, align 8
  %74 = alloca ptr, align 8
  store i32 10, ptr %73, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %74, align 4
  %75 = load ptr, ptr %74, align 8
  %76 = insertvalue { ptr, i160 } undef, ptr %75, 0
  %77 = load i160, ptr %73, align 4
  %78 = insertvalue { ptr, i160 } %76, i160 %77, 1
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 0
  %80 = load ptr, ptr %79, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %80, 0
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 1
  %83 = load ptr, ptr %82, align 8
  %84 = insertvalue { ptr, ptr, ptr, i32 } %81, ptr %83, 1
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 2
  %86 = load ptr, ptr %85, align 8
  %87 = insertvalue { ptr, ptr, ptr, i32 } %84, ptr %86, 2
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 3
  %89 = load i32, ptr %88, align 4
  %90 = insertvalue { ptr, ptr, ptr, i32 } %87, i32 %89, 3
  %91 = alloca [2 x ptr], align 8
  %92 = getelementptr [2 x ptr], ptr %91, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %92, align 8
  %93 = getelementptr [2 x ptr], ptr %91, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %93, align 8
  %94 = call ptr @llvm.invariant.start.p0(i64 4, ptr %91)
  %95 = call ptr @llvm.invariant.start.p0(i64 56, ptr %80)
  %96 = getelementptr ptr, ptr %80, i32 %89
  %97 = getelementptr ptr, ptr %96, i32 1
  %98 = load ptr, ptr %97, align 8
  %99 = alloca { ptr, ptr }, align 8
  %100 = getelementptr { ptr, ptr }, ptr %99, i32 0, i32 0
  store ptr %69, ptr %100, align 8
  %101 = getelementptr { ptr, ptr }, ptr %99, i32 0, i32 1
  store ptr %75, ptr %101, align 8
  %102 = call ptr %98({ ptr, ptr, ptr, i32 } %90, ptr %99)
  call void %102({ ptr, ptr, ptr, i32 } %90, { ptr, ptr, ptr, i32 } %90, ptr %91, { ptr, i160 } %72, { ptr, i160 } %78)
  %103 = alloca i64, align 8
  %104 = alloca ptr, align 8
  store double 7.000000e+00, ptr %103, align 8
  store i64 ptrtoint (ptr @f64_typ to i64), ptr %104, align 4
  %105 = alloca { ptr, i64 }, align 8
  %106 = getelementptr { ptr, i64 }, ptr %105, i32 0, i32 0
  %107 = load ptr, ptr %104, align 8
  store ptr %107, ptr %106, align 8
  %108 = getelementptr { ptr, i64 }, ptr %105, i32 0, i32 1
  %109 = load i64, ptr %103, align 4
  store i64 %109, ptr %108, align 4
  %110 = getelementptr { ptr, i160 }, ptr %105, i32 0, i32 0
  %111 = load ptr, ptr %110, align 8
  %112 = insertvalue { ptr, i160 } undef, ptr %111, 0
  %113 = getelementptr { ptr, i160 }, ptr %105, i32 0, i32 1
  %114 = load i160, ptr %113, align 4
  %115 = insertvalue { ptr, i160 } %112, i160 %114, 1
  %116 = alloca i160, align 8
  %117 = alloca ptr, align 8
  store double 1.400000e+01, ptr %116, align 8
  store i64 ptrtoint (ptr @f64_typ to i64), ptr %117, align 4
  %118 = load ptr, ptr %117, align 8
  %119 = insertvalue { ptr, i160 } undef, ptr %118, 0
  %120 = load i160, ptr %116, align 4
  %121 = insertvalue { ptr, i160 } %119, i160 %120, 1
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 0
  %123 = load ptr, ptr %122, align 8
  %124 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %123, 0
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 1
  %126 = load ptr, ptr %125, align 8
  %127 = insertvalue { ptr, ptr, ptr, i32 } %124, ptr %126, 1
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 2
  %129 = load ptr, ptr %128, align 8
  %130 = insertvalue { ptr, ptr, ptr, i32 } %127, ptr %129, 2
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 3
  %132 = load i32, ptr %131, align 4
  %133 = insertvalue { ptr, ptr, ptr, i32 } %130, i32 %132, 3
  %134 = alloca [2 x ptr], align 8
  %135 = getelementptr [2 x ptr], ptr %134, i32 0, i32 0
  store ptr @_parameterization_Ptrf64_or_Ptri32, ptr %135, align 8
  %136 = getelementptr [2 x ptr], ptr %134, i32 0, i32 1
  store ptr @_parameterization_Ptrf64, ptr %136, align 8
  %137 = call ptr @llvm.invariant.start.p0(i64 4, ptr %134)
  %138 = call ptr @llvm.invariant.start.p0(i64 56, ptr %123)
  %139 = getelementptr ptr, ptr %123, i32 %132
  %140 = getelementptr ptr, ptr %139, i32 1
  %141 = load ptr, ptr %140, align 8
  %142 = alloca { ptr, ptr }, align 8
  %143 = getelementptr { ptr, ptr }, ptr %142, i32 0, i32 0
  store ptr %111, ptr %143, align 8
  %144 = getelementptr { ptr, ptr }, ptr %142, i32 0, i32 1
  store ptr %118, ptr %144, align 8
  %145 = call ptr %141({ ptr, ptr, ptr, i32 } %133, ptr %142)
  call void %145({ ptr, ptr, ptr, i32 } %133, { ptr, ptr, ptr, i32 } %133, ptr %134, { ptr, i160 } %115, { ptr, i160 } %121)
  %146 = alloca ptr, align 8
  %147 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 6) to i64))
  store ptr %147, ptr %146, align 8
  %148 = alloca { ptr }, align 8
  %149 = getelementptr { ptr }, ptr %146, i32 0, i32 0
  %150 = getelementptr { ptr }, ptr %148, i32 0, i32 0
  %151 = load ptr, ptr %149, align 8
  store ptr %151, ptr %150, align 8
  %152 = call ptr @llvm.invariant.start.p0(i64 16, ptr %148)
  %153 = load ptr, ptr %148, align 8
  %154 = getelementptr i8, ptr %153, i64 0
  %155 = load i40, ptr @aizac_start, align 4
  store i40 %155, ptr %154, align 4
  %156 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %157 = alloca { ptr, ptr, ptr, i32 }, align 8
  %158 = getelementptr { ptr, ptr, ptr, i32 }, ptr %157, i32 0, i32 1
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %157, i32 0, i32 3
  store ptr @String, ptr %157, align 8
  store ptr %156, ptr %158, align 8
  store i32 7, ptr %159, align 4
  %160 = call ptr @llvm.invariant.start.p0(i64 16, ptr %157)
  %161 = getelementptr { ptr }, ptr %148, i32 0, i32 0
  %162 = load ptr, ptr %161, align 8
  %163 = insertvalue { ptr } undef, ptr %162, 0
  %164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %157, i32 0, i32 0
  %165 = load ptr, ptr %164, align 8
  %166 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %165, 0
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %157, i32 0, i32 1
  %168 = load ptr, ptr %167, align 8
  %169 = insertvalue { ptr, ptr, ptr, i32 } %166, ptr %168, 1
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %157, i32 0, i32 2
  %171 = load ptr, ptr %170, align 8
  %172 = insertvalue { ptr, ptr, ptr, i32 } %169, ptr %171, 2
  %173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %157, i32 0, i32 3
  %174 = load i32, ptr %173, align 4
  %175 = insertvalue { ptr, ptr, ptr, i32 } %172, i32 %174, 3
  %176 = alloca [3 x ptr], align 8
  %177 = getelementptr [3 x ptr], ptr %176, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %177, align 8
  %178 = getelementptr [3 x ptr], ptr %176, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %178, align 8
  %179 = getelementptr [3 x ptr], ptr %176, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %179, align 8
  %180 = call ptr @llvm.invariant.start.p0(i64 9, ptr %176)
  %181 = call ptr @llvm.invariant.start.p0(i64 280, ptr %165)
  %182 = getelementptr ptr, ptr %165, i32 %174
  %183 = getelementptr ptr, ptr %182, i32 4
  %184 = load ptr, ptr %183, align 8
  %185 = alloca { ptr, ptr, ptr }, align 8
  %186 = getelementptr { ptr, ptr, ptr }, ptr %185, i32 0, i32 0
  store ptr @buffer_typ, ptr %186, align 8
  %187 = getelementptr { ptr, ptr, ptr }, ptr %185, i32 0, i32 1
  store ptr @i32_typ, ptr %187, align 8
  %188 = getelementptr { ptr, ptr, ptr }, ptr %185, i32 0, i32 2
  store ptr @i32_typ, ptr %188, align 8
  %189 = call ptr %184({ ptr, ptr, ptr, i32 } %175, ptr %185)
  call void %189({ ptr, ptr, ptr, i32 } %175, { ptr, ptr, ptr, i32 } %175, ptr %176, { ptr } %163, i32 5, i32 6)
  %190 = getelementptr { ptr, i160 }, ptr %157, i32 0, i32 0
  %191 = load ptr, ptr %190, align 8
  %192 = insertvalue { ptr, i160 } undef, ptr %191, 0
  %193 = getelementptr { ptr, i160 }, ptr %157, i32 0, i32 1
  %194 = load i160, ptr %193, align 4
  %195 = insertvalue { ptr, i160 } %192, i160 %194, 1
  %196 = alloca [1 x ptr], align 8
  %197 = getelementptr [1 x ptr], ptr %196, i32 0, i32 0
  store ptr @_parameterization_String, ptr %197, align 8
  %198 = call ptr @llvm.invariant.start.p0(i64 1, ptr %196)
  %199 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %200 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %201 = alloca { ptr }, align 8
  %202 = getelementptr { ptr }, ptr %201, i32 0, i32 0
  store ptr %191, ptr %202, align 8
  %203 = call ptr %200(ptr %201)
  call void %203(ptr %196, { ptr, i160 } %195)
  %204 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ i32, double, i32 }, ptr null, i32 1) to i64))
  %205 = alloca { ptr, ptr, ptr, i32 }, align 8
  %206 = getelementptr { ptr, ptr, ptr, i32 }, ptr %205, i32 0, i32 1
  %207 = getelementptr { ptr, ptr, ptr, i32 }, ptr %205, i32 0, i32 3
  store ptr @Animal, ptr %205, align 8
  store ptr %204, ptr %206, align 8
  store i32 7, ptr %207, align 4
  %208 = call ptr @llvm.invariant.start.p0(i64 16, ptr %205)
  %209 = getelementptr { ptr, ptr, ptr, i32 }, ptr %205, i32 0, i32 0
  %210 = load ptr, ptr %209, align 8
  %211 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %210, 0
  %212 = getelementptr { ptr, ptr, ptr, i32 }, ptr %205, i32 0, i32 1
  %213 = load ptr, ptr %212, align 8
  %214 = insertvalue { ptr, ptr, ptr, i32 } %211, ptr %213, 1
  %215 = getelementptr { ptr, ptr, ptr, i32 }, ptr %205, i32 0, i32 2
  %216 = load ptr, ptr %215, align 8
  %217 = insertvalue { ptr, ptr, ptr, i32 } %214, ptr %216, 2
  %218 = getelementptr { ptr, ptr, ptr, i32 }, ptr %205, i32 0, i32 3
  %219 = load i32, ptr %218, align 4
  %220 = insertvalue { ptr, ptr, ptr, i32 } %217, i32 %219, 3
  %221 = alloca [3 x ptr], align 8
  %222 = getelementptr [3 x ptr], ptr %221, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %222, align 8
  %223 = getelementptr [3 x ptr], ptr %221, i32 0, i32 1
  store ptr @_parameterization_Ptrf64, ptr %223, align 8
  %224 = getelementptr [3 x ptr], ptr %221, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %224, align 8
  %225 = call ptr @llvm.invariant.start.p0(i64 9, ptr %221)
  %226 = call ptr @llvm.invariant.start.p0(i64 104, ptr %210)
  %227 = getelementptr ptr, ptr %210, i32 %219
  %228 = getelementptr ptr, ptr %227, i32 3
  %229 = load ptr, ptr %228, align 8
  %230 = alloca { ptr, ptr, ptr }, align 8
  %231 = getelementptr { ptr, ptr, ptr }, ptr %230, i32 0, i32 0
  store ptr @i32_typ, ptr %231, align 8
  %232 = getelementptr { ptr, ptr, ptr }, ptr %230, i32 0, i32 1
  store ptr @f64_typ, ptr %232, align 8
  %233 = getelementptr { ptr, ptr, ptr }, ptr %230, i32 0, i32 2
  store ptr @i32_typ, ptr %233, align 8
  %234 = call ptr %229({ ptr, ptr, ptr, i32 } %220, ptr %230)
  call void %234({ ptr, ptr, ptr, i32 } %220, { ptr, ptr, ptr, i32 } %220, ptr %221, i32 55, double 8.000000e+00, i32 13)
  %235 = alloca { ptr, ptr, ptr, i32 }, align 8
  %236 = getelementptr { ptr, ptr, ptr, i32 }, ptr %205, i32 0, i32 0
  %237 = getelementptr { ptr, ptr, ptr, i32 }, ptr %235, i32 0, i32 0
  %238 = load ptr, ptr %236, align 8
  store ptr %238, ptr %237, align 8
  %239 = getelementptr { ptr, ptr, ptr, i32 }, ptr %205, i32 0, i32 1
  %240 = getelementptr { ptr, ptr, ptr, i32 }, ptr %235, i32 0, i32 1
  %241 = load ptr, ptr %239, align 8
  store ptr %241, ptr %240, align 8
  %242 = getelementptr { ptr, ptr, ptr, i32 }, ptr %205, i32 0, i32 2
  %243 = getelementptr { ptr, ptr, ptr, i32 }, ptr %235, i32 0, i32 2
  %244 = load ptr, ptr %242, align 8
  store ptr %244, ptr %243, align 8
  %245 = getelementptr { ptr, ptr, ptr, i32 }, ptr %205, i32 0, i32 3
  %246 = getelementptr { ptr, ptr, ptr, i32 }, ptr %235, i32 0, i32 3
  %247 = load i32, ptr %245, align 4
  store i32 %247, ptr %246, align 4
  call void @set_offset(ptr %235, ptr @Animal)
  %248 = alloca { ptr, ptr, ptr, i32 }, align 8
  %249 = getelementptr { ptr, ptr, ptr, i32 }, ptr %235, i32 0, i32 0
  %250 = getelementptr { ptr, ptr, ptr, i32 }, ptr %248, i32 0, i32 0
  %251 = load ptr, ptr %249, align 8
  store ptr %251, ptr %250, align 8
  %252 = getelementptr { ptr, ptr, ptr, i32 }, ptr %235, i32 0, i32 1
  %253 = getelementptr { ptr, ptr, ptr, i32 }, ptr %248, i32 0, i32 1
  %254 = load ptr, ptr %252, align 8
  store ptr %254, ptr %253, align 8
  %255 = getelementptr { ptr, ptr, ptr, i32 }, ptr %235, i32 0, i32 2
  %256 = getelementptr { ptr, ptr, ptr, i32 }, ptr %248, i32 0, i32 2
  %257 = load ptr, ptr %255, align 8
  store ptr %257, ptr %256, align 8
  %258 = getelementptr { ptr, ptr, ptr, i32 }, ptr %235, i32 0, i32 3
  %259 = getelementptr { ptr, ptr, ptr, i32 }, ptr %248, i32 0, i32 3
  %260 = load i32, ptr %258, align 4
  store i32 %260, ptr %259, align 4
  %261 = call ptr @llvm.invariant.start.p0(i64 16, ptr %248)
  %262 = alloca ptr, align 8
  %263 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 14) to i64))
  store ptr %263, ptr %262, align 8
  %264 = alloca { ptr }, align 8
  %265 = getelementptr { ptr }, ptr %262, i32 0, i32 0
  %266 = getelementptr { ptr }, ptr %264, i32 0, i32 0
  %267 = load ptr, ptr %265, align 8
  store ptr %267, ptr %266, align 8
  %268 = call ptr @llvm.invariant.start.p0(i64 16, ptr %264)
  %269 = load ptr, ptr %264, align 8
  %270 = getelementptr i8, ptr %269, i64 0
  %271 = load i104, ptr @ajteb_did_get_here, align 4
  store i104 %271, ptr %270, align 4
  %272 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %273 = alloca { ptr, ptr, ptr, i32 }, align 8
  %274 = getelementptr { ptr, ptr, ptr, i32 }, ptr %273, i32 0, i32 1
  %275 = getelementptr { ptr, ptr, ptr, i32 }, ptr %273, i32 0, i32 3
  store ptr @String, ptr %273, align 8
  store ptr %272, ptr %274, align 8
  store i32 7, ptr %275, align 4
  %276 = call ptr @llvm.invariant.start.p0(i64 16, ptr %273)
  %277 = getelementptr { ptr }, ptr %264, i32 0, i32 0
  %278 = load ptr, ptr %277, align 8
  %279 = insertvalue { ptr } undef, ptr %278, 0
  %280 = getelementptr { ptr, ptr, ptr, i32 }, ptr %273, i32 0, i32 0
  %281 = load ptr, ptr %280, align 8
  %282 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %281, 0
  %283 = getelementptr { ptr, ptr, ptr, i32 }, ptr %273, i32 0, i32 1
  %284 = load ptr, ptr %283, align 8
  %285 = insertvalue { ptr, ptr, ptr, i32 } %282, ptr %284, 1
  %286 = getelementptr { ptr, ptr, ptr, i32 }, ptr %273, i32 0, i32 2
  %287 = load ptr, ptr %286, align 8
  %288 = insertvalue { ptr, ptr, ptr, i32 } %285, ptr %287, 2
  %289 = getelementptr { ptr, ptr, ptr, i32 }, ptr %273, i32 0, i32 3
  %290 = load i32, ptr %289, align 4
  %291 = insertvalue { ptr, ptr, ptr, i32 } %288, i32 %290, 3
  %292 = alloca [3 x ptr], align 8
  %293 = getelementptr [3 x ptr], ptr %292, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %293, align 8
  %294 = getelementptr [3 x ptr], ptr %292, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %294, align 8
  %295 = getelementptr [3 x ptr], ptr %292, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %295, align 8
  %296 = call ptr @llvm.invariant.start.p0(i64 9, ptr %292)
  %297 = call ptr @llvm.invariant.start.p0(i64 280, ptr %281)
  %298 = getelementptr ptr, ptr %281, i32 %290
  %299 = getelementptr ptr, ptr %298, i32 4
  %300 = load ptr, ptr %299, align 8
  %301 = alloca { ptr, ptr, ptr }, align 8
  %302 = getelementptr { ptr, ptr, ptr }, ptr %301, i32 0, i32 0
  store ptr @buffer_typ, ptr %302, align 8
  %303 = getelementptr { ptr, ptr, ptr }, ptr %301, i32 0, i32 1
  store ptr @i32_typ, ptr %303, align 8
  %304 = getelementptr { ptr, ptr, ptr }, ptr %301, i32 0, i32 2
  store ptr @i32_typ, ptr %304, align 8
  %305 = call ptr %300({ ptr, ptr, ptr, i32 } %291, ptr %301)
  call void %305({ ptr, ptr, ptr, i32 } %291, { ptr, ptr, ptr, i32 } %291, ptr %292, { ptr } %279, i32 13, i32 14)
  %306 = getelementptr { ptr, i160 }, ptr %273, i32 0, i32 0
  %307 = load ptr, ptr %306, align 8
  %308 = insertvalue { ptr, i160 } undef, ptr %307, 0
  %309 = getelementptr { ptr, i160 }, ptr %273, i32 0, i32 1
  %310 = load i160, ptr %309, align 4
  %311 = insertvalue { ptr, i160 } %308, i160 %310, 1
  %312 = alloca [1 x ptr], align 8
  %313 = getelementptr [1 x ptr], ptr %312, i32 0, i32 0
  store ptr @_parameterization_String, ptr %313, align 8
  %314 = call ptr @llvm.invariant.start.p0(i64 1, ptr %312)
  %315 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %316 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %317 = alloca { ptr }, align 8
  %318 = getelementptr { ptr }, ptr %317, i32 0, i32 0
  store ptr %307, ptr %318, align 8
  %319 = call ptr %316(ptr %317)
  call void %319(ptr %312, { ptr, i160 } %311)
  %320 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ i32, double }, ptr null, i32 1) to i64))
  %321 = alloca { ptr, ptr, ptr, i32 }, align 8
  %322 = getelementptr { ptr, ptr, ptr, i32 }, ptr %321, i32 0, i32 1
  %323 = getelementptr { ptr, ptr, ptr, i32 }, ptr %321, i32 0, i32 3
  store ptr @Beaver, ptr %321, align 8
  store ptr %320, ptr %322, align 8
  store i32 7, ptr %323, align 4
  %324 = call ptr @llvm.invariant.start.p0(i64 16, ptr %321)
  %325 = getelementptr { ptr, ptr, ptr, i32 }, ptr %321, i32 0, i32 0
  %326 = load ptr, ptr %325, align 8
  %327 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %326, 0
  %328 = getelementptr { ptr, ptr, ptr, i32 }, ptr %321, i32 0, i32 1
  %329 = load ptr, ptr %328, align 8
  %330 = insertvalue { ptr, ptr, ptr, i32 } %327, ptr %329, 1
  %331 = getelementptr { ptr, ptr, ptr, i32 }, ptr %321, i32 0, i32 2
  %332 = load ptr, ptr %331, align 8
  %333 = insertvalue { ptr, ptr, ptr, i32 } %330, ptr %332, 2
  %334 = getelementptr { ptr, ptr, ptr, i32 }, ptr %321, i32 0, i32 3
  %335 = load i32, ptr %334, align 4
  %336 = insertvalue { ptr, ptr, ptr, i32 } %333, i32 %335, 3
  %337 = alloca [2 x ptr], align 8
  %338 = getelementptr [2 x ptr], ptr %337, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %338, align 8
  %339 = getelementptr [2 x ptr], ptr %337, i32 0, i32 1
  store ptr @_parameterization_Ptrf64, ptr %339, align 8
  %340 = call ptr @llvm.invariant.start.p0(i64 4, ptr %337)
  %341 = call ptr @llvm.invariant.start.p0(i64 64, ptr %326)
  %342 = getelementptr ptr, ptr %326, i32 %335
  %343 = getelementptr ptr, ptr %342, i32 2
  %344 = load ptr, ptr %343, align 8
  %345 = alloca { ptr, ptr }, align 8
  %346 = getelementptr { ptr, ptr }, ptr %345, i32 0, i32 0
  store ptr @i32_typ, ptr %346, align 8
  %347 = getelementptr { ptr, ptr }, ptr %345, i32 0, i32 1
  store ptr @f64_typ, ptr %347, align 8
  %348 = call ptr %344({ ptr, ptr, ptr, i32 } %336, ptr %345)
  call void %348({ ptr, ptr, ptr, i32 } %336, { ptr, ptr, ptr, i32 } %336, ptr %337, i32 10, double 1.000000e+01)
  %349 = alloca { ptr, ptr, ptr, i32 }, align 8
  %350 = getelementptr { ptr, ptr, ptr, i32 }, ptr %321, i32 0, i32 0
  %351 = getelementptr { ptr, ptr, ptr, i32 }, ptr %349, i32 0, i32 0
  %352 = load ptr, ptr %350, align 8
  store ptr %352, ptr %351, align 8
  %353 = getelementptr { ptr, ptr, ptr, i32 }, ptr %321, i32 0, i32 1
  %354 = getelementptr { ptr, ptr, ptr, i32 }, ptr %349, i32 0, i32 1
  %355 = load ptr, ptr %353, align 8
  store ptr %355, ptr %354, align 8
  %356 = getelementptr { ptr, ptr, ptr, i32 }, ptr %321, i32 0, i32 2
  %357 = getelementptr { ptr, ptr, ptr, i32 }, ptr %349, i32 0, i32 2
  %358 = load ptr, ptr %356, align 8
  store ptr %358, ptr %357, align 8
  %359 = getelementptr { ptr, ptr, ptr, i32 }, ptr %321, i32 0, i32 3
  %360 = getelementptr { ptr, ptr, ptr, i32 }, ptr %349, i32 0, i32 3
  %361 = load i32, ptr %359, align 4
  store i32 %361, ptr %360, align 4
  call void @set_offset(ptr %349, ptr @Beaver)
  %362 = alloca { ptr, ptr, ptr, i32 }, align 8
  %363 = getelementptr { ptr, ptr, ptr, i32 }, ptr %349, i32 0, i32 0
  %364 = getelementptr { ptr, ptr, ptr, i32 }, ptr %362, i32 0, i32 0
  %365 = load ptr, ptr %363, align 8
  store ptr %365, ptr %364, align 8
  %366 = getelementptr { ptr, ptr, ptr, i32 }, ptr %349, i32 0, i32 1
  %367 = getelementptr { ptr, ptr, ptr, i32 }, ptr %362, i32 0, i32 1
  %368 = load ptr, ptr %366, align 8
  store ptr %368, ptr %367, align 8
  %369 = getelementptr { ptr, ptr, ptr, i32 }, ptr %349, i32 0, i32 2
  %370 = getelementptr { ptr, ptr, ptr, i32 }, ptr %362, i32 0, i32 2
  %371 = load ptr, ptr %369, align 8
  store ptr %371, ptr %370, align 8
  %372 = getelementptr { ptr, ptr, ptr, i32 }, ptr %349, i32 0, i32 3
  %373 = getelementptr { ptr, ptr, ptr, i32 }, ptr %362, i32 0, i32 3
  %374 = load i32, ptr %372, align 4
  store i32 %374, ptr %373, align 4
  %375 = call ptr @llvm.invariant.start.p0(i64 16, ptr %362)
  %376 = getelementptr { ptr, i160 }, ptr %248, i32 0, i32 0
  %377 = load ptr, ptr %376, align 8
  %378 = insertvalue { ptr, i160 } undef, ptr %377, 0
  %379 = getelementptr { ptr, i160 }, ptr %248, i32 0, i32 1
  %380 = load i160, ptr %379, align 4
  %381 = insertvalue { ptr, i160 } %378, i160 %380, 1
  %382 = getelementptr { ptr, i160 }, ptr %362, i32 0, i32 0
  %383 = load ptr, ptr %382, align 8
  %384 = insertvalue { ptr, i160 } undef, ptr %383, 0
  %385 = getelementptr { ptr, i160 }, ptr %362, i32 0, i32 1
  %386 = load i160, ptr %385, align 4
  %387 = insertvalue { ptr, i160 } %384, i160 %386, 1
  %388 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 0
  %389 = load ptr, ptr %388, align 8
  %390 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %389, 0
  %391 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 1
  %392 = load ptr, ptr %391, align 8
  %393 = insertvalue { ptr, ptr, ptr, i32 } %390, ptr %392, 1
  %394 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 2
  %395 = load ptr, ptr %394, align 8
  %396 = insertvalue { ptr, ptr, ptr, i32 } %393, ptr %395, 2
  %397 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 3
  %398 = load i32, ptr %397, align 4
  %399 = insertvalue { ptr, ptr, ptr, i32 } %396, i32 %398, 3
  %400 = alloca [2 x ptr], align 8
  %401 = getelementptr [2 x ptr], ptr %400, i32 0, i32 0
  store ptr @_parameterization_Animal, ptr %401, align 8
  %402 = getelementptr [2 x ptr], ptr %400, i32 0, i32 1
  store ptr @_parameterization_Beaver, ptr %402, align 8
  %403 = call ptr @llvm.invariant.start.p0(i64 4, ptr %400)
  %404 = call ptr @llvm.invariant.start.p0(i64 56, ptr %389)
  %405 = getelementptr ptr, ptr %389, i32 %398
  %406 = getelementptr ptr, ptr %405, i32 1
  %407 = load ptr, ptr %406, align 8
  %408 = alloca { ptr, ptr }, align 8
  %409 = getelementptr { ptr, ptr }, ptr %408, i32 0, i32 0
  store ptr %377, ptr %409, align 8
  %410 = getelementptr { ptr, ptr }, ptr %408, i32 0, i32 1
  store ptr %383, ptr %410, align 8
  %411 = call ptr %407({ ptr, ptr, ptr, i32 } %399, ptr %408)
  call void %411({ ptr, ptr, ptr, i32 } %399, { ptr, ptr, ptr, i32 } %399, ptr %400, { ptr, i160 } %381, { ptr, i160 } %387)
  %412 = alloca i160, align 8
  %413 = alloca ptr, align 8
  store i32 7, ptr %412, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %413, align 4
  %414 = load ptr, ptr %413, align 8
  %415 = insertvalue { ptr, i160 } undef, ptr %414, 0
  %416 = load i160, ptr %412, align 4
  %417 = insertvalue { ptr, i160 } %415, i160 %416, 1
  %418 = alloca { ptr, i64 }, align 8
  %419 = getelementptr { ptr, i64 }, ptr %418, i32 0, i32 0
  %420 = load ptr, ptr %104, align 8
  store ptr %420, ptr %419, align 8
  %421 = getelementptr { ptr, i64 }, ptr %418, i32 0, i32 1
  %422 = load i64, ptr %103, align 4
  store i64 %422, ptr %421, align 4
  %423 = getelementptr { ptr, i160 }, ptr %418, i32 0, i32 0
  %424 = load ptr, ptr %423, align 8
  %425 = insertvalue { ptr, i160 } undef, ptr %424, 0
  %426 = getelementptr { ptr, i160 }, ptr %418, i32 0, i32 1
  %427 = load i160, ptr %426, align 4
  %428 = insertvalue { ptr, i160 } %425, i160 %427, 1
  %429 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 0
  %430 = load ptr, ptr %429, align 8
  %431 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %430, 0
  %432 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 1
  %433 = load ptr, ptr %432, align 8
  %434 = insertvalue { ptr, ptr, ptr, i32 } %431, ptr %433, 1
  %435 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 2
  %436 = load ptr, ptr %435, align 8
  %437 = insertvalue { ptr, ptr, ptr, i32 } %434, ptr %436, 2
  %438 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 3
  %439 = load i32, ptr %438, align 4
  %440 = insertvalue { ptr, ptr, ptr, i32 } %437, i32 %439, 3
  %441 = alloca [2 x ptr], align 8
  %442 = getelementptr [2 x ptr], ptr %441, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %442, align 8
  %443 = getelementptr [2 x ptr], ptr %441, i32 0, i32 1
  store ptr @_parameterization_Ptrf64_or_Ptri32, ptr %443, align 8
  %444 = call ptr @llvm.invariant.start.p0(i64 4, ptr %441)
  %445 = call ptr @llvm.invariant.start.p0(i64 56, ptr %430)
  %446 = getelementptr ptr, ptr %430, i32 %439
  %447 = getelementptr ptr, ptr %446, i32 1
  %448 = load ptr, ptr %447, align 8
  %449 = alloca { ptr, ptr }, align 8
  %450 = getelementptr { ptr, ptr }, ptr %449, i32 0, i32 0
  store ptr %414, ptr %450, align 8
  %451 = getelementptr { ptr, ptr }, ptr %449, i32 0, i32 1
  store ptr %424, ptr %451, align 8
  %452 = call ptr %448({ ptr, ptr, ptr, i32 } %440, ptr %449)
  call void %452({ ptr, ptr, ptr, i32 } %440, { ptr, ptr, ptr, i32 } %440, ptr %441, { ptr, i160 } %417, { ptr, i160 } %428)
  %453 = alloca ptr, align 8
  %454 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 17) to i64))
  store ptr %454, ptr %453, align 8
  %455 = alloca { ptr }, align 8
  %456 = getelementptr { ptr }, ptr %453, i32 0, i32 0
  %457 = getelementptr { ptr }, ptr %455, i32 0, i32 0
  %458 = load ptr, ptr %456, align 8
  store ptr %458, ptr %457, align 8
  %459 = call ptr @llvm.invariant.start.p0(i64 16, ptr %455)
  %460 = load ptr, ptr %455, align 8
  %461 = getelementptr i8, ptr %460, i64 0
  %462 = load i128, ptr @cfrmd_barrys_color_is, align 4
  store i128 %462, ptr %461, align 4
  %463 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %464 = alloca { ptr, ptr, ptr, i32 }, align 8
  %465 = getelementptr { ptr, ptr, ptr, i32 }, ptr %464, i32 0, i32 1
  %466 = getelementptr { ptr, ptr, ptr, i32 }, ptr %464, i32 0, i32 3
  store ptr @String, ptr %464, align 8
  store ptr %463, ptr %465, align 8
  store i32 7, ptr %466, align 4
  %467 = call ptr @llvm.invariant.start.p0(i64 16, ptr %464)
  %468 = getelementptr { ptr }, ptr %455, i32 0, i32 0
  %469 = load ptr, ptr %468, align 8
  %470 = insertvalue { ptr } undef, ptr %469, 0
  %471 = getelementptr { ptr, ptr, ptr, i32 }, ptr %464, i32 0, i32 0
  %472 = load ptr, ptr %471, align 8
  %473 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %472, 0
  %474 = getelementptr { ptr, ptr, ptr, i32 }, ptr %464, i32 0, i32 1
  %475 = load ptr, ptr %474, align 8
  %476 = insertvalue { ptr, ptr, ptr, i32 } %473, ptr %475, 1
  %477 = getelementptr { ptr, ptr, ptr, i32 }, ptr %464, i32 0, i32 2
  %478 = load ptr, ptr %477, align 8
  %479 = insertvalue { ptr, ptr, ptr, i32 } %476, ptr %478, 2
  %480 = getelementptr { ptr, ptr, ptr, i32 }, ptr %464, i32 0, i32 3
  %481 = load i32, ptr %480, align 4
  %482 = insertvalue { ptr, ptr, ptr, i32 } %479, i32 %481, 3
  %483 = alloca [3 x ptr], align 8
  %484 = getelementptr [3 x ptr], ptr %483, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %484, align 8
  %485 = getelementptr [3 x ptr], ptr %483, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %485, align 8
  %486 = getelementptr [3 x ptr], ptr %483, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %486, align 8
  %487 = call ptr @llvm.invariant.start.p0(i64 9, ptr %483)
  %488 = call ptr @llvm.invariant.start.p0(i64 280, ptr %472)
  %489 = getelementptr ptr, ptr %472, i32 %481
  %490 = getelementptr ptr, ptr %489, i32 4
  %491 = load ptr, ptr %490, align 8
  %492 = alloca { ptr, ptr, ptr }, align 8
  %493 = getelementptr { ptr, ptr, ptr }, ptr %492, i32 0, i32 0
  store ptr @buffer_typ, ptr %493, align 8
  %494 = getelementptr { ptr, ptr, ptr }, ptr %492, i32 0, i32 1
  store ptr @i32_typ, ptr %494, align 8
  %495 = getelementptr { ptr, ptr, ptr }, ptr %492, i32 0, i32 2
  store ptr @i32_typ, ptr %495, align 8
  %496 = call ptr %491({ ptr, ptr, ptr, i32 } %482, ptr %492)
  call void %496({ ptr, ptr, ptr, i32 } %482, { ptr, ptr, ptr, i32 } %482, ptr %483, { ptr } %470, i32 16, i32 17)
  %497 = getelementptr { ptr, i160 }, ptr %464, i32 0, i32 0
  %498 = load ptr, ptr %497, align 8
  %499 = insertvalue { ptr, i160 } undef, ptr %498, 0
  %500 = getelementptr { ptr, i160 }, ptr %464, i32 0, i32 1
  %501 = load i160, ptr %500, align 4
  %502 = insertvalue { ptr, i160 } %499, i160 %501, 1
  %503 = alloca [1 x ptr], align 8
  %504 = getelementptr [1 x ptr], ptr %503, i32 0, i32 0
  store ptr @_parameterization_String, ptr %504, align 8
  %505 = call ptr @llvm.invariant.start.p0(i64 1, ptr %503)
  %506 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %507 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %508 = alloca { ptr }, align 8
  %509 = getelementptr { ptr }, ptr %508, i32 0, i32 0
  store ptr %498, ptr %509, align 8
  %510 = call ptr %507(ptr %508)
  call void %510(ptr %503, { ptr, i160 } %502)
  %511 = getelementptr { ptr, ptr, ptr, i32 }, ptr %362, i32 0, i32 0
  %512 = load ptr, ptr %511, align 8
  %513 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %512, 0
  %514 = getelementptr { ptr, ptr, ptr, i32 }, ptr %362, i32 0, i32 1
  %515 = load ptr, ptr %514, align 8
  %516 = insertvalue { ptr, ptr, ptr, i32 } %513, ptr %515, 1
  %517 = getelementptr { ptr, ptr, ptr, i32 }, ptr %362, i32 0, i32 2
  %518 = load ptr, ptr %517, align 8
  %519 = insertvalue { ptr, ptr, ptr, i32 } %516, ptr %518, 2
  %520 = getelementptr { ptr, ptr, ptr, i32 }, ptr %362, i32 0, i32 3
  %521 = load i32, ptr %520, align 4
  %522 = insertvalue { ptr, ptr, ptr, i32 } %519, i32 %521, 3
  %523 = alloca [0 x ptr], align 8
  %524 = call ptr @llvm.invariant.start.p0(i64 0, ptr %523)
  %525 = call ptr @llvm.invariant.start.p0(i64 64, ptr %512)
  %526 = getelementptr ptr, ptr %512, i32 %521
  %527 = getelementptr ptr, ptr %526, i32 4
  %528 = load ptr, ptr %527, align 8
  %529 = alloca {}, align 8
  %530 = call ptr %528({ ptr, ptr, ptr, i32 } %522, ptr %529)
  call void %530({ ptr, ptr, ptr, i32 } %522, { ptr, ptr, ptr, i32 } %522, ptr %523)
  %531 = getelementptr { ptr, ptr, ptr, i32 }, ptr %362, i32 0, i32 0
  %532 = load ptr, ptr %531, align 8
  %533 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %532, 0
  %534 = getelementptr { ptr, ptr, ptr, i32 }, ptr %362, i32 0, i32 1
  %535 = load ptr, ptr %534, align 8
  %536 = insertvalue { ptr, ptr, ptr, i32 } %533, ptr %535, 1
  %537 = getelementptr { ptr, ptr, ptr, i32 }, ptr %362, i32 0, i32 2
  %538 = load ptr, ptr %537, align 8
  %539 = insertvalue { ptr, ptr, ptr, i32 } %536, ptr %538, 2
  %540 = getelementptr { ptr, ptr, ptr, i32 }, ptr %362, i32 0, i32 3
  %541 = load i32, ptr %540, align 4
  %542 = insertvalue { ptr, ptr, ptr, i32 } %539, i32 %541, 3
  %543 = alloca [1 x ptr], align 8
  %544 = getelementptr [1 x ptr], ptr %543, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %544, align 8
  %545 = call ptr @llvm.invariant.start.p0(i64 1, ptr %543)
  %546 = call ptr @llvm.invariant.start.p0(i64 64, ptr %532)
  %547 = getelementptr ptr, ptr %532, i32 %541
  %548 = getelementptr ptr, ptr %547, i32 3
  %549 = load ptr, ptr %548, align 8
  %550 = alloca { ptr }, align 8
  %551 = getelementptr { ptr }, ptr %550, i32 0, i32 0
  store ptr @i32_typ, ptr %551, align 8
  %552 = call ptr %549({ ptr, ptr, ptr, i32 } %542, ptr %550)
  call void %552({ ptr, ptr, ptr, i32 } %542, { ptr, ptr, ptr, i32 } %542, ptr %543, i32 5)
  %553 = getelementptr { ptr, ptr, ptr, i32 }, ptr %362, i32 0, i32 0
  %554 = load ptr, ptr %553, align 8
  %555 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %554, 0
  %556 = getelementptr { ptr, ptr, ptr, i32 }, ptr %362, i32 0, i32 1
  %557 = load ptr, ptr %556, align 8
  %558 = insertvalue { ptr, ptr, ptr, i32 } %555, ptr %557, 1
  %559 = getelementptr { ptr, ptr, ptr, i32 }, ptr %362, i32 0, i32 2
  %560 = load ptr, ptr %559, align 8
  %561 = insertvalue { ptr, ptr, ptr, i32 } %558, ptr %560, 2
  %562 = getelementptr { ptr, ptr, ptr, i32 }, ptr %362, i32 0, i32 3
  %563 = load i32, ptr %562, align 4
  %564 = insertvalue { ptr, ptr, ptr, i32 } %561, i32 %563, 3
  %565 = alloca [0 x ptr], align 8
  %566 = call ptr @llvm.invariant.start.p0(i64 0, ptr %565)
  %567 = call ptr @llvm.invariant.start.p0(i64 64, ptr %554)
  %568 = getelementptr ptr, ptr %554, i32 %563
  %569 = getelementptr ptr, ptr %568, i32 4
  %570 = load ptr, ptr %569, align 8
  %571 = alloca {}, align 8
  %572 = call ptr %570({ ptr, ptr, ptr, i32 } %564, ptr %571)
  call void %572({ ptr, ptr, ptr, i32 } %564, { ptr, ptr, ptr, i32 } %564, ptr %565)
  %573 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ i32 }, ptr null, i32 1) to i64))
  %574 = alloca { ptr, ptr, ptr, i32 }, align 8
  %575 = getelementptr { ptr, ptr, ptr, i32 }, ptr %574, i32 0, i32 1
  %576 = getelementptr { ptr, ptr, ptr, i32 }, ptr %574, i32 0, i32 3
  store ptr @Integer, ptr %574, align 8
  store ptr %573, ptr %575, align 8
  store i32 7, ptr %576, align 4
  %577 = call ptr @llvm.invariant.start.p0(i64 16, ptr %574)
  %578 = getelementptr { ptr, ptr, ptr, i32 }, ptr %574, i32 0, i32 0
  %579 = load ptr, ptr %578, align 8
  %580 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %579, 0
  %581 = getelementptr { ptr, ptr, ptr, i32 }, ptr %574, i32 0, i32 1
  %582 = load ptr, ptr %581, align 8
  %583 = insertvalue { ptr, ptr, ptr, i32 } %580, ptr %582, 1
  %584 = getelementptr { ptr, ptr, ptr, i32 }, ptr %574, i32 0, i32 2
  %585 = load ptr, ptr %584, align 8
  %586 = insertvalue { ptr, ptr, ptr, i32 } %583, ptr %585, 2
  %587 = getelementptr { ptr, ptr, ptr, i32 }, ptr %574, i32 0, i32 3
  %588 = load i32, ptr %587, align 4
  %589 = insertvalue { ptr, ptr, ptr, i32 } %586, i32 %588, 3
  %590 = alloca [1 x ptr], align 8
  %591 = getelementptr [1 x ptr], ptr %590, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %591, align 8
  %592 = call ptr @llvm.invariant.start.p0(i64 1, ptr %590)
  %593 = call ptr @llvm.invariant.start.p0(i64 104, ptr %579)
  %594 = getelementptr ptr, ptr %579, i32 %588
  %595 = getelementptr ptr, ptr %594, i32 1
  %596 = load ptr, ptr %595, align 8
  %597 = alloca { ptr }, align 8
  %598 = getelementptr { ptr }, ptr %597, i32 0, i32 0
  store ptr @i32_typ, ptr %598, align 8
  %599 = call ptr %596({ ptr, ptr, ptr, i32 } %589, ptr %597)
  call void %599({ ptr, ptr, ptr, i32 } %589, { ptr, ptr, ptr, i32 } %589, ptr %590, i32 89)
  %600 = alloca { ptr, ptr, ptr, i32 }, align 8
  %601 = getelementptr { ptr, ptr, ptr, i32 }, ptr %574, i32 0, i32 0
  %602 = getelementptr { ptr, ptr, ptr, i32 }, ptr %600, i32 0, i32 0
  %603 = load ptr, ptr %601, align 8
  store ptr %603, ptr %602, align 8
  %604 = getelementptr { ptr, ptr, ptr, i32 }, ptr %574, i32 0, i32 1
  %605 = getelementptr { ptr, ptr, ptr, i32 }, ptr %600, i32 0, i32 1
  %606 = load ptr, ptr %604, align 8
  store ptr %606, ptr %605, align 8
  %607 = getelementptr { ptr, ptr, ptr, i32 }, ptr %574, i32 0, i32 2
  %608 = getelementptr { ptr, ptr, ptr, i32 }, ptr %600, i32 0, i32 2
  %609 = load ptr, ptr %607, align 8
  store ptr %609, ptr %608, align 8
  %610 = getelementptr { ptr, ptr, ptr, i32 }, ptr %574, i32 0, i32 3
  %611 = getelementptr { ptr, ptr, ptr, i32 }, ptr %600, i32 0, i32 3
  %612 = load i32, ptr %610, align 4
  store i32 %612, ptr %611, align 4
  call void @set_offset(ptr %600, ptr @Integer)
  %613 = alloca { ptr, ptr, ptr, i32 }, align 8
  %614 = getelementptr { ptr, ptr, ptr, i32 }, ptr %600, i32 0, i32 0
  %615 = getelementptr { ptr, ptr, ptr, i32 }, ptr %613, i32 0, i32 0
  %616 = load ptr, ptr %614, align 8
  store ptr %616, ptr %615, align 8
  %617 = getelementptr { ptr, ptr, ptr, i32 }, ptr %600, i32 0, i32 1
  %618 = getelementptr { ptr, ptr, ptr, i32 }, ptr %613, i32 0, i32 1
  %619 = load ptr, ptr %617, align 8
  store ptr %619, ptr %618, align 8
  %620 = getelementptr { ptr, ptr, ptr, i32 }, ptr %600, i32 0, i32 2
  %621 = getelementptr { ptr, ptr, ptr, i32 }, ptr %613, i32 0, i32 2
  %622 = load ptr, ptr %620, align 8
  store ptr %622, ptr %621, align 8
  %623 = getelementptr { ptr, ptr, ptr, i32 }, ptr %600, i32 0, i32 3
  %624 = getelementptr { ptr, ptr, ptr, i32 }, ptr %613, i32 0, i32 3
  %625 = load i32, ptr %623, align 4
  store i32 %625, ptr %624, align 4
  %626 = call ptr @llvm.invariant.start.p0(i64 16, ptr %613)
  %627 = getelementptr { ptr, ptr, ptr, i32 }, ptr %613, i32 0, i32 0
  %628 = load ptr, ptr %627, align 8
  %629 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %628, 0
  %630 = getelementptr { ptr, ptr, ptr, i32 }, ptr %613, i32 0, i32 1
  %631 = load ptr, ptr %630, align 8
  %632 = insertvalue { ptr, ptr, ptr, i32 } %629, ptr %631, 1
  %633 = getelementptr { ptr, ptr, ptr, i32 }, ptr %613, i32 0, i32 2
  %634 = load ptr, ptr %633, align 8
  %635 = insertvalue { ptr, ptr, ptr, i32 } %632, ptr %634, 2
  %636 = getelementptr { ptr, ptr, ptr, i32 }, ptr %613, i32 0, i32 3
  %637 = load i32, ptr %636, align 4
  %638 = insertvalue { ptr, ptr, ptr, i32 } %635, i32 %637, 3
  %639 = alloca [1 x ptr], align 8
  %640 = getelementptr [1 x ptr], ptr %639, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %640, align 8
  %641 = call ptr @llvm.invariant.start.p0(i64 1, ptr %639)
  %642 = call ptr @llvm.invariant.start.p0(i64 104, ptr %628)
  %643 = getelementptr ptr, ptr %628, i32 %637
  %644 = getelementptr ptr, ptr %643, i32 3
  %645 = load ptr, ptr %644, align 8
  %646 = alloca { ptr }, align 8
  %647 = getelementptr { ptr }, ptr %646, i32 0, i32 0
  store ptr @i32_typ, ptr %647, align 8
  %648 = call ptr %645({ ptr, ptr, ptr, i32 } %638, ptr %646)
  %649 = call { ptr, ptr, ptr, i32 } %648({ ptr, ptr, ptr, i32 } %638, { ptr, ptr, ptr, i32 } %638, ptr %639, i32 7)
  %650 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %649, ptr %650, align 8
  %651 = call ptr @llvm.invariant.start.p0(i64 16, ptr %650)
  %652 = alloca { ptr, ptr, ptr, i32 }, align 8
  %653 = getelementptr { ptr, ptr, ptr, i32 }, ptr %650, i32 0, i32 0
  %654 = getelementptr { ptr, ptr, ptr, i32 }, ptr %652, i32 0, i32 0
  %655 = load ptr, ptr %653, align 8
  store ptr %655, ptr %654, align 8
  %656 = getelementptr { ptr, ptr, ptr, i32 }, ptr %650, i32 0, i32 1
  %657 = getelementptr { ptr, ptr, ptr, i32 }, ptr %652, i32 0, i32 1
  %658 = load ptr, ptr %656, align 8
  store ptr %658, ptr %657, align 8
  %659 = getelementptr { ptr, ptr, ptr, i32 }, ptr %650, i32 0, i32 2
  %660 = getelementptr { ptr, ptr, ptr, i32 }, ptr %652, i32 0, i32 2
  %661 = load ptr, ptr %659, align 8
  store ptr %661, ptr %660, align 8
  %662 = getelementptr { ptr, ptr, ptr, i32 }, ptr %650, i32 0, i32 3
  %663 = getelementptr { ptr, ptr, ptr, i32 }, ptr %652, i32 0, i32 3
  %664 = load i32, ptr %662, align 4
  store i32 %664, ptr %663, align 4
  call void @set_offset(ptr %652, ptr @Integer)
  %665 = getelementptr { ptr, ptr, ptr, i32 }, ptr %652, i32 0, i32 0
  %666 = load ptr, ptr %665, align 8
  %667 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %666, 0
  %668 = getelementptr { ptr, ptr, ptr, i32 }, ptr %652, i32 0, i32 1
  %669 = load ptr, ptr %668, align 8
  %670 = insertvalue { ptr, ptr, ptr, i32 } %667, ptr %669, 1
  %671 = getelementptr { ptr, ptr, ptr, i32 }, ptr %652, i32 0, i32 2
  %672 = load ptr, ptr %671, align 8
  %673 = insertvalue { ptr, ptr, ptr, i32 } %670, ptr %672, 2
  %674 = getelementptr { ptr, ptr, ptr, i32 }, ptr %652, i32 0, i32 3
  %675 = load i32, ptr %674, align 4
  %676 = insertvalue { ptr, ptr, ptr, i32 } %673, i32 %675, 3
  %677 = alloca [0 x ptr], align 8
  %678 = call ptr @llvm.invariant.start.p0(i64 0, ptr %677)
  %679 = call ptr @llvm.invariant.start.p0(i64 104, ptr %666)
  %680 = getelementptr ptr, ptr %666, i32 %675
  %681 = getelementptr ptr, ptr %680, i32 6
  %682 = load ptr, ptr %681, align 8
  %683 = alloca {}, align 8
  %684 = call ptr %682({ ptr, ptr, ptr, i32 } %676, ptr %683)
  call void %684({ ptr, ptr, ptr, i32 } %676, { ptr, ptr, ptr, i32 } %676, ptr %677)
  %685 = alloca [1 x ptr], align 8
  %686 = getelementptr [1 x ptr], ptr %685, i32 0, i32 0
  store ptr @_parameterization_Ptrf64, ptr %686, align 8
  %687 = call ptr @llvm.invariant.start.p0(i64 1, ptr %685)
  %688 = call ptr @llvm.invariant.start.p0(i64 136, ptr @Math)
  %689 = load ptr, ptr getelementptr (ptr, ptr @Math, i32 7), align 8
  %690 = alloca { ptr }, align 8
  %691 = getelementptr { ptr }, ptr %690, i32 0, i32 0
  store ptr @f64_typ, ptr %691, align 8
  %692 = call ptr %689(ptr %690)
  %693 = call double %692(ptr %685, double 9.000000e+00)
  %694 = alloca i64, align 8
  %695 = alloca ptr, align 8
  store i32 -9, ptr %694, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %695, align 4
  %696 = load ptr, ptr %695, align 8
  %697 = insertvalue { ptr, i64 } undef, ptr %696, 0
  %698 = load i64, ptr %694, align 4
  %699 = insertvalue { ptr, i64 } %697, i64 %698, 1
  %700 = alloca [1 x ptr], align 8
  %701 = getelementptr [1 x ptr], ptr %700, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %701, align 8
  %702 = call ptr @llvm.invariant.start.p0(i64 1, ptr %700)
  %703 = call ptr @llvm.invariant.start.p0(i64 136, ptr @Math)
  %704 = load ptr, ptr getelementptr (ptr, ptr getelementptr (ptr, ptr @Math, i32 7), i32 1), align 8
  %705 = alloca { ptr }, align 8
  %706 = getelementptr { ptr }, ptr %705, i32 0, i32 0
  store ptr %696, ptr %706, align 8
  %707 = call ptr %704(ptr %705)
  %708 = call { ptr, i64 } %707(ptr %700, { ptr, i64 } %699)
  %709 = alloca { ptr, i64 }, align 8
  store { ptr, i64 } %708, ptr %709, align 8
  %710 = getelementptr { ptr, i64 }, ptr %709, i32 0, i32 1
  %711 = load i32, ptr %710, align 4
  %712 = alloca i160, align 8
  %713 = alloca ptr, align 8
  store i32 %711, ptr %712, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %713, align 4
  %714 = load ptr, ptr %713, align 8
  %715 = insertvalue { ptr, i160 } undef, ptr %714, 0
  %716 = load i160, ptr %712, align 4
  %717 = insertvalue { ptr, i160 } %715, i160 %716, 1
  %718 = alloca [1 x ptr], align 8
  %719 = getelementptr [1 x ptr], ptr %718, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %719, align 8
  %720 = call ptr @llvm.invariant.start.p0(i64 1, ptr %718)
  %721 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %722 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %723 = alloca { ptr }, align 8
  %724 = getelementptr { ptr }, ptr %723, i32 0, i32 0
  store ptr %714, ptr %724, align 8
  %725 = call ptr %722(ptr %723)
  call void %725(ptr %718, { ptr, i160 } %717)
  %726 = alloca i160, align 8
  %727 = alloca ptr, align 8
  store double %693, ptr %726, align 8
  store i64 ptrtoint (ptr @f64_typ to i64), ptr %727, align 4
  %728 = load ptr, ptr %727, align 8
  %729 = insertvalue { ptr, i160 } undef, ptr %728, 0
  %730 = load i160, ptr %726, align 4
  %731 = insertvalue { ptr, i160 } %729, i160 %730, 1
  %732 = alloca [1 x ptr], align 8
  %733 = getelementptr [1 x ptr], ptr %732, i32 0, i32 0
  store ptr @_parameterization_Ptrf64, ptr %733, align 8
  %734 = call ptr @llvm.invariant.start.p0(i64 1, ptr %732)
  %735 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %736 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %737 = alloca { ptr }, align 8
  %738 = getelementptr { ptr }, ptr %737, i32 0, i32 0
  store ptr %728, ptr %738, align 8
  %739 = call ptr %736(ptr %737)
  call void %739(ptr %732, { ptr, i160 } %731)
  %740 = getelementptr { ptr, ptr, ptr, i32 }, ptr %248, i32 0, i32 0
  %741 = load ptr, ptr %740, align 8
  %742 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %741, 0
  %743 = getelementptr { ptr, ptr, ptr, i32 }, ptr %248, i32 0, i32 1
  %744 = load ptr, ptr %743, align 8
  %745 = insertvalue { ptr, ptr, ptr, i32 } %742, ptr %744, 1
  %746 = getelementptr { ptr, ptr, ptr, i32 }, ptr %248, i32 0, i32 2
  %747 = load ptr, ptr %746, align 8
  %748 = insertvalue { ptr, ptr, ptr, i32 } %745, ptr %747, 2
  %749 = getelementptr { ptr, ptr, ptr, i32 }, ptr %248, i32 0, i32 3
  %750 = load i32, ptr %749, align 4
  %751 = insertvalue { ptr, ptr, ptr, i32 } %748, i32 %750, 3
  call void @make_em_speak({ ptr, ptr, ptr, i32 } %751)
  %752 = getelementptr { ptr, ptr, ptr, i32 }, ptr %248, i32 0, i32 0
  %753 = load ptr, ptr %752, align 8
  %754 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %753, 0
  %755 = getelementptr { ptr, ptr, ptr, i32 }, ptr %248, i32 0, i32 1
  %756 = load ptr, ptr %755, align 8
  %757 = insertvalue { ptr, ptr, ptr, i32 } %754, ptr %756, 1
  %758 = getelementptr { ptr, ptr, ptr, i32 }, ptr %248, i32 0, i32 2
  %759 = load ptr, ptr %758, align 8
  %760 = insertvalue { ptr, ptr, ptr, i32 } %757, ptr %759, 2
  %761 = getelementptr { ptr, ptr, ptr, i32 }, ptr %248, i32 0, i32 3
  %762 = load i32, ptr %761, align 4
  %763 = insertvalue { ptr, ptr, ptr, i32 } %760, i32 %762, 3
  %764 = alloca [0 x ptr], align 8
  %765 = call ptr @llvm.invariant.start.p0(i64 0, ptr %764)
  %766 = call ptr @llvm.invariant.start.p0(i64 104, ptr %753)
  %767 = getelementptr ptr, ptr %753, i32 %762
  %768 = getelementptr ptr, ptr %767, i32 7
  %769 = load ptr, ptr %768, align 8
  %770 = alloca {}, align 8
  %771 = call ptr %769({ ptr, ptr, ptr, i32 } %763, ptr %770)
  %772 = call { ptr, i160 } %771({ ptr, ptr, ptr, i32 } %763, { ptr, ptr, ptr, i32 } %763, ptr %764)
  %773 = alloca i160, align 8
  %774 = alloca ptr, align 8
  store i32 5, ptr %773, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %774, align 4
  %775 = alloca i64, align 8
  %776 = alloca i1, align 1
  %777 = alloca i32, align 4
  %778 = alloca i160, align 8
  %779 = alloca ptr, align 8
  %780 = alloca i64, align 8
  %781 = alloca [1 x ptr], align 8
  %782 = alloca { ptr }, align 8
  %783 = alloca i32, align 4
  %784 = alloca i32, align 4
  %785 = alloca i32, align 4
  %786 = alloca i1, align 1
  %787 = alloca i160, align 8
  %788 = alloca ptr, align 8
  %789 = alloca i64, align 8
  %790 = alloca i32, align 4
  %791 = alloca double, align 8
  %792 = alloca i32, align 4
  %793 = alloca { ptr, ptr, ptr, i32 }, align 8
  %794 = alloca i32, align 4
  %795 = alloca double, align 8
  %796 = alloca i32, align 4
  %797 = alloca [3 x ptr], align 8
  %798 = alloca { ptr, ptr, ptr }, align 8
  %799 = alloca { ptr, ptr, ptr, i32 }, align 8
  %800 = alloca { ptr, ptr, ptr, i32 }, align 8
  %801 = alloca i64, align 8
  %802 = alloca i1, align 1
  %803 = alloca i32, align 4
  %804 = alloca i160, align 8
  %805 = alloca ptr, align 8
  %806 = alloca i64, align 8
  %807 = alloca [1 x ptr], align 8
  %808 = alloca { ptr }, align 8
  %809 = alloca i160, align 8
  %810 = alloca ptr, align 8
  %811 = alloca i64, align 8
  %812 = alloca i64, align 8
  %813 = alloca i1, align 1
  %814 = alloca { ptr, ptr, ptr, i32 }, align 8
  %815 = alloca [0 x ptr], align 8
  %816 = alloca {}, align 8
  %817 = alloca i32, align 4
  %818 = alloca { ptr, ptr, ptr, i32 }, align 8
  %819 = alloca i32, align 4
  %820 = alloca [1 x ptr], align 8
  %821 = alloca { ptr }, align 8
  %822 = alloca { ptr, ptr, ptr, i32 }, align 8
  %823 = alloca { ptr, ptr, ptr, i32 }, align 8
  %824 = alloca { ptr, ptr, ptr, i32 }, align 8
  %825 = alloca { ptr, ptr, ptr, i32 }, align 8
  %826 = alloca i32, align 4
  %827 = alloca i32, align 4
  %828 = alloca { ptr, ptr, ptr, i32 }, align 8
  %829 = alloca i32, align 4
  %830 = alloca i32, align 4
  %831 = alloca [2 x ptr], align 8
  %832 = alloca { ptr, ptr }, align 8
  %833 = alloca [0 x ptr], align 8
  %834 = alloca {}, align 8
  %835 = alloca { ptr, ptr, ptr, i32 }, align 8
  %836 = alloca { ptr, ptr, ptr, i32 }, align 8
  %837 = alloca { ptr, ptr, ptr, i32 }, align 8
  %838 = alloca { ptr, ptr, ptr, i32 }, align 8
  %839 = alloca [0 x ptr], align 8
  %840 = alloca {}, align 8
  %841 = alloca { ptr, i32 }, align 8
  %842 = alloca i64, align 8
  %843 = alloca i1, align 1
  %844 = alloca i32, align 4
  %845 = alloca { ptr, ptr, ptr, i32 }, align 8
  %846 = alloca [1 x ptr], align 8
  %847 = alloca { ptr }, align 8
  %848 = alloca { ptr, ptr, ptr, i32 }, align 8
  %849 = alloca [1 x ptr], align 8
  %850 = alloca { ptr }, align 8
  %851 = alloca { ptr, ptr, ptr, i32 }, align 8
  %852 = alloca { ptr, ptr, ptr, i32 }, align 8
  %853 = alloca { ptr, ptr, ptr, i32 }, align 8
  %854 = alloca [0 x ptr], align 8
  %855 = alloca {}, align 8
  %856 = alloca i32, align 4
  %857 = alloca i160, align 8
  %858 = alloca ptr, align 8
  %859 = alloca i64, align 8
  %860 = alloca [1 x ptr], align 8
  %861 = alloca { ptr }, align 8
  %862 = alloca [0 x ptr], align 8
  %863 = alloca {}, align 8
  %864 = alloca { ptr, ptr, ptr, i32 }, align 8
  %865 = alloca { ptr, ptr, ptr, i32 }, align 8
  %866 = alloca { ptr, ptr, ptr, i32 }, align 8
  %867 = alloca { ptr, ptr, ptr, i32 }, align 8
  %868 = alloca [0 x ptr], align 8
  %869 = alloca {}, align 8
  %870 = alloca { ptr, i160 }, align 8
  %871 = alloca i64, align 8
  %872 = alloca i1, align 1
  %873 = alloca { ptr, ptr, ptr, i32 }, align 8
  %874 = alloca [0 x ptr], align 8
  %875 = alloca {}, align 8
  %876 = alloca i32, align 4
  %877 = alloca i160, align 8
  %878 = alloca ptr, align 8
  %879 = alloca i64, align 8
  %880 = alloca [1 x ptr], align 8
  %881 = alloca { ptr }, align 8
  %882 = alloca { ptr, ptr, ptr, i32 }, align 8
  %883 = alloca ptr, align 8
  %884 = alloca ptr, align 8
  %885 = alloca { ptr }, align 8
  %886 = alloca { ptr, i160 }, align 8
  %887 = alloca i32, align 4
  %888 = alloca i160, align 8
  %889 = alloca ptr, align 8
  %890 = alloca i64, align 8
  %891 = alloca [1 x ptr], align 8
  %892 = alloca { ptr }, align 8
  %893 = alloca { ptr, i160 }, align 8
  %894 = alloca i32, align 4
  %895 = alloca i32, align 4
  %896 = alloca { ptr, ptr, ptr, i32 }, align 8
  %897 = alloca i32, align 4
  %898 = alloca i32, align 4
  %899 = alloca [2 x ptr], align 8
  %900 = alloca { ptr, ptr }, align 8
  %901 = alloca [0 x ptr], align 8
  %902 = alloca {}, align 8
  %903 = alloca { ptr, ptr, ptr, i32 }, align 8
  %904 = alloca { ptr, ptr, ptr, i32 }, align 8
  %905 = alloca { ptr, ptr, ptr, i32 }, align 8
  %906 = alloca { ptr, ptr, ptr, i32 }, align 8
  %907 = alloca [0 x ptr], align 8
  %908 = alloca {}, align 8
  %909 = alloca { ptr, i32 }, align 8
  %910 = alloca i64, align 8
  %911 = alloca i1, align 1
  %912 = alloca i32, align 4
  %913 = alloca i32, align 4
  %914 = alloca i1, align 1
  %915 = alloca i160, align 8
  %916 = alloca ptr, align 8
  %917 = alloca i64, align 8
  %918 = alloca [1 x ptr], align 8
  %919 = alloca { ptr }, align 8
  %920 = alloca i32, align 4
  %921 = alloca ptr, align 8
  %922 = alloca { ptr }, align 8
  %923 = alloca i32, align 4
  %924 = alloca i32, align 4
  %925 = alloca i32, align 4
  %926 = alloca i32, align 4
  %927 = alloca i32, align 4
  %928 = alloca i32, align 4
  %929 = alloca i32, align 4
  %930 = alloca i32, align 4
  %931 = alloca i32, align 4
  %932 = alloca i32, align 4
  %933 = alloca { ptr, ptr, ptr, i32 }, align 8
  %934 = alloca i32, align 4
  %935 = alloca i32, align 4
  %936 = alloca [3 x ptr], align 8
  %937 = alloca { ptr, ptr, ptr }, align 8
  %938 = alloca { ptr, ptr, ptr, i32 }, align 8
  %939 = alloca { ptr, ptr, ptr, i32 }, align 8
  %940 = alloca i32, align 4
  %941 = alloca ptr, align 8
  %942 = alloca { ptr }, align 8
  %943 = alloca i32, align 4
  %944 = alloca i32, align 4
  %945 = alloca i32, align 4
  %946 = alloca i32, align 4
  %947 = alloca i32, align 4
  %948 = alloca i32, align 4
  %949 = alloca i32, align 4
  %950 = alloca i32, align 4
  %951 = alloca i32, align 4
  %952 = alloca i32, align 4
  %953 = alloca i32, align 4
  %954 = alloca i32, align 4
  %955 = alloca i32, align 4
  %956 = alloca i32, align 4
  %957 = alloca { ptr, ptr, ptr, i32 }, align 8
  %958 = alloca i32, align 4
  %959 = alloca i32, align 4
  %960 = alloca [3 x ptr], align 8
  %961 = alloca { ptr, ptr, ptr }, align 8
  %962 = alloca { ptr, ptr, ptr, i32 }, align 8
  %963 = alloca [1 x ptr], align 8
  %964 = alloca { ptr }, align 8
  %965 = alloca { ptr, ptr, ptr, i32 }, align 8
  %966 = alloca { ptr, ptr, ptr, i32 }, align 8
  %967 = alloca i32, align 4
  %968 = alloca [1 x ptr], align 8
  %969 = alloca { ptr }, align 8
  %970 = alloca i32, align 4
  %971 = alloca i160, align 8
  %972 = alloca ptr, align 8
  %973 = alloca i64, align 8
  %974 = alloca [1 x ptr], align 8
  %975 = alloca { ptr }, align 8
  %976 = alloca i32, align 4
  %977 = alloca ptr, align 8
  %978 = alloca { ptr }, align 8
  %979 = alloca i32, align 4
  %980 = alloca i32, align 4
  %981 = alloca { ptr, ptr, ptr, i32 }, align 8
  %982 = alloca i32, align 4
  %983 = alloca i32, align 4
  %984 = alloca [3 x ptr], align 8
  %985 = alloca { ptr, ptr, ptr }, align 8
  %986 = alloca { ptr, ptr, ptr, i32 }, align 8
  %987 = alloca { ptr, ptr, ptr, i32 }, align 8
  %988 = alloca i32, align 4
  %989 = alloca ptr, align 8
  %990 = alloca { ptr }, align 8
  %991 = alloca i32, align 4
  %992 = alloca i32, align 4
  %993 = alloca i32, align 4
  %994 = alloca i32, align 4
  %995 = alloca i32, align 4
  %996 = alloca i32, align 4
  %997 = alloca i32, align 4
  %998 = alloca i32, align 4
  %999 = alloca i32, align 4
  %1000 = alloca i32, align 4
  %1001 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1002 = alloca i32, align 4
  %1003 = alloca i32, align 4
  %1004 = alloca [3 x ptr], align 8
  %1005 = alloca { ptr, ptr, ptr }, align 8
  %1006 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1007 = alloca [1 x ptr], align 8
  %1008 = alloca { ptr }, align 8
  %1009 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1010 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1011 = alloca i32, align 4
  %1012 = alloca [1 x ptr], align 8
  %1013 = alloca { ptr }, align 8
  %1014 = alloca i32, align 4
  %1015 = alloca i160, align 8
  %1016 = alloca ptr, align 8
  %1017 = alloca i64, align 8
  %1018 = alloca [1 x ptr], align 8
  %1019 = alloca { ptr }, align 8
  %1020 = alloca i64, align 8
  %1021 = alloca i1, align 1
  %1022 = alloca i32, align 4
  %1023 = alloca [1 x ptr], align 8
  %1024 = alloca { ptr }, align 8
  %1025 = alloca i32, align 4
  %1026 = alloca i32, align 4
  %1027 = alloca i1, align 1
  %1028 = alloca i1, align 1
  %1029 = alloca i32, align 4
  %1030 = alloca ptr, align 8
  %1031 = alloca { ptr }, align 8
  %1032 = alloca i32, align 4
  %1033 = alloca i32, align 4
  %1034 = alloca i32, align 4
  %1035 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1036 = alloca i32, align 4
  %1037 = alloca i32, align 4
  %1038 = alloca [3 x ptr], align 8
  %1039 = alloca { ptr, ptr, ptr }, align 8
  %1040 = alloca [1 x ptr], align 8
  %1041 = alloca { ptr }, align 8
  %1042 = alloca i64, align 8
  %1043 = alloca i160, align 8
  %1044 = alloca ptr, align 8
  %1045 = alloca i64, align 8
  %1046 = alloca [1 x ptr], align 8
  %1047 = alloca { ptr }, align 8
  %1048 = alloca i64, align 8
  %1049 = alloca i160, align 8
  %1050 = alloca ptr, align 8
  %1051 = alloca i64, align 8
  %1052 = alloca [1 x ptr], align 8
  %1053 = alloca { ptr }, align 8
  %1054 = alloca i32, align 4
  %1055 = alloca double, align 8
  %1056 = alloca i160, align 8
  %1057 = alloca ptr, align 8
  %1058 = alloca i64, align 8
  %1059 = alloca [1 x ptr], align 8
  %1060 = alloca { ptr }, align 8
  %1061 = alloca i32, align 4
  %1062 = alloca i32, align 4
  %1063 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1064 = alloca i32, align 4
  %1065 = alloca i32, align 4
  %1066 = alloca [2 x ptr], align 8
  %1067 = alloca { ptr, ptr }, align 8
  %1068 = alloca [0 x ptr], align 8
  %1069 = alloca {}, align 8
  %1070 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1071 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1072 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1073 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1074 = alloca [0 x ptr], align 8
  %1075 = alloca {}, align 8
  %1076 = alloca { ptr, i32 }, align 8
  %1077 = alloca i64, align 8
  %1078 = alloca i1, align 1
  %1079 = alloca i32, align 4
  %1080 = alloca i160, align 8
  %1081 = alloca ptr, align 8
  %1082 = alloca i64, align 8
  %1083 = alloca [1 x ptr], align 8
  %1084 = alloca { ptr }, align 8
  %1085 = alloca i32, align 4
  %1086 = alloca ptr, align 8
  %1087 = alloca { ptr }, align 8
  %1088 = alloca i32, align 4
  %1089 = alloca i32, align 4
  %1090 = alloca i32, align 4
  %1091 = alloca i32, align 4
  %1092 = alloca i32, align 4
  %1093 = alloca i32, align 4
  %1094 = alloca i32, align 4
  %1095 = alloca i32, align 4
  %1096 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1097 = alloca i32, align 4
  %1098 = alloca i32, align 4
  %1099 = alloca [3 x ptr], align 8
  %1100 = alloca { ptr, ptr, ptr }, align 8
  %1101 = alloca [0 x ptr], align 8
  %1102 = alloca {}, align 8
  %1103 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1104 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1105 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1106 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1107 = alloca [0 x ptr], align 8
  %1108 = alloca {}, align 8
  %1109 = alloca { ptr, i32 }, align 8
  %1110 = alloca i64, align 8
  %1111 = alloca i1, align 1
  %1112 = alloca i32, align 4
  %1113 = alloca i160, align 8
  %1114 = alloca ptr, align 8
  %1115 = alloca i64, align 8
  %1116 = alloca [1 x ptr], align 8
  %1117 = alloca { ptr }, align 8
  %1118 = alloca i8, align 1
  %1119 = alloca i160, align 8
  %1120 = alloca ptr, align 8
  %1121 = alloca i64, align 8
  %1122 = alloca [1 x ptr], align 8
  %1123 = alloca { ptr }, align 8
  %1124 = alloca i32, align 4
  %1125 = alloca ptr, align 8
  %1126 = alloca { ptr }, align 8
  %1127 = alloca i32, align 4
  %1128 = alloca i32, align 4
  %1129 = alloca i32, align 4
  %1130 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1131 = alloca i32, align 4
  %1132 = alloca i32, align 4
  %1133 = alloca [3 x ptr], align 8
  %1134 = alloca { ptr, ptr, ptr }, align 8
  %1135 = alloca [0 x ptr], align 8
  %1136 = alloca {}, align 8
  %1137 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1138 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1139 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1140 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1141 = alloca [0 x ptr], align 8
  %1142 = alloca {}, align 8
  %1143 = alloca { ptr, i160 }, align 8
  %1144 = alloca i64, align 8
  %1145 = alloca i1, align 1
  %1146 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1147 = alloca [1 x ptr], align 8
  %1148 = alloca { ptr }, align 8
  %1149 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1150 = alloca i32, align 4
  %1151 = alloca ptr, align 8
  %1152 = alloca { ptr }, align 8
  %1153 = alloca i32, align 4
  %1154 = alloca i32, align 4
  %1155 = alloca i32, align 4
  %1156 = alloca i32, align 4
  %1157 = alloca i32, align 4
  %1158 = alloca i32, align 4
  %1159 = alloca i32, align 4
  %1160 = alloca i32, align 4
  %1161 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1162 = alloca i32, align 4
  %1163 = alloca i32, align 4
  %1164 = alloca [3 x ptr], align 8
  %1165 = alloca { ptr, ptr, ptr }, align 8
  %1166 = alloca [0 x ptr], align 8
  %1167 = alloca {}, align 8
  %1168 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1169 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1170 = alloca [1 x ptr], align 8
  %1171 = alloca { ptr }, align 8
  %1172 = alloca i32, align 4
  %1173 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1174 = alloca i32, align 4
  %1175 = alloca [1 x ptr], align 8
  %1176 = alloca { ptr }, align 8
  %1177 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1178 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1179 = alloca [0 x ptr], align 8
  %1180 = alloca {}, align 8
  %1181 = alloca [1 x ptr], align 8
  %1182 = alloca { ptr }, align 8
  %1183 = alloca [0 x ptr], align 8
  %1184 = alloca {}, align 8
  %1185 = alloca i32, align 4
  %1186 = alloca i32, align 4
  %1187 = alloca i32, align 4
  %1188 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1189 = alloca i32, align 4
  %1190 = alloca i32, align 4
  %1191 = alloca [2 x ptr], align 8
  %1192 = alloca { ptr, ptr }, align 8
  %1193 = alloca [1 x ptr], align 8
  %1194 = alloca { ptr }, align 8
  %1195 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1196 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1197 = alloca [0 x ptr], align 8
  %1198 = alloca {}, align 8
  %1199 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1200 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1201 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1202 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1203 = alloca [0 x ptr], align 8
  %1204 = alloca {}, align 8
  %1205 = alloca { ptr, i32 }, align 8
  %1206 = alloca i64, align 8
  %1207 = alloca i1, align 1
  %1208 = alloca i32, align 4
  %1209 = alloca i160, align 8
  %1210 = alloca ptr, align 8
  %1211 = alloca i64, align 8
  %1212 = alloca [1 x ptr], align 8
  %1213 = alloca { ptr }, align 8
  %1214 = alloca ptr, align 8
  %1215 = alloca ptr, align 8
  %1216 = alloca ptr, align 8
  %1217 = alloca i32, align 4
  %1218 = alloca i32, align 4
  %1219 = alloca ptr, align 8
  %1220 = alloca { ptr }, align 8
  %1221 = alloca i32, align 4
  %1222 = alloca i32, align 4
  %1223 = alloca i32, align 4
  %1224 = alloca i32, align 4
  %1225 = alloca i32, align 4
  %1226 = alloca i32, align 4
  %1227 = alloca i32, align 4
  %1228 = alloca i32, align 4
  %1229 = alloca i32, align 4
  %1230 = alloca i32, align 4
  %1231 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1232 = alloca i32, align 4
  %1233 = alloca i32, align 4
  %1234 = alloca [3 x ptr], align 8
  %1235 = alloca { ptr, ptr, ptr }, align 8
  %1236 = alloca [1 x ptr], align 8
  %1237 = alloca { ptr }, align 8
  %1238 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1239 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1240 = alloca [2 x ptr], align 8
  %1241 = alloca { ptr, ptr }, align 8
  %1242 = alloca i32, align 4
  %1243 = alloca i160, align 8
  %1244 = alloca ptr, align 8
  %1245 = alloca i64, align 8
  %1246 = alloca [1 x ptr], align 8
  %1247 = alloca { ptr }, align 8
  %1248 = alloca ptr, align 8
  %1249 = alloca i32, align 4
  %1250 = alloca ptr, align 8
  %1251 = alloca { ptr }, align 8
  %1252 = alloca i32, align 4
  %1253 = alloca i32, align 4
  %1254 = alloca i32, align 4
  %1255 = alloca i32, align 4
  %1256 = alloca i32, align 4
  %1257 = alloca i32, align 4
  %1258 = alloca i32, align 4
  %1259 = alloca i32, align 4
  %1260 = alloca i32, align 4
  %1261 = alloca i32, align 4
  %1262 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1263 = alloca i32, align 4
  %1264 = alloca i32, align 4
  %1265 = alloca [3 x ptr], align 8
  %1266 = alloca { ptr, ptr, ptr }, align 8
  %1267 = alloca [1 x ptr], align 8
  %1268 = alloca { ptr }, align 8
  %1269 = alloca i32, align 4
  %1270 = alloca ptr, align 8
  %1271 = alloca { ptr }, align 8
  %1272 = alloca i32, align 4
  %1273 = alloca i32, align 4
  %1274 = alloca i32, align 4
  %1275 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1276 = alloca i32, align 4
  %1277 = alloca i32, align 4
  %1278 = alloca [3 x ptr], align 8
  %1279 = alloca { ptr, ptr, ptr }, align 8
  %1280 = alloca i32, align 4
  %1281 = alloca ptr, align 8
  %1282 = alloca { ptr }, align 8
  %1283 = alloca i32, align 4
  %1284 = alloca i32, align 4
  %1285 = alloca i32, align 4
  %1286 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1287 = alloca i32, align 4
  %1288 = alloca i32, align 4
  %1289 = alloca [3 x ptr], align 8
  %1290 = alloca { ptr, ptr, ptr }, align 8
  %1291 = alloca i32, align 4
  %1292 = alloca ptr, align 8
  %1293 = alloca { ptr }, align 8
  %1294 = alloca i32, align 4
  %1295 = alloca i32, align 4
  %1296 = alloca i32, align 4
  %1297 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1298 = alloca i32, align 4
  %1299 = alloca i32, align 4
  %1300 = alloca [3 x ptr], align 8
  %1301 = alloca { ptr, ptr, ptr }, align 8
  %1302 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1303 = alloca [1 x ptr], align 8
  %1304 = alloca { ptr }, align 8
  %1305 = alloca ptr, align 8
  %1306 = alloca i32, align 4
  %1307 = alloca i32, align 4
  %1308 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1309 = alloca i32, align 4
  %1310 = alloca i32, align 4
  %1311 = alloca [2 x ptr], align 8
  %1312 = alloca { ptr, ptr }, align 8
  %1313 = alloca [1 x ptr], align 8
  %1314 = alloca { ptr }, align 8
  %1315 = alloca ptr, align 8
  %1316 = alloca i32, align 4
  %1317 = alloca i8, align 1
  %1318 = alloca i160, align 8
  %1319 = alloca ptr, align 8
  %1320 = alloca i64, align 8
  %1321 = alloca [1 x ptr], align 8
  %1322 = alloca { ptr }, align 8
  %1323 = alloca ptr, align 8
  %1324 = alloca i32, align 4
  %1325 = alloca i32, align 4
  %1326 = alloca ptr, align 8
  %1327 = alloca { ptr }, align 8
  %1328 = alloca i32, align 4
  %1329 = alloca i32, align 4
  %1330 = alloca ptr, align 8
  %1331 = alloca i64, align 8
  %1332 = alloca { ptr, i32 }, align 8
  %1333 = alloca { ptr, i32 }, align 8
  %1334 = alloca [1 x ptr], align 8
  %1335 = alloca { ptr }, align 8
  %1336 = alloca i32, align 4
  %1337 = alloca i32, align 4
  %1338 = alloca ptr, align 8
  %1339 = alloca i64, align 8
  %1340 = alloca { ptr, i32 }, align 8
  %1341 = alloca { ptr, i32 }, align 8
  %1342 = alloca [1 x ptr], align 8
  %1343 = alloca { ptr }, align 8
  %1344 = alloca ptr, align 8
  %1345 = alloca { ptr }, align 8
  %1346 = alloca { ptr, i160 }, align 8
  %1347 = alloca { ptr, i32 }, align 8
  %1348 = alloca { ptr, i32 }, align 8
  %1349 = alloca [1 x ptr], align 8
  %1350 = alloca { ptr }, align 8
  %1351 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1352 = alloca [0 x ptr], align 8
  %1353 = alloca {}, align 8
  %1354 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1355 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1356 = alloca ptr, align 8
  %1357 = alloca ptr, align 8
  %1358 = alloca { ptr }, align 8
  %1359 = alloca { ptr, i160 }, align 8
  %1360 = alloca [0 x ptr], align 8
  %1361 = alloca {}, align 8
  %1362 = alloca i32, align 4
  %1363 = alloca i160, align 8
  %1364 = alloca ptr, align 8
  %1365 = alloca i64, align 8
  %1366 = alloca [1 x ptr], align 8
  %1367 = alloca { ptr }, align 8
  %1368 = alloca i32, align 4
  %1369 = alloca ptr, align 8
  %1370 = alloca ptr, align 8
  %1371 = alloca i32, align 4
  %1372 = alloca i32, align 4
  %1373 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1374 = alloca i32, align 4
  %1375 = alloca i32, align 4
  %1376 = alloca [2 x ptr], align 8
  %1377 = alloca { ptr, ptr }, align 8
  %1378 = alloca [1 x ptr], align 8
  %1379 = alloca { ptr }, align 8
  %1380 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1381 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1382 = alloca [1 x ptr], align 8
  %1383 = alloca { ptr }, align 8
  %1384 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1385 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1386 = alloca [2 x ptr], align 8
  %1387 = alloca { ptr, ptr }, align 8
  %1388 = alloca i32, align 4
  %1389 = alloca i160, align 8
  %1390 = alloca ptr, align 8
  %1391 = alloca i64, align 8
  %1392 = alloca [1 x ptr], align 8
  %1393 = alloca { ptr }, align 8
  %1394 = alloca i32, align 4
  %1395 = alloca i160, align 8
  %1396 = alloca ptr, align 8
  %1397 = alloca i64, align 8
  %1398 = alloca [1 x ptr], align 8
  %1399 = alloca { ptr }, align 8
  %1400 = alloca i32, align 4
  %1401 = alloca i32, align 4
  %1402 = alloca i32, align 4
  %1403 = alloca i32, align 4
  %1404 = alloca i32, align 4
  %1405 = alloca i32, align 4
  %1406 = alloca i160, align 8
  %1407 = alloca ptr, align 8
  %1408 = alloca i64, align 8
  %1409 = alloca [1 x ptr], align 8
  %1410 = alloca { ptr }, align 8
  %1411 = alloca i32, align 4
  %1412 = alloca i32, align 4
  %1413 = alloca ptr, align 8
  %1414 = alloca { ptr }, align 8
  %1415 = alloca i32, align 4
  %1416 = alloca i32, align 4
  %1417 = alloca i32, align 4
  %1418 = alloca i32, align 4
  %1419 = alloca i32, align 4
  %1420 = alloca i32, align 4
  %1421 = alloca i32, align 4
  %1422 = alloca i32, align 4
  %1423 = alloca { ptr, ptr, ptr, i32 }, align 8
  %1424 = alloca i32, align 4
  %1425 = alloca i32, align 4
  %1426 = alloca [3 x ptr], align 8
  %1427 = alloca { ptr, ptr, ptr }, align 8
  %1428 = alloca [1 x ptr], align 8
  %1429 = alloca { ptr }, align 8
  %1430 = alloca i32, align 4
  br label %1431

1431:                                             ; preds = %._crit_edge2, %0
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %775, align 4
  %1432 = load ptr, ptr %774, align 8
  %1433 = ptrtoint ptr %1432 to i64
  %1434 = load ptr, ptr %775, align 8
  %1435 = ptrtoint ptr %1434 to i64
  %1436 = icmp eq i64 %1433, %1435
  store i1 %1436, ptr %776, align 1
  %1437 = load i1, ptr %776, align 1
  store i1 %1437, ptr %.reg2mem183, align 1
  %.reload185 = load i1, ptr %.reg2mem183, align 1
  br i1 %.reload185, label %1438, label %._crit_edge

._crit_edge:                                      ; preds = %1431
  br label %1526

1438:                                             ; preds = %1431
  %1439 = load i32, ptr %773, align 4
  store i32 %1439, ptr %777, align 4
  %1440 = load i32, ptr %777, align 4
  store i32 %1440, ptr %778, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %780, align 4
  %1441 = load i64, ptr %780, align 4
  store i64 %1441, ptr %779, align 4
  %1442 = load ptr, ptr %779, align 8
  %1443 = insertvalue { ptr, i160 } undef, ptr %1442, 0
  %1444 = load i160, ptr %778, align 4
  %1445 = insertvalue { ptr, i160 } %1443, i160 %1444, 1
  %1446 = getelementptr [1 x ptr], ptr %781, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1446, align 8
  %1447 = call ptr @llvm.invariant.start.p0(i64 1, ptr %781)
  %1448 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1449 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %1450 = getelementptr { ptr }, ptr %782, i32 0, i32 0
  store ptr %1442, ptr %1450, align 8
  %1451 = call ptr %1449(ptr %782)
  call void %1451(ptr %781, { ptr, i160 } %1445)
  store i32 1, ptr %783, align 4
  %1452 = load i32, ptr %777, align 4
  %1453 = load i32, ptr %783, align 4
  %1454 = add i32 %1452, %1453
  store i32 %1454, ptr %784, align 4
  %1455 = load i32, ptr %784, align 4
  store i32 %1455, ptr %777, align 4
  store i32 9, ptr %785, align 4
  %1456 = load i32, ptr %777, align 4
  %1457 = load i32, ptr %785, align 4
  %1458 = icmp eq i32 %1456, %1457
  store i1 %1458, ptr %786, align 1
  %1459 = load i1, ptr %786, align 1
  store ptr %787, ptr %.reg2mem179, align 8
  store ptr %788, ptr %.reg2mem175, align 8
  %1460 = load i32, ptr %777, align 4
  %.reload182 = load ptr, ptr %.reg2mem179, align 8
  store i32 %1460, ptr %.reload182, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %789, align 4
  %1461 = load i64, ptr %789, align 4
  %.reload178 = load ptr, ptr %.reg2mem175, align 8
  store i64 %1461, ptr %.reload178, align 4
  br i1 %1459, label %1462, label %._crit_edge1

._crit_edge1:                                     ; preds = %1438
  br label %1523

1462:                                             ; preds = %1438
  store i32 65, ptr %790, align 4
  store double 1.800000e+01, ptr %791, align 8
  store i32 23, ptr %792, align 4
  %1463 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ i32, double, i32 }, ptr null, i32 1) to i64))
  %1464 = getelementptr { ptr, ptr, ptr, i32 }, ptr %793, i32 0, i32 1
  %1465 = getelementptr { ptr, ptr, ptr, i32 }, ptr %793, i32 0, i32 3
  store ptr @Animal, ptr %793, align 8
  store ptr %1463, ptr %1464, align 8
  store i32 7, ptr %1465, align 4
  %1466 = call ptr @llvm.invariant.start.p0(i64 16, ptr %793)
  store i32 65, ptr %794, align 4
  store double 1.800000e+01, ptr %795, align 8
  store i32 23, ptr %796, align 4
  %1467 = load i32, ptr %794, align 4
  %1468 = load double, ptr %795, align 8
  %1469 = load i32, ptr %796, align 4
  %1470 = getelementptr { ptr, ptr, ptr, i32 }, ptr %793, i32 0, i32 0
  %1471 = load ptr, ptr %1470, align 8
  %1472 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1471, 0
  %1473 = getelementptr { ptr, ptr, ptr, i32 }, ptr %793, i32 0, i32 1
  %1474 = load ptr, ptr %1473, align 8
  %1475 = insertvalue { ptr, ptr, ptr, i32 } %1472, ptr %1474, 1
  %1476 = getelementptr { ptr, ptr, ptr, i32 }, ptr %793, i32 0, i32 2
  %1477 = load ptr, ptr %1476, align 8
  %1478 = insertvalue { ptr, ptr, ptr, i32 } %1475, ptr %1477, 2
  %1479 = getelementptr { ptr, ptr, ptr, i32 }, ptr %793, i32 0, i32 3
  %1480 = load i32, ptr %1479, align 4
  %1481 = insertvalue { ptr, ptr, ptr, i32 } %1478, i32 %1480, 3
  %1482 = getelementptr [3 x ptr], ptr %797, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1482, align 8
  %1483 = getelementptr [3 x ptr], ptr %797, i32 0, i32 1
  store ptr @_parameterization_Ptrf64, ptr %1483, align 8
  %1484 = getelementptr [3 x ptr], ptr %797, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %1484, align 8
  %1485 = call ptr @llvm.invariant.start.p0(i64 9, ptr %797)
  %1486 = call ptr @llvm.invariant.start.p0(i64 104, ptr %1471)
  %1487 = getelementptr ptr, ptr %1471, i32 %1480
  %1488 = getelementptr ptr, ptr %1487, i32 3
  %1489 = load ptr, ptr %1488, align 8
  %1490 = getelementptr { ptr, ptr, ptr }, ptr %798, i32 0, i32 0
  store ptr @i32_typ, ptr %1490, align 8
  %1491 = getelementptr { ptr, ptr, ptr }, ptr %798, i32 0, i32 1
  store ptr @f64_typ, ptr %1491, align 8
  %1492 = getelementptr { ptr, ptr, ptr }, ptr %798, i32 0, i32 2
  store ptr @i32_typ, ptr %1492, align 8
  %1493 = call ptr %1489({ ptr, ptr, ptr, i32 } %1481, ptr %798)
  call void %1493({ ptr, ptr, ptr, i32 } %1481, { ptr, ptr, ptr, i32 } %1481, ptr %797, i32 %1467, double %1468, i32 %1469)
  %1494 = getelementptr { ptr, ptr, ptr, i32 }, ptr %793, i32 0, i32 0
  %1495 = getelementptr { ptr, ptr, ptr, i32 }, ptr %799, i32 0, i32 0
  %1496 = load ptr, ptr %1494, align 8
  store ptr %1496, ptr %1495, align 8
  %1497 = getelementptr { ptr, ptr, ptr, i32 }, ptr %793, i32 0, i32 1
  %1498 = getelementptr { ptr, ptr, ptr, i32 }, ptr %799, i32 0, i32 1
  %1499 = load ptr, ptr %1497, align 8
  store ptr %1499, ptr %1498, align 8
  %1500 = getelementptr { ptr, ptr, ptr, i32 }, ptr %793, i32 0, i32 2
  %1501 = getelementptr { ptr, ptr, ptr, i32 }, ptr %799, i32 0, i32 2
  %1502 = load ptr, ptr %1500, align 8
  store ptr %1502, ptr %1501, align 8
  %1503 = getelementptr { ptr, ptr, ptr, i32 }, ptr %793, i32 0, i32 3
  %1504 = getelementptr { ptr, ptr, ptr, i32 }, ptr %799, i32 0, i32 3
  %1505 = load i32, ptr %1503, align 4
  store i32 %1505, ptr %1504, align 4
  call void @set_offset(ptr %799, ptr @Animal)
  %1506 = getelementptr { ptr, ptr, ptr, i32 }, ptr %799, i32 0, i32 0
  %1507 = getelementptr { ptr, ptr, ptr, i32 }, ptr %800, i32 0, i32 0
  %1508 = load ptr, ptr %1506, align 8
  store ptr %1508, ptr %1507, align 8
  %1509 = getelementptr { ptr, ptr, ptr, i32 }, ptr %799, i32 0, i32 1
  %1510 = getelementptr { ptr, ptr, ptr, i32 }, ptr %800, i32 0, i32 1
  %1511 = load ptr, ptr %1509, align 8
  store ptr %1511, ptr %1510, align 8
  %1512 = getelementptr { ptr, ptr, ptr, i32 }, ptr %799, i32 0, i32 2
  %1513 = getelementptr { ptr, ptr, ptr, i32 }, ptr %800, i32 0, i32 2
  %1514 = load ptr, ptr %1512, align 8
  store ptr %1514, ptr %1513, align 8
  %1515 = getelementptr { ptr, ptr, ptr, i32 }, ptr %799, i32 0, i32 3
  %1516 = getelementptr { ptr, ptr, ptr, i32 }, ptr %800, i32 0, i32 3
  %1517 = load i32, ptr %1515, align 4
  store i32 %1517, ptr %1516, align 4
  %1518 = call ptr @llvm.invariant.start.p0(i64 16, ptr %800)
  %1519 = getelementptr { ptr, i160 }, ptr %800, i32 0, i32 0
  %1520 = load ptr, ptr %1519, align 8
  %.reload177 = load ptr, ptr %.reg2mem175, align 8
  store ptr %1520, ptr %.reload177, align 8
  %1521 = getelementptr { ptr, i160 }, ptr %800, i32 0, i32 1
  %1522 = load i160, ptr %1521, align 4
  %.reload181 = load ptr, ptr %.reg2mem179, align 8
  store i160 %1522, ptr %.reload181, align 4
  br label %1523

1523:                                             ; preds = %1462, %._crit_edge1
  %.reload176 = load ptr, ptr %.reg2mem175, align 8
  %1524 = load ptr, ptr %.reload176, align 8
  store ptr %1524, ptr %774, align 8
  %.reload180 = load ptr, ptr %.reg2mem179, align 8
  %1525 = load i160, ptr %.reload180, align 4
  store i160 %1525, ptr %773, align 4
  br label %1526

1526:                                             ; preds = %1523, %._crit_edge
  %.reload184 = load i1, ptr %.reg2mem183, align 1
  br i1 %.reload184, label %._crit_edge2, label %1527

._crit_edge2:                                     ; preds = %1526
  br label %1431

1527:                                             ; preds = %1526
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %801, align 4
  %1528 = load ptr, ptr %774, align 8
  %1529 = ptrtoint ptr %1528 to i64
  %1530 = load ptr, ptr %801, align 8
  %1531 = ptrtoint ptr %1530 to i64
  %1532 = icmp eq i64 %1529, %1531
  store i1 %1532, ptr %802, align 1
  %1533 = load i1, ptr %802, align 1
  br i1 %1533, label %1534, label %._crit_edge3

._crit_edge3:                                     ; preds = %1527
  br label %1552

1534:                                             ; preds = %1527
  %1535 = load i32, ptr %773, align 4
  store i32 %1535, ptr %803, align 4
  %1536 = load i32, ptr %803, align 4
  store i32 %1536, ptr %804, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %806, align 4
  %1537 = load i64, ptr %806, align 4
  store i64 %1537, ptr %805, align 4
  %1538 = load ptr, ptr %805, align 8
  %1539 = insertvalue { ptr, i160 } undef, ptr %1538, 0
  %1540 = load i160, ptr %804, align 4
  %1541 = insertvalue { ptr, i160 } %1539, i160 %1540, 1
  %1542 = getelementptr [1 x ptr], ptr %807, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1542, align 8
  %1543 = call ptr @llvm.invariant.start.p0(i64 1, ptr %807)
  %1544 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1545 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %1546 = getelementptr { ptr }, ptr %808, i32 0, i32 0
  store ptr %1538, ptr %1546, align 8
  %1547 = call ptr %1545(ptr %808)
  call void %1547(ptr %807, { ptr, i160 } %1541)
  %1548 = load i32, ptr %803, align 4
  store i32 %1548, ptr %809, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %811, align 4
  %1549 = load i64, ptr %811, align 4
  store i64 %1549, ptr %810, align 4
  %1550 = load ptr, ptr %810, align 8
  store ptr %1550, ptr %774, align 8
  %1551 = load i160, ptr %809, align 4
  store i160 %1551, ptr %773, align 4
  br label %1552

1552:                                             ; preds = %1534, %._crit_edge3
  store i64 ptrtoint (ptr @Animal to i64), ptr %812, align 4
  %1553 = load ptr, ptr %774, align 8
  %1554 = load ptr, ptr %812, align 8
  %1555 = ptrtoint ptr %1554 to i64
  %1556 = getelementptr { [3 x i64], [3 x ptr] }, ptr %1553, i32 0, i32 0, i32 1
  %1557 = getelementptr { [3 x i64], [3 x ptr] }, ptr %1553, i32 0, i32 0, i32 2
  %1558 = getelementptr { [3 x i64], [3 x ptr] }, ptr %1553, i32 0, i32 1, i32 0
  %1559 = getelementptr { [3 x i64], [3 x ptr] }, ptr %1553, i32 0, i32 1, i32 1
  %1560 = load i64, ptr %1556, align 4
  %1561 = load i64, ptr %1557, align 4
  %1562 = load ptr, ptr %1558, align 8
  %1563 = load ptr, ptr %1559, align 8
  %1564 = load i64, ptr %1554, align 4
  %1565 = call i1 @subtype_test_wrapper(ptr %1562, i64 %1561, i64 %1560, i64 %1564, i64 %1555, ptr %1563)
  store i1 %1565, ptr %813, align 1
  %1566 = load i1, ptr %813, align 1
  br i1 %1566, label %1567, label %._crit_edge4

._crit_edge4:                                     ; preds = %1552
  br label %1588

1567:                                             ; preds = %1552
  %1568 = getelementptr { ptr, i160 }, ptr %814, i32 0, i32 0
  %1569 = load ptr, ptr %774, align 8
  store ptr %1569, ptr %1568, align 8
  %1570 = getelementptr { ptr, i160 }, ptr %814, i32 0, i32 1
  %1571 = load i160, ptr %773, align 4
  store i160 %1571, ptr %1570, align 4
  call void @set_offset(ptr %814, ptr @Animal)
  %1572 = getelementptr { ptr, ptr, ptr, i32 }, ptr %814, i32 0, i32 0
  %1573 = load ptr, ptr %1572, align 8
  %1574 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1573, 0
  %1575 = getelementptr { ptr, ptr, ptr, i32 }, ptr %814, i32 0, i32 1
  %1576 = load ptr, ptr %1575, align 8
  %1577 = insertvalue { ptr, ptr, ptr, i32 } %1574, ptr %1576, 1
  %1578 = getelementptr { ptr, ptr, ptr, i32 }, ptr %814, i32 0, i32 2
  %1579 = load ptr, ptr %1578, align 8
  %1580 = insertvalue { ptr, ptr, ptr, i32 } %1577, ptr %1579, 2
  %1581 = getelementptr { ptr, ptr, ptr, i32 }, ptr %814, i32 0, i32 3
  %1582 = load i32, ptr %1581, align 4
  %1583 = insertvalue { ptr, ptr, ptr, i32 } %1580, i32 %1582, 3
  call void @make_em_speak({ ptr, ptr, ptr, i32 } %1583)
  %1584 = getelementptr { ptr, i160 }, ptr %814, i32 0, i32 0
  %1585 = load ptr, ptr %1584, align 8
  store ptr %1585, ptr %774, align 8
  %1586 = getelementptr { ptr, i160 }, ptr %814, i32 0, i32 1
  %1587 = load i160, ptr %1586, align 4
  store i160 %1587, ptr %773, align 4
  br label %1588

1588:                                             ; preds = %1567, %._crit_edge4
  %1589 = getelementptr { ptr, ptr, ptr, i32 }, ptr %248, i32 0, i32 0
  %1590 = load ptr, ptr %1589, align 8
  %1591 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1590, 0
  %1592 = getelementptr { ptr, ptr, ptr, i32 }, ptr %248, i32 0, i32 1
  %1593 = load ptr, ptr %1592, align 8
  %1594 = insertvalue { ptr, ptr, ptr, i32 } %1591, ptr %1593, 1
  %1595 = getelementptr { ptr, ptr, ptr, i32 }, ptr %248, i32 0, i32 2
  %1596 = load ptr, ptr %1595, align 8
  %1597 = insertvalue { ptr, ptr, ptr, i32 } %1594, ptr %1596, 2
  %1598 = getelementptr { ptr, ptr, ptr, i32 }, ptr %248, i32 0, i32 3
  %1599 = load i32, ptr %1598, align 4
  %1600 = insertvalue { ptr, ptr, ptr, i32 } %1597, i32 %1599, 3
  %1601 = call ptr @llvm.invariant.start.p0(i64 0, ptr %815)
  %1602 = call ptr @llvm.invariant.start.p0(i64 104, ptr %1590)
  %1603 = getelementptr ptr, ptr %1590, i32 %1599
  %1604 = getelementptr ptr, ptr %1603, i32 5
  %1605 = load ptr, ptr %1604, align 8
  %1606 = call ptr %1605({ ptr, ptr, ptr, i32 } %1600, ptr %816)
  call void %1606({ ptr, ptr, ptr, i32 } %1600, { ptr, ptr, ptr, i32 } %1600, ptr %815)
  store i32 0, ptr %817, align 4
  %1607 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ i32, { ptr, i160 } }, ptr null, i32 1) to i64))
  %1608 = getelementptr { ptr, ptr, ptr, i32 }, ptr %818, i32 0, i32 1
  %1609 = getelementptr { ptr, ptr, ptr, i32 }, ptr %818, i32 0, i32 3
  store ptr @ListNode, ptr %818, align 8
  store ptr %1607, ptr %1608, align 8
  store i32 7, ptr %1609, align 4
  %1610 = call ptr @llvm.invariant.start.p0(i64 16, ptr %818)
  store i32 0, ptr %819, align 4
  %1611 = load i32, ptr %819, align 4
  %1612 = getelementptr { ptr, ptr, ptr, i32 }, ptr %818, i32 0, i32 0
  %1613 = load ptr, ptr %1612, align 8
  %1614 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1613, 0
  %1615 = getelementptr { ptr, ptr, ptr, i32 }, ptr %818, i32 0, i32 1
  %1616 = load ptr, ptr %1615, align 8
  %1617 = insertvalue { ptr, ptr, ptr, i32 } %1614, ptr %1616, 1
  %1618 = getelementptr { ptr, ptr, ptr, i32 }, ptr %818, i32 0, i32 2
  %1619 = load ptr, ptr %1618, align 8
  %1620 = insertvalue { ptr, ptr, ptr, i32 } %1617, ptr %1619, 2
  %1621 = getelementptr { ptr, ptr, ptr, i32 }, ptr %818, i32 0, i32 3
  %1622 = load i32, ptr %1621, align 4
  %1623 = insertvalue { ptr, ptr, ptr, i32 } %1620, i32 %1622, 3
  %1624 = getelementptr [1 x ptr], ptr %820, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1624, align 8
  %1625 = call ptr @llvm.invariant.start.p0(i64 1, ptr %820)
  %1626 = call ptr @llvm.invariant.start.p0(i64 96, ptr %1613)
  %1627 = getelementptr ptr, ptr %1613, i32 %1622
  %1628 = getelementptr ptr, ptr %1627, i32 2
  %1629 = load ptr, ptr %1628, align 8
  %1630 = getelementptr { ptr }, ptr %821, i32 0, i32 0
  store ptr @i32_typ, ptr %1630, align 8
  %1631 = call ptr %1629({ ptr, ptr, ptr, i32 } %1623, ptr %821)
  call void %1631({ ptr, ptr, ptr, i32 } %1623, { ptr, ptr, ptr, i32 } %1623, ptr %820, i32 %1611)
  %1632 = getelementptr { ptr, ptr, ptr, i32 }, ptr %818, i32 0, i32 0
  %1633 = getelementptr { ptr, ptr, ptr, i32 }, ptr %822, i32 0, i32 0
  %1634 = load ptr, ptr %1632, align 8
  store ptr %1634, ptr %1633, align 8
  %1635 = getelementptr { ptr, ptr, ptr, i32 }, ptr %818, i32 0, i32 1
  %1636 = getelementptr { ptr, ptr, ptr, i32 }, ptr %822, i32 0, i32 1
  %1637 = load ptr, ptr %1635, align 8
  store ptr %1637, ptr %1636, align 8
  %1638 = getelementptr { ptr, ptr, ptr, i32 }, ptr %818, i32 0, i32 2
  %1639 = getelementptr { ptr, ptr, ptr, i32 }, ptr %822, i32 0, i32 2
  %1640 = load ptr, ptr %1638, align 8
  store ptr %1640, ptr %1639, align 8
  %1641 = getelementptr { ptr, ptr, ptr, i32 }, ptr %818, i32 0, i32 3
  %1642 = getelementptr { ptr, ptr, ptr, i32 }, ptr %822, i32 0, i32 3
  %1643 = load i32, ptr %1641, align 4
  store i32 %1643, ptr %1642, align 4
  call void @set_offset(ptr %822, ptr @ListNode)
  store ptr %823, ptr %.reg2mem157, align 8
  %1644 = getelementptr { ptr, ptr, ptr, i32 }, ptr %822, i32 0, i32 0
  %.reload174 = load ptr, ptr %.reg2mem157, align 8
  %1645 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload174, i32 0, i32 0
  %1646 = load ptr, ptr %1644, align 8
  store ptr %1646, ptr %1645, align 8
  %1647 = getelementptr { ptr, ptr, ptr, i32 }, ptr %822, i32 0, i32 1
  %.reload173 = load ptr, ptr %.reg2mem157, align 8
  %1648 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload173, i32 0, i32 1
  %1649 = load ptr, ptr %1647, align 8
  store ptr %1649, ptr %1648, align 8
  %1650 = getelementptr { ptr, ptr, ptr, i32 }, ptr %822, i32 0, i32 2
  %.reload172 = load ptr, ptr %.reg2mem157, align 8
  %1651 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload172, i32 0, i32 2
  %1652 = load ptr, ptr %1650, align 8
  store ptr %1652, ptr %1651, align 8
  %1653 = getelementptr { ptr, ptr, ptr, i32 }, ptr %822, i32 0, i32 3
  %.reload171 = load ptr, ptr %.reg2mem157, align 8
  %1654 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload171, i32 0, i32 3
  %1655 = load i32, ptr %1653, align 4
  store i32 %1655, ptr %1654, align 4
  %.reload170 = load ptr, ptr %.reg2mem157, align 8
  %1656 = call ptr @llvm.invariant.start.p0(i64 16, ptr %.reload170)
  %.reload169 = load ptr, ptr %.reg2mem157, align 8
  %1657 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload169, i32 0, i32 0
  %1658 = getelementptr { ptr, ptr, ptr, i32 }, ptr %824, i32 0, i32 0
  %1659 = load ptr, ptr %1657, align 8
  store ptr %1659, ptr %1658, align 8
  %.reload168 = load ptr, ptr %.reg2mem157, align 8
  %1660 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload168, i32 0, i32 1
  %1661 = getelementptr { ptr, ptr, ptr, i32 }, ptr %824, i32 0, i32 1
  %1662 = load ptr, ptr %1660, align 8
  store ptr %1662, ptr %1661, align 8
  %.reload167 = load ptr, ptr %.reg2mem157, align 8
  %1663 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload167, i32 0, i32 2
  %1664 = getelementptr { ptr, ptr, ptr, i32 }, ptr %824, i32 0, i32 2
  %1665 = load ptr, ptr %1663, align 8
  store ptr %1665, ptr %1664, align 8
  %.reload166 = load ptr, ptr %.reg2mem157, align 8
  %1666 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload166, i32 0, i32 3
  %1667 = getelementptr { ptr, ptr, ptr, i32 }, ptr %824, i32 0, i32 3
  %1668 = load i32, ptr %1666, align 4
  store i32 %1668, ptr %1667, align 4
  call void @set_offset(ptr %824, ptr @ListNode)
  store ptr %825, ptr %.reg2mem143, align 8
  %1669 = getelementptr { ptr, ptr, ptr, i32 }, ptr %824, i32 0, i32 0
  %.reload156 = load ptr, ptr %.reg2mem143, align 8
  %1670 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload156, i32 0, i32 0
  %1671 = load ptr, ptr %1669, align 8
  store ptr %1671, ptr %1670, align 8
  %1672 = getelementptr { ptr, ptr, ptr, i32 }, ptr %824, i32 0, i32 1
  %.reload155 = load ptr, ptr %.reg2mem143, align 8
  %1673 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload155, i32 0, i32 1
  %1674 = load ptr, ptr %1672, align 8
  store ptr %1674, ptr %1673, align 8
  %1675 = getelementptr { ptr, ptr, ptr, i32 }, ptr %824, i32 0, i32 2
  %.reload154 = load ptr, ptr %.reg2mem143, align 8
  %1676 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload154, i32 0, i32 2
  %1677 = load ptr, ptr %1675, align 8
  store ptr %1677, ptr %1676, align 8
  %1678 = getelementptr { ptr, ptr, ptr, i32 }, ptr %824, i32 0, i32 3
  %.reload153 = load ptr, ptr %.reg2mem143, align 8
  %1679 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload153, i32 0, i32 3
  %1680 = load i32, ptr %1678, align 4
  store i32 %1680, ptr %1679, align 4
  %.reload152 = load ptr, ptr %.reg2mem143, align 8
  %1681 = call ptr @llvm.invariant.start.p0(i64 16, ptr %.reload152)
  store i32 1, ptr %826, align 4
  store i32 10, ptr %827, align 4
  %1682 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ i32, i32, i32 }, ptr null, i32 1) to i64))
  %1683 = getelementptr { ptr, ptr, ptr, i32 }, ptr %828, i32 0, i32 1
  %1684 = getelementptr { ptr, ptr, ptr, i32 }, ptr %828, i32 0, i32 3
  store ptr @Range, ptr %828, align 8
  store ptr %1682, ptr %1683, align 8
  store i32 7, ptr %1684, align 4
  %1685 = call ptr @llvm.invariant.start.p0(i64 16, ptr %828)
  store i32 1, ptr %829, align 4
  store i32 10, ptr %830, align 4
  %1686 = load i32, ptr %829, align 4
  %1687 = load i32, ptr %830, align 4
  %1688 = getelementptr { ptr, ptr, ptr, i32 }, ptr %828, i32 0, i32 0
  %1689 = load ptr, ptr %1688, align 8
  %1690 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1689, 0
  %1691 = getelementptr { ptr, ptr, ptr, i32 }, ptr %828, i32 0, i32 1
  %1692 = load ptr, ptr %1691, align 8
  %1693 = insertvalue { ptr, ptr, ptr, i32 } %1690, ptr %1692, 1
  %1694 = getelementptr { ptr, ptr, ptr, i32 }, ptr %828, i32 0, i32 2
  %1695 = load ptr, ptr %1694, align 8
  %1696 = insertvalue { ptr, ptr, ptr, i32 } %1693, ptr %1695, 2
  %1697 = getelementptr { ptr, ptr, ptr, i32 }, ptr %828, i32 0, i32 3
  %1698 = load i32, ptr %1697, align 4
  %1699 = insertvalue { ptr, ptr, ptr, i32 } %1696, i32 %1698, 3
  %1700 = getelementptr [2 x ptr], ptr %831, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1700, align 8
  %1701 = getelementptr [2 x ptr], ptr %831, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %1701, align 8
  %1702 = call ptr @llvm.invariant.start.p0(i64 4, ptr %831)
  %1703 = call ptr @llvm.invariant.start.p0(i64 456, ptr %1689)
  %1704 = getelementptr ptr, ptr %1689, i32 %1698
  %1705 = getelementptr ptr, ptr %1704, i32 4
  %1706 = load ptr, ptr %1705, align 8
  %1707 = getelementptr { ptr, ptr }, ptr %832, i32 0, i32 0
  store ptr @i32_typ, ptr %1707, align 8
  %1708 = getelementptr { ptr, ptr }, ptr %832, i32 0, i32 1
  store ptr @i32_typ, ptr %1708, align 8
  %1709 = call ptr %1706({ ptr, ptr, ptr, i32 } %1699, ptr %832)
  call void %1709({ ptr, ptr, ptr, i32 } %1699, { ptr, ptr, ptr, i32 } %1699, ptr %831, i32 %1686, i32 %1687)
  %1710 = getelementptr { ptr, ptr, ptr, i32 }, ptr %828, i32 0, i32 0
  %1711 = load ptr, ptr %1710, align 8
  %1712 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1711, 0
  %1713 = getelementptr { ptr, ptr, ptr, i32 }, ptr %828, i32 0, i32 1
  %1714 = load ptr, ptr %1713, align 8
  %1715 = insertvalue { ptr, ptr, ptr, i32 } %1712, ptr %1714, 1
  %1716 = getelementptr { ptr, ptr, ptr, i32 }, ptr %828, i32 0, i32 2
  %1717 = load ptr, ptr %1716, align 8
  %1718 = insertvalue { ptr, ptr, ptr, i32 } %1715, ptr %1717, 2
  %1719 = getelementptr { ptr, ptr, ptr, i32 }, ptr %828, i32 0, i32 3
  %1720 = load i32, ptr %1719, align 4
  %1721 = insertvalue { ptr, ptr, ptr, i32 } %1718, i32 %1720, 3
  %1722 = call ptr @llvm.invariant.start.p0(i64 0, ptr %833)
  %1723 = call ptr @llvm.invariant.start.p0(i64 456, ptr %1711)
  %1724 = getelementptr ptr, ptr %1711, i32 %1720
  %1725 = getelementptr ptr, ptr %1724, i32 16
  %1726 = load ptr, ptr %1725, align 8
  %1727 = call ptr %1726({ ptr, ptr, ptr, i32 } %1721, ptr %834)
  %1728 = call { ptr, ptr, ptr, i32 } %1727({ ptr, ptr, ptr, i32 } %1721, { ptr, ptr, ptr, i32 } %1721, ptr %833)
  store { ptr, ptr, ptr, i32 } %1728, ptr %835, align 8
  %1729 = call ptr @llvm.invariant.start.p0(i64 16, ptr %835)
  %1730 = getelementptr { ptr, ptr, ptr, i32 }, ptr %835, i32 0, i32 0
  %1731 = getelementptr { ptr, ptr, ptr, i32 }, ptr %836, i32 0, i32 0
  %1732 = load ptr, ptr %1730, align 8
  store ptr %1732, ptr %1731, align 8
  %1733 = getelementptr { ptr, ptr, ptr, i32 }, ptr %835, i32 0, i32 1
  %1734 = getelementptr { ptr, ptr, ptr, i32 }, ptr %836, i32 0, i32 1
  %1735 = load ptr, ptr %1733, align 8
  store ptr %1735, ptr %1734, align 8
  %1736 = getelementptr { ptr, ptr, ptr, i32 }, ptr %835, i32 0, i32 2
  %1737 = getelementptr { ptr, ptr, ptr, i32 }, ptr %836, i32 0, i32 2
  %1738 = load ptr, ptr %1736, align 8
  store ptr %1738, ptr %1737, align 8
  %1739 = getelementptr { ptr, ptr, ptr, i32 }, ptr %835, i32 0, i32 3
  %1740 = getelementptr { ptr, ptr, ptr, i32 }, ptr %836, i32 0, i32 3
  %1741 = load i32, ptr %1739, align 4
  store i32 %1741, ptr %1740, align 4
  call void @set_offset(ptr %836, ptr @RangeIterator)
  %1742 = getelementptr { ptr, ptr, ptr, i32 }, ptr %836, i32 0, i32 0
  %1743 = getelementptr { ptr, ptr, ptr, i32 }, ptr %837, i32 0, i32 0
  %1744 = load ptr, ptr %1742, align 8
  store ptr %1744, ptr %1743, align 8
  %1745 = getelementptr { ptr, ptr, ptr, i32 }, ptr %836, i32 0, i32 1
  %1746 = getelementptr { ptr, ptr, ptr, i32 }, ptr %837, i32 0, i32 1
  %1747 = load ptr, ptr %1745, align 8
  store ptr %1747, ptr %1746, align 8
  %1748 = getelementptr { ptr, ptr, ptr, i32 }, ptr %836, i32 0, i32 2
  %1749 = getelementptr { ptr, ptr, ptr, i32 }, ptr %837, i32 0, i32 2
  %1750 = load ptr, ptr %1748, align 8
  store ptr %1750, ptr %1749, align 8
  %1751 = getelementptr { ptr, ptr, ptr, i32 }, ptr %836, i32 0, i32 3
  %1752 = getelementptr { ptr, ptr, ptr, i32 }, ptr %837, i32 0, i32 3
  %1753 = load i32, ptr %1751, align 4
  store i32 %1753, ptr %1752, align 4
  call void @set_offset(ptr %837, ptr @RangeIterator)
  %1754 = getelementptr { ptr, ptr, ptr, i32 }, ptr %837, i32 0, i32 0
  %1755 = getelementptr { ptr, ptr, ptr, i32 }, ptr %838, i32 0, i32 0
  %1756 = load ptr, ptr %1754, align 8
  store ptr %1756, ptr %1755, align 8
  %1757 = getelementptr { ptr, ptr, ptr, i32 }, ptr %837, i32 0, i32 1
  %1758 = getelementptr { ptr, ptr, ptr, i32 }, ptr %838, i32 0, i32 1
  %1759 = load ptr, ptr %1757, align 8
  store ptr %1759, ptr %1758, align 8
  %1760 = getelementptr { ptr, ptr, ptr, i32 }, ptr %837, i32 0, i32 2
  %1761 = getelementptr { ptr, ptr, ptr, i32 }, ptr %838, i32 0, i32 2
  %1762 = load ptr, ptr %1760, align 8
  store ptr %1762, ptr %1761, align 8
  %1763 = getelementptr { ptr, ptr, ptr, i32 }, ptr %837, i32 0, i32 3
  %1764 = getelementptr { ptr, ptr, ptr, i32 }, ptr %838, i32 0, i32 3
  %1765 = load i32, ptr %1763, align 4
  store i32 %1765, ptr %1764, align 4
  %1766 = call ptr @llvm.invariant.start.p0(i64 16, ptr %838)
  %1767 = getelementptr { ptr, ptr, ptr, i32 }, ptr %838, i32 0, i32 0
  store ptr %1767, ptr %.reg2mem141, align 8
  %1768 = getelementptr { ptr, ptr, ptr, i32 }, ptr %838, i32 0, i32 1
  store ptr %1768, ptr %.reg2mem139, align 8
  %1769 = getelementptr { ptr, ptr, ptr, i32 }, ptr %838, i32 0, i32 2
  store ptr %1769, ptr %.reg2mem137, align 8
  %1770 = getelementptr { ptr, ptr, ptr, i32 }, ptr %838, i32 0, i32 3
  store ptr %1770, ptr %.reg2mem135, align 8
  br label %1771

1771:                                             ; preds = %._crit_edge6, %1588
  %.reload142 = load ptr, ptr %.reg2mem141, align 8
  %1772 = load ptr, ptr %.reload142, align 8
  %1773 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1772, 0
  %.reload140 = load ptr, ptr %.reg2mem139, align 8
  %1774 = load ptr, ptr %.reload140, align 8
  %1775 = insertvalue { ptr, ptr, ptr, i32 } %1773, ptr %1774, 1
  %.reload138 = load ptr, ptr %.reg2mem137, align 8
  %1776 = load ptr, ptr %.reload138, align 8
  %1777 = insertvalue { ptr, ptr, ptr, i32 } %1775, ptr %1776, 2
  %.reload136 = load ptr, ptr %.reg2mem135, align 8
  %1778 = load i32, ptr %.reload136, align 4
  %1779 = insertvalue { ptr, ptr, ptr, i32 } %1777, i32 %1778, 3
  %1780 = call ptr @llvm.invariant.start.p0(i64 0, ptr %839)
  %1781 = call ptr @llvm.invariant.start.p0(i64 72, ptr %1772)
  %1782 = getelementptr ptr, ptr %1772, i32 %1778
  %1783 = getelementptr ptr, ptr %1782, i32 4
  %1784 = load ptr, ptr %1783, align 8
  %1785 = call ptr %1784({ ptr, ptr, ptr, i32 } %1779, ptr %840)
  %1786 = call { ptr, i32 } %1785({ ptr, ptr, ptr, i32 } %1779, { ptr, ptr, ptr, i32 } %1779, ptr %839)
  store ptr %841, ptr %.reg2mem130, align 8
  %.reload134 = load ptr, ptr %.reg2mem130, align 8
  store { ptr, i32 } %1786, ptr %.reload134, align 8
  %.reload133 = load ptr, ptr %.reg2mem130, align 8
  %1787 = getelementptr { ptr, i32 }, ptr %.reload133, i32 0, i32 0
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %842, align 4
  %1788 = load ptr, ptr %1787, align 8
  %1789 = ptrtoint ptr %1788 to i64
  %1790 = load ptr, ptr %842, align 8
  %1791 = ptrtoint ptr %1790 to i64
  %1792 = icmp eq i64 %1789, %1791
  %1793 = icmp eq i64 %1789, 0
  %1794 = or i1 %1792, %1793
  %1795 = icmp eq i1 %1794, false
  store i1 %1795, ptr %843, align 1
  %1796 = load i1, ptr %843, align 1
  store i1 %1796, ptr %.reg2mem127, align 1
  %.reload129 = load i1, ptr %.reg2mem127, align 1
  br i1 %.reload129, label %1797, label %._crit_edge5

._crit_edge5:                                     ; preds = %1771
  br label %1908

1797:                                             ; preds = %1771
  %.reload132 = load ptr, ptr %.reg2mem130, align 8
  %1798 = getelementptr { ptr, i32 }, ptr %.reload132, i32 0, i32 1
  %1799 = load i32, ptr %1798, align 4
  store i32 %1799, ptr %844, align 4
  %1800 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ i32, { ptr, i160 } }, ptr null, i32 1) to i64))
  %1801 = getelementptr { ptr, ptr, ptr, i32 }, ptr %845, i32 0, i32 1
  %1802 = getelementptr { ptr, ptr, ptr, i32 }, ptr %845, i32 0, i32 3
  store ptr @ListNode, ptr %845, align 8
  store ptr %1800, ptr %1801, align 8
  store i32 7, ptr %1802, align 4
  %1803 = call ptr @llvm.invariant.start.p0(i64 16, ptr %845)
  %1804 = load i32, ptr %844, align 4
  %1805 = getelementptr { ptr, ptr, ptr, i32 }, ptr %845, i32 0, i32 0
  %1806 = load ptr, ptr %1805, align 8
  %1807 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1806, 0
  %1808 = getelementptr { ptr, ptr, ptr, i32 }, ptr %845, i32 0, i32 1
  %1809 = load ptr, ptr %1808, align 8
  %1810 = insertvalue { ptr, ptr, ptr, i32 } %1807, ptr %1809, 1
  %1811 = getelementptr { ptr, ptr, ptr, i32 }, ptr %845, i32 0, i32 2
  %1812 = load ptr, ptr %1811, align 8
  %1813 = insertvalue { ptr, ptr, ptr, i32 } %1810, ptr %1812, 2
  %1814 = getelementptr { ptr, ptr, ptr, i32 }, ptr %845, i32 0, i32 3
  %1815 = load i32, ptr %1814, align 4
  %1816 = insertvalue { ptr, ptr, ptr, i32 } %1813, i32 %1815, 3
  %1817 = getelementptr [1 x ptr], ptr %846, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1817, align 8
  %1818 = call ptr @llvm.invariant.start.p0(i64 1, ptr %846)
  %1819 = call ptr @llvm.invariant.start.p0(i64 96, ptr %1806)
  %1820 = getelementptr ptr, ptr %1806, i32 %1815
  %1821 = getelementptr ptr, ptr %1820, i32 2
  %1822 = load ptr, ptr %1821, align 8
  %1823 = getelementptr { ptr }, ptr %847, i32 0, i32 0
  store ptr @i32_typ, ptr %1823, align 8
  %1824 = call ptr %1822({ ptr, ptr, ptr, i32 } %1816, ptr %847)
  call void %1824({ ptr, ptr, ptr, i32 } %1816, { ptr, ptr, ptr, i32 } %1816, ptr %846, i32 %1804)
  %1825 = getelementptr { ptr, ptr, ptr, i32 }, ptr %845, i32 0, i32 0
  %1826 = getelementptr { ptr, ptr, ptr, i32 }, ptr %848, i32 0, i32 0
  %1827 = load ptr, ptr %1825, align 8
  store ptr %1827, ptr %1826, align 8
  %1828 = getelementptr { ptr, ptr, ptr, i32 }, ptr %845, i32 0, i32 1
  %1829 = getelementptr { ptr, ptr, ptr, i32 }, ptr %848, i32 0, i32 1
  %1830 = load ptr, ptr %1828, align 8
  store ptr %1830, ptr %1829, align 8
  %1831 = getelementptr { ptr, ptr, ptr, i32 }, ptr %845, i32 0, i32 2
  %1832 = getelementptr { ptr, ptr, ptr, i32 }, ptr %848, i32 0, i32 2
  %1833 = load ptr, ptr %1831, align 8
  store ptr %1833, ptr %1832, align 8
  %1834 = getelementptr { ptr, ptr, ptr, i32 }, ptr %845, i32 0, i32 3
  %1835 = getelementptr { ptr, ptr, ptr, i32 }, ptr %848, i32 0, i32 3
  %1836 = load i32, ptr %1834, align 4
  store i32 %1836, ptr %1835, align 4
  call void @set_offset(ptr %848, ptr @ListNode)
  %1837 = getelementptr { ptr, ptr, ptr, i32 }, ptr %848, i32 0, i32 0
  %1838 = load ptr, ptr %1837, align 8
  %1839 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1838, 0
  %1840 = getelementptr { ptr, ptr, ptr, i32 }, ptr %848, i32 0, i32 1
  %1841 = load ptr, ptr %1840, align 8
  %1842 = insertvalue { ptr, ptr, ptr, i32 } %1839, ptr %1841, 1
  %1843 = getelementptr { ptr, ptr, ptr, i32 }, ptr %848, i32 0, i32 2
  %1844 = load ptr, ptr %1843, align 8
  %1845 = insertvalue { ptr, ptr, ptr, i32 } %1842, ptr %1844, 2
  %1846 = getelementptr { ptr, ptr, ptr, i32 }, ptr %848, i32 0, i32 3
  %1847 = load i32, ptr %1846, align 4
  %1848 = insertvalue { ptr, ptr, ptr, i32 } %1845, i32 %1847, 3
  %.reload151 = load ptr, ptr %.reg2mem143, align 8
  %1849 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload151, i32 0, i32 0
  %1850 = load ptr, ptr %1849, align 8
  %1851 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1850, 0
  %.reload150 = load ptr, ptr %.reg2mem143, align 8
  %1852 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload150, i32 0, i32 1
  %1853 = load ptr, ptr %1852, align 8
  %1854 = insertvalue { ptr, ptr, ptr, i32 } %1851, ptr %1853, 1
  %.reload149 = load ptr, ptr %.reg2mem143, align 8
  %1855 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload149, i32 0, i32 2
  %1856 = load ptr, ptr %1855, align 8
  %1857 = insertvalue { ptr, ptr, ptr, i32 } %1854, ptr %1856, 2
  %.reload148 = load ptr, ptr %.reg2mem143, align 8
  %1858 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload148, i32 0, i32 3
  %1859 = load i32, ptr %1858, align 4
  %1860 = insertvalue { ptr, ptr, ptr, i32 } %1857, i32 %1859, 3
  %1861 = getelementptr [1 x ptr], ptr %849, i32 0, i32 0
  store ptr @_parameterization_ListNode, ptr %1861, align 8
  %1862 = call ptr @llvm.invariant.start.p0(i64 1, ptr %849)
  %1863 = call ptr @llvm.invariant.start.p0(i64 96, ptr %1850)
  %1864 = getelementptr ptr, ptr %1850, i32 %1859
  %1865 = getelementptr ptr, ptr %1864, i32 3
  %1866 = load ptr, ptr %1865, align 8
  %1867 = getelementptr { ptr }, ptr %850, i32 0, i32 0
  store ptr %1838, ptr %1867, align 8
  %1868 = call ptr %1866({ ptr, ptr, ptr, i32 } %1860, ptr %850)
  %1869 = call { ptr, ptr, ptr, i32 } %1868({ ptr, ptr, ptr, i32 } %1860, { ptr, ptr, ptr, i32 } %1860, ptr %849, { ptr, ptr, ptr, i32 } %1848)
  store { ptr, ptr, ptr, i32 } %1869, ptr %851, align 8
  %1870 = call ptr @llvm.invariant.start.p0(i64 16, ptr %851)
  %1871 = getelementptr { ptr, ptr, ptr, i32 }, ptr %851, i32 0, i32 0
  %1872 = getelementptr { ptr, ptr, ptr, i32 }, ptr %852, i32 0, i32 0
  %1873 = load ptr, ptr %1871, align 8
  store ptr %1873, ptr %1872, align 8
  %1874 = getelementptr { ptr, ptr, ptr, i32 }, ptr %851, i32 0, i32 1
  %1875 = getelementptr { ptr, ptr, ptr, i32 }, ptr %852, i32 0, i32 1
  %1876 = load ptr, ptr %1874, align 8
  store ptr %1876, ptr %1875, align 8
  %1877 = getelementptr { ptr, ptr, ptr, i32 }, ptr %851, i32 0, i32 2
  %1878 = getelementptr { ptr, ptr, ptr, i32 }, ptr %852, i32 0, i32 2
  %1879 = load ptr, ptr %1877, align 8
  store ptr %1879, ptr %1878, align 8
  %1880 = getelementptr { ptr, ptr, ptr, i32 }, ptr %851, i32 0, i32 3
  %1881 = getelementptr { ptr, ptr, ptr, i32 }, ptr %852, i32 0, i32 3
  %1882 = load i32, ptr %1880, align 4
  store i32 %1882, ptr %1881, align 4
  call void @set_offset(ptr %852, ptr @ListNode)
  %1883 = getelementptr { ptr, ptr, ptr, i32 }, ptr %852, i32 0, i32 0
  %1884 = getelementptr { ptr, ptr, ptr, i32 }, ptr %853, i32 0, i32 0
  %1885 = load ptr, ptr %1883, align 8
  store ptr %1885, ptr %1884, align 8
  %1886 = getelementptr { ptr, ptr, ptr, i32 }, ptr %852, i32 0, i32 1
  %1887 = getelementptr { ptr, ptr, ptr, i32 }, ptr %853, i32 0, i32 1
  %1888 = load ptr, ptr %1886, align 8
  store ptr %1888, ptr %1887, align 8
  %1889 = getelementptr { ptr, ptr, ptr, i32 }, ptr %852, i32 0, i32 2
  %1890 = getelementptr { ptr, ptr, ptr, i32 }, ptr %853, i32 0, i32 2
  %1891 = load ptr, ptr %1889, align 8
  store ptr %1891, ptr %1890, align 8
  %1892 = getelementptr { ptr, ptr, ptr, i32 }, ptr %852, i32 0, i32 3
  %1893 = getelementptr { ptr, ptr, ptr, i32 }, ptr %853, i32 0, i32 3
  %1894 = load i32, ptr %1892, align 4
  store i32 %1894, ptr %1893, align 4
  call void @set_offset(ptr %853, ptr @ListNode)
  %1895 = getelementptr { ptr, ptr, ptr, i32 }, ptr %853, i32 0, i32 0
  %.reload147 = load ptr, ptr %.reg2mem143, align 8
  %1896 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload147, i32 0, i32 0
  %1897 = load ptr, ptr %1895, align 8
  store ptr %1897, ptr %1896, align 8
  %1898 = getelementptr { ptr, ptr, ptr, i32 }, ptr %853, i32 0, i32 1
  %.reload146 = load ptr, ptr %.reg2mem143, align 8
  %1899 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload146, i32 0, i32 1
  %1900 = load ptr, ptr %1898, align 8
  store ptr %1900, ptr %1899, align 8
  %1901 = getelementptr { ptr, ptr, ptr, i32 }, ptr %853, i32 0, i32 2
  %.reload145 = load ptr, ptr %.reg2mem143, align 8
  %1902 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload145, i32 0, i32 2
  %1903 = load ptr, ptr %1901, align 8
  store ptr %1903, ptr %1902, align 8
  %1904 = getelementptr { ptr, ptr, ptr, i32 }, ptr %853, i32 0, i32 3
  %.reload144 = load ptr, ptr %.reg2mem143, align 8
  %1905 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload144, i32 0, i32 3
  %1906 = load i32, ptr %1904, align 4
  store i32 %1906, ptr %1905, align 4
  %1907 = load i32, ptr %844, align 4
  %.reload131 = load ptr, ptr %.reg2mem130, align 8
  store i32 %1907, ptr %.reload131, align 4
  br label %1908

1908:                                             ; preds = %1797, %._crit_edge5
  %.reload128 = load i1, ptr %.reg2mem127, align 1
  br i1 %.reload128, label %._crit_edge6, label %1909

._crit_edge6:                                     ; preds = %1908
  br label %1771

1909:                                             ; preds = %1908
  %.reload165 = load ptr, ptr %.reg2mem157, align 8
  %1910 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload165, i32 0, i32 0
  %1911 = load ptr, ptr %1910, align 8
  %1912 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1911, 0
  %.reload164 = load ptr, ptr %.reg2mem157, align 8
  %1913 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload164, i32 0, i32 1
  %1914 = load ptr, ptr %1913, align 8
  %1915 = insertvalue { ptr, ptr, ptr, i32 } %1912, ptr %1914, 1
  %.reload163 = load ptr, ptr %.reg2mem157, align 8
  %1916 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload163, i32 0, i32 2
  %1917 = load ptr, ptr %1916, align 8
  %1918 = insertvalue { ptr, ptr, ptr, i32 } %1915, ptr %1917, 2
  %.reload162 = load ptr, ptr %.reg2mem157, align 8
  %1919 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload162, i32 0, i32 3
  %1920 = load i32, ptr %1919, align 4
  %1921 = insertvalue { ptr, ptr, ptr, i32 } %1918, i32 %1920, 3
  %1922 = call ptr @llvm.invariant.start.p0(i64 0, ptr %854)
  %1923 = call ptr @llvm.invariant.start.p0(i64 96, ptr %1911)
  %1924 = getelementptr ptr, ptr %1911, i32 %1920
  %1925 = getelementptr ptr, ptr %1924, i32 5
  %1926 = load ptr, ptr %1925, align 8
  %1927 = call ptr %1926({ ptr, ptr, ptr, i32 } %1921, ptr %855)
  %1928 = call i32 %1927({ ptr, ptr, ptr, i32 } %1921, { ptr, ptr, ptr, i32 } %1921, ptr %854)
  store i32 %1928, ptr %856, align 4
  %1929 = load i32, ptr %856, align 4
  store i32 %1929, ptr %857, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %859, align 4
  %1930 = load i64, ptr %859, align 4
  store i64 %1930, ptr %858, align 4
  %1931 = load ptr, ptr %858, align 8
  %1932 = insertvalue { ptr, i160 } undef, ptr %1931, 0
  %1933 = load i160, ptr %857, align 4
  %1934 = insertvalue { ptr, i160 } %1932, i160 %1933, 1
  %1935 = getelementptr [1 x ptr], ptr %860, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %1935, align 8
  %1936 = call ptr @llvm.invariant.start.p0(i64 1, ptr %860)
  %1937 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %1938 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %1939 = getelementptr { ptr }, ptr %861, i32 0, i32 0
  store ptr %1931, ptr %1939, align 8
  %1940 = call ptr %1938(ptr %861)
  call void %1940(ptr %860, { ptr, i160 } %1934)
  %.reload161 = load ptr, ptr %.reg2mem157, align 8
  %1941 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload161, i32 0, i32 0
  %1942 = load ptr, ptr %1941, align 8
  %1943 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1942, 0
  %.reload160 = load ptr, ptr %.reg2mem157, align 8
  %1944 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload160, i32 0, i32 1
  %1945 = load ptr, ptr %1944, align 8
  %1946 = insertvalue { ptr, ptr, ptr, i32 } %1943, ptr %1945, 1
  %.reload159 = load ptr, ptr %.reg2mem157, align 8
  %1947 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload159, i32 0, i32 2
  %1948 = load ptr, ptr %1947, align 8
  %1949 = insertvalue { ptr, ptr, ptr, i32 } %1946, ptr %1948, 2
  %.reload158 = load ptr, ptr %.reg2mem157, align 8
  %1950 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload158, i32 0, i32 3
  %1951 = load i32, ptr %1950, align 4
  %1952 = insertvalue { ptr, ptr, ptr, i32 } %1949, i32 %1951, 3
  %1953 = call ptr @llvm.invariant.start.p0(i64 0, ptr %862)
  %1954 = call ptr @llvm.invariant.start.p0(i64 96, ptr %1942)
  %1955 = getelementptr ptr, ptr %1942, i32 %1951
  %1956 = getelementptr ptr, ptr %1955, i32 6
  %1957 = load ptr, ptr %1956, align 8
  %1958 = call ptr %1957({ ptr, ptr, ptr, i32 } %1952, ptr %863)
  %1959 = call { ptr, ptr, ptr, i32 } %1958({ ptr, ptr, ptr, i32 } %1952, { ptr, ptr, ptr, i32 } %1952, ptr %862)
  store { ptr, ptr, ptr, i32 } %1959, ptr %864, align 8
  %1960 = call ptr @llvm.invariant.start.p0(i64 16, ptr %864)
  %1961 = getelementptr { ptr, ptr, ptr, i32 }, ptr %864, i32 0, i32 0
  %1962 = getelementptr { ptr, ptr, ptr, i32 }, ptr %865, i32 0, i32 0
  %1963 = load ptr, ptr %1961, align 8
  store ptr %1963, ptr %1962, align 8
  %1964 = getelementptr { ptr, ptr, ptr, i32 }, ptr %864, i32 0, i32 1
  %1965 = getelementptr { ptr, ptr, ptr, i32 }, ptr %865, i32 0, i32 1
  %1966 = load ptr, ptr %1964, align 8
  store ptr %1966, ptr %1965, align 8
  %1967 = getelementptr { ptr, ptr, ptr, i32 }, ptr %864, i32 0, i32 2
  %1968 = getelementptr { ptr, ptr, ptr, i32 }, ptr %865, i32 0, i32 2
  %1969 = load ptr, ptr %1967, align 8
  store ptr %1969, ptr %1968, align 8
  %1970 = getelementptr { ptr, ptr, ptr, i32 }, ptr %864, i32 0, i32 3
  %1971 = getelementptr { ptr, ptr, ptr, i32 }, ptr %865, i32 0, i32 3
  %1972 = load i32, ptr %1970, align 4
  store i32 %1972, ptr %1971, align 4
  call void @set_offset(ptr %865, ptr @ListIterator)
  %1973 = getelementptr { ptr, ptr, ptr, i32 }, ptr %865, i32 0, i32 0
  %1974 = getelementptr { ptr, ptr, ptr, i32 }, ptr %866, i32 0, i32 0
  %1975 = load ptr, ptr %1973, align 8
  store ptr %1975, ptr %1974, align 8
  %1976 = getelementptr { ptr, ptr, ptr, i32 }, ptr %865, i32 0, i32 1
  %1977 = getelementptr { ptr, ptr, ptr, i32 }, ptr %866, i32 0, i32 1
  %1978 = load ptr, ptr %1976, align 8
  store ptr %1978, ptr %1977, align 8
  %1979 = getelementptr { ptr, ptr, ptr, i32 }, ptr %865, i32 0, i32 2
  %1980 = getelementptr { ptr, ptr, ptr, i32 }, ptr %866, i32 0, i32 2
  %1981 = load ptr, ptr %1979, align 8
  store ptr %1981, ptr %1980, align 8
  %1982 = getelementptr { ptr, ptr, ptr, i32 }, ptr %865, i32 0, i32 3
  %1983 = getelementptr { ptr, ptr, ptr, i32 }, ptr %866, i32 0, i32 3
  %1984 = load i32, ptr %1982, align 4
  store i32 %1984, ptr %1983, align 4
  call void @set_offset(ptr %866, ptr @ListIterator)
  %1985 = getelementptr { ptr, ptr, ptr, i32 }, ptr %866, i32 0, i32 0
  %1986 = getelementptr { ptr, ptr, ptr, i32 }, ptr %867, i32 0, i32 0
  %1987 = load ptr, ptr %1985, align 8
  store ptr %1987, ptr %1986, align 8
  %1988 = getelementptr { ptr, ptr, ptr, i32 }, ptr %866, i32 0, i32 1
  %1989 = getelementptr { ptr, ptr, ptr, i32 }, ptr %867, i32 0, i32 1
  %1990 = load ptr, ptr %1988, align 8
  store ptr %1990, ptr %1989, align 8
  %1991 = getelementptr { ptr, ptr, ptr, i32 }, ptr %866, i32 0, i32 2
  %1992 = getelementptr { ptr, ptr, ptr, i32 }, ptr %867, i32 0, i32 2
  %1993 = load ptr, ptr %1991, align 8
  store ptr %1993, ptr %1992, align 8
  %1994 = getelementptr { ptr, ptr, ptr, i32 }, ptr %866, i32 0, i32 3
  %1995 = getelementptr { ptr, ptr, ptr, i32 }, ptr %867, i32 0, i32 3
  %1996 = load i32, ptr %1994, align 4
  store i32 %1996, ptr %1995, align 4
  %1997 = call ptr @llvm.invariant.start.p0(i64 16, ptr %867)
  %1998 = getelementptr { ptr, ptr, ptr, i32 }, ptr %867, i32 0, i32 0
  store ptr %1998, ptr %.reg2mem125, align 8
  %1999 = getelementptr { ptr, ptr, ptr, i32 }, ptr %867, i32 0, i32 1
  store ptr %1999, ptr %.reg2mem123, align 8
  %2000 = getelementptr { ptr, ptr, ptr, i32 }, ptr %867, i32 0, i32 2
  store ptr %2000, ptr %.reg2mem121, align 8
  %2001 = getelementptr { ptr, ptr, ptr, i32 }, ptr %867, i32 0, i32 3
  store ptr %2001, ptr %.reg2mem119, align 8
  br label %2002

2002:                                             ; preds = %._crit_edge8, %1909
  %.reload126 = load ptr, ptr %.reg2mem125, align 8
  %2003 = load ptr, ptr %.reload126, align 8
  %2004 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2003, 0
  %.reload124 = load ptr, ptr %.reg2mem123, align 8
  %2005 = load ptr, ptr %.reload124, align 8
  %2006 = insertvalue { ptr, ptr, ptr, i32 } %2004, ptr %2005, 1
  %.reload122 = load ptr, ptr %.reg2mem121, align 8
  %2007 = load ptr, ptr %.reload122, align 8
  %2008 = insertvalue { ptr, ptr, ptr, i32 } %2006, ptr %2007, 2
  %.reload120 = load ptr, ptr %.reg2mem119, align 8
  %2009 = load i32, ptr %.reload120, align 4
  %2010 = insertvalue { ptr, ptr, ptr, i32 } %2008, i32 %2009, 3
  %2011 = call ptr @llvm.invariant.start.p0(i64 0, ptr %868)
  %2012 = call ptr @llvm.invariant.start.p0(i64 40, ptr %2003)
  %2013 = getelementptr ptr, ptr %2003, i32 %2009
  %2014 = getelementptr ptr, ptr %2013, i32 2
  %2015 = load ptr, ptr %2014, align 8
  %2016 = call ptr %2015({ ptr, ptr, ptr, i32 } %2010, ptr %869)
  %2017 = call { ptr, i160 } %2016({ ptr, ptr, ptr, i32 } %2010, { ptr, ptr, ptr, i32 } %2010, ptr %868)
  store ptr %870, ptr %.reg2mem110, align 8
  %.reload118 = load ptr, ptr %.reg2mem110, align 8
  store { ptr, i160 } %2017, ptr %.reload118, align 8
  %.reload117 = load ptr, ptr %.reg2mem110, align 8
  %2018 = getelementptr { ptr, i160 }, ptr %.reload117, i32 0, i32 0
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %871, align 4
  %2019 = load ptr, ptr %2018, align 8
  %2020 = ptrtoint ptr %2019 to i64
  %2021 = load ptr, ptr %871, align 8
  %2022 = ptrtoint ptr %2021 to i64
  %2023 = icmp eq i64 %2020, %2022
  %2024 = icmp eq i64 %2020, 0
  %2025 = or i1 %2023, %2024
  %2026 = icmp eq i1 %2025, false
  store i1 %2026, ptr %872, align 1
  %2027 = load i1, ptr %872, align 1
  store i1 %2027, ptr %.reg2mem107, align 1
  %.reload109 = load i1, ptr %.reg2mem107, align 1
  br i1 %.reload109, label %2028, label %._crit_edge7

._crit_edge7:                                     ; preds = %2002
  br label %2090

2028:                                             ; preds = %2002
  %.reload116 = load ptr, ptr %.reg2mem110, align 8
  %2029 = getelementptr { ptr, i160 }, ptr %.reload116, i32 0, i32 0
  %2030 = getelementptr { ptr, i160 }, ptr %873, i32 0, i32 0
  %2031 = load ptr, ptr %2029, align 8
  store ptr %2031, ptr %2030, align 8
  %.reload115 = load ptr, ptr %.reg2mem110, align 8
  %2032 = getelementptr { ptr, i160 }, ptr %.reload115, i32 0, i32 1
  %2033 = getelementptr { ptr, i160 }, ptr %873, i32 0, i32 1
  %2034 = load i160, ptr %2032, align 4
  store i160 %2034, ptr %2033, align 4
  call void @set_offset(ptr %873, ptr @ListNode)
  %2035 = getelementptr { ptr, ptr, ptr, i32 }, ptr %873, i32 0, i32 0
  %2036 = load ptr, ptr %2035, align 8
  %2037 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2036, 0
  %2038 = getelementptr { ptr, ptr, ptr, i32 }, ptr %873, i32 0, i32 1
  %2039 = load ptr, ptr %2038, align 8
  %2040 = insertvalue { ptr, ptr, ptr, i32 } %2037, ptr %2039, 1
  %2041 = getelementptr { ptr, ptr, ptr, i32 }, ptr %873, i32 0, i32 2
  %2042 = load ptr, ptr %2041, align 8
  %2043 = insertvalue { ptr, ptr, ptr, i32 } %2040, ptr %2042, 2
  %2044 = getelementptr { ptr, ptr, ptr, i32 }, ptr %873, i32 0, i32 3
  %2045 = load i32, ptr %2044, align 4
  %2046 = insertvalue { ptr, ptr, ptr, i32 } %2043, i32 %2045, 3
  %2047 = call ptr @llvm.invariant.start.p0(i64 0, ptr %874)
  %2048 = call ptr @llvm.invariant.start.p0(i64 96, ptr %2036)
  %2049 = getelementptr ptr, ptr %2036, i32 %2045
  %2050 = getelementptr ptr, ptr %2049, i32 5
  %2051 = load ptr, ptr %2050, align 8
  %2052 = call ptr %2051({ ptr, ptr, ptr, i32 } %2046, ptr %875)
  %2053 = call i32 %2052({ ptr, ptr, ptr, i32 } %2046, { ptr, ptr, ptr, i32 } %2046, ptr %874)
  store i32 %2053, ptr %876, align 4
  %2054 = load i32, ptr %876, align 4
  store i32 %2054, ptr %877, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %879, align 4
  %2055 = load i64, ptr %879, align 4
  store i64 %2055, ptr %878, align 4
  %2056 = load ptr, ptr %878, align 8
  %2057 = insertvalue { ptr, i160 } undef, ptr %2056, 0
  %2058 = load i160, ptr %877, align 4
  %2059 = insertvalue { ptr, i160 } %2057, i160 %2058, 1
  %2060 = getelementptr [1 x ptr], ptr %880, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %2060, align 8
  %2061 = call ptr @llvm.invariant.start.p0(i64 1, ptr %880)
  %2062 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %2063 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %2064 = getelementptr { ptr }, ptr %881, i32 0, i32 0
  store ptr %2056, ptr %2064, align 8
  %2065 = call ptr %2063(ptr %881)
  call void %2065(ptr %880, { ptr, i160 } %2059)
  %2066 = getelementptr { ptr, ptr, ptr, i32 }, ptr %873, i32 0, i32 0
  %2067 = getelementptr { ptr, ptr, ptr, i32 }, ptr %882, i32 0, i32 0
  %2068 = load ptr, ptr %2066, align 8
  store ptr %2068, ptr %2067, align 8
  %2069 = getelementptr { ptr, ptr, ptr, i32 }, ptr %873, i32 0, i32 1
  %2070 = getelementptr { ptr, ptr, ptr, i32 }, ptr %882, i32 0, i32 1
  %2071 = load ptr, ptr %2069, align 8
  store ptr %2071, ptr %2070, align 8
  %2072 = getelementptr { ptr, ptr, ptr, i32 }, ptr %873, i32 0, i32 2
  %2073 = getelementptr { ptr, ptr, ptr, i32 }, ptr %882, i32 0, i32 2
  %2074 = load ptr, ptr %2072, align 8
  store ptr %2074, ptr %2073, align 8
  %2075 = getelementptr { ptr, ptr, ptr, i32 }, ptr %873, i32 0, i32 3
  %2076 = getelementptr { ptr, ptr, ptr, i32 }, ptr %882, i32 0, i32 3
  %2077 = load i32, ptr %2075, align 4
  store i32 %2077, ptr %2076, align 4
  call void @set_offset(ptr %882, ptr @ListNode)
  %2078 = getelementptr { ptr, ptr, ptr, i32 }, ptr %882, i32 0, i32 0
  %.reload114 = load ptr, ptr %.reg2mem110, align 8
  %2079 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload114, i32 0, i32 0
  %2080 = load ptr, ptr %2078, align 8
  store ptr %2080, ptr %2079, align 8
  %2081 = getelementptr { ptr, ptr, ptr, i32 }, ptr %882, i32 0, i32 1
  %.reload113 = load ptr, ptr %.reg2mem110, align 8
  %2082 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload113, i32 0, i32 1
  %2083 = load ptr, ptr %2081, align 8
  store ptr %2083, ptr %2082, align 8
  %2084 = getelementptr { ptr, ptr, ptr, i32 }, ptr %882, i32 0, i32 2
  %.reload112 = load ptr, ptr %.reg2mem110, align 8
  %2085 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload112, i32 0, i32 2
  %2086 = load ptr, ptr %2084, align 8
  store ptr %2086, ptr %2085, align 8
  %2087 = getelementptr { ptr, ptr, ptr, i32 }, ptr %882, i32 0, i32 3
  %.reload111 = load ptr, ptr %.reg2mem110, align 8
  %2088 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload111, i32 0, i32 3
  %2089 = load i32, ptr %2087, align 4
  store i32 %2089, ptr %2088, align 4
  br label %2090

2090:                                             ; preds = %2028, %._crit_edge7
  %.reload108 = load i1, ptr %.reg2mem107, align 1
  br i1 %.reload108, label %._crit_edge8, label %2091

._crit_edge8:                                     ; preds = %2090
  br label %2002

2091:                                             ; preds = %2090
  store ptr @print88, ptr %883, align 8
  %2092 = load ptr, ptr %883, align 8
  %2093 = call ptr @coroutine_create(ptr %2092, ptr @coroutine_svgeemrzwj_passer)
  call void @coroutine_svgeemrzwj_buffer_filler(ptr %2093)
  store ptr %2093, ptr %884, align 8
  %2094 = getelementptr { ptr }, ptr %884, i32 0, i32 0
  %2095 = getelementptr { ptr }, ptr %885, i32 0, i32 0
  %2096 = load ptr, ptr %2094, align 8
  store ptr %2096, ptr %2095, align 8
  %2097 = call ptr @llvm.invariant.start.p0(i64 16, ptr %885)
  %2098 = load ptr, ptr %885, align 8
  %2099 = load ptr, ptr %885, align 8
  call void @coroutine_call(ptr %2099)
  %2100 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %2098, i32 0, i32 4
  %2101 = load { ptr, i160 }, ptr %2100, align 8
  store { ptr, i160 } %2101, ptr %886, align 8
  store i32 89, ptr %887, align 4
  %2102 = load i32, ptr %887, align 4
  store i32 %2102, ptr %888, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %890, align 4
  %2103 = load i64, ptr %890, align 4
  store i64 %2103, ptr %889, align 4
  %2104 = load ptr, ptr %889, align 8
  %2105 = insertvalue { ptr, i160 } undef, ptr %2104, 0
  %2106 = load i160, ptr %888, align 4
  %2107 = insertvalue { ptr, i160 } %2105, i160 %2106, 1
  %2108 = getelementptr [1 x ptr], ptr %891, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %2108, align 8
  %2109 = call ptr @llvm.invariant.start.p0(i64 1, ptr %891)
  %2110 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %2111 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %2112 = getelementptr { ptr }, ptr %892, i32 0, i32 0
  store ptr %2104, ptr %2112, align 8
  %2113 = call ptr %2111(ptr %892)
  call void %2113(ptr %891, { ptr, i160 } %2107)
  %2114 = load ptr, ptr %885, align 8
  %2115 = load ptr, ptr %885, align 8
  call void @coroutine_call(ptr %2115)
  %2116 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %2114, i32 0, i32 4
  %2117 = load { ptr, i160 }, ptr %2116, align 8
  store { ptr, i160 } %2117, ptr %893, align 8
  store i32 1, ptr %894, align 4
  store i32 10, ptr %895, align 4
  %2118 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ i32, i32, i32 }, ptr null, i32 1) to i64))
  %2119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %896, i32 0, i32 1
  %2120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %896, i32 0, i32 3
  store ptr @Range, ptr %896, align 8
  store ptr %2118, ptr %2119, align 8
  store i32 7, ptr %2120, align 4
  %2121 = call ptr @llvm.invariant.start.p0(i64 16, ptr %896)
  store i32 1, ptr %897, align 4
  store i32 10, ptr %898, align 4
  %2122 = load i32, ptr %897, align 4
  %2123 = load i32, ptr %898, align 4
  %2124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %896, i32 0, i32 0
  %2125 = load ptr, ptr %2124, align 8
  %2126 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2125, 0
  %2127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %896, i32 0, i32 1
  %2128 = load ptr, ptr %2127, align 8
  %2129 = insertvalue { ptr, ptr, ptr, i32 } %2126, ptr %2128, 1
  %2130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %896, i32 0, i32 2
  %2131 = load ptr, ptr %2130, align 8
  %2132 = insertvalue { ptr, ptr, ptr, i32 } %2129, ptr %2131, 2
  %2133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %896, i32 0, i32 3
  %2134 = load i32, ptr %2133, align 4
  %2135 = insertvalue { ptr, ptr, ptr, i32 } %2132, i32 %2134, 3
  %2136 = getelementptr [2 x ptr], ptr %899, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %2136, align 8
  %2137 = getelementptr [2 x ptr], ptr %899, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %2137, align 8
  %2138 = call ptr @llvm.invariant.start.p0(i64 4, ptr %899)
  %2139 = call ptr @llvm.invariant.start.p0(i64 456, ptr %2125)
  %2140 = getelementptr ptr, ptr %2125, i32 %2134
  %2141 = getelementptr ptr, ptr %2140, i32 4
  %2142 = load ptr, ptr %2141, align 8
  %2143 = getelementptr { ptr, ptr }, ptr %900, i32 0, i32 0
  store ptr @i32_typ, ptr %2143, align 8
  %2144 = getelementptr { ptr, ptr }, ptr %900, i32 0, i32 1
  store ptr @i32_typ, ptr %2144, align 8
  %2145 = call ptr %2142({ ptr, ptr, ptr, i32 } %2135, ptr %900)
  call void %2145({ ptr, ptr, ptr, i32 } %2135, { ptr, ptr, ptr, i32 } %2135, ptr %899, i32 %2122, i32 %2123)
  %2146 = getelementptr { ptr, ptr, ptr, i32 }, ptr %896, i32 0, i32 0
  %2147 = load ptr, ptr %2146, align 8
  %2148 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2147, 0
  %2149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %896, i32 0, i32 1
  %2150 = load ptr, ptr %2149, align 8
  %2151 = insertvalue { ptr, ptr, ptr, i32 } %2148, ptr %2150, 1
  %2152 = getelementptr { ptr, ptr, ptr, i32 }, ptr %896, i32 0, i32 2
  %2153 = load ptr, ptr %2152, align 8
  %2154 = insertvalue { ptr, ptr, ptr, i32 } %2151, ptr %2153, 2
  %2155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %896, i32 0, i32 3
  %2156 = load i32, ptr %2155, align 4
  %2157 = insertvalue { ptr, ptr, ptr, i32 } %2154, i32 %2156, 3
  %2158 = call ptr @llvm.invariant.start.p0(i64 0, ptr %901)
  %2159 = call ptr @llvm.invariant.start.p0(i64 456, ptr %2147)
  %2160 = getelementptr ptr, ptr %2147, i32 %2156
  %2161 = getelementptr ptr, ptr %2160, i32 16
  %2162 = load ptr, ptr %2161, align 8
  %2163 = call ptr %2162({ ptr, ptr, ptr, i32 } %2157, ptr %902)
  %2164 = call { ptr, ptr, ptr, i32 } %2163({ ptr, ptr, ptr, i32 } %2157, { ptr, ptr, ptr, i32 } %2157, ptr %901)
  store { ptr, ptr, ptr, i32 } %2164, ptr %903, align 8
  %2165 = call ptr @llvm.invariant.start.p0(i64 16, ptr %903)
  %2166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %903, i32 0, i32 0
  %2167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %904, i32 0, i32 0
  %2168 = load ptr, ptr %2166, align 8
  store ptr %2168, ptr %2167, align 8
  %2169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %903, i32 0, i32 1
  %2170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %904, i32 0, i32 1
  %2171 = load ptr, ptr %2169, align 8
  store ptr %2171, ptr %2170, align 8
  %2172 = getelementptr { ptr, ptr, ptr, i32 }, ptr %903, i32 0, i32 2
  %2173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %904, i32 0, i32 2
  %2174 = load ptr, ptr %2172, align 8
  store ptr %2174, ptr %2173, align 8
  %2175 = getelementptr { ptr, ptr, ptr, i32 }, ptr %903, i32 0, i32 3
  %2176 = getelementptr { ptr, ptr, ptr, i32 }, ptr %904, i32 0, i32 3
  %2177 = load i32, ptr %2175, align 4
  store i32 %2177, ptr %2176, align 4
  call void @set_offset(ptr %904, ptr @RangeIterator)
  %2178 = getelementptr { ptr, ptr, ptr, i32 }, ptr %904, i32 0, i32 0
  %2179 = getelementptr { ptr, ptr, ptr, i32 }, ptr %905, i32 0, i32 0
  %2180 = load ptr, ptr %2178, align 8
  store ptr %2180, ptr %2179, align 8
  %2181 = getelementptr { ptr, ptr, ptr, i32 }, ptr %904, i32 0, i32 1
  %2182 = getelementptr { ptr, ptr, ptr, i32 }, ptr %905, i32 0, i32 1
  %2183 = load ptr, ptr %2181, align 8
  store ptr %2183, ptr %2182, align 8
  %2184 = getelementptr { ptr, ptr, ptr, i32 }, ptr %904, i32 0, i32 2
  %2185 = getelementptr { ptr, ptr, ptr, i32 }, ptr %905, i32 0, i32 2
  %2186 = load ptr, ptr %2184, align 8
  store ptr %2186, ptr %2185, align 8
  %2187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %904, i32 0, i32 3
  %2188 = getelementptr { ptr, ptr, ptr, i32 }, ptr %905, i32 0, i32 3
  %2189 = load i32, ptr %2187, align 4
  store i32 %2189, ptr %2188, align 4
  call void @set_offset(ptr %905, ptr @RangeIterator)
  %2190 = getelementptr { ptr, ptr, ptr, i32 }, ptr %905, i32 0, i32 0
  %2191 = getelementptr { ptr, ptr, ptr, i32 }, ptr %906, i32 0, i32 0
  %2192 = load ptr, ptr %2190, align 8
  store ptr %2192, ptr %2191, align 8
  %2193 = getelementptr { ptr, ptr, ptr, i32 }, ptr %905, i32 0, i32 1
  %2194 = getelementptr { ptr, ptr, ptr, i32 }, ptr %906, i32 0, i32 1
  %2195 = load ptr, ptr %2193, align 8
  store ptr %2195, ptr %2194, align 8
  %2196 = getelementptr { ptr, ptr, ptr, i32 }, ptr %905, i32 0, i32 2
  %2197 = getelementptr { ptr, ptr, ptr, i32 }, ptr %906, i32 0, i32 2
  %2198 = load ptr, ptr %2196, align 8
  store ptr %2198, ptr %2197, align 8
  %2199 = getelementptr { ptr, ptr, ptr, i32 }, ptr %905, i32 0, i32 3
  %2200 = getelementptr { ptr, ptr, ptr, i32 }, ptr %906, i32 0, i32 3
  %2201 = load i32, ptr %2199, align 4
  store i32 %2201, ptr %2200, align 4
  %2202 = call ptr @llvm.invariant.start.p0(i64 16, ptr %906)
  %2203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %906, i32 0, i32 0
  store ptr %2203, ptr %.reg2mem105, align 8
  %2204 = getelementptr { ptr, ptr, ptr, i32 }, ptr %906, i32 0, i32 1
  store ptr %2204, ptr %.reg2mem103, align 8
  %2205 = getelementptr { ptr, ptr, ptr, i32 }, ptr %906, i32 0, i32 2
  store ptr %2205, ptr %.reg2mem101, align 8
  %2206 = getelementptr { ptr, ptr, ptr, i32 }, ptr %906, i32 0, i32 3
  store ptr %2206, ptr %.reg2mem99, align 8
  br label %2207

2207:                                             ; preds = %._crit_edge9, %2091
  %.reload106 = load ptr, ptr %.reg2mem105, align 8
  %2208 = load ptr, ptr %.reload106, align 8
  %2209 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2208, 0
  %.reload104 = load ptr, ptr %.reg2mem103, align 8
  %2210 = load ptr, ptr %.reload104, align 8
  %2211 = insertvalue { ptr, ptr, ptr, i32 } %2209, ptr %2210, 1
  %.reload102 = load ptr, ptr %.reg2mem101, align 8
  %2212 = load ptr, ptr %.reload102, align 8
  %2213 = insertvalue { ptr, ptr, ptr, i32 } %2211, ptr %2212, 2
  %.reload100 = load ptr, ptr %.reg2mem99, align 8
  %2214 = load i32, ptr %.reload100, align 4
  %2215 = insertvalue { ptr, ptr, ptr, i32 } %2213, i32 %2214, 3
  %2216 = call ptr @llvm.invariant.start.p0(i64 0, ptr %907)
  %2217 = call ptr @llvm.invariant.start.p0(i64 72, ptr %2208)
  %2218 = getelementptr ptr, ptr %2208, i32 %2214
  %2219 = getelementptr ptr, ptr %2218, i32 4
  %2220 = load ptr, ptr %2219, align 8
  %2221 = call ptr %2220({ ptr, ptr, ptr, i32 } %2215, ptr %908)
  %2222 = call { ptr, i32 } %2221({ ptr, ptr, ptr, i32 } %2215, { ptr, ptr, ptr, i32 } %2215, ptr %907)
  store ptr %909, ptr %.reg2mem94, align 8
  %.reload98 = load ptr, ptr %.reg2mem94, align 8
  store { ptr, i32 } %2222, ptr %.reload98, align 8
  %.reload97 = load ptr, ptr %.reg2mem94, align 8
  %2223 = getelementptr { ptr, i32 }, ptr %.reload97, i32 0, i32 0
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %910, align 4
  %2224 = load ptr, ptr %2223, align 8
  %2225 = ptrtoint ptr %2224 to i64
  %2226 = load ptr, ptr %910, align 8
  %2227 = ptrtoint ptr %2226 to i64
  %2228 = icmp eq i64 %2225, %2227
  %2229 = icmp eq i64 %2225, 0
  %2230 = or i1 %2228, %2229
  %2231 = icmp eq i1 %2230, false
  store i1 %2231, ptr %911, align 1
  %2232 = load i1, ptr %911, align 1
  br i1 %2232, label %2233, label %2258

2233:                                             ; preds = %2207
  store ptr %912, ptr %.reg2mem89, align 8
  %.reload96 = load ptr, ptr %.reg2mem94, align 8
  %2234 = getelementptr { ptr, i32 }, ptr %.reload96, i32 0, i32 1
  %2235 = load i32, ptr %2234, align 4
  %.reload93 = load ptr, ptr %.reg2mem89, align 8
  store i32 %2235, ptr %.reload93, align 4
  store i32 5, ptr %913, align 4
  %.reload92 = load ptr, ptr %.reg2mem89, align 8
  %2236 = load i32, ptr %.reload92, align 4
  %2237 = load i32, ptr %913, align 4
  %2238 = icmp eq i32 %2236, %2237
  store i1 %2238, ptr %914, align 1
  %2239 = load i1, ptr %914, align 1
  %2240 = xor i1 %2239, true
  %2241 = zext i1 %2240 to i32
  store i32 %2241, ptr %.reg2mem87, align 4
  br i1 %2239, label %2242, label %2243

2242:                                             ; preds = %2233
  br label %2257

2243:                                             ; preds = %2233
  %.reload91 = load ptr, ptr %.reg2mem89, align 8
  %2244 = load i32, ptr %.reload91, align 4
  store i32 %2244, ptr %915, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %917, align 4
  %2245 = load i64, ptr %917, align 4
  store i64 %2245, ptr %916, align 4
  %2246 = load ptr, ptr %916, align 8
  %2247 = insertvalue { ptr, i160 } undef, ptr %2246, 0
  %2248 = load i160, ptr %915, align 4
  %2249 = insertvalue { ptr, i160 } %2247, i160 %2248, 1
  %2250 = getelementptr [1 x ptr], ptr %918, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %2250, align 8
  %2251 = call ptr @llvm.invariant.start.p0(i64 1, ptr %918)
  %2252 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %2253 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %2254 = getelementptr { ptr }, ptr %919, i32 0, i32 0
  store ptr %2246, ptr %2254, align 8
  %2255 = call ptr %2253(ptr %919)
  call void %2255(ptr %918, { ptr, i160 } %2249)
  %.reload90 = load ptr, ptr %.reg2mem89, align 8
  %2256 = load i32, ptr %.reload90, align 4
  %.reload95 = load ptr, ptr %.reg2mem94, align 8
  store i32 %2256, ptr %.reload95, align 4
  br label %2257

2257:                                             ; preds = %2243, %2242
  %.reload88 = load i32, ptr %.reg2mem87, align 4
  store i32 %.reload88, ptr %.reg2mem186, align 4
  br label %2259

2258:                                             ; preds = %2207
  store i32 0, ptr %.reg2mem186, align 4
  br label %2259

2259:                                             ; preds = %2258, %2257
  %.reload187 = load i32, ptr %.reg2mem186, align 4
  store i32 %.reload187, ptr %.reg2mem85, align 4
  br label %2260

2260:                                             ; preds = %2259
  %.reload86 = load i32, ptr %.reg2mem85, align 4
  %2261 = trunc i32 %.reload86 to i1
  br i1 %2261, label %._crit_edge9, label %2262

._crit_edge9:                                     ; preds = %2260
  br label %2207

2262:                                             ; preds = %2260
  store i32 5, ptr %920, align 4
  %2263 = load i32, ptr %920, align 4
  %2264 = getelementptr i32, ptr null, i32 %2263
  %2265 = ptrtoint ptr %2264 to i64
  %2266 = call ptr @bump_malloc(i64 %2265)
  store ptr %2266, ptr %921, align 8
  %2267 = getelementptr { ptr }, ptr %921, i32 0, i32 0
  %2268 = getelementptr { ptr }, ptr %922, i32 0, i32 0
  %2269 = load ptr, ptr %2267, align 8
  store ptr %2269, ptr %2268, align 8
  %2270 = call ptr @llvm.invariant.start.p0(i64 16, ptr %922)
  store i32 1, ptr %923, align 4
  store i32 0, ptr %924, align 4
  %2271 = load ptr, ptr %922, align 8
  %2272 = load i32, ptr %924, align 4
  %2273 = getelementptr i32, ptr null, i32 %2272
  %2274 = ptrtoint ptr %2273 to i64
  %2275 = getelementptr i8, ptr %2271, i64 %2274
  %2276 = load i32, ptr %923, align 4
  store i32 %2276, ptr %2275, align 4
  store i32 2, ptr %925, align 4
  store i32 1, ptr %926, align 4
  %2277 = load ptr, ptr %922, align 8
  %2278 = load i32, ptr %926, align 4
  %2279 = getelementptr i32, ptr null, i32 %2278
  %2280 = ptrtoint ptr %2279 to i64
  %2281 = getelementptr i8, ptr %2277, i64 %2280
  %2282 = load i32, ptr %925, align 4
  store i32 %2282, ptr %2281, align 4
  store i32 3, ptr %927, align 4
  store i32 2, ptr %928, align 4
  %2283 = load ptr, ptr %922, align 8
  %2284 = load i32, ptr %928, align 4
  %2285 = getelementptr i32, ptr null, i32 %2284
  %2286 = ptrtoint ptr %2285 to i64
  %2287 = getelementptr i8, ptr %2283, i64 %2286
  %2288 = load i32, ptr %927, align 4
  store i32 %2288, ptr %2287, align 4
  store i32 4, ptr %929, align 4
  store i32 3, ptr %930, align 4
  %2289 = load ptr, ptr %922, align 8
  %2290 = load i32, ptr %930, align 4
  %2291 = getelementptr i32, ptr null, i32 %2290
  %2292 = ptrtoint ptr %2291 to i64
  %2293 = getelementptr i8, ptr %2289, i64 %2292
  %2294 = load i32, ptr %929, align 4
  store i32 %2294, ptr %2293, align 4
  store i32 4, ptr %931, align 4
  store i32 5, ptr %932, align 4
  %2295 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %2296 = getelementptr { ptr, ptr, ptr, i32 }, ptr %933, i32 0, i32 1
  %2297 = getelementptr { ptr, ptr, ptr, i32 }, ptr %933, i32 0, i32 3
  store ptr @IntArray, ptr %933, align 8
  store ptr %2295, ptr %2296, align 8
  store i32 7, ptr %2297, align 4
  %2298 = call ptr @llvm.invariant.start.p0(i64 16, ptr %933)
  store i32 4, ptr %934, align 4
  store i32 5, ptr %935, align 4
  %2299 = getelementptr { ptr }, ptr %922, i32 0, i32 0
  %2300 = load ptr, ptr %2299, align 8
  %2301 = insertvalue { ptr } undef, ptr %2300, 0
  %2302 = load i32, ptr %934, align 4
  %2303 = load i32, ptr %935, align 4
  %2304 = getelementptr { ptr, ptr, ptr, i32 }, ptr %933, i32 0, i32 0
  %2305 = load ptr, ptr %2304, align 8
  %2306 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2305, 0
  %2307 = getelementptr { ptr, ptr, ptr, i32 }, ptr %933, i32 0, i32 1
  %2308 = load ptr, ptr %2307, align 8
  %2309 = insertvalue { ptr, ptr, ptr, i32 } %2306, ptr %2308, 1
  %2310 = getelementptr { ptr, ptr, ptr, i32 }, ptr %933, i32 0, i32 2
  %2311 = load ptr, ptr %2310, align 8
  %2312 = insertvalue { ptr, ptr, ptr, i32 } %2309, ptr %2311, 2
  %2313 = getelementptr { ptr, ptr, ptr, i32 }, ptr %933, i32 0, i32 3
  %2314 = load i32, ptr %2313, align 4
  %2315 = insertvalue { ptr, ptr, ptr, i32 } %2312, i32 %2314, 3
  %2316 = getelementptr [3 x ptr], ptr %936, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %2316, align 8
  %2317 = getelementptr [3 x ptr], ptr %936, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %2317, align 8
  %2318 = getelementptr [3 x ptr], ptr %936, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %2318, align 8
  %2319 = call ptr @llvm.invariant.start.p0(i64 9, ptr %936)
  %2320 = call ptr @llvm.invariant.start.p0(i64 616, ptr %2305)
  %2321 = getelementptr ptr, ptr %2305, i32 %2314
  %2322 = getelementptr ptr, ptr %2321, i32 5
  %2323 = load ptr, ptr %2322, align 8
  %2324 = getelementptr { ptr, ptr, ptr }, ptr %937, i32 0, i32 0
  store ptr @buffer_typ, ptr %2324, align 8
  %2325 = getelementptr { ptr, ptr, ptr }, ptr %937, i32 0, i32 1
  store ptr @i32_typ, ptr %2325, align 8
  %2326 = getelementptr { ptr, ptr, ptr }, ptr %937, i32 0, i32 2
  store ptr @i32_typ, ptr %2326, align 8
  %2327 = call ptr %2323({ ptr, ptr, ptr, i32 } %2315, ptr %937)
  call void %2327({ ptr, ptr, ptr, i32 } %2315, { ptr, ptr, ptr, i32 } %2315, ptr %936, { ptr } %2301, i32 %2302, i32 %2303)
  %2328 = getelementptr { ptr, ptr, ptr, i32 }, ptr %933, i32 0, i32 0
  %2329 = getelementptr { ptr, ptr, ptr, i32 }, ptr %938, i32 0, i32 0
  %2330 = load ptr, ptr %2328, align 8
  store ptr %2330, ptr %2329, align 8
  %2331 = getelementptr { ptr, ptr, ptr, i32 }, ptr %933, i32 0, i32 1
  %2332 = getelementptr { ptr, ptr, ptr, i32 }, ptr %938, i32 0, i32 1
  %2333 = load ptr, ptr %2331, align 8
  store ptr %2333, ptr %2332, align 8
  %2334 = getelementptr { ptr, ptr, ptr, i32 }, ptr %933, i32 0, i32 2
  %2335 = getelementptr { ptr, ptr, ptr, i32 }, ptr %938, i32 0, i32 2
  %2336 = load ptr, ptr %2334, align 8
  store ptr %2336, ptr %2335, align 8
  %2337 = getelementptr { ptr, ptr, ptr, i32 }, ptr %933, i32 0, i32 3
  %2338 = getelementptr { ptr, ptr, ptr, i32 }, ptr %938, i32 0, i32 3
  %2339 = load i32, ptr %2337, align 4
  store i32 %2339, ptr %2338, align 4
  call void @set_offset(ptr %938, ptr @IntArray)
  %2340 = getelementptr { ptr, ptr, ptr, i32 }, ptr %938, i32 0, i32 0
  %2341 = getelementptr { ptr, ptr, ptr, i32 }, ptr %939, i32 0, i32 0
  %2342 = load ptr, ptr %2340, align 8
  store ptr %2342, ptr %2341, align 8
  %2343 = getelementptr { ptr, ptr, ptr, i32 }, ptr %938, i32 0, i32 1
  %2344 = getelementptr { ptr, ptr, ptr, i32 }, ptr %939, i32 0, i32 1
  %2345 = load ptr, ptr %2343, align 8
  store ptr %2345, ptr %2344, align 8
  %2346 = getelementptr { ptr, ptr, ptr, i32 }, ptr %938, i32 0, i32 2
  %2347 = getelementptr { ptr, ptr, ptr, i32 }, ptr %939, i32 0, i32 2
  %2348 = load ptr, ptr %2346, align 8
  store ptr %2348, ptr %2347, align 8
  %2349 = getelementptr { ptr, ptr, ptr, i32 }, ptr %938, i32 0, i32 3
  %2350 = getelementptr { ptr, ptr, ptr, i32 }, ptr %939, i32 0, i32 3
  %2351 = load i32, ptr %2349, align 4
  store i32 %2351, ptr %2350, align 4
  %2352 = call ptr @llvm.invariant.start.p0(i64 16, ptr %939)
  store i32 7, ptr %940, align 4
  %2353 = load i32, ptr %940, align 4
  %2354 = getelementptr i32, ptr null, i32 %2353
  %2355 = ptrtoint ptr %2354 to i64
  %2356 = call ptr @bump_malloc(i64 %2355)
  store ptr %2356, ptr %941, align 8
  %2357 = getelementptr { ptr }, ptr %941, i32 0, i32 0
  %2358 = getelementptr { ptr }, ptr %942, i32 0, i32 0
  %2359 = load ptr, ptr %2357, align 8
  store ptr %2359, ptr %2358, align 8
  %2360 = call ptr @llvm.invariant.start.p0(i64 16, ptr %942)
  store i32 5, ptr %943, align 4
  store i32 0, ptr %944, align 4
  %2361 = load ptr, ptr %942, align 8
  %2362 = load i32, ptr %944, align 4
  %2363 = getelementptr i32, ptr null, i32 %2362
  %2364 = ptrtoint ptr %2363 to i64
  %2365 = getelementptr i8, ptr %2361, i64 %2364
  %2366 = load i32, ptr %943, align 4
  store i32 %2366, ptr %2365, align 4
  store i32 6, ptr %945, align 4
  store i32 1, ptr %946, align 4
  %2367 = load ptr, ptr %942, align 8
  %2368 = load i32, ptr %946, align 4
  %2369 = getelementptr i32, ptr null, i32 %2368
  %2370 = ptrtoint ptr %2369 to i64
  %2371 = getelementptr i8, ptr %2367, i64 %2370
  %2372 = load i32, ptr %945, align 4
  store i32 %2372, ptr %2371, align 4
  store i32 7, ptr %947, align 4
  store i32 2, ptr %948, align 4
  %2373 = load ptr, ptr %942, align 8
  %2374 = load i32, ptr %948, align 4
  %2375 = getelementptr i32, ptr null, i32 %2374
  %2376 = ptrtoint ptr %2375 to i64
  %2377 = getelementptr i8, ptr %2373, i64 %2376
  %2378 = load i32, ptr %947, align 4
  store i32 %2378, ptr %2377, align 4
  store i32 8, ptr %949, align 4
  store i32 3, ptr %950, align 4
  %2379 = load ptr, ptr %942, align 8
  %2380 = load i32, ptr %950, align 4
  %2381 = getelementptr i32, ptr null, i32 %2380
  %2382 = ptrtoint ptr %2381 to i64
  %2383 = getelementptr i8, ptr %2379, i64 %2382
  %2384 = load i32, ptr %949, align 4
  store i32 %2384, ptr %2383, align 4
  store i32 9, ptr %951, align 4
  store i32 4, ptr %952, align 4
  %2385 = load ptr, ptr %942, align 8
  %2386 = load i32, ptr %952, align 4
  %2387 = getelementptr i32, ptr null, i32 %2386
  %2388 = ptrtoint ptr %2387 to i64
  %2389 = getelementptr i8, ptr %2385, i64 %2388
  %2390 = load i32, ptr %951, align 4
  store i32 %2390, ptr %2389, align 4
  store i32 10, ptr %953, align 4
  store i32 5, ptr %954, align 4
  %2391 = load ptr, ptr %942, align 8
  %2392 = load i32, ptr %954, align 4
  %2393 = getelementptr i32, ptr null, i32 %2392
  %2394 = ptrtoint ptr %2393 to i64
  %2395 = getelementptr i8, ptr %2391, i64 %2394
  %2396 = load i32, ptr %953, align 4
  store i32 %2396, ptr %2395, align 4
  store i32 6, ptr %955, align 4
  store i32 7, ptr %956, align 4
  %2397 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %2398 = getelementptr { ptr, ptr, ptr, i32 }, ptr %957, i32 0, i32 1
  %2399 = getelementptr { ptr, ptr, ptr, i32 }, ptr %957, i32 0, i32 3
  store ptr @IntArray, ptr %957, align 8
  store ptr %2397, ptr %2398, align 8
  store i32 7, ptr %2399, align 4
  %2400 = call ptr @llvm.invariant.start.p0(i64 16, ptr %957)
  store i32 6, ptr %958, align 4
  store i32 7, ptr %959, align 4
  %2401 = getelementptr { ptr }, ptr %942, i32 0, i32 0
  %2402 = load ptr, ptr %2401, align 8
  %2403 = insertvalue { ptr } undef, ptr %2402, 0
  %2404 = load i32, ptr %958, align 4
  %2405 = load i32, ptr %959, align 4
  %2406 = getelementptr { ptr, ptr, ptr, i32 }, ptr %957, i32 0, i32 0
  %2407 = load ptr, ptr %2406, align 8
  %2408 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2407, 0
  %2409 = getelementptr { ptr, ptr, ptr, i32 }, ptr %957, i32 0, i32 1
  %2410 = load ptr, ptr %2409, align 8
  %2411 = insertvalue { ptr, ptr, ptr, i32 } %2408, ptr %2410, 1
  %2412 = getelementptr { ptr, ptr, ptr, i32 }, ptr %957, i32 0, i32 2
  %2413 = load ptr, ptr %2412, align 8
  %2414 = insertvalue { ptr, ptr, ptr, i32 } %2411, ptr %2413, 2
  %2415 = getelementptr { ptr, ptr, ptr, i32 }, ptr %957, i32 0, i32 3
  %2416 = load i32, ptr %2415, align 4
  %2417 = insertvalue { ptr, ptr, ptr, i32 } %2414, i32 %2416, 3
  %2418 = getelementptr [3 x ptr], ptr %960, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %2418, align 8
  %2419 = getelementptr [3 x ptr], ptr %960, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %2419, align 8
  %2420 = getelementptr [3 x ptr], ptr %960, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %2420, align 8
  %2421 = call ptr @llvm.invariant.start.p0(i64 9, ptr %960)
  %2422 = call ptr @llvm.invariant.start.p0(i64 616, ptr %2407)
  %2423 = getelementptr ptr, ptr %2407, i32 %2416
  %2424 = getelementptr ptr, ptr %2423, i32 5
  %2425 = load ptr, ptr %2424, align 8
  %2426 = getelementptr { ptr, ptr, ptr }, ptr %961, i32 0, i32 0
  store ptr @buffer_typ, ptr %2426, align 8
  %2427 = getelementptr { ptr, ptr, ptr }, ptr %961, i32 0, i32 1
  store ptr @i32_typ, ptr %2427, align 8
  %2428 = getelementptr { ptr, ptr, ptr }, ptr %961, i32 0, i32 2
  store ptr @i32_typ, ptr %2428, align 8
  %2429 = call ptr %2425({ ptr, ptr, ptr, i32 } %2417, ptr %961)
  call void %2429({ ptr, ptr, ptr, i32 } %2417, { ptr, ptr, ptr, i32 } %2417, ptr %960, { ptr } %2403, i32 %2404, i32 %2405)
  %2430 = getelementptr { ptr, ptr, ptr, i32 }, ptr %957, i32 0, i32 0
  %2431 = getelementptr { ptr, ptr, ptr, i32 }, ptr %962, i32 0, i32 0
  %2432 = load ptr, ptr %2430, align 8
  store ptr %2432, ptr %2431, align 8
  %2433 = getelementptr { ptr, ptr, ptr, i32 }, ptr %957, i32 0, i32 1
  %2434 = getelementptr { ptr, ptr, ptr, i32 }, ptr %962, i32 0, i32 1
  %2435 = load ptr, ptr %2433, align 8
  store ptr %2435, ptr %2434, align 8
  %2436 = getelementptr { ptr, ptr, ptr, i32 }, ptr %957, i32 0, i32 2
  %2437 = getelementptr { ptr, ptr, ptr, i32 }, ptr %962, i32 0, i32 2
  %2438 = load ptr, ptr %2436, align 8
  store ptr %2438, ptr %2437, align 8
  %2439 = getelementptr { ptr, ptr, ptr, i32 }, ptr %957, i32 0, i32 3
  %2440 = getelementptr { ptr, ptr, ptr, i32 }, ptr %962, i32 0, i32 3
  %2441 = load i32, ptr %2439, align 4
  store i32 %2441, ptr %2440, align 4
  call void @set_offset(ptr %962, ptr @IntArray)
  %2442 = getelementptr { ptr, ptr, ptr, i32 }, ptr %962, i32 0, i32 0
  %2443 = load ptr, ptr %2442, align 8
  %2444 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2443, 0
  %2445 = getelementptr { ptr, ptr, ptr, i32 }, ptr %962, i32 0, i32 1
  %2446 = load ptr, ptr %2445, align 8
  %2447 = insertvalue { ptr, ptr, ptr, i32 } %2444, ptr %2446, 1
  %2448 = getelementptr { ptr, ptr, ptr, i32 }, ptr %962, i32 0, i32 2
  %2449 = load ptr, ptr %2448, align 8
  %2450 = insertvalue { ptr, ptr, ptr, i32 } %2447, ptr %2449, 2
  %2451 = getelementptr { ptr, ptr, ptr, i32 }, ptr %962, i32 0, i32 3
  %2452 = load i32, ptr %2451, align 4
  %2453 = insertvalue { ptr, ptr, ptr, i32 } %2450, i32 %2452, 3
  %2454 = getelementptr { ptr, ptr, ptr, i32 }, ptr %939, i32 0, i32 0
  %2455 = load ptr, ptr %2454, align 8
  %2456 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2455, 0
  %2457 = getelementptr { ptr, ptr, ptr, i32 }, ptr %939, i32 0, i32 1
  %2458 = load ptr, ptr %2457, align 8
  %2459 = insertvalue { ptr, ptr, ptr, i32 } %2456, ptr %2458, 1
  %2460 = getelementptr { ptr, ptr, ptr, i32 }, ptr %939, i32 0, i32 2
  %2461 = load ptr, ptr %2460, align 8
  %2462 = insertvalue { ptr, ptr, ptr, i32 } %2459, ptr %2461, 2
  %2463 = getelementptr { ptr, ptr, ptr, i32 }, ptr %939, i32 0, i32 3
  %2464 = load i32, ptr %2463, align 4
  %2465 = insertvalue { ptr, ptr, ptr, i32 } %2462, i32 %2464, 3
  %2466 = getelementptr [1 x ptr], ptr %963, i32 0, i32 0
  store ptr @_parameterization_IntArray, ptr %2466, align 8
  %2467 = call ptr @llvm.invariant.start.p0(i64 1, ptr %963)
  %2468 = call ptr @llvm.invariant.start.p0(i64 616, ptr %2455)
  %2469 = getelementptr ptr, ptr %2455, i32 %2464
  %2470 = getelementptr ptr, ptr %2469, i32 10
  %2471 = load ptr, ptr %2470, align 8
  %2472 = getelementptr { ptr }, ptr %964, i32 0, i32 0
  store ptr %2443, ptr %2472, align 8
  %2473 = call ptr %2471({ ptr, ptr, ptr, i32 } %2465, ptr %964)
  %2474 = call { ptr, ptr, ptr, i32 } %2473({ ptr, ptr, ptr, i32 } %2465, { ptr, ptr, ptr, i32 } %2465, ptr %963, { ptr, ptr, ptr, i32 } %2453)
  store { ptr, ptr, ptr, i32 } %2474, ptr %965, align 8
  %2475 = call ptr @llvm.invariant.start.p0(i64 16, ptr %965)
  %2476 = getelementptr { ptr, ptr, ptr, i32 }, ptr %965, i32 0, i32 0
  %2477 = getelementptr { ptr, ptr, ptr, i32 }, ptr %966, i32 0, i32 0
  %2478 = load ptr, ptr %2476, align 8
  store ptr %2478, ptr %2477, align 8
  %2479 = getelementptr { ptr, ptr, ptr, i32 }, ptr %965, i32 0, i32 1
  %2480 = getelementptr { ptr, ptr, ptr, i32 }, ptr %966, i32 0, i32 1
  %2481 = load ptr, ptr %2479, align 8
  store ptr %2481, ptr %2480, align 8
  %2482 = getelementptr { ptr, ptr, ptr, i32 }, ptr %965, i32 0, i32 2
  %2483 = getelementptr { ptr, ptr, ptr, i32 }, ptr %966, i32 0, i32 2
  %2484 = load ptr, ptr %2482, align 8
  store ptr %2484, ptr %2483, align 8
  %2485 = getelementptr { ptr, ptr, ptr, i32 }, ptr %965, i32 0, i32 3
  %2486 = getelementptr { ptr, ptr, ptr, i32 }, ptr %966, i32 0, i32 3
  %2487 = load i32, ptr %2485, align 4
  store i32 %2487, ptr %2486, align 4
  call void @set_offset(ptr %966, ptr @IntArray)
  store i32 7, ptr %967, align 4
  %2488 = load i32, ptr %967, align 4
  %2489 = getelementptr { ptr, ptr, ptr, i32 }, ptr %939, i32 0, i32 0
  %2490 = load ptr, ptr %2489, align 8
  %2491 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2490, 0
  %2492 = getelementptr { ptr, ptr, ptr, i32 }, ptr %939, i32 0, i32 1
  %2493 = load ptr, ptr %2492, align 8
  %2494 = insertvalue { ptr, ptr, ptr, i32 } %2491, ptr %2493, 1
  %2495 = getelementptr { ptr, ptr, ptr, i32 }, ptr %939, i32 0, i32 2
  %2496 = load ptr, ptr %2495, align 8
  %2497 = insertvalue { ptr, ptr, ptr, i32 } %2494, ptr %2496, 2
  %2498 = getelementptr { ptr, ptr, ptr, i32 }, ptr %939, i32 0, i32 3
  %2499 = load i32, ptr %2498, align 4
  %2500 = insertvalue { ptr, ptr, ptr, i32 } %2497, i32 %2499, 3
  %2501 = getelementptr [1 x ptr], ptr %968, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %2501, align 8
  %2502 = call ptr @llvm.invariant.start.p0(i64 1, ptr %968)
  %2503 = call ptr @llvm.invariant.start.p0(i64 616, ptr %2490)
  %2504 = getelementptr ptr, ptr %2490, i32 %2499
  %2505 = getelementptr ptr, ptr %2504, i32 11
  %2506 = load ptr, ptr %2505, align 8
  %2507 = getelementptr { ptr }, ptr %969, i32 0, i32 0
  store ptr @i32_typ, ptr %2507, align 8
  %2508 = call ptr %2506({ ptr, ptr, ptr, i32 } %2500, ptr %969)
  %2509 = call i32 %2508({ ptr, ptr, ptr, i32 } %2500, { ptr, ptr, ptr, i32 } %2500, ptr %968, i32 %2488)
  store i32 %2509, ptr %970, align 4
  %2510 = load i32, ptr %970, align 4
  store i32 %2510, ptr %971, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %973, align 4
  %2511 = load i64, ptr %973, align 4
  store i64 %2511, ptr %972, align 4
  %2512 = load ptr, ptr %972, align 8
  %2513 = insertvalue { ptr, i160 } undef, ptr %2512, 0
  %2514 = load i160, ptr %971, align 4
  %2515 = insertvalue { ptr, i160 } %2513, i160 %2514, 1
  %2516 = getelementptr [1 x ptr], ptr %974, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %2516, align 8
  %2517 = call ptr @llvm.invariant.start.p0(i64 1, ptr %974)
  %2518 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %2519 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %2520 = getelementptr { ptr }, ptr %975, i32 0, i32 0
  store ptr %2512, ptr %2520, align 8
  %2521 = call ptr %2519(ptr %975)
  call void %2521(ptr %974, { ptr, i160 } %2515)
  store i32 1, ptr %976, align 4
  %2522 = load i32, ptr %976, align 4
  %2523 = getelementptr i32, ptr null, i32 %2522
  %2524 = ptrtoint ptr %2523 to i64
  %2525 = call ptr @bump_malloc(i64 %2524)
  store ptr %2525, ptr %977, align 8
  %2526 = getelementptr { ptr }, ptr %977, i32 0, i32 0
  %2527 = getelementptr { ptr }, ptr %978, i32 0, i32 0
  %2528 = load ptr, ptr %2526, align 8
  store ptr %2528, ptr %2527, align 8
  %2529 = call ptr @llvm.invariant.start.p0(i64 16, ptr %978)
  store i32 0, ptr %979, align 4
  store i32 1, ptr %980, align 4
  %2530 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %2531 = getelementptr { ptr, ptr, ptr, i32 }, ptr %981, i32 0, i32 1
  %2532 = getelementptr { ptr, ptr, ptr, i32 }, ptr %981, i32 0, i32 3
  store ptr @IntArray, ptr %981, align 8
  store ptr %2530, ptr %2531, align 8
  store i32 7, ptr %2532, align 4
  %2533 = call ptr @llvm.invariant.start.p0(i64 16, ptr %981)
  store i32 0, ptr %982, align 4
  store i32 1, ptr %983, align 4
  %2534 = getelementptr { ptr }, ptr %978, i32 0, i32 0
  %2535 = load ptr, ptr %2534, align 8
  %2536 = insertvalue { ptr } undef, ptr %2535, 0
  %2537 = load i32, ptr %982, align 4
  %2538 = load i32, ptr %983, align 4
  %2539 = getelementptr { ptr, ptr, ptr, i32 }, ptr %981, i32 0, i32 0
  %2540 = load ptr, ptr %2539, align 8
  %2541 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2540, 0
  %2542 = getelementptr { ptr, ptr, ptr, i32 }, ptr %981, i32 0, i32 1
  %2543 = load ptr, ptr %2542, align 8
  %2544 = insertvalue { ptr, ptr, ptr, i32 } %2541, ptr %2543, 1
  %2545 = getelementptr { ptr, ptr, ptr, i32 }, ptr %981, i32 0, i32 2
  %2546 = load ptr, ptr %2545, align 8
  %2547 = insertvalue { ptr, ptr, ptr, i32 } %2544, ptr %2546, 2
  %2548 = getelementptr { ptr, ptr, ptr, i32 }, ptr %981, i32 0, i32 3
  %2549 = load i32, ptr %2548, align 4
  %2550 = insertvalue { ptr, ptr, ptr, i32 } %2547, i32 %2549, 3
  %2551 = getelementptr [3 x ptr], ptr %984, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %2551, align 8
  %2552 = getelementptr [3 x ptr], ptr %984, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %2552, align 8
  %2553 = getelementptr [3 x ptr], ptr %984, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %2553, align 8
  %2554 = call ptr @llvm.invariant.start.p0(i64 9, ptr %984)
  %2555 = call ptr @llvm.invariant.start.p0(i64 616, ptr %2540)
  %2556 = getelementptr ptr, ptr %2540, i32 %2549
  %2557 = getelementptr ptr, ptr %2556, i32 5
  %2558 = load ptr, ptr %2557, align 8
  %2559 = getelementptr { ptr, ptr, ptr }, ptr %985, i32 0, i32 0
  store ptr @buffer_typ, ptr %2559, align 8
  %2560 = getelementptr { ptr, ptr, ptr }, ptr %985, i32 0, i32 1
  store ptr @i32_typ, ptr %2560, align 8
  %2561 = getelementptr { ptr, ptr, ptr }, ptr %985, i32 0, i32 2
  store ptr @i32_typ, ptr %2561, align 8
  %2562 = call ptr %2558({ ptr, ptr, ptr, i32 } %2550, ptr %985)
  call void %2562({ ptr, ptr, ptr, i32 } %2550, { ptr, ptr, ptr, i32 } %2550, ptr %984, { ptr } %2536, i32 %2537, i32 %2538)
  %2563 = getelementptr { ptr, ptr, ptr, i32 }, ptr %981, i32 0, i32 0
  %2564 = getelementptr { ptr, ptr, ptr, i32 }, ptr %986, i32 0, i32 0
  %2565 = load ptr, ptr %2563, align 8
  store ptr %2565, ptr %2564, align 8
  %2566 = getelementptr { ptr, ptr, ptr, i32 }, ptr %981, i32 0, i32 1
  %2567 = getelementptr { ptr, ptr, ptr, i32 }, ptr %986, i32 0, i32 1
  %2568 = load ptr, ptr %2566, align 8
  store ptr %2568, ptr %2567, align 8
  %2569 = getelementptr { ptr, ptr, ptr, i32 }, ptr %981, i32 0, i32 2
  %2570 = getelementptr { ptr, ptr, ptr, i32 }, ptr %986, i32 0, i32 2
  %2571 = load ptr, ptr %2569, align 8
  store ptr %2571, ptr %2570, align 8
  %2572 = getelementptr { ptr, ptr, ptr, i32 }, ptr %981, i32 0, i32 3
  %2573 = getelementptr { ptr, ptr, ptr, i32 }, ptr %986, i32 0, i32 3
  %2574 = load i32, ptr %2572, align 4
  store i32 %2574, ptr %2573, align 4
  call void @set_offset(ptr %986, ptr @IntArray)
  %2575 = getelementptr { ptr, ptr, ptr, i32 }, ptr %986, i32 0, i32 0
  %2576 = getelementptr { ptr, ptr, ptr, i32 }, ptr %987, i32 0, i32 0
  %2577 = load ptr, ptr %2575, align 8
  store ptr %2577, ptr %2576, align 8
  %2578 = getelementptr { ptr, ptr, ptr, i32 }, ptr %986, i32 0, i32 1
  %2579 = getelementptr { ptr, ptr, ptr, i32 }, ptr %987, i32 0, i32 1
  %2580 = load ptr, ptr %2578, align 8
  store ptr %2580, ptr %2579, align 8
  %2581 = getelementptr { ptr, ptr, ptr, i32 }, ptr %986, i32 0, i32 2
  %2582 = getelementptr { ptr, ptr, ptr, i32 }, ptr %987, i32 0, i32 2
  %2583 = load ptr, ptr %2581, align 8
  store ptr %2583, ptr %2582, align 8
  %2584 = getelementptr { ptr, ptr, ptr, i32 }, ptr %986, i32 0, i32 3
  %2585 = getelementptr { ptr, ptr, ptr, i32 }, ptr %987, i32 0, i32 3
  %2586 = load i32, ptr %2584, align 4
  store i32 %2586, ptr %2585, align 4
  %2587 = call ptr @llvm.invariant.start.p0(i64 16, ptr %987)
  store i32 5, ptr %988, align 4
  %2588 = load i32, ptr %988, align 4
  %2589 = getelementptr i32, ptr null, i32 %2588
  %2590 = ptrtoint ptr %2589 to i64
  %2591 = call ptr @bump_malloc(i64 %2590)
  store ptr %2591, ptr %989, align 8
  %2592 = getelementptr { ptr }, ptr %989, i32 0, i32 0
  %2593 = getelementptr { ptr }, ptr %990, i32 0, i32 0
  %2594 = load ptr, ptr %2592, align 8
  store ptr %2594, ptr %2593, align 8
  %2595 = call ptr @llvm.invariant.start.p0(i64 16, ptr %990)
  store i32 8, ptr %991, align 4
  store i32 0, ptr %992, align 4
  %2596 = load ptr, ptr %990, align 8
  %2597 = load i32, ptr %992, align 4
  %2598 = getelementptr i32, ptr null, i32 %2597
  %2599 = ptrtoint ptr %2598 to i64
  %2600 = getelementptr i8, ptr %2596, i64 %2599
  %2601 = load i32, ptr %991, align 4
  store i32 %2601, ptr %2600, align 4
  store i32 7, ptr %993, align 4
  store i32 1, ptr %994, align 4
  %2602 = load ptr, ptr %990, align 8
  %2603 = load i32, ptr %994, align 4
  %2604 = getelementptr i32, ptr null, i32 %2603
  %2605 = ptrtoint ptr %2604 to i64
  %2606 = getelementptr i8, ptr %2602, i64 %2605
  %2607 = load i32, ptr %993, align 4
  store i32 %2607, ptr %2606, align 4
  store i32 6, ptr %995, align 4
  store i32 2, ptr %996, align 4
  %2608 = load ptr, ptr %990, align 8
  %2609 = load i32, ptr %996, align 4
  %2610 = getelementptr i32, ptr null, i32 %2609
  %2611 = ptrtoint ptr %2610 to i64
  %2612 = getelementptr i8, ptr %2608, i64 %2611
  %2613 = load i32, ptr %995, align 4
  store i32 %2613, ptr %2612, align 4
  store i32 5, ptr %997, align 4
  store i32 3, ptr %998, align 4
  %2614 = load ptr, ptr %990, align 8
  %2615 = load i32, ptr %998, align 4
  %2616 = getelementptr i32, ptr null, i32 %2615
  %2617 = ptrtoint ptr %2616 to i64
  %2618 = getelementptr i8, ptr %2614, i64 %2617
  %2619 = load i32, ptr %997, align 4
  store i32 %2619, ptr %2618, align 4
  store i32 4, ptr %999, align 4
  store i32 5, ptr %1000, align 4
  %2620 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %2621 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1001, i32 0, i32 1
  %2622 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1001, i32 0, i32 3
  store ptr @IntArray, ptr %1001, align 8
  store ptr %2620, ptr %2621, align 8
  store i32 7, ptr %2622, align 4
  %2623 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1001)
  store i32 4, ptr %1002, align 4
  store i32 5, ptr %1003, align 4
  %2624 = getelementptr { ptr }, ptr %990, i32 0, i32 0
  %2625 = load ptr, ptr %2624, align 8
  %2626 = insertvalue { ptr } undef, ptr %2625, 0
  %2627 = load i32, ptr %1002, align 4
  %2628 = load i32, ptr %1003, align 4
  %2629 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1001, i32 0, i32 0
  %2630 = load ptr, ptr %2629, align 8
  %2631 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2630, 0
  %2632 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1001, i32 0, i32 1
  %2633 = load ptr, ptr %2632, align 8
  %2634 = insertvalue { ptr, ptr, ptr, i32 } %2631, ptr %2633, 1
  %2635 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1001, i32 0, i32 2
  %2636 = load ptr, ptr %2635, align 8
  %2637 = insertvalue { ptr, ptr, ptr, i32 } %2634, ptr %2636, 2
  %2638 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1001, i32 0, i32 3
  %2639 = load i32, ptr %2638, align 4
  %2640 = insertvalue { ptr, ptr, ptr, i32 } %2637, i32 %2639, 3
  %2641 = getelementptr [3 x ptr], ptr %1004, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %2641, align 8
  %2642 = getelementptr [3 x ptr], ptr %1004, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %2642, align 8
  %2643 = getelementptr [3 x ptr], ptr %1004, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %2643, align 8
  %2644 = call ptr @llvm.invariant.start.p0(i64 9, ptr %1004)
  %2645 = call ptr @llvm.invariant.start.p0(i64 616, ptr %2630)
  %2646 = getelementptr ptr, ptr %2630, i32 %2639
  %2647 = getelementptr ptr, ptr %2646, i32 5
  %2648 = load ptr, ptr %2647, align 8
  %2649 = getelementptr { ptr, ptr, ptr }, ptr %1005, i32 0, i32 0
  store ptr @buffer_typ, ptr %2649, align 8
  %2650 = getelementptr { ptr, ptr, ptr }, ptr %1005, i32 0, i32 1
  store ptr @i32_typ, ptr %2650, align 8
  %2651 = getelementptr { ptr, ptr, ptr }, ptr %1005, i32 0, i32 2
  store ptr @i32_typ, ptr %2651, align 8
  %2652 = call ptr %2648({ ptr, ptr, ptr, i32 } %2640, ptr %1005)
  call void %2652({ ptr, ptr, ptr, i32 } %2640, { ptr, ptr, ptr, i32 } %2640, ptr %1004, { ptr } %2626, i32 %2627, i32 %2628)
  %2653 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1001, i32 0, i32 0
  %2654 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1006, i32 0, i32 0
  %2655 = load ptr, ptr %2653, align 8
  store ptr %2655, ptr %2654, align 8
  %2656 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1001, i32 0, i32 1
  %2657 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1006, i32 0, i32 1
  %2658 = load ptr, ptr %2656, align 8
  store ptr %2658, ptr %2657, align 8
  %2659 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1001, i32 0, i32 2
  %2660 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1006, i32 0, i32 2
  %2661 = load ptr, ptr %2659, align 8
  store ptr %2661, ptr %2660, align 8
  %2662 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1001, i32 0, i32 3
  %2663 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1006, i32 0, i32 3
  %2664 = load i32, ptr %2662, align 4
  store i32 %2664, ptr %2663, align 4
  call void @set_offset(ptr %1006, ptr @IntArray)
  %2665 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1006, i32 0, i32 0
  %2666 = load ptr, ptr %2665, align 8
  %2667 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2666, 0
  %2668 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1006, i32 0, i32 1
  %2669 = load ptr, ptr %2668, align 8
  %2670 = insertvalue { ptr, ptr, ptr, i32 } %2667, ptr %2669, 1
  %2671 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1006, i32 0, i32 2
  %2672 = load ptr, ptr %2671, align 8
  %2673 = insertvalue { ptr, ptr, ptr, i32 } %2670, ptr %2672, 2
  %2674 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1006, i32 0, i32 3
  %2675 = load i32, ptr %2674, align 4
  %2676 = insertvalue { ptr, ptr, ptr, i32 } %2673, i32 %2675, 3
  %2677 = getelementptr { ptr, ptr, ptr, i32 }, ptr %987, i32 0, i32 0
  %2678 = load ptr, ptr %2677, align 8
  %2679 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2678, 0
  %2680 = getelementptr { ptr, ptr, ptr, i32 }, ptr %987, i32 0, i32 1
  %2681 = load ptr, ptr %2680, align 8
  %2682 = insertvalue { ptr, ptr, ptr, i32 } %2679, ptr %2681, 1
  %2683 = getelementptr { ptr, ptr, ptr, i32 }, ptr %987, i32 0, i32 2
  %2684 = load ptr, ptr %2683, align 8
  %2685 = insertvalue { ptr, ptr, ptr, i32 } %2682, ptr %2684, 2
  %2686 = getelementptr { ptr, ptr, ptr, i32 }, ptr %987, i32 0, i32 3
  %2687 = load i32, ptr %2686, align 4
  %2688 = insertvalue { ptr, ptr, ptr, i32 } %2685, i32 %2687, 3
  %2689 = getelementptr [1 x ptr], ptr %1007, i32 0, i32 0
  store ptr @_parameterization_IntArray, ptr %2689, align 8
  %2690 = call ptr @llvm.invariant.start.p0(i64 1, ptr %1007)
  %2691 = call ptr @llvm.invariant.start.p0(i64 616, ptr %2678)
  %2692 = getelementptr ptr, ptr %2678, i32 %2687
  %2693 = getelementptr ptr, ptr %2692, i32 10
  %2694 = load ptr, ptr %2693, align 8
  %2695 = getelementptr { ptr }, ptr %1008, i32 0, i32 0
  store ptr %2666, ptr %2695, align 8
  %2696 = call ptr %2694({ ptr, ptr, ptr, i32 } %2688, ptr %1008)
  %2697 = call { ptr, ptr, ptr, i32 } %2696({ ptr, ptr, ptr, i32 } %2688, { ptr, ptr, ptr, i32 } %2688, ptr %1007, { ptr, ptr, ptr, i32 } %2676)
  store { ptr, ptr, ptr, i32 } %2697, ptr %1009, align 8
  %2698 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1009)
  %2699 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1009, i32 0, i32 0
  %2700 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1010, i32 0, i32 0
  %2701 = load ptr, ptr %2699, align 8
  store ptr %2701, ptr %2700, align 8
  %2702 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1009, i32 0, i32 1
  %2703 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1010, i32 0, i32 1
  %2704 = load ptr, ptr %2702, align 8
  store ptr %2704, ptr %2703, align 8
  %2705 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1009, i32 0, i32 2
  %2706 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1010, i32 0, i32 2
  %2707 = load ptr, ptr %2705, align 8
  store ptr %2707, ptr %2706, align 8
  %2708 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1009, i32 0, i32 3
  %2709 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1010, i32 0, i32 3
  %2710 = load i32, ptr %2708, align 4
  store i32 %2710, ptr %2709, align 4
  call void @set_offset(ptr %1010, ptr @IntArray)
  store i32 3, ptr %1011, align 4
  %2711 = load i32, ptr %1011, align 4
  %2712 = getelementptr { ptr, ptr, ptr, i32 }, ptr %987, i32 0, i32 0
  %2713 = load ptr, ptr %2712, align 8
  %2714 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2713, 0
  %2715 = getelementptr { ptr, ptr, ptr, i32 }, ptr %987, i32 0, i32 1
  %2716 = load ptr, ptr %2715, align 8
  %2717 = insertvalue { ptr, ptr, ptr, i32 } %2714, ptr %2716, 1
  %2718 = getelementptr { ptr, ptr, ptr, i32 }, ptr %987, i32 0, i32 2
  %2719 = load ptr, ptr %2718, align 8
  %2720 = insertvalue { ptr, ptr, ptr, i32 } %2717, ptr %2719, 2
  %2721 = getelementptr { ptr, ptr, ptr, i32 }, ptr %987, i32 0, i32 3
  %2722 = load i32, ptr %2721, align 4
  %2723 = insertvalue { ptr, ptr, ptr, i32 } %2720, i32 %2722, 3
  %2724 = getelementptr [1 x ptr], ptr %1012, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %2724, align 8
  %2725 = call ptr @llvm.invariant.start.p0(i64 1, ptr %1012)
  %2726 = call ptr @llvm.invariant.start.p0(i64 616, ptr %2713)
  %2727 = getelementptr ptr, ptr %2713, i32 %2722
  %2728 = getelementptr ptr, ptr %2727, i32 11
  %2729 = load ptr, ptr %2728, align 8
  %2730 = getelementptr { ptr }, ptr %1013, i32 0, i32 0
  store ptr @i32_typ, ptr %2730, align 8
  %2731 = call ptr %2729({ ptr, ptr, ptr, i32 } %2723, ptr %1013)
  %2732 = call i32 %2731({ ptr, ptr, ptr, i32 } %2723, { ptr, ptr, ptr, i32 } %2723, ptr %1012, i32 %2711)
  store i32 %2732, ptr %1014, align 4
  %2733 = load i32, ptr %1014, align 4
  store i32 %2733, ptr %1015, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %1017, align 4
  %2734 = load i64, ptr %1017, align 4
  store i64 %2734, ptr %1016, align 4
  %2735 = load ptr, ptr %1016, align 8
  %2736 = insertvalue { ptr, i160 } undef, ptr %2735, 0
  %2737 = load i160, ptr %1015, align 4
  %2738 = insertvalue { ptr, i160 } %2736, i160 %2737, 1
  %2739 = getelementptr [1 x ptr], ptr %1018, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %2739, align 8
  %2740 = call ptr @llvm.invariant.start.p0(i64 1, ptr %1018)
  %2741 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %2742 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %2743 = getelementptr { ptr }, ptr %1019, i32 0, i32 0
  store ptr %2735, ptr %2743, align 8
  %2744 = call ptr %2742(ptr %1019)
  call void %2744(ptr %1018, { ptr, i160 } %2738)
  call void @grabo()
  %2745 = getelementptr { ptr, ptr, ptr, i32 }, ptr %939, i32 0, i32 0
  store i64 ptrtoint (ptr @IntArray to i64), ptr %1020, align 4
  %2746 = load ptr, ptr %2745, align 8
  %2747 = load ptr, ptr %1020, align 8
  %2748 = ptrtoint ptr %2747 to i64
  %2749 = getelementptr { [3 x i64], [3 x ptr] }, ptr %2746, i32 0, i32 0, i32 1
  %2750 = getelementptr { [3 x i64], [3 x ptr] }, ptr %2746, i32 0, i32 0, i32 2
  %2751 = getelementptr { [3 x i64], [3 x ptr] }, ptr %2746, i32 0, i32 1, i32 0
  %2752 = getelementptr { [3 x i64], [3 x ptr] }, ptr %2746, i32 0, i32 1, i32 1
  %2753 = load i64, ptr %2749, align 4
  %2754 = load i64, ptr %2750, align 4
  %2755 = load ptr, ptr %2751, align 8
  %2756 = load ptr, ptr %2752, align 8
  %2757 = load i64, ptr %2747, align 4
  %2758 = call i1 @subtype_test_wrapper(ptr %2755, i64 %2754, i64 %2753, i64 %2757, i64 %2748, ptr %2756)
  store i1 %2758, ptr %1021, align 1
  store i32 0, ptr %1022, align 4
  %2759 = load i32, ptr %1022, align 4
  %2760 = getelementptr { ptr, ptr, ptr, i32 }, ptr %939, i32 0, i32 0
  %2761 = load ptr, ptr %2760, align 8
  %2762 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2761, 0
  %2763 = getelementptr { ptr, ptr, ptr, i32 }, ptr %939, i32 0, i32 1
  %2764 = load ptr, ptr %2763, align 8
  %2765 = insertvalue { ptr, ptr, ptr, i32 } %2762, ptr %2764, 1
  %2766 = getelementptr { ptr, ptr, ptr, i32 }, ptr %939, i32 0, i32 2
  %2767 = load ptr, ptr %2766, align 8
  %2768 = insertvalue { ptr, ptr, ptr, i32 } %2765, ptr %2767, 2
  %2769 = getelementptr { ptr, ptr, ptr, i32 }, ptr %939, i32 0, i32 3
  %2770 = load i32, ptr %2769, align 4
  %2771 = insertvalue { ptr, ptr, ptr, i32 } %2768, i32 %2770, 3
  %2772 = getelementptr [1 x ptr], ptr %1023, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %2772, align 8
  %2773 = call ptr @llvm.invariant.start.p0(i64 1, ptr %1023)
  %2774 = call ptr @llvm.invariant.start.p0(i64 616, ptr %2761)
  %2775 = getelementptr ptr, ptr %2761, i32 %2770
  %2776 = getelementptr ptr, ptr %2775, i32 11
  %2777 = load ptr, ptr %2776, align 8
  %2778 = getelementptr { ptr }, ptr %1024, i32 0, i32 0
  store ptr @i32_typ, ptr %2778, align 8
  %2779 = call ptr %2777({ ptr, ptr, ptr, i32 } %2771, ptr %1024)
  %2780 = call i32 %2779({ ptr, ptr, ptr, i32 } %2771, { ptr, ptr, ptr, i32 } %2771, ptr %1023, i32 %2759)
  store i32 %2780, ptr %1025, align 4
  store i32 5, ptr %1026, align 4
  %2781 = load i32, ptr %1025, align 4
  %2782 = load i32, ptr %1026, align 4
  %2783 = icmp eq i32 %2781, %2782
  store i1 %2783, ptr %1027, align 1
  %2784 = load i1, ptr %1021, align 1
  %2785 = load i1, ptr %1027, align 1
  %2786 = and i1 %2784, %2785
  store i1 %2786, ptr %1028, align 1
  %2787 = load i1, ptr %1028, align 1
  br i1 %2787, label %2788, label %._crit_edge10

._crit_edge10:                                    ; preds = %2262
  br label %2848

2788:                                             ; preds = %2262
  store i32 15, ptr %1029, align 4
  %2789 = load i32, ptr %1029, align 4
  %2790 = getelementptr i8, ptr null, i32 %2789
  %2791 = ptrtoint ptr %2790 to i64
  %2792 = call ptr @bump_malloc(i64 %2791)
  store ptr %2792, ptr %1030, align 8
  %2793 = getelementptr { ptr }, ptr %1030, i32 0, i32 0
  %2794 = getelementptr { ptr }, ptr %1031, i32 0, i32 0
  %2795 = load ptr, ptr %2793, align 8
  store ptr %2795, ptr %2794, align 8
  %2796 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1031)
  store i32 0, ptr %1032, align 4
  %2797 = load ptr, ptr %1031, align 8
  %2798 = load i32, ptr %1032, align 4
  %2799 = getelementptr [14 x i8], ptr null, i32 %2798
  %2800 = ptrtoint ptr %2799 to i64
  %2801 = getelementptr i8, ptr %2797, i64 %2800
  %2802 = load i112, ptr @zpyqp_so_it_is_true, align 4
  store i112 %2802, ptr %2801, align 4
  store i32 14, ptr %1033, align 4
  store i32 15, ptr %1034, align 4
  %2803 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %2804 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1035, i32 0, i32 1
  %2805 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1035, i32 0, i32 3
  store ptr @String, ptr %1035, align 8
  store ptr %2803, ptr %2804, align 8
  store i32 7, ptr %2805, align 4
  %2806 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1035)
  store i32 14, ptr %1036, align 4
  store i32 15, ptr %1037, align 4
  %2807 = getelementptr { ptr }, ptr %1031, i32 0, i32 0
  %2808 = load ptr, ptr %2807, align 8
  %2809 = insertvalue { ptr } undef, ptr %2808, 0
  %2810 = load i32, ptr %1036, align 4
  %2811 = load i32, ptr %1037, align 4
  %2812 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1035, i32 0, i32 0
  %2813 = load ptr, ptr %2812, align 8
  %2814 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2813, 0
  %2815 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1035, i32 0, i32 1
  %2816 = load ptr, ptr %2815, align 8
  %2817 = insertvalue { ptr, ptr, ptr, i32 } %2814, ptr %2816, 1
  %2818 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1035, i32 0, i32 2
  %2819 = load ptr, ptr %2818, align 8
  %2820 = insertvalue { ptr, ptr, ptr, i32 } %2817, ptr %2819, 2
  %2821 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1035, i32 0, i32 3
  %2822 = load i32, ptr %2821, align 4
  %2823 = insertvalue { ptr, ptr, ptr, i32 } %2820, i32 %2822, 3
  %2824 = getelementptr [3 x ptr], ptr %1038, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %2824, align 8
  %2825 = getelementptr [3 x ptr], ptr %1038, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %2825, align 8
  %2826 = getelementptr [3 x ptr], ptr %1038, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %2826, align 8
  %2827 = call ptr @llvm.invariant.start.p0(i64 9, ptr %1038)
  %2828 = call ptr @llvm.invariant.start.p0(i64 280, ptr %2813)
  %2829 = getelementptr ptr, ptr %2813, i32 %2822
  %2830 = getelementptr ptr, ptr %2829, i32 4
  %2831 = load ptr, ptr %2830, align 8
  %2832 = getelementptr { ptr, ptr, ptr }, ptr %1039, i32 0, i32 0
  store ptr @buffer_typ, ptr %2832, align 8
  %2833 = getelementptr { ptr, ptr, ptr }, ptr %1039, i32 0, i32 1
  store ptr @i32_typ, ptr %2833, align 8
  %2834 = getelementptr { ptr, ptr, ptr }, ptr %1039, i32 0, i32 2
  store ptr @i32_typ, ptr %2834, align 8
  %2835 = call ptr %2831({ ptr, ptr, ptr, i32 } %2823, ptr %1039)
  call void %2835({ ptr, ptr, ptr, i32 } %2823, { ptr, ptr, ptr, i32 } %2823, ptr %1038, { ptr } %2809, i32 %2810, i32 %2811)
  %2836 = getelementptr { ptr, i160 }, ptr %1035, i32 0, i32 0
  %2837 = load ptr, ptr %2836, align 8
  %2838 = insertvalue { ptr, i160 } undef, ptr %2837, 0
  %2839 = getelementptr { ptr, i160 }, ptr %1035, i32 0, i32 1
  %2840 = load i160, ptr %2839, align 4
  %2841 = insertvalue { ptr, i160 } %2838, i160 %2840, 1
  %2842 = getelementptr [1 x ptr], ptr %1040, i32 0, i32 0
  store ptr @_parameterization_String, ptr %2842, align 8
  %2843 = call ptr @llvm.invariant.start.p0(i64 1, ptr %1040)
  %2844 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %2845 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %2846 = getelementptr { ptr }, ptr %1041, i32 0, i32 0
  store ptr %2837, ptr %2846, align 8
  %2847 = call ptr %2845(ptr %1041)
  call void %2847(ptr %1040, { ptr, i160 } %2841)
  br label %2848

2848:                                             ; preds = %2788, %._crit_edge10
  %2849 = call i64 @clock()
  store i64 %2849, ptr %1042, align 4
  %2850 = load i64, ptr %1042, align 4
  store i64 %2850, ptr %1043, align 4
  store i64 ptrtoint (ptr @i64_typ to i64), ptr %1045, align 4
  %2851 = load i64, ptr %1045, align 4
  store i64 %2851, ptr %1044, align 4
  %2852 = load ptr, ptr %1044, align 8
  %2853 = insertvalue { ptr, i160 } undef, ptr %2852, 0
  %2854 = load i160, ptr %1043, align 4
  %2855 = insertvalue { ptr, i160 } %2853, i160 %2854, 1
  %2856 = getelementptr [1 x ptr], ptr %1046, i32 0, i32 0
  store ptr @_parameterization_Ptri64, ptr %2856, align 8
  %2857 = call ptr @llvm.invariant.start.p0(i64 1, ptr %1046)
  %2858 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %2859 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %2860 = getelementptr { ptr }, ptr %1047, i32 0, i32 0
  store ptr %2852, ptr %2860, align 8
  %2861 = call ptr %2859(ptr %1047)
  call void %2861(ptr %1046, { ptr, i160 } %2855)
  store i64 5, ptr %1048, align 4
  %2862 = load i64, ptr %1048, align 4
  store i64 %2862, ptr %1049, align 4
  store i64 ptrtoint (ptr @i64_typ to i64), ptr %1051, align 4
  %2863 = load i64, ptr %1051, align 4
  store i64 %2863, ptr %1050, align 4
  %2864 = load ptr, ptr %1050, align 8
  %2865 = insertvalue { ptr, i160 } undef, ptr %2864, 0
  %2866 = load i160, ptr %1049, align 4
  %2867 = insertvalue { ptr, i160 } %2865, i160 %2866, 1
  %2868 = getelementptr [1 x ptr], ptr %1052, i32 0, i32 0
  store ptr @_parameterization_Ptri64, ptr %2868, align 8
  %2869 = call ptr @llvm.invariant.start.p0(i64 1, ptr %1052)
  %2870 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %2871 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %2872 = getelementptr { ptr }, ptr %1053, i32 0, i32 0
  store ptr %2864, ptr %2872, align 8
  %2873 = call ptr %2871(ptr %1053)
  call void %2873(ptr %1052, { ptr, i160 } %2867)
  store i32 5, ptr %1054, align 4
  %2874 = load i32, ptr %1054, align 4
  %2875 = sitofp i32 %2874 to double
  store double %2875, ptr %1055, align 8
  %2876 = load double, ptr %1055, align 8
  store double %2876, ptr %1056, align 8
  store i64 ptrtoint (ptr @f64_typ to i64), ptr %1058, align 4
  %2877 = load i64, ptr %1058, align 4
  store i64 %2877, ptr %1057, align 4
  %2878 = load ptr, ptr %1057, align 8
  %2879 = insertvalue { ptr, i160 } undef, ptr %2878, 0
  %2880 = load i160, ptr %1056, align 4
  %2881 = insertvalue { ptr, i160 } %2879, i160 %2880, 1
  %2882 = getelementptr [1 x ptr], ptr %1059, i32 0, i32 0
  store ptr @_parameterization_Ptrf64, ptr %2882, align 8
  %2883 = call ptr @llvm.invariant.start.p0(i64 1, ptr %1059)
  %2884 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %2885 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %2886 = getelementptr { ptr }, ptr %1060, i32 0, i32 0
  store ptr %2878, ptr %2886, align 8
  %2887 = call ptr %2885(ptr %1060)
  call void %2887(ptr %1059, { ptr, i160 } %2881)
  store i32 11, ptr %1061, align 4
  store i32 14, ptr %1062, align 4
  %2888 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ i32, i32, i32 }, ptr null, i32 1) to i64))
  %2889 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1063, i32 0, i32 1
  %2890 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1063, i32 0, i32 3
  store ptr @Range, ptr %1063, align 8
  store ptr %2888, ptr %2889, align 8
  store i32 7, ptr %2890, align 4
  %2891 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1063)
  store i32 11, ptr %1064, align 4
  store i32 14, ptr %1065, align 4
  %2892 = load i32, ptr %1064, align 4
  %2893 = load i32, ptr %1065, align 4
  %2894 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1063, i32 0, i32 0
  %2895 = load ptr, ptr %2894, align 8
  %2896 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2895, 0
  %2897 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1063, i32 0, i32 1
  %2898 = load ptr, ptr %2897, align 8
  %2899 = insertvalue { ptr, ptr, ptr, i32 } %2896, ptr %2898, 1
  %2900 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1063, i32 0, i32 2
  %2901 = load ptr, ptr %2900, align 8
  %2902 = insertvalue { ptr, ptr, ptr, i32 } %2899, ptr %2901, 2
  %2903 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1063, i32 0, i32 3
  %2904 = load i32, ptr %2903, align 4
  %2905 = insertvalue { ptr, ptr, ptr, i32 } %2902, i32 %2904, 3
  %2906 = getelementptr [2 x ptr], ptr %1066, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %2906, align 8
  %2907 = getelementptr [2 x ptr], ptr %1066, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %2907, align 8
  %2908 = call ptr @llvm.invariant.start.p0(i64 4, ptr %1066)
  %2909 = call ptr @llvm.invariant.start.p0(i64 456, ptr %2895)
  %2910 = getelementptr ptr, ptr %2895, i32 %2904
  %2911 = getelementptr ptr, ptr %2910, i32 4
  %2912 = load ptr, ptr %2911, align 8
  %2913 = getelementptr { ptr, ptr }, ptr %1067, i32 0, i32 0
  store ptr @i32_typ, ptr %2913, align 8
  %2914 = getelementptr { ptr, ptr }, ptr %1067, i32 0, i32 1
  store ptr @i32_typ, ptr %2914, align 8
  %2915 = call ptr %2912({ ptr, ptr, ptr, i32 } %2905, ptr %1067)
  call void %2915({ ptr, ptr, ptr, i32 } %2905, { ptr, ptr, ptr, i32 } %2905, ptr %1066, i32 %2892, i32 %2893)
  %2916 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1063, i32 0, i32 0
  %2917 = load ptr, ptr %2916, align 8
  %2918 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2917, 0
  %2919 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1063, i32 0, i32 1
  %2920 = load ptr, ptr %2919, align 8
  %2921 = insertvalue { ptr, ptr, ptr, i32 } %2918, ptr %2920, 1
  %2922 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1063, i32 0, i32 2
  %2923 = load ptr, ptr %2922, align 8
  %2924 = insertvalue { ptr, ptr, ptr, i32 } %2921, ptr %2923, 2
  %2925 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1063, i32 0, i32 3
  %2926 = load i32, ptr %2925, align 4
  %2927 = insertvalue { ptr, ptr, ptr, i32 } %2924, i32 %2926, 3
  %2928 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1068)
  %2929 = call ptr @llvm.invariant.start.p0(i64 456, ptr %2917)
  %2930 = getelementptr ptr, ptr %2917, i32 %2926
  %2931 = getelementptr ptr, ptr %2930, i32 16
  %2932 = load ptr, ptr %2931, align 8
  %2933 = call ptr %2932({ ptr, ptr, ptr, i32 } %2927, ptr %1069)
  %2934 = call { ptr, ptr, ptr, i32 } %2933({ ptr, ptr, ptr, i32 } %2927, { ptr, ptr, ptr, i32 } %2927, ptr %1068)
  store { ptr, ptr, ptr, i32 } %2934, ptr %1070, align 8
  %2935 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1070)
  %2936 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1070, i32 0, i32 0
  %2937 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1071, i32 0, i32 0
  %2938 = load ptr, ptr %2936, align 8
  store ptr %2938, ptr %2937, align 8
  %2939 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1070, i32 0, i32 1
  %2940 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1071, i32 0, i32 1
  %2941 = load ptr, ptr %2939, align 8
  store ptr %2941, ptr %2940, align 8
  %2942 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1070, i32 0, i32 2
  %2943 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1071, i32 0, i32 2
  %2944 = load ptr, ptr %2942, align 8
  store ptr %2944, ptr %2943, align 8
  %2945 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1070, i32 0, i32 3
  %2946 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1071, i32 0, i32 3
  %2947 = load i32, ptr %2945, align 4
  store i32 %2947, ptr %2946, align 4
  call void @set_offset(ptr %1071, ptr @RangeIterator)
  %2948 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1071, i32 0, i32 0
  %2949 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1072, i32 0, i32 0
  %2950 = load ptr, ptr %2948, align 8
  store ptr %2950, ptr %2949, align 8
  %2951 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1071, i32 0, i32 1
  %2952 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1072, i32 0, i32 1
  %2953 = load ptr, ptr %2951, align 8
  store ptr %2953, ptr %2952, align 8
  %2954 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1071, i32 0, i32 2
  %2955 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1072, i32 0, i32 2
  %2956 = load ptr, ptr %2954, align 8
  store ptr %2956, ptr %2955, align 8
  %2957 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1071, i32 0, i32 3
  %2958 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1072, i32 0, i32 3
  %2959 = load i32, ptr %2957, align 4
  store i32 %2959, ptr %2958, align 4
  call void @set_offset(ptr %1072, ptr @RangeIterator)
  %2960 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1072, i32 0, i32 0
  %2961 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1073, i32 0, i32 0
  %2962 = load ptr, ptr %2960, align 8
  store ptr %2962, ptr %2961, align 8
  %2963 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1072, i32 0, i32 1
  %2964 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1073, i32 0, i32 1
  %2965 = load ptr, ptr %2963, align 8
  store ptr %2965, ptr %2964, align 8
  %2966 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1072, i32 0, i32 2
  %2967 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1073, i32 0, i32 2
  %2968 = load ptr, ptr %2966, align 8
  store ptr %2968, ptr %2967, align 8
  %2969 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1072, i32 0, i32 3
  %2970 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1073, i32 0, i32 3
  %2971 = load i32, ptr %2969, align 4
  store i32 %2971, ptr %2970, align 4
  %2972 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1073)
  %2973 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1073, i32 0, i32 0
  store ptr %2973, ptr %.reg2mem83, align 8
  %2974 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1073, i32 0, i32 1
  store ptr %2974, ptr %.reg2mem81, align 8
  %2975 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1073, i32 0, i32 2
  store ptr %2975, ptr %.reg2mem79, align 8
  %2976 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1073, i32 0, i32 3
  store ptr %2976, ptr %.reg2mem77, align 8
  br label %2977

2977:                                             ; preds = %._crit_edge12, %2848
  %.reload84 = load ptr, ptr %.reg2mem83, align 8
  %2978 = load ptr, ptr %.reload84, align 8
  %2979 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2978, 0
  %.reload82 = load ptr, ptr %.reg2mem81, align 8
  %2980 = load ptr, ptr %.reload82, align 8
  %2981 = insertvalue { ptr, ptr, ptr, i32 } %2979, ptr %2980, 1
  %.reload80 = load ptr, ptr %.reg2mem79, align 8
  %2982 = load ptr, ptr %.reload80, align 8
  %2983 = insertvalue { ptr, ptr, ptr, i32 } %2981, ptr %2982, 2
  %.reload78 = load ptr, ptr %.reg2mem77, align 8
  %2984 = load i32, ptr %.reload78, align 4
  %2985 = insertvalue { ptr, ptr, ptr, i32 } %2983, i32 %2984, 3
  %2986 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1074)
  %2987 = call ptr @llvm.invariant.start.p0(i64 72, ptr %2978)
  %2988 = getelementptr ptr, ptr %2978, i32 %2984
  %2989 = getelementptr ptr, ptr %2988, i32 4
  %2990 = load ptr, ptr %2989, align 8
  %2991 = call ptr %2990({ ptr, ptr, ptr, i32 } %2985, ptr %1075)
  %2992 = call { ptr, i32 } %2991({ ptr, ptr, ptr, i32 } %2985, { ptr, ptr, ptr, i32 } %2985, ptr %1074)
  store ptr %1076, ptr %.reg2mem72, align 8
  %.reload76 = load ptr, ptr %.reg2mem72, align 8
  store { ptr, i32 } %2992, ptr %.reload76, align 8
  %.reload75 = load ptr, ptr %.reg2mem72, align 8
  %2993 = getelementptr { ptr, i32 }, ptr %.reload75, i32 0, i32 0
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %1077, align 4
  %2994 = load ptr, ptr %2993, align 8
  %2995 = ptrtoint ptr %2994 to i64
  %2996 = load ptr, ptr %1077, align 8
  %2997 = ptrtoint ptr %2996 to i64
  %2998 = icmp eq i64 %2995, %2997
  %2999 = icmp eq i64 %2995, 0
  %3000 = or i1 %2998, %2999
  %3001 = icmp eq i1 %3000, false
  store i1 %3001, ptr %1078, align 1
  %3002 = load i1, ptr %1078, align 1
  store i1 %3002, ptr %.reg2mem69, align 1
  %.reload71 = load i1, ptr %.reg2mem69, align 1
  br i1 %.reload71, label %3003, label %._crit_edge11

._crit_edge11:                                    ; preds = %2977
  br label %3019

3003:                                             ; preds = %2977
  %.reload74 = load ptr, ptr %.reg2mem72, align 8
  %3004 = getelementptr { ptr, i32 }, ptr %.reload74, i32 0, i32 1
  %3005 = load i32, ptr %3004, align 4
  store i32 %3005, ptr %1079, align 4
  %3006 = load i32, ptr %1079, align 4
  store i32 %3006, ptr %1080, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %1082, align 4
  %3007 = load i64, ptr %1082, align 4
  store i64 %3007, ptr %1081, align 4
  %3008 = load ptr, ptr %1081, align 8
  %3009 = insertvalue { ptr, i160 } undef, ptr %3008, 0
  %3010 = load i160, ptr %1080, align 4
  %3011 = insertvalue { ptr, i160 } %3009, i160 %3010, 1
  %3012 = getelementptr [1 x ptr], ptr %1083, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %3012, align 8
  %3013 = call ptr @llvm.invariant.start.p0(i64 1, ptr %1083)
  %3014 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %3015 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %3016 = getelementptr { ptr }, ptr %1084, i32 0, i32 0
  store ptr %3008, ptr %3016, align 8
  %3017 = call ptr %3015(ptr %1084)
  call void %3017(ptr %1083, { ptr, i160 } %3011)
  %3018 = load i32, ptr %1079, align 4
  %.reload73 = load ptr, ptr %.reg2mem72, align 8
  store i32 %3018, ptr %.reload73, align 4
  br label %3019

3019:                                             ; preds = %3003, %._crit_edge11
  %.reload70 = load i1, ptr %.reg2mem69, align 1
  br i1 %.reload70, label %._crit_edge12, label %3020

._crit_edge12:                                    ; preds = %3019
  br label %2977

3020:                                             ; preds = %3019
  store i32 4, ptr %1085, align 4
  %3021 = load i32, ptr %1085, align 4
  %3022 = getelementptr i32, ptr null, i32 %3021
  %3023 = ptrtoint ptr %3022 to i64
  %3024 = call ptr @bump_malloc(i64 %3023)
  store ptr %3024, ptr %1086, align 8
  %3025 = getelementptr { ptr }, ptr %1086, i32 0, i32 0
  %3026 = getelementptr { ptr }, ptr %1087, i32 0, i32 0
  %3027 = load ptr, ptr %3025, align 8
  store ptr %3027, ptr %3026, align 8
  %3028 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1087)
  store i32 44, ptr %1088, align 4
  store i32 0, ptr %1089, align 4
  %3029 = load ptr, ptr %1087, align 8
  %3030 = load i32, ptr %1089, align 4
  %3031 = getelementptr i32, ptr null, i32 %3030
  %3032 = ptrtoint ptr %3031 to i64
  %3033 = getelementptr i8, ptr %3029, i64 %3032
  %3034 = load i32, ptr %1088, align 4
  store i32 %3034, ptr %3033, align 4
  store i32 55, ptr %1090, align 4
  store i32 1, ptr %1091, align 4
  %3035 = load ptr, ptr %1087, align 8
  %3036 = load i32, ptr %1091, align 4
  %3037 = getelementptr i32, ptr null, i32 %3036
  %3038 = ptrtoint ptr %3037 to i64
  %3039 = getelementptr i8, ptr %3035, i64 %3038
  %3040 = load i32, ptr %1090, align 4
  store i32 %3040, ptr %3039, align 4
  store i32 66, ptr %1092, align 4
  store i32 2, ptr %1093, align 4
  %3041 = load ptr, ptr %1087, align 8
  %3042 = load i32, ptr %1093, align 4
  %3043 = getelementptr i32, ptr null, i32 %3042
  %3044 = ptrtoint ptr %3043 to i64
  %3045 = getelementptr i8, ptr %3041, i64 %3044
  %3046 = load i32, ptr %1092, align 4
  store i32 %3046, ptr %3045, align 4
  store i32 3, ptr %1094, align 4
  store i32 4, ptr %1095, align 4
  %3047 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %3048 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1096, i32 0, i32 1
  %3049 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1096, i32 0, i32 3
  store ptr @IntArray, ptr %1096, align 8
  store ptr %3047, ptr %3048, align 8
  store i32 7, ptr %3049, align 4
  %3050 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1096)
  store i32 3, ptr %1097, align 4
  store i32 4, ptr %1098, align 4
  %3051 = getelementptr { ptr }, ptr %1087, i32 0, i32 0
  %3052 = load ptr, ptr %3051, align 8
  %3053 = insertvalue { ptr } undef, ptr %3052, 0
  %3054 = load i32, ptr %1097, align 4
  %3055 = load i32, ptr %1098, align 4
  %3056 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1096, i32 0, i32 0
  %3057 = load ptr, ptr %3056, align 8
  %3058 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3057, 0
  %3059 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1096, i32 0, i32 1
  %3060 = load ptr, ptr %3059, align 8
  %3061 = insertvalue { ptr, ptr, ptr, i32 } %3058, ptr %3060, 1
  %3062 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1096, i32 0, i32 2
  %3063 = load ptr, ptr %3062, align 8
  %3064 = insertvalue { ptr, ptr, ptr, i32 } %3061, ptr %3063, 2
  %3065 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1096, i32 0, i32 3
  %3066 = load i32, ptr %3065, align 4
  %3067 = insertvalue { ptr, ptr, ptr, i32 } %3064, i32 %3066, 3
  %3068 = getelementptr [3 x ptr], ptr %1099, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %3068, align 8
  %3069 = getelementptr [3 x ptr], ptr %1099, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %3069, align 8
  %3070 = getelementptr [3 x ptr], ptr %1099, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %3070, align 8
  %3071 = call ptr @llvm.invariant.start.p0(i64 9, ptr %1099)
  %3072 = call ptr @llvm.invariant.start.p0(i64 616, ptr %3057)
  %3073 = getelementptr ptr, ptr %3057, i32 %3066
  %3074 = getelementptr ptr, ptr %3073, i32 5
  %3075 = load ptr, ptr %3074, align 8
  %3076 = getelementptr { ptr, ptr, ptr }, ptr %1100, i32 0, i32 0
  store ptr @buffer_typ, ptr %3076, align 8
  %3077 = getelementptr { ptr, ptr, ptr }, ptr %1100, i32 0, i32 1
  store ptr @i32_typ, ptr %3077, align 8
  %3078 = getelementptr { ptr, ptr, ptr }, ptr %1100, i32 0, i32 2
  store ptr @i32_typ, ptr %3078, align 8
  %3079 = call ptr %3075({ ptr, ptr, ptr, i32 } %3067, ptr %1100)
  call void %3079({ ptr, ptr, ptr, i32 } %3067, { ptr, ptr, ptr, i32 } %3067, ptr %1099, { ptr } %3053, i32 %3054, i32 %3055)
  %3080 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1096, i32 0, i32 0
  %3081 = load ptr, ptr %3080, align 8
  %3082 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3081, 0
  %3083 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1096, i32 0, i32 1
  %3084 = load ptr, ptr %3083, align 8
  %3085 = insertvalue { ptr, ptr, ptr, i32 } %3082, ptr %3084, 1
  %3086 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1096, i32 0, i32 2
  %3087 = load ptr, ptr %3086, align 8
  %3088 = insertvalue { ptr, ptr, ptr, i32 } %3085, ptr %3087, 2
  %3089 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1096, i32 0, i32 3
  %3090 = load i32, ptr %3089, align 4
  %3091 = insertvalue { ptr, ptr, ptr, i32 } %3088, i32 %3090, 3
  %3092 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1101)
  %3093 = call ptr @llvm.invariant.start.p0(i64 616, ptr %3081)
  %3094 = getelementptr ptr, ptr %3081, i32 %3090
  %3095 = getelementptr ptr, ptr %3094, i32 24
  %3096 = load ptr, ptr %3095, align 8
  %3097 = call ptr %3096({ ptr, ptr, ptr, i32 } %3091, ptr %1102)
  %3098 = call { ptr, ptr, ptr, i32 } %3097({ ptr, ptr, ptr, i32 } %3091, { ptr, ptr, ptr, i32 } %3091, ptr %1101)
  store { ptr, ptr, ptr, i32 } %3098, ptr %1103, align 8
  %3099 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1103)
  %3100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1103, i32 0, i32 0
  %3101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1104, i32 0, i32 0
  %3102 = load ptr, ptr %3100, align 8
  store ptr %3102, ptr %3101, align 8
  %3103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1103, i32 0, i32 1
  %3104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1104, i32 0, i32 1
  %3105 = load ptr, ptr %3103, align 8
  store ptr %3105, ptr %3104, align 8
  %3106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1103, i32 0, i32 2
  %3107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1104, i32 0, i32 2
  %3108 = load ptr, ptr %3106, align 8
  store ptr %3108, ptr %3107, align 8
  %3109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1103, i32 0, i32 3
  %3110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1104, i32 0, i32 3
  %3111 = load i32, ptr %3109, align 4
  store i32 %3111, ptr %3110, align 4
  call void @set_offset(ptr %1104, ptr @IntArrayIterator)
  %3112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1104, i32 0, i32 0
  %3113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1105, i32 0, i32 0
  %3114 = load ptr, ptr %3112, align 8
  store ptr %3114, ptr %3113, align 8
  %3115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1104, i32 0, i32 1
  %3116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1105, i32 0, i32 1
  %3117 = load ptr, ptr %3115, align 8
  store ptr %3117, ptr %3116, align 8
  %3118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1104, i32 0, i32 2
  %3119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1105, i32 0, i32 2
  %3120 = load ptr, ptr %3118, align 8
  store ptr %3120, ptr %3119, align 8
  %3121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1104, i32 0, i32 3
  %3122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1105, i32 0, i32 3
  %3123 = load i32, ptr %3121, align 4
  store i32 %3123, ptr %3122, align 4
  call void @set_offset(ptr %1105, ptr @IntArrayIterator)
  %3124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1105, i32 0, i32 0
  %3125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1106, i32 0, i32 0
  %3126 = load ptr, ptr %3124, align 8
  store ptr %3126, ptr %3125, align 8
  %3127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1105, i32 0, i32 1
  %3128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1106, i32 0, i32 1
  %3129 = load ptr, ptr %3127, align 8
  store ptr %3129, ptr %3128, align 8
  %3130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1105, i32 0, i32 2
  %3131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1106, i32 0, i32 2
  %3132 = load ptr, ptr %3130, align 8
  store ptr %3132, ptr %3131, align 8
  %3133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1105, i32 0, i32 3
  %3134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1106, i32 0, i32 3
  %3135 = load i32, ptr %3133, align 4
  store i32 %3135, ptr %3134, align 4
  %3136 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1106)
  %3137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1106, i32 0, i32 0
  store ptr %3137, ptr %.reg2mem67, align 8
  %3138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1106, i32 0, i32 1
  store ptr %3138, ptr %.reg2mem65, align 8
  %3139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1106, i32 0, i32 2
  store ptr %3139, ptr %.reg2mem63, align 8
  %3140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1106, i32 0, i32 3
  store ptr %3140, ptr %.reg2mem61, align 8
  br label %3141

3141:                                             ; preds = %._crit_edge14, %3020
  %.reload68 = load ptr, ptr %.reg2mem67, align 8
  %3142 = load ptr, ptr %.reload68, align 8
  %3143 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3142, 0
  %.reload66 = load ptr, ptr %.reg2mem65, align 8
  %3144 = load ptr, ptr %.reload66, align 8
  %3145 = insertvalue { ptr, ptr, ptr, i32 } %3143, ptr %3144, 1
  %.reload64 = load ptr, ptr %.reg2mem63, align 8
  %3146 = load ptr, ptr %.reload64, align 8
  %3147 = insertvalue { ptr, ptr, ptr, i32 } %3145, ptr %3146, 2
  %.reload62 = load ptr, ptr %.reg2mem61, align 8
  %3148 = load i32, ptr %.reload62, align 4
  %3149 = insertvalue { ptr, ptr, ptr, i32 } %3147, i32 %3148, 3
  %3150 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1107)
  %3151 = call ptr @llvm.invariant.start.p0(i64 64, ptr %3142)
  %3152 = getelementptr ptr, ptr %3142, i32 %3148
  %3153 = getelementptr ptr, ptr %3152, i32 3
  %3154 = load ptr, ptr %3153, align 8
  %3155 = call ptr %3154({ ptr, ptr, ptr, i32 } %3149, ptr %1108)
  %3156 = call { ptr, i32 } %3155({ ptr, ptr, ptr, i32 } %3149, { ptr, ptr, ptr, i32 } %3149, ptr %1107)
  store ptr %1109, ptr %.reg2mem56, align 8
  %.reload60 = load ptr, ptr %.reg2mem56, align 8
  store { ptr, i32 } %3156, ptr %.reload60, align 8
  %.reload59 = load ptr, ptr %.reg2mem56, align 8
  %3157 = getelementptr { ptr, i32 }, ptr %.reload59, i32 0, i32 0
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %1110, align 4
  %3158 = load ptr, ptr %3157, align 8
  %3159 = ptrtoint ptr %3158 to i64
  %3160 = load ptr, ptr %1110, align 8
  %3161 = ptrtoint ptr %3160 to i64
  %3162 = icmp eq i64 %3159, %3161
  %3163 = icmp eq i64 %3159, 0
  %3164 = or i1 %3162, %3163
  %3165 = icmp eq i1 %3164, false
  store i1 %3165, ptr %1111, align 1
  %3166 = load i1, ptr %1111, align 1
  store i1 %3166, ptr %.reg2mem53, align 1
  %.reload55 = load i1, ptr %.reg2mem53, align 1
  br i1 %.reload55, label %3167, label %._crit_edge13

._crit_edge13:                                    ; preds = %3141
  br label %3183

3167:                                             ; preds = %3141
  %.reload58 = load ptr, ptr %.reg2mem56, align 8
  %3168 = getelementptr { ptr, i32 }, ptr %.reload58, i32 0, i32 1
  %3169 = load i32, ptr %3168, align 4
  store i32 %3169, ptr %1112, align 4
  %3170 = load i32, ptr %1112, align 4
  store i32 %3170, ptr %1113, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %1115, align 4
  %3171 = load i64, ptr %1115, align 4
  store i64 %3171, ptr %1114, align 4
  %3172 = load ptr, ptr %1114, align 8
  %3173 = insertvalue { ptr, i160 } undef, ptr %3172, 0
  %3174 = load i160, ptr %1113, align 4
  %3175 = insertvalue { ptr, i160 } %3173, i160 %3174, 1
  %3176 = getelementptr [1 x ptr], ptr %1116, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %3176, align 8
  %3177 = call ptr @llvm.invariant.start.p0(i64 1, ptr %1116)
  %3178 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %3179 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %3180 = getelementptr { ptr }, ptr %1117, i32 0, i32 0
  store ptr %3172, ptr %3180, align 8
  %3181 = call ptr %3179(ptr %1117)
  call void %3181(ptr %1116, { ptr, i160 } %3175)
  %3182 = load i32, ptr %1112, align 4
  %.reload57 = load ptr, ptr %.reg2mem56, align 8
  store i32 %3182, ptr %.reload57, align 4
  br label %3183

3183:                                             ; preds = %3167, %._crit_edge13
  %.reload54 = load i1, ptr %.reg2mem53, align 1
  br i1 %.reload54, label %._crit_edge14, label %3184

._crit_edge14:                                    ; preds = %3183
  br label %3141

3184:                                             ; preds = %3183
  store i8 3, ptr %1118, align 1
  %3185 = load i8, ptr %1118, align 1
  store i8 %3185, ptr %1119, align 1
  store i64 ptrtoint (ptr @i8_typ to i64), ptr %1121, align 4
  %3186 = load i64, ptr %1121, align 4
  store i64 %3186, ptr %1120, align 4
  %3187 = load ptr, ptr %1120, align 8
  %3188 = insertvalue { ptr, i160 } undef, ptr %3187, 0
  %3189 = load i160, ptr %1119, align 4
  %3190 = insertvalue { ptr, i160 } %3188, i160 %3189, 1
  %3191 = getelementptr [1 x ptr], ptr %1122, i32 0, i32 0
  store ptr @_parameterization_Ptri8, ptr %3191, align 8
  %3192 = call ptr @llvm.invariant.start.p0(i64 1, ptr %1122)
  %3193 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %3194 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %3195 = getelementptr { ptr }, ptr %1123, i32 0, i32 0
  store ptr %3187, ptr %3195, align 8
  %3196 = call ptr %3194(ptr %1123)
  call void %3196(ptr %1122, { ptr, i160 } %3190)
  store i32 6, ptr %1124, align 4
  %3197 = load i32, ptr %1124, align 4
  %3198 = getelementptr i8, ptr null, i32 %3197
  %3199 = ptrtoint ptr %3198 to i64
  %3200 = call ptr @bump_malloc(i64 %3199)
  store ptr %3200, ptr %1125, align 8
  %3201 = getelementptr { ptr }, ptr %1125, i32 0, i32 0
  %3202 = getelementptr { ptr }, ptr %1126, i32 0, i32 0
  %3203 = load ptr, ptr %3201, align 8
  store ptr %3203, ptr %3202, align 8
  %3204 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1126)
  store i32 0, ptr %1127, align 4
  %3205 = load ptr, ptr %1126, align 8
  %3206 = load i32, ptr %1127, align 4
  %3207 = getelementptr [5 x i8], ptr null, i32 %3206
  %3208 = ptrtoint ptr %3207 to i64
  %3209 = getelementptr i8, ptr %3205, i64 %3208
  %3210 = load i40, ptr @uzgha_boom, align 4
  store i40 %3210, ptr %3209, align 4
  store i32 5, ptr %1128, align 4
  store i32 6, ptr %1129, align 4
  %3211 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %3212 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1130, i32 0, i32 1
  %3213 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1130, i32 0, i32 3
  store ptr @String, ptr %1130, align 8
  store ptr %3211, ptr %3212, align 8
  store i32 7, ptr %3213, align 4
  %3214 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1130)
  store i32 5, ptr %1131, align 4
  store i32 6, ptr %1132, align 4
  %3215 = getelementptr { ptr }, ptr %1126, i32 0, i32 0
  %3216 = load ptr, ptr %3215, align 8
  %3217 = insertvalue { ptr } undef, ptr %3216, 0
  %3218 = load i32, ptr %1131, align 4
  %3219 = load i32, ptr %1132, align 4
  %3220 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1130, i32 0, i32 0
  %3221 = load ptr, ptr %3220, align 8
  %3222 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3221, 0
  %3223 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1130, i32 0, i32 1
  %3224 = load ptr, ptr %3223, align 8
  %3225 = insertvalue { ptr, ptr, ptr, i32 } %3222, ptr %3224, 1
  %3226 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1130, i32 0, i32 2
  %3227 = load ptr, ptr %3226, align 8
  %3228 = insertvalue { ptr, ptr, ptr, i32 } %3225, ptr %3227, 2
  %3229 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1130, i32 0, i32 3
  %3230 = load i32, ptr %3229, align 4
  %3231 = insertvalue { ptr, ptr, ptr, i32 } %3228, i32 %3230, 3
  %3232 = getelementptr [3 x ptr], ptr %1133, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %3232, align 8
  %3233 = getelementptr [3 x ptr], ptr %1133, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %3233, align 8
  %3234 = getelementptr [3 x ptr], ptr %1133, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %3234, align 8
  %3235 = call ptr @llvm.invariant.start.p0(i64 9, ptr %1133)
  %3236 = call ptr @llvm.invariant.start.p0(i64 280, ptr %3221)
  %3237 = getelementptr ptr, ptr %3221, i32 %3230
  %3238 = getelementptr ptr, ptr %3237, i32 4
  %3239 = load ptr, ptr %3238, align 8
  %3240 = getelementptr { ptr, ptr, ptr }, ptr %1134, i32 0, i32 0
  store ptr @buffer_typ, ptr %3240, align 8
  %3241 = getelementptr { ptr, ptr, ptr }, ptr %1134, i32 0, i32 1
  store ptr @i32_typ, ptr %3241, align 8
  %3242 = getelementptr { ptr, ptr, ptr }, ptr %1134, i32 0, i32 2
  store ptr @i32_typ, ptr %3242, align 8
  %3243 = call ptr %3239({ ptr, ptr, ptr, i32 } %3231, ptr %1134)
  call void %3243({ ptr, ptr, ptr, i32 } %3231, { ptr, ptr, ptr, i32 } %3231, ptr %1133, { ptr } %3217, i32 %3218, i32 %3219)
  %3244 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1130, i32 0, i32 0
  %3245 = load ptr, ptr %3244, align 8
  %3246 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3245, 0
  %3247 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1130, i32 0, i32 1
  %3248 = load ptr, ptr %3247, align 8
  %3249 = insertvalue { ptr, ptr, ptr, i32 } %3246, ptr %3248, 1
  %3250 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1130, i32 0, i32 2
  %3251 = load ptr, ptr %3250, align 8
  %3252 = insertvalue { ptr, ptr, ptr, i32 } %3249, ptr %3251, 2
  %3253 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1130, i32 0, i32 3
  %3254 = load i32, ptr %3253, align 4
  %3255 = insertvalue { ptr, ptr, ptr, i32 } %3252, i32 %3254, 3
  %3256 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1135)
  %3257 = call ptr @llvm.invariant.start.p0(i64 280, ptr %3245)
  %3258 = getelementptr ptr, ptr %3245, i32 %3254
  %3259 = getelementptr ptr, ptr %3258, i32 15
  %3260 = load ptr, ptr %3259, align 8
  %3261 = call ptr %3260({ ptr, ptr, ptr, i32 } %3255, ptr %1136)
  %3262 = call { ptr, ptr, ptr, i32 } %3261({ ptr, ptr, ptr, i32 } %3255, { ptr, ptr, ptr, i32 } %3255, ptr %1135)
  store { ptr, ptr, ptr, i32 } %3262, ptr %1137, align 8
  %3263 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1137)
  %3264 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1137, i32 0, i32 0
  %3265 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1138, i32 0, i32 0
  %3266 = load ptr, ptr %3264, align 8
  store ptr %3266, ptr %3265, align 8
  %3267 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1137, i32 0, i32 1
  %3268 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1138, i32 0, i32 1
  %3269 = load ptr, ptr %3267, align 8
  store ptr %3269, ptr %3268, align 8
  %3270 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1137, i32 0, i32 2
  %3271 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1138, i32 0, i32 2
  %3272 = load ptr, ptr %3270, align 8
  store ptr %3272, ptr %3271, align 8
  %3273 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1137, i32 0, i32 3
  %3274 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1138, i32 0, i32 3
  %3275 = load i32, ptr %3273, align 4
  store i32 %3275, ptr %3274, align 4
  call void @set_offset(ptr %1138, ptr @StringIterator)
  %3276 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1138, i32 0, i32 0
  %3277 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1139, i32 0, i32 0
  %3278 = load ptr, ptr %3276, align 8
  store ptr %3278, ptr %3277, align 8
  %3279 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1138, i32 0, i32 1
  %3280 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1139, i32 0, i32 1
  %3281 = load ptr, ptr %3279, align 8
  store ptr %3281, ptr %3280, align 8
  %3282 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1138, i32 0, i32 2
  %3283 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1139, i32 0, i32 2
  %3284 = load ptr, ptr %3282, align 8
  store ptr %3284, ptr %3283, align 8
  %3285 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1138, i32 0, i32 3
  %3286 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1139, i32 0, i32 3
  %3287 = load i32, ptr %3285, align 4
  store i32 %3287, ptr %3286, align 4
  call void @set_offset(ptr %1139, ptr @StringIterator)
  %3288 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1139, i32 0, i32 0
  %3289 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1140, i32 0, i32 0
  %3290 = load ptr, ptr %3288, align 8
  store ptr %3290, ptr %3289, align 8
  %3291 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1139, i32 0, i32 1
  %3292 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1140, i32 0, i32 1
  %3293 = load ptr, ptr %3291, align 8
  store ptr %3293, ptr %3292, align 8
  %3294 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1139, i32 0, i32 2
  %3295 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1140, i32 0, i32 2
  %3296 = load ptr, ptr %3294, align 8
  store ptr %3296, ptr %3295, align 8
  %3297 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1139, i32 0, i32 3
  %3298 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1140, i32 0, i32 3
  %3299 = load i32, ptr %3297, align 4
  store i32 %3299, ptr %3298, align 4
  %3300 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1140)
  %3301 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1140, i32 0, i32 0
  store ptr %3301, ptr %.reg2mem51, align 8
  %3302 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1140, i32 0, i32 1
  store ptr %3302, ptr %.reg2mem49, align 8
  %3303 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1140, i32 0, i32 2
  store ptr %3303, ptr %.reg2mem47, align 8
  %3304 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1140, i32 0, i32 3
  store ptr %3304, ptr %.reg2mem45, align 8
  br label %3305

3305:                                             ; preds = %._crit_edge16, %3184
  %.reload52 = load ptr, ptr %.reg2mem51, align 8
  %3306 = load ptr, ptr %.reload52, align 8
  %3307 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3306, 0
  %.reload50 = load ptr, ptr %.reg2mem49, align 8
  %3308 = load ptr, ptr %.reload50, align 8
  %3309 = insertvalue { ptr, ptr, ptr, i32 } %3307, ptr %3308, 1
  %.reload48 = load ptr, ptr %.reg2mem47, align 8
  %3310 = load ptr, ptr %.reload48, align 8
  %3311 = insertvalue { ptr, ptr, ptr, i32 } %3309, ptr %3310, 2
  %.reload46 = load ptr, ptr %.reg2mem45, align 8
  %3312 = load i32, ptr %.reload46, align 4
  %3313 = insertvalue { ptr, ptr, ptr, i32 } %3311, i32 %3312, 3
  %3314 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1141)
  %3315 = call ptr @llvm.invariant.start.p0(i64 48, ptr %3306)
  %3316 = getelementptr ptr, ptr %3306, i32 %3312
  %3317 = getelementptr ptr, ptr %3316, i32 3
  %3318 = load ptr, ptr %3317, align 8
  %3319 = call ptr %3318({ ptr, ptr, ptr, i32 } %3313, ptr %1142)
  %3320 = call { ptr, i160 } %3319({ ptr, ptr, ptr, i32 } %3313, { ptr, ptr, ptr, i32 } %3313, ptr %1141)
  store ptr %1143, ptr %.reg2mem36, align 8
  %.reload44 = load ptr, ptr %.reg2mem36, align 8
  store { ptr, i160 } %3320, ptr %.reload44, align 8
  %.reload43 = load ptr, ptr %.reg2mem36, align 8
  %3321 = getelementptr { ptr, i160 }, ptr %.reload43, i32 0, i32 0
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %1144, align 4
  %3322 = load ptr, ptr %3321, align 8
  %3323 = ptrtoint ptr %3322 to i64
  %3324 = load ptr, ptr %1144, align 8
  %3325 = ptrtoint ptr %3324 to i64
  %3326 = icmp eq i64 %3323, %3325
  %3327 = icmp eq i64 %3323, 0
  %3328 = or i1 %3326, %3327
  %3329 = icmp eq i1 %3328, false
  store i1 %3329, ptr %1145, align 1
  %3330 = load i1, ptr %1145, align 1
  store i1 %3330, ptr %.reg2mem33, align 1
  %.reload35 = load i1, ptr %.reg2mem33, align 1
  br i1 %.reload35, label %3331, label %._crit_edge15

._crit_edge15:                                    ; preds = %3305
  br label %3374

3331:                                             ; preds = %3305
  %.reload42 = load ptr, ptr %.reg2mem36, align 8
  %3332 = getelementptr { ptr, i160 }, ptr %.reload42, i32 0, i32 0
  %3333 = getelementptr { ptr, i160 }, ptr %1146, i32 0, i32 0
  %3334 = load ptr, ptr %3332, align 8
  store ptr %3334, ptr %3333, align 8
  %.reload41 = load ptr, ptr %.reg2mem36, align 8
  %3335 = getelementptr { ptr, i160 }, ptr %.reload41, i32 0, i32 1
  %3336 = getelementptr { ptr, i160 }, ptr %1146, i32 0, i32 1
  %3337 = load i160, ptr %3335, align 4
  store i160 %3337, ptr %3336, align 4
  call void @set_offset(ptr %1146, ptr @Character)
  %3338 = getelementptr { ptr, i160 }, ptr %1146, i32 0, i32 0
  %3339 = load ptr, ptr %3338, align 8
  %3340 = insertvalue { ptr, i160 } undef, ptr %3339, 0
  %3341 = getelementptr { ptr, i160 }, ptr %1146, i32 0, i32 1
  %3342 = load i160, ptr %3341, align 4
  %3343 = insertvalue { ptr, i160 } %3340, i160 %3342, 1
  %3344 = getelementptr [1 x ptr], ptr %1147, i32 0, i32 0
  store ptr @_parameterization_Character, ptr %3344, align 8
  %3345 = call ptr @llvm.invariant.start.p0(i64 1, ptr %1147)
  %3346 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %3347 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %3348 = getelementptr { ptr }, ptr %1148, i32 0, i32 0
  store ptr %3339, ptr %3348, align 8
  %3349 = call ptr %3347(ptr %1148)
  call void %3349(ptr %1147, { ptr, i160 } %3343)
  %3350 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1146, i32 0, i32 0
  %3351 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1149, i32 0, i32 0
  %3352 = load ptr, ptr %3350, align 8
  store ptr %3352, ptr %3351, align 8
  %3353 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1146, i32 0, i32 1
  %3354 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1149, i32 0, i32 1
  %3355 = load ptr, ptr %3353, align 8
  store ptr %3355, ptr %3354, align 8
  %3356 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1146, i32 0, i32 2
  %3357 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1149, i32 0, i32 2
  %3358 = load ptr, ptr %3356, align 8
  store ptr %3358, ptr %3357, align 8
  %3359 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1146, i32 0, i32 3
  %3360 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1149, i32 0, i32 3
  %3361 = load i32, ptr %3359, align 4
  store i32 %3361, ptr %3360, align 4
  call void @set_offset(ptr %1149, ptr @Character)
  %3362 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1149, i32 0, i32 0
  %.reload40 = load ptr, ptr %.reg2mem36, align 8
  %3363 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload40, i32 0, i32 0
  %3364 = load ptr, ptr %3362, align 8
  store ptr %3364, ptr %3363, align 8
  %3365 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1149, i32 0, i32 1
  %.reload39 = load ptr, ptr %.reg2mem36, align 8
  %3366 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload39, i32 0, i32 1
  %3367 = load ptr, ptr %3365, align 8
  store ptr %3367, ptr %3366, align 8
  %3368 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1149, i32 0, i32 2
  %.reload38 = load ptr, ptr %.reg2mem36, align 8
  %3369 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload38, i32 0, i32 2
  %3370 = load ptr, ptr %3368, align 8
  store ptr %3370, ptr %3369, align 8
  %3371 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1149, i32 0, i32 3
  %.reload37 = load ptr, ptr %.reg2mem36, align 8
  %3372 = getelementptr { ptr, ptr, ptr, i32 }, ptr %.reload37, i32 0, i32 3
  %3373 = load i32, ptr %3371, align 4
  store i32 %3373, ptr %3372, align 4
  br label %3374

3374:                                             ; preds = %3331, %._crit_edge15
  %.reload34 = load i1, ptr %.reg2mem33, align 1
  br i1 %.reload34, label %._crit_edge16, label %3375

._crit_edge16:                                    ; preds = %3374
  br label %3305

3375:                                             ; preds = %3374
  store i32 4, ptr %1150, align 4
  %3376 = load i32, ptr %1150, align 4
  %3377 = getelementptr i32, ptr null, i32 %3376
  %3378 = ptrtoint ptr %3377 to i64
  %3379 = call ptr @bump_malloc(i64 %3378)
  store ptr %3379, ptr %1151, align 8
  %3380 = getelementptr { ptr }, ptr %1151, i32 0, i32 0
  %3381 = getelementptr { ptr }, ptr %1152, i32 0, i32 0
  %3382 = load ptr, ptr %3380, align 8
  store ptr %3382, ptr %3381, align 8
  %3383 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1152)
  store i32 1, ptr %1153, align 4
  store i32 0, ptr %1154, align 4
  %3384 = load ptr, ptr %1152, align 8
  %3385 = load i32, ptr %1154, align 4
  %3386 = getelementptr i32, ptr null, i32 %3385
  %3387 = ptrtoint ptr %3386 to i64
  %3388 = getelementptr i8, ptr %3384, i64 %3387
  %3389 = load i32, ptr %1153, align 4
  store i32 %3389, ptr %3388, align 4
  store i32 2, ptr %1155, align 4
  store i32 1, ptr %1156, align 4
  %3390 = load ptr, ptr %1152, align 8
  %3391 = load i32, ptr %1156, align 4
  %3392 = getelementptr i32, ptr null, i32 %3391
  %3393 = ptrtoint ptr %3392 to i64
  %3394 = getelementptr i8, ptr %3390, i64 %3393
  %3395 = load i32, ptr %1155, align 4
  store i32 %3395, ptr %3394, align 4
  store i32 3, ptr %1157, align 4
  store i32 2, ptr %1158, align 4
  %3396 = load ptr, ptr %1152, align 8
  %3397 = load i32, ptr %1158, align 4
  %3398 = getelementptr i32, ptr null, i32 %3397
  %3399 = ptrtoint ptr %3398 to i64
  %3400 = getelementptr i8, ptr %3396, i64 %3399
  %3401 = load i32, ptr %1157, align 4
  store i32 %3401, ptr %3400, align 4
  store i32 3, ptr %1159, align 4
  store i32 4, ptr %1160, align 4
  %3402 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %3403 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1161, i32 0, i32 1
  %3404 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1161, i32 0, i32 3
  store ptr @IntArray, ptr %1161, align 8
  store ptr %3402, ptr %3403, align 8
  store i32 7, ptr %3404, align 4
  %3405 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1161)
  store i32 3, ptr %1162, align 4
  store i32 4, ptr %1163, align 4
  %3406 = getelementptr { ptr }, ptr %1152, i32 0, i32 0
  %3407 = load ptr, ptr %3406, align 8
  %3408 = insertvalue { ptr } undef, ptr %3407, 0
  %3409 = load i32, ptr %1162, align 4
  %3410 = load i32, ptr %1163, align 4
  %3411 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1161, i32 0, i32 0
  %3412 = load ptr, ptr %3411, align 8
  %3413 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3412, 0
  %3414 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1161, i32 0, i32 1
  %3415 = load ptr, ptr %3414, align 8
  %3416 = insertvalue { ptr, ptr, ptr, i32 } %3413, ptr %3415, 1
  %3417 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1161, i32 0, i32 2
  %3418 = load ptr, ptr %3417, align 8
  %3419 = insertvalue { ptr, ptr, ptr, i32 } %3416, ptr %3418, 2
  %3420 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1161, i32 0, i32 3
  %3421 = load i32, ptr %3420, align 4
  %3422 = insertvalue { ptr, ptr, ptr, i32 } %3419, i32 %3421, 3
  %3423 = getelementptr [3 x ptr], ptr %1164, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %3423, align 8
  %3424 = getelementptr [3 x ptr], ptr %1164, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %3424, align 8
  %3425 = getelementptr [3 x ptr], ptr %1164, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %3425, align 8
  %3426 = call ptr @llvm.invariant.start.p0(i64 9, ptr %1164)
  %3427 = call ptr @llvm.invariant.start.p0(i64 616, ptr %3412)
  %3428 = getelementptr ptr, ptr %3412, i32 %3421
  %3429 = getelementptr ptr, ptr %3428, i32 5
  %3430 = load ptr, ptr %3429, align 8
  %3431 = getelementptr { ptr, ptr, ptr }, ptr %1165, i32 0, i32 0
  store ptr @buffer_typ, ptr %3431, align 8
  %3432 = getelementptr { ptr, ptr, ptr }, ptr %1165, i32 0, i32 1
  store ptr @i32_typ, ptr %3432, align 8
  %3433 = getelementptr { ptr, ptr, ptr }, ptr %1165, i32 0, i32 2
  store ptr @i32_typ, ptr %3433, align 8
  %3434 = call ptr %3430({ ptr, ptr, ptr, i32 } %3422, ptr %1165)
  call void %3434({ ptr, ptr, ptr, i32 } %3422, { ptr, ptr, ptr, i32 } %3422, ptr %1164, { ptr } %3408, i32 %3409, i32 %3410)
  %3435 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1161, i32 0, i32 0
  %3436 = load ptr, ptr %3435, align 8
  %3437 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3436, 0
  %3438 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1161, i32 0, i32 1
  %3439 = load ptr, ptr %3438, align 8
  %3440 = insertvalue { ptr, ptr, ptr, i32 } %3437, ptr %3439, 1
  %3441 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1161, i32 0, i32 2
  %3442 = load ptr, ptr %3441, align 8
  %3443 = insertvalue { ptr, ptr, ptr, i32 } %3440, ptr %3442, 2
  %3444 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1161, i32 0, i32 3
  %3445 = load i32, ptr %3444, align 4
  %3446 = insertvalue { ptr, ptr, ptr, i32 } %3443, i32 %3445, 3
  %3447 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1166)
  %3448 = call ptr @llvm.invariant.start.p0(i64 616, ptr %3436)
  %3449 = getelementptr ptr, ptr %3436, i32 %3445
  %3450 = getelementptr ptr, ptr %3449, i32 25
  %3451 = load ptr, ptr %3450, align 8
  %3452 = call ptr %3451({ ptr, ptr, ptr, i32 } %3446, ptr %1167)
  %3453 = call { ptr, ptr, ptr, i32 } %3452({ ptr, ptr, ptr, i32 } %3446, { ptr, ptr, ptr, i32 } %3446, ptr %1166)
  store { ptr, ptr, ptr, i32 } %3453, ptr %1168, align 8
  %3454 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1168)
  %3455 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1168, i32 0, i32 0
  %3456 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1169, i32 0, i32 0
  %3457 = load ptr, ptr %3455, align 8
  store ptr %3457, ptr %3456, align 8
  %3458 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1168, i32 0, i32 1
  %3459 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1169, i32 0, i32 1
  %3460 = load ptr, ptr %3458, align 8
  store ptr %3460, ptr %3459, align 8
  %3461 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1168, i32 0, i32 2
  %3462 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1169, i32 0, i32 2
  %3463 = load ptr, ptr %3461, align 8
  store ptr %3463, ptr %3462, align 8
  %3464 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1168, i32 0, i32 3
  %3465 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1169, i32 0, i32 3
  %3466 = load i32, ptr %3464, align 4
  store i32 %3466, ptr %3465, align 4
  call void @set_offset(ptr %1169, ptr @String)
  %3467 = getelementptr { ptr, i160 }, ptr %1169, i32 0, i32 0
  %3468 = load ptr, ptr %3467, align 8
  %3469 = insertvalue { ptr, i160 } undef, ptr %3468, 0
  %3470 = getelementptr { ptr, i160 }, ptr %1169, i32 0, i32 1
  %3471 = load i160, ptr %3470, align 4
  %3472 = insertvalue { ptr, i160 } %3469, i160 %3471, 1
  %3473 = getelementptr [1 x ptr], ptr %1170, i32 0, i32 0
  store ptr @_parameterization_String, ptr %3473, align 8
  %3474 = call ptr @llvm.invariant.start.p0(i64 1, ptr %1170)
  %3475 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %3476 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %3477 = getelementptr { ptr }, ptr %1171, i32 0, i32 0
  store ptr %3468, ptr %3477, align 8
  %3478 = call ptr %3476(ptr %1171)
  call void %3478(ptr %1170, { ptr, i160 } %3472)
  store i32 77, ptr %1172, align 4
  %3479 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ i32 }, ptr null, i32 1) to i64))
  %3480 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1173, i32 0, i32 1
  %3481 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1173, i32 0, i32 3
  store ptr @Integer2, ptr %1173, align 8
  store ptr %3479, ptr %3480, align 8
  store i32 7, ptr %3481, align 4
  %3482 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1173)
  store i32 77, ptr %1174, align 4
  %3483 = load i32, ptr %1174, align 4
  %3484 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1173, i32 0, i32 0
  %3485 = load ptr, ptr %3484, align 8
  %3486 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3485, 0
  %3487 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1173, i32 0, i32 1
  %3488 = load ptr, ptr %3487, align 8
  %3489 = insertvalue { ptr, ptr, ptr, i32 } %3486, ptr %3488, 1
  %3490 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1173, i32 0, i32 2
  %3491 = load ptr, ptr %3490, align 8
  %3492 = insertvalue { ptr, ptr, ptr, i32 } %3489, ptr %3491, 2
  %3493 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1173, i32 0, i32 3
  %3494 = load i32, ptr %3493, align 4
  %3495 = insertvalue { ptr, ptr, ptr, i32 } %3492, i32 %3494, 3
  %3496 = getelementptr [1 x ptr], ptr %1175, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %3496, align 8
  %3497 = call ptr @llvm.invariant.start.p0(i64 1, ptr %1175)
  %3498 = call ptr @llvm.invariant.start.p0(i64 320, ptr %3485)
  %3499 = getelementptr ptr, ptr %3485, i32 %3494
  %3500 = getelementptr ptr, ptr %3499, i32 2
  %3501 = load ptr, ptr %3500, align 8
  %3502 = getelementptr { ptr }, ptr %1176, i32 0, i32 0
  store ptr @i32_typ, ptr %3502, align 8
  %3503 = call ptr %3501({ ptr, ptr, ptr, i32 } %3495, ptr %1176)
  call void %3503({ ptr, ptr, ptr, i32 } %3495, { ptr, ptr, ptr, i32 } %3495, ptr %1175, i32 %3483)
  %3504 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1173, i32 0, i32 0
  %3505 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1177, i32 0, i32 0
  %3506 = load ptr, ptr %3504, align 8
  store ptr %3506, ptr %3505, align 8
  %3507 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1173, i32 0, i32 1
  %3508 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1177, i32 0, i32 1
  %3509 = load ptr, ptr %3507, align 8
  store ptr %3509, ptr %3508, align 8
  %3510 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1173, i32 0, i32 2
  %3511 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1177, i32 0, i32 2
  %3512 = load ptr, ptr %3510, align 8
  store ptr %3512, ptr %3511, align 8
  %3513 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1173, i32 0, i32 3
  %3514 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1177, i32 0, i32 3
  %3515 = load i32, ptr %3513, align 4
  store i32 %3515, ptr %3514, align 4
  call void @set_offset(ptr %1177, ptr @Integer2)
  %3516 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1177, i32 0, i32 0
  %3517 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1178, i32 0, i32 0
  %3518 = load ptr, ptr %3516, align 8
  store ptr %3518, ptr %3517, align 8
  %3519 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1177, i32 0, i32 1
  %3520 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1178, i32 0, i32 1
  %3521 = load ptr, ptr %3519, align 8
  store ptr %3521, ptr %3520, align 8
  %3522 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1177, i32 0, i32 2
  %3523 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1178, i32 0, i32 2
  %3524 = load ptr, ptr %3522, align 8
  store ptr %3524, ptr %3523, align 8
  %3525 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1177, i32 0, i32 3
  %3526 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1178, i32 0, i32 3
  %3527 = load i32, ptr %3525, align 4
  store i32 %3527, ptr %3526, align 4
  %3528 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1178)
  %3529 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1178, i32 0, i32 0
  %3530 = load ptr, ptr %3529, align 8
  %3531 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3530, 0
  %3532 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1178, i32 0, i32 1
  %3533 = load ptr, ptr %3532, align 8
  %3534 = insertvalue { ptr, ptr, ptr, i32 } %3531, ptr %3533, 1
  %3535 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1178, i32 0, i32 2
  %3536 = load ptr, ptr %3535, align 8
  %3537 = insertvalue { ptr, ptr, ptr, i32 } %3534, ptr %3536, 2
  %3538 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1178, i32 0, i32 3
  %3539 = load i32, ptr %3538, align 4
  %3540 = insertvalue { ptr, ptr, ptr, i32 } %3537, i32 %3539, 3
  %3541 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1179)
  %3542 = call ptr @llvm.invariant.start.p0(i64 320, ptr %3530)
  %3543 = getelementptr ptr, ptr %3530, i32 %3539
  %3544 = getelementptr ptr, ptr %3543, i32 7
  %3545 = load ptr, ptr %3544, align 8
  %3546 = call ptr %3545({ ptr, ptr, ptr, i32 } %3540, ptr %1180)
  call void %3546({ ptr, ptr, ptr, i32 } %3540, { ptr, ptr, ptr, i32 } %3540, ptr %1179)
  %3547 = getelementptr { ptr, i160 }, ptr %1178, i32 0, i32 0
  %3548 = load ptr, ptr %3547, align 8
  %3549 = insertvalue { ptr, i160 } undef, ptr %3548, 0
  %3550 = getelementptr { ptr, i160 }, ptr %1178, i32 0, i32 1
  %3551 = load i160, ptr %3550, align 4
  %3552 = insertvalue { ptr, i160 } %3549, i160 %3551, 1
  %3553 = getelementptr [1 x ptr], ptr %1181, i32 0, i32 0
  store ptr @_parameterization_Integer2, ptr %3553, align 8
  %3554 = call ptr @llvm.invariant.start.p0(i64 1, ptr %1181)
  %3555 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %3556 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %3557 = getelementptr { ptr }, ptr %1182, i32 0, i32 0
  store ptr %3548, ptr %3557, align 8
  %3558 = call ptr %3556(ptr %1182)
  call void %3558(ptr %1181, { ptr, i160 } %3552)
  %3559 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1178, i32 0, i32 0
  %3560 = load ptr, ptr %3559, align 8
  %3561 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3560, 0
  %3562 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1178, i32 0, i32 1
  %3563 = load ptr, ptr %3562, align 8
  %3564 = insertvalue { ptr, ptr, ptr, i32 } %3561, ptr %3563, 1
  %3565 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1178, i32 0, i32 2
  %3566 = load ptr, ptr %3565, align 8
  %3567 = insertvalue { ptr, ptr, ptr, i32 } %3564, ptr %3566, 2
  %3568 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1178, i32 0, i32 3
  %3569 = load i32, ptr %3568, align 4
  %3570 = insertvalue { ptr, ptr, ptr, i32 } %3567, i32 %3569, 3
  %3571 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1183)
  %3572 = call ptr @llvm.invariant.start.p0(i64 320, ptr %3560)
  %3573 = getelementptr ptr, ptr %3560, i32 %3569
  %3574 = getelementptr ptr, ptr %3573, i32 8
  %3575 = load ptr, ptr %3574, align 8
  %3576 = call ptr %3575({ ptr, ptr, ptr, i32 } %3570, ptr %1184)
  call void %3576({ ptr, ptr, ptr, i32 } %3570, { ptr, ptr, ptr, i32 } %3570, ptr %1183)
  store i32 5, ptr %1185, align 4
  %3577 = load i32, ptr %1185, align 4
  store i32 0, ptr %1186, align 4
  store i32 25, ptr %1187, align 4
  %3578 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ i32, i32, i32 }, ptr null, i32 1) to i64))
  %3579 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1188, i32 0, i32 1
  %3580 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1188, i32 0, i32 3
  store ptr @Range, ptr %1188, align 8
  store ptr %3578, ptr %3579, align 8
  store i32 7, ptr %3580, align 4
  %3581 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1188)
  store i32 0, ptr %1189, align 4
  store i32 25, ptr %1190, align 4
  %3582 = load i32, ptr %1189, align 4
  %3583 = load i32, ptr %1190, align 4
  %3584 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1188, i32 0, i32 0
  %3585 = load ptr, ptr %3584, align 8
  %3586 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3585, 0
  %3587 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1188, i32 0, i32 1
  %3588 = load ptr, ptr %3587, align 8
  %3589 = insertvalue { ptr, ptr, ptr, i32 } %3586, ptr %3588, 1
  %3590 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1188, i32 0, i32 2
  %3591 = load ptr, ptr %3590, align 8
  %3592 = insertvalue { ptr, ptr, ptr, i32 } %3589, ptr %3591, 2
  %3593 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1188, i32 0, i32 3
  %3594 = load i32, ptr %3593, align 4
  %3595 = insertvalue { ptr, ptr, ptr, i32 } %3592, i32 %3594, 3
  %3596 = getelementptr [2 x ptr], ptr %1191, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %3596, align 8
  %3597 = getelementptr [2 x ptr], ptr %1191, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %3597, align 8
  %3598 = call ptr @llvm.invariant.start.p0(i64 4, ptr %1191)
  %3599 = call ptr @llvm.invariant.start.p0(i64 456, ptr %3585)
  %3600 = getelementptr ptr, ptr %3585, i32 %3594
  %3601 = getelementptr ptr, ptr %3600, i32 4
  %3602 = load ptr, ptr %3601, align 8
  %3603 = getelementptr { ptr, ptr }, ptr %1192, i32 0, i32 0
  store ptr @i32_typ, ptr %3603, align 8
  %3604 = getelementptr { ptr, ptr }, ptr %1192, i32 0, i32 1
  store ptr @i32_typ, ptr %3604, align 8
  %3605 = call ptr %3602({ ptr, ptr, ptr, i32 } %3595, ptr %1192)
  call void %3605({ ptr, ptr, ptr, i32 } %3595, { ptr, ptr, ptr, i32 } %3595, ptr %1191, i32 %3582, i32 %3583)
  %3606 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1188, i32 0, i32 0
  %3607 = load ptr, ptr %3606, align 8
  %3608 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3607, 0
  %3609 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1188, i32 0, i32 1
  %3610 = load ptr, ptr %3609, align 8
  %3611 = insertvalue { ptr, ptr, ptr, i32 } %3608, ptr %3610, 1
  %3612 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1188, i32 0, i32 2
  %3613 = load ptr, ptr %3612, align 8
  %3614 = insertvalue { ptr, ptr, ptr, i32 } %3611, ptr %3613, 2
  %3615 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1188, i32 0, i32 3
  %3616 = load i32, ptr %3615, align 4
  %3617 = insertvalue { ptr, ptr, ptr, i32 } %3614, i32 %3616, 3
  %3618 = getelementptr [1 x ptr], ptr %1193, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %3618, align 8
  %3619 = call ptr @llvm.invariant.start.p0(i64 1, ptr %1193)
  %3620 = call ptr @llvm.invariant.start.p0(i64 456, ptr %3607)
  %3621 = getelementptr ptr, ptr %3607, i32 %3616
  %3622 = getelementptr ptr, ptr %3621, i32 5
  %3623 = load ptr, ptr %3622, align 8
  %3624 = getelementptr { ptr }, ptr %1194, i32 0, i32 0
  store ptr @i32_typ, ptr %3624, align 8
  %3625 = call ptr %3623({ ptr, ptr, ptr, i32 } %3617, ptr %1194)
  %3626 = call { ptr, ptr, ptr, i32 } %3625({ ptr, ptr, ptr, i32 } %3617, { ptr, ptr, ptr, i32 } %3617, ptr %1193, i32 %3577)
  store { ptr, ptr, ptr, i32 } %3626, ptr %1195, align 8
  %3627 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1195)
  %3628 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1195, i32 0, i32 0
  %3629 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1196, i32 0, i32 0
  %3630 = load ptr, ptr %3628, align 8
  store ptr %3630, ptr %3629, align 8
  %3631 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1195, i32 0, i32 1
  %3632 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1196, i32 0, i32 1
  %3633 = load ptr, ptr %3631, align 8
  store ptr %3633, ptr %3632, align 8
  %3634 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1195, i32 0, i32 2
  %3635 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1196, i32 0, i32 2
  %3636 = load ptr, ptr %3634, align 8
  store ptr %3636, ptr %3635, align 8
  %3637 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1195, i32 0, i32 3
  %3638 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1196, i32 0, i32 3
  %3639 = load i32, ptr %3637, align 4
  store i32 %3639, ptr %3638, align 4
  call void @set_offset(ptr %1196, ptr @Range)
  %3640 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1196, i32 0, i32 0
  %3641 = load ptr, ptr %3640, align 8
  %3642 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3641, 0
  %3643 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1196, i32 0, i32 1
  %3644 = load ptr, ptr %3643, align 8
  %3645 = insertvalue { ptr, ptr, ptr, i32 } %3642, ptr %3644, 1
  %3646 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1196, i32 0, i32 2
  %3647 = load ptr, ptr %3646, align 8
  %3648 = insertvalue { ptr, ptr, ptr, i32 } %3645, ptr %3647, 2
  %3649 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1196, i32 0, i32 3
  %3650 = load i32, ptr %3649, align 4
  %3651 = insertvalue { ptr, ptr, ptr, i32 } %3648, i32 %3650, 3
  %3652 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1197)
  %3653 = call ptr @llvm.invariant.start.p0(i64 456, ptr %3641)
  %3654 = getelementptr ptr, ptr %3641, i32 %3650
  %3655 = getelementptr ptr, ptr %3654, i32 16
  %3656 = load ptr, ptr %3655, align 8
  %3657 = call ptr %3656({ ptr, ptr, ptr, i32 } %3651, ptr %1198)
  %3658 = call { ptr, ptr, ptr, i32 } %3657({ ptr, ptr, ptr, i32 } %3651, { ptr, ptr, ptr, i32 } %3651, ptr %1197)
  store { ptr, ptr, ptr, i32 } %3658, ptr %1199, align 8
  %3659 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1199)
  %3660 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1199, i32 0, i32 0
  %3661 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1200, i32 0, i32 0
  %3662 = load ptr, ptr %3660, align 8
  store ptr %3662, ptr %3661, align 8
  %3663 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1199, i32 0, i32 1
  %3664 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1200, i32 0, i32 1
  %3665 = load ptr, ptr %3663, align 8
  store ptr %3665, ptr %3664, align 8
  %3666 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1199, i32 0, i32 2
  %3667 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1200, i32 0, i32 2
  %3668 = load ptr, ptr %3666, align 8
  store ptr %3668, ptr %3667, align 8
  %3669 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1199, i32 0, i32 3
  %3670 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1200, i32 0, i32 3
  %3671 = load i32, ptr %3669, align 4
  store i32 %3671, ptr %3670, align 4
  call void @set_offset(ptr %1200, ptr @RangeIterator)
  %3672 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1200, i32 0, i32 0
  %3673 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1201, i32 0, i32 0
  %3674 = load ptr, ptr %3672, align 8
  store ptr %3674, ptr %3673, align 8
  %3675 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1200, i32 0, i32 1
  %3676 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1201, i32 0, i32 1
  %3677 = load ptr, ptr %3675, align 8
  store ptr %3677, ptr %3676, align 8
  %3678 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1200, i32 0, i32 2
  %3679 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1201, i32 0, i32 2
  %3680 = load ptr, ptr %3678, align 8
  store ptr %3680, ptr %3679, align 8
  %3681 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1200, i32 0, i32 3
  %3682 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1201, i32 0, i32 3
  %3683 = load i32, ptr %3681, align 4
  store i32 %3683, ptr %3682, align 4
  call void @set_offset(ptr %1201, ptr @RangeIterator)
  %3684 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1201, i32 0, i32 0
  %3685 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1202, i32 0, i32 0
  %3686 = load ptr, ptr %3684, align 8
  store ptr %3686, ptr %3685, align 8
  %3687 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1201, i32 0, i32 1
  %3688 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1202, i32 0, i32 1
  %3689 = load ptr, ptr %3687, align 8
  store ptr %3689, ptr %3688, align 8
  %3690 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1201, i32 0, i32 2
  %3691 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1202, i32 0, i32 2
  %3692 = load ptr, ptr %3690, align 8
  store ptr %3692, ptr %3691, align 8
  %3693 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1201, i32 0, i32 3
  %3694 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1202, i32 0, i32 3
  %3695 = load i32, ptr %3693, align 4
  store i32 %3695, ptr %3694, align 4
  %3696 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1202)
  %3697 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1202, i32 0, i32 0
  store ptr %3697, ptr %.reg2mem31, align 8
  %3698 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1202, i32 0, i32 1
  store ptr %3698, ptr %.reg2mem29, align 8
  %3699 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1202, i32 0, i32 2
  store ptr %3699, ptr %.reg2mem27, align 8
  %3700 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1202, i32 0, i32 3
  store ptr %3700, ptr %.reg2mem25, align 8
  br label %3701

3701:                                             ; preds = %._crit_edge18, %3375
  %.reload32 = load ptr, ptr %.reg2mem31, align 8
  %3702 = load ptr, ptr %.reload32, align 8
  %3703 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3702, 0
  %.reload30 = load ptr, ptr %.reg2mem29, align 8
  %3704 = load ptr, ptr %.reload30, align 8
  %3705 = insertvalue { ptr, ptr, ptr, i32 } %3703, ptr %3704, 1
  %.reload28 = load ptr, ptr %.reg2mem27, align 8
  %3706 = load ptr, ptr %.reload28, align 8
  %3707 = insertvalue { ptr, ptr, ptr, i32 } %3705, ptr %3706, 2
  %.reload26 = load ptr, ptr %.reg2mem25, align 8
  %3708 = load i32, ptr %.reload26, align 4
  %3709 = insertvalue { ptr, ptr, ptr, i32 } %3707, i32 %3708, 3
  %3710 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1203)
  %3711 = call ptr @llvm.invariant.start.p0(i64 72, ptr %3702)
  %3712 = getelementptr ptr, ptr %3702, i32 %3708
  %3713 = getelementptr ptr, ptr %3712, i32 4
  %3714 = load ptr, ptr %3713, align 8
  %3715 = call ptr %3714({ ptr, ptr, ptr, i32 } %3709, ptr %1204)
  %3716 = call { ptr, i32 } %3715({ ptr, ptr, ptr, i32 } %3709, { ptr, ptr, ptr, i32 } %3709, ptr %1203)
  store ptr %1205, ptr %.reg2mem20, align 8
  %.reload24 = load ptr, ptr %.reg2mem20, align 8
  store { ptr, i32 } %3716, ptr %.reload24, align 8
  %.reload23 = load ptr, ptr %.reg2mem20, align 8
  %3717 = getelementptr { ptr, i32 }, ptr %.reload23, i32 0, i32 0
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %1206, align 4
  %3718 = load ptr, ptr %3717, align 8
  %3719 = ptrtoint ptr %3718 to i64
  %3720 = load ptr, ptr %1206, align 8
  %3721 = ptrtoint ptr %3720 to i64
  %3722 = icmp eq i64 %3719, %3721
  %3723 = icmp eq i64 %3719, 0
  %3724 = or i1 %3722, %3723
  %3725 = icmp eq i1 %3724, false
  store i1 %3725, ptr %1207, align 1
  %3726 = load i1, ptr %1207, align 1
  store i1 %3726, ptr %.reg2mem, align 1
  %.reload19 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload19, label %3727, label %._crit_edge17

._crit_edge17:                                    ; preds = %3701
  br label %3743

3727:                                             ; preds = %3701
  %.reload22 = load ptr, ptr %.reg2mem20, align 8
  %3728 = getelementptr { ptr, i32 }, ptr %.reload22, i32 0, i32 1
  %3729 = load i32, ptr %3728, align 4
  store i32 %3729, ptr %1208, align 4
  %3730 = load i32, ptr %1208, align 4
  store i32 %3730, ptr %1209, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %1211, align 4
  %3731 = load i64, ptr %1211, align 4
  store i64 %3731, ptr %1210, align 4
  %3732 = load ptr, ptr %1210, align 8
  %3733 = insertvalue { ptr, i160 } undef, ptr %3732, 0
  %3734 = load i160, ptr %1209, align 4
  %3735 = insertvalue { ptr, i160 } %3733, i160 %3734, 1
  %3736 = getelementptr [1 x ptr], ptr %1212, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %3736, align 8
  %3737 = call ptr @llvm.invariant.start.p0(i64 1, ptr %1212)
  %3738 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %3739 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %3740 = getelementptr { ptr }, ptr %1213, i32 0, i32 0
  store ptr %3732, ptr %3740, align 8
  %3741 = call ptr %3739(ptr %1213)
  call void %3741(ptr %1212, { ptr, i160 } %3735)
  %3742 = load i32, ptr %1208, align 4
  %.reload21 = load ptr, ptr %.reg2mem20, align 8
  store i32 %3742, ptr %.reload21, align 4
  br label %3743

3743:                                             ; preds = %3727, %._crit_edge17
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge18, label %3744

._crit_edge18:                                    ; preds = %3743
  br label %3701

3744:                                             ; preds = %3743
  store ptr @_functionliteral_wmogmiluex, ptr %1214, align 8
  store ptr @_functionliteral_qnupfhbweo, ptr %1215, align 8
  store ptr @_functionliteral_ikjyvtgqci, ptr %1216, align 8
  store i32 0, ptr %1217, align 4
  %3745 = load i32, ptr %1217, align 4
  %3746 = getelementptr { ptr }, ptr %1214, i32 0, i32 0
  %3747 = load ptr, ptr %3746, align 8
  %3748 = insertvalue { ptr } undef, ptr %3747, 0
  %3749 = getelementptr { ptr }, ptr %1215, i32 0, i32 0
  %3750 = load ptr, ptr %3749, align 8
  %3751 = insertvalue { ptr } undef, ptr %3750, 0
  store i32 5, ptr %1218, align 4
  %3752 = load i32, ptr %1218, align 4
  %3753 = getelementptr i32, ptr null, i32 %3752
  %3754 = ptrtoint ptr %3753 to i64
  %3755 = call ptr @bump_malloc(i64 %3754)
  store ptr %3755, ptr %1219, align 8
  %3756 = getelementptr { ptr }, ptr %1219, i32 0, i32 0
  %3757 = getelementptr { ptr }, ptr %1220, i32 0, i32 0
  %3758 = load ptr, ptr %3756, align 8
  store ptr %3758, ptr %3757, align 8
  %3759 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1220)
  store i32 1, ptr %1221, align 4
  store i32 0, ptr %1222, align 4
  %3760 = load ptr, ptr %1220, align 8
  %3761 = load i32, ptr %1222, align 4
  %3762 = getelementptr i32, ptr null, i32 %3761
  %3763 = ptrtoint ptr %3762 to i64
  %3764 = getelementptr i8, ptr %3760, i64 %3763
  %3765 = load i32, ptr %1221, align 4
  store i32 %3765, ptr %3764, align 4
  store i32 2, ptr %1223, align 4
  store i32 1, ptr %1224, align 4
  %3766 = load ptr, ptr %1220, align 8
  %3767 = load i32, ptr %1224, align 4
  %3768 = getelementptr i32, ptr null, i32 %3767
  %3769 = ptrtoint ptr %3768 to i64
  %3770 = getelementptr i8, ptr %3766, i64 %3769
  %3771 = load i32, ptr %1223, align 4
  store i32 %3771, ptr %3770, align 4
  store i32 3, ptr %1225, align 4
  store i32 2, ptr %1226, align 4
  %3772 = load ptr, ptr %1220, align 8
  %3773 = load i32, ptr %1226, align 4
  %3774 = getelementptr i32, ptr null, i32 %3773
  %3775 = ptrtoint ptr %3774 to i64
  %3776 = getelementptr i8, ptr %3772, i64 %3775
  %3777 = load i32, ptr %1225, align 4
  store i32 %3777, ptr %3776, align 4
  store i32 4, ptr %1227, align 4
  store i32 3, ptr %1228, align 4
  %3778 = load ptr, ptr %1220, align 8
  %3779 = load i32, ptr %1228, align 4
  %3780 = getelementptr i32, ptr null, i32 %3779
  %3781 = ptrtoint ptr %3780 to i64
  %3782 = getelementptr i8, ptr %3778, i64 %3781
  %3783 = load i32, ptr %1227, align 4
  store i32 %3783, ptr %3782, align 4
  store i32 4, ptr %1229, align 4
  store i32 5, ptr %1230, align 4
  %3784 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %3785 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1231, i32 0, i32 1
  %3786 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1231, i32 0, i32 3
  store ptr @IntArray, ptr %1231, align 8
  store ptr %3784, ptr %3785, align 8
  store i32 7, ptr %3786, align 4
  %3787 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1231)
  store i32 4, ptr %1232, align 4
  store i32 5, ptr %1233, align 4
  %3788 = getelementptr { ptr }, ptr %1220, i32 0, i32 0
  %3789 = load ptr, ptr %3788, align 8
  %3790 = insertvalue { ptr } undef, ptr %3789, 0
  %3791 = load i32, ptr %1232, align 4
  %3792 = load i32, ptr %1233, align 4
  %3793 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1231, i32 0, i32 0
  %3794 = load ptr, ptr %3793, align 8
  %3795 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3794, 0
  %3796 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1231, i32 0, i32 1
  %3797 = load ptr, ptr %3796, align 8
  %3798 = insertvalue { ptr, ptr, ptr, i32 } %3795, ptr %3797, 1
  %3799 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1231, i32 0, i32 2
  %3800 = load ptr, ptr %3799, align 8
  %3801 = insertvalue { ptr, ptr, ptr, i32 } %3798, ptr %3800, 2
  %3802 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1231, i32 0, i32 3
  %3803 = load i32, ptr %3802, align 4
  %3804 = insertvalue { ptr, ptr, ptr, i32 } %3801, i32 %3803, 3
  %3805 = getelementptr [3 x ptr], ptr %1234, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %3805, align 8
  %3806 = getelementptr [3 x ptr], ptr %1234, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %3806, align 8
  %3807 = getelementptr [3 x ptr], ptr %1234, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %3807, align 8
  %3808 = call ptr @llvm.invariant.start.p0(i64 9, ptr %1234)
  %3809 = call ptr @llvm.invariant.start.p0(i64 616, ptr %3794)
  %3810 = getelementptr ptr, ptr %3794, i32 %3803
  %3811 = getelementptr ptr, ptr %3810, i32 5
  %3812 = load ptr, ptr %3811, align 8
  %3813 = getelementptr { ptr, ptr, ptr }, ptr %1235, i32 0, i32 0
  store ptr @buffer_typ, ptr %3813, align 8
  %3814 = getelementptr { ptr, ptr, ptr }, ptr %1235, i32 0, i32 1
  store ptr @i32_typ, ptr %3814, align 8
  %3815 = getelementptr { ptr, ptr, ptr }, ptr %1235, i32 0, i32 2
  store ptr @i32_typ, ptr %3815, align 8
  %3816 = call ptr %3812({ ptr, ptr, ptr, i32 } %3804, ptr %1235)
  call void %3816({ ptr, ptr, ptr, i32 } %3804, { ptr, ptr, ptr, i32 } %3804, ptr %1234, { ptr } %3790, i32 %3791, i32 %3792)
  %3817 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1231, i32 0, i32 0
  %3818 = load ptr, ptr %3817, align 8
  %3819 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3818, 0
  %3820 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1231, i32 0, i32 1
  %3821 = load ptr, ptr %3820, align 8
  %3822 = insertvalue { ptr, ptr, ptr, i32 } %3819, ptr %3821, 1
  %3823 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1231, i32 0, i32 2
  %3824 = load ptr, ptr %3823, align 8
  %3825 = insertvalue { ptr, ptr, ptr, i32 } %3822, ptr %3824, 2
  %3826 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1231, i32 0, i32 3
  %3827 = load i32, ptr %3826, align 4
  %3828 = insertvalue { ptr, ptr, ptr, i32 } %3825, i32 %3827, 3
  %3829 = getelementptr [1 x ptr], ptr %1236, i32 0, i32 0
  store ptr @_parameterization_FunctionPtri32_to_Ptri32, ptr %3829, align 8
  %3830 = call ptr @llvm.invariant.start.p0(i64 1, ptr %1236)
  %3831 = call ptr @llvm.invariant.start.p0(i64 616, ptr %3818)
  %3832 = getelementptr ptr, ptr %3818, i32 %3827
  %3833 = getelementptr ptr, ptr %3832, i32 18
  %3834 = load ptr, ptr %3833, align 8
  %3835 = getelementptr { ptr }, ptr %1237, i32 0, i32 0
  store ptr @function_typ, ptr %3835, align 8
  %3836 = call ptr %3834({ ptr, ptr, ptr, i32 } %3828, ptr %1237)
  %3837 = call { ptr, ptr, ptr, i32 } %3836({ ptr, ptr, ptr, i32 } %3828, { ptr, ptr, ptr, i32 } %3828, ptr %1236, { ptr } %3751)
  store { ptr, ptr, ptr, i32 } %3837, ptr %1238, align 8
  %3838 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1238)
  %3839 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1238, i32 0, i32 0
  %3840 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1239, i32 0, i32 0
  %3841 = load ptr, ptr %3839, align 8
  store ptr %3841, ptr %3840, align 8
  %3842 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1238, i32 0, i32 1
  %3843 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1239, i32 0, i32 1
  %3844 = load ptr, ptr %3842, align 8
  store ptr %3844, ptr %3843, align 8
  %3845 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1238, i32 0, i32 2
  %3846 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1239, i32 0, i32 2
  %3847 = load ptr, ptr %3845, align 8
  store ptr %3847, ptr %3846, align 8
  %3848 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1238, i32 0, i32 3
  %3849 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1239, i32 0, i32 3
  %3850 = load i32, ptr %3848, align 4
  store i32 %3850, ptr %3849, align 4
  call void @set_offset(ptr %1239, ptr @IntArray)
  %3851 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1239, i32 0, i32 0
  %3852 = load ptr, ptr %3851, align 8
  %3853 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3852, 0
  %3854 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1239, i32 0, i32 1
  %3855 = load ptr, ptr %3854, align 8
  %3856 = insertvalue { ptr, ptr, ptr, i32 } %3853, ptr %3855, 1
  %3857 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1239, i32 0, i32 2
  %3858 = load ptr, ptr %3857, align 8
  %3859 = insertvalue { ptr, ptr, ptr, i32 } %3856, ptr %3858, 2
  %3860 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1239, i32 0, i32 3
  %3861 = load i32, ptr %3860, align 4
  %3862 = insertvalue { ptr, ptr, ptr, i32 } %3859, i32 %3861, 3
  %3863 = getelementptr [2 x ptr], ptr %1240, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %3863, align 8
  %3864 = getelementptr [2 x ptr], ptr %1240, i32 0, i32 1
  store ptr @_parameterization_FunctionPtri32._Ptri32_to_Ptri32, ptr %3864, align 8
  %3865 = call ptr @llvm.invariant.start.p0(i64 4, ptr %1240)
  %3866 = call ptr @llvm.invariant.start.p0(i64 616, ptr %3852)
  %3867 = getelementptr ptr, ptr %3852, i32 %3861
  %3868 = getelementptr ptr, ptr %3867, i32 15
  %3869 = load ptr, ptr %3868, align 8
  %3870 = getelementptr { ptr, ptr }, ptr %1241, i32 0, i32 0
  store ptr @i32_typ, ptr %3870, align 8
  %3871 = getelementptr { ptr, ptr }, ptr %1241, i32 0, i32 1
  store ptr @function_typ, ptr %3871, align 8
  %3872 = call ptr %3869({ ptr, ptr, ptr, i32 } %3862, ptr %1241)
  %3873 = call i32 %3872({ ptr, ptr, ptr, i32 } %3862, { ptr, ptr, ptr, i32 } %3862, ptr %1240, i32 %3745, { ptr } %3748)
  store i32 %3873, ptr %1242, align 4
  %3874 = load i32, ptr %1242, align 4
  store i32 %3874, ptr %1243, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %1245, align 4
  %3875 = load i64, ptr %1245, align 4
  store i64 %3875, ptr %1244, align 4
  %3876 = load ptr, ptr %1244, align 8
  %3877 = insertvalue { ptr, i160 } undef, ptr %3876, 0
  %3878 = load i160, ptr %1243, align 4
  %3879 = insertvalue { ptr, i160 } %3877, i160 %3878, 1
  %3880 = getelementptr [1 x ptr], ptr %1246, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %3880, align 8
  %3881 = call ptr @llvm.invariant.start.p0(i64 1, ptr %1246)
  %3882 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %3883 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %3884 = getelementptr { ptr }, ptr %1247, i32 0, i32 0
  store ptr %3876, ptr %3884, align 8
  %3885 = call ptr %3883(ptr %1247)
  call void %3885(ptr %1246, { ptr, i160 } %3879)
  store ptr @_functionliteral_wptylnoeos, ptr %1248, align 8
  %3886 = getelementptr { ptr }, ptr %1248, i32 0, i32 0
  %3887 = load ptr, ptr %3886, align 8
  %3888 = insertvalue { ptr } undef, ptr %3887, 0
  store i32 5, ptr %1249, align 4
  %3889 = load i32, ptr %1249, align 4
  %3890 = getelementptr i32, ptr null, i32 %3889
  %3891 = ptrtoint ptr %3890 to i64
  %3892 = call ptr @bump_malloc(i64 %3891)
  store ptr %3892, ptr %1250, align 8
  %3893 = getelementptr { ptr }, ptr %1250, i32 0, i32 0
  %3894 = getelementptr { ptr }, ptr %1251, i32 0, i32 0
  %3895 = load ptr, ptr %3893, align 8
  store ptr %3895, ptr %3894, align 8
  %3896 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1251)
  store i32 5, ptr %1252, align 4
  store i32 0, ptr %1253, align 4
  %3897 = load ptr, ptr %1251, align 8
  %3898 = load i32, ptr %1253, align 4
  %3899 = getelementptr i32, ptr null, i32 %3898
  %3900 = ptrtoint ptr %3899 to i64
  %3901 = getelementptr i8, ptr %3897, i64 %3900
  %3902 = load i32, ptr %1252, align 4
  store i32 %3902, ptr %3901, align 4
  store i32 6, ptr %1254, align 4
  store i32 1, ptr %1255, align 4
  %3903 = load ptr, ptr %1251, align 8
  %3904 = load i32, ptr %1255, align 4
  %3905 = getelementptr i32, ptr null, i32 %3904
  %3906 = ptrtoint ptr %3905 to i64
  %3907 = getelementptr i8, ptr %3903, i64 %3906
  %3908 = load i32, ptr %1254, align 4
  store i32 %3908, ptr %3907, align 4
  store i32 7, ptr %1256, align 4
  store i32 2, ptr %1257, align 4
  %3909 = load ptr, ptr %1251, align 8
  %3910 = load i32, ptr %1257, align 4
  %3911 = getelementptr i32, ptr null, i32 %3910
  %3912 = ptrtoint ptr %3911 to i64
  %3913 = getelementptr i8, ptr %3909, i64 %3912
  %3914 = load i32, ptr %1256, align 4
  store i32 %3914, ptr %3913, align 4
  store i32 8, ptr %1258, align 4
  store i32 3, ptr %1259, align 4
  %3915 = load ptr, ptr %1251, align 8
  %3916 = load i32, ptr %1259, align 4
  %3917 = getelementptr i32, ptr null, i32 %3916
  %3918 = ptrtoint ptr %3917 to i64
  %3919 = getelementptr i8, ptr %3915, i64 %3918
  %3920 = load i32, ptr %1258, align 4
  store i32 %3920, ptr %3919, align 4
  store i32 4, ptr %1260, align 4
  store i32 5, ptr %1261, align 4
  %3921 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %3922 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1262, i32 0, i32 1
  %3923 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1262, i32 0, i32 3
  store ptr @IntArray, ptr %1262, align 8
  store ptr %3921, ptr %3922, align 8
  store i32 7, ptr %3923, align 4
  %3924 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1262)
  store i32 4, ptr %1263, align 4
  store i32 5, ptr %1264, align 4
  %3925 = getelementptr { ptr }, ptr %1251, i32 0, i32 0
  %3926 = load ptr, ptr %3925, align 8
  %3927 = insertvalue { ptr } undef, ptr %3926, 0
  %3928 = load i32, ptr %1263, align 4
  %3929 = load i32, ptr %1264, align 4
  %3930 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1262, i32 0, i32 0
  %3931 = load ptr, ptr %3930, align 8
  %3932 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3931, 0
  %3933 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1262, i32 0, i32 1
  %3934 = load ptr, ptr %3933, align 8
  %3935 = insertvalue { ptr, ptr, ptr, i32 } %3932, ptr %3934, 1
  %3936 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1262, i32 0, i32 2
  %3937 = load ptr, ptr %3936, align 8
  %3938 = insertvalue { ptr, ptr, ptr, i32 } %3935, ptr %3937, 2
  %3939 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1262, i32 0, i32 3
  %3940 = load i32, ptr %3939, align 4
  %3941 = insertvalue { ptr, ptr, ptr, i32 } %3938, i32 %3940, 3
  %3942 = getelementptr [3 x ptr], ptr %1265, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %3942, align 8
  %3943 = getelementptr [3 x ptr], ptr %1265, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %3943, align 8
  %3944 = getelementptr [3 x ptr], ptr %1265, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %3944, align 8
  %3945 = call ptr @llvm.invariant.start.p0(i64 9, ptr %1265)
  %3946 = call ptr @llvm.invariant.start.p0(i64 616, ptr %3931)
  %3947 = getelementptr ptr, ptr %3931, i32 %3940
  %3948 = getelementptr ptr, ptr %3947, i32 5
  %3949 = load ptr, ptr %3948, align 8
  %3950 = getelementptr { ptr, ptr, ptr }, ptr %1266, i32 0, i32 0
  store ptr @buffer_typ, ptr %3950, align 8
  %3951 = getelementptr { ptr, ptr, ptr }, ptr %1266, i32 0, i32 1
  store ptr @i32_typ, ptr %3951, align 8
  %3952 = getelementptr { ptr, ptr, ptr }, ptr %1266, i32 0, i32 2
  store ptr @i32_typ, ptr %3952, align 8
  %3953 = call ptr %3949({ ptr, ptr, ptr, i32 } %3941, ptr %1266)
  call void %3953({ ptr, ptr, ptr, i32 } %3941, { ptr, ptr, ptr, i32 } %3941, ptr %1265, { ptr } %3927, i32 %3928, i32 %3929)
  %3954 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1262, i32 0, i32 0
  %3955 = load ptr, ptr %3954, align 8
  %3956 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3955, 0
  %3957 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1262, i32 0, i32 1
  %3958 = load ptr, ptr %3957, align 8
  %3959 = insertvalue { ptr, ptr, ptr, i32 } %3956, ptr %3958, 1
  %3960 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1262, i32 0, i32 2
  %3961 = load ptr, ptr %3960, align 8
  %3962 = insertvalue { ptr, ptr, ptr, i32 } %3959, ptr %3961, 2
  %3963 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1262, i32 0, i32 3
  %3964 = load i32, ptr %3963, align 4
  %3965 = insertvalue { ptr, ptr, ptr, i32 } %3962, i32 %3964, 3
  %3966 = getelementptr [1 x ptr], ptr %1267, i32 0, i32 0
  store ptr @_parameterization_FunctionPtri32_to_Nothing, ptr %3966, align 8
  %3967 = call ptr @llvm.invariant.start.p0(i64 1, ptr %1267)
  %3968 = call ptr @llvm.invariant.start.p0(i64 616, ptr %3955)
  %3969 = getelementptr ptr, ptr %3955, i32 %3964
  %3970 = getelementptr ptr, ptr %3969, i32 14
  %3971 = load ptr, ptr %3970, align 8
  %3972 = getelementptr { ptr }, ptr %1268, i32 0, i32 0
  store ptr @function_typ, ptr %3972, align 8
  %3973 = call ptr %3971({ ptr, ptr, ptr, i32 } %3965, ptr %1268)
  call void %3973({ ptr, ptr, ptr, i32 } %3965, { ptr, ptr, ptr, i32 } %3965, ptr %1267, { ptr } %3888)
  store i32 13, ptr %1269, align 4
  %3974 = load i32, ptr %1269, align 4
  %3975 = getelementptr i8, ptr null, i32 %3974
  %3976 = ptrtoint ptr %3975 to i64
  %3977 = call ptr @bump_malloc(i64 %3976)
  store ptr %3977, ptr %1270, align 8
  %3978 = getelementptr { ptr }, ptr %1270, i32 0, i32 0
  %3979 = getelementptr { ptr }, ptr %1271, i32 0, i32 0
  %3980 = load ptr, ptr %3978, align 8
  store ptr %3980, ptr %3979, align 8
  %3981 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1271)
  store i32 0, ptr %1272, align 4
  %3982 = load ptr, ptr %1271, align 8
  %3983 = load i32, ptr %1272, align 4
  %3984 = getelementptr [12 x i8], ptr null, i32 %3983
  %3985 = ptrtoint ptr %3984 to i64
  %3986 = getelementptr i8, ptr %3982, i64 %3985
  %3987 = load i96, ptr @cmgpb_bigtingstxt, align 4
  store i96 %3987, ptr %3986, align 4
  store i32 12, ptr %1273, align 4
  store i32 13, ptr %1274, align 4
  %3988 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %3989 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1275, i32 0, i32 1
  %3990 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1275, i32 0, i32 3
  store ptr @String, ptr %1275, align 8
  store ptr %3988, ptr %3989, align 8
  store i32 7, ptr %3990, align 4
  %3991 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1275)
  store i32 12, ptr %1276, align 4
  store i32 13, ptr %1277, align 4
  %3992 = getelementptr { ptr }, ptr %1271, i32 0, i32 0
  %3993 = load ptr, ptr %3992, align 8
  %3994 = insertvalue { ptr } undef, ptr %3993, 0
  %3995 = load i32, ptr %1276, align 4
  %3996 = load i32, ptr %1277, align 4
  %3997 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1275, i32 0, i32 0
  %3998 = load ptr, ptr %3997, align 8
  %3999 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3998, 0
  %4000 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1275, i32 0, i32 1
  %4001 = load ptr, ptr %4000, align 8
  %4002 = insertvalue { ptr, ptr, ptr, i32 } %3999, ptr %4001, 1
  %4003 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1275, i32 0, i32 2
  %4004 = load ptr, ptr %4003, align 8
  %4005 = insertvalue { ptr, ptr, ptr, i32 } %4002, ptr %4004, 2
  %4006 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1275, i32 0, i32 3
  %4007 = load i32, ptr %4006, align 4
  %4008 = insertvalue { ptr, ptr, ptr, i32 } %4005, i32 %4007, 3
  %4009 = getelementptr [3 x ptr], ptr %1278, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %4009, align 8
  %4010 = getelementptr [3 x ptr], ptr %1278, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %4010, align 8
  %4011 = getelementptr [3 x ptr], ptr %1278, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %4011, align 8
  %4012 = call ptr @llvm.invariant.start.p0(i64 9, ptr %1278)
  %4013 = call ptr @llvm.invariant.start.p0(i64 280, ptr %3998)
  %4014 = getelementptr ptr, ptr %3998, i32 %4007
  %4015 = getelementptr ptr, ptr %4014, i32 4
  %4016 = load ptr, ptr %4015, align 8
  %4017 = getelementptr { ptr, ptr, ptr }, ptr %1279, i32 0, i32 0
  store ptr @buffer_typ, ptr %4017, align 8
  %4018 = getelementptr { ptr, ptr, ptr }, ptr %1279, i32 0, i32 1
  store ptr @i32_typ, ptr %4018, align 8
  %4019 = getelementptr { ptr, ptr, ptr }, ptr %1279, i32 0, i32 2
  store ptr @i32_typ, ptr %4019, align 8
  %4020 = call ptr %4016({ ptr, ptr, ptr, i32 } %4008, ptr %1279)
  call void %4020({ ptr, ptr, ptr, i32 } %4008, { ptr, ptr, ptr, i32 } %4008, ptr %1278, { ptr } %3994, i32 %3995, i32 %3996)
  store i32 21, ptr %1280, align 4
  %4021 = load i32, ptr %1280, align 4
  %4022 = getelementptr i8, ptr null, i32 %4021
  %4023 = ptrtoint ptr %4022 to i64
  %4024 = call ptr @bump_malloc(i64 %4023)
  store ptr %4024, ptr %1281, align 8
  %4025 = getelementptr { ptr }, ptr %1281, i32 0, i32 0
  %4026 = getelementptr { ptr }, ptr %1282, i32 0, i32 0
  %4027 = load ptr, ptr %4025, align 8
  store ptr %4027, ptr %4026, align 8
  %4028 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1282)
  store i32 0, ptr %1283, align 4
  %4029 = load ptr, ptr %1282, align 8
  %4030 = load i32, ptr %1283, align 4
  %4031 = getelementptr [20 x i8], ptr null, i32 %4030
  %4032 = ptrtoint ptr %4031 to i64
  %4033 = getelementptr i8, ptr %4029, i64 %4032
  %4034 = load i160, ptr @hjqmb_thisnis_hownwe_donit, align 4
  store i160 %4034, ptr %4033, align 4
  store i32 20, ptr %1284, align 4
  store i32 21, ptr %1285, align 4
  %4035 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %4036 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1286, i32 0, i32 1
  %4037 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1286, i32 0, i32 3
  store ptr @String, ptr %1286, align 8
  store ptr %4035, ptr %4036, align 8
  store i32 7, ptr %4037, align 4
  %4038 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1286)
  store i32 20, ptr %1287, align 4
  store i32 21, ptr %1288, align 4
  %4039 = getelementptr { ptr }, ptr %1282, i32 0, i32 0
  %4040 = load ptr, ptr %4039, align 8
  %4041 = insertvalue { ptr } undef, ptr %4040, 0
  %4042 = load i32, ptr %1287, align 4
  %4043 = load i32, ptr %1288, align 4
  %4044 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1286, i32 0, i32 0
  %4045 = load ptr, ptr %4044, align 8
  %4046 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4045, 0
  %4047 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1286, i32 0, i32 1
  %4048 = load ptr, ptr %4047, align 8
  %4049 = insertvalue { ptr, ptr, ptr, i32 } %4046, ptr %4048, 1
  %4050 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1286, i32 0, i32 2
  %4051 = load ptr, ptr %4050, align 8
  %4052 = insertvalue { ptr, ptr, ptr, i32 } %4049, ptr %4051, 2
  %4053 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1286, i32 0, i32 3
  %4054 = load i32, ptr %4053, align 4
  %4055 = insertvalue { ptr, ptr, ptr, i32 } %4052, i32 %4054, 3
  %4056 = getelementptr [3 x ptr], ptr %1289, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %4056, align 8
  %4057 = getelementptr [3 x ptr], ptr %1289, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %4057, align 8
  %4058 = getelementptr [3 x ptr], ptr %1289, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %4058, align 8
  %4059 = call ptr @llvm.invariant.start.p0(i64 9, ptr %1289)
  %4060 = call ptr @llvm.invariant.start.p0(i64 280, ptr %4045)
  %4061 = getelementptr ptr, ptr %4045, i32 %4054
  %4062 = getelementptr ptr, ptr %4061, i32 4
  %4063 = load ptr, ptr %4062, align 8
  %4064 = getelementptr { ptr, ptr, ptr }, ptr %1290, i32 0, i32 0
  store ptr @buffer_typ, ptr %4064, align 8
  %4065 = getelementptr { ptr, ptr, ptr }, ptr %1290, i32 0, i32 1
  store ptr @i32_typ, ptr %4065, align 8
  %4066 = getelementptr { ptr, ptr, ptr }, ptr %1290, i32 0, i32 2
  store ptr @i32_typ, ptr %4066, align 8
  %4067 = call ptr %4063({ ptr, ptr, ptr, i32 } %4055, ptr %1290)
  call void %4067({ ptr, ptr, ptr, i32 } %4055, { ptr, ptr, ptr, i32 } %4055, ptr %1289, { ptr } %4041, i32 %4042, i32 %4043)
  %4068 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1275, i32 0, i32 0
  %4069 = load ptr, ptr %4068, align 8
  %4070 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4069, 0
  %4071 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1275, i32 0, i32 1
  %4072 = load ptr, ptr %4071, align 8
  %4073 = insertvalue { ptr, ptr, ptr, i32 } %4070, ptr %4072, 1
  %4074 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1275, i32 0, i32 2
  %4075 = load ptr, ptr %4074, align 8
  %4076 = insertvalue { ptr, ptr, ptr, i32 } %4073, ptr %4075, 2
  %4077 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1275, i32 0, i32 3
  %4078 = load i32, ptr %4077, align 4
  %4079 = insertvalue { ptr, ptr, ptr, i32 } %4076, i32 %4078, 3
  %4080 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1286, i32 0, i32 0
  %4081 = load ptr, ptr %4080, align 8
  %4082 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4081, 0
  %4083 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1286, i32 0, i32 1
  %4084 = load ptr, ptr %4083, align 8
  %4085 = insertvalue { ptr, ptr, ptr, i32 } %4082, ptr %4084, 1
  %4086 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1286, i32 0, i32 2
  %4087 = load ptr, ptr %4086, align 8
  %4088 = insertvalue { ptr, ptr, ptr, i32 } %4085, ptr %4087, 2
  %4089 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1286, i32 0, i32 3
  %4090 = load i32, ptr %4089, align 4
  %4091 = insertvalue { ptr, ptr, ptr, i32 } %4088, i32 %4090, 3
  call void @write_file({ ptr, ptr, ptr, i32 } %4079, { ptr, ptr, ptr, i32 } %4091)
  store i32 13, ptr %1291, align 4
  %4092 = load i32, ptr %1291, align 4
  %4093 = getelementptr i8, ptr null, i32 %4092
  %4094 = ptrtoint ptr %4093 to i64
  %4095 = call ptr @bump_malloc(i64 %4094)
  store ptr %4095, ptr %1292, align 8
  %4096 = getelementptr { ptr }, ptr %1292, i32 0, i32 0
  %4097 = getelementptr { ptr }, ptr %1293, i32 0, i32 0
  %4098 = load ptr, ptr %4096, align 8
  store ptr %4098, ptr %4097, align 8
  %4099 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1293)
  store i32 0, ptr %1294, align 4
  %4100 = load ptr, ptr %1293, align 8
  %4101 = load i32, ptr %1294, align 4
  %4102 = getelementptr [12 x i8], ptr null, i32 %4101
  %4103 = ptrtoint ptr %4102 to i64
  %4104 = getelementptr i8, ptr %4100, i64 %4103
  %4105 = load i96, ptr @ohegt_bigtingstxt, align 4
  store i96 %4105, ptr %4104, align 4
  store i32 12, ptr %1295, align 4
  store i32 13, ptr %1296, align 4
  %4106 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %4107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1297, i32 0, i32 1
  %4108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1297, i32 0, i32 3
  store ptr @String, ptr %1297, align 8
  store ptr %4106, ptr %4107, align 8
  store i32 7, ptr %4108, align 4
  %4109 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1297)
  store i32 12, ptr %1298, align 4
  store i32 13, ptr %1299, align 4
  %4110 = getelementptr { ptr }, ptr %1293, i32 0, i32 0
  %4111 = load ptr, ptr %4110, align 8
  %4112 = insertvalue { ptr } undef, ptr %4111, 0
  %4113 = load i32, ptr %1298, align 4
  %4114 = load i32, ptr %1299, align 4
  %4115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1297, i32 0, i32 0
  %4116 = load ptr, ptr %4115, align 8
  %4117 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4116, 0
  %4118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1297, i32 0, i32 1
  %4119 = load ptr, ptr %4118, align 8
  %4120 = insertvalue { ptr, ptr, ptr, i32 } %4117, ptr %4119, 1
  %4121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1297, i32 0, i32 2
  %4122 = load ptr, ptr %4121, align 8
  %4123 = insertvalue { ptr, ptr, ptr, i32 } %4120, ptr %4122, 2
  %4124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1297, i32 0, i32 3
  %4125 = load i32, ptr %4124, align 4
  %4126 = insertvalue { ptr, ptr, ptr, i32 } %4123, i32 %4125, 3
  %4127 = getelementptr [3 x ptr], ptr %1300, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %4127, align 8
  %4128 = getelementptr [3 x ptr], ptr %1300, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %4128, align 8
  %4129 = getelementptr [3 x ptr], ptr %1300, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %4129, align 8
  %4130 = call ptr @llvm.invariant.start.p0(i64 9, ptr %1300)
  %4131 = call ptr @llvm.invariant.start.p0(i64 280, ptr %4116)
  %4132 = getelementptr ptr, ptr %4116, i32 %4125
  %4133 = getelementptr ptr, ptr %4132, i32 4
  %4134 = load ptr, ptr %4133, align 8
  %4135 = getelementptr { ptr, ptr, ptr }, ptr %1301, i32 0, i32 0
  store ptr @buffer_typ, ptr %4135, align 8
  %4136 = getelementptr { ptr, ptr, ptr }, ptr %1301, i32 0, i32 1
  store ptr @i32_typ, ptr %4136, align 8
  %4137 = getelementptr { ptr, ptr, ptr }, ptr %1301, i32 0, i32 2
  store ptr @i32_typ, ptr %4137, align 8
  %4138 = call ptr %4134({ ptr, ptr, ptr, i32 } %4126, ptr %1301)
  call void %4138({ ptr, ptr, ptr, i32 } %4126, { ptr, ptr, ptr, i32 } %4126, ptr %1300, { ptr } %4112, i32 %4113, i32 %4114)
  %4139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1297, i32 0, i32 0
  %4140 = load ptr, ptr %4139, align 8
  %4141 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4140, 0
  %4142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1297, i32 0, i32 1
  %4143 = load ptr, ptr %4142, align 8
  %4144 = insertvalue { ptr, ptr, ptr, i32 } %4141, ptr %4143, 1
  %4145 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1297, i32 0, i32 2
  %4146 = load ptr, ptr %4145, align 8
  %4147 = insertvalue { ptr, ptr, ptr, i32 } %4144, ptr %4146, 2
  %4148 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1297, i32 0, i32 3
  %4149 = load i32, ptr %4148, align 4
  %4150 = insertvalue { ptr, ptr, ptr, i32 } %4147, i32 %4149, 3
  %4151 = call { ptr, ptr, ptr, i32 } @read_file({ ptr, ptr, ptr, i32 } %4150)
  store { ptr, ptr, ptr, i32 } %4151, ptr %1302, align 8
  %4152 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1302)
  %4153 = getelementptr { ptr, i160 }, ptr %1302, i32 0, i32 0
  %4154 = load ptr, ptr %4153, align 8
  %4155 = insertvalue { ptr, i160 } undef, ptr %4154, 0
  %4156 = getelementptr { ptr, i160 }, ptr %1302, i32 0, i32 1
  %4157 = load i160, ptr %4156, align 4
  %4158 = insertvalue { ptr, i160 } %4155, i160 %4157, 1
  %4159 = getelementptr [1 x ptr], ptr %1303, i32 0, i32 0
  store ptr @_parameterization_String, ptr %4159, align 8
  %4160 = call ptr @llvm.invariant.start.p0(i64 1, ptr %1303)
  %4161 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %4162 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %4163 = getelementptr { ptr }, ptr %1304, i32 0, i32 0
  store ptr %4154, ptr %4163, align 8
  %4164 = call ptr %4162(ptr %1304)
  call void %4164(ptr %1303, { ptr, i160 } %4158)
  store ptr @_functionliteral_qerngvbhux, ptr %1305, align 8
  %4165 = getelementptr { ptr }, ptr %1305, i32 0, i32 0
  %4166 = load ptr, ptr %4165, align 8
  %4167 = insertvalue { ptr } undef, ptr %4166, 0
  store i32 2, ptr %1306, align 4
  store i32 5, ptr %1307, align 4
  %4168 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ i32, i32, i32 }, ptr null, i32 1) to i64))
  %4169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1308, i32 0, i32 1
  %4170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1308, i32 0, i32 3
  store ptr @Range, ptr %1308, align 8
  store ptr %4168, ptr %4169, align 8
  store i32 7, ptr %4170, align 4
  %4171 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1308)
  store i32 2, ptr %1309, align 4
  store i32 5, ptr %1310, align 4
  %4172 = load i32, ptr %1309, align 4
  %4173 = load i32, ptr %1310, align 4
  %4174 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1308, i32 0, i32 0
  %4175 = load ptr, ptr %4174, align 8
  %4176 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4175, 0
  %4177 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1308, i32 0, i32 1
  %4178 = load ptr, ptr %4177, align 8
  %4179 = insertvalue { ptr, ptr, ptr, i32 } %4176, ptr %4178, 1
  %4180 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1308, i32 0, i32 2
  %4181 = load ptr, ptr %4180, align 8
  %4182 = insertvalue { ptr, ptr, ptr, i32 } %4179, ptr %4181, 2
  %4183 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1308, i32 0, i32 3
  %4184 = load i32, ptr %4183, align 4
  %4185 = insertvalue { ptr, ptr, ptr, i32 } %4182, i32 %4184, 3
  %4186 = getelementptr [2 x ptr], ptr %1311, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %4186, align 8
  %4187 = getelementptr [2 x ptr], ptr %1311, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %4187, align 8
  %4188 = call ptr @llvm.invariant.start.p0(i64 4, ptr %1311)
  %4189 = call ptr @llvm.invariant.start.p0(i64 456, ptr %4175)
  %4190 = getelementptr ptr, ptr %4175, i32 %4184
  %4191 = getelementptr ptr, ptr %4190, i32 4
  %4192 = load ptr, ptr %4191, align 8
  %4193 = getelementptr { ptr, ptr }, ptr %1312, i32 0, i32 0
  store ptr @i32_typ, ptr %4193, align 8
  %4194 = getelementptr { ptr, ptr }, ptr %1312, i32 0, i32 1
  store ptr @i32_typ, ptr %4194, align 8
  %4195 = call ptr %4192({ ptr, ptr, ptr, i32 } %4185, ptr %1312)
  call void %4195({ ptr, ptr, ptr, i32 } %4185, { ptr, ptr, ptr, i32 } %4185, ptr %1311, i32 %4172, i32 %4173)
  %4196 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1308, i32 0, i32 0
  %4197 = load ptr, ptr %4196, align 8
  %4198 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4197, 0
  %4199 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1308, i32 0, i32 1
  %4200 = load ptr, ptr %4199, align 8
  %4201 = insertvalue { ptr, ptr, ptr, i32 } %4198, ptr %4200, 1
  %4202 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1308, i32 0, i32 2
  %4203 = load ptr, ptr %4202, align 8
  %4204 = insertvalue { ptr, ptr, ptr, i32 } %4201, ptr %4203, 2
  %4205 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1308, i32 0, i32 3
  %4206 = load i32, ptr %4205, align 4
  %4207 = insertvalue { ptr, ptr, ptr, i32 } %4204, i32 %4206, 3
  %4208 = getelementptr [1 x ptr], ptr %1313, i32 0, i32 0
  store ptr @_parameterization_FunctionPtri32_to_Nothing, ptr %4208, align 8
  %4209 = call ptr @llvm.invariant.start.p0(i64 1, ptr %1313)
  %4210 = call ptr @llvm.invariant.start.p0(i64 456, ptr %4197)
  %4211 = getelementptr ptr, ptr %4197, i32 %4206
  %4212 = getelementptr ptr, ptr %4211, i32 6
  %4213 = load ptr, ptr %4212, align 8
  %4214 = getelementptr { ptr }, ptr %1314, i32 0, i32 0
  store ptr @function_typ, ptr %4214, align 8
  %4215 = call ptr %4213({ ptr, ptr, ptr, i32 } %4207, ptr %1314)
  call void %4215({ ptr, ptr, ptr, i32 } %4207, { ptr, ptr, ptr, i32 } %4207, ptr %1313, { ptr } %4167)
  store ptr @i32toi8, ptr %1315, align 8
  store i32 5, ptr %1316, align 4
  %4216 = load i32, ptr %1316, align 4
  %4217 = load ptr, ptr %1315, align 8
  %4218 = call i8 %4217(i32 %4216)
  store i8 %4218, ptr %1317, align 1
  %4219 = load i8, ptr %1317, align 1
  store i8 %4219, ptr %1318, align 1
  store i64 ptrtoint (ptr @i8_typ to i64), ptr %1320, align 4
  %4220 = load i64, ptr %1320, align 4
  store i64 %4220, ptr %1319, align 4
  %4221 = load ptr, ptr %1319, align 8
  %4222 = insertvalue { ptr, i160 } undef, ptr %4221, 0
  %4223 = load i160, ptr %1318, align 4
  %4224 = insertvalue { ptr, i160 } %4222, i160 %4223, 1
  %4225 = getelementptr [1 x ptr], ptr %1321, i32 0, i32 0
  store ptr @_parameterization_Ptri8, ptr %4225, align 8
  %4226 = call ptr @llvm.invariant.start.p0(i64 1, ptr %1321)
  %4227 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %4228 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %4229 = getelementptr { ptr }, ptr %1322, i32 0, i32 0
  store ptr %4221, ptr %4229, align 8
  %4230 = call ptr %4228(ptr %1322)
  call void %4230(ptr %1321, { ptr, i160 } %4224)
  store ptr @_functionliteral_rnscjkerrq, ptr %1323, align 8
  store i32 6, ptr %1324, align 4
  store i32 4, ptr %1325, align 4
  %4231 = load i32, ptr %1324, align 4
  %4232 = load i32, ptr %1325, align 4
  %4233 = load ptr, ptr %1323, align 8
  %4234 = call ptr @coroutine_create(ptr %4233, ptr @coroutine_azsxuabqqe_passer)
  call void @coroutine_azsxuabqqe_buffer_filler(ptr %4234, i32 %4231, i32 %4232)
  store ptr %4234, ptr %1326, align 8
  %4235 = getelementptr { ptr }, ptr %1326, i32 0, i32 0
  %4236 = getelementptr { ptr }, ptr %1327, i32 0, i32 0
  %4237 = load ptr, ptr %4235, align 8
  store ptr %4237, ptr %4236, align 8
  %4238 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1327)
  store i32 2, ptr %1328, align 4
  %4239 = load i32, ptr %1328, align 4
  store i32 %4239, ptr %1329, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %1331, align 4
  %4240 = load i64, ptr %1331, align 4
  store i64 %4240, ptr %1330, align 4
  %4241 = load ptr, ptr %1330, align 8
  %4242 = insertvalue { ptr, i32 } undef, ptr %4241, 0
  %4243 = load i32, ptr %1329, align 4
  %4244 = insertvalue { ptr, i32 } %4242, i32 %4243, 1
  %4245 = load ptr, ptr %1327, align 8
  %4246 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i32 } }, ptr %4245, i32 0, i32 4
  store { ptr, i32 } %4244, ptr %4246, align 8
  %4247 = load ptr, ptr %1327, align 8
  %4248 = load ptr, ptr %1327, align 8
  call void @coroutine_call(ptr %4248)
  %4249 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i32 } }, ptr %4247, i32 0, i32 4
  %4250 = load { ptr, i32 }, ptr %4249, align 8
  store { ptr, i32 } %4250, ptr %1332, align 8
  %4251 = getelementptr { ptr, i32 }, ptr %1332, i32 0, i32 0
  %4252 = getelementptr { ptr, i32 }, ptr %1333, i32 0, i32 0
  %4253 = load ptr, ptr %4251, align 8
  store ptr %4253, ptr %4252, align 8
  %4254 = getelementptr { ptr, i32 }, ptr %1332, i32 0, i32 1
  %4255 = getelementptr { ptr, i32 }, ptr %1333, i32 0, i32 1
  %4256 = load i32, ptr %4254, align 4
  store i32 %4256, ptr %4255, align 4
  %4257 = getelementptr { ptr, i160 }, ptr %1333, i32 0, i32 0
  %4258 = load ptr, ptr %4257, align 8
  %4259 = insertvalue { ptr, i160 } undef, ptr %4258, 0
  %4260 = getelementptr { ptr, i160 }, ptr %1333, i32 0, i32 1
  %4261 = load i160, ptr %4260, align 4
  %4262 = insertvalue { ptr, i160 } %4259, i160 %4261, 1
  %4263 = getelementptr [1 x ptr], ptr %1334, i32 0, i32 0
  store ptr @_parameterization_Nil_or_Ptri32, ptr %4263, align 8
  %4264 = call ptr @llvm.invariant.start.p0(i64 1, ptr %1334)
  %4265 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %4266 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %4267 = getelementptr { ptr }, ptr %1335, i32 0, i32 0
  store ptr %4258, ptr %4267, align 8
  %4268 = call ptr %4266(ptr %1335)
  call void %4268(ptr %1334, { ptr, i160 } %4262)
  store i32 3, ptr %1336, align 4
  %4269 = load i32, ptr %1336, align 4
  store i32 %4269, ptr %1337, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %1339, align 4
  %4270 = load i64, ptr %1339, align 4
  store i64 %4270, ptr %1338, align 4
  %4271 = load ptr, ptr %1338, align 8
  %4272 = insertvalue { ptr, i32 } undef, ptr %4271, 0
  %4273 = load i32, ptr %1337, align 4
  %4274 = insertvalue { ptr, i32 } %4272, i32 %4273, 1
  %4275 = load ptr, ptr %1327, align 8
  %4276 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i32 } }, ptr %4275, i32 0, i32 4
  store { ptr, i32 } %4274, ptr %4276, align 8
  %4277 = load ptr, ptr %1327, align 8
  %4278 = load ptr, ptr %1327, align 8
  call void @coroutine_call(ptr %4278)
  %4279 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i32 } }, ptr %4277, i32 0, i32 4
  %4280 = load { ptr, i32 }, ptr %4279, align 8
  store { ptr, i32 } %4280, ptr %1340, align 8
  %4281 = getelementptr { ptr, i32 }, ptr %1340, i32 0, i32 0
  %4282 = getelementptr { ptr, i32 }, ptr %1341, i32 0, i32 0
  %4283 = load ptr, ptr %4281, align 8
  store ptr %4283, ptr %4282, align 8
  %4284 = getelementptr { ptr, i32 }, ptr %1340, i32 0, i32 1
  %4285 = getelementptr { ptr, i32 }, ptr %1341, i32 0, i32 1
  %4286 = load i32, ptr %4284, align 4
  store i32 %4286, ptr %4285, align 4
  %4287 = getelementptr { ptr, i160 }, ptr %1341, i32 0, i32 0
  %4288 = load ptr, ptr %4287, align 8
  %4289 = insertvalue { ptr, i160 } undef, ptr %4288, 0
  %4290 = getelementptr { ptr, i160 }, ptr %1341, i32 0, i32 1
  %4291 = load i160, ptr %4290, align 4
  %4292 = insertvalue { ptr, i160 } %4289, i160 %4291, 1
  %4293 = getelementptr [1 x ptr], ptr %1342, i32 0, i32 0
  store ptr @_parameterization_Nil_or_Ptri32, ptr %4293, align 8
  %4294 = call ptr @llvm.invariant.start.p0(i64 1, ptr %1342)
  %4295 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %4296 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %4297 = getelementptr { ptr }, ptr %1343, i32 0, i32 0
  store ptr %4288, ptr %4297, align 8
  %4298 = call ptr %4296(ptr %1343)
  call void %4298(ptr %1342, { ptr, i160 } %4292)
  %4299 = load ptr, ptr %1216, align 8
  %4300 = call ptr @coroutine_create(ptr %4299, ptr @coroutine_eqxwithlrl_passer)
  call void @coroutine_eqxwithlrl_buffer_filler(ptr %4300)
  store ptr %4300, ptr %1344, align 8
  %4301 = getelementptr { ptr }, ptr %1344, i32 0, i32 0
  %4302 = getelementptr { ptr }, ptr %1345, i32 0, i32 0
  %4303 = load ptr, ptr %4301, align 8
  store ptr %4303, ptr %4302, align 8
  %4304 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1345)
  %4305 = load ptr, ptr %1345, align 8
  %4306 = load ptr, ptr %1345, align 8
  call void @coroutine_call(ptr %4306)
  %4307 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %4305, i32 0, i32 4
  %4308 = load { ptr, i160 }, ptr %4307, align 8
  store { ptr, i160 } %4308, ptr %1346, align 8
  %4309 = load ptr, ptr %1345, align 8
  %4310 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i32 } }, ptr %4309, i32 0, i32 4
  %4311 = load { ptr, i32 }, ptr %4310, align 8
  store { ptr, i32 } %4311, ptr %1347, align 8
  %4312 = getelementptr { ptr, i32 }, ptr %1347, i32 0, i32 0
  %4313 = getelementptr { ptr, i32 }, ptr %1348, i32 0, i32 0
  %4314 = load ptr, ptr %4312, align 8
  store ptr %4314, ptr %4313, align 8
  %4315 = getelementptr { ptr, i32 }, ptr %1347, i32 0, i32 1
  %4316 = getelementptr { ptr, i32 }, ptr %1348, i32 0, i32 1
  %4317 = load i32, ptr %4315, align 4
  store i32 %4317, ptr %4316, align 4
  %4318 = getelementptr { ptr, i160 }, ptr %1348, i32 0, i32 0
  %4319 = load ptr, ptr %4318, align 8
  %4320 = insertvalue { ptr, i160 } undef, ptr %4319, 0
  %4321 = getelementptr { ptr, i160 }, ptr %1348, i32 0, i32 1
  %4322 = load i160, ptr %4321, align 4
  %4323 = insertvalue { ptr, i160 } %4320, i160 %4322, 1
  %4324 = getelementptr [1 x ptr], ptr %1349, i32 0, i32 0
  store ptr @_parameterization_Nil_or_Ptri32, ptr %4324, align 8
  %4325 = call ptr @llvm.invariant.start.p0(i64 1, ptr %1349)
  %4326 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %4327 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %4328 = getelementptr { ptr }, ptr %1350, i32 0, i32 0
  store ptr %4319, ptr %4328, align 8
  %4329 = call ptr %4327(ptr %1350)
  call void %4329(ptr %1349, { ptr, i160 } %4323)
  %4330 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr, i32 } }, ptr null, i32 1) to i64))
  %4331 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1351, i32 0, i32 1
  %4332 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1351, i32 0, i32 3
  store ptr @Channel, ptr %1351, align 8
  store ptr %4330, ptr %4331, align 8
  store i32 7, ptr %4332, align 4
  %4333 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1351)
  %4334 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1351, i32 0, i32 0
  %4335 = load ptr, ptr %4334, align 8
  %4336 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4335, 0
  %4337 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1351, i32 0, i32 1
  %4338 = load ptr, ptr %4337, align 8
  %4339 = insertvalue { ptr, ptr, ptr, i32 } %4336, ptr %4338, 1
  %4340 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1351, i32 0, i32 2
  %4341 = load ptr, ptr %4340, align 8
  %4342 = insertvalue { ptr, ptr, ptr, i32 } %4339, ptr %4341, 2
  %4343 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1351, i32 0, i32 3
  %4344 = load i32, ptr %4343, align 4
  %4345 = insertvalue { ptr, ptr, ptr, i32 } %4342, i32 %4344, 3
  %4346 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1352)
  %4347 = call ptr @llvm.invariant.start.p0(i64 56, ptr %4335)
  %4348 = getelementptr ptr, ptr %4335, i32 %4344
  %4349 = getelementptr ptr, ptr %4348, i32 1
  %4350 = load ptr, ptr %4349, align 8
  %4351 = call ptr %4350({ ptr, ptr, ptr, i32 } %4345, ptr %1353)
  call void %4351({ ptr, ptr, ptr, i32 } %4345, { ptr, ptr, ptr, i32 } %4345, ptr %1352)
  %4352 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1351, i32 0, i32 0
  %4353 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1354, i32 0, i32 0
  %4354 = load ptr, ptr %4352, align 8
  store ptr %4354, ptr %4353, align 8
  %4355 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1351, i32 0, i32 1
  %4356 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1354, i32 0, i32 1
  %4357 = load ptr, ptr %4355, align 8
  store ptr %4357, ptr %4356, align 8
  %4358 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1351, i32 0, i32 2
  %4359 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1354, i32 0, i32 2
  %4360 = load ptr, ptr %4358, align 8
  store ptr %4360, ptr %4359, align 8
  %4361 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1351, i32 0, i32 3
  %4362 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1354, i32 0, i32 3
  %4363 = load i32, ptr %4361, align 4
  store i32 %4363, ptr %4362, align 4
  call void @set_offset(ptr %1354, ptr @Channel)
  %4364 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1354, i32 0, i32 0
  %4365 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1355, i32 0, i32 0
  %4366 = load ptr, ptr %4364, align 8
  store ptr %4366, ptr %4365, align 8
  %4367 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1354, i32 0, i32 1
  %4368 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1355, i32 0, i32 1
  %4369 = load ptr, ptr %4367, align 8
  store ptr %4369, ptr %4368, align 8
  %4370 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1354, i32 0, i32 2
  %4371 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1355, i32 0, i32 2
  %4372 = load ptr, ptr %4370, align 8
  store ptr %4372, ptr %4371, align 8
  %4373 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1354, i32 0, i32 3
  %4374 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1355, i32 0, i32 3
  %4375 = load i32, ptr %4373, align 4
  store i32 %4375, ptr %4374, align 4
  %4376 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1355)
  store ptr @_functionliteral_jdpxdssrdc, ptr %1356, align 8
  %4377 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1355, i32 0, i32 0
  %4378 = load ptr, ptr %4377, align 8
  %4379 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4378, 0
  %4380 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1355, i32 0, i32 1
  %4381 = load ptr, ptr %4380, align 8
  %4382 = insertvalue { ptr, ptr, ptr, i32 } %4379, ptr %4381, 1
  %4383 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1355, i32 0, i32 2
  %4384 = load ptr, ptr %4383, align 8
  %4385 = insertvalue { ptr, ptr, ptr, i32 } %4382, ptr %4384, 2
  %4386 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1355, i32 0, i32 3
  %4387 = load i32, ptr %4386, align 4
  %4388 = insertvalue { ptr, ptr, ptr, i32 } %4385, i32 %4387, 3
  %4389 = load ptr, ptr %1356, align 8
  %4390 = call ptr @coroutine_create(ptr %4389, ptr @coroutine_xhbxxqtegq_passer)
  call void @coroutine_xhbxxqtegq_buffer_filler(ptr %4390, { ptr, ptr, ptr, i32 } %4388)
  store ptr %4390, ptr %1357, align 8
  %4391 = getelementptr { ptr }, ptr %1357, i32 0, i32 0
  %4392 = getelementptr { ptr }, ptr %1358, i32 0, i32 0
  %4393 = load ptr, ptr %4391, align 8
  store ptr %4393, ptr %4392, align 8
  %4394 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1358)
  %4395 = load ptr, ptr %1358, align 8
  %4396 = load ptr, ptr %1358, align 8
  call void @coroutine_call(ptr %4396)
  %4397 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %4395, i32 0, i32 4
  %4398 = load { ptr, i160 }, ptr %4397, align 8
  store { ptr, i160 } %4398, ptr %1359, align 8
  %4399 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1355, i32 0, i32 0
  %4400 = load ptr, ptr %4399, align 8
  %4401 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4400, 0
  %4402 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1355, i32 0, i32 1
  %4403 = load ptr, ptr %4402, align 8
  %4404 = insertvalue { ptr, ptr, ptr, i32 } %4401, ptr %4403, 1
  %4405 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1355, i32 0, i32 2
  %4406 = load ptr, ptr %4405, align 8
  %4407 = insertvalue { ptr, ptr, ptr, i32 } %4404, ptr %4406, 2
  %4408 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1355, i32 0, i32 3
  %4409 = load i32, ptr %4408, align 4
  %4410 = insertvalue { ptr, ptr, ptr, i32 } %4407, i32 %4409, 3
  %4411 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1360)
  %4412 = call ptr @llvm.invariant.start.p0(i64 56, ptr %4400)
  %4413 = getelementptr ptr, ptr %4400, i32 %4409
  %4414 = getelementptr ptr, ptr %4413, i32 2
  %4415 = load ptr, ptr %4414, align 8
  %4416 = call ptr %4415({ ptr, ptr, ptr, i32 } %4410, ptr %1361)
  %4417 = call i32 %4416({ ptr, ptr, ptr, i32 } %4410, { ptr, ptr, ptr, i32 } %4410, ptr %1360)
  store i32 %4417, ptr %1362, align 4
  %4418 = load i32, ptr %1362, align 4
  store i32 %4418, ptr %1363, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %1365, align 4
  %4419 = load i64, ptr %1365, align 4
  store i64 %4419, ptr %1364, align 4
  %4420 = load ptr, ptr %1364, align 8
  %4421 = insertvalue { ptr, i160 } undef, ptr %4420, 0
  %4422 = load i160, ptr %1363, align 4
  %4423 = insertvalue { ptr, i160 } %4421, i160 %4422, 1
  %4424 = getelementptr [1 x ptr], ptr %1366, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %4424, align 8
  %4425 = call ptr @llvm.invariant.start.p0(i64 1, ptr %1366)
  %4426 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %4427 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %4428 = getelementptr { ptr }, ptr %1367, i32 0, i32 0
  store ptr %4420, ptr %4428, align 8
  %4429 = call ptr %4427(ptr %1367)
  call void %4429(ptr %1366, { ptr, i160 } %4423)
  store i32 0, ptr %1368, align 4
  %4430 = load i32, ptr %1368, align 4
  %4431 = getelementptr { ptr }, ptr %1214, i32 0, i32 0
  %4432 = load ptr, ptr %4431, align 8
  %4433 = insertvalue { ptr } undef, ptr %4432, 0
  store ptr @_functionliteral_ihfnkenxtj, ptr %1369, align 8
  %4434 = getelementptr { ptr }, ptr %1369, i32 0, i32 0
  %4435 = load ptr, ptr %4434, align 8
  %4436 = insertvalue { ptr } undef, ptr %4435, 0
  store ptr @_functionliteral_tanqdxfvkj, ptr %1370, align 8
  %4437 = getelementptr { ptr }, ptr %1370, i32 0, i32 0
  %4438 = load ptr, ptr %4437, align 8
  %4439 = insertvalue { ptr } undef, ptr %4438, 0
  store i32 1, ptr %1371, align 4
  store i32 15, ptr %1372, align 4
  %4440 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ i32, i32, i32 }, ptr null, i32 1) to i64))
  %4441 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1373, i32 0, i32 1
  %4442 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1373, i32 0, i32 3
  store ptr @Range, ptr %1373, align 8
  store ptr %4440, ptr %4441, align 8
  store i32 7, ptr %4442, align 4
  %4443 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1373)
  store i32 1, ptr %1374, align 4
  store i32 15, ptr %1375, align 4
  %4444 = load i32, ptr %1374, align 4
  %4445 = load i32, ptr %1375, align 4
  %4446 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1373, i32 0, i32 0
  %4447 = load ptr, ptr %4446, align 8
  %4448 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4447, 0
  %4449 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1373, i32 0, i32 1
  %4450 = load ptr, ptr %4449, align 8
  %4451 = insertvalue { ptr, ptr, ptr, i32 } %4448, ptr %4450, 1
  %4452 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1373, i32 0, i32 2
  %4453 = load ptr, ptr %4452, align 8
  %4454 = insertvalue { ptr, ptr, ptr, i32 } %4451, ptr %4453, 2
  %4455 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1373, i32 0, i32 3
  %4456 = load i32, ptr %4455, align 4
  %4457 = insertvalue { ptr, ptr, ptr, i32 } %4454, i32 %4456, 3
  %4458 = getelementptr [2 x ptr], ptr %1376, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %4458, align 8
  %4459 = getelementptr [2 x ptr], ptr %1376, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %4459, align 8
  %4460 = call ptr @llvm.invariant.start.p0(i64 4, ptr %1376)
  %4461 = call ptr @llvm.invariant.start.p0(i64 456, ptr %4447)
  %4462 = getelementptr ptr, ptr %4447, i32 %4456
  %4463 = getelementptr ptr, ptr %4462, i32 4
  %4464 = load ptr, ptr %4463, align 8
  %4465 = getelementptr { ptr, ptr }, ptr %1377, i32 0, i32 0
  store ptr @i32_typ, ptr %4465, align 8
  %4466 = getelementptr { ptr, ptr }, ptr %1377, i32 0, i32 1
  store ptr @i32_typ, ptr %4466, align 8
  %4467 = call ptr %4464({ ptr, ptr, ptr, i32 } %4457, ptr %1377)
  call void %4467({ ptr, ptr, ptr, i32 } %4457, { ptr, ptr, ptr, i32 } %4457, ptr %1376, i32 %4444, i32 %4445)
  %4468 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1373, i32 0, i32 0
  %4469 = load ptr, ptr %4468, align 8
  %4470 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4469, 0
  %4471 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1373, i32 0, i32 1
  %4472 = load ptr, ptr %4471, align 8
  %4473 = insertvalue { ptr, ptr, ptr, i32 } %4470, ptr %4472, 1
  %4474 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1373, i32 0, i32 2
  %4475 = load ptr, ptr %4474, align 8
  %4476 = insertvalue { ptr, ptr, ptr, i32 } %4473, ptr %4475, 2
  %4477 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1373, i32 0, i32 3
  %4478 = load i32, ptr %4477, align 4
  %4479 = insertvalue { ptr, ptr, ptr, i32 } %4476, i32 %4478, 3
  %4480 = getelementptr [1 x ptr], ptr %1378, i32 0, i32 0
  store ptr @_parameterization_FunctionPtri32_to_Ptri32, ptr %4480, align 8
  %4481 = call ptr @llvm.invariant.start.p0(i64 1, ptr %1378)
  %4482 = call ptr @llvm.invariant.start.p0(i64 456, ptr %4469)
  %4483 = getelementptr ptr, ptr %4469, i32 %4478
  %4484 = getelementptr ptr, ptr %4483, i32 10
  %4485 = load ptr, ptr %4484, align 8
  %4486 = getelementptr { ptr }, ptr %1379, i32 0, i32 0
  store ptr @function_typ, ptr %4486, align 8
  %4487 = call ptr %4485({ ptr, ptr, ptr, i32 } %4479, ptr %1379)
  %4488 = call { ptr, ptr, ptr, i32 } %4487({ ptr, ptr, ptr, i32 } %4479, { ptr, ptr, ptr, i32 } %4479, ptr %1378, { ptr } %4439)
  store { ptr, ptr, ptr, i32 } %4488, ptr %1380, align 8
  %4489 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1380)
  %4490 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1380, i32 0, i32 0
  %4491 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1381, i32 0, i32 0
  %4492 = load ptr, ptr %4490, align 8
  store ptr %4492, ptr %4491, align 8
  %4493 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1380, i32 0, i32 1
  %4494 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1381, i32 0, i32 1
  %4495 = load ptr, ptr %4493, align 8
  store ptr %4495, ptr %4494, align 8
  %4496 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1380, i32 0, i32 2
  %4497 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1381, i32 0, i32 2
  %4498 = load ptr, ptr %4496, align 8
  store ptr %4498, ptr %4497, align 8
  %4499 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1380, i32 0, i32 3
  %4500 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1381, i32 0, i32 3
  %4501 = load i32, ptr %4499, align 4
  store i32 %4501, ptr %4500, align 4
  call void @set_offset(ptr %1381, ptr @IntIterable)
  %4502 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1381, i32 0, i32 0
  %4503 = load ptr, ptr %4502, align 8
  %4504 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4503, 0
  %4505 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1381, i32 0, i32 1
  %4506 = load ptr, ptr %4505, align 8
  %4507 = insertvalue { ptr, ptr, ptr, i32 } %4504, ptr %4506, 1
  %4508 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1381, i32 0, i32 2
  %4509 = load ptr, ptr %4508, align 8
  %4510 = insertvalue { ptr, ptr, ptr, i32 } %4507, ptr %4509, 2
  %4511 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1381, i32 0, i32 3
  %4512 = load i32, ptr %4511, align 4
  %4513 = insertvalue { ptr, ptr, ptr, i32 } %4510, i32 %4512, 3
  %4514 = getelementptr [1 x ptr], ptr %1382, i32 0, i32 0
  store ptr @_parameterization_FunctionPtri32_to_Ptri1, ptr %4514, align 8
  %4515 = call ptr @llvm.invariant.start.p0(i64 1, ptr %1382)
  %4516 = call ptr @llvm.invariant.start.p0(i64 192, ptr %4503)
  %4517 = getelementptr ptr, ptr %4503, i32 %4512
  %4518 = getelementptr ptr, ptr %4517, i32 5
  %4519 = load ptr, ptr %4518, align 8
  %4520 = getelementptr { ptr }, ptr %1383, i32 0, i32 0
  store ptr @function_typ, ptr %4520, align 8
  %4521 = call ptr %4519({ ptr, ptr, ptr, i32 } %4513, ptr %1383)
  %4522 = call { ptr, ptr, ptr, i32 } %4521({ ptr, ptr, ptr, i32 } %4513, { ptr, ptr, ptr, i32 } %4513, ptr %1382, { ptr } %4436)
  store { ptr, ptr, ptr, i32 } %4522, ptr %1384, align 8
  %4523 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1384)
  %4524 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1384, i32 0, i32 0
  %4525 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1385, i32 0, i32 0
  %4526 = load ptr, ptr %4524, align 8
  store ptr %4526, ptr %4525, align 8
  %4527 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1384, i32 0, i32 1
  %4528 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1385, i32 0, i32 1
  %4529 = load ptr, ptr %4527, align 8
  store ptr %4529, ptr %4528, align 8
  %4530 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1384, i32 0, i32 2
  %4531 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1385, i32 0, i32 2
  %4532 = load ptr, ptr %4530, align 8
  store ptr %4532, ptr %4531, align 8
  %4533 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1384, i32 0, i32 3
  %4534 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1385, i32 0, i32 3
  %4535 = load i32, ptr %4533, align 4
  store i32 %4535, ptr %4534, align 4
  call void @set_offset(ptr %1385, ptr @IntIterable)
  %4536 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1385, i32 0, i32 0
  %4537 = load ptr, ptr %4536, align 8
  %4538 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4537, 0
  %4539 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1385, i32 0, i32 1
  %4540 = load ptr, ptr %4539, align 8
  %4541 = insertvalue { ptr, ptr, ptr, i32 } %4538, ptr %4540, 1
  %4542 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1385, i32 0, i32 2
  %4543 = load ptr, ptr %4542, align 8
  %4544 = insertvalue { ptr, ptr, ptr, i32 } %4541, ptr %4543, 2
  %4545 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1385, i32 0, i32 3
  %4546 = load i32, ptr %4545, align 4
  %4547 = insertvalue { ptr, ptr, ptr, i32 } %4544, i32 %4546, 3
  %4548 = getelementptr [2 x ptr], ptr %1386, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %4548, align 8
  %4549 = getelementptr [2 x ptr], ptr %1386, i32 0, i32 1
  store ptr @_parameterization_FunctionPtri32._Ptri32_to_Ptri32, ptr %4549, align 8
  %4550 = call ptr @llvm.invariant.start.p0(i64 4, ptr %1386)
  %4551 = call ptr @llvm.invariant.start.p0(i64 192, ptr %4537)
  %4552 = getelementptr ptr, ptr %4537, i32 %4546
  %4553 = getelementptr ptr, ptr %4552, i32 1
  %4554 = load ptr, ptr %4553, align 8
  %4555 = getelementptr { ptr, ptr }, ptr %1387, i32 0, i32 0
  store ptr @i32_typ, ptr %4555, align 8
  %4556 = getelementptr { ptr, ptr }, ptr %1387, i32 0, i32 1
  store ptr @function_typ, ptr %4556, align 8
  %4557 = call ptr %4554({ ptr, ptr, ptr, i32 } %4547, ptr %1387)
  %4558 = call i32 %4557({ ptr, ptr, ptr, i32 } %4547, { ptr, ptr, ptr, i32 } %4547, ptr %1386, i32 %4430, { ptr } %4433)
  store i32 %4558, ptr %1388, align 4
  %4559 = load i32, ptr %1388, align 4
  store i32 %4559, ptr %1389, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %1391, align 4
  %4560 = load i64, ptr %1391, align 4
  store i64 %4560, ptr %1390, align 4
  %4561 = load ptr, ptr %1390, align 8
  %4562 = insertvalue { ptr, i160 } undef, ptr %4561, 0
  %4563 = load i160, ptr %1389, align 4
  %4564 = insertvalue { ptr, i160 } %4562, i160 %4563, 1
  %4565 = getelementptr [1 x ptr], ptr %1392, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %4565, align 8
  %4566 = call ptr @llvm.invariant.start.p0(i64 1, ptr %1392)
  %4567 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %4568 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %4569 = getelementptr { ptr }, ptr %1393, i32 0, i32 0
  store ptr %4561, ptr %4569, align 8
  %4570 = call ptr %4568(ptr %1393)
  call void %4570(ptr %1392, { ptr, i160 } %4564)
  store i32 256, ptr %1394, align 4
  %4571 = load i32, ptr %1394, align 4
  store i32 %4571, ptr %1395, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %1397, align 4
  %4572 = load i64, ptr %1397, align 4
  store i64 %4572, ptr %1396, align 4
  %4573 = load ptr, ptr %1396, align 8
  %4574 = insertvalue { ptr, i160 } undef, ptr %4573, 0
  %4575 = load i160, ptr %1395, align 4
  %4576 = insertvalue { ptr, i160 } %4574, i160 %4575, 1
  %4577 = getelementptr [1 x ptr], ptr %1398, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %4577, align 8
  %4578 = call ptr @llvm.invariant.start.p0(i64 1, ptr %1398)
  %4579 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %4580 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %4581 = getelementptr { ptr }, ptr %1399, i32 0, i32 0
  store ptr %4573, ptr %4581, align 8
  %4582 = call ptr %4580(ptr %1399)
  call void %4582(ptr %1398, { ptr, i160 } %4576)
  store i32 4, ptr %1400, align 4
  store i32 5, ptr %1401, align 4
  store i32 6, ptr %1402, align 4
  %4583 = load i32, ptr %1400, align 4
  %4584 = load i32, ptr %1401, align 4
  %4585 = load i32, ptr %1402, align 4
  store i32 %4583, ptr %1405, align 4
  store i32 %4584, ptr %1403, align 4
  store i32 %4585, ptr %1404, align 4
  %4586 = load i32, ptr %1403, align 4
  store i32 %4586, ptr %1406, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %1408, align 4
  %4587 = load i64, ptr %1408, align 4
  store i64 %4587, ptr %1407, align 4
  %4588 = load ptr, ptr %1407, align 8
  %4589 = insertvalue { ptr, i160 } undef, ptr %4588, 0
  %4590 = load i160, ptr %1406, align 4
  %4591 = insertvalue { ptr, i160 } %4589, i160 %4590, 1
  %4592 = getelementptr [1 x ptr], ptr %1409, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %4592, align 8
  %4593 = call ptr @llvm.invariant.start.p0(i64 1, ptr %1409)
  %4594 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %4595 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %4596 = getelementptr { ptr }, ptr %1410, i32 0, i32 0
  store ptr %4588, ptr %4596, align 8
  %4597 = call ptr %4595(ptr %1410)
  call void %4597(ptr %1409, { ptr, i160 } %4591)
  store i32 4, ptr %1411, align 4
  %4598 = load i32, ptr %1411, align 4
  store i32 4, ptr %1412, align 4
  %4599 = load i32, ptr %1412, align 4
  %4600 = getelementptr i32, ptr null, i32 %4599
  %4601 = ptrtoint ptr %4600 to i64
  %4602 = call ptr @bump_malloc(i64 %4601)
  store ptr %4602, ptr %1413, align 8
  %4603 = getelementptr { ptr }, ptr %1413, i32 0, i32 0
  %4604 = getelementptr { ptr }, ptr %1414, i32 0, i32 0
  %4605 = load ptr, ptr %4603, align 8
  store ptr %4605, ptr %4604, align 8
  %4606 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1414)
  store i32 4, ptr %1415, align 4
  store i32 0, ptr %1416, align 4
  %4607 = load ptr, ptr %1414, align 8
  %4608 = load i32, ptr %1416, align 4
  %4609 = getelementptr i32, ptr null, i32 %4608
  %4610 = ptrtoint ptr %4609 to i64
  %4611 = getelementptr i8, ptr %4607, i64 %4610
  %4612 = load i32, ptr %1415, align 4
  store i32 %4612, ptr %4611, align 4
  store i32 5, ptr %1417, align 4
  store i32 1, ptr %1418, align 4
  %4613 = load ptr, ptr %1414, align 8
  %4614 = load i32, ptr %1418, align 4
  %4615 = getelementptr i32, ptr null, i32 %4614
  %4616 = ptrtoint ptr %4615 to i64
  %4617 = getelementptr i8, ptr %4613, i64 %4616
  %4618 = load i32, ptr %1417, align 4
  store i32 %4618, ptr %4617, align 4
  store i32 6, ptr %1419, align 4
  store i32 2, ptr %1420, align 4
  %4619 = load ptr, ptr %1414, align 8
  %4620 = load i32, ptr %1420, align 4
  %4621 = getelementptr i32, ptr null, i32 %4620
  %4622 = ptrtoint ptr %4621 to i64
  %4623 = getelementptr i8, ptr %4619, i64 %4622
  %4624 = load i32, ptr %1419, align 4
  store i32 %4624, ptr %4623, align 4
  store i32 3, ptr %1421, align 4
  store i32 4, ptr %1422, align 4
  %4625 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %4626 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1423, i32 0, i32 1
  %4627 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1423, i32 0, i32 3
  store ptr @IntArray, ptr %1423, align 8
  store ptr %4625, ptr %4626, align 8
  store i32 7, ptr %4627, align 4
  %4628 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1423)
  store i32 3, ptr %1424, align 4
  store i32 4, ptr %1425, align 4
  %4629 = getelementptr { ptr }, ptr %1414, i32 0, i32 0
  %4630 = load ptr, ptr %4629, align 8
  %4631 = insertvalue { ptr } undef, ptr %4630, 0
  %4632 = load i32, ptr %1424, align 4
  %4633 = load i32, ptr %1425, align 4
  %4634 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1423, i32 0, i32 0
  %4635 = load ptr, ptr %4634, align 8
  %4636 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4635, 0
  %4637 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1423, i32 0, i32 1
  %4638 = load ptr, ptr %4637, align 8
  %4639 = insertvalue { ptr, ptr, ptr, i32 } %4636, ptr %4638, 1
  %4640 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1423, i32 0, i32 2
  %4641 = load ptr, ptr %4640, align 8
  %4642 = insertvalue { ptr, ptr, ptr, i32 } %4639, ptr %4641, 2
  %4643 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1423, i32 0, i32 3
  %4644 = load i32, ptr %4643, align 4
  %4645 = insertvalue { ptr, ptr, ptr, i32 } %4642, i32 %4644, 3
  %4646 = getelementptr [3 x ptr], ptr %1426, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %4646, align 8
  %4647 = getelementptr [3 x ptr], ptr %1426, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %4647, align 8
  %4648 = getelementptr [3 x ptr], ptr %1426, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %4648, align 8
  %4649 = call ptr @llvm.invariant.start.p0(i64 9, ptr %1426)
  %4650 = call ptr @llvm.invariant.start.p0(i64 616, ptr %4635)
  %4651 = getelementptr ptr, ptr %4635, i32 %4644
  %4652 = getelementptr ptr, ptr %4651, i32 5
  %4653 = load ptr, ptr %4652, align 8
  %4654 = getelementptr { ptr, ptr, ptr }, ptr %1427, i32 0, i32 0
  store ptr @buffer_typ, ptr %4654, align 8
  %4655 = getelementptr { ptr, ptr, ptr }, ptr %1427, i32 0, i32 1
  store ptr @i32_typ, ptr %4655, align 8
  %4656 = getelementptr { ptr, ptr, ptr }, ptr %1427, i32 0, i32 2
  store ptr @i32_typ, ptr %4656, align 8
  %4657 = call ptr %4653({ ptr, ptr, ptr, i32 } %4645, ptr %1427)
  call void %4657({ ptr, ptr, ptr, i32 } %4645, { ptr, ptr, ptr, i32 } %4645, ptr %1426, { ptr } %4631, i32 %4632, i32 %4633)
  %4658 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1423, i32 0, i32 0
  %4659 = load ptr, ptr %4658, align 8
  %4660 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4659, 0
  %4661 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1423, i32 0, i32 1
  %4662 = load ptr, ptr %4661, align 8
  %4663 = insertvalue { ptr, ptr, ptr, i32 } %4660, ptr %4662, 1
  %4664 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1423, i32 0, i32 2
  %4665 = load ptr, ptr %4664, align 8
  %4666 = insertvalue { ptr, ptr, ptr, i32 } %4663, ptr %4665, 2
  %4667 = getelementptr { ptr, ptr, ptr, i32 }, ptr %1423, i32 0, i32 3
  %4668 = load i32, ptr %4667, align 4
  %4669 = insertvalue { ptr, ptr, ptr, i32 } %4666, i32 %4668, 3
  %4670 = getelementptr [1 x ptr], ptr %1428, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %4670, align 8
  %4671 = call ptr @llvm.invariant.start.p0(i64 1, ptr %1428)
  %4672 = call ptr @llvm.invariant.start.p0(i64 616, ptr %4659)
  %4673 = getelementptr ptr, ptr %4659, i32 %4668
  %4674 = getelementptr ptr, ptr %4673, i32 11
  %4675 = load ptr, ptr %4674, align 8
  %4676 = getelementptr { ptr }, ptr %1429, i32 0, i32 0
  store ptr @i32_typ, ptr %4676, align 8
  %4677 = call ptr %4675({ ptr, ptr, ptr, i32 } %4669, ptr %1429)
  %4678 = call i32 %4677({ ptr, ptr, ptr, i32 } %4669, { ptr, ptr, ptr, i32 } %4669, ptr %1428, i32 %4598)
  store i32 %4678, ptr %1430, align 4
  ret i32 0
}

declare i64 @clock()

define ptr @OutOfBoundsDetails_B_init_boundsPtri32_indexPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [6 x ptr], ptr %26, i32 0, i32 4
  %28 = getelementptr ptr, ptr %27, i32 7
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @OutOfBoundsDetails_B_report_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [6 x ptr], ptr %4, i32 0, i32 5
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @OutOfBoundsDetails_init_boundsPtri32_indexPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3, i32 %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @OutOfBoundsDetails)
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %22 = load ptr, ptr %21, align 8
  %23 = load ptr, ptr %8, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 48, ptr %23)
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %26 = load i32, ptr %25, align 4
  %27 = getelementptr ptr, ptr %23, i32 %26
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr { ptr, ptr }, ptr %28, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  call void %30(ptr %22, i32 %3)
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %32 = load ptr, ptr %31, align 8
  %33 = load ptr, ptr %8, align 8
  %34 = call ptr @llvm.invariant.start.p0(i64 48, ptr %33)
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %36 = load i32, ptr %35, align 4
  %37 = getelementptr ptr, ptr %33, i32 %36
  %38 = getelementptr ptr, ptr %37, i32 1
  %39 = load ptr, ptr %38, align 8
  %40 = getelementptr { ptr, ptr }, ptr %39, i32 0, i32 1
  %41 = load ptr, ptr %40, align 8
  call void %41(ptr %32, i32 %4)
  ret void
}

define void @OutOfBoundsDetails_report_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @OutOfBoundsDetails)
  %19 = alloca ptr, align 8
  %20 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 45) to i64))
  store ptr %20, ptr %19, align 8
  %21 = alloca { ptr }, align 8
  %22 = getelementptr { ptr }, ptr %19, i32 0, i32 0
  %23 = getelementptr { ptr }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %26 = load ptr, ptr %21, align 8
  %27 = getelementptr i8, ptr %26, i64 0
  %28 = load i352, ptr @iwfhc_The_size_of_the_collection_being_indexed_was, align 4
  store i352 %28, ptr %27, align 4
  %29 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  store ptr @String, ptr %30, align 8
  store ptr %29, ptr %31, align 8
  store i32 7, ptr %32, align 4
  %33 = call ptr @llvm.invariant.start.p0(i64 16, ptr %30)
  %34 = getelementptr { ptr }, ptr %21, i32 0, i32 0
  %35 = load ptr, ptr %34, align 8
  %36 = insertvalue { ptr } undef, ptr %35, 0
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %38 = load ptr, ptr %37, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %38, 0
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %41 = load ptr, ptr %40, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } %39, ptr %41, 1
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %44 = load ptr, ptr %43, align 8
  %45 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %44, 2
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %47 = load i32, ptr %46, align 4
  %48 = insertvalue { ptr, ptr, ptr, i32 } %45, i32 %47, 3
  %49 = alloca [3 x ptr], align 8
  %50 = getelementptr [3 x ptr], ptr %49, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %50, align 8
  %51 = getelementptr [3 x ptr], ptr %49, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %51, align 8
  %52 = getelementptr [3 x ptr], ptr %49, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %52, align 8
  %53 = call ptr @llvm.invariant.start.p0(i64 9, ptr %49)
  %54 = call ptr @llvm.invariant.start.p0(i64 280, ptr %38)
  %55 = getelementptr ptr, ptr %38, i32 %47
  %56 = getelementptr ptr, ptr %55, i32 4
  %57 = load ptr, ptr %56, align 8
  %58 = alloca { ptr, ptr, ptr }, align 8
  %59 = getelementptr { ptr, ptr, ptr }, ptr %58, i32 0, i32 0
  store ptr @buffer_typ, ptr %59, align 8
  %60 = getelementptr { ptr, ptr, ptr }, ptr %58, i32 0, i32 1
  store ptr @i32_typ, ptr %60, align 8
  %61 = getelementptr { ptr, ptr, ptr }, ptr %58, i32 0, i32 2
  store ptr @i32_typ, ptr %61, align 8
  %62 = call ptr %57({ ptr, ptr, ptr, i32 } %48, ptr %58)
  call void %62({ ptr, ptr, ptr, i32 } %48, { ptr, ptr, ptr, i32 } %48, ptr %49, { ptr } %36, i32 44, i32 45)
  %63 = getelementptr { ptr, i160 }, ptr %30, i32 0, i32 0
  %64 = load ptr, ptr %63, align 8
  %65 = insertvalue { ptr, i160 } undef, ptr %64, 0
  %66 = getelementptr { ptr, i160 }, ptr %30, i32 0, i32 1
  %67 = load i160, ptr %66, align 4
  %68 = insertvalue { ptr, i160 } %65, i160 %67, 1
  %69 = alloca [1 x ptr], align 8
  %70 = getelementptr [1 x ptr], ptr %69, i32 0, i32 0
  store ptr @_parameterization_String, ptr %70, align 8
  %71 = call ptr @llvm.invariant.start.p0(i64 1, ptr %69)
  %72 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %73 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %74 = alloca { ptr }, align 8
  %75 = getelementptr { ptr }, ptr %74, i32 0, i32 0
  store ptr %64, ptr %75, align 8
  %76 = call ptr %73(ptr %74)
  call void %76(ptr %69, { ptr, i160 } %68)
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %78 = load ptr, ptr %77, align 8
  %79 = load ptr, ptr %6, align 8
  %80 = call ptr @llvm.invariant.start.p0(i64 48, ptr %79)
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %82 = load i32, ptr %81, align 4
  %83 = getelementptr ptr, ptr %79, i32 %82
  %84 = load ptr, ptr %83, align 8
  %85 = getelementptr { ptr, ptr }, ptr %84, i32 0, i32 0
  %86 = load ptr, ptr %85, align 8
  %87 = call i32 %86(ptr %78)
  %88 = alloca i160, align 8
  %89 = alloca ptr, align 8
  store i32 %87, ptr %88, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %89, align 4
  %90 = load ptr, ptr %89, align 8
  %91 = insertvalue { ptr, i160 } undef, ptr %90, 0
  %92 = load i160, ptr %88, align 4
  %93 = insertvalue { ptr, i160 } %91, i160 %92, 1
  %94 = alloca [1 x ptr], align 8
  %95 = getelementptr [1 x ptr], ptr %94, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %95, align 8
  %96 = call ptr @llvm.invariant.start.p0(i64 1, ptr %94)
  %97 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %98 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %99 = alloca { ptr }, align 8
  %100 = getelementptr { ptr }, ptr %99, i32 0, i32 0
  store ptr %90, ptr %100, align 8
  %101 = call ptr %98(ptr %99)
  call void %101(ptr %94, { ptr, i160 } %93)
  %102 = alloca ptr, align 8
  %103 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 26) to i64))
  store ptr %103, ptr %102, align 8
  %104 = alloca { ptr }, align 8
  %105 = getelementptr { ptr }, ptr %102, i32 0, i32 0
  %106 = getelementptr { ptr }, ptr %104, i32 0, i32 0
  %107 = load ptr, ptr %105, align 8
  store ptr %107, ptr %106, align 8
  %108 = call ptr @llvm.invariant.start.p0(i64 16, ptr %104)
  %109 = load ptr, ptr %104, align 8
  %110 = getelementptr i8, ptr %109, i64 0
  %111 = load i200, ptr @kjkfy_The_indexing_argument_was, align 4
  store i200 %111, ptr %110, align 4
  %112 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %113 = alloca { ptr, ptr, ptr, i32 }, align 8
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %113, i32 0, i32 1
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %113, i32 0, i32 3
  store ptr @String, ptr %113, align 8
  store ptr %112, ptr %114, align 8
  store i32 7, ptr %115, align 4
  %116 = call ptr @llvm.invariant.start.p0(i64 16, ptr %113)
  %117 = getelementptr { ptr }, ptr %104, i32 0, i32 0
  %118 = load ptr, ptr %117, align 8
  %119 = insertvalue { ptr } undef, ptr %118, 0
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %113, i32 0, i32 0
  %121 = load ptr, ptr %120, align 8
  %122 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %121, 0
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %113, i32 0, i32 1
  %124 = load ptr, ptr %123, align 8
  %125 = insertvalue { ptr, ptr, ptr, i32 } %122, ptr %124, 1
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %113, i32 0, i32 2
  %127 = load ptr, ptr %126, align 8
  %128 = insertvalue { ptr, ptr, ptr, i32 } %125, ptr %127, 2
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %113, i32 0, i32 3
  %130 = load i32, ptr %129, align 4
  %131 = insertvalue { ptr, ptr, ptr, i32 } %128, i32 %130, 3
  %132 = alloca [3 x ptr], align 8
  %133 = getelementptr [3 x ptr], ptr %132, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %133, align 8
  %134 = getelementptr [3 x ptr], ptr %132, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %134, align 8
  %135 = getelementptr [3 x ptr], ptr %132, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %135, align 8
  %136 = call ptr @llvm.invariant.start.p0(i64 9, ptr %132)
  %137 = call ptr @llvm.invariant.start.p0(i64 280, ptr %121)
  %138 = getelementptr ptr, ptr %121, i32 %130
  %139 = getelementptr ptr, ptr %138, i32 4
  %140 = load ptr, ptr %139, align 8
  %141 = alloca { ptr, ptr, ptr }, align 8
  %142 = getelementptr { ptr, ptr, ptr }, ptr %141, i32 0, i32 0
  store ptr @buffer_typ, ptr %142, align 8
  %143 = getelementptr { ptr, ptr, ptr }, ptr %141, i32 0, i32 1
  store ptr @i32_typ, ptr %143, align 8
  %144 = getelementptr { ptr, ptr, ptr }, ptr %141, i32 0, i32 2
  store ptr @i32_typ, ptr %144, align 8
  %145 = call ptr %140({ ptr, ptr, ptr, i32 } %131, ptr %141)
  call void %145({ ptr, ptr, ptr, i32 } %131, { ptr, ptr, ptr, i32 } %131, ptr %132, { ptr } %119, i32 25, i32 26)
  %146 = getelementptr { ptr, i160 }, ptr %113, i32 0, i32 0
  %147 = load ptr, ptr %146, align 8
  %148 = insertvalue { ptr, i160 } undef, ptr %147, 0
  %149 = getelementptr { ptr, i160 }, ptr %113, i32 0, i32 1
  %150 = load i160, ptr %149, align 4
  %151 = insertvalue { ptr, i160 } %148, i160 %150, 1
  %152 = alloca [1 x ptr], align 8
  %153 = getelementptr [1 x ptr], ptr %152, i32 0, i32 0
  store ptr @_parameterization_String, ptr %153, align 8
  %154 = call ptr @llvm.invariant.start.p0(i64 1, ptr %152)
  %155 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %156 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %157 = alloca { ptr }, align 8
  %158 = getelementptr { ptr }, ptr %157, i32 0, i32 0
  store ptr %147, ptr %158, align 8
  %159 = call ptr %156(ptr %157)
  call void %159(ptr %152, { ptr, i160 } %151)
  %160 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %161 = load ptr, ptr %160, align 8
  %162 = load ptr, ptr %6, align 8
  %163 = call ptr @llvm.invariant.start.p0(i64 48, ptr %162)
  %164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %165 = load i32, ptr %164, align 4
  %166 = getelementptr ptr, ptr %162, i32 %165
  %167 = getelementptr ptr, ptr %166, i32 1
  %168 = load ptr, ptr %167, align 8
  %169 = getelementptr { ptr, ptr }, ptr %168, i32 0, i32 0
  %170 = load ptr, ptr %169, align 8
  %171 = call i32 %170(ptr %161)
  %172 = alloca i160, align 8
  %173 = alloca ptr, align 8
  store i32 %171, ptr %172, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %173, align 4
  %174 = load ptr, ptr %173, align 8
  %175 = insertvalue { ptr, i160 } undef, ptr %174, 0
  %176 = load i160, ptr %172, align 4
  %177 = insertvalue { ptr, i160 } %175, i160 %176, 1
  %178 = alloca [1 x ptr], align 8
  %179 = getelementptr [1 x ptr], ptr %178, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %179, align 8
  %180 = call ptr @llvm.invariant.start.p0(i64 1, ptr %178)
  %181 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %182 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %183 = alloca { ptr }, align 8
  %184 = getelementptr { ptr }, ptr %183, i32 0, i32 0
  store ptr %174, ptr %184, align 8
  %185 = call ptr %182(ptr %183)
  call void %185(ptr %178, { ptr, i160 } %177)
  ret void
}

define i32 @OutOfBoundsDetails_getter_index(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { i32, i32 }, ptr %0, i32 0, i32 1
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @OutOfBoundsDetails_setter_index(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { i32, i32 }, ptr %0, i32 0, i32 1
  store i32 %1, ptr %3, align 4
  ret void
}

define i32 @OutOfBoundsDetails_getter_bounds(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { i32, i32 }, ptr %0, i32 0, i32 0
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @OutOfBoundsDetails_setter_bounds(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { i32, i32 }, ptr %0, i32 0, i32 0
  store i32 %1, ptr %3, align 4
  ret void
}

define ptr @OutOfBounds_B_init_boundsPtri32_indexPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [29 x ptr], ptr %26, i32 0, i32 10
  %28 = getelementptr ptr, ptr %27, i32 7
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @OutOfBounds_B_init_messageString({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [29 x ptr], ptr %15, i32 0, i32 11
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @OutOfBounds_B_init_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [29 x ptr], ptr %4, i32 0, i32 12
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @OutOfBounds_B_set_info_line_numberPtri32_file_nameString({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [29 x ptr], ptr %26, i32 0, i32 13
  %28 = getelementptr ptr, ptr %27, i32 7
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @OutOfBounds_B_report_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [29 x ptr], ptr %4, i32 0, i32 14
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @OutOfBounds_B_print_message_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [29 x ptr], ptr %4, i32 0, i32 15
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @OutOfBounds_init_boundsPtri32_indexPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3, i32 %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @OutOfBounds)
  %21 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ i32, i32 }, ptr null, i32 1) to i64))
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  store ptr @OutOfBoundsDetails, ptr %22, align 8
  store ptr %21, ptr %23, align 8
  store i32 7, ptr %24, align 4
  %25 = call ptr @llvm.invariant.start.p0(i64 16, ptr %22)
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %27 = load ptr, ptr %26, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %27, 0
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } %28, ptr %30, 1
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %33, 2
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %36 = load i32, ptr %35, align 4
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, i32 %36, 3
  %38 = alloca [2 x ptr], align 8
  %39 = getelementptr [2 x ptr], ptr %38, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %39, align 8
  %40 = getelementptr [2 x ptr], ptr %38, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %40, align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 4, ptr %38)
  %42 = call ptr @llvm.invariant.start.p0(i64 48, ptr %27)
  %43 = getelementptr ptr, ptr %27, i32 %36
  %44 = getelementptr ptr, ptr %43, i32 2
  %45 = load ptr, ptr %44, align 8
  %46 = alloca { ptr, ptr }, align 8
  %47 = getelementptr { ptr, ptr }, ptr %46, i32 0, i32 0
  store ptr @i32_typ, ptr %47, align 8
  %48 = getelementptr { ptr, ptr }, ptr %46, i32 0, i32 1
  store ptr @i32_typ, ptr %48, align 8
  %49 = call ptr %45({ ptr, ptr, ptr, i32 } %37, ptr %46)
  call void %49({ ptr, ptr, ptr, i32 } %37, { ptr, ptr, ptr, i32 } %37, ptr %38, i32 %3, i32 %4)
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = load ptr, ptr %8, align 8
  %53 = call ptr @llvm.invariant.start.p0(i64 232, ptr %52)
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %55 = load i32, ptr %54, align 4
  %56 = getelementptr ptr, ptr %52, i32 %55
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr { ptr, ptr }, ptr %57, i32 0, i32 1
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr { ptr, i160 }, ptr %22, i32 0, i32 0
  %61 = load ptr, ptr %60, align 8
  %62 = insertvalue { ptr, i160 } undef, ptr %61, 0
  %63 = getelementptr { ptr, i160 }, ptr %22, i32 0, i32 1
  %64 = load i160, ptr %63, align 4
  %65 = insertvalue { ptr, i160 } %62, i160 %64, 1
  call void %59(ptr %51, { ptr, i160 } %65)
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %67 = load ptr, ptr %66, align 8
  %68 = load ptr, ptr %8, align 8
  %69 = call ptr @llvm.invariant.start.p0(i64 232, ptr %68)
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %71 = load i32, ptr %70, align 4
  %72 = getelementptr ptr, ptr %68, i32 %71
  %73 = getelementptr ptr, ptr %72, i32 1
  %74 = load ptr, ptr %73, align 8
  %75 = getelementptr { ptr, ptr }, ptr %74, i32 0, i32 1
  %76 = load ptr, ptr %75, align 8
  call void %76(ptr %67, i32 0)
  %77 = alloca ptr, align 8
  %78 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64))
  store ptr %78, ptr %77, align 8
  %79 = alloca { ptr }, align 8
  %80 = getelementptr { ptr }, ptr %77, i32 0, i32 0
  %81 = getelementptr { ptr }, ptr %79, i32 0, i32 0
  %82 = load ptr, ptr %80, align 8
  store ptr %82, ptr %81, align 8
  %83 = call ptr @llvm.invariant.start.p0(i64 16, ptr %79)
  %84 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %85 = alloca { ptr, ptr, ptr, i32 }, align 8
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %85, i32 0, i32 1
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %85, i32 0, i32 3
  store ptr @String, ptr %85, align 8
  store ptr %84, ptr %86, align 8
  store i32 7, ptr %87, align 4
  %88 = call ptr @llvm.invariant.start.p0(i64 16, ptr %85)
  %89 = getelementptr { ptr }, ptr %79, i32 0, i32 0
  %90 = load ptr, ptr %89, align 8
  %91 = insertvalue { ptr } undef, ptr %90, 0
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %85, i32 0, i32 0
  %93 = load ptr, ptr %92, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %93, 0
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %85, i32 0, i32 1
  %96 = load ptr, ptr %95, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr %96, 1
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %85, i32 0, i32 2
  %99 = load ptr, ptr %98, align 8
  %100 = insertvalue { ptr, ptr, ptr, i32 } %97, ptr %99, 2
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %85, i32 0, i32 3
  %102 = load i32, ptr %101, align 4
  %103 = insertvalue { ptr, ptr, ptr, i32 } %100, i32 %102, 3
  %104 = alloca [3 x ptr], align 8
  %105 = getelementptr [3 x ptr], ptr %104, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %105, align 8
  %106 = getelementptr [3 x ptr], ptr %104, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %106, align 8
  %107 = getelementptr [3 x ptr], ptr %104, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %107, align 8
  %108 = call ptr @llvm.invariant.start.p0(i64 9, ptr %104)
  %109 = call ptr @llvm.invariant.start.p0(i64 280, ptr %93)
  %110 = getelementptr ptr, ptr %93, i32 %102
  %111 = getelementptr ptr, ptr %110, i32 4
  %112 = load ptr, ptr %111, align 8
  %113 = alloca { ptr, ptr, ptr }, align 8
  %114 = getelementptr { ptr, ptr, ptr }, ptr %113, i32 0, i32 0
  store ptr @buffer_typ, ptr %114, align 8
  %115 = getelementptr { ptr, ptr, ptr }, ptr %113, i32 0, i32 1
  store ptr @i32_typ, ptr %115, align 8
  %116 = getelementptr { ptr, ptr, ptr }, ptr %113, i32 0, i32 2
  store ptr @i32_typ, ptr %116, align 8
  %117 = call ptr %112({ ptr, ptr, ptr, i32 } %103, ptr %113)
  call void %117({ ptr, ptr, ptr, i32 } %103, { ptr, ptr, ptr, i32 } %103, ptr %104, { ptr } %91, i32 0, i32 1)
  %118 = alloca { ptr, ptr, ptr, i32 }, align 8
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %85, i32 0, i32 0
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 0
  %121 = load ptr, ptr %119, align 8
  store ptr %121, ptr %120, align 8
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %85, i32 0, i32 1
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 1
  %124 = load ptr, ptr %122, align 8
  store ptr %124, ptr %123, align 8
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %85, i32 0, i32 2
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 2
  %127 = load ptr, ptr %125, align 8
  store ptr %127, ptr %126, align 8
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %85, i32 0, i32 3
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 3
  %130 = load i32, ptr %128, align 4
  store i32 %130, ptr %129, align 4
  call void @set_offset(ptr %118, ptr @String)
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %132 = load ptr, ptr %131, align 8
  %133 = load ptr, ptr %8, align 8
  %134 = call ptr @llvm.invariant.start.p0(i64 232, ptr %133)
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %136 = load i32, ptr %135, align 4
  %137 = getelementptr ptr, ptr %133, i32 %136
  %138 = getelementptr ptr, ptr %137, i32 2
  %139 = load ptr, ptr %138, align 8
  %140 = getelementptr { ptr, ptr }, ptr %139, i32 0, i32 1
  %141 = load ptr, ptr %140, align 8
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 0
  %143 = load ptr, ptr %142, align 8
  %144 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %143, 0
  %145 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 1
  %146 = load ptr, ptr %145, align 8
  %147 = insertvalue { ptr, ptr, ptr, i32 } %144, ptr %146, 1
  %148 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 2
  %149 = load ptr, ptr %148, align 8
  %150 = insertvalue { ptr, ptr, ptr, i32 } %147, ptr %149, 2
  %151 = getelementptr { ptr, ptr, ptr, i32 }, ptr %118, i32 0, i32 3
  %152 = load i32, ptr %151, align 4
  %153 = insertvalue { ptr, ptr, ptr, i32 } %150, i32 %152, 3
  call void %141(ptr %132, { ptr, ptr, ptr, i32 } %153)
  %154 = alloca ptr, align 8
  %155 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 66) to i64))
  store ptr %155, ptr %154, align 8
  %156 = alloca { ptr }, align 8
  %157 = getelementptr { ptr }, ptr %154, i32 0, i32 0
  %158 = getelementptr { ptr }, ptr %156, i32 0, i32 0
  %159 = load ptr, ptr %157, align 8
  store ptr %159, ptr %158, align 8
  %160 = call ptr @llvm.invariant.start.p0(i64 16, ptr %156)
  %161 = load ptr, ptr %156, align 8
  %162 = getelementptr i8, ptr %161, i64 0
  %163 = load i520, ptr @uhrai_An_outofbounds_error_occurred_while_indexing_into_a_collection, align 4
  store i520 %163, ptr %162, align 4
  %164 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %165 = alloca { ptr, ptr, ptr, i32 }, align 8
  %166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %165, i32 0, i32 1
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %165, i32 0, i32 3
  store ptr @String, ptr %165, align 8
  store ptr %164, ptr %166, align 8
  store i32 7, ptr %167, align 4
  %168 = call ptr @llvm.invariant.start.p0(i64 16, ptr %165)
  %169 = getelementptr { ptr }, ptr %156, i32 0, i32 0
  %170 = load ptr, ptr %169, align 8
  %171 = insertvalue { ptr } undef, ptr %170, 0
  %172 = getelementptr { ptr, ptr, ptr, i32 }, ptr %165, i32 0, i32 0
  %173 = load ptr, ptr %172, align 8
  %174 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %173, 0
  %175 = getelementptr { ptr, ptr, ptr, i32 }, ptr %165, i32 0, i32 1
  %176 = load ptr, ptr %175, align 8
  %177 = insertvalue { ptr, ptr, ptr, i32 } %174, ptr %176, 1
  %178 = getelementptr { ptr, ptr, ptr, i32 }, ptr %165, i32 0, i32 2
  %179 = load ptr, ptr %178, align 8
  %180 = insertvalue { ptr, ptr, ptr, i32 } %177, ptr %179, 2
  %181 = getelementptr { ptr, ptr, ptr, i32 }, ptr %165, i32 0, i32 3
  %182 = load i32, ptr %181, align 4
  %183 = insertvalue { ptr, ptr, ptr, i32 } %180, i32 %182, 3
  %184 = alloca [3 x ptr], align 8
  %185 = getelementptr [3 x ptr], ptr %184, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %185, align 8
  %186 = getelementptr [3 x ptr], ptr %184, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %186, align 8
  %187 = getelementptr [3 x ptr], ptr %184, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %187, align 8
  %188 = call ptr @llvm.invariant.start.p0(i64 9, ptr %184)
  %189 = call ptr @llvm.invariant.start.p0(i64 280, ptr %173)
  %190 = getelementptr ptr, ptr %173, i32 %182
  %191 = getelementptr ptr, ptr %190, i32 4
  %192 = load ptr, ptr %191, align 8
  %193 = alloca { ptr, ptr, ptr }, align 8
  %194 = getelementptr { ptr, ptr, ptr }, ptr %193, i32 0, i32 0
  store ptr @buffer_typ, ptr %194, align 8
  %195 = getelementptr { ptr, ptr, ptr }, ptr %193, i32 0, i32 1
  store ptr @i32_typ, ptr %195, align 8
  %196 = getelementptr { ptr, ptr, ptr }, ptr %193, i32 0, i32 2
  store ptr @i32_typ, ptr %196, align 8
  %197 = call ptr %192({ ptr, ptr, ptr, i32 } %183, ptr %193)
  call void %197({ ptr, ptr, ptr, i32 } %183, { ptr, ptr, ptr, i32 } %183, ptr %184, { ptr } %171, i32 65, i32 66)
  %198 = alloca { ptr, ptr, ptr, i32 }, align 8
  %199 = getelementptr { ptr, ptr, ptr, i32 }, ptr %165, i32 0, i32 0
  %200 = getelementptr { ptr, ptr, ptr, i32 }, ptr %198, i32 0, i32 0
  %201 = load ptr, ptr %199, align 8
  store ptr %201, ptr %200, align 8
  %202 = getelementptr { ptr, ptr, ptr, i32 }, ptr %165, i32 0, i32 1
  %203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %198, i32 0, i32 1
  %204 = load ptr, ptr %202, align 8
  store ptr %204, ptr %203, align 8
  %205 = getelementptr { ptr, ptr, ptr, i32 }, ptr %165, i32 0, i32 2
  %206 = getelementptr { ptr, ptr, ptr, i32 }, ptr %198, i32 0, i32 2
  %207 = load ptr, ptr %205, align 8
  store ptr %207, ptr %206, align 8
  %208 = getelementptr { ptr, ptr, ptr, i32 }, ptr %165, i32 0, i32 3
  %209 = getelementptr { ptr, ptr, ptr, i32 }, ptr %198, i32 0, i32 3
  %210 = load i32, ptr %208, align 4
  store i32 %210, ptr %209, align 4
  call void @set_offset(ptr %198, ptr @String)
  %211 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %212 = load ptr, ptr %211, align 8
  %213 = load ptr, ptr %8, align 8
  %214 = call ptr @llvm.invariant.start.p0(i64 232, ptr %213)
  %215 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %216 = load i32, ptr %215, align 4
  %217 = getelementptr ptr, ptr %213, i32 %216
  %218 = getelementptr ptr, ptr %217, i32 3
  %219 = load ptr, ptr %218, align 8
  %220 = getelementptr { ptr, ptr }, ptr %219, i32 0, i32 1
  %221 = load ptr, ptr %220, align 8
  %222 = getelementptr { ptr, ptr, ptr, i32 }, ptr %198, i32 0, i32 0
  %223 = load ptr, ptr %222, align 8
  %224 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %223, 0
  %225 = getelementptr { ptr, ptr, ptr, i32 }, ptr %198, i32 0, i32 1
  %226 = load ptr, ptr %225, align 8
  %227 = insertvalue { ptr, ptr, ptr, i32 } %224, ptr %226, 1
  %228 = getelementptr { ptr, ptr, ptr, i32 }, ptr %198, i32 0, i32 2
  %229 = load ptr, ptr %228, align 8
  %230 = insertvalue { ptr, ptr, ptr, i32 } %227, ptr %229, 2
  %231 = getelementptr { ptr, ptr, ptr, i32 }, ptr %198, i32 0, i32 3
  %232 = load i32, ptr %231, align 4
  %233 = insertvalue { ptr, ptr, ptr, i32 } %230, i32 %232, 3
  call void %221(ptr %212, { ptr, ptr, ptr, i32 } %233)
  ret void
}

define void @OutOfBounds_print_message_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @OutOfBounds)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 232, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 3
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call { ptr, ptr, ptr, i32 } %29(ptr %20)
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %30, ptr %31, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 16, ptr %31)
  call void @assume_offset(ptr %31, ptr @String)
  %33 = getelementptr { ptr, i160 }, ptr %31, i32 0, i32 0
  %34 = load ptr, ptr %33, align 8
  %35 = insertvalue { ptr, i160 } undef, ptr %34, 0
  %36 = getelementptr { ptr, i160 }, ptr %31, i32 0, i32 1
  %37 = load i160, ptr %36, align 4
  %38 = insertvalue { ptr, i160 } %35, i160 %37, 1
  %39 = alloca [1 x ptr], align 8
  %40 = getelementptr [1 x ptr], ptr %39, i32 0, i32 0
  store ptr @_parameterization_String, ptr %40, align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 1, ptr %39)
  %42 = call ptr @llvm.invariant.start.p0(i64 80, ptr @IO)
  %43 = load ptr, ptr getelementptr (ptr, ptr @IO, i32 7), align 8
  %44 = alloca { ptr }, align 8
  %45 = getelementptr { ptr }, ptr %44, i32 0, i32 0
  store ptr %34, ptr %45, align 8
  %46 = call ptr %43(ptr %44)
  call void %46(ptr %39, { ptr, i160 } %38)
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %48 = load ptr, ptr %47, align 8
  %49 = load ptr, ptr %6, align 8
  %50 = call ptr @llvm.invariant.start.p0(i64 232, ptr %49)
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %52 = load i32, ptr %51, align 4
  %53 = getelementptr ptr, ptr %49, i32 %52
  %54 = load ptr, ptr %53, align 8
  %55 = getelementptr { ptr, ptr }, ptr %54, i32 0, i32 0
  %56 = load ptr, ptr %55, align 8
  %57 = call { ptr, i160 } %56(ptr %48)
  %58 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %57, ptr %58, align 8
  %59 = getelementptr { ptr, i160 }, ptr %58, i32 0, i32 0
  %60 = load ptr, ptr %59, align 8
  %61 = ptrtoint ptr %60 to i64
  %62 = icmp eq i64 %61, ptrtoint (ptr @nil_typ to i64)
  %63 = icmp eq i64 %61, 0
  %64 = or i1 %62, %63
  %65 = icmp eq i1 %64, false
  %66 = alloca { ptr, ptr, ptr, i32 }, align 8
  %67 = alloca [0 x ptr], align 8
  %68 = alloca {}, align 8
  br i1 %65, label %69, label %._crit_edge

._crit_edge:                                      ; preds = %3
  br label %100

69:                                               ; preds = %3
  %70 = getelementptr { ptr, i160 }, ptr %58, i32 0, i32 0
  %71 = getelementptr { ptr, i160 }, ptr %66, i32 0, i32 0
  %72 = load ptr, ptr %70, align 8
  store ptr %72, ptr %71, align 8
  %73 = getelementptr { ptr, i160 }, ptr %58, i32 0, i32 1
  %74 = getelementptr { ptr, i160 }, ptr %66, i32 0, i32 1
  %75 = load i160, ptr %73, align 4
  store i160 %75, ptr %74, align 4
  call void @set_offset(ptr %66, ptr @OutOfBoundsDetails)
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 0
  %77 = load ptr, ptr %76, align 8
  %78 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %77, 0
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 1
  %80 = load ptr, ptr %79, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } %78, ptr %80, 1
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 2
  %83 = load ptr, ptr %82, align 8
  %84 = insertvalue { ptr, ptr, ptr, i32 } %81, ptr %83, 2
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %66, i32 0, i32 3
  %86 = load i32, ptr %85, align 4
  %87 = insertvalue { ptr, ptr, ptr, i32 } %84, i32 %86, 3
  %88 = call ptr @llvm.invariant.start.p0(i64 0, ptr %67)
  %89 = call ptr @llvm.invariant.start.p0(i64 48, ptr %77)
  %90 = getelementptr ptr, ptr %77, i32 %86
  %91 = getelementptr ptr, ptr %90, i32 3
  %92 = load ptr, ptr %91, align 8
  %93 = call ptr %92({ ptr, ptr, ptr, i32 } %87, ptr %68)
  call void %93({ ptr, ptr, ptr, i32 } %87, { ptr, ptr, ptr, i32 } %87, ptr %67)
  %94 = getelementptr { ptr, i160 }, ptr %66, i32 0, i32 0
  %95 = getelementptr { ptr, i160 }, ptr %58, i32 0, i32 0
  %96 = load ptr, ptr %94, align 8
  store ptr %96, ptr %95, align 8
  %97 = getelementptr { ptr, i160 }, ptr %66, i32 0, i32 1
  %98 = getelementptr { ptr, i160 }, ptr %58, i32 0, i32 1
  %99 = load i160, ptr %97, align 4
  store i160 %99, ptr %98, align 4
  br label %100

100:                                              ; preds = %69, %._crit_edge
  ret void
}

define { ptr, ptr, ptr, i32 } @OutOfBounds_getter_message(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, i160 }, i32, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 3
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @OutOfBounds_setter_message(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { { ptr, i160 }, i32, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @OutOfBounds_getter_file_name(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, i160 }, i32, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 2
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @OutOfBounds_setter_file_name(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { { ptr, i160 }, i32, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 2
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  ret void
}

define i32 @OutOfBounds_getter_line_number(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, i160 }, i32, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 1
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @OutOfBounds_setter_line_number(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { { ptr, i160 }, i32, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 1
  store i32 %1, ptr %3, align 4
  ret void
}

define { ptr, i160 } @OutOfBounds_getter_details(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, i160 }, i32, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 0
  %3 = getelementptr { ptr, i160 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, i160 } undef, ptr %4, 0
  %6 = getelementptr { ptr, i160 }, ptr %2, i32 0, i32 1
  %7 = load i160, ptr %6, align 4
  %8 = insertvalue { ptr, i160 } %5, i160 %7, 1
  ret { ptr, i160 } %8
}

define void @OutOfBounds_setter_details(ptr %0, { ptr, i160 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { { ptr, i160 }, i32, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 0
  %4 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %1, ptr %4, align 8
  %5 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 0
  %6 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %9 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %10 = load i160, ptr %8, align 4
  store i160 %10, ptr %9, align 4
  ret void
}

define ptr @IntArray_B__Self_from_iterable_iterableIntIterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %3 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr ptr, ptr %4, i32 1
  %6 = getelementptr ptr, ptr %4, i32 2
  %7 = getelementptr ptr, ptr %4, i32 3
  %8 = getelementptr ptr, ptr %4, i32 4
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %12)
  %14 = load ptr, ptr getelementptr (ptr, ptr getelementptr ([77 x ptr], ptr @IntArray, i32 0, i32 26), i32 7), align 8
  ret ptr %14
}

define ptr @IntArray_B_init_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [77 x ptr], ptr %4, i32 0, i32 27
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @IntArray_B_init_bufferBufferPtri32_lengthPtri32_capacityPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1)
  %4 = getelementptr { ptr, ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -318192747195410237, i64 ptrtoint (ptr @buffer_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %24)
  %26 = getelementptr { ptr, ptr, ptr }, ptr %1, i32 0, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr ptr, ptr %27, i32 1
  %29 = getelementptr ptr, ptr %27, i32 2
  %30 = getelementptr ptr, ptr %27, i32 3
  %31 = getelementptr ptr, ptr %27, i32 4
  %32 = load i64, ptr %28, align 4
  %33 = load i64, ptr %29, align 4
  %34 = load ptr, ptr %30, align 8
  %35 = load ptr, ptr %31, align 8
  %36 = call i1 @subtype_test_wrapper(ptr %34, i64 %33, i64 %32, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %35)
  %37 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %38 = getelementptr [77 x ptr], ptr %37, i32 0, i32 28
  %39 = getelementptr ptr, ptr %38, i32 7
  %40 = load ptr, ptr %39, align 8
  ret ptr %40
}

define ptr @IntArray_B_length_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [77 x ptr], ptr %4, i32 0, i32 29
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @IntArray_B_capacity_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [77 x ptr], ptr %4, i32 0, i32 30
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @IntArray_B_buffer_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [77 x ptr], ptr %4, i32 0, i32 31
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @IntArray_B_append_xPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [77 x ptr], ptr %15, i32 0, i32 32
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @IntArray_B_extend_aryIntArray({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7629948565578263212, i64 ptrtoint (ptr @IntArray to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [77 x ptr], ptr %15, i32 0, i32 33
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @IntArray_B__index_xPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [77 x ptr], ptr %15, i32 0, i32 34
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @IntArray_B_pop_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [77 x ptr], ptr %4, i32 0, i32 35
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @IntArray_B_copy_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [77 x ptr], ptr %4, i32 0, i32 36
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @IntArray_B_each_fFunctionPtri32_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [77 x ptr], ptr %15, i32 0, i32 37
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @IntArray_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [77 x ptr], ptr %26, i32 0, i32 38
  %28 = getelementptr ptr, ptr %27, i32 7
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @IntArray_B_all_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [77 x ptr], ptr %15, i32 0, i32 39
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @IntArray_B_any_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [77 x ptr], ptr %15, i32 0, i32 40
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @IntArray_B_map_fFunctionPtri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [77 x ptr], ptr %15, i32 0, i32 41
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @IntArray_B_filter_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [77 x ptr], ptr %15, i32 0, i32 42
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @IntArray_B_chain_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [77 x ptr], ptr %15, i32 0, i32 43
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @IntArray_B_interleave_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [77 x ptr], ptr %15, i32 0, i32 44
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @IntArray_B_zip_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [77 x ptr], ptr %15, i32 0, i32 45
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @IntArray_B_product_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [77 x ptr], ptr %15, i32 0, i32 46
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @IntArray_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [77 x ptr], ptr %4, i32 0, i32 47
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @IntArray_B_repr_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [77 x ptr], ptr %4, i32 0, i32 48
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define { ptr, ptr, ptr, i32 } @IntArray__Self_from_iterable_iterableIntIterable(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %3 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem8 = alloca ptr, align 8
  %.reg2mem10 = alloca ptr, align 8
  %.reg2mem12 = alloca ptr, align 8
  %.reg2mem14 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %1, ptr %3, align 8
  %4 = call ptr @llvm.invariant.start.p0(i64 16, ptr %3)
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  call void @set_offset(ptr %5, ptr @IntIterable)
  %18 = alloca ptr, align 8
  %19 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64))
  store ptr %19, ptr %18, align 8
  %20 = alloca { ptr }, align 8
  %21 = getelementptr { ptr }, ptr %18, i32 0, i32 0
  %22 = getelementptr { ptr }, ptr %20, i32 0, i32 0
  %23 = load ptr, ptr %21, align 8
  store ptr %23, ptr %22, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 16, ptr %20)
  %25 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %26 = alloca { ptr, ptr, ptr, i32 }, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  store ptr @IntArray, ptr %26, align 8
  store ptr %25, ptr %27, align 8
  store i32 7, ptr %28, align 4
  %29 = call ptr @llvm.invariant.start.p0(i64 16, ptr %26)
  %30 = getelementptr { ptr }, ptr %20, i32 0, i32 0
  %31 = load ptr, ptr %30, align 8
  %32 = insertvalue { ptr } undef, ptr %31, 0
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %34 = load ptr, ptr %33, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %34, 0
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %37 = load ptr, ptr %36, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %37, 1
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %40 = load ptr, ptr %39, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } %38, ptr %40, 2
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %43 = load i32, ptr %42, align 4
  %44 = insertvalue { ptr, ptr, ptr, i32 } %41, i32 %43, 3
  %45 = alloca [3 x ptr], align 8
  %46 = getelementptr [3 x ptr], ptr %45, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %46, align 8
  %47 = getelementptr [3 x ptr], ptr %45, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %47, align 8
  %48 = getelementptr [3 x ptr], ptr %45, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %48, align 8
  %49 = call ptr @llvm.invariant.start.p0(i64 9, ptr %45)
  %50 = call ptr @llvm.invariant.start.p0(i64 616, ptr %34)
  %51 = getelementptr ptr, ptr %34, i32 %43
  %52 = getelementptr ptr, ptr %51, i32 5
  %53 = load ptr, ptr %52, align 8
  %54 = alloca { ptr, ptr, ptr }, align 8
  %55 = getelementptr { ptr, ptr, ptr }, ptr %54, i32 0, i32 0
  store ptr @buffer_typ, ptr %55, align 8
  %56 = getelementptr { ptr, ptr, ptr }, ptr %54, i32 0, i32 1
  store ptr @i32_typ, ptr %56, align 8
  %57 = getelementptr { ptr, ptr, ptr }, ptr %54, i32 0, i32 2
  store ptr @i32_typ, ptr %57, align 8
  %58 = call ptr %53({ ptr, ptr, ptr, i32 } %44, ptr %54)
  call void %58({ ptr, ptr, ptr, i32 } %44, { ptr, ptr, ptr, i32 } %44, ptr %45, { ptr } %32, i32 0, i32 1)
  %59 = alloca { ptr, ptr, ptr, i32 }, align 8
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 0
  %62 = load ptr, ptr %60, align 8
  store ptr %62, ptr %61, align 8
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 1
  %65 = load ptr, ptr %63, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 2
  %68 = load ptr, ptr %66, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 3
  %71 = load i32, ptr %69, align 4
  store i32 %71, ptr %70, align 4
  call void @set_offset(ptr %59, ptr @IntArray)
  %72 = alloca { ptr, ptr, ptr, i32 }, align 8
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 0
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 0
  %75 = load ptr, ptr %73, align 8
  store ptr %75, ptr %74, align 8
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 1
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 1
  %78 = load ptr, ptr %76, align 8
  store ptr %78, ptr %77, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 2
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 2
  %81 = load ptr, ptr %79, align 8
  store ptr %81, ptr %80, align 8
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 3
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 3
  %84 = load i32, ptr %82, align 4
  store i32 %84, ptr %83, align 4
  %85 = call ptr @llvm.invariant.start.p0(i64 16, ptr %72)
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %87 = load ptr, ptr %86, align 8
  %88 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %87, 0
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %90 = load ptr, ptr %89, align 8
  %91 = insertvalue { ptr, ptr, ptr, i32 } %88, ptr %90, 1
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %93 = load ptr, ptr %92, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } %91, ptr %93, 2
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %96 = load i32, ptr %95, align 4
  %97 = insertvalue { ptr, ptr, ptr, i32 } %94, i32 %96, 3
  %98 = alloca [0 x ptr], align 8
  %99 = call ptr @llvm.invariant.start.p0(i64 0, ptr %98)
  %100 = call ptr @llvm.invariant.start.p0(i64 192, ptr %87)
  %101 = getelementptr ptr, ptr %87, i32 %96
  %102 = getelementptr ptr, ptr %101, i32 10
  %103 = load ptr, ptr %102, align 8
  %104 = alloca {}, align 8
  %105 = call ptr %103({ ptr, ptr, ptr, i32 } %97, ptr %104)
  %106 = call { ptr, ptr, ptr, i32 } %105({ ptr, ptr, ptr, i32 } %97, { ptr, ptr, ptr, i32 } %97, ptr %98)
  %107 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %106, ptr %107, align 8
  %108 = call ptr @llvm.invariant.start.p0(i64 16, ptr %107)
  %109 = alloca { ptr, ptr, ptr, i32 }, align 8
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %107, i32 0, i32 0
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %109, i32 0, i32 0
  %112 = load ptr, ptr %110, align 8
  store ptr %112, ptr %111, align 8
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %107, i32 0, i32 1
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %109, i32 0, i32 1
  %115 = load ptr, ptr %113, align 8
  store ptr %115, ptr %114, align 8
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %107, i32 0, i32 2
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %109, i32 0, i32 2
  %118 = load ptr, ptr %116, align 8
  store ptr %118, ptr %117, align 8
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %107, i32 0, i32 3
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %109, i32 0, i32 3
  %121 = load i32, ptr %119, align 4
  store i32 %121, ptr %120, align 4
  call void @set_offset(ptr %109, ptr @IntIterator)
  %122 = alloca { ptr, ptr, ptr, i32 }, align 8
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %109, i32 0, i32 0
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %122, i32 0, i32 0
  %125 = load ptr, ptr %123, align 8
  store ptr %125, ptr %124, align 8
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %109, i32 0, i32 1
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %122, i32 0, i32 1
  %128 = load ptr, ptr %126, align 8
  store ptr %128, ptr %127, align 8
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %109, i32 0, i32 2
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %122, i32 0, i32 2
  %131 = load ptr, ptr %129, align 8
  store ptr %131, ptr %130, align 8
  %132 = getelementptr { ptr, ptr, ptr, i32 }, ptr %109, i32 0, i32 3
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %122, i32 0, i32 3
  %134 = load i32, ptr %132, align 4
  store i32 %134, ptr %133, align 4
  call void @set_offset(ptr %122, ptr @IntIterator)
  %135 = alloca { ptr, ptr, ptr, i32 }, align 8
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %122, i32 0, i32 0
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %135, i32 0, i32 0
  %138 = load ptr, ptr %136, align 8
  store ptr %138, ptr %137, align 8
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %122, i32 0, i32 1
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %135, i32 0, i32 1
  %141 = load ptr, ptr %139, align 8
  store ptr %141, ptr %140, align 8
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %122, i32 0, i32 2
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %135, i32 0, i32 2
  %144 = load ptr, ptr %142, align 8
  store ptr %144, ptr %143, align 8
  %145 = getelementptr { ptr, ptr, ptr, i32 }, ptr %122, i32 0, i32 3
  %146 = getelementptr { ptr, ptr, ptr, i32 }, ptr %135, i32 0, i32 3
  %147 = load i32, ptr %145, align 4
  store i32 %147, ptr %146, align 4
  %148 = call ptr @llvm.invariant.start.p0(i64 16, ptr %135)
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %135, i32 0, i32 0
  store ptr %149, ptr %.reg2mem14, align 8
  %150 = getelementptr { ptr, ptr, ptr, i32 }, ptr %135, i32 0, i32 1
  store ptr %150, ptr %.reg2mem12, align 8
  %151 = getelementptr { ptr, ptr, ptr, i32 }, ptr %135, i32 0, i32 2
  store ptr %151, ptr %.reg2mem10, align 8
  %152 = getelementptr { ptr, ptr, ptr, i32 }, ptr %135, i32 0, i32 3
  store ptr %152, ptr %.reg2mem8, align 8
  %153 = alloca [0 x ptr], align 8
  %154 = alloca {}, align 8
  %155 = alloca { ptr, i32 }, align 8
  %156 = alloca i64, align 8
  %157 = alloca i1, align 1
  %158 = alloca i32, align 4
  %159 = alloca [1 x ptr], align 8
  %160 = alloca { ptr }, align 8
  %161 = alloca { ptr, ptr, ptr, i32 }, align 8
  %162 = alloca { ptr, ptr, ptr, i32 }, align 8
  %163 = alloca { ptr, ptr, ptr, i32 }, align 8
  br label %164

164:                                              ; preds = %._crit_edge1, %2
  %.reload15 = load ptr, ptr %.reg2mem14, align 8
  %165 = load ptr, ptr %.reload15, align 8
  %166 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %165, 0
  %.reload13 = load ptr, ptr %.reg2mem12, align 8
  %167 = load ptr, ptr %.reload13, align 8
  %168 = insertvalue { ptr, ptr, ptr, i32 } %166, ptr %167, 1
  %.reload11 = load ptr, ptr %.reg2mem10, align 8
  %169 = load ptr, ptr %.reload11, align 8
  %170 = insertvalue { ptr, ptr, ptr, i32 } %168, ptr %169, 2
  %.reload9 = load ptr, ptr %.reg2mem8, align 8
  %171 = load i32, ptr %.reload9, align 4
  %172 = insertvalue { ptr, ptr, ptr, i32 } %170, i32 %171, 3
  %173 = call ptr @llvm.invariant.start.p0(i64 0, ptr %153)
  %174 = call ptr @llvm.invariant.start.p0(i64 16, ptr %165)
  %175 = getelementptr ptr, ptr %165, i32 %171
  %176 = load ptr, ptr %175, align 8
  %177 = call ptr %176({ ptr, ptr, ptr, i32 } %172, ptr %154)
  %178 = call { ptr, i32 } %177({ ptr, ptr, ptr, i32 } %172, { ptr, ptr, ptr, i32 } %172, ptr %153)
  store ptr %155, ptr %.reg2mem3, align 8
  %.reload7 = load ptr, ptr %.reg2mem3, align 8
  store { ptr, i32 } %178, ptr %.reload7, align 8
  %.reload6 = load ptr, ptr %.reg2mem3, align 8
  %179 = getelementptr { ptr, i32 }, ptr %.reload6, i32 0, i32 0
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %156, align 4
  %180 = load ptr, ptr %179, align 8
  %181 = ptrtoint ptr %180 to i64
  %182 = load ptr, ptr %156, align 8
  %183 = ptrtoint ptr %182 to i64
  %184 = icmp eq i64 %181, %183
  %185 = icmp eq i64 %181, 0
  %186 = or i1 %184, %185
  %187 = icmp eq i1 %186, false
  store i1 %187, ptr %157, align 1
  %188 = load i1, ptr %157, align 1
  store i1 %188, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %189, label %._crit_edge

._crit_edge:                                      ; preds = %164
  br label %228

189:                                              ; preds = %164
  %.reload5 = load ptr, ptr %.reg2mem3, align 8
  %190 = getelementptr { ptr, i32 }, ptr %.reload5, i32 0, i32 1
  %191 = load i32, ptr %190, align 4
  store i32 %191, ptr %158, align 4
  %192 = load i32, ptr %158, align 4
  %193 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 0
  %194 = load ptr, ptr %193, align 8
  %195 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %194, 0
  %196 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 1
  %197 = load ptr, ptr %196, align 8
  %198 = insertvalue { ptr, ptr, ptr, i32 } %195, ptr %197, 1
  %199 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 2
  %200 = load ptr, ptr %199, align 8
  %201 = insertvalue { ptr, ptr, ptr, i32 } %198, ptr %200, 2
  %202 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 3
  %203 = load i32, ptr %202, align 4
  %204 = insertvalue { ptr, ptr, ptr, i32 } %201, i32 %203, 3
  %205 = getelementptr [1 x ptr], ptr %159, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %205, align 8
  %206 = call ptr @llvm.invariant.start.p0(i64 1, ptr %159)
  %207 = call ptr @llvm.invariant.start.p0(i64 616, ptr %194)
  %208 = getelementptr ptr, ptr %194, i32 %203
  %209 = getelementptr ptr, ptr %208, i32 9
  %210 = load ptr, ptr %209, align 8
  %211 = getelementptr { ptr }, ptr %160, i32 0, i32 0
  store ptr @i32_typ, ptr %211, align 8
  %212 = call ptr %210({ ptr, ptr, ptr, i32 } %204, ptr %160)
  %213 = call { ptr, ptr, ptr, i32 } %212({ ptr, ptr, ptr, i32 } %204, { ptr, ptr, ptr, i32 } %204, ptr %159, i32 %192)
  store { ptr, ptr, ptr, i32 } %213, ptr %161, align 8
  %214 = call ptr @llvm.invariant.start.p0(i64 16, ptr %161)
  %215 = getelementptr { ptr, ptr, ptr, i32 }, ptr %161, i32 0, i32 0
  %216 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 0
  %217 = load ptr, ptr %215, align 8
  store ptr %217, ptr %216, align 8
  %218 = getelementptr { ptr, ptr, ptr, i32 }, ptr %161, i32 0, i32 1
  %219 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 1
  %220 = load ptr, ptr %218, align 8
  store ptr %220, ptr %219, align 8
  %221 = getelementptr { ptr, ptr, ptr, i32 }, ptr %161, i32 0, i32 2
  %222 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 2
  %223 = load ptr, ptr %221, align 8
  store ptr %223, ptr %222, align 8
  %224 = getelementptr { ptr, ptr, ptr, i32 }, ptr %161, i32 0, i32 3
  %225 = getelementptr { ptr, ptr, ptr, i32 }, ptr %162, i32 0, i32 3
  %226 = load i32, ptr %224, align 4
  store i32 %226, ptr %225, align 4
  call void @set_offset(ptr %162, ptr @IntArray)
  %227 = load i32, ptr %158, align 4
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  store i32 %227, ptr %.reload4, align 4
  br label %228

228:                                              ; preds = %189, %._crit_edge
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %229

._crit_edge1:                                     ; preds = %228
  br label %164

229:                                              ; preds = %228
  %230 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 0
  %231 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 0
  %232 = load ptr, ptr %230, align 8
  store ptr %232, ptr %231, align 8
  %233 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 1
  %234 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 1
  %235 = load ptr, ptr %233, align 8
  store ptr %235, ptr %234, align 8
  %236 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 2
  %237 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 2
  %238 = load ptr, ptr %236, align 8
  store ptr %238, ptr %237, align 8
  %239 = getelementptr { ptr, ptr, ptr, i32 }, ptr %72, i32 0, i32 3
  %240 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 3
  %241 = load i32, ptr %239, align 4
  store i32 %241, ptr %240, align 4
  call void @set_offset(ptr %163, ptr @IntArray)
  %242 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 0
  %243 = load ptr, ptr %242, align 8
  %244 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %243, 0
  %245 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 1
  %246 = load ptr, ptr %245, align 8
  %247 = insertvalue { ptr, ptr, ptr, i32 } %244, ptr %246, 1
  %248 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 2
  %249 = load ptr, ptr %248, align 8
  %250 = insertvalue { ptr, ptr, ptr, i32 } %247, ptr %249, 2
  %251 = getelementptr { ptr, ptr, ptr, i32 }, ptr %163, i32 0, i32 3
  %252 = load i32, ptr %251, align 4
  %253 = insertvalue { ptr, ptr, ptr, i32 } %250, i32 %252, 3
  ret { ptr, ptr, ptr, i32 } %253
}

define void @IntArray_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @IntArray)
  %19 = alloca ptr, align 8
  %20 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64))
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %22 = load ptr, ptr %21, align 8
  %23 = load ptr, ptr %6, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 616, ptr %23)
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %26 = load i32, ptr %25, align 4
  %27 = getelementptr ptr, ptr %23, i32 %26
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr { ptr, ptr }, ptr %28, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  %31 = getelementptr { ptr }, ptr %19, i32 0, i32 0
  %32 = load ptr, ptr %31, align 8
  %33 = insertvalue { ptr } undef, ptr %32, 0
  call void %30(ptr %22, { ptr } %33)
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %35 = load ptr, ptr %34, align 8
  %36 = load ptr, ptr %6, align 8
  %37 = call ptr @llvm.invariant.start.p0(i64 616, ptr %36)
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %39 = load i32, ptr %38, align 4
  %40 = getelementptr ptr, ptr %36, i32 %39
  %41 = getelementptr ptr, ptr %40, i32 2
  %42 = load ptr, ptr %41, align 8
  %43 = getelementptr { ptr, ptr }, ptr %42, i32 0, i32 1
  %44 = load ptr, ptr %43, align 8
  call void %44(ptr %35, i32 1)
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %46 = load ptr, ptr %45, align 8
  %47 = load ptr, ptr %6, align 8
  %48 = call ptr @llvm.invariant.start.p0(i64 616, ptr %47)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %50 = load i32, ptr %49, align 4
  %51 = getelementptr ptr, ptr %47, i32 %50
  %52 = getelementptr ptr, ptr %51, i32 1
  %53 = load ptr, ptr %52, align 8
  %54 = getelementptr { ptr, ptr }, ptr %53, i32 0, i32 1
  %55 = load ptr, ptr %54, align 8
  call void %55(ptr %46, i32 0)
  ret void
}

define void @IntArray_init_bufferBufferPtri32_lengthPtri32_capacityPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3, i32 %4, i32 %5) {
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %7, align 8
  %8 = call ptr @llvm.invariant.start.p0(i64 16, ptr %7)
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  call void @set_offset(ptr %9, ptr @IntArray)
  %22 = alloca ptr, align 8
  store { ptr } %3, ptr %22, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = load ptr, ptr %9, align 8
  %26 = call ptr @llvm.invariant.start.p0(i64 616, ptr %25)
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %28 = load i32, ptr %27, align 4
  %29 = getelementptr ptr, ptr %25, i32 %28
  %30 = load ptr, ptr %29, align 8
  %31 = getelementptr { ptr, ptr }, ptr %30, i32 0, i32 1
  %32 = load ptr, ptr %31, align 8
  %33 = load ptr, ptr %22, align 8
  %34 = insertvalue { ptr } undef, ptr %33, 0
  call void %32(ptr %24, { ptr } %34)
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = load ptr, ptr %9, align 8
  %38 = call ptr @llvm.invariant.start.p0(i64 616, ptr %37)
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %40 = load i32, ptr %39, align 4
  %41 = getelementptr ptr, ptr %37, i32 %40
  %42 = getelementptr ptr, ptr %41, i32 1
  %43 = load ptr, ptr %42, align 8
  %44 = getelementptr { ptr, ptr }, ptr %43, i32 0, i32 1
  %45 = load ptr, ptr %44, align 8
  call void %45(ptr %36, i32 %4)
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %47 = load ptr, ptr %46, align 8
  %48 = load ptr, ptr %9, align 8
  %49 = call ptr @llvm.invariant.start.p0(i64 616, ptr %48)
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %51 = load i32, ptr %50, align 4
  %52 = getelementptr ptr, ptr %48, i32 %51
  %53 = getelementptr ptr, ptr %52, i32 2
  %54 = load ptr, ptr %53, align 8
  %55 = getelementptr { ptr, ptr }, ptr %54, i32 0, i32 1
  %56 = load ptr, ptr %55, align 8
  call void %56(ptr %47, i32 %5)
  ret void
}

define i32 @IntArray_length_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @IntArray)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 616, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 1
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call i32 %29(ptr %20)
  ret i32 %30
}

define i32 @IntArray_capacity_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @IntArray)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 616, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call i32 %29(ptr %20)
  ret i32 %30
}

define { ptr } @IntArray_buffer_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @IntArray)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 616, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 0
  %28 = load ptr, ptr %27, align 8
  %29 = call { ptr } %28(ptr %20)
  %30 = alloca ptr, align 8
  store { ptr } %29, ptr %30, align 8
  %31 = load ptr, ptr %30, align 8
  %32 = insertvalue { ptr } undef, ptr %31, 0
  ret { ptr } %32
}

define { ptr, ptr, ptr, i32 } @IntArray_append_xPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem5 = alloca ptr, align 8
  %.reg2mem7 = alloca ptr, align 8
  %.reg2mem14 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @IntArray)
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %21 = load ptr, ptr %20, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 616, ptr %22)
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %25 = load i32, ptr %24, align 4
  %26 = getelementptr ptr, ptr %22, i32 %25
  %27 = getelementptr ptr, ptr %26, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr { ptr, ptr }, ptr %28, i32 0, i32 0
  %30 = load ptr, ptr %29, align 8
  %31 = call i32 %30(ptr %21)
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %33 = load ptr, ptr %32, align 8
  %34 = load ptr, ptr %7, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 616, ptr %34)
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %37 = load i32, ptr %36, align 4
  %38 = getelementptr ptr, ptr %34, i32 %37
  %39 = getelementptr ptr, ptr %38, i32 2
  %40 = load ptr, ptr %39, align 8
  %41 = getelementptr { ptr, ptr }, ptr %40, i32 0, i32 0
  %42 = load ptr, ptr %41, align 8
  %43 = call i32 %42(ptr %33)
  %44 = icmp slt i32 %31, %43
  %45 = alloca i32, align 4
  %46 = alloca i32, align 4
  %47 = alloca i32, align 4
  %48 = alloca ptr, align 8
  %49 = alloca { ptr }, align 8
  %50 = alloca i32, align 4
  %51 = alloca ptr, align 8
  %52 = alloca i32, align 4
  %53 = alloca i32, align 4
  %54 = alloca i1, align 1
  %55 = alloca ptr, align 8
  %56 = alloca i32, align 4
  %57 = alloca i32, align 4
  %58 = alloca ptr, align 8
  %59 = alloca i32, align 4
  %60 = alloca i32, align 4
  %61 = alloca i32, align 4
  %62 = alloca i32, align 4
  %63 = alloca { ptr, ptr, ptr, i32 }, align 8
  br i1 %44, label %64, label %65

64:                                               ; preds = %4
  br label %182

65:                                               ; preds = %4
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %67 = load ptr, ptr %66, align 8
  %68 = load ptr, ptr %7, align 8
  %69 = call ptr @llvm.invariant.start.p0(i64 616, ptr %68)
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %71 = load i32, ptr %70, align 4
  %72 = getelementptr ptr, ptr %68, i32 %71
  %73 = getelementptr ptr, ptr %72, i32 2
  %74 = load ptr, ptr %73, align 8
  %75 = getelementptr { ptr, ptr }, ptr %74, i32 0, i32 0
  %76 = load ptr, ptr %75, align 8
  %77 = call i32 %76(ptr %67)
  store i32 %77, ptr %45, align 4
  store i32 2, ptr %46, align 4
  %78 = load i32, ptr %45, align 4
  %79 = load i32, ptr %46, align 4
  %80 = mul i32 %78, %79
  store i32 %80, ptr %47, align 4
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %82 = load ptr, ptr %81, align 8
  %83 = load ptr, ptr %7, align 8
  %84 = call ptr @llvm.invariant.start.p0(i64 616, ptr %83)
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %86 = load i32, ptr %85, align 4
  %87 = getelementptr ptr, ptr %83, i32 %86
  %88 = getelementptr ptr, ptr %87, i32 2
  %89 = load ptr, ptr %88, align 8
  %90 = getelementptr { ptr, ptr }, ptr %89, i32 0, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = load i32, ptr %47, align 4
  call void %91(ptr %82, i32 %92)
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %94 = load ptr, ptr %93, align 8
  %95 = load ptr, ptr %7, align 8
  %96 = call ptr @llvm.invariant.start.p0(i64 616, ptr %95)
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %98 = load i32, ptr %97, align 4
  %99 = getelementptr ptr, ptr %95, i32 %98
  %100 = load ptr, ptr %99, align 8
  %101 = getelementptr { ptr, ptr }, ptr %100, i32 0, i32 0
  %102 = load ptr, ptr %101, align 8
  %103 = call { ptr } %102(ptr %94)
  store { ptr } %103, ptr %48, align 8
  store ptr %49, ptr %.reg2mem14, align 8
  %.reload17 = load ptr, ptr %.reg2mem14, align 8
  %104 = getelementptr { ptr }, ptr %.reload17, i32 0, i32 0
  %105 = load ptr, ptr %48, align 8
  store ptr %105, ptr %104, align 8
  %.reload16 = load ptr, ptr %.reg2mem14, align 8
  %106 = call ptr @llvm.invariant.start.p0(i64 16, ptr %.reload16)
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %108 = load ptr, ptr %107, align 8
  %109 = load ptr, ptr %7, align 8
  %110 = call ptr @llvm.invariant.start.p0(i64 616, ptr %109)
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %112 = load i32, ptr %111, align 4
  %113 = getelementptr ptr, ptr %109, i32 %112
  %114 = getelementptr ptr, ptr %113, i32 2
  %115 = load ptr, ptr %114, align 8
  %116 = getelementptr { ptr, ptr }, ptr %115, i32 0, i32 0
  %117 = load ptr, ptr %116, align 8
  %118 = call i32 %117(ptr %108)
  store i32 %118, ptr %50, align 4
  %119 = load i32, ptr %50, align 4
  %120 = getelementptr i32, ptr null, i32 %119
  %121 = ptrtoint ptr %120 to i64
  %122 = call ptr @bump_malloc(i64 %121)
  store ptr %122, ptr %51, align 8
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %124 = load ptr, ptr %123, align 8
  %125 = load ptr, ptr %7, align 8
  %126 = call ptr @llvm.invariant.start.p0(i64 616, ptr %125)
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %128 = load i32, ptr %127, align 4
  %129 = getelementptr ptr, ptr %125, i32 %128
  %130 = load ptr, ptr %129, align 8
  %131 = getelementptr { ptr, ptr }, ptr %130, i32 0, i32 1
  %132 = load ptr, ptr %131, align 8
  %133 = getelementptr { ptr }, ptr %51, i32 0, i32 0
  %134 = load ptr, ptr %133, align 8
  %135 = insertvalue { ptr } undef, ptr %134, 0
  call void %132(ptr %124, { ptr } %135)
  store ptr %52, ptr %.reg2mem7, align 8
  %.reload13 = load ptr, ptr %.reg2mem7, align 8
  store i32 0, ptr %.reload13, align 4
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  store ptr %136, ptr %.reg2mem5, align 8
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  store ptr %137, ptr %.reg2mem3, align 8
  br label %138

138:                                              ; preds = %._crit_edge1, %65
  %.reload6 = load ptr, ptr %.reg2mem5, align 8
  %139 = load ptr, ptr %.reload6, align 8
  %140 = load ptr, ptr %7, align 8
  %141 = call ptr @llvm.invariant.start.p0(i64 616, ptr %140)
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %142 = load i32, ptr %.reload4, align 4
  %143 = getelementptr ptr, ptr %140, i32 %142
  %144 = getelementptr ptr, ptr %143, i32 1
  %145 = load ptr, ptr %144, align 8
  %146 = getelementptr { ptr, ptr }, ptr %145, i32 0, i32 0
  %147 = load ptr, ptr %146, align 8
  %148 = call i32 %147(ptr %139)
  store i32 %148, ptr %53, align 4
  %.reload12 = load ptr, ptr %.reg2mem7, align 8
  %149 = load i32, ptr %.reload12, align 4
  %150 = load i32, ptr %53, align 4
  %151 = icmp slt i32 %149, %150
  store i1 %151, ptr %54, align 1
  %152 = load i1, ptr %54, align 1
  store i1 %152, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %153, label %._crit_edge

._crit_edge:                                      ; preds = %138
  br label %180

153:                                              ; preds = %138
  %.reload15 = load ptr, ptr %.reg2mem14, align 8
  %154 = load ptr, ptr %.reload15, align 8
  %.reload11 = load ptr, ptr %.reg2mem7, align 8
  %155 = load i32, ptr %.reload11, align 4
  %156 = getelementptr i32, ptr null, i32 %155
  %157 = ptrtoint ptr %156 to i64
  %158 = getelementptr i8, ptr %154, i64 %157
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %160 = load ptr, ptr %159, align 8
  %161 = load ptr, ptr %7, align 8
  %162 = call ptr @llvm.invariant.start.p0(i64 616, ptr %161)
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %164 = load i32, ptr %163, align 4
  %165 = getelementptr ptr, ptr %161, i32 %164
  %166 = load ptr, ptr %165, align 8
  %167 = getelementptr { ptr, ptr }, ptr %166, i32 0, i32 0
  %168 = load ptr, ptr %167, align 8
  %169 = call { ptr } %168(ptr %160)
  store { ptr } %169, ptr %55, align 8
  %170 = load ptr, ptr %55, align 8
  %.reload10 = load ptr, ptr %.reg2mem7, align 8
  %171 = load i32, ptr %.reload10, align 4
  %172 = getelementptr i32, ptr null, i32 %171
  %173 = ptrtoint ptr %172 to i64
  %174 = getelementptr i8, ptr %170, i64 %173
  %175 = load i32, ptr %158, align 4
  store i32 %175, ptr %174, align 4
  store i32 1, ptr %56, align 4
  %.reload9 = load ptr, ptr %.reg2mem7, align 8
  %176 = load i32, ptr %.reload9, align 4
  %177 = load i32, ptr %56, align 4
  %178 = add i32 %176, %177
  store i32 %178, ptr %57, align 4
  %179 = load i32, ptr %57, align 4
  %.reload8 = load ptr, ptr %.reg2mem7, align 8
  store i32 %179, ptr %.reload8, align 4
  br label %180

180:                                              ; preds = %153, %._crit_edge
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %181

._crit_edge1:                                     ; preds = %180
  br label %138

181:                                              ; preds = %180
  br label %182

182:                                              ; preds = %181, %64
  %183 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %184 = load ptr, ptr %183, align 8
  %185 = load ptr, ptr %7, align 8
  %186 = call ptr @llvm.invariant.start.p0(i64 616, ptr %185)
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %188 = load i32, ptr %187, align 4
  %189 = getelementptr ptr, ptr %185, i32 %188
  %190 = load ptr, ptr %189, align 8
  %191 = getelementptr { ptr, ptr }, ptr %190, i32 0, i32 0
  %192 = load ptr, ptr %191, align 8
  %193 = call { ptr } %192(ptr %184)
  store { ptr } %193, ptr %58, align 8
  %194 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %195 = load ptr, ptr %194, align 8
  %196 = load ptr, ptr %7, align 8
  %197 = call ptr @llvm.invariant.start.p0(i64 616, ptr %196)
  %198 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %199 = load i32, ptr %198, align 4
  %200 = getelementptr ptr, ptr %196, i32 %199
  %201 = getelementptr ptr, ptr %200, i32 1
  %202 = load ptr, ptr %201, align 8
  %203 = getelementptr { ptr, ptr }, ptr %202, i32 0, i32 0
  %204 = load ptr, ptr %203, align 8
  %205 = call i32 %204(ptr %195)
  store i32 %205, ptr %59, align 4
  %206 = load ptr, ptr %58, align 8
  %207 = load i32, ptr %59, align 4
  %208 = getelementptr i32, ptr null, i32 %207
  %209 = ptrtoint ptr %208 to i64
  %210 = getelementptr i8, ptr %206, i64 %209
  store i32 %3, ptr %210, align 4
  %211 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %212 = load ptr, ptr %211, align 8
  %213 = load ptr, ptr %7, align 8
  %214 = call ptr @llvm.invariant.start.p0(i64 616, ptr %213)
  %215 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %216 = load i32, ptr %215, align 4
  %217 = getelementptr ptr, ptr %213, i32 %216
  %218 = getelementptr ptr, ptr %217, i32 1
  %219 = load ptr, ptr %218, align 8
  %220 = getelementptr { ptr, ptr }, ptr %219, i32 0, i32 0
  %221 = load ptr, ptr %220, align 8
  %222 = call i32 %221(ptr %212)
  store i32 %222, ptr %60, align 4
  store i32 1, ptr %61, align 4
  %223 = load i32, ptr %60, align 4
  %224 = load i32, ptr %61, align 4
  %225 = add i32 %223, %224
  store i32 %225, ptr %62, align 4
  %226 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %227 = load ptr, ptr %226, align 8
  %228 = load ptr, ptr %7, align 8
  %229 = call ptr @llvm.invariant.start.p0(i64 616, ptr %228)
  %230 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %231 = load i32, ptr %230, align 4
  %232 = getelementptr ptr, ptr %228, i32 %231
  %233 = getelementptr ptr, ptr %232, i32 1
  %234 = load ptr, ptr %233, align 8
  %235 = getelementptr { ptr, ptr }, ptr %234, i32 0, i32 1
  %236 = load ptr, ptr %235, align 8
  %237 = load i32, ptr %62, align 4
  call void %236(ptr %227, i32 %237)
  %238 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %239 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 0
  %240 = load ptr, ptr %238, align 8
  store ptr %240, ptr %239, align 8
  %241 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %242 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 1
  %243 = load ptr, ptr %241, align 8
  store ptr %243, ptr %242, align 8
  %244 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %245 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 2
  %246 = load ptr, ptr %244, align 8
  store ptr %246, ptr %245, align 8
  %247 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %248 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 3
  %249 = load i32, ptr %247, align 4
  store i32 %249, ptr %248, align 4
  call void @set_offset(ptr %63, ptr @IntArray)
  %250 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 0
  %251 = load ptr, ptr %250, align 8
  %252 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %251, 0
  %253 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 1
  %254 = load ptr, ptr %253, align 8
  %255 = insertvalue { ptr, ptr, ptr, i32 } %252, ptr %254, 1
  %256 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 2
  %257 = load ptr, ptr %256, align 8
  %258 = insertvalue { ptr, ptr, ptr, i32 } %255, ptr %257, 2
  %259 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 3
  %260 = load i32, ptr %259, align 4
  %261 = insertvalue { ptr, ptr, ptr, i32 } %258, i32 %260, 3
  ret { ptr, ptr, ptr, i32 } %261
}

define { ptr, ptr, ptr, i32 } @IntArray_extend_aryIntArray({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem5 = alloca ptr, align 8
  %.reg2mem7 = alloca ptr, align 8
  %.reg2mem9 = alloca ptr, align 8
  %.reg2mem14 = alloca ptr, align 8
  %.reg2mem25 = alloca ptr, align 8
  %.reg2mem29 = alloca i1, align 1
  %.reg2mem32 = alloca ptr, align 8
  %.reg2mem34 = alloca ptr, align 8
  %.reg2mem36 = alloca ptr, align 8
  %.reg2mem41 = alloca ptr, align 8
  %.reg2mem47 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @IntArray)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 16, ptr %20)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %34 = load i32, ptr %32, align 4
  store i32 %34, ptr %33, align 4
  call void @set_offset(ptr %22, ptr @IntArray)
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %36, 0
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %39 = load ptr, ptr %38, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %39, 1
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %42 = load ptr, ptr %41, align 8
  %43 = insertvalue { ptr, ptr, ptr, i32 } %40, ptr %42, 2
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %45 = load i32, ptr %44, align 4
  %46 = insertvalue { ptr, ptr, ptr, i32 } %43, i32 %45, 3
  %47 = alloca [0 x ptr], align 8
  %48 = call ptr @llvm.invariant.start.p0(i64 0, ptr %47)
  %49 = call ptr @llvm.invariant.start.p0(i64 616, ptr %36)
  %50 = getelementptr ptr, ptr %36, i32 %45
  %51 = getelementptr ptr, ptr %50, i32 8
  %52 = load ptr, ptr %51, align 8
  %53 = alloca {}, align 8
  %54 = call ptr %52({ ptr, ptr, ptr, i32 } %46, ptr %53)
  %55 = call { ptr } %54({ ptr, ptr, ptr, i32 } %46, { ptr, ptr, ptr, i32 } %46, ptr %47)
  %56 = alloca ptr, align 8
  store { ptr } %55, ptr %56, align 8
  %57 = alloca { ptr }, align 8
  %58 = getelementptr { ptr }, ptr %57, i32 0, i32 0
  %59 = load ptr, ptr %56, align 8
  store ptr %59, ptr %58, align 8
  %60 = call ptr @llvm.invariant.start.p0(i64 16, ptr %57)
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %62 = load ptr, ptr %61, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %62, 0
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %65 = load ptr, ptr %64, align 8
  %66 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %65, 1
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %68 = load ptr, ptr %67, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %66, ptr %68, 2
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %71 = load i32, ptr %70, align 4
  %72 = insertvalue { ptr, ptr, ptr, i32 } %69, i32 %71, 3
  %73 = alloca [0 x ptr], align 8
  %74 = call ptr @llvm.invariant.start.p0(i64 0, ptr %73)
  %75 = call ptr @llvm.invariant.start.p0(i64 616, ptr %62)
  %76 = getelementptr ptr, ptr %62, i32 %71
  %77 = getelementptr ptr, ptr %76, i32 6
  %78 = load ptr, ptr %77, align 8
  %79 = alloca {}, align 8
  %80 = call ptr %78({ ptr, ptr, ptr, i32 } %72, ptr %79)
  %81 = call i32 %80({ ptr, ptr, ptr, i32 } %72, { ptr, ptr, ptr, i32 } %72, ptr %73)
  store i32 %81, ptr %.reg2mem47, align 4
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %83 = load ptr, ptr %82, align 8
  %84 = load ptr, ptr %7, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 616, ptr %84)
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %87 = load i32, ptr %86, align 4
  %88 = getelementptr ptr, ptr %84, i32 %87
  %89 = getelementptr ptr, ptr %88, i32 1
  %90 = load ptr, ptr %89, align 8
  %91 = getelementptr { ptr, ptr }, ptr %90, i32 0, i32 0
  %92 = load ptr, ptr %91, align 8
  %93 = call i32 %92(ptr %83)
  %.reload52 = load i32, ptr %.reg2mem47, align 4
  %94 = add i32 %93, %.reload52
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %96 = load ptr, ptr %95, align 8
  %97 = load ptr, ptr %7, align 8
  %98 = call ptr @llvm.invariant.start.p0(i64 616, ptr %97)
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %100 = load i32, ptr %99, align 4
  %101 = getelementptr ptr, ptr %97, i32 %100
  %102 = getelementptr ptr, ptr %101, i32 2
  %103 = load ptr, ptr %102, align 8
  %104 = getelementptr { ptr, ptr }, ptr %103, i32 0, i32 0
  %105 = load ptr, ptr %104, align 8
  %106 = call i32 %105(ptr %96)
  %107 = icmp slt i32 %94, %106
  %108 = alloca i32, align 4
  %109 = alloca i32, align 4
  %110 = alloca i32, align 4
  %111 = alloca i32, align 4
  %112 = alloca i1, align 1
  %113 = alloca ptr, align 8
  %114 = alloca i32, align 4
  %115 = alloca i32, align 4
  %116 = alloca i32, align 4
  %117 = alloca i32, align 4
  %118 = alloca i32, align 4
  %119 = alloca i32, align 4
  %120 = alloca ptr, align 8
  %121 = alloca { ptr }, align 8
  %122 = alloca i32, align 4
  %123 = alloca ptr, align 8
  %124 = alloca i32, align 4
  %125 = alloca i32, align 4
  %126 = alloca i32, align 4
  %127 = alloca i32, align 4
  %128 = alloca i1, align 1
  %129 = alloca i32, align 4
  %130 = alloca i1, align 1
  %131 = alloca ptr, align 8
  %132 = alloca i32, align 4
  %133 = alloca i32, align 4
  %134 = alloca ptr, align 8
  %135 = alloca i32, align 4
  %136 = alloca i32, align 4
  %137 = alloca i32, align 4
  %138 = alloca i32, align 4
  %139 = alloca i32, align 4
  %140 = alloca i32, align 4
  %141 = alloca { ptr, ptr, ptr, i32 }, align 8
  br i1 %107, label %142, label %207

142:                                              ; preds = %4
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %144 = load ptr, ptr %143, align 8
  %145 = load ptr, ptr %7, align 8
  %146 = call ptr @llvm.invariant.start.p0(i64 616, ptr %145)
  %147 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %148 = load i32, ptr %147, align 4
  %149 = getelementptr ptr, ptr %145, i32 %148
  %150 = getelementptr ptr, ptr %149, i32 1
  %151 = load ptr, ptr %150, align 8
  %152 = getelementptr { ptr, ptr }, ptr %151, i32 0, i32 0
  %153 = load ptr, ptr %152, align 8
  %154 = call i32 %153(ptr %144)
  store ptr %108, ptr %.reg2mem41, align 8
  %.reload46 = load ptr, ptr %.reg2mem41, align 8
  store i32 %154, ptr %.reload46, align 4
  store ptr %109, ptr %.reg2mem36, align 8
  %.reload40 = load ptr, ptr %.reg2mem36, align 8
  store i32 0, ptr %.reload40, align 4
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  store ptr %155, ptr %.reg2mem34, align 8
  %156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  store ptr %156, ptr %.reg2mem32, align 8
  br label %157

157:                                              ; preds = %._crit_edge1, %142
  %.reload35 = load ptr, ptr %.reg2mem34, align 8
  %158 = load ptr, ptr %.reload35, align 8
  %159 = load ptr, ptr %7, align 8
  %160 = call ptr @llvm.invariant.start.p0(i64 616, ptr %159)
  %.reload33 = load ptr, ptr %.reg2mem32, align 8
  %161 = load i32, ptr %.reload33, align 4
  %162 = getelementptr ptr, ptr %159, i32 %161
  %163 = getelementptr ptr, ptr %162, i32 1
  %164 = load ptr, ptr %163, align 8
  %165 = getelementptr { ptr, ptr }, ptr %164, i32 0, i32 0
  %166 = load ptr, ptr %165, align 8
  %167 = call i32 %166(ptr %158)
  store i32 %167, ptr %110, align 4
  %168 = load i32, ptr %110, align 4
  %.reload51 = load i32, ptr %.reg2mem47, align 4
  %169 = add i32 %168, %.reload51
  store i32 %169, ptr %111, align 4
  %.reload45 = load ptr, ptr %.reg2mem41, align 8
  %170 = load i32, ptr %.reload45, align 4
  %171 = load i32, ptr %111, align 4
  %172 = icmp slt i32 %170, %171
  store i1 %172, ptr %112, align 1
  %173 = load i1, ptr %112, align 1
  store i1 %173, ptr %.reg2mem29, align 1
  %.reload31 = load i1, ptr %.reg2mem29, align 1
  br i1 %.reload31, label %174, label %._crit_edge

._crit_edge:                                      ; preds = %157
  br label %205

174:                                              ; preds = %157
  %175 = load ptr, ptr %57, align 8
  %.reload39 = load ptr, ptr %.reg2mem36, align 8
  %176 = load i32, ptr %.reload39, align 4
  %177 = getelementptr i32, ptr null, i32 %176
  %178 = ptrtoint ptr %177 to i64
  %179 = getelementptr i8, ptr %175, i64 %178
  %180 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %181 = load ptr, ptr %180, align 8
  %182 = load ptr, ptr %7, align 8
  %183 = call ptr @llvm.invariant.start.p0(i64 616, ptr %182)
  %184 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %185 = load i32, ptr %184, align 4
  %186 = getelementptr ptr, ptr %182, i32 %185
  %187 = load ptr, ptr %186, align 8
  %188 = getelementptr { ptr, ptr }, ptr %187, i32 0, i32 0
  %189 = load ptr, ptr %188, align 8
  %190 = call { ptr } %189(ptr %181)
  store { ptr } %190, ptr %113, align 8
  %191 = load ptr, ptr %113, align 8
  %.reload44 = load ptr, ptr %.reg2mem41, align 8
  %192 = load i32, ptr %.reload44, align 4
  %193 = getelementptr i32, ptr null, i32 %192
  %194 = ptrtoint ptr %193 to i64
  %195 = getelementptr i8, ptr %191, i64 %194
  %196 = load i32, ptr %179, align 4
  store i32 %196, ptr %195, align 4
  store i32 1, ptr %114, align 4
  %.reload43 = load ptr, ptr %.reg2mem41, align 8
  %197 = load i32, ptr %.reload43, align 4
  %198 = load i32, ptr %114, align 4
  %199 = add i32 %197, %198
  store i32 %199, ptr %115, align 4
  %200 = load i32, ptr %115, align 4
  %.reload42 = load ptr, ptr %.reg2mem41, align 8
  store i32 %200, ptr %.reload42, align 4
  store i32 1, ptr %116, align 4
  %.reload38 = load ptr, ptr %.reg2mem36, align 8
  %201 = load i32, ptr %.reload38, align 4
  %202 = load i32, ptr %116, align 4
  %203 = add i32 %201, %202
  store i32 %203, ptr %117, align 4
  %204 = load i32, ptr %117, align 4
  %.reload37 = load ptr, ptr %.reg2mem36, align 8
  store i32 %204, ptr %.reload37, align 4
  br label %205

205:                                              ; preds = %174, %._crit_edge
  %.reload30 = load i1, ptr %.reg2mem29, align 1
  br i1 %.reload30, label %._crit_edge1, label %206

._crit_edge1:                                     ; preds = %205
  br label %157

206:                                              ; preds = %205
  br label %374

207:                                              ; preds = %4
  %208 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %209 = load ptr, ptr %208, align 8
  %210 = load ptr, ptr %7, align 8
  %211 = call ptr @llvm.invariant.start.p0(i64 616, ptr %210)
  %212 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %213 = load i32, ptr %212, align 4
  %214 = getelementptr ptr, ptr %210, i32 %213
  %215 = getelementptr ptr, ptr %214, i32 1
  %216 = load ptr, ptr %215, align 8
  %217 = getelementptr { ptr, ptr }, ptr %216, i32 0, i32 0
  %218 = load ptr, ptr %217, align 8
  %219 = call i32 %218(ptr %209)
  store i32 %219, ptr %118, align 4
  %220 = load i32, ptr %118, align 4
  %.reload50 = load i32, ptr %.reg2mem47, align 4
  %221 = add i32 %220, %.reload50
  store i32 %221, ptr %119, align 4
  %222 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %223 = load ptr, ptr %222, align 8
  %224 = load ptr, ptr %7, align 8
  %225 = call ptr @llvm.invariant.start.p0(i64 616, ptr %224)
  %226 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %227 = load i32, ptr %226, align 4
  %228 = getelementptr ptr, ptr %224, i32 %227
  %229 = getelementptr ptr, ptr %228, i32 2
  %230 = load ptr, ptr %229, align 8
  %231 = getelementptr { ptr, ptr }, ptr %230, i32 0, i32 1
  %232 = load ptr, ptr %231, align 8
  %233 = load i32, ptr %119, align 4
  call void %232(ptr %223, i32 %233)
  %234 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %235 = load ptr, ptr %234, align 8
  %236 = load ptr, ptr %7, align 8
  %237 = call ptr @llvm.invariant.start.p0(i64 616, ptr %236)
  %238 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %239 = load i32, ptr %238, align 4
  %240 = getelementptr ptr, ptr %236, i32 %239
  %241 = load ptr, ptr %240, align 8
  %242 = getelementptr { ptr, ptr }, ptr %241, i32 0, i32 0
  %243 = load ptr, ptr %242, align 8
  %244 = call { ptr } %243(ptr %235)
  store { ptr } %244, ptr %120, align 8
  store ptr %121, ptr %.reg2mem25, align 8
  %.reload28 = load ptr, ptr %.reg2mem25, align 8
  %245 = getelementptr { ptr }, ptr %.reload28, i32 0, i32 0
  %246 = load ptr, ptr %120, align 8
  store ptr %246, ptr %245, align 8
  %.reload27 = load ptr, ptr %.reg2mem25, align 8
  %247 = call ptr @llvm.invariant.start.p0(i64 16, ptr %.reload27)
  %248 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %249 = load ptr, ptr %248, align 8
  %250 = load ptr, ptr %7, align 8
  %251 = call ptr @llvm.invariant.start.p0(i64 616, ptr %250)
  %252 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %253 = load i32, ptr %252, align 4
  %254 = getelementptr ptr, ptr %250, i32 %253
  %255 = getelementptr ptr, ptr %254, i32 2
  %256 = load ptr, ptr %255, align 8
  %257 = getelementptr { ptr, ptr }, ptr %256, i32 0, i32 0
  %258 = load ptr, ptr %257, align 8
  %259 = call i32 %258(ptr %249)
  store i32 %259, ptr %122, align 4
  %260 = load i32, ptr %122, align 4
  %261 = getelementptr i32, ptr null, i32 %260
  %262 = ptrtoint ptr %261 to i64
  %263 = call ptr @bump_malloc(i64 %262)
  store ptr %263, ptr %123, align 8
  %264 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %265 = load ptr, ptr %264, align 8
  %266 = load ptr, ptr %7, align 8
  %267 = call ptr @llvm.invariant.start.p0(i64 616, ptr %266)
  %268 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %269 = load i32, ptr %268, align 4
  %270 = getelementptr ptr, ptr %266, i32 %269
  %271 = load ptr, ptr %270, align 8
  %272 = getelementptr { ptr, ptr }, ptr %271, i32 0, i32 1
  %273 = load ptr, ptr %272, align 8
  %274 = getelementptr { ptr }, ptr %123, i32 0, i32 0
  %275 = load ptr, ptr %274, align 8
  %276 = insertvalue { ptr } undef, ptr %275, 0
  call void %273(ptr %265, { ptr } %276)
  store ptr %124, ptr %.reg2mem14, align 8
  %.reload24 = load ptr, ptr %.reg2mem14, align 8
  store i32 0, ptr %.reload24, align 4
  store ptr %125, ptr %.reg2mem9, align 8
  %.reload13 = load ptr, ptr %.reg2mem9, align 8
  store i32 0, ptr %.reload13, align 4
  %277 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  store ptr %277, ptr %.reg2mem7, align 8
  %278 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  store ptr %278, ptr %.reg2mem5, align 8
  br label %279

279:                                              ; preds = %._crit_edge3, %207
  %.reload8 = load ptr, ptr %.reg2mem7, align 8
  %280 = load ptr, ptr %.reload8, align 8
  %281 = load ptr, ptr %7, align 8
  %282 = call ptr @llvm.invariant.start.p0(i64 616, ptr %281)
  %.reload6 = load ptr, ptr %.reg2mem5, align 8
  %283 = load i32, ptr %.reload6, align 4
  %284 = getelementptr ptr, ptr %281, i32 %283
  %285 = getelementptr ptr, ptr %284, i32 1
  %286 = load ptr, ptr %285, align 8
  %287 = getelementptr { ptr, ptr }, ptr %286, i32 0, i32 0
  %288 = load ptr, ptr %287, align 8
  %289 = call i32 %288(ptr %280)
  store i32 %289, ptr %126, align 4
  %290 = load i32, ptr %126, align 4
  %.reload49 = load i32, ptr %.reg2mem47, align 4
  %291 = add i32 %290, %.reload49
  store i32 %291, ptr %127, align 4
  %.reload23 = load ptr, ptr %.reg2mem14, align 8
  %292 = load i32, ptr %.reload23, align 4
  %293 = load i32, ptr %127, align 4
  %294 = icmp slt i32 %292, %293
  store i1 %294, ptr %128, align 1
  %295 = load i1, ptr %128, align 1
  store i1 %295, ptr %.reg2mem, align 1
  %.reload4 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload4, label %296, label %._crit_edge2

._crit_edge2:                                     ; preds = %279
  br label %372

296:                                              ; preds = %279
  %297 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %298 = load ptr, ptr %297, align 8
  %299 = load ptr, ptr %7, align 8
  %300 = call ptr @llvm.invariant.start.p0(i64 616, ptr %299)
  %301 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %302 = load i32, ptr %301, align 4
  %303 = getelementptr ptr, ptr %299, i32 %302
  %304 = getelementptr ptr, ptr %303, i32 1
  %305 = load ptr, ptr %304, align 8
  %306 = getelementptr { ptr, ptr }, ptr %305, i32 0, i32 0
  %307 = load ptr, ptr %306, align 8
  %308 = call i32 %307(ptr %298)
  store i32 %308, ptr %129, align 4
  %.reload22 = load ptr, ptr %.reg2mem14, align 8
  %309 = load i32, ptr %.reload22, align 4
  %310 = load i32, ptr %129, align 4
  %311 = icmp slt i32 %309, %310
  store i1 %311, ptr %130, align 1
  %312 = load i1, ptr %130, align 1
  br i1 %312, label %313, label %340

313:                                              ; preds = %296
  %.reload26 = load ptr, ptr %.reg2mem25, align 8
  %314 = load ptr, ptr %.reload26, align 8
  %.reload21 = load ptr, ptr %.reg2mem14, align 8
  %315 = load i32, ptr %.reload21, align 4
  %316 = getelementptr i32, ptr null, i32 %315
  %317 = ptrtoint ptr %316 to i64
  %318 = getelementptr i8, ptr %314, i64 %317
  %319 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %320 = load ptr, ptr %319, align 8
  %321 = load ptr, ptr %7, align 8
  %322 = call ptr @llvm.invariant.start.p0(i64 616, ptr %321)
  %323 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %324 = load i32, ptr %323, align 4
  %325 = getelementptr ptr, ptr %321, i32 %324
  %326 = load ptr, ptr %325, align 8
  %327 = getelementptr { ptr, ptr }, ptr %326, i32 0, i32 0
  %328 = load ptr, ptr %327, align 8
  %329 = call { ptr } %328(ptr %320)
  store { ptr } %329, ptr %131, align 8
  %330 = load ptr, ptr %131, align 8
  %.reload20 = load ptr, ptr %.reg2mem14, align 8
  %331 = load i32, ptr %.reload20, align 4
  %332 = getelementptr i32, ptr null, i32 %331
  %333 = ptrtoint ptr %332 to i64
  %334 = getelementptr i8, ptr %330, i64 %333
  %335 = load i32, ptr %318, align 4
  store i32 %335, ptr %334, align 4
  store i32 1, ptr %132, align 4
  %.reload19 = load ptr, ptr %.reg2mem14, align 8
  %336 = load i32, ptr %.reload19, align 4
  %337 = load i32, ptr %132, align 4
  %338 = add i32 %336, %337
  store i32 %338, ptr %133, align 4
  %339 = load i32, ptr %133, align 4
  %.reload18 = load ptr, ptr %.reg2mem14, align 8
  store i32 %339, ptr %.reload18, align 4
  br label %371

340:                                              ; preds = %296
  %341 = load ptr, ptr %57, align 8
  %.reload12 = load ptr, ptr %.reg2mem9, align 8
  %342 = load i32, ptr %.reload12, align 4
  %343 = getelementptr i32, ptr null, i32 %342
  %344 = ptrtoint ptr %343 to i64
  %345 = getelementptr i8, ptr %341, i64 %344
  %346 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %347 = load ptr, ptr %346, align 8
  %348 = load ptr, ptr %7, align 8
  %349 = call ptr @llvm.invariant.start.p0(i64 616, ptr %348)
  %350 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %351 = load i32, ptr %350, align 4
  %352 = getelementptr ptr, ptr %348, i32 %351
  %353 = load ptr, ptr %352, align 8
  %354 = getelementptr { ptr, ptr }, ptr %353, i32 0, i32 0
  %355 = load ptr, ptr %354, align 8
  %356 = call { ptr } %355(ptr %347)
  store { ptr } %356, ptr %134, align 8
  %357 = load ptr, ptr %134, align 8
  %.reload17 = load ptr, ptr %.reg2mem14, align 8
  %358 = load i32, ptr %.reload17, align 4
  %359 = getelementptr i32, ptr null, i32 %358
  %360 = ptrtoint ptr %359 to i64
  %361 = getelementptr i8, ptr %357, i64 %360
  %362 = load i32, ptr %345, align 4
  store i32 %362, ptr %361, align 4
  store i32 1, ptr %135, align 4
  %.reload16 = load ptr, ptr %.reg2mem14, align 8
  %363 = load i32, ptr %.reload16, align 4
  %364 = load i32, ptr %135, align 4
  %365 = add i32 %363, %364
  store i32 %365, ptr %136, align 4
  %366 = load i32, ptr %136, align 4
  %.reload15 = load ptr, ptr %.reg2mem14, align 8
  store i32 %366, ptr %.reload15, align 4
  store i32 1, ptr %137, align 4
  %.reload11 = load ptr, ptr %.reg2mem9, align 8
  %367 = load i32, ptr %.reload11, align 4
  %368 = load i32, ptr %137, align 4
  %369 = add i32 %367, %368
  store i32 %369, ptr %138, align 4
  %370 = load i32, ptr %138, align 4
  %.reload10 = load ptr, ptr %.reg2mem9, align 8
  store i32 %370, ptr %.reload10, align 4
  br label %371

371:                                              ; preds = %340, %313
  br label %372

372:                                              ; preds = %371, %._crit_edge2
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge3, label %373

._crit_edge3:                                     ; preds = %372
  br label %279

373:                                              ; preds = %372
  br label %374

374:                                              ; preds = %373, %206
  %375 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %376 = load ptr, ptr %375, align 8
  %377 = load ptr, ptr %7, align 8
  %378 = call ptr @llvm.invariant.start.p0(i64 616, ptr %377)
  %379 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %380 = load i32, ptr %379, align 4
  %381 = getelementptr ptr, ptr %377, i32 %380
  %382 = getelementptr ptr, ptr %381, i32 1
  %383 = load ptr, ptr %382, align 8
  %384 = getelementptr { ptr, ptr }, ptr %383, i32 0, i32 0
  %385 = load ptr, ptr %384, align 8
  %386 = call i32 %385(ptr %376)
  store i32 %386, ptr %139, align 4
  %387 = load i32, ptr %139, align 4
  %.reload48 = load i32, ptr %.reg2mem47, align 4
  %388 = add i32 %387, %.reload48
  store i32 %388, ptr %140, align 4
  %389 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %390 = load ptr, ptr %389, align 8
  %391 = load ptr, ptr %7, align 8
  %392 = call ptr @llvm.invariant.start.p0(i64 616, ptr %391)
  %393 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %394 = load i32, ptr %393, align 4
  %395 = getelementptr ptr, ptr %391, i32 %394
  %396 = getelementptr ptr, ptr %395, i32 1
  %397 = load ptr, ptr %396, align 8
  %398 = getelementptr { ptr, ptr }, ptr %397, i32 0, i32 1
  %399 = load ptr, ptr %398, align 8
  %400 = load i32, ptr %140, align 4
  call void %399(ptr %390, i32 %400)
  %401 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %402 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 0
  %403 = load ptr, ptr %401, align 8
  store ptr %403, ptr %402, align 8
  %404 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %405 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 1
  %406 = load ptr, ptr %404, align 8
  store ptr %406, ptr %405, align 8
  %407 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %408 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 2
  %409 = load ptr, ptr %407, align 8
  store ptr %409, ptr %408, align 8
  %410 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %411 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 3
  %412 = load i32, ptr %410, align 4
  store i32 %412, ptr %411, align 4
  call void @set_offset(ptr %141, ptr @IntArray)
  %413 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 0
  %414 = load ptr, ptr %413, align 8
  %415 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %414, 0
  %416 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 1
  %417 = load ptr, ptr %416, align 8
  %418 = insertvalue { ptr, ptr, ptr, i32 } %415, ptr %417, 1
  %419 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 2
  %420 = load ptr, ptr %419, align 8
  %421 = insertvalue { ptr, ptr, ptr, i32 } %418, ptr %420, 2
  %422 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 3
  %423 = load i32, ptr %422, align 4
  %424 = insertvalue { ptr, ptr, ptr, i32 } %421, i32 %423, 3
  ret { ptr, ptr, ptr, i32 } %424
}

define i32 @IntArray__index_xPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem2 = alloca i32, align 4
  %.reg2mem4 = alloca i32, align 4
  %.reg2mem6 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @IntArray)
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %21 = load ptr, ptr %20, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 616, ptr %22)
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %25 = load i32, ptr %24, align 4
  %26 = getelementptr ptr, ptr %22, i32 %25
  %27 = getelementptr ptr, ptr %26, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr { ptr, ptr }, ptr %28, i32 0, i32 0
  %30 = load ptr, ptr %29, align 8
  %31 = call i32 %30(ptr %21)
  %32 = sub i32 %31, 1
  %33 = icmp sgt i32 %3, %32
  %34 = alloca i32, align 4
  %35 = alloca { ptr, ptr, ptr, i32 }, align 8
  %36 = alloca i32, align 4
  %37 = alloca [2 x ptr], align 8
  %38 = alloca { ptr, ptr }, align 8
  %39 = alloca i32, align 4
  %40 = alloca i32, align 4
  %41 = alloca ptr, align 8
  %42 = alloca { ptr }, align 8
  %43 = alloca i32, align 4
  %44 = alloca i32, align 4
  %45 = alloca i32, align 4
  %46 = alloca { ptr, ptr, ptr, i32 }, align 8
  %47 = alloca i32, align 4
  %48 = alloca i32, align 4
  %49 = alloca [3 x ptr], align 8
  %50 = alloca { ptr, ptr, ptr }, align 8
  %51 = alloca { ptr, ptr, ptr, i32 }, align 8
  %52 = alloca [2 x ptr], align 8
  %53 = alloca { ptr, ptr }, align 8
  %54 = alloca { ptr, i160 }, align 8
  %55 = alloca i32, align 4
  %56 = alloca i1, align 1
  %57 = alloca ptr, align 8
  %58 = alloca i32, align 4
  %59 = alloca i32, align 4
  %60 = alloca i32, align 4
  %61 = alloca i1, align 1
  %62 = alloca i32, align 4
  %63 = alloca { ptr, ptr, ptr, i32 }, align 8
  %64 = alloca i32, align 4
  %65 = alloca [2 x ptr], align 8
  %66 = alloca { ptr, ptr }, align 8
  %67 = alloca i32, align 4
  %68 = alloca i32, align 4
  %69 = alloca ptr, align 8
  %70 = alloca { ptr }, align 8
  %71 = alloca i32, align 4
  %72 = alloca i32, align 4
  %73 = alloca i32, align 4
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = alloca i32, align 4
  %76 = alloca i32, align 4
  %77 = alloca [3 x ptr], align 8
  %78 = alloca { ptr, ptr, ptr }, align 8
  %79 = alloca { ptr, ptr, ptr, i32 }, align 8
  %80 = alloca [2 x ptr], align 8
  %81 = alloca { ptr, ptr }, align 8
  %82 = alloca { ptr, i160 }, align 8
  %83 = alloca ptr, align 8
  %84 = alloca i32, align 4
  %85 = alloca i32, align 4
  br i1 %33, label %86, label %._crit_edge

._crit_edge:                                      ; preds = %4
  br label %242

86:                                               ; preds = %4
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %88 = load ptr, ptr %87, align 8
  %89 = load ptr, ptr %7, align 8
  %90 = call ptr @llvm.invariant.start.p0(i64 616, ptr %89)
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %92 = load i32, ptr %91, align 4
  %93 = getelementptr ptr, ptr %89, i32 %92
  %94 = getelementptr ptr, ptr %93, i32 1
  %95 = load ptr, ptr %94, align 8
  %96 = getelementptr { ptr, ptr }, ptr %95, i32 0, i32 0
  %97 = load ptr, ptr %96, align 8
  %98 = call i32 %97(ptr %88)
  store i32 %98, ptr %34, align 4
  %99 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr, i160 }, i32, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr null, i32 1) to i64))
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  store ptr @OutOfBounds, ptr %35, align 8
  store ptr %99, ptr %100, align 8
  store i32 7, ptr %101, align 4
  %102 = call ptr @llvm.invariant.start.p0(i64 16, ptr %35)
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %104 = load ptr, ptr %103, align 8
  %105 = load ptr, ptr %7, align 8
  %106 = call ptr @llvm.invariant.start.p0(i64 616, ptr %105)
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %108 = load i32, ptr %107, align 4
  %109 = getelementptr ptr, ptr %105, i32 %108
  %110 = getelementptr ptr, ptr %109, i32 1
  %111 = load ptr, ptr %110, align 8
  %112 = getelementptr { ptr, ptr }, ptr %111, i32 0, i32 0
  %113 = load ptr, ptr %112, align 8
  %114 = call i32 %113(ptr %104)
  store i32 %114, ptr %36, align 4
  %115 = load i32, ptr %36, align 4
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %117 = load ptr, ptr %116, align 8
  %118 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %117, 0
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %120 = load ptr, ptr %119, align 8
  %121 = insertvalue { ptr, ptr, ptr, i32 } %118, ptr %120, 1
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %123 = load ptr, ptr %122, align 8
  %124 = insertvalue { ptr, ptr, ptr, i32 } %121, ptr %123, 2
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %126 = load i32, ptr %125, align 4
  %127 = insertvalue { ptr, ptr, ptr, i32 } %124, i32 %126, 3
  %128 = getelementptr [2 x ptr], ptr %37, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %128, align 8
  %129 = getelementptr [2 x ptr], ptr %37, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %129, align 8
  %130 = call ptr @llvm.invariant.start.p0(i64 4, ptr %37)
  %131 = call ptr @llvm.invariant.start.p0(i64 232, ptr %117)
  %132 = getelementptr ptr, ptr %117, i32 %126
  %133 = getelementptr ptr, ptr %132, i32 4
  %134 = load ptr, ptr %133, align 8
  %135 = getelementptr { ptr, ptr }, ptr %38, i32 0, i32 0
  store ptr @i32_typ, ptr %135, align 8
  %136 = getelementptr { ptr, ptr }, ptr %38, i32 0, i32 1
  store ptr @i32_typ, ptr %136, align 8
  %137 = call ptr %134({ ptr, ptr, ptr, i32 } %127, ptr %38)
  call void %137({ ptr, ptr, ptr, i32 } %127, { ptr, ptr, ptr, i32 } %127, ptr %37, i32 %115, i32 %3)
  store i32 108, ptr %39, align 4
  store i32 9, ptr %40, align 4
  %138 = load i32, ptr %40, align 4
  %139 = getelementptr i8, ptr null, i32 %138
  %140 = ptrtoint ptr %139 to i64
  %141 = call ptr @bump_malloc(i64 %140)
  store ptr %141, ptr %41, align 8
  %142 = getelementptr { ptr }, ptr %41, i32 0, i32 0
  %143 = getelementptr { ptr }, ptr %42, i32 0, i32 0
  %144 = load ptr, ptr %142, align 8
  store ptr %144, ptr %143, align 8
  %145 = call ptr @llvm.invariant.start.p0(i64 16, ptr %42)
  store i32 0, ptr %43, align 4
  %146 = load ptr, ptr %42, align 8
  %147 = load i32, ptr %43, align 4
  %148 = getelementptr [8 x i8], ptr null, i32 %147
  %149 = ptrtoint ptr %148 to i64
  %150 = getelementptr i8, ptr %146, i64 %149
  %151 = load i64, ptr @yvzmu_stdmini, align 4
  store i64 %151, ptr %150, align 4
  store i32 8, ptr %44, align 4
  store i32 9, ptr %45, align 4
  %152 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %153 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  store ptr @String, ptr %46, align 8
  store ptr %152, ptr %153, align 8
  store i32 7, ptr %154, align 4
  %155 = call ptr @llvm.invariant.start.p0(i64 16, ptr %46)
  store i32 8, ptr %47, align 4
  store i32 9, ptr %48, align 4
  %156 = getelementptr { ptr }, ptr %42, i32 0, i32 0
  %157 = load ptr, ptr %156, align 8
  %158 = insertvalue { ptr } undef, ptr %157, 0
  %159 = load i32, ptr %47, align 4
  %160 = load i32, ptr %48, align 4
  %161 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %162 = load ptr, ptr %161, align 8
  %163 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %162, 0
  %164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %165 = load ptr, ptr %164, align 8
  %166 = insertvalue { ptr, ptr, ptr, i32 } %163, ptr %165, 1
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %168 = load ptr, ptr %167, align 8
  %169 = insertvalue { ptr, ptr, ptr, i32 } %166, ptr %168, 2
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %171 = load i32, ptr %170, align 4
  %172 = insertvalue { ptr, ptr, ptr, i32 } %169, i32 %171, 3
  %173 = getelementptr [3 x ptr], ptr %49, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %173, align 8
  %174 = getelementptr [3 x ptr], ptr %49, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %174, align 8
  %175 = getelementptr [3 x ptr], ptr %49, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %175, align 8
  %176 = call ptr @llvm.invariant.start.p0(i64 9, ptr %49)
  %177 = call ptr @llvm.invariant.start.p0(i64 280, ptr %162)
  %178 = getelementptr ptr, ptr %162, i32 %171
  %179 = getelementptr ptr, ptr %178, i32 4
  %180 = load ptr, ptr %179, align 8
  %181 = getelementptr { ptr, ptr, ptr }, ptr %50, i32 0, i32 0
  store ptr @buffer_typ, ptr %181, align 8
  %182 = getelementptr { ptr, ptr, ptr }, ptr %50, i32 0, i32 1
  store ptr @i32_typ, ptr %182, align 8
  %183 = getelementptr { ptr, ptr, ptr }, ptr %50, i32 0, i32 2
  store ptr @i32_typ, ptr %183, align 8
  %184 = call ptr %180({ ptr, ptr, ptr, i32 } %172, ptr %50)
  call void %184({ ptr, ptr, ptr, i32 } %172, { ptr, ptr, ptr, i32 } %172, ptr %49, { ptr } %158, i32 %159, i32 %160)
  %185 = load i32, ptr %39, align 4
  %186 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 0
  %188 = load ptr, ptr %186, align 8
  store ptr %188, ptr %187, align 8
  %189 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %190 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 1
  %191 = load ptr, ptr %189, align 8
  store ptr %191, ptr %190, align 8
  %192 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %193 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 2
  %194 = load ptr, ptr %192, align 8
  store ptr %194, ptr %193, align 8
  %195 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %196 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 3
  %197 = load i32, ptr %195, align 4
  store i32 %197, ptr %196, align 4
  call void @set_offset(ptr %51, ptr @String)
  %198 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 0
  %199 = load ptr, ptr %198, align 8
  %200 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %199, 0
  %201 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 1
  %202 = load ptr, ptr %201, align 8
  %203 = insertvalue { ptr, ptr, ptr, i32 } %200, ptr %202, 1
  %204 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 2
  %205 = load ptr, ptr %204, align 8
  %206 = insertvalue { ptr, ptr, ptr, i32 } %203, ptr %205, 2
  %207 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 3
  %208 = load i32, ptr %207, align 4
  %209 = insertvalue { ptr, ptr, ptr, i32 } %206, i32 %208, 3
  %210 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %211 = load ptr, ptr %210, align 8
  %212 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %211, 0
  %213 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %214 = load ptr, ptr %213, align 8
  %215 = insertvalue { ptr, ptr, ptr, i32 } %212, ptr %214, 1
  %216 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %217 = load ptr, ptr %216, align 8
  %218 = insertvalue { ptr, ptr, ptr, i32 } %215, ptr %217, 2
  %219 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %220 = load i32, ptr %219, align 4
  %221 = insertvalue { ptr, ptr, ptr, i32 } %218, i32 %220, 3
  %222 = getelementptr [2 x ptr], ptr %52, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %222, align 8
  %223 = getelementptr [2 x ptr], ptr %52, i32 0, i32 1
  store ptr @_parameterization_String, ptr %223, align 8
  %224 = call ptr @llvm.invariant.start.p0(i64 4, ptr %52)
  %225 = call ptr @llvm.invariant.start.p0(i64 232, ptr %211)
  %226 = getelementptr ptr, ptr %211, i32 %220
  %227 = getelementptr ptr, ptr %226, i32 7
  %228 = load ptr, ptr %227, align 8
  %229 = getelementptr { ptr, ptr }, ptr %53, i32 0, i32 0
  store ptr @i32_typ, ptr %229, align 8
  %230 = getelementptr { ptr, ptr }, ptr %53, i32 0, i32 1
  store ptr %199, ptr %230, align 8
  %231 = call ptr %228({ ptr, ptr, ptr, i32 } %221, ptr %53)
  call void %231({ ptr, ptr, ptr, i32 } %221, { ptr, ptr, ptr, i32 } %221, ptr %52, i32 %185, { ptr, ptr, ptr, i32 } %209)
  %232 = getelementptr { ptr, i160 }, ptr %35, i32 0, i32 0
  %233 = load ptr, ptr %232, align 8
  %234 = insertvalue { ptr, i160 } undef, ptr %233, 0
  %235 = getelementptr { ptr, i160 }, ptr %35, i32 0, i32 1
  %236 = load i160, ptr %235, align 4
  %237 = insertvalue { ptr, i160 } %234, i160 %236, 1
  %238 = call ptr @get_current_coroutine()
  %239 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %238, i32 0, i32 4
  store { ptr, i160 } %237, ptr %239, align 8
  call void @coroutine_yield(ptr %238)
  %240 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %238, i32 0, i32 4
  %241 = load { ptr, i160 }, ptr %240, align 8
  store { ptr, i160 } %241, ptr %54, align 8
  br label %242

242:                                              ; preds = %86, %._crit_edge
  store i32 0, ptr %55, align 4
  %243 = load i32, ptr %55, align 4
  %244 = icmp sge i32 %3, %243
  store i1 %244, ptr %56, align 1
  %245 = load i1, ptr %56, align 1
  br i1 %245, label %246, label %263

246:                                              ; preds = %242
  %247 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %248 = load ptr, ptr %247, align 8
  %249 = load ptr, ptr %7, align 8
  %250 = call ptr @llvm.invariant.start.p0(i64 616, ptr %249)
  %251 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %252 = load i32, ptr %251, align 4
  %253 = getelementptr ptr, ptr %249, i32 %252
  %254 = load ptr, ptr %253, align 8
  %255 = getelementptr { ptr, ptr }, ptr %254, i32 0, i32 0
  %256 = load ptr, ptr %255, align 8
  %257 = call { ptr } %256(ptr %248)
  store { ptr } %257, ptr %57, align 8
  %258 = load ptr, ptr %57, align 8
  %259 = getelementptr i32, ptr null, i32 %3
  %260 = ptrtoint ptr %259 to i64
  %261 = getelementptr i8, ptr %258, i64 %260
  %262 = load i32, ptr %261, align 4
  store i32 %262, ptr %.reg2mem4, align 4
  %.reload5 = load i32, ptr %.reg2mem4, align 4
  store i32 %.reload5, ptr %.reg2mem6, align 4
  br label %470

263:                                              ; preds = %242
  %264 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %265 = load ptr, ptr %264, align 8
  %266 = load ptr, ptr %7, align 8
  %267 = call ptr @llvm.invariant.start.p0(i64 616, ptr %266)
  %268 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %269 = load i32, ptr %268, align 4
  %270 = getelementptr ptr, ptr %266, i32 %269
  %271 = getelementptr ptr, ptr %270, i32 1
  %272 = load ptr, ptr %271, align 8
  %273 = getelementptr { ptr, ptr }, ptr %272, i32 0, i32 0
  %274 = load ptr, ptr %273, align 8
  %275 = call i32 %274(ptr %265)
  store i32 %275, ptr %58, align 4
  %276 = load i32, ptr %58, align 4
  %277 = add i32 %276, %3
  store i32 %277, ptr %59, align 4
  store i32 0, ptr %60, align 4
  %278 = load i32, ptr %59, align 4
  %279 = load i32, ptr %60, align 4
  %280 = icmp slt i32 %278, %279
  store i1 %280, ptr %61, align 1
  %281 = load i1, ptr %61, align 1
  br i1 %281, label %282, label %._crit_edge1

._crit_edge1:                                     ; preds = %263
  br label %438

282:                                              ; preds = %263
  %283 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %284 = load ptr, ptr %283, align 8
  %285 = load ptr, ptr %7, align 8
  %286 = call ptr @llvm.invariant.start.p0(i64 616, ptr %285)
  %287 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %288 = load i32, ptr %287, align 4
  %289 = getelementptr ptr, ptr %285, i32 %288
  %290 = getelementptr ptr, ptr %289, i32 1
  %291 = load ptr, ptr %290, align 8
  %292 = getelementptr { ptr, ptr }, ptr %291, i32 0, i32 0
  %293 = load ptr, ptr %292, align 8
  %294 = call i32 %293(ptr %284)
  store i32 %294, ptr %62, align 4
  %295 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr, i160 }, i32, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr null, i32 1) to i64))
  %296 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 1
  %297 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 3
  store ptr @OutOfBounds, ptr %63, align 8
  store ptr %295, ptr %296, align 8
  store i32 7, ptr %297, align 4
  %298 = call ptr @llvm.invariant.start.p0(i64 16, ptr %63)
  %299 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %300 = load ptr, ptr %299, align 8
  %301 = load ptr, ptr %7, align 8
  %302 = call ptr @llvm.invariant.start.p0(i64 616, ptr %301)
  %303 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %304 = load i32, ptr %303, align 4
  %305 = getelementptr ptr, ptr %301, i32 %304
  %306 = getelementptr ptr, ptr %305, i32 1
  %307 = load ptr, ptr %306, align 8
  %308 = getelementptr { ptr, ptr }, ptr %307, i32 0, i32 0
  %309 = load ptr, ptr %308, align 8
  %310 = call i32 %309(ptr %300)
  store i32 %310, ptr %64, align 4
  %311 = load i32, ptr %64, align 4
  %312 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 0
  %313 = load ptr, ptr %312, align 8
  %314 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %313, 0
  %315 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 1
  %316 = load ptr, ptr %315, align 8
  %317 = insertvalue { ptr, ptr, ptr, i32 } %314, ptr %316, 1
  %318 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 2
  %319 = load ptr, ptr %318, align 8
  %320 = insertvalue { ptr, ptr, ptr, i32 } %317, ptr %319, 2
  %321 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 3
  %322 = load i32, ptr %321, align 4
  %323 = insertvalue { ptr, ptr, ptr, i32 } %320, i32 %322, 3
  %324 = getelementptr [2 x ptr], ptr %65, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %324, align 8
  %325 = getelementptr [2 x ptr], ptr %65, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %325, align 8
  %326 = call ptr @llvm.invariant.start.p0(i64 4, ptr %65)
  %327 = call ptr @llvm.invariant.start.p0(i64 232, ptr %313)
  %328 = getelementptr ptr, ptr %313, i32 %322
  %329 = getelementptr ptr, ptr %328, i32 4
  %330 = load ptr, ptr %329, align 8
  %331 = getelementptr { ptr, ptr }, ptr %66, i32 0, i32 0
  store ptr @i32_typ, ptr %331, align 8
  %332 = getelementptr { ptr, ptr }, ptr %66, i32 0, i32 1
  store ptr @i32_typ, ptr %332, align 8
  %333 = call ptr %330({ ptr, ptr, ptr, i32 } %323, ptr %66)
  call void %333({ ptr, ptr, ptr, i32 } %323, { ptr, ptr, ptr, i32 } %323, ptr %65, i32 %311, i32 %3)
  store i32 110, ptr %67, align 4
  store i32 9, ptr %68, align 4
  %334 = load i32, ptr %68, align 4
  %335 = getelementptr i8, ptr null, i32 %334
  %336 = ptrtoint ptr %335 to i64
  %337 = call ptr @bump_malloc(i64 %336)
  store ptr %337, ptr %69, align 8
  %338 = getelementptr { ptr }, ptr %69, i32 0, i32 0
  %339 = getelementptr { ptr }, ptr %70, i32 0, i32 0
  %340 = load ptr, ptr %338, align 8
  store ptr %340, ptr %339, align 8
  %341 = call ptr @llvm.invariant.start.p0(i64 16, ptr %70)
  store i32 0, ptr %71, align 4
  %342 = load ptr, ptr %70, align 8
  %343 = load i32, ptr %71, align 4
  %344 = getelementptr [8 x i8], ptr null, i32 %343
  %345 = ptrtoint ptr %344 to i64
  %346 = getelementptr i8, ptr %342, i64 %345
  %347 = load i64, ptr @mdhwx_stdmini, align 4
  store i64 %347, ptr %346, align 4
  store i32 8, ptr %72, align 4
  store i32 9, ptr %73, align 4
  %348 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %349 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %350 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  store ptr @String, ptr %74, align 8
  store ptr %348, ptr %349, align 8
  store i32 7, ptr %350, align 4
  %351 = call ptr @llvm.invariant.start.p0(i64 16, ptr %74)
  store i32 8, ptr %75, align 4
  store i32 9, ptr %76, align 4
  %352 = getelementptr { ptr }, ptr %70, i32 0, i32 0
  %353 = load ptr, ptr %352, align 8
  %354 = insertvalue { ptr } undef, ptr %353, 0
  %355 = load i32, ptr %75, align 4
  %356 = load i32, ptr %76, align 4
  %357 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %358 = load ptr, ptr %357, align 8
  %359 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %358, 0
  %360 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %361 = load ptr, ptr %360, align 8
  %362 = insertvalue { ptr, ptr, ptr, i32 } %359, ptr %361, 1
  %363 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %364 = load ptr, ptr %363, align 8
  %365 = insertvalue { ptr, ptr, ptr, i32 } %362, ptr %364, 2
  %366 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %367 = load i32, ptr %366, align 4
  %368 = insertvalue { ptr, ptr, ptr, i32 } %365, i32 %367, 3
  %369 = getelementptr [3 x ptr], ptr %77, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %369, align 8
  %370 = getelementptr [3 x ptr], ptr %77, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %370, align 8
  %371 = getelementptr [3 x ptr], ptr %77, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %371, align 8
  %372 = call ptr @llvm.invariant.start.p0(i64 9, ptr %77)
  %373 = call ptr @llvm.invariant.start.p0(i64 280, ptr %358)
  %374 = getelementptr ptr, ptr %358, i32 %367
  %375 = getelementptr ptr, ptr %374, i32 4
  %376 = load ptr, ptr %375, align 8
  %377 = getelementptr { ptr, ptr, ptr }, ptr %78, i32 0, i32 0
  store ptr @buffer_typ, ptr %377, align 8
  %378 = getelementptr { ptr, ptr, ptr }, ptr %78, i32 0, i32 1
  store ptr @i32_typ, ptr %378, align 8
  %379 = getelementptr { ptr, ptr, ptr }, ptr %78, i32 0, i32 2
  store ptr @i32_typ, ptr %379, align 8
  %380 = call ptr %376({ ptr, ptr, ptr, i32 } %368, ptr %78)
  call void %380({ ptr, ptr, ptr, i32 } %368, { ptr, ptr, ptr, i32 } %368, ptr %77, { ptr } %354, i32 %355, i32 %356)
  %381 = load i32, ptr %67, align 4
  %382 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 0
  %383 = getelementptr { ptr, ptr, ptr, i32 }, ptr %79, i32 0, i32 0
  %384 = load ptr, ptr %382, align 8
  store ptr %384, ptr %383, align 8
  %385 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 1
  %386 = getelementptr { ptr, ptr, ptr, i32 }, ptr %79, i32 0, i32 1
  %387 = load ptr, ptr %385, align 8
  store ptr %387, ptr %386, align 8
  %388 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 2
  %389 = getelementptr { ptr, ptr, ptr, i32 }, ptr %79, i32 0, i32 2
  %390 = load ptr, ptr %388, align 8
  store ptr %390, ptr %389, align 8
  %391 = getelementptr { ptr, ptr, ptr, i32 }, ptr %74, i32 0, i32 3
  %392 = getelementptr { ptr, ptr, ptr, i32 }, ptr %79, i32 0, i32 3
  %393 = load i32, ptr %391, align 4
  store i32 %393, ptr %392, align 4
  call void @set_offset(ptr %79, ptr @String)
  %394 = getelementptr { ptr, ptr, ptr, i32 }, ptr %79, i32 0, i32 0
  %395 = load ptr, ptr %394, align 8
  %396 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %395, 0
  %397 = getelementptr { ptr, ptr, ptr, i32 }, ptr %79, i32 0, i32 1
  %398 = load ptr, ptr %397, align 8
  %399 = insertvalue { ptr, ptr, ptr, i32 } %396, ptr %398, 1
  %400 = getelementptr { ptr, ptr, ptr, i32 }, ptr %79, i32 0, i32 2
  %401 = load ptr, ptr %400, align 8
  %402 = insertvalue { ptr, ptr, ptr, i32 } %399, ptr %401, 2
  %403 = getelementptr { ptr, ptr, ptr, i32 }, ptr %79, i32 0, i32 3
  %404 = load i32, ptr %403, align 4
  %405 = insertvalue { ptr, ptr, ptr, i32 } %402, i32 %404, 3
  %406 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 0
  %407 = load ptr, ptr %406, align 8
  %408 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %407, 0
  %409 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 1
  %410 = load ptr, ptr %409, align 8
  %411 = insertvalue { ptr, ptr, ptr, i32 } %408, ptr %410, 1
  %412 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 2
  %413 = load ptr, ptr %412, align 8
  %414 = insertvalue { ptr, ptr, ptr, i32 } %411, ptr %413, 2
  %415 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 3
  %416 = load i32, ptr %415, align 4
  %417 = insertvalue { ptr, ptr, ptr, i32 } %414, i32 %416, 3
  %418 = getelementptr [2 x ptr], ptr %80, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %418, align 8
  %419 = getelementptr [2 x ptr], ptr %80, i32 0, i32 1
  store ptr @_parameterization_String, ptr %419, align 8
  %420 = call ptr @llvm.invariant.start.p0(i64 4, ptr %80)
  %421 = call ptr @llvm.invariant.start.p0(i64 232, ptr %407)
  %422 = getelementptr ptr, ptr %407, i32 %416
  %423 = getelementptr ptr, ptr %422, i32 7
  %424 = load ptr, ptr %423, align 8
  %425 = getelementptr { ptr, ptr }, ptr %81, i32 0, i32 0
  store ptr @i32_typ, ptr %425, align 8
  %426 = getelementptr { ptr, ptr }, ptr %81, i32 0, i32 1
  store ptr %395, ptr %426, align 8
  %427 = call ptr %424({ ptr, ptr, ptr, i32 } %417, ptr %81)
  call void %427({ ptr, ptr, ptr, i32 } %417, { ptr, ptr, ptr, i32 } %417, ptr %80, i32 %381, { ptr, ptr, ptr, i32 } %405)
  %428 = getelementptr { ptr, i160 }, ptr %63, i32 0, i32 0
  %429 = load ptr, ptr %428, align 8
  %430 = insertvalue { ptr, i160 } undef, ptr %429, 0
  %431 = getelementptr { ptr, i160 }, ptr %63, i32 0, i32 1
  %432 = load i160, ptr %431, align 4
  %433 = insertvalue { ptr, i160 } %430, i160 %432, 1
  %434 = call ptr @get_current_coroutine()
  %435 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %434, i32 0, i32 4
  store { ptr, i160 } %433, ptr %435, align 8
  call void @coroutine_yield(ptr %434)
  %436 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %434, i32 0, i32 4
  %437 = load { ptr, i160 }, ptr %436, align 8
  store { ptr, i160 } %437, ptr %82, align 8
  br label %438

438:                                              ; preds = %282, %._crit_edge1
  %439 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %440 = load ptr, ptr %439, align 8
  %441 = load ptr, ptr %7, align 8
  %442 = call ptr @llvm.invariant.start.p0(i64 616, ptr %441)
  %443 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %444 = load i32, ptr %443, align 4
  %445 = getelementptr ptr, ptr %441, i32 %444
  %446 = load ptr, ptr %445, align 8
  %447 = getelementptr { ptr, ptr }, ptr %446, i32 0, i32 0
  %448 = load ptr, ptr %447, align 8
  %449 = call { ptr } %448(ptr %440)
  store { ptr } %449, ptr %83, align 8
  %450 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %451 = load ptr, ptr %450, align 8
  %452 = load ptr, ptr %7, align 8
  %453 = call ptr @llvm.invariant.start.p0(i64 616, ptr %452)
  %454 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %455 = load i32, ptr %454, align 4
  %456 = getelementptr ptr, ptr %452, i32 %455
  %457 = getelementptr ptr, ptr %456, i32 1
  %458 = load ptr, ptr %457, align 8
  %459 = getelementptr { ptr, ptr }, ptr %458, i32 0, i32 0
  %460 = load ptr, ptr %459, align 8
  %461 = call i32 %460(ptr %451)
  store i32 %461, ptr %84, align 4
  %462 = load i32, ptr %84, align 4
  %463 = add i32 %462, %3
  store i32 %463, ptr %85, align 4
  %464 = load ptr, ptr %83, align 8
  %465 = load i32, ptr %85, align 4
  %466 = getelementptr i32, ptr null, i32 %465
  %467 = ptrtoint ptr %466 to i64
  %468 = getelementptr i8, ptr %464, i64 %467
  %469 = load i32, ptr %468, align 4
  store i32 %469, ptr %.reg2mem2, align 4
  %.reload3 = load i32, ptr %.reg2mem2, align 4
  store i32 %.reload3, ptr %.reg2mem6, align 4
  br label %470

470:                                              ; preds = %438, %246
  %.reload7 = load i32, ptr %.reg2mem6, align 4
  store i32 %.reload7, ptr %.reg2mem, align 4
  br label %471

471:                                              ; preds = %470
  %.reload = load i32, ptr %.reg2mem, align 4
  ret i32 %.reload
}

define { ptr, i32 } @IntArray_pop_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i32 }, align 8
  %.reg2mem1 = alloca { ptr, i32 }, align 8
  %.reg2mem3 = alloca { ptr, i32 }, align 8
  %.reg2mem5 = alloca { ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @IntArray)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 616, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 1
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call i32 %29(ptr %20)
  %31 = icmp eq i32 %30, 0
  %32 = alloca [0 x i8], align 1
  %33 = alloca i32, align 4
  %34 = alloca ptr, align 8
  %35 = alloca i64, align 8
  %36 = alloca i32, align 4
  %37 = alloca i32, align 4
  %38 = alloca i32, align 4
  %39 = alloca ptr, align 8
  %40 = alloca i32, align 4
  %41 = alloca i32, align 4
  %42 = alloca ptr, align 8
  %43 = alloca i64, align 8
  br i1 %31, label %44, label %51

44:                                               ; preds = %3
  %45 = load [0 x i8], ptr %32, align 1
  store [0 x i8] %45, ptr %33, align 1
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %35, align 4
  %46 = load i64, ptr %35, align 4
  store i64 %46, ptr %34, align 4
  %47 = load ptr, ptr %34, align 8
  %48 = insertvalue { ptr, i32 } undef, ptr %47, 0
  %49 = load i32, ptr %33, align 4
  %50 = insertvalue { ptr, i32 } %48, i32 %49, 1
  store { ptr, i32 } %50, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i32 }, ptr %.reg2mem3, align 8
  store { ptr, i32 } %.reload4, ptr %.reg2mem5, align 8
  br label %113

51:                                               ; preds = %3
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %53 = load ptr, ptr %52, align 8
  %54 = load ptr, ptr %6, align 8
  %55 = call ptr @llvm.invariant.start.p0(i64 616, ptr %54)
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %57 = load i32, ptr %56, align 4
  %58 = getelementptr ptr, ptr %54, i32 %57
  %59 = getelementptr ptr, ptr %58, i32 1
  %60 = load ptr, ptr %59, align 8
  %61 = getelementptr { ptr, ptr }, ptr %60, i32 0, i32 0
  %62 = load ptr, ptr %61, align 8
  %63 = call i32 %62(ptr %53)
  store i32 %63, ptr %36, align 4
  store i32 1, ptr %37, align 4
  %64 = load i32, ptr %36, align 4
  %65 = load i32, ptr %37, align 4
  %66 = sub i32 %64, %65
  store i32 %66, ptr %38, align 4
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %68 = load ptr, ptr %67, align 8
  %69 = load ptr, ptr %6, align 8
  %70 = call ptr @llvm.invariant.start.p0(i64 616, ptr %69)
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %72 = load i32, ptr %71, align 4
  %73 = getelementptr ptr, ptr %69, i32 %72
  %74 = getelementptr ptr, ptr %73, i32 1
  %75 = load ptr, ptr %74, align 8
  %76 = getelementptr { ptr, ptr }, ptr %75, i32 0, i32 1
  %77 = load ptr, ptr %76, align 8
  %78 = load i32, ptr %38, align 4
  call void %77(ptr %68, i32 %78)
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %80 = load ptr, ptr %79, align 8
  %81 = load ptr, ptr %6, align 8
  %82 = call ptr @llvm.invariant.start.p0(i64 616, ptr %81)
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %84 = load i32, ptr %83, align 4
  %85 = getelementptr ptr, ptr %81, i32 %84
  %86 = load ptr, ptr %85, align 8
  %87 = getelementptr { ptr, ptr }, ptr %86, i32 0, i32 0
  %88 = load ptr, ptr %87, align 8
  %89 = call { ptr } %88(ptr %80)
  store { ptr } %89, ptr %39, align 8
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = load ptr, ptr %6, align 8
  %93 = call ptr @llvm.invariant.start.p0(i64 616, ptr %92)
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %95 = load i32, ptr %94, align 4
  %96 = getelementptr ptr, ptr %92, i32 %95
  %97 = getelementptr ptr, ptr %96, i32 1
  %98 = load ptr, ptr %97, align 8
  %99 = getelementptr { ptr, ptr }, ptr %98, i32 0, i32 0
  %100 = load ptr, ptr %99, align 8
  %101 = call i32 %100(ptr %91)
  store i32 %101, ptr %40, align 4
  %102 = load ptr, ptr %39, align 8
  %103 = load i32, ptr %40, align 4
  %104 = getelementptr i32, ptr null, i32 %103
  %105 = ptrtoint ptr %104 to i64
  %106 = getelementptr i8, ptr %102, i64 %105
  %107 = load i32, ptr %106, align 4
  store i32 %107, ptr %41, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %43, align 4
  %108 = load i64, ptr %43, align 4
  store i64 %108, ptr %42, align 4
  %109 = load ptr, ptr %42, align 8
  %110 = insertvalue { ptr, i32 } undef, ptr %109, 0
  %111 = load i32, ptr %41, align 4
  %112 = insertvalue { ptr, i32 } %110, i32 %111, 1
  store { ptr, i32 } %112, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i32 }, ptr %.reg2mem1, align 8
  store { ptr, i32 } %.reload2, ptr %.reg2mem5, align 8
  br label %113

113:                                              ; preds = %51, %44
  %.reload6 = load { ptr, i32 }, ptr %.reg2mem5, align 8
  store { ptr, i32 } %.reload6, ptr %.reg2mem, align 8
  br label %114

114:                                              ; preds = %113
  %.reload = load { ptr, i32 }, ptr %.reg2mem, align 8
  ret { ptr, i32 } %.reload
}

define { ptr, ptr, ptr, i32 } @IntArray_copy_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i1, align 1
  %.reg2mem6 = alloca i32, align 4
  %.reg2mem11 = alloca ptr, align 8
  %.reg2mem13 = alloca ptr, align 8
  %.reg2mem15 = alloca i32, align 4
  %.reg2mem17 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @IntArray)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 616, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 1
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call i32 %29(ptr %20)
  %31 = getelementptr i32, ptr null, i32 %30
  %32 = ptrtoint ptr %31 to i64
  %33 = alloca ptr, align 8
  %34 = call ptr @bump_malloc(i64 %32)
  store ptr %34, ptr %33, align 8
  %35 = alloca { ptr }, align 8
  %36 = getelementptr { ptr }, ptr %33, i32 0, i32 0
  %37 = getelementptr { ptr }, ptr %35, i32 0, i32 0
  %38 = load ptr, ptr %36, align 8
  store ptr %38, ptr %37, align 8
  %39 = call ptr @llvm.invariant.start.p0(i64 16, ptr %35)
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  store ptr %40, ptr %.reg2mem13, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  store ptr %41, ptr %.reg2mem11, align 8
  store i32 0, ptr %.reg2mem17, align 4
  %42 = alloca i32, align 4
  %43 = alloca i1, align 1
  %44 = alloca ptr, align 8
  %45 = alloca i32, align 4
  %46 = alloca i32, align 4
  %47 = alloca i32, align 4
  %48 = alloca i32, align 4
  %49 = alloca { ptr, ptr, ptr, i32 }, align 8
  %50 = alloca i32, align 4
  %51 = alloca i32, align 4
  %52 = alloca [3 x ptr], align 8
  %53 = alloca { ptr, ptr, ptr }, align 8
  %54 = alloca { ptr, ptr, ptr, i32 }, align 8
  %55 = alloca { ptr, ptr, ptr, i32 }, align 8
  %56 = alloca { ptr, ptr, ptr, i32 }, align 8
  br label %57

57:                                               ; preds = %._crit_edge, %3
  %.reload18 = load i32, ptr %.reg2mem17, align 4
  store i32 %.reload18, ptr %.reg2mem6, align 4
  %.reload14 = load ptr, ptr %.reg2mem13, align 8
  %58 = load ptr, ptr %.reload14, align 8
  %59 = load ptr, ptr %6, align 8
  %60 = call ptr @llvm.invariant.start.p0(i64 616, ptr %59)
  %.reload12 = load ptr, ptr %.reg2mem11, align 8
  %61 = load i32, ptr %.reload12, align 4
  %62 = getelementptr ptr, ptr %59, i32 %61
  %63 = getelementptr ptr, ptr %62, i32 1
  %64 = load ptr, ptr %63, align 8
  %65 = getelementptr { ptr, ptr }, ptr %64, i32 0, i32 0
  %66 = load ptr, ptr %65, align 8
  %67 = call i32 %66(ptr %58)
  store i32 %67, ptr %42, align 4
  %68 = load i32, ptr %42, align 4
  %.reload10 = load i32, ptr %.reg2mem6, align 4
  %69 = icmp slt i32 %.reload10, %68
  store i1 %69, ptr %43, align 1
  %70 = load i1, ptr %43, align 1
  store i1 %70, ptr %.reg2mem3, align 1
  %.reload5 = load i1, ptr %.reg2mem3, align 1
  br i1 %.reload5, label %71, label %95

71:                                               ; preds = %57
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %73 = load ptr, ptr %72, align 8
  %74 = load ptr, ptr %6, align 8
  %75 = call ptr @llvm.invariant.start.p0(i64 616, ptr %74)
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %77 = load i32, ptr %76, align 4
  %78 = getelementptr ptr, ptr %74, i32 %77
  %79 = load ptr, ptr %78, align 8
  %80 = getelementptr { ptr, ptr }, ptr %79, i32 0, i32 0
  %81 = load ptr, ptr %80, align 8
  %82 = call { ptr } %81(ptr %73)
  store { ptr } %82, ptr %44, align 8
  %83 = load ptr, ptr %44, align 8
  %.reload9 = load i32, ptr %.reg2mem6, align 4
  %84 = getelementptr i32, ptr null, i32 %.reload9
  %85 = ptrtoint ptr %84 to i64
  %86 = getelementptr i8, ptr %83, i64 %85
  %87 = load ptr, ptr %35, align 8
  %.reload8 = load i32, ptr %.reg2mem6, align 4
  %88 = getelementptr i32, ptr null, i32 %.reload8
  %89 = ptrtoint ptr %88 to i64
  %90 = getelementptr i8, ptr %87, i64 %89
  %91 = load i32, ptr %86, align 4
  store i32 %91, ptr %90, align 4
  store i32 1, ptr %45, align 4
  %92 = load i32, ptr %45, align 4
  %.reload7 = load i32, ptr %.reg2mem6, align 4
  %93 = add i32 %.reload7, %92
  store i32 %93, ptr %46, align 4
  %94 = load i32, ptr %46, align 4
  store i32 %94, ptr %.reg2mem1, align 4
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem15, align 4
  br label %96

95:                                               ; preds = %57
  store i32 poison, ptr %.reg2mem15, align 4
  br label %96

96:                                               ; preds = %95, %71
  %.reload16 = load i32, ptr %.reg2mem15, align 4
  store i32 %.reload16, ptr %.reg2mem, align 4
  br label %97

97:                                               ; preds = %96
  %.reload4 = load i1, ptr %.reg2mem3, align 1
  br i1 %.reload4, label %._crit_edge, label %98

._crit_edge:                                      ; preds = %97
  %.reload = load i32, ptr %.reg2mem, align 4
  store i32 %.reload, ptr %.reg2mem17, align 4
  br label %57

98:                                               ; preds = %97
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %100 = load ptr, ptr %99, align 8
  %101 = load ptr, ptr %6, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 616, ptr %101)
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %104 = load i32, ptr %103, align 4
  %105 = getelementptr ptr, ptr %101, i32 %104
  %106 = getelementptr ptr, ptr %105, i32 1
  %107 = load ptr, ptr %106, align 8
  %108 = getelementptr { ptr, ptr }, ptr %107, i32 0, i32 0
  %109 = load ptr, ptr %108, align 8
  %110 = call i32 %109(ptr %100)
  store i32 %110, ptr %47, align 4
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %112 = load ptr, ptr %111, align 8
  %113 = load ptr, ptr %6, align 8
  %114 = call ptr @llvm.invariant.start.p0(i64 616, ptr %113)
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %116 = load i32, ptr %115, align 4
  %117 = getelementptr ptr, ptr %113, i32 %116
  %118 = getelementptr ptr, ptr %117, i32 1
  %119 = load ptr, ptr %118, align 8
  %120 = getelementptr { ptr, ptr }, ptr %119, i32 0, i32 0
  %121 = load ptr, ptr %120, align 8
  %122 = call i32 %121(ptr %112)
  store i32 %122, ptr %48, align 4
  %123 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 1
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 3
  store ptr @IntArray, ptr %49, align 8
  store ptr %123, ptr %124, align 8
  store i32 7, ptr %125, align 4
  %126 = call ptr @llvm.invariant.start.p0(i64 16, ptr %49)
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %128 = load ptr, ptr %127, align 8
  %129 = load ptr, ptr %6, align 8
  %130 = call ptr @llvm.invariant.start.p0(i64 616, ptr %129)
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %132 = load i32, ptr %131, align 4
  %133 = getelementptr ptr, ptr %129, i32 %132
  %134 = getelementptr ptr, ptr %133, i32 1
  %135 = load ptr, ptr %134, align 8
  %136 = getelementptr { ptr, ptr }, ptr %135, i32 0, i32 0
  %137 = load ptr, ptr %136, align 8
  %138 = call i32 %137(ptr %128)
  store i32 %138, ptr %50, align 4
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %140 = load ptr, ptr %139, align 8
  %141 = load ptr, ptr %6, align 8
  %142 = call ptr @llvm.invariant.start.p0(i64 616, ptr %141)
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %144 = load i32, ptr %143, align 4
  %145 = getelementptr ptr, ptr %141, i32 %144
  %146 = getelementptr ptr, ptr %145, i32 1
  %147 = load ptr, ptr %146, align 8
  %148 = getelementptr { ptr, ptr }, ptr %147, i32 0, i32 0
  %149 = load ptr, ptr %148, align 8
  %150 = call i32 %149(ptr %140)
  store i32 %150, ptr %51, align 4
  %151 = getelementptr { ptr }, ptr %35, i32 0, i32 0
  %152 = load ptr, ptr %151, align 8
  %153 = insertvalue { ptr } undef, ptr %152, 0
  %154 = load i32, ptr %50, align 4
  %155 = load i32, ptr %51, align 4
  %156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 0
  %157 = load ptr, ptr %156, align 8
  %158 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %157, 0
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 1
  %160 = load ptr, ptr %159, align 8
  %161 = insertvalue { ptr, ptr, ptr, i32 } %158, ptr %160, 1
  %162 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 2
  %163 = load ptr, ptr %162, align 8
  %164 = insertvalue { ptr, ptr, ptr, i32 } %161, ptr %163, 2
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 3
  %166 = load i32, ptr %165, align 4
  %167 = insertvalue { ptr, ptr, ptr, i32 } %164, i32 %166, 3
  %168 = getelementptr [3 x ptr], ptr %52, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %168, align 8
  %169 = getelementptr [3 x ptr], ptr %52, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %169, align 8
  %170 = getelementptr [3 x ptr], ptr %52, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %170, align 8
  %171 = call ptr @llvm.invariant.start.p0(i64 9, ptr %52)
  %172 = call ptr @llvm.invariant.start.p0(i64 616, ptr %157)
  %173 = getelementptr ptr, ptr %157, i32 %166
  %174 = getelementptr ptr, ptr %173, i32 5
  %175 = load ptr, ptr %174, align 8
  %176 = getelementptr { ptr, ptr, ptr }, ptr %53, i32 0, i32 0
  store ptr @buffer_typ, ptr %176, align 8
  %177 = getelementptr { ptr, ptr, ptr }, ptr %53, i32 0, i32 1
  store ptr @i32_typ, ptr %177, align 8
  %178 = getelementptr { ptr, ptr, ptr }, ptr %53, i32 0, i32 2
  store ptr @i32_typ, ptr %178, align 8
  %179 = call ptr %175({ ptr, ptr, ptr, i32 } %167, ptr %53)
  call void %179({ ptr, ptr, ptr, i32 } %167, { ptr, ptr, ptr, i32 } %167, ptr %52, { ptr } %153, i32 %154, i32 %155)
  %180 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 0
  %181 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 0
  %182 = load ptr, ptr %180, align 8
  store ptr %182, ptr %181, align 8
  %183 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 1
  %184 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 1
  %185 = load ptr, ptr %183, align 8
  store ptr %185, ptr %184, align 8
  %186 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 2
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 2
  %188 = load ptr, ptr %186, align 8
  store ptr %188, ptr %187, align 8
  %189 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 3
  %190 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 3
  %191 = load i32, ptr %189, align 4
  store i32 %191, ptr %190, align 4
  call void @set_offset(ptr %54, ptr @IntArray)
  %192 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 0
  %193 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 0
  %194 = load ptr, ptr %192, align 8
  store ptr %194, ptr %193, align 8
  %195 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 1
  %196 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  %197 = load ptr, ptr %195, align 8
  store ptr %197, ptr %196, align 8
  %198 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 2
  %199 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 2
  %200 = load ptr, ptr %198, align 8
  store ptr %200, ptr %199, align 8
  %201 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 3
  %202 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  %203 = load i32, ptr %201, align 4
  store i32 %203, ptr %202, align 4
  %204 = call ptr @llvm.invariant.start.p0(i64 16, ptr %55)
  %205 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 0
  %206 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 0
  %207 = load ptr, ptr %205, align 8
  store ptr %207, ptr %206, align 8
  %208 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  %209 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 1
  %210 = load ptr, ptr %208, align 8
  store ptr %210, ptr %209, align 8
  %211 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 2
  %212 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 2
  %213 = load ptr, ptr %211, align 8
  store ptr %213, ptr %212, align 8
  %214 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  %215 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 3
  %216 = load i32, ptr %214, align 4
  store i32 %216, ptr %215, align 4
  call void @set_offset(ptr %56, ptr @IntArray)
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 0
  %218 = load ptr, ptr %217, align 8
  %219 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %218, 0
  %220 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 1
  %221 = load ptr, ptr %220, align 8
  %222 = insertvalue { ptr, ptr, ptr, i32 } %219, ptr %221, 1
  %223 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 2
  %224 = load ptr, ptr %223, align 8
  %225 = insertvalue { ptr, ptr, ptr, i32 } %222, ptr %224, 2
  %226 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 3
  %227 = load i32, ptr %226, align 4
  %228 = insertvalue { ptr, ptr, ptr, i32 } %225, i32 %227, 3
  ret { ptr, ptr, ptr, i32 } %228
}

define { ptr, ptr, ptr, i32 } @IntArray_map_fFunctionPtri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i1, align 1
  %.reg2mem6 = alloca i32, align 4
  %.reg2mem11 = alloca ptr, align 8
  %.reg2mem13 = alloca ptr, align 8
  %.reg2mem15 = alloca i32, align 4
  %.reg2mem17 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @IntArray)
  %20 = alloca ptr, align 8
  store { ptr } %3, ptr %20, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %22 = load ptr, ptr %21, align 8
  %23 = load ptr, ptr %7, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 616, ptr %23)
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %26 = load i32, ptr %25, align 4
  %27 = getelementptr ptr, ptr %23, i32 %26
  %28 = getelementptr ptr, ptr %27, i32 1
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr { ptr, ptr }, ptr %29, i32 0, i32 0
  %31 = load ptr, ptr %30, align 8
  %32 = call i32 %31(ptr %22)
  %33 = getelementptr i32, ptr null, i32 %32
  %34 = ptrtoint ptr %33 to i64
  %35 = alloca ptr, align 8
  %36 = call ptr @bump_malloc(i64 %34)
  store ptr %36, ptr %35, align 8
  %37 = alloca { ptr }, align 8
  %38 = getelementptr { ptr }, ptr %35, i32 0, i32 0
  %39 = getelementptr { ptr }, ptr %37, i32 0, i32 0
  %40 = load ptr, ptr %38, align 8
  store ptr %40, ptr %39, align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 16, ptr %37)
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  store ptr %42, ptr %.reg2mem13, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  store ptr %43, ptr %.reg2mem11, align 8
  store i32 0, ptr %.reg2mem17, align 4
  %44 = alloca i32, align 4
  %45 = alloca i1, align 1
  %46 = alloca ptr, align 8
  %47 = alloca i32, align 4
  %48 = alloca i32, align 4
  %49 = alloca i32, align 4
  %50 = alloca i32, align 4
  %51 = alloca i32, align 4
  %52 = alloca { ptr, ptr, ptr, i32 }, align 8
  %53 = alloca i32, align 4
  %54 = alloca i32, align 4
  %55 = alloca [3 x ptr], align 8
  %56 = alloca { ptr, ptr, ptr }, align 8
  %57 = alloca { ptr, ptr, ptr, i32 }, align 8
  %58 = alloca { ptr, ptr, ptr, i32 }, align 8
  %59 = alloca { ptr, ptr, ptr, i32 }, align 8
  br label %60

60:                                               ; preds = %._crit_edge, %4
  %.reload18 = load i32, ptr %.reg2mem17, align 4
  store i32 %.reload18, ptr %.reg2mem6, align 4
  %.reload14 = load ptr, ptr %.reg2mem13, align 8
  %61 = load ptr, ptr %.reload14, align 8
  %62 = load ptr, ptr %7, align 8
  %63 = call ptr @llvm.invariant.start.p0(i64 616, ptr %62)
  %.reload12 = load ptr, ptr %.reg2mem11, align 8
  %64 = load i32, ptr %.reload12, align 4
  %65 = getelementptr ptr, ptr %62, i32 %64
  %66 = getelementptr ptr, ptr %65, i32 1
  %67 = load ptr, ptr %66, align 8
  %68 = getelementptr { ptr, ptr }, ptr %67, i32 0, i32 0
  %69 = load ptr, ptr %68, align 8
  %70 = call i32 %69(ptr %61)
  store i32 %70, ptr %44, align 4
  %71 = load i32, ptr %44, align 4
  %.reload10 = load i32, ptr %.reg2mem6, align 4
  %72 = icmp slt i32 %.reload10, %71
  store i1 %72, ptr %45, align 1
  %73 = load i1, ptr %45, align 1
  store i1 %73, ptr %.reg2mem3, align 1
  %.reload5 = load i1, ptr %.reg2mem3, align 1
  br i1 %.reload5, label %74, label %101

74:                                               ; preds = %60
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %76 = load ptr, ptr %75, align 8
  %77 = load ptr, ptr %7, align 8
  %78 = call ptr @llvm.invariant.start.p0(i64 616, ptr %77)
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %80 = load i32, ptr %79, align 4
  %81 = getelementptr ptr, ptr %77, i32 %80
  %82 = load ptr, ptr %81, align 8
  %83 = getelementptr { ptr, ptr }, ptr %82, i32 0, i32 0
  %84 = load ptr, ptr %83, align 8
  %85 = call { ptr } %84(ptr %76)
  store { ptr } %85, ptr %46, align 8
  %86 = load ptr, ptr %46, align 8
  %.reload9 = load i32, ptr %.reg2mem6, align 4
  %87 = getelementptr i32, ptr null, i32 %.reload9
  %88 = ptrtoint ptr %87 to i64
  %89 = getelementptr i8, ptr %86, i64 %88
  %90 = load i32, ptr %89, align 4
  %91 = load ptr, ptr %20, align 8
  %92 = call i32 %91(i32 %90)
  store i32 %92, ptr %47, align 4
  %93 = load ptr, ptr %37, align 8
  %.reload8 = load i32, ptr %.reg2mem6, align 4
  %94 = getelementptr i32, ptr null, i32 %.reload8
  %95 = ptrtoint ptr %94 to i64
  %96 = getelementptr i8, ptr %93, i64 %95
  %97 = load i32, ptr %47, align 4
  store i32 %97, ptr %96, align 4
  store i32 1, ptr %48, align 4
  %98 = load i32, ptr %48, align 4
  %.reload7 = load i32, ptr %.reg2mem6, align 4
  %99 = add i32 %.reload7, %98
  store i32 %99, ptr %49, align 4
  %100 = load i32, ptr %49, align 4
  store i32 %100, ptr %.reg2mem1, align 4
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem15, align 4
  br label %102

101:                                              ; preds = %60
  store i32 poison, ptr %.reg2mem15, align 4
  br label %102

102:                                              ; preds = %101, %74
  %.reload16 = load i32, ptr %.reg2mem15, align 4
  store i32 %.reload16, ptr %.reg2mem, align 4
  br label %103

103:                                              ; preds = %102
  %.reload4 = load i1, ptr %.reg2mem3, align 1
  br i1 %.reload4, label %._crit_edge, label %104

._crit_edge:                                      ; preds = %103
  %.reload = load i32, ptr %.reg2mem, align 4
  store i32 %.reload, ptr %.reg2mem17, align 4
  br label %60

104:                                              ; preds = %103
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %106 = load ptr, ptr %105, align 8
  %107 = load ptr, ptr %7, align 8
  %108 = call ptr @llvm.invariant.start.p0(i64 616, ptr %107)
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %110 = load i32, ptr %109, align 4
  %111 = getelementptr ptr, ptr %107, i32 %110
  %112 = getelementptr ptr, ptr %111, i32 1
  %113 = load ptr, ptr %112, align 8
  %114 = getelementptr { ptr, ptr }, ptr %113, i32 0, i32 0
  %115 = load ptr, ptr %114, align 8
  %116 = call i32 %115(ptr %106)
  store i32 %116, ptr %50, align 4
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %118 = load ptr, ptr %117, align 8
  %119 = load ptr, ptr %7, align 8
  %120 = call ptr @llvm.invariant.start.p0(i64 616, ptr %119)
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %122 = load i32, ptr %121, align 4
  %123 = getelementptr ptr, ptr %119, i32 %122
  %124 = getelementptr ptr, ptr %123, i32 1
  %125 = load ptr, ptr %124, align 8
  %126 = getelementptr { ptr, ptr }, ptr %125, i32 0, i32 0
  %127 = load ptr, ptr %126, align 8
  %128 = call i32 %127(ptr %118)
  store i32 %128, ptr %51, align 4
  %129 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 1
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 3
  store ptr @IntArray, ptr %52, align 8
  store ptr %129, ptr %130, align 8
  store i32 7, ptr %131, align 4
  %132 = call ptr @llvm.invariant.start.p0(i64 16, ptr %52)
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %134 = load ptr, ptr %133, align 8
  %135 = load ptr, ptr %7, align 8
  %136 = call ptr @llvm.invariant.start.p0(i64 616, ptr %135)
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %138 = load i32, ptr %137, align 4
  %139 = getelementptr ptr, ptr %135, i32 %138
  %140 = getelementptr ptr, ptr %139, i32 1
  %141 = load ptr, ptr %140, align 8
  %142 = getelementptr { ptr, ptr }, ptr %141, i32 0, i32 0
  %143 = load ptr, ptr %142, align 8
  %144 = call i32 %143(ptr %134)
  store i32 %144, ptr %53, align 4
  %145 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %146 = load ptr, ptr %145, align 8
  %147 = load ptr, ptr %7, align 8
  %148 = call ptr @llvm.invariant.start.p0(i64 616, ptr %147)
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %150 = load i32, ptr %149, align 4
  %151 = getelementptr ptr, ptr %147, i32 %150
  %152 = getelementptr ptr, ptr %151, i32 1
  %153 = load ptr, ptr %152, align 8
  %154 = getelementptr { ptr, ptr }, ptr %153, i32 0, i32 0
  %155 = load ptr, ptr %154, align 8
  %156 = call i32 %155(ptr %146)
  store i32 %156, ptr %54, align 4
  %157 = getelementptr { ptr }, ptr %37, i32 0, i32 0
  %158 = load ptr, ptr %157, align 8
  %159 = insertvalue { ptr } undef, ptr %158, 0
  %160 = load i32, ptr %53, align 4
  %161 = load i32, ptr %54, align 4
  %162 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 0
  %163 = load ptr, ptr %162, align 8
  %164 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %163, 0
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 1
  %166 = load ptr, ptr %165, align 8
  %167 = insertvalue { ptr, ptr, ptr, i32 } %164, ptr %166, 1
  %168 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 2
  %169 = load ptr, ptr %168, align 8
  %170 = insertvalue { ptr, ptr, ptr, i32 } %167, ptr %169, 2
  %171 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 3
  %172 = load i32, ptr %171, align 4
  %173 = insertvalue { ptr, ptr, ptr, i32 } %170, i32 %172, 3
  %174 = getelementptr [3 x ptr], ptr %55, i32 0, i32 0
  store ptr @_parameterization_BufferPtri32, ptr %174, align 8
  %175 = getelementptr [3 x ptr], ptr %55, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %175, align 8
  %176 = getelementptr [3 x ptr], ptr %55, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %176, align 8
  %177 = call ptr @llvm.invariant.start.p0(i64 9, ptr %55)
  %178 = call ptr @llvm.invariant.start.p0(i64 616, ptr %163)
  %179 = getelementptr ptr, ptr %163, i32 %172
  %180 = getelementptr ptr, ptr %179, i32 5
  %181 = load ptr, ptr %180, align 8
  %182 = getelementptr { ptr, ptr, ptr }, ptr %56, i32 0, i32 0
  store ptr @buffer_typ, ptr %182, align 8
  %183 = getelementptr { ptr, ptr, ptr }, ptr %56, i32 0, i32 1
  store ptr @i32_typ, ptr %183, align 8
  %184 = getelementptr { ptr, ptr, ptr }, ptr %56, i32 0, i32 2
  store ptr @i32_typ, ptr %184, align 8
  %185 = call ptr %181({ ptr, ptr, ptr, i32 } %173, ptr %56)
  call void %185({ ptr, ptr, ptr, i32 } %173, { ptr, ptr, ptr, i32 } %173, ptr %55, { ptr } %159, i32 %160, i32 %161)
  %186 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 0
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 0
  %188 = load ptr, ptr %186, align 8
  store ptr %188, ptr %187, align 8
  %189 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 1
  %190 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 1
  %191 = load ptr, ptr %189, align 8
  store ptr %191, ptr %190, align 8
  %192 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 2
  %193 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 2
  %194 = load ptr, ptr %192, align 8
  store ptr %194, ptr %193, align 8
  %195 = getelementptr { ptr, ptr, ptr, i32 }, ptr %52, i32 0, i32 3
  %196 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 3
  %197 = load i32, ptr %195, align 4
  store i32 %197, ptr %196, align 4
  call void @set_offset(ptr %57, ptr @IntArray)
  %198 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 0
  %199 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 0
  %200 = load ptr, ptr %198, align 8
  store ptr %200, ptr %199, align 8
  %201 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 1
  %202 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 1
  %203 = load ptr, ptr %201, align 8
  store ptr %203, ptr %202, align 8
  %204 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 2
  %205 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 2
  %206 = load ptr, ptr %204, align 8
  store ptr %206, ptr %205, align 8
  %207 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 3
  %208 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 3
  %209 = load i32, ptr %207, align 4
  store i32 %209, ptr %208, align 4
  %210 = call ptr @llvm.invariant.start.p0(i64 16, ptr %58)
  %211 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 0
  %212 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 0
  %213 = load ptr, ptr %211, align 8
  store ptr %213, ptr %212, align 8
  %214 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 1
  %215 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 1
  %216 = load ptr, ptr %214, align 8
  store ptr %216, ptr %215, align 8
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 2
  %218 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 2
  %219 = load ptr, ptr %217, align 8
  store ptr %219, ptr %218, align 8
  %220 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 3
  %221 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 3
  %222 = load i32, ptr %220, align 4
  store i32 %222, ptr %221, align 4
  call void @set_offset(ptr %59, ptr @IntIterable)
  %223 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 0
  %224 = load ptr, ptr %223, align 8
  %225 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %224, 0
  %226 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 1
  %227 = load ptr, ptr %226, align 8
  %228 = insertvalue { ptr, ptr, ptr, i32 } %225, ptr %227, 1
  %229 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 2
  %230 = load ptr, ptr %229, align 8
  %231 = insertvalue { ptr, ptr, ptr, i32 } %228, ptr %230, 2
  %232 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 3
  %233 = load i32, ptr %232, align 4
  %234 = insertvalue { ptr, ptr, ptr, i32 } %231, i32 %233, 3
  ret { ptr, ptr, ptr, i32 } %234
}

define { ptr, ptr, ptr, i32 } @IntArray_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @IntArray)
  %19 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr, ptr, ptr, i32 }, i32 }, ptr null, i32 1) to i64))
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  store ptr @IntArrayIterator, ptr %20, align 8
  store ptr %19, ptr %21, align 8
  store i32 7, ptr %22, align 4
  %23 = call ptr @llvm.invariant.start.p0(i64 16, ptr %20)
  %24 = alloca { ptr, ptr, ptr, i32 }, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %36 = load i32, ptr %34, align 4
  store i32 %36, ptr %35, align 4
  call void @set_offset(ptr %24, ptr @IntArray)
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %38 = load ptr, ptr %37, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %38, 0
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %41 = load ptr, ptr %40, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } %39, ptr %41, 1
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %44 = load ptr, ptr %43, align 8
  %45 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %44, 2
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %47 = load i32, ptr %46, align 4
  %48 = insertvalue { ptr, ptr, ptr, i32 } %45, i32 %47, 3
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %50 = load ptr, ptr %49, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %50, 0
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %53 = load ptr, ptr %52, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %51, ptr %53, 1
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %56 = load ptr, ptr %55, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %56, 2
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %59 = load i32, ptr %58, align 4
  %60 = insertvalue { ptr, ptr, ptr, i32 } %57, i32 %59, 3
  %61 = alloca [1 x ptr], align 8
  %62 = getelementptr [1 x ptr], ptr %61, i32 0, i32 0
  store ptr @_parameterization_IntArray, ptr %62, align 8
  %63 = call ptr @llvm.invariant.start.p0(i64 1, ptr %61)
  %64 = call ptr @llvm.invariant.start.p0(i64 64, ptr %50)
  %65 = getelementptr ptr, ptr %50, i32 %59
  %66 = getelementptr ptr, ptr %65, i32 2
  %67 = load ptr, ptr %66, align 8
  %68 = alloca { ptr }, align 8
  %69 = getelementptr { ptr }, ptr %68, i32 0, i32 0
  store ptr %38, ptr %69, align 8
  %70 = call ptr %67({ ptr, ptr, ptr, i32 } %60, ptr %68)
  call void %70({ ptr, ptr, ptr, i32 } %60, { ptr, ptr, ptr, i32 } %60, ptr %61, { ptr, ptr, ptr, i32 } %48)
  %71 = alloca { ptr, ptr, ptr, i32 }, align 8
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 0
  %74 = load ptr, ptr %72, align 8
  store ptr %74, ptr %73, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 1
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 2
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 3
  %83 = load i32, ptr %81, align 4
  store i32 %83, ptr %82, align 4
  call void @set_offset(ptr %71, ptr @Iterator)
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 0
  %85 = load ptr, ptr %84, align 8
  %86 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %85, 0
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 1
  %88 = load ptr, ptr %87, align 8
  %89 = insertvalue { ptr, ptr, ptr, i32 } %86, ptr %88, 1
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 2
  %91 = load ptr, ptr %90, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } %89, ptr %91, 2
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 3
  %94 = load i32, ptr %93, align 4
  %95 = insertvalue { ptr, ptr, ptr, i32 } %92, i32 %94, 3
  ret { ptr, ptr, ptr, i32 } %95
}

define ptr @IntArrayIterator_B_init_arrayIntArray({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7629948565578263212, i64 ptrtoint (ptr @IntArray to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [8 x ptr], ptr %15, i32 0, i32 4
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @IntArrayIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [8 x ptr], ptr %4, i32 0, i32 5
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @IntArrayIterator_init_arrayIntArray({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @IntArrayIterator)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 16, ptr %20)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %34 = load i32, ptr %32, align 4
  store i32 %34, ptr %33, align 4
  call void @set_offset(ptr %22, ptr @IntArray)
  %35 = alloca { ptr, ptr, ptr, i32 }, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %38 = load ptr, ptr %36, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %41 = load ptr, ptr %39, align 8
  store ptr %41, ptr %40, align 8
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %44 = load ptr, ptr %42, align 8
  store ptr %44, ptr %43, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %47 = load i32, ptr %45, align 4
  store i32 %47, ptr %46, align 4
  call void @set_offset(ptr %35, ptr @IntArray)
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = load ptr, ptr %7, align 8
  %51 = call ptr @llvm.invariant.start.p0(i64 64, ptr %50)
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %53 = load i32, ptr %52, align 4
  %54 = getelementptr ptr, ptr %50, i32 %53
  %55 = load ptr, ptr %54, align 8
  %56 = getelementptr { ptr, ptr }, ptr %55, i32 0, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %59 = load ptr, ptr %58, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %59, 0
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %62 = load ptr, ptr %61, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr %62, 1
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %65 = load ptr, ptr %64, align 8
  %66 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %65, 2
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %68 = load i32, ptr %67, align 4
  %69 = insertvalue { ptr, ptr, ptr, i32 } %66, i32 %68, 3
  call void %57(ptr %49, { ptr, ptr, ptr, i32 } %69)
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %71 = load ptr, ptr %70, align 8
  %72 = load ptr, ptr %7, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 64, ptr %72)
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %75 = load i32, ptr %74, align 4
  %76 = getelementptr ptr, ptr %72, i32 %75
  %77 = getelementptr ptr, ptr %76, i32 1
  %78 = load ptr, ptr %77, align 8
  %79 = getelementptr { ptr, ptr }, ptr %78, i32 0, i32 1
  %80 = load ptr, ptr %79, align 8
  call void %80(ptr %71, i32 0)
  ret void
}

define { ptr, i32 } @IntArrayIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i32 }, align 8
  %.reg2mem1 = alloca { ptr, i32 }, align 8
  %.reg2mem3 = alloca { ptr, i32 }, align 8
  %.reg2mem5 = alloca { ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @IntArrayIterator)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 64, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 1
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call i32 %29(ptr %20)
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %32 = load ptr, ptr %31, align 8
  %33 = load ptr, ptr %6, align 8
  %34 = call ptr @llvm.invariant.start.p0(i64 64, ptr %33)
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %36 = load i32, ptr %35, align 4
  %37 = getelementptr ptr, ptr %33, i32 %36
  %38 = load ptr, ptr %37, align 8
  %39 = getelementptr { ptr, ptr }, ptr %38, i32 0, i32 0
  %40 = load ptr, ptr %39, align 8
  %41 = call { ptr, ptr, ptr, i32 } %40(ptr %32)
  %42 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %41, ptr %42, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 16, ptr %42)
  call void @assume_offset(ptr %42, ptr @IntArray)
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 0
  %45 = load ptr, ptr %44, align 8
  %46 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %45, 0
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 1
  %48 = load ptr, ptr %47, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } %46, ptr %48, 1
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 2
  %51 = load ptr, ptr %50, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } %49, ptr %51, 2
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = insertvalue { ptr, ptr, ptr, i32 } %52, i32 %54, 3
  %56 = alloca [0 x ptr], align 8
  %57 = call ptr @llvm.invariant.start.p0(i64 0, ptr %56)
  %58 = call ptr @llvm.invariant.start.p0(i64 616, ptr %45)
  %59 = getelementptr ptr, ptr %45, i32 %54
  %60 = getelementptr ptr, ptr %59, i32 6
  %61 = load ptr, ptr %60, align 8
  %62 = alloca {}, align 8
  %63 = call ptr %61({ ptr, ptr, ptr, i32 } %55, ptr %62)
  %64 = call i32 %63({ ptr, ptr, ptr, i32 } %55, { ptr, ptr, ptr, i32 } %55, ptr %56)
  %65 = icmp slt i32 %30, %64
  %66 = alloca i32, align 4
  %67 = alloca i32, align 4
  %68 = alloca i32, align 4
  %69 = alloca { ptr, ptr, ptr, i32 }, align 8
  %70 = alloca [0 x ptr], align 8
  %71 = alloca {}, align 8
  %72 = alloca ptr, align 8
  %73 = alloca i32, align 4
  %74 = alloca i32, align 4
  %75 = alloca i32, align 4
  %76 = alloca i32, align 4
  %77 = alloca ptr, align 8
  %78 = alloca i64, align 8
  %79 = alloca [0 x i8], align 1
  %80 = alloca i32, align 4
  %81 = alloca ptr, align 8
  %82 = alloca i64, align 8
  br i1 %65, label %83, label %168

83:                                               ; preds = %3
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %85 = load ptr, ptr %84, align 8
  %86 = load ptr, ptr %6, align 8
  %87 = call ptr @llvm.invariant.start.p0(i64 64, ptr %86)
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %89 = load i32, ptr %88, align 4
  %90 = getelementptr ptr, ptr %86, i32 %89
  %91 = getelementptr ptr, ptr %90, i32 1
  %92 = load ptr, ptr %91, align 8
  %93 = getelementptr { ptr, ptr }, ptr %92, i32 0, i32 0
  %94 = load ptr, ptr %93, align 8
  %95 = call i32 %94(ptr %85)
  store i32 %95, ptr %66, align 4
  store i32 1, ptr %67, align 4
  %96 = load i32, ptr %66, align 4
  %97 = load i32, ptr %67, align 4
  %98 = add i32 %96, %97
  store i32 %98, ptr %68, align 4
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %100 = load ptr, ptr %99, align 8
  %101 = load ptr, ptr %6, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 64, ptr %101)
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %104 = load i32, ptr %103, align 4
  %105 = getelementptr ptr, ptr %101, i32 %104
  %106 = getelementptr ptr, ptr %105, i32 1
  %107 = load ptr, ptr %106, align 8
  %108 = getelementptr { ptr, ptr }, ptr %107, i32 0, i32 1
  %109 = load ptr, ptr %108, align 8
  %110 = load i32, ptr %68, align 4
  call void %109(ptr %100, i32 %110)
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %112 = load ptr, ptr %111, align 8
  %113 = load ptr, ptr %6, align 8
  %114 = call ptr @llvm.invariant.start.p0(i64 64, ptr %113)
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %116 = load i32, ptr %115, align 4
  %117 = getelementptr ptr, ptr %113, i32 %116
  %118 = load ptr, ptr %117, align 8
  %119 = getelementptr { ptr, ptr }, ptr %118, i32 0, i32 0
  %120 = load ptr, ptr %119, align 8
  %121 = call { ptr, ptr, ptr, i32 } %120(ptr %112)
  store { ptr, ptr, ptr, i32 } %121, ptr %69, align 8
  %122 = call ptr @llvm.invariant.start.p0(i64 16, ptr %69)
  call void @assume_offset(ptr %69, ptr @IntArray)
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %69, i32 0, i32 0
  %124 = load ptr, ptr %123, align 8
  %125 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %124, 0
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %69, i32 0, i32 1
  %127 = load ptr, ptr %126, align 8
  %128 = insertvalue { ptr, ptr, ptr, i32 } %125, ptr %127, 1
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %69, i32 0, i32 2
  %130 = load ptr, ptr %129, align 8
  %131 = insertvalue { ptr, ptr, ptr, i32 } %128, ptr %130, 2
  %132 = getelementptr { ptr, ptr, ptr, i32 }, ptr %69, i32 0, i32 3
  %133 = load i32, ptr %132, align 4
  %134 = insertvalue { ptr, ptr, ptr, i32 } %131, i32 %133, 3
  %135 = call ptr @llvm.invariant.start.p0(i64 0, ptr %70)
  %136 = call ptr @llvm.invariant.start.p0(i64 616, ptr %124)
  %137 = getelementptr ptr, ptr %124, i32 %133
  %138 = getelementptr ptr, ptr %137, i32 8
  %139 = load ptr, ptr %138, align 8
  %140 = call ptr %139({ ptr, ptr, ptr, i32 } %134, ptr %71)
  %141 = call { ptr } %140({ ptr, ptr, ptr, i32 } %134, { ptr, ptr, ptr, i32 } %134, ptr %70)
  store { ptr } %141, ptr %72, align 8
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %143 = load ptr, ptr %142, align 8
  %144 = load ptr, ptr %6, align 8
  %145 = call ptr @llvm.invariant.start.p0(i64 64, ptr %144)
  %146 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %147 = load i32, ptr %146, align 4
  %148 = getelementptr ptr, ptr %144, i32 %147
  %149 = getelementptr ptr, ptr %148, i32 1
  %150 = load ptr, ptr %149, align 8
  %151 = getelementptr { ptr, ptr }, ptr %150, i32 0, i32 0
  %152 = load ptr, ptr %151, align 8
  %153 = call i32 %152(ptr %143)
  store i32 %153, ptr %73, align 4
  store i32 1, ptr %74, align 4
  %154 = load i32, ptr %73, align 4
  %155 = load i32, ptr %74, align 4
  %156 = sub i32 %154, %155
  store i32 %156, ptr %75, align 4
  %157 = load ptr, ptr %72, align 8
  %158 = load i32, ptr %75, align 4
  %159 = getelementptr i32, ptr null, i32 %158
  %160 = ptrtoint ptr %159 to i64
  %161 = getelementptr i8, ptr %157, i64 %160
  %162 = load i32, ptr %161, align 4
  store i32 %162, ptr %76, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %78, align 4
  %163 = load i64, ptr %78, align 4
  store i64 %163, ptr %77, align 4
  %164 = load ptr, ptr %77, align 8
  %165 = insertvalue { ptr, i32 } undef, ptr %164, 0
  %166 = load i32, ptr %76, align 4
  %167 = insertvalue { ptr, i32 } %165, i32 %166, 1
  store { ptr, i32 } %167, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i32 }, ptr %.reg2mem3, align 8
  store { ptr, i32 } %.reload4, ptr %.reg2mem5, align 8
  br label %175

168:                                              ; preds = %3
  %169 = load [0 x i8], ptr %79, align 1
  store [0 x i8] %169, ptr %80, align 1
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %82, align 4
  %170 = load i64, ptr %82, align 4
  store i64 %170, ptr %81, align 4
  %171 = load ptr, ptr %81, align 8
  %172 = insertvalue { ptr, i32 } undef, ptr %171, 0
  %173 = load i32, ptr %80, align 4
  %174 = insertvalue { ptr, i32 } %172, i32 %173, 1
  store { ptr, i32 } %174, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i32 }, ptr %.reg2mem1, align 8
  store { ptr, i32 } %.reload2, ptr %.reg2mem5, align 8
  br label %175

175:                                              ; preds = %168, %83
  %.reload6 = load { ptr, i32 }, ptr %.reg2mem5, align 8
  store { ptr, i32 } %.reload6, ptr %.reg2mem, align 8
  br label %176

176:                                              ; preds = %175
  %.reload = load { ptr, i32 }, ptr %.reg2mem, align 8
  ret { ptr, i32 } %.reload
}

define i32 @IntArrayIterator_getter_index(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, i32 }, ptr %0, i32 0, i32 1
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @IntArrayIterator_setter_index(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { { ptr, ptr, ptr, i32 }, i32 }, ptr %0, i32 0, i32 1
  store i32 %1, ptr %3, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @IntArrayIterator_getter_array(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, i32 }, ptr %0, i32 0, i32 0
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @IntArrayIterator_setter_array(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { { ptr, ptr, ptr, i32 }, i32 }, ptr %0, i32 0, i32 0
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  ret void
}

define i32 @IntArray_getter_capacity(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr }, i32, i32 }, ptr %0, i32 0, i32 2
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @IntArray_setter_capacity(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { { ptr }, i32, i32 }, ptr %0, i32 0, i32 2
  store i32 %1, ptr %3, align 4
  ret void
}

define i32 @IntArray_getter_length(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr }, i32, i32 }, ptr %0, i32 0, i32 1
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @IntArray_setter_length(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { { ptr }, i32, i32 }, ptr %0, i32 0, i32 1
  store i32 %1, ptr %3, align 4
  ret void
}

define { ptr } @IntArray_getter_buffer(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr }, i32, i32 }, ptr %0, i32 0, i32 0
  %3 = getelementptr { ptr }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr } undef, ptr %4, 0
  ret { ptr } %5
}

define void @IntArray_setter_buffer(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { { ptr }, i32, i32 }, ptr %0, i32 0, i32 0
  %4 = alloca ptr, align 8
  store { ptr } %1, ptr %4, align 8
  %5 = getelementptr { ptr }, ptr %3, i32 0, i32 0
  %6 = load ptr, ptr %4, align 8
  store ptr %6, ptr %5, align 8
  ret void
}

define ptr @Representable_B_repr_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [2 x ptr], ptr %4, i32 0, i32 1
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define { ptr, ptr, ptr, i32 } @Representable_repr_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Representable)
  %19 = alloca ptr, align 8
  %20 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 7) to i64))
  store ptr %20, ptr %19, align 8
  %21 = alloca { ptr }, align 8
  %22 = getelementptr { ptr }, ptr %19, i32 0, i32 0
  %23 = getelementptr { ptr }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %26 = load ptr, ptr %21, align 8
  %27 = getelementptr i8, ptr %26, i64 0
  %28 = load i48, ptr @vlprw_Object, align 4
  store i48 %28, ptr %27, align 4
  %29 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  store ptr @String, ptr %30, align 8
  store ptr %29, ptr %31, align 8
  store i32 7, ptr %32, align 4
  %33 = call ptr @llvm.invariant.start.p0(i64 16, ptr %30)
  %34 = getelementptr { ptr }, ptr %21, i32 0, i32 0
  %35 = load ptr, ptr %34, align 8
  %36 = insertvalue { ptr } undef, ptr %35, 0
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %38 = load ptr, ptr %37, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %38, 0
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %41 = load ptr, ptr %40, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } %39, ptr %41, 1
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %44 = load ptr, ptr %43, align 8
  %45 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %44, 2
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %47 = load i32, ptr %46, align 4
  %48 = insertvalue { ptr, ptr, ptr, i32 } %45, i32 %47, 3
  %49 = alloca [3 x ptr], align 8
  %50 = getelementptr [3 x ptr], ptr %49, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %50, align 8
  %51 = getelementptr [3 x ptr], ptr %49, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %51, align 8
  %52 = getelementptr [3 x ptr], ptr %49, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %52, align 8
  %53 = call ptr @llvm.invariant.start.p0(i64 9, ptr %49)
  %54 = call ptr @llvm.invariant.start.p0(i64 280, ptr %38)
  %55 = getelementptr ptr, ptr %38, i32 %47
  %56 = getelementptr ptr, ptr %55, i32 4
  %57 = load ptr, ptr %56, align 8
  %58 = alloca { ptr, ptr, ptr }, align 8
  %59 = getelementptr { ptr, ptr, ptr }, ptr %58, i32 0, i32 0
  store ptr @buffer_typ, ptr %59, align 8
  %60 = getelementptr { ptr, ptr, ptr }, ptr %58, i32 0, i32 1
  store ptr @i32_typ, ptr %60, align 8
  %61 = getelementptr { ptr, ptr, ptr }, ptr %58, i32 0, i32 2
  store ptr @i32_typ, ptr %61, align 8
  %62 = call ptr %57({ ptr, ptr, ptr, i32 } %48, ptr %58)
  call void %62({ ptr, ptr, ptr, i32 } %48, { ptr, ptr, ptr, i32 } %48, ptr %49, { ptr } %36, i32 6, i32 7)
  %63 = alloca { ptr, ptr, ptr, i32 }, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 0
  %66 = load ptr, ptr %64, align 8
  store ptr %66, ptr %65, align 8
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 1
  %69 = load ptr, ptr %67, align 8
  store ptr %69, ptr %68, align 8
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 2
  %72 = load ptr, ptr %70, align 8
  store ptr %72, ptr %71, align 8
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 3
  %75 = load i32, ptr %73, align 4
  store i32 %75, ptr %74, align 4
  call void @set_offset(ptr %63, ptr @String)
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 0
  %77 = load ptr, ptr %76, align 8
  %78 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %77, 0
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 1
  %80 = load ptr, ptr %79, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } %78, ptr %80, 1
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 2
  %83 = load ptr, ptr %82, align 8
  %84 = insertvalue { ptr, ptr, ptr, i32 } %81, ptr %83, 2
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 3
  %86 = load i32, ptr %85, align 4
  %87 = insertvalue { ptr, ptr, ptr, i32 } %84, i32 %86, 3
  ret { ptr, ptr, ptr, i32 } %87
}

define ptr @String_B_init_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [35 x ptr], ptr %4, i32 0, i32 17
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @String_B_init_bytesBufferPtri8_lengthPtri32_capacityPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1)
  %4 = getelementptr { ptr, ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -318192747195410237, i64 ptrtoint (ptr @buffer_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %24)
  %26 = getelementptr { ptr, ptr, ptr }, ptr %1, i32 0, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr ptr, ptr %27, i32 1
  %29 = getelementptr ptr, ptr %27, i32 2
  %30 = getelementptr ptr, ptr %27, i32 3
  %31 = getelementptr ptr, ptr %27, i32 4
  %32 = load i64, ptr %28, align 4
  %33 = load i64, ptr %29, align 4
  %34 = load ptr, ptr %30, align 8
  %35 = load ptr, ptr %31, align 8
  %36 = call i1 @subtype_test_wrapper(ptr %34, i64 %33, i64 %32, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %35)
  %37 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %38 = getelementptr [35 x ptr], ptr %37, i32 0, i32 18
  %39 = getelementptr ptr, ptr %38, i32 7
  %40 = load ptr, ptr %39, align 8
  ret ptr %40
}

define ptr @String_B_length_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [35 x ptr], ptr %4, i32 0, i32 19
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @String_B_capacity_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [35 x ptr], ptr %4, i32 0, i32 20
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @String_B_bytes_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [35 x ptr], ptr %4, i32 0, i32 21
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @String_B_append_xPtri8({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 2582149688529881115, i64 ptrtoint (ptr @i8_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [35 x ptr], ptr %15, i32 0, i32 22
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @String_B_extend_strString({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [35 x ptr], ptr %15, i32 0, i32 23
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @String_B__index_xPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [35 x ptr], ptr %15, i32 0, i32 24
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @String_B__EQ_otherString({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [35 x ptr], ptr %15, i32 0, i32 25
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @String_B_pop_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [35 x ptr], ptr %4, i32 0, i32 26
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @String_B_copy_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [35 x ptr], ptr %4, i32 0, i32 27
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @String_B_c_string_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [35 x ptr], ptr %4, i32 0, i32 28
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @String_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [35 x ptr], ptr %4, i32 0, i32 29
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @String_B_repr_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [35 x ptr], ptr %4, i32 0, i32 30
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @String_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @String)
  %19 = alloca ptr, align 8
  %20 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64))
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %22 = load ptr, ptr %21, align 8
  %23 = load ptr, ptr %6, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 280, ptr %23)
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %26 = load i32, ptr %25, align 4
  %27 = getelementptr ptr, ptr %23, i32 %26
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr { ptr, ptr }, ptr %28, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  %31 = getelementptr { ptr }, ptr %19, i32 0, i32 0
  %32 = load ptr, ptr %31, align 8
  %33 = insertvalue { ptr } undef, ptr %32, 0
  call void %30(ptr %22, { ptr } %33)
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %35 = load ptr, ptr %34, align 8
  %36 = load ptr, ptr %6, align 8
  %37 = call ptr @llvm.invariant.start.p0(i64 280, ptr %36)
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %39 = load i32, ptr %38, align 4
  %40 = getelementptr ptr, ptr %36, i32 %39
  %41 = getelementptr ptr, ptr %40, i32 2
  %42 = load ptr, ptr %41, align 8
  %43 = getelementptr { ptr, ptr }, ptr %42, i32 0, i32 1
  %44 = load ptr, ptr %43, align 8
  call void %44(ptr %35, i32 1)
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %46 = load ptr, ptr %45, align 8
  %47 = load ptr, ptr %6, align 8
  %48 = call ptr @llvm.invariant.start.p0(i64 280, ptr %47)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %50 = load i32, ptr %49, align 4
  %51 = getelementptr ptr, ptr %47, i32 %50
  %52 = getelementptr ptr, ptr %51, i32 1
  %53 = load ptr, ptr %52, align 8
  %54 = getelementptr { ptr, ptr }, ptr %53, i32 0, i32 1
  %55 = load ptr, ptr %54, align 8
  call void %55(ptr %46, i32 0)
  ret void
}

define void @String_init_bytesBufferPtri8_lengthPtri32_capacityPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3, i32 %4, i32 %5) {
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %7, align 8
  %8 = call ptr @llvm.invariant.start.p0(i64 16, ptr %7)
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  call void @set_offset(ptr %9, ptr @String)
  %22 = alloca ptr, align 8
  store { ptr } %3, ptr %22, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = load ptr, ptr %9, align 8
  %26 = call ptr @llvm.invariant.start.p0(i64 280, ptr %25)
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %28 = load i32, ptr %27, align 4
  %29 = getelementptr ptr, ptr %25, i32 %28
  %30 = load ptr, ptr %29, align 8
  %31 = getelementptr { ptr, ptr }, ptr %30, i32 0, i32 1
  %32 = load ptr, ptr %31, align 8
  %33 = load ptr, ptr %22, align 8
  %34 = insertvalue { ptr } undef, ptr %33, 0
  call void %32(ptr %24, { ptr } %34)
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = load ptr, ptr %9, align 8
  %38 = call ptr @llvm.invariant.start.p0(i64 280, ptr %37)
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %40 = load i32, ptr %39, align 4
  %41 = getelementptr ptr, ptr %37, i32 %40
  %42 = getelementptr ptr, ptr %41, i32 1
  %43 = load ptr, ptr %42, align 8
  %44 = getelementptr { ptr, ptr }, ptr %43, i32 0, i32 1
  %45 = load ptr, ptr %44, align 8
  call void %45(ptr %36, i32 %4)
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %47 = load ptr, ptr %46, align 8
  %48 = load ptr, ptr %9, align 8
  %49 = call ptr @llvm.invariant.start.p0(i64 280, ptr %48)
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %51 = load i32, ptr %50, align 4
  %52 = getelementptr ptr, ptr %48, i32 %51
  %53 = getelementptr ptr, ptr %52, i32 2
  %54 = load ptr, ptr %53, align 8
  %55 = getelementptr { ptr, ptr }, ptr %54, i32 0, i32 1
  %56 = load ptr, ptr %55, align 8
  call void %56(ptr %47, i32 %5)
  ret void
}

define i32 @String_length_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @String)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 280, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 1
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call i32 %29(ptr %20)
  ret i32 %30
}

define i32 @String_capacity_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @String)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 280, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call i32 %29(ptr %20)
  ret i32 %30
}

define { ptr } @String_bytes_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @String)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 280, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 0
  %28 = load ptr, ptr %27, align 8
  %29 = call { ptr } %28(ptr %20)
  %30 = alloca ptr, align 8
  store { ptr } %29, ptr %30, align 8
  %31 = load ptr, ptr %30, align 8
  %32 = insertvalue { ptr } undef, ptr %31, 0
  ret { ptr } %32
}

define { ptr, ptr, ptr, i32 } @String_append_xPtri8({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i8 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem5 = alloca ptr, align 8
  %.reg2mem7 = alloca ptr, align 8
  %.reg2mem14 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @String)
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %21 = load ptr, ptr %20, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 280, ptr %22)
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %25 = load i32, ptr %24, align 4
  %26 = getelementptr ptr, ptr %22, i32 %25
  %27 = getelementptr ptr, ptr %26, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr { ptr, ptr }, ptr %28, i32 0, i32 0
  %30 = load ptr, ptr %29, align 8
  %31 = call i32 %30(ptr %21)
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %33 = load ptr, ptr %32, align 8
  %34 = load ptr, ptr %7, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 280, ptr %34)
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %37 = load i32, ptr %36, align 4
  %38 = getelementptr ptr, ptr %34, i32 %37
  %39 = getelementptr ptr, ptr %38, i32 2
  %40 = load ptr, ptr %39, align 8
  %41 = getelementptr { ptr, ptr }, ptr %40, i32 0, i32 0
  %42 = load ptr, ptr %41, align 8
  %43 = call i32 %42(ptr %33)
  %44 = icmp slt i32 %31, %43
  %45 = alloca i32, align 4
  %46 = alloca i32, align 4
  %47 = alloca i32, align 4
  %48 = alloca ptr, align 8
  %49 = alloca { ptr }, align 8
  %50 = alloca i32, align 4
  %51 = alloca ptr, align 8
  %52 = alloca i32, align 4
  %53 = alloca i32, align 4
  %54 = alloca i1, align 1
  %55 = alloca ptr, align 8
  %56 = alloca i32, align 4
  %57 = alloca i32, align 4
  %58 = alloca ptr, align 8
  %59 = alloca i32, align 4
  %60 = alloca i32, align 4
  %61 = alloca i32, align 4
  %62 = alloca i32, align 4
  %63 = alloca { ptr, ptr, ptr, i32 }, align 8
  br i1 %44, label %64, label %65

64:                                               ; preds = %4
  br label %182

65:                                               ; preds = %4
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %67 = load ptr, ptr %66, align 8
  %68 = load ptr, ptr %7, align 8
  %69 = call ptr @llvm.invariant.start.p0(i64 280, ptr %68)
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %71 = load i32, ptr %70, align 4
  %72 = getelementptr ptr, ptr %68, i32 %71
  %73 = getelementptr ptr, ptr %72, i32 2
  %74 = load ptr, ptr %73, align 8
  %75 = getelementptr { ptr, ptr }, ptr %74, i32 0, i32 0
  %76 = load ptr, ptr %75, align 8
  %77 = call i32 %76(ptr %67)
  store i32 %77, ptr %45, align 4
  store i32 2, ptr %46, align 4
  %78 = load i32, ptr %45, align 4
  %79 = load i32, ptr %46, align 4
  %80 = mul i32 %78, %79
  store i32 %80, ptr %47, align 4
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %82 = load ptr, ptr %81, align 8
  %83 = load ptr, ptr %7, align 8
  %84 = call ptr @llvm.invariant.start.p0(i64 280, ptr %83)
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %86 = load i32, ptr %85, align 4
  %87 = getelementptr ptr, ptr %83, i32 %86
  %88 = getelementptr ptr, ptr %87, i32 2
  %89 = load ptr, ptr %88, align 8
  %90 = getelementptr { ptr, ptr }, ptr %89, i32 0, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = load i32, ptr %47, align 4
  call void %91(ptr %82, i32 %92)
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %94 = load ptr, ptr %93, align 8
  %95 = load ptr, ptr %7, align 8
  %96 = call ptr @llvm.invariant.start.p0(i64 280, ptr %95)
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %98 = load i32, ptr %97, align 4
  %99 = getelementptr ptr, ptr %95, i32 %98
  %100 = load ptr, ptr %99, align 8
  %101 = getelementptr { ptr, ptr }, ptr %100, i32 0, i32 0
  %102 = load ptr, ptr %101, align 8
  %103 = call { ptr } %102(ptr %94)
  store { ptr } %103, ptr %48, align 8
  store ptr %49, ptr %.reg2mem14, align 8
  %.reload17 = load ptr, ptr %.reg2mem14, align 8
  %104 = getelementptr { ptr }, ptr %.reload17, i32 0, i32 0
  %105 = load ptr, ptr %48, align 8
  store ptr %105, ptr %104, align 8
  %.reload16 = load ptr, ptr %.reg2mem14, align 8
  %106 = call ptr @llvm.invariant.start.p0(i64 16, ptr %.reload16)
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %108 = load ptr, ptr %107, align 8
  %109 = load ptr, ptr %7, align 8
  %110 = call ptr @llvm.invariant.start.p0(i64 280, ptr %109)
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %112 = load i32, ptr %111, align 4
  %113 = getelementptr ptr, ptr %109, i32 %112
  %114 = getelementptr ptr, ptr %113, i32 2
  %115 = load ptr, ptr %114, align 8
  %116 = getelementptr { ptr, ptr }, ptr %115, i32 0, i32 0
  %117 = load ptr, ptr %116, align 8
  %118 = call i32 %117(ptr %108)
  store i32 %118, ptr %50, align 4
  %119 = load i32, ptr %50, align 4
  %120 = getelementptr i8, ptr null, i32 %119
  %121 = ptrtoint ptr %120 to i64
  %122 = call ptr @bump_malloc(i64 %121)
  store ptr %122, ptr %51, align 8
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %124 = load ptr, ptr %123, align 8
  %125 = load ptr, ptr %7, align 8
  %126 = call ptr @llvm.invariant.start.p0(i64 280, ptr %125)
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %128 = load i32, ptr %127, align 4
  %129 = getelementptr ptr, ptr %125, i32 %128
  %130 = load ptr, ptr %129, align 8
  %131 = getelementptr { ptr, ptr }, ptr %130, i32 0, i32 1
  %132 = load ptr, ptr %131, align 8
  %133 = getelementptr { ptr }, ptr %51, i32 0, i32 0
  %134 = load ptr, ptr %133, align 8
  %135 = insertvalue { ptr } undef, ptr %134, 0
  call void %132(ptr %124, { ptr } %135)
  store ptr %52, ptr %.reg2mem7, align 8
  %.reload13 = load ptr, ptr %.reg2mem7, align 8
  store i32 0, ptr %.reload13, align 4
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  store ptr %136, ptr %.reg2mem5, align 8
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  store ptr %137, ptr %.reg2mem3, align 8
  br label %138

138:                                              ; preds = %._crit_edge1, %65
  %.reload6 = load ptr, ptr %.reg2mem5, align 8
  %139 = load ptr, ptr %.reload6, align 8
  %140 = load ptr, ptr %7, align 8
  %141 = call ptr @llvm.invariant.start.p0(i64 280, ptr %140)
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %142 = load i32, ptr %.reload4, align 4
  %143 = getelementptr ptr, ptr %140, i32 %142
  %144 = getelementptr ptr, ptr %143, i32 1
  %145 = load ptr, ptr %144, align 8
  %146 = getelementptr { ptr, ptr }, ptr %145, i32 0, i32 0
  %147 = load ptr, ptr %146, align 8
  %148 = call i32 %147(ptr %139)
  store i32 %148, ptr %53, align 4
  %.reload12 = load ptr, ptr %.reg2mem7, align 8
  %149 = load i32, ptr %.reload12, align 4
  %150 = load i32, ptr %53, align 4
  %151 = icmp slt i32 %149, %150
  store i1 %151, ptr %54, align 1
  %152 = load i1, ptr %54, align 1
  store i1 %152, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %153, label %._crit_edge

._crit_edge:                                      ; preds = %138
  br label %180

153:                                              ; preds = %138
  %.reload15 = load ptr, ptr %.reg2mem14, align 8
  %154 = load ptr, ptr %.reload15, align 8
  %.reload11 = load ptr, ptr %.reg2mem7, align 8
  %155 = load i32, ptr %.reload11, align 4
  %156 = getelementptr i8, ptr null, i32 %155
  %157 = ptrtoint ptr %156 to i64
  %158 = getelementptr i8, ptr %154, i64 %157
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %160 = load ptr, ptr %159, align 8
  %161 = load ptr, ptr %7, align 8
  %162 = call ptr @llvm.invariant.start.p0(i64 280, ptr %161)
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %164 = load i32, ptr %163, align 4
  %165 = getelementptr ptr, ptr %161, i32 %164
  %166 = load ptr, ptr %165, align 8
  %167 = getelementptr { ptr, ptr }, ptr %166, i32 0, i32 0
  %168 = load ptr, ptr %167, align 8
  %169 = call { ptr } %168(ptr %160)
  store { ptr } %169, ptr %55, align 8
  %170 = load ptr, ptr %55, align 8
  %.reload10 = load ptr, ptr %.reg2mem7, align 8
  %171 = load i32, ptr %.reload10, align 4
  %172 = getelementptr i8, ptr null, i32 %171
  %173 = ptrtoint ptr %172 to i64
  %174 = getelementptr i8, ptr %170, i64 %173
  %175 = load i8, ptr %158, align 1
  store i8 %175, ptr %174, align 1
  store i32 1, ptr %56, align 4
  %.reload9 = load ptr, ptr %.reg2mem7, align 8
  %176 = load i32, ptr %.reload9, align 4
  %177 = load i32, ptr %56, align 4
  %178 = add i32 %176, %177
  store i32 %178, ptr %57, align 4
  %179 = load i32, ptr %57, align 4
  %.reload8 = load ptr, ptr %.reg2mem7, align 8
  store i32 %179, ptr %.reload8, align 4
  br label %180

180:                                              ; preds = %153, %._crit_edge
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %181

._crit_edge1:                                     ; preds = %180
  br label %138

181:                                              ; preds = %180
  br label %182

182:                                              ; preds = %181, %64
  %183 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %184 = load ptr, ptr %183, align 8
  %185 = load ptr, ptr %7, align 8
  %186 = call ptr @llvm.invariant.start.p0(i64 280, ptr %185)
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %188 = load i32, ptr %187, align 4
  %189 = getelementptr ptr, ptr %185, i32 %188
  %190 = load ptr, ptr %189, align 8
  %191 = getelementptr { ptr, ptr }, ptr %190, i32 0, i32 0
  %192 = load ptr, ptr %191, align 8
  %193 = call { ptr } %192(ptr %184)
  store { ptr } %193, ptr %58, align 8
  %194 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %195 = load ptr, ptr %194, align 8
  %196 = load ptr, ptr %7, align 8
  %197 = call ptr @llvm.invariant.start.p0(i64 280, ptr %196)
  %198 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %199 = load i32, ptr %198, align 4
  %200 = getelementptr ptr, ptr %196, i32 %199
  %201 = getelementptr ptr, ptr %200, i32 1
  %202 = load ptr, ptr %201, align 8
  %203 = getelementptr { ptr, ptr }, ptr %202, i32 0, i32 0
  %204 = load ptr, ptr %203, align 8
  %205 = call i32 %204(ptr %195)
  store i32 %205, ptr %59, align 4
  %206 = load ptr, ptr %58, align 8
  %207 = load i32, ptr %59, align 4
  %208 = getelementptr i8, ptr null, i32 %207
  %209 = ptrtoint ptr %208 to i64
  %210 = getelementptr i8, ptr %206, i64 %209
  store i8 %3, ptr %210, align 1
  %211 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %212 = load ptr, ptr %211, align 8
  %213 = load ptr, ptr %7, align 8
  %214 = call ptr @llvm.invariant.start.p0(i64 280, ptr %213)
  %215 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %216 = load i32, ptr %215, align 4
  %217 = getelementptr ptr, ptr %213, i32 %216
  %218 = getelementptr ptr, ptr %217, i32 1
  %219 = load ptr, ptr %218, align 8
  %220 = getelementptr { ptr, ptr }, ptr %219, i32 0, i32 0
  %221 = load ptr, ptr %220, align 8
  %222 = call i32 %221(ptr %212)
  store i32 %222, ptr %60, align 4
  store i32 1, ptr %61, align 4
  %223 = load i32, ptr %60, align 4
  %224 = load i32, ptr %61, align 4
  %225 = add i32 %223, %224
  store i32 %225, ptr %62, align 4
  %226 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %227 = load ptr, ptr %226, align 8
  %228 = load ptr, ptr %7, align 8
  %229 = call ptr @llvm.invariant.start.p0(i64 280, ptr %228)
  %230 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %231 = load i32, ptr %230, align 4
  %232 = getelementptr ptr, ptr %228, i32 %231
  %233 = getelementptr ptr, ptr %232, i32 1
  %234 = load ptr, ptr %233, align 8
  %235 = getelementptr { ptr, ptr }, ptr %234, i32 0, i32 1
  %236 = load ptr, ptr %235, align 8
  %237 = load i32, ptr %62, align 4
  call void %236(ptr %227, i32 %237)
  %238 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %239 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 0
  %240 = load ptr, ptr %238, align 8
  store ptr %240, ptr %239, align 8
  %241 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %242 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 1
  %243 = load ptr, ptr %241, align 8
  store ptr %243, ptr %242, align 8
  %244 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %245 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 2
  %246 = load ptr, ptr %244, align 8
  store ptr %246, ptr %245, align 8
  %247 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %248 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 3
  %249 = load i32, ptr %247, align 4
  store i32 %249, ptr %248, align 4
  call void @set_offset(ptr %63, ptr @String)
  %250 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 0
  %251 = load ptr, ptr %250, align 8
  %252 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %251, 0
  %253 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 1
  %254 = load ptr, ptr %253, align 8
  %255 = insertvalue { ptr, ptr, ptr, i32 } %252, ptr %254, 1
  %256 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 2
  %257 = load ptr, ptr %256, align 8
  %258 = insertvalue { ptr, ptr, ptr, i32 } %255, ptr %257, 2
  %259 = getelementptr { ptr, ptr, ptr, i32 }, ptr %63, i32 0, i32 3
  %260 = load i32, ptr %259, align 4
  %261 = insertvalue { ptr, ptr, ptr, i32 } %258, i32 %260, 3
  ret { ptr, ptr, ptr, i32 } %261
}

define { ptr, ptr, ptr, i32 } @String_extend_strString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem5 = alloca ptr, align 8
  %.reg2mem7 = alloca ptr, align 8
  %.reg2mem9 = alloca ptr, align 8
  %.reg2mem14 = alloca ptr, align 8
  %.reg2mem25 = alloca ptr, align 8
  %.reg2mem29 = alloca i1, align 1
  %.reg2mem32 = alloca ptr, align 8
  %.reg2mem34 = alloca ptr, align 8
  %.reg2mem36 = alloca ptr, align 8
  %.reg2mem41 = alloca ptr, align 8
  %.reg2mem47 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @String)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 16, ptr %20)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %34 = load i32, ptr %32, align 4
  store i32 %34, ptr %33, align 4
  call void @set_offset(ptr %22, ptr @String)
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %36, 0
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %39 = load ptr, ptr %38, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %39, 1
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %42 = load ptr, ptr %41, align 8
  %43 = insertvalue { ptr, ptr, ptr, i32 } %40, ptr %42, 2
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %45 = load i32, ptr %44, align 4
  %46 = insertvalue { ptr, ptr, ptr, i32 } %43, i32 %45, 3
  %47 = alloca [0 x ptr], align 8
  %48 = call ptr @llvm.invariant.start.p0(i64 0, ptr %47)
  %49 = call ptr @llvm.invariant.start.p0(i64 280, ptr %36)
  %50 = getelementptr ptr, ptr %36, i32 %45
  %51 = getelementptr ptr, ptr %50, i32 7
  %52 = load ptr, ptr %51, align 8
  %53 = alloca {}, align 8
  %54 = call ptr %52({ ptr, ptr, ptr, i32 } %46, ptr %53)
  %55 = call { ptr } %54({ ptr, ptr, ptr, i32 } %46, { ptr, ptr, ptr, i32 } %46, ptr %47)
  %56 = alloca ptr, align 8
  store { ptr } %55, ptr %56, align 8
  %57 = alloca { ptr }, align 8
  %58 = getelementptr { ptr }, ptr %57, i32 0, i32 0
  %59 = load ptr, ptr %56, align 8
  store ptr %59, ptr %58, align 8
  %60 = call ptr @llvm.invariant.start.p0(i64 16, ptr %57)
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %62 = load ptr, ptr %61, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %62, 0
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %65 = load ptr, ptr %64, align 8
  %66 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %65, 1
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %68 = load ptr, ptr %67, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %66, ptr %68, 2
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %71 = load i32, ptr %70, align 4
  %72 = insertvalue { ptr, ptr, ptr, i32 } %69, i32 %71, 3
  %73 = alloca [0 x ptr], align 8
  %74 = call ptr @llvm.invariant.start.p0(i64 0, ptr %73)
  %75 = call ptr @llvm.invariant.start.p0(i64 280, ptr %62)
  %76 = getelementptr ptr, ptr %62, i32 %71
  %77 = getelementptr ptr, ptr %76, i32 5
  %78 = load ptr, ptr %77, align 8
  %79 = alloca {}, align 8
  %80 = call ptr %78({ ptr, ptr, ptr, i32 } %72, ptr %79)
  %81 = call i32 %80({ ptr, ptr, ptr, i32 } %72, { ptr, ptr, ptr, i32 } %72, ptr %73)
  store i32 %81, ptr %.reg2mem47, align 4
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %83 = load ptr, ptr %82, align 8
  %84 = load ptr, ptr %7, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 280, ptr %84)
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %87 = load i32, ptr %86, align 4
  %88 = getelementptr ptr, ptr %84, i32 %87
  %89 = getelementptr ptr, ptr %88, i32 1
  %90 = load ptr, ptr %89, align 8
  %91 = getelementptr { ptr, ptr }, ptr %90, i32 0, i32 0
  %92 = load ptr, ptr %91, align 8
  %93 = call i32 %92(ptr %83)
  %.reload52 = load i32, ptr %.reg2mem47, align 4
  %94 = add i32 %93, %.reload52
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %96 = load ptr, ptr %95, align 8
  %97 = load ptr, ptr %7, align 8
  %98 = call ptr @llvm.invariant.start.p0(i64 280, ptr %97)
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %100 = load i32, ptr %99, align 4
  %101 = getelementptr ptr, ptr %97, i32 %100
  %102 = getelementptr ptr, ptr %101, i32 2
  %103 = load ptr, ptr %102, align 8
  %104 = getelementptr { ptr, ptr }, ptr %103, i32 0, i32 0
  %105 = load ptr, ptr %104, align 8
  %106 = call i32 %105(ptr %96)
  %107 = icmp slt i32 %94, %106
  %108 = alloca i32, align 4
  %109 = alloca i32, align 4
  %110 = alloca i32, align 4
  %111 = alloca i32, align 4
  %112 = alloca i1, align 1
  %113 = alloca ptr, align 8
  %114 = alloca i32, align 4
  %115 = alloca i32, align 4
  %116 = alloca i32, align 4
  %117 = alloca i32, align 4
  %118 = alloca i32, align 4
  %119 = alloca i32, align 4
  %120 = alloca ptr, align 8
  %121 = alloca { ptr }, align 8
  %122 = alloca i32, align 4
  %123 = alloca ptr, align 8
  %124 = alloca i32, align 4
  %125 = alloca i32, align 4
  %126 = alloca i32, align 4
  %127 = alloca i32, align 4
  %128 = alloca i1, align 1
  %129 = alloca i32, align 4
  %130 = alloca i1, align 1
  %131 = alloca ptr, align 8
  %132 = alloca i32, align 4
  %133 = alloca i32, align 4
  %134 = alloca ptr, align 8
  %135 = alloca i32, align 4
  %136 = alloca i32, align 4
  %137 = alloca i32, align 4
  %138 = alloca i32, align 4
  %139 = alloca i32, align 4
  %140 = alloca i32, align 4
  %141 = alloca { ptr, ptr, ptr, i32 }, align 8
  br i1 %107, label %142, label %207

142:                                              ; preds = %4
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %144 = load ptr, ptr %143, align 8
  %145 = load ptr, ptr %7, align 8
  %146 = call ptr @llvm.invariant.start.p0(i64 280, ptr %145)
  %147 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %148 = load i32, ptr %147, align 4
  %149 = getelementptr ptr, ptr %145, i32 %148
  %150 = getelementptr ptr, ptr %149, i32 1
  %151 = load ptr, ptr %150, align 8
  %152 = getelementptr { ptr, ptr }, ptr %151, i32 0, i32 0
  %153 = load ptr, ptr %152, align 8
  %154 = call i32 %153(ptr %144)
  store ptr %108, ptr %.reg2mem41, align 8
  %.reload46 = load ptr, ptr %.reg2mem41, align 8
  store i32 %154, ptr %.reload46, align 4
  store ptr %109, ptr %.reg2mem36, align 8
  %.reload40 = load ptr, ptr %.reg2mem36, align 8
  store i32 0, ptr %.reload40, align 4
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  store ptr %155, ptr %.reg2mem34, align 8
  %156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  store ptr %156, ptr %.reg2mem32, align 8
  br label %157

157:                                              ; preds = %._crit_edge1, %142
  %.reload35 = load ptr, ptr %.reg2mem34, align 8
  %158 = load ptr, ptr %.reload35, align 8
  %159 = load ptr, ptr %7, align 8
  %160 = call ptr @llvm.invariant.start.p0(i64 280, ptr %159)
  %.reload33 = load ptr, ptr %.reg2mem32, align 8
  %161 = load i32, ptr %.reload33, align 4
  %162 = getelementptr ptr, ptr %159, i32 %161
  %163 = getelementptr ptr, ptr %162, i32 1
  %164 = load ptr, ptr %163, align 8
  %165 = getelementptr { ptr, ptr }, ptr %164, i32 0, i32 0
  %166 = load ptr, ptr %165, align 8
  %167 = call i32 %166(ptr %158)
  store i32 %167, ptr %110, align 4
  %168 = load i32, ptr %110, align 4
  %.reload51 = load i32, ptr %.reg2mem47, align 4
  %169 = add i32 %168, %.reload51
  store i32 %169, ptr %111, align 4
  %.reload45 = load ptr, ptr %.reg2mem41, align 8
  %170 = load i32, ptr %.reload45, align 4
  %171 = load i32, ptr %111, align 4
  %172 = icmp slt i32 %170, %171
  store i1 %172, ptr %112, align 1
  %173 = load i1, ptr %112, align 1
  store i1 %173, ptr %.reg2mem29, align 1
  %.reload31 = load i1, ptr %.reg2mem29, align 1
  br i1 %.reload31, label %174, label %._crit_edge

._crit_edge:                                      ; preds = %157
  br label %205

174:                                              ; preds = %157
  %175 = load ptr, ptr %57, align 8
  %.reload39 = load ptr, ptr %.reg2mem36, align 8
  %176 = load i32, ptr %.reload39, align 4
  %177 = getelementptr i8, ptr null, i32 %176
  %178 = ptrtoint ptr %177 to i64
  %179 = getelementptr i8, ptr %175, i64 %178
  %180 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %181 = load ptr, ptr %180, align 8
  %182 = load ptr, ptr %7, align 8
  %183 = call ptr @llvm.invariant.start.p0(i64 280, ptr %182)
  %184 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %185 = load i32, ptr %184, align 4
  %186 = getelementptr ptr, ptr %182, i32 %185
  %187 = load ptr, ptr %186, align 8
  %188 = getelementptr { ptr, ptr }, ptr %187, i32 0, i32 0
  %189 = load ptr, ptr %188, align 8
  %190 = call { ptr } %189(ptr %181)
  store { ptr } %190, ptr %113, align 8
  %191 = load ptr, ptr %113, align 8
  %.reload44 = load ptr, ptr %.reg2mem41, align 8
  %192 = load i32, ptr %.reload44, align 4
  %193 = getelementptr i8, ptr null, i32 %192
  %194 = ptrtoint ptr %193 to i64
  %195 = getelementptr i8, ptr %191, i64 %194
  %196 = load i8, ptr %179, align 1
  store i8 %196, ptr %195, align 1
  store i32 1, ptr %114, align 4
  %.reload43 = load ptr, ptr %.reg2mem41, align 8
  %197 = load i32, ptr %.reload43, align 4
  %198 = load i32, ptr %114, align 4
  %199 = add i32 %197, %198
  store i32 %199, ptr %115, align 4
  %200 = load i32, ptr %115, align 4
  %.reload42 = load ptr, ptr %.reg2mem41, align 8
  store i32 %200, ptr %.reload42, align 4
  store i32 1, ptr %116, align 4
  %.reload38 = load ptr, ptr %.reg2mem36, align 8
  %201 = load i32, ptr %.reload38, align 4
  %202 = load i32, ptr %116, align 4
  %203 = add i32 %201, %202
  store i32 %203, ptr %117, align 4
  %204 = load i32, ptr %117, align 4
  %.reload37 = load ptr, ptr %.reg2mem36, align 8
  store i32 %204, ptr %.reload37, align 4
  br label %205

205:                                              ; preds = %174, %._crit_edge
  %.reload30 = load i1, ptr %.reg2mem29, align 1
  br i1 %.reload30, label %._crit_edge1, label %206

._crit_edge1:                                     ; preds = %205
  br label %157

206:                                              ; preds = %205
  br label %374

207:                                              ; preds = %4
  %208 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %209 = load ptr, ptr %208, align 8
  %210 = load ptr, ptr %7, align 8
  %211 = call ptr @llvm.invariant.start.p0(i64 280, ptr %210)
  %212 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %213 = load i32, ptr %212, align 4
  %214 = getelementptr ptr, ptr %210, i32 %213
  %215 = getelementptr ptr, ptr %214, i32 1
  %216 = load ptr, ptr %215, align 8
  %217 = getelementptr { ptr, ptr }, ptr %216, i32 0, i32 0
  %218 = load ptr, ptr %217, align 8
  %219 = call i32 %218(ptr %209)
  store i32 %219, ptr %118, align 4
  %220 = load i32, ptr %118, align 4
  %.reload50 = load i32, ptr %.reg2mem47, align 4
  %221 = add i32 %220, %.reload50
  store i32 %221, ptr %119, align 4
  %222 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %223 = load ptr, ptr %222, align 8
  %224 = load ptr, ptr %7, align 8
  %225 = call ptr @llvm.invariant.start.p0(i64 280, ptr %224)
  %226 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %227 = load i32, ptr %226, align 4
  %228 = getelementptr ptr, ptr %224, i32 %227
  %229 = getelementptr ptr, ptr %228, i32 2
  %230 = load ptr, ptr %229, align 8
  %231 = getelementptr { ptr, ptr }, ptr %230, i32 0, i32 1
  %232 = load ptr, ptr %231, align 8
  %233 = load i32, ptr %119, align 4
  call void %232(ptr %223, i32 %233)
  %234 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %235 = load ptr, ptr %234, align 8
  %236 = load ptr, ptr %7, align 8
  %237 = call ptr @llvm.invariant.start.p0(i64 280, ptr %236)
  %238 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %239 = load i32, ptr %238, align 4
  %240 = getelementptr ptr, ptr %236, i32 %239
  %241 = load ptr, ptr %240, align 8
  %242 = getelementptr { ptr, ptr }, ptr %241, i32 0, i32 0
  %243 = load ptr, ptr %242, align 8
  %244 = call { ptr } %243(ptr %235)
  store { ptr } %244, ptr %120, align 8
  store ptr %121, ptr %.reg2mem25, align 8
  %.reload28 = load ptr, ptr %.reg2mem25, align 8
  %245 = getelementptr { ptr }, ptr %.reload28, i32 0, i32 0
  %246 = load ptr, ptr %120, align 8
  store ptr %246, ptr %245, align 8
  %.reload27 = load ptr, ptr %.reg2mem25, align 8
  %247 = call ptr @llvm.invariant.start.p0(i64 16, ptr %.reload27)
  %248 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %249 = load ptr, ptr %248, align 8
  %250 = load ptr, ptr %7, align 8
  %251 = call ptr @llvm.invariant.start.p0(i64 280, ptr %250)
  %252 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %253 = load i32, ptr %252, align 4
  %254 = getelementptr ptr, ptr %250, i32 %253
  %255 = getelementptr ptr, ptr %254, i32 2
  %256 = load ptr, ptr %255, align 8
  %257 = getelementptr { ptr, ptr }, ptr %256, i32 0, i32 0
  %258 = load ptr, ptr %257, align 8
  %259 = call i32 %258(ptr %249)
  store i32 %259, ptr %122, align 4
  %260 = load i32, ptr %122, align 4
  %261 = getelementptr i8, ptr null, i32 %260
  %262 = ptrtoint ptr %261 to i64
  %263 = call ptr @bump_malloc(i64 %262)
  store ptr %263, ptr %123, align 8
  %264 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %265 = load ptr, ptr %264, align 8
  %266 = load ptr, ptr %7, align 8
  %267 = call ptr @llvm.invariant.start.p0(i64 280, ptr %266)
  %268 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %269 = load i32, ptr %268, align 4
  %270 = getelementptr ptr, ptr %266, i32 %269
  %271 = load ptr, ptr %270, align 8
  %272 = getelementptr { ptr, ptr }, ptr %271, i32 0, i32 1
  %273 = load ptr, ptr %272, align 8
  %274 = getelementptr { ptr }, ptr %123, i32 0, i32 0
  %275 = load ptr, ptr %274, align 8
  %276 = insertvalue { ptr } undef, ptr %275, 0
  call void %273(ptr %265, { ptr } %276)
  store ptr %124, ptr %.reg2mem14, align 8
  %.reload24 = load ptr, ptr %.reg2mem14, align 8
  store i32 0, ptr %.reload24, align 4
  store ptr %125, ptr %.reg2mem9, align 8
  %.reload13 = load ptr, ptr %.reg2mem9, align 8
  store i32 0, ptr %.reload13, align 4
  %277 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  store ptr %277, ptr %.reg2mem7, align 8
  %278 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  store ptr %278, ptr %.reg2mem5, align 8
  br label %279

279:                                              ; preds = %._crit_edge3, %207
  %.reload8 = load ptr, ptr %.reg2mem7, align 8
  %280 = load ptr, ptr %.reload8, align 8
  %281 = load ptr, ptr %7, align 8
  %282 = call ptr @llvm.invariant.start.p0(i64 280, ptr %281)
  %.reload6 = load ptr, ptr %.reg2mem5, align 8
  %283 = load i32, ptr %.reload6, align 4
  %284 = getelementptr ptr, ptr %281, i32 %283
  %285 = getelementptr ptr, ptr %284, i32 1
  %286 = load ptr, ptr %285, align 8
  %287 = getelementptr { ptr, ptr }, ptr %286, i32 0, i32 0
  %288 = load ptr, ptr %287, align 8
  %289 = call i32 %288(ptr %280)
  store i32 %289, ptr %126, align 4
  %290 = load i32, ptr %126, align 4
  %.reload49 = load i32, ptr %.reg2mem47, align 4
  %291 = add i32 %290, %.reload49
  store i32 %291, ptr %127, align 4
  %.reload23 = load ptr, ptr %.reg2mem14, align 8
  %292 = load i32, ptr %.reload23, align 4
  %293 = load i32, ptr %127, align 4
  %294 = icmp slt i32 %292, %293
  store i1 %294, ptr %128, align 1
  %295 = load i1, ptr %128, align 1
  store i1 %295, ptr %.reg2mem, align 1
  %.reload4 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload4, label %296, label %._crit_edge2

._crit_edge2:                                     ; preds = %279
  br label %372

296:                                              ; preds = %279
  %297 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %298 = load ptr, ptr %297, align 8
  %299 = load ptr, ptr %7, align 8
  %300 = call ptr @llvm.invariant.start.p0(i64 280, ptr %299)
  %301 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %302 = load i32, ptr %301, align 4
  %303 = getelementptr ptr, ptr %299, i32 %302
  %304 = getelementptr ptr, ptr %303, i32 1
  %305 = load ptr, ptr %304, align 8
  %306 = getelementptr { ptr, ptr }, ptr %305, i32 0, i32 0
  %307 = load ptr, ptr %306, align 8
  %308 = call i32 %307(ptr %298)
  store i32 %308, ptr %129, align 4
  %.reload22 = load ptr, ptr %.reg2mem14, align 8
  %309 = load i32, ptr %.reload22, align 4
  %310 = load i32, ptr %129, align 4
  %311 = icmp slt i32 %309, %310
  store i1 %311, ptr %130, align 1
  %312 = load i1, ptr %130, align 1
  br i1 %312, label %313, label %340

313:                                              ; preds = %296
  %.reload26 = load ptr, ptr %.reg2mem25, align 8
  %314 = load ptr, ptr %.reload26, align 8
  %.reload21 = load ptr, ptr %.reg2mem14, align 8
  %315 = load i32, ptr %.reload21, align 4
  %316 = getelementptr i8, ptr null, i32 %315
  %317 = ptrtoint ptr %316 to i64
  %318 = getelementptr i8, ptr %314, i64 %317
  %319 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %320 = load ptr, ptr %319, align 8
  %321 = load ptr, ptr %7, align 8
  %322 = call ptr @llvm.invariant.start.p0(i64 280, ptr %321)
  %323 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %324 = load i32, ptr %323, align 4
  %325 = getelementptr ptr, ptr %321, i32 %324
  %326 = load ptr, ptr %325, align 8
  %327 = getelementptr { ptr, ptr }, ptr %326, i32 0, i32 0
  %328 = load ptr, ptr %327, align 8
  %329 = call { ptr } %328(ptr %320)
  store { ptr } %329, ptr %131, align 8
  %330 = load ptr, ptr %131, align 8
  %.reload20 = load ptr, ptr %.reg2mem14, align 8
  %331 = load i32, ptr %.reload20, align 4
  %332 = getelementptr i8, ptr null, i32 %331
  %333 = ptrtoint ptr %332 to i64
  %334 = getelementptr i8, ptr %330, i64 %333
  %335 = load i8, ptr %318, align 1
  store i8 %335, ptr %334, align 1
  store i32 1, ptr %132, align 4
  %.reload19 = load ptr, ptr %.reg2mem14, align 8
  %336 = load i32, ptr %.reload19, align 4
  %337 = load i32, ptr %132, align 4
  %338 = add i32 %336, %337
  store i32 %338, ptr %133, align 4
  %339 = load i32, ptr %133, align 4
  %.reload18 = load ptr, ptr %.reg2mem14, align 8
  store i32 %339, ptr %.reload18, align 4
  br label %371

340:                                              ; preds = %296
  %341 = load ptr, ptr %57, align 8
  %.reload12 = load ptr, ptr %.reg2mem9, align 8
  %342 = load i32, ptr %.reload12, align 4
  %343 = getelementptr i8, ptr null, i32 %342
  %344 = ptrtoint ptr %343 to i64
  %345 = getelementptr i8, ptr %341, i64 %344
  %346 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %347 = load ptr, ptr %346, align 8
  %348 = load ptr, ptr %7, align 8
  %349 = call ptr @llvm.invariant.start.p0(i64 280, ptr %348)
  %350 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %351 = load i32, ptr %350, align 4
  %352 = getelementptr ptr, ptr %348, i32 %351
  %353 = load ptr, ptr %352, align 8
  %354 = getelementptr { ptr, ptr }, ptr %353, i32 0, i32 0
  %355 = load ptr, ptr %354, align 8
  %356 = call { ptr } %355(ptr %347)
  store { ptr } %356, ptr %134, align 8
  %357 = load ptr, ptr %134, align 8
  %.reload17 = load ptr, ptr %.reg2mem14, align 8
  %358 = load i32, ptr %.reload17, align 4
  %359 = getelementptr i8, ptr null, i32 %358
  %360 = ptrtoint ptr %359 to i64
  %361 = getelementptr i8, ptr %357, i64 %360
  %362 = load i8, ptr %345, align 1
  store i8 %362, ptr %361, align 1
  store i32 1, ptr %135, align 4
  %.reload16 = load ptr, ptr %.reg2mem14, align 8
  %363 = load i32, ptr %.reload16, align 4
  %364 = load i32, ptr %135, align 4
  %365 = add i32 %363, %364
  store i32 %365, ptr %136, align 4
  %366 = load i32, ptr %136, align 4
  %.reload15 = load ptr, ptr %.reg2mem14, align 8
  store i32 %366, ptr %.reload15, align 4
  store i32 1, ptr %137, align 4
  %.reload11 = load ptr, ptr %.reg2mem9, align 8
  %367 = load i32, ptr %.reload11, align 4
  %368 = load i32, ptr %137, align 4
  %369 = add i32 %367, %368
  store i32 %369, ptr %138, align 4
  %370 = load i32, ptr %138, align 4
  %.reload10 = load ptr, ptr %.reg2mem9, align 8
  store i32 %370, ptr %.reload10, align 4
  br label %371

371:                                              ; preds = %340, %313
  br label %372

372:                                              ; preds = %371, %._crit_edge2
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge3, label %373

._crit_edge3:                                     ; preds = %372
  br label %279

373:                                              ; preds = %372
  br label %374

374:                                              ; preds = %373, %206
  %375 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %376 = load ptr, ptr %375, align 8
  %377 = load ptr, ptr %7, align 8
  %378 = call ptr @llvm.invariant.start.p0(i64 280, ptr %377)
  %379 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %380 = load i32, ptr %379, align 4
  %381 = getelementptr ptr, ptr %377, i32 %380
  %382 = getelementptr ptr, ptr %381, i32 1
  %383 = load ptr, ptr %382, align 8
  %384 = getelementptr { ptr, ptr }, ptr %383, i32 0, i32 0
  %385 = load ptr, ptr %384, align 8
  %386 = call i32 %385(ptr %376)
  store i32 %386, ptr %139, align 4
  %387 = load i32, ptr %139, align 4
  %.reload48 = load i32, ptr %.reg2mem47, align 4
  %388 = add i32 %387, %.reload48
  store i32 %388, ptr %140, align 4
  %389 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %390 = load ptr, ptr %389, align 8
  %391 = load ptr, ptr %7, align 8
  %392 = call ptr @llvm.invariant.start.p0(i64 280, ptr %391)
  %393 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %394 = load i32, ptr %393, align 4
  %395 = getelementptr ptr, ptr %391, i32 %394
  %396 = getelementptr ptr, ptr %395, i32 1
  %397 = load ptr, ptr %396, align 8
  %398 = getelementptr { ptr, ptr }, ptr %397, i32 0, i32 1
  %399 = load ptr, ptr %398, align 8
  %400 = load i32, ptr %140, align 4
  call void %399(ptr %390, i32 %400)
  %401 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %402 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 0
  %403 = load ptr, ptr %401, align 8
  store ptr %403, ptr %402, align 8
  %404 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %405 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 1
  %406 = load ptr, ptr %404, align 8
  store ptr %406, ptr %405, align 8
  %407 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %408 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 2
  %409 = load ptr, ptr %407, align 8
  store ptr %409, ptr %408, align 8
  %410 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %411 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 3
  %412 = load i32, ptr %410, align 4
  store i32 %412, ptr %411, align 4
  call void @set_offset(ptr %141, ptr @String)
  %413 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 0
  %414 = load ptr, ptr %413, align 8
  %415 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %414, 0
  %416 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 1
  %417 = load ptr, ptr %416, align 8
  %418 = insertvalue { ptr, ptr, ptr, i32 } %415, ptr %417, 1
  %419 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 2
  %420 = load ptr, ptr %419, align 8
  %421 = insertvalue { ptr, ptr, ptr, i32 } %418, ptr %420, 2
  %422 = getelementptr { ptr, ptr, ptr, i32 }, ptr %141, i32 0, i32 3
  %423 = load i32, ptr %422, align 4
  %424 = insertvalue { ptr, ptr, ptr, i32 } %421, i32 %423, 3
  ret { ptr, ptr, ptr, i32 } %424
}

define i8 @String__index_xPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i8, align 1
  %.reg2mem2 = alloca i8, align 1
  %.reg2mem4 = alloca i8, align 1
  %.reg2mem6 = alloca i8, align 1
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @String)
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %21 = load ptr, ptr %20, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 280, ptr %22)
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %25 = load i32, ptr %24, align 4
  %26 = getelementptr ptr, ptr %22, i32 %25
  %27 = getelementptr ptr, ptr %26, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr { ptr, ptr }, ptr %28, i32 0, i32 0
  %30 = load ptr, ptr %29, align 8
  %31 = call i32 %30(ptr %21)
  %32 = sub i32 %31, 1
  %33 = icmp sgt i32 %3, %32
  %34 = alloca i32, align 4
  %35 = alloca i1, align 1
  %36 = alloca ptr, align 8
  %37 = alloca i32, align 4
  %38 = alloca i32, align 4
  %39 = alloca i32, align 4
  %40 = alloca i1, align 1
  %41 = alloca ptr, align 8
  %42 = alloca i32, align 4
  %43 = alloca i32, align 4
  br i1 %33, label %44, label %._crit_edge

._crit_edge:                                      ; preds = %4
  br label %46

44:                                               ; preds = %4
  %45 = call ptr @get_current_coroutine()
  call void @coroutine_yield(ptr %45)
  br label %46

46:                                               ; preds = %44, %._crit_edge
  store i32 0, ptr %34, align 4
  %47 = load i32, ptr %34, align 4
  %48 = icmp sge i32 %3, %47
  store i1 %48, ptr %35, align 1
  %49 = load i1, ptr %35, align 1
  br i1 %49, label %50, label %67

50:                                               ; preds = %46
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %52 = load ptr, ptr %51, align 8
  %53 = load ptr, ptr %7, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 280, ptr %53)
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %56 = load i32, ptr %55, align 4
  %57 = getelementptr ptr, ptr %53, i32 %56
  %58 = load ptr, ptr %57, align 8
  %59 = getelementptr { ptr, ptr }, ptr %58, i32 0, i32 0
  %60 = load ptr, ptr %59, align 8
  %61 = call { ptr } %60(ptr %52)
  store { ptr } %61, ptr %36, align 8
  %62 = load ptr, ptr %36, align 8
  %63 = getelementptr i8, ptr null, i32 %3
  %64 = ptrtoint ptr %63 to i64
  %65 = getelementptr i8, ptr %62, i64 %64
  %66 = load i8, ptr %65, align 1
  store i8 %66, ptr %.reg2mem4, align 1
  %.reload5 = load i8, ptr %.reg2mem4, align 1
  store i8 %.reload5, ptr %.reg2mem6, align 1
  br label %120

67:                                               ; preds = %46
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = load ptr, ptr %7, align 8
  %71 = call ptr @llvm.invariant.start.p0(i64 280, ptr %70)
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %73 = load i32, ptr %72, align 4
  %74 = getelementptr ptr, ptr %70, i32 %73
  %75 = getelementptr ptr, ptr %74, i32 1
  %76 = load ptr, ptr %75, align 8
  %77 = getelementptr { ptr, ptr }, ptr %76, i32 0, i32 0
  %78 = load ptr, ptr %77, align 8
  %79 = call i32 %78(ptr %69)
  store i32 %79, ptr %37, align 4
  %80 = load i32, ptr %37, align 4
  %81 = add i32 %80, %3
  store i32 %81, ptr %38, align 4
  store i32 0, ptr %39, align 4
  %82 = load i32, ptr %38, align 4
  %83 = load i32, ptr %39, align 4
  %84 = icmp slt i32 %82, %83
  store i1 %84, ptr %40, align 1
  %85 = load i1, ptr %40, align 1
  br i1 %85, label %86, label %._crit_edge1

._crit_edge1:                                     ; preds = %67
  br label %88

86:                                               ; preds = %67
  %87 = call ptr @get_current_coroutine()
  call void @coroutine_yield(ptr %87)
  br label %88

88:                                               ; preds = %86, %._crit_edge1
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %90 = load ptr, ptr %89, align 8
  %91 = load ptr, ptr %7, align 8
  %92 = call ptr @llvm.invariant.start.p0(i64 280, ptr %91)
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %94 = load i32, ptr %93, align 4
  %95 = getelementptr ptr, ptr %91, i32 %94
  %96 = load ptr, ptr %95, align 8
  %97 = getelementptr { ptr, ptr }, ptr %96, i32 0, i32 0
  %98 = load ptr, ptr %97, align 8
  %99 = call { ptr } %98(ptr %90)
  store { ptr } %99, ptr %41, align 8
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %101 = load ptr, ptr %100, align 8
  %102 = load ptr, ptr %7, align 8
  %103 = call ptr @llvm.invariant.start.p0(i64 280, ptr %102)
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %105 = load i32, ptr %104, align 4
  %106 = getelementptr ptr, ptr %102, i32 %105
  %107 = getelementptr ptr, ptr %106, i32 1
  %108 = load ptr, ptr %107, align 8
  %109 = getelementptr { ptr, ptr }, ptr %108, i32 0, i32 0
  %110 = load ptr, ptr %109, align 8
  %111 = call i32 %110(ptr %101)
  store i32 %111, ptr %42, align 4
  %112 = load i32, ptr %42, align 4
  %113 = add i32 %112, %3
  store i32 %113, ptr %43, align 4
  %114 = load ptr, ptr %41, align 8
  %115 = load i32, ptr %43, align 4
  %116 = getelementptr i8, ptr null, i32 %115
  %117 = ptrtoint ptr %116 to i64
  %118 = getelementptr i8, ptr %114, i64 %117
  %119 = load i8, ptr %118, align 1
  store i8 %119, ptr %.reg2mem2, align 1
  %.reload3 = load i8, ptr %.reg2mem2, align 1
  store i8 %.reload3, ptr %.reg2mem6, align 1
  br label %120

120:                                              ; preds = %88, %50
  %.reload7 = load i8, ptr %.reg2mem6, align 1
  store i8 %.reload7, ptr %.reg2mem, align 1
  br label %121

121:                                              ; preds = %120
  %.reload = load i8, ptr %.reg2mem, align 1
  ret i8 %.reload
}

define i1 @String__EQ_otherString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i32, align 4
  %.reg2mem5 = alloca i1, align 1
  %.reg2mem8 = alloca ptr, align 8
  %.reg2mem10 = alloca ptr, align 8
  %.reg2mem12 = alloca ptr, align 8
  %.reg2mem19 = alloca i1, align 1
  %.reg2mem21 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @String)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 16, ptr %20)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %34 = load i32, ptr %32, align 4
  store i32 %34, ptr %33, align 4
  call void @set_offset(ptr %22, ptr @String)
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = load ptr, ptr %7, align 8
  %38 = call ptr @llvm.invariant.start.p0(i64 280, ptr %37)
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %40 = load i32, ptr %39, align 4
  %41 = getelementptr ptr, ptr %37, i32 %40
  %42 = getelementptr ptr, ptr %41, i32 1
  %43 = load ptr, ptr %42, align 8
  %44 = getelementptr { ptr, ptr }, ptr %43, i32 0, i32 0
  %45 = load ptr, ptr %44, align 8
  %46 = call i32 %45(ptr %36)
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %48 = load ptr, ptr %47, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %48, 0
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } %49, ptr %51, 1
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %54 = load ptr, ptr %53, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %54, 2
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %57 = load i32, ptr %56, align 4
  %58 = insertvalue { ptr, ptr, ptr, i32 } %55, i32 %57, 3
  %59 = alloca [0 x ptr], align 8
  %60 = call ptr @llvm.invariant.start.p0(i64 0, ptr %59)
  %61 = call ptr @llvm.invariant.start.p0(i64 280, ptr %48)
  %62 = getelementptr ptr, ptr %48, i32 %57
  %63 = getelementptr ptr, ptr %62, i32 5
  %64 = load ptr, ptr %63, align 8
  %65 = alloca {}, align 8
  %66 = call ptr %64({ ptr, ptr, ptr, i32 } %58, ptr %65)
  %67 = call i32 %66({ ptr, ptr, ptr, i32 } %58, { ptr, ptr, ptr, i32 } %58, ptr %59)
  %68 = icmp ne i32 %46, %67
  %69 = alloca i32, align 4
  %70 = alloca i32, align 4
  %71 = alloca i1, align 1
  %72 = alloca ptr, align 8
  %73 = alloca [0 x ptr], align 8
  %74 = alloca {}, align 8
  %75 = alloca ptr, align 8
  %76 = alloca i1, align 1
  %77 = alloca i32, align 4
  %78 = alloca i32, align 4
  %79 = alloca i1, align 1
  br i1 %68, label %80, label %81

80:                                               ; preds = %4
  store i1 false, ptr %.reg2mem19, align 1
  br label %160

81:                                               ; preds = %4
  store ptr %69, ptr %.reg2mem12, align 8
  %.reload18 = load ptr, ptr %.reg2mem12, align 8
  store i32 0, ptr %.reload18, align 4
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  store ptr %82, ptr %.reg2mem10, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  store ptr %83, ptr %.reg2mem8, align 8
  br label %84

84:                                               ; preds = %158, %81
  %.reload11 = load ptr, ptr %.reg2mem10, align 8
  %85 = load ptr, ptr %.reload11, align 8
  %86 = load ptr, ptr %7, align 8
  %87 = call ptr @llvm.invariant.start.p0(i64 280, ptr %86)
  %.reload9 = load ptr, ptr %.reg2mem8, align 8
  %88 = load i32, ptr %.reload9, align 4
  %89 = getelementptr ptr, ptr %86, i32 %88
  %90 = getelementptr ptr, ptr %89, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = getelementptr { ptr, ptr }, ptr %91, i32 0, i32 0
  %93 = load ptr, ptr %92, align 8
  %94 = call i32 %93(ptr %85)
  store i32 %94, ptr %70, align 4
  %.reload17 = load ptr, ptr %.reg2mem12, align 8
  %95 = load i32, ptr %.reload17, align 4
  %96 = load i32, ptr %70, align 4
  %97 = icmp slt i32 %95, %96
  store i1 %97, ptr %71, align 1
  %98 = load i1, ptr %71, align 1
  %99 = xor i1 %98, true
  store i1 %99, ptr %.reg2mem5, align 1
  br i1 %98, label %100, label %154

100:                                              ; preds = %84
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %102 = load ptr, ptr %101, align 8
  %103 = load ptr, ptr %7, align 8
  %104 = call ptr @llvm.invariant.start.p0(i64 280, ptr %103)
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %106 = load i32, ptr %105, align 4
  %107 = getelementptr ptr, ptr %103, i32 %106
  %108 = load ptr, ptr %107, align 8
  %109 = getelementptr { ptr, ptr }, ptr %108, i32 0, i32 0
  %110 = load ptr, ptr %109, align 8
  %111 = call { ptr } %110(ptr %102)
  store { ptr } %111, ptr %72, align 8
  %112 = load ptr, ptr %72, align 8
  %.reload16 = load ptr, ptr %.reg2mem12, align 8
  %113 = load i32, ptr %.reload16, align 4
  %114 = getelementptr i8, ptr null, i32 %113
  %115 = ptrtoint ptr %114 to i64
  %116 = getelementptr i8, ptr %112, i64 %115
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %118 = load ptr, ptr %117, align 8
  %119 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %118, 0
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %121 = load ptr, ptr %120, align 8
  %122 = insertvalue { ptr, ptr, ptr, i32 } %119, ptr %121, 1
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %124 = load ptr, ptr %123, align 8
  %125 = insertvalue { ptr, ptr, ptr, i32 } %122, ptr %124, 2
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %127 = load i32, ptr %126, align 4
  %128 = insertvalue { ptr, ptr, ptr, i32 } %125, i32 %127, 3
  %129 = call ptr @llvm.invariant.start.p0(i64 0, ptr %73)
  %130 = call ptr @llvm.invariant.start.p0(i64 280, ptr %118)
  %131 = getelementptr ptr, ptr %118, i32 %127
  %132 = getelementptr ptr, ptr %131, i32 7
  %133 = load ptr, ptr %132, align 8
  %134 = call ptr %133({ ptr, ptr, ptr, i32 } %128, ptr %74)
  %135 = call { ptr } %134({ ptr, ptr, ptr, i32 } %128, { ptr, ptr, ptr, i32 } %128, ptr %73)
  store { ptr } %135, ptr %75, align 8
  %136 = load ptr, ptr %75, align 8
  %.reload15 = load ptr, ptr %.reg2mem12, align 8
  %137 = load i32, ptr %.reload15, align 4
  %138 = getelementptr i8, ptr null, i32 %137
  %139 = ptrtoint ptr %138 to i64
  %140 = getelementptr i8, ptr %136, i64 %139
  %141 = load i8, ptr %116, align 1
  %142 = load i8, ptr %140, align 1
  %143 = icmp ne i8 %141, %142
  store i1 %143, ptr %76, align 1
  %144 = load i1, ptr %76, align 1
  %145 = xor i1 %144, true
  %146 = zext i1 %145 to i32
  store i32 %146, ptr %.reg2mem3, align 4
  br i1 %144, label %147, label %148

147:                                              ; preds = %100
  br label %153

148:                                              ; preds = %100
  store i32 1, ptr %77, align 4
  %.reload14 = load ptr, ptr %.reg2mem12, align 8
  %149 = load i32, ptr %.reload14, align 4
  %150 = load i32, ptr %77, align 4
  %151 = add i32 %149, %150
  store i32 %151, ptr %78, align 4
  %152 = load i32, ptr %78, align 4
  %.reload13 = load ptr, ptr %.reg2mem12, align 8
  store i32 %152, ptr %.reload13, align 4
  br label %153

153:                                              ; preds = %148, %147
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  store i32 %.reload4, ptr %.reg2mem21, align 4
  br label %155

154:                                              ; preds = %84
  store i32 0, ptr %.reg2mem21, align 4
  br label %155

155:                                              ; preds = %154, %153
  %.reload22 = load i32, ptr %.reg2mem21, align 4
  store i32 %.reload22, ptr %.reg2mem1, align 4
  br label %156

156:                                              ; preds = %155
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  %157 = trunc i32 %.reload2 to i1
  %.reload7 = load i1, ptr %.reg2mem5, align 1
  br i1 %157, label %158, label %159

158:                                              ; preds = %156
  br label %84

159:                                              ; preds = %156
  %.reload6 = load i1, ptr %.reg2mem5, align 1
  store i1 %.reload6, ptr %.reg2mem19, align 1
  br label %160

160:                                              ; preds = %159, %80
  %.reload20 = load i1, ptr %.reg2mem19, align 1
  store i1 %.reload20, ptr %.reg2mem, align 1
  br label %161

161:                                              ; preds = %160
  %.reload = load i1, ptr %.reg2mem, align 1
  store i1 %.reload, ptr %79, align 1
  %162 = load i1, ptr %79, align 1
  ret i1 %162
}

define { ptr, i8 } @String_pop_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i8 }, align 8
  %.reg2mem1 = alloca { ptr, i8 }, align 8
  %.reg2mem3 = alloca { ptr, i8 }, align 8
  %.reg2mem5 = alloca { ptr, i8 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @String)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 280, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 1
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call i32 %29(ptr %20)
  %31 = icmp eq i32 %30, 0
  %32 = alloca [0 x i8], align 1
  %33 = alloca i8, align 1
  %34 = alloca ptr, align 8
  %35 = alloca i64, align 8
  %36 = alloca i32, align 4
  %37 = alloca i32, align 4
  %38 = alloca i32, align 4
  %39 = alloca ptr, align 8
  %40 = alloca i32, align 4
  %41 = alloca i8, align 1
  %42 = alloca ptr, align 8
  %43 = alloca i64, align 8
  br i1 %31, label %44, label %51

44:                                               ; preds = %3
  %45 = load [0 x i8], ptr %32, align 1
  store [0 x i8] %45, ptr %33, align 1
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %35, align 4
  %46 = load i64, ptr %35, align 4
  store i64 %46, ptr %34, align 4
  %47 = load ptr, ptr %34, align 8
  %48 = insertvalue { ptr, i8 } undef, ptr %47, 0
  %49 = load i8, ptr %33, align 1
  %50 = insertvalue { ptr, i8 } %48, i8 %49, 1
  store { ptr, i8 } %50, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i8 }, ptr %.reg2mem3, align 8
  store { ptr, i8 } %.reload4, ptr %.reg2mem5, align 8
  br label %113

51:                                               ; preds = %3
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %53 = load ptr, ptr %52, align 8
  %54 = load ptr, ptr %6, align 8
  %55 = call ptr @llvm.invariant.start.p0(i64 280, ptr %54)
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %57 = load i32, ptr %56, align 4
  %58 = getelementptr ptr, ptr %54, i32 %57
  %59 = getelementptr ptr, ptr %58, i32 1
  %60 = load ptr, ptr %59, align 8
  %61 = getelementptr { ptr, ptr }, ptr %60, i32 0, i32 0
  %62 = load ptr, ptr %61, align 8
  %63 = call i32 %62(ptr %53)
  store i32 %63, ptr %36, align 4
  store i32 1, ptr %37, align 4
  %64 = load i32, ptr %36, align 4
  %65 = load i32, ptr %37, align 4
  %66 = sub i32 %64, %65
  store i32 %66, ptr %38, align 4
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %68 = load ptr, ptr %67, align 8
  %69 = load ptr, ptr %6, align 8
  %70 = call ptr @llvm.invariant.start.p0(i64 280, ptr %69)
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %72 = load i32, ptr %71, align 4
  %73 = getelementptr ptr, ptr %69, i32 %72
  %74 = getelementptr ptr, ptr %73, i32 1
  %75 = load ptr, ptr %74, align 8
  %76 = getelementptr { ptr, ptr }, ptr %75, i32 0, i32 1
  %77 = load ptr, ptr %76, align 8
  %78 = load i32, ptr %38, align 4
  call void %77(ptr %68, i32 %78)
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %80 = load ptr, ptr %79, align 8
  %81 = load ptr, ptr %6, align 8
  %82 = call ptr @llvm.invariant.start.p0(i64 280, ptr %81)
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %84 = load i32, ptr %83, align 4
  %85 = getelementptr ptr, ptr %81, i32 %84
  %86 = load ptr, ptr %85, align 8
  %87 = getelementptr { ptr, ptr }, ptr %86, i32 0, i32 0
  %88 = load ptr, ptr %87, align 8
  %89 = call { ptr } %88(ptr %80)
  store { ptr } %89, ptr %39, align 8
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = load ptr, ptr %6, align 8
  %93 = call ptr @llvm.invariant.start.p0(i64 280, ptr %92)
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %95 = load i32, ptr %94, align 4
  %96 = getelementptr ptr, ptr %92, i32 %95
  %97 = getelementptr ptr, ptr %96, i32 1
  %98 = load ptr, ptr %97, align 8
  %99 = getelementptr { ptr, ptr }, ptr %98, i32 0, i32 0
  %100 = load ptr, ptr %99, align 8
  %101 = call i32 %100(ptr %91)
  store i32 %101, ptr %40, align 4
  %102 = load ptr, ptr %39, align 8
  %103 = load i32, ptr %40, align 4
  %104 = getelementptr i8, ptr null, i32 %103
  %105 = ptrtoint ptr %104 to i64
  %106 = getelementptr i8, ptr %102, i64 %105
  %107 = load i8, ptr %106, align 1
  store i8 %107, ptr %41, align 1
  store i64 ptrtoint (ptr @i8_typ to i64), ptr %43, align 4
  %108 = load i64, ptr %43, align 4
  store i64 %108, ptr %42, align 4
  %109 = load ptr, ptr %42, align 8
  %110 = insertvalue { ptr, i8 } undef, ptr %109, 0
  %111 = load i8, ptr %41, align 1
  %112 = insertvalue { ptr, i8 } %110, i8 %111, 1
  store { ptr, i8 } %112, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i8 }, ptr %.reg2mem1, align 8
  store { ptr, i8 } %.reload2, ptr %.reg2mem5, align 8
  br label %113

113:                                              ; preds = %51, %44
  %.reload6 = load { ptr, i8 }, ptr %.reg2mem5, align 8
  store { ptr, i8 } %.reload6, ptr %.reg2mem, align 8
  br label %114

114:                                              ; preds = %113
  %.reload = load { ptr, i8 }, ptr %.reg2mem, align 8
  ret { ptr, i8 } %.reload
}

define { ptr, ptr, ptr, i32 } @String_copy_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i1, align 1
  %.reg2mem6 = alloca i32, align 4
  %.reg2mem11 = alloca ptr, align 8
  %.reg2mem13 = alloca ptr, align 8
  %.reg2mem15 = alloca i32, align 4
  %.reg2mem17 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @String)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 280, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 1
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call i32 %29(ptr %20)
  %31 = getelementptr i8, ptr null, i32 %30
  %32 = ptrtoint ptr %31 to i64
  %33 = alloca ptr, align 8
  %34 = call ptr @bump_malloc(i64 %32)
  store ptr %34, ptr %33, align 8
  %35 = alloca { ptr }, align 8
  %36 = getelementptr { ptr }, ptr %33, i32 0, i32 0
  %37 = getelementptr { ptr }, ptr %35, i32 0, i32 0
  %38 = load ptr, ptr %36, align 8
  store ptr %38, ptr %37, align 8
  %39 = call ptr @llvm.invariant.start.p0(i64 16, ptr %35)
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  store ptr %40, ptr %.reg2mem13, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  store ptr %41, ptr %.reg2mem11, align 8
  store i32 0, ptr %.reg2mem17, align 4
  %42 = alloca i32, align 4
  %43 = alloca i1, align 1
  %44 = alloca ptr, align 8
  %45 = alloca i32, align 4
  %46 = alloca i32, align 4
  %47 = alloca i32, align 4
  %48 = alloca i32, align 4
  %49 = alloca { ptr, ptr, ptr, i32 }, align 8
  %50 = alloca i32, align 4
  %51 = alloca i32, align 4
  %52 = alloca [3 x ptr], align 8
  %53 = alloca { ptr, ptr, ptr }, align 8
  %54 = alloca { ptr, ptr, ptr, i32 }, align 8
  %55 = alloca { ptr, ptr, ptr, i32 }, align 8
  %56 = alloca { ptr, ptr, ptr, i32 }, align 8
  br label %57

57:                                               ; preds = %._crit_edge, %3
  %.reload18 = load i32, ptr %.reg2mem17, align 4
  store i32 %.reload18, ptr %.reg2mem6, align 4
  %.reload14 = load ptr, ptr %.reg2mem13, align 8
  %58 = load ptr, ptr %.reload14, align 8
  %59 = load ptr, ptr %6, align 8
  %60 = call ptr @llvm.invariant.start.p0(i64 280, ptr %59)
  %.reload12 = load ptr, ptr %.reg2mem11, align 8
  %61 = load i32, ptr %.reload12, align 4
  %62 = getelementptr ptr, ptr %59, i32 %61
  %63 = getelementptr ptr, ptr %62, i32 1
  %64 = load ptr, ptr %63, align 8
  %65 = getelementptr { ptr, ptr }, ptr %64, i32 0, i32 0
  %66 = load ptr, ptr %65, align 8
  %67 = call i32 %66(ptr %58)
  store i32 %67, ptr %42, align 4
  %68 = load i32, ptr %42, align 4
  %.reload10 = load i32, ptr %.reg2mem6, align 4
  %69 = icmp slt i32 %.reload10, %68
  store i1 %69, ptr %43, align 1
  %70 = load i1, ptr %43, align 1
  store i1 %70, ptr %.reg2mem3, align 1
  %.reload5 = load i1, ptr %.reg2mem3, align 1
  br i1 %.reload5, label %71, label %95

71:                                               ; preds = %57
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %73 = load ptr, ptr %72, align 8
  %74 = load ptr, ptr %6, align 8
  %75 = call ptr @llvm.invariant.start.p0(i64 280, ptr %74)
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %77 = load i32, ptr %76, align 4
  %78 = getelementptr ptr, ptr %74, i32 %77
  %79 = load ptr, ptr %78, align 8
  %80 = getelementptr { ptr, ptr }, ptr %79, i32 0, i32 0
  %81 = load ptr, ptr %80, align 8
  %82 = call { ptr } %81(ptr %73)
  store { ptr } %82, ptr %44, align 8
  %83 = load ptr, ptr %44, align 8
  %.reload9 = load i32, ptr %.reg2mem6, align 4
  %84 = getelementptr i8, ptr null, i32 %.reload9
  %85 = ptrtoint ptr %84 to i64
  %86 = getelementptr i8, ptr %83, i64 %85
  %87 = load ptr, ptr %35, align 8
  %.reload8 = load i32, ptr %.reg2mem6, align 4
  %88 = getelementptr i8, ptr null, i32 %.reload8
  %89 = ptrtoint ptr %88 to i64
  %90 = getelementptr i8, ptr %87, i64 %89
  %91 = load i8, ptr %86, align 1
  store i8 %91, ptr %90, align 1
  store i32 1, ptr %45, align 4
  %92 = load i32, ptr %45, align 4
  %.reload7 = load i32, ptr %.reg2mem6, align 4
  %93 = add i32 %.reload7, %92
  store i32 %93, ptr %46, align 4
  %94 = load i32, ptr %46, align 4
  store i32 %94, ptr %.reg2mem1, align 4
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem15, align 4
  br label %96

95:                                               ; preds = %57
  store i32 poison, ptr %.reg2mem15, align 4
  br label %96

96:                                               ; preds = %95, %71
  %.reload16 = load i32, ptr %.reg2mem15, align 4
  store i32 %.reload16, ptr %.reg2mem, align 4
  br label %97

97:                                               ; preds = %96
  %.reload4 = load i1, ptr %.reg2mem3, align 1
  br i1 %.reload4, label %._crit_edge, label %98

._crit_edge:                                      ; preds = %97
  %.reload = load i32, ptr %.reg2mem, align 4
  store i32 %.reload, ptr %.reg2mem17, align 4
  br label %57

98:                                               ; preds = %97
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %100 = load ptr, ptr %99, align 8
  %101 = load ptr, ptr %6, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 280, ptr %101)
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %104 = load i32, ptr %103, align 4
  %105 = getelementptr ptr, ptr %101, i32 %104
  %106 = getelementptr ptr, ptr %105, i32 1
  %107 = load ptr, ptr %106, align 8
  %108 = getelementptr { ptr, ptr }, ptr %107, i32 0, i32 0
  %109 = load ptr, ptr %108, align 8
  %110 = call i32 %109(ptr %100)
  store i32 %110, ptr %47, align 4
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %112 = load ptr, ptr %111, align 8
  %113 = load ptr, ptr %6, align 8
  %114 = call ptr @llvm.invariant.start.p0(i64 280, ptr %113)
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %116 = load i32, ptr %115, align 4
  %117 = getelementptr ptr, ptr %113, i32 %116
  %118 = getelementptr ptr, ptr %117, i32 1
  %119 = load ptr, ptr %118, align 8
  %120 = getelementptr { ptr, ptr }, ptr %119, i32 0, i32 0
  %121 = load ptr, ptr %120, align 8
  %122 = call i32 %121(ptr %112)
  store i32 %122, ptr %48, align 4
  %123 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 1
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 3
  store ptr @String, ptr %49, align 8
  store ptr %123, ptr %124, align 8
  store i32 7, ptr %125, align 4
  %126 = call ptr @llvm.invariant.start.p0(i64 16, ptr %49)
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %128 = load ptr, ptr %127, align 8
  %129 = load ptr, ptr %6, align 8
  %130 = call ptr @llvm.invariant.start.p0(i64 280, ptr %129)
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %132 = load i32, ptr %131, align 4
  %133 = getelementptr ptr, ptr %129, i32 %132
  %134 = getelementptr ptr, ptr %133, i32 1
  %135 = load ptr, ptr %134, align 8
  %136 = getelementptr { ptr, ptr }, ptr %135, i32 0, i32 0
  %137 = load ptr, ptr %136, align 8
  %138 = call i32 %137(ptr %128)
  store i32 %138, ptr %50, align 4
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %140 = load ptr, ptr %139, align 8
  %141 = load ptr, ptr %6, align 8
  %142 = call ptr @llvm.invariant.start.p0(i64 280, ptr %141)
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %144 = load i32, ptr %143, align 4
  %145 = getelementptr ptr, ptr %141, i32 %144
  %146 = getelementptr ptr, ptr %145, i32 1
  %147 = load ptr, ptr %146, align 8
  %148 = getelementptr { ptr, ptr }, ptr %147, i32 0, i32 0
  %149 = load ptr, ptr %148, align 8
  %150 = call i32 %149(ptr %140)
  store i32 %150, ptr %51, align 4
  %151 = getelementptr { ptr }, ptr %35, i32 0, i32 0
  %152 = load ptr, ptr %151, align 8
  %153 = insertvalue { ptr } undef, ptr %152, 0
  %154 = load i32, ptr %50, align 4
  %155 = load i32, ptr %51, align 4
  %156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 0
  %157 = load ptr, ptr %156, align 8
  %158 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %157, 0
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 1
  %160 = load ptr, ptr %159, align 8
  %161 = insertvalue { ptr, ptr, ptr, i32 } %158, ptr %160, 1
  %162 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 2
  %163 = load ptr, ptr %162, align 8
  %164 = insertvalue { ptr, ptr, ptr, i32 } %161, ptr %163, 2
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 3
  %166 = load i32, ptr %165, align 4
  %167 = insertvalue { ptr, ptr, ptr, i32 } %164, i32 %166, 3
  %168 = getelementptr [3 x ptr], ptr %52, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %168, align 8
  %169 = getelementptr [3 x ptr], ptr %52, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %169, align 8
  %170 = getelementptr [3 x ptr], ptr %52, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %170, align 8
  %171 = call ptr @llvm.invariant.start.p0(i64 9, ptr %52)
  %172 = call ptr @llvm.invariant.start.p0(i64 280, ptr %157)
  %173 = getelementptr ptr, ptr %157, i32 %166
  %174 = getelementptr ptr, ptr %173, i32 4
  %175 = load ptr, ptr %174, align 8
  %176 = getelementptr { ptr, ptr, ptr }, ptr %53, i32 0, i32 0
  store ptr @buffer_typ, ptr %176, align 8
  %177 = getelementptr { ptr, ptr, ptr }, ptr %53, i32 0, i32 1
  store ptr @i32_typ, ptr %177, align 8
  %178 = getelementptr { ptr, ptr, ptr }, ptr %53, i32 0, i32 2
  store ptr @i32_typ, ptr %178, align 8
  %179 = call ptr %175({ ptr, ptr, ptr, i32 } %167, ptr %53)
  call void %179({ ptr, ptr, ptr, i32 } %167, { ptr, ptr, ptr, i32 } %167, ptr %52, { ptr } %153, i32 %154, i32 %155)
  %180 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 0
  %181 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 0
  %182 = load ptr, ptr %180, align 8
  store ptr %182, ptr %181, align 8
  %183 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 1
  %184 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 1
  %185 = load ptr, ptr %183, align 8
  store ptr %185, ptr %184, align 8
  %186 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 2
  %187 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 2
  %188 = load ptr, ptr %186, align 8
  store ptr %188, ptr %187, align 8
  %189 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 3
  %190 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 3
  %191 = load i32, ptr %189, align 4
  store i32 %191, ptr %190, align 4
  call void @set_offset(ptr %54, ptr @String)
  %192 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 0
  %193 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 0
  %194 = load ptr, ptr %192, align 8
  store ptr %194, ptr %193, align 8
  %195 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 1
  %196 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  %197 = load ptr, ptr %195, align 8
  store ptr %197, ptr %196, align 8
  %198 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 2
  %199 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 2
  %200 = load ptr, ptr %198, align 8
  store ptr %200, ptr %199, align 8
  %201 = getelementptr { ptr, ptr, ptr, i32 }, ptr %54, i32 0, i32 3
  %202 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  %203 = load i32, ptr %201, align 4
  store i32 %203, ptr %202, align 4
  %204 = call ptr @llvm.invariant.start.p0(i64 16, ptr %55)
  %205 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 0
  %206 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 0
  %207 = load ptr, ptr %205, align 8
  store ptr %207, ptr %206, align 8
  %208 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  %209 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 1
  %210 = load ptr, ptr %208, align 8
  store ptr %210, ptr %209, align 8
  %211 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 2
  %212 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 2
  %213 = load ptr, ptr %211, align 8
  store ptr %213, ptr %212, align 8
  %214 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  %215 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 3
  %216 = load i32, ptr %214, align 4
  store i32 %216, ptr %215, align 4
  call void @set_offset(ptr %56, ptr @String)
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 0
  %218 = load ptr, ptr %217, align 8
  %219 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %218, 0
  %220 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 1
  %221 = load ptr, ptr %220, align 8
  %222 = insertvalue { ptr, ptr, ptr, i32 } %219, ptr %221, 1
  %223 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 2
  %224 = load ptr, ptr %223, align 8
  %225 = insertvalue { ptr, ptr, ptr, i32 } %222, ptr %224, 2
  %226 = getelementptr { ptr, ptr, ptr, i32 }, ptr %56, i32 0, i32 3
  %227 = load i32, ptr %226, align 4
  %228 = insertvalue { ptr, ptr, ptr, i32 } %225, i32 %227, 3
  ret { ptr, ptr, ptr, i32 } %228
}

define { ptr } @String_c_string_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i1, align 1
  %.reg2mem6 = alloca i32, align 4
  %.reg2mem11 = alloca ptr, align 8
  %.reg2mem13 = alloca ptr, align 8
  %.reg2mem15 = alloca i32, align 4
  %.reg2mem17 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @String)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 280, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 1
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call i32 %29(ptr %20)
  %31 = add i32 %30, 1
  %32 = getelementptr i8, ptr null, i32 %31
  %33 = ptrtoint ptr %32 to i64
  %34 = alloca ptr, align 8
  %35 = call ptr @bump_malloc(i64 %33)
  store ptr %35, ptr %34, align 8
  %36 = alloca { ptr }, align 8
  %37 = getelementptr { ptr }, ptr %34, i32 0, i32 0
  %38 = getelementptr { ptr }, ptr %36, i32 0, i32 0
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = call ptr @llvm.invariant.start.p0(i64 16, ptr %36)
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  store ptr %41, ptr %.reg2mem13, align 8
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  store ptr %42, ptr %.reg2mem11, align 8
  store i32 0, ptr %.reg2mem17, align 4
  %43 = alloca i32, align 4
  %44 = alloca i1, align 1
  %45 = alloca ptr, align 8
  %46 = alloca i32, align 4
  %47 = alloca i32, align 4
  %48 = alloca i8, align 1
  %49 = alloca i32, align 4
  br label %50

50:                                               ; preds = %._crit_edge, %3
  %.reload18 = load i32, ptr %.reg2mem17, align 4
  store i32 %.reload18, ptr %.reg2mem6, align 4
  %.reload14 = load ptr, ptr %.reg2mem13, align 8
  %51 = load ptr, ptr %.reload14, align 8
  %52 = load ptr, ptr %6, align 8
  %53 = call ptr @llvm.invariant.start.p0(i64 280, ptr %52)
  %.reload12 = load ptr, ptr %.reg2mem11, align 8
  %54 = load i32, ptr %.reload12, align 4
  %55 = getelementptr ptr, ptr %52, i32 %54
  %56 = getelementptr ptr, ptr %55, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr { ptr, ptr }, ptr %57, i32 0, i32 0
  %59 = load ptr, ptr %58, align 8
  %60 = call i32 %59(ptr %51)
  store i32 %60, ptr %43, align 4
  %61 = load i32, ptr %43, align 4
  %.reload10 = load i32, ptr %.reg2mem6, align 4
  %62 = icmp slt i32 %.reload10, %61
  store i1 %62, ptr %44, align 1
  %63 = load i1, ptr %44, align 1
  store i1 %63, ptr %.reg2mem3, align 1
  %.reload5 = load i1, ptr %.reg2mem3, align 1
  br i1 %.reload5, label %64, label %88

64:                                               ; preds = %50
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %66 = load ptr, ptr %65, align 8
  %67 = load ptr, ptr %6, align 8
  %68 = call ptr @llvm.invariant.start.p0(i64 280, ptr %67)
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %70 = load i32, ptr %69, align 4
  %71 = getelementptr ptr, ptr %67, i32 %70
  %72 = load ptr, ptr %71, align 8
  %73 = getelementptr { ptr, ptr }, ptr %72, i32 0, i32 0
  %74 = load ptr, ptr %73, align 8
  %75 = call { ptr } %74(ptr %66)
  store { ptr } %75, ptr %45, align 8
  %76 = load ptr, ptr %45, align 8
  %.reload9 = load i32, ptr %.reg2mem6, align 4
  %77 = getelementptr i8, ptr null, i32 %.reload9
  %78 = ptrtoint ptr %77 to i64
  %79 = getelementptr i8, ptr %76, i64 %78
  %80 = load ptr, ptr %36, align 8
  %.reload8 = load i32, ptr %.reg2mem6, align 4
  %81 = getelementptr i8, ptr null, i32 %.reload8
  %82 = ptrtoint ptr %81 to i64
  %83 = getelementptr i8, ptr %80, i64 %82
  %84 = load i8, ptr %79, align 1
  store i8 %84, ptr %83, align 1
  store i32 1, ptr %46, align 4
  %85 = load i32, ptr %46, align 4
  %.reload7 = load i32, ptr %.reg2mem6, align 4
  %86 = add i32 %.reload7, %85
  store i32 %86, ptr %47, align 4
  %87 = load i32, ptr %47, align 4
  store i32 %87, ptr %.reg2mem1, align 4
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem15, align 4
  br label %89

88:                                               ; preds = %50
  store i32 poison, ptr %.reg2mem15, align 4
  br label %89

89:                                               ; preds = %88, %64
  %.reload16 = load i32, ptr %.reg2mem15, align 4
  store i32 %.reload16, ptr %.reg2mem, align 4
  br label %90

90:                                               ; preds = %89
  %.reload4 = load i1, ptr %.reg2mem3, align 1
  br i1 %.reload4, label %._crit_edge, label %91

._crit_edge:                                      ; preds = %90
  %.reload = load i32, ptr %.reg2mem, align 4
  store i32 %.reload, ptr %.reg2mem17, align 4
  br label %50

91:                                               ; preds = %90
  store i8 0, ptr %48, align 1
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %93 = load ptr, ptr %92, align 8
  %94 = load ptr, ptr %6, align 8
  %95 = call ptr @llvm.invariant.start.p0(i64 280, ptr %94)
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %97 = load i32, ptr %96, align 4
  %98 = getelementptr ptr, ptr %94, i32 %97
  %99 = getelementptr ptr, ptr %98, i32 1
  %100 = load ptr, ptr %99, align 8
  %101 = getelementptr { ptr, ptr }, ptr %100, i32 0, i32 0
  %102 = load ptr, ptr %101, align 8
  %103 = call i32 %102(ptr %93)
  store i32 %103, ptr %49, align 4
  %104 = load ptr, ptr %36, align 8
  %105 = load i32, ptr %49, align 4
  %106 = getelementptr i8, ptr null, i32 %105
  %107 = ptrtoint ptr %106 to i64
  %108 = getelementptr i8, ptr %104, i64 %107
  %109 = load i8, ptr %48, align 1
  store i8 %109, ptr %108, align 1
  %110 = getelementptr { ptr }, ptr %36, i32 0, i32 0
  %111 = load ptr, ptr %110, align 8
  %112 = insertvalue { ptr } undef, ptr %111, 0
  ret { ptr } %112
}

define { ptr, ptr, ptr, i32 } @String_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @String)
  %19 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr, ptr, ptr, i32 }, i32 }, ptr null, i32 1) to i64))
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  store ptr @StringIterator, ptr %20, align 8
  store ptr %19, ptr %21, align 8
  store i32 7, ptr %22, align 4
  %23 = call ptr @llvm.invariant.start.p0(i64 16, ptr %20)
  %24 = alloca { ptr, ptr, ptr, i32 }, align 8
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %27 = load ptr, ptr %25, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %30 = load ptr, ptr %28, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %33 = load ptr, ptr %31, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %36 = load i32, ptr %34, align 4
  store i32 %36, ptr %35, align 4
  call void @set_offset(ptr %24, ptr @String)
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 0
  %38 = load ptr, ptr %37, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %38, 0
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 1
  %41 = load ptr, ptr %40, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } %39, ptr %41, 1
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 2
  %44 = load ptr, ptr %43, align 8
  %45 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %44, 2
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %24, i32 0, i32 3
  %47 = load i32, ptr %46, align 4
  %48 = insertvalue { ptr, ptr, ptr, i32 } %45, i32 %47, 3
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %50 = load ptr, ptr %49, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %50, 0
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %53 = load ptr, ptr %52, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %51, ptr %53, 1
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %56 = load ptr, ptr %55, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %56, 2
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %59 = load i32, ptr %58, align 4
  %60 = insertvalue { ptr, ptr, ptr, i32 } %57, i32 %59, 3
  %61 = alloca [1 x ptr], align 8
  %62 = getelementptr [1 x ptr], ptr %61, i32 0, i32 0
  store ptr @_parameterization_String, ptr %62, align 8
  %63 = call ptr @llvm.invariant.start.p0(i64 1, ptr %61)
  %64 = call ptr @llvm.invariant.start.p0(i64 48, ptr %50)
  %65 = getelementptr ptr, ptr %50, i32 %59
  %66 = getelementptr ptr, ptr %65, i32 2
  %67 = load ptr, ptr %66, align 8
  %68 = alloca { ptr }, align 8
  %69 = getelementptr { ptr }, ptr %68, i32 0, i32 0
  store ptr %38, ptr %69, align 8
  %70 = call ptr %67({ ptr, ptr, ptr, i32 } %60, ptr %68)
  call void %70({ ptr, ptr, ptr, i32 } %60, { ptr, ptr, ptr, i32 } %60, ptr %61, { ptr, ptr, ptr, i32 } %48)
  %71 = alloca { ptr, ptr, ptr, i32 }, align 8
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 0
  %74 = load ptr, ptr %72, align 8
  store ptr %74, ptr %73, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 1
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 2
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 3
  %83 = load i32, ptr %81, align 4
  store i32 %83, ptr %82, align 4
  call void @set_offset(ptr %71, ptr @Iterator)
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 0
  %85 = load ptr, ptr %84, align 8
  %86 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %85, 0
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 1
  %88 = load ptr, ptr %87, align 8
  %89 = insertvalue { ptr, ptr, ptr, i32 } %86, ptr %88, 1
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 2
  %91 = load ptr, ptr %90, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } %89, ptr %91, 2
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 3
  %94 = load i32, ptr %93, align 4
  %95 = insertvalue { ptr, ptr, ptr, i32 } %92, i32 %94, 3
  ret { ptr, ptr, ptr, i32 } %95
}

define { ptr, ptr, ptr, i32 } @String_repr_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @String)
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %22 = load ptr, ptr %20, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %31 = load i32, ptr %29, align 4
  store i32 %31, ptr %30, align 4
  call void @set_offset(ptr %19, ptr @String)
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 0
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %33, 0
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %36, 1
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 2
  %39 = load ptr, ptr %38, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %39, 2
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %19, i32 0, i32 3
  %42 = load i32, ptr %41, align 4
  %43 = insertvalue { ptr, ptr, ptr, i32 } %40, i32 %42, 3
  ret { ptr, ptr, ptr, i32 } %43
}

define ptr @StringIterator_B_init_strString({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [6 x ptr], ptr %15, i32 0, i32 4
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @StringIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [6 x ptr], ptr %4, i32 0, i32 5
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @StringIterator_init_strString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @StringIterator)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 16, ptr %20)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %34 = load i32, ptr %32, align 4
  store i32 %34, ptr %33, align 4
  call void @set_offset(ptr %22, ptr @String)
  %35 = alloca { ptr, ptr, ptr, i32 }, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %38 = load ptr, ptr %36, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %41 = load ptr, ptr %39, align 8
  store ptr %41, ptr %40, align 8
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %44 = load ptr, ptr %42, align 8
  store ptr %44, ptr %43, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %47 = load i32, ptr %45, align 4
  store i32 %47, ptr %46, align 4
  call void @set_offset(ptr %35, ptr @String)
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = load ptr, ptr %7, align 8
  %51 = call ptr @llvm.invariant.start.p0(i64 48, ptr %50)
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %53 = load i32, ptr %52, align 4
  %54 = getelementptr ptr, ptr %50, i32 %53
  %55 = load ptr, ptr %54, align 8
  %56 = getelementptr { ptr, ptr }, ptr %55, i32 0, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %59 = load ptr, ptr %58, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %59, 0
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %62 = load ptr, ptr %61, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr %62, 1
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %65 = load ptr, ptr %64, align 8
  %66 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %65, 2
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %68 = load i32, ptr %67, align 4
  %69 = insertvalue { ptr, ptr, ptr, i32 } %66, i32 %68, 3
  call void %57(ptr %49, { ptr, ptr, ptr, i32 } %69)
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %71 = load ptr, ptr %70, align 8
  %72 = load ptr, ptr %7, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 48, ptr %72)
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %75 = load i32, ptr %74, align 4
  %76 = getelementptr ptr, ptr %72, i32 %75
  %77 = getelementptr ptr, ptr %76, i32 1
  %78 = load ptr, ptr %77, align 8
  %79 = getelementptr { ptr, ptr }, ptr %78, i32 0, i32 1
  %80 = load ptr, ptr %79, align 8
  call void %80(ptr %71, i32 0)
  ret void
}

define { ptr, i160 } @StringIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i160 }, align 8
  %.reg2mem1 = alloca { ptr, i160 }, align 8
  %.reg2mem3 = alloca { ptr, i160 }, align 8
  %.reg2mem5 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @StringIterator)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 48, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 1
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call i32 %29(ptr %20)
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %32 = load ptr, ptr %31, align 8
  %33 = load ptr, ptr %6, align 8
  %34 = call ptr @llvm.invariant.start.p0(i64 48, ptr %33)
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %36 = load i32, ptr %35, align 4
  %37 = getelementptr ptr, ptr %33, i32 %36
  %38 = load ptr, ptr %37, align 8
  %39 = getelementptr { ptr, ptr }, ptr %38, i32 0, i32 0
  %40 = load ptr, ptr %39, align 8
  %41 = call { ptr, ptr, ptr, i32 } %40(ptr %32)
  %42 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %41, ptr %42, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 16, ptr %42)
  call void @assume_offset(ptr %42, ptr @String)
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 0
  %45 = load ptr, ptr %44, align 8
  %46 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %45, 0
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 1
  %48 = load ptr, ptr %47, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } %46, ptr %48, 1
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 2
  %51 = load ptr, ptr %50, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } %49, ptr %51, 2
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = insertvalue { ptr, ptr, ptr, i32 } %52, i32 %54, 3
  %56 = alloca [0 x ptr], align 8
  %57 = call ptr @llvm.invariant.start.p0(i64 0, ptr %56)
  %58 = call ptr @llvm.invariant.start.p0(i64 280, ptr %45)
  %59 = getelementptr ptr, ptr %45, i32 %54
  %60 = getelementptr ptr, ptr %59, i32 5
  %61 = load ptr, ptr %60, align 8
  %62 = alloca {}, align 8
  %63 = call ptr %61({ ptr, ptr, ptr, i32 } %55, ptr %62)
  %64 = call i32 %63({ ptr, ptr, ptr, i32 } %55, { ptr, ptr, ptr, i32 } %55, ptr %56)
  %65 = icmp slt i32 %30, %64
  %66 = alloca i32, align 4
  %67 = alloca i32, align 4
  %68 = alloca i32, align 4
  %69 = alloca { ptr, ptr, ptr, i32 }, align 8
  %70 = alloca [0 x ptr], align 8
  %71 = alloca {}, align 8
  %72 = alloca ptr, align 8
  %73 = alloca i32, align 4
  %74 = alloca i32, align 4
  %75 = alloca i32, align 4
  %76 = alloca { ptr, ptr, ptr, i32 }, align 8
  %77 = alloca { ptr, ptr, ptr, i32 }, align 8
  %78 = alloca [0 x ptr], align 8
  %79 = alloca {}, align 8
  %80 = alloca ptr, align 8
  %81 = alloca i32, align 4
  %82 = alloca i32, align 4
  %83 = alloca i32, align 4
  %84 = alloca [1 x ptr], align 8
  %85 = alloca { ptr }, align 8
  %86 = alloca [0 x i8], align 1
  %87 = alloca i160, align 8
  %88 = alloca ptr, align 8
  %89 = alloca i64, align 8
  br i1 %65, label %90, label %246

90:                                               ; preds = %3
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %92 = load ptr, ptr %91, align 8
  %93 = load ptr, ptr %6, align 8
  %94 = call ptr @llvm.invariant.start.p0(i64 48, ptr %93)
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %96 = load i32, ptr %95, align 4
  %97 = getelementptr ptr, ptr %93, i32 %96
  %98 = getelementptr ptr, ptr %97, i32 1
  %99 = load ptr, ptr %98, align 8
  %100 = getelementptr { ptr, ptr }, ptr %99, i32 0, i32 0
  %101 = load ptr, ptr %100, align 8
  %102 = call i32 %101(ptr %92)
  store i32 %102, ptr %66, align 4
  store i32 1, ptr %67, align 4
  %103 = load i32, ptr %66, align 4
  %104 = load i32, ptr %67, align 4
  %105 = add i32 %103, %104
  store i32 %105, ptr %68, align 4
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %107 = load ptr, ptr %106, align 8
  %108 = load ptr, ptr %6, align 8
  %109 = call ptr @llvm.invariant.start.p0(i64 48, ptr %108)
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %111 = load i32, ptr %110, align 4
  %112 = getelementptr ptr, ptr %108, i32 %111
  %113 = getelementptr ptr, ptr %112, i32 1
  %114 = load ptr, ptr %113, align 8
  %115 = getelementptr { ptr, ptr }, ptr %114, i32 0, i32 1
  %116 = load ptr, ptr %115, align 8
  %117 = load i32, ptr %68, align 4
  call void %116(ptr %107, i32 %117)
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %119 = load ptr, ptr %118, align 8
  %120 = load ptr, ptr %6, align 8
  %121 = call ptr @llvm.invariant.start.p0(i64 48, ptr %120)
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %123 = load i32, ptr %122, align 4
  %124 = getelementptr ptr, ptr %120, i32 %123
  %125 = load ptr, ptr %124, align 8
  %126 = getelementptr { ptr, ptr }, ptr %125, i32 0, i32 0
  %127 = load ptr, ptr %126, align 8
  %128 = call { ptr, ptr, ptr, i32 } %127(ptr %119)
  store { ptr, ptr, ptr, i32 } %128, ptr %69, align 8
  %129 = call ptr @llvm.invariant.start.p0(i64 16, ptr %69)
  call void @assume_offset(ptr %69, ptr @String)
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %69, i32 0, i32 0
  %131 = load ptr, ptr %130, align 8
  %132 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %131, 0
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %69, i32 0, i32 1
  %134 = load ptr, ptr %133, align 8
  %135 = insertvalue { ptr, ptr, ptr, i32 } %132, ptr %134, 1
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %69, i32 0, i32 2
  %137 = load ptr, ptr %136, align 8
  %138 = insertvalue { ptr, ptr, ptr, i32 } %135, ptr %137, 2
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %69, i32 0, i32 3
  %140 = load i32, ptr %139, align 4
  %141 = insertvalue { ptr, ptr, ptr, i32 } %138, i32 %140, 3
  %142 = call ptr @llvm.invariant.start.p0(i64 0, ptr %70)
  %143 = call ptr @llvm.invariant.start.p0(i64 280, ptr %131)
  %144 = getelementptr ptr, ptr %131, i32 %140
  %145 = getelementptr ptr, ptr %144, i32 7
  %146 = load ptr, ptr %145, align 8
  %147 = call ptr %146({ ptr, ptr, ptr, i32 } %141, ptr %71)
  %148 = call { ptr } %147({ ptr, ptr, ptr, i32 } %141, { ptr, ptr, ptr, i32 } %141, ptr %70)
  store { ptr } %148, ptr %72, align 8
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %150 = load ptr, ptr %149, align 8
  %151 = load ptr, ptr %6, align 8
  %152 = call ptr @llvm.invariant.start.p0(i64 48, ptr %151)
  %153 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %154 = load i32, ptr %153, align 4
  %155 = getelementptr ptr, ptr %151, i32 %154
  %156 = getelementptr ptr, ptr %155, i32 1
  %157 = load ptr, ptr %156, align 8
  %158 = getelementptr { ptr, ptr }, ptr %157, i32 0, i32 0
  %159 = load ptr, ptr %158, align 8
  %160 = call i32 %159(ptr %150)
  store i32 %160, ptr %73, align 4
  store i32 1, ptr %74, align 4
  %161 = load i32, ptr %73, align 4
  %162 = load i32, ptr %74, align 4
  %163 = sub i32 %161, %162
  store i32 %163, ptr %75, align 4
  %164 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ i8 }, ptr null, i32 1) to i64))
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 1
  %166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 3
  store ptr @Character, ptr %76, align 8
  store ptr %164, ptr %165, align 8
  store i32 7, ptr %166, align 4
  %167 = call ptr @llvm.invariant.start.p0(i64 16, ptr %76)
  %168 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %169 = load ptr, ptr %168, align 8
  %170 = load ptr, ptr %6, align 8
  %171 = call ptr @llvm.invariant.start.p0(i64 48, ptr %170)
  %172 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %173 = load i32, ptr %172, align 4
  %174 = getelementptr ptr, ptr %170, i32 %173
  %175 = load ptr, ptr %174, align 8
  %176 = getelementptr { ptr, ptr }, ptr %175, i32 0, i32 0
  %177 = load ptr, ptr %176, align 8
  %178 = call { ptr, ptr, ptr, i32 } %177(ptr %169)
  store { ptr, ptr, ptr, i32 } %178, ptr %77, align 8
  %179 = call ptr @llvm.invariant.start.p0(i64 16, ptr %77)
  call void @assume_offset(ptr %77, ptr @String)
  %180 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 0
  %181 = load ptr, ptr %180, align 8
  %182 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %181, 0
  %183 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 1
  %184 = load ptr, ptr %183, align 8
  %185 = insertvalue { ptr, ptr, ptr, i32 } %182, ptr %184, 1
  %186 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 2
  %187 = load ptr, ptr %186, align 8
  %188 = insertvalue { ptr, ptr, ptr, i32 } %185, ptr %187, 2
  %189 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 3
  %190 = load i32, ptr %189, align 4
  %191 = insertvalue { ptr, ptr, ptr, i32 } %188, i32 %190, 3
  %192 = call ptr @llvm.invariant.start.p0(i64 0, ptr %78)
  %193 = call ptr @llvm.invariant.start.p0(i64 280, ptr %181)
  %194 = getelementptr ptr, ptr %181, i32 %190
  %195 = getelementptr ptr, ptr %194, i32 7
  %196 = load ptr, ptr %195, align 8
  %197 = call ptr %196({ ptr, ptr, ptr, i32 } %191, ptr %79)
  %198 = call { ptr } %197({ ptr, ptr, ptr, i32 } %191, { ptr, ptr, ptr, i32 } %191, ptr %78)
  store { ptr } %198, ptr %80, align 8
  %199 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %200 = load ptr, ptr %199, align 8
  %201 = load ptr, ptr %6, align 8
  %202 = call ptr @llvm.invariant.start.p0(i64 48, ptr %201)
  %203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %204 = load i32, ptr %203, align 4
  %205 = getelementptr ptr, ptr %201, i32 %204
  %206 = getelementptr ptr, ptr %205, i32 1
  %207 = load ptr, ptr %206, align 8
  %208 = getelementptr { ptr, ptr }, ptr %207, i32 0, i32 0
  %209 = load ptr, ptr %208, align 8
  %210 = call i32 %209(ptr %200)
  store i32 %210, ptr %81, align 4
  store i32 1, ptr %82, align 4
  %211 = load i32, ptr %81, align 4
  %212 = load i32, ptr %82, align 4
  %213 = sub i32 %211, %212
  store i32 %213, ptr %83, align 4
  %214 = load ptr, ptr %80, align 8
  %215 = load i32, ptr %83, align 4
  %216 = getelementptr i8, ptr null, i32 %215
  %217 = ptrtoint ptr %216 to i64
  %218 = getelementptr i8, ptr %214, i64 %217
  %219 = load i8, ptr %218, align 1
  %220 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 0
  %221 = load ptr, ptr %220, align 8
  %222 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %221, 0
  %223 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 1
  %224 = load ptr, ptr %223, align 8
  %225 = insertvalue { ptr, ptr, ptr, i32 } %222, ptr %224, 1
  %226 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 2
  %227 = load ptr, ptr %226, align 8
  %228 = insertvalue { ptr, ptr, ptr, i32 } %225, ptr %227, 2
  %229 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 3
  %230 = load i32, ptr %229, align 4
  %231 = insertvalue { ptr, ptr, ptr, i32 } %228, i32 %230, 3
  %232 = getelementptr [1 x ptr], ptr %84, i32 0, i32 0
  store ptr @_parameterization_Ptri8, ptr %232, align 8
  %233 = call ptr @llvm.invariant.start.p0(i64 1, ptr %84)
  %234 = call ptr @llvm.invariant.start.p0(i64 40, ptr %221)
  %235 = getelementptr ptr, ptr %221, i32 %230
  %236 = getelementptr ptr, ptr %235, i32 2
  %237 = load ptr, ptr %236, align 8
  %238 = getelementptr { ptr }, ptr %85, i32 0, i32 0
  store ptr @i8_typ, ptr %238, align 8
  %239 = call ptr %237({ ptr, ptr, ptr, i32 } %231, ptr %85)
  call void %239({ ptr, ptr, ptr, i32 } %231, { ptr, ptr, ptr, i32 } %231, ptr %84, i8 %219)
  %240 = getelementptr { ptr, i160 }, ptr %76, i32 0, i32 0
  %241 = load ptr, ptr %240, align 8
  %242 = insertvalue { ptr, i160 } undef, ptr %241, 0
  %243 = getelementptr { ptr, i160 }, ptr %76, i32 0, i32 1
  %244 = load i160, ptr %243, align 4
  %245 = insertvalue { ptr, i160 } %242, i160 %244, 1
  store { ptr, i160 } %245, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i160 }, ptr %.reg2mem3, align 8
  store { ptr, i160 } %.reload4, ptr %.reg2mem5, align 8
  br label %253

246:                                              ; preds = %3
  %247 = load [0 x i8], ptr %86, align 1
  store [0 x i8] %247, ptr %87, align 1
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %89, align 4
  %248 = load i64, ptr %89, align 4
  store i64 %248, ptr %88, align 4
  %249 = load ptr, ptr %88, align 8
  %250 = insertvalue { ptr, i160 } undef, ptr %249, 0
  %251 = load i160, ptr %87, align 4
  %252 = insertvalue { ptr, i160 } %250, i160 %251, 1
  store { ptr, i160 } %252, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i160 }, ptr %.reg2mem1, align 8
  store { ptr, i160 } %.reload2, ptr %.reg2mem5, align 8
  br label %253

253:                                              ; preds = %246, %90
  %.reload6 = load { ptr, i160 }, ptr %.reg2mem5, align 8
  store { ptr, i160 } %.reload6, ptr %.reg2mem, align 8
  br label %254

254:                                              ; preds = %253
  %.reload = load { ptr, i160 }, ptr %.reg2mem, align 8
  ret { ptr, i160 } %.reload
}

define ptr @Character_B_byte_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [5 x ptr], ptr %4, i32 0, i32 3
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Character_B_init_bytePtri8({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 2582149688529881115, i64 ptrtoint (ptr @i8_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [5 x ptr], ptr %15, i32 0, i32 4
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define i8 @Character_byte_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Character)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 40, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 0
  %28 = load ptr, ptr %27, align 8
  %29 = call i8 %28(ptr %20)
  ret i8 %29
}

define void @Character_init_bytePtri8({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i8 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Character)
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %21 = load ptr, ptr %20, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 40, ptr %22)
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %25 = load i32, ptr %24, align 4
  %26 = getelementptr ptr, ptr %22, i32 %25
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 1
  %29 = load ptr, ptr %28, align 8
  call void %29(ptr %21, i8 %3)
  ret void
}

define i8 @Character_getter_byte(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { i8 }, ptr %0, i32 0, i32 0
  %3 = load i8, ptr %2, align 1
  ret i8 %3
}

define void @Character_setter_byte(ptr %0, i8 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { i8 }, ptr %0, i32 0, i32 0
  store i8 %1, ptr %3, align 1
  ret void
}

define i32 @StringIterator_getter_index(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, i32 }, ptr %0, i32 0, i32 1
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @StringIterator_setter_index(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { { ptr, ptr, ptr, i32 }, i32 }, ptr %0, i32 0, i32 1
  store i32 %1, ptr %3, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @StringIterator_getter_str(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, i32 }, ptr %0, i32 0, i32 0
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @StringIterator_setter_str(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { { ptr, ptr, ptr, i32 }, i32 }, ptr %0, i32 0, i32 0
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  ret void
}

define i32 @String_getter_capacity(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr }, i32, i32 }, ptr %0, i32 0, i32 2
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @String_setter_capacity(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { { ptr }, i32, i32 }, ptr %0, i32 0, i32 2
  store i32 %1, ptr %3, align 4
  ret void
}

define i32 @String_getter_length(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr }, i32, i32 }, ptr %0, i32 0, i32 1
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @String_setter_length(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { { ptr }, i32, i32 }, ptr %0, i32 0, i32 1
  store i32 %1, ptr %3, align 4
  ret void
}

define { ptr } @String_getter_bytes(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr }, i32, i32 }, ptr %0, i32 0, i32 0
  %3 = getelementptr { ptr }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr } undef, ptr %4, 0
  ret { ptr } %5
}

define void @String_setter_bytes(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { { ptr }, i32, i32 }, ptr %0, i32 0, i32 0
  %4 = alloca ptr, align 8
  store { ptr } %1, ptr %4, align 8
  %5 = getelementptr { ptr }, ptr %3, i32 0, i32 0
  %6 = load ptr, ptr %4, align 8
  store ptr %6, ptr %5, align 8
  ret void
}

define ptr @Exception_B_init_messageString({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [13 x ptr], ptr %15, i32 0, i32 8
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Exception_B_init_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [13 x ptr], ptr %4, i32 0, i32 9
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Exception_B_set_info_line_numberPtri32_file_nameString({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [13 x ptr], ptr %26, i32 0, i32 10
  %28 = getelementptr ptr, ptr %27, i32 7
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @Exception_B_report_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [13 x ptr], ptr %4, i32 0, i32 11
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Exception_B_print_message_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [13 x ptr], ptr %4, i32 0, i32 12
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @Exception_init_messageString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Exception)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 16, ptr %20)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %34 = load i32, ptr %32, align 4
  store i32 %34, ptr %33, align 4
  call void @set_offset(ptr %22, ptr @String)
  %35 = alloca { ptr, ptr, ptr, i32 }, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %38 = load ptr, ptr %36, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %41 = load ptr, ptr %39, align 8
  store ptr %41, ptr %40, align 8
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %44 = load ptr, ptr %42, align 8
  store ptr %44, ptr %43, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %47 = load i32, ptr %45, align 4
  store i32 %47, ptr %46, align 4
  call void @set_offset(ptr %35, ptr @String)
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %49 = load ptr, ptr %48, align 8
  %50 = load ptr, ptr %7, align 8
  %51 = call ptr @llvm.invariant.start.p0(i64 104, ptr %50)
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %53 = load i32, ptr %52, align 4
  %54 = getelementptr ptr, ptr %50, i32 %53
  %55 = getelementptr ptr, ptr %54, i32 2
  %56 = load ptr, ptr %55, align 8
  %57 = getelementptr { ptr, ptr }, ptr %56, i32 0, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 0
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 1
  %63 = load ptr, ptr %62, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %63, 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 2
  %66 = load ptr, ptr %65, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %66, 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %35, i32 0, i32 3
  %69 = load i32, ptr %68, align 4
  %70 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %69, 3
  call void %58(ptr %49, { ptr, ptr, ptr, i32 } %70)
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %72 = load ptr, ptr %71, align 8
  %73 = load ptr, ptr %7, align 8
  %74 = call ptr @llvm.invariant.start.p0(i64 104, ptr %73)
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %76 = load i32, ptr %75, align 4
  %77 = getelementptr ptr, ptr %73, i32 %76
  %78 = load ptr, ptr %77, align 8
  %79 = getelementptr { ptr, ptr }, ptr %78, i32 0, i32 1
  %80 = load ptr, ptr %79, align 8
  call void %80(ptr %72, i32 0)
  %81 = alloca ptr, align 8
  %82 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64))
  store ptr %82, ptr %81, align 8
  %83 = alloca { ptr }, align 8
  %84 = getelementptr { ptr }, ptr %81, i32 0, i32 0
  %85 = getelementptr { ptr }, ptr %83, i32 0, i32 0
  %86 = load ptr, ptr %84, align 8
  store ptr %86, ptr %85, align 8
  %87 = call ptr @llvm.invariant.start.p0(i64 16, ptr %83)
  %88 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %89 = alloca { ptr, ptr, ptr, i32 }, align 8
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %89, i32 0, i32 1
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %89, i32 0, i32 3
  store ptr @String, ptr %89, align 8
  store ptr %88, ptr %90, align 8
  store i32 7, ptr %91, align 4
  %92 = call ptr @llvm.invariant.start.p0(i64 16, ptr %89)
  %93 = getelementptr { ptr }, ptr %83, i32 0, i32 0
  %94 = load ptr, ptr %93, align 8
  %95 = insertvalue { ptr } undef, ptr %94, 0
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %89, i32 0, i32 0
  %97 = load ptr, ptr %96, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %97, 0
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %89, i32 0, i32 1
  %100 = load ptr, ptr %99, align 8
  %101 = insertvalue { ptr, ptr, ptr, i32 } %98, ptr %100, 1
  %102 = getelementptr { ptr, ptr, ptr, i32 }, ptr %89, i32 0, i32 2
  %103 = load ptr, ptr %102, align 8
  %104 = insertvalue { ptr, ptr, ptr, i32 } %101, ptr %103, 2
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %89, i32 0, i32 3
  %106 = load i32, ptr %105, align 4
  %107 = insertvalue { ptr, ptr, ptr, i32 } %104, i32 %106, 3
  %108 = alloca [3 x ptr], align 8
  %109 = getelementptr [3 x ptr], ptr %108, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %109, align 8
  %110 = getelementptr [3 x ptr], ptr %108, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %110, align 8
  %111 = getelementptr [3 x ptr], ptr %108, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %111, align 8
  %112 = call ptr @llvm.invariant.start.p0(i64 9, ptr %108)
  %113 = call ptr @llvm.invariant.start.p0(i64 280, ptr %97)
  %114 = getelementptr ptr, ptr %97, i32 %106
  %115 = getelementptr ptr, ptr %114, i32 4
  %116 = load ptr, ptr %115, align 8
  %117 = alloca { ptr, ptr, ptr }, align 8
  %118 = getelementptr { ptr, ptr, ptr }, ptr %117, i32 0, i32 0
  store ptr @buffer_typ, ptr %118, align 8
  %119 = getelementptr { ptr, ptr, ptr }, ptr %117, i32 0, i32 1
  store ptr @i32_typ, ptr %119, align 8
  %120 = getelementptr { ptr, ptr, ptr }, ptr %117, i32 0, i32 2
  store ptr @i32_typ, ptr %120, align 8
  %121 = call ptr %116({ ptr, ptr, ptr, i32 } %107, ptr %117)
  call void %121({ ptr, ptr, ptr, i32 } %107, { ptr, ptr, ptr, i32 } %107, ptr %108, { ptr } %95, i32 0, i32 1)
  %122 = alloca { ptr, ptr, ptr, i32 }, align 8
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %89, i32 0, i32 0
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %122, i32 0, i32 0
  %125 = load ptr, ptr %123, align 8
  store ptr %125, ptr %124, align 8
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %89, i32 0, i32 1
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %122, i32 0, i32 1
  %128 = load ptr, ptr %126, align 8
  store ptr %128, ptr %127, align 8
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %89, i32 0, i32 2
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %122, i32 0, i32 2
  %131 = load ptr, ptr %129, align 8
  store ptr %131, ptr %130, align 8
  %132 = getelementptr { ptr, ptr, ptr, i32 }, ptr %89, i32 0, i32 3
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %122, i32 0, i32 3
  %134 = load i32, ptr %132, align 4
  store i32 %134, ptr %133, align 4
  call void @set_offset(ptr %122, ptr @String)
  %135 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %136 = load ptr, ptr %135, align 8
  %137 = load ptr, ptr %7, align 8
  %138 = call ptr @llvm.invariant.start.p0(i64 104, ptr %137)
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %140 = load i32, ptr %139, align 4
  %141 = getelementptr ptr, ptr %137, i32 %140
  %142 = getelementptr ptr, ptr %141, i32 1
  %143 = load ptr, ptr %142, align 8
  %144 = getelementptr { ptr, ptr }, ptr %143, i32 0, i32 1
  %145 = load ptr, ptr %144, align 8
  %146 = getelementptr { ptr, ptr, ptr, i32 }, ptr %122, i32 0, i32 0
  %147 = load ptr, ptr %146, align 8
  %148 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %147, 0
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %122, i32 0, i32 1
  %150 = load ptr, ptr %149, align 8
  %151 = insertvalue { ptr, ptr, ptr, i32 } %148, ptr %150, 1
  %152 = getelementptr { ptr, ptr, ptr, i32 }, ptr %122, i32 0, i32 2
  %153 = load ptr, ptr %152, align 8
  %154 = insertvalue { ptr, ptr, ptr, i32 } %151, ptr %153, 2
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %122, i32 0, i32 3
  %156 = load i32, ptr %155, align 4
  %157 = insertvalue { ptr, ptr, ptr, i32 } %154, i32 %156, 3
  call void %145(ptr %136, { ptr, ptr, ptr, i32 } %157)
  ret void
}

define void @Exception_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Exception)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 104, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 1
  %28 = load ptr, ptr %27, align 8
  call void %28(ptr %20, i32 0)
  %29 = alloca ptr, align 8
  %30 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 7) to i64))
  store ptr %30, ptr %29, align 8
  %31 = alloca { ptr }, align 8
  %32 = getelementptr { ptr }, ptr %29, i32 0, i32 0
  %33 = getelementptr { ptr }, ptr %31, i32 0, i32 0
  %34 = load ptr, ptr %32, align 8
  store ptr %34, ptr %33, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 16, ptr %31)
  %36 = load ptr, ptr %31, align 8
  %37 = getelementptr i8, ptr %36, i64 0
  %38 = load i48, ptr @rsruf_None, align 4
  store i48 %38, ptr %37, align 4
  %39 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 1
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 3
  store ptr @String, ptr %40, align 8
  store ptr %39, ptr %41, align 8
  store i32 7, ptr %42, align 4
  %43 = call ptr @llvm.invariant.start.p0(i64 16, ptr %40)
  %44 = getelementptr { ptr }, ptr %31, i32 0, i32 0
  %45 = load ptr, ptr %44, align 8
  %46 = insertvalue { ptr } undef, ptr %45, 0
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 0
  %48 = load ptr, ptr %47, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %48, 0
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } %49, ptr %51, 1
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 2
  %54 = load ptr, ptr %53, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %54, 2
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 3
  %57 = load i32, ptr %56, align 4
  %58 = insertvalue { ptr, ptr, ptr, i32 } %55, i32 %57, 3
  %59 = alloca [3 x ptr], align 8
  %60 = getelementptr [3 x ptr], ptr %59, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %60, align 8
  %61 = getelementptr [3 x ptr], ptr %59, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %61, align 8
  %62 = getelementptr [3 x ptr], ptr %59, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %62, align 8
  %63 = call ptr @llvm.invariant.start.p0(i64 9, ptr %59)
  %64 = call ptr @llvm.invariant.start.p0(i64 280, ptr %48)
  %65 = getelementptr ptr, ptr %48, i32 %57
  %66 = getelementptr ptr, ptr %65, i32 4
  %67 = load ptr, ptr %66, align 8
  %68 = alloca { ptr, ptr, ptr }, align 8
  %69 = getelementptr { ptr, ptr, ptr }, ptr %68, i32 0, i32 0
  store ptr @buffer_typ, ptr %69, align 8
  %70 = getelementptr { ptr, ptr, ptr }, ptr %68, i32 0, i32 1
  store ptr @i32_typ, ptr %70, align 8
  %71 = getelementptr { ptr, ptr, ptr }, ptr %68, i32 0, i32 2
  store ptr @i32_typ, ptr %71, align 8
  %72 = call ptr %67({ ptr, ptr, ptr, i32 } %58, ptr %68)
  call void %72({ ptr, ptr, ptr, i32 } %58, { ptr, ptr, ptr, i32 } %58, ptr %59, { ptr } %46, i32 6, i32 7)
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 0
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %76 = load ptr, ptr %74, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 1
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %79 = load ptr, ptr %77, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 2
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %82 = load ptr, ptr %80, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 3
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %85 = load i32, ptr %83, align 4
  store i32 %85, ptr %84, align 4
  call void @set_offset(ptr %73, ptr @String)
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %87 = load ptr, ptr %86, align 8
  %88 = load ptr, ptr %6, align 8
  %89 = call ptr @llvm.invariant.start.p0(i64 104, ptr %88)
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %91 = load i32, ptr %90, align 4
  %92 = getelementptr ptr, ptr %88, i32 %91
  %93 = getelementptr ptr, ptr %92, i32 2
  %94 = load ptr, ptr %93, align 8
  %95 = getelementptr { ptr, ptr }, ptr %94, i32 0, i32 1
  %96 = load ptr, ptr %95, align 8
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %98 = load ptr, ptr %97, align 8
  %99 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %98, 0
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %101 = load ptr, ptr %100, align 8
  %102 = insertvalue { ptr, ptr, ptr, i32 } %99, ptr %101, 1
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %104 = load ptr, ptr %103, align 8
  %105 = insertvalue { ptr, ptr, ptr, i32 } %102, ptr %104, 2
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %107 = load i32, ptr %106, align 4
  %108 = insertvalue { ptr, ptr, ptr, i32 } %105, i32 %107, 3
  call void %96(ptr %87, { ptr, ptr, ptr, i32 } %108)
  %109 = alloca ptr, align 8
  %110 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64))
  store ptr %110, ptr %109, align 8
  %111 = alloca { ptr }, align 8
  %112 = getelementptr { ptr }, ptr %109, i32 0, i32 0
  %113 = getelementptr { ptr }, ptr %111, i32 0, i32 0
  %114 = load ptr, ptr %112, align 8
  store ptr %114, ptr %113, align 8
  %115 = call ptr @llvm.invariant.start.p0(i64 16, ptr %111)
  %116 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %117 = alloca { ptr, ptr, ptr, i32 }, align 8
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %117, i32 0, i32 1
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %117, i32 0, i32 3
  store ptr @String, ptr %117, align 8
  store ptr %116, ptr %118, align 8
  store i32 7, ptr %119, align 4
  %120 = call ptr @llvm.invariant.start.p0(i64 16, ptr %117)
  %121 = getelementptr { ptr }, ptr %111, i32 0, i32 0
  %122 = load ptr, ptr %121, align 8
  %123 = insertvalue { ptr } undef, ptr %122, 0
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %117, i32 0, i32 0
  %125 = load ptr, ptr %124, align 8
  %126 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %125, 0
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %117, i32 0, i32 1
  %128 = load ptr, ptr %127, align 8
  %129 = insertvalue { ptr, ptr, ptr, i32 } %126, ptr %128, 1
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %117, i32 0, i32 2
  %131 = load ptr, ptr %130, align 8
  %132 = insertvalue { ptr, ptr, ptr, i32 } %129, ptr %131, 2
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %117, i32 0, i32 3
  %134 = load i32, ptr %133, align 4
  %135 = insertvalue { ptr, ptr, ptr, i32 } %132, i32 %134, 3
  %136 = alloca [3 x ptr], align 8
  %137 = getelementptr [3 x ptr], ptr %136, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %137, align 8
  %138 = getelementptr [3 x ptr], ptr %136, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %138, align 8
  %139 = getelementptr [3 x ptr], ptr %136, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %139, align 8
  %140 = call ptr @llvm.invariant.start.p0(i64 9, ptr %136)
  %141 = call ptr @llvm.invariant.start.p0(i64 280, ptr %125)
  %142 = getelementptr ptr, ptr %125, i32 %134
  %143 = getelementptr ptr, ptr %142, i32 4
  %144 = load ptr, ptr %143, align 8
  %145 = alloca { ptr, ptr, ptr }, align 8
  %146 = getelementptr { ptr, ptr, ptr }, ptr %145, i32 0, i32 0
  store ptr @buffer_typ, ptr %146, align 8
  %147 = getelementptr { ptr, ptr, ptr }, ptr %145, i32 0, i32 1
  store ptr @i32_typ, ptr %147, align 8
  %148 = getelementptr { ptr, ptr, ptr }, ptr %145, i32 0, i32 2
  store ptr @i32_typ, ptr %148, align 8
  %149 = call ptr %144({ ptr, ptr, ptr, i32 } %135, ptr %145)
  call void %149({ ptr, ptr, ptr, i32 } %135, { ptr, ptr, ptr, i32 } %135, ptr %136, { ptr } %123, i32 0, i32 1)
  %150 = alloca { ptr, ptr, ptr, i32 }, align 8
  %151 = getelementptr { ptr, ptr, ptr, i32 }, ptr %117, i32 0, i32 0
  %152 = getelementptr { ptr, ptr, ptr, i32 }, ptr %150, i32 0, i32 0
  %153 = load ptr, ptr %151, align 8
  store ptr %153, ptr %152, align 8
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %117, i32 0, i32 1
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %150, i32 0, i32 1
  %156 = load ptr, ptr %154, align 8
  store ptr %156, ptr %155, align 8
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %117, i32 0, i32 2
  %158 = getelementptr { ptr, ptr, ptr, i32 }, ptr %150, i32 0, i32 2
  %159 = load ptr, ptr %157, align 8
  store ptr %159, ptr %158, align 8
  %160 = getelementptr { ptr, ptr, ptr, i32 }, ptr %117, i32 0, i32 3
  %161 = getelementptr { ptr, ptr, ptr, i32 }, ptr %150, i32 0, i32 3
  %162 = load i32, ptr %160, align 4
  store i32 %162, ptr %161, align 4
  call void @set_offset(ptr %150, ptr @String)
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %164 = load ptr, ptr %163, align 8
  %165 = load ptr, ptr %6, align 8
  %166 = call ptr @llvm.invariant.start.p0(i64 104, ptr %165)
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %168 = load i32, ptr %167, align 4
  %169 = getelementptr ptr, ptr %165, i32 %168
  %170 = getelementptr ptr, ptr %169, i32 1
  %171 = load ptr, ptr %170, align 8
  %172 = getelementptr { ptr, ptr }, ptr %171, i32 0, i32 1
  %173 = load ptr, ptr %172, align 8
  %174 = getelementptr { ptr, ptr, ptr, i32 }, ptr %150, i32 0, i32 0
  %175 = load ptr, ptr %174, align 8
  %176 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %175, 0
  %177 = getelementptr { ptr, ptr, ptr, i32 }, ptr %150, i32 0, i32 1
  %178 = load ptr, ptr %177, align 8
  %179 = insertvalue { ptr, ptr, ptr, i32 } %176, ptr %178, 1
  %180 = getelementptr { ptr, ptr, ptr, i32 }, ptr %150, i32 0, i32 2
  %181 = load ptr, ptr %180, align 8
  %182 = insertvalue { ptr, ptr, ptr, i32 } %179, ptr %181, 2
  %183 = getelementptr { ptr, ptr, ptr, i32 }, ptr %150, i32 0, i32 3
  %184 = load i32, ptr %183, align 4
  %185 = insertvalue { ptr, ptr, ptr, i32 } %182, i32 %184, 3
  call void %173(ptr %164, { ptr, ptr, ptr, i32 } %185)
  ret void
}

define void @Exception_set_info_line_numberPtri32_file_nameString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @Exception)
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %22 = load ptr, ptr %21, align 8
  %23 = load ptr, ptr %8, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 104, ptr %23)
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %26 = load i32, ptr %25, align 4
  %27 = getelementptr ptr, ptr %23, i32 %26
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr { ptr, ptr }, ptr %28, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  call void %30(ptr %22, i32 %3)
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %31, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 16, ptr %31)
  %33 = alloca { ptr, ptr, ptr, i32 }, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 0
  %36 = load ptr, ptr %34, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 1
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 2
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 3
  %45 = load i32, ptr %43, align 4
  store i32 %45, ptr %44, align 4
  call void @set_offset(ptr %33, ptr @String)
  %46 = alloca { ptr, ptr, ptr, i32 }, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 0
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %49 = load ptr, ptr %47, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 1
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %52 = load ptr, ptr %50, align 8
  store ptr %52, ptr %51, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 2
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %55 = load ptr, ptr %53, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 3
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %58 = load i32, ptr %56, align 4
  store i32 %58, ptr %57, align 4
  call void @set_offset(ptr %46, ptr @String)
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %60 = load ptr, ptr %59, align 8
  %61 = load ptr, ptr %8, align 8
  %62 = call ptr @llvm.invariant.start.p0(i64 104, ptr %61)
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %64 = load i32, ptr %63, align 4
  %65 = getelementptr ptr, ptr %61, i32 %64
  %66 = getelementptr ptr, ptr %65, i32 1
  %67 = load ptr, ptr %66, align 8
  %68 = getelementptr { ptr, ptr }, ptr %67, i32 0, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %71 = load ptr, ptr %70, align 8
  %72 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %71, 0
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %74 = load ptr, ptr %73, align 8
  %75 = insertvalue { ptr, ptr, ptr, i32 } %72, ptr %74, 1
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %77 = load ptr, ptr %76, align 8
  %78 = insertvalue { ptr, ptr, ptr, i32 } %75, ptr %77, 2
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %80 = load i32, ptr %79, align 4
  %81 = insertvalue { ptr, ptr, ptr, i32 } %78, i32 %80, 3
  call void %69(ptr %60, { ptr, ptr, ptr, i32 } %81)
  ret void
}

define void @Exception_report_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Exception)
  %19 = alloca ptr, align 8
  %20 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 10) to i64))
  store ptr %20, ptr %19, align 8
  %21 = alloca { ptr }, align 8
  %22 = getelementptr { ptr }, ptr %19, i32 0, i32 0
  %23 = getelementptr { ptr }, ptr %21, i32 0, i32 0
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %26 = load ptr, ptr %21, align 8
  %27 = getelementptr i8, ptr %26, i64 0
  %28 = load i72, ptr @hwlms_, align 4
  store i72 %28, ptr %27, align 4
  %29 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  store ptr @String, ptr %30, align 8
  store ptr %29, ptr %31, align 8
  store i32 7, ptr %32, align 4
  %33 = call ptr @llvm.invariant.start.p0(i64 16, ptr %30)
  %34 = getelementptr { ptr }, ptr %21, i32 0, i32 0
  %35 = load ptr, ptr %34, align 8
  %36 = insertvalue { ptr } undef, ptr %35, 0
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %38 = load ptr, ptr %37, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %38, 0
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %41 = load ptr, ptr %40, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } %39, ptr %41, 1
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %44 = load ptr, ptr %43, align 8
  %45 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %44, 2
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %47 = load i32, ptr %46, align 4
  %48 = insertvalue { ptr, ptr, ptr, i32 } %45, i32 %47, 3
  %49 = alloca [3 x ptr], align 8
  %50 = getelementptr [3 x ptr], ptr %49, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %50, align 8
  %51 = getelementptr [3 x ptr], ptr %49, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %51, align 8
  %52 = getelementptr [3 x ptr], ptr %49, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %52, align 8
  %53 = call ptr @llvm.invariant.start.p0(i64 9, ptr %49)
  %54 = call ptr @llvm.invariant.start.p0(i64 280, ptr %38)
  %55 = getelementptr ptr, ptr %38, i32 %47
  %56 = getelementptr ptr, ptr %55, i32 4
  %57 = load ptr, ptr %56, align 8
  %58 = alloca { ptr, ptr, ptr }, align 8
  %59 = getelementptr { ptr, ptr, ptr }, ptr %58, i32 0, i32 0
  store ptr @buffer_typ, ptr %59, align 8
  %60 = getelementptr { ptr, ptr, ptr }, ptr %58, i32 0, i32 1
  store ptr @i32_typ, ptr %60, align 8
  %61 = getelementptr { ptr, ptr, ptr }, ptr %58, i32 0, i32 2
  store ptr @i32_typ, ptr %61, align 8
  %62 = call ptr %57({ ptr, ptr, ptr, i32 } %48, ptr %58)
  call void %62({ ptr, ptr, ptr, i32 } %48, { ptr, ptr, ptr, i32 } %48, ptr %49, { ptr } %36, i32 9, i32 10)
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %64 = load ptr, ptr %63, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %64, 0
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %67 = load ptr, ptr %66, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %67, 1
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %70 = load ptr, ptr %69, align 8
  %71 = insertvalue { ptr, ptr, ptr, i32 } %68, ptr %70, 2
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %73 = load i32, ptr %72, align 4
  %74 = insertvalue { ptr, ptr, ptr, i32 } %71, i32 %73, 3
  %75 = alloca [0 x ptr], align 8
  %76 = call ptr @llvm.invariant.start.p0(i64 0, ptr %75)
  %77 = call ptr @llvm.invariant.start.p0(i64 280, ptr %64)
  %78 = getelementptr ptr, ptr %64, i32 %73
  %79 = getelementptr ptr, ptr %78, i32 14
  %80 = load ptr, ptr %79, align 8
  %81 = alloca {}, align 8
  %82 = call ptr %80({ ptr, ptr, ptr, i32 } %74, ptr %81)
  %83 = call { ptr } %82({ ptr, ptr, ptr, i32 } %74, { ptr, ptr, ptr, i32 } %74, ptr %75)
  %84 = alloca ptr, align 8
  store { ptr } %83, ptr %84, align 8
  %85 = load ptr, ptr %84, align 8
  %86 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %85)
  %87 = alloca ptr, align 8
  %88 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 27) to i64))
  store ptr %88, ptr %87, align 8
  %89 = alloca { ptr }, align 8
  %90 = getelementptr { ptr }, ptr %87, i32 0, i32 0
  %91 = getelementptr { ptr }, ptr %89, i32 0, i32 0
  %92 = load ptr, ptr %90, align 8
  store ptr %92, ptr %91, align 8
  %93 = call ptr @llvm.invariant.start.p0(i64 16, ptr %89)
  %94 = load ptr, ptr %89, align 8
  %95 = getelementptr i8, ptr %94, i64 0
  %96 = load i208, ptr @xhhhv_Exception_thrown_from_file, align 4
  store i208 %96, ptr %95, align 4
  %97 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %98 = alloca { ptr, ptr, ptr, i32 }, align 8
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 1
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 3
  store ptr @String, ptr %98, align 8
  store ptr %97, ptr %99, align 8
  store i32 7, ptr %100, align 4
  %101 = call ptr @llvm.invariant.start.p0(i64 16, ptr %98)
  %102 = getelementptr { ptr }, ptr %89, i32 0, i32 0
  %103 = load ptr, ptr %102, align 8
  %104 = insertvalue { ptr } undef, ptr %103, 0
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 0
  %106 = load ptr, ptr %105, align 8
  %107 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %106, 0
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 1
  %109 = load ptr, ptr %108, align 8
  %110 = insertvalue { ptr, ptr, ptr, i32 } %107, ptr %109, 1
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 2
  %112 = load ptr, ptr %111, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } %110, ptr %112, 2
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 3
  %115 = load i32, ptr %114, align 4
  %116 = insertvalue { ptr, ptr, ptr, i32 } %113, i32 %115, 3
  %117 = alloca [3 x ptr], align 8
  %118 = getelementptr [3 x ptr], ptr %117, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %118, align 8
  %119 = getelementptr [3 x ptr], ptr %117, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %119, align 8
  %120 = getelementptr [3 x ptr], ptr %117, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %120, align 8
  %121 = call ptr @llvm.invariant.start.p0(i64 9, ptr %117)
  %122 = call ptr @llvm.invariant.start.p0(i64 280, ptr %106)
  %123 = getelementptr ptr, ptr %106, i32 %115
  %124 = getelementptr ptr, ptr %123, i32 4
  %125 = load ptr, ptr %124, align 8
  %126 = alloca { ptr, ptr, ptr }, align 8
  %127 = getelementptr { ptr, ptr, ptr }, ptr %126, i32 0, i32 0
  store ptr @buffer_typ, ptr %127, align 8
  %128 = getelementptr { ptr, ptr, ptr }, ptr %126, i32 0, i32 1
  store ptr @i32_typ, ptr %128, align 8
  %129 = getelementptr { ptr, ptr, ptr }, ptr %126, i32 0, i32 2
  store ptr @i32_typ, ptr %129, align 8
  %130 = call ptr %125({ ptr, ptr, ptr, i32 } %116, ptr %126)
  call void %130({ ptr, ptr, ptr, i32 } %116, { ptr, ptr, ptr, i32 } %116, ptr %117, { ptr } %104, i32 26, i32 27)
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 0
  %132 = load ptr, ptr %131, align 8
  %133 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %132, 0
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 1
  %135 = load ptr, ptr %134, align 8
  %136 = insertvalue { ptr, ptr, ptr, i32 } %133, ptr %135, 1
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 2
  %138 = load ptr, ptr %137, align 8
  %139 = insertvalue { ptr, ptr, ptr, i32 } %136, ptr %138, 2
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %98, i32 0, i32 3
  %141 = load i32, ptr %140, align 4
  %142 = insertvalue { ptr, ptr, ptr, i32 } %139, i32 %141, 3
  %143 = alloca [0 x ptr], align 8
  %144 = call ptr @llvm.invariant.start.p0(i64 0, ptr %143)
  %145 = call ptr @llvm.invariant.start.p0(i64 280, ptr %132)
  %146 = getelementptr ptr, ptr %132, i32 %141
  %147 = getelementptr ptr, ptr %146, i32 14
  %148 = load ptr, ptr %147, align 8
  %149 = alloca {}, align 8
  %150 = call ptr %148({ ptr, ptr, ptr, i32 } %142, ptr %149)
  %151 = call { ptr } %150({ ptr, ptr, ptr, i32 } %142, { ptr, ptr, ptr, i32 } %142, ptr %143)
  %152 = alloca ptr, align 8
  store { ptr } %151, ptr %152, align 8
  %153 = load ptr, ptr %152, align 8
  %154 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %153)
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %156 = load ptr, ptr %155, align 8
  %157 = load ptr, ptr %6, align 8
  %158 = call ptr @llvm.invariant.start.p0(i64 104, ptr %157)
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %160 = load i32, ptr %159, align 4
  %161 = getelementptr ptr, ptr %157, i32 %160
  %162 = getelementptr ptr, ptr %161, i32 1
  %163 = load ptr, ptr %162, align 8
  %164 = getelementptr { ptr, ptr }, ptr %163, i32 0, i32 0
  %165 = load ptr, ptr %164, align 8
  %166 = call { ptr, ptr, ptr, i32 } %165(ptr %156)
  %167 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %166, ptr %167, align 8
  %168 = call ptr @llvm.invariant.start.p0(i64 16, ptr %167)
  call void @assume_offset(ptr %167, ptr @String)
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %167, i32 0, i32 0
  %170 = load ptr, ptr %169, align 8
  %171 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %170, 0
  %172 = getelementptr { ptr, ptr, ptr, i32 }, ptr %167, i32 0, i32 1
  %173 = load ptr, ptr %172, align 8
  %174 = insertvalue { ptr, ptr, ptr, i32 } %171, ptr %173, 1
  %175 = getelementptr { ptr, ptr, ptr, i32 }, ptr %167, i32 0, i32 2
  %176 = load ptr, ptr %175, align 8
  %177 = insertvalue { ptr, ptr, ptr, i32 } %174, ptr %176, 2
  %178 = getelementptr { ptr, ptr, ptr, i32 }, ptr %167, i32 0, i32 3
  %179 = load i32, ptr %178, align 4
  %180 = insertvalue { ptr, ptr, ptr, i32 } %177, i32 %179, 3
  %181 = alloca [0 x ptr], align 8
  %182 = call ptr @llvm.invariant.start.p0(i64 0, ptr %181)
  %183 = call ptr @llvm.invariant.start.p0(i64 280, ptr %170)
  %184 = getelementptr ptr, ptr %170, i32 %179
  %185 = getelementptr ptr, ptr %184, i32 14
  %186 = load ptr, ptr %185, align 8
  %187 = alloca {}, align 8
  %188 = call ptr %186({ ptr, ptr, ptr, i32 } %180, ptr %187)
  %189 = call { ptr } %188({ ptr, ptr, ptr, i32 } %180, { ptr, ptr, ptr, i32 } %180, ptr %181)
  %190 = alloca ptr, align 8
  store { ptr } %189, ptr %190, align 8
  %191 = load ptr, ptr %190, align 8
  %192 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %191)
  %193 = alloca ptr, align 8
  %194 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 8) to i64))
  store ptr %194, ptr %193, align 8
  %195 = alloca { ptr }, align 8
  %196 = getelementptr { ptr }, ptr %193, i32 0, i32 0
  %197 = getelementptr { ptr }, ptr %195, i32 0, i32 0
  %198 = load ptr, ptr %196, align 8
  store ptr %198, ptr %197, align 8
  %199 = call ptr @llvm.invariant.start.p0(i64 16, ptr %195)
  %200 = load ptr, ptr %195, align 8
  %201 = getelementptr i8, ptr %200, i64 0
  %202 = load i56, ptr @tscng_At_line, align 4
  store i56 %202, ptr %201, align 4
  %203 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %204 = alloca { ptr, ptr, ptr, i32 }, align 8
  %205 = getelementptr { ptr, ptr, ptr, i32 }, ptr %204, i32 0, i32 1
  %206 = getelementptr { ptr, ptr, ptr, i32 }, ptr %204, i32 0, i32 3
  store ptr @String, ptr %204, align 8
  store ptr %203, ptr %205, align 8
  store i32 7, ptr %206, align 4
  %207 = call ptr @llvm.invariant.start.p0(i64 16, ptr %204)
  %208 = getelementptr { ptr }, ptr %195, i32 0, i32 0
  %209 = load ptr, ptr %208, align 8
  %210 = insertvalue { ptr } undef, ptr %209, 0
  %211 = getelementptr { ptr, ptr, ptr, i32 }, ptr %204, i32 0, i32 0
  %212 = load ptr, ptr %211, align 8
  %213 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %212, 0
  %214 = getelementptr { ptr, ptr, ptr, i32 }, ptr %204, i32 0, i32 1
  %215 = load ptr, ptr %214, align 8
  %216 = insertvalue { ptr, ptr, ptr, i32 } %213, ptr %215, 1
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %204, i32 0, i32 2
  %218 = load ptr, ptr %217, align 8
  %219 = insertvalue { ptr, ptr, ptr, i32 } %216, ptr %218, 2
  %220 = getelementptr { ptr, ptr, ptr, i32 }, ptr %204, i32 0, i32 3
  %221 = load i32, ptr %220, align 4
  %222 = insertvalue { ptr, ptr, ptr, i32 } %219, i32 %221, 3
  %223 = alloca [3 x ptr], align 8
  %224 = getelementptr [3 x ptr], ptr %223, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %224, align 8
  %225 = getelementptr [3 x ptr], ptr %223, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %225, align 8
  %226 = getelementptr [3 x ptr], ptr %223, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %226, align 8
  %227 = call ptr @llvm.invariant.start.p0(i64 9, ptr %223)
  %228 = call ptr @llvm.invariant.start.p0(i64 280, ptr %212)
  %229 = getelementptr ptr, ptr %212, i32 %221
  %230 = getelementptr ptr, ptr %229, i32 4
  %231 = load ptr, ptr %230, align 8
  %232 = alloca { ptr, ptr, ptr }, align 8
  %233 = getelementptr { ptr, ptr, ptr }, ptr %232, i32 0, i32 0
  store ptr @buffer_typ, ptr %233, align 8
  %234 = getelementptr { ptr, ptr, ptr }, ptr %232, i32 0, i32 1
  store ptr @i32_typ, ptr %234, align 8
  %235 = getelementptr { ptr, ptr, ptr }, ptr %232, i32 0, i32 2
  store ptr @i32_typ, ptr %235, align 8
  %236 = call ptr %231({ ptr, ptr, ptr, i32 } %222, ptr %232)
  call void %236({ ptr, ptr, ptr, i32 } %222, { ptr, ptr, ptr, i32 } %222, ptr %223, { ptr } %210, i32 7, i32 8)
  %237 = getelementptr { ptr, ptr, ptr, i32 }, ptr %204, i32 0, i32 0
  %238 = load ptr, ptr %237, align 8
  %239 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %238, 0
  %240 = getelementptr { ptr, ptr, ptr, i32 }, ptr %204, i32 0, i32 1
  %241 = load ptr, ptr %240, align 8
  %242 = insertvalue { ptr, ptr, ptr, i32 } %239, ptr %241, 1
  %243 = getelementptr { ptr, ptr, ptr, i32 }, ptr %204, i32 0, i32 2
  %244 = load ptr, ptr %243, align 8
  %245 = insertvalue { ptr, ptr, ptr, i32 } %242, ptr %244, 2
  %246 = getelementptr { ptr, ptr, ptr, i32 }, ptr %204, i32 0, i32 3
  %247 = load i32, ptr %246, align 4
  %248 = insertvalue { ptr, ptr, ptr, i32 } %245, i32 %247, 3
  %249 = alloca [0 x ptr], align 8
  %250 = call ptr @llvm.invariant.start.p0(i64 0, ptr %249)
  %251 = call ptr @llvm.invariant.start.p0(i64 280, ptr %238)
  %252 = getelementptr ptr, ptr %238, i32 %247
  %253 = getelementptr ptr, ptr %252, i32 14
  %254 = load ptr, ptr %253, align 8
  %255 = alloca {}, align 8
  %256 = call ptr %254({ ptr, ptr, ptr, i32 } %248, ptr %255)
  %257 = call { ptr } %256({ ptr, ptr, ptr, i32 } %248, { ptr, ptr, ptr, i32 } %248, ptr %249)
  %258 = alloca ptr, align 8
  store { ptr } %257, ptr %258, align 8
  %259 = load ptr, ptr %258, align 8
  %260 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %259)
  %261 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %262 = load ptr, ptr %261, align 8
  %263 = load ptr, ptr %6, align 8
  %264 = call ptr @llvm.invariant.start.p0(i64 104, ptr %263)
  %265 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %266 = load i32, ptr %265, align 4
  %267 = getelementptr ptr, ptr %263, i32 %266
  %268 = load ptr, ptr %267, align 8
  %269 = getelementptr { ptr, ptr }, ptr %268, i32 0, i32 0
  %270 = load ptr, ptr %269, align 8
  %271 = call i32 %270(ptr %262)
  %272 = call i32 (ptr, ...) @printf(ptr @i32_string, i32 %271)
  %273 = alloca ptr, align 8
  %274 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 13) to i64))
  store ptr %274, ptr %273, align 8
  %275 = alloca { ptr }, align 8
  %276 = getelementptr { ptr }, ptr %273, i32 0, i32 0
  %277 = getelementptr { ptr }, ptr %275, i32 0, i32 0
  %278 = load ptr, ptr %276, align 8
  store ptr %278, ptr %277, align 8
  %279 = call ptr @llvm.invariant.start.p0(i64 16, ptr %275)
  %280 = load ptr, ptr %275, align 8
  %281 = getelementptr i8, ptr %280, i64 0
  %282 = load i96, ptr @oevbi_With_message, align 4
  store i96 %282, ptr %281, align 4
  %283 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %284 = alloca { ptr, ptr, ptr, i32 }, align 8
  %285 = getelementptr { ptr, ptr, ptr, i32 }, ptr %284, i32 0, i32 1
  %286 = getelementptr { ptr, ptr, ptr, i32 }, ptr %284, i32 0, i32 3
  store ptr @String, ptr %284, align 8
  store ptr %283, ptr %285, align 8
  store i32 7, ptr %286, align 4
  %287 = call ptr @llvm.invariant.start.p0(i64 16, ptr %284)
  %288 = getelementptr { ptr }, ptr %275, i32 0, i32 0
  %289 = load ptr, ptr %288, align 8
  %290 = insertvalue { ptr } undef, ptr %289, 0
  %291 = getelementptr { ptr, ptr, ptr, i32 }, ptr %284, i32 0, i32 0
  %292 = load ptr, ptr %291, align 8
  %293 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %292, 0
  %294 = getelementptr { ptr, ptr, ptr, i32 }, ptr %284, i32 0, i32 1
  %295 = load ptr, ptr %294, align 8
  %296 = insertvalue { ptr, ptr, ptr, i32 } %293, ptr %295, 1
  %297 = getelementptr { ptr, ptr, ptr, i32 }, ptr %284, i32 0, i32 2
  %298 = load ptr, ptr %297, align 8
  %299 = insertvalue { ptr, ptr, ptr, i32 } %296, ptr %298, 2
  %300 = getelementptr { ptr, ptr, ptr, i32 }, ptr %284, i32 0, i32 3
  %301 = load i32, ptr %300, align 4
  %302 = insertvalue { ptr, ptr, ptr, i32 } %299, i32 %301, 3
  %303 = alloca [3 x ptr], align 8
  %304 = getelementptr [3 x ptr], ptr %303, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %304, align 8
  %305 = getelementptr [3 x ptr], ptr %303, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %305, align 8
  %306 = getelementptr [3 x ptr], ptr %303, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %306, align 8
  %307 = call ptr @llvm.invariant.start.p0(i64 9, ptr %303)
  %308 = call ptr @llvm.invariant.start.p0(i64 280, ptr %292)
  %309 = getelementptr ptr, ptr %292, i32 %301
  %310 = getelementptr ptr, ptr %309, i32 4
  %311 = load ptr, ptr %310, align 8
  %312 = alloca { ptr, ptr, ptr }, align 8
  %313 = getelementptr { ptr, ptr, ptr }, ptr %312, i32 0, i32 0
  store ptr @buffer_typ, ptr %313, align 8
  %314 = getelementptr { ptr, ptr, ptr }, ptr %312, i32 0, i32 1
  store ptr @i32_typ, ptr %314, align 8
  %315 = getelementptr { ptr, ptr, ptr }, ptr %312, i32 0, i32 2
  store ptr @i32_typ, ptr %315, align 8
  %316 = call ptr %311({ ptr, ptr, ptr, i32 } %302, ptr %312)
  call void %316({ ptr, ptr, ptr, i32 } %302, { ptr, ptr, ptr, i32 } %302, ptr %303, { ptr } %290, i32 12, i32 13)
  %317 = getelementptr { ptr, ptr, ptr, i32 }, ptr %284, i32 0, i32 0
  %318 = load ptr, ptr %317, align 8
  %319 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %318, 0
  %320 = getelementptr { ptr, ptr, ptr, i32 }, ptr %284, i32 0, i32 1
  %321 = load ptr, ptr %320, align 8
  %322 = insertvalue { ptr, ptr, ptr, i32 } %319, ptr %321, 1
  %323 = getelementptr { ptr, ptr, ptr, i32 }, ptr %284, i32 0, i32 2
  %324 = load ptr, ptr %323, align 8
  %325 = insertvalue { ptr, ptr, ptr, i32 } %322, ptr %324, 2
  %326 = getelementptr { ptr, ptr, ptr, i32 }, ptr %284, i32 0, i32 3
  %327 = load i32, ptr %326, align 4
  %328 = insertvalue { ptr, ptr, ptr, i32 } %325, i32 %327, 3
  %329 = alloca [0 x ptr], align 8
  %330 = call ptr @llvm.invariant.start.p0(i64 0, ptr %329)
  %331 = call ptr @llvm.invariant.start.p0(i64 280, ptr %318)
  %332 = getelementptr ptr, ptr %318, i32 %327
  %333 = getelementptr ptr, ptr %332, i32 14
  %334 = load ptr, ptr %333, align 8
  %335 = alloca {}, align 8
  %336 = call ptr %334({ ptr, ptr, ptr, i32 } %328, ptr %335)
  %337 = call { ptr } %336({ ptr, ptr, ptr, i32 } %328, { ptr, ptr, ptr, i32 } %328, ptr %329)
  %338 = alloca ptr, align 8
  store { ptr } %337, ptr %338, align 8
  %339 = load ptr, ptr %338, align 8
  %340 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %339)
  %341 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %342 = load ptr, ptr %341, align 8
  %343 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %342, 0
  %344 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %345 = load ptr, ptr %344, align 8
  %346 = insertvalue { ptr, ptr, ptr, i32 } %343, ptr %345, 1
  %347 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %348 = load ptr, ptr %347, align 8
  %349 = insertvalue { ptr, ptr, ptr, i32 } %346, ptr %348, 2
  %350 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %351 = load i32, ptr %350, align 4
  %352 = insertvalue { ptr, ptr, ptr, i32 } %349, i32 %351, 3
  %353 = alloca [0 x ptr], align 8
  %354 = call ptr @llvm.invariant.start.p0(i64 0, ptr %353)
  %355 = call ptr @llvm.invariant.start.p0(i64 104, ptr %342)
  %356 = getelementptr ptr, ptr %342, i32 %351
  %357 = getelementptr ptr, ptr %356, i32 7
  %358 = load ptr, ptr %357, align 8
  %359 = alloca {}, align 8
  %360 = call ptr %358({ ptr, ptr, ptr, i32 } %352, ptr %359)
  call void %360({ ptr, ptr, ptr, i32 } %352, { ptr, ptr, ptr, i32 } %352, ptr %353)
  %361 = alloca ptr, align 8
  %362 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 10) to i64))
  store ptr %362, ptr %361, align 8
  %363 = alloca { ptr }, align 8
  %364 = getelementptr { ptr }, ptr %361, i32 0, i32 0
  %365 = getelementptr { ptr }, ptr %363, i32 0, i32 0
  %366 = load ptr, ptr %364, align 8
  store ptr %366, ptr %365, align 8
  %367 = call ptr @llvm.invariant.start.p0(i64 16, ptr %363)
  %368 = load ptr, ptr %363, align 8
  %369 = getelementptr i8, ptr %368, i64 0
  %370 = load i72, ptr @emnhy_, align 4
  store i72 %370, ptr %369, align 4
  %371 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %372 = alloca { ptr, ptr, ptr, i32 }, align 8
  %373 = getelementptr { ptr, ptr, ptr, i32 }, ptr %372, i32 0, i32 1
  %374 = getelementptr { ptr, ptr, ptr, i32 }, ptr %372, i32 0, i32 3
  store ptr @String, ptr %372, align 8
  store ptr %371, ptr %373, align 8
  store i32 7, ptr %374, align 4
  %375 = call ptr @llvm.invariant.start.p0(i64 16, ptr %372)
  %376 = getelementptr { ptr }, ptr %363, i32 0, i32 0
  %377 = load ptr, ptr %376, align 8
  %378 = insertvalue { ptr } undef, ptr %377, 0
  %379 = getelementptr { ptr, ptr, ptr, i32 }, ptr %372, i32 0, i32 0
  %380 = load ptr, ptr %379, align 8
  %381 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %380, 0
  %382 = getelementptr { ptr, ptr, ptr, i32 }, ptr %372, i32 0, i32 1
  %383 = load ptr, ptr %382, align 8
  %384 = insertvalue { ptr, ptr, ptr, i32 } %381, ptr %383, 1
  %385 = getelementptr { ptr, ptr, ptr, i32 }, ptr %372, i32 0, i32 2
  %386 = load ptr, ptr %385, align 8
  %387 = insertvalue { ptr, ptr, ptr, i32 } %384, ptr %386, 2
  %388 = getelementptr { ptr, ptr, ptr, i32 }, ptr %372, i32 0, i32 3
  %389 = load i32, ptr %388, align 4
  %390 = insertvalue { ptr, ptr, ptr, i32 } %387, i32 %389, 3
  %391 = alloca [3 x ptr], align 8
  %392 = getelementptr [3 x ptr], ptr %391, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %392, align 8
  %393 = getelementptr [3 x ptr], ptr %391, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %393, align 8
  %394 = getelementptr [3 x ptr], ptr %391, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %394, align 8
  %395 = call ptr @llvm.invariant.start.p0(i64 9, ptr %391)
  %396 = call ptr @llvm.invariant.start.p0(i64 280, ptr %380)
  %397 = getelementptr ptr, ptr %380, i32 %389
  %398 = getelementptr ptr, ptr %397, i32 4
  %399 = load ptr, ptr %398, align 8
  %400 = alloca { ptr, ptr, ptr }, align 8
  %401 = getelementptr { ptr, ptr, ptr }, ptr %400, i32 0, i32 0
  store ptr @buffer_typ, ptr %401, align 8
  %402 = getelementptr { ptr, ptr, ptr }, ptr %400, i32 0, i32 1
  store ptr @i32_typ, ptr %402, align 8
  %403 = getelementptr { ptr, ptr, ptr }, ptr %400, i32 0, i32 2
  store ptr @i32_typ, ptr %403, align 8
  %404 = call ptr %399({ ptr, ptr, ptr, i32 } %390, ptr %400)
  call void %404({ ptr, ptr, ptr, i32 } %390, { ptr, ptr, ptr, i32 } %390, ptr %391, { ptr } %378, i32 9, i32 10)
  %405 = getelementptr { ptr, ptr, ptr, i32 }, ptr %372, i32 0, i32 0
  %406 = load ptr, ptr %405, align 8
  %407 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %406, 0
  %408 = getelementptr { ptr, ptr, ptr, i32 }, ptr %372, i32 0, i32 1
  %409 = load ptr, ptr %408, align 8
  %410 = insertvalue { ptr, ptr, ptr, i32 } %407, ptr %409, 1
  %411 = getelementptr { ptr, ptr, ptr, i32 }, ptr %372, i32 0, i32 2
  %412 = load ptr, ptr %411, align 8
  %413 = insertvalue { ptr, ptr, ptr, i32 } %410, ptr %412, 2
  %414 = getelementptr { ptr, ptr, ptr, i32 }, ptr %372, i32 0, i32 3
  %415 = load i32, ptr %414, align 4
  %416 = insertvalue { ptr, ptr, ptr, i32 } %413, i32 %415, 3
  %417 = alloca [0 x ptr], align 8
  %418 = call ptr @llvm.invariant.start.p0(i64 0, ptr %417)
  %419 = call ptr @llvm.invariant.start.p0(i64 280, ptr %406)
  %420 = getelementptr ptr, ptr %406, i32 %415
  %421 = getelementptr ptr, ptr %420, i32 14
  %422 = load ptr, ptr %421, align 8
  %423 = alloca {}, align 8
  %424 = call ptr %422({ ptr, ptr, ptr, i32 } %416, ptr %423)
  %425 = call { ptr } %424({ ptr, ptr, ptr, i32 } %416, { ptr, ptr, ptr, i32 } %416, ptr %417)
  %426 = alloca ptr, align 8
  store { ptr } %425, ptr %426, align 8
  %427 = load ptr, ptr %426, align 8
  %428 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %427)
  ret void
}

define void @Exception_print_message_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Exception)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 104, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call { ptr, ptr, ptr, i32 } %29(ptr %20)
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %30, ptr %31, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 16, ptr %31)
  call void @assume_offset(ptr %31, ptr @String)
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %34 = load ptr, ptr %33, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %34, 0
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  %37 = load ptr, ptr %36, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %37, 1
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %40 = load ptr, ptr %39, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } %38, ptr %40, 2
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  %43 = load i32, ptr %42, align 4
  %44 = insertvalue { ptr, ptr, ptr, i32 } %41, i32 %43, 3
  %45 = alloca [0 x ptr], align 8
  %46 = call ptr @llvm.invariant.start.p0(i64 0, ptr %45)
  %47 = call ptr @llvm.invariant.start.p0(i64 280, ptr %34)
  %48 = getelementptr ptr, ptr %34, i32 %43
  %49 = getelementptr ptr, ptr %48, i32 14
  %50 = load ptr, ptr %49, align 8
  %51 = alloca {}, align 8
  %52 = call ptr %50({ ptr, ptr, ptr, i32 } %44, ptr %51)
  %53 = call { ptr } %52({ ptr, ptr, ptr, i32 } %44, { ptr, ptr, ptr, i32 } %44, ptr %45)
  %54 = alloca ptr, align 8
  store { ptr } %53, ptr %54, align 8
  %55 = load ptr, ptr %54, align 8
  %56 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %55)
  ret void
}

define { ptr, ptr, ptr, i32 } @Exception_getter_message(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { i32, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 2
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @Exception_setter_message(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { i32, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 2
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @Exception_getter_file_name(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { i32, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 1
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @Exception_setter_file_name(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { i32, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 1
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  ret void
}

define i32 @Exception_getter_line_number(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { i32, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 0
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @Exception_setter_line_number(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { i32, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 0
  store i32 %1, ptr %3, align 4
  ret void
}

define ptr @Iterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [2 x ptr], ptr %4, i32 0, i32 1
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @report_exception({ ptr } %0) {
  %2 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr } %0, ptr %2, align 8
  %3 = load ptr, ptr %2, align 8
  %4 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %3, i32 0, i32 4
  %5 = load { ptr, i160 }, ptr %4, align 8
  %6 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %5, ptr %6, align 8
  %7 = getelementptr { ptr, i160 }, ptr %6, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = ptrtoint ptr %8 to i64
  %10 = icmp eq i64 %9, ptrtoint (ptr @nil_typ to i64)
  %11 = icmp eq i64 %9, 0
  %12 = or i1 %10, %11
  %13 = icmp eq i1 %12, false
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = alloca [0 x ptr], align 8
  %16 = alloca {}, align 8
  br i1 %13, label %17, label %._crit_edge

._crit_edge:                                      ; preds = %1
  br label %48

17:                                               ; preds = %1
  %18 = getelementptr { ptr, i160 }, ptr %6, i32 0, i32 0
  %19 = getelementptr { ptr, i160 }, ptr %14, i32 0, i32 0
  %20 = load ptr, ptr %18, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr { ptr, i160 }, ptr %6, i32 0, i32 1
  %22 = getelementptr { ptr, i160 }, ptr %14, i32 0, i32 1
  %23 = load i160, ptr %21, align 4
  store i160 %23, ptr %22, align 4
  call void @set_offset(ptr %14, ptr @Exception)
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 0
  %25 = load ptr, ptr %24, align 8
  %26 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %25, 0
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = insertvalue { ptr, ptr, ptr, i32 } %26, ptr %28, 1
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 2
  %31 = load ptr, ptr %30, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } %29, ptr %31, 2
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %14, i32 0, i32 3
  %34 = load i32, ptr %33, align 4
  %35 = insertvalue { ptr, ptr, ptr, i32 } %32, i32 %34, 3
  %36 = call ptr @llvm.invariant.start.p0(i64 0, ptr %15)
  %37 = call ptr @llvm.invariant.start.p0(i64 104, ptr %25)
  %38 = getelementptr ptr, ptr %25, i32 %34
  %39 = getelementptr ptr, ptr %38, i32 6
  %40 = load ptr, ptr %39, align 8
  %41 = call ptr %40({ ptr, ptr, ptr, i32 } %35, ptr %16)
  call void %41({ ptr, ptr, ptr, i32 } %35, { ptr, ptr, ptr, i32 } %35, ptr %15)
  %42 = getelementptr { ptr, i160 }, ptr %14, i32 0, i32 0
  %43 = getelementptr { ptr, i160 }, ptr %6, i32 0, i32 0
  %44 = load ptr, ptr %42, align 8
  store ptr %44, ptr %43, align 8
  %45 = getelementptr { ptr, i160 }, ptr %14, i32 0, i32 1
  %46 = getelementptr { ptr, i160 }, ptr %6, i32 0, i32 1
  %47 = load i160, ptr %45, align 4
  store i160 %47, ptr %46, align 4
  br label %48

48:                                               ; preds = %17, %._crit_edge
  ret void
}

define ptr @Math_B__Self_sqrt_xPtrf64(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %3 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr ptr, ptr %4, i32 1
  %6 = getelementptr ptr, ptr %4, i32 2
  %7 = getelementptr ptr, ptr %4, i32 3
  %8 = getelementptr ptr, ptr %4, i32 4
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 -757315540097298781, i64 ptrtoint (ptr @f64_typ to i64), ptr %12)
  %14 = load ptr, ptr getelementptr (ptr, ptr getelementptr ([17 x ptr], ptr @Math, i32 0, i32 7), i32 7), align 8
  ret ptr %14
}

define ptr @Math_B__Self_abs_xPtrf64__Self_abs_xPtri32(ptr %0) {
  %.reg2mem = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %3 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr ptr, ptr %4, i32 1
  %6 = getelementptr ptr, ptr %4, i32 2
  %7 = getelementptr ptr, ptr %4, i32 3
  %8 = getelementptr ptr, ptr %4, i32 4
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %12)
  %14 = select i1 %13, i32 9, i32 8
  store i32 %14, ptr %.reg2mem, align 4
  br i1 %13, label %15, label %16

15:                                               ; preds = %1
  br label %28

16:                                               ; preds = %1
  %17 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr ptr, ptr %18, i32 1
  %20 = getelementptr ptr, ptr %18, i32 2
  %21 = getelementptr ptr, ptr %18, i32 3
  %22 = getelementptr ptr, ptr %18, i32 4
  %23 = load i64, ptr %19, align 4
  %24 = load i64, ptr %20, align 4
  %25 = load ptr, ptr %21, align 8
  %26 = load ptr, ptr %22, align 8
  %27 = call i1 @subtype_test_wrapper(ptr %25, i64 %24, i64 %23, i64 -757315540097298781, i64 ptrtoint (ptr @f64_typ to i64), ptr %26)
  br label %28

28:                                               ; preds = %16, %15
  %.reload = load i32, ptr %.reg2mem, align 4
  %29 = zext i32 %.reload to i64
  %30 = or i64 0, %29
  %31 = inttoptr i64 %30 to ptr
  %32 = ptrtoint ptr %31 to i64
  %33 = trunc i64 %32 to i32
  %34 = getelementptr [17 x ptr], ptr @Math, i32 0, i32 %33
  %35 = getelementptr ptr, ptr %34, i32 7
  %36 = load ptr, ptr %35, align 8
  ret ptr %36
}

define ptr @Math_B__Self_max_aPtri32_bPtri32__Self_max_aPtrf64_bPtrf64(ptr %0) {
  %.reg2mem = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = call ptr @llvm.invariant.start.p0(i64 16, ptr %0)
  %3 = getelementptr { ptr, ptr }, ptr %0, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr ptr, ptr %4, i32 1
  %6 = getelementptr ptr, ptr %4, i32 2
  %7 = getelementptr ptr, ptr %4, i32 3
  %8 = getelementptr ptr, ptr %4, i32 4
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 -757315540097298781, i64 ptrtoint (ptr @f64_typ to i64), ptr %12)
  %14 = select i1 %13, i32 11, i32 10
  store i32 %14, ptr %.reg2mem, align 4
  br i1 %13, label %15, label %27

15:                                               ; preds = %1
  %16 = getelementptr { ptr, ptr }, ptr %0, i32 0, i32 1
  %17 = load ptr, ptr %16, align 8
  %18 = getelementptr ptr, ptr %17, i32 1
  %19 = getelementptr ptr, ptr %17, i32 2
  %20 = getelementptr ptr, ptr %17, i32 3
  %21 = getelementptr ptr, ptr %17, i32 4
  %22 = load i64, ptr %18, align 4
  %23 = load i64, ptr %19, align 4
  %24 = load ptr, ptr %20, align 8
  %25 = load ptr, ptr %21, align 8
  %26 = call i1 @subtype_test_wrapper(ptr %24, i64 %23, i64 %22, i64 -757315540097298781, i64 ptrtoint (ptr @f64_typ to i64), ptr %25)
  br label %50

27:                                               ; preds = %1
  %28 = getelementptr { ptr, ptr }, ptr %0, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr ptr, ptr %29, i32 1
  %31 = getelementptr ptr, ptr %29, i32 2
  %32 = getelementptr ptr, ptr %29, i32 3
  %33 = getelementptr ptr, ptr %29, i32 4
  %34 = load i64, ptr %30, align 4
  %35 = load i64, ptr %31, align 4
  %36 = load ptr, ptr %32, align 8
  %37 = load ptr, ptr %33, align 8
  %38 = call i1 @subtype_test_wrapper(ptr %36, i64 %35, i64 %34, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %37)
  %39 = getelementptr { ptr, ptr }, ptr %0, i32 0, i32 1
  %40 = load ptr, ptr %39, align 8
  %41 = getelementptr ptr, ptr %40, i32 1
  %42 = getelementptr ptr, ptr %40, i32 2
  %43 = getelementptr ptr, ptr %40, i32 3
  %44 = getelementptr ptr, ptr %40, i32 4
  %45 = load i64, ptr %41, align 4
  %46 = load i64, ptr %42, align 4
  %47 = load ptr, ptr %43, align 8
  %48 = load ptr, ptr %44, align 8
  %49 = call i1 @subtype_test_wrapper(ptr %47, i64 %46, i64 %45, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %48)
  br label %50

50:                                               ; preds = %27, %15
  %.reload = load i32, ptr %.reg2mem, align 4
  %51 = zext i32 %.reload to i64
  %52 = or i64 0, %51
  %53 = inttoptr i64 %52 to ptr
  %54 = ptrtoint ptr %53 to i64
  %55 = trunc i64 %54 to i32
  %56 = getelementptr [17 x ptr], ptr @Math, i32 0, i32 %55
  %57 = getelementptr ptr, ptr %56, i32 7
  %58 = load ptr, ptr %57, align 8
  ret ptr %58
}

define ptr @Math_B__Self_min_aPtrf64_bPtrf64__Self_min_aPtri32_bPtri32(ptr %0) {
  %.reg2mem = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = call ptr @llvm.invariant.start.p0(i64 16, ptr %0)
  %3 = getelementptr { ptr, ptr }, ptr %0, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr ptr, ptr %4, i32 1
  %6 = getelementptr ptr, ptr %4, i32 2
  %7 = getelementptr ptr, ptr %4, i32 3
  %8 = getelementptr ptr, ptr %4, i32 4
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 -757315540097298781, i64 ptrtoint (ptr @f64_typ to i64), ptr %12)
  %14 = select i1 %13, i32 12, i32 13
  store i32 %14, ptr %.reg2mem, align 4
  br i1 %13, label %15, label %27

15:                                               ; preds = %1
  %16 = getelementptr { ptr, ptr }, ptr %0, i32 0, i32 1
  %17 = load ptr, ptr %16, align 8
  %18 = getelementptr ptr, ptr %17, i32 1
  %19 = getelementptr ptr, ptr %17, i32 2
  %20 = getelementptr ptr, ptr %17, i32 3
  %21 = getelementptr ptr, ptr %17, i32 4
  %22 = load i64, ptr %18, align 4
  %23 = load i64, ptr %19, align 4
  %24 = load ptr, ptr %20, align 8
  %25 = load ptr, ptr %21, align 8
  %26 = call i1 @subtype_test_wrapper(ptr %24, i64 %23, i64 %22, i64 -757315540097298781, i64 ptrtoint (ptr @f64_typ to i64), ptr %25)
  br label %50

27:                                               ; preds = %1
  %28 = getelementptr { ptr, ptr }, ptr %0, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr ptr, ptr %29, i32 1
  %31 = getelementptr ptr, ptr %29, i32 2
  %32 = getelementptr ptr, ptr %29, i32 3
  %33 = getelementptr ptr, ptr %29, i32 4
  %34 = load i64, ptr %30, align 4
  %35 = load i64, ptr %31, align 4
  %36 = load ptr, ptr %32, align 8
  %37 = load ptr, ptr %33, align 8
  %38 = call i1 @subtype_test_wrapper(ptr %36, i64 %35, i64 %34, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %37)
  %39 = getelementptr { ptr, ptr }, ptr %0, i32 0, i32 1
  %40 = load ptr, ptr %39, align 8
  %41 = getelementptr ptr, ptr %40, i32 1
  %42 = getelementptr ptr, ptr %40, i32 2
  %43 = getelementptr ptr, ptr %40, i32 3
  %44 = getelementptr ptr, ptr %40, i32 4
  %45 = load i64, ptr %41, align 4
  %46 = load i64, ptr %42, align 4
  %47 = load ptr, ptr %43, align 8
  %48 = load ptr, ptr %44, align 8
  %49 = call i1 @subtype_test_wrapper(ptr %47, i64 %46, i64 %45, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %48)
  br label %50

50:                                               ; preds = %27, %15
  %.reload = load i32, ptr %.reg2mem, align 4
  %51 = zext i32 %.reload to i64
  %52 = or i64 0, %51
  %53 = inttoptr i64 %52 to ptr
  %54 = ptrtoint ptr %53 to i64
  %55 = trunc i64 %54 to i32
  %56 = getelementptr [17 x ptr], ptr @Math, i32 0, i32 %55
  %57 = getelementptr ptr, ptr %56, i32 7
  %58 = load ptr, ptr %57, align 8
  ret ptr %58
}

define ptr @Math_B__Self_round_xPtrf64(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %3 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr ptr, ptr %4, i32 1
  %6 = getelementptr ptr, ptr %4, i32 2
  %7 = getelementptr ptr, ptr %4, i32 3
  %8 = getelementptr ptr, ptr %4, i32 4
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 -757315540097298781, i64 ptrtoint (ptr @f64_typ to i64), ptr %12)
  %14 = load ptr, ptr getelementptr (ptr, ptr getelementptr ([17 x ptr], ptr @Math, i32 0, i32 14), i32 7), align 8
  ret ptr %14
}

define ptr @Math_B__Self_floor_xPtrf64(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %3 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr ptr, ptr %4, i32 1
  %6 = getelementptr ptr, ptr %4, i32 2
  %7 = getelementptr ptr, ptr %4, i32 3
  %8 = getelementptr ptr, ptr %4, i32 4
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 -757315540097298781, i64 ptrtoint (ptr @f64_typ to i64), ptr %12)
  %14 = load ptr, ptr getelementptr (ptr, ptr getelementptr ([17 x ptr], ptr @Math, i32 0, i32 15), i32 7), align 8
  ret ptr %14
}

define ptr @Math_B__Self_ceiling_xPtrf64(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %3 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr ptr, ptr %4, i32 1
  %6 = getelementptr ptr, ptr %4, i32 2
  %7 = getelementptr ptr, ptr %4, i32 3
  %8 = getelementptr ptr, ptr %4, i32 4
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 -757315540097298781, i64 ptrtoint (ptr @f64_typ to i64), ptr %12)
  %14 = load ptr, ptr getelementptr (ptr, ptr getelementptr ([17 x ptr], ptr @Math, i32 0, i32 16), i32 7), align 8
  ret ptr %14
}

define double @Math__Self_sqrt_xPtrf64(ptr %0, double %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call double @llvm.sqrt.f64(double %1)
  ret double %3
}

define { ptr, i64 } @Math__Self_abs_xPtrf64(ptr %0, { ptr, i64 } %1) {
  %3 = alloca { ptr, i64 }, align 8
  %.reg2mem = alloca { ptr, i64 }, align 8
  %.reg2mem1 = alloca { ptr, i64 }, align 8
  %.reg2mem3 = alloca { ptr, i64 }, align 8
  %.reg2mem5 = alloca double, align 8
  %.reg2mem9 = alloca { ptr, i64 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i64 } %1, ptr %3, align 8
  %4 = getelementptr { ptr, i64 }, ptr %3, i32 0, i32 1
  %5 = load double, ptr %4, align 8
  store double %5, ptr %.reg2mem5, align 8
  %.reload8 = load double, ptr %.reg2mem5, align 8
  %6 = fcmp oge double %.reload8, 0.000000e+00
  %7 = alloca i64, align 8
  %8 = alloca ptr, align 8
  %9 = alloca i64, align 8
  %10 = alloca double, align 8
  %11 = alloca double, align 8
  %12 = alloca double, align 8
  %13 = alloca double, align 8
  %14 = alloca i64, align 8
  %15 = alloca ptr, align 8
  %16 = alloca i64, align 8
  br i1 %6, label %17, label %23

17:                                               ; preds = %2
  %.reload7 = load double, ptr %.reg2mem5, align 8
  store double %.reload7, ptr %7, align 8
  store i64 ptrtoint (ptr @f64_typ to i64), ptr %9, align 4
  %18 = load i64, ptr %9, align 4
  store i64 %18, ptr %8, align 4
  %19 = load ptr, ptr %8, align 8
  %20 = insertvalue { ptr, i64 } undef, ptr %19, 0
  %21 = load i64, ptr %7, align 4
  %22 = insertvalue { ptr, i64 } %20, i64 %21, 1
  store { ptr, i64 } %22, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i64 }, ptr %.reg2mem3, align 8
  store { ptr, i64 } %.reload4, ptr %.reg2mem9, align 8
  br label %35

23:                                               ; preds = %2
  store double 0.000000e+00, ptr %10, align 8
  store double 1.000000e+00, ptr %11, align 8
  %24 = load double, ptr %10, align 8
  %25 = load double, ptr %11, align 8
  %26 = fsub double %24, %25
  store double %26, ptr %12, align 8
  %27 = load double, ptr %12, align 8
  %.reload6 = load double, ptr %.reg2mem5, align 8
  %28 = fmul double %27, %.reload6
  store double %28, ptr %13, align 8
  %29 = load double, ptr %13, align 8
  store double %29, ptr %14, align 8
  store i64 ptrtoint (ptr @f64_typ to i64), ptr %16, align 4
  %30 = load i64, ptr %16, align 4
  store i64 %30, ptr %15, align 4
  %31 = load ptr, ptr %15, align 8
  %32 = insertvalue { ptr, i64 } undef, ptr %31, 0
  %33 = load i64, ptr %14, align 4
  %34 = insertvalue { ptr, i64 } %32, i64 %33, 1
  store { ptr, i64 } %34, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i64 }, ptr %.reg2mem1, align 8
  store { ptr, i64 } %.reload2, ptr %.reg2mem9, align 8
  br label %35

35:                                               ; preds = %23, %17
  %.reload10 = load { ptr, i64 }, ptr %.reg2mem9, align 8
  store { ptr, i64 } %.reload10, ptr %.reg2mem, align 8
  br label %36

36:                                               ; preds = %35
  %.reload = load { ptr, i64 }, ptr %.reg2mem, align 8
  ret { ptr, i64 } %.reload
}

define { ptr, i64 } @Math__Self_abs_xPtri32(ptr %0, { ptr, i64 } %1) {
  %3 = alloca { ptr, i64 }, align 8
  %.reg2mem = alloca { ptr, i64 }, align 8
  %.reg2mem1 = alloca { ptr, i64 }, align 8
  %.reg2mem3 = alloca { ptr, i64 }, align 8
  %.reg2mem5 = alloca i32, align 4
  %.reg2mem9 = alloca { ptr, i64 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i64 } %1, ptr %3, align 8
  %4 = getelementptr { ptr, i64 }, ptr %3, i32 0, i32 1
  %5 = load i32, ptr %4, align 4
  store i32 %5, ptr %.reg2mem5, align 4
  %.reload8 = load i32, ptr %.reg2mem5, align 4
  %6 = icmp sge i32 %.reload8, 0
  %7 = alloca i64, align 8
  %8 = alloca ptr, align 8
  %9 = alloca i64, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i64, align 8
  %13 = alloca ptr, align 8
  %14 = alloca i64, align 8
  br i1 %6, label %15, label %21

15:                                               ; preds = %2
  %.reload7 = load i32, ptr %.reg2mem5, align 4
  store i32 %.reload7, ptr %7, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %9, align 4
  %16 = load i64, ptr %9, align 4
  store i64 %16, ptr %8, align 4
  %17 = load ptr, ptr %8, align 8
  %18 = insertvalue { ptr, i64 } undef, ptr %17, 0
  %19 = load i64, ptr %7, align 4
  %20 = insertvalue { ptr, i64 } %18, i64 %19, 1
  store { ptr, i64 } %20, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i64 }, ptr %.reg2mem3, align 8
  store { ptr, i64 } %.reload4, ptr %.reg2mem9, align 8
  br label %30

21:                                               ; preds = %2
  store i32 -1, ptr %10, align 4
  %22 = load i32, ptr %10, align 4
  %.reload6 = load i32, ptr %.reg2mem5, align 4
  %23 = mul i32 %22, %.reload6
  store i32 %23, ptr %11, align 4
  %24 = load i32, ptr %11, align 4
  store i32 %24, ptr %12, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %14, align 4
  %25 = load i64, ptr %14, align 4
  store i64 %25, ptr %13, align 4
  %26 = load ptr, ptr %13, align 8
  %27 = insertvalue { ptr, i64 } undef, ptr %26, 0
  %28 = load i64, ptr %12, align 4
  %29 = insertvalue { ptr, i64 } %27, i64 %28, 1
  store { ptr, i64 } %29, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i64 }, ptr %.reg2mem1, align 8
  store { ptr, i64 } %.reload2, ptr %.reg2mem9, align 8
  br label %30

30:                                               ; preds = %21, %15
  %.reload10 = load { ptr, i64 }, ptr %.reg2mem9, align 8
  store { ptr, i64 } %.reload10, ptr %.reg2mem, align 8
  br label %31

31:                                               ; preds = %30
  %.reload = load { ptr, i64 }, ptr %.reg2mem, align 8
  ret { ptr, i64 } %.reload
}

define { ptr, i64 } @Math__Self_max_aPtri32_bPtri32(ptr %0, { ptr, i64 } %1, { ptr, i64 } %2) {
  %4 = alloca { ptr, i64 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i64 } %1, ptr %4, align 8
  %5 = alloca i32, align 4
  %6 = getelementptr { ptr, i64 }, ptr %4, i32 0, i32 1
  %7 = load i32, ptr %6, align 4
  store i32 %7, ptr %5, align 4
  %8 = alloca { ptr, i64 }, align 8
  store { ptr, i64 } %2, ptr %8, align 8
  %9 = alloca i32, align 4
  %10 = getelementptr { ptr, i64 }, ptr %8, i32 0, i32 1
  %11 = load i32, ptr %10, align 4
  store i32 %11, ptr %9, align 4
  %12 = load i32, ptr %5, align 4
  %13 = load i32, ptr %9, align 4
  %14 = icmp sgt i32 %12, %13
  %15 = select i1 %14, ptr %5, ptr %9
  %16 = alloca i64, align 8
  %17 = alloca ptr, align 8
  %18 = load i32, ptr %15, align 4
  store i32 %18, ptr %16, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %17, align 4
  %19 = load ptr, ptr %17, align 8
  %20 = insertvalue { ptr, i64 } undef, ptr %19, 0
  %21 = load i64, ptr %16, align 4
  %22 = insertvalue { ptr, i64 } %20, i64 %21, 1
  ret { ptr, i64 } %22
}

define { ptr, i64 } @Math__Self_max_aPtrf64_bPtrf64(ptr %0, { ptr, i64 } %1, { ptr, i64 } %2) {
  %4 = alloca { ptr, i64 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i64 } %1, ptr %4, align 8
  %5 = alloca double, align 8
  %6 = getelementptr { ptr, i64 }, ptr %4, i32 0, i32 1
  %7 = load double, ptr %6, align 8
  store double %7, ptr %5, align 8
  %8 = alloca { ptr, i64 }, align 8
  store { ptr, i64 } %2, ptr %8, align 8
  %9 = alloca double, align 8
  %10 = getelementptr { ptr, i64 }, ptr %8, i32 0, i32 1
  %11 = load double, ptr %10, align 8
  store double %11, ptr %9, align 8
  %12 = load double, ptr %5, align 8
  %13 = load double, ptr %9, align 8
  %14 = fcmp ogt double %12, %13
  %15 = select i1 %14, ptr %5, ptr %9
  %16 = alloca i64, align 8
  %17 = alloca ptr, align 8
  %18 = load double, ptr %15, align 8
  store double %18, ptr %16, align 8
  store i64 ptrtoint (ptr @f64_typ to i64), ptr %17, align 4
  %19 = load ptr, ptr %17, align 8
  %20 = insertvalue { ptr, i64 } undef, ptr %19, 0
  %21 = load i64, ptr %16, align 4
  %22 = insertvalue { ptr, i64 } %20, i64 %21, 1
  ret { ptr, i64 } %22
}

define { ptr, i64 } @Math__Self_min_aPtrf64_bPtrf64(ptr %0, { ptr, i64 } %1, { ptr, i64 } %2) {
  %4 = alloca { ptr, i64 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i64 } %1, ptr %4, align 8
  %5 = alloca double, align 8
  %6 = getelementptr { ptr, i64 }, ptr %4, i32 0, i32 1
  %7 = load double, ptr %6, align 8
  store double %7, ptr %5, align 8
  %8 = alloca { ptr, i64 }, align 8
  store { ptr, i64 } %2, ptr %8, align 8
  %9 = alloca double, align 8
  %10 = getelementptr { ptr, i64 }, ptr %8, i32 0, i32 1
  %11 = load double, ptr %10, align 8
  store double %11, ptr %9, align 8
  %12 = load double, ptr %5, align 8
  %13 = load double, ptr %9, align 8
  %14 = fcmp olt double %12, %13
  %15 = select i1 %14, ptr %5, ptr %9
  %16 = alloca i64, align 8
  %17 = alloca ptr, align 8
  %18 = load double, ptr %15, align 8
  store double %18, ptr %16, align 8
  store i64 ptrtoint (ptr @f64_typ to i64), ptr %17, align 4
  %19 = load ptr, ptr %17, align 8
  %20 = insertvalue { ptr, i64 } undef, ptr %19, 0
  %21 = load i64, ptr %16, align 4
  %22 = insertvalue { ptr, i64 } %20, i64 %21, 1
  ret { ptr, i64 } %22
}

define { ptr, i64 } @Math__Self_min_aPtri32_bPtri32(ptr %0, { ptr, i64 } %1, { ptr, i64 } %2) {
  %4 = alloca { ptr, i64 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i64 } %1, ptr %4, align 8
  %5 = alloca i32, align 4
  %6 = getelementptr { ptr, i64 }, ptr %4, i32 0, i32 1
  %7 = load i32, ptr %6, align 4
  store i32 %7, ptr %5, align 4
  %8 = alloca { ptr, i64 }, align 8
  store { ptr, i64 } %2, ptr %8, align 8
  %9 = alloca i32, align 4
  %10 = getelementptr { ptr, i64 }, ptr %8, i32 0, i32 1
  %11 = load i32, ptr %10, align 4
  store i32 %11, ptr %9, align 4
  %12 = load i32, ptr %5, align 4
  %13 = load i32, ptr %9, align 4
  %14 = icmp slt i32 %12, %13
  %15 = select i1 %14, ptr %5, ptr %9
  %16 = alloca i64, align 8
  %17 = alloca ptr, align 8
  %18 = load i32, ptr %15, align 4
  store i32 %18, ptr %16, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %17, align 4
  %19 = load ptr, ptr %17, align 8
  %20 = insertvalue { ptr, i64 } undef, ptr %19, 0
  %21 = load i64, ptr %16, align 4
  %22 = insertvalue { ptr, i64 } %20, i64 %21, 1
  ret { ptr, i64 } %22
}

define double @Math__Self_round_xPtrf64(ptr %0, double %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call double @llvm.round.f64(double %1)
  ret double %3
}

define double @Math__Self_floor_xPtrf64(ptr %0, double %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call double @llvm.floor.f64(double %1)
  ret double %3
}

define double @Math__Self_ceiling_xPtrf64(ptr %0, double %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call double @llvm.ceil.f64(double %1)
  ret double %3
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.ceil.f64(double) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.floor.f64(double) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.round.f64(double) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.sqrt.f64(double) #1

define ptr @MapIterable_B_init_iterableIntIterable_fFunctionPtri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [52 x ptr], ptr %26, i32 0, i32 14
  %28 = getelementptr ptr, ptr %27, i32 7
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @MapIterable_B_each_fFunctionPtri32_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 15
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @MapIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [52 x ptr], ptr %26, i32 0, i32 16
  %28 = getelementptr ptr, ptr %27, i32 7
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @MapIterable_B_all_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 17
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @MapIterable_B_any_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 18
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @MapIterable_B_map_fFunctionPtri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 19
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @MapIterable_B_filter_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 20
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @MapIterable_B_chain_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 21
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @MapIterable_B_interleave_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 22
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @MapIterable_B_zip_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 23
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @MapIterable_B_product_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 24
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @MapIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [52 x ptr], ptr %4, i32 0, i32 25
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @MapIterable_init_iterableIntIterable_fFunctionPtri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @MapIterable)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @IntIterable)
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %45 = load ptr, ptr %43, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %48 = load i32, ptr %46, align 4
  store i32 %48, ptr %47, align 4
  call void @set_offset(ptr %36, ptr @IntIterable)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %8, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 416, ptr %51)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = getelementptr ptr, ptr %51, i32 %54
  %56 = load ptr, ptr %55, align 8
  %57 = getelementptr { ptr, ptr }, ptr %56, i32 0, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %63 = load ptr, ptr %62, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %63, 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %66 = load ptr, ptr %65, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %66, 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %69 = load i32, ptr %68, align 4
  %70 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %69, 3
  call void %58(ptr %50, { ptr, ptr, ptr, i32 } %70)
  %71 = alloca ptr, align 8
  store { ptr } %4, ptr %71, align 8
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %73 = load ptr, ptr %72, align 8
  %74 = load ptr, ptr %8, align 8
  %75 = call ptr @llvm.invariant.start.p0(i64 416, ptr %74)
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %77 = load i32, ptr %76, align 4
  %78 = getelementptr ptr, ptr %74, i32 %77
  %79 = getelementptr ptr, ptr %78, i32 1
  %80 = load ptr, ptr %79, align 8
  %81 = getelementptr { ptr, ptr }, ptr %80, i32 0, i32 1
  %82 = load ptr, ptr %81, align 8
  %83 = load ptr, ptr %71, align 8
  %84 = insertvalue { ptr } undef, ptr %83, 0
  call void %82(ptr %73, { ptr } %84)
  ret void
}

define void @IntIterable_each_fFunctionPtri32_to_Nothing({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem8 = alloca ptr, align 8
  %.reg2mem10 = alloca ptr, align 8
  %.reg2mem12 = alloca ptr, align 8
  %.reg2mem14 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @IntIterable)
  %20 = alloca ptr, align 8
  store { ptr } %3, ptr %20, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %22 = load ptr, ptr %21, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %22, 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %25 = load ptr, ptr %24, align 8
  %26 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %25, 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %28 = load ptr, ptr %27, align 8
  %29 = insertvalue { ptr, ptr, ptr, i32 } %26, ptr %28, 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %31 = load i32, ptr %30, align 4
  %32 = insertvalue { ptr, ptr, ptr, i32 } %29, i32 %31, 3
  %33 = alloca [0 x ptr], align 8
  %34 = call ptr @llvm.invariant.start.p0(i64 0, ptr %33)
  %35 = call ptr @llvm.invariant.start.p0(i64 192, ptr %22)
  %36 = getelementptr ptr, ptr %22, i32 %31
  %37 = getelementptr ptr, ptr %36, i32 10
  %38 = load ptr, ptr %37, align 8
  %39 = alloca {}, align 8
  %40 = call ptr %38({ ptr, ptr, ptr, i32 } %32, ptr %39)
  %41 = call { ptr, ptr, ptr, i32 } %40({ ptr, ptr, ptr, i32 } %32, { ptr, ptr, ptr, i32 } %32, ptr %33)
  %42 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %41, ptr %42, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 16, ptr %42)
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 0
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 0
  %47 = load ptr, ptr %45, align 8
  store ptr %47, ptr %46, align 8
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 1
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 1
  %50 = load ptr, ptr %48, align 8
  store ptr %50, ptr %49, align 8
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 2
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 2
  %53 = load ptr, ptr %51, align 8
  store ptr %53, ptr %52, align 8
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 3
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 3
  %56 = load i32, ptr %54, align 4
  store i32 %56, ptr %55, align 4
  call void @set_offset(ptr %44, ptr @IntIterator)
  %57 = alloca { ptr, ptr, ptr, i32 }, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 0
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 0
  %60 = load ptr, ptr %58, align 8
  store ptr %60, ptr %59, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 1
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 1
  %63 = load ptr, ptr %61, align 8
  store ptr %63, ptr %62, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 2
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 2
  %66 = load ptr, ptr %64, align 8
  store ptr %66, ptr %65, align 8
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 3
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 3
  %69 = load i32, ptr %67, align 4
  store i32 %69, ptr %68, align 4
  call void @set_offset(ptr %57, ptr @IntIterator)
  %70 = alloca { ptr, ptr, ptr, i32 }, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 0
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 0
  %73 = load ptr, ptr %71, align 8
  store ptr %73, ptr %72, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 1
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 1
  %76 = load ptr, ptr %74, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 2
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 2
  %79 = load ptr, ptr %77, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 3
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 3
  %82 = load i32, ptr %80, align 4
  store i32 %82, ptr %81, align 4
  %83 = call ptr @llvm.invariant.start.p0(i64 16, ptr %70)
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 0
  store ptr %84, ptr %.reg2mem14, align 8
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 1
  store ptr %85, ptr %.reg2mem12, align 8
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 2
  store ptr %86, ptr %.reg2mem10, align 8
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 3
  store ptr %87, ptr %.reg2mem8, align 8
  %88 = alloca [0 x ptr], align 8
  %89 = alloca {}, align 8
  %90 = alloca { ptr, i32 }, align 8
  %91 = alloca i64, align 8
  %92 = alloca i1, align 1
  %93 = alloca i32, align 4
  br label %94

94:                                               ; preds = %._crit_edge1, %4
  %.reload15 = load ptr, ptr %.reg2mem14, align 8
  %95 = load ptr, ptr %.reload15, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %95, 0
  %.reload13 = load ptr, ptr %.reg2mem12, align 8
  %97 = load ptr, ptr %.reload13, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } %96, ptr %97, 1
  %.reload11 = load ptr, ptr %.reg2mem10, align 8
  %99 = load ptr, ptr %.reload11, align 8
  %100 = insertvalue { ptr, ptr, ptr, i32 } %98, ptr %99, 2
  %.reload9 = load ptr, ptr %.reg2mem8, align 8
  %101 = load i32, ptr %.reload9, align 4
  %102 = insertvalue { ptr, ptr, ptr, i32 } %100, i32 %101, 3
  %103 = call ptr @llvm.invariant.start.p0(i64 0, ptr %88)
  %104 = call ptr @llvm.invariant.start.p0(i64 16, ptr %95)
  %105 = getelementptr ptr, ptr %95, i32 %101
  %106 = load ptr, ptr %105, align 8
  %107 = call ptr %106({ ptr, ptr, ptr, i32 } %102, ptr %89)
  %108 = call { ptr, i32 } %107({ ptr, ptr, ptr, i32 } %102, { ptr, ptr, ptr, i32 } %102, ptr %88)
  store ptr %90, ptr %.reg2mem3, align 8
  %.reload7 = load ptr, ptr %.reg2mem3, align 8
  store { ptr, i32 } %108, ptr %.reload7, align 8
  %.reload6 = load ptr, ptr %.reg2mem3, align 8
  %109 = getelementptr { ptr, i32 }, ptr %.reload6, i32 0, i32 0
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %91, align 4
  %110 = load ptr, ptr %109, align 8
  %111 = ptrtoint ptr %110 to i64
  %112 = load ptr, ptr %91, align 8
  %113 = ptrtoint ptr %112 to i64
  %114 = icmp eq i64 %111, %113
  %115 = icmp eq i64 %111, 0
  %116 = or i1 %114, %115
  %117 = icmp eq i1 %116, false
  store i1 %117, ptr %92, align 1
  %118 = load i1, ptr %92, align 1
  store i1 %118, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %119, label %._crit_edge

._crit_edge:                                      ; preds = %94
  br label %125

119:                                              ; preds = %94
  %.reload5 = load ptr, ptr %.reg2mem3, align 8
  %120 = getelementptr { ptr, i32 }, ptr %.reload5, i32 0, i32 1
  %121 = load i32, ptr %120, align 4
  store i32 %121, ptr %93, align 4
  %122 = load i32, ptr %93, align 4
  %123 = load ptr, ptr %20, align 8
  call void %123(i32 %122)
  %124 = load i32, ptr %93, align 4
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  store i32 %124, ptr %.reload4, align 4
  br label %125

125:                                              ; preds = %119, %._crit_edge
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %126

._crit_edge1:                                     ; preds = %125
  br label %94

126:                                              ; preds = %125
  ret void
}

define i32 @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3, { ptr } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i32, align 4
  %.reg2mem5 = alloca i1, align 1
  %.reg2mem8 = alloca ptr, align 8
  %.reg2mem13 = alloca i32, align 4
  %.reg2mem17 = alloca ptr, align 8
  %.reg2mem19 = alloca ptr, align 8
  %.reg2mem21 = alloca ptr, align 8
  %.reg2mem23 = alloca ptr, align 8
  %.reg2mem25 = alloca i32, align 4
  %.reg2mem27 = alloca i32, align 4
  %.reg2mem29 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @IntIterable)
  %21 = alloca ptr, align 8
  store { ptr } %4, ptr %21, align 8
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %23 = load ptr, ptr %22, align 8
  %24 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %23, 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %26 = load ptr, ptr %25, align 8
  %27 = insertvalue { ptr, ptr, ptr, i32 } %24, ptr %26, 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %29 = load ptr, ptr %28, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } %27, ptr %29, 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %32 = load i32, ptr %31, align 4
  %33 = insertvalue { ptr, ptr, ptr, i32 } %30, i32 %32, 3
  %34 = alloca [0 x ptr], align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 0, ptr %34)
  %36 = call ptr @llvm.invariant.start.p0(i64 192, ptr %23)
  %37 = getelementptr ptr, ptr %23, i32 %32
  %38 = getelementptr ptr, ptr %37, i32 10
  %39 = load ptr, ptr %38, align 8
  %40 = alloca {}, align 8
  %41 = call ptr %39({ ptr, ptr, ptr, i32 } %33, ptr %40)
  %42 = call { ptr, ptr, ptr, i32 } %41({ ptr, ptr, ptr, i32 } %33, { ptr, ptr, ptr, i32 } %33, ptr %34)
  %43 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %42, ptr %43, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 16, ptr %43)
  %45 = alloca { ptr, ptr, ptr, i32 }, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 0
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %48 = load ptr, ptr %46, align 8
  store ptr %48, ptr %47, align 8
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 1
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %51 = load ptr, ptr %49, align 8
  store ptr %51, ptr %50, align 8
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 2
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %54 = load ptr, ptr %52, align 8
  store ptr %54, ptr %53, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %43, i32 0, i32 3
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %57 = load i32, ptr %55, align 4
  store i32 %57, ptr %56, align 4
  call void @set_offset(ptr %45, ptr @IntIterator)
  %58 = alloca { ptr, ptr, ptr, i32 }, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 0
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 0
  %61 = load ptr, ptr %59, align 8
  store ptr %61, ptr %60, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 1
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 1
  %64 = load ptr, ptr %62, align 8
  store ptr %64, ptr %63, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 2
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 2
  %67 = load ptr, ptr %65, align 8
  store ptr %67, ptr %66, align 8
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %45, i32 0, i32 3
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 3
  %70 = load i32, ptr %68, align 4
  store i32 %70, ptr %69, align 4
  call void @set_offset(ptr %58, ptr @IntIterator)
  %71 = alloca { ptr, ptr, ptr, i32 }, align 8
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 0
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 0
  %74 = load ptr, ptr %72, align 8
  store ptr %74, ptr %73, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 1
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 1
  %77 = load ptr, ptr %75, align 8
  store ptr %77, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 2
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 2
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %58, i32 0, i32 3
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 3
  %83 = load i32, ptr %81, align 4
  store i32 %83, ptr %82, align 4
  %84 = call ptr @llvm.invariant.start.p0(i64 16, ptr %71)
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 0
  store ptr %85, ptr %.reg2mem23, align 8
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 1
  store ptr %86, ptr %.reg2mem21, align 8
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 2
  store ptr %87, ptr %.reg2mem19, align 8
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 3
  store ptr %88, ptr %.reg2mem17, align 8
  store i32 %3, ptr %.reg2mem29, align 4
  %89 = alloca [0 x ptr], align 8
  %90 = alloca {}, align 8
  %91 = alloca { ptr, i32 }, align 8
  %92 = alloca i64, align 8
  %93 = alloca i1, align 1
  %94 = alloca i32, align 4
  %95 = alloca i32, align 4
  br label %96

96:                                               ; preds = %132, %5
  %.reload30 = load i32, ptr %.reg2mem29, align 4
  store i32 %.reload30, ptr %.reg2mem13, align 4
  %.reload24 = load ptr, ptr %.reg2mem23, align 8
  %97 = load ptr, ptr %.reload24, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %97, 0
  %.reload22 = load ptr, ptr %.reg2mem21, align 8
  %99 = load ptr, ptr %.reload22, align 8
  %100 = insertvalue { ptr, ptr, ptr, i32 } %98, ptr %99, 1
  %.reload20 = load ptr, ptr %.reg2mem19, align 8
  %101 = load ptr, ptr %.reload20, align 8
  %102 = insertvalue { ptr, ptr, ptr, i32 } %100, ptr %101, 2
  %.reload18 = load ptr, ptr %.reg2mem17, align 8
  %103 = load i32, ptr %.reload18, align 4
  %104 = insertvalue { ptr, ptr, ptr, i32 } %102, i32 %103, 3
  %105 = call ptr @llvm.invariant.start.p0(i64 0, ptr %89)
  %106 = call ptr @llvm.invariant.start.p0(i64 16, ptr %97)
  %107 = getelementptr ptr, ptr %97, i32 %103
  %108 = load ptr, ptr %107, align 8
  %109 = call ptr %108({ ptr, ptr, ptr, i32 } %104, ptr %90)
  %110 = call { ptr, i32 } %109({ ptr, ptr, ptr, i32 } %104, { ptr, ptr, ptr, i32 } %104, ptr %89)
  store ptr %91, ptr %.reg2mem8, align 8
  %.reload12 = load ptr, ptr %.reg2mem8, align 8
  store { ptr, i32 } %110, ptr %.reload12, align 8
  %.reload11 = load ptr, ptr %.reg2mem8, align 8
  %111 = getelementptr { ptr, i32 }, ptr %.reload11, i32 0, i32 0
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %92, align 4
  %112 = load ptr, ptr %111, align 8
  %113 = ptrtoint ptr %112 to i64
  %114 = load ptr, ptr %92, align 8
  %115 = ptrtoint ptr %114 to i64
  %116 = icmp eq i64 %113, %115
  %117 = icmp eq i64 %113, 0
  %118 = or i1 %116, %117
  %119 = icmp eq i1 %118, false
  store i1 %119, ptr %93, align 1
  %120 = load i1, ptr %93, align 1
  store i1 %120, ptr %.reg2mem5, align 1
  %.reload7 = load i1, ptr %.reg2mem5, align 1
  br i1 %.reload7, label %121, label %129

121:                                              ; preds = %96
  %.reload10 = load ptr, ptr %.reg2mem8, align 8
  %122 = getelementptr { ptr, i32 }, ptr %.reload10, i32 0, i32 1
  %123 = load i32, ptr %122, align 4
  store i32 %123, ptr %94, align 4
  %124 = load i32, ptr %94, align 4
  %125 = load ptr, ptr %21, align 8
  %.reload16 = load i32, ptr %.reg2mem13, align 4
  %126 = call i32 %125(i32 %.reload16, i32 %124)
  store i32 %126, ptr %95, align 4
  %127 = load i32, ptr %95, align 4
  store i32 %127, ptr %.reg2mem3, align 4
  %128 = load i32, ptr %94, align 4
  %.reload9 = load ptr, ptr %.reg2mem8, align 8
  store i32 %128, ptr %.reload9, align 4
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  store i32 %.reload4, ptr %.reg2mem27, align 4
  br label %130

129:                                              ; preds = %96
  store i32 poison, ptr %.reg2mem27, align 4
  br label %130

130:                                              ; preds = %129, %121
  %.reload28 = load i32, ptr %.reg2mem27, align 4
  store i32 %.reload28, ptr %.reg2mem1, align 4
  br label %131

131:                                              ; preds = %130
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  %.reload6 = load i1, ptr %.reg2mem5, align 1
  %.reload15 = load i32, ptr %.reg2mem13, align 4
  store i32 %.reload2, ptr %.reg2mem25, align 4
  br i1 %.reload6, label %132, label %133

132:                                              ; preds = %131
  %.reload26 = load i32, ptr %.reg2mem25, align 4
  store i32 %.reload26, ptr %.reg2mem, align 4
  %.reload = load i32, ptr %.reg2mem, align 4
  store i32 %.reload, ptr %.reg2mem29, align 4
  br label %96

133:                                              ; preds = %131
  %.reload14 = load i32, ptr %.reg2mem13, align 4
  ret i32 %.reload14
}

define i1 @IntIterable_all_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i1, align 1
  %.reg2mem6 = alloca ptr, align 8
  %.reg2mem10 = alloca ptr, align 8
  %.reg2mem12 = alloca ptr, align 8
  %.reg2mem14 = alloca ptr, align 8
  %.reg2mem16 = alloca ptr, align 8
  %.reg2mem18 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @IntIterable)
  %20 = alloca ptr, align 8
  store { ptr } %3, ptr %20, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %22 = load ptr, ptr %21, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %22, 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %25 = load ptr, ptr %24, align 8
  %26 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %25, 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %28 = load ptr, ptr %27, align 8
  %29 = insertvalue { ptr, ptr, ptr, i32 } %26, ptr %28, 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %31 = load i32, ptr %30, align 4
  %32 = insertvalue { ptr, ptr, ptr, i32 } %29, i32 %31, 3
  %33 = alloca [0 x ptr], align 8
  %34 = call ptr @llvm.invariant.start.p0(i64 0, ptr %33)
  %35 = call ptr @llvm.invariant.start.p0(i64 192, ptr %22)
  %36 = getelementptr ptr, ptr %22, i32 %31
  %37 = getelementptr ptr, ptr %36, i32 10
  %38 = load ptr, ptr %37, align 8
  %39 = alloca {}, align 8
  %40 = call ptr %38({ ptr, ptr, ptr, i32 } %32, ptr %39)
  %41 = call { ptr, ptr, ptr, i32 } %40({ ptr, ptr, ptr, i32 } %32, { ptr, ptr, ptr, i32 } %32, ptr %33)
  %42 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %41, ptr %42, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 16, ptr %42)
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 0
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 0
  %47 = load ptr, ptr %45, align 8
  store ptr %47, ptr %46, align 8
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 1
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 1
  %50 = load ptr, ptr %48, align 8
  store ptr %50, ptr %49, align 8
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 2
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 2
  %53 = load ptr, ptr %51, align 8
  store ptr %53, ptr %52, align 8
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 3
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 3
  %56 = load i32, ptr %54, align 4
  store i32 %56, ptr %55, align 4
  call void @set_offset(ptr %44, ptr @IntIterator)
  %57 = alloca { ptr, ptr, ptr, i32 }, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 0
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 0
  %60 = load ptr, ptr %58, align 8
  store ptr %60, ptr %59, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 1
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 1
  %63 = load ptr, ptr %61, align 8
  store ptr %63, ptr %62, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 2
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 2
  %66 = load ptr, ptr %64, align 8
  store ptr %66, ptr %65, align 8
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 3
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 3
  %69 = load i32, ptr %67, align 4
  store i32 %69, ptr %68, align 4
  call void @set_offset(ptr %57, ptr @IntIterator)
  %70 = alloca { ptr, ptr, ptr, i32 }, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 0
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 0
  %73 = load ptr, ptr %71, align 8
  store ptr %73, ptr %72, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 1
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 1
  %76 = load ptr, ptr %74, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 2
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 2
  %79 = load ptr, ptr %77, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 3
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 3
  %82 = load i32, ptr %80, align 4
  store i32 %82, ptr %81, align 4
  %83 = call ptr @llvm.invariant.start.p0(i64 16, ptr %70)
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 0
  store ptr %84, ptr %.reg2mem16, align 8
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 1
  store ptr %85, ptr %.reg2mem14, align 8
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 2
  store ptr %86, ptr %.reg2mem12, align 8
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 3
  store ptr %87, ptr %.reg2mem10, align 8
  %88 = alloca [0 x ptr], align 8
  %89 = alloca {}, align 8
  %90 = alloca { ptr, i32 }, align 8
  %91 = alloca i64, align 8
  %92 = alloca i1, align 1
  %93 = alloca i32, align 4
  %94 = alloca i1, align 1
  %95 = alloca i1, align 1
  br label %96

96:                                               ; preds = %134, %4
  %.reload17 = load ptr, ptr %.reg2mem16, align 8
  %97 = load ptr, ptr %.reload17, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %97, 0
  %.reload15 = load ptr, ptr %.reg2mem14, align 8
  %99 = load ptr, ptr %.reload15, align 8
  %100 = insertvalue { ptr, ptr, ptr, i32 } %98, ptr %99, 1
  %.reload13 = load ptr, ptr %.reg2mem12, align 8
  %101 = load ptr, ptr %.reload13, align 8
  %102 = insertvalue { ptr, ptr, ptr, i32 } %100, ptr %101, 2
  %.reload11 = load ptr, ptr %.reg2mem10, align 8
  %103 = load i32, ptr %.reload11, align 4
  %104 = insertvalue { ptr, ptr, ptr, i32 } %102, i32 %103, 3
  %105 = call ptr @llvm.invariant.start.p0(i64 0, ptr %88)
  %106 = call ptr @llvm.invariant.start.p0(i64 16, ptr %97)
  %107 = getelementptr ptr, ptr %97, i32 %103
  %108 = load ptr, ptr %107, align 8
  %109 = call ptr %108({ ptr, ptr, ptr, i32 } %104, ptr %89)
  %110 = call { ptr, i32 } %109({ ptr, ptr, ptr, i32 } %104, { ptr, ptr, ptr, i32 } %104, ptr %88)
  store ptr %90, ptr %.reg2mem6, align 8
  %.reload9 = load ptr, ptr %.reg2mem6, align 8
  store { ptr, i32 } %110, ptr %.reload9, align 8
  %.reload8 = load ptr, ptr %.reg2mem6, align 8
  %111 = getelementptr { ptr, i32 }, ptr %.reload8, i32 0, i32 0
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %91, align 4
  %112 = load ptr, ptr %111, align 8
  %113 = ptrtoint ptr %112 to i64
  %114 = load ptr, ptr %91, align 8
  %115 = ptrtoint ptr %114 to i64
  %116 = icmp eq i64 %113, %115
  %117 = icmp eq i64 %113, 0
  %118 = or i1 %116, %117
  %119 = icmp eq i1 %118, false
  store i1 %119, ptr %92, align 1
  %120 = load i1, ptr %92, align 1
  %121 = xor i1 %120, true
  store i1 %121, ptr %.reg2mem3, align 1
  br i1 %120, label %122, label %130

122:                                              ; preds = %96
  %.reload7 = load ptr, ptr %.reg2mem6, align 8
  %123 = getelementptr { ptr, i32 }, ptr %.reload7, i32 0, i32 1
  %124 = load i32, ptr %123, align 4
  store i32 %124, ptr %93, align 4
  %125 = load i32, ptr %93, align 4
  %126 = load ptr, ptr %20, align 8
  %127 = call i1 %126(i32 %125)
  store i1 %127, ptr %94, align 1
  %128 = load i1, ptr %94, align 1
  %129 = zext i1 %128 to i32
  store i32 %129, ptr %.reg2mem1, align 4
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem18, align 4
  br label %131

130:                                              ; preds = %96
  store i32 0, ptr %.reg2mem18, align 4
  br label %131

131:                                              ; preds = %130, %122
  %.reload19 = load i32, ptr %.reg2mem18, align 4
  store i32 %.reload19, ptr %.reg2mem, align 4
  br label %132

132:                                              ; preds = %131
  %.reload = load i32, ptr %.reg2mem, align 4
  %133 = trunc i32 %.reload to i1
  %.reload5 = load i1, ptr %.reg2mem3, align 1
  br i1 %133, label %134, label %135

134:                                              ; preds = %132
  br label %96

135:                                              ; preds = %132
  %.reload4 = load i1, ptr %.reg2mem3, align 1
  store i1 %.reload4, ptr %95, align 1
  %136 = load i1, ptr %95, align 1
  ret i1 %136
}

define i1 @IntIterable_any_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem7 = alloca i1, align 1
  %.reg2mem11 = alloca ptr, align 8
  %.reg2mem16 = alloca ptr, align 8
  %.reg2mem18 = alloca ptr, align 8
  %.reg2mem20 = alloca ptr, align 8
  %.reg2mem22 = alloca ptr, align 8
  %.reg2mem24 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @IntIterable)
  %20 = alloca ptr, align 8
  store { ptr } %3, ptr %20, align 8
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %22 = load ptr, ptr %21, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %22, 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %25 = load ptr, ptr %24, align 8
  %26 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %25, 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %28 = load ptr, ptr %27, align 8
  %29 = insertvalue { ptr, ptr, ptr, i32 } %26, ptr %28, 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %31 = load i32, ptr %30, align 4
  %32 = insertvalue { ptr, ptr, ptr, i32 } %29, i32 %31, 3
  %33 = alloca [0 x ptr], align 8
  %34 = call ptr @llvm.invariant.start.p0(i64 0, ptr %33)
  %35 = call ptr @llvm.invariant.start.p0(i64 192, ptr %22)
  %36 = getelementptr ptr, ptr %22, i32 %31
  %37 = getelementptr ptr, ptr %36, i32 10
  %38 = load ptr, ptr %37, align 8
  %39 = alloca {}, align 8
  %40 = call ptr %38({ ptr, ptr, ptr, i32 } %32, ptr %39)
  %41 = call { ptr, ptr, ptr, i32 } %40({ ptr, ptr, ptr, i32 } %32, { ptr, ptr, ptr, i32 } %32, ptr %33)
  %42 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %41, ptr %42, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 16, ptr %42)
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 0
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 0
  %47 = load ptr, ptr %45, align 8
  store ptr %47, ptr %46, align 8
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 1
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 1
  %50 = load ptr, ptr %48, align 8
  store ptr %50, ptr %49, align 8
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 2
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 2
  %53 = load ptr, ptr %51, align 8
  store ptr %53, ptr %52, align 8
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 3
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 3
  %56 = load i32, ptr %54, align 4
  store i32 %56, ptr %55, align 4
  call void @set_offset(ptr %44, ptr @IntIterator)
  %57 = alloca { ptr, ptr, ptr, i32 }, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 0
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 0
  %60 = load ptr, ptr %58, align 8
  store ptr %60, ptr %59, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 1
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 1
  %63 = load ptr, ptr %61, align 8
  store ptr %63, ptr %62, align 8
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 2
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 2
  %66 = load ptr, ptr %64, align 8
  store ptr %66, ptr %65, align 8
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %44, i32 0, i32 3
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 3
  %69 = load i32, ptr %67, align 4
  store i32 %69, ptr %68, align 4
  call void @set_offset(ptr %57, ptr @IntIterator)
  %70 = alloca { ptr, ptr, ptr, i32 }, align 8
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 0
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 0
  %73 = load ptr, ptr %71, align 8
  store ptr %73, ptr %72, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 1
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 1
  %76 = load ptr, ptr %74, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 2
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 2
  %79 = load ptr, ptr %77, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %57, i32 0, i32 3
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 3
  %82 = load i32, ptr %80, align 4
  store i32 %82, ptr %81, align 4
  %83 = call ptr @llvm.invariant.start.p0(i64 16, ptr %70)
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 0
  store ptr %84, ptr %.reg2mem22, align 8
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 1
  store ptr %85, ptr %.reg2mem20, align 8
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 2
  store ptr %86, ptr %.reg2mem18, align 8
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %70, i32 0, i32 3
  store ptr %87, ptr %.reg2mem16, align 8
  %88 = alloca [0 x ptr], align 8
  %89 = alloca {}, align 8
  %90 = alloca { ptr, i32 }, align 8
  %91 = alloca i64, align 8
  %92 = alloca i1, align 1
  %93 = alloca i32, align 4
  %94 = alloca i1, align 1
  %95 = alloca i1, align 1
  br label %96

96:                                               ; preds = %138, %4
  %.reload23 = load ptr, ptr %.reg2mem22, align 8
  %97 = load ptr, ptr %.reload23, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %97, 0
  %.reload21 = load ptr, ptr %.reg2mem20, align 8
  %99 = load ptr, ptr %.reload21, align 8
  %100 = insertvalue { ptr, ptr, ptr, i32 } %98, ptr %99, 1
  %.reload19 = load ptr, ptr %.reg2mem18, align 8
  %101 = load ptr, ptr %.reload19, align 8
  %102 = insertvalue { ptr, ptr, ptr, i32 } %100, ptr %101, 2
  %.reload17 = load ptr, ptr %.reg2mem16, align 8
  %103 = load i32, ptr %.reload17, align 4
  %104 = insertvalue { ptr, ptr, ptr, i32 } %102, i32 %103, 3
  %105 = call ptr @llvm.invariant.start.p0(i64 0, ptr %88)
  %106 = call ptr @llvm.invariant.start.p0(i64 16, ptr %97)
  %107 = getelementptr ptr, ptr %97, i32 %103
  %108 = load ptr, ptr %107, align 8
  %109 = call ptr %108({ ptr, ptr, ptr, i32 } %104, ptr %89)
  %110 = call { ptr, i32 } %109({ ptr, ptr, ptr, i32 } %104, { ptr, ptr, ptr, i32 } %104, ptr %88)
  store ptr %90, ptr %.reg2mem11, align 8
  %.reload15 = load ptr, ptr %.reg2mem11, align 8
  store { ptr, i32 } %110, ptr %.reload15, align 8
  %.reload14 = load ptr, ptr %.reg2mem11, align 8
  %111 = getelementptr { ptr, i32 }, ptr %.reload14, i32 0, i32 0
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %91, align 4
  %112 = load ptr, ptr %111, align 8
  %113 = ptrtoint ptr %112 to i64
  %114 = load ptr, ptr %91, align 8
  %115 = ptrtoint ptr %114 to i64
  %116 = icmp eq i64 %113, %115
  %117 = icmp eq i64 %113, 0
  %118 = or i1 %116, %117
  %119 = icmp eq i1 %118, false
  store i1 %119, ptr %92, align 1
  %120 = load i1, ptr %92, align 1
  store i1 %120, ptr %.reg2mem7, align 1
  %.reload10 = load i1, ptr %.reg2mem7, align 1
  br i1 %.reload10, label %121, label %134

121:                                              ; preds = %96
  store ptr %93, ptr %.reg2mem3, align 8
  %.reload13 = load ptr, ptr %.reg2mem11, align 8
  %122 = getelementptr { ptr, i32 }, ptr %.reload13, i32 0, i32 1
  %123 = load i32, ptr %122, align 4
  %.reload6 = load ptr, ptr %.reg2mem3, align 8
  store i32 %123, ptr %.reload6, align 4
  %.reload5 = load ptr, ptr %.reg2mem3, align 8
  %124 = load i32, ptr %.reload5, align 4
  %125 = load ptr, ptr %20, align 8
  %126 = call i1 %125(i32 %124)
  store i1 %126, ptr %94, align 1
  %127 = load i1, ptr %94, align 1
  %128 = xor i1 %127, true
  %129 = zext i1 %128 to i32
  store i32 %129, ptr %.reg2mem1, align 4
  br i1 %127, label %130, label %131

130:                                              ; preds = %121
  br label %133

131:                                              ; preds = %121
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %132 = load i32, ptr %.reload4, align 4
  %.reload12 = load ptr, ptr %.reg2mem11, align 8
  store i32 %132, ptr %.reload12, align 4
  br label %133

133:                                              ; preds = %131, %130
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem24, align 4
  br label %135

134:                                              ; preds = %96
  store i32 0, ptr %.reg2mem24, align 4
  br label %135

135:                                              ; preds = %134, %133
  %.reload25 = load i32, ptr %.reg2mem24, align 4
  store i32 %.reload25, ptr %.reg2mem, align 4
  br label %136

136:                                              ; preds = %135
  %.reload = load i32, ptr %.reg2mem, align 4
  %137 = trunc i32 %.reload to i1
  %.reload9 = load i1, ptr %.reg2mem7, align 1
  br i1 %137, label %138, label %139

138:                                              ; preds = %136
  br label %96

139:                                              ; preds = %136
  %.reload8 = load i1, ptr %.reg2mem7, align 1
  store i1 %.reload8, ptr %95, align 1
  %140 = load i1, ptr %95, align 1
  ret i1 %140
}

define { ptr, ptr, ptr, i32 } @IntIterable_map_fFunctionPtri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @IntIterable)
  %20 = alloca ptr, align 8
  store { ptr } %3, ptr %20, align 8
  %21 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr } }, ptr null, i32 1) to i64))
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  store ptr @MapIterable, ptr %22, align 8
  store ptr %21, ptr %23, align 8
  store i32 7, ptr %24, align 4
  %25 = call ptr @llvm.invariant.start.p0(i64 16, ptr %22)
  %26 = alloca { ptr, ptr, ptr, i32 }, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %35 = load ptr, ptr %33, align 8
  store ptr %35, ptr %34, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %38 = load i32, ptr %36, align 4
  store i32 %38, ptr %37, align 4
  call void @set_offset(ptr %26, ptr @IntIterable)
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %40 = load ptr, ptr %39, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %40, 0
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %43 = load ptr, ptr %42, align 8
  %44 = insertvalue { ptr, ptr, ptr, i32 } %41, ptr %43, 1
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %46 = load ptr, ptr %45, align 8
  %47 = insertvalue { ptr, ptr, ptr, i32 } %44, ptr %46, 2
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %49 = load i32, ptr %48, align 4
  %50 = insertvalue { ptr, ptr, ptr, i32 } %47, i32 %49, 3
  %51 = load ptr, ptr %20, align 8
  %52 = insertvalue { ptr } undef, ptr %51, 0
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %54 = load ptr, ptr %53, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %54, 0
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %57, 1
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } %58, ptr %60, 2
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %63 = load i32, ptr %62, align 4
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, i32 %63, 3
  %65 = alloca [2 x ptr], align 8
  %66 = getelementptr [2 x ptr], ptr %65, i32 0, i32 0
  store ptr @_parameterization_IntIterable, ptr %66, align 8
  %67 = getelementptr [2 x ptr], ptr %65, i32 0, i32 1
  store ptr @_parameterization_FunctionPtri32_to_Ptri32, ptr %67, align 8
  %68 = call ptr @llvm.invariant.start.p0(i64 4, ptr %65)
  %69 = call ptr @llvm.invariant.start.p0(i64 416, ptr %54)
  %70 = getelementptr ptr, ptr %54, i32 %63
  %71 = getelementptr ptr, ptr %70, i32 2
  %72 = load ptr, ptr %71, align 8
  %73 = alloca { ptr, ptr }, align 8
  %74 = getelementptr { ptr, ptr }, ptr %73, i32 0, i32 0
  store ptr %40, ptr %74, align 8
  %75 = getelementptr { ptr, ptr }, ptr %73, i32 0, i32 1
  store ptr @function_typ, ptr %75, align 8
  %76 = call ptr %72({ ptr, ptr, ptr, i32 } %64, ptr %73)
  call void %76({ ptr, ptr, ptr, i32 } %64, { ptr, ptr, ptr, i32 } %64, ptr %65, { ptr, ptr, ptr, i32 } %50, { ptr } %52)
  %77 = alloca { ptr, ptr, ptr, i32 }, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 0
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 1
  %83 = load ptr, ptr %81, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 2
  %86 = load ptr, ptr %84, align 8
  store ptr %86, ptr %85, align 8
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 3
  %89 = load i32, ptr %87, align 4
  store i32 %89, ptr %88, align 4
  call void @set_offset(ptr %77, ptr @IntIterable)
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 0
  %91 = load ptr, ptr %90, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %91, 0
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 1
  %94 = load ptr, ptr %93, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %94, 1
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 2
  %97 = load ptr, ptr %96, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %97, 2
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 3
  %100 = load i32, ptr %99, align 4
  %101 = insertvalue { ptr, ptr, ptr, i32 } %98, i32 %100, 3
  ret { ptr, ptr, ptr, i32 } %101
}

define { ptr, ptr, ptr, i32 } @IntIterable_filter_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @IntIterable)
  %20 = alloca ptr, align 8
  store { ptr } %3, ptr %20, align 8
  %21 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr } }, ptr null, i32 1) to i64))
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  store ptr @FilterIterable, ptr %22, align 8
  store ptr %21, ptr %23, align 8
  store i32 7, ptr %24, align 4
  %25 = call ptr @llvm.invariant.start.p0(i64 16, ptr %22)
  %26 = alloca { ptr, ptr, ptr, i32 }, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %35 = load ptr, ptr %33, align 8
  store ptr %35, ptr %34, align 8
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %38 = load i32, ptr %36, align 4
  store i32 %38, ptr %37, align 4
  call void @set_offset(ptr %26, ptr @IntIterable)
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %40 = load ptr, ptr %39, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %40, 0
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %43 = load ptr, ptr %42, align 8
  %44 = insertvalue { ptr, ptr, ptr, i32 } %41, ptr %43, 1
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %46 = load ptr, ptr %45, align 8
  %47 = insertvalue { ptr, ptr, ptr, i32 } %44, ptr %46, 2
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %49 = load i32, ptr %48, align 4
  %50 = insertvalue { ptr, ptr, ptr, i32 } %47, i32 %49, 3
  %51 = load ptr, ptr %20, align 8
  %52 = insertvalue { ptr } undef, ptr %51, 0
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %54 = load ptr, ptr %53, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %54, 0
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %57, 1
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } %58, ptr %60, 2
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %63 = load i32, ptr %62, align 4
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, i32 %63, 3
  %65 = alloca [2 x ptr], align 8
  %66 = getelementptr [2 x ptr], ptr %65, i32 0, i32 0
  store ptr @_parameterization_IntIterable, ptr %66, align 8
  %67 = getelementptr [2 x ptr], ptr %65, i32 0, i32 1
  store ptr @_parameterization_FunctionPtri32_to_Ptri1, ptr %67, align 8
  %68 = call ptr @llvm.invariant.start.p0(i64 4, ptr %65)
  %69 = call ptr @llvm.invariant.start.p0(i64 416, ptr %54)
  %70 = getelementptr ptr, ptr %54, i32 %63
  %71 = getelementptr ptr, ptr %70, i32 2
  %72 = load ptr, ptr %71, align 8
  %73 = alloca { ptr, ptr }, align 8
  %74 = getelementptr { ptr, ptr }, ptr %73, i32 0, i32 0
  store ptr %40, ptr %74, align 8
  %75 = getelementptr { ptr, ptr }, ptr %73, i32 0, i32 1
  store ptr @function_typ, ptr %75, align 8
  %76 = call ptr %72({ ptr, ptr, ptr, i32 } %64, ptr %73)
  call void %76({ ptr, ptr, ptr, i32 } %64, { ptr, ptr, ptr, i32 } %64, ptr %65, { ptr, ptr, ptr, i32 } %50, { ptr } %52)
  %77 = alloca { ptr, ptr, ptr, i32 }, align 8
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 0
  %80 = load ptr, ptr %78, align 8
  store ptr %80, ptr %79, align 8
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 1
  %83 = load ptr, ptr %81, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 2
  %86 = load ptr, ptr %84, align 8
  store ptr %86, ptr %85, align 8
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 3
  %89 = load i32, ptr %87, align 4
  store i32 %89, ptr %88, align 4
  call void @set_offset(ptr %77, ptr @IntIterable)
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 0
  %91 = load ptr, ptr %90, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %91, 0
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 1
  %94 = load ptr, ptr %93, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %94, 1
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 2
  %97 = load ptr, ptr %96, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %97, 2
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %77, i32 0, i32 3
  %100 = load i32, ptr %99, align 4
  %101 = insertvalue { ptr, ptr, ptr, i32 } %98, i32 %100, 3
  ret { ptr, ptr, ptr, i32 } %101
}

define { ptr, ptr, ptr, i32 } @IntIterable_chain_otherIntIterable({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @IntIterable)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 16, ptr %20)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %34 = load i32, ptr %32, align 4
  store i32 %34, ptr %33, align 4
  call void @set_offset(ptr %22, ptr @IntIterable)
  %35 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr null, i32 1) to i64))
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  store ptr @ChainIterable, ptr %36, align 8
  store ptr %35, ptr %37, align 8
  store i32 7, ptr %38, align 4
  %39 = call ptr @llvm.invariant.start.p0(i64 16, ptr %36)
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 0
  %43 = load ptr, ptr %41, align 8
  store ptr %43, ptr %42, align 8
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 1
  %46 = load ptr, ptr %44, align 8
  store ptr %46, ptr %45, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 2
  %49 = load ptr, ptr %47, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 3
  %52 = load i32, ptr %50, align 4
  store i32 %52, ptr %51, align 4
  call void @set_offset(ptr %40, ptr @IntIterable)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 0
  %54 = load ptr, ptr %53, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %54, 0
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %57, 1
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 2
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } %58, ptr %60, 2
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 3
  %63 = load i32, ptr %62, align 4
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, i32 %63, 3
  %65 = alloca { ptr, ptr, ptr, i32 }, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 0
  %68 = load ptr, ptr %66, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %71 = load ptr, ptr %69, align 8
  store ptr %71, ptr %70, align 8
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 2
  %74 = load ptr, ptr %72, align 8
  store ptr %74, ptr %73, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %77 = load i32, ptr %75, align 4
  store i32 %77, ptr %76, align 4
  call void @set_offset(ptr %65, ptr @IntIterable)
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 0
  %79 = load ptr, ptr %78, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %79, 0
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %82 = load ptr, ptr %81, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } %80, ptr %82, 1
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 2
  %85 = load ptr, ptr %84, align 8
  %86 = insertvalue { ptr, ptr, ptr, i32 } %83, ptr %85, 2
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %88 = load i32, ptr %87, align 4
  %89 = insertvalue { ptr, ptr, ptr, i32 } %86, i32 %88, 3
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %91 = load ptr, ptr %90, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %91, 0
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %94 = load ptr, ptr %93, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %94, 1
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %97 = load ptr, ptr %96, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %97, 2
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %100 = load i32, ptr %99, align 4
  %101 = insertvalue { ptr, ptr, ptr, i32 } %98, i32 %100, 3
  %102 = alloca [2 x ptr], align 8
  %103 = getelementptr [2 x ptr], ptr %102, i32 0, i32 0
  store ptr @_parameterization_IntIterable, ptr %103, align 8
  %104 = getelementptr [2 x ptr], ptr %102, i32 0, i32 1
  store ptr @_parameterization_IntIterable, ptr %104, align 8
  %105 = call ptr @llvm.invariant.start.p0(i64 4, ptr %102)
  %106 = call ptr @llvm.invariant.start.p0(i64 416, ptr %91)
  %107 = getelementptr ptr, ptr %91, i32 %100
  %108 = getelementptr ptr, ptr %107, i32 2
  %109 = load ptr, ptr %108, align 8
  %110 = alloca { ptr, ptr }, align 8
  %111 = getelementptr { ptr, ptr }, ptr %110, i32 0, i32 0
  store ptr %54, ptr %111, align 8
  %112 = getelementptr { ptr, ptr }, ptr %110, i32 0, i32 1
  store ptr %79, ptr %112, align 8
  %113 = call ptr %109({ ptr, ptr, ptr, i32 } %101, ptr %110)
  call void %113({ ptr, ptr, ptr, i32 } %101, { ptr, ptr, ptr, i32 } %101, ptr %102, { ptr, ptr, ptr, i32 } %64, { ptr, ptr, ptr, i32 } %89)
  %114 = alloca { ptr, ptr, ptr, i32 }, align 8
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 0
  %117 = load ptr, ptr %115, align 8
  store ptr %117, ptr %116, align 8
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 1
  %120 = load ptr, ptr %118, align 8
  store ptr %120, ptr %119, align 8
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 2
  %123 = load ptr, ptr %121, align 8
  store ptr %123, ptr %122, align 8
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 3
  %126 = load i32, ptr %124, align 4
  store i32 %126, ptr %125, align 4
  call void @set_offset(ptr %114, ptr @IntIterable)
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 0
  %128 = load ptr, ptr %127, align 8
  %129 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %128, 0
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 1
  %131 = load ptr, ptr %130, align 8
  %132 = insertvalue { ptr, ptr, ptr, i32 } %129, ptr %131, 1
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 2
  %134 = load ptr, ptr %133, align 8
  %135 = insertvalue { ptr, ptr, ptr, i32 } %132, ptr %134, 2
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 3
  %137 = load i32, ptr %136, align 4
  %138 = insertvalue { ptr, ptr, ptr, i32 } %135, i32 %137, 3
  ret { ptr, ptr, ptr, i32 } %138
}

define { ptr, ptr, ptr, i32 } @IntIterable_interleave_otherIntIterable({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @IntIterable)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 16, ptr %20)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %34 = load i32, ptr %32, align 4
  store i32 %34, ptr %33, align 4
  call void @set_offset(ptr %22, ptr @IntIterable)
  %35 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr null, i32 1) to i64))
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  store ptr @InterleaveIterable, ptr %36, align 8
  store ptr %35, ptr %37, align 8
  store i32 7, ptr %38, align 4
  %39 = call ptr @llvm.invariant.start.p0(i64 16, ptr %36)
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 0
  %43 = load ptr, ptr %41, align 8
  store ptr %43, ptr %42, align 8
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 1
  %46 = load ptr, ptr %44, align 8
  store ptr %46, ptr %45, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 2
  %49 = load ptr, ptr %47, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 3
  %52 = load i32, ptr %50, align 4
  store i32 %52, ptr %51, align 4
  call void @set_offset(ptr %40, ptr @IntIterable)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 0
  %54 = load ptr, ptr %53, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %54, 0
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %57, 1
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 2
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } %58, ptr %60, 2
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 3
  %63 = load i32, ptr %62, align 4
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, i32 %63, 3
  %65 = alloca { ptr, ptr, ptr, i32 }, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 0
  %68 = load ptr, ptr %66, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %71 = load ptr, ptr %69, align 8
  store ptr %71, ptr %70, align 8
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 2
  %74 = load ptr, ptr %72, align 8
  store ptr %74, ptr %73, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %77 = load i32, ptr %75, align 4
  store i32 %77, ptr %76, align 4
  call void @set_offset(ptr %65, ptr @IntIterable)
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 0
  %79 = load ptr, ptr %78, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %79, 0
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %82 = load ptr, ptr %81, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } %80, ptr %82, 1
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 2
  %85 = load ptr, ptr %84, align 8
  %86 = insertvalue { ptr, ptr, ptr, i32 } %83, ptr %85, 2
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %88 = load i32, ptr %87, align 4
  %89 = insertvalue { ptr, ptr, ptr, i32 } %86, i32 %88, 3
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %91 = load ptr, ptr %90, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %91, 0
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %94 = load ptr, ptr %93, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %94, 1
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %97 = load ptr, ptr %96, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %97, 2
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %100 = load i32, ptr %99, align 4
  %101 = insertvalue { ptr, ptr, ptr, i32 } %98, i32 %100, 3
  %102 = alloca [2 x ptr], align 8
  %103 = getelementptr [2 x ptr], ptr %102, i32 0, i32 0
  store ptr @_parameterization_IntIterable, ptr %103, align 8
  %104 = getelementptr [2 x ptr], ptr %102, i32 0, i32 1
  store ptr @_parameterization_IntIterable, ptr %104, align 8
  %105 = call ptr @llvm.invariant.start.p0(i64 4, ptr %102)
  %106 = call ptr @llvm.invariant.start.p0(i64 416, ptr %91)
  %107 = getelementptr ptr, ptr %91, i32 %100
  %108 = getelementptr ptr, ptr %107, i32 2
  %109 = load ptr, ptr %108, align 8
  %110 = alloca { ptr, ptr }, align 8
  %111 = getelementptr { ptr, ptr }, ptr %110, i32 0, i32 0
  store ptr %54, ptr %111, align 8
  %112 = getelementptr { ptr, ptr }, ptr %110, i32 0, i32 1
  store ptr %79, ptr %112, align 8
  %113 = call ptr %109({ ptr, ptr, ptr, i32 } %101, ptr %110)
  call void %113({ ptr, ptr, ptr, i32 } %101, { ptr, ptr, ptr, i32 } %101, ptr %102, { ptr, ptr, ptr, i32 } %64, { ptr, ptr, ptr, i32 } %89)
  %114 = alloca { ptr, ptr, ptr, i32 }, align 8
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 0
  %117 = load ptr, ptr %115, align 8
  store ptr %117, ptr %116, align 8
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 1
  %120 = load ptr, ptr %118, align 8
  store ptr %120, ptr %119, align 8
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 2
  %123 = load ptr, ptr %121, align 8
  store ptr %123, ptr %122, align 8
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 3
  %126 = load i32, ptr %124, align 4
  store i32 %126, ptr %125, align 4
  call void @set_offset(ptr %114, ptr @IntIterable)
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 0
  %128 = load ptr, ptr %127, align 8
  %129 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %128, 0
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 1
  %131 = load ptr, ptr %130, align 8
  %132 = insertvalue { ptr, ptr, ptr, i32 } %129, ptr %131, 1
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 2
  %134 = load ptr, ptr %133, align 8
  %135 = insertvalue { ptr, ptr, ptr, i32 } %132, ptr %134, 2
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 3
  %137 = load i32, ptr %136, align 4
  %138 = insertvalue { ptr, ptr, ptr, i32 } %135, i32 %137, 3
  ret { ptr, ptr, ptr, i32 } %138
}

define { ptr, ptr, ptr, i32 } @IntIterable_zip_otherIntIterable({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @IntIterable)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 16, ptr %20)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %34 = load i32, ptr %32, align 4
  store i32 %34, ptr %33, align 4
  call void @set_offset(ptr %22, ptr @IntIterable)
  %35 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr null, i32 1) to i64))
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  store ptr @ZipIterable, ptr %36, align 8
  store ptr %35, ptr %37, align 8
  store i32 7, ptr %38, align 4
  %39 = call ptr @llvm.invariant.start.p0(i64 16, ptr %36)
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 0
  %43 = load ptr, ptr %41, align 8
  store ptr %43, ptr %42, align 8
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 1
  %46 = load ptr, ptr %44, align 8
  store ptr %46, ptr %45, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 2
  %49 = load ptr, ptr %47, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 3
  %52 = load i32, ptr %50, align 4
  store i32 %52, ptr %51, align 4
  call void @set_offset(ptr %40, ptr @IntIterable)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 0
  %54 = load ptr, ptr %53, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %54, 0
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %57, 1
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 2
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } %58, ptr %60, 2
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 3
  %63 = load i32, ptr %62, align 4
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, i32 %63, 3
  %65 = alloca { ptr, ptr, ptr, i32 }, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 0
  %68 = load ptr, ptr %66, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %71 = load ptr, ptr %69, align 8
  store ptr %71, ptr %70, align 8
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 2
  %74 = load ptr, ptr %72, align 8
  store ptr %74, ptr %73, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %77 = load i32, ptr %75, align 4
  store i32 %77, ptr %76, align 4
  call void @set_offset(ptr %65, ptr @IntIterable)
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 0
  %79 = load ptr, ptr %78, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %79, 0
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %82 = load ptr, ptr %81, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } %80, ptr %82, 1
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 2
  %85 = load ptr, ptr %84, align 8
  %86 = insertvalue { ptr, ptr, ptr, i32 } %83, ptr %85, 2
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %88 = load i32, ptr %87, align 4
  %89 = insertvalue { ptr, ptr, ptr, i32 } %86, i32 %88, 3
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %91 = load ptr, ptr %90, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %91, 0
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %94 = load ptr, ptr %93, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %94, 1
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %97 = load ptr, ptr %96, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %97, 2
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %100 = load i32, ptr %99, align 4
  %101 = insertvalue { ptr, ptr, ptr, i32 } %98, i32 %100, 3
  %102 = alloca [2 x ptr], align 8
  %103 = getelementptr [2 x ptr], ptr %102, i32 0, i32 0
  store ptr @_parameterization_IntIterable, ptr %103, align 8
  %104 = getelementptr [2 x ptr], ptr %102, i32 0, i32 1
  store ptr @_parameterization_IntIterable, ptr %104, align 8
  %105 = call ptr @llvm.invariant.start.p0(i64 4, ptr %102)
  %106 = call ptr @llvm.invariant.start.p0(i64 96, ptr %91)
  %107 = getelementptr ptr, ptr %91, i32 %100
  %108 = getelementptr ptr, ptr %107, i32 2
  %109 = load ptr, ptr %108, align 8
  %110 = alloca { ptr, ptr }, align 8
  %111 = getelementptr { ptr, ptr }, ptr %110, i32 0, i32 0
  store ptr %54, ptr %111, align 8
  %112 = getelementptr { ptr, ptr }, ptr %110, i32 0, i32 1
  store ptr %79, ptr %112, align 8
  %113 = call ptr %109({ ptr, ptr, ptr, i32 } %101, ptr %110)
  call void %113({ ptr, ptr, ptr, i32 } %101, { ptr, ptr, ptr, i32 } %101, ptr %102, { ptr, ptr, ptr, i32 } %64, { ptr, ptr, ptr, i32 } %89)
  %114 = alloca { ptr, ptr, ptr, i32 }, align 8
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 0
  %117 = load ptr, ptr %115, align 8
  store ptr %117, ptr %116, align 8
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 1
  %120 = load ptr, ptr %118, align 8
  store ptr %120, ptr %119, align 8
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 2
  %123 = load ptr, ptr %121, align 8
  store ptr %123, ptr %122, align 8
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 3
  %126 = load i32, ptr %124, align 4
  store i32 %126, ptr %125, align 4
  call void @set_offset(ptr %114, ptr @ZipIterable)
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 0
  %128 = load ptr, ptr %127, align 8
  %129 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %128, 0
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 1
  %131 = load ptr, ptr %130, align 8
  %132 = insertvalue { ptr, ptr, ptr, i32 } %129, ptr %131, 1
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 2
  %134 = load ptr, ptr %133, align 8
  %135 = insertvalue { ptr, ptr, ptr, i32 } %132, ptr %134, 2
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 3
  %137 = load i32, ptr %136, align 4
  %138 = insertvalue { ptr, ptr, ptr, i32 } %135, i32 %137, 3
  ret { ptr, ptr, ptr, i32 } %138
}

define { ptr, ptr, ptr, i32 } @IntIterable_product_otherIntIterable({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @IntIterable)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %20, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 16, ptr %20)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 0
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %25 = load ptr, ptr %23, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 1
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %28 = load ptr, ptr %26, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 2
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %31 = load ptr, ptr %29, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %20, i32 0, i32 3
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %34 = load i32, ptr %32, align 4
  store i32 %34, ptr %33, align 4
  call void @set_offset(ptr %22, ptr @IntIterable)
  %35 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr null, i32 1) to i64))
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  store ptr @ProductIterable, ptr %36, align 8
  store ptr %35, ptr %37, align 8
  store i32 7, ptr %38, align 4
  %39 = call ptr @llvm.invariant.start.p0(i64 16, ptr %36)
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 0
  %43 = load ptr, ptr %41, align 8
  store ptr %43, ptr %42, align 8
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 1
  %46 = load ptr, ptr %44, align 8
  store ptr %46, ptr %45, align 8
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 2
  %49 = load ptr, ptr %47, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 3
  %52 = load i32, ptr %50, align 4
  store i32 %52, ptr %51, align 4
  call void @set_offset(ptr %40, ptr @IntIterable)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 0
  %54 = load ptr, ptr %53, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %54, 0
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 1
  %57 = load ptr, ptr %56, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %57, 1
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 2
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } %58, ptr %60, 2
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %40, i32 0, i32 3
  %63 = load i32, ptr %62, align 4
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, i32 %63, 3
  %65 = alloca { ptr, ptr, ptr, i32 }, align 8
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 0
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 0
  %68 = load ptr, ptr %66, align 8
  store ptr %68, ptr %67, align 8
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 1
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %71 = load ptr, ptr %69, align 8
  store ptr %71, ptr %70, align 8
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 2
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 2
  %74 = load ptr, ptr %72, align 8
  store ptr %74, ptr %73, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %22, i32 0, i32 3
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %77 = load i32, ptr %75, align 4
  store i32 %77, ptr %76, align 4
  call void @set_offset(ptr %65, ptr @IntIterable)
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 0
  %79 = load ptr, ptr %78, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %79, 0
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %82 = load ptr, ptr %81, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } %80, ptr %82, 1
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 2
  %85 = load ptr, ptr %84, align 8
  %86 = insertvalue { ptr, ptr, ptr, i32 } %83, ptr %85, 2
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %88 = load i32, ptr %87, align 4
  %89 = insertvalue { ptr, ptr, ptr, i32 } %86, i32 %88, 3
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %91 = load ptr, ptr %90, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %91, 0
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %94 = load ptr, ptr %93, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %94, 1
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %97 = load ptr, ptr %96, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %97, 2
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %100 = load i32, ptr %99, align 4
  %101 = insertvalue { ptr, ptr, ptr, i32 } %98, i32 %100, 3
  %102 = alloca [2 x ptr], align 8
  %103 = getelementptr [2 x ptr], ptr %102, i32 0, i32 0
  store ptr @_parameterization_IntIterable, ptr %103, align 8
  %104 = getelementptr [2 x ptr], ptr %102, i32 0, i32 1
  store ptr @_parameterization_IntIterable, ptr %104, align 8
  %105 = call ptr @llvm.invariant.start.p0(i64 4, ptr %102)
  %106 = call ptr @llvm.invariant.start.p0(i64 96, ptr %91)
  %107 = getelementptr ptr, ptr %91, i32 %100
  %108 = getelementptr ptr, ptr %107, i32 2
  %109 = load ptr, ptr %108, align 8
  %110 = alloca { ptr, ptr }, align 8
  %111 = getelementptr { ptr, ptr }, ptr %110, i32 0, i32 0
  store ptr %54, ptr %111, align 8
  %112 = getelementptr { ptr, ptr }, ptr %110, i32 0, i32 1
  store ptr %79, ptr %112, align 8
  %113 = call ptr %109({ ptr, ptr, ptr, i32 } %101, ptr %110)
  call void %113({ ptr, ptr, ptr, i32 } %101, { ptr, ptr, ptr, i32 } %101, ptr %102, { ptr, ptr, ptr, i32 } %64, { ptr, ptr, ptr, i32 } %89)
  %114 = alloca { ptr, ptr, ptr, i32 }, align 8
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 0
  %117 = load ptr, ptr %115, align 8
  store ptr %117, ptr %116, align 8
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 1
  %120 = load ptr, ptr %118, align 8
  store ptr %120, ptr %119, align 8
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 2
  %123 = load ptr, ptr %121, align 8
  store ptr %123, ptr %122, align 8
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 3
  %126 = load i32, ptr %124, align 4
  store i32 %126, ptr %125, align 4
  call void @set_offset(ptr %114, ptr @ProductIterable)
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 0
  %128 = load ptr, ptr %127, align 8
  %129 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %128, 0
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 1
  %131 = load ptr, ptr %130, align 8
  %132 = insertvalue { ptr, ptr, ptr, i32 } %129, ptr %131, 1
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 2
  %134 = load ptr, ptr %133, align 8
  %135 = insertvalue { ptr, ptr, ptr, i32 } %132, ptr %134, 2
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %114, i32 0, i32 3
  %137 = load i32, ptr %136, align 4
  %138 = insertvalue { ptr, ptr, ptr, i32 } %135, i32 %137, 3
  ret { ptr, ptr, ptr, i32 } %138
}

define { ptr, ptr, ptr, i32 } @MapIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @MapIterable)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 416, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 0
  %28 = load ptr, ptr %27, align 8
  %29 = call { ptr, ptr, ptr, i32 } %28(ptr %20)
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %29, ptr %30, align 8
  %31 = call ptr @llvm.invariant.start.p0(i64 16, ptr %30)
  call void @assume_offset(ptr %30, ptr @IntIterable)
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %33, 0
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %36, 1
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %39 = load ptr, ptr %38, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %39, 2
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %42 = load i32, ptr %41, align 4
  %43 = insertvalue { ptr, ptr, ptr, i32 } %40, i32 %42, 3
  %44 = alloca [0 x ptr], align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 0, ptr %44)
  %46 = call ptr @llvm.invariant.start.p0(i64 192, ptr %33)
  %47 = getelementptr ptr, ptr %33, i32 %42
  %48 = getelementptr ptr, ptr %47, i32 10
  %49 = load ptr, ptr %48, align 8
  %50 = alloca {}, align 8
  %51 = call ptr %49({ ptr, ptr, ptr, i32 } %43, ptr %50)
  %52 = call { ptr, ptr, ptr, i32 } %51({ ptr, ptr, ptr, i32 } %43, { ptr, ptr, ptr, i32 } %43, ptr %44)
  %53 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %52, ptr %53, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 16, ptr %53)
  %55 = alloca { ptr, ptr, ptr, i32 }, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 0
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 0
  %58 = load ptr, ptr %56, align 8
  store ptr %58, ptr %57, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 1
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  %61 = load ptr, ptr %59, align 8
  store ptr %61, ptr %60, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 2
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 2
  %64 = load ptr, ptr %62, align 8
  store ptr %64, ptr %63, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 3
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  %67 = load i32, ptr %65, align 4
  store i32 %67, ptr %66, align 4
  call void @set_offset(ptr %55, ptr @IntIterator)
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = load ptr, ptr %6, align 8
  %71 = call ptr @llvm.invariant.start.p0(i64 416, ptr %70)
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %73 = load i32, ptr %72, align 4
  %74 = getelementptr ptr, ptr %70, i32 %73
  %75 = getelementptr ptr, ptr %74, i32 1
  %76 = load ptr, ptr %75, align 8
  %77 = getelementptr { ptr, ptr }, ptr %76, i32 0, i32 0
  %78 = load ptr, ptr %77, align 8
  %79 = call { ptr } %78(ptr %69)
  %80 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr } }, ptr null, i32 1) to i64))
  %81 = alloca { ptr, ptr, ptr, i32 }, align 8
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 1
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 3
  store ptr @MapIterator, ptr %81, align 8
  store ptr %80, ptr %82, align 8
  store i32 7, ptr %83, align 4
  %84 = call ptr @llvm.invariant.start.p0(i64 16, ptr %81)
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %86 = load ptr, ptr %85, align 8
  %87 = load ptr, ptr %6, align 8
  %88 = call ptr @llvm.invariant.start.p0(i64 416, ptr %87)
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %90 = load i32, ptr %89, align 4
  %91 = getelementptr ptr, ptr %87, i32 %90
  %92 = load ptr, ptr %91, align 8
  %93 = getelementptr { ptr, ptr }, ptr %92, i32 0, i32 0
  %94 = load ptr, ptr %93, align 8
  %95 = call { ptr, ptr, ptr, i32 } %94(ptr %86)
  %96 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %95, ptr %96, align 8
  %97 = call ptr @llvm.invariant.start.p0(i64 16, ptr %96)
  call void @assume_offset(ptr %96, ptr @IntIterable)
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 0
  %99 = load ptr, ptr %98, align 8
  %100 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %99, 0
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 1
  %102 = load ptr, ptr %101, align 8
  %103 = insertvalue { ptr, ptr, ptr, i32 } %100, ptr %102, 1
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 2
  %105 = load ptr, ptr %104, align 8
  %106 = insertvalue { ptr, ptr, ptr, i32 } %103, ptr %105, 2
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 3
  %108 = load i32, ptr %107, align 4
  %109 = insertvalue { ptr, ptr, ptr, i32 } %106, i32 %108, 3
  %110 = alloca [0 x ptr], align 8
  %111 = call ptr @llvm.invariant.start.p0(i64 0, ptr %110)
  %112 = call ptr @llvm.invariant.start.p0(i64 192, ptr %99)
  %113 = getelementptr ptr, ptr %99, i32 %108
  %114 = getelementptr ptr, ptr %113, i32 10
  %115 = load ptr, ptr %114, align 8
  %116 = alloca {}, align 8
  %117 = call ptr %115({ ptr, ptr, ptr, i32 } %109, ptr %116)
  %118 = call { ptr, ptr, ptr, i32 } %117({ ptr, ptr, ptr, i32 } %109, { ptr, ptr, ptr, i32 } %109, ptr %110)
  %119 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %118, ptr %119, align 8
  %120 = call ptr @llvm.invariant.start.p0(i64 16, ptr %119)
  %121 = alloca { ptr, ptr, ptr, i32 }, align 8
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 0
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %121, i32 0, i32 0
  %124 = load ptr, ptr %122, align 8
  store ptr %124, ptr %123, align 8
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 1
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %121, i32 0, i32 1
  %127 = load ptr, ptr %125, align 8
  store ptr %127, ptr %126, align 8
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 2
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %121, i32 0, i32 2
  %130 = load ptr, ptr %128, align 8
  store ptr %130, ptr %129, align 8
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 3
  %132 = getelementptr { ptr, ptr, ptr, i32 }, ptr %121, i32 0, i32 3
  %133 = load i32, ptr %131, align 4
  store i32 %133, ptr %132, align 4
  call void @set_offset(ptr %121, ptr @IntIterator)
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %135 = load ptr, ptr %134, align 8
  %136 = load ptr, ptr %6, align 8
  %137 = call ptr @llvm.invariant.start.p0(i64 416, ptr %136)
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %139 = load i32, ptr %138, align 4
  %140 = getelementptr ptr, ptr %136, i32 %139
  %141 = getelementptr ptr, ptr %140, i32 1
  %142 = load ptr, ptr %141, align 8
  %143 = getelementptr { ptr, ptr }, ptr %142, i32 0, i32 0
  %144 = load ptr, ptr %143, align 8
  %145 = call { ptr } %144(ptr %135)
  %146 = alloca ptr, align 8
  store { ptr } %145, ptr %146, align 8
  %147 = alloca { ptr, ptr, ptr, i32 }, align 8
  %148 = getelementptr { ptr, ptr, ptr, i32 }, ptr %121, i32 0, i32 0
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %147, i32 0, i32 0
  %150 = load ptr, ptr %148, align 8
  store ptr %150, ptr %149, align 8
  %151 = getelementptr { ptr, ptr, ptr, i32 }, ptr %121, i32 0, i32 1
  %152 = getelementptr { ptr, ptr, ptr, i32 }, ptr %147, i32 0, i32 1
  %153 = load ptr, ptr %151, align 8
  store ptr %153, ptr %152, align 8
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %121, i32 0, i32 2
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %147, i32 0, i32 2
  %156 = load ptr, ptr %154, align 8
  store ptr %156, ptr %155, align 8
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %121, i32 0, i32 3
  %158 = getelementptr { ptr, ptr, ptr, i32 }, ptr %147, i32 0, i32 3
  %159 = load i32, ptr %157, align 4
  store i32 %159, ptr %158, align 4
  call void @set_offset(ptr %147, ptr @IntIterator)
  %160 = getelementptr { ptr, ptr, ptr, i32 }, ptr %147, i32 0, i32 0
  %161 = load ptr, ptr %160, align 8
  %162 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %161, 0
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %147, i32 0, i32 1
  %164 = load ptr, ptr %163, align 8
  %165 = insertvalue { ptr, ptr, ptr, i32 } %162, ptr %164, 1
  %166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %147, i32 0, i32 2
  %167 = load ptr, ptr %166, align 8
  %168 = insertvalue { ptr, ptr, ptr, i32 } %165, ptr %167, 2
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %147, i32 0, i32 3
  %170 = load i32, ptr %169, align 4
  %171 = insertvalue { ptr, ptr, ptr, i32 } %168, i32 %170, 3
  %172 = load ptr, ptr %146, align 8
  %173 = insertvalue { ptr } undef, ptr %172, 0
  %174 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 0
  %175 = load ptr, ptr %174, align 8
  %176 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %175, 0
  %177 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 1
  %178 = load ptr, ptr %177, align 8
  %179 = insertvalue { ptr, ptr, ptr, i32 } %176, ptr %178, 1
  %180 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 2
  %181 = load ptr, ptr %180, align 8
  %182 = insertvalue { ptr, ptr, ptr, i32 } %179, ptr %181, 2
  %183 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 3
  %184 = load i32, ptr %183, align 4
  %185 = insertvalue { ptr, ptr, ptr, i32 } %182, i32 %184, 3
  %186 = alloca [2 x ptr], align 8
  %187 = getelementptr [2 x ptr], ptr %186, i32 0, i32 0
  store ptr @_parameterization_IntIterator, ptr %187, align 8
  %188 = getelementptr [2 x ptr], ptr %186, i32 0, i32 1
  store ptr @_parameterization_FunctionPtri32_to_Ptri32, ptr %188, align 8
  %189 = call ptr @llvm.invariant.start.p0(i64 4, ptr %186)
  %190 = call ptr @llvm.invariant.start.p0(i64 64, ptr %175)
  %191 = getelementptr ptr, ptr %175, i32 %184
  %192 = getelementptr ptr, ptr %191, i32 2
  %193 = load ptr, ptr %192, align 8
  %194 = alloca { ptr, ptr }, align 8
  %195 = getelementptr { ptr, ptr }, ptr %194, i32 0, i32 0
  store ptr %161, ptr %195, align 8
  %196 = getelementptr { ptr, ptr }, ptr %194, i32 0, i32 1
  store ptr @function_typ, ptr %196, align 8
  %197 = call ptr %193({ ptr, ptr, ptr, i32 } %185, ptr %194)
  call void %197({ ptr, ptr, ptr, i32 } %185, { ptr, ptr, ptr, i32 } %185, ptr %186, { ptr, ptr, ptr, i32 } %171, { ptr } %173)
  %198 = alloca { ptr, ptr, ptr, i32 }, align 8
  %199 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 0
  %200 = getelementptr { ptr, ptr, ptr, i32 }, ptr %198, i32 0, i32 0
  %201 = load ptr, ptr %199, align 8
  store ptr %201, ptr %200, align 8
  %202 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 1
  %203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %198, i32 0, i32 1
  %204 = load ptr, ptr %202, align 8
  store ptr %204, ptr %203, align 8
  %205 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 2
  %206 = getelementptr { ptr, ptr, ptr, i32 }, ptr %198, i32 0, i32 2
  %207 = load ptr, ptr %205, align 8
  store ptr %207, ptr %206, align 8
  %208 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 3
  %209 = getelementptr { ptr, ptr, ptr, i32 }, ptr %198, i32 0, i32 3
  %210 = load i32, ptr %208, align 4
  store i32 %210, ptr %209, align 4
  call void @set_offset(ptr %198, ptr @Iterator)
  %211 = getelementptr { ptr, ptr, ptr, i32 }, ptr %198, i32 0, i32 0
  %212 = load ptr, ptr %211, align 8
  %213 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %212, 0
  %214 = getelementptr { ptr, ptr, ptr, i32 }, ptr %198, i32 0, i32 1
  %215 = load ptr, ptr %214, align 8
  %216 = insertvalue { ptr, ptr, ptr, i32 } %213, ptr %215, 1
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %198, i32 0, i32 2
  %218 = load ptr, ptr %217, align 8
  %219 = insertvalue { ptr, ptr, ptr, i32 } %216, ptr %218, 2
  %220 = getelementptr { ptr, ptr, ptr, i32 }, ptr %198, i32 0, i32 3
  %221 = load i32, ptr %220, align 4
  %222 = insertvalue { ptr, ptr, ptr, i32 } %219, i32 %221, 3
  ret { ptr, ptr, ptr, i32 } %222
}

define ptr @MapIterator_B_init_iteratorIntIterator_fFunctionPtri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -933084275656658555, i64 ptrtoint (ptr @IntIterator to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [8 x ptr], ptr %26, i32 0, i32 4
  %28 = getelementptr ptr, ptr %27, i32 7
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @MapIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [8 x ptr], ptr %4, i32 0, i32 5
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @MapIterator_init_iteratorIntIterator_fFunctionPtri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @MapIterator)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @IntIterator)
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %45 = load ptr, ptr %43, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %48 = load i32, ptr %46, align 4
  store i32 %48, ptr %47, align 4
  call void @set_offset(ptr %36, ptr @IntIterator)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %8, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 64, ptr %51)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = getelementptr ptr, ptr %51, i32 %54
  %56 = load ptr, ptr %55, align 8
  %57 = getelementptr { ptr, ptr }, ptr %56, i32 0, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %63 = load ptr, ptr %62, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %63, 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %66 = load ptr, ptr %65, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %66, 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %69 = load i32, ptr %68, align 4
  %70 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %69, 3
  call void %58(ptr %50, { ptr, ptr, ptr, i32 } %70)
  %71 = alloca ptr, align 8
  store { ptr } %4, ptr %71, align 8
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %73 = load ptr, ptr %72, align 8
  %74 = load ptr, ptr %8, align 8
  %75 = call ptr @llvm.invariant.start.p0(i64 64, ptr %74)
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %77 = load i32, ptr %76, align 4
  %78 = getelementptr ptr, ptr %74, i32 %77
  %79 = getelementptr ptr, ptr %78, i32 1
  %80 = load ptr, ptr %79, align 8
  %81 = getelementptr { ptr, ptr }, ptr %80, i32 0, i32 1
  %82 = load ptr, ptr %81, align 8
  %83 = load ptr, ptr %71, align 8
  %84 = insertvalue { ptr } undef, ptr %83, 0
  call void %82(ptr %73, { ptr } %84)
  ret void
}

define { ptr, i32 } @MapIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i32 }, align 8
  %.reg2mem1 = alloca { ptr, i32 }, align 8
  %.reg2mem3 = alloca { ptr, i32 }, align 8
  %.reg2mem5 = alloca { ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @MapIterator)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 64, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 0
  %28 = load ptr, ptr %27, align 8
  %29 = call { ptr, ptr, ptr, i32 } %28(ptr %20)
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %29, ptr %30, align 8
  %31 = call ptr @llvm.invariant.start.p0(i64 16, ptr %30)
  call void @assume_offset(ptr %30, ptr @IntIterator)
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %33, 0
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %36, 1
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %39 = load ptr, ptr %38, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %39, 2
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %42 = load i32, ptr %41, align 4
  %43 = insertvalue { ptr, ptr, ptr, i32 } %40, i32 %42, 3
  %44 = alloca [0 x ptr], align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 0, ptr %44)
  %46 = call ptr @llvm.invariant.start.p0(i64 16, ptr %33)
  %47 = getelementptr ptr, ptr %33, i32 %42
  %48 = load ptr, ptr %47, align 8
  %49 = alloca {}, align 8
  %50 = call ptr %48({ ptr, ptr, ptr, i32 } %43, ptr %49)
  %51 = call { ptr, i32 } %50({ ptr, ptr, ptr, i32 } %43, { ptr, ptr, ptr, i32 } %43, ptr %44)
  %52 = alloca { ptr, i32 }, align 8
  store { ptr, i32 } %51, ptr %52, align 8
  %53 = getelementptr { ptr, i32 }, ptr %52, i32 0, i32 0
  %54 = load ptr, ptr %53, align 8
  %55 = ptrtoint ptr %54 to i64
  %56 = icmp eq i64 %55, ptrtoint (ptr @nil_typ to i64)
  %57 = icmp eq i64 %55, 0
  %58 = or i1 %56, %57
  %59 = icmp eq i1 %58, false
  %60 = alloca i32, align 4
  %61 = alloca ptr, align 8
  %62 = alloca i32, align 4
  %63 = alloca i32, align 4
  %64 = alloca ptr, align 8
  %65 = alloca i64, align 8
  %66 = alloca [0 x i8], align 1
  %67 = alloca i32, align 4
  %68 = alloca ptr, align 8
  %69 = alloca i64, align 8
  br i1 %59, label %70, label %94

70:                                               ; preds = %3
  %71 = getelementptr { ptr, i32 }, ptr %52, i32 0, i32 1
  %72 = load i32, ptr %71, align 4
  store i32 %72, ptr %60, align 4
  %73 = load i32, ptr %60, align 4
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %75 = load ptr, ptr %74, align 8
  %76 = load ptr, ptr %6, align 8
  %77 = call ptr @llvm.invariant.start.p0(i64 64, ptr %76)
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %79 = load i32, ptr %78, align 4
  %80 = getelementptr ptr, ptr %76, i32 %79
  %81 = getelementptr ptr, ptr %80, i32 1
  %82 = load ptr, ptr %81, align 8
  %83 = getelementptr { ptr, ptr }, ptr %82, i32 0, i32 0
  %84 = load ptr, ptr %83, align 8
  %85 = call { ptr } %84(ptr %75)
  store { ptr } %85, ptr %61, align 8
  %86 = load ptr, ptr %61, align 8
  %87 = call i32 %86(i32 %73)
  store i32 %87, ptr %62, align 4
  %88 = load i32, ptr %62, align 4
  store i32 %88, ptr %63, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %65, align 4
  %89 = load i64, ptr %65, align 4
  store i64 %89, ptr %64, align 4
  %90 = load ptr, ptr %64, align 8
  %91 = insertvalue { ptr, i32 } undef, ptr %90, 0
  %92 = load i32, ptr %63, align 4
  %93 = insertvalue { ptr, i32 } %91, i32 %92, 1
  store { ptr, i32 } %93, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i32 }, ptr %.reg2mem3, align 8
  store { ptr, i32 } %.reload4, ptr %.reg2mem5, align 8
  br label %101

94:                                               ; preds = %3
  %95 = load [0 x i8], ptr %66, align 1
  store [0 x i8] %95, ptr %67, align 1
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %69, align 4
  %96 = load i64, ptr %69, align 4
  store i64 %96, ptr %68, align 4
  %97 = load ptr, ptr %68, align 8
  %98 = insertvalue { ptr, i32 } undef, ptr %97, 0
  %99 = load i32, ptr %67, align 4
  %100 = insertvalue { ptr, i32 } %98, i32 %99, 1
  store { ptr, i32 } %100, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i32 }, ptr %.reg2mem1, align 8
  store { ptr, i32 } %.reload2, ptr %.reg2mem5, align 8
  br label %101

101:                                              ; preds = %94, %70
  %.reload6 = load { ptr, i32 }, ptr %.reg2mem5, align 8
  store { ptr, i32 } %.reload6, ptr %.reg2mem, align 8
  br label %102

102:                                              ; preds = %101
  %.reload = load { ptr, i32 }, ptr %.reg2mem, align 8
  ret { ptr, i32 } %.reload
}

define { ptr } @MapIterator_getter_f(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr } }, ptr %0, i32 0, i32 1
  %3 = getelementptr { ptr }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr } undef, ptr %4, 0
  ret { ptr } %5
}

define void @MapIterator_setter_f(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr } }, ptr %0, i32 0, i32 1
  %4 = alloca ptr, align 8
  store { ptr } %1, ptr %4, align 8
  %5 = getelementptr { ptr }, ptr %3, i32 0, i32 0
  %6 = load ptr, ptr %4, align 8
  store ptr %6, ptr %5, align 8
  ret void
}

define { ptr, ptr, ptr, i32 } @MapIterator_getter_iterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr } }, ptr %0, i32 0, i32 0
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @MapIterator_setter_iterator(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr } }, ptr %0, i32 0, i32 0
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  ret void
}

define ptr @ProductIterable_B_init_firstIntIterable_secondIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [12 x ptr], ptr %26, i32 0, i32 4
  %28 = getelementptr ptr, ptr %27, i32 7
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @ProductIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [12 x ptr], ptr %4, i32 0, i32 5
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @ProductIterable_init_firstIntIterable_secondIntIterable({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @ProductIterable)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @IntIterable)
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %45 = load ptr, ptr %43, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %48 = load i32, ptr %46, align 4
  store i32 %48, ptr %47, align 4
  call void @set_offset(ptr %36, ptr @IntIterable)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %8, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 96, ptr %51)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = getelementptr ptr, ptr %51, i32 %54
  %56 = load ptr, ptr %55, align 8
  %57 = getelementptr { ptr, ptr }, ptr %56, i32 0, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %63 = load ptr, ptr %62, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %63, 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %66 = load ptr, ptr %65, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %66, 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %69 = load i32, ptr %68, align 4
  %70 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %69, 3
  call void %58(ptr %50, { ptr, ptr, ptr, i32 } %70)
  %71 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %71, align 8
  %72 = call ptr @llvm.invariant.start.p0(i64 16, ptr %71)
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 0
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %76 = load ptr, ptr %74, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 1
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %79 = load ptr, ptr %77, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 2
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %82 = load ptr, ptr %80, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 3
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %85 = load i32, ptr %83, align 4
  store i32 %85, ptr %84, align 4
  call void @set_offset(ptr %73, ptr @IntIterable)
  %86 = alloca { ptr, ptr, ptr, i32 }, align 8
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 0
  %89 = load ptr, ptr %87, align 8
  store ptr %89, ptr %88, align 8
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 1
  %92 = load ptr, ptr %90, align 8
  store ptr %92, ptr %91, align 8
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 2
  %95 = load ptr, ptr %93, align 8
  store ptr %95, ptr %94, align 8
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 3
  %98 = load i32, ptr %96, align 4
  store i32 %98, ptr %97, align 4
  call void @set_offset(ptr %86, ptr @IntIterable)
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %100 = load ptr, ptr %99, align 8
  %101 = load ptr, ptr %8, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 96, ptr %101)
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %104 = load i32, ptr %103, align 4
  %105 = getelementptr ptr, ptr %101, i32 %104
  %106 = getelementptr ptr, ptr %105, i32 1
  %107 = load ptr, ptr %106, align 8
  %108 = getelementptr { ptr, ptr }, ptr %107, i32 0, i32 1
  %109 = load ptr, ptr %108, align 8
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 0
  %111 = load ptr, ptr %110, align 8
  %112 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %111, 0
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 1
  %114 = load ptr, ptr %113, align 8
  %115 = insertvalue { ptr, ptr, ptr, i32 } %112, ptr %114, 1
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 2
  %117 = load ptr, ptr %116, align 8
  %118 = insertvalue { ptr, ptr, ptr, i32 } %115, ptr %117, 2
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 3
  %120 = load i32, ptr %119, align 4
  %121 = insertvalue { ptr, ptr, ptr, i32 } %118, i32 %120, 3
  call void %109(ptr %100, { ptr, ptr, ptr, i32 } %121)
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @ProductIterable)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 96, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 0
  %28 = load ptr, ptr %27, align 8
  %29 = call { ptr, ptr, ptr, i32 } %28(ptr %20)
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %29, ptr %30, align 8
  %31 = call ptr @llvm.invariant.start.p0(i64 16, ptr %30)
  call void @assume_offset(ptr %30, ptr @IntIterable)
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %33 = load ptr, ptr %32, align 8
  %34 = load ptr, ptr %6, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 96, ptr %34)
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %37 = load i32, ptr %36, align 4
  %38 = getelementptr ptr, ptr %34, i32 %37
  %39 = getelementptr ptr, ptr %38, i32 1
  %40 = load ptr, ptr %39, align 8
  %41 = getelementptr { ptr, ptr }, ptr %40, i32 0, i32 0
  %42 = load ptr, ptr %41, align 8
  %43 = call { ptr, ptr, ptr, i32 } %42(ptr %33)
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %43, ptr %44, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 16, ptr %44)
  call void @assume_offset(ptr %44, ptr @IntIterable)
  %46 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, i32 } }, ptr null, i32 1) to i64))
  %47 = alloca { ptr, ptr, ptr, i32 }, align 8
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 1
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 3
  store ptr @ProductIterator, ptr %47, align 8
  store ptr %46, ptr %48, align 8
  store i32 7, ptr %49, align 4
  %50 = call ptr @llvm.invariant.start.p0(i64 16, ptr %47)
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %52 = load ptr, ptr %51, align 8
  %53 = load ptr, ptr %6, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 96, ptr %53)
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %56 = load i32, ptr %55, align 4
  %57 = getelementptr ptr, ptr %53, i32 %56
  %58 = load ptr, ptr %57, align 8
  %59 = getelementptr { ptr, ptr }, ptr %58, i32 0, i32 0
  %60 = load ptr, ptr %59, align 8
  %61 = call { ptr, ptr, ptr, i32 } %60(ptr %52)
  %62 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %61, ptr %62, align 8
  %63 = call ptr @llvm.invariant.start.p0(i64 16, ptr %62)
  call void @assume_offset(ptr %62, ptr @IntIterable)
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %65 = load ptr, ptr %64, align 8
  %66 = load ptr, ptr %6, align 8
  %67 = call ptr @llvm.invariant.start.p0(i64 96, ptr %66)
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %69 = load i32, ptr %68, align 4
  %70 = getelementptr ptr, ptr %66, i32 %69
  %71 = getelementptr ptr, ptr %70, i32 1
  %72 = load ptr, ptr %71, align 8
  %73 = getelementptr { ptr, ptr }, ptr %72, i32 0, i32 0
  %74 = load ptr, ptr %73, align 8
  %75 = call { ptr, ptr, ptr, i32 } %74(ptr %65)
  %76 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %75, ptr %76, align 8
  %77 = call ptr @llvm.invariant.start.p0(i64 16, ptr %76)
  call void @assume_offset(ptr %76, ptr @IntIterable)
  %78 = alloca { ptr, ptr, ptr, i32 }, align 8
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 0
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 0
  %81 = load ptr, ptr %79, align 8
  store ptr %81, ptr %80, align 8
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 1
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 1
  %84 = load ptr, ptr %82, align 8
  store ptr %84, ptr %83, align 8
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 2
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 2
  %87 = load ptr, ptr %85, align 8
  store ptr %87, ptr %86, align 8
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %62, i32 0, i32 3
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 3
  %90 = load i32, ptr %88, align 4
  store i32 %90, ptr %89, align 4
  call void @set_offset(ptr %78, ptr @IntIterable)
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 0
  %92 = load ptr, ptr %91, align 8
  %93 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %92, 0
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 1
  %95 = load ptr, ptr %94, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } %93, ptr %95, 1
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 2
  %98 = load ptr, ptr %97, align 8
  %99 = insertvalue { ptr, ptr, ptr, i32 } %96, ptr %98, 2
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %78, i32 0, i32 3
  %101 = load i32, ptr %100, align 4
  %102 = insertvalue { ptr, ptr, ptr, i32 } %99, i32 %101, 3
  %103 = alloca { ptr, ptr, ptr, i32 }, align 8
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 0
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 0
  %106 = load ptr, ptr %104, align 8
  store ptr %106, ptr %105, align 8
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 1
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 1
  %109 = load ptr, ptr %107, align 8
  store ptr %109, ptr %108, align 8
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 2
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 2
  %112 = load ptr, ptr %110, align 8
  store ptr %112, ptr %111, align 8
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %76, i32 0, i32 3
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 3
  %115 = load i32, ptr %113, align 4
  store i32 %115, ptr %114, align 4
  call void @set_offset(ptr %103, ptr @IntIterable)
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 0
  %117 = load ptr, ptr %116, align 8
  %118 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %117, 0
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 1
  %120 = load ptr, ptr %119, align 8
  %121 = insertvalue { ptr, ptr, ptr, i32 } %118, ptr %120, 1
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 2
  %123 = load ptr, ptr %122, align 8
  %124 = insertvalue { ptr, ptr, ptr, i32 } %121, ptr %123, 2
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 3
  %126 = load i32, ptr %125, align 4
  %127 = insertvalue { ptr, ptr, ptr, i32 } %124, i32 %126, 3
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 0
  %129 = load ptr, ptr %128, align 8
  %130 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %129, 0
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 1
  %132 = load ptr, ptr %131, align 8
  %133 = insertvalue { ptr, ptr, ptr, i32 } %130, ptr %132, 1
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 2
  %135 = load ptr, ptr %134, align 8
  %136 = insertvalue { ptr, ptr, ptr, i32 } %133, ptr %135, 2
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 3
  %138 = load i32, ptr %137, align 4
  %139 = insertvalue { ptr, ptr, ptr, i32 } %136, i32 %138, 3
  %140 = alloca [2 x ptr], align 8
  %141 = getelementptr [2 x ptr], ptr %140, i32 0, i32 0
  store ptr @_parameterization_IntIterable, ptr %141, align 8
  %142 = getelementptr [2 x ptr], ptr %140, i32 0, i32 1
  store ptr @_parameterization_IntIterable, ptr %142, align 8
  %143 = call ptr @llvm.invariant.start.p0(i64 4, ptr %140)
  %144 = call ptr @llvm.invariant.start.p0(i64 64, ptr %129)
  %145 = getelementptr ptr, ptr %129, i32 %138
  %146 = getelementptr ptr, ptr %145, i32 4
  %147 = load ptr, ptr %146, align 8
  %148 = alloca { ptr, ptr }, align 8
  %149 = getelementptr { ptr, ptr }, ptr %148, i32 0, i32 0
  store ptr %92, ptr %149, align 8
  %150 = getelementptr { ptr, ptr }, ptr %148, i32 0, i32 1
  store ptr %117, ptr %150, align 8
  %151 = call ptr %147({ ptr, ptr, ptr, i32 } %139, ptr %148)
  call void %151({ ptr, ptr, ptr, i32 } %139, { ptr, ptr, ptr, i32 } %139, ptr %140, { ptr, ptr, ptr, i32 } %102, { ptr, ptr, ptr, i32 } %127)
  %152 = alloca { ptr, ptr, ptr, i32 }, align 8
  %153 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 0
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 0
  %155 = load ptr, ptr %153, align 8
  store ptr %155, ptr %154, align 8
  %156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 1
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 1
  %158 = load ptr, ptr %156, align 8
  store ptr %158, ptr %157, align 8
  %159 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 2
  %160 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 2
  %161 = load ptr, ptr %159, align 8
  store ptr %161, ptr %160, align 8
  %162 = getelementptr { ptr, ptr, ptr, i32 }, ptr %47, i32 0, i32 3
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 3
  %164 = load i32, ptr %162, align 4
  store i32 %164, ptr %163, align 4
  call void @set_offset(ptr %152, ptr @Iterator)
  %165 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 0
  %166 = load ptr, ptr %165, align 8
  %167 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %166, 0
  %168 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 1
  %169 = load ptr, ptr %168, align 8
  %170 = insertvalue { ptr, ptr, ptr, i32 } %167, ptr %169, 1
  %171 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 2
  %172 = load ptr, ptr %171, align 8
  %173 = insertvalue { ptr, ptr, ptr, i32 } %170, ptr %172, 2
  %174 = getelementptr { ptr, ptr, ptr, i32 }, ptr %152, i32 0, i32 3
  %175 = load i32, ptr %174, align 4
  %176 = insertvalue { ptr, ptr, ptr, i32 } %173, i32 %175, 3
  ret { ptr, ptr, ptr, i32 } %176
}

define ptr @ProductIterator_B_init_first_iterableIntIterable_second_iterableIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [8 x ptr], ptr %26, i32 0, i32 6
  %28 = getelementptr ptr, ptr %27, i32 7
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @ProductIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [8 x ptr], ptr %4, i32 0, i32 7
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @ProductIterator_init_first_iterableIntIterable_second_iterableIntIterable({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @ProductIterator)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @IntIterable)
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %36, align 8
  %37 = call ptr @llvm.invariant.start.p0(i64 16, ptr %36)
  %38 = alloca { ptr, ptr, ptr, i32 }, align 8
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 0
  %41 = load ptr, ptr %39, align 8
  store ptr %41, ptr %40, align 8
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %44 = load ptr, ptr %42, align 8
  store ptr %44, ptr %43, align 8
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 2
  %47 = load ptr, ptr %45, align 8
  store ptr %47, ptr %46, align 8
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %50 = load i32, ptr %48, align 4
  store i32 %50, ptr %49, align 4
  call void @set_offset(ptr %38, ptr @IntIterable)
  %51 = alloca { ptr, ptr, ptr, i32 }, align 8
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 0
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 0
  %54 = load ptr, ptr %52, align 8
  store ptr %54, ptr %53, align 8
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 1
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 1
  %57 = load ptr, ptr %55, align 8
  store ptr %57, ptr %56, align 8
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 2
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 2
  %60 = load ptr, ptr %58, align 8
  store ptr %60, ptr %59, align 8
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %38, i32 0, i32 3
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 3
  %63 = load i32, ptr %61, align 4
  store i32 %63, ptr %62, align 4
  call void @set_offset(ptr %51, ptr @IntIterable)
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %65 = load ptr, ptr %64, align 8
  %66 = load ptr, ptr %8, align 8
  %67 = call ptr @llvm.invariant.start.p0(i64 64, ptr %66)
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %69 = load i32, ptr %68, align 4
  %70 = getelementptr ptr, ptr %66, i32 %69
  %71 = getelementptr ptr, ptr %70, i32 2
  %72 = load ptr, ptr %71, align 8
  %73 = getelementptr { ptr, ptr }, ptr %72, i32 0, i32 1
  %74 = load ptr, ptr %73, align 8
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 0
  %76 = load ptr, ptr %75, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %76, 0
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 1
  %79 = load ptr, ptr %78, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } %77, ptr %79, 1
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 2
  %82 = load ptr, ptr %81, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } %80, ptr %82, 2
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 3
  %85 = load i32, ptr %84, align 4
  %86 = insertvalue { ptr, ptr, ptr, i32 } %83, i32 %85, 3
  call void %74(ptr %65, { ptr, ptr, ptr, i32 } %86)
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %88 = load ptr, ptr %87, align 8
  %89 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %88, 0
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } %89, ptr %91, 1
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %94 = load ptr, ptr %93, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %94, 2
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %97 = load i32, ptr %96, align 4
  %98 = insertvalue { ptr, ptr, ptr, i32 } %95, i32 %97, 3
  %99 = alloca [0 x ptr], align 8
  %100 = call ptr @llvm.invariant.start.p0(i64 0, ptr %99)
  %101 = call ptr @llvm.invariant.start.p0(i64 192, ptr %88)
  %102 = getelementptr ptr, ptr %88, i32 %97
  %103 = getelementptr ptr, ptr %102, i32 10
  %104 = load ptr, ptr %103, align 8
  %105 = alloca {}, align 8
  %106 = call ptr %104({ ptr, ptr, ptr, i32 } %98, ptr %105)
  %107 = call { ptr, ptr, ptr, i32 } %106({ ptr, ptr, ptr, i32 } %98, { ptr, ptr, ptr, i32 } %98, ptr %99)
  %108 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %107, ptr %108, align 8
  %109 = call ptr @llvm.invariant.start.p0(i64 16, ptr %108)
  %110 = alloca { ptr, ptr, ptr, i32 }, align 8
  %111 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 0
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %110, i32 0, i32 0
  %113 = load ptr, ptr %111, align 8
  store ptr %113, ptr %112, align 8
  %114 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 1
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %110, i32 0, i32 1
  %116 = load ptr, ptr %114, align 8
  store ptr %116, ptr %115, align 8
  %117 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 2
  %118 = getelementptr { ptr, ptr, ptr, i32 }, ptr %110, i32 0, i32 2
  %119 = load ptr, ptr %117, align 8
  store ptr %119, ptr %118, align 8
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %108, i32 0, i32 3
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %110, i32 0, i32 3
  %122 = load i32, ptr %120, align 4
  store i32 %122, ptr %121, align 4
  call void @set_offset(ptr %110, ptr @IntIterator)
  %123 = alloca { ptr, ptr, ptr, i32 }, align 8
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %110, i32 0, i32 0
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 0
  %126 = load ptr, ptr %124, align 8
  store ptr %126, ptr %125, align 8
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %110, i32 0, i32 1
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 1
  %129 = load ptr, ptr %127, align 8
  store ptr %129, ptr %128, align 8
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %110, i32 0, i32 2
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 2
  %132 = load ptr, ptr %130, align 8
  store ptr %132, ptr %131, align 8
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %110, i32 0, i32 3
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 3
  %135 = load i32, ptr %133, align 4
  store i32 %135, ptr %134, align 4
  call void @set_offset(ptr %123, ptr @IntIterator)
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %137 = load ptr, ptr %136, align 8
  %138 = load ptr, ptr %8, align 8
  %139 = call ptr @llvm.invariant.start.p0(i64 64, ptr %138)
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %141 = load i32, ptr %140, align 4
  %142 = getelementptr ptr, ptr %138, i32 %141
  %143 = load ptr, ptr %142, align 8
  %144 = getelementptr { ptr, ptr }, ptr %143, i32 0, i32 1
  %145 = load ptr, ptr %144, align 8
  %146 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 0
  %147 = load ptr, ptr %146, align 8
  %148 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %147, 0
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 1
  %150 = load ptr, ptr %149, align 8
  %151 = insertvalue { ptr, ptr, ptr, i32 } %148, ptr %150, 1
  %152 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 2
  %153 = load ptr, ptr %152, align 8
  %154 = insertvalue { ptr, ptr, ptr, i32 } %151, ptr %153, 2
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %123, i32 0, i32 3
  %156 = load i32, ptr %155, align 4
  %157 = insertvalue { ptr, ptr, ptr, i32 } %154, i32 %156, 3
  call void %145(ptr %137, { ptr, ptr, ptr, i32 } %157)
  %158 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %159 = load ptr, ptr %158, align 8
  %160 = load ptr, ptr %8, align 8
  %161 = call ptr @llvm.invariant.start.p0(i64 64, ptr %160)
  %162 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %163 = load i32, ptr %162, align 4
  %164 = getelementptr ptr, ptr %160, i32 %163
  %165 = getelementptr ptr, ptr %164, i32 2
  %166 = load ptr, ptr %165, align 8
  %167 = getelementptr { ptr, ptr }, ptr %166, i32 0, i32 0
  %168 = load ptr, ptr %167, align 8
  %169 = call { ptr, ptr, ptr, i32 } %168(ptr %159)
  %170 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %169, ptr %170, align 8
  %171 = call ptr @llvm.invariant.start.p0(i64 16, ptr %170)
  call void @assume_offset(ptr %170, ptr @IntIterable)
  %172 = getelementptr { ptr, ptr, ptr, i32 }, ptr %170, i32 0, i32 0
  %173 = load ptr, ptr %172, align 8
  %174 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %173, 0
  %175 = getelementptr { ptr, ptr, ptr, i32 }, ptr %170, i32 0, i32 1
  %176 = load ptr, ptr %175, align 8
  %177 = insertvalue { ptr, ptr, ptr, i32 } %174, ptr %176, 1
  %178 = getelementptr { ptr, ptr, ptr, i32 }, ptr %170, i32 0, i32 2
  %179 = load ptr, ptr %178, align 8
  %180 = insertvalue { ptr, ptr, ptr, i32 } %177, ptr %179, 2
  %181 = getelementptr { ptr, ptr, ptr, i32 }, ptr %170, i32 0, i32 3
  %182 = load i32, ptr %181, align 4
  %183 = insertvalue { ptr, ptr, ptr, i32 } %180, i32 %182, 3
  %184 = alloca [0 x ptr], align 8
  %185 = call ptr @llvm.invariant.start.p0(i64 0, ptr %184)
  %186 = call ptr @llvm.invariant.start.p0(i64 192, ptr %173)
  %187 = getelementptr ptr, ptr %173, i32 %182
  %188 = getelementptr ptr, ptr %187, i32 10
  %189 = load ptr, ptr %188, align 8
  %190 = alloca {}, align 8
  %191 = call ptr %189({ ptr, ptr, ptr, i32 } %183, ptr %190)
  %192 = call { ptr, ptr, ptr, i32 } %191({ ptr, ptr, ptr, i32 } %183, { ptr, ptr, ptr, i32 } %183, ptr %184)
  %193 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %192, ptr %193, align 8
  %194 = call ptr @llvm.invariant.start.p0(i64 16, ptr %193)
  %195 = alloca { ptr, ptr, ptr, i32 }, align 8
  %196 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 0
  %197 = getelementptr { ptr, ptr, ptr, i32 }, ptr %195, i32 0, i32 0
  %198 = load ptr, ptr %196, align 8
  store ptr %198, ptr %197, align 8
  %199 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 1
  %200 = getelementptr { ptr, ptr, ptr, i32 }, ptr %195, i32 0, i32 1
  %201 = load ptr, ptr %199, align 8
  store ptr %201, ptr %200, align 8
  %202 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 2
  %203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %195, i32 0, i32 2
  %204 = load ptr, ptr %202, align 8
  store ptr %204, ptr %203, align 8
  %205 = getelementptr { ptr, ptr, ptr, i32 }, ptr %193, i32 0, i32 3
  %206 = getelementptr { ptr, ptr, ptr, i32 }, ptr %195, i32 0, i32 3
  %207 = load i32, ptr %205, align 4
  store i32 %207, ptr %206, align 4
  call void @set_offset(ptr %195, ptr @IntIterator)
  %208 = alloca { ptr, ptr, ptr, i32 }, align 8
  %209 = getelementptr { ptr, ptr, ptr, i32 }, ptr %195, i32 0, i32 0
  %210 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 0
  %211 = load ptr, ptr %209, align 8
  store ptr %211, ptr %210, align 8
  %212 = getelementptr { ptr, ptr, ptr, i32 }, ptr %195, i32 0, i32 1
  %213 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 1
  %214 = load ptr, ptr %212, align 8
  store ptr %214, ptr %213, align 8
  %215 = getelementptr { ptr, ptr, ptr, i32 }, ptr %195, i32 0, i32 2
  %216 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 2
  %217 = load ptr, ptr %215, align 8
  store ptr %217, ptr %216, align 8
  %218 = getelementptr { ptr, ptr, ptr, i32 }, ptr %195, i32 0, i32 3
  %219 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 3
  %220 = load i32, ptr %218, align 4
  store i32 %220, ptr %219, align 4
  call void @set_offset(ptr %208, ptr @IntIterator)
  %221 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %222 = load ptr, ptr %221, align 8
  %223 = load ptr, ptr %8, align 8
  %224 = call ptr @llvm.invariant.start.p0(i64 64, ptr %223)
  %225 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %226 = load i32, ptr %225, align 4
  %227 = getelementptr ptr, ptr %223, i32 %226
  %228 = getelementptr ptr, ptr %227, i32 1
  %229 = load ptr, ptr %228, align 8
  %230 = getelementptr { ptr, ptr }, ptr %229, i32 0, i32 1
  %231 = load ptr, ptr %230, align 8
  %232 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 0
  %233 = load ptr, ptr %232, align 8
  %234 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %233, 0
  %235 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 1
  %236 = load ptr, ptr %235, align 8
  %237 = insertvalue { ptr, ptr, ptr, i32 } %234, ptr %236, 1
  %238 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 2
  %239 = load ptr, ptr %238, align 8
  %240 = insertvalue { ptr, ptr, ptr, i32 } %237, ptr %239, 2
  %241 = getelementptr { ptr, ptr, ptr, i32 }, ptr %208, i32 0, i32 3
  %242 = load i32, ptr %241, align 4
  %243 = insertvalue { ptr, ptr, ptr, i32 } %240, i32 %242, 3
  call void %231(ptr %222, { ptr, ptr, ptr, i32 } %243)
  %244 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %245 = load ptr, ptr %244, align 8
  %246 = load ptr, ptr %8, align 8
  %247 = call ptr @llvm.invariant.start.p0(i64 64, ptr %246)
  %248 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %249 = load i32, ptr %248, align 4
  %250 = getelementptr ptr, ptr %246, i32 %249
  %251 = load ptr, ptr %250, align 8
  %252 = getelementptr { ptr, ptr }, ptr %251, i32 0, i32 0
  %253 = load ptr, ptr %252, align 8
  %254 = call { ptr, ptr, ptr, i32 } %253(ptr %245)
  %255 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %254, ptr %255, align 8
  %256 = call ptr @llvm.invariant.start.p0(i64 16, ptr %255)
  call void @assume_offset(ptr %255, ptr @IntIterator)
  %257 = getelementptr { ptr, ptr, ptr, i32 }, ptr %255, i32 0, i32 0
  %258 = load ptr, ptr %257, align 8
  %259 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %258, 0
  %260 = getelementptr { ptr, ptr, ptr, i32 }, ptr %255, i32 0, i32 1
  %261 = load ptr, ptr %260, align 8
  %262 = insertvalue { ptr, ptr, ptr, i32 } %259, ptr %261, 1
  %263 = getelementptr { ptr, ptr, ptr, i32 }, ptr %255, i32 0, i32 2
  %264 = load ptr, ptr %263, align 8
  %265 = insertvalue { ptr, ptr, ptr, i32 } %262, ptr %264, 2
  %266 = getelementptr { ptr, ptr, ptr, i32 }, ptr %255, i32 0, i32 3
  %267 = load i32, ptr %266, align 4
  %268 = insertvalue { ptr, ptr, ptr, i32 } %265, i32 %267, 3
  %269 = alloca [0 x ptr], align 8
  %270 = call ptr @llvm.invariant.start.p0(i64 0, ptr %269)
  %271 = call ptr @llvm.invariant.start.p0(i64 16, ptr %258)
  %272 = getelementptr ptr, ptr %258, i32 %267
  %273 = load ptr, ptr %272, align 8
  %274 = alloca {}, align 8
  %275 = call ptr %273({ ptr, ptr, ptr, i32 } %268, ptr %274)
  %276 = call { ptr, i32 } %275({ ptr, ptr, ptr, i32 } %268, { ptr, ptr, ptr, i32 } %268, ptr %269)
  %277 = alloca { ptr, i32 }, align 8
  store { ptr, i32 } %276, ptr %277, align 8
  %278 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %279 = load ptr, ptr %278, align 8
  %280 = load ptr, ptr %8, align 8
  %281 = call ptr @llvm.invariant.start.p0(i64 64, ptr %280)
  %282 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %283 = load i32, ptr %282, align 4
  %284 = getelementptr ptr, ptr %280, i32 %283
  %285 = getelementptr ptr, ptr %284, i32 3
  %286 = load ptr, ptr %285, align 8
  %287 = getelementptr { ptr, ptr }, ptr %286, i32 0, i32 1
  %288 = load ptr, ptr %287, align 8
  %289 = getelementptr { ptr, i32 }, ptr %277, i32 0, i32 0
  %290 = load ptr, ptr %289, align 8
  %291 = insertvalue { ptr, i32 } undef, ptr %290, 0
  %292 = getelementptr { ptr, i32 }, ptr %277, i32 0, i32 1
  %293 = load i32, ptr %292, align 4
  %294 = insertvalue { ptr, i32 } %291, i32 %293, 1
  call void %288(ptr %279, { ptr, i32 } %294)
  ret void
}

define { ptr, i64 } @ProductIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i64 }, align 8
  %.reg2mem1 = alloca { ptr, i64 }, align 8
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem6 = alloca ptr, align 8
  %.reg2mem9 = alloca i32, align 4
  %.reg2mem11 = alloca i32, align 4
  %.reg2mem14 = alloca i32, align 4
  %.reg2mem16 = alloca i32, align 4
  %.reg2mem18 = alloca ptr, align 8
  %.reg2mem22 = alloca ptr, align 8
  %.reg2mem25 = alloca ptr, align 8
  %.reg2mem27 = alloca { ptr, i64 }, align 8
  %.reg2mem29 = alloca ptr, align 8
  %.reg2mem31 = alloca ptr, align 8
  %.reg2mem33 = alloca i32, align 4
  %.reg2mem35 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @ProductIterator)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 64, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 3
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call { ptr, i32 } %29(ptr %20)
  %31 = alloca { ptr, i32 }, align 8
  store { ptr, i32 } %30, ptr %31, align 8
  %32 = getelementptr { ptr, i32 }, ptr %31, i32 0, i32 0
  store ptr %32, ptr %.reg2mem25, align 8
  %33 = alloca i64, align 8
  %34 = alloca i1, align 1
  %35 = alloca i32, align 4
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = alloca [0 x ptr], align 8
  %38 = alloca {}, align 8
  %39 = alloca { ptr, i32 }, align 8
  %40 = alloca i64, align 8
  %41 = alloca i1, align 1
  %42 = alloca { ptr, ptr, ptr, i32 }, align 8
  %43 = alloca [0 x ptr], align 8
  %44 = alloca {}, align 8
  %45 = alloca { ptr, i32 }, align 8
  %46 = alloca { ptr, ptr, ptr, i32 }, align 8
  %47 = alloca [0 x ptr], align 8
  %48 = alloca {}, align 8
  %49 = alloca { ptr, ptr, ptr, i32 }, align 8
  %50 = alloca { ptr, ptr, ptr, i32 }, align 8
  %51 = alloca { ptr, ptr, ptr, i32 }, align 8
  %52 = alloca { ptr, i32 }, align 8
  %53 = alloca i32, align 4
  %54 = alloca i32, align 4
  %55 = alloca i32, align 4
  %56 = alloca i64, align 8
  %57 = alloca ptr, align 8
  %58 = alloca i64, align 8
  %59 = alloca [0 x i8], align 1
  %60 = alloca i64, align 8
  %61 = alloca ptr, align 8
  %62 = alloca i64, align 8
  br label %63

63:                                               ; preds = %272, %3
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %33, align 4
  %.reload26 = load ptr, ptr %.reg2mem25, align 8
  %64 = load ptr, ptr %.reload26, align 8
  %65 = ptrtoint ptr %64 to i64
  %66 = load ptr, ptr %33, align 8
  %67 = ptrtoint ptr %66 to i64
  %68 = icmp eq i64 %65, %67
  %69 = icmp eq i64 %65, 0
  %70 = or i1 %68, %69
  %71 = icmp eq i1 %70, false
  store i1 %71, ptr %34, align 1
  %72 = load i1, ptr %34, align 1
  br i1 %72, label %73, label %268

73:                                               ; preds = %63
  store ptr %35, ptr %.reg2mem22, align 8
  %74 = getelementptr { ptr, i32 }, ptr %31, i32 0, i32 1
  %75 = load i32, ptr %74, align 4
  %.reload24 = load ptr, ptr %.reg2mem22, align 8
  store i32 %75, ptr %.reload24, align 4
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %77 = load ptr, ptr %76, align 8
  %78 = load ptr, ptr %6, align 8
  %79 = call ptr @llvm.invariant.start.p0(i64 64, ptr %78)
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %81 = load i32, ptr %80, align 4
  %82 = getelementptr ptr, ptr %78, i32 %81
  %83 = getelementptr ptr, ptr %82, i32 1
  %84 = load ptr, ptr %83, align 8
  %85 = getelementptr { ptr, ptr }, ptr %84, i32 0, i32 0
  %86 = load ptr, ptr %85, align 8
  %87 = call { ptr, ptr, ptr, i32 } %86(ptr %77)
  store { ptr, ptr, ptr, i32 } %87, ptr %36, align 8
  %88 = call ptr @llvm.invariant.start.p0(i64 16, ptr %36)
  call void @assume_offset(ptr %36, ptr @IntIterator)
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %90 = load ptr, ptr %89, align 8
  %91 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %90, 0
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %93 = load ptr, ptr %92, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } %91, ptr %93, 1
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %96 = load ptr, ptr %95, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr %96, 2
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %99 = load i32, ptr %98, align 4
  %100 = insertvalue { ptr, ptr, ptr, i32 } %97, i32 %99, 3
  %101 = call ptr @llvm.invariant.start.p0(i64 0, ptr %37)
  %102 = call ptr @llvm.invariant.start.p0(i64 16, ptr %90)
  %103 = getelementptr ptr, ptr %90, i32 %99
  %104 = load ptr, ptr %103, align 8
  %105 = call ptr %104({ ptr, ptr, ptr, i32 } %100, ptr %38)
  %106 = call { ptr, i32 } %105({ ptr, ptr, ptr, i32 } %100, { ptr, ptr, ptr, i32 } %100, ptr %37)
  store ptr %39, ptr %.reg2mem18, align 8
  %.reload21 = load ptr, ptr %.reg2mem18, align 8
  store { ptr, i32 } %106, ptr %.reload21, align 8
  %.reload20 = load ptr, ptr %.reg2mem18, align 8
  %107 = getelementptr { ptr, i32 }, ptr %.reload20, i32 0, i32 0
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %40, align 4
  %108 = load ptr, ptr %107, align 8
  %109 = ptrtoint ptr %108 to i64
  %110 = load ptr, ptr %40, align 8
  %111 = ptrtoint ptr %110 to i64
  %112 = icmp eq i64 %109, %111
  %113 = icmp eq i64 %109, 0
  %114 = or i1 %112, %113
  %115 = icmp eq i1 %114, false
  store i1 %115, ptr %41, align 1
  %116 = load i1, ptr %41, align 1
  %117 = zext i1 %116 to i32
  store i32 %117, ptr %.reg2mem16, align 4
  %118 = xor i1 %116, true
  %119 = zext i1 %118 to i32
  store i32 %119, ptr %.reg2mem14, align 4
  br i1 %116, label %120, label %121

120:                                              ; preds = %73
  br label %267

121:                                              ; preds = %73
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %123 = load ptr, ptr %122, align 8
  %124 = load ptr, ptr %6, align 8
  %125 = call ptr @llvm.invariant.start.p0(i64 64, ptr %124)
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %127 = load i32, ptr %126, align 4
  %128 = getelementptr ptr, ptr %124, i32 %127
  %129 = load ptr, ptr %128, align 8
  %130 = getelementptr { ptr, ptr }, ptr %129, i32 0, i32 0
  %131 = load ptr, ptr %130, align 8
  %132 = call { ptr, ptr, ptr, i32 } %131(ptr %123)
  store { ptr, ptr, ptr, i32 } %132, ptr %42, align 8
  %133 = call ptr @llvm.invariant.start.p0(i64 16, ptr %42)
  call void @assume_offset(ptr %42, ptr @IntIterator)
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 0
  %135 = load ptr, ptr %134, align 8
  %136 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %135, 0
  %137 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 1
  %138 = load ptr, ptr %137, align 8
  %139 = insertvalue { ptr, ptr, ptr, i32 } %136, ptr %138, 1
  %140 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 2
  %141 = load ptr, ptr %140, align 8
  %142 = insertvalue { ptr, ptr, ptr, i32 } %139, ptr %141, 2
  %143 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 3
  %144 = load i32, ptr %143, align 4
  %145 = insertvalue { ptr, ptr, ptr, i32 } %142, i32 %144, 3
  %146 = call ptr @llvm.invariant.start.p0(i64 0, ptr %43)
  %147 = call ptr @llvm.invariant.start.p0(i64 16, ptr %135)
  %148 = getelementptr ptr, ptr %135, i32 %144
  %149 = load ptr, ptr %148, align 8
  %150 = call ptr %149({ ptr, ptr, ptr, i32 } %145, ptr %44)
  %151 = call { ptr, i32 } %150({ ptr, ptr, ptr, i32 } %145, { ptr, ptr, ptr, i32 } %145, ptr %43)
  store { ptr, i32 } %151, ptr %45, align 8
  %152 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %153 = load ptr, ptr %152, align 8
  %154 = load ptr, ptr %6, align 8
  %155 = call ptr @llvm.invariant.start.p0(i64 64, ptr %154)
  %156 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %157 = load i32, ptr %156, align 4
  %158 = getelementptr ptr, ptr %154, i32 %157
  %159 = getelementptr ptr, ptr %158, i32 3
  %160 = load ptr, ptr %159, align 8
  %161 = getelementptr { ptr, ptr }, ptr %160, i32 0, i32 1
  %162 = load ptr, ptr %161, align 8
  %163 = getelementptr { ptr, i32 }, ptr %45, i32 0, i32 0
  %164 = load ptr, ptr %163, align 8
  %165 = insertvalue { ptr, i32 } undef, ptr %164, 0
  %166 = getelementptr { ptr, i32 }, ptr %45, i32 0, i32 1
  %167 = load i32, ptr %166, align 4
  %168 = insertvalue { ptr, i32 } %165, i32 %167, 1
  call void %162(ptr %153, { ptr, i32 } %168)
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %170 = load ptr, ptr %169, align 8
  %171 = load ptr, ptr %6, align 8
  %172 = call ptr @llvm.invariant.start.p0(i64 64, ptr %171)
  %173 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %174 = load i32, ptr %173, align 4
  %175 = getelementptr ptr, ptr %171, i32 %174
  %176 = getelementptr ptr, ptr %175, i32 2
  %177 = load ptr, ptr %176, align 8
  %178 = getelementptr { ptr, ptr }, ptr %177, i32 0, i32 0
  %179 = load ptr, ptr %178, align 8
  %180 = call { ptr, ptr, ptr, i32 } %179(ptr %170)
  store { ptr, ptr, ptr, i32 } %180, ptr %46, align 8
  %181 = call ptr @llvm.invariant.start.p0(i64 16, ptr %46)
  call void @assume_offset(ptr %46, ptr @IntIterable)
  %182 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 0
  %183 = load ptr, ptr %182, align 8
  %184 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %183, 0
  %185 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 1
  %186 = load ptr, ptr %185, align 8
  %187 = insertvalue { ptr, ptr, ptr, i32 } %184, ptr %186, 1
  %188 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 2
  %189 = load ptr, ptr %188, align 8
  %190 = insertvalue { ptr, ptr, ptr, i32 } %187, ptr %189, 2
  %191 = getelementptr { ptr, ptr, ptr, i32 }, ptr %46, i32 0, i32 3
  %192 = load i32, ptr %191, align 4
  %193 = insertvalue { ptr, ptr, ptr, i32 } %190, i32 %192, 3
  %194 = call ptr @llvm.invariant.start.p0(i64 0, ptr %47)
  %195 = call ptr @llvm.invariant.start.p0(i64 192, ptr %183)
  %196 = getelementptr ptr, ptr %183, i32 %192
  %197 = getelementptr ptr, ptr %196, i32 10
  %198 = load ptr, ptr %197, align 8
  %199 = call ptr %198({ ptr, ptr, ptr, i32 } %193, ptr %48)
  %200 = call { ptr, ptr, ptr, i32 } %199({ ptr, ptr, ptr, i32 } %193, { ptr, ptr, ptr, i32 } %193, ptr %47)
  store { ptr, ptr, ptr, i32 } %200, ptr %49, align 8
  %201 = call ptr @llvm.invariant.start.p0(i64 16, ptr %49)
  %202 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 0
  %203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 0
  %204 = load ptr, ptr %202, align 8
  store ptr %204, ptr %203, align 8
  %205 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 1
  %206 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 1
  %207 = load ptr, ptr %205, align 8
  store ptr %207, ptr %206, align 8
  %208 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 2
  %209 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 2
  %210 = load ptr, ptr %208, align 8
  store ptr %210, ptr %209, align 8
  %211 = getelementptr { ptr, ptr, ptr, i32 }, ptr %49, i32 0, i32 3
  %212 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 3
  %213 = load i32, ptr %211, align 4
  store i32 %213, ptr %212, align 4
  call void @set_offset(ptr %50, ptr @IntIterator)
  %214 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 0
  %215 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 0
  %216 = load ptr, ptr %214, align 8
  store ptr %216, ptr %215, align 8
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 1
  %218 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 1
  %219 = load ptr, ptr %217, align 8
  store ptr %219, ptr %218, align 8
  %220 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 2
  %221 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 2
  %222 = load ptr, ptr %220, align 8
  store ptr %222, ptr %221, align 8
  %223 = getelementptr { ptr, ptr, ptr, i32 }, ptr %50, i32 0, i32 3
  %224 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 3
  %225 = load i32, ptr %223, align 4
  store i32 %225, ptr %224, align 4
  call void @set_offset(ptr %51, ptr @IntIterator)
  %226 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %227 = load ptr, ptr %226, align 8
  %228 = load ptr, ptr %6, align 8
  %229 = call ptr @llvm.invariant.start.p0(i64 64, ptr %228)
  %230 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %231 = load i32, ptr %230, align 4
  %232 = getelementptr ptr, ptr %228, i32 %231
  %233 = getelementptr ptr, ptr %232, i32 1
  %234 = load ptr, ptr %233, align 8
  %235 = getelementptr { ptr, ptr }, ptr %234, i32 0, i32 1
  %236 = load ptr, ptr %235, align 8
  %237 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 0
  %238 = load ptr, ptr %237, align 8
  %239 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %238, 0
  %240 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 1
  %241 = load ptr, ptr %240, align 8
  %242 = insertvalue { ptr, ptr, ptr, i32 } %239, ptr %241, 1
  %243 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 2
  %244 = load ptr, ptr %243, align 8
  %245 = insertvalue { ptr, ptr, ptr, i32 } %242, ptr %244, 2
  %246 = getelementptr { ptr, ptr, ptr, i32 }, ptr %51, i32 0, i32 3
  %247 = load i32, ptr %246, align 4
  %248 = insertvalue { ptr, ptr, ptr, i32 } %245, i32 %247, 3
  call void %236(ptr %227, { ptr, ptr, ptr, i32 } %248)
  %249 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %250 = load ptr, ptr %249, align 8
  %251 = load ptr, ptr %6, align 8
  %252 = call ptr @llvm.invariant.start.p0(i64 64, ptr %251)
  %253 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %254 = load i32, ptr %253, align 4
  %255 = getelementptr ptr, ptr %251, i32 %254
  %256 = getelementptr ptr, ptr %255, i32 3
  %257 = load ptr, ptr %256, align 8
  %258 = getelementptr { ptr, ptr }, ptr %257, i32 0, i32 0
  %259 = load ptr, ptr %258, align 8
  %260 = call { ptr, i32 } %259(ptr %250)
  store { ptr, i32 } %260, ptr %52, align 8
  %261 = getelementptr { ptr, i32 }, ptr %52, i32 0, i32 0
  %262 = getelementptr { ptr, i32 }, ptr %31, i32 0, i32 0
  %263 = load ptr, ptr %261, align 8
  store ptr %263, ptr %262, align 8
  %264 = getelementptr { ptr, i32 }, ptr %52, i32 0, i32 1
  %265 = getelementptr { ptr, i32 }, ptr %31, i32 0, i32 1
  %266 = load i32, ptr %264, align 4
  store i32 %266, ptr %265, align 4
  br label %267

267:                                              ; preds = %121, %120
  %.reload15 = load i32, ptr %.reg2mem14, align 4
  %.reload17 = load i32, ptr %.reg2mem16, align 4
  %.reload19 = load ptr, ptr %.reg2mem18, align 8
  %.reload23 = load ptr, ptr %.reg2mem22, align 8
  store ptr %.reload19, ptr %.reg2mem29, align 8
  store ptr %.reload23, ptr %.reg2mem31, align 8
  store i32 %.reload15, ptr %.reg2mem33, align 4
  store i32 %.reload17, ptr %.reg2mem35, align 4
  br label %269

268:                                              ; preds = %63
  store ptr poison, ptr %.reg2mem29, align 8
  store ptr poison, ptr %.reg2mem31, align 8
  store i32 0, ptr %.reg2mem33, align 4
  store i32 2, ptr %.reg2mem35, align 4
  br label %269

269:                                              ; preds = %268, %267
  %.reload36 = load i32, ptr %.reg2mem35, align 4
  %.reload34 = load i32, ptr %.reg2mem33, align 4
  %.reload32 = load ptr, ptr %.reg2mem31, align 8
  %.reload30 = load ptr, ptr %.reg2mem29, align 8
  store i32 %.reload36, ptr %.reg2mem11, align 4
  store i32 %.reload34, ptr %.reg2mem9, align 4
  store ptr %.reload32, ptr %.reg2mem6, align 8
  store ptr %.reload30, ptr %.reg2mem3, align 8
  br label %270

270:                                              ; preds = %269
  %.reload10 = load i32, ptr %.reg2mem9, align 4
  %271 = trunc i32 %.reload10 to i1
  %.reload5 = load ptr, ptr %.reg2mem3, align 8
  %.reload8 = load ptr, ptr %.reg2mem6, align 8
  %.reload13 = load i32, ptr %.reg2mem11, align 4
  br i1 %271, label %272, label %273

272:                                              ; preds = %270
  br label %63

273:                                              ; preds = %270
  %.reload12 = load i32, ptr %.reg2mem11, align 4
  %274 = zext i32 %.reload12 to i64
  %275 = trunc i64 %274 to i32
  switch i32 %275, label %290 [
    i32 1, label %276
  ]

276:                                              ; preds = %273
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %277 = getelementptr { ptr, i32 }, ptr %.reload4, i32 0, i32 1
  %278 = load i32, ptr %277, align 4
  store i32 %278, ptr %53, align 4
  %.reload7 = load ptr, ptr %.reg2mem6, align 8
  %279 = load i32, ptr %.reload7, align 4
  %280 = load i32, ptr %53, align 4
  store i32 %279, ptr %55, align 4
  store i32 %280, ptr %54, align 4
  %281 = getelementptr { i32, i32 }, ptr %56, i32 0, i32 0
  %282 = load i32, ptr %55, align 4
  store i32 %282, ptr %281, align 4
  %283 = getelementptr { i32, i32 }, ptr %56, i32 0, i32 1
  %284 = load i32, ptr %54, align 4
  store i32 %284, ptr %283, align 4
  store i64 ptrtoint (ptr @tuple_typ to i64), ptr %58, align 4
  %285 = load i64, ptr %58, align 4
  store i64 %285, ptr %57, align 4
  %286 = load ptr, ptr %57, align 8
  %287 = insertvalue { ptr, i64 } undef, ptr %286, 0
  %288 = load i64, ptr %56, align 4
  %289 = insertvalue { ptr, i64 } %287, i64 %288, 1
  store { ptr, i64 } %289, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i64 }, ptr %.reg2mem1, align 8
  store { ptr, i64 } %.reload2, ptr %.reg2mem27, align 8
  br label %297

290:                                              ; preds = %273
  %291 = load [0 x i8], ptr %59, align 1
  store [0 x i8] %291, ptr %60, align 1
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %62, align 4
  %292 = load i64, ptr %62, align 4
  store i64 %292, ptr %61, align 4
  %293 = load ptr, ptr %61, align 8
  %294 = insertvalue { ptr, i64 } undef, ptr %293, 0
  %295 = load i64, ptr %60, align 4
  %296 = insertvalue { ptr, i64 } %294, i64 %295, 1
  store { ptr, i64 } %296, ptr %.reg2mem, align 8
  %.reload = load { ptr, i64 }, ptr %.reg2mem, align 8
  store { ptr, i64 } %.reload, ptr %.reg2mem27, align 8
  br label %297

297:                                              ; preds = %290, %276
  %.reload28 = load { ptr, i64 }, ptr %.reg2mem27, align 8
  ret { ptr, i64 } %.reload28
}

define { ptr, i32 } @ProductIterator_getter_current_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, i32 } }, ptr %0, i32 0, i32 3
  %3 = getelementptr { ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load i32, ptr %6, align 4
  %8 = insertvalue { ptr, i32 } %5, i32 %7, 1
  ret { ptr, i32 } %8
}

define void @ProductIterator_setter_current_first(ptr %0, { ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, i32 } }, ptr %0, i32 0, i32 3
  %4 = alloca { ptr, i32 }, align 8
  store { ptr, i32 } %1, ptr %4, align 8
  %5 = getelementptr { ptr, i32 }, ptr %4, i32 0, i32 0
  %6 = getelementptr { ptr, i32 }, ptr %3, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, i32 }, ptr %4, i32 0, i32 1
  %9 = getelementptr { ptr, i32 }, ptr %3, i32 0, i32 1
  %10 = load i32, ptr %8, align 4
  store i32 %10, ptr %9, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterator_getter_second_iterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, i32 } }, ptr %0, i32 0, i32 2
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @ProductIterator_setter_second_iterable(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, i32 } }, ptr %0, i32 0, i32 2
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterator_getter_second_iterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, i32 } }, ptr %0, i32 0, i32 1
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @ProductIterator_setter_second_iterator(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, i32 } }, ptr %0, i32 0, i32 1
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterator_getter_first_iterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, i32 } }, ptr %0, i32 0, i32 0
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @ProductIterator_setter_first_iterator(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, { ptr, i32 } }, ptr %0, i32 0, i32 0
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterable_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 1
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @ProductIterable_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 1
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterable_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 0
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @ProductIterable_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 0
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  ret void
}

define ptr @ZipIterable_B_init_firstIntIterable_secondIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [12 x ptr], ptr %26, i32 0, i32 4
  %28 = getelementptr ptr, ptr %27, i32 7
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @ZipIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [12 x ptr], ptr %4, i32 0, i32 5
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @ZipIterable_init_firstIntIterable_secondIntIterable({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @ZipIterable)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @IntIterable)
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %45 = load ptr, ptr %43, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %48 = load i32, ptr %46, align 4
  store i32 %48, ptr %47, align 4
  call void @set_offset(ptr %36, ptr @IntIterable)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %8, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 96, ptr %51)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = getelementptr ptr, ptr %51, i32 %54
  %56 = load ptr, ptr %55, align 8
  %57 = getelementptr { ptr, ptr }, ptr %56, i32 0, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %63 = load ptr, ptr %62, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %63, 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %66 = load ptr, ptr %65, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %66, 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %69 = load i32, ptr %68, align 4
  %70 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %69, 3
  call void %58(ptr %50, { ptr, ptr, ptr, i32 } %70)
  %71 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %71, align 8
  %72 = call ptr @llvm.invariant.start.p0(i64 16, ptr %71)
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 0
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %76 = load ptr, ptr %74, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 1
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %79 = load ptr, ptr %77, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 2
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %82 = load ptr, ptr %80, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 3
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %85 = load i32, ptr %83, align 4
  store i32 %85, ptr %84, align 4
  call void @set_offset(ptr %73, ptr @IntIterable)
  %86 = alloca { ptr, ptr, ptr, i32 }, align 8
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 0
  %89 = load ptr, ptr %87, align 8
  store ptr %89, ptr %88, align 8
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 1
  %92 = load ptr, ptr %90, align 8
  store ptr %92, ptr %91, align 8
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 2
  %95 = load ptr, ptr %93, align 8
  store ptr %95, ptr %94, align 8
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 3
  %98 = load i32, ptr %96, align 4
  store i32 %98, ptr %97, align 4
  call void @set_offset(ptr %86, ptr @IntIterable)
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %100 = load ptr, ptr %99, align 8
  %101 = load ptr, ptr %8, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 96, ptr %101)
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %104 = load i32, ptr %103, align 4
  %105 = getelementptr ptr, ptr %101, i32 %104
  %106 = getelementptr ptr, ptr %105, i32 1
  %107 = load ptr, ptr %106, align 8
  %108 = getelementptr { ptr, ptr }, ptr %107, i32 0, i32 1
  %109 = load ptr, ptr %108, align 8
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 0
  %111 = load ptr, ptr %110, align 8
  %112 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %111, 0
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 1
  %114 = load ptr, ptr %113, align 8
  %115 = insertvalue { ptr, ptr, ptr, i32 } %112, ptr %114, 1
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 2
  %117 = load ptr, ptr %116, align 8
  %118 = insertvalue { ptr, ptr, ptr, i32 } %115, ptr %117, 2
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 3
  %120 = load i32, ptr %119, align 4
  %121 = insertvalue { ptr, ptr, ptr, i32 } %118, i32 %120, 3
  call void %109(ptr %100, { ptr, ptr, ptr, i32 } %121)
  ret void
}

define { ptr, ptr, ptr, i32 } @ZipIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @ZipIterable)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 96, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 0
  %28 = load ptr, ptr %27, align 8
  %29 = call { ptr, ptr, ptr, i32 } %28(ptr %20)
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %29, ptr %30, align 8
  %31 = call ptr @llvm.invariant.start.p0(i64 16, ptr %30)
  call void @assume_offset(ptr %30, ptr @IntIterable)
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %33, 0
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %36, 1
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %39 = load ptr, ptr %38, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %39, 2
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %42 = load i32, ptr %41, align 4
  %43 = insertvalue { ptr, ptr, ptr, i32 } %40, i32 %42, 3
  %44 = alloca [0 x ptr], align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 0, ptr %44)
  %46 = call ptr @llvm.invariant.start.p0(i64 192, ptr %33)
  %47 = getelementptr ptr, ptr %33, i32 %42
  %48 = getelementptr ptr, ptr %47, i32 10
  %49 = load ptr, ptr %48, align 8
  %50 = alloca {}, align 8
  %51 = call ptr %49({ ptr, ptr, ptr, i32 } %43, ptr %50)
  %52 = call { ptr, ptr, ptr, i32 } %51({ ptr, ptr, ptr, i32 } %43, { ptr, ptr, ptr, i32 } %43, ptr %44)
  %53 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %52, ptr %53, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 16, ptr %53)
  %55 = alloca { ptr, ptr, ptr, i32 }, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 0
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 0
  %58 = load ptr, ptr %56, align 8
  store ptr %58, ptr %57, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 1
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  %61 = load ptr, ptr %59, align 8
  store ptr %61, ptr %60, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 2
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 2
  %64 = load ptr, ptr %62, align 8
  store ptr %64, ptr %63, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 3
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  %67 = load i32, ptr %65, align 4
  store i32 %67, ptr %66, align 4
  call void @set_offset(ptr %55, ptr @IntIterator)
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = load ptr, ptr %6, align 8
  %71 = call ptr @llvm.invariant.start.p0(i64 96, ptr %70)
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %73 = load i32, ptr %72, align 4
  %74 = getelementptr ptr, ptr %70, i32 %73
  %75 = getelementptr ptr, ptr %74, i32 1
  %76 = load ptr, ptr %75, align 8
  %77 = getelementptr { ptr, ptr }, ptr %76, i32 0, i32 0
  %78 = load ptr, ptr %77, align 8
  %79 = call { ptr, ptr, ptr, i32 } %78(ptr %69)
  %80 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %79, ptr %80, align 8
  %81 = call ptr @llvm.invariant.start.p0(i64 16, ptr %80)
  call void @assume_offset(ptr %80, ptr @IntIterable)
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %80, i32 0, i32 0
  %83 = load ptr, ptr %82, align 8
  %84 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %83, 0
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %80, i32 0, i32 1
  %86 = load ptr, ptr %85, align 8
  %87 = insertvalue { ptr, ptr, ptr, i32 } %84, ptr %86, 1
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %80, i32 0, i32 2
  %89 = load ptr, ptr %88, align 8
  %90 = insertvalue { ptr, ptr, ptr, i32 } %87, ptr %89, 2
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %80, i32 0, i32 3
  %92 = load i32, ptr %91, align 4
  %93 = insertvalue { ptr, ptr, ptr, i32 } %90, i32 %92, 3
  %94 = alloca [0 x ptr], align 8
  %95 = call ptr @llvm.invariant.start.p0(i64 0, ptr %94)
  %96 = call ptr @llvm.invariant.start.p0(i64 192, ptr %83)
  %97 = getelementptr ptr, ptr %83, i32 %92
  %98 = getelementptr ptr, ptr %97, i32 10
  %99 = load ptr, ptr %98, align 8
  %100 = alloca {}, align 8
  %101 = call ptr %99({ ptr, ptr, ptr, i32 } %93, ptr %100)
  %102 = call { ptr, ptr, ptr, i32 } %101({ ptr, ptr, ptr, i32 } %93, { ptr, ptr, ptr, i32 } %93, ptr %94)
  %103 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %102, ptr %103, align 8
  %104 = call ptr @llvm.invariant.start.p0(i64 16, ptr %103)
  %105 = alloca { ptr, ptr, ptr, i32 }, align 8
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 0
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 0
  %108 = load ptr, ptr %106, align 8
  store ptr %108, ptr %107, align 8
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 1
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 1
  %111 = load ptr, ptr %109, align 8
  store ptr %111, ptr %110, align 8
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 2
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 2
  %114 = load ptr, ptr %112, align 8
  store ptr %114, ptr %113, align 8
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 3
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 3
  %117 = load i32, ptr %115, align 4
  store i32 %117, ptr %116, align 4
  call void @set_offset(ptr %105, ptr @IntIterator)
  %118 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr null, i32 1) to i64))
  %119 = alloca { ptr, ptr, ptr, i32 }, align 8
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 1
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 3
  store ptr @ZipIterator, ptr %119, align 8
  store ptr %118, ptr %120, align 8
  store i32 7, ptr %121, align 4
  %122 = call ptr @llvm.invariant.start.p0(i64 16, ptr %119)
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %124 = load ptr, ptr %123, align 8
  %125 = load ptr, ptr %6, align 8
  %126 = call ptr @llvm.invariant.start.p0(i64 96, ptr %125)
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %128 = load i32, ptr %127, align 4
  %129 = getelementptr ptr, ptr %125, i32 %128
  %130 = load ptr, ptr %129, align 8
  %131 = getelementptr { ptr, ptr }, ptr %130, i32 0, i32 0
  %132 = load ptr, ptr %131, align 8
  %133 = call { ptr, ptr, ptr, i32 } %132(ptr %124)
  %134 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %133, ptr %134, align 8
  %135 = call ptr @llvm.invariant.start.p0(i64 16, ptr %134)
  call void @assume_offset(ptr %134, ptr @IntIterable)
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 0
  %137 = load ptr, ptr %136, align 8
  %138 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %137, 0
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 1
  %140 = load ptr, ptr %139, align 8
  %141 = insertvalue { ptr, ptr, ptr, i32 } %138, ptr %140, 1
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 2
  %143 = load ptr, ptr %142, align 8
  %144 = insertvalue { ptr, ptr, ptr, i32 } %141, ptr %143, 2
  %145 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 3
  %146 = load i32, ptr %145, align 4
  %147 = insertvalue { ptr, ptr, ptr, i32 } %144, i32 %146, 3
  %148 = alloca [0 x ptr], align 8
  %149 = call ptr @llvm.invariant.start.p0(i64 0, ptr %148)
  %150 = call ptr @llvm.invariant.start.p0(i64 192, ptr %137)
  %151 = getelementptr ptr, ptr %137, i32 %146
  %152 = getelementptr ptr, ptr %151, i32 10
  %153 = load ptr, ptr %152, align 8
  %154 = alloca {}, align 8
  %155 = call ptr %153({ ptr, ptr, ptr, i32 } %147, ptr %154)
  %156 = call { ptr, ptr, ptr, i32 } %155({ ptr, ptr, ptr, i32 } %147, { ptr, ptr, ptr, i32 } %147, ptr %148)
  %157 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %156, ptr %157, align 8
  %158 = call ptr @llvm.invariant.start.p0(i64 16, ptr %157)
  %159 = alloca { ptr, ptr, ptr, i32 }, align 8
  %160 = getelementptr { ptr, ptr, ptr, i32 }, ptr %157, i32 0, i32 0
  %161 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 0
  %162 = load ptr, ptr %160, align 8
  store ptr %162, ptr %161, align 8
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %157, i32 0, i32 1
  %164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 1
  %165 = load ptr, ptr %163, align 8
  store ptr %165, ptr %164, align 8
  %166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %157, i32 0, i32 2
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 2
  %168 = load ptr, ptr %166, align 8
  store ptr %168, ptr %167, align 8
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %157, i32 0, i32 3
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 3
  %171 = load i32, ptr %169, align 4
  store i32 %171, ptr %170, align 4
  call void @set_offset(ptr %159, ptr @IntIterator)
  %172 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %173 = load ptr, ptr %172, align 8
  %174 = load ptr, ptr %6, align 8
  %175 = call ptr @llvm.invariant.start.p0(i64 96, ptr %174)
  %176 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %177 = load i32, ptr %176, align 4
  %178 = getelementptr ptr, ptr %174, i32 %177
  %179 = getelementptr ptr, ptr %178, i32 1
  %180 = load ptr, ptr %179, align 8
  %181 = getelementptr { ptr, ptr }, ptr %180, i32 0, i32 0
  %182 = load ptr, ptr %181, align 8
  %183 = call { ptr, ptr, ptr, i32 } %182(ptr %173)
  %184 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %183, ptr %184, align 8
  %185 = call ptr @llvm.invariant.start.p0(i64 16, ptr %184)
  call void @assume_offset(ptr %184, ptr @IntIterable)
  %186 = getelementptr { ptr, ptr, ptr, i32 }, ptr %184, i32 0, i32 0
  %187 = load ptr, ptr %186, align 8
  %188 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %187, 0
  %189 = getelementptr { ptr, ptr, ptr, i32 }, ptr %184, i32 0, i32 1
  %190 = load ptr, ptr %189, align 8
  %191 = insertvalue { ptr, ptr, ptr, i32 } %188, ptr %190, 1
  %192 = getelementptr { ptr, ptr, ptr, i32 }, ptr %184, i32 0, i32 2
  %193 = load ptr, ptr %192, align 8
  %194 = insertvalue { ptr, ptr, ptr, i32 } %191, ptr %193, 2
  %195 = getelementptr { ptr, ptr, ptr, i32 }, ptr %184, i32 0, i32 3
  %196 = load i32, ptr %195, align 4
  %197 = insertvalue { ptr, ptr, ptr, i32 } %194, i32 %196, 3
  %198 = alloca [0 x ptr], align 8
  %199 = call ptr @llvm.invariant.start.p0(i64 0, ptr %198)
  %200 = call ptr @llvm.invariant.start.p0(i64 192, ptr %187)
  %201 = getelementptr ptr, ptr %187, i32 %196
  %202 = getelementptr ptr, ptr %201, i32 10
  %203 = load ptr, ptr %202, align 8
  %204 = alloca {}, align 8
  %205 = call ptr %203({ ptr, ptr, ptr, i32 } %197, ptr %204)
  %206 = call { ptr, ptr, ptr, i32 } %205({ ptr, ptr, ptr, i32 } %197, { ptr, ptr, ptr, i32 } %197, ptr %198)
  %207 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %206, ptr %207, align 8
  %208 = call ptr @llvm.invariant.start.p0(i64 16, ptr %207)
  %209 = alloca { ptr, ptr, ptr, i32 }, align 8
  %210 = getelementptr { ptr, ptr, ptr, i32 }, ptr %207, i32 0, i32 0
  %211 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 0
  %212 = load ptr, ptr %210, align 8
  store ptr %212, ptr %211, align 8
  %213 = getelementptr { ptr, ptr, ptr, i32 }, ptr %207, i32 0, i32 1
  %214 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 1
  %215 = load ptr, ptr %213, align 8
  store ptr %215, ptr %214, align 8
  %216 = getelementptr { ptr, ptr, ptr, i32 }, ptr %207, i32 0, i32 2
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 2
  %218 = load ptr, ptr %216, align 8
  store ptr %218, ptr %217, align 8
  %219 = getelementptr { ptr, ptr, ptr, i32 }, ptr %207, i32 0, i32 3
  %220 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 3
  %221 = load i32, ptr %219, align 4
  store i32 %221, ptr %220, align 4
  call void @set_offset(ptr %209, ptr @IntIterator)
  %222 = alloca { ptr, ptr, ptr, i32 }, align 8
  %223 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 0
  %224 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 0
  %225 = load ptr, ptr %223, align 8
  store ptr %225, ptr %224, align 8
  %226 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 1
  %227 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 1
  %228 = load ptr, ptr %226, align 8
  store ptr %228, ptr %227, align 8
  %229 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 2
  %230 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 2
  %231 = load ptr, ptr %229, align 8
  store ptr %231, ptr %230, align 8
  %232 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 3
  %233 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 3
  %234 = load i32, ptr %232, align 4
  store i32 %234, ptr %233, align 4
  call void @set_offset(ptr %222, ptr @IntIterator)
  %235 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 0
  %236 = load ptr, ptr %235, align 8
  %237 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %236, 0
  %238 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 1
  %239 = load ptr, ptr %238, align 8
  %240 = insertvalue { ptr, ptr, ptr, i32 } %237, ptr %239, 1
  %241 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 2
  %242 = load ptr, ptr %241, align 8
  %243 = insertvalue { ptr, ptr, ptr, i32 } %240, ptr %242, 2
  %244 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 3
  %245 = load i32, ptr %244, align 4
  %246 = insertvalue { ptr, ptr, ptr, i32 } %243, i32 %245, 3
  %247 = alloca { ptr, ptr, ptr, i32 }, align 8
  %248 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 0
  %249 = getelementptr { ptr, ptr, ptr, i32 }, ptr %247, i32 0, i32 0
  %250 = load ptr, ptr %248, align 8
  store ptr %250, ptr %249, align 8
  %251 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 1
  %252 = getelementptr { ptr, ptr, ptr, i32 }, ptr %247, i32 0, i32 1
  %253 = load ptr, ptr %251, align 8
  store ptr %253, ptr %252, align 8
  %254 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 2
  %255 = getelementptr { ptr, ptr, ptr, i32 }, ptr %247, i32 0, i32 2
  %256 = load ptr, ptr %254, align 8
  store ptr %256, ptr %255, align 8
  %257 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 3
  %258 = getelementptr { ptr, ptr, ptr, i32 }, ptr %247, i32 0, i32 3
  %259 = load i32, ptr %257, align 4
  store i32 %259, ptr %258, align 4
  call void @set_offset(ptr %247, ptr @IntIterator)
  %260 = getelementptr { ptr, ptr, ptr, i32 }, ptr %247, i32 0, i32 0
  %261 = load ptr, ptr %260, align 8
  %262 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %261, 0
  %263 = getelementptr { ptr, ptr, ptr, i32 }, ptr %247, i32 0, i32 1
  %264 = load ptr, ptr %263, align 8
  %265 = insertvalue { ptr, ptr, ptr, i32 } %262, ptr %264, 1
  %266 = getelementptr { ptr, ptr, ptr, i32 }, ptr %247, i32 0, i32 2
  %267 = load ptr, ptr %266, align 8
  %268 = insertvalue { ptr, ptr, ptr, i32 } %265, ptr %267, 2
  %269 = getelementptr { ptr, ptr, ptr, i32 }, ptr %247, i32 0, i32 3
  %270 = load i32, ptr %269, align 4
  %271 = insertvalue { ptr, ptr, ptr, i32 } %268, i32 %270, 3
  %272 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 0
  %273 = load ptr, ptr %272, align 8
  %274 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %273, 0
  %275 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 1
  %276 = load ptr, ptr %275, align 8
  %277 = insertvalue { ptr, ptr, ptr, i32 } %274, ptr %276, 1
  %278 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 2
  %279 = load ptr, ptr %278, align 8
  %280 = insertvalue { ptr, ptr, ptr, i32 } %277, ptr %279, 2
  %281 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 3
  %282 = load i32, ptr %281, align 4
  %283 = insertvalue { ptr, ptr, ptr, i32 } %280, i32 %282, 3
  %284 = alloca [2 x ptr], align 8
  %285 = getelementptr [2 x ptr], ptr %284, i32 0, i32 0
  store ptr @_parameterization_IntIterator, ptr %285, align 8
  %286 = getelementptr [2 x ptr], ptr %284, i32 0, i32 1
  store ptr @_parameterization_IntIterator, ptr %286, align 8
  %287 = call ptr @llvm.invariant.start.p0(i64 4, ptr %284)
  %288 = call ptr @llvm.invariant.start.p0(i64 64, ptr %273)
  %289 = getelementptr ptr, ptr %273, i32 %282
  %290 = getelementptr ptr, ptr %289, i32 2
  %291 = load ptr, ptr %290, align 8
  %292 = alloca { ptr, ptr }, align 8
  %293 = getelementptr { ptr, ptr }, ptr %292, i32 0, i32 0
  store ptr %236, ptr %293, align 8
  %294 = getelementptr { ptr, ptr }, ptr %292, i32 0, i32 1
  store ptr %261, ptr %294, align 8
  %295 = call ptr %291({ ptr, ptr, ptr, i32 } %283, ptr %292)
  call void %295({ ptr, ptr, ptr, i32 } %283, { ptr, ptr, ptr, i32 } %283, ptr %284, { ptr, ptr, ptr, i32 } %246, { ptr, ptr, ptr, i32 } %271)
  %296 = alloca { ptr, ptr, ptr, i32 }, align 8
  %297 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 0
  %298 = getelementptr { ptr, ptr, ptr, i32 }, ptr %296, i32 0, i32 0
  %299 = load ptr, ptr %297, align 8
  store ptr %299, ptr %298, align 8
  %300 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 1
  %301 = getelementptr { ptr, ptr, ptr, i32 }, ptr %296, i32 0, i32 1
  %302 = load ptr, ptr %300, align 8
  store ptr %302, ptr %301, align 8
  %303 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 2
  %304 = getelementptr { ptr, ptr, ptr, i32 }, ptr %296, i32 0, i32 2
  %305 = load ptr, ptr %303, align 8
  store ptr %305, ptr %304, align 8
  %306 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 3
  %307 = getelementptr { ptr, ptr, ptr, i32 }, ptr %296, i32 0, i32 3
  %308 = load i32, ptr %306, align 4
  store i32 %308, ptr %307, align 4
  call void @set_offset(ptr %296, ptr @Iterator)
  %309 = getelementptr { ptr, ptr, ptr, i32 }, ptr %296, i32 0, i32 0
  %310 = load ptr, ptr %309, align 8
  %311 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %310, 0
  %312 = getelementptr { ptr, ptr, ptr, i32 }, ptr %296, i32 0, i32 1
  %313 = load ptr, ptr %312, align 8
  %314 = insertvalue { ptr, ptr, ptr, i32 } %311, ptr %313, 1
  %315 = getelementptr { ptr, ptr, ptr, i32 }, ptr %296, i32 0, i32 2
  %316 = load ptr, ptr %315, align 8
  %317 = insertvalue { ptr, ptr, ptr, i32 } %314, ptr %316, 2
  %318 = getelementptr { ptr, ptr, ptr, i32 }, ptr %296, i32 0, i32 3
  %319 = load i32, ptr %318, align 4
  %320 = insertvalue { ptr, ptr, ptr, i32 } %317, i32 %319, 3
  ret { ptr, ptr, ptr, i32 } %320
}

define ptr @ZipIterator_B_init_firstIntIterator_secondIntIterator({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -933084275656658555, i64 ptrtoint (ptr @IntIterator to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 -933084275656658555, i64 ptrtoint (ptr @IntIterator to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [8 x ptr], ptr %26, i32 0, i32 4
  %28 = getelementptr ptr, ptr %27, i32 7
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @ZipIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [8 x ptr], ptr %4, i32 0, i32 5
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @ZipIterator_init_firstIntIterator_secondIntIterator({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @ZipIterator)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @IntIterator)
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %45 = load ptr, ptr %43, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %48 = load i32, ptr %46, align 4
  store i32 %48, ptr %47, align 4
  call void @set_offset(ptr %36, ptr @IntIterator)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %8, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 64, ptr %51)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = getelementptr ptr, ptr %51, i32 %54
  %56 = load ptr, ptr %55, align 8
  %57 = getelementptr { ptr, ptr }, ptr %56, i32 0, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %63 = load ptr, ptr %62, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %63, 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %66 = load ptr, ptr %65, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %66, 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %69 = load i32, ptr %68, align 4
  %70 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %69, 3
  call void %58(ptr %50, { ptr, ptr, ptr, i32 } %70)
  %71 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %71, align 8
  %72 = call ptr @llvm.invariant.start.p0(i64 16, ptr %71)
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 0
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %76 = load ptr, ptr %74, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 1
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %79 = load ptr, ptr %77, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 2
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %82 = load ptr, ptr %80, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 3
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %85 = load i32, ptr %83, align 4
  store i32 %85, ptr %84, align 4
  call void @set_offset(ptr %73, ptr @IntIterator)
  %86 = alloca { ptr, ptr, ptr, i32 }, align 8
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 0
  %89 = load ptr, ptr %87, align 8
  store ptr %89, ptr %88, align 8
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 1
  %92 = load ptr, ptr %90, align 8
  store ptr %92, ptr %91, align 8
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 2
  %95 = load ptr, ptr %93, align 8
  store ptr %95, ptr %94, align 8
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 3
  %98 = load i32, ptr %96, align 4
  store i32 %98, ptr %97, align 4
  call void @set_offset(ptr %86, ptr @IntIterator)
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %100 = load ptr, ptr %99, align 8
  %101 = load ptr, ptr %8, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 64, ptr %101)
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %104 = load i32, ptr %103, align 4
  %105 = getelementptr ptr, ptr %101, i32 %104
  %106 = getelementptr ptr, ptr %105, i32 1
  %107 = load ptr, ptr %106, align 8
  %108 = getelementptr { ptr, ptr }, ptr %107, i32 0, i32 1
  %109 = load ptr, ptr %108, align 8
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 0
  %111 = load ptr, ptr %110, align 8
  %112 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %111, 0
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 1
  %114 = load ptr, ptr %113, align 8
  %115 = insertvalue { ptr, ptr, ptr, i32 } %112, ptr %114, 1
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 2
  %117 = load ptr, ptr %116, align 8
  %118 = insertvalue { ptr, ptr, ptr, i32 } %115, ptr %117, 2
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 3
  %120 = load i32, ptr %119, align 4
  %121 = insertvalue { ptr, ptr, ptr, i32 } %118, i32 %120, 3
  call void %109(ptr %100, { ptr, ptr, ptr, i32 } %121)
  ret void
}

define { ptr, i64 } @ZipIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i64 }, align 8
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca { ptr, i64 }, align 8
  %.reg2mem5 = alloca { ptr, i64 }, align 8
  %.reg2mem7 = alloca { ptr, i64 }, align 8
  %.reg2mem9 = alloca i32, align 4
  %.reg2mem11 = alloca ptr, align 8
  %.reg2mem15 = alloca { ptr, i64 }, align 8
  %.reg2mem17 = alloca i32, align 4
  %.reg2mem19 = alloca { ptr, i64 }, align 8
  %.reg2mem21 = alloca { ptr, i64 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @ZipIterator)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 64, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 0
  %28 = load ptr, ptr %27, align 8
  %29 = call { ptr, ptr, ptr, i32 } %28(ptr %20)
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %29, ptr %30, align 8
  %31 = call ptr @llvm.invariant.start.p0(i64 16, ptr %30)
  call void @assume_offset(ptr %30, ptr @IntIterator)
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %33, 0
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %36, 1
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %39 = load ptr, ptr %38, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %39, 2
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %42 = load i32, ptr %41, align 4
  %43 = insertvalue { ptr, ptr, ptr, i32 } %40, i32 %42, 3
  %44 = alloca [0 x ptr], align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 0, ptr %44)
  %46 = call ptr @llvm.invariant.start.p0(i64 16, ptr %33)
  %47 = getelementptr ptr, ptr %33, i32 %42
  %48 = load ptr, ptr %47, align 8
  %49 = alloca {}, align 8
  %50 = call ptr %48({ ptr, ptr, ptr, i32 } %43, ptr %49)
  %51 = call { ptr, i32 } %50({ ptr, ptr, ptr, i32 } %43, { ptr, ptr, ptr, i32 } %43, ptr %44)
  %52 = alloca { ptr, i32 }, align 8
  store { ptr, i32 } %51, ptr %52, align 8
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %54 = load ptr, ptr %53, align 8
  %55 = load ptr, ptr %6, align 8
  %56 = call ptr @llvm.invariant.start.p0(i64 64, ptr %55)
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %58 = load i32, ptr %57, align 4
  %59 = getelementptr ptr, ptr %55, i32 %58
  %60 = getelementptr ptr, ptr %59, i32 1
  %61 = load ptr, ptr %60, align 8
  %62 = getelementptr { ptr, ptr }, ptr %61, i32 0, i32 0
  %63 = load ptr, ptr %62, align 8
  %64 = call { ptr, ptr, ptr, i32 } %63(ptr %54)
  %65 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %64, ptr %65, align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 16, ptr %65)
  call void @assume_offset(ptr %65, ptr @IntIterator)
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 0
  %68 = load ptr, ptr %67, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %68, 0
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 1
  %71 = load ptr, ptr %70, align 8
  %72 = insertvalue { ptr, ptr, ptr, i32 } %69, ptr %71, 1
  %73 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 2
  %74 = load ptr, ptr %73, align 8
  %75 = insertvalue { ptr, ptr, ptr, i32 } %72, ptr %74, 2
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %65, i32 0, i32 3
  %77 = load i32, ptr %76, align 4
  %78 = insertvalue { ptr, ptr, ptr, i32 } %75, i32 %77, 3
  %79 = alloca [0 x ptr], align 8
  %80 = call ptr @llvm.invariant.start.p0(i64 0, ptr %79)
  %81 = call ptr @llvm.invariant.start.p0(i64 16, ptr %68)
  %82 = getelementptr ptr, ptr %68, i32 %77
  %83 = load ptr, ptr %82, align 8
  %84 = alloca {}, align 8
  %85 = call ptr %83({ ptr, ptr, ptr, i32 } %78, ptr %84)
  %86 = call { ptr, i32 } %85({ ptr, ptr, ptr, i32 } %78, { ptr, ptr, ptr, i32 } %78, ptr %79)
  %87 = alloca { ptr, i32 }, align 8
  store { ptr, i32 } %86, ptr %87, align 8
  %88 = getelementptr { ptr, i32 }, ptr %52, i32 0, i32 0
  %89 = load ptr, ptr %88, align 8
  %90 = ptrtoint ptr %89 to i64
  %91 = icmp eq i64 %90, ptrtoint (ptr @nil_typ to i64)
  %92 = icmp eq i64 %90, 0
  %93 = or i1 %91, %92
  %94 = icmp eq i1 %93, false
  %95 = alloca i32, align 4
  %96 = alloca i64, align 8
  %97 = alloca i1, align 1
  %98 = alloca i32, align 4
  %99 = alloca i32, align 4
  %100 = alloca i32, align 4
  %101 = alloca i64, align 8
  %102 = alloca ptr, align 8
  %103 = alloca i64, align 8
  %104 = alloca i32, align 4
  %105 = alloca ptr, align 8
  %106 = alloca i64, align 8
  %107 = alloca [0 x i8], align 1
  %108 = alloca i64, align 8
  %109 = alloca ptr, align 8
  %110 = alloca i64, align 8
  br i1 %94, label %111, label %149

111:                                              ; preds = %3
  store ptr %95, ptr %.reg2mem11, align 8
  %112 = getelementptr { ptr, i32 }, ptr %52, i32 0, i32 1
  %113 = load i32, ptr %112, align 4
  %.reload14 = load ptr, ptr %.reg2mem11, align 8
  store i32 %113, ptr %.reload14, align 4
  %114 = getelementptr { ptr, i32 }, ptr %87, i32 0, i32 0
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %96, align 4
  %115 = load ptr, ptr %114, align 8
  %116 = ptrtoint ptr %115 to i64
  %117 = load ptr, ptr %96, align 8
  %118 = ptrtoint ptr %117 to i64
  %119 = icmp eq i64 %116, %118
  %120 = icmp eq i64 %116, 0
  %121 = or i1 %119, %120
  %122 = icmp eq i1 %121, false
  store i1 %122, ptr %97, align 1
  %123 = load i1, ptr %97, align 1
  %124 = xor i1 %123, true
  %125 = zext i1 %124 to i32
  store i32 %125, ptr %.reg2mem9, align 4
  br i1 %123, label %126, label %140

126:                                              ; preds = %111
  %127 = getelementptr { ptr, i32 }, ptr %87, i32 0, i32 1
  %128 = load i32, ptr %127, align 4
  store i32 %128, ptr %98, align 4
  %.reload13 = load ptr, ptr %.reg2mem11, align 8
  %129 = load i32, ptr %.reload13, align 4
  %130 = load i32, ptr %98, align 4
  store i32 %129, ptr %100, align 4
  store i32 %130, ptr %99, align 4
  %131 = getelementptr { i32, i32 }, ptr %101, i32 0, i32 0
  %132 = load i32, ptr %100, align 4
  store i32 %132, ptr %131, align 4
  %133 = getelementptr { i32, i32 }, ptr %101, i32 0, i32 1
  %134 = load i32, ptr %99, align 4
  store i32 %134, ptr %133, align 4
  store i64 ptrtoint (ptr @tuple_typ to i64), ptr %103, align 4
  %135 = load i64, ptr %103, align 4
  store i64 %135, ptr %102, align 4
  %136 = load ptr, ptr %102, align 8
  %137 = insertvalue { ptr, i64 } undef, ptr %136, 0
  %138 = load i64, ptr %101, align 4
  %139 = insertvalue { ptr, i64 } %137, i64 %138, 1
  store { ptr, i64 } %139, ptr %.reg2mem7, align 8
  %.reload8 = load { ptr, i64 }, ptr %.reg2mem7, align 8
  store { ptr, i64 } %.reload8, ptr %.reg2mem21, align 8
  br label %147

140:                                              ; preds = %111
  %.reload12 = load ptr, ptr %.reg2mem11, align 8
  %141 = load i32, ptr %.reload12, align 4
  store i32 %141, ptr %104, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %106, align 4
  %142 = load i64, ptr %106, align 4
  store i64 %142, ptr %105, align 4
  %143 = getelementptr { ptr, i32 }, ptr %52, i32 0, i32 0
  %144 = load ptr, ptr %105, align 8
  store ptr %144, ptr %143, align 8
  %145 = getelementptr { ptr, i32 }, ptr %52, i32 0, i32 1
  %146 = load i32, ptr %104, align 4
  store i32 %146, ptr %145, align 4
  store { ptr, i64 } poison, ptr %.reg2mem21, align 8
  br label %147

147:                                              ; preds = %140, %126
  %.reload22 = load { ptr, i64 }, ptr %.reg2mem21, align 8
  store { ptr, i64 } %.reload22, ptr %.reg2mem5, align 8
  br label %148

148:                                              ; preds = %147
  %.reload6 = load { ptr, i64 }, ptr %.reg2mem5, align 8
  %.reload10 = load i32, ptr %.reg2mem9, align 4
  store i32 %.reload10, ptr %.reg2mem17, align 4
  store { ptr, i64 } %.reload6, ptr %.reg2mem19, align 8
  br label %150

149:                                              ; preds = %3
  store i32 1, ptr %.reg2mem17, align 4
  store { ptr, i64 } poison, ptr %.reg2mem19, align 8
  br label %150

150:                                              ; preds = %149, %148
  %.reload20 = load { ptr, i64 }, ptr %.reg2mem19, align 8
  %.reload18 = load i32, ptr %.reg2mem17, align 4
  store { ptr, i64 } %.reload20, ptr %.reg2mem3, align 8
  store i32 %.reload18, ptr %.reg2mem1, align 4
  br label %151

151:                                              ; preds = %150
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  %152 = zext i32 %.reload2 to i64
  %153 = trunc i64 %152 to i32
  switch i32 %153, label %155 [
    i32 0, label %154
  ]

154:                                              ; preds = %151
  %.reload4 = load { ptr, i64 }, ptr %.reg2mem3, align 8
  store { ptr, i64 } %.reload4, ptr %.reg2mem15, align 8
  br label %162

155:                                              ; preds = %151
  %156 = load [0 x i8], ptr %107, align 1
  store [0 x i8] %156, ptr %108, align 1
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %110, align 4
  %157 = load i64, ptr %110, align 4
  store i64 %157, ptr %109, align 4
  %158 = load ptr, ptr %109, align 8
  %159 = insertvalue { ptr, i64 } undef, ptr %158, 0
  %160 = load i64, ptr %108, align 4
  %161 = insertvalue { ptr, i64 } %159, i64 %160, 1
  store { ptr, i64 } %161, ptr %.reg2mem, align 8
  %.reload = load { ptr, i64 }, ptr %.reg2mem, align 8
  store { ptr, i64 } %.reload, ptr %.reg2mem15, align 8
  br label %162

162:                                              ; preds = %155, %154
  %.reload16 = load { ptr, i64 }, ptr %.reg2mem15, align 8
  ret { ptr, i64 } %.reload16
}

define { ptr, ptr, ptr, i32 } @ZipIterator_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 1
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @ZipIterator_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 1
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ZipIterator_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 0
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @ZipIterator_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 0
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ZipIterable_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 1
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @ZipIterable_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 1
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ZipIterable_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 0
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @ZipIterable_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 0
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  ret void
}

define ptr @InterleaveIterable_B_init_firstIntIterable_secondIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [52 x ptr], ptr %26, i32 0, i32 14
  %28 = getelementptr ptr, ptr %27, i32 7
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @InterleaveIterable_B_each_fFunctionPtri32_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 15
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @InterleaveIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [52 x ptr], ptr %26, i32 0, i32 16
  %28 = getelementptr ptr, ptr %27, i32 7
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @InterleaveIterable_B_all_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 17
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @InterleaveIterable_B_any_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 18
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @InterleaveIterable_B_map_fFunctionPtri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 19
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @InterleaveIterable_B_filter_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 20
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @InterleaveIterable_B_chain_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 21
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @InterleaveIterable_B_interleave_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 22
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @InterleaveIterable_B_zip_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 23
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @InterleaveIterable_B_product_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 24
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @InterleaveIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [52 x ptr], ptr %4, i32 0, i32 25
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @InterleaveIterable_init_firstIntIterable_secondIntIterable({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @InterleaveIterable)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @IntIterable)
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %45 = load ptr, ptr %43, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %48 = load i32, ptr %46, align 4
  store i32 %48, ptr %47, align 4
  call void @set_offset(ptr %36, ptr @IntIterable)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %8, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 416, ptr %51)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = getelementptr ptr, ptr %51, i32 %54
  %56 = load ptr, ptr %55, align 8
  %57 = getelementptr { ptr, ptr }, ptr %56, i32 0, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %63 = load ptr, ptr %62, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %63, 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %66 = load ptr, ptr %65, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %66, 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %69 = load i32, ptr %68, align 4
  %70 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %69, 3
  call void %58(ptr %50, { ptr, ptr, ptr, i32 } %70)
  %71 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %71, align 8
  %72 = call ptr @llvm.invariant.start.p0(i64 16, ptr %71)
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 0
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %76 = load ptr, ptr %74, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 1
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %79 = load ptr, ptr %77, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 2
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %82 = load ptr, ptr %80, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 3
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %85 = load i32, ptr %83, align 4
  store i32 %85, ptr %84, align 4
  call void @set_offset(ptr %73, ptr @IntIterable)
  %86 = alloca { ptr, ptr, ptr, i32 }, align 8
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 0
  %89 = load ptr, ptr %87, align 8
  store ptr %89, ptr %88, align 8
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 1
  %92 = load ptr, ptr %90, align 8
  store ptr %92, ptr %91, align 8
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 2
  %95 = load ptr, ptr %93, align 8
  store ptr %95, ptr %94, align 8
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 3
  %98 = load i32, ptr %96, align 4
  store i32 %98, ptr %97, align 4
  call void @set_offset(ptr %86, ptr @IntIterable)
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %100 = load ptr, ptr %99, align 8
  %101 = load ptr, ptr %8, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 416, ptr %101)
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %104 = load i32, ptr %103, align 4
  %105 = getelementptr ptr, ptr %101, i32 %104
  %106 = getelementptr ptr, ptr %105, i32 1
  %107 = load ptr, ptr %106, align 8
  %108 = getelementptr { ptr, ptr }, ptr %107, i32 0, i32 1
  %109 = load ptr, ptr %108, align 8
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 0
  %111 = load ptr, ptr %110, align 8
  %112 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %111, 0
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 1
  %114 = load ptr, ptr %113, align 8
  %115 = insertvalue { ptr, ptr, ptr, i32 } %112, ptr %114, 1
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 2
  %117 = load ptr, ptr %116, align 8
  %118 = insertvalue { ptr, ptr, ptr, i32 } %115, ptr %117, 2
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 3
  %120 = load i32, ptr %119, align 4
  %121 = insertvalue { ptr, ptr, ptr, i32 } %118, i32 %120, 3
  call void %109(ptr %100, { ptr, ptr, ptr, i32 } %121)
  ret void
}

define { ptr, ptr, ptr, i32 } @InterleaveIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @InterleaveIterable)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 416, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 0
  %28 = load ptr, ptr %27, align 8
  %29 = call { ptr, ptr, ptr, i32 } %28(ptr %20)
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %29, ptr %30, align 8
  %31 = call ptr @llvm.invariant.start.p0(i64 16, ptr %30)
  call void @assume_offset(ptr %30, ptr @IntIterable)
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %33, 0
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %36, 1
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %39 = load ptr, ptr %38, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %39, 2
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %42 = load i32, ptr %41, align 4
  %43 = insertvalue { ptr, ptr, ptr, i32 } %40, i32 %42, 3
  %44 = alloca [0 x ptr], align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 0, ptr %44)
  %46 = call ptr @llvm.invariant.start.p0(i64 192, ptr %33)
  %47 = getelementptr ptr, ptr %33, i32 %42
  %48 = getelementptr ptr, ptr %47, i32 10
  %49 = load ptr, ptr %48, align 8
  %50 = alloca {}, align 8
  %51 = call ptr %49({ ptr, ptr, ptr, i32 } %43, ptr %50)
  %52 = call { ptr, ptr, ptr, i32 } %51({ ptr, ptr, ptr, i32 } %43, { ptr, ptr, ptr, i32 } %43, ptr %44)
  %53 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %52, ptr %53, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 16, ptr %53)
  %55 = alloca { ptr, ptr, ptr, i32 }, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 0
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 0
  %58 = load ptr, ptr %56, align 8
  store ptr %58, ptr %57, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 1
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  %61 = load ptr, ptr %59, align 8
  store ptr %61, ptr %60, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 2
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 2
  %64 = load ptr, ptr %62, align 8
  store ptr %64, ptr %63, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 3
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  %67 = load i32, ptr %65, align 4
  store i32 %67, ptr %66, align 4
  call void @set_offset(ptr %55, ptr @IntIterator)
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = load ptr, ptr %6, align 8
  %71 = call ptr @llvm.invariant.start.p0(i64 416, ptr %70)
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %73 = load i32, ptr %72, align 4
  %74 = getelementptr ptr, ptr %70, i32 %73
  %75 = getelementptr ptr, ptr %74, i32 1
  %76 = load ptr, ptr %75, align 8
  %77 = getelementptr { ptr, ptr }, ptr %76, i32 0, i32 0
  %78 = load ptr, ptr %77, align 8
  %79 = call { ptr, ptr, ptr, i32 } %78(ptr %69)
  %80 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %79, ptr %80, align 8
  %81 = call ptr @llvm.invariant.start.p0(i64 16, ptr %80)
  call void @assume_offset(ptr %80, ptr @IntIterable)
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %80, i32 0, i32 0
  %83 = load ptr, ptr %82, align 8
  %84 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %83, 0
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %80, i32 0, i32 1
  %86 = load ptr, ptr %85, align 8
  %87 = insertvalue { ptr, ptr, ptr, i32 } %84, ptr %86, 1
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %80, i32 0, i32 2
  %89 = load ptr, ptr %88, align 8
  %90 = insertvalue { ptr, ptr, ptr, i32 } %87, ptr %89, 2
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %80, i32 0, i32 3
  %92 = load i32, ptr %91, align 4
  %93 = insertvalue { ptr, ptr, ptr, i32 } %90, i32 %92, 3
  %94 = alloca [0 x ptr], align 8
  %95 = call ptr @llvm.invariant.start.p0(i64 0, ptr %94)
  %96 = call ptr @llvm.invariant.start.p0(i64 192, ptr %83)
  %97 = getelementptr ptr, ptr %83, i32 %92
  %98 = getelementptr ptr, ptr %97, i32 10
  %99 = load ptr, ptr %98, align 8
  %100 = alloca {}, align 8
  %101 = call ptr %99({ ptr, ptr, ptr, i32 } %93, ptr %100)
  %102 = call { ptr, ptr, ptr, i32 } %101({ ptr, ptr, ptr, i32 } %93, { ptr, ptr, ptr, i32 } %93, ptr %94)
  %103 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %102, ptr %103, align 8
  %104 = call ptr @llvm.invariant.start.p0(i64 16, ptr %103)
  %105 = alloca { ptr, ptr, ptr, i32 }, align 8
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 0
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 0
  %108 = load ptr, ptr %106, align 8
  store ptr %108, ptr %107, align 8
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 1
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 1
  %111 = load ptr, ptr %109, align 8
  store ptr %111, ptr %110, align 8
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 2
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 2
  %114 = load ptr, ptr %112, align 8
  store ptr %114, ptr %113, align 8
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 3
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 3
  %117 = load i32, ptr %115, align 4
  store i32 %117, ptr %116, align 4
  call void @set_offset(ptr %105, ptr @IntIterator)
  %118 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, i1 }, ptr null, i32 1) to i64))
  %119 = alloca { ptr, ptr, ptr, i32 }, align 8
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 1
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 3
  store ptr @InterleaveIterator, ptr %119, align 8
  store ptr %118, ptr %120, align 8
  store i32 7, ptr %121, align 4
  %122 = call ptr @llvm.invariant.start.p0(i64 16, ptr %119)
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %124 = load ptr, ptr %123, align 8
  %125 = load ptr, ptr %6, align 8
  %126 = call ptr @llvm.invariant.start.p0(i64 416, ptr %125)
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %128 = load i32, ptr %127, align 4
  %129 = getelementptr ptr, ptr %125, i32 %128
  %130 = load ptr, ptr %129, align 8
  %131 = getelementptr { ptr, ptr }, ptr %130, i32 0, i32 0
  %132 = load ptr, ptr %131, align 8
  %133 = call { ptr, ptr, ptr, i32 } %132(ptr %124)
  %134 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %133, ptr %134, align 8
  %135 = call ptr @llvm.invariant.start.p0(i64 16, ptr %134)
  call void @assume_offset(ptr %134, ptr @IntIterable)
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 0
  %137 = load ptr, ptr %136, align 8
  %138 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %137, 0
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 1
  %140 = load ptr, ptr %139, align 8
  %141 = insertvalue { ptr, ptr, ptr, i32 } %138, ptr %140, 1
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 2
  %143 = load ptr, ptr %142, align 8
  %144 = insertvalue { ptr, ptr, ptr, i32 } %141, ptr %143, 2
  %145 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 3
  %146 = load i32, ptr %145, align 4
  %147 = insertvalue { ptr, ptr, ptr, i32 } %144, i32 %146, 3
  %148 = alloca [0 x ptr], align 8
  %149 = call ptr @llvm.invariant.start.p0(i64 0, ptr %148)
  %150 = call ptr @llvm.invariant.start.p0(i64 192, ptr %137)
  %151 = getelementptr ptr, ptr %137, i32 %146
  %152 = getelementptr ptr, ptr %151, i32 10
  %153 = load ptr, ptr %152, align 8
  %154 = alloca {}, align 8
  %155 = call ptr %153({ ptr, ptr, ptr, i32 } %147, ptr %154)
  %156 = call { ptr, ptr, ptr, i32 } %155({ ptr, ptr, ptr, i32 } %147, { ptr, ptr, ptr, i32 } %147, ptr %148)
  %157 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %156, ptr %157, align 8
  %158 = call ptr @llvm.invariant.start.p0(i64 16, ptr %157)
  %159 = alloca { ptr, ptr, ptr, i32 }, align 8
  %160 = getelementptr { ptr, ptr, ptr, i32 }, ptr %157, i32 0, i32 0
  %161 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 0
  %162 = load ptr, ptr %160, align 8
  store ptr %162, ptr %161, align 8
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %157, i32 0, i32 1
  %164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 1
  %165 = load ptr, ptr %163, align 8
  store ptr %165, ptr %164, align 8
  %166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %157, i32 0, i32 2
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 2
  %168 = load ptr, ptr %166, align 8
  store ptr %168, ptr %167, align 8
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %157, i32 0, i32 3
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 3
  %171 = load i32, ptr %169, align 4
  store i32 %171, ptr %170, align 4
  call void @set_offset(ptr %159, ptr @IntIterator)
  %172 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %173 = load ptr, ptr %172, align 8
  %174 = load ptr, ptr %6, align 8
  %175 = call ptr @llvm.invariant.start.p0(i64 416, ptr %174)
  %176 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %177 = load i32, ptr %176, align 4
  %178 = getelementptr ptr, ptr %174, i32 %177
  %179 = getelementptr ptr, ptr %178, i32 1
  %180 = load ptr, ptr %179, align 8
  %181 = getelementptr { ptr, ptr }, ptr %180, i32 0, i32 0
  %182 = load ptr, ptr %181, align 8
  %183 = call { ptr, ptr, ptr, i32 } %182(ptr %173)
  %184 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %183, ptr %184, align 8
  %185 = call ptr @llvm.invariant.start.p0(i64 16, ptr %184)
  call void @assume_offset(ptr %184, ptr @IntIterable)
  %186 = getelementptr { ptr, ptr, ptr, i32 }, ptr %184, i32 0, i32 0
  %187 = load ptr, ptr %186, align 8
  %188 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %187, 0
  %189 = getelementptr { ptr, ptr, ptr, i32 }, ptr %184, i32 0, i32 1
  %190 = load ptr, ptr %189, align 8
  %191 = insertvalue { ptr, ptr, ptr, i32 } %188, ptr %190, 1
  %192 = getelementptr { ptr, ptr, ptr, i32 }, ptr %184, i32 0, i32 2
  %193 = load ptr, ptr %192, align 8
  %194 = insertvalue { ptr, ptr, ptr, i32 } %191, ptr %193, 2
  %195 = getelementptr { ptr, ptr, ptr, i32 }, ptr %184, i32 0, i32 3
  %196 = load i32, ptr %195, align 4
  %197 = insertvalue { ptr, ptr, ptr, i32 } %194, i32 %196, 3
  %198 = alloca [0 x ptr], align 8
  %199 = call ptr @llvm.invariant.start.p0(i64 0, ptr %198)
  %200 = call ptr @llvm.invariant.start.p0(i64 192, ptr %187)
  %201 = getelementptr ptr, ptr %187, i32 %196
  %202 = getelementptr ptr, ptr %201, i32 10
  %203 = load ptr, ptr %202, align 8
  %204 = alloca {}, align 8
  %205 = call ptr %203({ ptr, ptr, ptr, i32 } %197, ptr %204)
  %206 = call { ptr, ptr, ptr, i32 } %205({ ptr, ptr, ptr, i32 } %197, { ptr, ptr, ptr, i32 } %197, ptr %198)
  %207 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %206, ptr %207, align 8
  %208 = call ptr @llvm.invariant.start.p0(i64 16, ptr %207)
  %209 = alloca { ptr, ptr, ptr, i32 }, align 8
  %210 = getelementptr { ptr, ptr, ptr, i32 }, ptr %207, i32 0, i32 0
  %211 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 0
  %212 = load ptr, ptr %210, align 8
  store ptr %212, ptr %211, align 8
  %213 = getelementptr { ptr, ptr, ptr, i32 }, ptr %207, i32 0, i32 1
  %214 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 1
  %215 = load ptr, ptr %213, align 8
  store ptr %215, ptr %214, align 8
  %216 = getelementptr { ptr, ptr, ptr, i32 }, ptr %207, i32 0, i32 2
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 2
  %218 = load ptr, ptr %216, align 8
  store ptr %218, ptr %217, align 8
  %219 = getelementptr { ptr, ptr, ptr, i32 }, ptr %207, i32 0, i32 3
  %220 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 3
  %221 = load i32, ptr %219, align 4
  store i32 %221, ptr %220, align 4
  call void @set_offset(ptr %209, ptr @IntIterator)
  %222 = alloca { ptr, ptr, ptr, i32 }, align 8
  %223 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 0
  %224 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 0
  %225 = load ptr, ptr %223, align 8
  store ptr %225, ptr %224, align 8
  %226 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 1
  %227 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 1
  %228 = load ptr, ptr %226, align 8
  store ptr %228, ptr %227, align 8
  %229 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 2
  %230 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 2
  %231 = load ptr, ptr %229, align 8
  store ptr %231, ptr %230, align 8
  %232 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 3
  %233 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 3
  %234 = load i32, ptr %232, align 4
  store i32 %234, ptr %233, align 4
  call void @set_offset(ptr %222, ptr @IntIterator)
  %235 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 0
  %236 = load ptr, ptr %235, align 8
  %237 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %236, 0
  %238 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 1
  %239 = load ptr, ptr %238, align 8
  %240 = insertvalue { ptr, ptr, ptr, i32 } %237, ptr %239, 1
  %241 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 2
  %242 = load ptr, ptr %241, align 8
  %243 = insertvalue { ptr, ptr, ptr, i32 } %240, ptr %242, 2
  %244 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 3
  %245 = load i32, ptr %244, align 4
  %246 = insertvalue { ptr, ptr, ptr, i32 } %243, i32 %245, 3
  %247 = alloca { ptr, ptr, ptr, i32 }, align 8
  %248 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 0
  %249 = getelementptr { ptr, ptr, ptr, i32 }, ptr %247, i32 0, i32 0
  %250 = load ptr, ptr %248, align 8
  store ptr %250, ptr %249, align 8
  %251 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 1
  %252 = getelementptr { ptr, ptr, ptr, i32 }, ptr %247, i32 0, i32 1
  %253 = load ptr, ptr %251, align 8
  store ptr %253, ptr %252, align 8
  %254 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 2
  %255 = getelementptr { ptr, ptr, ptr, i32 }, ptr %247, i32 0, i32 2
  %256 = load ptr, ptr %254, align 8
  store ptr %256, ptr %255, align 8
  %257 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 3
  %258 = getelementptr { ptr, ptr, ptr, i32 }, ptr %247, i32 0, i32 3
  %259 = load i32, ptr %257, align 4
  store i32 %259, ptr %258, align 4
  call void @set_offset(ptr %247, ptr @IntIterator)
  %260 = getelementptr { ptr, ptr, ptr, i32 }, ptr %247, i32 0, i32 0
  %261 = load ptr, ptr %260, align 8
  %262 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %261, 0
  %263 = getelementptr { ptr, ptr, ptr, i32 }, ptr %247, i32 0, i32 1
  %264 = load ptr, ptr %263, align 8
  %265 = insertvalue { ptr, ptr, ptr, i32 } %262, ptr %264, 1
  %266 = getelementptr { ptr, ptr, ptr, i32 }, ptr %247, i32 0, i32 2
  %267 = load ptr, ptr %266, align 8
  %268 = insertvalue { ptr, ptr, ptr, i32 } %265, ptr %267, 2
  %269 = getelementptr { ptr, ptr, ptr, i32 }, ptr %247, i32 0, i32 3
  %270 = load i32, ptr %269, align 4
  %271 = insertvalue { ptr, ptr, ptr, i32 } %268, i32 %270, 3
  %272 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 0
  %273 = load ptr, ptr %272, align 8
  %274 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %273, 0
  %275 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 1
  %276 = load ptr, ptr %275, align 8
  %277 = insertvalue { ptr, ptr, ptr, i32 } %274, ptr %276, 1
  %278 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 2
  %279 = load ptr, ptr %278, align 8
  %280 = insertvalue { ptr, ptr, ptr, i32 } %277, ptr %279, 2
  %281 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 3
  %282 = load i32, ptr %281, align 4
  %283 = insertvalue { ptr, ptr, ptr, i32 } %280, i32 %282, 3
  %284 = alloca [2 x ptr], align 8
  %285 = getelementptr [2 x ptr], ptr %284, i32 0, i32 0
  store ptr @_parameterization_IntIterator, ptr %285, align 8
  %286 = getelementptr [2 x ptr], ptr %284, i32 0, i32 1
  store ptr @_parameterization_IntIterator, ptr %286, align 8
  %287 = call ptr @llvm.invariant.start.p0(i64 4, ptr %284)
  %288 = call ptr @llvm.invariant.start.p0(i64 72, ptr %273)
  %289 = getelementptr ptr, ptr %273, i32 %282
  %290 = getelementptr ptr, ptr %289, i32 3
  %291 = load ptr, ptr %290, align 8
  %292 = alloca { ptr, ptr }, align 8
  %293 = getelementptr { ptr, ptr }, ptr %292, i32 0, i32 0
  store ptr %236, ptr %293, align 8
  %294 = getelementptr { ptr, ptr }, ptr %292, i32 0, i32 1
  store ptr %261, ptr %294, align 8
  %295 = call ptr %291({ ptr, ptr, ptr, i32 } %283, ptr %292)
  call void %295({ ptr, ptr, ptr, i32 } %283, { ptr, ptr, ptr, i32 } %283, ptr %284, { ptr, ptr, ptr, i32 } %246, { ptr, ptr, ptr, i32 } %271)
  %296 = alloca { ptr, ptr, ptr, i32 }, align 8
  %297 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 0
  %298 = getelementptr { ptr, ptr, ptr, i32 }, ptr %296, i32 0, i32 0
  %299 = load ptr, ptr %297, align 8
  store ptr %299, ptr %298, align 8
  %300 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 1
  %301 = getelementptr { ptr, ptr, ptr, i32 }, ptr %296, i32 0, i32 1
  %302 = load ptr, ptr %300, align 8
  store ptr %302, ptr %301, align 8
  %303 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 2
  %304 = getelementptr { ptr, ptr, ptr, i32 }, ptr %296, i32 0, i32 2
  %305 = load ptr, ptr %303, align 8
  store ptr %305, ptr %304, align 8
  %306 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 3
  %307 = getelementptr { ptr, ptr, ptr, i32 }, ptr %296, i32 0, i32 3
  %308 = load i32, ptr %306, align 4
  store i32 %308, ptr %307, align 4
  call void @set_offset(ptr %296, ptr @Iterator)
  %309 = getelementptr { ptr, ptr, ptr, i32 }, ptr %296, i32 0, i32 0
  %310 = load ptr, ptr %309, align 8
  %311 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %310, 0
  %312 = getelementptr { ptr, ptr, ptr, i32 }, ptr %296, i32 0, i32 1
  %313 = load ptr, ptr %312, align 8
  %314 = insertvalue { ptr, ptr, ptr, i32 } %311, ptr %313, 1
  %315 = getelementptr { ptr, ptr, ptr, i32 }, ptr %296, i32 0, i32 2
  %316 = load ptr, ptr %315, align 8
  %317 = insertvalue { ptr, ptr, ptr, i32 } %314, ptr %316, 2
  %318 = getelementptr { ptr, ptr, ptr, i32 }, ptr %296, i32 0, i32 3
  %319 = load i32, ptr %318, align 4
  %320 = insertvalue { ptr, ptr, ptr, i32 } %317, i32 %319, 3
  ret { ptr, ptr, ptr, i32 } %320
}

define ptr @InterleaveIterator_B_init_firstIntIterator_secondIntIterator({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -933084275656658555, i64 ptrtoint (ptr @IntIterator to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 -933084275656658555, i64 ptrtoint (ptr @IntIterator to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [9 x ptr], ptr %26, i32 0, i32 5
  %28 = getelementptr ptr, ptr %27, i32 7
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @InterleaveIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [9 x ptr], ptr %4, i32 0, i32 6
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @InterleaveIterator_init_firstIntIterator_secondIntIterator({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @InterleaveIterator)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @IntIterator)
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %45 = load ptr, ptr %43, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %48 = load i32, ptr %46, align 4
  store i32 %48, ptr %47, align 4
  call void @set_offset(ptr %36, ptr @IntIterator)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %8, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 72, ptr %51)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = getelementptr ptr, ptr %51, i32 %54
  %56 = load ptr, ptr %55, align 8
  %57 = getelementptr { ptr, ptr }, ptr %56, i32 0, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %63 = load ptr, ptr %62, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %63, 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %66 = load ptr, ptr %65, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %66, 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %69 = load i32, ptr %68, align 4
  %70 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %69, 3
  call void %58(ptr %50, { ptr, ptr, ptr, i32 } %70)
  %71 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %71, align 8
  %72 = call ptr @llvm.invariant.start.p0(i64 16, ptr %71)
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 0
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %76 = load ptr, ptr %74, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 1
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %79 = load ptr, ptr %77, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 2
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %82 = load ptr, ptr %80, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 3
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %85 = load i32, ptr %83, align 4
  store i32 %85, ptr %84, align 4
  call void @set_offset(ptr %73, ptr @IntIterator)
  %86 = alloca { ptr, ptr, ptr, i32 }, align 8
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 0
  %89 = load ptr, ptr %87, align 8
  store ptr %89, ptr %88, align 8
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 1
  %92 = load ptr, ptr %90, align 8
  store ptr %92, ptr %91, align 8
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 2
  %95 = load ptr, ptr %93, align 8
  store ptr %95, ptr %94, align 8
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 3
  %98 = load i32, ptr %96, align 4
  store i32 %98, ptr %97, align 4
  call void @set_offset(ptr %86, ptr @IntIterator)
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %100 = load ptr, ptr %99, align 8
  %101 = load ptr, ptr %8, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 72, ptr %101)
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %104 = load i32, ptr %103, align 4
  %105 = getelementptr ptr, ptr %101, i32 %104
  %106 = getelementptr ptr, ptr %105, i32 1
  %107 = load ptr, ptr %106, align 8
  %108 = getelementptr { ptr, ptr }, ptr %107, i32 0, i32 1
  %109 = load ptr, ptr %108, align 8
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 0
  %111 = load ptr, ptr %110, align 8
  %112 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %111, 0
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 1
  %114 = load ptr, ptr %113, align 8
  %115 = insertvalue { ptr, ptr, ptr, i32 } %112, ptr %114, 1
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 2
  %117 = load ptr, ptr %116, align 8
  %118 = insertvalue { ptr, ptr, ptr, i32 } %115, ptr %117, 2
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 3
  %120 = load i32, ptr %119, align 4
  %121 = insertvalue { ptr, ptr, ptr, i32 } %118, i32 %120, 3
  call void %109(ptr %100, { ptr, ptr, ptr, i32 } %121)
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %123 = load ptr, ptr %122, align 8
  %124 = load ptr, ptr %8, align 8
  %125 = call ptr @llvm.invariant.start.p0(i64 72, ptr %124)
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %127 = load i32, ptr %126, align 4
  %128 = getelementptr ptr, ptr %124, i32 %127
  %129 = getelementptr ptr, ptr %128, i32 2
  %130 = load ptr, ptr %129, align 8
  %131 = getelementptr { ptr, ptr }, ptr %130, i32 0, i32 1
  %132 = load ptr, ptr %131, align 8
  call void %132(ptr %123, i1 true)
  ret void
}

define { ptr, i32 } @InterleaveIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i32 }, align 8
  %.reg2mem1 = alloca { ptr, i32 }, align 8
  %.reg2mem3 = alloca { ptr, i32 }, align 8
  %.reg2mem5 = alloca { ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @InterleaveIterator)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 72, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call i1 %29(ptr %20)
  %31 = alloca i1, align 1
  %32 = alloca { ptr, ptr, ptr, i32 }, align 8
  %33 = alloca [0 x ptr], align 8
  %34 = alloca {}, align 8
  %35 = alloca { ptr, i32 }, align 8
  %36 = alloca i1, align 1
  %37 = alloca { ptr, ptr, ptr, i32 }, align 8
  %38 = alloca [0 x ptr], align 8
  %39 = alloca {}, align 8
  %40 = alloca { ptr, i32 }, align 8
  br i1 %30, label %41, label %90

41:                                               ; preds = %3
  store i1 false, ptr %31, align 1
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %43 = load ptr, ptr %42, align 8
  %44 = load ptr, ptr %6, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 72, ptr %44)
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %47 = load i32, ptr %46, align 4
  %48 = getelementptr ptr, ptr %44, i32 %47
  %49 = getelementptr ptr, ptr %48, i32 2
  %50 = load ptr, ptr %49, align 8
  %51 = getelementptr { ptr, ptr }, ptr %50, i32 0, i32 1
  %52 = load ptr, ptr %51, align 8
  %53 = load i1, ptr %31, align 1
  call void %52(ptr %43, i1 %53)
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %55 = load ptr, ptr %54, align 8
  %56 = load ptr, ptr %6, align 8
  %57 = call ptr @llvm.invariant.start.p0(i64 72, ptr %56)
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %59 = load i32, ptr %58, align 4
  %60 = getelementptr ptr, ptr %56, i32 %59
  %61 = load ptr, ptr %60, align 8
  %62 = getelementptr { ptr, ptr }, ptr %61, i32 0, i32 0
  %63 = load ptr, ptr %62, align 8
  %64 = call { ptr, ptr, ptr, i32 } %63(ptr %55)
  store { ptr, ptr, ptr, i32 } %64, ptr %32, align 8
  %65 = call ptr @llvm.invariant.start.p0(i64 16, ptr %32)
  call void @assume_offset(ptr %32, ptr @IntIterator)
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 0
  %67 = load ptr, ptr %66, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %67, 0
  %69 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 1
  %70 = load ptr, ptr %69, align 8
  %71 = insertvalue { ptr, ptr, ptr, i32 } %68, ptr %70, 1
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 2
  %73 = load ptr, ptr %72, align 8
  %74 = insertvalue { ptr, ptr, ptr, i32 } %71, ptr %73, 2
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %32, i32 0, i32 3
  %76 = load i32, ptr %75, align 4
  %77 = insertvalue { ptr, ptr, ptr, i32 } %74, i32 %76, 3
  %78 = call ptr @llvm.invariant.start.p0(i64 0, ptr %33)
  %79 = call ptr @llvm.invariant.start.p0(i64 16, ptr %67)
  %80 = getelementptr ptr, ptr %67, i32 %76
  %81 = load ptr, ptr %80, align 8
  %82 = call ptr %81({ ptr, ptr, ptr, i32 } %77, ptr %34)
  %83 = call { ptr, i32 } %82({ ptr, ptr, ptr, i32 } %77, { ptr, ptr, ptr, i32 } %77, ptr %33)
  store { ptr, i32 } %83, ptr %35, align 8
  %84 = getelementptr { ptr, i32 }, ptr %35, i32 0, i32 0
  %85 = load ptr, ptr %84, align 8
  %86 = insertvalue { ptr, i32 } undef, ptr %85, 0
  %87 = getelementptr { ptr, i32 }, ptr %35, i32 0, i32 1
  %88 = load i32, ptr %87, align 4
  %89 = insertvalue { ptr, i32 } %86, i32 %88, 1
  store { ptr, i32 } %89, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i32 }, ptr %.reg2mem3, align 8
  store { ptr, i32 } %.reload4, ptr %.reg2mem5, align 8
  br label %140

90:                                               ; preds = %3
  store i1 true, ptr %36, align 1
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %92 = load ptr, ptr %91, align 8
  %93 = load ptr, ptr %6, align 8
  %94 = call ptr @llvm.invariant.start.p0(i64 72, ptr %93)
  %95 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %96 = load i32, ptr %95, align 4
  %97 = getelementptr ptr, ptr %93, i32 %96
  %98 = getelementptr ptr, ptr %97, i32 2
  %99 = load ptr, ptr %98, align 8
  %100 = getelementptr { ptr, ptr }, ptr %99, i32 0, i32 1
  %101 = load ptr, ptr %100, align 8
  %102 = load i1, ptr %36, align 1
  call void %101(ptr %92, i1 %102)
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %104 = load ptr, ptr %103, align 8
  %105 = load ptr, ptr %6, align 8
  %106 = call ptr @llvm.invariant.start.p0(i64 72, ptr %105)
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %108 = load i32, ptr %107, align 4
  %109 = getelementptr ptr, ptr %105, i32 %108
  %110 = getelementptr ptr, ptr %109, i32 1
  %111 = load ptr, ptr %110, align 8
  %112 = getelementptr { ptr, ptr }, ptr %111, i32 0, i32 0
  %113 = load ptr, ptr %112, align 8
  %114 = call { ptr, ptr, ptr, i32 } %113(ptr %104)
  store { ptr, ptr, ptr, i32 } %114, ptr %37, align 8
  %115 = call ptr @llvm.invariant.start.p0(i64 16, ptr %37)
  call void @assume_offset(ptr %37, ptr @IntIterator)
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 0
  %117 = load ptr, ptr %116, align 8
  %118 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %117, 0
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 1
  %120 = load ptr, ptr %119, align 8
  %121 = insertvalue { ptr, ptr, ptr, i32 } %118, ptr %120, 1
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 2
  %123 = load ptr, ptr %122, align 8
  %124 = insertvalue { ptr, ptr, ptr, i32 } %121, ptr %123, 2
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %37, i32 0, i32 3
  %126 = load i32, ptr %125, align 4
  %127 = insertvalue { ptr, ptr, ptr, i32 } %124, i32 %126, 3
  %128 = call ptr @llvm.invariant.start.p0(i64 0, ptr %38)
  %129 = call ptr @llvm.invariant.start.p0(i64 16, ptr %117)
  %130 = getelementptr ptr, ptr %117, i32 %126
  %131 = load ptr, ptr %130, align 8
  %132 = call ptr %131({ ptr, ptr, ptr, i32 } %127, ptr %39)
  %133 = call { ptr, i32 } %132({ ptr, ptr, ptr, i32 } %127, { ptr, ptr, ptr, i32 } %127, ptr %38)
  store { ptr, i32 } %133, ptr %40, align 8
  %134 = getelementptr { ptr, i32 }, ptr %40, i32 0, i32 0
  %135 = load ptr, ptr %134, align 8
  %136 = insertvalue { ptr, i32 } undef, ptr %135, 0
  %137 = getelementptr { ptr, i32 }, ptr %40, i32 0, i32 1
  %138 = load i32, ptr %137, align 4
  %139 = insertvalue { ptr, i32 } %136, i32 %138, 1
  store { ptr, i32 } %139, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i32 }, ptr %.reg2mem1, align 8
  store { ptr, i32 } %.reload2, ptr %.reg2mem5, align 8
  br label %140

140:                                              ; preds = %90, %41
  %.reload6 = load { ptr, i32 }, ptr %.reg2mem5, align 8
  store { ptr, i32 } %.reload6, ptr %.reg2mem, align 8
  br label %141

141:                                              ; preds = %140
  %.reload = load { ptr, i32 }, ptr %.reg2mem, align 8
  ret { ptr, i32 } %.reload
}

define i1 @InterleaveIterator_getter_on_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, i1 }, ptr %0, i32 0, i32 2
  %3 = load i1, ptr %2, align 1
  ret i1 %3
}

define void @InterleaveIterator_setter_on_first(ptr %0, i1 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, i1 }, ptr %0, i32 0, i32 2
  store i1 %1, ptr %3, align 1
  ret void
}

define { ptr, ptr, ptr, i32 } @InterleaveIterator_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, i1 }, ptr %0, i32 0, i32 1
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @InterleaveIterator_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, i1 }, ptr %0, i32 0, i32 1
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @InterleaveIterator_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, i1 }, ptr %0, i32 0, i32 0
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @InterleaveIterator_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, i1 }, ptr %0, i32 0, i32 0
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @InterleaveIterable_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 1
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @InterleaveIterable_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 1
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @InterleaveIterable_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 0
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @InterleaveIterable_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 0
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  ret void
}

define ptr @ChainIterable_B_init_firstIntIterable_secondIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [52 x ptr], ptr %26, i32 0, i32 14
  %28 = getelementptr ptr, ptr %27, i32 7
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @ChainIterable_B_each_fFunctionPtri32_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 15
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ChainIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [52 x ptr], ptr %26, i32 0, i32 16
  %28 = getelementptr ptr, ptr %27, i32 7
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @ChainIterable_B_all_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 17
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ChainIterable_B_any_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 18
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ChainIterable_B_map_fFunctionPtri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 19
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ChainIterable_B_filter_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 20
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ChainIterable_B_chain_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 21
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ChainIterable_B_interleave_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 22
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ChainIterable_B_zip_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 23
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ChainIterable_B_product_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 24
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @ChainIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [52 x ptr], ptr %4, i32 0, i32 25
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @ChainIterable_init_firstIntIterable_secondIntIterable({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @ChainIterable)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @IntIterable)
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %45 = load ptr, ptr %43, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %48 = load i32, ptr %46, align 4
  store i32 %48, ptr %47, align 4
  call void @set_offset(ptr %36, ptr @IntIterable)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %8, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 416, ptr %51)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = getelementptr ptr, ptr %51, i32 %54
  %56 = load ptr, ptr %55, align 8
  %57 = getelementptr { ptr, ptr }, ptr %56, i32 0, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %63 = load ptr, ptr %62, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %63, 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %66 = load ptr, ptr %65, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %66, 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %69 = load i32, ptr %68, align 4
  %70 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %69, 3
  call void %58(ptr %50, { ptr, ptr, ptr, i32 } %70)
  %71 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %71, align 8
  %72 = call ptr @llvm.invariant.start.p0(i64 16, ptr %71)
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 0
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %76 = load ptr, ptr %74, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 1
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %79 = load ptr, ptr %77, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 2
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %82 = load ptr, ptr %80, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 3
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %85 = load i32, ptr %83, align 4
  store i32 %85, ptr %84, align 4
  call void @set_offset(ptr %73, ptr @IntIterable)
  %86 = alloca { ptr, ptr, ptr, i32 }, align 8
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 0
  %89 = load ptr, ptr %87, align 8
  store ptr %89, ptr %88, align 8
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 1
  %92 = load ptr, ptr %90, align 8
  store ptr %92, ptr %91, align 8
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 2
  %95 = load ptr, ptr %93, align 8
  store ptr %95, ptr %94, align 8
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 3
  %98 = load i32, ptr %96, align 4
  store i32 %98, ptr %97, align 4
  call void @set_offset(ptr %86, ptr @IntIterable)
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %100 = load ptr, ptr %99, align 8
  %101 = load ptr, ptr %8, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 416, ptr %101)
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %104 = load i32, ptr %103, align 4
  %105 = getelementptr ptr, ptr %101, i32 %104
  %106 = getelementptr ptr, ptr %105, i32 1
  %107 = load ptr, ptr %106, align 8
  %108 = getelementptr { ptr, ptr }, ptr %107, i32 0, i32 1
  %109 = load ptr, ptr %108, align 8
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 0
  %111 = load ptr, ptr %110, align 8
  %112 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %111, 0
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 1
  %114 = load ptr, ptr %113, align 8
  %115 = insertvalue { ptr, ptr, ptr, i32 } %112, ptr %114, 1
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 2
  %117 = load ptr, ptr %116, align 8
  %118 = insertvalue { ptr, ptr, ptr, i32 } %115, ptr %117, 2
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 3
  %120 = load i32, ptr %119, align 4
  %121 = insertvalue { ptr, ptr, ptr, i32 } %118, i32 %120, 3
  call void %109(ptr %100, { ptr, ptr, ptr, i32 } %121)
  ret void
}

define { ptr, ptr, ptr, i32 } @ChainIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @ChainIterable)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 416, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 0
  %28 = load ptr, ptr %27, align 8
  %29 = call { ptr, ptr, ptr, i32 } %28(ptr %20)
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %29, ptr %30, align 8
  %31 = call ptr @llvm.invariant.start.p0(i64 16, ptr %30)
  call void @assume_offset(ptr %30, ptr @IntIterable)
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %33, 0
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %36, 1
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %39 = load ptr, ptr %38, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %39, 2
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %42 = load i32, ptr %41, align 4
  %43 = insertvalue { ptr, ptr, ptr, i32 } %40, i32 %42, 3
  %44 = alloca [0 x ptr], align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 0, ptr %44)
  %46 = call ptr @llvm.invariant.start.p0(i64 192, ptr %33)
  %47 = getelementptr ptr, ptr %33, i32 %42
  %48 = getelementptr ptr, ptr %47, i32 10
  %49 = load ptr, ptr %48, align 8
  %50 = alloca {}, align 8
  %51 = call ptr %49({ ptr, ptr, ptr, i32 } %43, ptr %50)
  %52 = call { ptr, ptr, ptr, i32 } %51({ ptr, ptr, ptr, i32 } %43, { ptr, ptr, ptr, i32 } %43, ptr %44)
  %53 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %52, ptr %53, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 16, ptr %53)
  %55 = alloca { ptr, ptr, ptr, i32 }, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 0
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 0
  %58 = load ptr, ptr %56, align 8
  store ptr %58, ptr %57, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 1
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  %61 = load ptr, ptr %59, align 8
  store ptr %61, ptr %60, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 2
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 2
  %64 = load ptr, ptr %62, align 8
  store ptr %64, ptr %63, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 3
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  %67 = load i32, ptr %65, align 4
  store i32 %67, ptr %66, align 4
  call void @set_offset(ptr %55, ptr @IntIterator)
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = load ptr, ptr %6, align 8
  %71 = call ptr @llvm.invariant.start.p0(i64 416, ptr %70)
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %73 = load i32, ptr %72, align 4
  %74 = getelementptr ptr, ptr %70, i32 %73
  %75 = getelementptr ptr, ptr %74, i32 1
  %76 = load ptr, ptr %75, align 8
  %77 = getelementptr { ptr, ptr }, ptr %76, i32 0, i32 0
  %78 = load ptr, ptr %77, align 8
  %79 = call { ptr, ptr, ptr, i32 } %78(ptr %69)
  %80 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %79, ptr %80, align 8
  %81 = call ptr @llvm.invariant.start.p0(i64 16, ptr %80)
  call void @assume_offset(ptr %80, ptr @IntIterable)
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %80, i32 0, i32 0
  %83 = load ptr, ptr %82, align 8
  %84 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %83, 0
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %80, i32 0, i32 1
  %86 = load ptr, ptr %85, align 8
  %87 = insertvalue { ptr, ptr, ptr, i32 } %84, ptr %86, 1
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %80, i32 0, i32 2
  %89 = load ptr, ptr %88, align 8
  %90 = insertvalue { ptr, ptr, ptr, i32 } %87, ptr %89, 2
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %80, i32 0, i32 3
  %92 = load i32, ptr %91, align 4
  %93 = insertvalue { ptr, ptr, ptr, i32 } %90, i32 %92, 3
  %94 = alloca [0 x ptr], align 8
  %95 = call ptr @llvm.invariant.start.p0(i64 0, ptr %94)
  %96 = call ptr @llvm.invariant.start.p0(i64 192, ptr %83)
  %97 = getelementptr ptr, ptr %83, i32 %92
  %98 = getelementptr ptr, ptr %97, i32 10
  %99 = load ptr, ptr %98, align 8
  %100 = alloca {}, align 8
  %101 = call ptr %99({ ptr, ptr, ptr, i32 } %93, ptr %100)
  %102 = call { ptr, ptr, ptr, i32 } %101({ ptr, ptr, ptr, i32 } %93, { ptr, ptr, ptr, i32 } %93, ptr %94)
  %103 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %102, ptr %103, align 8
  %104 = call ptr @llvm.invariant.start.p0(i64 16, ptr %103)
  %105 = alloca { ptr, ptr, ptr, i32 }, align 8
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 0
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 0
  %108 = load ptr, ptr %106, align 8
  store ptr %108, ptr %107, align 8
  %109 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 1
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 1
  %111 = load ptr, ptr %109, align 8
  store ptr %111, ptr %110, align 8
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 2
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 2
  %114 = load ptr, ptr %112, align 8
  store ptr %114, ptr %113, align 8
  %115 = getelementptr { ptr, ptr, ptr, i32 }, ptr %103, i32 0, i32 3
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %105, i32 0, i32 3
  %117 = load i32, ptr %115, align 4
  store i32 %117, ptr %116, align 4
  call void @set_offset(ptr %105, ptr @IntIterator)
  %118 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, i1 }, ptr null, i32 1) to i64))
  %119 = alloca { ptr, ptr, ptr, i32 }, align 8
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 1
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 3
  store ptr @ChainIterator, ptr %119, align 8
  store ptr %118, ptr %120, align 8
  store i32 7, ptr %121, align 4
  %122 = call ptr @llvm.invariant.start.p0(i64 16, ptr %119)
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %124 = load ptr, ptr %123, align 8
  %125 = load ptr, ptr %6, align 8
  %126 = call ptr @llvm.invariant.start.p0(i64 416, ptr %125)
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %128 = load i32, ptr %127, align 4
  %129 = getelementptr ptr, ptr %125, i32 %128
  %130 = load ptr, ptr %129, align 8
  %131 = getelementptr { ptr, ptr }, ptr %130, i32 0, i32 0
  %132 = load ptr, ptr %131, align 8
  %133 = call { ptr, ptr, ptr, i32 } %132(ptr %124)
  %134 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %133, ptr %134, align 8
  %135 = call ptr @llvm.invariant.start.p0(i64 16, ptr %134)
  call void @assume_offset(ptr %134, ptr @IntIterable)
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 0
  %137 = load ptr, ptr %136, align 8
  %138 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %137, 0
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 1
  %140 = load ptr, ptr %139, align 8
  %141 = insertvalue { ptr, ptr, ptr, i32 } %138, ptr %140, 1
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 2
  %143 = load ptr, ptr %142, align 8
  %144 = insertvalue { ptr, ptr, ptr, i32 } %141, ptr %143, 2
  %145 = getelementptr { ptr, ptr, ptr, i32 }, ptr %134, i32 0, i32 3
  %146 = load i32, ptr %145, align 4
  %147 = insertvalue { ptr, ptr, ptr, i32 } %144, i32 %146, 3
  %148 = alloca [0 x ptr], align 8
  %149 = call ptr @llvm.invariant.start.p0(i64 0, ptr %148)
  %150 = call ptr @llvm.invariant.start.p0(i64 192, ptr %137)
  %151 = getelementptr ptr, ptr %137, i32 %146
  %152 = getelementptr ptr, ptr %151, i32 10
  %153 = load ptr, ptr %152, align 8
  %154 = alloca {}, align 8
  %155 = call ptr %153({ ptr, ptr, ptr, i32 } %147, ptr %154)
  %156 = call { ptr, ptr, ptr, i32 } %155({ ptr, ptr, ptr, i32 } %147, { ptr, ptr, ptr, i32 } %147, ptr %148)
  %157 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %156, ptr %157, align 8
  %158 = call ptr @llvm.invariant.start.p0(i64 16, ptr %157)
  %159 = alloca { ptr, ptr, ptr, i32 }, align 8
  %160 = getelementptr { ptr, ptr, ptr, i32 }, ptr %157, i32 0, i32 0
  %161 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 0
  %162 = load ptr, ptr %160, align 8
  store ptr %162, ptr %161, align 8
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %157, i32 0, i32 1
  %164 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 1
  %165 = load ptr, ptr %163, align 8
  store ptr %165, ptr %164, align 8
  %166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %157, i32 0, i32 2
  %167 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 2
  %168 = load ptr, ptr %166, align 8
  store ptr %168, ptr %167, align 8
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %157, i32 0, i32 3
  %170 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 3
  %171 = load i32, ptr %169, align 4
  store i32 %171, ptr %170, align 4
  call void @set_offset(ptr %159, ptr @IntIterator)
  %172 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %173 = load ptr, ptr %172, align 8
  %174 = load ptr, ptr %6, align 8
  %175 = call ptr @llvm.invariant.start.p0(i64 416, ptr %174)
  %176 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %177 = load i32, ptr %176, align 4
  %178 = getelementptr ptr, ptr %174, i32 %177
  %179 = getelementptr ptr, ptr %178, i32 1
  %180 = load ptr, ptr %179, align 8
  %181 = getelementptr { ptr, ptr }, ptr %180, i32 0, i32 0
  %182 = load ptr, ptr %181, align 8
  %183 = call { ptr, ptr, ptr, i32 } %182(ptr %173)
  %184 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %183, ptr %184, align 8
  %185 = call ptr @llvm.invariant.start.p0(i64 16, ptr %184)
  call void @assume_offset(ptr %184, ptr @IntIterable)
  %186 = getelementptr { ptr, ptr, ptr, i32 }, ptr %184, i32 0, i32 0
  %187 = load ptr, ptr %186, align 8
  %188 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %187, 0
  %189 = getelementptr { ptr, ptr, ptr, i32 }, ptr %184, i32 0, i32 1
  %190 = load ptr, ptr %189, align 8
  %191 = insertvalue { ptr, ptr, ptr, i32 } %188, ptr %190, 1
  %192 = getelementptr { ptr, ptr, ptr, i32 }, ptr %184, i32 0, i32 2
  %193 = load ptr, ptr %192, align 8
  %194 = insertvalue { ptr, ptr, ptr, i32 } %191, ptr %193, 2
  %195 = getelementptr { ptr, ptr, ptr, i32 }, ptr %184, i32 0, i32 3
  %196 = load i32, ptr %195, align 4
  %197 = insertvalue { ptr, ptr, ptr, i32 } %194, i32 %196, 3
  %198 = alloca [0 x ptr], align 8
  %199 = call ptr @llvm.invariant.start.p0(i64 0, ptr %198)
  %200 = call ptr @llvm.invariant.start.p0(i64 192, ptr %187)
  %201 = getelementptr ptr, ptr %187, i32 %196
  %202 = getelementptr ptr, ptr %201, i32 10
  %203 = load ptr, ptr %202, align 8
  %204 = alloca {}, align 8
  %205 = call ptr %203({ ptr, ptr, ptr, i32 } %197, ptr %204)
  %206 = call { ptr, ptr, ptr, i32 } %205({ ptr, ptr, ptr, i32 } %197, { ptr, ptr, ptr, i32 } %197, ptr %198)
  %207 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %206, ptr %207, align 8
  %208 = call ptr @llvm.invariant.start.p0(i64 16, ptr %207)
  %209 = alloca { ptr, ptr, ptr, i32 }, align 8
  %210 = getelementptr { ptr, ptr, ptr, i32 }, ptr %207, i32 0, i32 0
  %211 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 0
  %212 = load ptr, ptr %210, align 8
  store ptr %212, ptr %211, align 8
  %213 = getelementptr { ptr, ptr, ptr, i32 }, ptr %207, i32 0, i32 1
  %214 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 1
  %215 = load ptr, ptr %213, align 8
  store ptr %215, ptr %214, align 8
  %216 = getelementptr { ptr, ptr, ptr, i32 }, ptr %207, i32 0, i32 2
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 2
  %218 = load ptr, ptr %216, align 8
  store ptr %218, ptr %217, align 8
  %219 = getelementptr { ptr, ptr, ptr, i32 }, ptr %207, i32 0, i32 3
  %220 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 3
  %221 = load i32, ptr %219, align 4
  store i32 %221, ptr %220, align 4
  call void @set_offset(ptr %209, ptr @IntIterator)
  %222 = alloca { ptr, ptr, ptr, i32 }, align 8
  %223 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 0
  %224 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 0
  %225 = load ptr, ptr %223, align 8
  store ptr %225, ptr %224, align 8
  %226 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 1
  %227 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 1
  %228 = load ptr, ptr %226, align 8
  store ptr %228, ptr %227, align 8
  %229 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 2
  %230 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 2
  %231 = load ptr, ptr %229, align 8
  store ptr %231, ptr %230, align 8
  %232 = getelementptr { ptr, ptr, ptr, i32 }, ptr %159, i32 0, i32 3
  %233 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 3
  %234 = load i32, ptr %232, align 4
  store i32 %234, ptr %233, align 4
  call void @set_offset(ptr %222, ptr @IntIterator)
  %235 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 0
  %236 = load ptr, ptr %235, align 8
  %237 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %236, 0
  %238 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 1
  %239 = load ptr, ptr %238, align 8
  %240 = insertvalue { ptr, ptr, ptr, i32 } %237, ptr %239, 1
  %241 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 2
  %242 = load ptr, ptr %241, align 8
  %243 = insertvalue { ptr, ptr, ptr, i32 } %240, ptr %242, 2
  %244 = getelementptr { ptr, ptr, ptr, i32 }, ptr %222, i32 0, i32 3
  %245 = load i32, ptr %244, align 4
  %246 = insertvalue { ptr, ptr, ptr, i32 } %243, i32 %245, 3
  %247 = alloca { ptr, ptr, ptr, i32 }, align 8
  %248 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 0
  %249 = getelementptr { ptr, ptr, ptr, i32 }, ptr %247, i32 0, i32 0
  %250 = load ptr, ptr %248, align 8
  store ptr %250, ptr %249, align 8
  %251 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 1
  %252 = getelementptr { ptr, ptr, ptr, i32 }, ptr %247, i32 0, i32 1
  %253 = load ptr, ptr %251, align 8
  store ptr %253, ptr %252, align 8
  %254 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 2
  %255 = getelementptr { ptr, ptr, ptr, i32 }, ptr %247, i32 0, i32 2
  %256 = load ptr, ptr %254, align 8
  store ptr %256, ptr %255, align 8
  %257 = getelementptr { ptr, ptr, ptr, i32 }, ptr %209, i32 0, i32 3
  %258 = getelementptr { ptr, ptr, ptr, i32 }, ptr %247, i32 0, i32 3
  %259 = load i32, ptr %257, align 4
  store i32 %259, ptr %258, align 4
  call void @set_offset(ptr %247, ptr @IntIterator)
  %260 = getelementptr { ptr, ptr, ptr, i32 }, ptr %247, i32 0, i32 0
  %261 = load ptr, ptr %260, align 8
  %262 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %261, 0
  %263 = getelementptr { ptr, ptr, ptr, i32 }, ptr %247, i32 0, i32 1
  %264 = load ptr, ptr %263, align 8
  %265 = insertvalue { ptr, ptr, ptr, i32 } %262, ptr %264, 1
  %266 = getelementptr { ptr, ptr, ptr, i32 }, ptr %247, i32 0, i32 2
  %267 = load ptr, ptr %266, align 8
  %268 = insertvalue { ptr, ptr, ptr, i32 } %265, ptr %267, 2
  %269 = getelementptr { ptr, ptr, ptr, i32 }, ptr %247, i32 0, i32 3
  %270 = load i32, ptr %269, align 4
  %271 = insertvalue { ptr, ptr, ptr, i32 } %268, i32 %270, 3
  %272 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 0
  %273 = load ptr, ptr %272, align 8
  %274 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %273, 0
  %275 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 1
  %276 = load ptr, ptr %275, align 8
  %277 = insertvalue { ptr, ptr, ptr, i32 } %274, ptr %276, 1
  %278 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 2
  %279 = load ptr, ptr %278, align 8
  %280 = insertvalue { ptr, ptr, ptr, i32 } %277, ptr %279, 2
  %281 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 3
  %282 = load i32, ptr %281, align 4
  %283 = insertvalue { ptr, ptr, ptr, i32 } %280, i32 %282, 3
  %284 = alloca [2 x ptr], align 8
  %285 = getelementptr [2 x ptr], ptr %284, i32 0, i32 0
  store ptr @_parameterization_IntIterator, ptr %285, align 8
  %286 = getelementptr [2 x ptr], ptr %284, i32 0, i32 1
  store ptr @_parameterization_IntIterator, ptr %286, align 8
  %287 = call ptr @llvm.invariant.start.p0(i64 4, ptr %284)
  %288 = call ptr @llvm.invariant.start.p0(i64 72, ptr %273)
  %289 = getelementptr ptr, ptr %273, i32 %282
  %290 = getelementptr ptr, ptr %289, i32 3
  %291 = load ptr, ptr %290, align 8
  %292 = alloca { ptr, ptr }, align 8
  %293 = getelementptr { ptr, ptr }, ptr %292, i32 0, i32 0
  store ptr %236, ptr %293, align 8
  %294 = getelementptr { ptr, ptr }, ptr %292, i32 0, i32 1
  store ptr %261, ptr %294, align 8
  %295 = call ptr %291({ ptr, ptr, ptr, i32 } %283, ptr %292)
  call void %295({ ptr, ptr, ptr, i32 } %283, { ptr, ptr, ptr, i32 } %283, ptr %284, { ptr, ptr, ptr, i32 } %246, { ptr, ptr, ptr, i32 } %271)
  %296 = alloca { ptr, ptr, ptr, i32 }, align 8
  %297 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 0
  %298 = getelementptr { ptr, ptr, ptr, i32 }, ptr %296, i32 0, i32 0
  %299 = load ptr, ptr %297, align 8
  store ptr %299, ptr %298, align 8
  %300 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 1
  %301 = getelementptr { ptr, ptr, ptr, i32 }, ptr %296, i32 0, i32 1
  %302 = load ptr, ptr %300, align 8
  store ptr %302, ptr %301, align 8
  %303 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 2
  %304 = getelementptr { ptr, ptr, ptr, i32 }, ptr %296, i32 0, i32 2
  %305 = load ptr, ptr %303, align 8
  store ptr %305, ptr %304, align 8
  %306 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 3
  %307 = getelementptr { ptr, ptr, ptr, i32 }, ptr %296, i32 0, i32 3
  %308 = load i32, ptr %306, align 4
  store i32 %308, ptr %307, align 4
  call void @set_offset(ptr %296, ptr @Iterator)
  %309 = getelementptr { ptr, ptr, ptr, i32 }, ptr %296, i32 0, i32 0
  %310 = load ptr, ptr %309, align 8
  %311 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %310, 0
  %312 = getelementptr { ptr, ptr, ptr, i32 }, ptr %296, i32 0, i32 1
  %313 = load ptr, ptr %312, align 8
  %314 = insertvalue { ptr, ptr, ptr, i32 } %311, ptr %313, 1
  %315 = getelementptr { ptr, ptr, ptr, i32 }, ptr %296, i32 0, i32 2
  %316 = load ptr, ptr %315, align 8
  %317 = insertvalue { ptr, ptr, ptr, i32 } %314, ptr %316, 2
  %318 = getelementptr { ptr, ptr, ptr, i32 }, ptr %296, i32 0, i32 3
  %319 = load i32, ptr %318, align 4
  %320 = insertvalue { ptr, ptr, ptr, i32 } %317, i32 %319, 3
  ret { ptr, ptr, ptr, i32 } %320
}

define ptr @ChainIterator_B_init_firstIntIterator_secondIntIterator({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -933084275656658555, i64 ptrtoint (ptr @IntIterator to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 -933084275656658555, i64 ptrtoint (ptr @IntIterator to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [9 x ptr], ptr %26, i32 0, i32 5
  %28 = getelementptr ptr, ptr %27, i32 7
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @ChainIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [9 x ptr], ptr %4, i32 0, i32 6
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @ChainIterator_init_firstIntIterator_secondIntIterator({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @ChainIterator)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @IntIterator)
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %45 = load ptr, ptr %43, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %48 = load i32, ptr %46, align 4
  store i32 %48, ptr %47, align 4
  call void @set_offset(ptr %36, ptr @IntIterator)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %8, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 72, ptr %51)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = getelementptr ptr, ptr %51, i32 %54
  %56 = load ptr, ptr %55, align 8
  %57 = getelementptr { ptr, ptr }, ptr %56, i32 0, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %63 = load ptr, ptr %62, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %63, 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %66 = load ptr, ptr %65, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %66, 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %69 = load i32, ptr %68, align 4
  %70 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %69, 3
  call void %58(ptr %50, { ptr, ptr, ptr, i32 } %70)
  %71 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %4, ptr %71, align 8
  %72 = call ptr @llvm.invariant.start.p0(i64 16, ptr %71)
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 0
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %76 = load ptr, ptr %74, align 8
  store ptr %76, ptr %75, align 8
  %77 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 1
  %78 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %79 = load ptr, ptr %77, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 2
  %81 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %82 = load ptr, ptr %80, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %71, i32 0, i32 3
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %85 = load i32, ptr %83, align 4
  store i32 %85, ptr %84, align 4
  call void @set_offset(ptr %73, ptr @IntIterator)
  %86 = alloca { ptr, ptr, ptr, i32 }, align 8
  %87 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 0
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 0
  %89 = load ptr, ptr %87, align 8
  store ptr %89, ptr %88, align 8
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 1
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 1
  %92 = load ptr, ptr %90, align 8
  store ptr %92, ptr %91, align 8
  %93 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 2
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 2
  %95 = load ptr, ptr %93, align 8
  store ptr %95, ptr %94, align 8
  %96 = getelementptr { ptr, ptr, ptr, i32 }, ptr %73, i32 0, i32 3
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 3
  %98 = load i32, ptr %96, align 4
  store i32 %98, ptr %97, align 4
  call void @set_offset(ptr %86, ptr @IntIterator)
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %100 = load ptr, ptr %99, align 8
  %101 = load ptr, ptr %8, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 72, ptr %101)
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %104 = load i32, ptr %103, align 4
  %105 = getelementptr ptr, ptr %101, i32 %104
  %106 = getelementptr ptr, ptr %105, i32 1
  %107 = load ptr, ptr %106, align 8
  %108 = getelementptr { ptr, ptr }, ptr %107, i32 0, i32 1
  %109 = load ptr, ptr %108, align 8
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 0
  %111 = load ptr, ptr %110, align 8
  %112 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %111, 0
  %113 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 1
  %114 = load ptr, ptr %113, align 8
  %115 = insertvalue { ptr, ptr, ptr, i32 } %112, ptr %114, 1
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 2
  %117 = load ptr, ptr %116, align 8
  %118 = insertvalue { ptr, ptr, ptr, i32 } %115, ptr %117, 2
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %86, i32 0, i32 3
  %120 = load i32, ptr %119, align 4
  %121 = insertvalue { ptr, ptr, ptr, i32 } %118, i32 %120, 3
  call void %109(ptr %100, { ptr, ptr, ptr, i32 } %121)
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %123 = load ptr, ptr %122, align 8
  %124 = load ptr, ptr %8, align 8
  %125 = call ptr @llvm.invariant.start.p0(i64 72, ptr %124)
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %127 = load i32, ptr %126, align 4
  %128 = getelementptr ptr, ptr %124, i32 %127
  %129 = getelementptr ptr, ptr %128, i32 2
  %130 = load ptr, ptr %129, align 8
  %131 = getelementptr { ptr, ptr }, ptr %130, i32 0, i32 1
  %132 = load ptr, ptr %131, align 8
  call void %132(ptr %123, i1 true)
  ret void
}

define { ptr, i32 } @ChainIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i32 }, align 8
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca { ptr, i32 }, align 8
  %.reg2mem5 = alloca { ptr, i32 }, align 8
  %.reg2mem7 = alloca { ptr, i32 }, align 8
  %.reg2mem9 = alloca i32, align 4
  %.reg2mem11 = alloca ptr, align 8
  %.reg2mem15 = alloca { ptr, i32 }, align 8
  %.reg2mem17 = alloca i32, align 4
  %.reg2mem19 = alloca { ptr, i32 }, align 8
  %.reg2mem21 = alloca { ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @ChainIterator)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 72, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = getelementptr ptr, ptr %25, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call i1 %29(ptr %20)
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  %32 = alloca [0 x ptr], align 8
  %33 = alloca {}, align 8
  %34 = alloca { ptr, i32 }, align 8
  %35 = alloca i64, align 8
  %36 = alloca i1, align 1
  %37 = alloca i32, align 4
  %38 = alloca i32, align 4
  %39 = alloca ptr, align 8
  %40 = alloca i64, align 8
  %41 = alloca i1, align 1
  %42 = alloca { ptr, ptr, ptr, i32 }, align 8
  %43 = alloca [0 x ptr], align 8
  %44 = alloca {}, align 8
  %45 = alloca { ptr, i32 }, align 8
  br i1 %30, label %46, label %113

46:                                               ; preds = %3
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %48 = load ptr, ptr %47, align 8
  %49 = load ptr, ptr %6, align 8
  %50 = call ptr @llvm.invariant.start.p0(i64 72, ptr %49)
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %52 = load i32, ptr %51, align 4
  %53 = getelementptr ptr, ptr %49, i32 %52
  %54 = load ptr, ptr %53, align 8
  %55 = getelementptr { ptr, ptr }, ptr %54, i32 0, i32 0
  %56 = load ptr, ptr %55, align 8
  %57 = call { ptr, ptr, ptr, i32 } %56(ptr %48)
  store { ptr, ptr, ptr, i32 } %57, ptr %31, align 8
  %58 = call ptr @llvm.invariant.start.p0(i64 16, ptr %31)
  call void @assume_offset(ptr %31, ptr @IntIterator)
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  %63 = load ptr, ptr %62, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %63, 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %66 = load ptr, ptr %65, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %66, 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  %69 = load i32, ptr %68, align 4
  %70 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %69, 3
  %71 = call ptr @llvm.invariant.start.p0(i64 0, ptr %32)
  %72 = call ptr @llvm.invariant.start.p0(i64 16, ptr %60)
  %73 = getelementptr ptr, ptr %60, i32 %69
  %74 = load ptr, ptr %73, align 8
  %75 = call ptr %74({ ptr, ptr, ptr, i32 } %70, ptr %33)
  %76 = call { ptr, i32 } %75({ ptr, ptr, ptr, i32 } %70, { ptr, ptr, ptr, i32 } %70, ptr %32)
  store ptr %34, ptr %.reg2mem11, align 8
  %.reload14 = load ptr, ptr %.reg2mem11, align 8
  store { ptr, i32 } %76, ptr %.reload14, align 8
  %.reload13 = load ptr, ptr %.reg2mem11, align 8
  %77 = getelementptr { ptr, i32 }, ptr %.reload13, i32 0, i32 0
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %35, align 4
  %78 = load ptr, ptr %77, align 8
  %79 = ptrtoint ptr %78 to i64
  %80 = load ptr, ptr %35, align 8
  %81 = ptrtoint ptr %80 to i64
  %82 = icmp eq i64 %79, %81
  %83 = icmp eq i64 %79, 0
  %84 = or i1 %82, %83
  %85 = icmp eq i1 %84, false
  store i1 %85, ptr %36, align 1
  %86 = load i1, ptr %36, align 1
  %87 = xor i1 %86, true
  %88 = zext i1 %87 to i32
  store i32 %88, ptr %.reg2mem9, align 4
  br i1 %86, label %89, label %98

89:                                               ; preds = %46
  %.reload12 = load ptr, ptr %.reg2mem11, align 8
  %90 = getelementptr { ptr, i32 }, ptr %.reload12, i32 0, i32 1
  %91 = load i32, ptr %90, align 4
  store i32 %91, ptr %37, align 4
  %92 = load i32, ptr %37, align 4
  store i32 %92, ptr %38, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %40, align 4
  %93 = load i64, ptr %40, align 4
  store i64 %93, ptr %39, align 4
  %94 = load ptr, ptr %39, align 8
  %95 = insertvalue { ptr, i32 } undef, ptr %94, 0
  %96 = load i32, ptr %38, align 4
  %97 = insertvalue { ptr, i32 } %95, i32 %96, 1
  store { ptr, i32 } %97, ptr %.reg2mem7, align 8
  %.reload8 = load { ptr, i32 }, ptr %.reg2mem7, align 8
  store { ptr, i32 } %.reload8, ptr %.reg2mem21, align 8
  br label %111

98:                                               ; preds = %46
  store i1 false, ptr %41, align 1
  %99 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %100 = load ptr, ptr %99, align 8
  %101 = load ptr, ptr %6, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 72, ptr %101)
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %104 = load i32, ptr %103, align 4
  %105 = getelementptr ptr, ptr %101, i32 %104
  %106 = getelementptr ptr, ptr %105, i32 2
  %107 = load ptr, ptr %106, align 8
  %108 = getelementptr { ptr, ptr }, ptr %107, i32 0, i32 1
  %109 = load ptr, ptr %108, align 8
  %110 = load i1, ptr %41, align 1
  call void %109(ptr %100, i1 %110)
  store { ptr, i32 } poison, ptr %.reg2mem21, align 8
  br label %111

111:                                              ; preds = %98, %89
  %.reload22 = load { ptr, i32 }, ptr %.reg2mem21, align 8
  store { ptr, i32 } %.reload22, ptr %.reg2mem5, align 8
  br label %112

112:                                              ; preds = %111
  %.reload6 = load { ptr, i32 }, ptr %.reg2mem5, align 8
  %.reload10 = load i32, ptr %.reg2mem9, align 4
  store i32 %.reload10, ptr %.reg2mem17, align 4
  store { ptr, i32 } %.reload6, ptr %.reg2mem19, align 8
  br label %114

113:                                              ; preds = %3
  store i32 1, ptr %.reg2mem17, align 4
  store { ptr, i32 } poison, ptr %.reg2mem19, align 8
  br label %114

114:                                              ; preds = %113, %112
  %.reload20 = load { ptr, i32 }, ptr %.reg2mem19, align 8
  %.reload18 = load i32, ptr %.reg2mem17, align 4
  store { ptr, i32 } %.reload20, ptr %.reg2mem3, align 8
  store i32 %.reload18, ptr %.reg2mem1, align 4
  br label %115

115:                                              ; preds = %114
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  %116 = zext i32 %.reload2 to i64
  %117 = trunc i64 %116 to i32
  switch i32 %117, label %119 [
    i32 0, label %118
  ]

118:                                              ; preds = %115
  %.reload4 = load { ptr, i32 }, ptr %.reg2mem3, align 8
  store { ptr, i32 } %.reload4, ptr %.reg2mem15, align 8
  br label %157

119:                                              ; preds = %115
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %121 = load ptr, ptr %120, align 8
  %122 = load ptr, ptr %6, align 8
  %123 = call ptr @llvm.invariant.start.p0(i64 72, ptr %122)
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %125 = load i32, ptr %124, align 4
  %126 = getelementptr ptr, ptr %122, i32 %125
  %127 = getelementptr ptr, ptr %126, i32 1
  %128 = load ptr, ptr %127, align 8
  %129 = getelementptr { ptr, ptr }, ptr %128, i32 0, i32 0
  %130 = load ptr, ptr %129, align 8
  %131 = call { ptr, ptr, ptr, i32 } %130(ptr %121)
  store { ptr, ptr, ptr, i32 } %131, ptr %42, align 8
  %132 = call ptr @llvm.invariant.start.p0(i64 16, ptr %42)
  call void @assume_offset(ptr %42, ptr @IntIterator)
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 0
  %134 = load ptr, ptr %133, align 8
  %135 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %134, 0
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 1
  %137 = load ptr, ptr %136, align 8
  %138 = insertvalue { ptr, ptr, ptr, i32 } %135, ptr %137, 1
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 2
  %140 = load ptr, ptr %139, align 8
  %141 = insertvalue { ptr, ptr, ptr, i32 } %138, ptr %140, 2
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %42, i32 0, i32 3
  %143 = load i32, ptr %142, align 4
  %144 = insertvalue { ptr, ptr, ptr, i32 } %141, i32 %143, 3
  %145 = call ptr @llvm.invariant.start.p0(i64 0, ptr %43)
  %146 = call ptr @llvm.invariant.start.p0(i64 16, ptr %134)
  %147 = getelementptr ptr, ptr %134, i32 %143
  %148 = load ptr, ptr %147, align 8
  %149 = call ptr %148({ ptr, ptr, ptr, i32 } %144, ptr %44)
  %150 = call { ptr, i32 } %149({ ptr, ptr, ptr, i32 } %144, { ptr, ptr, ptr, i32 } %144, ptr %43)
  store { ptr, i32 } %150, ptr %45, align 8
  %151 = getelementptr { ptr, i32 }, ptr %45, i32 0, i32 0
  %152 = load ptr, ptr %151, align 8
  %153 = insertvalue { ptr, i32 } undef, ptr %152, 0
  %154 = getelementptr { ptr, i32 }, ptr %45, i32 0, i32 1
  %155 = load i32, ptr %154, align 4
  %156 = insertvalue { ptr, i32 } %153, i32 %155, 1
  store { ptr, i32 } %156, ptr %.reg2mem, align 8
  %.reload = load { ptr, i32 }, ptr %.reg2mem, align 8
  store { ptr, i32 } %.reload, ptr %.reg2mem15, align 8
  br label %157

157:                                              ; preds = %119, %118
  %.reload16 = load { ptr, i32 }, ptr %.reg2mem15, align 8
  ret { ptr, i32 } %.reload16
}

define i1 @ChainIterator_getter_on_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, i1 }, ptr %0, i32 0, i32 2
  %3 = load i1, ptr %2, align 1
  ret i1 %3
}

define void @ChainIterator_setter_on_first(ptr %0, i1 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, i1 }, ptr %0, i32 0, i32 2
  store i1 %1, ptr %3, align 1
  ret void
}

define { ptr, ptr, ptr, i32 } @ChainIterator_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, i1 }, ptr %0, i32 0, i32 1
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @ChainIterator_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, i1 }, ptr %0, i32 0, i32 1
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ChainIterator_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, i1 }, ptr %0, i32 0, i32 0
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @ChainIterator_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 }, i1 }, ptr %0, i32 0, i32 0
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ChainIterable_getter_second(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 1
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @ChainIterable_setter_second(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 1
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  ret void
}

define { ptr, ptr, ptr, i32 } @ChainIterable_getter_first(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 0
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @ChainIterable_setter_first(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr, ptr, ptr, i32 } }, ptr %0, i32 0, i32 0
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  ret void
}

define ptr @FilterIterable_B_init_iterableIntIterable_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [52 x ptr], ptr %26, i32 0, i32 14
  %28 = getelementptr ptr, ptr %27, i32 7
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @FilterIterable_B_each_fFunctionPtri32_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 15
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @FilterIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [52 x ptr], ptr %26, i32 0, i32 16
  %28 = getelementptr ptr, ptr %27, i32 7
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @FilterIterable_B_all_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 17
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @FilterIterable_B_any_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 18
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @FilterIterable_B_map_fFunctionPtri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 19
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @FilterIterable_B_filter_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 20
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @FilterIterable_B_chain_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 21
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @FilterIterable_B_interleave_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 22
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @FilterIterable_B_zip_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 23
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @FilterIterable_B_product_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [52 x ptr], ptr %15, i32 0, i32 24
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @FilterIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [52 x ptr], ptr %4, i32 0, i32 25
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @FilterIterable_init_iterableIntIterable_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @FilterIterable)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @IntIterable)
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %45 = load ptr, ptr %43, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %48 = load i32, ptr %46, align 4
  store i32 %48, ptr %47, align 4
  call void @set_offset(ptr %36, ptr @IntIterable)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %8, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 416, ptr %51)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = getelementptr ptr, ptr %51, i32 %54
  %56 = load ptr, ptr %55, align 8
  %57 = getelementptr { ptr, ptr }, ptr %56, i32 0, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %63 = load ptr, ptr %62, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %63, 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %66 = load ptr, ptr %65, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %66, 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %69 = load i32, ptr %68, align 4
  %70 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %69, 3
  call void %58(ptr %50, { ptr, ptr, ptr, i32 } %70)
  %71 = alloca ptr, align 8
  store { ptr } %4, ptr %71, align 8
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %73 = load ptr, ptr %72, align 8
  %74 = load ptr, ptr %8, align 8
  %75 = call ptr @llvm.invariant.start.p0(i64 416, ptr %74)
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %77 = load i32, ptr %76, align 4
  %78 = getelementptr ptr, ptr %74, i32 %77
  %79 = getelementptr ptr, ptr %78, i32 1
  %80 = load ptr, ptr %79, align 8
  %81 = getelementptr { ptr, ptr }, ptr %80, i32 0, i32 1
  %82 = load ptr, ptr %81, align 8
  %83 = load ptr, ptr %71, align 8
  %84 = insertvalue { ptr } undef, ptr %83, 0
  call void %82(ptr %73, { ptr } %84)
  ret void
}

define { ptr, ptr, ptr, i32 } @FilterIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @FilterIterable)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 416, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 0
  %28 = load ptr, ptr %27, align 8
  %29 = call { ptr, ptr, ptr, i32 } %28(ptr %20)
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %29, ptr %30, align 8
  %31 = call ptr @llvm.invariant.start.p0(i64 16, ptr %30)
  call void @assume_offset(ptr %30, ptr @IntIterable)
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %33, 0
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %36, 1
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %39 = load ptr, ptr %38, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %39, 2
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %42 = load i32, ptr %41, align 4
  %43 = insertvalue { ptr, ptr, ptr, i32 } %40, i32 %42, 3
  %44 = alloca [0 x ptr], align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 0, ptr %44)
  %46 = call ptr @llvm.invariant.start.p0(i64 192, ptr %33)
  %47 = getelementptr ptr, ptr %33, i32 %42
  %48 = getelementptr ptr, ptr %47, i32 10
  %49 = load ptr, ptr %48, align 8
  %50 = alloca {}, align 8
  %51 = call ptr %49({ ptr, ptr, ptr, i32 } %43, ptr %50)
  %52 = call { ptr, ptr, ptr, i32 } %51({ ptr, ptr, ptr, i32 } %43, { ptr, ptr, ptr, i32 } %43, ptr %44)
  %53 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %52, ptr %53, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 16, ptr %53)
  %55 = alloca { ptr, ptr, ptr, i32 }, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 0
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 0
  %58 = load ptr, ptr %56, align 8
  store ptr %58, ptr %57, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 1
  %60 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  %61 = load ptr, ptr %59, align 8
  store ptr %61, ptr %60, align 8
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 2
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 2
  %64 = load ptr, ptr %62, align 8
  store ptr %64, ptr %63, align 8
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %53, i32 0, i32 3
  %66 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  %67 = load i32, ptr %65, align 4
  store i32 %67, ptr %66, align 4
  call void @set_offset(ptr %55, ptr @IntIterator)
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = load ptr, ptr %6, align 8
  %71 = call ptr @llvm.invariant.start.p0(i64 416, ptr %70)
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %73 = load i32, ptr %72, align 4
  %74 = getelementptr ptr, ptr %70, i32 %73
  %75 = getelementptr ptr, ptr %74, i32 1
  %76 = load ptr, ptr %75, align 8
  %77 = getelementptr { ptr, ptr }, ptr %76, i32 0, i32 0
  %78 = load ptr, ptr %77, align 8
  %79 = call { ptr } %78(ptr %69)
  %80 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr, ptr, ptr, i32 }, { ptr } }, ptr null, i32 1) to i64))
  %81 = alloca { ptr, ptr, ptr, i32 }, align 8
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 1
  %83 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 3
  store ptr @FilterIterator, ptr %81, align 8
  store ptr %80, ptr %82, align 8
  store i32 7, ptr %83, align 4
  %84 = call ptr @llvm.invariant.start.p0(i64 16, ptr %81)
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %86 = load ptr, ptr %85, align 8
  %87 = load ptr, ptr %6, align 8
  %88 = call ptr @llvm.invariant.start.p0(i64 416, ptr %87)
  %89 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %90 = load i32, ptr %89, align 4
  %91 = getelementptr ptr, ptr %87, i32 %90
  %92 = load ptr, ptr %91, align 8
  %93 = getelementptr { ptr, ptr }, ptr %92, i32 0, i32 0
  %94 = load ptr, ptr %93, align 8
  %95 = call { ptr, ptr, ptr, i32 } %94(ptr %86)
  %96 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %95, ptr %96, align 8
  %97 = call ptr @llvm.invariant.start.p0(i64 16, ptr %96)
  call void @assume_offset(ptr %96, ptr @IntIterable)
  %98 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 0
  %99 = load ptr, ptr %98, align 8
  %100 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %99, 0
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 1
  %102 = load ptr, ptr %101, align 8
  %103 = insertvalue { ptr, ptr, ptr, i32 } %100, ptr %102, 1
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 2
  %105 = load ptr, ptr %104, align 8
  %106 = insertvalue { ptr, ptr, ptr, i32 } %103, ptr %105, 2
  %107 = getelementptr { ptr, ptr, ptr, i32 }, ptr %96, i32 0, i32 3
  %108 = load i32, ptr %107, align 4
  %109 = insertvalue { ptr, ptr, ptr, i32 } %106, i32 %108, 3
  %110 = alloca [0 x ptr], align 8
  %111 = call ptr @llvm.invariant.start.p0(i64 0, ptr %110)
  %112 = call ptr @llvm.invariant.start.p0(i64 192, ptr %99)
  %113 = getelementptr ptr, ptr %99, i32 %108
  %114 = getelementptr ptr, ptr %113, i32 10
  %115 = load ptr, ptr %114, align 8
  %116 = alloca {}, align 8
  %117 = call ptr %115({ ptr, ptr, ptr, i32 } %109, ptr %116)
  %118 = call { ptr, ptr, ptr, i32 } %117({ ptr, ptr, ptr, i32 } %109, { ptr, ptr, ptr, i32 } %109, ptr %110)
  %119 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %118, ptr %119, align 8
  %120 = call ptr @llvm.invariant.start.p0(i64 16, ptr %119)
  %121 = alloca { ptr, ptr, ptr, i32 }, align 8
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 0
  %123 = getelementptr { ptr, ptr, ptr, i32 }, ptr %121, i32 0, i32 0
  %124 = load ptr, ptr %122, align 8
  store ptr %124, ptr %123, align 8
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 1
  %126 = getelementptr { ptr, ptr, ptr, i32 }, ptr %121, i32 0, i32 1
  %127 = load ptr, ptr %125, align 8
  store ptr %127, ptr %126, align 8
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 2
  %129 = getelementptr { ptr, ptr, ptr, i32 }, ptr %121, i32 0, i32 2
  %130 = load ptr, ptr %128, align 8
  store ptr %130, ptr %129, align 8
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %119, i32 0, i32 3
  %132 = getelementptr { ptr, ptr, ptr, i32 }, ptr %121, i32 0, i32 3
  %133 = load i32, ptr %131, align 4
  store i32 %133, ptr %132, align 4
  call void @set_offset(ptr %121, ptr @IntIterator)
  %134 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %135 = load ptr, ptr %134, align 8
  %136 = load ptr, ptr %6, align 8
  %137 = call ptr @llvm.invariant.start.p0(i64 416, ptr %136)
  %138 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %139 = load i32, ptr %138, align 4
  %140 = getelementptr ptr, ptr %136, i32 %139
  %141 = getelementptr ptr, ptr %140, i32 1
  %142 = load ptr, ptr %141, align 8
  %143 = getelementptr { ptr, ptr }, ptr %142, i32 0, i32 0
  %144 = load ptr, ptr %143, align 8
  %145 = call { ptr } %144(ptr %135)
  %146 = alloca ptr, align 8
  store { ptr } %145, ptr %146, align 8
  %147 = alloca { ptr, ptr, ptr, i32 }, align 8
  %148 = getelementptr { ptr, ptr, ptr, i32 }, ptr %121, i32 0, i32 0
  %149 = getelementptr { ptr, ptr, ptr, i32 }, ptr %147, i32 0, i32 0
  %150 = load ptr, ptr %148, align 8
  store ptr %150, ptr %149, align 8
  %151 = getelementptr { ptr, ptr, ptr, i32 }, ptr %121, i32 0, i32 1
  %152 = getelementptr { ptr, ptr, ptr, i32 }, ptr %147, i32 0, i32 1
  %153 = load ptr, ptr %151, align 8
  store ptr %153, ptr %152, align 8
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %121, i32 0, i32 2
  %155 = getelementptr { ptr, ptr, ptr, i32 }, ptr %147, i32 0, i32 2
  %156 = load ptr, ptr %154, align 8
  store ptr %156, ptr %155, align 8
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %121, i32 0, i32 3
  %158 = getelementptr { ptr, ptr, ptr, i32 }, ptr %147, i32 0, i32 3
  %159 = load i32, ptr %157, align 4
  store i32 %159, ptr %158, align 4
  call void @set_offset(ptr %147, ptr @IntIterator)
  %160 = getelementptr { ptr, ptr, ptr, i32 }, ptr %147, i32 0, i32 0
  %161 = load ptr, ptr %160, align 8
  %162 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %161, 0
  %163 = getelementptr { ptr, ptr, ptr, i32 }, ptr %147, i32 0, i32 1
  %164 = load ptr, ptr %163, align 8
  %165 = insertvalue { ptr, ptr, ptr, i32 } %162, ptr %164, 1
  %166 = getelementptr { ptr, ptr, ptr, i32 }, ptr %147, i32 0, i32 2
  %167 = load ptr, ptr %166, align 8
  %168 = insertvalue { ptr, ptr, ptr, i32 } %165, ptr %167, 2
  %169 = getelementptr { ptr, ptr, ptr, i32 }, ptr %147, i32 0, i32 3
  %170 = load i32, ptr %169, align 4
  %171 = insertvalue { ptr, ptr, ptr, i32 } %168, i32 %170, 3
  %172 = load ptr, ptr %146, align 8
  %173 = insertvalue { ptr } undef, ptr %172, 0
  %174 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 0
  %175 = load ptr, ptr %174, align 8
  %176 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %175, 0
  %177 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 1
  %178 = load ptr, ptr %177, align 8
  %179 = insertvalue { ptr, ptr, ptr, i32 } %176, ptr %178, 1
  %180 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 2
  %181 = load ptr, ptr %180, align 8
  %182 = insertvalue { ptr, ptr, ptr, i32 } %179, ptr %181, 2
  %183 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 3
  %184 = load i32, ptr %183, align 4
  %185 = insertvalue { ptr, ptr, ptr, i32 } %182, i32 %184, 3
  %186 = alloca [2 x ptr], align 8
  %187 = getelementptr [2 x ptr], ptr %186, i32 0, i32 0
  store ptr @_parameterization_IntIterator, ptr %187, align 8
  %188 = getelementptr [2 x ptr], ptr %186, i32 0, i32 1
  store ptr @_parameterization_FunctionPtri32_to_Ptri1, ptr %188, align 8
  %189 = call ptr @llvm.invariant.start.p0(i64 4, ptr %186)
  %190 = call ptr @llvm.invariant.start.p0(i64 64, ptr %175)
  %191 = getelementptr ptr, ptr %175, i32 %184
  %192 = getelementptr ptr, ptr %191, i32 2
  %193 = load ptr, ptr %192, align 8
  %194 = alloca { ptr, ptr }, align 8
  %195 = getelementptr { ptr, ptr }, ptr %194, i32 0, i32 0
  store ptr %161, ptr %195, align 8
  %196 = getelementptr { ptr, ptr }, ptr %194, i32 0, i32 1
  store ptr @function_typ, ptr %196, align 8
  %197 = call ptr %193({ ptr, ptr, ptr, i32 } %185, ptr %194)
  call void %197({ ptr, ptr, ptr, i32 } %185, { ptr, ptr, ptr, i32 } %185, ptr %186, { ptr, ptr, ptr, i32 } %171, { ptr } %173)
  %198 = alloca { ptr, ptr, ptr, i32 }, align 8
  %199 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 0
  %200 = getelementptr { ptr, ptr, ptr, i32 }, ptr %198, i32 0, i32 0
  %201 = load ptr, ptr %199, align 8
  store ptr %201, ptr %200, align 8
  %202 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 1
  %203 = getelementptr { ptr, ptr, ptr, i32 }, ptr %198, i32 0, i32 1
  %204 = load ptr, ptr %202, align 8
  store ptr %204, ptr %203, align 8
  %205 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 2
  %206 = getelementptr { ptr, ptr, ptr, i32 }, ptr %198, i32 0, i32 2
  %207 = load ptr, ptr %205, align 8
  store ptr %207, ptr %206, align 8
  %208 = getelementptr { ptr, ptr, ptr, i32 }, ptr %81, i32 0, i32 3
  %209 = getelementptr { ptr, ptr, ptr, i32 }, ptr %198, i32 0, i32 3
  %210 = load i32, ptr %208, align 4
  store i32 %210, ptr %209, align 4
  call void @set_offset(ptr %198, ptr @Iterator)
  %211 = getelementptr { ptr, ptr, ptr, i32 }, ptr %198, i32 0, i32 0
  %212 = load ptr, ptr %211, align 8
  %213 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %212, 0
  %214 = getelementptr { ptr, ptr, ptr, i32 }, ptr %198, i32 0, i32 1
  %215 = load ptr, ptr %214, align 8
  %216 = insertvalue { ptr, ptr, ptr, i32 } %213, ptr %215, 1
  %217 = getelementptr { ptr, ptr, ptr, i32 }, ptr %198, i32 0, i32 2
  %218 = load ptr, ptr %217, align 8
  %219 = insertvalue { ptr, ptr, ptr, i32 } %216, ptr %218, 2
  %220 = getelementptr { ptr, ptr, ptr, i32 }, ptr %198, i32 0, i32 3
  %221 = load i32, ptr %220, align 4
  %222 = insertvalue { ptr, ptr, ptr, i32 } %219, i32 %221, 3
  ret { ptr, ptr, ptr, i32 } %222
}

define ptr @FilterIterator_B_init_iteratorIntIterator_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -933084275656658555, i64 ptrtoint (ptr @IntIterator to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [8 x ptr], ptr %26, i32 0, i32 4
  %28 = getelementptr ptr, ptr %27, i32 7
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @FilterIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [8 x ptr], ptr %4, i32 0, i32 5
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @FilterIterator_init_iteratorIntIterator_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @FilterIterator)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %3, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 16, ptr %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %26 = load ptr, ptr %24, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %29 = load ptr, ptr %27, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %32 = load ptr, ptr %30, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %21, i32 0, i32 3
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %35 = load i32, ptr %33, align 4
  store i32 %35, ptr %34, align 4
  call void @set_offset(ptr %23, ptr @IntIterator)
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %45 = load ptr, ptr %43, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %48 = load i32, ptr %46, align 4
  store i32 %48, ptr %47, align 4
  call void @set_offset(ptr %36, ptr @IntIterator)
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %8, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 64, ptr %51)
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = getelementptr ptr, ptr %51, i32 %54
  %56 = load ptr, ptr %55, align 8
  %57 = getelementptr { ptr, ptr }, ptr %56, i32 0, i32 1
  %58 = load ptr, ptr %57, align 8
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %63 = load ptr, ptr %62, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %63, 1
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %66 = load ptr, ptr %65, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %66, 2
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %69 = load i32, ptr %68, align 4
  %70 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %69, 3
  call void %58(ptr %50, { ptr, ptr, ptr, i32 } %70)
  %71 = alloca ptr, align 8
  store { ptr } %4, ptr %71, align 8
  %72 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %73 = load ptr, ptr %72, align 8
  %74 = load ptr, ptr %8, align 8
  %75 = call ptr @llvm.invariant.start.p0(i64 64, ptr %74)
  %76 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %77 = load i32, ptr %76, align 4
  %78 = getelementptr ptr, ptr %74, i32 %77
  %79 = getelementptr ptr, ptr %78, i32 1
  %80 = load ptr, ptr %79, align 8
  %81 = getelementptr { ptr, ptr }, ptr %80, i32 0, i32 1
  %82 = load ptr, ptr %81, align 8
  %83 = load ptr, ptr %71, align 8
  %84 = insertvalue { ptr } undef, ptr %83, 0
  call void %82(ptr %73, { ptr } %84)
  ret void
}

define { ptr, i32 } @FilterIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i32 }, align 8
  %.reg2mem1 = alloca { ptr, i32 }, align 8
  %.reg2mem3 = alloca ptr, align 8
  %.reg2mem6 = alloca i32, align 4
  %.reg2mem8 = alloca i32, align 4
  %.reg2mem11 = alloca i32, align 4
  %.reg2mem13 = alloca i32, align 4
  %.reg2mem15 = alloca ptr, align 8
  %.reg2mem19 = alloca ptr, align 8
  %.reg2mem21 = alloca { ptr, i32 }, align 8
  %.reg2mem23 = alloca ptr, align 8
  %.reg2mem25 = alloca i32, align 4
  %.reg2mem27 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @FilterIterator)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 64, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 0
  %28 = load ptr, ptr %27, align 8
  %29 = call { ptr, ptr, ptr, i32 } %28(ptr %20)
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %29, ptr %30, align 8
  %31 = call ptr @llvm.invariant.start.p0(i64 16, ptr %30)
  call void @assume_offset(ptr %30, ptr @IntIterator)
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 0
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %33, 0
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %36, 1
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 2
  %39 = load ptr, ptr %38, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %39, 2
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %30, i32 0, i32 3
  %42 = load i32, ptr %41, align 4
  %43 = insertvalue { ptr, ptr, ptr, i32 } %40, i32 %42, 3
  %44 = alloca [0 x ptr], align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 0, ptr %44)
  %46 = call ptr @llvm.invariant.start.p0(i64 16, ptr %33)
  %47 = getelementptr ptr, ptr %33, i32 %42
  %48 = load ptr, ptr %47, align 8
  %49 = alloca {}, align 8
  %50 = call ptr %48({ ptr, ptr, ptr, i32 } %43, ptr %49)
  %51 = call { ptr, i32 } %50({ ptr, ptr, ptr, i32 } %43, { ptr, ptr, ptr, i32 } %43, ptr %44)
  %52 = alloca { ptr, i32 }, align 8
  store { ptr, i32 } %51, ptr %52, align 8
  %53 = getelementptr { ptr, i32 }, ptr %52, i32 0, i32 0
  store ptr %53, ptr %.reg2mem19, align 8
  %54 = alloca i64, align 8
  %55 = alloca i1, align 1
  %56 = alloca i32, align 4
  %57 = alloca ptr, align 8
  %58 = alloca i1, align 1
  %59 = alloca { ptr, ptr, ptr, i32 }, align 8
  %60 = alloca [0 x ptr], align 8
  %61 = alloca {}, align 8
  %62 = alloca { ptr, i32 }, align 8
  %63 = alloca i32, align 4
  %64 = alloca ptr, align 8
  %65 = alloca i64, align 8
  %66 = alloca [0 x i8], align 1
  %67 = alloca i32, align 4
  %68 = alloca ptr, align 8
  %69 = alloca i64, align 8
  br label %70

70:                                               ; preds = %145, %3
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %54, align 4
  %.reload20 = load ptr, ptr %.reg2mem19, align 8
  %71 = load ptr, ptr %.reload20, align 8
  %72 = ptrtoint ptr %71 to i64
  %73 = load ptr, ptr %54, align 8
  %74 = ptrtoint ptr %73 to i64
  %75 = icmp eq i64 %72, %74
  %76 = icmp eq i64 %72, 0
  %77 = or i1 %75, %76
  %78 = icmp eq i1 %77, false
  store i1 %78, ptr %55, align 1
  %79 = load i1, ptr %55, align 1
  br i1 %79, label %80, label %141

80:                                               ; preds = %70
  store ptr %56, ptr %.reg2mem15, align 8
  %81 = getelementptr { ptr, i32 }, ptr %52, i32 0, i32 1
  %82 = load i32, ptr %81, align 4
  %.reload18 = load ptr, ptr %.reg2mem15, align 8
  store i32 %82, ptr %.reload18, align 4
  %.reload17 = load ptr, ptr %.reg2mem15, align 8
  %83 = load i32, ptr %.reload17, align 4
  %84 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %85 = load ptr, ptr %84, align 8
  %86 = load ptr, ptr %6, align 8
  %87 = call ptr @llvm.invariant.start.p0(i64 64, ptr %86)
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %89 = load i32, ptr %88, align 4
  %90 = getelementptr ptr, ptr %86, i32 %89
  %91 = getelementptr ptr, ptr %90, i32 1
  %92 = load ptr, ptr %91, align 8
  %93 = getelementptr { ptr, ptr }, ptr %92, i32 0, i32 0
  %94 = load ptr, ptr %93, align 8
  %95 = call { ptr } %94(ptr %85)
  store { ptr } %95, ptr %57, align 8
  %96 = load ptr, ptr %57, align 8
  %97 = call i1 %96(i32 %83)
  store i1 %97, ptr %58, align 1
  %98 = load i1, ptr %58, align 1
  %99 = zext i1 %98 to i32
  store i32 %99, ptr %.reg2mem13, align 4
  %100 = xor i1 %98, true
  %101 = zext i1 %100 to i32
  store i32 %101, ptr %.reg2mem11, align 4
  br i1 %98, label %102, label %103

102:                                              ; preds = %80
  br label %140

103:                                              ; preds = %80
  %104 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %105 = load ptr, ptr %104, align 8
  %106 = load ptr, ptr %6, align 8
  %107 = call ptr @llvm.invariant.start.p0(i64 64, ptr %106)
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %109 = load i32, ptr %108, align 4
  %110 = getelementptr ptr, ptr %106, i32 %109
  %111 = load ptr, ptr %110, align 8
  %112 = getelementptr { ptr, ptr }, ptr %111, i32 0, i32 0
  %113 = load ptr, ptr %112, align 8
  %114 = call { ptr, ptr, ptr, i32 } %113(ptr %105)
  store { ptr, ptr, ptr, i32 } %114, ptr %59, align 8
  %115 = call ptr @llvm.invariant.start.p0(i64 16, ptr %59)
  call void @assume_offset(ptr %59, ptr @IntIterator)
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 0
  %117 = load ptr, ptr %116, align 8
  %118 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %117, 0
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 1
  %120 = load ptr, ptr %119, align 8
  %121 = insertvalue { ptr, ptr, ptr, i32 } %118, ptr %120, 1
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 2
  %123 = load ptr, ptr %122, align 8
  %124 = insertvalue { ptr, ptr, ptr, i32 } %121, ptr %123, 2
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %59, i32 0, i32 3
  %126 = load i32, ptr %125, align 4
  %127 = insertvalue { ptr, ptr, ptr, i32 } %124, i32 %126, 3
  %128 = call ptr @llvm.invariant.start.p0(i64 0, ptr %60)
  %129 = call ptr @llvm.invariant.start.p0(i64 16, ptr %117)
  %130 = getelementptr ptr, ptr %117, i32 %126
  %131 = load ptr, ptr %130, align 8
  %132 = call ptr %131({ ptr, ptr, ptr, i32 } %127, ptr %61)
  %133 = call { ptr, i32 } %132({ ptr, ptr, ptr, i32 } %127, { ptr, ptr, ptr, i32 } %127, ptr %60)
  store { ptr, i32 } %133, ptr %62, align 8
  %134 = getelementptr { ptr, i32 }, ptr %62, i32 0, i32 0
  %135 = getelementptr { ptr, i32 }, ptr %52, i32 0, i32 0
  %136 = load ptr, ptr %134, align 8
  store ptr %136, ptr %135, align 8
  %137 = getelementptr { ptr, i32 }, ptr %62, i32 0, i32 1
  %138 = getelementptr { ptr, i32 }, ptr %52, i32 0, i32 1
  %139 = load i32, ptr %137, align 4
  store i32 %139, ptr %138, align 4
  br label %140

140:                                              ; preds = %103, %102
  %.reload12 = load i32, ptr %.reg2mem11, align 4
  %.reload14 = load i32, ptr %.reg2mem13, align 4
  %.reload16 = load ptr, ptr %.reg2mem15, align 8
  store ptr %.reload16, ptr %.reg2mem23, align 8
  store i32 %.reload12, ptr %.reg2mem25, align 4
  store i32 %.reload14, ptr %.reg2mem27, align 4
  br label %142

141:                                              ; preds = %70
  store ptr poison, ptr %.reg2mem23, align 8
  store i32 0, ptr %.reg2mem25, align 4
  store i32 2, ptr %.reg2mem27, align 4
  br label %142

142:                                              ; preds = %141, %140
  %.reload28 = load i32, ptr %.reg2mem27, align 4
  %.reload26 = load i32, ptr %.reg2mem25, align 4
  %.reload24 = load ptr, ptr %.reg2mem23, align 8
  store i32 %.reload28, ptr %.reg2mem8, align 4
  store i32 %.reload26, ptr %.reg2mem6, align 4
  store ptr %.reload24, ptr %.reg2mem3, align 8
  br label %143

143:                                              ; preds = %142
  %.reload7 = load i32, ptr %.reg2mem6, align 4
  %144 = trunc i32 %.reload7 to i1
  %.reload5 = load ptr, ptr %.reg2mem3, align 8
  %.reload10 = load i32, ptr %.reg2mem8, align 4
  br i1 %144, label %145, label %146

145:                                              ; preds = %143
  br label %70

146:                                              ; preds = %143
  %.reload9 = load i32, ptr %.reg2mem8, align 4
  %147 = zext i32 %.reload9 to i64
  %148 = trunc i64 %147 to i32
  switch i32 %148, label %156 [
    i32 1, label %149
  ]

149:                                              ; preds = %146
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %150 = load i32, ptr %.reload4, align 4
  store i32 %150, ptr %63, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %65, align 4
  %151 = load i64, ptr %65, align 4
  store i64 %151, ptr %64, align 4
  %152 = load ptr, ptr %64, align 8
  %153 = insertvalue { ptr, i32 } undef, ptr %152, 0
  %154 = load i32, ptr %63, align 4
  %155 = insertvalue { ptr, i32 } %153, i32 %154, 1
  store { ptr, i32 } %155, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i32 }, ptr %.reg2mem1, align 8
  store { ptr, i32 } %.reload2, ptr %.reg2mem21, align 8
  br label %163

156:                                              ; preds = %146
  %157 = load [0 x i8], ptr %66, align 1
  store [0 x i8] %157, ptr %67, align 1
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %69, align 4
  %158 = load i64, ptr %69, align 4
  store i64 %158, ptr %68, align 4
  %159 = load ptr, ptr %68, align 8
  %160 = insertvalue { ptr, i32 } undef, ptr %159, 0
  %161 = load i32, ptr %67, align 4
  %162 = insertvalue { ptr, i32 } %160, i32 %161, 1
  store { ptr, i32 } %162, ptr %.reg2mem, align 8
  %.reload = load { ptr, i32 }, ptr %.reg2mem, align 8
  store { ptr, i32 } %.reload, ptr %.reg2mem21, align 8
  br label %163

163:                                              ; preds = %156, %149
  %.reload22 = load { ptr, i32 }, ptr %.reg2mem21, align 8
  ret { ptr, i32 } %.reload22
}

define { ptr } @FilterIterator_getter_f(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr } }, ptr %0, i32 0, i32 1
  %3 = getelementptr { ptr }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr } undef, ptr %4, 0
  ret { ptr } %5
}

define void @FilterIterator_setter_f(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr } }, ptr %0, i32 0, i32 1
  %4 = alloca ptr, align 8
  store { ptr } %1, ptr %4, align 8
  %5 = getelementptr { ptr }, ptr %3, i32 0, i32 0
  %6 = load ptr, ptr %4, align 8
  store ptr %6, ptr %5, align 8
  ret void
}

define { ptr, ptr, ptr, i32 } @FilterIterator_getter_iterator(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr } }, ptr %0, i32 0, i32 0
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @FilterIterator_setter_iterator(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr } }, ptr %0, i32 0, i32 0
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  ret void
}

define { ptr } @FilterIterable_getter_f(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr } }, ptr %0, i32 0, i32 1
  %3 = getelementptr { ptr }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr } undef, ptr %4, 0
  ret { ptr } %5
}

define void @FilterIterable_setter_f(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr } }, ptr %0, i32 0, i32 1
  %4 = alloca ptr, align 8
  store { ptr } %1, ptr %4, align 8
  %5 = getelementptr { ptr }, ptr %3, i32 0, i32 0
  %6 = load ptr, ptr %4, align 8
  store ptr %6, ptr %5, align 8
  ret void
}

define { ptr, ptr, ptr, i32 } @FilterIterable_getter_iterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr } }, ptr %0, i32 0, i32 0
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @FilterIterable_setter_iterable(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr } }, ptr %0, i32 0, i32 0
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  ret void
}

define { ptr } @MapIterable_getter_f(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr } }, ptr %0, i32 0, i32 1
  %3 = getelementptr { ptr }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr } undef, ptr %4, 0
  ret { ptr } %5
}

define void @MapIterable_setter_f(ptr %0, { ptr } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr } }, ptr %0, i32 0, i32 1
  %4 = alloca ptr, align 8
  store { ptr } %1, ptr %4, align 8
  %5 = getelementptr { ptr }, ptr %3, i32 0, i32 0
  %6 = load ptr, ptr %4, align 8
  store ptr %6, ptr %5, align 8
  ret void
}

define { ptr, ptr, ptr, i32 } @MapIterable_getter_iterable(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr } }, ptr %0, i32 0, i32 0
  %3 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load ptr, ptr %6, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } %5, ptr %7, 1
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 2
  %10 = load ptr, ptr %9, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %10, 2
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %2, i32 0, i32 3
  %13 = load i32, ptr %12, align 4
  %14 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 %13, 3
  ret { ptr, ptr, ptr, i32 } %14
}

define void @MapIterable_setter_iterable(ptr %0, { ptr, ptr, ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { { ptr, ptr, ptr, i32 }, { ptr } }, ptr %0, i32 0, i32 0
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %1, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 0
  %8 = load ptr, ptr %6, align 8
  store ptr %8, ptr %7, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 1
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 2
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %3, i32 0, i32 3
  %17 = load i32, ptr %15, align 4
  store i32 %17, ptr %16, align 4
  ret void
}

define ptr @Range_B_init_endPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [57 x ptr], ptr %15, i32 0, i32 17
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Range_B_init_startPtri32_endPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [57 x ptr], ptr %26, i32 0, i32 18
  %28 = getelementptr ptr, ptr %27, i32 7
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @Range_B_step_stepPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [57 x ptr], ptr %15, i32 0, i32 19
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Range_B_each_fFunctionPtri32_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [57 x ptr], ptr %15, i32 0, i32 20
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Range_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [57 x ptr], ptr %26, i32 0, i32 21
  %28 = getelementptr ptr, ptr %27, i32 7
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @Range_B_all_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [57 x ptr], ptr %15, i32 0, i32 22
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Range_B_any_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [57 x ptr], ptr %15, i32 0, i32 23
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Range_B_map_fFunctionPtri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [57 x ptr], ptr %15, i32 0, i32 24
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Range_B_filter_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [57 x ptr], ptr %15, i32 0, i32 25
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Range_B_chain_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [57 x ptr], ptr %15, i32 0, i32 26
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Range_B_interleave_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [57 x ptr], ptr %15, i32 0, i32 27
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Range_B_zip_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [57 x ptr], ptr %15, i32 0, i32 28
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Range_B_product_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [57 x ptr], ptr %15, i32 0, i32 29
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @Range_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [57 x ptr], ptr %4, i32 0, i32 30
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @Range_init_endPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Range)
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %21 = load ptr, ptr %20, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 456, ptr %22)
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %25 = load i32, ptr %24, align 4
  %26 = getelementptr ptr, ptr %22, i32 %25
  %27 = getelementptr ptr, ptr %26, i32 1
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr { ptr, ptr }, ptr %28, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  call void %30(ptr %21, i32 %3)
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %32 = load ptr, ptr %31, align 8
  %33 = load ptr, ptr %7, align 8
  %34 = call ptr @llvm.invariant.start.p0(i64 456, ptr %33)
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %36 = load i32, ptr %35, align 4
  %37 = getelementptr ptr, ptr %33, i32 %36
  %38 = load ptr, ptr %37, align 8
  %39 = getelementptr { ptr, ptr }, ptr %38, i32 0, i32 1
  %40 = load ptr, ptr %39, align 8
  call void %40(ptr %32, i32 0)
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %42 = load ptr, ptr %41, align 8
  %43 = load ptr, ptr %7, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 456, ptr %43)
  %45 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %46 = load i32, ptr %45, align 4
  %47 = getelementptr ptr, ptr %43, i32 %46
  %48 = getelementptr ptr, ptr %47, i32 2
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr { ptr, ptr }, ptr %49, i32 0, i32 1
  %51 = load ptr, ptr %50, align 8
  call void %51(ptr %42, i32 1)
  ret void
}

define void @Range_init_startPtri32_endPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3, i32 %4) {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 0
  %11 = load ptr, ptr %9, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %14 = load ptr, ptr %12, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 2
  %17 = load ptr, ptr %15, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %20 = load i32, ptr %18, align 4
  store i32 %20, ptr %19, align 4
  call void @set_offset(ptr %8, ptr @Range)
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %22 = load ptr, ptr %21, align 8
  %23 = load ptr, ptr %8, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 456, ptr %23)
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %26 = load i32, ptr %25, align 4
  %27 = getelementptr ptr, ptr %23, i32 %26
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr { ptr, ptr }, ptr %28, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  call void %30(ptr %22, i32 %3)
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %32 = load ptr, ptr %31, align 8
  %33 = load ptr, ptr %8, align 8
  %34 = call ptr @llvm.invariant.start.p0(i64 456, ptr %33)
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %36 = load i32, ptr %35, align 4
  %37 = getelementptr ptr, ptr %33, i32 %36
  %38 = getelementptr ptr, ptr %37, i32 1
  %39 = load ptr, ptr %38, align 8
  %40 = getelementptr { ptr, ptr }, ptr %39, i32 0, i32 1
  %41 = load ptr, ptr %40, align 8
  call void %41(ptr %32, i32 %4)
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 1
  %43 = load ptr, ptr %42, align 8
  %44 = load ptr, ptr %8, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 456, ptr %44)
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %8, i32 0, i32 3
  %47 = load i32, ptr %46, align 4
  %48 = getelementptr ptr, ptr %44, i32 %47
  %49 = getelementptr ptr, ptr %48, i32 2
  %50 = load ptr, ptr %49, align 8
  %51 = getelementptr { ptr, ptr }, ptr %50, i32 0, i32 1
  %52 = load ptr, ptr %51, align 8
  call void %52(ptr %43, i32 1)
  ret void
}

define { ptr, ptr, ptr, i32 } @Range_step_stepPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Range)
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %21 = load ptr, ptr %20, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 456, ptr %22)
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %25 = load i32, ptr %24, align 4
  %26 = getelementptr ptr, ptr %22, i32 %25
  %27 = getelementptr ptr, ptr %26, i32 2
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr { ptr, ptr }, ptr %28, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  call void %30(ptr %21, i32 %3)
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %33 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %34 = load ptr, ptr %32, align 8
  store ptr %34, ptr %33, align 8
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  %37 = load ptr, ptr %35, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %40 = load ptr, ptr %38, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  %43 = load i32, ptr %41, align 4
  store i32 %43, ptr %42, align 4
  call void @set_offset(ptr %31, ptr @Range)
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %45 = load ptr, ptr %44, align 8
  %46 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %45, 0
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  %48 = load ptr, ptr %47, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } %46, ptr %48, 1
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %51 = load ptr, ptr %50, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } %49, ptr %51, 2
  %53 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  %54 = load i32, ptr %53, align 4
  %55 = insertvalue { ptr, ptr, ptr, i32 } %52, i32 %54, 3
  ret { ptr, ptr, ptr, i32 } %55
}

define { ptr, ptr, ptr, i32 } @Range_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Range)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 456, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 0
  %28 = load ptr, ptr %27, align 8
  %29 = call i32 %28(ptr %20)
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %31 = load ptr, ptr %30, align 8
  %32 = load ptr, ptr %6, align 8
  %33 = call ptr @llvm.invariant.start.p0(i64 456, ptr %32)
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %35 = load i32, ptr %34, align 4
  %36 = getelementptr ptr, ptr %32, i32 %35
  %37 = getelementptr ptr, ptr %36, i32 1
  %38 = load ptr, ptr %37, align 8
  %39 = getelementptr { ptr, ptr }, ptr %38, i32 0, i32 0
  %40 = load ptr, ptr %39, align 8
  %41 = call i32 %40(ptr %31)
  %42 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %43 = load ptr, ptr %42, align 8
  %44 = load ptr, ptr %6, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 456, ptr %44)
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %47 = load i32, ptr %46, align 4
  %48 = getelementptr ptr, ptr %44, i32 %47
  %49 = getelementptr ptr, ptr %48, i32 2
  %50 = load ptr, ptr %49, align 8
  %51 = getelementptr { ptr, ptr }, ptr %50, i32 0, i32 0
  %52 = load ptr, ptr %51, align 8
  %53 = call i32 %52(ptr %43)
  %54 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ i32, i32, i32 }, ptr null, i32 1) to i64))
  %55 = alloca { ptr, ptr, ptr, i32 }, align 8
  %56 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  store ptr @RangeIterator, ptr %55, align 8
  store ptr %54, ptr %56, align 8
  store i32 7, ptr %57, align 4
  %58 = call ptr @llvm.invariant.start.p0(i64 16, ptr %55)
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %60 = load ptr, ptr %59, align 8
  %61 = load ptr, ptr %6, align 8
  %62 = call ptr @llvm.invariant.start.p0(i64 456, ptr %61)
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %64 = load i32, ptr %63, align 4
  %65 = getelementptr ptr, ptr %61, i32 %64
  %66 = load ptr, ptr %65, align 8
  %67 = getelementptr { ptr, ptr }, ptr %66, i32 0, i32 0
  %68 = load ptr, ptr %67, align 8
  %69 = call i32 %68(ptr %60)
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %71 = load ptr, ptr %70, align 8
  %72 = load ptr, ptr %6, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 456, ptr %72)
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %75 = load i32, ptr %74, align 4
  %76 = getelementptr ptr, ptr %72, i32 %75
  %77 = getelementptr ptr, ptr %76, i32 1
  %78 = load ptr, ptr %77, align 8
  %79 = getelementptr { ptr, ptr }, ptr %78, i32 0, i32 0
  %80 = load ptr, ptr %79, align 8
  %81 = call i32 %80(ptr %71)
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %83 = load ptr, ptr %82, align 8
  %84 = load ptr, ptr %6, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 456, ptr %84)
  %86 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %87 = load i32, ptr %86, align 4
  %88 = getelementptr ptr, ptr %84, i32 %87
  %89 = getelementptr ptr, ptr %88, i32 2
  %90 = load ptr, ptr %89, align 8
  %91 = getelementptr { ptr, ptr }, ptr %90, i32 0, i32 0
  %92 = load ptr, ptr %91, align 8
  %93 = call i32 %92(ptr %83)
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 0
  %95 = load ptr, ptr %94, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %95, 0
  %97 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  %98 = load ptr, ptr %97, align 8
  %99 = insertvalue { ptr, ptr, ptr, i32 } %96, ptr %98, 1
  %100 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 2
  %101 = load ptr, ptr %100, align 8
  %102 = insertvalue { ptr, ptr, ptr, i32 } %99, ptr %101, 2
  %103 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  %104 = load i32, ptr %103, align 4
  %105 = insertvalue { ptr, ptr, ptr, i32 } %102, i32 %104, 3
  %106 = alloca [3 x ptr], align 8
  %107 = getelementptr [3 x ptr], ptr %106, i32 0, i32 0
  store ptr @_parameterization_Ptri32, ptr %107, align 8
  %108 = getelementptr [3 x ptr], ptr %106, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %108, align 8
  %109 = getelementptr [3 x ptr], ptr %106, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %109, align 8
  %110 = call ptr @llvm.invariant.start.p0(i64 9, ptr %106)
  %111 = call ptr @llvm.invariant.start.p0(i64 72, ptr %95)
  %112 = getelementptr ptr, ptr %95, i32 %104
  %113 = getelementptr ptr, ptr %112, i32 3
  %114 = load ptr, ptr %113, align 8
  %115 = alloca { ptr, ptr, ptr }, align 8
  %116 = getelementptr { ptr, ptr, ptr }, ptr %115, i32 0, i32 0
  store ptr @i32_typ, ptr %116, align 8
  %117 = getelementptr { ptr, ptr, ptr }, ptr %115, i32 0, i32 1
  store ptr @i32_typ, ptr %117, align 8
  %118 = getelementptr { ptr, ptr, ptr }, ptr %115, i32 0, i32 2
  store ptr @i32_typ, ptr %118, align 8
  %119 = call ptr %114({ ptr, ptr, ptr, i32 } %105, ptr %115)
  call void %119({ ptr, ptr, ptr, i32 } %105, { ptr, ptr, ptr, i32 } %105, ptr %106, i32 %69, i32 %81, i32 %93)
  %120 = alloca { ptr, ptr, ptr, i32 }, align 8
  %121 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 0
  %122 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 0
  %123 = load ptr, ptr %121, align 8
  store ptr %123, ptr %122, align 8
  %124 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 1
  %125 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 1
  %126 = load ptr, ptr %124, align 8
  store ptr %126, ptr %125, align 8
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 2
  %128 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 2
  %129 = load ptr, ptr %127, align 8
  store ptr %129, ptr %128, align 8
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %55, i32 0, i32 3
  %131 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 3
  %132 = load i32, ptr %130, align 4
  store i32 %132, ptr %131, align 4
  call void @set_offset(ptr %120, ptr @Iterator)
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 0
  %134 = load ptr, ptr %133, align 8
  %135 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %134, 0
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 1
  %137 = load ptr, ptr %136, align 8
  %138 = insertvalue { ptr, ptr, ptr, i32 } %135, ptr %137, 1
  %139 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 2
  %140 = load ptr, ptr %139, align 8
  %141 = insertvalue { ptr, ptr, ptr, i32 } %138, ptr %140, 2
  %142 = getelementptr { ptr, ptr, ptr, i32 }, ptr %120, i32 0, i32 3
  %143 = load i32, ptr %142, align 4
  %144 = insertvalue { ptr, ptr, ptr, i32 } %141, i32 %143, 3
  ret { ptr, ptr, ptr, i32 } %144
}

define ptr @RangeIterator_B_init_counterPtri32_endPtri32_stepPtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1)
  %4 = getelementptr { ptr, ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %24)
  %26 = getelementptr { ptr, ptr, ptr }, ptr %1, i32 0, i32 2
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr ptr, ptr %27, i32 1
  %29 = getelementptr ptr, ptr %27, i32 2
  %30 = getelementptr ptr, ptr %27, i32 3
  %31 = getelementptr ptr, ptr %27, i32 4
  %32 = load i64, ptr %28, align 4
  %33 = load i64, ptr %29, align 4
  %34 = load ptr, ptr %30, align 8
  %35 = load ptr, ptr %31, align 8
  %36 = call i1 @subtype_test_wrapper(ptr %34, i64 %33, i64 %32, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %35)
  %37 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %38 = getelementptr [9 x ptr], ptr %37, i32 0, i32 5
  %39 = getelementptr ptr, ptr %38, i32 7
  %40 = load ptr, ptr %39, align 8
  ret ptr %40
}

define ptr @RangeIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [9 x ptr], ptr %4, i32 0, i32 6
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @RangeIterator_init_counterPtri32_endPtri32_stepPtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3, i32 %4, i32 %5) {
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %7, align 8
  %8 = call ptr @llvm.invariant.start.p0(i64 16, ptr %7)
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 0
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 2
  %18 = load ptr, ptr %16, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %21 = load i32, ptr %19, align 4
  store i32 %21, ptr %20, align 4
  call void @set_offset(ptr %9, ptr @RangeIterator)
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %23 = load ptr, ptr %22, align 8
  %24 = load ptr, ptr %9, align 8
  %25 = call ptr @llvm.invariant.start.p0(i64 72, ptr %24)
  %26 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %27 = load i32, ptr %26, align 4
  %28 = getelementptr ptr, ptr %24, i32 %27
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr { ptr, ptr }, ptr %29, i32 0, i32 1
  %31 = load ptr, ptr %30, align 8
  call void %31(ptr %23, i32 %3)
  %32 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %33 = load ptr, ptr %32, align 8
  %34 = load ptr, ptr %9, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 72, ptr %34)
  %36 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %37 = load i32, ptr %36, align 4
  %38 = getelementptr ptr, ptr %34, i32 %37
  %39 = getelementptr ptr, ptr %38, i32 1
  %40 = load ptr, ptr %39, align 8
  %41 = getelementptr { ptr, ptr }, ptr %40, i32 0, i32 1
  %42 = load ptr, ptr %41, align 8
  call void %42(ptr %33, i32 %4)
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 1
  %44 = load ptr, ptr %43, align 8
  %45 = load ptr, ptr %9, align 8
  %46 = call ptr @llvm.invariant.start.p0(i64 72, ptr %45)
  %47 = getelementptr { ptr, ptr, ptr, i32 }, ptr %9, i32 0, i32 3
  %48 = load i32, ptr %47, align 4
  %49 = getelementptr ptr, ptr %45, i32 %48
  %50 = getelementptr ptr, ptr %49, i32 2
  %51 = load ptr, ptr %50, align 8
  %52 = getelementptr { ptr, ptr }, ptr %51, i32 0, i32 1
  %53 = load ptr, ptr %52, align 8
  call void %53(ptr %44, i32 %5)
  ret void
}

define { ptr, i32 } @RangeIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca { ptr, i32 }, align 8
  %.reg2mem1 = alloca { ptr, i32 }, align 8
  %.reg2mem3 = alloca { ptr, i32 }, align 8
  %.reg2mem5 = alloca { ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @RangeIterator)
  %19 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 72, ptr %21)
  %23 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %24 = load i32, ptr %23, align 4
  %25 = getelementptr ptr, ptr %21, i32 %24
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr { ptr, ptr }, ptr %26, i32 0, i32 0
  %28 = load ptr, ptr %27, align 8
  %29 = call i32 %28(ptr %20)
  %30 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %31 = load ptr, ptr %30, align 8
  %32 = load ptr, ptr %6, align 8
  %33 = call ptr @llvm.invariant.start.p0(i64 72, ptr %32)
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %35 = load i32, ptr %34, align 4
  %36 = getelementptr ptr, ptr %32, i32 %35
  %37 = getelementptr ptr, ptr %36, i32 1
  %38 = load ptr, ptr %37, align 8
  %39 = getelementptr { ptr, ptr }, ptr %38, i32 0, i32 0
  %40 = load ptr, ptr %39, align 8
  %41 = call i32 %40(ptr %31)
  %42 = icmp sgt i32 %29, %41
  %43 = alloca [0 x i8], align 1
  %44 = alloca i32, align 4
  %45 = alloca ptr, align 8
  %46 = alloca i64, align 8
  %47 = alloca i32, align 4
  %48 = alloca i32, align 4
  %49 = alloca i32, align 4
  %50 = alloca i32, align 4
  %51 = alloca i32, align 4
  %52 = alloca i32, align 4
  %53 = alloca i32, align 4
  %54 = alloca ptr, align 8
  %55 = alloca i64, align 8
  br i1 %42, label %56, label %63

56:                                               ; preds = %3
  %57 = load [0 x i8], ptr %43, align 1
  store [0 x i8] %57, ptr %44, align 1
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %46, align 4
  %58 = load i64, ptr %46, align 4
  store i64 %58, ptr %45, align 4
  %59 = load ptr, ptr %45, align 8
  %60 = insertvalue { ptr, i32 } undef, ptr %59, 0
  %61 = load i32, ptr %44, align 4
  %62 = insertvalue { ptr, i32 } %60, i32 %61, 1
  store { ptr, i32 } %62, ptr %.reg2mem3, align 8
  %.reload4 = load { ptr, i32 }, ptr %.reg2mem3, align 8
  store { ptr, i32 } %.reload4, ptr %.reg2mem5, align 8
  br label %133

63:                                               ; preds = %3
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %65 = load ptr, ptr %64, align 8
  %66 = load ptr, ptr %6, align 8
  %67 = call ptr @llvm.invariant.start.p0(i64 72, ptr %66)
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %69 = load i32, ptr %68, align 4
  %70 = getelementptr ptr, ptr %66, i32 %69
  %71 = load ptr, ptr %70, align 8
  %72 = getelementptr { ptr, ptr }, ptr %71, i32 0, i32 0
  %73 = load ptr, ptr %72, align 8
  %74 = call i32 %73(ptr %65)
  store i32 %74, ptr %47, align 4
  %75 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %76 = load ptr, ptr %75, align 8
  %77 = load ptr, ptr %6, align 8
  %78 = call ptr @llvm.invariant.start.p0(i64 72, ptr %77)
  %79 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %80 = load i32, ptr %79, align 4
  %81 = getelementptr ptr, ptr %77, i32 %80
  %82 = getelementptr ptr, ptr %81, i32 2
  %83 = load ptr, ptr %82, align 8
  %84 = getelementptr { ptr, ptr }, ptr %83, i32 0, i32 0
  %85 = load ptr, ptr %84, align 8
  %86 = call i32 %85(ptr %76)
  store i32 %86, ptr %48, align 4
  %87 = load i32, ptr %47, align 4
  %88 = load i32, ptr %48, align 4
  %89 = add i32 %87, %88
  store i32 %89, ptr %49, align 4
  %90 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %91 = load ptr, ptr %90, align 8
  %92 = load ptr, ptr %6, align 8
  %93 = call ptr @llvm.invariant.start.p0(i64 72, ptr %92)
  %94 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %95 = load i32, ptr %94, align 4
  %96 = getelementptr ptr, ptr %92, i32 %95
  %97 = load ptr, ptr %96, align 8
  %98 = getelementptr { ptr, ptr }, ptr %97, i32 0, i32 1
  %99 = load ptr, ptr %98, align 8
  %100 = load i32, ptr %49, align 4
  call void %99(ptr %91, i32 %100)
  %101 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %102 = load ptr, ptr %101, align 8
  %103 = load ptr, ptr %6, align 8
  %104 = call ptr @llvm.invariant.start.p0(i64 72, ptr %103)
  %105 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %106 = load i32, ptr %105, align 4
  %107 = getelementptr ptr, ptr %103, i32 %106
  %108 = load ptr, ptr %107, align 8
  %109 = getelementptr { ptr, ptr }, ptr %108, i32 0, i32 0
  %110 = load ptr, ptr %109, align 8
  %111 = call i32 %110(ptr %102)
  store i32 %111, ptr %50, align 4
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %113 = load ptr, ptr %112, align 8
  %114 = load ptr, ptr %6, align 8
  %115 = call ptr @llvm.invariant.start.p0(i64 72, ptr %114)
  %116 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %117 = load i32, ptr %116, align 4
  %118 = getelementptr ptr, ptr %114, i32 %117
  %119 = getelementptr ptr, ptr %118, i32 2
  %120 = load ptr, ptr %119, align 8
  %121 = getelementptr { ptr, ptr }, ptr %120, i32 0, i32 0
  %122 = load ptr, ptr %121, align 8
  %123 = call i32 %122(ptr %113)
  store i32 %123, ptr %51, align 4
  %124 = load i32, ptr %50, align 4
  %125 = load i32, ptr %51, align 4
  %126 = sub i32 %124, %125
  store i32 %126, ptr %52, align 4
  %127 = load i32, ptr %52, align 4
  store i32 %127, ptr %53, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %55, align 4
  %128 = load i64, ptr %55, align 4
  store i64 %128, ptr %54, align 4
  %129 = load ptr, ptr %54, align 8
  %130 = insertvalue { ptr, i32 } undef, ptr %129, 0
  %131 = load i32, ptr %53, align 4
  %132 = insertvalue { ptr, i32 } %130, i32 %131, 1
  store { ptr, i32 } %132, ptr %.reg2mem1, align 8
  %.reload2 = load { ptr, i32 }, ptr %.reg2mem1, align 8
  store { ptr, i32 } %.reload2, ptr %.reg2mem5, align 8
  br label %133

133:                                              ; preds = %63, %56
  %.reload6 = load { ptr, i32 }, ptr %.reg2mem5, align 8
  store { ptr, i32 } %.reload6, ptr %.reg2mem, align 8
  br label %134

134:                                              ; preds = %133
  %.reload = load { ptr, i32 }, ptr %.reg2mem, align 8
  ret { ptr, i32 } %.reload
}

define i32 @RangeIterator_getter_step(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { i32, i32, i32 }, ptr %0, i32 0, i32 2
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @RangeIterator_setter_step(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { i32, i32, i32 }, ptr %0, i32 0, i32 2
  store i32 %1, ptr %3, align 4
  ret void
}

define i32 @RangeIterator_getter_end(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { i32, i32, i32 }, ptr %0, i32 0, i32 1
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @RangeIterator_setter_end(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { i32, i32, i32 }, ptr %0, i32 0, i32 1
  store i32 %1, ptr %3, align 4
  ret void
}

define i32 @RangeIterator_getter_counter(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { i32, i32, i32 }, ptr %0, i32 0, i32 0
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @RangeIterator_setter_counter(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { i32, i32, i32 }, ptr %0, i32 0, i32 0
  store i32 %1, ptr %3, align 4
  ret void
}

define i32 @Range_getter_step(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { i32, i32, i32 }, ptr %0, i32 0, i32 2
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @Range_setter_step(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { i32, i32, i32 }, ptr %0, i32 0, i32 2
  store i32 %1, ptr %3, align 4
  ret void
}

define i32 @Range_getter_end(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { i32, i32, i32 }, ptr %0, i32 0, i32 1
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @Range_setter_end(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { i32, i32, i32 }, ptr %0, i32 0, i32 1
  store i32 %1, ptr %3, align 4
  ret void
}

define i32 @Range_getter_start(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { i32, i32, i32 }, ptr %0, i32 0, i32 0
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

define void @Range_setter_start(ptr %0, i32 %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { i32, i32, i32 }, ptr %0, i32 0, i32 0
  store i32 %1, ptr %3, align 4
  ret void
}

define ptr @IntIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [2 x ptr], ptr %4, i32 0, i32 1
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @IntIterable_B_each_fFunctionPtri32_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [24 x ptr], ptr %15, i32 0, i32 11
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @IntIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = getelementptr { ptr, ptr }, ptr %1, i32 0, i32 1
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr ptr, ptr %16, i32 1
  %18 = getelementptr ptr, ptr %16, i32 2
  %19 = getelementptr ptr, ptr %16, i32 3
  %20 = getelementptr ptr, ptr %16, i32 4
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr [24 x ptr], ptr %26, i32 0, i32 12
  %28 = getelementptr ptr, ptr %27, i32 7
  %29 = load ptr, ptr %28, align 8
  ret ptr %29
}

define ptr @IntIterable_B_all_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [24 x ptr], ptr %15, i32 0, i32 13
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @IntIterable_B_any_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [24 x ptr], ptr %15, i32 0, i32 14
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @IntIterable_B_map_fFunctionPtri32_to_Ptri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [24 x ptr], ptr %15, i32 0, i32 15
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @IntIterable_B_filter_fFunctionPtri32_to_Ptri1({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 7927147055246173914, i64 ptrtoint (ptr @function_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [24 x ptr], ptr %15, i32 0, i32 16
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @IntIterable_B_chain_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [24 x ptr], ptr %15, i32 0, i32 17
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @IntIterable_B_interleave_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [24 x ptr], ptr %15, i32 0, i32 18
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @IntIterable_B_zip_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [24 x ptr], ptr %15, i32 0, i32 19
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @IntIterable_B_product_otherIntIterable({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -7984962120415158575, i64 ptrtoint (ptr @IntIterable to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [24 x ptr], ptr %15, i32 0, i32 20
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @IntIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [24 x ptr], ptr %4, i32 0, i32 21
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @IntTupleIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [4 x ptr], ptr %4, i32 0, i32 1
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @IntTupleIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [2 x ptr], ptr %4, i32 0, i32 1
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @IO_B__Self_print_xPtri8__Self_print_xPtri1__Self_print_xNil__Self_print_xCharacter__Self_print_xPtri64__Self_print_xPtri32__Self_print_xRepresentable__Self_print_xString__Self_print_xPtrf64(ptr %0) {
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca i32, align 4
  %.reg2mem3 = alloca i32, align 4
  %.reg2mem5 = alloca i32, align 4
  %.reg2mem7 = alloca i32, align 4
  %.reg2mem9 = alloca i32, align 4
  %.reg2mem11 = alloca i32, align 4
  %.reg2mem13 = alloca i32, align 4
  %.reg2mem15 = alloca i32, align 4
  %.reg2mem17 = alloca i32, align 4
  %.reg2mem19 = alloca i32, align 4
  %.reg2mem21 = alloca i32, align 4
  %.reg2mem23 = alloca i32, align 4
  %.reg2mem25 = alloca i32, align 4
  %.reg2mem27 = alloca i32, align 4
  %.reg2mem29 = alloca i32, align 4
  %.reg2mem31 = alloca i32, align 4
  %.reg2mem33 = alloca i32, align 4
  %.reg2mem35 = alloca i32, align 4
  %.reg2mem37 = alloca i32, align 4
  %.reg2mem39 = alloca i32, align 4
  %.reg2mem41 = alloca i32, align 4
  %.reg2mem43 = alloca i32, align 4
  %.reg2mem45 = alloca i32, align 4
  %.reg2mem47 = alloca i32, align 4
  %.reg2mem49 = alloca i32, align 4
  %.reg2mem51 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %3 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr ptr, ptr %4, i32 1
  %6 = getelementptr ptr, ptr %4, i32 2
  %7 = getelementptr ptr, ptr %4, i32 3
  %8 = getelementptr ptr, ptr %4, i32 4
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 -7469797244461771922, i64 ptrtoint (ptr @i64_typ to i64), ptr %12)
  br i1 %13, label %14, label %15

14:                                               ; preds = %1
  store i32 5, ptr %.reg2mem29, align 4
  br label %201

15:                                               ; preds = %1
  %16 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %17 = load ptr, ptr %16, align 8
  %18 = getelementptr ptr, ptr %17, i32 1
  %19 = getelementptr ptr, ptr %17, i32 2
  %20 = getelementptr ptr, ptr %17, i32 3
  %21 = getelementptr ptr, ptr %17, i32 4
  %22 = load i64, ptr %18, align 4
  %23 = load i64, ptr %19, align 4
  %24 = load ptr, ptr %20, align 8
  %25 = load ptr, ptr %21, align 8
  %26 = call i1 @subtype_test_wrapper(ptr %24, i64 %23, i64 %22, i64 -5126806859456325683, i64 ptrtoint (ptr @nil_typ to i64), ptr %25)
  br i1 %26, label %27, label %28

27:                                               ; preds = %15
  store i32 3, ptr %.reg2mem31, align 4
  br label %199

28:                                               ; preds = %15
  %29 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %30 = load ptr, ptr %29, align 8
  %31 = getelementptr ptr, ptr %30, i32 1
  %32 = getelementptr ptr, ptr %30, i32 2
  %33 = getelementptr ptr, ptr %30, i32 3
  %34 = getelementptr ptr, ptr %30, i32 4
  %35 = load i64, ptr %31, align 4
  %36 = load i64, ptr %32, align 4
  %37 = load ptr, ptr %33, align 8
  %38 = load ptr, ptr %34, align 8
  %39 = call i1 @subtype_test_wrapper(ptr %37, i64 %36, i64 %35, i64 -757315540097298781, i64 ptrtoint (ptr @f64_typ to i64), ptr %38)
  br i1 %39, label %40, label %41

40:                                               ; preds = %28
  store i32 9, ptr %.reg2mem33, align 4
  br label %197

41:                                               ; preds = %28
  %42 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %43 = load ptr, ptr %42, align 8
  %44 = getelementptr ptr, ptr %43, i32 1
  %45 = getelementptr ptr, ptr %43, i32 2
  %46 = getelementptr ptr, ptr %43, i32 3
  %47 = getelementptr ptr, ptr %43, i32 4
  %48 = load i64, ptr %44, align 4
  %49 = load i64, ptr %45, align 4
  %50 = load ptr, ptr %46, align 8
  %51 = load ptr, ptr %47, align 8
  %52 = call i1 @subtype_test_wrapper(ptr %50, i64 %49, i64 %48, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %51)
  br i1 %52, label %53, label %67

53:                                               ; preds = %41
  %54 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %55 = load ptr, ptr %54, align 8
  %56 = getelementptr ptr, ptr %55, i32 1
  %57 = getelementptr ptr, ptr %55, i32 2
  %58 = getelementptr ptr, ptr %55, i32 3
  %59 = getelementptr ptr, ptr %55, i32 4
  %60 = load i64, ptr %56, align 4
  %61 = load i64, ptr %57, align 4
  %62 = load ptr, ptr %58, align 8
  %63 = load ptr, ptr %59, align 8
  %64 = call i1 @subtype_test_wrapper(ptr %62, i64 %61, i64 %60, i64 6681222582356018452, i64 ptrtoint (ptr @Character to i64), ptr %63)
  %65 = xor i1 %64, true
  %66 = zext i1 %65 to i32
  store i32 %66, ptr %.reg2mem27, align 4
  %.reload28 = load i32, ptr %.reg2mem27, align 4
  store i32 %.reload28, ptr %.reg2mem51, align 4
  br label %68

67:                                               ; preds = %41
  store i32 0, ptr %.reg2mem51, align 4
  br label %68

68:                                               ; preds = %67, %53
  %.reload52 = load i32, ptr %.reg2mem51, align 4
  store i32 %.reload52, ptr %.reg2mem25, align 4
  br label %69

69:                                               ; preds = %68
  %.reload26 = load i32, ptr %.reg2mem25, align 4
  %70 = zext i32 %.reload26 to i64
  %71 = trunc i64 %70 to i32
  switch i32 %71, label %195 [
    i32 0, label %72
  ]

72:                                               ; preds = %69
  %73 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %74 = load ptr, ptr %73, align 8
  %75 = getelementptr ptr, ptr %74, i32 1
  %76 = getelementptr ptr, ptr %74, i32 2
  %77 = getelementptr ptr, ptr %74, i32 3
  %78 = getelementptr ptr, ptr %74, i32 4
  %79 = load i64, ptr %75, align 4
  %80 = load i64, ptr %76, align 4
  %81 = load ptr, ptr %77, align 8
  %82 = load ptr, ptr %78, align 8
  %83 = call i1 @subtype_test_wrapper(ptr %81, i64 %80, i64 %79, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %82)
  br i1 %83, label %84, label %85

84:                                               ; preds = %72
  store i32 6, ptr %.reg2mem37, align 4
  br label %193

85:                                               ; preds = %72
  %86 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %87 = load ptr, ptr %86, align 8
  %88 = getelementptr ptr, ptr %87, i32 1
  %89 = getelementptr ptr, ptr %87, i32 2
  %90 = getelementptr ptr, ptr %87, i32 3
  %91 = getelementptr ptr, ptr %87, i32 4
  %92 = load i64, ptr %88, align 4
  %93 = load i64, ptr %89, align 4
  %94 = load ptr, ptr %90, align 8
  %95 = load ptr, ptr %91, align 8
  %96 = call i1 @subtype_test_wrapper(ptr %94, i64 %93, i64 %92, i64 2582149688529881115, i64 ptrtoint (ptr @i8_typ to i64), ptr %95)
  br i1 %96, label %97, label %98

97:                                               ; preds = %85
  store i32 1, ptr %.reg2mem39, align 4
  br label %191

98:                                               ; preds = %85
  %99 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %100 = load ptr, ptr %99, align 8
  %101 = getelementptr ptr, ptr %100, i32 1
  %102 = getelementptr ptr, ptr %100, i32 2
  %103 = getelementptr ptr, ptr %100, i32 3
  %104 = getelementptr ptr, ptr %100, i32 4
  %105 = load i64, ptr %101, align 4
  %106 = load i64, ptr %102, align 4
  %107 = load ptr, ptr %103, align 8
  %108 = load ptr, ptr %104, align 8
  %109 = call i1 @subtype_test_wrapper(ptr %107, i64 %106, i64 %105, i64 -7260840641129990118, i64 ptrtoint (ptr @Representable to i64), ptr %108)
  br i1 %109, label %110, label %139

110:                                              ; preds = %98
  %111 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %112 = load ptr, ptr %111, align 8
  %113 = getelementptr ptr, ptr %112, i32 1
  %114 = getelementptr ptr, ptr %112, i32 2
  %115 = getelementptr ptr, ptr %112, i32 3
  %116 = getelementptr ptr, ptr %112, i32 4
  %117 = load i64, ptr %113, align 4
  %118 = load i64, ptr %114, align 4
  %119 = load ptr, ptr %115, align 8
  %120 = load ptr, ptr %116, align 8
  %121 = call i1 @subtype_test_wrapper(ptr %119, i64 %118, i64 %117, i64 6681222582356018452, i64 ptrtoint (ptr @Character to i64), ptr %120)
  br i1 %121, label %122, label %123

122:                                              ; preds = %110
  store i32 0, ptr %.reg2mem49, align 4
  br label %137

123:                                              ; preds = %110
  %124 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %125 = load ptr, ptr %124, align 8
  %126 = getelementptr ptr, ptr %125, i32 1
  %127 = getelementptr ptr, ptr %125, i32 2
  %128 = getelementptr ptr, ptr %125, i32 3
  %129 = getelementptr ptr, ptr %125, i32 4
  %130 = load i64, ptr %126, align 4
  %131 = load i64, ptr %127, align 4
  %132 = load ptr, ptr %128, align 8
  %133 = load ptr, ptr %129, align 8
  %134 = call i1 @subtype_test_wrapper(ptr %132, i64 %131, i64 %130, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %133)
  %135 = xor i1 %134, true
  %136 = zext i1 %135 to i32
  store i32 %136, ptr %.reg2mem23, align 4
  %.reload24 = load i32, ptr %.reg2mem23, align 4
  store i32 %.reload24, ptr %.reg2mem49, align 4
  br label %137

137:                                              ; preds = %123, %122
  %.reload50 = load i32, ptr %.reg2mem49, align 4
  store i32 %.reload50, ptr %.reg2mem21, align 4
  br label %138

138:                                              ; preds = %137
  %.reload22 = load i32, ptr %.reg2mem21, align 4
  store i32 %.reload22, ptr %.reg2mem47, align 4
  br label %140

139:                                              ; preds = %98
  store i32 0, ptr %.reg2mem47, align 4
  br label %140

140:                                              ; preds = %139, %138
  %.reload48 = load i32, ptr %.reg2mem47, align 4
  store i32 %.reload48, ptr %.reg2mem19, align 4
  br label %141

141:                                              ; preds = %140
  %.reload20 = load i32, ptr %.reg2mem19, align 4
  %142 = zext i32 %.reload20 to i64
  %143 = trunc i64 %142 to i32
  switch i32 %143, label %189 [
    i32 0, label %144
  ]

144:                                              ; preds = %141
  %145 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %146 = load ptr, ptr %145, align 8
  %147 = getelementptr ptr, ptr %146, i32 1
  %148 = getelementptr ptr, ptr %146, i32 2
  %149 = getelementptr ptr, ptr %146, i32 3
  %150 = getelementptr ptr, ptr %146, i32 4
  %151 = load i64, ptr %147, align 4
  %152 = load i64, ptr %148, align 4
  %153 = load ptr, ptr %149, align 8
  %154 = load ptr, ptr %150, align 8
  %155 = call i1 @subtype_test_wrapper(ptr %153, i64 %152, i64 %151, i64 6681222582356018452, i64 ptrtoint (ptr @Character to i64), ptr %154)
  br i1 %155, label %156, label %170

156:                                              ; preds = %144
  %157 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %158 = load ptr, ptr %157, align 8
  %159 = getelementptr ptr, ptr %158, i32 1
  %160 = getelementptr ptr, ptr %158, i32 2
  %161 = getelementptr ptr, ptr %158, i32 3
  %162 = getelementptr ptr, ptr %158, i32 4
  %163 = load i64, ptr %159, align 4
  %164 = load i64, ptr %160, align 4
  %165 = load ptr, ptr %161, align 8
  %166 = load ptr, ptr %162, align 8
  %167 = call i1 @subtype_test_wrapper(ptr %165, i64 %164, i64 %163, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %166)
  %168 = xor i1 %167, true
  %169 = zext i1 %168 to i32
  store i32 %169, ptr %.reg2mem17, align 4
  %.reload18 = load i32, ptr %.reg2mem17, align 4
  store i32 %.reload18, ptr %.reg2mem45, align 4
  br label %171

170:                                              ; preds = %144
  store i32 0, ptr %.reg2mem45, align 4
  br label %171

171:                                              ; preds = %170, %156
  %.reload46 = load i32, ptr %.reg2mem45, align 4
  store i32 %.reload46, ptr %.reg2mem15, align 4
  br label %172

172:                                              ; preds = %171
  %.reload16 = load i32, ptr %.reg2mem15, align 4
  %173 = zext i32 %.reload16 to i64
  %174 = trunc i64 %173 to i32
  switch i32 %174, label %187 [
    i32 0, label %175
  ]

175:                                              ; preds = %172
  %176 = getelementptr { ptr }, ptr %0, i32 0, i32 0
  %177 = load ptr, ptr %176, align 8
  %178 = getelementptr ptr, ptr %177, i32 1
  %179 = getelementptr ptr, ptr %177, i32 2
  %180 = getelementptr ptr, ptr %177, i32 3
  %181 = getelementptr ptr, ptr %177, i32 4
  %182 = load i64, ptr %178, align 4
  %183 = load i64, ptr %179, align 4
  %184 = load ptr, ptr %180, align 8
  %185 = load ptr, ptr %181, align 8
  %186 = call i1 @subtype_test_wrapper(ptr %184, i64 %183, i64 %182, i64 5801531371504802705, i64 ptrtoint (ptr @bool_typ to i64), ptr %185)
  store i32 2, ptr %.reg2mem43, align 4
  br label %188

187:                                              ; preds = %172
  store i32 4, ptr %.reg2mem43, align 4
  br label %188

188:                                              ; preds = %187, %175
  %.reload44 = load i32, ptr %.reg2mem43, align 4
  store i32 %.reload44, ptr %.reg2mem13, align 4
  %.reload14 = load i32, ptr %.reg2mem13, align 4
  store i32 %.reload14, ptr %.reg2mem41, align 4
  br label %190

189:                                              ; preds = %141
  store i32 7, ptr %.reg2mem41, align 4
  br label %190

190:                                              ; preds = %189, %188
  %.reload42 = load i32, ptr %.reg2mem41, align 4
  store i32 %.reload42, ptr %.reg2mem11, align 4
  %.reload12 = load i32, ptr %.reg2mem11, align 4
  store i32 %.reload12, ptr %.reg2mem39, align 4
  br label %191

191:                                              ; preds = %190, %97
  %.reload40 = load i32, ptr %.reg2mem39, align 4
  store i32 %.reload40, ptr %.reg2mem9, align 4
  br label %192

192:                                              ; preds = %191
  %.reload10 = load i32, ptr %.reg2mem9, align 4
  store i32 %.reload10, ptr %.reg2mem37, align 4
  br label %193

193:                                              ; preds = %192, %84
  %.reload38 = load i32, ptr %.reg2mem37, align 4
  store i32 %.reload38, ptr %.reg2mem7, align 4
  br label %194

194:                                              ; preds = %193
  %.reload8 = load i32, ptr %.reg2mem7, align 4
  store i32 %.reload8, ptr %.reg2mem35, align 4
  br label %196

195:                                              ; preds = %69
  store i32 8, ptr %.reg2mem35, align 4
  br label %196

196:                                              ; preds = %195, %194
  %.reload36 = load i32, ptr %.reg2mem35, align 4
  store i32 %.reload36, ptr %.reg2mem5, align 4
  %.reload6 = load i32, ptr %.reg2mem5, align 4
  store i32 %.reload6, ptr %.reg2mem33, align 4
  br label %197

197:                                              ; preds = %196, %40
  %.reload34 = load i32, ptr %.reg2mem33, align 4
  store i32 %.reload34, ptr %.reg2mem3, align 4
  br label %198

198:                                              ; preds = %197
  %.reload4 = load i32, ptr %.reg2mem3, align 4
  store i32 %.reload4, ptr %.reg2mem31, align 4
  br label %199

199:                                              ; preds = %198, %27
  %.reload32 = load i32, ptr %.reg2mem31, align 4
  store i32 %.reload32, ptr %.reg2mem1, align 4
  br label %200

200:                                              ; preds = %199
  %.reload2 = load i32, ptr %.reg2mem1, align 4
  store i32 %.reload2, ptr %.reg2mem29, align 4
  br label %201

201:                                              ; preds = %200, %14
  %.reload30 = load i32, ptr %.reg2mem29, align 4
  store i32 %.reload30, ptr %.reg2mem, align 4
  br label %202

202:                                              ; preds = %201
  %.reload = load i32, ptr %.reg2mem, align 4
  %203 = zext i32 %.reload to i64
  %204 = or i64 0, %203
  %205 = inttoptr i64 %204 to ptr
  %206 = ptrtoint ptr %205 to i64
  %207 = trunc i64 %206 to i32
  %208 = getelementptr [10 x ptr], ptr @IO, i32 0, i32 %207
  %209 = getelementptr ptr, ptr %208, i32 7
  %210 = load ptr, ptr %209, align 8
  ret ptr %210
}

define void @IO__Self_print_xPtri8(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %5 = load i8, ptr %4, align 1
  %6 = sext i8 %5 to i32
  %7 = call i32 (ptr, ...) @printf(ptr @i32_string, i32 %6)
  ret void
}

define void @IO__Self_print_xPtri1(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %5 = load i1, ptr %4, align 1
  %6 = alloca i32, align 4
  %7 = alloca ptr, align 8
  %8 = alloca { ptr }, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca [3 x ptr], align 8
  %16 = alloca { ptr, ptr, ptr }, align 8
  %17 = alloca [0 x ptr], align 8
  %18 = alloca {}, align 8
  %19 = alloca ptr, align 8
  %20 = alloca i32, align 4
  %21 = alloca ptr, align 8
  %22 = alloca { ptr }, align 8
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca { ptr, ptr, ptr, i32 }, align 8
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  %29 = alloca [3 x ptr], align 8
  %30 = alloca { ptr, ptr, ptr }, align 8
  %31 = alloca [0 x ptr], align 8
  %32 = alloca {}, align 8
  %33 = alloca ptr, align 8
  br i1 %5, label %34, label %103

34:                                               ; preds = %2
  store i32 5, ptr %6, align 4
  %35 = load i32, ptr %6, align 4
  %36 = getelementptr i8, ptr null, i32 %35
  %37 = ptrtoint ptr %36 to i64
  %38 = call ptr @bump_malloc(i64 %37)
  store ptr %38, ptr %7, align 8
  %39 = getelementptr { ptr }, ptr %7, i32 0, i32 0
  %40 = getelementptr { ptr }, ptr %8, i32 0, i32 0
  %41 = load ptr, ptr %39, align 8
  store ptr %41, ptr %40, align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 16, ptr %8)
  store i32 0, ptr %9, align 4
  %43 = load ptr, ptr %8, align 8
  %44 = load i32, ptr %9, align 4
  %45 = getelementptr [4 x i8], ptr null, i32 %44
  %46 = ptrtoint ptr %45 to i64
  %47 = getelementptr i8, ptr %43, i64 %46
  %48 = load i32, ptr @dlxde_true, align 4
  store i32 %48, ptr %47, align 4
  store i32 4, ptr %10, align 4
  store i32 5, ptr %11, align 4
  %49 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %50 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  store ptr @String, ptr %12, align 8
  store ptr %49, ptr %50, align 8
  store i32 7, ptr %51, align 4
  %52 = call ptr @llvm.invariant.start.p0(i64 16, ptr %12)
  store i32 4, ptr %13, align 4
  store i32 5, ptr %14, align 4
  %53 = getelementptr { ptr }, ptr %8, i32 0, i32 0
  %54 = load ptr, ptr %53, align 8
  %55 = insertvalue { ptr } undef, ptr %54, 0
  %56 = load i32, ptr %13, align 4
  %57 = load i32, ptr %14, align 4
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 0
  %59 = load ptr, ptr %58, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %59, 0
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %62 = load ptr, ptr %61, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr %62, 1
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 2
  %65 = load ptr, ptr %64, align 8
  %66 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %65, 2
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  %68 = load i32, ptr %67, align 4
  %69 = insertvalue { ptr, ptr, ptr, i32 } %66, i32 %68, 3
  %70 = getelementptr [3 x ptr], ptr %15, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %70, align 8
  %71 = getelementptr [3 x ptr], ptr %15, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %71, align 8
  %72 = getelementptr [3 x ptr], ptr %15, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %72, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 9, ptr %15)
  %74 = call ptr @llvm.invariant.start.p0(i64 280, ptr %59)
  %75 = getelementptr ptr, ptr %59, i32 %68
  %76 = getelementptr ptr, ptr %75, i32 4
  %77 = load ptr, ptr %76, align 8
  %78 = getelementptr { ptr, ptr, ptr }, ptr %16, i32 0, i32 0
  store ptr @buffer_typ, ptr %78, align 8
  %79 = getelementptr { ptr, ptr, ptr }, ptr %16, i32 0, i32 1
  store ptr @i32_typ, ptr %79, align 8
  %80 = getelementptr { ptr, ptr, ptr }, ptr %16, i32 0, i32 2
  store ptr @i32_typ, ptr %80, align 8
  %81 = call ptr %77({ ptr, ptr, ptr, i32 } %69, ptr %16)
  call void %81({ ptr, ptr, ptr, i32 } %69, { ptr, ptr, ptr, i32 } %69, ptr %15, { ptr } %55, i32 %56, i32 %57)
  %82 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 0
  %83 = load ptr, ptr %82, align 8
  %84 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %83, 0
  %85 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 1
  %86 = load ptr, ptr %85, align 8
  %87 = insertvalue { ptr, ptr, ptr, i32 } %84, ptr %86, 1
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 2
  %89 = load ptr, ptr %88, align 8
  %90 = insertvalue { ptr, ptr, ptr, i32 } %87, ptr %89, 2
  %91 = getelementptr { ptr, ptr, ptr, i32 }, ptr %12, i32 0, i32 3
  %92 = load i32, ptr %91, align 4
  %93 = insertvalue { ptr, ptr, ptr, i32 } %90, i32 %92, 3
  %94 = call ptr @llvm.invariant.start.p0(i64 0, ptr %17)
  %95 = call ptr @llvm.invariant.start.p0(i64 280, ptr %83)
  %96 = getelementptr ptr, ptr %83, i32 %92
  %97 = getelementptr ptr, ptr %96, i32 14
  %98 = load ptr, ptr %97, align 8
  %99 = call ptr %98({ ptr, ptr, ptr, i32 } %93, ptr %18)
  %100 = call { ptr } %99({ ptr, ptr, ptr, i32 } %93, { ptr, ptr, ptr, i32 } %93, ptr %17)
  store { ptr } %100, ptr %19, align 8
  %101 = load ptr, ptr %19, align 8
  %102 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %101)
  br label %172

103:                                              ; preds = %2
  store i32 6, ptr %20, align 4
  %104 = load i32, ptr %20, align 4
  %105 = getelementptr i8, ptr null, i32 %104
  %106 = ptrtoint ptr %105 to i64
  %107 = call ptr @bump_malloc(i64 %106)
  store ptr %107, ptr %21, align 8
  %108 = getelementptr { ptr }, ptr %21, i32 0, i32 0
  %109 = getelementptr { ptr }, ptr %22, i32 0, i32 0
  %110 = load ptr, ptr %108, align 8
  store ptr %110, ptr %109, align 8
  %111 = call ptr @llvm.invariant.start.p0(i64 16, ptr %22)
  store i32 0, ptr %23, align 4
  %112 = load ptr, ptr %22, align 8
  %113 = load i32, ptr %23, align 4
  %114 = getelementptr [5 x i8], ptr null, i32 %113
  %115 = ptrtoint ptr %114 to i64
  %116 = getelementptr i8, ptr %112, i64 %115
  %117 = load i40, ptr @mxbfz_false, align 4
  store i40 %117, ptr %116, align 4
  store i32 5, ptr %24, align 4
  store i32 6, ptr %25, align 4
  %118 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %119 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %120 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  store ptr @String, ptr %26, align 8
  store ptr %118, ptr %119, align 8
  store i32 7, ptr %120, align 4
  %121 = call ptr @llvm.invariant.start.p0(i64 16, ptr %26)
  store i32 5, ptr %27, align 4
  store i32 6, ptr %28, align 4
  %122 = getelementptr { ptr }, ptr %22, i32 0, i32 0
  %123 = load ptr, ptr %122, align 8
  %124 = insertvalue { ptr } undef, ptr %123, 0
  %125 = load i32, ptr %27, align 4
  %126 = load i32, ptr %28, align 4
  %127 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %128 = load ptr, ptr %127, align 8
  %129 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %128, 0
  %130 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %131 = load ptr, ptr %130, align 8
  %132 = insertvalue { ptr, ptr, ptr, i32 } %129, ptr %131, 1
  %133 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %134 = load ptr, ptr %133, align 8
  %135 = insertvalue { ptr, ptr, ptr, i32 } %132, ptr %134, 2
  %136 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %137 = load i32, ptr %136, align 4
  %138 = insertvalue { ptr, ptr, ptr, i32 } %135, i32 %137, 3
  %139 = getelementptr [3 x ptr], ptr %29, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %139, align 8
  %140 = getelementptr [3 x ptr], ptr %29, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %140, align 8
  %141 = getelementptr [3 x ptr], ptr %29, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %141, align 8
  %142 = call ptr @llvm.invariant.start.p0(i64 9, ptr %29)
  %143 = call ptr @llvm.invariant.start.p0(i64 280, ptr %128)
  %144 = getelementptr ptr, ptr %128, i32 %137
  %145 = getelementptr ptr, ptr %144, i32 4
  %146 = load ptr, ptr %145, align 8
  %147 = getelementptr { ptr, ptr, ptr }, ptr %30, i32 0, i32 0
  store ptr @buffer_typ, ptr %147, align 8
  %148 = getelementptr { ptr, ptr, ptr }, ptr %30, i32 0, i32 1
  store ptr @i32_typ, ptr %148, align 8
  %149 = getelementptr { ptr, ptr, ptr }, ptr %30, i32 0, i32 2
  store ptr @i32_typ, ptr %149, align 8
  %150 = call ptr %146({ ptr, ptr, ptr, i32 } %138, ptr %30)
  call void %150({ ptr, ptr, ptr, i32 } %138, { ptr, ptr, ptr, i32 } %138, ptr %29, { ptr } %124, i32 %125, i32 %126)
  %151 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 0
  %152 = load ptr, ptr %151, align 8
  %153 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %152, 0
  %154 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 1
  %155 = load ptr, ptr %154, align 8
  %156 = insertvalue { ptr, ptr, ptr, i32 } %153, ptr %155, 1
  %157 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 2
  %158 = load ptr, ptr %157, align 8
  %159 = insertvalue { ptr, ptr, ptr, i32 } %156, ptr %158, 2
  %160 = getelementptr { ptr, ptr, ptr, i32 }, ptr %26, i32 0, i32 3
  %161 = load i32, ptr %160, align 4
  %162 = insertvalue { ptr, ptr, ptr, i32 } %159, i32 %161, 3
  %163 = call ptr @llvm.invariant.start.p0(i64 0, ptr %31)
  %164 = call ptr @llvm.invariant.start.p0(i64 280, ptr %152)
  %165 = getelementptr ptr, ptr %152, i32 %161
  %166 = getelementptr ptr, ptr %165, i32 14
  %167 = load ptr, ptr %166, align 8
  %168 = call ptr %167({ ptr, ptr, ptr, i32 } %162, ptr %32)
  %169 = call { ptr } %168({ ptr, ptr, ptr, i32 } %162, { ptr, ptr, ptr, i32 } %162, ptr %31)
  store { ptr } %169, ptr %33, align 8
  %170 = load ptr, ptr %33, align 8
  %171 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %170)
  br label %172

172:                                              ; preds = %103, %34
  ret void
}

define void @IO__Self_print_xNil(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca ptr, align 8
  %5 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 4) to i64))
  store ptr %5, ptr %4, align 8
  %6 = alloca { ptr }, align 8
  %7 = getelementptr { ptr }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %11 = load ptr, ptr %6, align 8
  %12 = getelementptr i8, ptr %11, i64 0
  %13 = load i24, ptr @gijio_nil, align 4
  store i24 %13, ptr %12, align 4
  %14 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({ { ptr }, i32, i32 }, ptr null, i32 1) to i64))
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  store ptr @String, ptr %15, align 8
  store ptr %14, ptr %16, align 8
  store i32 7, ptr %17, align 4
  %18 = call ptr @llvm.invariant.start.p0(i64 16, ptr %15)
  %19 = getelementptr { ptr }, ptr %6, i32 0, i32 0
  %20 = load ptr, ptr %19, align 8
  %21 = insertvalue { ptr } undef, ptr %20, 0
  %22 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %23 = load ptr, ptr %22, align 8
  %24 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %23, 0
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %26 = load ptr, ptr %25, align 8
  %27 = insertvalue { ptr, ptr, ptr, i32 } %24, ptr %26, 1
  %28 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %29 = load ptr, ptr %28, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } %27, ptr %29, 2
  %31 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %32 = load i32, ptr %31, align 4
  %33 = insertvalue { ptr, ptr, ptr, i32 } %30, i32 %32, 3
  %34 = alloca [3 x ptr], align 8
  %35 = getelementptr [3 x ptr], ptr %34, i32 0, i32 0
  store ptr @_parameterization_BufferPtri8, ptr %35, align 8
  %36 = getelementptr [3 x ptr], ptr %34, i32 0, i32 1
  store ptr @_parameterization_Ptri32, ptr %36, align 8
  %37 = getelementptr [3 x ptr], ptr %34, i32 0, i32 2
  store ptr @_parameterization_Ptri32, ptr %37, align 8
  %38 = call ptr @llvm.invariant.start.p0(i64 9, ptr %34)
  %39 = call ptr @llvm.invariant.start.p0(i64 280, ptr %23)
  %40 = getelementptr ptr, ptr %23, i32 %32
  %41 = getelementptr ptr, ptr %40, i32 4
  %42 = load ptr, ptr %41, align 8
  %43 = alloca { ptr, ptr, ptr }, align 8
  %44 = getelementptr { ptr, ptr, ptr }, ptr %43, i32 0, i32 0
  store ptr @buffer_typ, ptr %44, align 8
  %45 = getelementptr { ptr, ptr, ptr }, ptr %43, i32 0, i32 1
  store ptr @i32_typ, ptr %45, align 8
  %46 = getelementptr { ptr, ptr, ptr }, ptr %43, i32 0, i32 2
  store ptr @i32_typ, ptr %46, align 8
  %47 = call ptr %42({ ptr, ptr, ptr, i32 } %33, ptr %43)
  call void %47({ ptr, ptr, ptr, i32 } %33, { ptr, ptr, ptr, i32 } %33, ptr %34, { ptr } %21, i32 3, i32 4)
  %48 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 0
  %49 = load ptr, ptr %48, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %49, 0
  %51 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 1
  %52 = load ptr, ptr %51, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } %50, ptr %52, 1
  %54 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 2
  %55 = load ptr, ptr %54, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %55, 2
  %57 = getelementptr { ptr, ptr, ptr, i32 }, ptr %15, i32 0, i32 3
  %58 = load i32, ptr %57, align 4
  %59 = insertvalue { ptr, ptr, ptr, i32 } %56, i32 %58, 3
  %60 = alloca [0 x ptr], align 8
  %61 = call ptr @llvm.invariant.start.p0(i64 0, ptr %60)
  %62 = call ptr @llvm.invariant.start.p0(i64 280, ptr %49)
  %63 = getelementptr ptr, ptr %49, i32 %58
  %64 = getelementptr ptr, ptr %63, i32 14
  %65 = load ptr, ptr %64, align 8
  %66 = alloca {}, align 8
  %67 = call ptr %65({ ptr, ptr, ptr, i32 } %59, ptr %66)
  %68 = call { ptr } %67({ ptr, ptr, ptr, i32 } %59, { ptr, ptr, ptr, i32 } %59, ptr %60)
  %69 = alloca ptr, align 8
  store { ptr } %68, ptr %69, align 8
  %70 = load ptr, ptr %69, align 8
  %71 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %70)
  ret void
}

define void @IO__Self_print_xCharacter(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %6 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %9 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %10 = load i160, ptr %8, align 4
  store i160 %10, ptr %9, align 4
  call void @set_offset(ptr %4, ptr @Character)
  %11 = alloca ptr, align 8
  %12 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 2) to i64))
  store ptr %12, ptr %11, align 8
  %13 = alloca { ptr }, align 8
  %14 = getelementptr { ptr }, ptr %11, i32 0, i32 0
  %15 = getelementptr { ptr }, ptr %13, i32 0, i32 0
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = call ptr @llvm.invariant.start.p0(i64 16, ptr %13)
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %19 = load ptr, ptr %18, align 8
  %20 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %19, 0
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %22 = load ptr, ptr %21, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } %20, ptr %22, 1
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %25 = load ptr, ptr %24, align 8
  %26 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %25, 2
  %27 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %28 = load i32, ptr %27, align 4
  %29 = insertvalue { ptr, ptr, ptr, i32 } %26, i32 %28, 3
  %30 = alloca [0 x ptr], align 8
  %31 = call ptr @llvm.invariant.start.p0(i64 0, ptr %30)
  %32 = call ptr @llvm.invariant.start.p0(i64 40, ptr %19)
  %33 = getelementptr ptr, ptr %19, i32 %28
  %34 = getelementptr ptr, ptr %33, i32 1
  %35 = load ptr, ptr %34, align 8
  %36 = alloca {}, align 8
  %37 = call ptr %35({ ptr, ptr, ptr, i32 } %29, ptr %36)
  %38 = call i8 %37({ ptr, ptr, ptr, i32 } %29, { ptr, ptr, ptr, i32 } %29, ptr %30)
  %39 = load ptr, ptr %13, align 8
  %40 = getelementptr i8, ptr %39, i64 0
  store i8 %38, ptr %40, align 1
  %41 = load ptr, ptr %13, align 8
  %42 = getelementptr i8, ptr %41, i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
  store i8 0, ptr %42, align 1
  %43 = load ptr, ptr %13, align 8
  %44 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %43)
  ret void
}

define void @IO__Self_print_xPtri64(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %5 = load i64, ptr %4, align 4
  %6 = call i32 (ptr, ...) @printf(ptr @i64_string, i64 %5)
  ret void
}

define void @IO__Self_print_xPtri32(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %5 = load i32, ptr %4, align 4
  %6 = call i32 (ptr, ...) @printf(ptr @i32_string, i32 %5)
  ret void
}

define void @IO__Self_print_xRepresentable(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %6 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %9 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %10 = load i160, ptr %8, align 4
  store i160 %10, ptr %9, align 4
  call void @set_offset(ptr %4, ptr @Representable)
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %12, 0
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 1
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 2
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %21 = load i32, ptr %20, align 4
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, i32 %21, 3
  %23 = alloca [0 x ptr], align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 0, ptr %23)
  %25 = call ptr @llvm.invariant.start.p0(i64 16, ptr %12)
  %26 = getelementptr ptr, ptr %12, i32 %21
  %27 = load ptr, ptr %26, align 8
  %28 = alloca {}, align 8
  %29 = call ptr %27({ ptr, ptr, ptr, i32 } %22, ptr %28)
  %30 = call { ptr, ptr, ptr, i32 } %29({ ptr, ptr, ptr, i32 } %22, { ptr, ptr, ptr, i32 } %22, ptr %23)
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  store { ptr, ptr, ptr, i32 } %30, ptr %31, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 16, ptr %31)
  %33 = alloca { ptr, ptr, ptr, i32 }, align 8
  %34 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 0
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 0
  %36 = load ptr, ptr %34, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 1
  %38 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 1
  %39 = load ptr, ptr %37, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 2
  %41 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 2
  %42 = load ptr, ptr %40, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr { ptr, ptr, ptr, i32 }, ptr %31, i32 0, i32 3
  %44 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 3
  %45 = load i32, ptr %43, align 4
  store i32 %45, ptr %44, align 4
  call void @set_offset(ptr %33, ptr @String)
  %46 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 0
  %47 = load ptr, ptr %46, align 8
  %48 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %47, 0
  %49 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 1
  %50 = load ptr, ptr %49, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } %48, ptr %50, 1
  %52 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 2
  %53 = load ptr, ptr %52, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %51, ptr %53, 2
  %55 = getelementptr { ptr, ptr, ptr, i32 }, ptr %33, i32 0, i32 3
  %56 = load i32, ptr %55, align 4
  %57 = insertvalue { ptr, ptr, ptr, i32 } %54, i32 %56, 3
  %58 = alloca [0 x ptr], align 8
  %59 = call ptr @llvm.invariant.start.p0(i64 0, ptr %58)
  %60 = call ptr @llvm.invariant.start.p0(i64 280, ptr %47)
  %61 = getelementptr ptr, ptr %47, i32 %56
  %62 = getelementptr ptr, ptr %61, i32 14
  %63 = load ptr, ptr %62, align 8
  %64 = alloca {}, align 8
  %65 = call ptr %63({ ptr, ptr, ptr, i32 } %57, ptr %64)
  %66 = call { ptr } %65({ ptr, ptr, ptr, i32 } %57, { ptr, ptr, ptr, i32 } %57, ptr %58)
  %67 = alloca ptr, align 8
  store { ptr } %66, ptr %67, align 8
  %68 = load ptr, ptr %67, align 8
  %69 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %68)
  ret void
}

define void @IO__Self_print_xString(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %5 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 0
  %6 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %9 = getelementptr { ptr, i160 }, ptr %4, i32 0, i32 1
  %10 = load i160, ptr %8, align 4
  store i160 %10, ptr %9, align 4
  call void @set_offset(ptr %4, ptr @String)
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %12, 0
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %15 = load ptr, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %15, 1
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %18 = load ptr, ptr %17, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %18, 2
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %21 = load i32, ptr %20, align 4
  %22 = insertvalue { ptr, ptr, ptr, i32 } %19, i32 %21, 3
  %23 = alloca [0 x ptr], align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 0, ptr %23)
  %25 = call ptr @llvm.invariant.start.p0(i64 280, ptr %12)
  %26 = getelementptr ptr, ptr %12, i32 %21
  %27 = getelementptr ptr, ptr %26, i32 14
  %28 = load ptr, ptr %27, align 8
  %29 = alloca {}, align 8
  %30 = call ptr %28({ ptr, ptr, ptr, i32 } %22, ptr %29)
  %31 = call { ptr } %30({ ptr, ptr, ptr, i32 } %22, { ptr, ptr, ptr, i32 } %22, ptr %23)
  %32 = alloca ptr, align 8
  store { ptr } %31, ptr %32, align 8
  %33 = load ptr, ptr %32, align 8
  %34 = call i32 (ptr, ...) @printf(ptr @string_string, ptr %33)
  ret void
}

define void @IO__Self_print_xPtrf64(ptr %0, { ptr, i160 } %1) {
  %3 = alloca { ptr, i160 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, i160 } %1, ptr %3, align 8
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %5 = load double, ptr %4, align 8
  %6 = call i32 (ptr, ...) @printf(ptr @float_string, double %5)
  ret void
}

define ptr @Blocking_B_init_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [2 x ptr], ptr %4, i32 0, i32 1
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define void @Blocking_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Blocking)
  ret void
}

define ptr @Channel_B_init_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [7 x ptr], ptr %4, i32 0, i32 4
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Channel_B_get_({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr [7 x ptr], ptr %4, i32 0, i32 5
  %6 = getelementptr ptr, ptr %5, i32 7
  %7 = load ptr, ptr %6, align 8
  ret ptr %7
}

define ptr @Channel_B_put_new_valuePtri32({ ptr, ptr, ptr, i32 } %0, ptr %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = getelementptr { ptr }, ptr %1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr ptr, ptr %5, i32 1
  %7 = getelementptr ptr, ptr %5, i32 2
  %8 = getelementptr ptr, ptr %5, i32 3
  %9 = getelementptr ptr, ptr %5, i32 4
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 -2253724949814257982, i64 ptrtoint (ptr @i32_typ to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr [7 x ptr], ptr %15, i32 0, i32 6
  %17 = getelementptr ptr, ptr %16, i32 7
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define void @Channel_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Channel)
  %19 = alloca i32, align 4
  %20 = alloca ptr, align 8
  store [0 x i8] undef, ptr %19, align 1
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %20, align 4
  %21 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %22 = load ptr, ptr %21, align 8
  %23 = load ptr, ptr %6, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 56, ptr %23)
  %25 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %26 = load i32, ptr %25, align 4
  %27 = getelementptr ptr, ptr %23, i32 %26
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr { ptr, ptr }, ptr %28, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8
  %31 = load ptr, ptr %20, align 8
  %32 = insertvalue { ptr, i32 } undef, ptr %31, 0
  %33 = load i32, ptr %19, align 4
  %34 = insertvalue { ptr, i32 } %32, i32 %33, 1
  call void %30(ptr %22, { ptr, i32 } %34)
  ret void
}

define i32 @Channel_get_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2) {
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i32, align 4
  %.reg2mem1 = alloca ptr, align 8
  %.reg2mem4 = alloca i32, align 4
  %.reg2mem6 = alloca i32, align 4
  %.reg2mem9 = alloca i32, align 4
  %.reg2mem11 = alloca i32, align 4
  %.reg2mem13 = alloca ptr, align 8
  %.reg2mem17 = alloca i32, align 4
  %.reg2mem19 = alloca ptr, align 8
  %.reg2mem21 = alloca i32, align 4
  %.reg2mem23 = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 16, ptr %4)
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 0
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 0
  %9 = load ptr, ptr %7, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 1
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %12 = load ptr, ptr %10, align 8
  store ptr %12, ptr %11, align 8
  %13 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 2
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 2
  %15 = load ptr, ptr %13, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr { ptr, ptr, ptr, i32 }, ptr %4, i32 0, i32 3
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %18 = load i32, ptr %16, align 4
  store i32 %18, ptr %17, align 4
  call void @set_offset(ptr %6, ptr @Channel)
  %19 = alloca i1, align 1
  %20 = alloca { ptr, i32 }, align 8
  %21 = alloca i64, align 8
  %22 = alloca i1, align 1
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = alloca [0 x ptr], align 8
  %25 = alloca {}, align 8
  %26 = alloca { ptr, i160 }, align 8
  %27 = alloca i32, align 4
  %28 = alloca [0 x i8], align 1
  %29 = alloca i32, align 4
  %30 = alloca ptr, align 8
  %31 = alloca i64, align 8
  br label %32

32:                                               ; preds = %97, %3
  store i1 true, ptr %19, align 1
  %33 = load i1, ptr %19, align 1
  br i1 %33, label %34, label %93

34:                                               ; preds = %32
  %35 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %36 = load ptr, ptr %35, align 8
  %37 = load ptr, ptr %6, align 8
  %38 = call ptr @llvm.invariant.start.p0(i64 56, ptr %37)
  %39 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %40 = load i32, ptr %39, align 4
  %41 = getelementptr ptr, ptr %37, i32 %40
  %42 = load ptr, ptr %41, align 8
  %43 = getelementptr { ptr, ptr }, ptr %42, i32 0, i32 0
  %44 = load ptr, ptr %43, align 8
  %45 = call { ptr, i32 } %44(ptr %36)
  store ptr %20, ptr %.reg2mem13, align 8
  %.reload16 = load ptr, ptr %.reg2mem13, align 8
  store { ptr, i32 } %45, ptr %.reload16, align 8
  %.reload15 = load ptr, ptr %.reg2mem13, align 8
  %46 = getelementptr { ptr, i32 }, ptr %.reload15, i32 0, i32 0
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %21, align 4
  %47 = load ptr, ptr %46, align 8
  %48 = ptrtoint ptr %47 to i64
  %49 = load ptr, ptr %21, align 8
  %50 = ptrtoint ptr %49 to i64
  %51 = icmp eq i64 %48, %50
  %52 = icmp eq i64 %48, 0
  %53 = or i1 %51, %52
  %54 = icmp eq i1 %53, false
  store i1 %54, ptr %22, align 1
  %55 = load i1, ptr %22, align 1
  %56 = zext i1 %55 to i32
  store i32 %56, ptr %.reg2mem11, align 4
  %57 = xor i1 %55, true
  %58 = zext i1 %57 to i32
  store i32 %58, ptr %.reg2mem9, align 4
  br i1 %55, label %59, label %60

59:                                               ; preds = %34
  br label %92

60:                                               ; preds = %34
  %61 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  %62 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %63 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  store ptr @Blocking, ptr %23, align 8
  store ptr %61, ptr %62, align 8
  store i32 7, ptr %63, align 4
  %64 = call ptr @llvm.invariant.start.p0(i64 16, ptr %23)
  %65 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 0
  %66 = load ptr, ptr %65, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %66, 0
  %68 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 1
  %69 = load ptr, ptr %68, align 8
  %70 = insertvalue { ptr, ptr, ptr, i32 } %67, ptr %69, 1
  %71 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 2
  %72 = load ptr, ptr %71, align 8
  %73 = insertvalue { ptr, ptr, ptr, i32 } %70, ptr %72, 2
  %74 = getelementptr { ptr, ptr, ptr, i32 }, ptr %23, i32 0, i32 3
  %75 = load i32, ptr %74, align 4
  %76 = insertvalue { ptr, ptr, ptr, i32 } %73, i32 %75, 3
  %77 = call ptr @llvm.invariant.start.p0(i64 0, ptr %24)
  %78 = call ptr @llvm.invariant.start.p0(i64 16, ptr %66)
  %79 = getelementptr ptr, ptr %66, i32 %75
  %80 = load ptr, ptr %79, align 8
  %81 = call ptr %80({ ptr, ptr, ptr, i32 } %76, ptr %25)
  call void %81({ ptr, ptr, ptr, i32 } %76, { ptr, ptr, ptr, i32 } %76, ptr %24)
  %82 = getelementptr { ptr, i160 }, ptr %23, i32 0, i32 0
  %83 = load ptr, ptr %82, align 8
  %84 = insertvalue { ptr, i160 } undef, ptr %83, 0
  %85 = getelementptr { ptr, i160 }, ptr %23, i32 0, i32 1
  %86 = load i160, ptr %85, align 4
  %87 = insertvalue { ptr, i160 } %84, i160 %86, 1
  %88 = call ptr @get_current_coroutine()
  %89 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %88, i32 0, i32 4
  store { ptr, i160 } %87, ptr %89, align 8
  call void @coroutine_yield(ptr %88)
  %90 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %88, i32 0, i32 4
  %91 = load { ptr, i160 }, ptr %90, align 8
  store { ptr, i160 } %91, ptr %26, align 8
  br label %92

92:                                               ; preds = %60, %59
  %.reload10 = load i32, ptr %.reg2mem9, align 4
  %.reload12 = load i32, ptr %.reg2mem11, align 4
  %.reload14 = load ptr, ptr %.reg2mem13, align 8
  store ptr %.reload14, ptr %.reg2mem19, align 8
  store i32 %.reload10, ptr %.reg2mem21, align 4
  store i32 %.reload12, ptr %.reg2mem23, align 4
  br label %94

93:                                               ; preds = %32
  store ptr poison, ptr %.reg2mem19, align 8
  store i32 0, ptr %.reg2mem21, align 4
  store i32 2, ptr %.reg2mem23, align 4
  br label %94

94:                                               ; preds = %93, %92
  %.reload24 = load i32, ptr %.reg2mem23, align 4
  %.reload22 = load i32, ptr %.reg2mem21, align 4
  %.reload20 = load ptr, ptr %.reg2mem19, align 8
  store i32 %.reload24, ptr %.reg2mem6, align 4
  store i32 %.reload22, ptr %.reg2mem4, align 4
  store ptr %.reload20, ptr %.reg2mem1, align 8
  br label %95

95:                                               ; preds = %94
  %.reload5 = load i32, ptr %.reg2mem4, align 4
  %96 = trunc i32 %.reload5 to i1
  %.reload3 = load ptr, ptr %.reg2mem1, align 8
  %.reload8 = load i32, ptr %.reg2mem6, align 4
  br i1 %96, label %97, label %98

97:                                               ; preds = %95
  br label %32

98:                                               ; preds = %95
  %.reload7 = load i32, ptr %.reg2mem6, align 4
  %99 = zext i32 %.reload7 to i64
  %100 = trunc i64 %99 to i32
  switch i32 %100, label %121 [
    i32 1, label %101
  ]

101:                                              ; preds = %98
  %.reload2 = load ptr, ptr %.reg2mem1, align 8
  %102 = getelementptr { ptr, i32 }, ptr %.reload2, i32 0, i32 1
  %103 = load i32, ptr %102, align 4
  store i32 %103, ptr %27, align 4
  %104 = load [0 x i8], ptr %28, align 1
  store [0 x i8] %104, ptr %29, align 1
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %31, align 4
  %105 = load i64, ptr %31, align 4
  store i64 %105, ptr %30, align 4
  %106 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 1
  %107 = load ptr, ptr %106, align 8
  %108 = load ptr, ptr %6, align 8
  %109 = call ptr @llvm.invariant.start.p0(i64 56, ptr %108)
  %110 = getelementptr { ptr, ptr, ptr, i32 }, ptr %6, i32 0, i32 3
  %111 = load i32, ptr %110, align 4
  %112 = getelementptr ptr, ptr %108, i32 %111
  %113 = load ptr, ptr %112, align 8
  %114 = getelementptr { ptr, ptr }, ptr %113, i32 0, i32 1
  %115 = load ptr, ptr %114, align 8
  %116 = load ptr, ptr %30, align 8
  %117 = insertvalue { ptr, i32 } undef, ptr %116, 0
  %118 = load i32, ptr %29, align 4
  %119 = insertvalue { ptr, i32 } %117, i32 %118, 1
  call void %115(ptr %107, { ptr, i32 } %119)
  %120 = load i32, ptr %27, align 4
  store i32 %120, ptr %.reg2mem, align 4
  %.reload = load i32, ptr %.reg2mem, align 4
  store i32 %.reload, ptr %.reg2mem17, align 4
  br label %122

121:                                              ; preds = %98
  store i32 poison, ptr %.reg2mem17, align 4
  br label %122

122:                                              ; preds = %121, %101
  %.reload18 = load i32, ptr %.reg2mem17, align 4
  ret i32 %.reload18
}

define void @Channel_put_new_valuePtri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr %2, i32 %3) {
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.reg2mem = alloca i1, align 1
  %.reg2mem3 = alloca ptr, align 8
  %"reg2mem alloca point" = bitcast i32 0 to i32
  store { ptr, ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 16, ptr %5)
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 0
  %9 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 0
  %10 = load ptr, ptr %8, align 8
  store ptr %10, ptr %9, align 8
  %11 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  %12 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %13 = load ptr, ptr %11, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 2
  %15 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 2
  %16 = load ptr, ptr %14, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr { ptr, ptr, ptr, i32 }, ptr %5, i32 0, i32 3
  %18 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %19 = load i32, ptr %17, align 4
  store i32 %19, ptr %18, align 4
  call void @set_offset(ptr %7, ptr @Channel)
  %20 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %21 = load ptr, ptr %20, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 56, ptr %22)
  %24 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %25 = load i32, ptr %24, align 4
  %26 = getelementptr ptr, ptr %22, i32 %25
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr { ptr, ptr }, ptr %27, i32 0, i32 0
  %29 = load ptr, ptr %28, align 8
  %30 = call { ptr, i32 } %29(ptr %21)
  %31 = alloca { ptr, i32 }, align 8
  store { ptr, i32 } %30, ptr %31, align 8
  %32 = getelementptr { ptr, i32 }, ptr %31, i32 0, i32 0
  store ptr %32, ptr %.reg2mem3, align 8
  %33 = alloca i64, align 8
  %34 = alloca i1, align 1
  %35 = alloca i32, align 4
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = alloca [0 x ptr], align 8
  %38 = alloca {}, align 8
  %39 = alloca { ptr, i160 }, align 8
  %40 = alloca { ptr, i32 }, align 8
  %41 = alloca i32, align 4
  %42 = alloca ptr, align 8
  %43 = alloca i64, align 8
  br label %44

44:                                               ; preds = %._crit_edge1, %4
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %33, align 4
  %.reload4 = load ptr, ptr %.reg2mem3, align 8
  %45 = load ptr, ptr %.reload4, align 8
  %46 = ptrtoint ptr %45 to i64
  %47 = load ptr, ptr %33, align 8
  %48 = ptrtoint ptr %47 to i64
  %49 = icmp eq i64 %46, %48
  %50 = icmp eq i64 %46, 0
  %51 = or i1 %49, %50
  %52 = icmp eq i1 %51, false
  store i1 %52, ptr %34, align 1
  %53 = load i1, ptr %34, align 1
  store i1 %53, ptr %.reg2mem, align 1
  %.reload2 = load i1, ptr %.reg2mem, align 1
  br i1 %.reload2, label %54, label %._crit_edge

._crit_edge:                                      ; preds = %44
  br label %105

54:                                               ; preds = %44
  %55 = getelementptr { ptr, i32 }, ptr %31, i32 0, i32 1
  %56 = load i32, ptr %55, align 4
  store i32 %56, ptr %35, align 4
  %57 = call ptr @bump_malloc(i64 ptrtoint (ptr getelementptr ({}, ptr null, i32 1) to i64))
  %58 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %59 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  store ptr @Blocking, ptr %36, align 8
  store ptr %57, ptr %58, align 8
  store i32 7, ptr %59, align 4
  %60 = call ptr @llvm.invariant.start.p0(i64 16, ptr %36)
  %61 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 0
  %62 = load ptr, ptr %61, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %62, 0
  %64 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 1
  %65 = load ptr, ptr %64, align 8
  %66 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %65, 1
  %67 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 2
  %68 = load ptr, ptr %67, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %66, ptr %68, 2
  %70 = getelementptr { ptr, ptr, ptr, i32 }, ptr %36, i32 0, i32 3
  %71 = load i32, ptr %70, align 4
  %72 = insertvalue { ptr, ptr, ptr, i32 } %69, i32 %71, 3
  %73 = call ptr @llvm.invariant.start.p0(i64 0, ptr %37)
  %74 = call ptr @llvm.invariant.start.p0(i64 16, ptr %62)
  %75 = getelementptr ptr, ptr %62, i32 %71
  %76 = load ptr, ptr %75, align 8
  %77 = call ptr %76({ ptr, ptr, ptr, i32 } %72, ptr %38)
  call void %77({ ptr, ptr, ptr, i32 } %72, { ptr, ptr, ptr, i32 } %72, ptr %37)
  %78 = getelementptr { ptr, i160 }, ptr %36, i32 0, i32 0
  %79 = load ptr, ptr %78, align 8
  %80 = insertvalue { ptr, i160 } undef, ptr %79, 0
  %81 = getelementptr { ptr, i160 }, ptr %36, i32 0, i32 1
  %82 = load i160, ptr %81, align 4
  %83 = insertvalue { ptr, i160 } %80, i160 %82, 1
  %84 = call ptr @get_current_coroutine()
  %85 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %84, i32 0, i32 4
  store { ptr, i160 } %83, ptr %85, align 8
  call void @coroutine_yield(ptr %84)
  %86 = getelementptr { ptr, [3 x ptr], ptr, i1, { ptr, i160 } }, ptr %84, i32 0, i32 4
  %87 = load { ptr, i160 }, ptr %86, align 8
  store { ptr, i160 } %87, ptr %39, align 8
  %88 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %89 = load ptr, ptr %88, align 8
  %90 = load ptr, ptr %7, align 8
  %91 = call ptr @llvm.invariant.start.p0(i64 56, ptr %90)
  %92 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %93 = load i32, ptr %92, align 4
  %94 = getelementptr ptr, ptr %90, i32 %93
  %95 = load ptr, ptr %94, align 8
  %96 = getelementptr { ptr, ptr }, ptr %95, i32 0, i32 0
  %97 = load ptr, ptr %96, align 8
  %98 = call { ptr, i32 } %97(ptr %89)
  store { ptr, i32 } %98, ptr %40, align 8
  %99 = getelementptr { ptr, i32 }, ptr %40, i32 0, i32 0
  %100 = getelementptr { ptr, i32 }, ptr %31, i32 0, i32 0
  %101 = load ptr, ptr %99, align 8
  store ptr %101, ptr %100, align 8
  %102 = getelementptr { ptr, i32 }, ptr %40, i32 0, i32 1
  %103 = getelementptr { ptr, i32 }, ptr %31, i32 0, i32 1
  %104 = load i32, ptr %102, align 4
  store i32 %104, ptr %103, align 4
  br label %105

105:                                              ; preds = %54, %._crit_edge
  %.reload = load i1, ptr %.reg2mem, align 1
  br i1 %.reload, label %._crit_edge1, label %106

._crit_edge1:                                     ; preds = %105
  br label %44

106:                                              ; preds = %105
  store i32 %3, ptr %41, align 4
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %43, align 4
  %107 = load i64, ptr %43, align 4
  store i64 %107, ptr %42, align 4
  %108 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 1
  %109 = load ptr, ptr %108, align 8
  %110 = load ptr, ptr %7, align 8
  %111 = call ptr @llvm.invariant.start.p0(i64 56, ptr %110)
  %112 = getelementptr { ptr, ptr, ptr, i32 }, ptr %7, i32 0, i32 3
  %113 = load i32, ptr %112, align 4
  %114 = getelementptr ptr, ptr %110, i32 %113
  %115 = load ptr, ptr %114, align 8
  %116 = getelementptr { ptr, ptr }, ptr %115, i32 0, i32 1
  %117 = load ptr, ptr %116, align 8
  %118 = load ptr, ptr %42, align 8
  %119 = insertvalue { ptr, i32 } undef, ptr %118, 0
  %120 = load i32, ptr %41, align 4
  %121 = insertvalue { ptr, i32 } %119, i32 %120, 1
  call void %117(ptr %109, { ptr, i32 } %121)
  ret void
}

define { ptr, i32 } @Channel_getter_value(ptr %0) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %2 = getelementptr { { ptr, i32 } }, ptr %0, i32 0, i32 0
  %3 = getelementptr { ptr, i32 }, ptr %2, i32 0, i32 0
  %4 = load ptr, ptr %3, align 8
  %5 = insertvalue { ptr, i32 } undef, ptr %4, 0
  %6 = getelementptr { ptr, i32 }, ptr %2, i32 0, i32 1
  %7 = load i32, ptr %6, align 4
  %8 = insertvalue { ptr, i32 } %5, i32 %7, 1
  ret { ptr, i32 } %8
}

define void @Channel_setter_value(ptr %0, { ptr, i32 } %1) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %3 = getelementptr { { ptr, i32 } }, ptr %0, i32 0, i32 0
  %4 = alloca { ptr, i32 }, align 8
  store { ptr, i32 } %1, ptr %4, align 8
  %5 = getelementptr { ptr, i32 }, ptr %4, i32 0, i32 0
  %6 = getelementptr { ptr, i32 }, ptr %3, i32 0, i32 0
  %7 = load ptr, ptr %5, align 8
  store ptr %7, ptr %6, align 8
  %8 = getelementptr { ptr, i32 }, ptr %4, i32 0, i32 1
  %9 = getelementptr { ptr, i32 }, ptr %3, i32 0, i32 1
  %10 = load i32, ptr %8, align 4
  store i32 %10, ptr %9, align 4
  ret void
}

define ptr @adjust_trampoline(ptr %tramp) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %ret = call ptr @llvm.adjust.trampoline(ptr %tramp) #12
  ret ptr %ret
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: read)
declare ptr @llvm.adjust.trampoline(ptr) #2

; Function Attrs: mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0)
define noalias ptr @bump_malloc(i64 noundef %size) #3 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %result = tail call noalias ptr @bump_malloc_inner(i64 noundef %size, ptr @current_ptr) #3
  ret ptr %result
}

; Function Attrs: mustprogress nofree noinline nounwind willreturn allockind("alloc,uninitialized") allocsize(0)
define noalias ptr @bump_malloc_inner(i64 noundef %size, ptr %current_ptr) #4 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %size_plus_15 = add i64 %size, 15
  %aligned_size = and i64 %size_plus_15, -16
  %current = load ptr, ptr %current_ptr, align 8
  %new_ptr = getelementptr i8, ptr %current, i64 %aligned_size
  store ptr %new_ptr, ptr %current_ptr, align 8
  ret ptr %current
}

define void @anoint_trampoline(ptr %tramp) {
  %oldProtect = alloca i32, align 4
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %result = call i32 @VirtualProtect(ptr %tramp, i64 16, i32 64, ptr %oldProtect) #5
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
declare i32 @VirtualProtect(ptr, i64, i32, ptr) #5

define ptr @coroutine_create(ptr %func, ptr %arg_passer) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %stack = call noalias ptr @VirtualAlloc(ptr null, i64 8388608, i32 12288, i32 4) #6
  %func_ptr = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %stack, i32 0, i32 0
  store ptr %func, ptr %func_ptr, align 8
  %stack_top = getelementptr i8, ptr %stack, i64 8388608
  %stack_top_i64 = ptrtoint ptr %stack_top to i64
  %stack_top_aligned = and i64 %stack_top_i64, -16
  %into_callee_buf = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %stack, i32 0, i32 1
  %arg_passer_slot = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %stack, i32 0, i32 2
  %into_callee_first_word = getelementptr [3 x ptr], ptr %into_callee_buf, i32 0, i32 0
  %into_callee_second_word = getelementptr [3 x ptr], ptr %into_callee_buf, i32 0, i32 1
  %into_callee_third_word = getelementptr [3 x ptr], ptr %into_callee_buf, i32 0, i32 2
  store i64 %stack_top_aligned, ptr %into_callee_first_word, align 4
  store i64 %stack_top_aligned, ptr %into_callee_third_word, align 4
  store ptr %arg_passer, ptr %arg_passer_slot, align 8
  %is_finished = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %stack, i32 0, i32 3
  store i1 false, ptr %is_finished, align 1
  call void @coroutine_trampoline(ptr %into_callee_second_word)
  ret ptr %stack
}

; Function Attrs: mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(1)
declare noalias ptr @VirtualAlloc(ptr, i64, i32, i32) #6

declare void @coroutine_trampoline(ptr)

define void @setup_landing_pad() {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %region = call noalias ptr @VirtualAlloc(ptr null, i64 8388608, i32 12288, i32 4) #6
  store ptr %region, ptr @current_ptr, align 8
  %buf_first_word = getelementptr [3 x ptr], ptr @into_caller_buf, i32 0, i32 0
  %buf_second_word = getelementptr [3 x ptr], ptr @into_caller_buf, i32 0, i32 1
  %buf_third_word = getelementptr [3 x ptr], ptr @into_caller_buf, i32 0, i32 2
  %sp = call ptr @llvm.stacksave.p0() #13
  store ptr %sp, ptr %buf_first_word, align 8
  store ptr blockaddress(@setup_landing_pad, %landing_pad), ptr %buf_second_word, align 8
  store ptr %sp, ptr %buf_third_word, align 8
  %current_coroutine = call ptr @coroutine_create(ptr @setup_landing_pad, ptr @arg_passer)
  store ptr %current_coroutine, ptr @current_coroutine, align 8
  %result = call i1 @returns_one()
  br i1 %result, label %exit, label %landing_pad

landing_pad:                                      ; preds = %0
  %ok = call i32 @printf(ptr @string_string.69, ptr @exception_message)
  %cc = load { ptr }, ptr @current_coroutine, align 8
  call void @report_exception({ ptr } %cc)
  call void @exit()
  unreachable

exit:                                             ; preds = %0
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare ptr @llvm.stacksave.p0() #7

define void @arg_passer(ptr %current_coroutine) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %func_ptr = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %current_coroutine, i32 0, i32 0
  %func = load ptr, ptr %func_ptr, align 8
  call void %func()
  ret void
}

define i1 @returns_one() {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %retval = load i1, ptr @always_one, align 1
  ret i1 %retval
}

declare void @exit()

define i32 @get_offset(ptr %vptr, ptr %id_ptr) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %id = load i64, ptr %id_ptr, align 4
  %id_of_casted = load i64, ptr %vptr, align 4
  %hash_coef_ptr = getelementptr i64, ptr %vptr, i32 1
  %tbl_size_ptr = getelementptr i64, ptr %vptr, i32 2
  %offset_tbl_ptr = getelementptr ptr, ptr %vptr, i32 5
  %hash_coef = load i64, ptr %hash_coef_ptr, align 4
  %tbl_size = load i64, ptr %tbl_size_ptr, align 4
  %offset_tbl = load ptr, ptr %offset_tbl_ptr, align 8
  %index = call i64 @hash_to_index(i64 %tbl_size, i64 %hash_coef, i64 %id)
  %offset_ptr = getelementptr i32, ptr %offset_tbl, i64 %index
  %offset = load i32, ptr %offset_ptr, align 4
  ret i32 %offset
}

define i64 @hash_to_index(i64 %tbl_size, i64 %hash_coef, i64 %cand_id) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %product = mul i64 %cand_id, %hash_coef
  %shifted = lshr i64 %product, 32
  %xored = xor i64 %product, %shifted
  %hash = and i64 %xored, %tbl_size
  %bug = icmp sgt i64 %hash, %tbl_size
  ret i64 %hash
}

define void @assume_offset(ptr %fat_ptr, ptr %id_ptr) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %vptr = load ptr, ptr %fat_ptr, align 8
  %id_of_casted = load i64, ptr %vptr, align 4
  %offset = call i32 @get_offset(ptr %vptr, ptr %id_ptr)
  %destination = getelementptr { ptr, ptr, ptr, i32 }, ptr %fat_ptr, i32 0, i32 3
  %dest_value = load i32, ptr %destination, align 4
  %slot = alloca i32, align 4
  store i32 %dest_value, ptr %slot, align 4
  %slotval = load i32, ptr %slot, align 4
  %eq = icmp eq i32 %slotval, %offset
  call void @llvm.assume(i1 %eq) #14
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write)
declare void @llvm.assume(i1 noundef) #8

define void @set_offset(ptr %fat_ptr, ptr %id_ptr) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %vptr = load ptr, ptr %fat_ptr, align 8
  %id_of_casted = load i64, ptr %vptr, align 4
  %offset = call i32 @get_offset(ptr %vptr, ptr %id_ptr)
  %destination = getelementptr { ptr, ptr, ptr, i32 }, ptr %fat_ptr, i32 0, i32 3
  store i32 %offset, ptr %destination, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
define i1 @subtype_test(i64 %tbl_size, i64 %hash_coef, i64 %cand_id, i64 %candidate, ptr %supertype_tbl) #9 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %hash = call i64 @hash_to_index(i64 %tbl_size, i64 %hash_coef, i64 %cand_id)
  %gep = getelementptr i64, ptr %supertype_tbl, i64 %hash
  %stored_val = load i64, ptr %gep, align 4
  %eq = icmp eq i64 %stored_val, %candidate
  ret i1 %eq
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
define i1 @subtype_test_wrapper(ptr %f, i64 %tbl_size, i64 %hash_coef, i64 %cand_id, i64 %candidate, ptr %supertype_tbl) #9 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %result = call i1 %f(i64 %tbl_size, i64 %hash_coef, i64 %cand_id, i64 %candidate, ptr %supertype_tbl) #15
  ret i1 %result
}

define void @arg_buffer_filler(ptr %coroutine) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  ret void
}

define ptr @get_current_coroutine() {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %current_coroutine = load ptr, ptr @current_coroutine, align 8
  ret ptr %current_coroutine
}

; Function Attrs: noinline nounwind memory(readwrite)
define preserve_nonecc void @context_switch(ptr nocapture writeonly %from_buf, ptr %to_buf) #10 {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %from_buf_first_word = getelementptr [3 x ptr], ptr %from_buf, i32 0, i32 0
  %from_buf_second_word = getelementptr [3 x ptr], ptr %from_buf, i32 0, i32 1
  %from_buf_third_word = getelementptr [3 x ptr], ptr %from_buf, i32 0, i32 2
  store ptr blockaddress(@context_switch, %return_from_switch), ptr %from_buf_second_word, align 8
  %sp = call ptr @llvm.stacksave.p0() #13
  store ptr %sp, ptr %from_buf_first_word, align 8
  store ptr %sp, ptr %from_buf_third_word, align 8
  %is_first_time = call i1 @returns_one()
  br i1 %is_first_time, label %do_switch, label %return_from_switch

do_switch:                                        ; preds = %0
  call void @llvm.eh.sjlj.longjmp(ptr %to_buf) #11
  unreachable

return_from_switch:                               ; preds = %0
  ret void
}

; Function Attrs: noreturn nounwind
declare void @llvm.eh.sjlj.longjmp(ptr) #11

define void @coroutine_yield(ptr %current_coroutine) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %into_callee_buf = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %current_coroutine, i32 0, i32 1
  call preserve_nonecc void @context_switch(ptr nocapture writeonly %into_callee_buf, ptr @into_caller_buf) #16
  ret void
}

define void @coroutine_call(ptr %coroutine) {
  %"reg2mem alloca point" = bitcast i32 0 to i32
  %old_into_caller = load [3 x ptr], ptr @into_caller_buf, align 8
  %old_coroutine = load ptr, ptr @current_coroutine, align 8
  store ptr %coroutine, ptr @current_coroutine, align 8
  %into_callee_buf = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %coroutine, i32 0, i32 1
  call preserve_nonecc void @context_switch(ptr nocapture writeonly @into_caller_buf, ptr %into_callee_buf) #16
  store ptr %old_coroutine, ptr @current_coroutine, align 8
  store [3 x ptr] %old_into_caller, ptr @into_caller_buf, align 8
  ret void
}

attributes #0 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nocallback nofree nosync nounwind willreturn memory(argmem: read) }
attributes #3 = { mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) "alloc-family"="malloc" }
attributes #4 = { mustprogress nofree noinline nounwind willreturn allockind("alloc,uninitialized") allocsize(0) "alloc-family"="malloc" }
attributes #5 = { mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #6 = { mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(1) "alloc-family"="malloc" }
attributes #7 = { nocallback nofree nosync nounwind willreturn }
attributes #8 = { nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write) }
attributes #9 = { mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read) }
attributes #10 = { noinline nounwind memory(readwrite) }
attributes #11 = { noreturn nounwind }
attributes #12 = { mustprogress nofree nosync nounwind willreturn memory(argmem: read) }
attributes #13 = { mustprogress nofree nosync nounwind willreturn }
attributes #14 = { mustprogress nofree nosync nounwind willreturn memory(inaccessiblemem: write) }
attributes #15 = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read) }
attributes #16 = { nounwind memory(readwrite) }

!llvm.module.flags = !{!0}

!0 = !{i32 2, !"Debug Info Version", i32 3}
