class Object {}

class Iterator {
}

class Iterable {
    abstract def iterator() -> Iterator {}
}

class Representable {
    def repr() -> String { return "Object"; }
}

class String extends Iterable, Representable {
    @bytes : Buffer[i8]
    @length : i32
    @capacity: i32

    def init() {
        @bytes = Buffer[i8].new(1);
        @capacity = 1;
        @length = 0;
    }

    def init(@bytes : Buffer[i8], @length : i32, @capacity : i32) {}
    def length() -> i32 { return @length; }
    def capacity() -> i32 { return @capacity; }
    def bytes() -> Buffer[i8] { return @bytes; }

    def append(x : i8) -> String {
        if @length < @capacity {
            @bytes.[@length] = x;
            @length = @length + 1;
            return self;
        }
        @capacity = @capacity * 2;
        old_buffer = @bytes;
        @bytes = Buffer[i8].new(@capacity);
        i = 0;
        while i < @length {
            @bytes.[i] = old_buffer.[i];
            i = i + 1;
        }
        @bytes.[@length] = x;
        @length = @length + 1;
        return self;
    }
    def extend(str : String) -> String {
        str_buf = str.bytes();
        str_len = str.length();
        if @length + str_len < @capacity {
            a = @length;
            b = 0;
            while a < @length + str_len {
                @bytes.[a] = str_buf.[b];
                a = a + 1;
                b = b + 1;
            }
            @length = @length + str_len;
            return self;
        }
        @capacity = @length + str_len;
        old_buffer = @bytes;
        @bytes = Buffer[i8].new(@capacity);
        a = 0;
        b = 0;
        while a < @length + str_len {
            if a < @length {
                @bytes.[a] = old_buffer.[a];
                a = a + 1;
                continue;
            }
            @bytes.[a] = str_buf.[b];
            a = a + 1;
            b = b + 1;
        }
        @length = @length + str_len;
        return self;
    }
    def [](x : i32) -> i8 {
        if x > (@length - 1) { yield(); }
        if x >= 0 { return @bytes.[x]; }
        if (@length + x) < 0 { yield(); }
        return @bytes.[@length + x];
    }
    def ==(other : String) -> Bool {
        if @length != other.length() { return false; }
        i = 0;
        while i < @length {
            byte_unequal = @bytes.[i] != other.bytes().[i];
            if byte_unequal { return false; }
            i = i + 1;
        }
        return true;
    }
    def pop() -> i8 | Nil {
        if @length == 0 { return nil; }
        @length = @length - 1;
        return @bytes.[@length];
    }
    def copy() -> String {
        new_buf = Buffer[i8].new(@length);
        i = 0;
        while i < @length {
            new_buf.[i] = @bytes.[i];
            i = i + 1;
        }
        new_str = String.new(new_buf, @length, @length);
        return new_str;
    }
    def c_string() -> Buffer[i8] {
        buf = Buffer[i8].new(@length + 1);
        i = 0;
        while i < @length {
            buf.[i] = @bytes.[i];
            i = i + 1;
        }
        null : i8 = 0;
        buf.[@length] = null;
        return buf;
    }
    def iterator() -> StringIterator {
        return StringIterator.new(self);
    }
    def repr() -> String {
        return self;
    }
}

class Character {
    @byte : i8

    def byte() -> i8 { return @byte; }

    def init(@byte : i8) {}

}

class StringIterator extends Iterator {
    @str : String
    @index : i32
    def init(@str : String) { @index = 0; }
    def next() -> Character | Nil {
        if @index < @str.length() {
            @index = @index + 1;
            return Character.new(@str.bytes().[@index - 1]);
        }
        return nil;
    }
}

class Exception {
	@line_number : i32
	@file_name : String
	@message : String

	def init(@message : String) {
        @line_number = 0;
        @file_name = "";
    }
	def init() {
        @line_number = 0;
		@message = "<None>";
        @file_name = "";
	}

    def set_info(@line_number : i32, @file_name : String) {}

	def report() {
		print("---------".c_string());
		print("Exception thrown from file".c_string());
		print(@file_name.c_string());
		print("At line".c_string());
		print(@line_number);
		print("With message".c_string());
		self.print_message();
		print("---------".c_string());
	}
    def print_message() {
        print(@message.c_string());
    }
}

def report_exception(current_coroutine : Coroutine[() -> Exception]) {
	exception = current_coroutine.result();
	if exception is Exception { exception.report(); }
}

class IO {
    def Self.print(x : i8) {
        print(x);
    }
    def Self.print(x : i32) {
        print(x);
    }
    def Self.print(x : i64) {
        print(x);
    }
    def Self.print(x : f64) {
        print(x);
    }
    def Self.print(x : Bool) {
        if x { print("true".c_string()); } else { print("false".c_string()); }
    }
    def Self.print(x : Nil) {
        print("nil".c_string());
    }
    def Self.print(x : String) {
        print(x.c_string());
    }
    def Self.print(x : Character){
        buf = Buffer[i8].new(2);
        null : i8 = 0;
        buf.[0] = x.byte();
        buf.[1] = null;
        print(buf);
    }
    def Self.print(x : Representable){
        print(x.repr().c_string());
    }
}

class Blocking {
    def init() {}
}

class Channel {
    @value : i32 | Nil

    def init() {
        @value = nil;
    }
    def get() -> i32 yields Blocking {
        while true {
            value = @value;
            if value is i32 {
                @value = nil;
                return value;
            }
            yield(Blocking.new());
        }
    }
    def put(new_value : i32) yields Blocking {
        old_value = @value;
        while old_value is i32 {
            yield(Blocking.new());
            old_value = @value;
        }
        @value = new_value;
    }
}

class IntIterator extends Iterator {
    abstract def next() -> i32 | Nil {}
}

class IntIterable extends Iterable {

    abstract def iterator() -> IntIterator {
    }
    def each(f : (i32)) {
        for x in self { f.call(x); }
    }
    def reduce(initial_val : i32, f : (i32, i32) -> i32) -> i32 {
        for x in self { initial_val = f.call(initial_val, x); }
        return initial_val;
    }
    def all(f : (i32) -> Bool) -> Bool {
        for x in self {
            if f.call(x) { continue; }
            return false;
        }
        return true;
    }
    def any(f : (i32) -> Bool) -> Bool {
        for x in self { if f.call(x) { return true; } }
        return false;
    }
    def map(f : (i32) -> i32) -> IntIterable {
        return MapIterable.new(self, f);
    }
    def filter(f : (i32) -> Bool) -> IntIterable {
        return FilterIterable.new(self, f);
    }
    def chain(other : IntIterable) -> IntIterable {
        return ChainIterable.new(self, other);
    }
    def interleave(other : IntIterable) -> IntIterable {
        return InterleaveIterable.new(self, other);
    }
    def zip(other : IntIterable) -> ZipIterable {
        return ZipIterable.new(self, other);
    }
    def product(other : IntIterable) -> ProductIterable {
        return ProductIterable.new(self, other);
    }
}

class MapIterable extends IntIterable {
    @iterable : IntIterable
    @f : (i32) -> i32

    def init(@iterable : IntIterable, @f : (i32) -> i32) {}

    def iterator() -> IntIterator {
        return MapIterator.new(@iterable.iterator(), @f);
    }
}

class MapIterator extends IntIterator {
    @iterator : IntIterator
    @f : (i32) -> i32

    def init(@iterator : IntIterator, @f : (i32) -> i32) {}

    def next() -> i32 | Nil {
        next = @iterator.next();
        if next is i32 { return @f.call(next); }
        return nil;
    }
}

class FilterIterable extends IntIterable {
    @iterable : IntIterable
    @f : (i32) -> Bool

    def init(@iterable : IntIterable, @f : (i32) -> Bool) {}

    def iterator() -> IntIterator {
        return FilterIterator.new(@iterable.iterator(), @f);
    }
}

class FilterIterator extends IntIterator {
    @iterator : IntIterator
    @f : (i32) -> Bool
    
    def init(@iterator : IntIterator, @f : (i32) -> Bool) {}

    def next() -> i32 | Nil {
        next = @iterator.next();
        while next is i32 {
            if @f.call(next) { return next; }
            next = @iterator.next();
        }
        return nil;
    }
}

class ChainIterable extends IntIterable {
    @first : IntIterable
    @second : IntIterable

    def init(@first : IntIterable, @second : IntIterable) {}

    def iterator() -> Iterator {
        return ChainIterator.new(@first.iterator(), @second.iterator());
    }
}

class ChainIterator extends IntIterator {
    @first : IntIterator
    @second : IntIterator
    @on_first : Bool

    def init(@first : IntIterator, @second : IntIterator) {
        @on_first = true;
    }
    def next() -> i32 | Nil {
        if @on_first {
            next = @first.next();
            if next is i32 { return next; }
            @on_first = false;
        }
        return @second.next();
    }
}

class InterleaveIterable extends IntIterable {
    @first : IntIterable
    @second : IntIterable

    def init(@first : IntIterable, @second : IntIterable) {}

    def iterator() -> IntIterator {
        return InterleaveIterator.new(@first.iterator(), @second.iterator());
    }
}

class InterleaveIterator extends IntIterator {
    @first : IntIterator
    @second : IntIterator
    @on_first : Bool

    def init(@first : IntIterator, @second : IntIterator) {
        @on_first = true;
    }
    def next() -> i32 | Nil {
        if @on_first {
            @on_first = false;
            return @first.next();
        }
        @on_first = true;
        return @second.next();
    }
}

class IntTupleIterable extends Iterable {
    abstract def iterator() -> IntTupleIterator {}
}

class IntTupleIterator extends Iterator {
    abstract def next() -> Tuple[i32, i32] | Nil {}
}

class ZipIterable extends IntTupleIterable {
    @first : IntIterable
    @second : IntIterable

    def init(@first : IntIterable, @second : IntIterable) {}

    def iterator() -> ZipIterator {
        return ZipIterator.new(@first.iterator(), @second.iterator());
    }
}

class ZipIterator extends IntTupleIterator {
    @first : IntIterator
    @second : IntIterator

    def init(@first : IntIterator, @second : IntIterator) {}

    def next() -> Tuple[i32, i32] | Nil {
        first_elem = @first.next();
        second_elem = @second.next();
        if first_elem is i32 {
            if second_elem is i32 { return (first_elem, second_elem); }
        }
        return nil;
    }
}

class ProductIterable extends IntTupleIterable {
    @first : IntIterable
    @second : IntIterable

    def init(@first : IntIterable, @second : IntIterable) {}

    def iterator() -> ProductIterator {
        return ProductIterator.new(@first, @second);
    }
}

class ProductIterator extends Iterator {
    @first_iterator : IntIterator
    @second_iterator : IntIterator
    @second_iterable : IntIterable
    @current_first : i32 | Nil

    def init(first_iterable : IntIterable, @second_iterable : IntIterable) {
        @first_iterator = first_iterable.iterator();
        @second_iterator = @second_iterable.iterator();
        @current_first = @first_iterator.next();
    }

    def next() -> Tuple[i32, i32] | Nil {
        current_first = @current_first;
        while current_first is i32 {
            second_elem = @second_iterator.next();
            if second_elem is i32 { return (current_first, second_elem); }
            @current_first = @first_iterator.next();
            @second_iterator = @second_iterable.iterator();
            current_first = @current_first;
        }
        return nil;
    }
}

class Range extends IntIterable {
    @start : i32
    @end : i32
    @step : i32

    def init(@end : i32){
        @start = 0;
        @step = 1;
    }

    def init(@start : i32, @end : i32) {
        @step = 1;
    }

    def step(@step : i32) -> Range {
        return self;
    }

    def iterator() -> RangeIterator {
        return RangeIterator.new(@start, @end, @step);
    }
}

class RangeIterator extends IntIterator {
    @counter : i32
    @end : i32
    @step : i32

    def init(@counter : i32, @end : i32, @step : i32) {}

    def next() -> i32 | Nil {
        if @counter > @end { return nil; }
        @counter = @counter + @step;
        return @counter - @step;
    }
}

class Pair[T, U]
    where T <: Object, U <: Object {

    @first : T
    @second : U

    def init(@first : T, @second : U) {
    }
    def first() -> T {
        return @first;
    }
    def second() -> U {
        return @second;
    }
}

class Iterator2[T] {
    abstract def next() -> T | Nil {}
}

class Iterable2[T] {
    abstract def iterator() -> Iterator2[T] {}
    def each(f : (T)) {
        for x in self { f.call(x); }
    }
    def reduce(accumulator : T, f : (T, T) -> T) -> T {
        for x in self { accumulator = f.call(accumulator, x); }
        return accumulator;
    }
    def all(f : (T) -> Bool) -> Bool {
        for x in self {
            if f.call(x) { continue; }
            return false;
        }
        return true;
    }
    def any(f : (T) -> Bool) -> Bool {
        for x in self { if f.call(x) { return true; } }
        return false;
    }
    def map[U](f : (T) -> U) -> Iterable2[U] {
        return MapIterable2[T, U].new(self, f);
    }
    def filter(f : (T) -> Bool) -> Iterable2[T] {
        return FilterIterable2[T].new(self, f);
    }
    def chain(other : Iterable2[T]) -> Iterable2[T] {
        return ChainIterable2[T].new(self, other);
    }
    def interleave(other : Iterable2[T]) -> Iterable2[T] {
        return InterleaveIterable2[T].new(self, other);
    }
    def zip[U](other : Iterable2[U]) -> ZipIterable2[T, U] {
        return ZipIterable2[T, U].new(self, other);
    }
    def product[U](other : Iterable2[U]) -> ProductIterable2[T, U] {
        return ProductIterable2[T, U].new(self, other);
    }
}

class Array[T] extends Iterable2[T] {
    @buffer : Buffer[T]
    @length : i32
    @capacity : i32

    def Self.from_iterable(iterable : Iterable2[T]) -> Array[T] {
        result = Array[T].new();
        for elem in iterable { result.append(elem); }
        return result;
    }
    def init() {
        @buffer = Buffer[T].new(1);
        @length = 0;
        @capacity = 1;
    }
    def init(@capacity : i32) {
        @buffer = Buffer[T].new(@capacity);
        @length = 0;
    }
    def length() -> i32 {
        return @length;
    }
    def capacity() -> i32 {
        return @capacity;
    }
    def append(x : T) -> Array[T] {
        if @length >= @capacity { self.grow(); }
        @buffer.[@length] = x;
        @length = @length + 1;
        return self;
    }
    def grow() {
        @capacity = @capacity * 2;
        old_buffer = @buffer;
        @buffer = Buffer[T].new(@capacity);
        i = 0;
        while i < @length {
            @buffer.[i] = old_buffer.[i];
            i = i + 1;
        }
    }
    def [](x : i32) -> T yields OutOfBounds | Nil {
        past_end = x > (@length - 1);
        before_start = (@length + x) < 0;
        if past_end or before_start { self.throw_oob(x); }
        if x < 0 { x = @length + x; }
        return @buffer.[x];
    }
    def throw_oob(x : i32) yields OutOfBounds {
        yield(OutOfBounds.new(@length, x));
    }
    def unsafe_index(x : i32) -> T {
        return @buffer.[x];
    }
    def iterator() -> Iterator2[T] {
        return ArrayIterator[T].new(self);
    }
}

class ArrayIterator[T] extends Iterator2[T] {
    @array : Array[T]
    @index : i32

    def init(@array : Array[T]) { @index = 0; }
    def next() -> T | Nil {
        if @index >= @array.length() { return nil; }
        @index = @index + 1;
        return @array.unsafe_index(@index - 1);
    }
}

class MapIterable2[T, U] extends Iterable2[U] {
    @iterable : Iterable2[T]
    @f : (T) -> U

    def init(@iterable : Iterable2[T], @f : (T) -> U) {}

    def iterator() -> Iterator2[U] {
        return MapIterator2[T, U].new(@iterable.iterator(), @f);
    }
}

class MapIterator2[T, U] extends Iterator2[U] {
    @iterator : Iterator2[T]
    @f : (T) -> U

    def init(@iterator : Iterator2[T], @f : (T) -> U) {}

    def next() -> U | Nil {
        next = @iterator.next();
        if next is T { return @f.call(next); }
        return nil;
    }
}

class FilterIterable2[T] extends Iterable2[T] {
    @iterable : Iterable2[T]
    @f : (T) -> Bool

    def init(@iterable : Iterable2[T], @f : (T) -> Bool) {}

    def iterator() -> Iterator2[T] {
        return FilterIterator2[T].new(@iterable.iterator(), @f);
    }
}

class FilterIterator2[T] extends Iterator2[T] {
    @iterator : Iterator2[T]
    @f : (T) -> Bool
    
    def init(@iterator : Iterator2[T], @f : (T) -> Bool) {}

    def next() -> T | Nil {
        next = @iterator.next();
        while next is T {
            if @f.call(next) { return next; }
            next = @iterator.next();
        }
        return nil;
    }
}

class ChainIterable2[T] extends Iterable2[T] {
    @first : Iterable2[T]
    @second : Iterable2[T]

    def init(@first : Iterable2[T], @second : Iterable2[T]) {}

    def iterator() -> Iterator2[T] {
        return ChainIterator2[T].new(@first.iterator(), @second.iterator());
    }
}

class ChainIterator2[T] extends Iterator2[T] {
    @first : Iterator2[T]
    @second : Iterator2[T]
    @on_first : Bool

    def init(@first : Iterator2[T], @second : Iterator2[T]) {
        @on_first = true;
    }
    def next() -> T | Nil {
        if @on_first {
            next = @first.next();
            if next is T { return next; }
            @on_first = false;
        }
        return @second.next();
    }
}

class InterleaveIterable2[T] extends Iterable2[T] {
    @first : Iterable2[T]
    @second : Iterable2[T]

    def init(@first : Iterable2[T], @second : Iterable2[T]) {}

    def iterator() -> Iterator2[T] {
        return InterleaveIterator2[T].new(@first.iterator(), @second.iterator());
    }
}

class InterleaveIterator2[T] extends Iterator2[T] {
    @first : Iterator2[T]
    @second : Iterator2[T]
    @on_first : Bool

    def init(@first : Iterator2[T], @second : Iterator2[T]) {
        @on_first = true;
    }
    def next() -> T | Nil {
        if @on_first {
            @on_first = false;
            return @first.next();
        }
        @on_first = true;
        return @second.next();
    }
}

class ZipIterable2[T, U] extends Iterable2[Pair[T, U]] {
    @first : Iterable2[T]
    @second : Iterable2[U]

    def init(@first : Iterable2[T], @second : Iterable2[U]) {}

    def iterator() -> Iterator2[Pair[T, U]] {
        return ZipIterator2[T, U].new(@first.iterator(), @second.iterator());
    }
}

class ZipIterator2[T, U] extends Iterator2[Pair[T, U]] {
    @first : Iterator2[T]
    @second : Iterator2[U]

    def init(@first : Iterator2[T], @second : Iterator2[U]) {}

    def next() -> Pair[T, U] | Nil {
        first_elem = @first.next();
        second_elem = @second.next();
        if first_elem is T {
            if second_elem is U { return Pair[T, U].new(first_elem, second_elem); }
        }
        return nil;
    }
}

class ProductIterable2[T, U] extends Iterable2[Pair[T, U]] {
    @first : Iterable2[T]
    @second : Iterable2[U]

    def init(@first : Iterable2[T], @second : Iterable2[U]) {}

    def iterator() -> ProductIterator2[T, U] {
        return ProductIterator2[T, U].new(@first, @second);
    }
}

class ProductIterator2[T, U] extends Iterator2[Pair[T, U]] {
    @first_iterator : Iterator2[T]
    @second_iterator : Iterator2[U]
    @second_iterable : Iterable2[U]
    @current_first : T | Nil

    def init(first_iterable : Iterable2[T], @second_iterable : Iterable2[U]) {
        @first_iterator = first_iterable.iterator();
        @second_iterator = @second_iterable.iterator();
        @current_first = @first_iterator.next();
    }

    def next() -> Pair[T, U] | Nil {
        current_first = @current_first;
        while current_first is T {
            second_elem = @second_iterator.next();
            if second_elem is U { return Pair[T, U].new(current_first, second_elem); }
            @current_first = @first_iterator.next();
            @second_iterator = @second_iterable.iterator();
            current_first = @current_first;
        }
        return nil;
    }
}

class Math {
    def Self.sqrt(x : f64) -> f64 {
        return Intrinsic.sqrt_f64(x);
    }
    def Self.abs(x : i32) -> i32 {
        if x >= 0 { return x; }
        return -1 * x;
    }
    def Self.abs(x : f64) -> f64 {
        if x >= 0.0 { return x; }
        return -1.0 * x;
    }
    def Self.max(a : i32, b : i32) -> i32 {
        if a > b { return a; }
        return b;
    }
    def Self.max(a : f64, b : f64) -> f64 {
        if a > b { return a; }
        return b;
    }
    def Self.min(a : i32, b : i32) -> i32 {
        if a < b { return a; }
        return b;
    }
    def Self.min(a : f64, b : f64) -> f64 {
        if a < b { return a; }
        return b;
    }
    def Self.round(x : f64) -> f64 {
        return Intrinsic.round_f64(x);
    }
    def Self.floor(x : f64) -> f64 {
        return Intrinsic.floor_f64(x);
    }
    def Self.ceiling(x : f64) -> f64 {
        return Intrinsic.ceil_f64(x);
    }
}

IO.print("test completed!");