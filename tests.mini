
class Pair[T, U] {

    @first : T
    @second : U

    def init(@first : T, @second : U) {
    }
    #[ret == @first]
    def first() -> T {
        return @first;
    }
    #[ret == @second]
    def second() -> U {
        return @second;
    }
}

class Container {
    @elems_reg : Region
}

class Iterator[T] extends Container {

    @referent_reg : Region

    regions { @elems_reg == @referent_reg.elems_reg }

    #[ret == @elems_reg]
    abstract def next() -> T | Nil {}
}

class Iterable[T] extends Container {

    #[ret.referent_reg == self]
    abstract def iterator() -> Iterator[T] {
    }
    def each(f : (T)) {
        for x in self { f.call(x); }
    }
    #[ret == accumulator]
    def reduce(accumulator : T, f : (T, T) -> T) -> T {
        for x in self { accumulator = f.call(accumulator, x); }
        return accumulator;
    }
    def all(f : (T) -> Bool) -> Bool {
        for x in self { if not f.call(x) { return false; } }
        return true;
    }
    def any(f : (T) -> Bool) -> Bool {
        for x in self { if f.call(x) { return true; } }
        return false;
    }
    #[ret.iterable == self, ret.f == f]
    def map[U](f : (T) -> U) -> MapIterable[T, U] {
        return MapIterable[T, U].new(self, f);
    }
    #[ret.iterable == self, ret.f == f]
    def filter(f : (T) -> Bool) -> FilterIterable[T] {
        return FilterIterable[T].new(self, f);
    }
    #[ret.first == self, ret.second == other]
    def chain(other : Iterable[T]) -> ChainIterable[T] {
        return ChainIterable[T].new(self, other);
    }
    #[ret.first == self, ret.second == other]
    def interleave(other : Iterable[T]) -> InterleaveIterable[T] {
        return InterleaveIterable[T].new(self, other);
    }
    #[ret.first == self, ret.second == other]
    def zip[U](other : Iterable[U]) -> ZipIterable[T, U] {
        return ZipIterable[T, U].new(self, other);
    }
    #[ret.first == self, ret.second == other]
    def product[U](other : Iterable[U]) -> ProductIterable[T, U] {
        return ProductIterable[T, U].new(self, other);
    }
}

class MapIterable[T, U] extends Iterable[U] {
    @iterable : Iterable[T]
    @f : (T) -> U

    regions { @elems_reg == @iterable.elems_reg }

    def init(@iterable : Iterable[T], @f : (T) -> U) {}

    def iterator() -> MapIterator[T, U] {
        return MapIterator[T, U].new(@iterable.iterator(), @f);
    }
}

class MapIterator[T, U] extends Iterator[U] {
    @iterator : Iterator[T]
    @f : (T) -> U

    regions { @referent_reg == @iterator }

    def init(@iterator : Iterator[T], @f : (T) -> U) {}

    def next() -> U | Nil {
        next = @iterator.next();
        if next is T { return @f.call(next); }
        return nil;
    }
}

class FilterIterable[T] extends Iterable[T] {
    @iterable : Iterable[T]
    @f : (T) -> Bool

    regions { @elems_reg == @iterable.elems_reg }

    def init(@iterable : Iterable[T], @f : (T) -> Bool) {}

    def iterator() -> FilterIterator[T] {
        return FilterIterator[T].new(@iterable.iterator(), @f);
    }
}

class FilterIterator[T] extends Iterator[T] {
    @iterator : Iterator[T]
    @f : (T) -> Bool

    regions { @referent_reg == @iterator }
    
    def init(@iterator : Iterator[T], @f : (T) -> Bool) {}

    def next() -> T | Nil {
        next = @iterator.next();
        while next is T {
            if @f.call(next) { return next; }
            next = @iterator.next();
        }
        return nil;
    }
}

class ChainIterable[T] extends Iterable[T] {
    @first : Iterable[T]
    @second : Iterable[T]

    regions {
        @first == @second,
        @elems_reg == @first.elems_reg
    }

    def init(@first : Iterable[T], @second : Iterable[T]) {}

    def iterator() -> ChainIterator[T] {
        return ChainIterator[T].new(@first.iterator(), @second.iterator());
    }
}

class ChainIterator[T] extends Iterator[T] {
    @first : Iterator[T]
    @second : Iterator[T]
    @on_first : Bool

    regions {
        @referent_reg == @first,
        @referent_reg == @second
    }

    def init(@first : Iterator[T], @second : Iterator[T]) {
        @on_first = true;
    }
    def next() -> T | Nil {
        if not @on_first { return @second.next(); }
        next = @first.next();
        if next is T { return next; }
        @on_first = false;
    }
}

class InterleaveIterable[T] extends Iterable[T] {
    @first : Iterable[T]
    @second : Iterable[T]

    regions {
        @first == @second,
        @elems_reg == @first.elems_reg
    }

    def init(@first : Iterable[T], @second : Iterable[T]) {}

    def iterator() -> InterleaveIterator[T] {
        return InterleaveIterator[T].new(@first.iterator(), @second.iterator());
    }
}

class InterleaveIterator[T] extends Iterator[T] {
    @first : Iterator[T]
    @second : Iterator[T]
    @on_first : Bool

    regions {
        @referent_reg == @first,
        @referent_reg == @second
    }

    def init(@first : Iterator[T], @second : Iterator[T]) {
        @on_first = true;
    }
    def next() -> T | Nil {
        if @on_first {
            @on_first = false;
            return @first.next();
        }
        @on_first = true;
        return @second.next();
    }
}

class ZipIterable[T, U] extends Iterable[Pair[T, U]] {
    @first : Iterable[T]
    @second : Iterable[U]

    regions {
        @elems_reg < @first.elems_reg,
        @elems_reg < @second.elems_reg
    }

    def init(@first : Iterable[T], @second : Iterable[U]) {}

    def iterator() -> ZipIterator[T, U] {
        return ZipIterator[T, U].new(@first.iterator(), @second.iterator());
    }
}

class ZipIterator[T, U] extends Iterator[Pair[T, U]] {
    @first : Iterator[T]
    @second : Iterator[U]

    regions {
        @elems_reg < @first.elems_reg,
        @elems_reg < @second.elems_reg
    }

    def init(@first : Iterator[T], @second : Iterator[U]) {
    }

    def next() -> Pair[T, U] | Nil {
        first_elem = @first.next();
        second_elem = @second.next();
        if first_elem is T {
            if second_elem is U { return Pair[T, U].new(first_elem, second_elem); }
        }
        return nil;
    }
}

class ProductIterable[T, U] extends Iterable[Pair[T, U]] {
    @first : Iterable[T]
    @second : Iterable[U]

    regions {
        @elems_reg < @first.elems_reg,
        @elems_reg < @second.elems_reg
    }

    def init(@first : Iterable[T], @second : Iterable[U]) {
    }
    def iterator() -> ProductIterator[T, U] {
        return ProductIterator[T, U].new(@first.iterator(), @second);
    }
}

class ProductIterator[T, U] extends Iterator[Pair[T, U]] {
    @first_iterator : Iterator[T]
    @second_iterator : Iterator[U]
    @second_iterable : Iterable[U]
    @current_first : T | Nil

    regions {
        @current_first == @first_iterator.elems_reg,
        @second_iterator.referent_reg == @second_iterable,
        @elems_reg < @first_iterator.elems_reg,
        @elems_reg < @second_iterator.elems_reg
    }

    def init(@first_iterator : Iterator[T], @second_iterable : Iterable[U]) {
        @second_iterator = @second_iterable.iterator();
        @current_first = @first_iterator.next();
    }

    def next() -> Pair[T, U] | Nil {
        current_first = @current_first;
        while current_first is T {
            second_elem = @second_iterator.next();
            if second_elem is U { return Pair[T, U].new(current_first, second_elem); }
            @current_first = @first_iterator.next();
            @second_iterator = @second_iterable.iterator();
            current_first = @current_first;
        }
        return nil;
    }
}

class Representable {
    def repr() -> String { return "Object"; }
}

class String extends Iterable[Character], Representable {
    @bytes : Buffer[i8]
    @length : i32
    @capacity: i32

    def init() {
        @bytes = Buffer[i8].new(1);
        @capacity = 1;
        @length = 0;
    }

    def init(@bytes : Buffer[i8], @length : i32, @capacity : i32) {}

    def length() -> i32 { return @length; }
    def capacity() -> i32 { return @capacity; }
    def bytes() -> Buffer[i8] { return @bytes; }

    def append(x : i8) -> String {
        if @length < @capacity {
            @bytes.[@length] = x;
            @length = @length + 1;
            return self;
        }
        @capacity = @capacity * 2;
        old_buffer = @bytes;
        @bytes = Buffer[i8].new(@capacity);
        i = 0;
        while i < @length {
            @bytes.[i] = old_buffer.[i];
            i = i + 1;
        }
        @bytes.[@length] = x;
        @length = @length + 1;
        return self;
    }
    def extend(str : String) -> String {
        str_buf = str.bytes();
        str_len = str.length();
        if @length + str_len < @capacity {
            a = @length;
            b = 0;
            while a < @length + str_len {
                @bytes.[a] = str_buf.[b];
                a = a + 1;
                b = b + 1;
            }
            @length = @length + str_len;
            return self;
        }
        @capacity = @length + str_len;
        old_buffer = @bytes;
        @bytes = Buffer[i8].new(@capacity);
        a = 0;
        b = 0;
        while a < @length + str_len {
            if a < @length {
                @bytes.[a] = old_buffer.[a];
                a = a + 1;
                continue;
            }
            @bytes.[a] = str_buf.[b];
            a = a + 1;
            b = b + 1;
        }
        @length = @length + str_len;
        return self;
    }
    def [](x : i32) -> i8 {
        if x > (@length - 1) { yield(); }
        if x >= 0 { return @bytes.[x]; }
        if (@length + x) < 0 { yield(); }
        return @bytes.[@length + x];
    }
    def ==(other : String) -> Bool {
        if @length != other.length() { return false; }
        i = 0;
        while i < @length {
            byte_unequal = @bytes.[i] != other.bytes().[i];
            if byte_unequal { return false; }
            i = i + 1;
        }
        return true;
    }
    def pop() -> i8 | Nil {
        if @length == 0 { return nil; }
        @length = @length - 1;
        return @bytes.[@length];
    }
    def copy() -> String {
        new_buf = Buffer[i8].new(@length);
        i = 0;
        while i < @length {
            new_buf.[i] = @bytes.[i];
            i = i + 1;
        }
        new_str = String.new(new_buf, @length, @length);
        return new_str;
    }
    def c_string() -> Buffer[i8] {
        buf = Buffer[i8].new(@length + 1);
        i = 0;
        while i < @length {
            buf.[i] = @bytes.[i];
            i = i + 1;
        }
        null : i8 = 0;
        buf.[@length] = null;
        return buf;
    }
    def iterator() -> StringIterator {
        return StringIterator.new(self);
    }
    def repr() -> String {
        return self;
    }
}

class Character {
    @byte : i8

    def byte() -> i8 { return @byte; }

    def init(@byte : i8) {}

}

class StringIterator extends Iterator[Character] {
    @str : String
    @index : i32
    def init(@str : String) { @index = 0; }
    def next() -> Character | Nil {
        if @index < @str.length() {
            @index = @index + 1;
            return Character.new(@str.bytes().[@index - 1]);
        }
        return nil;
    }
}

class Exception {
    @line_number : i32
    @file_name : String
    @message : String

    def init(@message : String) {
        @line_number = 0;
        @file_name = "";
    }
    def init() {
        @line_number = 0;
        @message = "<None>";
        @file_name = "";
    }

    def set_info(@line_number : i32, @file_name : String) {}

    def report() {
        print("---------".c_string());
        print("Exception thrown from file".c_string());
        print(@file_name.c_string());
        print("At line".c_string());
        print(@line_number);
        print("With message".c_string());
        self.print_message();
        print("---------".c_string());
    }
    def print_message() {
        print(@message.c_string());
    }
}

def report_exception(current_coroutine : Coroutine[() -> Exception]) {
    exception = current_coroutine.result();
    if exception is Exception { exception.report(); }
}

class IO {
    def Self.print(x : i8) {
        print(x);
    }
    def Self.print(x : i32) {
        print(x);
    }
    def Self.print(x : i64) {
        print(x);
    }
    def Self.print(x : f64) {
        print(x);
    }
    def Self.print(x : Bool) {
        if x { print("true".c_string()); } else { print("false".c_string()); }
    }
    def Self.print(x : Nil) {
        print("nil".c_string());
    }
    def Self.print(x : String) {
        print(x.c_string());
    }
    def Self.print(x : Character){
        buf = Buffer[i8].new(2);
        null : i8 = 0;
        buf.[0] = x.byte();
        buf.[1] = null;
        print(buf);
    }
    def Self.print(x : Representable){
        print(x.repr().c_string());
    }
}

class Math {
    def Self.sqrt(x : f64) -> f64 {
        return Intrinsic.sqrt_f64(x);
    }
    def Self.abs(x : i32) -> i32 {
        if x >= 0 { return x; }
        return -1 * x;
    }
    def Self.abs(x : f64) -> f64 {
        if x >= 0.0 { return x; }
        return -1.0 * x;
    }
    def Self.max(a : i32, b : i32) -> i32 {
        if a > b { return a; }
        return b;
    }
    def Self.max(a : f64, b : f64) -> f64 {
        if a > b { return a; }
        return b;
    }
    def Self.min(a : i32, b : i32) -> i32 {
        if a < b { return a; }
        return b;
    }
    def Self.min(a : f64, b : f64) -> f64 {
        if a < b { return a; }
        return b;
    }
    def Self.round(x : f64) -> f64 {
        return Intrinsic.round_f64(x);
    }
    def Self.floor(x : f64) -> f64 {
        return Intrinsic.floor_f64(x);
    }
    def Self.ceiling(x : f64) -> f64 {
        return Intrinsic.ceil_f64(x);
    }
}

class Blocking {
    def init() {}
}

class Channel[T] {
    @value : T | Nil

    def init() {
        @value = nil;
    }
    def get() -> T yields Blocking {
        while true {
            value = @value;
            if value is T {
                @value = nil;
                return value;
            }
            yield(Blocking.new());
        }
    }
    def put(new_value : T) yields Blocking {
        old_value = @value;
        while old_value is T {
            yield(Blocking.new());
            old_value = @value;
        }
        @value = new_value;
    }
}

class Array[T] extends Iterable[T], Representable {
    @buffer : Buffer[T]
    @length : i32
    @capacity : i32

    regions { @elems_reg == @buffer.elems_reg }

    #[ret.elems_reg == iterable.elems_reg]
    def Self.from_iterable(iterable : Iterable[T]) -> Array[T] {
        result = Array[T].new();
        for elem in iterable { result.append(elem); }
        return result;
    }
    def init() {
        @buffer = Buffer[T].new(1);
        @length = 0;
        @capacity = 1;
    }
    def init(@capacity : i32) {
        @buffer = Buffer[T].new(@capacity);
        @length = 0;
    }
    def init(@length : i32, @capacity : i32) {
        @buffer = Buffer[T].new(@capacity);
    }
    def init(@buffer : Buffer[T], @length : i32, @capacity : i32) {
    }
    #[ret == @length]
    def length() -> i32 {
        return @length;
    }
    #[ret == @capacity]
    def capacity() -> i32 {
        return @capacity;
    }
    #[ret == self, x == @elems_reg]
    def append(x : T) -> Array[T] {
        if @length >= @capacity { self.reserve(@capacity * 2); }
        @buffer.[@length] = x;
        @length = @length + 1;
        return self;
    }
    #[ret == self, other.elems_reg == @elems_reg]
    def extend(other : Array[T]) -> Array[T] {
        other_len = other.length();
        old_len = @length;
        new_len = old_len + other_len;
        if new_len >= @capacity { self.reserve(new_len); }
        i = 0;
        while i < other_len {
            self.unchecked_insert(i + old_len, other.unchecked_index(i));
            i = i + 1;
        }
        @length = new_len;
        return self;
    }
    def reserve(new_capacity : i32) {
        if new_capacity <= @capacity { return; }
        @capacity = new_capacity;
        old_buffer = @buffer;
        @buffer = Buffer[T].new(@capacity);
        i = 0;
        while i < @length {
            @buffer.[i] = old_buffer.[i];
            i = i + 1;
        }
    }
    #[ret == @elems_reg]
    def [](x : i32) -> T yields OutOfBounds | Nil {
        past_end = x > (@length - 1);
        before_start = (@length + x) < 0;
        if past_end or before_start { self.throw_oob(x); }
        if x < 0 { x = @length + x; }
        return self.unchecked_index(x);
    }
    #[value == @elems_reg]
    def []=(x : i32, value : T) yields OutOfBounds | Nil {
        past_end = x > (@length - 1);
        before_start = (@length + x) < 0;
        if past_end or before_start { self.throw_oob(x); }
        if x < 0 { x = @length + x; }
        self.unchecked_insert(x, value);
    }
    def throw_oob(x : i32) yields OutOfBounds {
        yield(Exception.new());
    }
    #[ret == @elems_reg]
    def unchecked_index(x : i32) -> T {
        return @buffer.[x];
    }
    #[value == @elems_reg]
    def unchecked_insert(x : i32, value : T) {
        @buffer.[x] = value;
    }
    def iterator() -> ArrayIterator[T] {
        return ArrayIterator[T].new(self);
    }
    def repr() -> String {
        return "Array";
    }
}

class ArrayIterator[T] extends Iterator[T] {
    @array : Array[T]
    @index : i32

    regions { @referent_reg == @array }

    def init(@array : Array[T]) { @index = 0; }
    def next() -> T | Nil {
        if @index >= @array.length() { return nil; }
        @index = @index + 1;
        return @array.unchecked_index(@index - 1);
    }
}

class Range extends Iterable[i32] {
    @start : i32
    @end : i32
    @step : i32

    def init(@end : i32){
        @start = 0;
        @step = 1;
    }

    def init(@start : i32, @end : i32) {
        @step = 1;
    }

    def step(@step : i32) -> Range {
        return self;
    }

    def iterator() -> RangeIterator {
        return RangeIterator.new(@start, @end, @step);
    }
}

class RangeIterator extends Iterator[i32] {
    @counter : i32
    @end : i32
    @step : i32

    def init(@counter : i32, @end : i32, @step : i32) {}

    def next() -> i32 | Nil {
        if @counter > @end { return nil; }
        @counter = @counter + @step;
        return @counter - @step;
    }
}


extern def fopen(name : Buffer[i8], mode : Buffer[i8]) -> Buffer[i32]
extern def fprintf(file : Buffer[i32], text : Buffer[i8]) -> i32
extern def fclose(file : Buffer[i32]) -> i32
extern def fgetc(file : Buffer[i32]) -> i32
extern def ferror(file : Buffer[i32]) -> i32

// don't worry, this compiles down to umax + trunci
// obviously once we implement good casting this will be unecessary
def i32toi8(x : i32) -> i8 {
    i = 0;
    sum : i8 = 0;
    one : i8 = 1;
    while i < x {
        sum = sum + one;
        i = i + 1;
    }
    return sum;
}

class FileSystemError extends Exception {}

class File {
    @name : String
    @mode : String
    @handle : Buffer[i32]
    @open : Bool

    def init(@name : String, @mode : String) {
        @handle = fopen(@name.c_string(), @mode.c_string());
        @open = true;
    }
    def close() yields FileSystemError {
        if not @open { return; }
        int = fclose(@handle);
        @open = false;
        if int == -1 { yield(FileSystemError.new()); }
    }
    def reopen() {
        if @open { return; }
        @handle = fopen(@name.c_string(), @mode.c_string());
        @open = true;
    }
    def get_byte() -> i8 | Nil yields FileSystemError {
        if not @open { return nil; }
        int = fgetc(@handle);
        if int == -1 {
            if ferror(@handle) != 0 { yield(FileSystemError.new()); }
            return nil;
        }
        return i32toi8(int);
    }
    def write(text : String) -> i32 yields FileSystemError {
        if not @open { return -1; }
        int = fprintf(@handle, text.c_string());
        if int < 0 { yield(FileSystemError.new()); }
        return int;
    }
    def mode=(@mode : String) yields FileSystemError {
        if not @open { return; }
        int = fclose(@handle);
        if int == -1 { yield(FileSystemError.new()); }
        @handle = fopen(@name.c_string(), @mode.c_string());
    }
}

class FileProcessor[T] {
    abstract def process(file : File) -> T yields FileSystemError {
    }
}

class FileReader extends FileProcessor[String] {
    def init() {}
    def process(file : File) -> String {
        content = "";
        byte = file.get_byte();
        while byte is i8 {
            content.append(byte);
            byte = file.get_byte();
        }
        return content;
    }
}

class FileWriter extends FileProcessor[i32] {
    @text : String
    def init(@text : String) {}
    def process(file : File) -> i32 {
        return file.write(@text);
    }
}

class FileSystem {
    def Self.process_file[T](file_name : String, mode: String, processor: FileProcessor[T]) -> T yields FileSystemError {
        file = File.new(file_name, mode);
        result = processor.process(file);
        file.close();
        return result;
    }
    def Self.process_file[T](file_name : String, mode: String, processor: (File) -> T) -> T yields FileSystemError {
        file = File.new(file_name, mode);
        result = processor.call(file);
        file.close();
        return result;
    }
    def Self.read_file(file_name : String) -> String yields FileSystemError {
        return FileSystem.process_file(file_name, "r", FileReader.new());
    }
    def Self.write_file(file_name : String, text : String) yields FileSystemError {
        FileSystem.process_file(file_name, "w", FileWriter.new(text));
    }
}

IO.print(1 + 2);  // Expected: 3
IO.print("Hello, World!");  // Expected: Hello, World!
IO.print(true and false);  // Expected: false

extern def clock() -> i64
extern def getchar() -> i32
extern def system(string : Buffer[i8]) -> i32

alias number = i32 | f64;

def number_taker(a : number) {
    print("number");
}

def early_return_in_else() -> i32 {
    if 5 > 3 {
        return 1;
    } else {
        return 2;
    }
}

class Integer {

    @value : i32

    def init(@value : i32) {}

    def +(other : i32) -> Integer {
        return Integer.new(@value + other);
    }
    def -(other : i32) -> Integer {
        return Integer.new(@value - other);
    }
    def *(other : i32) -> Integer {
        return Integer.new(@value * other);
    }
    def /(other : i32) -> Integer {
        return Integer.new(@value / other);
    }
    def print() {
        IO.print(@value);
    }
}

class BigBoy extends Representable {
    def introduce() {
        IO.print("Here I am!");
    }
}

class Integer2 extends Integer, BigBoy {
    def repr() -> String {
        return "Integer2";
    }
    def value() -> i32 {
        return @value;
    }
}

class Animal {
    @age : i32
    @hp : f64
    @skill : i32

    def init(@age : i32, @hp : f64, @skill : i32) {}

    def say_age() {
        self.say(@age);
        self.say(@age);
    }

    def say_skill(){
        skill = @skill;
        if skill is i32 { IO.print(skill); }
    }

    def say(message : i32){ IO.print(message); }

    def do_nothing() -> Animal | f64 {
        return Animal.new(5, 5.0, 5);
    }
}

class Beaver {
    @color : i32
    @name : f64

    def init(@color : i32, @name : f64) {}

    def +(x : i32) {
        @color = @color + x;
    }
    def say_color() {
        IO.print(@color);
    }
}

class ListNode {
    @data : i32
    @next : ListNode | Nil
    def init(@data : i32) {}
    def push(next : ListNode) -> ListNode {
        @next = next;
        return next;
    }
    def next() -> ListNode | Nil {
        return @next;
    }
    def data() -> i32 {
        return @data;
    }
    def iterator() -> ListIterator {
        head = ListNode.new(0);
        head.push(self);
        return ListIterator.new(head);
    }
}

class ListIterator {
    @node : ListNode
    def init(@node : ListNode) {
    }
    def next() -> ListNode | Nil {
        next = @node.next();
        if next is ListNode {
            @node = next;
            return @node;
        }
        return nil;
    }
}

def make_em_speak(animal : Animal){
    animal.say_age();
}

def fibonacci(n : i32) -> i32 {
    if n < 2 { return n; }
    return fibonacci(n - 2) + fibonacci(n - 1);
}

def factorial(n : i32) -> i32 {
    if n < 2 { return 1; }
    return n * factorial(n - 1);
}

class Bard {
    def init() {}
    def take(a : i32, b : i32){
        IO.print(a);
        IO.print(b);
    }
    def take(a : f64, b : f64){
        IO.print(a);
        IO.print(b);
    }
    def take(a : i32, b : f64){
        IO.print(a);
        IO.print(b);
    }
    def take(a : Animal, b : Beaver){
        IO.print("animal!");
        IO.print("beaver!");
    }
}

bard = Bard.new();
bard.take(5, 10);
gig : i32 | f64 = 7.0;
bard.take(gig, 14.0);
IO.print("start");
larry = Animal.new(55, 8.0, 13);
IO.print("did get here!");
barry = Beaver.new(10, 10.0);
bard.take(larry, barry);
bard.take(7, gig);

IO.print("barry's color is");
barry.say_color();
barry + 5;
barry.say_color();

mynum = Integer.new(89);
(mynum - 7).print();

num = Math.sqrt(9.0);
IO.print(Math.abs(-9));
IO.print(num);

make_em_speak(larry);
gary = larry.do_nothing();

def throw() {
    yield(Exception.new());
}

a = 5;
while a is i32 {
    IO.print(a);
    a = a + 1;
    if a == 9 { a = Animal.new(65, 18.0, 23); }
}

if a is i32 { IO.print(a); }

if a is Animal { make_em_speak(a); }

larry.say_skill();

mylist = ListNode.new(0);
next = mylist;

for i in 1:10 { next = next.push(ListNode.new(i)); }

IO.print(mylist.data());

for node in mylist { IO.print(node.data()); }

def print88() {
    IO.print(88);
    yield();
    IO.print(90);
}

my_coro = Coroutine.new(print88);
my_coro.call();
IO.print(89);
my_coro.call();
for z in 1:10 {
    if z == 5 { break; }
    IO.print(z);
}

def grabo() {
    IO.print("one");
    return;
    IO.print("two");
    return;
}

ary = [1,2,3,4];
ary.extend([5,6,7,8,9,10]);
IO.print(ary.[7]);
empty = [];
empty.extend([8,7,6,5]);
IO.print(empty.[3]);
grabo();
if ary is Array[i32] and ary.[0] == 5 {
    IO.print("so it is true!");
}

sixtyfour : i64 = 5;
IO.print(sixtyfour);
sixtyfour : f64 = 5;
IO.print(sixtyfour);

for i in 11:14 { IO.print(i); }
for i in [44,55,66] { IO.print(i); }

byte : i8 = 3;
IO.print(byte);

for char in "boom!" { IO.print(char); }
IO.print([1,2,3].repr());
derived = Integer2.new(77);
derived.print();
IO.print(derived);
derived.introduce();

for k in (0:25).step(5) { IO.print(k); }

add = (a: i32, b: i32) => { a + b; };
times_two = (x: i32) => { x * 2; };
returns_five = () => { 5; };
IO.print([1,2,3,4].map(times_two).reduce(0, add));
[5,6,7,8].each((x : i32) => { IO.print(x); });

FileSystem.write_file("bigtings.txt", "this\nis how\nwe do\nit");
IO.print(FileSystem.read_file("bigtings.txt"));

//system("dir".c_string());

(2:5).each((x : i32) => { IO.print(x*x); });

captured = i32toi8;
IO.print(captured.call(5));

interesting = (a : i32, b : i32) yields i32 => {
    c = 7;
    add = (a: i32, b: i32) => { a + b; };
    while true {
        increment = yield(add.call(a,b) + c);
        if increment is i32 { c = c + increment; }
    }
};

interesting_coro = Coroutine.new(interesting, 6, 4);
IO.print(interesting_coro.call(2));
IO.print(interesting_coro.call(3));

coro_returns_five = Coroutine.new(returns_five);
coro_returns_five.call();
IO.print(coro_returns_five.result());

chan = Channel[i32].new();
producer = Coroutine.new((chan : Channel[i32]) => { chan.put(88); }, chan);
producer.call();
IO.print(chan.get());

v = (1:15).map((x : i32) => { x * x; })
    .filter((x : i32) => { x % 2 == 0; })
    .reduce(0, add);

IO.print(v);

hex_literal = 0x0100;
IO.print(hex_literal);
tuple = (4, 5, 6);
second = tuple.[1];
IO.print(second);