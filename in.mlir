builtin.module attributes  {"sym_name" = "ir"} {
  "mini.prelude"() : () -> ()
  "mini.external_typedef"() {"class_name" = "bool_typ", "vtbl_size" = 0 : i32} : () -> ()
  "mini.external_typedef"() {"class_name" = "i8_typ", "vtbl_size" = 0 : i32} : () -> ()
  "mini.external_typedef"() {"class_name" = "i32_typ", "vtbl_size" = 0 : i32} : () -> ()
  "mini.external_typedef"() {"class_name" = "i64_typ", "vtbl_size" = 0 : i32} : () -> ()
  "mini.external_typedef"() {"class_name" = "i128_typ", "vtbl_size" = 0 : i32} : () -> ()
  "mini.external_typedef"() {"class_name" = "f64_typ", "vtbl_size" = 0 : i32} : () -> ()
  "mini.external_typedef"() {"class_name" = "nil_typ", "vtbl_size" = 0 : i32} : () -> ()
  "mini.external_typedef"() {"class_name" = "any_typ", "vtbl_size" = 0 : i32} : () -> ()
  "mini.external_typedef"() {"class_name" = "nothing_typ", "vtbl_size" = 0 : i32} : () -> ()
  "mini.external_typedef"() {"class_name" = "coroutine_typ", "vtbl_size" = 0 : i32} : () -> ()
  "mini.external_typedef"() {"class_name" = "function_typ", "vtbl_size" = 0 : i32} : () -> ()
  "mini.external_typedef"() {"class_name" = "buffer_typ", "vtbl_size" = 0 : i32} : () -> ()
  "mini.external_typedef"() {"class_name" = "tuple_typ", "vtbl_size" = 0 : i32} : () -> ()
  "mini.external_typedef"() {"class_name" = "union_typ", "vtbl_size" = 0 : i32} : () -> ()
  "mini.external_typedef"() {"class_name" = "Object", "vtbl_size" = 0 : i32} : () -> ()
  "mini.typedef"() {"class_name" = "Iterator", "methods" = [], "hash_tbl" = [@Object, 18446744073709551615 : i64, @any_typ, @Iterator], "offset_tbl" = [10 : i32, 0 : i32, 10 : i32, 10 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 8673632051301757104 : i64, "base_typ" = !llvm.struct<()>, "data_size_fn" = "_data_size_Iterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "Iterable", "methods" = [], "hash_tbl" = [18446744073709551615 : i64, @Iterable, @any_typ, @Object], "offset_tbl" = [0 : i32, 10 : i32, 10 : i32, 12 : i32], "prime" = 4611686018427388093 : i64, "hash_id" = 3037712219555723519 : i64, "base_typ" = !llvm.struct<()>, "data_size_fn" = "_data_size_Iterable", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "Representable", "methods" = [@Representable_B_repr_, @Representable_repr_], "hash_tbl" = [@Representable, 18446744073709551615 : i64, @any_typ, @Object], "offset_tbl" = [10 : i32, 0 : i32, 10 : i32, 12 : i32], "prime" = 4611686018427388093 : i64, "hash_id" = 11185903432579561498 : i64, "base_typ" = !llvm.struct<()>, "data_size_fn" = "_data_size_Representable", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "String", "methods" = [@String_field_bytes, @String_field_length, @String_field_capacity, @String_B_init_, @String_B_init_bytesBufferPtri8_lengthPtri32_capacityPtri32, @String_B_length_, @String_B_capacity_, @String_B_bytes_, @String_B_append_xPtri8, @String_B_extend_strString, @String_B__index_xPtri32, @String_B__EQ_otherString, @String_B_pop_, @String_B_copy_, @String_B_c_string_, @String_B_iterator_, @String_B_repr_, @String_init_, @String_init_bytesBufferPtri8_lengthPtri32_capacityPtri32, @String_length_, @String_capacity_, @String_bytes_, @String_append_xPtri8, @String_extend_strString, @String__index_xPtri32, @String__EQ_otherString, @String_pop_, @String_copy_, @String_c_string_, @String_iterator_, @String_repr_, @String_B_iterator_, @String_iterator_, @String_B_repr_, @String_repr_], "hash_tbl" = [@any_typ, 18446744073709551615 : i64, @String, @Representable, @Object, 18446744073709551615 : i64, 18446744073709551615 : i64, @Iterable], "offset_tbl" = [10 : i32, 0 : i32, 10 : i32, 43 : i32, 43 : i32, 0 : i32, 0 : i32, 41 : i32], "prime" = 4611686018427388073 : i64, "hash_id" = 6499063144389013426 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "data_size_fn" = "_data_size_String", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "Character", "methods" = [@Character_field_byte, @Character_B_byte_, @Character_B_init_bytePtri8, @Character_byte_, @Character_init_bytePtri8], "hash_tbl" = [@Object, 18446744073709551615 : i64, @any_typ, @Character], "offset_tbl" = [15 : i32, 0 : i32, 10 : i32, 10 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 6681222582356018452 : i64, "base_typ" = !llvm.struct<(i8)>, "data_size_fn" = "_data_size_Character", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "StringIterator", "methods" = [@StringIterator_field_str, @StringIterator_field_index, @StringIterator_B_init_strString, @StringIterator_B_next_, @StringIterator_init_strString, @StringIterator_next_], "hash_tbl" = [@StringIterator, @Object, @any_typ, @Iterator], "offset_tbl" = [10 : i32, 16 : i32, 10 : i32, 16 : i32], "prime" = 4611686018427388097 : i64, "hash_id" = 11186173084763598986 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32)>, "data_size_fn" = "_data_size_StringIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "Exception", "methods" = [@Exception_field_line_number, @Exception_field_file_name, @Exception_field_message, @Exception_B_init_messageString, @Exception_B_init_, @Exception_B_set_info_line_numberPtri32_file_nameString, @Exception_B_report_, @Exception_B_print_message_, @Exception_init_messageString, @Exception_init_, @Exception_set_info_line_numberPtri32_file_nameString, @Exception_report_, @Exception_print_message_], "hash_tbl" = [@Object, 18446744073709551615 : i64, @any_typ, @Exception], "offset_tbl" = [23 : i32, 0 : i32, 10 : i32, 10 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 9027164862567808692 : i64, "base_typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_Exception", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "IO", "methods" = [@IO_B__Self_print_xPtrf64__Self_print_xPtri8__Self_print_xRepresentable__Self_print_xCharacter__Self_print_xPtri32__Self_print_xString__Self_print_xNil__Self_print_xPtri1__Self_print_xPtri64, @IO__Self_print_xPtrf64, @IO__Self_print_xPtri8, @IO__Self_print_xRepresentable, @IO__Self_print_xCharacter, @IO__Self_print_xPtri32, @IO__Self_print_xString, @IO__Self_print_xNil, @IO__Self_print_xPtri1, @IO__Self_print_xPtri64], "hash_tbl" = [@any_typ, @IO, 18446744073709551615 : i64, @Object], "offset_tbl" = [10 : i32, 10 : i32, 0 : i32, 20 : i32], "prime" = 4611686018427388247 : i64, "hash_id" = 5359822646784595218 : i64, "base_typ" = !llvm.struct<()>, "data_size_fn" = "_data_size_IO", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "Blocking", "methods" = [@Blocking_B_init_, @Blocking_init_], "hash_tbl" = [@Object, @any_typ, @Blocking, 18446744073709551615 : i64], "offset_tbl" = [12 : i32, 10 : i32, 10 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 847773162914674935 : i64, "base_typ" = !llvm.struct<()>, "data_size_fn" = "_data_size_Blocking", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "Channel", "methods" = [@Channel_field_value, @Channel_B_init_, @Channel_B_get_, @Channel_B_put_new_valuePtri32, @Channel_init_, @Channel_get_, @Channel_put_new_valuePtri32], "hash_tbl" = [@Object, @any_typ, 18446744073709551615 : i64, @Channel], "offset_tbl" = [17 : i32, 10 : i32, 0 : i32, 10 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 14778625957069801166 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_Channel", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "IntIterator", "methods" = [], "hash_tbl" = [@any_typ, @Iterator, @IntIterator, @Object], "offset_tbl" = [10 : i32, 12 : i32, 10 : i32, 12 : i32], "prime" = 4611686018427388247 : i64, "hash_id" = 17513659798052893061 : i64, "base_typ" = !llvm.struct<()>, "data_size_fn" = "_data_size_IntIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "IntIterable", "methods" = [], "hash_tbl" = [@any_typ, @Iterable, @IntIterable, @Object], "offset_tbl" = [10 : i32, 32 : i32, 10 : i32, 34 : i32], "prime" = 4611686018427388247 : i64, "hash_id" = 10461781953294393041 : i64, "base_typ" = !llvm.struct<()>, "data_size_fn" = "_data_size_IntIterable", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "MapIterable", "methods" = [@MapIterable_field_iterable, @MapIterable_field_f, @MapIterable_B_init_iterableIntIterable_fFunctionPtri32_to_Ptri32, @MapIterable_B_each_fFunctionPtri32_to_Nothing, @MapIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @MapIterable_B_all_fFunctionPtri32_to_Ptri1, @MapIterable_B_any_fFunctionPtri32_to_Ptri1, @MapIterable_B_map_fFunctionPtri32_to_Ptri32, @MapIterable_B_filter_fFunctionPtri32_to_Ptri1, @MapIterable_B_chain_otherIntIterable, @MapIterable_B_interleave_otherIntIterable, @MapIterable_B_zip_otherIntIterable, @MapIterable_B_product_otherIntIterable, @MapIterable_B_iterator_, @MapIterable_init_iterableIntIterable_fFunctionPtri32_to_Ptri32, @IntIterable_each_fFunctionPtri32_to_Nothing, @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @IntIterable_all_fFunctionPtri32_to_Ptri1, @IntIterable_any_fFunctionPtri32_to_Ptri1, @IntIterable_map_fFunctionPtri32_to_Ptri32, @IntIterable_filter_fFunctionPtri32_to_Ptri1, @IntIterable_chain_otherIntIterable, @IntIterable_interleave_otherIntIterable, @IntIterable_zip_otherIntIterable, @IntIterable_product_otherIntIterable, @MapIterable_iterator_, @MapIterable_B_each_fFunctionPtri32_to_Nothing, @MapIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @MapIterable_B_all_fFunctionPtri32_to_Ptri1, @MapIterable_B_any_fFunctionPtri32_to_Ptri1, @MapIterable_B_map_fFunctionPtri32_to_Ptri32, @MapIterable_B_filter_fFunctionPtri32_to_Ptri1, @MapIterable_B_chain_otherIntIterable, @MapIterable_B_interleave_otherIntIterable, @MapIterable_B_zip_otherIntIterable, @MapIterable_B_product_otherIntIterable, @MapIterable_B_iterator_, @IntIterable_each_fFunctionPtri32_to_Nothing, @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @IntIterable_all_fFunctionPtri32_to_Ptri1, @IntIterable_any_fFunctionPtri32_to_Ptri1, @IntIterable_map_fFunctionPtri32_to_Ptri32, @IntIterable_filter_fFunctionPtri32_to_Ptri1, @IntIterable_chain_otherIntIterable, @IntIterable_interleave_otherIntIterable, @IntIterable_zip_otherIntIterable, @IntIterable_product_otherIntIterable, @MapIterable_iterator_, @MapIterable_B_iterator_, @MapIterable_iterator_, @MapIterable_B_iterator_, @MapIterable_iterator_], "hash_tbl" = [@IntIterable, @MapIterable, @Object, 18446744073709551615 : i64, @any_typ, 18446744073709551615 : i64, 18446744073709551615 : i64, @Iterable], "offset_tbl" = [36 : i32, 10 : i32, 62 : i32, 0 : i32, 10 : i32, 0 : i32, 0 : i32, 60 : i32], "prime" = 4611686018427388291 : i64, "hash_id" = 10957973502106259894 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "data_size_fn" = "_data_size_MapIterable", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "MapIterator", "methods" = [@MapIterator_field_iterator, @MapIterator_field_f, @MapIterator_B_init_iteratorIntIterator_fFunctionPtri32_to_Ptri32, @MapIterator_B_next_, @MapIterator_init_iteratorIntIterator_fFunctionPtri32_to_Ptri32, @MapIterator_next_, @MapIterator_B_next_, @MapIterator_next_], "hash_tbl" = [@Object, @any_typ, @MapIterator, @IntIterator, 18446744073709551615 : i64, @Iterator, 18446744073709551615 : i64, 18446744073709551615 : i64], "offset_tbl" = [18 : i32, 10 : i32, 10 : i32, 16 : i32, 0 : i32, 18 : i32, 0 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 18300190591082816834 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "data_size_fn" = "_data_size_MapIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "FilterIterable", "methods" = [@FilterIterable_field_iterable, @FilterIterable_field_f, @FilterIterable_B_init_iterableIntIterable_fFunctionPtri32_to_Ptri1, @FilterIterable_B_each_fFunctionPtri32_to_Nothing, @FilterIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @FilterIterable_B_all_fFunctionPtri32_to_Ptri1, @FilterIterable_B_any_fFunctionPtri32_to_Ptri1, @FilterIterable_B_map_fFunctionPtri32_to_Ptri32, @FilterIterable_B_filter_fFunctionPtri32_to_Ptri1, @FilterIterable_B_chain_otherIntIterable, @FilterIterable_B_interleave_otherIntIterable, @FilterIterable_B_zip_otherIntIterable, @FilterIterable_B_product_otherIntIterable, @FilterIterable_B_iterator_, @FilterIterable_init_iterableIntIterable_fFunctionPtri32_to_Ptri1, @IntIterable_each_fFunctionPtri32_to_Nothing, @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @IntIterable_all_fFunctionPtri32_to_Ptri1, @IntIterable_any_fFunctionPtri32_to_Ptri1, @IntIterable_map_fFunctionPtri32_to_Ptri32, @IntIterable_filter_fFunctionPtri32_to_Ptri1, @IntIterable_chain_otherIntIterable, @IntIterable_interleave_otherIntIterable, @IntIterable_zip_otherIntIterable, @IntIterable_product_otherIntIterable, @FilterIterable_iterator_, @FilterIterable_B_each_fFunctionPtri32_to_Nothing, @FilterIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @FilterIterable_B_all_fFunctionPtri32_to_Ptri1, @FilterIterable_B_any_fFunctionPtri32_to_Ptri1, @FilterIterable_B_map_fFunctionPtri32_to_Ptri32, @FilterIterable_B_filter_fFunctionPtri32_to_Ptri1, @FilterIterable_B_chain_otherIntIterable, @FilterIterable_B_interleave_otherIntIterable, @FilterIterable_B_zip_otherIntIterable, @FilterIterable_B_product_otherIntIterable, @FilterIterable_B_iterator_, @IntIterable_each_fFunctionPtri32_to_Nothing, @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @IntIterable_all_fFunctionPtri32_to_Ptri1, @IntIterable_any_fFunctionPtri32_to_Ptri1, @IntIterable_map_fFunctionPtri32_to_Ptri32, @IntIterable_filter_fFunctionPtri32_to_Ptri1, @IntIterable_chain_otherIntIterable, @IntIterable_interleave_otherIntIterable, @IntIterable_zip_otherIntIterable, @IntIterable_product_otherIntIterable, @FilterIterable_iterator_, @FilterIterable_B_iterator_, @FilterIterable_iterator_, @FilterIterable_B_iterator_, @FilterIterable_iterator_], "hash_tbl" = [@IntIterable, 18446744073709551615 : i64, @Object, @FilterIterable, @any_typ, 18446744073709551615 : i64, 18446744073709551615 : i64, @Iterable], "offset_tbl" = [36 : i32, 0 : i32, 62 : i32, 10 : i32, 10 : i32, 0 : i32, 0 : i32, 60 : i32], "prime" = 4611686018427388291 : i64, "hash_id" = 8498466713076104350 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "data_size_fn" = "_data_size_FilterIterable", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "FilterIterator", "methods" = [@FilterIterator_field_iterator, @FilterIterator_field_f, @FilterIterator_B_init_iteratorIntIterator_fFunctionPtri32_to_Ptri1, @FilterIterator_B_next_, @FilterIterator_init_iteratorIntIterator_fFunctionPtri32_to_Ptri1, @FilterIterator_next_, @FilterIterator_B_next_, @FilterIterator_next_], "hash_tbl" = [@Object, @any_typ, 18446744073709551615 : i64, @IntIterator, 18446744073709551615 : i64, @Iterator, @FilterIterator, 18446744073709551615 : i64], "offset_tbl" = [18 : i32, 10 : i32, 0 : i32, 16 : i32, 0 : i32, 18 : i32, 10 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 17225378576809247733 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "data_size_fn" = "_data_size_FilterIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "ChainIterable", "methods" = [@ChainIterable_field_first, @ChainIterable_field_second, @ChainIterable_B_init_firstIntIterable_secondIntIterable, @ChainIterable_B_each_fFunctionPtri32_to_Nothing, @ChainIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @ChainIterable_B_all_fFunctionPtri32_to_Ptri1, @ChainIterable_B_any_fFunctionPtri32_to_Ptri1, @ChainIterable_B_map_fFunctionPtri32_to_Ptri32, @ChainIterable_B_filter_fFunctionPtri32_to_Ptri1, @ChainIterable_B_chain_otherIntIterable, @ChainIterable_B_interleave_otherIntIterable, @ChainIterable_B_zip_otherIntIterable, @ChainIterable_B_product_otherIntIterable, @ChainIterable_B_iterator_, @ChainIterable_init_firstIntIterable_secondIntIterable, @IntIterable_each_fFunctionPtri32_to_Nothing, @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @IntIterable_all_fFunctionPtri32_to_Ptri1, @IntIterable_any_fFunctionPtri32_to_Ptri1, @IntIterable_map_fFunctionPtri32_to_Ptri32, @IntIterable_filter_fFunctionPtri32_to_Ptri1, @IntIterable_chain_otherIntIterable, @IntIterable_interleave_otherIntIterable, @IntIterable_zip_otherIntIterable, @IntIterable_product_otherIntIterable, @ChainIterable_iterator_, @ChainIterable_B_each_fFunctionPtri32_to_Nothing, @ChainIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @ChainIterable_B_all_fFunctionPtri32_to_Ptri1, @ChainIterable_B_any_fFunctionPtri32_to_Ptri1, @ChainIterable_B_map_fFunctionPtri32_to_Ptri32, @ChainIterable_B_filter_fFunctionPtri32_to_Ptri1, @ChainIterable_B_chain_otherIntIterable, @ChainIterable_B_interleave_otherIntIterable, @ChainIterable_B_zip_otherIntIterable, @ChainIterable_B_product_otherIntIterable, @ChainIterable_B_iterator_, @IntIterable_each_fFunctionPtri32_to_Nothing, @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @IntIterable_all_fFunctionPtri32_to_Ptri1, @IntIterable_any_fFunctionPtri32_to_Ptri1, @IntIterable_map_fFunctionPtri32_to_Ptri32, @IntIterable_filter_fFunctionPtri32_to_Ptri1, @IntIterable_chain_otherIntIterable, @IntIterable_interleave_otherIntIterable, @IntIterable_zip_otherIntIterable, @IntIterable_product_otherIntIterable, @ChainIterable_iterator_, @ChainIterable_B_iterator_, @ChainIterable_iterator_, @ChainIterable_B_iterator_, @ChainIterable_iterator_], "hash_tbl" = [@any_typ, @Iterable, @IntIterable, @ChainIterable, 18446744073709551615 : i64, 18446744073709551615 : i64, 18446744073709551615 : i64, @Object], "offset_tbl" = [10 : i32, 60 : i32, 36 : i32, 10 : i32, 0 : i32, 0 : i32, 0 : i32, 62 : i32], "prime" = 4611686018427388247 : i64, "hash_id" = 16076497015278503801 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_ChainIterable", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "ChainIterator", "methods" = [@ChainIterator_field_first, @ChainIterator_field_second, @ChainIterator_field_on_first, @ChainIterator_B_init_firstIntIterator_secondIntIterator, @ChainIterator_B_next_, @ChainIterator_init_firstIntIterator_secondIntIterator, @ChainIterator_next_, @ChainIterator_B_next_, @ChainIterator_next_], "hash_tbl" = [@any_typ, @ChainIterator, 18446744073709551615 : i64, @Iterator, @Object, 18446744073709551615 : i64, 18446744073709551615 : i64, @IntIterator], "offset_tbl" = [10 : i32, 10 : i32, 0 : i32, 19 : i32, 19 : i32, 0 : i32, 0 : i32, 17 : i32], "prime" = 4611686018427388073 : i64, "hash_id" = 6043157723929225452 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1)>, "data_size_fn" = "_data_size_ChainIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "InterleaveIterable", "methods" = [@InterleaveIterable_field_first, @InterleaveIterable_field_second, @InterleaveIterable_B_init_firstIntIterable_secondIntIterable, @InterleaveIterable_B_each_fFunctionPtri32_to_Nothing, @InterleaveIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @InterleaveIterable_B_all_fFunctionPtri32_to_Ptri1, @InterleaveIterable_B_any_fFunctionPtri32_to_Ptri1, @InterleaveIterable_B_map_fFunctionPtri32_to_Ptri32, @InterleaveIterable_B_filter_fFunctionPtri32_to_Ptri1, @InterleaveIterable_B_chain_otherIntIterable, @InterleaveIterable_B_interleave_otherIntIterable, @InterleaveIterable_B_zip_otherIntIterable, @InterleaveIterable_B_product_otherIntIterable, @InterleaveIterable_B_iterator_, @InterleaveIterable_init_firstIntIterable_secondIntIterable, @IntIterable_each_fFunctionPtri32_to_Nothing, @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @IntIterable_all_fFunctionPtri32_to_Ptri1, @IntIterable_any_fFunctionPtri32_to_Ptri1, @IntIterable_map_fFunctionPtri32_to_Ptri32, @IntIterable_filter_fFunctionPtri32_to_Ptri1, @IntIterable_chain_otherIntIterable, @IntIterable_interleave_otherIntIterable, @IntIterable_zip_otherIntIterable, @IntIterable_product_otherIntIterable, @InterleaveIterable_iterator_, @InterleaveIterable_B_each_fFunctionPtri32_to_Nothing, @InterleaveIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @InterleaveIterable_B_all_fFunctionPtri32_to_Ptri1, @InterleaveIterable_B_any_fFunctionPtri32_to_Ptri1, @InterleaveIterable_B_map_fFunctionPtri32_to_Ptri32, @InterleaveIterable_B_filter_fFunctionPtri32_to_Ptri1, @InterleaveIterable_B_chain_otherIntIterable, @InterleaveIterable_B_interleave_otherIntIterable, @InterleaveIterable_B_zip_otherIntIterable, @InterleaveIterable_B_product_otherIntIterable, @InterleaveIterable_B_iterator_, @IntIterable_each_fFunctionPtri32_to_Nothing, @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @IntIterable_all_fFunctionPtri32_to_Ptri1, @IntIterable_any_fFunctionPtri32_to_Ptri1, @IntIterable_map_fFunctionPtri32_to_Ptri32, @IntIterable_filter_fFunctionPtri32_to_Ptri1, @IntIterable_chain_otherIntIterable, @IntIterable_interleave_otherIntIterable, @IntIterable_zip_otherIntIterable, @IntIterable_product_otherIntIterable, @InterleaveIterable_iterator_, @InterleaveIterable_B_iterator_, @InterleaveIterable_iterator_, @InterleaveIterable_B_iterator_, @InterleaveIterable_iterator_], "hash_tbl" = [@IntIterable, @InterleaveIterable, @Object, 18446744073709551615 : i64, @any_typ, 18446744073709551615 : i64, 18446744073709551615 : i64, @Iterable], "offset_tbl" = [36 : i32, 10 : i32, 62 : i32, 0 : i32, 10 : i32, 0 : i32, 0 : i32, 60 : i32], "prime" = 4611686018427388291 : i64, "hash_id" = 4936782714255954462 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_InterleaveIterable", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "InterleaveIterator", "methods" = [@InterleaveIterator_field_first, @InterleaveIterator_field_second, @InterleaveIterator_field_on_first, @InterleaveIterator_B_init_firstIntIterator_secondIntIterator, @InterleaveIterator_B_next_, @InterleaveIterator_init_firstIntIterator_secondIntIterator, @InterleaveIterator_next_, @InterleaveIterator_B_next_, @InterleaveIterator_next_], "hash_tbl" = [@any_typ, 18446744073709551615 : i64, 18446744073709551615 : i64, @Iterator, @Object, 18446744073709551615 : i64, @InterleaveIterator, @IntIterator], "offset_tbl" = [10 : i32, 0 : i32, 0 : i32, 19 : i32, 19 : i32, 0 : i32, 10 : i32, 17 : i32], "prime" = 4611686018427388073 : i64, "hash_id" = 14522079715461027111 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1)>, "data_size_fn" = "_data_size_InterleaveIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "IntTupleIterable", "methods" = [], "hash_tbl" = [@any_typ, @Iterable, @IntTupleIterable, @Object], "offset_tbl" = [10 : i32, 12 : i32, 10 : i32, 14 : i32], "prime" = 4611686018427388247 : i64, "hash_id" = 1135628454346210518 : i64, "base_typ" = !llvm.struct<()>, "data_size_fn" = "_data_size_IntTupleIterable", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "IntTupleIterator", "methods" = [], "hash_tbl" = [@any_typ, @Object, @Iterator, @IntTupleIterator], "offset_tbl" = [10 : i32, 12 : i32, 12 : i32, 10 : i32], "prime" = 4611686018427388157 : i64, "hash_id" = 8926924731480624460 : i64, "base_typ" = !llvm.struct<()>, "data_size_fn" = "_data_size_IntTupleIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "ZipIterable", "methods" = [@ZipIterable_field_first, @ZipIterable_field_second, @ZipIterable_B_init_firstIntIterable_secondIntIterable, @ZipIterable_B_iterator_, @ZipIterable_init_firstIntIterable_secondIntIterable, @ZipIterable_iterator_, @ZipIterable_B_iterator_, @ZipIterable_iterator_, @ZipIterable_B_iterator_, @ZipIterable_iterator_, @ZipIterable_B_iterator_, @ZipIterable_iterator_], "hash_tbl" = [@any_typ, 18446744073709551615 : i64, @IntTupleIterable, 18446744073709551615 : i64, @Object, @ZipIterable, 18446744073709551615 : i64, @Iterable], "offset_tbl" = [10 : i32, 0 : i32, 16 : i32, 0 : i32, 22 : i32, 10 : i32, 0 : i32, 20 : i32], "prime" = 4611686018427388073 : i64, "hash_id" = 35232740166152944 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_ZipIterable", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "ZipIterator", "methods" = [@ZipIterator_field_first, @ZipIterator_field_second, @ZipIterator_B_init_firstIntIterator_secondIntIterator, @ZipIterator_B_next_, @ZipIterator_init_firstIntIterator_secondIntIterator, @ZipIterator_next_, @ZipIterator_B_next_, @ZipIterator_next_], "hash_tbl" = [@IntTupleIterator, 18446744073709551615 : i64, 18446744073709551615 : i64, @Iterator, @Object, 18446744073709551615 : i64, @any_typ, @ZipIterator], "offset_tbl" = [16 : i32, 0 : i32, 0 : i32, 18 : i32, 18 : i32, 0 : i32, 10 : i32, 10 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 16305629627969966298 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_ZipIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "ProductIterable", "methods" = [@ProductIterable_field_first, @ProductIterable_field_second, @ProductIterable_B_init_firstIntIterable_secondIntIterable, @ProductIterable_B_iterator_, @ProductIterable_init_firstIntIterable_secondIntIterable, @ProductIterable_iterator_, @ProductIterable_B_iterator_, @ProductIterable_iterator_, @ProductIterable_B_iterator_, @ProductIterable_iterator_, @ProductIterable_B_iterator_, @ProductIterable_iterator_], "hash_tbl" = [@any_typ, @ProductIterable, @IntTupleIterable, 18446744073709551615 : i64, @Object, 18446744073709551615 : i64, 18446744073709551615 : i64, @Iterable], "offset_tbl" = [10 : i32, 10 : i32, 16 : i32, 0 : i32, 22 : i32, 0 : i32, 0 : i32, 20 : i32], "prime" = 4611686018427388073 : i64, "hash_id" = 4128338911757318636 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_ProductIterable", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "ProductIterator", "methods" = [@ProductIterator_field_first_iterator, @ProductIterator_field_second_iterator, @ProductIterator_field_second_iterable, @ProductIterator_field_current_first, @ProductIterator_B_init_first_iterableIntIterable_second_iterableIntIterable, @ProductIterator_B_next_, @ProductIterator_init_first_iterableIntIterable_second_iterableIntIterable, @ProductIterator_next_], "hash_tbl" = [@any_typ, @Object, @Iterator, @ProductIterator], "offset_tbl" = [10 : i32, 18 : i32, 18 : i32, 10 : i32], "prime" = 4611686018427388157 : i64, "hash_id" = 1697250377212095568 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_ProductIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "Range", "methods" = [@Range_field_start, @Range_field_end, @Range_field_step, @Range_B_init_endPtri32, @Range_B_init_startPtri32_endPtri32, @Range_B_step_stepPtri32, @Range_B_each_fFunctionPtri32_to_Nothing, @Range_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @Range_B_all_fFunctionPtri32_to_Ptri1, @Range_B_any_fFunctionPtri32_to_Ptri1, @Range_B_map_fFunctionPtri32_to_Ptri32, @Range_B_filter_fFunctionPtri32_to_Ptri1, @Range_B_chain_otherIntIterable, @Range_B_interleave_otherIntIterable, @Range_B_zip_otherIntIterable, @Range_B_product_otherIntIterable, @Range_B_iterator_, @Range_init_endPtri32, @Range_init_startPtri32_endPtri32, @Range_step_stepPtri32, @IntIterable_each_fFunctionPtri32_to_Nothing, @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @IntIterable_all_fFunctionPtri32_to_Ptri1, @IntIterable_any_fFunctionPtri32_to_Ptri1, @IntIterable_map_fFunctionPtri32_to_Ptri32, @IntIterable_filter_fFunctionPtri32_to_Ptri1, @IntIterable_chain_otherIntIterable, @IntIterable_interleave_otherIntIterable, @IntIterable_zip_otherIntIterable, @IntIterable_product_otherIntIterable, @Range_iterator_, @Range_B_each_fFunctionPtri32_to_Nothing, @Range_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @Range_B_all_fFunctionPtri32_to_Ptri1, @Range_B_any_fFunctionPtri32_to_Ptri1, @Range_B_map_fFunctionPtri32_to_Ptri32, @Range_B_filter_fFunctionPtri32_to_Ptri1, @Range_B_chain_otherIntIterable, @Range_B_interleave_otherIntIterable, @Range_B_zip_otherIntIterable, @Range_B_product_otherIntIterable, @Range_B_iterator_, @IntIterable_each_fFunctionPtri32_to_Nothing, @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @IntIterable_all_fFunctionPtri32_to_Ptri1, @IntIterable_any_fFunctionPtri32_to_Ptri1, @IntIterable_map_fFunctionPtri32_to_Ptri32, @IntIterable_filter_fFunctionPtri32_to_Ptri1, @IntIterable_chain_otherIntIterable, @IntIterable_interleave_otherIntIterable, @IntIterable_zip_otherIntIterable, @IntIterable_product_otherIntIterable, @Range_iterator_, @Range_B_iterator_, @Range_iterator_, @Range_B_iterator_, @Range_iterator_], "hash_tbl" = [@IntIterable, @Range, @Object, 18446744073709551615 : i64, @any_typ, 18446744073709551615 : i64, 18446744073709551615 : i64, @Iterable], "offset_tbl" = [41 : i32, 10 : i32, 67 : i32, 0 : i32, 10 : i32, 0 : i32, 0 : i32, 65 : i32], "prime" = 4611686018427388291 : i64, "hash_id" = 5490049236840671069 : i64, "base_typ" = !llvm.struct<(i32, i32, i32)>, "data_size_fn" = "_data_size_Range", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "RangeIterator", "methods" = [@RangeIterator_field_counter, @RangeIterator_field_end, @RangeIterator_field_step, @RangeIterator_B_init_counterPtri32_endPtri32_stepPtri32, @RangeIterator_B_next_, @RangeIterator_init_counterPtri32_endPtri32_stepPtri32, @RangeIterator_next_, @RangeIterator_B_next_, @RangeIterator_next_], "hash_tbl" = [@RangeIterator, @IntIterator, @any_typ, 18446744073709551615 : i64, 18446744073709551615 : i64, @Iterator, 18446744073709551615 : i64, @Object], "offset_tbl" = [10 : i32, 17 : i32, 10 : i32, 0 : i32, 0 : i32, 19 : i32, 0 : i32, 19 : i32], "prime" = 4611686018427388093 : i64, "hash_id" = 17533181587765144941 : i64, "base_typ" = !llvm.struct<(i32, i32, i32)>, "data_size_fn" = "_data_size_RangeIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "OutOfBoundsDetails", "methods" = [@OutOfBoundsDetails_field_bounds, @OutOfBoundsDetails_field_index, @OutOfBoundsDetails_B_init_boundsPtri32_indexPtri32, @OutOfBoundsDetails_B_report_, @OutOfBoundsDetails_init_boundsPtri32_indexPtri32, @OutOfBoundsDetails_report_], "hash_tbl" = [@Object, 18446744073709551615 : i64, @any_typ, @OutOfBoundsDetails], "offset_tbl" = [16 : i32, 0 : i32, 10 : i32, 10 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 4650630525701360429 : i64, "base_typ" = !llvm.struct<(i32, i32)>, "data_size_fn" = "_data_size_OutOfBoundsDetails", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "OutOfBounds", "methods" = [@OutOfBounds_field_details, @OutOfBounds_field_line_number, @OutOfBounds_field_file_name, @OutOfBounds_field_message, @OutOfBounds_B_init_boundsPtri32_indexPtri32, @OutOfBounds_B_init_messageString, @OutOfBounds_B_init_, @OutOfBounds_B_set_info_line_numberPtri32_file_nameString, @OutOfBounds_B_report_, @OutOfBounds_B_print_message_, @OutOfBounds_init_boundsPtri32_indexPtri32, @Exception_init_messageString, @Exception_init_, @Exception_set_info_line_numberPtri32_file_nameString, @Exception_report_, @OutOfBounds_print_message_, @OutOfBounds_field_line_number, @OutOfBounds_field_file_name, @OutOfBounds_field_message, @OutOfBounds_B_init_messageString, @OutOfBounds_B_init_, @OutOfBounds_B_set_info_line_numberPtri32_file_nameString, @OutOfBounds_B_report_, @OutOfBounds_B_print_message_, @Exception_init_messageString, @Exception_init_, @Exception_set_info_line_numberPtri32_file_nameString, @Exception_report_, @OutOfBounds_print_message_], "hash_tbl" = [@any_typ, @Exception, @OutOfBounds, @Object], "offset_tbl" = [10 : i32, 26 : i32, 10 : i32, 39 : i32], "prime" = 4611686018427388247 : i64, "hash_id" = 5348403617834207535 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_OutOfBounds", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "IntArray", "methods" = [@IntArray_field_buffer, @IntArray_field_length, @IntArray_field_capacity, @IntArray_B__Self_from_iterable_iterableIntIterable, @IntArray_B_init_, @IntArray_B_init_bufferBufferPtri32_lengthPtri32_capacityPtri32, @IntArray_B_length_, @IntArray_B_capacity_, @IntArray_B_buffer_, @IntArray_B_append_xPtri32, @IntArray_B_extend_aryIntArray, @IntArray_B__index_xPtri32, @IntArray_B_pop_, @IntArray_B_copy_, @IntArray_B_each_fFunctionPtri32_to_Nothing, @IntArray_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @IntArray_B_all_fFunctionPtri32_to_Ptri1, @IntArray_B_any_fFunctionPtri32_to_Ptri1, @IntArray_B_map_fFunctionPtri32_to_Ptri32, @IntArray_B_filter_fFunctionPtri32_to_Ptri1, @IntArray_B_chain_otherIntIterable, @IntArray_B_interleave_otherIntIterable, @IntArray_B_zip_otherIntIterable, @IntArray_B_product_otherIntIterable, @IntArray_B_iterator_, @IntArray_B_repr_, @IntArray__Self_from_iterable_iterableIntIterable, @IntArray_init_, @IntArray_init_bufferBufferPtri32_lengthPtri32_capacityPtri32, @IntArray_length_, @IntArray_capacity_, @IntArray_buffer_, @IntArray_append_xPtri32, @IntArray_extend_aryIntArray, @IntArray__index_xPtri32, @IntArray_pop_, @IntArray_copy_, @IntIterable_each_fFunctionPtri32_to_Nothing, @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @IntIterable_all_fFunctionPtri32_to_Ptri1, @IntIterable_any_fFunctionPtri32_to_Ptri1, @IntArray_map_fFunctionPtri32_to_Ptri32, @IntIterable_filter_fFunctionPtri32_to_Ptri1, @IntIterable_chain_otherIntIterable, @IntIterable_interleave_otherIntIterable, @IntIterable_zip_otherIntIterable, @IntIterable_product_otherIntIterable, @IntArray_iterator_, @Representable_repr_, @IntArray_B_each_fFunctionPtri32_to_Nothing, @IntArray_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @IntArray_B_all_fFunctionPtri32_to_Ptri1, @IntArray_B_any_fFunctionPtri32_to_Ptri1, @IntArray_B_map_fFunctionPtri32_to_Ptri32, @IntArray_B_filter_fFunctionPtri32_to_Ptri1, @IntArray_B_chain_otherIntIterable, @IntArray_B_interleave_otherIntIterable, @IntArray_B_zip_otherIntIterable, @IntArray_B_product_otherIntIterable, @IntArray_B_iterator_, @IntIterable_each_fFunctionPtri32_to_Nothing, @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @IntIterable_all_fFunctionPtri32_to_Ptri1, @IntIterable_any_fFunctionPtri32_to_Ptri1, @IntArray_map_fFunctionPtri32_to_Ptri32, @IntIterable_filter_fFunctionPtri32_to_Ptri1, @IntIterable_chain_otherIntIterable, @IntIterable_interleave_otherIntIterable, @IntIterable_zip_otherIntIterable, @IntIterable_product_otherIntIterable, @IntArray_iterator_, @IntArray_B_iterator_, @IntArray_iterator_, @IntArray_B_iterator_, @IntArray_iterator_, @IntArray_B_repr_, @Representable_repr_], "hash_tbl" = [@Representable, @Iterable, @any_typ, 18446744073709551615 : i64, 18446744073709551615 : i64, @IntIterable, @IntArray, @Object], "offset_tbl" = [85 : i32, 83 : i32, 10 : i32, 0 : i32, 0 : i32, 59 : i32, 10 : i32, 85 : i32], "prime" = 4611686018427388093 : i64, "hash_id" = 7629948565578263212 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "data_size_fn" = "_data_size_IntArray", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "IntArrayIterator", "methods" = [@IntArrayIterator_field_array, @IntArrayIterator_field_index, @IntArrayIterator_B_init_arrayIntArray, @IntArrayIterator_B_next_, @IntArrayIterator_init_arrayIntArray, @IntArrayIterator_next_, @IntArrayIterator_B_next_, @IntArrayIterator_next_], "hash_tbl" = [18446744073709551615 : i64, @IntIterator, @any_typ, 18446744073709551615 : i64, @IntArrayIterator, @Iterator, 18446744073709551615 : i64, @Object], "offset_tbl" = [0 : i32, 16 : i32, 10 : i32, 0 : i32, 10 : i32, 18 : i32, 0 : i32, 18 : i32], "prime" = 4611686018427388093 : i64, "hash_id" = 5577199879563532693 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32)>, "data_size_fn" = "_data_size_IntArrayIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "Pair", "methods" = [@Pair_field_Pair_0, @Pair_field_Pair_1, @Pair_field_first, @Pair_field_second, @Pair_B_init_firstT_secondU, @Pair_B_first_, @Pair_B_second_, @Pair_init_firstT_secondU, @Pair_first_, @Pair_second_], "hash_tbl" = [@Object, @any_typ, @Pair, 18446744073709551615 : i64], "offset_tbl" = [20 : i32, 10 : i32, 10 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 9197944775169318296 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>)>, "data_size_fn" = "_data_size_Pair", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "Iterator2", "methods" = [], "hash_tbl" = [@Object, @any_typ, @Iterator2, 18446744073709551615 : i64], "offset_tbl" = [13 : i32, 10 : i32, 10 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 4189192806087951739 : i64, "base_typ" = !llvm.struct<(!llvm.ptr)>, "data_size_fn" = "_data_size_Iterator2", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "Iterable2", "methods" = [], "hash_tbl" = [@Object, 18446744073709551615 : i64, @any_typ, @Iterable2], "offset_tbl" = [33 : i32, 0 : i32, 10 : i32, 10 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 5693646204635713916 : i64, "base_typ" = !llvm.struct<(!llvm.ptr)>, "data_size_fn" = "_data_size_Iterable2", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "Array", "methods" = [@Array_field_Array_0, @Array_field_buffer, @Array_field_length, @Array_field_capacity, @Array_B__Self_from_iterable_iterableIterable2T, @Array_B_init_, @Array_B_init_capacityPtri32, @Array_B_length_, @Array_B_capacity_, @Array_B_append_xT, @Array_B_grow_, @Array_B__index_xPtri32, @Array_B_throw_oob_xPtri32, @Array_B_unsafe_index_xPtri32, @Array_B_iterator_, @Array_B_each_fFunctionT_to_Nothing, @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, @Array_B_all_fFunctionT_to_Ptri1, @Array_B_any_fFunctionT_to_Ptri1, @Array_B_map_fFunctionT_to_U, @Array_B_filter_fFunctionT_to_Ptri1, @Array_B_chain_otherIterable2T, @Array_B_interleave_otherIterable2T, @Array_B_zip_otherIterable2U, @Array_B_product_otherIterable2U, @Array__Self_from_iterable_iterableIterable2T, @Array_init_, @Array_init_capacityPtri32, @Array_length_, @Array_capacity_, @Array_append_xT, @Array_grow_, @Array__index_xPtri32, @Array_throw_oob_xPtri32, @Array_unsafe_index_xPtri32, @Array_iterator_, @Iterable2_each_fFunctionT_to_Nothing, @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable2_all_fFunctionT_to_Ptri1, @Iterable2_any_fFunctionT_to_Ptri1, @Iterable2_map_fFunctionT_to_U, @Iterable2_filter_fFunctionT_to_Ptri1, @Iterable2_chain_otherIterable2T, @Iterable2_interleave_otherIterable2T, @Iterable2_zip_otherIterable2U, @Iterable2_product_otherIterable2U, @Array_field_Array_0, @Array_B_iterator_, @Array_B_each_fFunctionT_to_Nothing, @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, @Array_B_all_fFunctionT_to_Ptri1, @Array_B_any_fFunctionT_to_Ptri1, @Array_B_map_fFunctionT_to_U, @Array_B_filter_fFunctionT_to_Ptri1, @Array_B_chain_otherIterable2T, @Array_B_interleave_otherIterable2T, @Array_B_zip_otherIterable2U, @Array_B_product_otherIterable2U, @Array_iterator_, @Iterable2_each_fFunctionT_to_Nothing, @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable2_all_fFunctionT_to_Ptri1, @Iterable2_any_fFunctionT_to_Ptri1, @Iterable2_map_fFunctionT_to_U, @Iterable2_filter_fFunctionT_to_Ptri1, @Iterable2_chain_otherIterable2T, @Iterable2_interleave_otherIterable2T, @Iterable2_zip_otherIterable2U, @Iterable2_product_otherIterable2U], "hash_tbl" = [@Object, @Iterable2, @Array, @any_typ], "offset_tbl" = [79 : i32, 56 : i32, 10 : i32, 10 : i32], "prime" = 4611686018427388721 : i64, "hash_id" = 13185201323315417072 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32)>, "data_size_fn" = "_data_size_Array", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "ArrayIterator", "methods" = [@ArrayIterator_field_ArrayIterator_0, @ArrayIterator_field_array, @ArrayIterator_field_index, @ArrayIterator_B_init_arrayArrayT, @ArrayIterator_B_next_, @ArrayIterator_init_arrayArrayT, @ArrayIterator_next_, @ArrayIterator_field_ArrayIterator_0, @ArrayIterator_B_next_, @ArrayIterator_next_], "hash_tbl" = [@ArrayIterator, @Object, @any_typ, @Iterator2], "offset_tbl" = [10 : i32, 20 : i32, 10 : i32, 17 : i32], "prime" = 4611686018427388181 : i64, "hash_id" = 3447345754186651411 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32)>, "data_size_fn" = "_data_size_ArrayIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "MapIterable2", "methods" = [@MapIterable2_field_MapIterable2_0, @MapIterable2_field_MapIterable2_1, @MapIterable2_field_iterable, @MapIterable2_field_f, @MapIterable2_B_init_iterableIterable2T_fFunctionT_to_U, @MapIterable2_B_iterator_, @MapIterable2_B_each_fFunctionT_to_Nothing, @MapIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, @MapIterable2_B_all_fFunctionT_to_Ptri1, @MapIterable2_B_any_fFunctionT_to_Ptri1, @MapIterable2_B_map_fFunctionT_to_U, @MapIterable2_B_filter_fFunctionT_to_Ptri1, @MapIterable2_B_chain_otherIterable2T, @MapIterable2_B_interleave_otherIterable2T, @MapIterable2_B_zip_otherIterable2U, @MapIterable2_B_product_otherIterable2U, @MapIterable2_init_iterableIterable2T_fFunctionT_to_U, @MapIterable2_iterator_, @Iterable2_each_fFunctionT_to_Nothing, @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable2_all_fFunctionT_to_Ptri1, @Iterable2_any_fFunctionT_to_Ptri1, @Iterable2_map_fFunctionT_to_U, @Iterable2_filter_fFunctionT_to_Ptri1, @Iterable2_chain_otherIterable2T, @Iterable2_interleave_otherIterable2T, @Iterable2_zip_otherIterable2U, @Iterable2_product_otherIterable2U, @MapIterable2_field_MapIterable2_1, @MapIterable2_B_iterator_, @MapIterable2_B_each_fFunctionT_to_Nothing, @MapIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, @MapIterable2_B_all_fFunctionT_to_Ptri1, @MapIterable2_B_any_fFunctionT_to_Ptri1, @MapIterable2_B_map_fFunctionT_to_U, @MapIterable2_B_filter_fFunctionT_to_Ptri1, @MapIterable2_B_chain_otherIterable2T, @MapIterable2_B_interleave_otherIterable2T, @MapIterable2_B_zip_otherIterable2U, @MapIterable2_B_product_otherIterable2U, @MapIterable2_iterator_, @Iterable2_each_fFunctionT_to_Nothing, @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable2_all_fFunctionT_to_Ptri1, @Iterable2_any_fFunctionT_to_Ptri1, @Iterable2_map_fFunctionT_to_U, @Iterable2_filter_fFunctionT_to_Ptri1, @Iterable2_chain_otherIterable2T, @Iterable2_interleave_otherIterable2T, @Iterable2_zip_otherIterable2U, @Iterable2_product_otherIterable2U], "hash_tbl" = [@Object, @MapIterable2, @any_typ, @Iterable2], "offset_tbl" = [61 : i32, 10 : i32, 10 : i32, 38 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 16721884939112659687 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "data_size_fn" = "_data_size_MapIterable2", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "MapIterator2", "methods" = [@MapIterator2_field_MapIterator2_0, @MapIterator2_field_MapIterator2_1, @MapIterator2_field_iterator, @MapIterator2_field_f, @MapIterator2_B_init_iteratorIterator2T_fFunctionT_to_U, @MapIterator2_B_next_, @MapIterator2_init_iteratorIterator2T_fFunctionT_to_U, @MapIterator2_next_, @MapIterator2_field_MapIterator2_1, @MapIterator2_B_next_, @MapIterator2_next_], "hash_tbl" = [@Object, @Iterator2, @MapIterator2, @any_typ], "offset_tbl" = [21 : i32, 18 : i32, 10 : i32, 10 : i32], "prime" = 4611686018427388279 : i64, "hash_id" = 18436488126000279116 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "data_size_fn" = "_data_size_MapIterator2", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "FilterIterable2", "methods" = [@FilterIterable2_field_FilterIterable2_0, @FilterIterable2_field_iterable, @FilterIterable2_field_f, @FilterIterable2_B_init_iterableIterable2T_fFunctionT_to_Ptri1, @FilterIterable2_B_iterator_, @FilterIterable2_B_each_fFunctionT_to_Nothing, @FilterIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, @FilterIterable2_B_all_fFunctionT_to_Ptri1, @FilterIterable2_B_any_fFunctionT_to_Ptri1, @FilterIterable2_B_map_fFunctionT_to_U, @FilterIterable2_B_filter_fFunctionT_to_Ptri1, @FilterIterable2_B_chain_otherIterable2T, @FilterIterable2_B_interleave_otherIterable2T, @FilterIterable2_B_zip_otherIterable2U, @FilterIterable2_B_product_otherIterable2U, @FilterIterable2_init_iterableIterable2T_fFunctionT_to_Ptri1, @FilterIterable2_iterator_, @Iterable2_each_fFunctionT_to_Nothing, @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable2_all_fFunctionT_to_Ptri1, @Iterable2_any_fFunctionT_to_Ptri1, @Iterable2_map_fFunctionT_to_U, @Iterable2_filter_fFunctionT_to_Ptri1, @Iterable2_chain_otherIterable2T, @Iterable2_interleave_otherIterable2T, @Iterable2_zip_otherIterable2U, @Iterable2_product_otherIterable2U, @FilterIterable2_field_FilterIterable2_0, @FilterIterable2_B_iterator_, @FilterIterable2_B_each_fFunctionT_to_Nothing, @FilterIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, @FilterIterable2_B_all_fFunctionT_to_Ptri1, @FilterIterable2_B_any_fFunctionT_to_Ptri1, @FilterIterable2_B_map_fFunctionT_to_U, @FilterIterable2_B_filter_fFunctionT_to_Ptri1, @FilterIterable2_B_chain_otherIterable2T, @FilterIterable2_B_interleave_otherIterable2T, @FilterIterable2_B_zip_otherIterable2U, @FilterIterable2_B_product_otherIterable2U, @FilterIterable2_iterator_, @Iterable2_each_fFunctionT_to_Nothing, @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable2_all_fFunctionT_to_Ptri1, @Iterable2_any_fFunctionT_to_Ptri1, @Iterable2_map_fFunctionT_to_U, @Iterable2_filter_fFunctionT_to_Ptri1, @Iterable2_chain_otherIterable2T, @Iterable2_interleave_otherIterable2T, @Iterable2_zip_otherIterable2U, @Iterable2_product_otherIterable2U], "hash_tbl" = [@Iterable2, @FilterIterable2, @any_typ, @Object], "offset_tbl" = [37 : i32, 10 : i32, 10 : i32, 60 : i32], "prime" = 4611686018427388093 : i64, "hash_id" = 1178467452958968374 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "data_size_fn" = "_data_size_FilterIterable2", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "FilterIterator2", "methods" = [@FilterIterator2_field_FilterIterator2_0, @FilterIterator2_field_iterator, @FilterIterator2_field_f, @FilterIterator2_B_init_iteratorIterator2T_fFunctionT_to_Ptri1, @FilterIterator2_B_next_, @FilterIterator2_init_iteratorIterator2T_fFunctionT_to_Ptri1, @FilterIterator2_next_, @FilterIterator2_field_FilterIterator2_0, @FilterIterator2_B_next_, @FilterIterator2_next_], "hash_tbl" = [@any_typ, @Object, @Iterator2, @FilterIterator2], "offset_tbl" = [10 : i32, 20 : i32, 17 : i32, 10 : i32], "prime" = 4611686018427388387 : i64, "hash_id" = 8213847504843366470 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "data_size_fn" = "_data_size_FilterIterator2", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "ChainIterable2", "methods" = [@ChainIterable2_field_ChainIterable2_0, @ChainIterable2_field_first, @ChainIterable2_field_second, @ChainIterable2_B_init_firstIterable2T_secondIterable2T, @ChainIterable2_B_iterator_, @ChainIterable2_B_each_fFunctionT_to_Nothing, @ChainIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, @ChainIterable2_B_all_fFunctionT_to_Ptri1, @ChainIterable2_B_any_fFunctionT_to_Ptri1, @ChainIterable2_B_map_fFunctionT_to_U, @ChainIterable2_B_filter_fFunctionT_to_Ptri1, @ChainIterable2_B_chain_otherIterable2T, @ChainIterable2_B_interleave_otherIterable2T, @ChainIterable2_B_zip_otherIterable2U, @ChainIterable2_B_product_otherIterable2U, @ChainIterable2_init_firstIterable2T_secondIterable2T, @ChainIterable2_iterator_, @Iterable2_each_fFunctionT_to_Nothing, @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable2_all_fFunctionT_to_Ptri1, @Iterable2_any_fFunctionT_to_Ptri1, @Iterable2_map_fFunctionT_to_U, @Iterable2_filter_fFunctionT_to_Ptri1, @Iterable2_chain_otherIterable2T, @Iterable2_interleave_otherIterable2T, @Iterable2_zip_otherIterable2U, @Iterable2_product_otherIterable2U, @ChainIterable2_field_ChainIterable2_0, @ChainIterable2_B_iterator_, @ChainIterable2_B_each_fFunctionT_to_Nothing, @ChainIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, @ChainIterable2_B_all_fFunctionT_to_Ptri1, @ChainIterable2_B_any_fFunctionT_to_Ptri1, @ChainIterable2_B_map_fFunctionT_to_U, @ChainIterable2_B_filter_fFunctionT_to_Ptri1, @ChainIterable2_B_chain_otherIterable2T, @ChainIterable2_B_interleave_otherIterable2T, @ChainIterable2_B_zip_otherIterable2U, @ChainIterable2_B_product_otherIterable2U, @ChainIterable2_iterator_, @Iterable2_each_fFunctionT_to_Nothing, @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable2_all_fFunctionT_to_Ptri1, @Iterable2_any_fFunctionT_to_Ptri1, @Iterable2_map_fFunctionT_to_U, @Iterable2_filter_fFunctionT_to_Ptri1, @Iterable2_chain_otherIterable2T, @Iterable2_interleave_otherIterable2T, @Iterable2_zip_otherIterable2U, @Iterable2_product_otherIterable2U], "hash_tbl" = [@Object, @Iterable2, @ChainIterable2, @any_typ], "offset_tbl" = [60 : i32, 37 : i32, 10 : i32, 10 : i32], "prime" = 4611686018427388279 : i64, "hash_id" = 13213446000764521556 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_ChainIterable2", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "ChainIterator2", "methods" = [@ChainIterator2_field_ChainIterator2_0, @ChainIterator2_field_first, @ChainIterator2_field_second, @ChainIterator2_field_on_first, @ChainIterator2_B_init_firstIterator2T_secondIterator2T, @ChainIterator2_B_next_, @ChainIterator2_init_firstIterator2T_secondIterator2T, @ChainIterator2_next_, @ChainIterator2_field_ChainIterator2_0, @ChainIterator2_B_next_, @ChainIterator2_next_], "hash_tbl" = [@Object, @any_typ, @Iterator2, @ChainIterator2], "offset_tbl" = [21 : i32, 10 : i32, 18 : i32, 10 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 18218476088649089842 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1)>, "data_size_fn" = "_data_size_ChainIterator2", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "InterleaveIterable2", "methods" = [@InterleaveIterable2_field_InterleaveIterable2_0, @InterleaveIterable2_field_first, @InterleaveIterable2_field_second, @InterleaveIterable2_B_init_firstIterable2T_secondIterable2T, @InterleaveIterable2_B_iterator_, @InterleaveIterable2_B_each_fFunctionT_to_Nothing, @InterleaveIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, @InterleaveIterable2_B_all_fFunctionT_to_Ptri1, @InterleaveIterable2_B_any_fFunctionT_to_Ptri1, @InterleaveIterable2_B_map_fFunctionT_to_U, @InterleaveIterable2_B_filter_fFunctionT_to_Ptri1, @InterleaveIterable2_B_chain_otherIterable2T, @InterleaveIterable2_B_interleave_otherIterable2T, @InterleaveIterable2_B_zip_otherIterable2U, @InterleaveIterable2_B_product_otherIterable2U, @InterleaveIterable2_init_firstIterable2T_secondIterable2T, @InterleaveIterable2_iterator_, @Iterable2_each_fFunctionT_to_Nothing, @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable2_all_fFunctionT_to_Ptri1, @Iterable2_any_fFunctionT_to_Ptri1, @Iterable2_map_fFunctionT_to_U, @Iterable2_filter_fFunctionT_to_Ptri1, @Iterable2_chain_otherIterable2T, @Iterable2_interleave_otherIterable2T, @Iterable2_zip_otherIterable2U, @Iterable2_product_otherIterable2U, @InterleaveIterable2_field_InterleaveIterable2_0, @InterleaveIterable2_B_iterator_, @InterleaveIterable2_B_each_fFunctionT_to_Nothing, @InterleaveIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, @InterleaveIterable2_B_all_fFunctionT_to_Ptri1, @InterleaveIterable2_B_any_fFunctionT_to_Ptri1, @InterleaveIterable2_B_map_fFunctionT_to_U, @InterleaveIterable2_B_filter_fFunctionT_to_Ptri1, @InterleaveIterable2_B_chain_otherIterable2T, @InterleaveIterable2_B_interleave_otherIterable2T, @InterleaveIterable2_B_zip_otherIterable2U, @InterleaveIterable2_B_product_otherIterable2U, @InterleaveIterable2_iterator_, @Iterable2_each_fFunctionT_to_Nothing, @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable2_all_fFunctionT_to_Ptri1, @Iterable2_any_fFunctionT_to_Ptri1, @Iterable2_map_fFunctionT_to_U, @Iterable2_filter_fFunctionT_to_Ptri1, @Iterable2_chain_otherIterable2T, @Iterable2_interleave_otherIterable2T, @Iterable2_zip_otherIterable2U, @Iterable2_product_otherIterable2U], "hash_tbl" = [@Iterable2, @InterleaveIterable2, @any_typ, @Object], "offset_tbl" = [37 : i32, 10 : i32, 10 : i32, 60 : i32], "prime" = 4611686018427388093 : i64, "hash_id" = 12188512388494089841 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_InterleaveIterable2", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "InterleaveIterator2", "methods" = [@InterleaveIterator2_field_InterleaveIterator2_0, @InterleaveIterator2_field_first, @InterleaveIterator2_field_second, @InterleaveIterator2_field_on_first, @InterleaveIterator2_B_init_firstIterator2T_secondIterator2T, @InterleaveIterator2_B_next_, @InterleaveIterator2_init_firstIterator2T_secondIterator2T, @InterleaveIterator2_next_, @InterleaveIterator2_field_InterleaveIterator2_0, @InterleaveIterator2_B_next_, @InterleaveIterator2_next_], "hash_tbl" = [@Object, @Iterator2, @InterleaveIterator2, @any_typ], "offset_tbl" = [21 : i32, 18 : i32, 10 : i32, 10 : i32], "prime" = 4611686018427388279 : i64, "hash_id" = 6709847746581360093 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1)>, "data_size_fn" = "_data_size_InterleaveIterator2", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "ZipIterable2", "methods" = [@ZipIterable2_field_ZipIterable2_0, @ZipIterable2_field_ZipIterable2_1, @ZipIterable2_field_ZipIterable2_2, @ZipIterable2_field_first, @ZipIterable2_field_second, @ZipIterable2_B_init_firstIterable2T_secondIterable2U, @ZipIterable2_B_iterator_, @ZipIterable2_B_each_fFunctionT_to_Nothing, @ZipIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, @ZipIterable2_B_all_fFunctionT_to_Ptri1, @ZipIterable2_B_any_fFunctionT_to_Ptri1, @ZipIterable2_B_map_fFunctionT_to_U, @ZipIterable2_B_filter_fFunctionT_to_Ptri1, @ZipIterable2_B_chain_otherIterable2T, @ZipIterable2_B_interleave_otherIterable2T, @ZipIterable2_B_zip_otherIterable2U, @ZipIterable2_B_product_otherIterable2U, @ZipIterable2_init_firstIterable2T_secondIterable2U, @ZipIterable2_iterator_, @Iterable2_each_fFunctionT_to_Nothing, @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable2_all_fFunctionT_to_Ptri1, @Iterable2_any_fFunctionT_to_Ptri1, @Iterable2_map_fFunctionT_to_U, @Iterable2_filter_fFunctionT_to_Ptri1, @Iterable2_chain_otherIterable2T, @Iterable2_interleave_otherIterable2T, @Iterable2_zip_otherIterable2U, @Iterable2_product_otherIterable2U, @ZipIterable2_field_ZipIterable2_2, @ZipIterable2_B_iterator_, @ZipIterable2_B_each_fFunctionT_to_Nothing, @ZipIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, @ZipIterable2_B_all_fFunctionT_to_Ptri1, @ZipIterable2_B_any_fFunctionT_to_Ptri1, @ZipIterable2_B_map_fFunctionT_to_U, @ZipIterable2_B_filter_fFunctionT_to_Ptri1, @ZipIterable2_B_chain_otherIterable2T, @ZipIterable2_B_interleave_otherIterable2T, @ZipIterable2_B_zip_otherIterable2U, @ZipIterable2_B_product_otherIterable2U, @ZipIterable2_iterator_, @Iterable2_each_fFunctionT_to_Nothing, @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable2_all_fFunctionT_to_Ptri1, @Iterable2_any_fFunctionT_to_Ptri1, @Iterable2_map_fFunctionT_to_U, @Iterable2_filter_fFunctionT_to_Ptri1, @Iterable2_chain_otherIterable2T, @Iterable2_interleave_otherIterable2T, @Iterable2_zip_otherIterable2U, @Iterable2_product_otherIterable2U], "hash_tbl" = [@any_typ, @ZipIterable2, @Iterable2, @Object], "offset_tbl" = [10 : i32, 10 : i32, 39 : i32, 62 : i32], "prime" = 4611686018427388289 : i64, "hash_id" = 15227793494662031801 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_ZipIterable2", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "ZipIterator2", "methods" = [@ZipIterator2_field_ZipIterator2_0, @ZipIterator2_field_ZipIterator2_1, @ZipIterator2_field_ZipIterator2_2, @ZipIterator2_field_first, @ZipIterator2_field_second, @ZipIterator2_B_init_firstIterator2T_secondIterator2U, @ZipIterator2_B_next_, @ZipIterator2_init_firstIterator2T_secondIterator2U, @ZipIterator2_next_, @ZipIterator2_field_ZipIterator2_2, @ZipIterator2_B_next_, @ZipIterator2_next_], "hash_tbl" = [@Object, @any_typ, @Iterator2, @ZipIterator2], "offset_tbl" = [22 : i32, 10 : i32, 19 : i32, 10 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 5502728639611621286 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_ZipIterator2", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "ProductIterable2", "methods" = [@ProductIterable2_field_ProductIterable2_0, @ProductIterable2_field_ProductIterable2_1, @ProductIterable2_field_ProductIterable2_2, @ProductIterable2_field_first, @ProductIterable2_field_second, @ProductIterable2_B_init_firstIterable2T_secondIterable2U, @ProductIterable2_B_iterator_, @ProductIterable2_B_each_fFunctionT_to_Nothing, @ProductIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, @ProductIterable2_B_all_fFunctionT_to_Ptri1, @ProductIterable2_B_any_fFunctionT_to_Ptri1, @ProductIterable2_B_map_fFunctionT_to_U, @ProductIterable2_B_filter_fFunctionT_to_Ptri1, @ProductIterable2_B_chain_otherIterable2T, @ProductIterable2_B_interleave_otherIterable2T, @ProductIterable2_B_zip_otherIterable2U, @ProductIterable2_B_product_otherIterable2U, @ProductIterable2_init_firstIterable2T_secondIterable2U, @ProductIterable2_iterator_, @Iterable2_each_fFunctionT_to_Nothing, @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable2_all_fFunctionT_to_Ptri1, @Iterable2_any_fFunctionT_to_Ptri1, @Iterable2_map_fFunctionT_to_U, @Iterable2_filter_fFunctionT_to_Ptri1, @Iterable2_chain_otherIterable2T, @Iterable2_interleave_otherIterable2T, @Iterable2_zip_otherIterable2U, @Iterable2_product_otherIterable2U, @ProductIterable2_field_ProductIterable2_2, @ProductIterable2_B_iterator_, @ProductIterable2_B_each_fFunctionT_to_Nothing, @ProductIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, @ProductIterable2_B_all_fFunctionT_to_Ptri1, @ProductIterable2_B_any_fFunctionT_to_Ptri1, @ProductIterable2_B_map_fFunctionT_to_U, @ProductIterable2_B_filter_fFunctionT_to_Ptri1, @ProductIterable2_B_chain_otherIterable2T, @ProductIterable2_B_interleave_otherIterable2T, @ProductIterable2_B_zip_otherIterable2U, @ProductIterable2_B_product_otherIterable2U, @ProductIterable2_iterator_, @Iterable2_each_fFunctionT_to_Nothing, @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable2_all_fFunctionT_to_Ptri1, @Iterable2_any_fFunctionT_to_Ptri1, @Iterable2_map_fFunctionT_to_U, @Iterable2_filter_fFunctionT_to_Ptri1, @Iterable2_chain_otherIterable2T, @Iterable2_interleave_otherIterable2T, @Iterable2_zip_otherIterable2U, @Iterable2_product_otherIterable2U], "hash_tbl" = [@ProductIterable2, @Object, @any_typ, @Iterable2], "offset_tbl" = [10 : i32, 62 : i32, 10 : i32, 39 : i32], "prime" = 4611686018427388319 : i64, "hash_id" = 7827074759551300494 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_ProductIterable2", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "ProductIterator2", "methods" = [@ProductIterator2_field_ProductIterator2_0, @ProductIterator2_field_ProductIterator2_1, @ProductIterator2_field_ProductIterator2_2, @ProductIterator2_field_first_iterator, @ProductIterator2_field_second_iterator, @ProductIterator2_field_second_iterable, @ProductIterator2_field_current_first, @ProductIterator2_B_init_first_iterableIterable2T_second_iterableIterable2U, @ProductIterator2_B_next_, @ProductIterator2_init_first_iterableIterable2T_second_iterableIterable2U, @ProductIterator2_next_, @ProductIterator2_field_ProductIterator2_2, @ProductIterator2_B_next_, @ProductIterator2_next_], "hash_tbl" = [@ProductIterator2, @Iterator2, @any_typ, @Object], "offset_tbl" = [10 : i32, 21 : i32, 10 : i32, 24 : i32], "prime" = 4611686018427388093 : i64, "hash_id" = 4440657219728359865 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>)>, "data_size_fn" = "_data_size_ProductIterator2", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "Math", "methods" = [@Math_B__Self_sqrt_xPtrf64, @Math_B__Self_abs_xPtrf64__Self_abs_xPtri32, @Math_B__Self_max_aPtri32_bPtri32__Self_max_aPtrf64_bPtrf64, @Math_B__Self_min_aPtri32_bPtri32__Self_min_aPtrf64_bPtrf64, @Math_B__Self_round_xPtrf64, @Math_B__Self_floor_xPtrf64, @Math_B__Self_ceiling_xPtrf64, @Math__Self_sqrt_xPtrf64, @Math__Self_abs_xPtrf64, @Math__Self_abs_xPtri32, @Math__Self_max_aPtri32_bPtri32, @Math__Self_max_aPtrf64_bPtrf64, @Math__Self_min_aPtri32_bPtri32, @Math__Self_min_aPtrf64_bPtrf64, @Math__Self_round_xPtrf64, @Math__Self_floor_xPtrf64, @Math__Self_ceiling_xPtrf64], "hash_tbl" = [@Object, 18446744073709551615 : i64, @any_typ, @Math], "offset_tbl" = [27 : i32, 0 : i32, 10 : i32, 10 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 8094150130346788308 : i64, "base_typ" = !llvm.struct<()>, "data_size_fn" = "_data_size_Math", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "Integer", "methods" = [@Integer_field_value, @Integer_B_init_valuePtri32, @Integer_B__ADD_otherPtri32, @Integer_B__SUB_otherPtri32, @Integer_B__MUL_otherPtri32, @Integer_B__DIV_otherPtri32, @Integer_B_print_, @Integer_init_valuePtri32, @Integer__ADD_otherPtri32, @Integer__SUB_otherPtri32, @Integer__MUL_otherPtri32, @Integer__DIV_otherPtri32, @Integer_print_], "hash_tbl" = [@Object, @any_typ, 18446744073709551615 : i64, @Integer], "offset_tbl" = [23 : i32, 10 : i32, 0 : i32, 10 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 17711596130900473384 : i64, "base_typ" = !llvm.struct<(i32)>, "data_size_fn" = "_data_size_Integer", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "BigBoy", "methods" = [@BigBoy_B_introduce_, @BigBoy_B_repr_, @BigBoy_introduce_, @Representable_repr_, @BigBoy_B_repr_, @Representable_repr_], "hash_tbl" = [@Representable, @Object, @any_typ, @BigBoy], "offset_tbl" = [14 : i32, 16 : i32, 10 : i32, 10 : i32], "prime" = 4611686018427388361 : i64, "hash_id" = 3069357308562348185 : i64, "base_typ" = !llvm.struct<()>, "data_size_fn" = "_data_size_BigBoy", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "Integer2", "methods" = [@Integer2_field_value, @Integer2_B_value_, @Integer2_B_init_valuePtri32, @Integer2_B__ADD_otherPtri32, @Integer2_B__SUB_otherPtri32, @Integer2_B__MUL_otherPtri32, @Integer2_B__DIV_otherPtri32, @Integer2_B_print_, @Integer2_B_introduce_, @Integer2_B_repr_, @Integer2_value_, @Integer_init_valuePtri32, @Integer__ADD_otherPtri32, @Integer__SUB_otherPtri32, @Integer__MUL_otherPtri32, @Integer__DIV_otherPtri32, @Integer_print_, @BigBoy_introduce_, @Integer2_repr_, @Integer2_field_value, @Integer2_B_init_valuePtri32, @Integer2_B__ADD_otherPtri32, @Integer2_B__SUB_otherPtri32, @Integer2_B__MUL_otherPtri32, @Integer2_B__DIV_otherPtri32, @Integer2_B_print_, @Integer_init_valuePtri32, @Integer__ADD_otherPtri32, @Integer__SUB_otherPtri32, @Integer__MUL_otherPtri32, @Integer__DIV_otherPtri32, @Integer_print_, @Integer2_B_introduce_, @Integer2_B_repr_, @BigBoy_introduce_, @Integer2_repr_, @Integer2_B_repr_, @Integer2_repr_, @Integer2_B_repr_, @Integer2_repr_], "hash_tbl" = [18446744073709551615 : i64, @Object, @any_typ, @Integer2, @Integer, @Representable, 18446744073709551615 : i64, @BigBoy], "offset_tbl" = [0 : i32, 42 : i32, 10 : i32, 10 : i32, 29 : i32, 48 : i32, 0 : i32, 42 : i32], "prime" = 4611686018427388181 : i64, "hash_id" = 1844024195090879880 : i64, "base_typ" = !llvm.struct<(i32)>, "data_size_fn" = "_data_size_Integer2", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "Animal", "methods" = [@Animal_field_age, @Animal_field_hp, @Animal_field_skill, @Animal_B_init_agePtri32_hpPtrf64_skillPtri32, @Animal_B_say_age_, @Animal_B_say_skill_, @Animal_B_say_messagePtri32, @Animal_B_do_nothing_, @Animal_init_agePtri32_hpPtrf64_skillPtri32, @Animal_say_age_, @Animal_say_skill_, @Animal_say_messagePtri32, @Animal_do_nothing_], "hash_tbl" = [@Object, 18446744073709551615 : i64, @any_typ, @Animal], "offset_tbl" = [23 : i32, 0 : i32, 10 : i32, 10 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 1075018126824711487 : i64, "base_typ" = !llvm.struct<(i32, f64, i32)>, "data_size_fn" = "_data_size_Animal", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "Beaver", "methods" = [@Beaver_field_color, @Beaver_field_name, @Beaver_B_init_colorPtri32_namePtrf64, @Beaver_B__ADD_xPtri32, @Beaver_B_say_color_, @Beaver_init_colorPtri32_namePtrf64, @Beaver__ADD_xPtri32, @Beaver_say_color_], "hash_tbl" = [18446744073709551615 : i64, @Object, @any_typ, @Beaver], "offset_tbl" = [0 : i32, 18 : i32, 10 : i32, 10 : i32], "prime" = 4611686018427388097 : i64, "hash_id" = 12321971123808713154 : i64, "base_typ" = !llvm.struct<(i32, f64)>, "data_size_fn" = "_data_size_Beaver", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "ListNode", "methods" = [@ListNode_field_data, @ListNode_field_next, @ListNode_B_init_dataPtri32, @ListNode_B_push_nextListNode, @ListNode_B_next_, @ListNode_B_data_, @ListNode_B_iterator_, @ListNode_init_dataPtri32, @ListNode_push_nextListNode, @ListNode_next_, @ListNode_data_, @ListNode_iterator_], "hash_tbl" = [@Object, @any_typ, 18446744073709551615 : i64, @ListNode], "offset_tbl" = [22 : i32, 10 : i32, 0 : i32, 10 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 16690719123176460140 : i64, "base_typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, i160)>)>, "data_size_fn" = "_data_size_ListNode", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "ListIterator", "methods" = [@ListIterator_field_node, @ListIterator_B_init_nodeListNode, @ListIterator_B_next_, @ListIterator_init_nodeListNode, @ListIterator_next_], "hash_tbl" = [@Object, @any_typ, @ListIterator, 18446744073709551615 : i64], "offset_tbl" = [15 : i32, 10 : i32, 10 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 12608044127096990237 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_ListIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "Bard", "methods" = [@Bard_B_init_, @Bard_B_take_aPtri32_bPtri32_take_aAnimal_bBeaver_take_aPtrf64_bPtrf64_take_aPtri32_bPtrf64, @Bard_init_, @Bard_take_aPtri32_bPtri32, @Bard_take_aAnimal_bBeaver, @Bard_take_aPtrf64_bPtrf64, @Bard_take_aPtri32_bPtrf64], "hash_tbl" = [@Object, @any_typ, @Bard, 18446744073709551615 : i64], "offset_tbl" = [17 : i32, 10 : i32, 10 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 10466828736622358523 : i64, "base_typ" = !llvm.struct<()>, "data_size_fn" = "_data_size_Bard", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_Iterator", "types" = []} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_Iterable", "types" = []} : () -> ()
  "mini.func"() ({
  ^bb0(%0 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1 : !llvm.ptr):
    %2 = "mini.invariant"(%1) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1] : () -> ()
  ^bb1:
    %4 = "llvm.mlir.constant"() <{"value" = 1 : i32}> : () -> i32
    "llvm.store"(%4, %3) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb2] : () -> ()
  ^bb2:
    %5 = "llvm.extractvalue"(%0) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6 = "llvm.load"(%3) : (!llvm.ptr) -> i32
    %7 = "llvm.getelementptr"(%5, %6) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %9 = "llvm.getelementptr"(%7, %8) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9) : (!llvm.ptr) -> ()
  }) {"func_name" = "Iterable_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_Representable", "types" = []} : () -> ()
  "mini.func"() ({
  ^bb3(%10 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12 : !llvm.ptr):
    %13 = "mini.wrap"(%10) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Representable">
    %14 = "mini.to_fat_ptr"(%13) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Representable", "to_typ_name" = "Representable"} : (!mini.fatptr<"Representable">) -> !mini.fatptr<"Representable">
    %15 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %16 = "mini.create_buffer"(%15) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %17 = builtin.unrealized_conversion_cast %16 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %18 = "mini.refer"(%17) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %19 = "mini.literal"() {"typ" = !llvm.array<6 x i8>, "value" = "Object"} : () -> !llvm.ptr
    %20 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%18, %20, %19) {"typ" = !llvm.array<6 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %21 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %22 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %23 = "mini.unwrap"(%18) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %24 = "mini.unwrap"(%21) : (!mini.ptr<i32>) -> i32
    %25 = "mini.unwrap"(%22) : (!mini.ptr<i32>) -> i32
    %26 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %27 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %28 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %29 = builtin.unrealized_conversion_cast %18 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %30 = "mini.unwrap"(%29) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %31 = builtin.unrealized_conversion_cast %27 : !mini.ptr<i32> to !mini.ptr<i32>
    %32 = "mini.unwrap"(%31) : (!mini.ptr<i32>) -> i32
    %33 = builtin.unrealized_conversion_cast %28 : !mini.ptr<i32> to !mini.ptr<i32>
    %34 = "mini.unwrap"(%33) : (!mini.ptr<i32>) -> i32
    %35 = "mini.unwrap"(%26) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %36 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %37 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %38 = "mini.parameterizations_array"(%36, %37, %37) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%38, %35, %30, %32, %34) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %39 = "mini.to_fat_ptr"(%26) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.return"(%39) : (!mini.fatptr<"String">) -> ()
  }) {"func_name" = "Representable_repr_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb4(%40 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %41 : !llvm.ptr):
    %42 = "mini.invariant"(%41) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %43 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb5] : () -> ()
  ^bb5:
    %44 = "llvm.mlir.constant"() <{"value" = 1 : i32}> : () -> i32
    "llvm.store"(%44, %43) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb6] : () -> ()
  ^bb6:
    %45 = "llvm.extractvalue"(%40) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %46 = "llvm.load"(%43) : (!llvm.ptr) -> i32
    %47 = "llvm.getelementptr"(%45, %46) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %48 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %49 = "llvm.getelementptr"(%47, %48) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%49) : (!llvm.ptr) -> ()
  }) {"func_name" = "Representable_B_repr_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_String", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32]} : () -> ()
  "mini.getter_def"() {"meth_name" = "String_getter_bytes", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_BufferPtri8"} : () -> ()
  "mini.setter_def"() {"meth_name" = "String_setter_bytes", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_BufferPtri8"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "String_field_bytes", "getter_name" = "String_getter_bytes", "setter_name" = "String_setter_bytes"} : () -> ()
  "mini.getter_def"() {"meth_name" = "String_getter_length", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "String_setter_length", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "String_field_length", "getter_name" = "String_getter_length", "setter_name" = "String_setter_length"} : () -> ()
  "mini.getter_def"() {"meth_name" = "String_getter_capacity", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "String_setter_capacity", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "String_field_capacity", "getter_name" = "String_getter_capacity", "setter_name" = "String_setter_capacity"} : () -> ()
  "mini.func"() ({
  ^bb7(%50 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %51 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %52 : !llvm.ptr):
    %53 = "mini.wrap"(%50) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %54 = "mini.to_fat_ptr"(%53) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %55 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %56 = "mini.create_buffer"(%55) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %57 = builtin.unrealized_conversion_cast %56 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    "mini.set_field"(%54, %57) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">, !mini.buffer<!mini.ptr<i8>>) -> ()
    %58 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %59 = builtin.unrealized_conversion_cast %58 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%54, %59) {"offset" = 2 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">, !mini.ptr<i32>) -> ()
    %60 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %61 = builtin.unrealized_conversion_cast %60 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%54, %61) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">, !mini.ptr<i32>) -> ()
  }) {"func_name" = "String_init_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb8(%62 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %63 : !llvm.ptr):
    %64 = "mini.invariant"(%63) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %65 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb9] : () -> ()
  ^bb9:
    %66 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
    "llvm.store"(%66, %65) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb10] : () -> ()
  ^bb10:
    %67 = "llvm.extractvalue"(%62) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %68 = "llvm.load"(%65) : (!llvm.ptr) -> i32
    %69 = "llvm.getelementptr"(%67, %68) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<35 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %70 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %71 = "llvm.getelementptr"(%69, %70) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%71) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_init_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb11(%72 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %73 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %74 : !llvm.ptr, %75 : !llvm.struct<(!llvm.ptr)>, %76 : i32, %77 : i32):
    %78 = "mini.wrap"(%72) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %79 = "mini.to_fat_ptr"(%78) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %80 = "mini.wrap"(%75) : (!llvm.struct<(!llvm.ptr)>) -> !mini.buffer<!mini.ptr<i8>>
    %81 = builtin.unrealized_conversion_cast %80 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %82 = builtin.unrealized_conversion_cast %81 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    "mini.set_field"(%79, %82) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">, !mini.buffer<!mini.ptr<i8>>) -> ()
    %83 = "mini.wrap"(%76) : (i32) -> !mini.ptr<i32>
    %84 = builtin.unrealized_conversion_cast %83 : !mini.ptr<i32> to !mini.ptr<i32>
    %85 = builtin.unrealized_conversion_cast %84 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%79, %85) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">, !mini.ptr<i32>) -> ()
    %86 = "mini.wrap"(%77) : (i32) -> !mini.ptr<i32>
    %87 = builtin.unrealized_conversion_cast %86 : !mini.ptr<i32> to !mini.ptr<i32>
    %88 = builtin.unrealized_conversion_cast %87 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%79, %88) {"offset" = 2 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">, !mini.ptr<i32>) -> ()
  }) {"func_name" = "String_init_bytesBufferPtri8_lengthPtri32_capacityPtri32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb12(%89 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %90 : !llvm.ptr):
    %91 = "mini.invariant"(%90) {"num_bytes" = 24 : i64} : (!llvm.ptr) -> !llvm.ptr
    %92 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb13] : () -> ()
  ^bb14:
    %93 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%93, %92) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb15] : () -> ()
  ^bb16:
    %94 = "llvm.getelementptr"(%90) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %95 = "mini.checkflag"(%94) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %96 = "llvm.load"(%95) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%96) [^bb14, ^bb14] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb17:
    %97 = "llvm.getelementptr"(%90) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %98 = "mini.checkflag"(%97) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %99 = "llvm.load"(%98) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%99) [^bb16, ^bb16] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb13:
    %100 = "llvm.getelementptr"(%90) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %101 = "mini.checkflag"(%100) {"typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %102 = "llvm.load"(%101) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%102) [^bb17, ^bb17] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb15:
    %103 = "llvm.extractvalue"(%89) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %104 = "llvm.load"(%92) : (!llvm.ptr) -> i32
    %105 = "llvm.getelementptr"(%103, %104) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<35 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %106 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %107 = "llvm.getelementptr"(%105, %106) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%107) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_init_bytesBufferPtri8_lengthPtri32_capacityPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb18(%108 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %109 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %110 : !llvm.ptr):
    %111 = "mini.wrap"(%108) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %112 = "mini.to_fat_ptr"(%111) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %113 = "mini.get_field"(%112) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %114 = builtin.unrealized_conversion_cast %113 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.return"(%114) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "String_length_", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb19(%115 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %116 : !llvm.ptr):
    %117 = "mini.invariant"(%116) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %118 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb20] : () -> ()
  ^bb20:
    %119 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
    "llvm.store"(%119, %118) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb21] : () -> ()
  ^bb21:
    %120 = "llvm.extractvalue"(%115) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %121 = "llvm.load"(%118) : (!llvm.ptr) -> i32
    %122 = "llvm.getelementptr"(%120, %121) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<35 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %123 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %124 = "llvm.getelementptr"(%122, %123) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%124) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_length_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb22(%125 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %126 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %127 : !llvm.ptr):
    %128 = "mini.wrap"(%125) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %129 = "mini.to_fat_ptr"(%128) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %130 = "mini.get_field"(%129) {"offset" = 2 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %131 = builtin.unrealized_conversion_cast %130 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.return"(%131) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "String_capacity_", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb23(%132 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %133 : !llvm.ptr):
    %134 = "mini.invariant"(%133) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %135 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb24] : () -> ()
  ^bb24:
    %136 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
    "llvm.store"(%136, %135) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb25] : () -> ()
  ^bb25:
    %137 = "llvm.extractvalue"(%132) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %138 = "llvm.load"(%135) : (!llvm.ptr) -> i32
    %139 = "llvm.getelementptr"(%137, %138) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<35 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %140 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %141 = "llvm.getelementptr"(%139, %140) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%141) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_capacity_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb26(%142 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %143 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %144 : !llvm.ptr):
    %145 = "mini.wrap"(%142) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %146 = "mini.to_fat_ptr"(%145) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %147 = "mini.get_field"(%146) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
    %148 = builtin.unrealized_conversion_cast %147 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    "mini.return"(%148) : (!mini.buffer<!mini.ptr<i8>>) -> ()
  }) {"func_name" = "String_bytes_", "result_type" = !llvm.struct<(!llvm.ptr)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb27(%149 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %150 : !llvm.ptr):
    %151 = "mini.invariant"(%150) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %152 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb28] : () -> ()
  ^bb28:
    %153 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
    "llvm.store"(%153, %152) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb29] : () -> ()
  ^bb29:
    %154 = "llvm.extractvalue"(%149) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %155 = "llvm.load"(%152) : (!llvm.ptr) -> i32
    %156 = "llvm.getelementptr"(%154, %155) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<35 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %157 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %158 = "llvm.getelementptr"(%156, %157) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%158) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_bytes_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb30(%159 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %160 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %161 : !llvm.ptr, %162 : i8):
    %163 = "mini.wrap"(%159) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %164 = "mini.to_fat_ptr"(%163) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %165 = "mini.wrap"(%162) : (i8) -> !mini.ptr<i8>
    %166 = builtin.unrealized_conversion_cast %165 : !mini.ptr<i8> to !mini.ptr<i8>
    %167 = "mini.get_field"(%164) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %168 = "mini.get_field"(%164) {"offset" = 2 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %169 = "mini.unwrap"(%167) : (!mini.ptr<i32>) -> i32
    %170 = "mini.unwrap"(%168) : (!mini.ptr<i32>) -> i32
    %171 = "mini.comparison"(%169, %170) {"op" = "LT"} : (i32, i32) -> i1
    %172 = "mini.wrap"(%171) : (i1) -> !mini.ptr<i32>
    %173 = "mini.unwrap"(%172) : (!mini.ptr<i32>) -> i1
    "mini.if"(%173) ({
      %174 = "mini.get_field"(%164) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
      %175 = "mini.get_field"(%164) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
      %176 = builtin.unrealized_conversion_cast %166 : !mini.ptr<i8> to !mini.ptr<i8>
      "mini.buffer_set"(%174, %175, %176) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>, !mini.ptr<i8>) -> ()
      %177 = "mini.get_field"(%164) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
      %178 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %179 = "mini.unwrap"(%177) : (!mini.ptr<i32>) -> i32
      %180 = "mini.unwrap"(%178) : (!mini.ptr<i32>) -> i32
      %181 = "mini.arithmetic"(%179, %180) {"op" = "ADD"} : (i32, i32) -> i32
      %182 = "mini.wrap"(%181) : (i32) -> !mini.ptr<i32>
      %183 = builtin.unrealized_conversion_cast %182 : !mini.ptr<i32> to !mini.ptr<i32>
      "mini.set_field"(%164, %183) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">, !mini.ptr<i32>) -> ()
      %184 = "mini.to_fat_ptr"(%164) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
      "mini.return"(%184) : (!mini.fatptr<"String">) -> ()
    }) : (i1) -> ()
    %185 = "mini.get_field"(%164) {"offset" = 2 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %186 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %187 = "mini.unwrap"(%185) : (!mini.ptr<i32>) -> i32
    %188 = "mini.unwrap"(%186) : (!mini.ptr<i32>) -> i32
    %189 = "mini.arithmetic"(%187, %188) {"op" = "MUL"} : (i32, i32) -> i32
    %190 = "mini.wrap"(%189) : (i32) -> !mini.ptr<i32>
    %191 = builtin.unrealized_conversion_cast %190 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%164, %191) {"offset" = 2 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">, !mini.ptr<i32>) -> ()
    %192 = "mini.get_field"(%164) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
    %193 = builtin.unrealized_conversion_cast %192 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %194 = "mini.refer"(%193) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %195 = "mini.get_field"(%164) {"offset" = 2 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %196 = "mini.create_buffer"(%195) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %197 = builtin.unrealized_conversion_cast %196 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    "mini.set_field"(%164, %197) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">, !mini.buffer<!mini.ptr<i8>>) -> ()
    %198 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    "mini.while"() ({
      %199 = "mini.get_field"(%164) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
      %200 = "mini.unwrap"(%198) : (!mini.ptr<i32>) -> i32
      %201 = "mini.unwrap"(%199) : (!mini.ptr<i32>) -> i32
      %202 = "mini.comparison"(%200, %201) {"op" = "LT"} : (i32, i32) -> i1
      %203 = "mini.wrap"(%202) : (i1) -> !mini.ptr<i32>
      %204 = "mini.unwrap"(%203) : (!mini.ptr<i32>) -> i1
    }, {
      %205 = "mini.buffer_get"(%194, %198) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
      %206 = "mini.get_field"(%164) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
      %207 = builtin.unrealized_conversion_cast %205 : !mini.ptr<i8> to !mini.ptr<i8>
      "mini.buffer_set"(%206, %198, %207) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>, !mini.ptr<i8>) -> ()
      %208 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %209 = "mini.unwrap"(%198) : (!mini.ptr<i32>) -> i32
      %210 = "mini.unwrap"(%208) : (!mini.ptr<i32>) -> i32
      %211 = "mini.arithmetic"(%209, %210) {"op" = "ADD"} : (i32, i32) -> i32
      %212 = "mini.wrap"(%211) : (i32) -> !mini.ptr<i32>
      "mini.castassign"(%198, %212) ({
        %213 = builtin.unrealized_conversion_cast %212 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %214 = "mini.get_field"(%164) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
    %215 = "mini.get_field"(%164) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %216 = builtin.unrealized_conversion_cast %166 : !mini.ptr<i8> to !mini.ptr<i8>
    "mini.buffer_set"(%214, %215, %216) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>, !mini.ptr<i8>) -> ()
    %217 = "mini.get_field"(%164) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %218 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %219 = "mini.unwrap"(%217) : (!mini.ptr<i32>) -> i32
    %220 = "mini.unwrap"(%218) : (!mini.ptr<i32>) -> i32
    %221 = "mini.arithmetic"(%219, %220) {"op" = "ADD"} : (i32, i32) -> i32
    %222 = "mini.wrap"(%221) : (i32) -> !mini.ptr<i32>
    %223 = builtin.unrealized_conversion_cast %222 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%164, %223) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">, !mini.ptr<i32>) -> ()
    %224 = "mini.to_fat_ptr"(%164) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.return"(%224) : (!mini.fatptr<"String">) -> ()
  }) {"func_name" = "String_append_xPtri8", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb31(%225 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %226 : !llvm.ptr):
    %227 = "mini.invariant"(%226) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %228 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb32] : () -> ()
  ^bb33:
    %229 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
    "llvm.store"(%229, %228) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb34] : () -> ()
  ^bb32:
    %230 = "llvm.getelementptr"(%226) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %231 = "mini.checkflag"(%230) {"typ_name" = "i8_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %232 = "llvm.load"(%231) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%232) [^bb33, ^bb33] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb34:
    %233 = "llvm.extractvalue"(%225) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %234 = "llvm.load"(%228) : (!llvm.ptr) -> i32
    %235 = "llvm.getelementptr"(%233, %234) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<35 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %236 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %237 = "llvm.getelementptr"(%235, %236) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%237) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_append_xPtri8", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb35(%238 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %239 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %240 : !llvm.ptr, %241 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %242 = "mini.wrap"(%238) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %243 = "mini.to_fat_ptr"(%242) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %244 = "mini.wrap"(%241) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %245 = "mini.to_fat_ptr"(%244) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %246 = "mini.unwrap"(%245) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %247 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %248 = "mini.method_call"(%247, %246) {"offset" = 7 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %249 = builtin.unrealized_conversion_cast %248 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %250 = builtin.unrealized_conversion_cast %249 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %251 = "mini.refer"(%250) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %252 = "mini.unwrap"(%245) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %253 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %254 = "mini.method_call"(%253, %252) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.ptr<i32>
    %255 = builtin.unrealized_conversion_cast %254 : !mini.ptr<i32> to !mini.ptr<i32>
    %256 = "mini.get_field"(%243) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %257 = "mini.unwrap"(%256) : (!mini.ptr<i32>) -> i32
    %258 = "mini.unwrap"(%255) : (!mini.ptr<i32>) -> i32
    %259 = "mini.arithmetic"(%257, %258) {"op" = "ADD"} : (i32, i32) -> i32
    %260 = "mini.wrap"(%259) : (i32) -> !mini.ptr<i32>
    %261 = "mini.get_field"(%243) {"offset" = 2 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %262 = "mini.unwrap"(%260) : (!mini.ptr<i32>) -> i32
    %263 = "mini.unwrap"(%261) : (!mini.ptr<i32>) -> i32
    %264 = "mini.comparison"(%262, %263) {"op" = "LT"} : (i32, i32) -> i1
    %265 = "mini.wrap"(%264) : (i1) -> !mini.ptr<i32>
    %266 = "mini.unwrap"(%265) : (!mini.ptr<i32>) -> i1
    "mini.if"(%266) ({
      %267 = "mini.get_field"(%243) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
      %268 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      "mini.while"() ({
        %269 = "mini.get_field"(%243) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
        %270 = "mini.unwrap"(%269) : (!mini.ptr<i32>) -> i32
        %271 = "mini.unwrap"(%255) : (!mini.ptr<i32>) -> i32
        %272 = "mini.arithmetic"(%270, %271) {"op" = "ADD"} : (i32, i32) -> i32
        %273 = "mini.wrap"(%272) : (i32) -> !mini.ptr<i32>
        %274 = "mini.unwrap"(%267) : (!mini.ptr<i32>) -> i32
        %275 = "mini.unwrap"(%273) : (!mini.ptr<i32>) -> i32
        %276 = "mini.comparison"(%274, %275) {"op" = "LT"} : (i32, i32) -> i1
        %277 = "mini.wrap"(%276) : (i1) -> !mini.ptr<i32>
        %278 = "mini.unwrap"(%277) : (!mini.ptr<i32>) -> i1
      }, {
        %279 = "mini.buffer_get"(%251, %268) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
        %280 = "mini.get_field"(%243) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
        %281 = builtin.unrealized_conversion_cast %279 : !mini.ptr<i8> to !mini.ptr<i8>
        "mini.buffer_set"(%280, %267, %281) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>, !mini.ptr<i8>) -> ()
        %282 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
        %283 = "mini.unwrap"(%267) : (!mini.ptr<i32>) -> i32
        %284 = "mini.unwrap"(%282) : (!mini.ptr<i32>) -> i32
        %285 = "mini.arithmetic"(%283, %284) {"op" = "ADD"} : (i32, i32) -> i32
        %286 = "mini.wrap"(%285) : (i32) -> !mini.ptr<i32>
        "mini.castassign"(%267, %286) ({
          %287 = builtin.unrealized_conversion_cast %286 : !mini.ptr<i32> to !mini.ptr<i32>
        }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
        %288 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
        %289 = "mini.unwrap"(%268) : (!mini.ptr<i32>) -> i32
        %290 = "mini.unwrap"(%288) : (!mini.ptr<i32>) -> i32
        %291 = "mini.arithmetic"(%289, %290) {"op" = "ADD"} : (i32, i32) -> i32
        %292 = "mini.wrap"(%291) : (i32) -> !mini.ptr<i32>
        "mini.castassign"(%268, %292) ({
          %293 = builtin.unrealized_conversion_cast %292 : !mini.ptr<i32> to !mini.ptr<i32>
        }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
      }) : () -> ()
      %294 = "mini.get_field"(%243) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
      %295 = "mini.unwrap"(%294) : (!mini.ptr<i32>) -> i32
      %296 = "mini.unwrap"(%255) : (!mini.ptr<i32>) -> i32
      %297 = "mini.arithmetic"(%295, %296) {"op" = "ADD"} : (i32, i32) -> i32
      %298 = "mini.wrap"(%297) : (i32) -> !mini.ptr<i32>
      %299 = builtin.unrealized_conversion_cast %298 : !mini.ptr<i32> to !mini.ptr<i32>
      "mini.set_field"(%243, %299) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">, !mini.ptr<i32>) -> ()
      %300 = "mini.to_fat_ptr"(%243) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
      "mini.return"(%300) : (!mini.fatptr<"String">) -> ()
    }) : (i1) -> ()
    %301 = "mini.get_field"(%243) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %302 = "mini.unwrap"(%301) : (!mini.ptr<i32>) -> i32
    %303 = "mini.unwrap"(%255) : (!mini.ptr<i32>) -> i32
    %304 = "mini.arithmetic"(%302, %303) {"op" = "ADD"} : (i32, i32) -> i32
    %305 = "mini.wrap"(%304) : (i32) -> !mini.ptr<i32>
    %306 = builtin.unrealized_conversion_cast %305 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%243, %306) {"offset" = 2 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">, !mini.ptr<i32>) -> ()
    %307 = "mini.get_field"(%243) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
    %308 = builtin.unrealized_conversion_cast %307 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %309 = "mini.refer"(%308) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %310 = "mini.get_field"(%243) {"offset" = 2 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %311 = "mini.create_buffer"(%310) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %312 = builtin.unrealized_conversion_cast %311 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    "mini.set_field"(%243, %312) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">, !mini.buffer<!mini.ptr<i8>>) -> ()
    %313 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %314 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    "mini.while"() ({
      %315 = "mini.get_field"(%243) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
      %316 = "mini.unwrap"(%315) : (!mini.ptr<i32>) -> i32
      %317 = "mini.unwrap"(%255) : (!mini.ptr<i32>) -> i32
      %318 = "mini.arithmetic"(%316, %317) {"op" = "ADD"} : (i32, i32) -> i32
      %319 = "mini.wrap"(%318) : (i32) -> !mini.ptr<i32>
      %320 = "mini.unwrap"(%313) : (!mini.ptr<i32>) -> i32
      %321 = "mini.unwrap"(%319) : (!mini.ptr<i32>) -> i32
      %322 = "mini.comparison"(%320, %321) {"op" = "LT"} : (i32, i32) -> i1
      %323 = "mini.wrap"(%322) : (i1) -> !mini.ptr<i32>
      %324 = "mini.unwrap"(%323) : (!mini.ptr<i32>) -> i1
    }, {
      %325 = "mini.get_field"(%243) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
      %326 = "mini.unwrap"(%313) : (!mini.ptr<i32>) -> i32
      %327 = "mini.unwrap"(%325) : (!mini.ptr<i32>) -> i32
      %328 = "mini.comparison"(%326, %327) {"op" = "LT"} : (i32, i32) -> i1
      %329 = "mini.wrap"(%328) : (i1) -> !mini.ptr<i32>
      %330 = "mini.unwrap"(%329) : (!mini.ptr<i32>) -> i1
      "mini.if"(%330) ({
        %331 = "mini.buffer_get"(%309, %313) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
        %332 = "mini.get_field"(%243) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
        %333 = builtin.unrealized_conversion_cast %331 : !mini.ptr<i8> to !mini.ptr<i8>
        "mini.buffer_set"(%332, %313, %333) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>, !mini.ptr<i8>) -> ()
        %334 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
        %335 = "mini.unwrap"(%313) : (!mini.ptr<i32>) -> i32
        %336 = "mini.unwrap"(%334) : (!mini.ptr<i32>) -> i32
        %337 = "mini.arithmetic"(%335, %336) {"op" = "ADD"} : (i32, i32) -> i32
        %338 = "mini.wrap"(%337) : (i32) -> !mini.ptr<i32>
        "mini.castassign"(%313, %338) ({
          %339 = builtin.unrealized_conversion_cast %338 : !mini.ptr<i32> to !mini.ptr<i32>
        }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
        "mini.continue"() [^bb36] : () -> ()
      }) : (i1) -> ()
      %340 = "mini.buffer_get"(%251, %314) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
      %341 = "mini.get_field"(%243) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
      %342 = builtin.unrealized_conversion_cast %340 : !mini.ptr<i8> to !mini.ptr<i8>
      "mini.buffer_set"(%341, %313, %342) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>, !mini.ptr<i8>) -> ()
      %343 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %344 = "mini.unwrap"(%313) : (!mini.ptr<i32>) -> i32
      %345 = "mini.unwrap"(%343) : (!mini.ptr<i32>) -> i32
      %346 = "mini.arithmetic"(%344, %345) {"op" = "ADD"} : (i32, i32) -> i32
      %347 = "mini.wrap"(%346) : (i32) -> !mini.ptr<i32>
      "mini.castassign"(%313, %347) ({
        %348 = builtin.unrealized_conversion_cast %347 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
      %349 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %350 = "mini.unwrap"(%314) : (!mini.ptr<i32>) -> i32
      %351 = "mini.unwrap"(%349) : (!mini.ptr<i32>) -> i32
      %352 = "mini.arithmetic"(%350, %351) {"op" = "ADD"} : (i32, i32) -> i32
      %353 = "mini.wrap"(%352) : (i32) -> !mini.ptr<i32>
      "mini.castassign"(%314, %353) ({
        %354 = builtin.unrealized_conversion_cast %353 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %355 = "mini.get_field"(%243) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %356 = "mini.unwrap"(%355) : (!mini.ptr<i32>) -> i32
    %357 = "mini.unwrap"(%255) : (!mini.ptr<i32>) -> i32
    %358 = "mini.arithmetic"(%356, %357) {"op" = "ADD"} : (i32, i32) -> i32
    %359 = "mini.wrap"(%358) : (i32) -> !mini.ptr<i32>
    %360 = builtin.unrealized_conversion_cast %359 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%243, %360) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">, !mini.ptr<i32>) -> ()
    %361 = "mini.to_fat_ptr"(%243) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.return"(%361) : (!mini.fatptr<"String">) -> ()
  }) {"func_name" = "String_extend_strString", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb37(%362 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %363 : !llvm.ptr):
    %364 = "mini.invariant"(%363) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %365 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb38] : () -> ()
  ^bb39:
    %366 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
    "llvm.store"(%366, %365) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb40] : () -> ()
  ^bb38:
    %367 = "llvm.getelementptr"(%363) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %368 = "mini.checkflag"(%367) {"typ_name" = "String"} : (!llvm.ptr) -> !mini.ptr<i1>
    %369 = "llvm.load"(%368) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%369) [^bb39, ^bb39] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb40:
    %370 = "llvm.extractvalue"(%362) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %371 = "llvm.load"(%365) : (!llvm.ptr) -> i32
    %372 = "llvm.getelementptr"(%370, %371) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<35 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %373 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %374 = "llvm.getelementptr"(%372, %373) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%374) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_extend_strString", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb41(%375 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %376 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %377 : !llvm.ptr, %378 : i32):
    %379 = "mini.wrap"(%375) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %380 = "mini.to_fat_ptr"(%379) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %381 = "mini.wrap"(%378) : (i32) -> !mini.ptr<i32>
    %382 = builtin.unrealized_conversion_cast %381 : !mini.ptr<i32> to !mini.ptr<i32>
    %383 = "mini.get_field"(%380) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %384 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %385 = "mini.unwrap"(%383) : (!mini.ptr<i32>) -> i32
    %386 = "mini.unwrap"(%384) : (!mini.ptr<i32>) -> i32
    %387 = "mini.arithmetic"(%385, %386) {"op" = "SUB"} : (i32, i32) -> i32
    %388 = "mini.wrap"(%387) : (i32) -> !mini.ptr<i32>
    %389 = "mini.unwrap"(%382) : (!mini.ptr<i32>) -> i32
    %390 = "mini.unwrap"(%388) : (!mini.ptr<i32>) -> i32
    %391 = "mini.comparison"(%389, %390) {"op" = "GT"} : (i32, i32) -> i1
    %392 = "mini.wrap"(%391) : (i1) -> !mini.ptr<i32>
    %393 = "mini.unwrap"(%392) : (!mini.ptr<i32>) -> i1
    "mini.if"(%393) ({
      "mini.coro_yield"() : () -> ()
    }) : (i1) -> ()
    %394 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %395 = "mini.unwrap"(%382) : (!mini.ptr<i32>) -> i32
    %396 = "mini.unwrap"(%394) : (!mini.ptr<i32>) -> i32
    %397 = "mini.comparison"(%395, %396) {"op" = "GE"} : (i32, i32) -> i1
    %398 = "mini.wrap"(%397) : (i1) -> !mini.ptr<i32>
    %399 = "mini.unwrap"(%398) : (!mini.ptr<i32>) -> i1
    "mini.if"(%399) ({
      %400 = "mini.get_field"(%380) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
      %401 = "mini.buffer_get"(%400, %382) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
      %402 = builtin.unrealized_conversion_cast %401 : !mini.ptr<i8> to !mini.ptr<i8>
      "mini.return"(%402) : (!mini.ptr<i8>) -> ()
    }) : (i1) -> ()
    %403 = "mini.get_field"(%380) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %404 = "mini.unwrap"(%403) : (!mini.ptr<i32>) -> i32
    %405 = "mini.unwrap"(%382) : (!mini.ptr<i32>) -> i32
    %406 = "mini.arithmetic"(%404, %405) {"op" = "ADD"} : (i32, i32) -> i32
    %407 = "mini.wrap"(%406) : (i32) -> !mini.ptr<i32>
    %408 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %409 = "mini.unwrap"(%407) : (!mini.ptr<i32>) -> i32
    %410 = "mini.unwrap"(%408) : (!mini.ptr<i32>) -> i32
    %411 = "mini.comparison"(%409, %410) {"op" = "LT"} : (i32, i32) -> i1
    %412 = "mini.wrap"(%411) : (i1) -> !mini.ptr<i32>
    %413 = "mini.unwrap"(%412) : (!mini.ptr<i32>) -> i1
    "mini.if"(%413) ({
      "mini.coro_yield"() : () -> ()
    }) : (i1) -> ()
    %414 = "mini.get_field"(%380) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
    %415 = "mini.get_field"(%380) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %416 = "mini.unwrap"(%415) : (!mini.ptr<i32>) -> i32
    %417 = "mini.unwrap"(%382) : (!mini.ptr<i32>) -> i32
    %418 = "mini.arithmetic"(%416, %417) {"op" = "ADD"} : (i32, i32) -> i32
    %419 = "mini.wrap"(%418) : (i32) -> !mini.ptr<i32>
    %420 = "mini.buffer_get"(%414, %419) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
    %421 = builtin.unrealized_conversion_cast %420 : !mini.ptr<i8> to !mini.ptr<i8>
    "mini.return"(%421) : (!mini.ptr<i8>) -> ()
  }) {"func_name" = "String__index_xPtri32", "result_type" = i8, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb42(%422 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %423 : !llvm.ptr):
    %424 = "mini.invariant"(%423) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %425 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb43] : () -> ()
  ^bb44:
    %426 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
    "llvm.store"(%426, %425) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb45] : () -> ()
  ^bb43:
    %427 = "llvm.getelementptr"(%423) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %428 = "mini.checkflag"(%427) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %429 = "llvm.load"(%428) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%429) [^bb44, ^bb44] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb45:
    %430 = "llvm.extractvalue"(%422) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %431 = "llvm.load"(%425) : (!llvm.ptr) -> i32
    %432 = "llvm.getelementptr"(%430, %431) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<35 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %433 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %434 = "llvm.getelementptr"(%432, %433) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%434) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B__index_xPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb46(%435 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %436 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %437 : !llvm.ptr, %438 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %439 = "mini.wrap"(%435) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %440 = "mini.to_fat_ptr"(%439) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %441 = "mini.wrap"(%438) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %442 = "mini.to_fat_ptr"(%441) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %443 = "mini.get_field"(%440) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %444 = "mini.unwrap"(%442) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %445 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %446 = "mini.method_call"(%445, %444) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.ptr<i32>
    %447 = builtin.unrealized_conversion_cast %446 : !mini.ptr<i32> to !mini.ptr<i32>
    %448 = "mini.unwrap"(%443) : (!mini.ptr<i32>) -> i32
    %449 = "mini.unwrap"(%447) : (!mini.ptr<i32>) -> i32
    %450 = "mini.comparison"(%448, %449) {"op" = "NEQ"} : (i32, i32) -> i1
    %451 = "mini.wrap"(%450) : (i1) -> !mini.ptr<i32>
    %452 = "mini.unwrap"(%451) : (!mini.ptr<i32>) -> i1
    "mini.if"(%452) ({
      %453 = "mini.literal"() {"value" = false, "typ" = i1} : () -> !mini.ptr<i1>
      %454 = builtin.unrealized_conversion_cast %453 : !mini.ptr<i1> to !mini.ptr<i1>
      "mini.return"(%454) : (!mini.ptr<i1>) -> ()
    }) : (i1) -> ()
    %455 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    "mini.while"() ({
      %456 = "mini.get_field"(%440) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
      %457 = "mini.unwrap"(%455) : (!mini.ptr<i32>) -> i32
      %458 = "mini.unwrap"(%456) : (!mini.ptr<i32>) -> i32
      %459 = "mini.comparison"(%457, %458) {"op" = "LT"} : (i32, i32) -> i1
      %460 = "mini.wrap"(%459) : (i1) -> !mini.ptr<i32>
      %461 = "mini.unwrap"(%460) : (!mini.ptr<i32>) -> i1
    }, {
      %462 = "mini.get_field"(%440) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
      %463 = "mini.buffer_get"(%462, %455) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
      %464 = "mini.unwrap"(%442) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %465 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %466 = "mini.method_call"(%465, %464) {"offset" = 7 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
      %467 = builtin.unrealized_conversion_cast %466 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
      %468 = "mini.buffer_get"(%467, %455) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
      %469 = "mini.unwrap"(%463) : (!mini.ptr<i8>) -> i8
      %470 = "mini.unwrap"(%468) : (!mini.ptr<i8>) -> i8
      %471 = "mini.comparison"(%469, %470) {"op" = "NEQ"} : (i8, i8) -> i1
      %472 = "mini.wrap"(%471) : (i1) -> !mini.ptr<i8>
      %473 = "mini.unwrap"(%472) : (!mini.ptr<i8>) -> i1
      "mini.if"(%473) ({
        %474 = "mini.literal"() {"value" = false, "typ" = i1} : () -> !mini.ptr<i1>
        %475 = builtin.unrealized_conversion_cast %474 : !mini.ptr<i1> to !mini.ptr<i1>
        "mini.return"(%475) : (!mini.ptr<i1>) -> ()
      }) : (i1) -> ()
      %476 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %477 = "mini.unwrap"(%455) : (!mini.ptr<i32>) -> i32
      %478 = "mini.unwrap"(%476) : (!mini.ptr<i32>) -> i32
      %479 = "mini.arithmetic"(%477, %478) {"op" = "ADD"} : (i32, i32) -> i32
      %480 = "mini.wrap"(%479) : (i32) -> !mini.ptr<i32>
      "mini.castassign"(%455, %480) ({
        %481 = builtin.unrealized_conversion_cast %480 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %482 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
    %483 = builtin.unrealized_conversion_cast %482 : !mini.ptr<i1> to !mini.ptr<i1>
    "mini.return"(%483) : (!mini.ptr<i1>) -> ()
  }) {"func_name" = "String__EQ_otherString", "result_type" = i1, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb47(%484 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %485 : !llvm.ptr):
    %486 = "mini.invariant"(%485) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %487 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb48] : () -> ()
  ^bb49:
    %488 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
    "llvm.store"(%488, %487) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb50] : () -> ()
  ^bb48:
    %489 = "llvm.getelementptr"(%485) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %490 = "mini.checkflag"(%489) {"typ_name" = "String"} : (!llvm.ptr) -> !mini.ptr<i1>
    %491 = "llvm.load"(%490) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%491) [^bb49, ^bb49] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb50:
    %492 = "llvm.extractvalue"(%484) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %493 = "llvm.load"(%487) : (!llvm.ptr) -> i32
    %494 = "llvm.getelementptr"(%492, %493) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<35 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %495 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %496 = "llvm.getelementptr"(%494, %495) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%496) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B__EQ_otherString", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb51(%497 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %498 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %499 : !llvm.ptr):
    %500 = "mini.wrap"(%497) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %501 = "mini.to_fat_ptr"(%500) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %502 = "mini.get_field"(%501) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %503 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %504 = "mini.unwrap"(%502) : (!mini.ptr<i32>) -> i32
    %505 = "mini.unwrap"(%503) : (!mini.ptr<i32>) -> i32
    %506 = "mini.comparison"(%504, %505) {"op" = "EQ"} : (i32, i32) -> i1
    %507 = "mini.wrap"(%506) : (i1) -> !mini.ptr<i32>
    %508 = "mini.unwrap"(%507) : (!mini.ptr<i32>) -> i1
    "mini.if"(%508) ({
      %509 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
      %510 = "mini.unionize"(%509) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i8)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.ptr<i8>, !mini.nil]>
      "mini.return"(%510) : (!mini.union<[!mini.ptr<i8>, !mini.nil]>) -> ()
    }) : (i1) -> ()
    %511 = "mini.get_field"(%501) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %512 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %513 = "mini.unwrap"(%511) : (!mini.ptr<i32>) -> i32
    %514 = "mini.unwrap"(%512) : (!mini.ptr<i32>) -> i32
    %515 = "mini.arithmetic"(%513, %514) {"op" = "SUB"} : (i32, i32) -> i32
    %516 = "mini.wrap"(%515) : (i32) -> !mini.ptr<i32>
    %517 = builtin.unrealized_conversion_cast %516 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%501, %517) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">, !mini.ptr<i32>) -> ()
    %518 = "mini.get_field"(%501) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
    %519 = "mini.get_field"(%501) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %520 = "mini.buffer_get"(%518, %519) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
    %521 = "mini.unionize"(%520) {"from_typ" = i8, "to_typ" = !llvm.struct<(!llvm.ptr, i8)>, "from_typ_name" = "i8_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i8>) -> !mini.union<[!mini.ptr<i8>, !mini.nil]>
    "mini.return"(%521) : (!mini.union<[!mini.ptr<i8>, !mini.nil]>) -> ()
  }) {"func_name" = "String_pop_", "result_type" = !llvm.struct<(!llvm.ptr, i8)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb52(%522 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %523 : !llvm.ptr):
    %524 = "mini.invariant"(%523) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %525 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb53] : () -> ()
  ^bb53:
    %526 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
    "llvm.store"(%526, %525) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb54] : () -> ()
  ^bb54:
    %527 = "llvm.extractvalue"(%522) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %528 = "llvm.load"(%525) : (!llvm.ptr) -> i32
    %529 = "llvm.getelementptr"(%527, %528) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<35 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %530 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %531 = "llvm.getelementptr"(%529, %530) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%531) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_pop_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb55(%532 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %533 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %534 : !llvm.ptr):
    %535 = "mini.wrap"(%532) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %536 = "mini.to_fat_ptr"(%535) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %537 = "mini.get_field"(%536) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %538 = "mini.create_buffer"(%537) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %539 = builtin.unrealized_conversion_cast %538 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %540 = "mini.refer"(%539) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %541 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    "mini.while"() ({
      %542 = "mini.get_field"(%536) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
      %543 = "mini.unwrap"(%541) : (!mini.ptr<i32>) -> i32
      %544 = "mini.unwrap"(%542) : (!mini.ptr<i32>) -> i32
      %545 = "mini.comparison"(%543, %544) {"op" = "LT"} : (i32, i32) -> i1
      %546 = "mini.wrap"(%545) : (i1) -> !mini.ptr<i32>
      %547 = "mini.unwrap"(%546) : (!mini.ptr<i32>) -> i1
    }, {
      %548 = "mini.get_field"(%536) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
      %549 = "mini.buffer_get"(%548, %541) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
      %550 = builtin.unrealized_conversion_cast %549 : !mini.ptr<i8> to !mini.ptr<i8>
      "mini.buffer_set"(%540, %541, %550) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>, !mini.ptr<i8>) -> ()
      %551 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %552 = "mini.unwrap"(%541) : (!mini.ptr<i32>) -> i32
      %553 = "mini.unwrap"(%551) : (!mini.ptr<i32>) -> i32
      %554 = "mini.arithmetic"(%552, %553) {"op" = "ADD"} : (i32, i32) -> i32
      %555 = "mini.wrap"(%554) : (i32) -> !mini.ptr<i32>
      "mini.castassign"(%541, %555) ({
        %556 = builtin.unrealized_conversion_cast %555 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %557 = "mini.get_field"(%536) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %558 = "mini.get_field"(%536) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %559 = "mini.unwrap"(%540) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %560 = "mini.unwrap"(%557) : (!mini.ptr<i32>) -> i32
    %561 = "mini.unwrap"(%558) : (!mini.ptr<i32>) -> i32
    %562 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %563 = "mini.get_field"(%536) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %564 = "mini.get_field"(%536) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %565 = builtin.unrealized_conversion_cast %540 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %566 = "mini.unwrap"(%565) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %567 = builtin.unrealized_conversion_cast %563 : !mini.ptr<i32> to !mini.ptr<i32>
    %568 = "mini.unwrap"(%567) : (!mini.ptr<i32>) -> i32
    %569 = builtin.unrealized_conversion_cast %564 : !mini.ptr<i32> to !mini.ptr<i32>
    %570 = "mini.unwrap"(%569) : (!mini.ptr<i32>) -> i32
    %571 = "mini.unwrap"(%562) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %572 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %573 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %574 = "mini.parameterizations_array"(%572, %573, %573) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%574, %571, %566, %568, %570) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %575 = "mini.to_fat_ptr"(%562) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %576 = "mini.refer"(%575) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %577 = "mini.to_fat_ptr"(%576) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.return"(%577) : (!mini.fatptr<"String">) -> ()
  }) {"func_name" = "String_copy_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb56(%578 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %579 : !llvm.ptr):
    %580 = "mini.invariant"(%579) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %581 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb57] : () -> ()
  ^bb57:
    %582 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
    "llvm.store"(%582, %581) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb58] : () -> ()
  ^bb58:
    %583 = "llvm.extractvalue"(%578) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %584 = "llvm.load"(%581) : (!llvm.ptr) -> i32
    %585 = "llvm.getelementptr"(%583, %584) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<35 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %586 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %587 = "llvm.getelementptr"(%585, %586) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%587) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_copy_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb59(%588 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %589 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %590 : !llvm.ptr):
    %591 = "mini.wrap"(%588) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %592 = "mini.to_fat_ptr"(%591) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %593 = "mini.get_field"(%592) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %594 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %595 = "mini.unwrap"(%593) : (!mini.ptr<i32>) -> i32
    %596 = "mini.unwrap"(%594) : (!mini.ptr<i32>) -> i32
    %597 = "mini.arithmetic"(%595, %596) {"op" = "ADD"} : (i32, i32) -> i32
    %598 = "mini.wrap"(%597) : (i32) -> !mini.ptr<i32>
    %599 = "mini.create_buffer"(%598) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %600 = builtin.unrealized_conversion_cast %599 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %601 = "mini.refer"(%600) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %602 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    "mini.while"() ({
      %603 = "mini.get_field"(%592) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
      %604 = "mini.unwrap"(%602) : (!mini.ptr<i32>) -> i32
      %605 = "mini.unwrap"(%603) : (!mini.ptr<i32>) -> i32
      %606 = "mini.comparison"(%604, %605) {"op" = "LT"} : (i32, i32) -> i1
      %607 = "mini.wrap"(%606) : (i1) -> !mini.ptr<i32>
      %608 = "mini.unwrap"(%607) : (!mini.ptr<i32>) -> i1
    }, {
      %609 = "mini.get_field"(%592) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
      %610 = "mini.buffer_get"(%609, %602) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
      %611 = builtin.unrealized_conversion_cast %610 : !mini.ptr<i8> to !mini.ptr<i8>
      "mini.buffer_set"(%601, %602, %611) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>, !mini.ptr<i8>) -> ()
      %612 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %613 = "mini.unwrap"(%602) : (!mini.ptr<i32>) -> i32
      %614 = "mini.unwrap"(%612) : (!mini.ptr<i32>) -> i32
      %615 = "mini.arithmetic"(%613, %614) {"op" = "ADD"} : (i32, i32) -> i32
      %616 = "mini.wrap"(%615) : (i32) -> !mini.ptr<i32>
      "mini.castassign"(%602, %616) ({
        %617 = builtin.unrealized_conversion_cast %616 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %618 = "mini.literal"() {"value" = 0 : i8, "typ" = i8} : () -> !mini.ptr<i8>
    %619 = builtin.unrealized_conversion_cast %618 : !mini.ptr<i8> to !mini.ptr<i8>
    %620 = "mini.get_field"(%592) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %621 = builtin.unrealized_conversion_cast %619 : !mini.ptr<i8> to !mini.ptr<i8>
    "mini.buffer_set"(%601, %620, %621) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>, !mini.ptr<i8>) -> ()
    %622 = builtin.unrealized_conversion_cast %601 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    "mini.return"(%622) : (!mini.buffer<!mini.ptr<i8>>) -> ()
  }) {"func_name" = "String_c_string_", "result_type" = !llvm.struct<(!llvm.ptr)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb60(%623 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %624 : !llvm.ptr):
    %625 = "mini.invariant"(%624) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %626 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb61] : () -> ()
  ^bb61:
    %627 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
    "llvm.store"(%627, %626) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb62] : () -> ()
  ^bb62:
    %628 = "llvm.extractvalue"(%623) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %629 = "llvm.load"(%626) : (!llvm.ptr) -> i32
    %630 = "llvm.getelementptr"(%628, %629) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<35 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %631 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %632 = "llvm.getelementptr"(%630, %631) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%632) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_c_string_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb63(%633 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %634 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %635 : !llvm.ptr):
    %636 = "mini.wrap"(%633) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %637 = "mini.to_fat_ptr"(%636) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %638 = "mini.unwrap"(%637) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %639 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32)>, "class_name" = "StringIterator", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !mini.fatptr<"StringIterator">
    %640 = "mini.to_fat_ptr"(%637) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %641 = "mini.unwrap"(%640) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %642 = "mini.unwrap"(%639) : (!mini.fatptr<"StringIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %643 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %644 = "mini.parameterizations_array"(%643) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%644, %642, %641) {"offset" = 2 : i32, "vptrs" = [#none], "vtable_size" = 6 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %645 = "mini.to_fat_ptr"(%639) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "StringIterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"StringIterator">) -> !mini.fatptr<"Iterator">
    "mini.return"(%645) : (!mini.fatptr<"Iterator">) -> ()
  }) {"func_name" = "String_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb64(%646 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %647 : !llvm.ptr):
    %648 = "mini.invariant"(%647) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %649 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb65] : () -> ()
  ^bb65:
    %650 = "llvm.mlir.constant"() <{"value" = 29 : i32}> : () -> i32
    "llvm.store"(%650, %649) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb66] : () -> ()
  ^bb66:
    %651 = "llvm.extractvalue"(%646) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %652 = "llvm.load"(%649) : (!llvm.ptr) -> i32
    %653 = "llvm.getelementptr"(%651, %652) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<35 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %654 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %655 = "llvm.getelementptr"(%653, %654) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%655) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb67(%656 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %657 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %658 : !llvm.ptr):
    %659 = "mini.wrap"(%656) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %660 = "mini.to_fat_ptr"(%659) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %661 = "mini.to_fat_ptr"(%660) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.return"(%661) : (!mini.fatptr<"String">) -> ()
  }) {"func_name" = "String_repr_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb68(%662 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %663 : !llvm.ptr):
    %664 = "mini.invariant"(%663) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %665 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb69] : () -> ()
  ^bb69:
    %666 = "llvm.mlir.constant"() <{"value" = 30 : i32}> : () -> i32
    "llvm.store"(%666, %665) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb70] : () -> ()
  ^bb70:
    %667 = "llvm.extractvalue"(%662) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %668 = "llvm.load"(%665) : (!llvm.ptr) -> i32
    %669 = "llvm.getelementptr"(%667, %668) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<35 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %670 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %671 = "llvm.getelementptr"(%669, %670) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%671) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_repr_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_Character", "types" = [i8]} : () -> ()
  "mini.getter_def"() {"meth_name" = "Character_getter_byte", "types" = [i8], "offset" = 0 : i64, "original_type" = i8, "specialized_name" = "i8_typ", "parameterization" = "_parameterization_Ptri8"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Character_setter_byte", "types" = [i8], "offset" = 0 : i64, "original_type" = i8, "specialized_name" = "i8_typ", "parameterization" = "_parameterization_Ptri8"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Character_field_byte", "getter_name" = "Character_getter_byte", "setter_name" = "Character_setter_byte"} : () -> ()
  "mini.func"() ({
  ^bb71(%672 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %673 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %674 : !llvm.ptr):
    %675 = "mini.wrap"(%672) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Character">
    %676 = "mini.to_fat_ptr"(%675) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Character", "to_typ_name" = "Character"} : (!mini.fatptr<"Character">) -> !mini.fatptr<"Character">
    %677 = "mini.get_field"(%676) {"offset" = 0 : i64, "vtable_bytes" = 40 : i32, "original_type" = i8} : (!mini.fatptr<"Character">) -> !mini.ptr<i8>
    %678 = builtin.unrealized_conversion_cast %677 : !mini.ptr<i8> to !mini.ptr<i8>
    "mini.return"(%678) : (!mini.ptr<i8>) -> ()
  }) {"func_name" = "Character_byte_", "result_type" = i8, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb72(%679 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %680 : !llvm.ptr):
    %681 = "mini.invariant"(%680) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %682 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb73] : () -> ()
  ^bb73:
    %683 = "llvm.mlir.constant"() <{"value" = 3 : i32}> : () -> i32
    "llvm.store"(%683, %682) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb74] : () -> ()
  ^bb74:
    %684 = "llvm.extractvalue"(%679) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %685 = "llvm.load"(%682) : (!llvm.ptr) -> i32
    %686 = "llvm.getelementptr"(%684, %685) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<5 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %687 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %688 = "llvm.getelementptr"(%686, %687) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%688) : (!llvm.ptr) -> ()
  }) {"func_name" = "Character_B_byte_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb75(%689 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %690 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %691 : !llvm.ptr, %692 : i8):
    %693 = "mini.wrap"(%689) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Character">
    %694 = "mini.to_fat_ptr"(%693) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Character", "to_typ_name" = "Character"} : (!mini.fatptr<"Character">) -> !mini.fatptr<"Character">
    %695 = "mini.wrap"(%692) : (i8) -> !mini.ptr<i8>
    %696 = builtin.unrealized_conversion_cast %695 : !mini.ptr<i8> to !mini.ptr<i8>
    %697 = builtin.unrealized_conversion_cast %696 : !mini.ptr<i8> to !mini.ptr<i8>
    "mini.set_field"(%694, %697) {"offset" = 0 : i64, "vtable_bytes" = 40 : i32, "original_type" = i8} : (!mini.fatptr<"Character">, !mini.ptr<i8>) -> ()
  }) {"func_name" = "Character_init_bytePtri8", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb76(%698 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %699 : !llvm.ptr):
    %700 = "mini.invariant"(%699) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %701 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb77] : () -> ()
  ^bb78:
    %702 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
    "llvm.store"(%702, %701) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb79] : () -> ()
  ^bb77:
    %703 = "llvm.getelementptr"(%699) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %704 = "mini.checkflag"(%703) {"typ_name" = "i8_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %705 = "llvm.load"(%704) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%705) [^bb78, ^bb78] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb79:
    %706 = "llvm.extractvalue"(%698) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %707 = "llvm.load"(%701) : (!llvm.ptr) -> i32
    %708 = "llvm.getelementptr"(%706, %707) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<5 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %709 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %710 = "llvm.getelementptr"(%708, %709) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%710) : (!llvm.ptr) -> ()
  }) {"func_name" = "Character_B_init_bytePtri8", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_StringIterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32]} : () -> ()
  "mini.getter_def"() {"meth_name" = "StringIterator_getter_str", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
  "mini.setter_def"() {"meth_name" = "StringIterator_setter_str", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "StringIterator_field_str", "getter_name" = "StringIterator_getter_str", "setter_name" = "StringIterator_setter_str"} : () -> ()
  "mini.getter_def"() {"meth_name" = "StringIterator_getter_index", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "StringIterator_setter_index", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "StringIterator_field_index", "getter_name" = "StringIterator_getter_index", "setter_name" = "StringIterator_setter_index"} : () -> ()
  "mini.func"() ({
  ^bb80(%711 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %712 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %713 : !llvm.ptr, %714 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %715 = "mini.wrap"(%711) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"StringIterator">
    %716 = "mini.to_fat_ptr"(%715) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "StringIterator", "to_typ_name" = "StringIterator"} : (!mini.fatptr<"StringIterator">) -> !mini.fatptr<"StringIterator">
    %717 = "mini.wrap"(%714) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %718 = "mini.to_fat_ptr"(%717) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %719 = "mini.to_fat_ptr"(%718) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.set_field"(%716, %719) {"offset" = 0 : i64, "vtable_bytes" = 48 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"StringIterator">, !mini.fatptr<"String">) -> ()
    %720 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %721 = builtin.unrealized_conversion_cast %720 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%716, %721) {"offset" = 1 : i64, "vtable_bytes" = 48 : i32, "original_type" = i32} : (!mini.fatptr<"StringIterator">, !mini.ptr<i32>) -> ()
  }) {"func_name" = "StringIterator_init_strString", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb81(%722 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %723 : !llvm.ptr):
    %724 = "mini.invariant"(%723) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %725 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb82] : () -> ()
  ^bb83:
    %726 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
    "llvm.store"(%726, %725) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb84] : () -> ()
  ^bb82:
    %727 = "llvm.getelementptr"(%723) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %728 = "mini.checkflag"(%727) {"typ_name" = "String"} : (!llvm.ptr) -> !mini.ptr<i1>
    %729 = "llvm.load"(%728) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%729) [^bb83, ^bb83] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb84:
    %730 = "llvm.extractvalue"(%722) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %731 = "llvm.load"(%725) : (!llvm.ptr) -> i32
    %732 = "llvm.getelementptr"(%730, %731) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<6 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %733 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %734 = "llvm.getelementptr"(%732, %733) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%734) : (!llvm.ptr) -> ()
  }) {"func_name" = "StringIterator_B_init_strString", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb85(%735 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %736 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %737 : !llvm.ptr):
    %738 = "mini.wrap"(%735) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"StringIterator">
    %739 = "mini.to_fat_ptr"(%738) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "StringIterator", "to_typ_name" = "StringIterator"} : (!mini.fatptr<"StringIterator">) -> !mini.fatptr<"StringIterator">
    %740 = "mini.get_field"(%739) {"offset" = 1 : i64, "vtable_bytes" = 48 : i32, "original_type" = i32} : (!mini.fatptr<"StringIterator">) -> !mini.ptr<i32>
    %741 = "mini.get_field"(%739) {"offset" = 0 : i64, "vtable_bytes" = 48 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!mini.fatptr<"StringIterator">) -> !mini.fatptr<"String">
    %742 = "mini.unwrap"(%741) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %743 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %744 = "mini.method_call"(%743, %742) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.ptr<i32>
    %745 = builtin.unrealized_conversion_cast %744 : !mini.ptr<i32> to !mini.ptr<i32>
    %746 = "mini.unwrap"(%740) : (!mini.ptr<i32>) -> i32
    %747 = "mini.unwrap"(%745) : (!mini.ptr<i32>) -> i32
    %748 = "mini.comparison"(%746, %747) {"op" = "LT"} : (i32, i32) -> i1
    %749 = "mini.wrap"(%748) : (i1) -> !mini.ptr<i32>
    %750 = "mini.unwrap"(%749) : (!mini.ptr<i32>) -> i1
    "mini.if"(%750) ({
      %751 = "mini.get_field"(%739) {"offset" = 1 : i64, "vtable_bytes" = 48 : i32, "original_type" = i32} : (!mini.fatptr<"StringIterator">) -> !mini.ptr<i32>
      %752 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %753 = "mini.unwrap"(%751) : (!mini.ptr<i32>) -> i32
      %754 = "mini.unwrap"(%752) : (!mini.ptr<i32>) -> i32
      %755 = "mini.arithmetic"(%753, %754) {"op" = "ADD"} : (i32, i32) -> i32
      %756 = "mini.wrap"(%755) : (i32) -> !mini.ptr<i32>
      %757 = builtin.unrealized_conversion_cast %756 : !mini.ptr<i32> to !mini.ptr<i32>
      "mini.set_field"(%739, %757) {"offset" = 1 : i64, "vtable_bytes" = 48 : i32, "original_type" = i32} : (!mini.fatptr<"StringIterator">, !mini.ptr<i32>) -> ()
      %758 = "mini.get_field"(%739) {"offset" = 0 : i64, "vtable_bytes" = 48 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!mini.fatptr<"StringIterator">) -> !mini.fatptr<"String">
      %759 = "mini.unwrap"(%758) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %760 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %761 = "mini.method_call"(%760, %759) {"offset" = 7 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
      %762 = builtin.unrealized_conversion_cast %761 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
      %763 = "mini.get_field"(%739) {"offset" = 1 : i64, "vtable_bytes" = 48 : i32, "original_type" = i32} : (!mini.fatptr<"StringIterator">) -> !mini.ptr<i32>
      %764 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %765 = "mini.unwrap"(%763) : (!mini.ptr<i32>) -> i32
      %766 = "mini.unwrap"(%764) : (!mini.ptr<i32>) -> i32
      %767 = "mini.arithmetic"(%765, %766) {"op" = "SUB"} : (i32, i32) -> i32
      %768 = "mini.wrap"(%767) : (i32) -> !mini.ptr<i32>
      %769 = "mini.buffer_get"(%762, %768) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
      %770 = "mini.unwrap"(%769) : (!mini.ptr<i8>) -> i8
      %771 = "mini.new"() {"typ" = !llvm.struct<(i8)>, "class_name" = "Character", "num_data_fields" = 1 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Character">
      %772 = "mini.get_field"(%739) {"offset" = 0 : i64, "vtable_bytes" = 48 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!mini.fatptr<"StringIterator">) -> !mini.fatptr<"String">
      %773 = "mini.unwrap"(%772) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %774 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %775 = "mini.method_call"(%774, %773) {"offset" = 7 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
      %776 = builtin.unrealized_conversion_cast %775 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
      %777 = "mini.get_field"(%739) {"offset" = 1 : i64, "vtable_bytes" = 48 : i32, "original_type" = i32} : (!mini.fatptr<"StringIterator">) -> !mini.ptr<i32>
      %778 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %779 = "mini.unwrap"(%777) : (!mini.ptr<i32>) -> i32
      %780 = "mini.unwrap"(%778) : (!mini.ptr<i32>) -> i32
      %781 = "mini.arithmetic"(%779, %780) {"op" = "SUB"} : (i32, i32) -> i32
      %782 = "mini.wrap"(%781) : (i32) -> !mini.ptr<i32>
      %783 = "mini.buffer_get"(%776, %782) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
      %784 = builtin.unrealized_conversion_cast %783 : !mini.ptr<i8> to !mini.ptr<i8>
      %785 = "mini.unwrap"(%784) : (!mini.ptr<i8>) -> i8
      %786 = "mini.unwrap"(%771) : (!mini.fatptr<"Character">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %787 = "mini.parameterization"() {"id_hierarchy" = ["i8_typ"], "name_hierarchy" = ["Ptri8"]} : () -> !llvm.ptr
      %788 = "mini.parameterizations_array"(%787) : (!llvm.ptr) -> !llvm.ptr
      "mini.method_call"(%788, %786, %785) {"offset" = 2 : i32, "vptrs" = ["i8_typ"], "vtable_size" = 5 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i8) -> ()
      %789 = builtin.unrealized_conversion_cast %771 : !mini.fatptr<"Character"> to !mini.union<[!mini.fatptr<"Character">, !mini.nil]>
      "mini.return"(%789) : (!mini.union<[!mini.fatptr<"Character">, !mini.nil]>) -> ()
    }) : (i1) -> ()
    %790 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
    %791 = "mini.unionize"(%790) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.fatptr<"Character">, !mini.nil]>
    "mini.return"(%791) : (!mini.union<[!mini.fatptr<"Character">, !mini.nil]>) -> ()
  }) {"func_name" = "StringIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb86(%792 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %793 : !llvm.ptr):
    %794 = "mini.invariant"(%793) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %795 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb87] : () -> ()
  ^bb87:
    %796 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%796, %795) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb88] : () -> ()
  ^bb88:
    %797 = "llvm.extractvalue"(%792) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %798 = "llvm.load"(%795) : (!llvm.ptr) -> i32
    %799 = "llvm.getelementptr"(%797, %798) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<6 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %800 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %801 = "llvm.getelementptr"(%799, %800) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%801) : (!llvm.ptr) -> ()
  }) {"func_name" = "StringIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_Exception", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
  "mini.getter_def"() {"meth_name" = "Exception_getter_line_number", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Exception_setter_line_number", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Exception_field_line_number", "getter_name" = "Exception_getter_line_number", "setter_name" = "Exception_setter_line_number"} : () -> ()
  "mini.getter_def"() {"meth_name" = "Exception_getter_file_name", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Exception_setter_file_name", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Exception_field_file_name", "getter_name" = "Exception_getter_file_name", "setter_name" = "Exception_setter_file_name"} : () -> ()
  "mini.getter_def"() {"meth_name" = "Exception_getter_message", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Exception_setter_message", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Exception_field_message", "getter_name" = "Exception_getter_message", "setter_name" = "Exception_setter_message"} : () -> ()
  "mini.func"() ({
  ^bb89(%802 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %803 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %804 : !llvm.ptr, %805 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %806 = "mini.wrap"(%802) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Exception">
    %807 = "mini.to_fat_ptr"(%806) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Exception", "to_typ_name" = "Exception"} : (!mini.fatptr<"Exception">) -> !mini.fatptr<"Exception">
    %808 = "mini.wrap"(%805) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %809 = "mini.to_fat_ptr"(%808) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %810 = "mini.to_fat_ptr"(%809) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.set_field"(%807, %810) {"offset" = 2 : i64, "vtable_bytes" = 104 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Exception">, !mini.fatptr<"String">) -> ()
    %811 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %812 = builtin.unrealized_conversion_cast %811 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%807, %812) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Exception">, !mini.ptr<i32>) -> ()
    %813 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %814 = "mini.create_buffer"(%813) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %815 = builtin.unrealized_conversion_cast %814 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %816 = "mini.refer"(%815) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %817 = "mini.literal"() {"typ" = !llvm.array<0 x i8>, "value" = ""} : () -> !llvm.ptr
    %818 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%816, %818, %817) {"typ" = !llvm.array<0 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %819 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %820 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %821 = "mini.unwrap"(%816) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %822 = "mini.unwrap"(%819) : (!mini.ptr<i32>) -> i32
    %823 = "mini.unwrap"(%820) : (!mini.ptr<i32>) -> i32
    %824 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %825 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %826 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %827 = builtin.unrealized_conversion_cast %816 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %828 = "mini.unwrap"(%827) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %829 = builtin.unrealized_conversion_cast %825 : !mini.ptr<i32> to !mini.ptr<i32>
    %830 = "mini.unwrap"(%829) : (!mini.ptr<i32>) -> i32
    %831 = builtin.unrealized_conversion_cast %826 : !mini.ptr<i32> to !mini.ptr<i32>
    %832 = "mini.unwrap"(%831) : (!mini.ptr<i32>) -> i32
    %833 = "mini.unwrap"(%824) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %834 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %835 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %836 = "mini.parameterizations_array"(%834, %835, %835) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%836, %833, %828, %830, %832) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %837 = "mini.to_fat_ptr"(%824) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.set_field"(%807, %837) {"offset" = 1 : i64, "vtable_bytes" = 104 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Exception">, !mini.fatptr<"String">) -> ()
  }) {"func_name" = "Exception_init_messageString", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb90(%838 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %839 : !llvm.ptr):
    %840 = "mini.invariant"(%839) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %841 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb91] : () -> ()
  ^bb92:
    %842 = "llvm.mlir.constant"() <{"value" = 8 : i32}> : () -> i32
    "llvm.store"(%842, %841) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb93] : () -> ()
  ^bb91:
    %843 = "llvm.getelementptr"(%839) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %844 = "mini.checkflag"(%843) {"typ_name" = "String"} : (!llvm.ptr) -> !mini.ptr<i1>
    %845 = "llvm.load"(%844) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%845) [^bb92, ^bb92] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb93:
    %846 = "llvm.extractvalue"(%838) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %847 = "llvm.load"(%841) : (!llvm.ptr) -> i32
    %848 = "llvm.getelementptr"(%846, %847) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %849 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %850 = "llvm.getelementptr"(%848, %849) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%850) : (!llvm.ptr) -> ()
  }) {"func_name" = "Exception_B_init_messageString", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb94(%851 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %852 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %853 : !llvm.ptr):
    %854 = "mini.wrap"(%851) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Exception">
    %855 = "mini.to_fat_ptr"(%854) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Exception", "to_typ_name" = "Exception"} : (!mini.fatptr<"Exception">) -> !mini.fatptr<"Exception">
    %856 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %857 = builtin.unrealized_conversion_cast %856 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%855, %857) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Exception">, !mini.ptr<i32>) -> ()
    %858 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %859 = "mini.create_buffer"(%858) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %860 = builtin.unrealized_conversion_cast %859 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %861 = "mini.refer"(%860) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %862 = "mini.literal"() {"typ" = !llvm.array<6 x i8>, "value" = "<None>"} : () -> !llvm.ptr
    %863 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%861, %863, %862) {"typ" = !llvm.array<6 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %864 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %865 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %866 = "mini.unwrap"(%861) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %867 = "mini.unwrap"(%864) : (!mini.ptr<i32>) -> i32
    %868 = "mini.unwrap"(%865) : (!mini.ptr<i32>) -> i32
    %869 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %870 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %871 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %872 = builtin.unrealized_conversion_cast %861 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %873 = "mini.unwrap"(%872) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %874 = builtin.unrealized_conversion_cast %870 : !mini.ptr<i32> to !mini.ptr<i32>
    %875 = "mini.unwrap"(%874) : (!mini.ptr<i32>) -> i32
    %876 = builtin.unrealized_conversion_cast %871 : !mini.ptr<i32> to !mini.ptr<i32>
    %877 = "mini.unwrap"(%876) : (!mini.ptr<i32>) -> i32
    %878 = "mini.unwrap"(%869) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %879 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %880 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %881 = "mini.parameterizations_array"(%879, %880, %880) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%881, %878, %873, %875, %877) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %882 = "mini.to_fat_ptr"(%869) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.set_field"(%855, %882) {"offset" = 2 : i64, "vtable_bytes" = 104 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Exception">, !mini.fatptr<"String">) -> ()
    %883 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %884 = "mini.create_buffer"(%883) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %885 = builtin.unrealized_conversion_cast %884 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %886 = "mini.refer"(%885) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %887 = "mini.literal"() {"typ" = !llvm.array<0 x i8>, "value" = ""} : () -> !llvm.ptr
    %888 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%886, %888, %887) {"typ" = !llvm.array<0 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %889 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %890 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %891 = "mini.unwrap"(%886) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %892 = "mini.unwrap"(%889) : (!mini.ptr<i32>) -> i32
    %893 = "mini.unwrap"(%890) : (!mini.ptr<i32>) -> i32
    %894 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %895 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %896 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %897 = builtin.unrealized_conversion_cast %886 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %898 = "mini.unwrap"(%897) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %899 = builtin.unrealized_conversion_cast %895 : !mini.ptr<i32> to !mini.ptr<i32>
    %900 = "mini.unwrap"(%899) : (!mini.ptr<i32>) -> i32
    %901 = builtin.unrealized_conversion_cast %896 : !mini.ptr<i32> to !mini.ptr<i32>
    %902 = "mini.unwrap"(%901) : (!mini.ptr<i32>) -> i32
    %903 = "mini.unwrap"(%894) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %904 = "mini.parameterizations_array"(%879, %880, %880) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%904, %903, %898, %900, %902) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %905 = "mini.to_fat_ptr"(%894) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.set_field"(%855, %905) {"offset" = 1 : i64, "vtable_bytes" = 104 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Exception">, !mini.fatptr<"String">) -> ()
  }) {"func_name" = "Exception_init_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb95(%906 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %907 : !llvm.ptr):
    %908 = "mini.invariant"(%907) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %909 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb96] : () -> ()
  ^bb96:
    %910 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    "llvm.store"(%910, %909) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb97] : () -> ()
  ^bb97:
    %911 = "llvm.extractvalue"(%906) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %912 = "llvm.load"(%909) : (!llvm.ptr) -> i32
    %913 = "llvm.getelementptr"(%911, %912) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %914 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %915 = "llvm.getelementptr"(%913, %914) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%915) : (!llvm.ptr) -> ()
  }) {"func_name" = "Exception_B_init_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb98(%916 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %917 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %918 : !llvm.ptr, %919 : i32, %920 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %921 = "mini.wrap"(%916) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Exception">
    %922 = "mini.to_fat_ptr"(%921) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Exception", "to_typ_name" = "Exception"} : (!mini.fatptr<"Exception">) -> !mini.fatptr<"Exception">
    %923 = "mini.wrap"(%919) : (i32) -> !mini.ptr<i32>
    %924 = builtin.unrealized_conversion_cast %923 : !mini.ptr<i32> to !mini.ptr<i32>
    %925 = builtin.unrealized_conversion_cast %924 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%922, %925) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Exception">, !mini.ptr<i32>) -> ()
    %926 = "mini.wrap"(%920) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %927 = "mini.to_fat_ptr"(%926) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %928 = "mini.to_fat_ptr"(%927) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.set_field"(%922, %928) {"offset" = 1 : i64, "vtable_bytes" = 104 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Exception">, !mini.fatptr<"String">) -> ()
  }) {"func_name" = "Exception_set_info_line_numberPtri32_file_nameString", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb99(%929 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %930 : !llvm.ptr):
    %931 = "mini.invariant"(%930) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %932 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb100] : () -> ()
  ^bb101:
    %933 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    "llvm.store"(%933, %932) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb102] : () -> ()
  ^bb103:
    %934 = "llvm.getelementptr"(%930) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %935 = "mini.checkflag"(%934) {"typ_name" = "String"} : (!llvm.ptr) -> !mini.ptr<i1>
    %936 = "llvm.load"(%935) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%936) [^bb101, ^bb101] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb100:
    %937 = "llvm.getelementptr"(%930) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %938 = "mini.checkflag"(%937) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %939 = "llvm.load"(%938) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%939) [^bb103, ^bb103] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb102:
    %940 = "llvm.extractvalue"(%929) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %941 = "llvm.load"(%932) : (!llvm.ptr) -> i32
    %942 = "llvm.getelementptr"(%940, %941) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %943 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %944 = "llvm.getelementptr"(%942, %943) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%944) : (!llvm.ptr) -> ()
  }) {"func_name" = "Exception_B_set_info_line_numberPtri32_file_nameString", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb104(%945 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %946 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %947 : !llvm.ptr):
    %948 = "mini.wrap"(%945) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Exception">
    %949 = "mini.to_fat_ptr"(%948) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Exception", "to_typ_name" = "Exception"} : (!mini.fatptr<"Exception">) -> !mini.fatptr<"Exception">
    %950 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %951 = "mini.create_buffer"(%950) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %952 = builtin.unrealized_conversion_cast %951 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %953 = "mini.refer"(%952) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %954 = "mini.literal"() {"typ" = !llvm.array<9 x i8>, "value" = "---------"} : () -> !llvm.ptr
    %955 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%953, %955, %954) {"typ" = !llvm.array<9 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %956 = "mini.literal"() {"value" = 9 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %957 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %958 = "mini.unwrap"(%953) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %959 = "mini.unwrap"(%956) : (!mini.ptr<i32>) -> i32
    %960 = "mini.unwrap"(%957) : (!mini.ptr<i32>) -> i32
    %961 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %962 = "mini.literal"() {"value" = 9 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %963 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %964 = builtin.unrealized_conversion_cast %953 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %965 = "mini.unwrap"(%964) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %966 = builtin.unrealized_conversion_cast %962 : !mini.ptr<i32> to !mini.ptr<i32>
    %967 = "mini.unwrap"(%966) : (!mini.ptr<i32>) -> i32
    %968 = builtin.unrealized_conversion_cast %963 : !mini.ptr<i32> to !mini.ptr<i32>
    %969 = "mini.unwrap"(%968) : (!mini.ptr<i32>) -> i32
    %970 = "mini.unwrap"(%961) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %971 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %972 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %973 = "mini.parameterizations_array"(%971, %972, %972) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%973, %970, %965, %967, %969) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %974 = "mini.unwrap"(%961) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %975 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %976 = "mini.method_call"(%975, %974) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %977 = builtin.unrealized_conversion_cast %976 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %978 = "mini.print"(%977) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> i32
    %979 = "mini.literal"() {"value" = 27 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %980 = "mini.create_buffer"(%979) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %981 = builtin.unrealized_conversion_cast %980 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %982 = "mini.refer"(%981) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %983 = "mini.literal"() {"typ" = !llvm.array<26 x i8>, "value" = "Exception thrown from file"} : () -> !llvm.ptr
    %984 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%982, %984, %983) {"typ" = !llvm.array<26 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %985 = "mini.literal"() {"value" = 26 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %986 = "mini.literal"() {"value" = 27 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %987 = "mini.unwrap"(%982) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %988 = "mini.unwrap"(%985) : (!mini.ptr<i32>) -> i32
    %989 = "mini.unwrap"(%986) : (!mini.ptr<i32>) -> i32
    %990 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %991 = "mini.literal"() {"value" = 26 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %992 = "mini.literal"() {"value" = 27 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %993 = builtin.unrealized_conversion_cast %982 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %994 = "mini.unwrap"(%993) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %995 = builtin.unrealized_conversion_cast %991 : !mini.ptr<i32> to !mini.ptr<i32>
    %996 = "mini.unwrap"(%995) : (!mini.ptr<i32>) -> i32
    %997 = builtin.unrealized_conversion_cast %992 : !mini.ptr<i32> to !mini.ptr<i32>
    %998 = "mini.unwrap"(%997) : (!mini.ptr<i32>) -> i32
    %999 = "mini.unwrap"(%990) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1000 = "mini.parameterizations_array"(%971, %972, %972) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%1000, %999, %994, %996, %998) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %1001 = "mini.unwrap"(%990) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1002 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1003 = "mini.method_call"(%1002, %1001) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %1004 = builtin.unrealized_conversion_cast %1003 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %1005 = "mini.print"(%1004) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> i32
    %1006 = "mini.get_field"(%949) {"offset" = 1 : i64, "vtable_bytes" = 104 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!mini.fatptr<"Exception">) -> !mini.fatptr<"String">
    %1007 = "mini.unwrap"(%1006) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1008 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1009 = "mini.method_call"(%1008, %1007) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %1010 = builtin.unrealized_conversion_cast %1009 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %1011 = "mini.print"(%1010) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> i32
    %1012 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1013 = "mini.create_buffer"(%1012) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %1014 = builtin.unrealized_conversion_cast %1013 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %1015 = "mini.refer"(%1014) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %1016 = "mini.literal"() {"typ" = !llvm.array<7 x i8>, "value" = "At line"} : () -> !llvm.ptr
    %1017 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%1015, %1017, %1016) {"typ" = !llvm.array<7 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %1018 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1019 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1020 = "mini.unwrap"(%1015) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %1021 = "mini.unwrap"(%1018) : (!mini.ptr<i32>) -> i32
    %1022 = "mini.unwrap"(%1019) : (!mini.ptr<i32>) -> i32
    %1023 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %1024 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1025 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1026 = builtin.unrealized_conversion_cast %1015 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %1027 = "mini.unwrap"(%1026) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %1028 = builtin.unrealized_conversion_cast %1024 : !mini.ptr<i32> to !mini.ptr<i32>
    %1029 = "mini.unwrap"(%1028) : (!mini.ptr<i32>) -> i32
    %1030 = builtin.unrealized_conversion_cast %1025 : !mini.ptr<i32> to !mini.ptr<i32>
    %1031 = "mini.unwrap"(%1030) : (!mini.ptr<i32>) -> i32
    %1032 = "mini.unwrap"(%1023) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1033 = "mini.parameterizations_array"(%971, %972, %972) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%1033, %1032, %1027, %1029, %1031) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %1034 = "mini.unwrap"(%1023) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1035 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1036 = "mini.method_call"(%1035, %1034) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %1037 = builtin.unrealized_conversion_cast %1036 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %1038 = "mini.print"(%1037) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> i32
    %1039 = "mini.get_field"(%949) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Exception">) -> !mini.ptr<i32>
    %1040 = "mini.print"(%1039) {"typ" = i32} : (!mini.ptr<i32>) -> i32
    %1041 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1042 = "mini.create_buffer"(%1041) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %1043 = builtin.unrealized_conversion_cast %1042 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %1044 = "mini.refer"(%1043) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %1045 = "mini.literal"() {"typ" = !llvm.array<12 x i8>, "value" = "With message"} : () -> !llvm.ptr
    %1046 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%1044, %1046, %1045) {"typ" = !llvm.array<12 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %1047 = "mini.literal"() {"value" = 12 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1048 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1049 = "mini.unwrap"(%1044) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %1050 = "mini.unwrap"(%1047) : (!mini.ptr<i32>) -> i32
    %1051 = "mini.unwrap"(%1048) : (!mini.ptr<i32>) -> i32
    %1052 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %1053 = "mini.literal"() {"value" = 12 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1054 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1055 = builtin.unrealized_conversion_cast %1044 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %1056 = "mini.unwrap"(%1055) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %1057 = builtin.unrealized_conversion_cast %1053 : !mini.ptr<i32> to !mini.ptr<i32>
    %1058 = "mini.unwrap"(%1057) : (!mini.ptr<i32>) -> i32
    %1059 = builtin.unrealized_conversion_cast %1054 : !mini.ptr<i32> to !mini.ptr<i32>
    %1060 = "mini.unwrap"(%1059) : (!mini.ptr<i32>) -> i32
    %1061 = "mini.unwrap"(%1052) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1062 = "mini.parameterizations_array"(%971, %972, %972) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%1062, %1061, %1056, %1058, %1060) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %1063 = "mini.unwrap"(%1052) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1064 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1065 = "mini.method_call"(%1064, %1063) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %1066 = builtin.unrealized_conversion_cast %1065 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %1067 = "mini.print"(%1066) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> i32
    %1068 = "mini.unwrap"(%949) : (!mini.fatptr<"Exception">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1069 = "mini.parameterizations_array"() : () -> !llvm.ptr
    "mini.method_call"(%1069, %1068) {"offset" = 7 : i32, "vptrs" = [], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %1070 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1071 = "mini.create_buffer"(%1070) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %1072 = builtin.unrealized_conversion_cast %1071 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %1073 = "mini.refer"(%1072) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %1074 = "mini.literal"() {"typ" = !llvm.array<9 x i8>, "value" = "---------"} : () -> !llvm.ptr
    %1075 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%1073, %1075, %1074) {"typ" = !llvm.array<9 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %1076 = "mini.literal"() {"value" = 9 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1077 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1078 = "mini.unwrap"(%1073) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %1079 = "mini.unwrap"(%1076) : (!mini.ptr<i32>) -> i32
    %1080 = "mini.unwrap"(%1077) : (!mini.ptr<i32>) -> i32
    %1081 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %1082 = "mini.literal"() {"value" = 9 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1083 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1084 = builtin.unrealized_conversion_cast %1073 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %1085 = "mini.unwrap"(%1084) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %1086 = builtin.unrealized_conversion_cast %1082 : !mini.ptr<i32> to !mini.ptr<i32>
    %1087 = "mini.unwrap"(%1086) : (!mini.ptr<i32>) -> i32
    %1088 = builtin.unrealized_conversion_cast %1083 : !mini.ptr<i32> to !mini.ptr<i32>
    %1089 = "mini.unwrap"(%1088) : (!mini.ptr<i32>) -> i32
    %1090 = "mini.unwrap"(%1081) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1091 = "mini.parameterizations_array"(%971, %972, %972) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%1091, %1090, %1085, %1087, %1089) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %1092 = "mini.unwrap"(%1081) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1093 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1094 = "mini.method_call"(%1093, %1092) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %1095 = builtin.unrealized_conversion_cast %1094 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %1096 = "mini.print"(%1095) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> i32
  }) {"func_name" = "Exception_report_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb105(%1097 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1098 : !llvm.ptr):
    %1099 = "mini.invariant"(%1098) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1100 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb106] : () -> ()
  ^bb106:
    %1101 = "llvm.mlir.constant"() <{"value" = 11 : i32}> : () -> i32
    "llvm.store"(%1101, %1100) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb107] : () -> ()
  ^bb107:
    %1102 = "llvm.extractvalue"(%1097) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1103 = "llvm.load"(%1100) : (!llvm.ptr) -> i32
    %1104 = "llvm.getelementptr"(%1102, %1103) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1105 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1106 = "llvm.getelementptr"(%1104, %1105) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1106) : (!llvm.ptr) -> ()
  }) {"func_name" = "Exception_B_report_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb108(%1107 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1108 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1109 : !llvm.ptr):
    %1110 = "mini.wrap"(%1107) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Exception">
    %1111 = "mini.to_fat_ptr"(%1110) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Exception", "to_typ_name" = "Exception"} : (!mini.fatptr<"Exception">) -> !mini.fatptr<"Exception">
    %1112 = "mini.get_field"(%1111) {"offset" = 2 : i64, "vtable_bytes" = 104 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!mini.fatptr<"Exception">) -> !mini.fatptr<"String">
    %1113 = "mini.unwrap"(%1112) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1114 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1115 = "mini.method_call"(%1114, %1113) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %1116 = builtin.unrealized_conversion_cast %1115 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %1117 = "mini.print"(%1116) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> i32
  }) {"func_name" = "Exception_print_message_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb109(%1118 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1119 : !llvm.ptr):
    %1120 = "mini.invariant"(%1119) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1121 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb110] : () -> ()
  ^bb110:
    %1122 = "llvm.mlir.constant"() <{"value" = 12 : i32}> : () -> i32
    "llvm.store"(%1122, %1121) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb111] : () -> ()
  ^bb111:
    %1123 = "llvm.extractvalue"(%1118) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1124 = "llvm.load"(%1121) : (!llvm.ptr) -> i32
    %1125 = "llvm.getelementptr"(%1123, %1124) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1126 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1127 = "llvm.getelementptr"(%1125, %1126) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1127) : (!llvm.ptr) -> ()
  }) {"func_name" = "Exception_B_print_message_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb112(%1128 : !llvm.struct<(!llvm.ptr)>):
    %1129 = "mini.wrap"(%1128) : (!llvm.struct<(!llvm.ptr)>) -> !mini.coroutine<[], !mini.any, !mini.fatptr<"Exception">>
    %1130 = builtin.unrealized_conversion_cast %1129 : !mini.coroutine<[], !mini.any, !mini.fatptr<"Exception">> to !mini.coroutine<[], !mini.any, !mini.fatptr<"Exception">>
    %1131 = "llvm.load"(%1130) : (!mini.coroutine<[], !mini.any, !mini.fatptr<"Exception">>) -> !llvm.ptr
    %1132 = "mini.coro_get_result"(%1131) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, i160)>
    %1133 = "mini.wrap"(%1132) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>
    %1134 = "mini.checkflag"(%1133) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>) -> !mini.ptr<i1>
    %1135 = "mini.unwrap"(%1134) : (!mini.ptr<i1>) -> i1
    %1136 = builtin.unrealized_conversion_cast %1133 : !mini.union<[!mini.fatptr<"Exception">, !mini.nil]> to !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>
    "mini.if"(%1135) ({
      %1137 = "mini.to_fat_ptr"(%1136) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "union_typ", "to_typ_name" = "Exception"} : (!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>) -> !mini.fatptr<"Exception">
      %1138 = "mini.unwrap"(%1137) : (!mini.fatptr<"Exception">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1139 = "mini.parameterizations_array"() : () -> !llvm.ptr
      "mini.method_call"(%1139, %1138) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      "mini.castassign"(%1136, %1137) ({
        %1140 = builtin.unrealized_conversion_cast %1137 : !mini.fatptr<"Exception"> to !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Exception", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.fatptr<"Exception">) -> ()
    }) : (i1) -> ()
  }) {"func_name" = "report_exception", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_IO", "types" = []} : () -> ()
  "mini.func"() ({
  ^bb113(%1141 : !llvm.ptr, %1142 : !llvm.struct<(!llvm.ptr, i160)>):
    %1143 = "mini.wrap"(%1142) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %1144 = "mini.narrow"(%1143) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = f64, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !mini.ptr<f64>
    %1145 = "mini.print"(%1144) {"typ" = f64} : (!mini.ptr<f64>) -> i32
  }) {"func_name" = "IO__Self_print_xPtrf64", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb114(%1146 : !llvm.ptr, %1147 : !llvm.struct<(!llvm.ptr, i160)>):
    %1148 = "mini.wrap"(%1147) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %1149 = "mini.narrow"(%1148) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = i8, "from_typ_name" = "union_typ", "to_typ_name" = "i8_typ"} : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !mini.ptr<i8>
    %1150 = "mini.print"(%1149) {"typ" = i8} : (!mini.ptr<i8>) -> i32
  }) {"func_name" = "IO__Self_print_xPtri8", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb115(%1151 : !llvm.ptr, %1152 : !llvm.struct<(!llvm.ptr, i160)>):
    %1153 = "mini.wrap"(%1152) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %1154 = "mini.to_fat_ptr"(%1153) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "union_typ", "to_typ_name" = "Representable"} : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !mini.fatptr<"Representable">
    %1155 = "mini.unwrap"(%1154) : (!mini.fatptr<"Representable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1156 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1157 = "mini.method_call"(%1156, %1155) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %1158 = "mini.to_fat_ptr"(%1157) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %1159 = "mini.unwrap"(%1158) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1160 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1161 = "mini.method_call"(%1160, %1159) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %1162 = builtin.unrealized_conversion_cast %1161 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %1163 = "mini.print"(%1162) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> i32
  }) {"func_name" = "IO__Self_print_xRepresentable", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb116(%1164 : !llvm.ptr, %1165 : !llvm.struct<(!llvm.ptr, i160)>):
    %1166 = "mini.wrap"(%1165) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %1167 = "mini.to_fat_ptr"(%1166) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "union_typ", "to_typ_name" = "Character"} : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !mini.fatptr<"Character">
    %1168 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1169 = "mini.create_buffer"(%1168) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %1170 = builtin.unrealized_conversion_cast %1169 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %1171 = "mini.refer"(%1170) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %1172 = "mini.literal"() {"value" = 0 : i8, "typ" = i8} : () -> !mini.ptr<i8>
    %1173 = builtin.unrealized_conversion_cast %1172 : !mini.ptr<i8> to !mini.ptr<i8>
    %1174 = "mini.unwrap"(%1167) : (!mini.fatptr<"Character">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1175 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1176 = "mini.method_call"(%1175, %1174) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 5 : i64, "ret_type" = i8, "ret_type_unq" = i8} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.ptr<i8>
    %1177 = builtin.unrealized_conversion_cast %1176 : !mini.ptr<i8> to !mini.ptr<i8>
    %1178 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1179 = builtin.unrealized_conversion_cast %1177 : !mini.ptr<i8> to !mini.ptr<i8>
    "mini.buffer_set"(%1171, %1178, %1179) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>, !mini.ptr<i8>) -> ()
    %1180 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1181 = builtin.unrealized_conversion_cast %1173 : !mini.ptr<i8> to !mini.ptr<i8>
    "mini.buffer_set"(%1171, %1180, %1181) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>, !mini.ptr<i8>) -> ()
    %1182 = "mini.print"(%1171) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> i32
  }) {"func_name" = "IO__Self_print_xCharacter", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb117(%1183 : !llvm.ptr, %1184 : !llvm.struct<(!llvm.ptr, i160)>):
    %1185 = "mini.wrap"(%1184) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %1186 = "mini.narrow"(%1185) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !mini.ptr<i32>
    %1187 = "mini.print"(%1186) {"typ" = i32} : (!mini.ptr<i32>) -> i32
  }) {"func_name" = "IO__Self_print_xPtri32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb118(%1188 : !llvm.ptr, %1189 : !llvm.struct<(!llvm.ptr, i160)>):
    %1190 = "mini.wrap"(%1189) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %1191 = "mini.to_fat_ptr"(%1190) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "union_typ", "to_typ_name" = "String"} : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !mini.fatptr<"String">
    %1192 = "mini.unwrap"(%1191) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1193 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1194 = "mini.method_call"(%1193, %1192) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %1195 = builtin.unrealized_conversion_cast %1194 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %1196 = "mini.print"(%1195) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> i32
  }) {"func_name" = "IO__Self_print_xString", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb119(%1197 : !llvm.ptr, %1198 : !llvm.struct<(!llvm.ptr, i160)>):
    %1199 = "mini.wrap"(%1198) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %1200 = "mini.narrow"(%1199) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.array<0 x i8>, "from_typ_name" = "union_typ", "to_typ_name" = "nil_typ"} : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !mini.nil
    %1201 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1202 = "mini.create_buffer"(%1201) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %1203 = builtin.unrealized_conversion_cast %1202 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %1204 = "mini.refer"(%1203) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %1205 = "mini.literal"() {"typ" = !llvm.array<3 x i8>, "value" = "nil"} : () -> !llvm.ptr
    %1206 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%1204, %1206, %1205) {"typ" = !llvm.array<3 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %1207 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1208 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1209 = "mini.unwrap"(%1204) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %1210 = "mini.unwrap"(%1207) : (!mini.ptr<i32>) -> i32
    %1211 = "mini.unwrap"(%1208) : (!mini.ptr<i32>) -> i32
    %1212 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %1213 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1214 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1215 = builtin.unrealized_conversion_cast %1204 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %1216 = "mini.unwrap"(%1215) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %1217 = builtin.unrealized_conversion_cast %1213 : !mini.ptr<i32> to !mini.ptr<i32>
    %1218 = "mini.unwrap"(%1217) : (!mini.ptr<i32>) -> i32
    %1219 = builtin.unrealized_conversion_cast %1214 : !mini.ptr<i32> to !mini.ptr<i32>
    %1220 = "mini.unwrap"(%1219) : (!mini.ptr<i32>) -> i32
    %1221 = "mini.unwrap"(%1212) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1222 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %1223 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %1224 = "mini.parameterizations_array"(%1222, %1223, %1223) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%1224, %1221, %1216, %1218, %1220) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %1225 = "mini.unwrap"(%1212) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1226 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1227 = "mini.method_call"(%1226, %1225) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %1228 = builtin.unrealized_conversion_cast %1227 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %1229 = "mini.print"(%1228) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> i32
  }) {"func_name" = "IO__Self_print_xNil", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb120(%1230 : !llvm.ptr, %1231 : !llvm.struct<(!llvm.ptr, i160)>):
    %1232 = "mini.wrap"(%1231) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %1233 = "mini.narrow"(%1232) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = i1, "from_typ_name" = "union_typ", "to_typ_name" = "bool_typ"} : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !mini.ptr<i1>
    %1234 = "mini.unwrap"(%1233) : (!mini.ptr<i1>) -> i1
    "mini.if"(%1234) ({
      %1235 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %1236 = "mini.create_buffer"(%1235) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
      %1237 = builtin.unrealized_conversion_cast %1236 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
      %1238 = "mini.refer"(%1237) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
      %1239 = "mini.literal"() {"typ" = !llvm.array<4 x i8>, "value" = "true"} : () -> !llvm.ptr
      %1240 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mini.buffer_set"(%1238, %1240, %1239) {"typ" = !llvm.array<4 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
      %1241 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %1242 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %1243 = "mini.unwrap"(%1238) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
      %1244 = "mini.unwrap"(%1241) : (!mini.ptr<i32>) -> i32
      %1245 = "mini.unwrap"(%1242) : (!mini.ptr<i32>) -> i32
      %1246 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
      %1247 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %1248 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %1249 = builtin.unrealized_conversion_cast %1238 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
      %1250 = "mini.unwrap"(%1249) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
      %1251 = builtin.unrealized_conversion_cast %1247 : !mini.ptr<i32> to !mini.ptr<i32>
      %1252 = "mini.unwrap"(%1251) : (!mini.ptr<i32>) -> i32
      %1253 = builtin.unrealized_conversion_cast %1248 : !mini.ptr<i32> to !mini.ptr<i32>
      %1254 = "mini.unwrap"(%1253) : (!mini.ptr<i32>) -> i32
      %1255 = "mini.unwrap"(%1246) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1256 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
      %1257 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %1258 = "mini.parameterizations_array"(%1256, %1257, %1257) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mini.method_call"(%1258, %1255, %1250, %1252, %1254) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %1259 = "mini.unwrap"(%1246) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1260 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %1261 = "mini.method_call"(%1260, %1259) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
      %1262 = builtin.unrealized_conversion_cast %1261 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
      %1263 = "mini.print"(%1262) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> i32
    }, {
      %1264 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %1265 = "mini.create_buffer"(%1264) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
      %1266 = builtin.unrealized_conversion_cast %1265 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
      %1267 = "mini.refer"(%1266) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
      %1268 = "mini.literal"() {"typ" = !llvm.array<5 x i8>, "value" = "false"} : () -> !llvm.ptr
      %1269 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mini.buffer_set"(%1267, %1269, %1268) {"typ" = !llvm.array<5 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
      %1270 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %1271 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %1272 = "mini.unwrap"(%1267) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
      %1273 = "mini.unwrap"(%1270) : (!mini.ptr<i32>) -> i32
      %1274 = "mini.unwrap"(%1271) : (!mini.ptr<i32>) -> i32
      %1275 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
      %1276 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %1277 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %1278 = builtin.unrealized_conversion_cast %1267 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
      %1279 = "mini.unwrap"(%1278) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
      %1280 = builtin.unrealized_conversion_cast %1276 : !mini.ptr<i32> to !mini.ptr<i32>
      %1281 = "mini.unwrap"(%1280) : (!mini.ptr<i32>) -> i32
      %1282 = builtin.unrealized_conversion_cast %1277 : !mini.ptr<i32> to !mini.ptr<i32>
      %1283 = "mini.unwrap"(%1282) : (!mini.ptr<i32>) -> i32
      %1284 = "mini.unwrap"(%1275) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1285 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
      %1286 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %1287 = "mini.parameterizations_array"(%1285, %1286, %1286) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mini.method_call"(%1287, %1284, %1279, %1281, %1283) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %1288 = "mini.unwrap"(%1275) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1289 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %1290 = "mini.method_call"(%1289, %1288) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
      %1291 = builtin.unrealized_conversion_cast %1290 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
      %1292 = "mini.print"(%1291) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> i32
    }) : (i1) -> ()
  }) {"func_name" = "IO__Self_print_xPtri1", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb121(%1293 : !llvm.ptr, %1294 : !llvm.struct<(!llvm.ptr, i160)>):
    %1295 = "mini.wrap"(%1294) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %1296 = "mini.narrow"(%1295) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = i64, "from_typ_name" = "union_typ", "to_typ_name" = "i64_typ"} : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !mini.ptr<i64>
    %1297 = "mini.print"(%1296) {"typ" = i64} : (!mini.ptr<i64>) -> i32
  }) {"func_name" = "IO__Self_print_xPtri64", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb122(%1298 : !llvm.ptr):
    %1299 = "mini.invariant"(%1298) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1300 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb123] : () -> ()
  ^bb124:
    %1301 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    "llvm.store"(%1301, %1300) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb125] : () -> ()
  ^bb126:
    %1302 = "llvm.mlir.constant"() <{"value" = 8 : i32}> : () -> i32
    "llvm.store"(%1302, %1300) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb125] : () -> ()
  ^bb127:
    %1303 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    "llvm.store"(%1303, %1300) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb125] : () -> ()
  ^bb128:
    %1304 = "llvm.mlir.constant"() <{"value" = 2 : i32}> : () -> i32
    "llvm.store"(%1304, %1300) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb125] : () -> ()
  ^bb129:
    %1305 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%1305, %1300) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb125] : () -> ()
  ^bb130:
    %1306 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
    "llvm.store"(%1306, %1300) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb125] : () -> ()
  ^bb131:
    %1307 = "llvm.mlir.constant"() <{"value" = 1 : i32}> : () -> i32
    "llvm.store"(%1307, %1300) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb125] : () -> ()
  ^bb132:
    %1308 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
    "llvm.store"(%1308, %1300) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb125] : () -> ()
  ^bb133:
    %1309 = "llvm.mlir.constant"() <{"value" = 3 : i32}> : () -> i32
    "llvm.store"(%1309, %1300) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb125] : () -> ()
  ^bb123:
    %1310 = "llvm.getelementptr"(%1298) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1311 = "mini.checkflag"(%1310) {"typ_name" = "nil_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1312 = "llvm.load"(%1311) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1312) [^bb124, ^bb134] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb134:
    %1313 = "llvm.getelementptr"(%1298) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1314 = "mini.checkflag"(%1313) {"typ_name" = "bool_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1315 = "llvm.load"(%1314) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1315) [^bb126, ^bb135] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb135:
    %1316 = "llvm.getelementptr"(%1298) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1317 = "mini.checkflag"(%1316) {"typ_name" = "i64_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1318 = "llvm.load"(%1317) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1318) [^bb127, ^bb136] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb136:
    %1319 = "llvm.getelementptr"(%1298) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1320 = "mini.checkflag"(%1319) {"typ_name" = "i8_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1321 = "llvm.load"(%1320) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1321) [^bb128, ^bb137] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb137:
    %1322 = "llvm.getelementptr"(%1298) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1323 = "mini.checkflag"(%1322) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1324 = "llvm.load"(%1323) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1324) [^bb129, ^bb138] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb138:
    %1325 = "llvm.getelementptr"(%1298) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1326 = "mini.checkflag"(%1325) {"typ_name" = "String"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1327 = "llvm.load"(%1326) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1327) [^bb139, ^bb140] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb139:
    %1328 = "llvm.getelementptr"(%1298) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1329 = "mini.checkflag"(%1328) {"typ_name" = "Character"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1330 = "llvm.load"(%1329) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1330) [^bb140, ^bb130] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb140:
    %1331 = "llvm.getelementptr"(%1298) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1332 = "mini.checkflag"(%1331) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1333 = "llvm.load"(%1332) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1333) [^bb131, ^bb141] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb141:
    %1334 = "llvm.getelementptr"(%1298) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1335 = "mini.checkflag"(%1334) {"typ_name" = "Character"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1336 = "llvm.load"(%1335) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1336) [^bb142, ^bb143] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb142:
    %1337 = "llvm.getelementptr"(%1298) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1338 = "mini.checkflag"(%1337) {"typ_name" = "String"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1339 = "llvm.load"(%1338) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1339) [^bb143, ^bb132] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb143:
    %1340 = "llvm.getelementptr"(%1298) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1341 = "mini.checkflag"(%1340) {"typ_name" = "Representable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1342 = "llvm.load"(%1341) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1342) [^bb144, ^bb133] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb144:
    %1343 = "llvm.getelementptr"(%1298) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1344 = "mini.checkflag"(%1343) {"typ_name" = "Character"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1345 = "llvm.load"(%1344) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1345) [^bb133, ^bb145] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb145:
    %1346 = "llvm.getelementptr"(%1298) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1347 = "mini.checkflag"(%1346) {"typ_name" = "String"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1348 = "llvm.load"(%1347) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1348) [^bb133, ^bb133] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb125:
    %1349 = "mini.addr_of"() {"global_name" = @IO} : () -> !llvm.ptr
    %1350 = "llvm.load"(%1300) : (!llvm.ptr) -> i32
    %1351 = "llvm.getelementptr"(%1349, %1350) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1352 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1353 = "llvm.getelementptr"(%1351, %1352) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1353) : (!llvm.ptr) -> ()
  }) {"func_name" = "IO_B__Self_print_xPtrf64__Self_print_xPtri8__Self_print_xRepresentable__Self_print_xCharacter__Self_print_xPtri32__Self_print_xString__Self_print_xNil__Self_print_xPtri1__Self_print_xPtri64", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_Blocking", "types" = []} : () -> ()
  "mini.func"() ({
  ^bb146(%1354 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1355 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1356 : !llvm.ptr):
    %1357 = "mini.wrap"(%1354) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Blocking">
    %1358 = "mini.to_fat_ptr"(%1357) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Blocking", "to_typ_name" = "Blocking"} : (!mini.fatptr<"Blocking">) -> !mini.fatptr<"Blocking">
  }) {"func_name" = "Blocking_init_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb147(%1359 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1360 : !llvm.ptr):
    %1361 = "mini.invariant"(%1360) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1362 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb148] : () -> ()
  ^bb148:
    %1363 = "llvm.mlir.constant"() <{"value" = 1 : i32}> : () -> i32
    "llvm.store"(%1363, %1362) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb149] : () -> ()
  ^bb149:
    %1364 = "llvm.extractvalue"(%1359) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1365 = "llvm.load"(%1362) : (!llvm.ptr) -> i32
    %1366 = "llvm.getelementptr"(%1364, %1365) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1367 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1368 = "llvm.getelementptr"(%1366, %1367) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1368) : (!llvm.ptr) -> ()
  }) {"func_name" = "Blocking_B_init_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_Channel", "types" = [!llvm.struct<(!llvm.ptr, i32)>]} : () -> ()
  "mini.getter_def"() {"meth_name" = "Channel_getter_value", "types" = [!llvm.struct<(!llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i32)>, "specialized_name" = "union_typ", "parameterization" = "_parameterization_Ptri32_or_Nil"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Channel_setter_value", "types" = [!llvm.struct<(!llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i32)>, "specialized_name" = "union_typ", "parameterization" = "_parameterization_Ptri32_or_Nil"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Channel_field_value", "getter_name" = "Channel_getter_value", "setter_name" = "Channel_setter_value"} : () -> ()
  "mini.func"() ({
  ^bb150(%1369 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1370 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1371 : !llvm.ptr):
    %1372 = "mini.wrap"(%1369) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Channel">
    %1373 = "mini.to_fat_ptr"(%1372) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Channel", "to_typ_name" = "Channel"} : (!mini.fatptr<"Channel">) -> !mini.fatptr<"Channel">
    %1374 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
    %1375 = "mini.unionize"(%1374) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    "mini.set_field"(%1373, %1375) {"offset" = 0 : i64, "vtable_bytes" = 56 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i32)>} : (!mini.fatptr<"Channel">, !mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
  }) {"func_name" = "Channel_init_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb151(%1376 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1377 : !llvm.ptr):
    %1378 = "mini.invariant"(%1377) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1379 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb152] : () -> ()
  ^bb152:
    %1380 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
    "llvm.store"(%1380, %1379) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb153] : () -> ()
  ^bb153:
    %1381 = "llvm.extractvalue"(%1376) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1382 = "llvm.load"(%1379) : (!llvm.ptr) -> i32
    %1383 = "llvm.getelementptr"(%1381, %1382) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<7 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1384 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1385 = "llvm.getelementptr"(%1383, %1384) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1385) : (!llvm.ptr) -> ()
  }) {"func_name" = "Channel_B_init_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb154(%1386 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1387 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1388 : !llvm.ptr):
    %1389 = "mini.wrap"(%1386) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Channel">
    %1390 = "mini.to_fat_ptr"(%1389) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Channel", "to_typ_name" = "Channel"} : (!mini.fatptr<"Channel">) -> !mini.fatptr<"Channel">
    "mini.while"() ({
      %1391 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
      %1392 = "mini.unwrap"(%1391) : (!mini.ptr<i1>) -> i1
    }, {
      %1393 = "mini.get_field"(%1390) {"offset" = 0 : i64, "vtable_bytes" = 56 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i32)>} : (!mini.fatptr<"Channel">) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %1394 = "mini.checkflag"(%1393) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i1>
      %1395 = "mini.unwrap"(%1394) : (!mini.ptr<i1>) -> i1
      %1396 = builtin.unrealized_conversion_cast %1393 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      "mini.if"(%1395) ({
        %1397 = "mini.narrow"(%1396) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
        %1398 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
        %1399 = "mini.unionize"(%1398) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
        "mini.set_field"(%1390, %1399) {"offset" = 0 : i64, "vtable_bytes" = 56 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i32)>} : (!mini.fatptr<"Channel">, !mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
        %1400 = builtin.unrealized_conversion_cast %1397 : !mini.ptr<i32> to !mini.ptr<i32>
        "mini.return"(%1400) : (!mini.ptr<i32>) -> ()
        "mini.castassign"(%1396, %1397) ({
          %1401 = "mini.unionize"(%1397) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
        }) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.ptr<i32>) -> ()
      }) : (i1) -> ()
      %1402 = "mini.new"() {"typ" = !llvm.struct<()>, "class_name" = "Blocking", "num_data_fields" = 0 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Blocking">
      %1403 = "mini.unwrap"(%1402) : (!mini.fatptr<"Blocking">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1404 = "mini.parameterizations_array"() : () -> !llvm.ptr
      "mini.method_call"(%1404, %1403) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %1405 = builtin.unrealized_conversion_cast %1402 : !mini.fatptr<"Blocking"> to !mini.union<[!mini.fatptr<"Blocking">, !mini.nil]>
      %1406 = "mini.unwrap"(%1405) : (!mini.union<[!mini.fatptr<"Blocking">, !mini.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %1407 = "mini.coro_yield"(%1406) : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
      %1408 = "mini.wrap"(%1407) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Blocking">, !mini.nil]>
    }) : () -> ()
  }) {"func_name" = "Channel_get_", "result_type" = i32, "yield_type" = !mini.fatptr<"Blocking">} : () -> ()
  "mini.func"() ({
  ^bb155(%1409 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1410 : !llvm.ptr):
    %1411 = "mini.invariant"(%1410) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1412 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb156] : () -> ()
  ^bb156:
    %1413 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%1413, %1412) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb157] : () -> ()
  ^bb157:
    %1414 = "llvm.extractvalue"(%1409) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1415 = "llvm.load"(%1412) : (!llvm.ptr) -> i32
    %1416 = "llvm.getelementptr"(%1414, %1415) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<7 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1417 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1418 = "llvm.getelementptr"(%1416, %1417) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1418) : (!llvm.ptr) -> ()
  }) {"func_name" = "Channel_B_get_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb158(%1419 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1420 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1421 : !llvm.ptr, %1422 : i32):
    %1423 = "mini.wrap"(%1419) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Channel">
    %1424 = "mini.to_fat_ptr"(%1423) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Channel", "to_typ_name" = "Channel"} : (!mini.fatptr<"Channel">) -> !mini.fatptr<"Channel">
    %1425 = "mini.wrap"(%1422) : (i32) -> !mini.ptr<i32>
    %1426 = builtin.unrealized_conversion_cast %1425 : !mini.ptr<i32> to !mini.ptr<i32>
    %1427 = "mini.get_field"(%1424) {"offset" = 0 : i64, "vtable_bytes" = 56 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i32)>} : (!mini.fatptr<"Channel">) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %1428 = builtin.unrealized_conversion_cast %1427 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
    "mini.while"() ({
      %1429 = "mini.checkflag"(%1428) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i1>
      %1430 = "mini.unwrap"(%1429) : (!mini.ptr<i1>) -> i1
    }, {
      %1431 = "mini.narrow"(%1428) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
      %1432 = "mini.new"() {"typ" = !llvm.struct<()>, "class_name" = "Blocking", "num_data_fields" = 0 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Blocking">
      %1433 = "mini.unwrap"(%1432) : (!mini.fatptr<"Blocking">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1434 = "mini.parameterizations_array"() : () -> !llvm.ptr
      "mini.method_call"(%1434, %1433) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %1435 = builtin.unrealized_conversion_cast %1432 : !mini.fatptr<"Blocking"> to !mini.union<[!mini.fatptr<"Blocking">, !mini.nil]>
      %1436 = "mini.unwrap"(%1435) : (!mini.union<[!mini.fatptr<"Blocking">, !mini.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %1437 = "mini.coro_yield"(%1436) : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
      %1438 = "mini.wrap"(%1437) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Blocking">, !mini.nil]>
      %1439 = "mini.get_field"(%1424) {"offset" = 0 : i64, "vtable_bytes" = 56 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i32)>} : (!mini.fatptr<"Channel">) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      "mini.castassign"(%1428, %1439) ({
        %1440 = builtin.unrealized_conversion_cast %1439 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
    }) : () -> ()
    %1441 = "mini.unionize"(%1426) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    "mini.set_field"(%1424, %1441) {"offset" = 0 : i64, "vtable_bytes" = 56 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i32)>} : (!mini.fatptr<"Channel">, !mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
  }) {"func_name" = "Channel_put_new_valuePtri32", "result_type" = !llvm.void, "yield_type" = !mini.fatptr<"Blocking">} : () -> ()
  "mini.func"() ({
  ^bb159(%1442 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1443 : !llvm.ptr):
    %1444 = "mini.invariant"(%1443) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1445 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb160] : () -> ()
  ^bb161:
    %1446 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
    "llvm.store"(%1446, %1445) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb162] : () -> ()
  ^bb160:
    %1447 = "llvm.getelementptr"(%1443) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1448 = "mini.checkflag"(%1447) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1449 = "llvm.load"(%1448) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1449) [^bb161, ^bb161] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb162:
    %1450 = "llvm.extractvalue"(%1442) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1451 = "llvm.load"(%1445) : (!llvm.ptr) -> i32
    %1452 = "llvm.getelementptr"(%1450, %1451) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<7 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1453 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1454 = "llvm.getelementptr"(%1452, %1453) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1454) : (!llvm.ptr) -> ()
  }) {"func_name" = "Channel_B_put_new_valuePtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_IntIterator", "types" = []} : () -> ()
  "mini.func"() ({
  ^bb163(%1455 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1456 : !llvm.ptr):
    %1457 = "mini.invariant"(%1456) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1458 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb164] : () -> ()
  ^bb164:
    %1459 = "llvm.mlir.constant"() <{"value" = 1 : i32}> : () -> i32
    "llvm.store"(%1459, %1458) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb165] : () -> ()
  ^bb165:
    %1460 = "llvm.extractvalue"(%1455) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1461 = "llvm.load"(%1458) : (!llvm.ptr) -> i32
    %1462 = "llvm.getelementptr"(%1460, %1461) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1463 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1464 = "llvm.getelementptr"(%1462, %1463) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1464) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_IntIterable", "types" = []} : () -> ()
  "mini.func"() ({
  ^bb166(%1465 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1466 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1467 : !llvm.ptr, %1468 : !llvm.struct<(!llvm.ptr)>):
    %1469 = "mini.wrap"(%1465) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %1470 = "mini.to_fat_ptr"(%1469) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %1471 = "mini.wrap"(%1468) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.ptr<i32>], !mini.any, !mini.nothing>
    %1472 = builtin.unrealized_conversion_cast %1471 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.nothing> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.nothing>
    %1473 = "mini.unwrap"(%1470) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1474 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1475 = "mini.method_call"(%1474, %1473) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %1476 = "mini.to_fat_ptr"(%1475) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %1477 = "mini.to_fat_ptr"(%1476) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %1478 = "mini.refer"(%1477) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    "mini.while"() ({
      %1479 = "mini.unwrap"(%1478) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1480 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %1481 = "mini.method_call"(%1480, %1479) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %1482 = builtin.unrealized_conversion_cast %1481 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %1483 = "mini.checkflag"(%1482) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i1>
      %1484 = "mini.unwrap"(%1483) : (!mini.ptr<i1>) -> i1
    }, {
      %1485 = "mini.narrow"(%1482) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
      %1486 = builtin.unrealized_conversion_cast %1485 : !mini.ptr<i32> to !mini.ptr<i32>
      %1487 = "mini.unwrap"(%1486) : (!mini.ptr<i32>) -> i32
      %1488 = "mini.unwrap"(%1472) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.nothing>) -> !llvm.ptr
      "mini.fptr_call"(%1488, %1487) {"ret_type" = !llvm.void} : (!llvm.ptr, i32) -> ()
      "mini.castassign"(%1482, %1485) ({
        %1489 = builtin.unrealized_conversion_cast %1485 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.ptr<i32>) -> ()
    }) : () -> ()
  }) {"func_name" = "IntIterable_each_fFunctionPtri32_to_Nothing", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb167(%1490 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1491 : !llvm.ptr):
    %1492 = "mini.invariant"(%1491) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1493 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb168] : () -> ()
  ^bb169:
    %1494 = "llvm.mlir.constant"() <{"value" = 11 : i32}> : () -> i32
    "llvm.store"(%1494, %1493) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb170] : () -> ()
  ^bb168:
    %1495 = "llvm.getelementptr"(%1491) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1496 = "mini.checkflag"(%1495) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1497 = "llvm.load"(%1496) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1497) [^bb169, ^bb169] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb170:
    %1498 = "llvm.extractvalue"(%1490) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1499 = "llvm.load"(%1493) : (!llvm.ptr) -> i32
    %1500 = "llvm.getelementptr"(%1498, %1499) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<24 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1501 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1502 = "llvm.getelementptr"(%1500, %1501) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1502) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntIterable_B_each_fFunctionPtri32_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb171(%1503 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1504 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1505 : !llvm.ptr, %1506 : i32, %1507 : !llvm.struct<(!llvm.ptr)>):
    %1508 = "mini.wrap"(%1503) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %1509 = "mini.to_fat_ptr"(%1508) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %1510 = "mini.wrap"(%1506) : (i32) -> !mini.ptr<i32>
    %1511 = builtin.unrealized_conversion_cast %1510 : !mini.ptr<i32> to !mini.ptr<i32>
    %1512 = "mini.wrap"(%1507) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.ptr<i32>, !mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %1513 = builtin.unrealized_conversion_cast %1512 : !mini.function<[!mini.ptr<i32>, !mini.ptr<i32>], !mini.any, !mini.ptr<i32>> to !mini.function<[!mini.ptr<i32>, !mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %1514 = "mini.unwrap"(%1509) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1515 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1516 = "mini.method_call"(%1515, %1514) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %1517 = "mini.to_fat_ptr"(%1516) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %1518 = "mini.to_fat_ptr"(%1517) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %1519 = "mini.refer"(%1518) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    "mini.while"() ({
      %1520 = "mini.unwrap"(%1519) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1521 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %1522 = "mini.method_call"(%1521, %1520) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %1523 = builtin.unrealized_conversion_cast %1522 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %1524 = "mini.checkflag"(%1523) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i1>
      %1525 = "mini.unwrap"(%1524) : (!mini.ptr<i1>) -> i1
    }, {
      %1526 = "mini.narrow"(%1523) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
      %1527 = builtin.unrealized_conversion_cast %1511 : !mini.ptr<i32> to !mini.ptr<i32>
      %1528 = "mini.unwrap"(%1527) : (!mini.ptr<i32>) -> i32
      %1529 = builtin.unrealized_conversion_cast %1526 : !mini.ptr<i32> to !mini.ptr<i32>
      %1530 = "mini.unwrap"(%1529) : (!mini.ptr<i32>) -> i32
      %1531 = "mini.unwrap"(%1513) : (!mini.function<[!mini.ptr<i32>, !mini.ptr<i32>], !mini.any, !mini.ptr<i32>>) -> !llvm.ptr
      %1532 = "mini.fptr_call"(%1531, %1528, %1530) {"ret_type" = i32} : (!llvm.ptr, i32, i32) -> !mini.ptr<i32>
      "mini.castassign"(%1511, %1532) ({
        %1533 = builtin.unrealized_conversion_cast %1532 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
      "mini.castassign"(%1523, %1526) ({
        %1534 = builtin.unrealized_conversion_cast %1526 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %1535 = builtin.unrealized_conversion_cast %1511 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.return"(%1535) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb172(%1536 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1537 : !llvm.ptr):
    %1538 = "mini.invariant"(%1537) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1539 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb173] : () -> ()
  ^bb174:
    %1540 = "llvm.mlir.constant"() <{"value" = 12 : i32}> : () -> i32
    "llvm.store"(%1540, %1539) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb175] : () -> ()
  ^bb176:
    %1541 = "llvm.getelementptr"(%1537) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1542 = "mini.checkflag"(%1541) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1543 = "llvm.load"(%1542) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1543) [^bb174, ^bb174] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb173:
    %1544 = "llvm.getelementptr"(%1537) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1545 = "mini.checkflag"(%1544) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1546 = "llvm.load"(%1545) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1546) [^bb176, ^bb176] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb175:
    %1547 = "llvm.extractvalue"(%1536) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1548 = "llvm.load"(%1539) : (!llvm.ptr) -> i32
    %1549 = "llvm.getelementptr"(%1547, %1548) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<24 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1550 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1551 = "llvm.getelementptr"(%1549, %1550) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1551) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb177(%1552 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1553 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1554 : !llvm.ptr, %1555 : !llvm.struct<(!llvm.ptr)>):
    %1556 = "mini.wrap"(%1552) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %1557 = "mini.to_fat_ptr"(%1556) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %1558 = "mini.wrap"(%1555) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
    %1559 = builtin.unrealized_conversion_cast %1558 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
    %1560 = "mini.unwrap"(%1557) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1561 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1562 = "mini.method_call"(%1561, %1560) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %1563 = "mini.to_fat_ptr"(%1562) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %1564 = "mini.to_fat_ptr"(%1563) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %1565 = "mini.refer"(%1564) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    "mini.while"() ({
      %1566 = "mini.unwrap"(%1565) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1567 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %1568 = "mini.method_call"(%1567, %1566) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %1569 = builtin.unrealized_conversion_cast %1568 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %1570 = "mini.checkflag"(%1569) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i1>
      %1571 = "mini.unwrap"(%1570) : (!mini.ptr<i1>) -> i1
    }, {
      %1572 = "mini.narrow"(%1569) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
      %1573 = builtin.unrealized_conversion_cast %1572 : !mini.ptr<i32> to !mini.ptr<i32>
      %1574 = "mini.unwrap"(%1573) : (!mini.ptr<i32>) -> i32
      %1575 = "mini.unwrap"(%1559) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>) -> !llvm.ptr
      %1576 = "mini.fptr_call"(%1575, %1574) {"ret_type" = i1} : (!llvm.ptr, i32) -> !mini.ptr<i1>
      %1577 = "mini.unwrap"(%1576) : (!mini.ptr<i1>) -> i1
      "mini.if"(%1577) ({
        "mini.continue"() [^bb178] : () -> ()
      }) : (i1) -> ()
      %1578 = "mini.literal"() {"value" = false, "typ" = i1} : () -> !mini.ptr<i1>
      %1579 = builtin.unrealized_conversion_cast %1578 : !mini.ptr<i1> to !mini.ptr<i1>
      "mini.return"(%1579) : (!mini.ptr<i1>) -> ()
      "mini.castassign"(%1569, %1572) ({
        %1580 = builtin.unrealized_conversion_cast %1572 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %1581 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
    %1582 = builtin.unrealized_conversion_cast %1581 : !mini.ptr<i1> to !mini.ptr<i1>
    "mini.return"(%1582) : (!mini.ptr<i1>) -> ()
  }) {"func_name" = "IntIterable_all_fFunctionPtri32_to_Ptri1", "result_type" = i1, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb179(%1583 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1584 : !llvm.ptr):
    %1585 = "mini.invariant"(%1584) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1586 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb180] : () -> ()
  ^bb181:
    %1587 = "llvm.mlir.constant"() <{"value" = 13 : i32}> : () -> i32
    "llvm.store"(%1587, %1586) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb182] : () -> ()
  ^bb180:
    %1588 = "llvm.getelementptr"(%1584) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1589 = "mini.checkflag"(%1588) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1590 = "llvm.load"(%1589) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1590) [^bb181, ^bb181] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb182:
    %1591 = "llvm.extractvalue"(%1583) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1592 = "llvm.load"(%1586) : (!llvm.ptr) -> i32
    %1593 = "llvm.getelementptr"(%1591, %1592) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<24 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1594 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1595 = "llvm.getelementptr"(%1593, %1594) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1595) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntIterable_B_all_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb183(%1596 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1597 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1598 : !llvm.ptr, %1599 : !llvm.struct<(!llvm.ptr)>):
    %1600 = "mini.wrap"(%1596) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %1601 = "mini.to_fat_ptr"(%1600) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %1602 = "mini.wrap"(%1599) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
    %1603 = builtin.unrealized_conversion_cast %1602 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
    %1604 = "mini.unwrap"(%1601) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1605 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1606 = "mini.method_call"(%1605, %1604) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %1607 = "mini.to_fat_ptr"(%1606) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %1608 = "mini.to_fat_ptr"(%1607) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %1609 = "mini.refer"(%1608) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    "mini.while"() ({
      %1610 = "mini.unwrap"(%1609) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1611 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %1612 = "mini.method_call"(%1611, %1610) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %1613 = builtin.unrealized_conversion_cast %1612 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %1614 = "mini.checkflag"(%1613) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i1>
      %1615 = "mini.unwrap"(%1614) : (!mini.ptr<i1>) -> i1
    }, {
      %1616 = "mini.narrow"(%1613) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
      %1617 = builtin.unrealized_conversion_cast %1616 : !mini.ptr<i32> to !mini.ptr<i32>
      %1618 = "mini.unwrap"(%1617) : (!mini.ptr<i32>) -> i32
      %1619 = "mini.unwrap"(%1603) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>) -> !llvm.ptr
      %1620 = "mini.fptr_call"(%1619, %1618) {"ret_type" = i1} : (!llvm.ptr, i32) -> !mini.ptr<i1>
      %1621 = "mini.unwrap"(%1620) : (!mini.ptr<i1>) -> i1
      "mini.if"(%1621) ({
        %1622 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
        %1623 = builtin.unrealized_conversion_cast %1622 : !mini.ptr<i1> to !mini.ptr<i1>
        "mini.return"(%1623) : (!mini.ptr<i1>) -> ()
      }) : (i1) -> ()
      "mini.castassign"(%1613, %1616) ({
        %1624 = builtin.unrealized_conversion_cast %1616 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %1625 = "mini.literal"() {"value" = false, "typ" = i1} : () -> !mini.ptr<i1>
    %1626 = builtin.unrealized_conversion_cast %1625 : !mini.ptr<i1> to !mini.ptr<i1>
    "mini.return"(%1626) : (!mini.ptr<i1>) -> ()
  }) {"func_name" = "IntIterable_any_fFunctionPtri32_to_Ptri1", "result_type" = i1, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb184(%1627 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1628 : !llvm.ptr):
    %1629 = "mini.invariant"(%1628) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1630 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb185] : () -> ()
  ^bb186:
    %1631 = "llvm.mlir.constant"() <{"value" = 14 : i32}> : () -> i32
    "llvm.store"(%1631, %1630) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb187] : () -> ()
  ^bb185:
    %1632 = "llvm.getelementptr"(%1628) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1633 = "mini.checkflag"(%1632) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1634 = "llvm.load"(%1633) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1634) [^bb186, ^bb186] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb187:
    %1635 = "llvm.extractvalue"(%1627) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1636 = "llvm.load"(%1630) : (!llvm.ptr) -> i32
    %1637 = "llvm.getelementptr"(%1635, %1636) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<24 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1638 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1639 = "llvm.getelementptr"(%1637, %1638) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1639) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntIterable_B_any_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb188(%1640 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1641 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1642 : !llvm.ptr, %1643 : !llvm.struct<(!llvm.ptr)>):
    %1644 = "mini.wrap"(%1640) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %1645 = "mini.to_fat_ptr"(%1644) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %1646 = "mini.wrap"(%1643) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %1647 = builtin.unrealized_conversion_cast %1646 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %1648 = "mini.unwrap"(%1645) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1649 = "mini.unwrap"(%1647) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %1650 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "MapIterable", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !mini.fatptr<"MapIterable">
    %1651 = "mini.to_fat_ptr"(%1645) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %1652 = "mini.unwrap"(%1651) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1653 = builtin.unrealized_conversion_cast %1647 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %1654 = "mini.unwrap"(%1653) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %1655 = "mini.unwrap"(%1650) : (!mini.fatptr<"MapIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1656 = "mini.parameterization"() {"id_hierarchy" = ["IntIterable"], "name_hierarchy" = ["IntIterable"]} : () -> !llvm.ptr
    %1657 = "mini.parameterization"() {"id_hierarchy" = ["function_typ", ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["FunctionPtri32_to_Ptri32", ["Ptri32"], ["Ptri32"]]} : () -> !llvm.ptr
    %1658 = "mini.parameterizations_array"(%1656, %1657) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%1658, %1655, %1652, %1654) {"offset" = 2 : i32, "vptrs" = [#none, "function_typ"], "vtable_size" = 52 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
    %1659 = "mini.to_fat_ptr"(%1650) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "MapIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"MapIterable">) -> !mini.fatptr<"IntIterable">
    "mini.return"(%1659) : (!mini.fatptr<"IntIterable">) -> ()
  }) {"func_name" = "IntIterable_map_fFunctionPtri32_to_Ptri32", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb189(%1660 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1661 : !llvm.ptr):
    %1662 = "mini.invariant"(%1661) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1663 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb190] : () -> ()
  ^bb191:
    %1664 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
    "llvm.store"(%1664, %1663) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb192] : () -> ()
  ^bb190:
    %1665 = "llvm.getelementptr"(%1661) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1666 = "mini.checkflag"(%1665) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1667 = "llvm.load"(%1666) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1667) [^bb191, ^bb191] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb192:
    %1668 = "llvm.extractvalue"(%1660) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1669 = "llvm.load"(%1663) : (!llvm.ptr) -> i32
    %1670 = "llvm.getelementptr"(%1668, %1669) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<24 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1671 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1672 = "llvm.getelementptr"(%1670, %1671) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1672) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntIterable_B_map_fFunctionPtri32_to_Ptri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb193(%1673 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1674 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1675 : !llvm.ptr, %1676 : !llvm.struct<(!llvm.ptr)>):
    %1677 = "mini.wrap"(%1673) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %1678 = "mini.to_fat_ptr"(%1677) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %1679 = "mini.wrap"(%1676) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
    %1680 = builtin.unrealized_conversion_cast %1679 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
    %1681 = "mini.unwrap"(%1678) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1682 = "mini.unwrap"(%1680) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>) -> !llvm.struct<(!llvm.ptr)>
    %1683 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "FilterIterable", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !mini.fatptr<"FilterIterable">
    %1684 = "mini.to_fat_ptr"(%1678) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %1685 = "mini.unwrap"(%1684) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1686 = builtin.unrealized_conversion_cast %1680 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
    %1687 = "mini.unwrap"(%1686) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>) -> !llvm.struct<(!llvm.ptr)>
    %1688 = "mini.unwrap"(%1683) : (!mini.fatptr<"FilterIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1689 = "mini.parameterization"() {"id_hierarchy" = ["IntIterable"], "name_hierarchy" = ["IntIterable"]} : () -> !llvm.ptr
    %1690 = "mini.parameterization"() {"id_hierarchy" = ["function_typ", ["bool_typ"], ["i32_typ"]], "name_hierarchy" = ["FunctionPtri32_to_Ptri1", ["Ptri1"], ["Ptri32"]]} : () -> !llvm.ptr
    %1691 = "mini.parameterizations_array"(%1689, %1690) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%1691, %1688, %1685, %1687) {"offset" = 2 : i32, "vptrs" = [#none, "function_typ"], "vtable_size" = 52 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
    %1692 = "mini.to_fat_ptr"(%1683) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "FilterIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"FilterIterable">) -> !mini.fatptr<"IntIterable">
    "mini.return"(%1692) : (!mini.fatptr<"IntIterable">) -> ()
  }) {"func_name" = "IntIterable_filter_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb194(%1693 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1694 : !llvm.ptr):
    %1695 = "mini.invariant"(%1694) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1696 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb195] : () -> ()
  ^bb196:
    %1697 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
    "llvm.store"(%1697, %1696) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb197] : () -> ()
  ^bb195:
    %1698 = "llvm.getelementptr"(%1694) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1699 = "mini.checkflag"(%1698) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1700 = "llvm.load"(%1699) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1700) [^bb196, ^bb196] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb197:
    %1701 = "llvm.extractvalue"(%1693) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1702 = "llvm.load"(%1696) : (!llvm.ptr) -> i32
    %1703 = "llvm.getelementptr"(%1701, %1702) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<24 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1704 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1705 = "llvm.getelementptr"(%1703, %1704) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1705) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntIterable_B_filter_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb198(%1706 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1707 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1708 : !llvm.ptr, %1709 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %1710 = "mini.wrap"(%1706) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %1711 = "mini.to_fat_ptr"(%1710) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %1712 = "mini.wrap"(%1709) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %1713 = "mini.to_fat_ptr"(%1712) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %1714 = "mini.unwrap"(%1711) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1715 = "mini.unwrap"(%1713) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1716 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "ChainIterable", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !mini.fatptr<"ChainIterable">
    %1717 = "mini.to_fat_ptr"(%1711) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %1718 = "mini.unwrap"(%1717) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1719 = "mini.to_fat_ptr"(%1713) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %1720 = "mini.unwrap"(%1719) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1721 = "mini.unwrap"(%1716) : (!mini.fatptr<"ChainIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1722 = "mini.parameterization"() {"id_hierarchy" = ["IntIterable"], "name_hierarchy" = ["IntIterable"]} : () -> !llvm.ptr
    %1723 = "mini.parameterizations_array"(%1722, %1722) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%1723, %1721, %1718, %1720) {"offset" = 2 : i32, "vptrs" = [#none, #none], "vtable_size" = 52 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %1724 = "mini.to_fat_ptr"(%1716) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ChainIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"ChainIterable">) -> !mini.fatptr<"IntIterable">
    "mini.return"(%1724) : (!mini.fatptr<"IntIterable">) -> ()
  }) {"func_name" = "IntIterable_chain_otherIntIterable", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb199(%1725 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1726 : !llvm.ptr):
    %1727 = "mini.invariant"(%1726) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1728 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb200] : () -> ()
  ^bb201:
    %1729 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
    "llvm.store"(%1729, %1728) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb202] : () -> ()
  ^bb200:
    %1730 = "llvm.getelementptr"(%1726) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1731 = "mini.checkflag"(%1730) {"typ_name" = "IntIterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1732 = "llvm.load"(%1731) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1732) [^bb201, ^bb201] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb202:
    %1733 = "llvm.extractvalue"(%1725) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1734 = "llvm.load"(%1728) : (!llvm.ptr) -> i32
    %1735 = "llvm.getelementptr"(%1733, %1734) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<24 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1736 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1737 = "llvm.getelementptr"(%1735, %1736) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1737) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntIterable_B_chain_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb203(%1738 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1739 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1740 : !llvm.ptr, %1741 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %1742 = "mini.wrap"(%1738) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %1743 = "mini.to_fat_ptr"(%1742) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %1744 = "mini.wrap"(%1741) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %1745 = "mini.to_fat_ptr"(%1744) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %1746 = "mini.unwrap"(%1743) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1747 = "mini.unwrap"(%1745) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1748 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "InterleaveIterable", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !mini.fatptr<"InterleaveIterable">
    %1749 = "mini.to_fat_ptr"(%1743) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %1750 = "mini.unwrap"(%1749) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1751 = "mini.to_fat_ptr"(%1745) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %1752 = "mini.unwrap"(%1751) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1753 = "mini.unwrap"(%1748) : (!mini.fatptr<"InterleaveIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1754 = "mini.parameterization"() {"id_hierarchy" = ["IntIterable"], "name_hierarchy" = ["IntIterable"]} : () -> !llvm.ptr
    %1755 = "mini.parameterizations_array"(%1754, %1754) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%1755, %1753, %1750, %1752) {"offset" = 2 : i32, "vptrs" = [#none, #none], "vtable_size" = 52 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %1756 = "mini.to_fat_ptr"(%1748) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "InterleaveIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"InterleaveIterable">) -> !mini.fatptr<"IntIterable">
    "mini.return"(%1756) : (!mini.fatptr<"IntIterable">) -> ()
  }) {"func_name" = "IntIterable_interleave_otherIntIterable", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb204(%1757 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1758 : !llvm.ptr):
    %1759 = "mini.invariant"(%1758) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1760 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb205] : () -> ()
  ^bb206:
    %1761 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%1761, %1760) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb207] : () -> ()
  ^bb205:
    %1762 = "llvm.getelementptr"(%1758) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1763 = "mini.checkflag"(%1762) {"typ_name" = "IntIterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1764 = "llvm.load"(%1763) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1764) [^bb206, ^bb206] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb207:
    %1765 = "llvm.extractvalue"(%1757) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1766 = "llvm.load"(%1760) : (!llvm.ptr) -> i32
    %1767 = "llvm.getelementptr"(%1765, %1766) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<24 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1768 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1769 = "llvm.getelementptr"(%1767, %1768) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1769) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntIterable_B_interleave_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb208(%1770 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1771 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1772 : !llvm.ptr, %1773 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %1774 = "mini.wrap"(%1770) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %1775 = "mini.to_fat_ptr"(%1774) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %1776 = "mini.wrap"(%1773) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %1777 = "mini.to_fat_ptr"(%1776) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %1778 = "mini.unwrap"(%1775) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1779 = "mini.unwrap"(%1777) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1780 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "ZipIterable", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !mini.fatptr<"ZipIterable">
    %1781 = "mini.to_fat_ptr"(%1775) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %1782 = "mini.unwrap"(%1781) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1783 = "mini.to_fat_ptr"(%1777) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %1784 = "mini.unwrap"(%1783) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1785 = "mini.unwrap"(%1780) : (!mini.fatptr<"ZipIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1786 = "mini.parameterization"() {"id_hierarchy" = ["IntIterable"], "name_hierarchy" = ["IntIterable"]} : () -> !llvm.ptr
    %1787 = "mini.parameterizations_array"(%1786, %1786) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%1787, %1785, %1782, %1784) {"offset" = 2 : i32, "vptrs" = [#none, #none], "vtable_size" = 12 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %1788 = "mini.to_fat_ptr"(%1780) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ZipIterable", "to_typ_name" = "ZipIterable"} : (!mini.fatptr<"ZipIterable">) -> !mini.fatptr<"ZipIterable">
    "mini.return"(%1788) : (!mini.fatptr<"ZipIterable">) -> ()
  }) {"func_name" = "IntIterable_zip_otherIntIterable", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb209(%1789 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1790 : !llvm.ptr):
    %1791 = "mini.invariant"(%1790) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1792 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb210] : () -> ()
  ^bb211:
    %1793 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
    "llvm.store"(%1793, %1792) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb212] : () -> ()
  ^bb210:
    %1794 = "llvm.getelementptr"(%1790) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1795 = "mini.checkflag"(%1794) {"typ_name" = "IntIterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1796 = "llvm.load"(%1795) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1796) [^bb211, ^bb211] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb212:
    %1797 = "llvm.extractvalue"(%1789) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1798 = "llvm.load"(%1792) : (!llvm.ptr) -> i32
    %1799 = "llvm.getelementptr"(%1797, %1798) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<24 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1800 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1801 = "llvm.getelementptr"(%1799, %1800) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1801) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntIterable_B_zip_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb213(%1802 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1803 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1804 : !llvm.ptr, %1805 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %1806 = "mini.wrap"(%1802) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %1807 = "mini.to_fat_ptr"(%1806) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %1808 = "mini.wrap"(%1805) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %1809 = "mini.to_fat_ptr"(%1808) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %1810 = "mini.unwrap"(%1807) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1811 = "mini.unwrap"(%1809) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1812 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "ProductIterable", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !mini.fatptr<"ProductIterable">
    %1813 = "mini.to_fat_ptr"(%1807) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %1814 = "mini.unwrap"(%1813) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1815 = "mini.to_fat_ptr"(%1809) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %1816 = "mini.unwrap"(%1815) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1817 = "mini.unwrap"(%1812) : (!mini.fatptr<"ProductIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1818 = "mini.parameterization"() {"id_hierarchy" = ["IntIterable"], "name_hierarchy" = ["IntIterable"]} : () -> !llvm.ptr
    %1819 = "mini.parameterizations_array"(%1818, %1818) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%1819, %1817, %1814, %1816) {"offset" = 2 : i32, "vptrs" = [#none, #none], "vtable_size" = 12 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %1820 = "mini.to_fat_ptr"(%1812) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ProductIterable", "to_typ_name" = "ProductIterable"} : (!mini.fatptr<"ProductIterable">) -> !mini.fatptr<"ProductIterable">
    "mini.return"(%1820) : (!mini.fatptr<"ProductIterable">) -> ()
  }) {"func_name" = "IntIterable_product_otherIntIterable", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb214(%1821 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1822 : !llvm.ptr):
    %1823 = "mini.invariant"(%1822) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1824 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb215] : () -> ()
  ^bb216:
    %1825 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
    "llvm.store"(%1825, %1824) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb217] : () -> ()
  ^bb215:
    %1826 = "llvm.getelementptr"(%1822) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1827 = "mini.checkflag"(%1826) {"typ_name" = "IntIterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1828 = "llvm.load"(%1827) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1828) [^bb216, ^bb216] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb217:
    %1829 = "llvm.extractvalue"(%1821) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1830 = "llvm.load"(%1824) : (!llvm.ptr) -> i32
    %1831 = "llvm.getelementptr"(%1829, %1830) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<24 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1832 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1833 = "llvm.getelementptr"(%1831, %1832) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1833) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntIterable_B_product_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb218(%1834 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1835 : !llvm.ptr):
    %1836 = "mini.invariant"(%1835) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1837 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb219] : () -> ()
  ^bb219:
    %1838 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
    "llvm.store"(%1838, %1837) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb220] : () -> ()
  ^bb220:
    %1839 = "llvm.extractvalue"(%1834) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1840 = "llvm.load"(%1837) : (!llvm.ptr) -> i32
    %1841 = "llvm.getelementptr"(%1839, %1840) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<24 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1842 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1843 = "llvm.getelementptr"(%1841, %1842) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1843) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntIterable_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_MapIterable", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>]} : () -> ()
  "mini.getter_def"() {"meth_name" = "MapIterable_getter_iterable", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterable", "parameterization" = "_parameterization_IntIterable"} : () -> ()
  "mini.setter_def"() {"meth_name" = "MapIterable_setter_iterable", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterable", "parameterization" = "_parameterization_IntIterable"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "MapIterable_field_iterable", "getter_name" = "MapIterable_getter_iterable", "setter_name" = "MapIterable_setter_iterable"} : () -> ()
  "mini.getter_def"() {"meth_name" = "MapIterable_getter_f", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionPtri32_to_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "MapIterable_setter_f", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionPtri32_to_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "MapIterable_field_f", "getter_name" = "MapIterable_getter_f", "setter_name" = "MapIterable_setter_f"} : () -> ()
  "mini.func"() ({
  ^bb221(%1844 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1845 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1846 : !llvm.ptr, %1847 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1848 : !llvm.struct<(!llvm.ptr)>):
    %1849 = "mini.wrap"(%1844) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"MapIterable">
    %1850 = "mini.to_fat_ptr"(%1849) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "MapIterable", "to_typ_name" = "MapIterable"} : (!mini.fatptr<"MapIterable">) -> !mini.fatptr<"MapIterable">
    %1851 = "mini.wrap"(%1847) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %1852 = "mini.to_fat_ptr"(%1851) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %1853 = "mini.to_fat_ptr"(%1852) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    "mini.set_field"(%1850, %1853) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"MapIterable">, !mini.fatptr<"IntIterable">) -> ()
    %1854 = "mini.wrap"(%1848) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %1855 = builtin.unrealized_conversion_cast %1854 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %1856 = builtin.unrealized_conversion_cast %1855 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    "mini.set_field"(%1850, %1856) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"MapIterable">, !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>) -> ()
  }) {"func_name" = "MapIterable_init_iterableIntIterable_fFunctionPtri32_to_Ptri32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb222(%1857 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1858 : !llvm.ptr):
    %1859 = "mini.invariant"(%1858) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1860 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb223] : () -> ()
  ^bb224:
    %1861 = "llvm.mlir.constant"() <{"value" = 14 : i32}> : () -> i32
    "llvm.store"(%1861, %1860) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb225] : () -> ()
  ^bb226:
    %1862 = "llvm.getelementptr"(%1858) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1863 = "mini.checkflag"(%1862) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1864 = "llvm.load"(%1863) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1864) [^bb224, ^bb224] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb223:
    %1865 = "llvm.getelementptr"(%1858) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1866 = "mini.checkflag"(%1865) {"typ_name" = "IntIterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1867 = "llvm.load"(%1866) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1867) [^bb226, ^bb226] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb225:
    %1868 = "llvm.extractvalue"(%1857) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1869 = "llvm.load"(%1860) : (!llvm.ptr) -> i32
    %1870 = "llvm.getelementptr"(%1868, %1869) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1871 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1872 = "llvm.getelementptr"(%1870, %1871) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1872) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable_B_init_iterableIntIterable_fFunctionPtri32_to_Ptri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb227(%1873 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1874 : !llvm.ptr):
    %1875 = "mini.invariant"(%1874) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1876 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb228] : () -> ()
  ^bb229:
    %1877 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
    "llvm.store"(%1877, %1876) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb230] : () -> ()
  ^bb228:
    %1878 = "llvm.getelementptr"(%1874) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1879 = "mini.checkflag"(%1878) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1880 = "llvm.load"(%1879) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1880) [^bb229, ^bb229] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb230:
    %1881 = "llvm.extractvalue"(%1873) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1882 = "llvm.load"(%1876) : (!llvm.ptr) -> i32
    %1883 = "llvm.getelementptr"(%1881, %1882) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1884 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1885 = "llvm.getelementptr"(%1883, %1884) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1885) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable_B_each_fFunctionPtri32_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb231(%1886 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1887 : !llvm.ptr):
    %1888 = "mini.invariant"(%1887) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1889 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb232] : () -> ()
  ^bb233:
    %1890 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
    "llvm.store"(%1890, %1889) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb234] : () -> ()
  ^bb235:
    %1891 = "llvm.getelementptr"(%1887) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1892 = "mini.checkflag"(%1891) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1893 = "llvm.load"(%1892) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1893) [^bb233, ^bb233] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb232:
    %1894 = "llvm.getelementptr"(%1887) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1895 = "mini.checkflag"(%1894) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1896 = "llvm.load"(%1895) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1896) [^bb235, ^bb235] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb234:
    %1897 = "llvm.extractvalue"(%1886) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1898 = "llvm.load"(%1889) : (!llvm.ptr) -> i32
    %1899 = "llvm.getelementptr"(%1897, %1898) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1900 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1901 = "llvm.getelementptr"(%1899, %1900) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1901) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb236(%1902 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1903 : !llvm.ptr):
    %1904 = "mini.invariant"(%1903) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1905 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb237] : () -> ()
  ^bb238:
    %1906 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
    "llvm.store"(%1906, %1905) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb239] : () -> ()
  ^bb237:
    %1907 = "llvm.getelementptr"(%1903) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1908 = "mini.checkflag"(%1907) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1909 = "llvm.load"(%1908) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1909) [^bb238, ^bb238] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb239:
    %1910 = "llvm.extractvalue"(%1902) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1911 = "llvm.load"(%1905) : (!llvm.ptr) -> i32
    %1912 = "llvm.getelementptr"(%1910, %1911) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1913 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1914 = "llvm.getelementptr"(%1912, %1913) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1914) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable_B_all_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb240(%1915 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1916 : !llvm.ptr):
    %1917 = "mini.invariant"(%1916) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1918 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb241] : () -> ()
  ^bb242:
    %1919 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%1919, %1918) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb243] : () -> ()
  ^bb241:
    %1920 = "llvm.getelementptr"(%1916) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1921 = "mini.checkflag"(%1920) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1922 = "llvm.load"(%1921) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1922) [^bb242, ^bb242] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb243:
    %1923 = "llvm.extractvalue"(%1915) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1924 = "llvm.load"(%1918) : (!llvm.ptr) -> i32
    %1925 = "llvm.getelementptr"(%1923, %1924) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1926 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1927 = "llvm.getelementptr"(%1925, %1926) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1927) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable_B_any_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb244(%1928 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1929 : !llvm.ptr):
    %1930 = "mini.invariant"(%1929) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1931 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb245] : () -> ()
  ^bb246:
    %1932 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
    "llvm.store"(%1932, %1931) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb247] : () -> ()
  ^bb245:
    %1933 = "llvm.getelementptr"(%1929) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1934 = "mini.checkflag"(%1933) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1935 = "llvm.load"(%1934) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1935) [^bb246, ^bb246] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb247:
    %1936 = "llvm.extractvalue"(%1928) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1937 = "llvm.load"(%1931) : (!llvm.ptr) -> i32
    %1938 = "llvm.getelementptr"(%1936, %1937) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1939 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1940 = "llvm.getelementptr"(%1938, %1939) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1940) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable_B_map_fFunctionPtri32_to_Ptri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb248(%1941 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1942 : !llvm.ptr):
    %1943 = "mini.invariant"(%1942) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1944 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb249] : () -> ()
  ^bb250:
    %1945 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
    "llvm.store"(%1945, %1944) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb251] : () -> ()
  ^bb249:
    %1946 = "llvm.getelementptr"(%1942) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1947 = "mini.checkflag"(%1946) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1948 = "llvm.load"(%1947) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1948) [^bb250, ^bb250] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb251:
    %1949 = "llvm.extractvalue"(%1941) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1950 = "llvm.load"(%1944) : (!llvm.ptr) -> i32
    %1951 = "llvm.getelementptr"(%1949, %1950) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1952 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1953 = "llvm.getelementptr"(%1951, %1952) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1953) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable_B_filter_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb252(%1954 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1955 : !llvm.ptr):
    %1956 = "mini.invariant"(%1955) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1957 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb253] : () -> ()
  ^bb254:
    %1958 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
    "llvm.store"(%1958, %1957) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb255] : () -> ()
  ^bb253:
    %1959 = "llvm.getelementptr"(%1955) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1960 = "mini.checkflag"(%1959) {"typ_name" = "IntIterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1961 = "llvm.load"(%1960) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1961) [^bb254, ^bb254] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb255:
    %1962 = "llvm.extractvalue"(%1954) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1963 = "llvm.load"(%1957) : (!llvm.ptr) -> i32
    %1964 = "llvm.getelementptr"(%1962, %1963) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1965 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1966 = "llvm.getelementptr"(%1964, %1965) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1966) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable_B_chain_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb256(%1967 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1968 : !llvm.ptr):
    %1969 = "mini.invariant"(%1968) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1970 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb257] : () -> ()
  ^bb258:
    %1971 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
    "llvm.store"(%1971, %1970) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb259] : () -> ()
  ^bb257:
    %1972 = "llvm.getelementptr"(%1968) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1973 = "mini.checkflag"(%1972) {"typ_name" = "IntIterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1974 = "llvm.load"(%1973) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1974) [^bb258, ^bb258] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb259:
    %1975 = "llvm.extractvalue"(%1967) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1976 = "llvm.load"(%1970) : (!llvm.ptr) -> i32
    %1977 = "llvm.getelementptr"(%1975, %1976) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1978 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1979 = "llvm.getelementptr"(%1977, %1978) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1979) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable_B_interleave_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb260(%1980 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1981 : !llvm.ptr):
    %1982 = "mini.invariant"(%1981) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1983 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb261] : () -> ()
  ^bb262:
    %1984 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
    "llvm.store"(%1984, %1983) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb263] : () -> ()
  ^bb261:
    %1985 = "llvm.getelementptr"(%1981) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1986 = "mini.checkflag"(%1985) {"typ_name" = "IntIterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1987 = "llvm.load"(%1986) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1987) [^bb262, ^bb262] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb263:
    %1988 = "llvm.extractvalue"(%1980) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1989 = "llvm.load"(%1983) : (!llvm.ptr) -> i32
    %1990 = "llvm.getelementptr"(%1988, %1989) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1991 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1992 = "llvm.getelementptr"(%1990, %1991) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1992) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable_B_zip_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb264(%1993 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1994 : !llvm.ptr):
    %1995 = "mini.invariant"(%1994) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1996 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb265] : () -> ()
  ^bb266:
    %1997 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
    "llvm.store"(%1997, %1996) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb267] : () -> ()
  ^bb265:
    %1998 = "llvm.getelementptr"(%1994) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1999 = "mini.checkflag"(%1998) {"typ_name" = "IntIterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2000 = "llvm.load"(%1999) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2000) [^bb266, ^bb266] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb267:
    %2001 = "llvm.extractvalue"(%1993) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2002 = "llvm.load"(%1996) : (!llvm.ptr) -> i32
    %2003 = "llvm.getelementptr"(%2001, %2002) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2004 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2005 = "llvm.getelementptr"(%2003, %2004) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2005) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable_B_product_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb268(%2006 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2007 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2008 : !llvm.ptr):
    %2009 = "mini.wrap"(%2006) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"MapIterable">
    %2010 = "mini.to_fat_ptr"(%2009) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "MapIterable", "to_typ_name" = "MapIterable"} : (!mini.fatptr<"MapIterable">) -> !mini.fatptr<"MapIterable">
    %2011 = "mini.get_field"(%2010) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterable"} : (!mini.fatptr<"MapIterable">) -> !mini.fatptr<"IntIterable">
    %2012 = "mini.unwrap"(%2011) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2013 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %2014 = "mini.method_call"(%2013, %2012) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %2015 = "mini.to_fat_ptr"(%2014) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %2016 = "mini.get_field"(%2010) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"MapIterable">) -> !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %2017 = "mini.unwrap"(%2015) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2018 = "mini.unwrap"(%2016) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %2019 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "MapIterator", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !mini.fatptr<"MapIterator">
    %2020 = "mini.get_field"(%2010) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterable"} : (!mini.fatptr<"MapIterable">) -> !mini.fatptr<"IntIterable">
    %2021 = "mini.unwrap"(%2020) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2022 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %2023 = "mini.method_call"(%2022, %2021) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %2024 = "mini.to_fat_ptr"(%2023) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %2025 = "mini.get_field"(%2010) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"MapIterable">) -> !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %2026 = "mini.to_fat_ptr"(%2024) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %2027 = "mini.unwrap"(%2026) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2028 = builtin.unrealized_conversion_cast %2025 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %2029 = "mini.unwrap"(%2028) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %2030 = "mini.unwrap"(%2019) : (!mini.fatptr<"MapIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2031 = "mini.parameterization"() {"id_hierarchy" = ["IntIterator"], "name_hierarchy" = ["IntIterator"]} : () -> !llvm.ptr
    %2032 = "mini.parameterization"() {"id_hierarchy" = ["function_typ", ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["FunctionPtri32_to_Ptri32", ["Ptri32"], ["Ptri32"]]} : () -> !llvm.ptr
    %2033 = "mini.parameterizations_array"(%2031, %2032) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%2033, %2030, %2027, %2029) {"offset" = 2 : i32, "vptrs" = [#none, "function_typ"], "vtable_size" = 8 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
    %2034 = "mini.to_fat_ptr"(%2019) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "MapIterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"MapIterator">) -> !mini.fatptr<"Iterator">
    "mini.return"(%2034) : (!mini.fatptr<"Iterator">) -> ()
  }) {"func_name" = "MapIterable_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb269(%2035 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2036 : !llvm.ptr):
    %2037 = "mini.invariant"(%2036) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2038 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb270] : () -> ()
  ^bb270:
    %2039 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
    "llvm.store"(%2039, %2038) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb271] : () -> ()
  ^bb271:
    %2040 = "llvm.extractvalue"(%2035) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2041 = "llvm.load"(%2038) : (!llvm.ptr) -> i32
    %2042 = "llvm.getelementptr"(%2040, %2041) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2043 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2044 = "llvm.getelementptr"(%2042, %2043) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2044) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_MapIterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>]} : () -> ()
  "mini.getter_def"() {"meth_name" = "MapIterator_getter_iterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterator", "parameterization" = "_parameterization_IntIterator"} : () -> ()
  "mini.setter_def"() {"meth_name" = "MapIterator_setter_iterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterator", "parameterization" = "_parameterization_IntIterator"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "MapIterator_field_iterator", "getter_name" = "MapIterator_getter_iterator", "setter_name" = "MapIterator_setter_iterator"} : () -> ()
  "mini.getter_def"() {"meth_name" = "MapIterator_getter_f", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionPtri32_to_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "MapIterator_setter_f", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionPtri32_to_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "MapIterator_field_f", "getter_name" = "MapIterator_getter_f", "setter_name" = "MapIterator_setter_f"} : () -> ()
  "mini.func"() ({
  ^bb272(%2045 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2046 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2047 : !llvm.ptr, %2048 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2049 : !llvm.struct<(!llvm.ptr)>):
    %2050 = "mini.wrap"(%2045) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"MapIterator">
    %2051 = "mini.to_fat_ptr"(%2050) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "MapIterator", "to_typ_name" = "MapIterator"} : (!mini.fatptr<"MapIterator">) -> !mini.fatptr<"MapIterator">
    %2052 = "mini.wrap"(%2048) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterator">
    %2053 = "mini.to_fat_ptr"(%2052) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %2054 = "mini.to_fat_ptr"(%2053) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    "mini.set_field"(%2051, %2054) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"MapIterator">, !mini.fatptr<"IntIterator">) -> ()
    %2055 = "mini.wrap"(%2049) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %2056 = builtin.unrealized_conversion_cast %2055 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %2057 = builtin.unrealized_conversion_cast %2056 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    "mini.set_field"(%2051, %2057) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"MapIterator">, !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>) -> ()
  }) {"func_name" = "MapIterator_init_iteratorIntIterator_fFunctionPtri32_to_Ptri32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb273(%2058 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2059 : !llvm.ptr):
    %2060 = "mini.invariant"(%2059) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2061 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb274] : () -> ()
  ^bb275:
    %2062 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
    "llvm.store"(%2062, %2061) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb276] : () -> ()
  ^bb277:
    %2063 = "llvm.getelementptr"(%2059) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2064 = "mini.checkflag"(%2063) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2065 = "llvm.load"(%2064) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2065) [^bb275, ^bb275] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb274:
    %2066 = "llvm.getelementptr"(%2059) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2067 = "mini.checkflag"(%2066) {"typ_name" = "IntIterator"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2068 = "llvm.load"(%2067) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2068) [^bb277, ^bb277] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb276:
    %2069 = "llvm.extractvalue"(%2058) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2070 = "llvm.load"(%2061) : (!llvm.ptr) -> i32
    %2071 = "llvm.getelementptr"(%2069, %2070) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2072 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2073 = "llvm.getelementptr"(%2071, %2072) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2073) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterator_B_init_iteratorIntIterator_fFunctionPtri32_to_Ptri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb278(%2074 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2075 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2076 : !llvm.ptr):
    %2077 = "mini.wrap"(%2074) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"MapIterator">
    %2078 = "mini.to_fat_ptr"(%2077) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "MapIterator", "to_typ_name" = "MapIterator"} : (!mini.fatptr<"MapIterator">) -> !mini.fatptr<"MapIterator">
    %2079 = "mini.get_field"(%2078) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterator"} : (!mini.fatptr<"MapIterator">) -> !mini.fatptr<"IntIterator">
    %2080 = "mini.unwrap"(%2079) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2081 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %2082 = "mini.method_call"(%2081, %2080) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %2083 = builtin.unrealized_conversion_cast %2082 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %2084 = "mini.checkflag"(%2083) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i1>
    %2085 = "mini.unwrap"(%2084) : (!mini.ptr<i1>) -> i1
    %2086 = builtin.unrealized_conversion_cast %2083 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
    "mini.if"(%2085) ({
      %2087 = "mini.narrow"(%2086) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
      %2088 = builtin.unrealized_conversion_cast %2087 : !mini.ptr<i32> to !mini.ptr<i32>
      %2089 = "mini.unwrap"(%2088) : (!mini.ptr<i32>) -> i32
      %2090 = "mini.get_field"(%2078) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"MapIterator">) -> !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
      %2091 = "mini.unwrap"(%2090) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>) -> !llvm.ptr
      %2092 = "mini.fptr_call"(%2091, %2089) {"ret_type" = i32} : (!llvm.ptr, i32) -> !mini.ptr<i32>
      %2093 = "mini.unionize"(%2092) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      "mini.return"(%2093) : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
      "mini.castassign"(%2086, %2087) ({
        %2094 = "mini.unionize"(%2087) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      }) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.ptr<i32>) -> ()
    }) : (i1) -> ()
    %2095 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
    %2096 = "mini.unionize"(%2095) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    "mini.return"(%2096) : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
  }) {"func_name" = "MapIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb279(%2097 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2098 : !llvm.ptr):
    %2099 = "mini.invariant"(%2098) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2100 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb280] : () -> ()
  ^bb280:
    %2101 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%2101, %2100) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb281] : () -> ()
  ^bb281:
    %2102 = "llvm.extractvalue"(%2097) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2103 = "llvm.load"(%2100) : (!llvm.ptr) -> i32
    %2104 = "llvm.getelementptr"(%2102, %2103) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2105 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2106 = "llvm.getelementptr"(%2104, %2105) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2106) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_FilterIterable", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>]} : () -> ()
  "mini.getter_def"() {"meth_name" = "FilterIterable_getter_iterable", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterable", "parameterization" = "_parameterization_IntIterable"} : () -> ()
  "mini.setter_def"() {"meth_name" = "FilterIterable_setter_iterable", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterable", "parameterization" = "_parameterization_IntIterable"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "FilterIterable_field_iterable", "getter_name" = "FilterIterable_getter_iterable", "setter_name" = "FilterIterable_setter_iterable"} : () -> ()
  "mini.getter_def"() {"meth_name" = "FilterIterable_getter_f", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionPtri32_to_Ptri1"} : () -> ()
  "mini.setter_def"() {"meth_name" = "FilterIterable_setter_f", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionPtri32_to_Ptri1"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "FilterIterable_field_f", "getter_name" = "FilterIterable_getter_f", "setter_name" = "FilterIterable_setter_f"} : () -> ()
  "mini.func"() ({
  ^bb282(%2107 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2108 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2109 : !llvm.ptr, %2110 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2111 : !llvm.struct<(!llvm.ptr)>):
    %2112 = "mini.wrap"(%2107) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"FilterIterable">
    %2113 = "mini.to_fat_ptr"(%2112) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "FilterIterable", "to_typ_name" = "FilterIterable"} : (!mini.fatptr<"FilterIterable">) -> !mini.fatptr<"FilterIterable">
    %2114 = "mini.wrap"(%2110) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %2115 = "mini.to_fat_ptr"(%2114) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %2116 = "mini.to_fat_ptr"(%2115) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    "mini.set_field"(%2113, %2116) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"FilterIterable">, !mini.fatptr<"IntIterable">) -> ()
    %2117 = "mini.wrap"(%2111) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
    %2118 = builtin.unrealized_conversion_cast %2117 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
    %2119 = builtin.unrealized_conversion_cast %2118 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
    "mini.set_field"(%2113, %2119) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"FilterIterable">, !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>) -> ()
  }) {"func_name" = "FilterIterable_init_iterableIntIterable_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb283(%2120 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2121 : !llvm.ptr):
    %2122 = "mini.invariant"(%2121) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2123 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb284] : () -> ()
  ^bb285:
    %2124 = "llvm.mlir.constant"() <{"value" = 14 : i32}> : () -> i32
    "llvm.store"(%2124, %2123) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb286] : () -> ()
  ^bb287:
    %2125 = "llvm.getelementptr"(%2121) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2126 = "mini.checkflag"(%2125) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2127 = "llvm.load"(%2126) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2127) [^bb285, ^bb285] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb284:
    %2128 = "llvm.getelementptr"(%2121) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2129 = "mini.checkflag"(%2128) {"typ_name" = "IntIterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2130 = "llvm.load"(%2129) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2130) [^bb287, ^bb287] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb286:
    %2131 = "llvm.extractvalue"(%2120) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2132 = "llvm.load"(%2123) : (!llvm.ptr) -> i32
    %2133 = "llvm.getelementptr"(%2131, %2132) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2134 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2135 = "llvm.getelementptr"(%2133, %2134) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2135) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable_B_init_iterableIntIterable_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb288(%2136 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2137 : !llvm.ptr):
    %2138 = "mini.invariant"(%2137) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2139 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb289] : () -> ()
  ^bb290:
    %2140 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
    "llvm.store"(%2140, %2139) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb291] : () -> ()
  ^bb289:
    %2141 = "llvm.getelementptr"(%2137) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2142 = "mini.checkflag"(%2141) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2143 = "llvm.load"(%2142) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2143) [^bb290, ^bb290] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb291:
    %2144 = "llvm.extractvalue"(%2136) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2145 = "llvm.load"(%2139) : (!llvm.ptr) -> i32
    %2146 = "llvm.getelementptr"(%2144, %2145) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2147 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2148 = "llvm.getelementptr"(%2146, %2147) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2148) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable_B_each_fFunctionPtri32_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb292(%2149 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2150 : !llvm.ptr):
    %2151 = "mini.invariant"(%2150) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2152 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb293] : () -> ()
  ^bb294:
    %2153 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
    "llvm.store"(%2153, %2152) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb295] : () -> ()
  ^bb296:
    %2154 = "llvm.getelementptr"(%2150) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2155 = "mini.checkflag"(%2154) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2156 = "llvm.load"(%2155) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2156) [^bb294, ^bb294] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb293:
    %2157 = "llvm.getelementptr"(%2150) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2158 = "mini.checkflag"(%2157) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2159 = "llvm.load"(%2158) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2159) [^bb296, ^bb296] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb295:
    %2160 = "llvm.extractvalue"(%2149) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2161 = "llvm.load"(%2152) : (!llvm.ptr) -> i32
    %2162 = "llvm.getelementptr"(%2160, %2161) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2163 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2164 = "llvm.getelementptr"(%2162, %2163) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2164) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb297(%2165 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2166 : !llvm.ptr):
    %2167 = "mini.invariant"(%2166) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2168 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb298] : () -> ()
  ^bb299:
    %2169 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
    "llvm.store"(%2169, %2168) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb300] : () -> ()
  ^bb298:
    %2170 = "llvm.getelementptr"(%2166) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2171 = "mini.checkflag"(%2170) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2172 = "llvm.load"(%2171) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2172) [^bb299, ^bb299] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb300:
    %2173 = "llvm.extractvalue"(%2165) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2174 = "llvm.load"(%2168) : (!llvm.ptr) -> i32
    %2175 = "llvm.getelementptr"(%2173, %2174) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2176 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2177 = "llvm.getelementptr"(%2175, %2176) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2177) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable_B_all_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb301(%2178 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2179 : !llvm.ptr):
    %2180 = "mini.invariant"(%2179) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2181 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb302] : () -> ()
  ^bb303:
    %2182 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%2182, %2181) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb304] : () -> ()
  ^bb302:
    %2183 = "llvm.getelementptr"(%2179) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2184 = "mini.checkflag"(%2183) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2185 = "llvm.load"(%2184) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2185) [^bb303, ^bb303] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb304:
    %2186 = "llvm.extractvalue"(%2178) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2187 = "llvm.load"(%2181) : (!llvm.ptr) -> i32
    %2188 = "llvm.getelementptr"(%2186, %2187) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2189 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2190 = "llvm.getelementptr"(%2188, %2189) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2190) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable_B_any_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb305(%2191 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2192 : !llvm.ptr):
    %2193 = "mini.invariant"(%2192) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2194 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb306] : () -> ()
  ^bb307:
    %2195 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
    "llvm.store"(%2195, %2194) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb308] : () -> ()
  ^bb306:
    %2196 = "llvm.getelementptr"(%2192) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2197 = "mini.checkflag"(%2196) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2198 = "llvm.load"(%2197) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2198) [^bb307, ^bb307] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb308:
    %2199 = "llvm.extractvalue"(%2191) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2200 = "llvm.load"(%2194) : (!llvm.ptr) -> i32
    %2201 = "llvm.getelementptr"(%2199, %2200) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2202 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2203 = "llvm.getelementptr"(%2201, %2202) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2203) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable_B_map_fFunctionPtri32_to_Ptri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb309(%2204 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2205 : !llvm.ptr):
    %2206 = "mini.invariant"(%2205) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2207 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb310] : () -> ()
  ^bb311:
    %2208 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
    "llvm.store"(%2208, %2207) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb312] : () -> ()
  ^bb310:
    %2209 = "llvm.getelementptr"(%2205) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2210 = "mini.checkflag"(%2209) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2211 = "llvm.load"(%2210) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2211) [^bb311, ^bb311] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb312:
    %2212 = "llvm.extractvalue"(%2204) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2213 = "llvm.load"(%2207) : (!llvm.ptr) -> i32
    %2214 = "llvm.getelementptr"(%2212, %2213) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2215 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2216 = "llvm.getelementptr"(%2214, %2215) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2216) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable_B_filter_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb313(%2217 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2218 : !llvm.ptr):
    %2219 = "mini.invariant"(%2218) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2220 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb314] : () -> ()
  ^bb315:
    %2221 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
    "llvm.store"(%2221, %2220) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb316] : () -> ()
  ^bb314:
    %2222 = "llvm.getelementptr"(%2218) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2223 = "mini.checkflag"(%2222) {"typ_name" = "IntIterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2224 = "llvm.load"(%2223) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2224) [^bb315, ^bb315] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb316:
    %2225 = "llvm.extractvalue"(%2217) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2226 = "llvm.load"(%2220) : (!llvm.ptr) -> i32
    %2227 = "llvm.getelementptr"(%2225, %2226) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2228 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2229 = "llvm.getelementptr"(%2227, %2228) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2229) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable_B_chain_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb317(%2230 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2231 : !llvm.ptr):
    %2232 = "mini.invariant"(%2231) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2233 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb318] : () -> ()
  ^bb319:
    %2234 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
    "llvm.store"(%2234, %2233) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb320] : () -> ()
  ^bb318:
    %2235 = "llvm.getelementptr"(%2231) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2236 = "mini.checkflag"(%2235) {"typ_name" = "IntIterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2237 = "llvm.load"(%2236) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2237) [^bb319, ^bb319] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb320:
    %2238 = "llvm.extractvalue"(%2230) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2239 = "llvm.load"(%2233) : (!llvm.ptr) -> i32
    %2240 = "llvm.getelementptr"(%2238, %2239) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2241 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2242 = "llvm.getelementptr"(%2240, %2241) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2242) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable_B_interleave_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb321(%2243 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2244 : !llvm.ptr):
    %2245 = "mini.invariant"(%2244) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2246 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb322] : () -> ()
  ^bb323:
    %2247 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
    "llvm.store"(%2247, %2246) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb324] : () -> ()
  ^bb322:
    %2248 = "llvm.getelementptr"(%2244) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2249 = "mini.checkflag"(%2248) {"typ_name" = "IntIterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2250 = "llvm.load"(%2249) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2250) [^bb323, ^bb323] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb324:
    %2251 = "llvm.extractvalue"(%2243) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2252 = "llvm.load"(%2246) : (!llvm.ptr) -> i32
    %2253 = "llvm.getelementptr"(%2251, %2252) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2254 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2255 = "llvm.getelementptr"(%2253, %2254) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2255) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable_B_zip_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb325(%2256 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2257 : !llvm.ptr):
    %2258 = "mini.invariant"(%2257) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2259 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb326] : () -> ()
  ^bb327:
    %2260 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
    "llvm.store"(%2260, %2259) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb328] : () -> ()
  ^bb326:
    %2261 = "llvm.getelementptr"(%2257) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2262 = "mini.checkflag"(%2261) {"typ_name" = "IntIterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2263 = "llvm.load"(%2262) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2263) [^bb327, ^bb327] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb328:
    %2264 = "llvm.extractvalue"(%2256) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2265 = "llvm.load"(%2259) : (!llvm.ptr) -> i32
    %2266 = "llvm.getelementptr"(%2264, %2265) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2267 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2268 = "llvm.getelementptr"(%2266, %2267) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2268) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable_B_product_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb329(%2269 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2270 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2271 : !llvm.ptr):
    %2272 = "mini.wrap"(%2269) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"FilterIterable">
    %2273 = "mini.to_fat_ptr"(%2272) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "FilterIterable", "to_typ_name" = "FilterIterable"} : (!mini.fatptr<"FilterIterable">) -> !mini.fatptr<"FilterIterable">
    %2274 = "mini.get_field"(%2273) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterable"} : (!mini.fatptr<"FilterIterable">) -> !mini.fatptr<"IntIterable">
    %2275 = "mini.unwrap"(%2274) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2276 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %2277 = "mini.method_call"(%2276, %2275) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %2278 = "mini.to_fat_ptr"(%2277) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %2279 = "mini.get_field"(%2273) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"FilterIterable">) -> !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
    %2280 = "mini.unwrap"(%2278) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2281 = "mini.unwrap"(%2279) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>) -> !llvm.struct<(!llvm.ptr)>
    %2282 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "FilterIterator", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !mini.fatptr<"FilterIterator">
    %2283 = "mini.get_field"(%2273) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterable"} : (!mini.fatptr<"FilterIterable">) -> !mini.fatptr<"IntIterable">
    %2284 = "mini.unwrap"(%2283) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2285 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %2286 = "mini.method_call"(%2285, %2284) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %2287 = "mini.to_fat_ptr"(%2286) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %2288 = "mini.get_field"(%2273) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"FilterIterable">) -> !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
    %2289 = "mini.to_fat_ptr"(%2287) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %2290 = "mini.unwrap"(%2289) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2291 = builtin.unrealized_conversion_cast %2288 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
    %2292 = "mini.unwrap"(%2291) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>) -> !llvm.struct<(!llvm.ptr)>
    %2293 = "mini.unwrap"(%2282) : (!mini.fatptr<"FilterIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2294 = "mini.parameterization"() {"id_hierarchy" = ["IntIterator"], "name_hierarchy" = ["IntIterator"]} : () -> !llvm.ptr
    %2295 = "mini.parameterization"() {"id_hierarchy" = ["function_typ", ["bool_typ"], ["i32_typ"]], "name_hierarchy" = ["FunctionPtri32_to_Ptri1", ["Ptri1"], ["Ptri32"]]} : () -> !llvm.ptr
    %2296 = "mini.parameterizations_array"(%2294, %2295) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%2296, %2293, %2290, %2292) {"offset" = 2 : i32, "vptrs" = [#none, "function_typ"], "vtable_size" = 8 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
    %2297 = "mini.to_fat_ptr"(%2282) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "FilterIterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"FilterIterator">) -> !mini.fatptr<"Iterator">
    "mini.return"(%2297) : (!mini.fatptr<"Iterator">) -> ()
  }) {"func_name" = "FilterIterable_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb330(%2298 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2299 : !llvm.ptr):
    %2300 = "mini.invariant"(%2299) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2301 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb331] : () -> ()
  ^bb331:
    %2302 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
    "llvm.store"(%2302, %2301) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb332] : () -> ()
  ^bb332:
    %2303 = "llvm.extractvalue"(%2298) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2304 = "llvm.load"(%2301) : (!llvm.ptr) -> i32
    %2305 = "llvm.getelementptr"(%2303, %2304) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2306 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2307 = "llvm.getelementptr"(%2305, %2306) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2307) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_FilterIterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>]} : () -> ()
  "mini.getter_def"() {"meth_name" = "FilterIterator_getter_iterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterator", "parameterization" = "_parameterization_IntIterator"} : () -> ()
  "mini.setter_def"() {"meth_name" = "FilterIterator_setter_iterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterator", "parameterization" = "_parameterization_IntIterator"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "FilterIterator_field_iterator", "getter_name" = "FilterIterator_getter_iterator", "setter_name" = "FilterIterator_setter_iterator"} : () -> ()
  "mini.getter_def"() {"meth_name" = "FilterIterator_getter_f", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionPtri32_to_Ptri1"} : () -> ()
  "mini.setter_def"() {"meth_name" = "FilterIterator_setter_f", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionPtri32_to_Ptri1"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "FilterIterator_field_f", "getter_name" = "FilterIterator_getter_f", "setter_name" = "FilterIterator_setter_f"} : () -> ()
  "mini.func"() ({
  ^bb333(%2308 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2309 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2310 : !llvm.ptr, %2311 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2312 : !llvm.struct<(!llvm.ptr)>):
    %2313 = "mini.wrap"(%2308) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"FilterIterator">
    %2314 = "mini.to_fat_ptr"(%2313) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "FilterIterator", "to_typ_name" = "FilterIterator"} : (!mini.fatptr<"FilterIterator">) -> !mini.fatptr<"FilterIterator">
    %2315 = "mini.wrap"(%2311) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterator">
    %2316 = "mini.to_fat_ptr"(%2315) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %2317 = "mini.to_fat_ptr"(%2316) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    "mini.set_field"(%2314, %2317) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"FilterIterator">, !mini.fatptr<"IntIterator">) -> ()
    %2318 = "mini.wrap"(%2312) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
    %2319 = builtin.unrealized_conversion_cast %2318 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
    %2320 = builtin.unrealized_conversion_cast %2319 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
    "mini.set_field"(%2314, %2320) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"FilterIterator">, !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>) -> ()
  }) {"func_name" = "FilterIterator_init_iteratorIntIterator_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb334(%2321 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2322 : !llvm.ptr):
    %2323 = "mini.invariant"(%2322) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2324 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb335] : () -> ()
  ^bb336:
    %2325 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
    "llvm.store"(%2325, %2324) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb337] : () -> ()
  ^bb338:
    %2326 = "llvm.getelementptr"(%2322) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2327 = "mini.checkflag"(%2326) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2328 = "llvm.load"(%2327) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2328) [^bb336, ^bb336] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb335:
    %2329 = "llvm.getelementptr"(%2322) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2330 = "mini.checkflag"(%2329) {"typ_name" = "IntIterator"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2331 = "llvm.load"(%2330) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2331) [^bb338, ^bb338] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb337:
    %2332 = "llvm.extractvalue"(%2321) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2333 = "llvm.load"(%2324) : (!llvm.ptr) -> i32
    %2334 = "llvm.getelementptr"(%2332, %2333) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2335 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2336 = "llvm.getelementptr"(%2334, %2335) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2336) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterator_B_init_iteratorIntIterator_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb339(%2337 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2338 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2339 : !llvm.ptr):
    %2340 = "mini.wrap"(%2337) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"FilterIterator">
    %2341 = "mini.to_fat_ptr"(%2340) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "FilterIterator", "to_typ_name" = "FilterIterator"} : (!mini.fatptr<"FilterIterator">) -> !mini.fatptr<"FilterIterator">
    %2342 = "mini.get_field"(%2341) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterator"} : (!mini.fatptr<"FilterIterator">) -> !mini.fatptr<"IntIterator">
    %2343 = "mini.unwrap"(%2342) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2344 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %2345 = "mini.method_call"(%2344, %2343) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %2346 = builtin.unrealized_conversion_cast %2345 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %2347 = builtin.unrealized_conversion_cast %2346 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
    "mini.while"() ({
      %2348 = "mini.checkflag"(%2347) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i1>
      %2349 = "mini.unwrap"(%2348) : (!mini.ptr<i1>) -> i1
    }, {
      %2350 = "mini.narrow"(%2347) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
      %2351 = builtin.unrealized_conversion_cast %2350 : !mini.ptr<i32> to !mini.ptr<i32>
      %2352 = "mini.unwrap"(%2351) : (!mini.ptr<i32>) -> i32
      %2353 = "mini.get_field"(%2341) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"FilterIterator">) -> !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
      %2354 = "mini.unwrap"(%2353) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>) -> !llvm.ptr
      %2355 = "mini.fptr_call"(%2354, %2352) {"ret_type" = i1} : (!llvm.ptr, i32) -> !mini.ptr<i1>
      %2356 = "mini.unwrap"(%2355) : (!mini.ptr<i1>) -> i1
      "mini.if"(%2356) ({
        %2357 = "mini.unionize"(%2350) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
        "mini.return"(%2357) : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
      }) : (i1) -> ()
      %2358 = "mini.get_field"(%2341) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterator"} : (!mini.fatptr<"FilterIterator">) -> !mini.fatptr<"IntIterator">
      %2359 = "mini.unwrap"(%2358) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2360 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %2361 = "mini.method_call"(%2360, %2359) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %2362 = builtin.unrealized_conversion_cast %2361 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      "mini.castassign"(%2347, %2362) ({
        %2363 = builtin.unrealized_conversion_cast %2362 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
    }) : () -> ()
    %2364 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
    %2365 = "mini.unionize"(%2364) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    "mini.return"(%2365) : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
  }) {"func_name" = "FilterIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb340(%2366 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2367 : !llvm.ptr):
    %2368 = "mini.invariant"(%2367) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2369 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb341] : () -> ()
  ^bb341:
    %2370 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%2370, %2369) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb342] : () -> ()
  ^bb342:
    %2371 = "llvm.extractvalue"(%2366) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2372 = "llvm.load"(%2369) : (!llvm.ptr) -> i32
    %2373 = "llvm.getelementptr"(%2371, %2372) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2374 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2375 = "llvm.getelementptr"(%2373, %2374) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2375) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_ChainIterable", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
  "mini.getter_def"() {"meth_name" = "ChainIterable_getter_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterable", "parameterization" = "_parameterization_IntIterable"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ChainIterable_setter_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterable", "parameterization" = "_parameterization_IntIterable"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ChainIterable_field_first", "getter_name" = "ChainIterable_getter_first", "setter_name" = "ChainIterable_setter_first"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ChainIterable_getter_second", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterable", "parameterization" = "_parameterization_IntIterable"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ChainIterable_setter_second", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterable", "parameterization" = "_parameterization_IntIterable"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ChainIterable_field_second", "getter_name" = "ChainIterable_getter_second", "setter_name" = "ChainIterable_setter_second"} : () -> ()
  "mini.func"() ({
  ^bb343(%2376 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2377 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2378 : !llvm.ptr, %2379 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2380 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %2381 = "mini.wrap"(%2376) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ChainIterable">
    %2382 = "mini.to_fat_ptr"(%2381) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ChainIterable", "to_typ_name" = "ChainIterable"} : (!mini.fatptr<"ChainIterable">) -> !mini.fatptr<"ChainIterable">
    %2383 = "mini.wrap"(%2379) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %2384 = "mini.to_fat_ptr"(%2383) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %2385 = "mini.to_fat_ptr"(%2384) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    "mini.set_field"(%2382, %2385) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ChainIterable">, !mini.fatptr<"IntIterable">) -> ()
    %2386 = "mini.wrap"(%2380) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %2387 = "mini.to_fat_ptr"(%2386) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %2388 = "mini.to_fat_ptr"(%2387) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    "mini.set_field"(%2382, %2388) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ChainIterable">, !mini.fatptr<"IntIterable">) -> ()
  }) {"func_name" = "ChainIterable_init_firstIntIterable_secondIntIterable", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb344(%2389 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2390 : !llvm.ptr):
    %2391 = "mini.invariant"(%2390) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2392 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb345] : () -> ()
  ^bb346:
    %2393 = "llvm.mlir.constant"() <{"value" = 14 : i32}> : () -> i32
    "llvm.store"(%2393, %2392) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb347] : () -> ()
  ^bb348:
    %2394 = "llvm.getelementptr"(%2390) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2395 = "mini.checkflag"(%2394) {"typ_name" = "IntIterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2396 = "llvm.load"(%2395) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2396) [^bb346, ^bb346] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb345:
    %2397 = "llvm.getelementptr"(%2390) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2398 = "mini.checkflag"(%2397) {"typ_name" = "IntIterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2399 = "llvm.load"(%2398) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2399) [^bb348, ^bb348] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb347:
    %2400 = "llvm.extractvalue"(%2389) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2401 = "llvm.load"(%2392) : (!llvm.ptr) -> i32
    %2402 = "llvm.getelementptr"(%2400, %2401) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2403 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2404 = "llvm.getelementptr"(%2402, %2403) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2404) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable_B_init_firstIntIterable_secondIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb349(%2405 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2406 : !llvm.ptr):
    %2407 = "mini.invariant"(%2406) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2408 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb350] : () -> ()
  ^bb351:
    %2409 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
    "llvm.store"(%2409, %2408) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb352] : () -> ()
  ^bb350:
    %2410 = "llvm.getelementptr"(%2406) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2411 = "mini.checkflag"(%2410) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2412 = "llvm.load"(%2411) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2412) [^bb351, ^bb351] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb352:
    %2413 = "llvm.extractvalue"(%2405) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2414 = "llvm.load"(%2408) : (!llvm.ptr) -> i32
    %2415 = "llvm.getelementptr"(%2413, %2414) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2416 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2417 = "llvm.getelementptr"(%2415, %2416) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2417) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable_B_each_fFunctionPtri32_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb353(%2418 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2419 : !llvm.ptr):
    %2420 = "mini.invariant"(%2419) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2421 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb354] : () -> ()
  ^bb355:
    %2422 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
    "llvm.store"(%2422, %2421) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb356] : () -> ()
  ^bb357:
    %2423 = "llvm.getelementptr"(%2419) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2424 = "mini.checkflag"(%2423) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2425 = "llvm.load"(%2424) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2425) [^bb355, ^bb355] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb354:
    %2426 = "llvm.getelementptr"(%2419) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2427 = "mini.checkflag"(%2426) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2428 = "llvm.load"(%2427) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2428) [^bb357, ^bb357] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb356:
    %2429 = "llvm.extractvalue"(%2418) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2430 = "llvm.load"(%2421) : (!llvm.ptr) -> i32
    %2431 = "llvm.getelementptr"(%2429, %2430) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2432 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2433 = "llvm.getelementptr"(%2431, %2432) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2433) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb358(%2434 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2435 : !llvm.ptr):
    %2436 = "mini.invariant"(%2435) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2437 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb359] : () -> ()
  ^bb360:
    %2438 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
    "llvm.store"(%2438, %2437) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb361] : () -> ()
  ^bb359:
    %2439 = "llvm.getelementptr"(%2435) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2440 = "mini.checkflag"(%2439) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2441 = "llvm.load"(%2440) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2441) [^bb360, ^bb360] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb361:
    %2442 = "llvm.extractvalue"(%2434) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2443 = "llvm.load"(%2437) : (!llvm.ptr) -> i32
    %2444 = "llvm.getelementptr"(%2442, %2443) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2445 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2446 = "llvm.getelementptr"(%2444, %2445) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2446) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable_B_all_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb362(%2447 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2448 : !llvm.ptr):
    %2449 = "mini.invariant"(%2448) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2450 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb363] : () -> ()
  ^bb364:
    %2451 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%2451, %2450) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb365] : () -> ()
  ^bb363:
    %2452 = "llvm.getelementptr"(%2448) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2453 = "mini.checkflag"(%2452) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2454 = "llvm.load"(%2453) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2454) [^bb364, ^bb364] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb365:
    %2455 = "llvm.extractvalue"(%2447) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2456 = "llvm.load"(%2450) : (!llvm.ptr) -> i32
    %2457 = "llvm.getelementptr"(%2455, %2456) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2458 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2459 = "llvm.getelementptr"(%2457, %2458) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2459) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable_B_any_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb366(%2460 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2461 : !llvm.ptr):
    %2462 = "mini.invariant"(%2461) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2463 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb367] : () -> ()
  ^bb368:
    %2464 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
    "llvm.store"(%2464, %2463) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb369] : () -> ()
  ^bb367:
    %2465 = "llvm.getelementptr"(%2461) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2466 = "mini.checkflag"(%2465) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2467 = "llvm.load"(%2466) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2467) [^bb368, ^bb368] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb369:
    %2468 = "llvm.extractvalue"(%2460) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2469 = "llvm.load"(%2463) : (!llvm.ptr) -> i32
    %2470 = "llvm.getelementptr"(%2468, %2469) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2471 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2472 = "llvm.getelementptr"(%2470, %2471) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2472) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable_B_map_fFunctionPtri32_to_Ptri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb370(%2473 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2474 : !llvm.ptr):
    %2475 = "mini.invariant"(%2474) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2476 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb371] : () -> ()
  ^bb372:
    %2477 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
    "llvm.store"(%2477, %2476) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb373] : () -> ()
  ^bb371:
    %2478 = "llvm.getelementptr"(%2474) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2479 = "mini.checkflag"(%2478) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2480 = "llvm.load"(%2479) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2480) [^bb372, ^bb372] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb373:
    %2481 = "llvm.extractvalue"(%2473) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2482 = "llvm.load"(%2476) : (!llvm.ptr) -> i32
    %2483 = "llvm.getelementptr"(%2481, %2482) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2484 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2485 = "llvm.getelementptr"(%2483, %2484) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2485) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable_B_filter_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb374(%2486 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2487 : !llvm.ptr):
    %2488 = "mini.invariant"(%2487) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2489 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb375] : () -> ()
  ^bb376:
    %2490 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
    "llvm.store"(%2490, %2489) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb377] : () -> ()
  ^bb375:
    %2491 = "llvm.getelementptr"(%2487) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2492 = "mini.checkflag"(%2491) {"typ_name" = "IntIterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2493 = "llvm.load"(%2492) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2493) [^bb376, ^bb376] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb377:
    %2494 = "llvm.extractvalue"(%2486) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2495 = "llvm.load"(%2489) : (!llvm.ptr) -> i32
    %2496 = "llvm.getelementptr"(%2494, %2495) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2497 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2498 = "llvm.getelementptr"(%2496, %2497) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2498) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable_B_chain_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb378(%2499 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2500 : !llvm.ptr):
    %2501 = "mini.invariant"(%2500) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2502 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb379] : () -> ()
  ^bb380:
    %2503 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
    "llvm.store"(%2503, %2502) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb381] : () -> ()
  ^bb379:
    %2504 = "llvm.getelementptr"(%2500) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2505 = "mini.checkflag"(%2504) {"typ_name" = "IntIterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2506 = "llvm.load"(%2505) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2506) [^bb380, ^bb380] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb381:
    %2507 = "llvm.extractvalue"(%2499) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2508 = "llvm.load"(%2502) : (!llvm.ptr) -> i32
    %2509 = "llvm.getelementptr"(%2507, %2508) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2510 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2511 = "llvm.getelementptr"(%2509, %2510) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2511) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable_B_interleave_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb382(%2512 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2513 : !llvm.ptr):
    %2514 = "mini.invariant"(%2513) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2515 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb383] : () -> ()
  ^bb384:
    %2516 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
    "llvm.store"(%2516, %2515) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb385] : () -> ()
  ^bb383:
    %2517 = "llvm.getelementptr"(%2513) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2518 = "mini.checkflag"(%2517) {"typ_name" = "IntIterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2519 = "llvm.load"(%2518) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2519) [^bb384, ^bb384] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb385:
    %2520 = "llvm.extractvalue"(%2512) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2521 = "llvm.load"(%2515) : (!llvm.ptr) -> i32
    %2522 = "llvm.getelementptr"(%2520, %2521) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2523 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2524 = "llvm.getelementptr"(%2522, %2523) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2524) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable_B_zip_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb386(%2525 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2526 : !llvm.ptr):
    %2527 = "mini.invariant"(%2526) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2528 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb387] : () -> ()
  ^bb388:
    %2529 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
    "llvm.store"(%2529, %2528) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb389] : () -> ()
  ^bb387:
    %2530 = "llvm.getelementptr"(%2526) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2531 = "mini.checkflag"(%2530) {"typ_name" = "IntIterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2532 = "llvm.load"(%2531) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2532) [^bb388, ^bb388] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb389:
    %2533 = "llvm.extractvalue"(%2525) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2534 = "llvm.load"(%2528) : (!llvm.ptr) -> i32
    %2535 = "llvm.getelementptr"(%2533, %2534) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2536 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2537 = "llvm.getelementptr"(%2535, %2536) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2537) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable_B_product_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb390(%2538 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2539 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2540 : !llvm.ptr):
    %2541 = "mini.wrap"(%2538) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ChainIterable">
    %2542 = "mini.to_fat_ptr"(%2541) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ChainIterable", "to_typ_name" = "ChainIterable"} : (!mini.fatptr<"ChainIterable">) -> !mini.fatptr<"ChainIterable">
    %2543 = "mini.get_field"(%2542) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterable"} : (!mini.fatptr<"ChainIterable">) -> !mini.fatptr<"IntIterable">
    %2544 = "mini.unwrap"(%2543) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2545 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %2546 = "mini.method_call"(%2545, %2544) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %2547 = "mini.to_fat_ptr"(%2546) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %2548 = "mini.get_field"(%2542) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterable"} : (!mini.fatptr<"ChainIterable">) -> !mini.fatptr<"IntIterable">
    %2549 = "mini.unwrap"(%2548) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2550 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %2551 = "mini.method_call"(%2550, %2549) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %2552 = "mini.to_fat_ptr"(%2551) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %2553 = "mini.unwrap"(%2547) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2554 = "mini.unwrap"(%2552) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2555 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1)>, "class_name" = "ChainIterator", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"ChainIterator">
    %2556 = "mini.get_field"(%2542) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterable"} : (!mini.fatptr<"ChainIterable">) -> !mini.fatptr<"IntIterable">
    %2557 = "mini.unwrap"(%2556) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2558 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %2559 = "mini.method_call"(%2558, %2557) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %2560 = "mini.to_fat_ptr"(%2559) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %2561 = "mini.get_field"(%2542) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterable"} : (!mini.fatptr<"ChainIterable">) -> !mini.fatptr<"IntIterable">
    %2562 = "mini.unwrap"(%2561) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2563 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %2564 = "mini.method_call"(%2563, %2562) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %2565 = "mini.to_fat_ptr"(%2564) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %2566 = "mini.to_fat_ptr"(%2560) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %2567 = "mini.unwrap"(%2566) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2568 = "mini.to_fat_ptr"(%2565) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %2569 = "mini.unwrap"(%2568) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2570 = "mini.unwrap"(%2555) : (!mini.fatptr<"ChainIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2571 = "mini.parameterization"() {"id_hierarchy" = ["IntIterator"], "name_hierarchy" = ["IntIterator"]} : () -> !llvm.ptr
    %2572 = "mini.parameterizations_array"(%2571, %2571) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%2572, %2570, %2567, %2569) {"offset" = 3 : i32, "vptrs" = [#none, #none], "vtable_size" = 9 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %2573 = "mini.to_fat_ptr"(%2555) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ChainIterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"ChainIterator">) -> !mini.fatptr<"Iterator">
    "mini.return"(%2573) : (!mini.fatptr<"Iterator">) -> ()
  }) {"func_name" = "ChainIterable_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb391(%2574 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2575 : !llvm.ptr):
    %2576 = "mini.invariant"(%2575) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2577 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb392] : () -> ()
  ^bb392:
    %2578 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
    "llvm.store"(%2578, %2577) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb393] : () -> ()
  ^bb393:
    %2579 = "llvm.extractvalue"(%2574) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2580 = "llvm.load"(%2577) : (!llvm.ptr) -> i32
    %2581 = "llvm.getelementptr"(%2579, %2580) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2582 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2583 = "llvm.getelementptr"(%2581, %2582) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2583) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_ChainIterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1]} : () -> ()
  "mini.getter_def"() {"meth_name" = "ChainIterator_getter_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterator", "parameterization" = "_parameterization_IntIterator"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ChainIterator_setter_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterator", "parameterization" = "_parameterization_IntIterator"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ChainIterator_field_first", "getter_name" = "ChainIterator_getter_first", "setter_name" = "ChainIterator_setter_first"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ChainIterator_getter_second", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterator", "parameterization" = "_parameterization_IntIterator"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ChainIterator_setter_second", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterator", "parameterization" = "_parameterization_IntIterator"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ChainIterator_field_second", "getter_name" = "ChainIterator_getter_second", "setter_name" = "ChainIterator_setter_second"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ChainIterator_getter_on_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 2 : i64, "original_type" = i1, "specialized_name" = "bool_typ", "parameterization" = "_parameterization_Ptri1"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ChainIterator_setter_on_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 2 : i64, "original_type" = i1, "specialized_name" = "bool_typ", "parameterization" = "_parameterization_Ptri1"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ChainIterator_field_on_first", "getter_name" = "ChainIterator_getter_on_first", "setter_name" = "ChainIterator_setter_on_first"} : () -> ()
  "mini.func"() ({
  ^bb394(%2584 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2585 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2586 : !llvm.ptr, %2587 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2588 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %2589 = "mini.wrap"(%2584) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ChainIterator">
    %2590 = "mini.to_fat_ptr"(%2589) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ChainIterator", "to_typ_name" = "ChainIterator"} : (!mini.fatptr<"ChainIterator">) -> !mini.fatptr<"ChainIterator">
    %2591 = "mini.wrap"(%2587) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterator">
    %2592 = "mini.to_fat_ptr"(%2591) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %2593 = "mini.to_fat_ptr"(%2592) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    "mini.set_field"(%2590, %2593) {"offset" = 0 : i64, "vtable_bytes" = 72 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ChainIterator">, !mini.fatptr<"IntIterator">) -> ()
    %2594 = "mini.wrap"(%2588) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterator">
    %2595 = "mini.to_fat_ptr"(%2594) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %2596 = "mini.to_fat_ptr"(%2595) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    "mini.set_field"(%2590, %2596) {"offset" = 1 : i64, "vtable_bytes" = 72 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ChainIterator">, !mini.fatptr<"IntIterator">) -> ()
    %2597 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
    %2598 = builtin.unrealized_conversion_cast %2597 : !mini.ptr<i1> to !mini.ptr<i1>
    "mini.set_field"(%2590, %2598) {"offset" = 2 : i64, "vtable_bytes" = 72 : i32, "original_type" = i1} : (!mini.fatptr<"ChainIterator">, !mini.ptr<i1>) -> ()
  }) {"func_name" = "ChainIterator_init_firstIntIterator_secondIntIterator", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb395(%2599 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2600 : !llvm.ptr):
    %2601 = "mini.invariant"(%2600) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2602 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb396] : () -> ()
  ^bb397:
    %2603 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%2603, %2602) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb398] : () -> ()
  ^bb399:
    %2604 = "llvm.getelementptr"(%2600) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2605 = "mini.checkflag"(%2604) {"typ_name" = "IntIterator"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2606 = "llvm.load"(%2605) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2606) [^bb397, ^bb397] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb396:
    %2607 = "llvm.getelementptr"(%2600) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2608 = "mini.checkflag"(%2607) {"typ_name" = "IntIterator"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2609 = "llvm.load"(%2608) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2609) [^bb399, ^bb399] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb398:
    %2610 = "llvm.extractvalue"(%2599) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2611 = "llvm.load"(%2602) : (!llvm.ptr) -> i32
    %2612 = "llvm.getelementptr"(%2610, %2611) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<9 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2613 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2614 = "llvm.getelementptr"(%2612, %2613) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2614) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterator_B_init_firstIntIterator_secondIntIterator", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb400(%2615 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2616 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2617 : !llvm.ptr):
    %2618 = "mini.wrap"(%2615) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ChainIterator">
    %2619 = "mini.to_fat_ptr"(%2618) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ChainIterator", "to_typ_name" = "ChainIterator"} : (!mini.fatptr<"ChainIterator">) -> !mini.fatptr<"ChainIterator">
    %2620 = "mini.get_field"(%2619) {"offset" = 2 : i64, "vtable_bytes" = 72 : i32, "original_type" = i1} : (!mini.fatptr<"ChainIterator">) -> !mini.ptr<i1>
    %2621 = "mini.unwrap"(%2620) : (!mini.ptr<i1>) -> i1
    "mini.if"(%2621) ({
      %2622 = "mini.get_field"(%2619) {"offset" = 0 : i64, "vtable_bytes" = 72 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterator"} : (!mini.fatptr<"ChainIterator">) -> !mini.fatptr<"IntIterator">
      %2623 = "mini.unwrap"(%2622) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2624 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %2625 = "mini.method_call"(%2624, %2623) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %2626 = builtin.unrealized_conversion_cast %2625 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %2627 = "mini.checkflag"(%2626) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i1>
      %2628 = "mini.unwrap"(%2627) : (!mini.ptr<i1>) -> i1
      %2629 = builtin.unrealized_conversion_cast %2626 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      "mini.if"(%2628) ({
        %2630 = "mini.narrow"(%2629) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
        %2631 = "mini.unionize"(%2630) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
        "mini.return"(%2631) : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
        "mini.castassign"(%2629, %2630) ({
          %2632 = "mini.unionize"(%2630) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
        }) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.ptr<i32>) -> ()
      }) : (i1) -> ()
      %2633 = "mini.literal"() {"value" = false, "typ" = i1} : () -> !mini.ptr<i1>
      %2634 = builtin.unrealized_conversion_cast %2633 : !mini.ptr<i1> to !mini.ptr<i1>
      "mini.set_field"(%2619, %2634) {"offset" = 2 : i64, "vtable_bytes" = 72 : i32, "original_type" = i1} : (!mini.fatptr<"ChainIterator">, !mini.ptr<i1>) -> ()
    }) : (i1) -> ()
    %2635 = "mini.get_field"(%2619) {"offset" = 1 : i64, "vtable_bytes" = 72 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterator"} : (!mini.fatptr<"ChainIterator">) -> !mini.fatptr<"IntIterator">
    %2636 = "mini.unwrap"(%2635) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2637 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %2638 = "mini.method_call"(%2637, %2636) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %2639 = builtin.unrealized_conversion_cast %2638 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %2640 = builtin.unrealized_conversion_cast %2639 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
    "mini.return"(%2640) : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
  }) {"func_name" = "ChainIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb401(%2641 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2642 : !llvm.ptr):
    %2643 = "mini.invariant"(%2642) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2644 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb402] : () -> ()
  ^bb402:
    %2645 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
    "llvm.store"(%2645, %2644) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb403] : () -> ()
  ^bb403:
    %2646 = "llvm.extractvalue"(%2641) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2647 = "llvm.load"(%2644) : (!llvm.ptr) -> i32
    %2648 = "llvm.getelementptr"(%2646, %2647) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<9 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2649 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2650 = "llvm.getelementptr"(%2648, %2649) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2650) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_InterleaveIterable", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
  "mini.getter_def"() {"meth_name" = "InterleaveIterable_getter_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterable", "parameterization" = "_parameterization_IntIterable"} : () -> ()
  "mini.setter_def"() {"meth_name" = "InterleaveIterable_setter_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterable", "parameterization" = "_parameterization_IntIterable"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "InterleaveIterable_field_first", "getter_name" = "InterleaveIterable_getter_first", "setter_name" = "InterleaveIterable_setter_first"} : () -> ()
  "mini.getter_def"() {"meth_name" = "InterleaveIterable_getter_second", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterable", "parameterization" = "_parameterization_IntIterable"} : () -> ()
  "mini.setter_def"() {"meth_name" = "InterleaveIterable_setter_second", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterable", "parameterization" = "_parameterization_IntIterable"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "InterleaveIterable_field_second", "getter_name" = "InterleaveIterable_getter_second", "setter_name" = "InterleaveIterable_setter_second"} : () -> ()
  "mini.func"() ({
  ^bb404(%2651 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2652 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2653 : !llvm.ptr, %2654 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2655 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %2656 = "mini.wrap"(%2651) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"InterleaveIterable">
    %2657 = "mini.to_fat_ptr"(%2656) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "InterleaveIterable", "to_typ_name" = "InterleaveIterable"} : (!mini.fatptr<"InterleaveIterable">) -> !mini.fatptr<"InterleaveIterable">
    %2658 = "mini.wrap"(%2654) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %2659 = "mini.to_fat_ptr"(%2658) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %2660 = "mini.to_fat_ptr"(%2659) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    "mini.set_field"(%2657, %2660) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"InterleaveIterable">, !mini.fatptr<"IntIterable">) -> ()
    %2661 = "mini.wrap"(%2655) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %2662 = "mini.to_fat_ptr"(%2661) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %2663 = "mini.to_fat_ptr"(%2662) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    "mini.set_field"(%2657, %2663) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"InterleaveIterable">, !mini.fatptr<"IntIterable">) -> ()
  }) {"func_name" = "InterleaveIterable_init_firstIntIterable_secondIntIterable", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb405(%2664 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2665 : !llvm.ptr):
    %2666 = "mini.invariant"(%2665) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2667 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb406] : () -> ()
  ^bb407:
    %2668 = "llvm.mlir.constant"() <{"value" = 14 : i32}> : () -> i32
    "llvm.store"(%2668, %2667) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb408] : () -> ()
  ^bb409:
    %2669 = "llvm.getelementptr"(%2665) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2670 = "mini.checkflag"(%2669) {"typ_name" = "IntIterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2671 = "llvm.load"(%2670) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2671) [^bb407, ^bb407] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb406:
    %2672 = "llvm.getelementptr"(%2665) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2673 = "mini.checkflag"(%2672) {"typ_name" = "IntIterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2674 = "llvm.load"(%2673) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2674) [^bb409, ^bb409] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb408:
    %2675 = "llvm.extractvalue"(%2664) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2676 = "llvm.load"(%2667) : (!llvm.ptr) -> i32
    %2677 = "llvm.getelementptr"(%2675, %2676) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2678 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2679 = "llvm.getelementptr"(%2677, %2678) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2679) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable_B_init_firstIntIterable_secondIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb410(%2680 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2681 : !llvm.ptr):
    %2682 = "mini.invariant"(%2681) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2683 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb411] : () -> ()
  ^bb412:
    %2684 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
    "llvm.store"(%2684, %2683) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb413] : () -> ()
  ^bb411:
    %2685 = "llvm.getelementptr"(%2681) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2686 = "mini.checkflag"(%2685) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2687 = "llvm.load"(%2686) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2687) [^bb412, ^bb412] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb413:
    %2688 = "llvm.extractvalue"(%2680) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2689 = "llvm.load"(%2683) : (!llvm.ptr) -> i32
    %2690 = "llvm.getelementptr"(%2688, %2689) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2691 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2692 = "llvm.getelementptr"(%2690, %2691) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2692) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable_B_each_fFunctionPtri32_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb414(%2693 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2694 : !llvm.ptr):
    %2695 = "mini.invariant"(%2694) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2696 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb415] : () -> ()
  ^bb416:
    %2697 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
    "llvm.store"(%2697, %2696) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb417] : () -> ()
  ^bb418:
    %2698 = "llvm.getelementptr"(%2694) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2699 = "mini.checkflag"(%2698) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2700 = "llvm.load"(%2699) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2700) [^bb416, ^bb416] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb415:
    %2701 = "llvm.getelementptr"(%2694) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2702 = "mini.checkflag"(%2701) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2703 = "llvm.load"(%2702) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2703) [^bb418, ^bb418] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb417:
    %2704 = "llvm.extractvalue"(%2693) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2705 = "llvm.load"(%2696) : (!llvm.ptr) -> i32
    %2706 = "llvm.getelementptr"(%2704, %2705) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2707 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2708 = "llvm.getelementptr"(%2706, %2707) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2708) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb419(%2709 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2710 : !llvm.ptr):
    %2711 = "mini.invariant"(%2710) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2712 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb420] : () -> ()
  ^bb421:
    %2713 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
    "llvm.store"(%2713, %2712) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb422] : () -> ()
  ^bb420:
    %2714 = "llvm.getelementptr"(%2710) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2715 = "mini.checkflag"(%2714) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2716 = "llvm.load"(%2715) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2716) [^bb421, ^bb421] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb422:
    %2717 = "llvm.extractvalue"(%2709) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2718 = "llvm.load"(%2712) : (!llvm.ptr) -> i32
    %2719 = "llvm.getelementptr"(%2717, %2718) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2720 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2721 = "llvm.getelementptr"(%2719, %2720) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2721) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable_B_all_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb423(%2722 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2723 : !llvm.ptr):
    %2724 = "mini.invariant"(%2723) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2725 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb424] : () -> ()
  ^bb425:
    %2726 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%2726, %2725) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb426] : () -> ()
  ^bb424:
    %2727 = "llvm.getelementptr"(%2723) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2728 = "mini.checkflag"(%2727) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2729 = "llvm.load"(%2728) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2729) [^bb425, ^bb425] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb426:
    %2730 = "llvm.extractvalue"(%2722) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2731 = "llvm.load"(%2725) : (!llvm.ptr) -> i32
    %2732 = "llvm.getelementptr"(%2730, %2731) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2733 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2734 = "llvm.getelementptr"(%2732, %2733) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2734) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable_B_any_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb427(%2735 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2736 : !llvm.ptr):
    %2737 = "mini.invariant"(%2736) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2738 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb428] : () -> ()
  ^bb429:
    %2739 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
    "llvm.store"(%2739, %2738) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb430] : () -> ()
  ^bb428:
    %2740 = "llvm.getelementptr"(%2736) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2741 = "mini.checkflag"(%2740) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2742 = "llvm.load"(%2741) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2742) [^bb429, ^bb429] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb430:
    %2743 = "llvm.extractvalue"(%2735) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2744 = "llvm.load"(%2738) : (!llvm.ptr) -> i32
    %2745 = "llvm.getelementptr"(%2743, %2744) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2746 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2747 = "llvm.getelementptr"(%2745, %2746) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2747) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable_B_map_fFunctionPtri32_to_Ptri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb431(%2748 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2749 : !llvm.ptr):
    %2750 = "mini.invariant"(%2749) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2751 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb432] : () -> ()
  ^bb433:
    %2752 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
    "llvm.store"(%2752, %2751) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb434] : () -> ()
  ^bb432:
    %2753 = "llvm.getelementptr"(%2749) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2754 = "mini.checkflag"(%2753) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2755 = "llvm.load"(%2754) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2755) [^bb433, ^bb433] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb434:
    %2756 = "llvm.extractvalue"(%2748) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2757 = "llvm.load"(%2751) : (!llvm.ptr) -> i32
    %2758 = "llvm.getelementptr"(%2756, %2757) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2759 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2760 = "llvm.getelementptr"(%2758, %2759) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2760) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable_B_filter_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb435(%2761 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2762 : !llvm.ptr):
    %2763 = "mini.invariant"(%2762) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2764 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb436] : () -> ()
  ^bb437:
    %2765 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
    "llvm.store"(%2765, %2764) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb438] : () -> ()
  ^bb436:
    %2766 = "llvm.getelementptr"(%2762) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2767 = "mini.checkflag"(%2766) {"typ_name" = "IntIterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2768 = "llvm.load"(%2767) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2768) [^bb437, ^bb437] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb438:
    %2769 = "llvm.extractvalue"(%2761) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2770 = "llvm.load"(%2764) : (!llvm.ptr) -> i32
    %2771 = "llvm.getelementptr"(%2769, %2770) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2772 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2773 = "llvm.getelementptr"(%2771, %2772) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2773) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable_B_chain_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb439(%2774 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2775 : !llvm.ptr):
    %2776 = "mini.invariant"(%2775) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2777 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb440] : () -> ()
  ^bb441:
    %2778 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
    "llvm.store"(%2778, %2777) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb442] : () -> ()
  ^bb440:
    %2779 = "llvm.getelementptr"(%2775) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2780 = "mini.checkflag"(%2779) {"typ_name" = "IntIterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2781 = "llvm.load"(%2780) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2781) [^bb441, ^bb441] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb442:
    %2782 = "llvm.extractvalue"(%2774) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2783 = "llvm.load"(%2777) : (!llvm.ptr) -> i32
    %2784 = "llvm.getelementptr"(%2782, %2783) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2785 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2786 = "llvm.getelementptr"(%2784, %2785) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2786) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable_B_interleave_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb443(%2787 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2788 : !llvm.ptr):
    %2789 = "mini.invariant"(%2788) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2790 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb444] : () -> ()
  ^bb445:
    %2791 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
    "llvm.store"(%2791, %2790) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb446] : () -> ()
  ^bb444:
    %2792 = "llvm.getelementptr"(%2788) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2793 = "mini.checkflag"(%2792) {"typ_name" = "IntIterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2794 = "llvm.load"(%2793) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2794) [^bb445, ^bb445] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb446:
    %2795 = "llvm.extractvalue"(%2787) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2796 = "llvm.load"(%2790) : (!llvm.ptr) -> i32
    %2797 = "llvm.getelementptr"(%2795, %2796) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2798 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2799 = "llvm.getelementptr"(%2797, %2798) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2799) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable_B_zip_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb447(%2800 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2801 : !llvm.ptr):
    %2802 = "mini.invariant"(%2801) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2803 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb448] : () -> ()
  ^bb449:
    %2804 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
    "llvm.store"(%2804, %2803) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb450] : () -> ()
  ^bb448:
    %2805 = "llvm.getelementptr"(%2801) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2806 = "mini.checkflag"(%2805) {"typ_name" = "IntIterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2807 = "llvm.load"(%2806) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2807) [^bb449, ^bb449] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb450:
    %2808 = "llvm.extractvalue"(%2800) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2809 = "llvm.load"(%2803) : (!llvm.ptr) -> i32
    %2810 = "llvm.getelementptr"(%2808, %2809) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2811 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2812 = "llvm.getelementptr"(%2810, %2811) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2812) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable_B_product_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb451(%2813 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2814 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2815 : !llvm.ptr):
    %2816 = "mini.wrap"(%2813) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"InterleaveIterable">
    %2817 = "mini.to_fat_ptr"(%2816) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "InterleaveIterable", "to_typ_name" = "InterleaveIterable"} : (!mini.fatptr<"InterleaveIterable">) -> !mini.fatptr<"InterleaveIterable">
    %2818 = "mini.get_field"(%2817) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterable"} : (!mini.fatptr<"InterleaveIterable">) -> !mini.fatptr<"IntIterable">
    %2819 = "mini.unwrap"(%2818) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2820 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %2821 = "mini.method_call"(%2820, %2819) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %2822 = "mini.to_fat_ptr"(%2821) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %2823 = "mini.get_field"(%2817) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterable"} : (!mini.fatptr<"InterleaveIterable">) -> !mini.fatptr<"IntIterable">
    %2824 = "mini.unwrap"(%2823) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2825 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %2826 = "mini.method_call"(%2825, %2824) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %2827 = "mini.to_fat_ptr"(%2826) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %2828 = "mini.unwrap"(%2822) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2829 = "mini.unwrap"(%2827) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2830 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1)>, "class_name" = "InterleaveIterator", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"InterleaveIterator">
    %2831 = "mini.get_field"(%2817) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterable"} : (!mini.fatptr<"InterleaveIterable">) -> !mini.fatptr<"IntIterable">
    %2832 = "mini.unwrap"(%2831) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2833 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %2834 = "mini.method_call"(%2833, %2832) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %2835 = "mini.to_fat_ptr"(%2834) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %2836 = "mini.get_field"(%2817) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterable"} : (!mini.fatptr<"InterleaveIterable">) -> !mini.fatptr<"IntIterable">
    %2837 = "mini.unwrap"(%2836) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2838 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %2839 = "mini.method_call"(%2838, %2837) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %2840 = "mini.to_fat_ptr"(%2839) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %2841 = "mini.to_fat_ptr"(%2835) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %2842 = "mini.unwrap"(%2841) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2843 = "mini.to_fat_ptr"(%2840) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %2844 = "mini.unwrap"(%2843) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2845 = "mini.unwrap"(%2830) : (!mini.fatptr<"InterleaveIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2846 = "mini.parameterization"() {"id_hierarchy" = ["IntIterator"], "name_hierarchy" = ["IntIterator"]} : () -> !llvm.ptr
    %2847 = "mini.parameterizations_array"(%2846, %2846) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%2847, %2845, %2842, %2844) {"offset" = 3 : i32, "vptrs" = [#none, #none], "vtable_size" = 9 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %2848 = "mini.to_fat_ptr"(%2830) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "InterleaveIterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"InterleaveIterator">) -> !mini.fatptr<"Iterator">
    "mini.return"(%2848) : (!mini.fatptr<"Iterator">) -> ()
  }) {"func_name" = "InterleaveIterable_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb452(%2849 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2850 : !llvm.ptr):
    %2851 = "mini.invariant"(%2850) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2852 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb453] : () -> ()
  ^bb453:
    %2853 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
    "llvm.store"(%2853, %2852) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb454] : () -> ()
  ^bb454:
    %2854 = "llvm.extractvalue"(%2849) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2855 = "llvm.load"(%2852) : (!llvm.ptr) -> i32
    %2856 = "llvm.getelementptr"(%2854, %2855) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2857 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2858 = "llvm.getelementptr"(%2856, %2857) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2858) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_InterleaveIterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1]} : () -> ()
  "mini.getter_def"() {"meth_name" = "InterleaveIterator_getter_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterator", "parameterization" = "_parameterization_IntIterator"} : () -> ()
  "mini.setter_def"() {"meth_name" = "InterleaveIterator_setter_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterator", "parameterization" = "_parameterization_IntIterator"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "InterleaveIterator_field_first", "getter_name" = "InterleaveIterator_getter_first", "setter_name" = "InterleaveIterator_setter_first"} : () -> ()
  "mini.getter_def"() {"meth_name" = "InterleaveIterator_getter_second", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterator", "parameterization" = "_parameterization_IntIterator"} : () -> ()
  "mini.setter_def"() {"meth_name" = "InterleaveIterator_setter_second", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterator", "parameterization" = "_parameterization_IntIterator"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "InterleaveIterator_field_second", "getter_name" = "InterleaveIterator_getter_second", "setter_name" = "InterleaveIterator_setter_second"} : () -> ()
  "mini.getter_def"() {"meth_name" = "InterleaveIterator_getter_on_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 2 : i64, "original_type" = i1, "specialized_name" = "bool_typ", "parameterization" = "_parameterization_Ptri1"} : () -> ()
  "mini.setter_def"() {"meth_name" = "InterleaveIterator_setter_on_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 2 : i64, "original_type" = i1, "specialized_name" = "bool_typ", "parameterization" = "_parameterization_Ptri1"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "InterleaveIterator_field_on_first", "getter_name" = "InterleaveIterator_getter_on_first", "setter_name" = "InterleaveIterator_setter_on_first"} : () -> ()
  "mini.func"() ({
  ^bb455(%2859 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2860 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2861 : !llvm.ptr, %2862 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2863 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %2864 = "mini.wrap"(%2859) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"InterleaveIterator">
    %2865 = "mini.to_fat_ptr"(%2864) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "InterleaveIterator", "to_typ_name" = "InterleaveIterator"} : (!mini.fatptr<"InterleaveIterator">) -> !mini.fatptr<"InterleaveIterator">
    %2866 = "mini.wrap"(%2862) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterator">
    %2867 = "mini.to_fat_ptr"(%2866) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %2868 = "mini.to_fat_ptr"(%2867) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    "mini.set_field"(%2865, %2868) {"offset" = 0 : i64, "vtable_bytes" = 72 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"InterleaveIterator">, !mini.fatptr<"IntIterator">) -> ()
    %2869 = "mini.wrap"(%2863) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterator">
    %2870 = "mini.to_fat_ptr"(%2869) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %2871 = "mini.to_fat_ptr"(%2870) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    "mini.set_field"(%2865, %2871) {"offset" = 1 : i64, "vtable_bytes" = 72 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"InterleaveIterator">, !mini.fatptr<"IntIterator">) -> ()
    %2872 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
    %2873 = builtin.unrealized_conversion_cast %2872 : !mini.ptr<i1> to !mini.ptr<i1>
    "mini.set_field"(%2865, %2873) {"offset" = 2 : i64, "vtable_bytes" = 72 : i32, "original_type" = i1} : (!mini.fatptr<"InterleaveIterator">, !mini.ptr<i1>) -> ()
  }) {"func_name" = "InterleaveIterator_init_firstIntIterator_secondIntIterator", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb456(%2874 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2875 : !llvm.ptr):
    %2876 = "mini.invariant"(%2875) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2877 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb457] : () -> ()
  ^bb458:
    %2878 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%2878, %2877) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb459] : () -> ()
  ^bb460:
    %2879 = "llvm.getelementptr"(%2875) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2880 = "mini.checkflag"(%2879) {"typ_name" = "IntIterator"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2881 = "llvm.load"(%2880) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2881) [^bb458, ^bb458] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb457:
    %2882 = "llvm.getelementptr"(%2875) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2883 = "mini.checkflag"(%2882) {"typ_name" = "IntIterator"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2884 = "llvm.load"(%2883) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2884) [^bb460, ^bb460] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb459:
    %2885 = "llvm.extractvalue"(%2874) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2886 = "llvm.load"(%2877) : (!llvm.ptr) -> i32
    %2887 = "llvm.getelementptr"(%2885, %2886) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<9 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2888 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2889 = "llvm.getelementptr"(%2887, %2888) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2889) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterator_B_init_firstIntIterator_secondIntIterator", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb461(%2890 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2891 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2892 : !llvm.ptr):
    %2893 = "mini.wrap"(%2890) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"InterleaveIterator">
    %2894 = "mini.to_fat_ptr"(%2893) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "InterleaveIterator", "to_typ_name" = "InterleaveIterator"} : (!mini.fatptr<"InterleaveIterator">) -> !mini.fatptr<"InterleaveIterator">
    %2895 = "mini.get_field"(%2894) {"offset" = 2 : i64, "vtable_bytes" = 72 : i32, "original_type" = i1} : (!mini.fatptr<"InterleaveIterator">) -> !mini.ptr<i1>
    %2896 = "mini.unwrap"(%2895) : (!mini.ptr<i1>) -> i1
    "mini.if"(%2896) ({
      %2897 = "mini.literal"() {"value" = false, "typ" = i1} : () -> !mini.ptr<i1>
      %2898 = builtin.unrealized_conversion_cast %2897 : !mini.ptr<i1> to !mini.ptr<i1>
      "mini.set_field"(%2894, %2898) {"offset" = 2 : i64, "vtable_bytes" = 72 : i32, "original_type" = i1} : (!mini.fatptr<"InterleaveIterator">, !mini.ptr<i1>) -> ()
      %2899 = "mini.get_field"(%2894) {"offset" = 0 : i64, "vtable_bytes" = 72 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterator"} : (!mini.fatptr<"InterleaveIterator">) -> !mini.fatptr<"IntIterator">
      %2900 = "mini.unwrap"(%2899) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2901 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %2902 = "mini.method_call"(%2901, %2900) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %2903 = builtin.unrealized_conversion_cast %2902 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %2904 = builtin.unrealized_conversion_cast %2903 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      "mini.return"(%2904) : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
    }) : (i1) -> ()
    %2905 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
    %2906 = builtin.unrealized_conversion_cast %2905 : !mini.ptr<i1> to !mini.ptr<i1>
    "mini.set_field"(%2894, %2906) {"offset" = 2 : i64, "vtable_bytes" = 72 : i32, "original_type" = i1} : (!mini.fatptr<"InterleaveIterator">, !mini.ptr<i1>) -> ()
    %2907 = "mini.get_field"(%2894) {"offset" = 1 : i64, "vtable_bytes" = 72 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterator"} : (!mini.fatptr<"InterleaveIterator">) -> !mini.fatptr<"IntIterator">
    %2908 = "mini.unwrap"(%2907) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2909 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %2910 = "mini.method_call"(%2909, %2908) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %2911 = builtin.unrealized_conversion_cast %2910 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %2912 = builtin.unrealized_conversion_cast %2911 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
    "mini.return"(%2912) : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
  }) {"func_name" = "InterleaveIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb462(%2913 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2914 : !llvm.ptr):
    %2915 = "mini.invariant"(%2914) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2916 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb463] : () -> ()
  ^bb463:
    %2917 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
    "llvm.store"(%2917, %2916) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb464] : () -> ()
  ^bb464:
    %2918 = "llvm.extractvalue"(%2913) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2919 = "llvm.load"(%2916) : (!llvm.ptr) -> i32
    %2920 = "llvm.getelementptr"(%2918, %2919) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<9 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2921 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2922 = "llvm.getelementptr"(%2920, %2921) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2922) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_IntTupleIterable", "types" = []} : () -> ()
  "mini.func"() ({
  ^bb465(%2923 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2924 : !llvm.ptr):
    %2925 = "mini.invariant"(%2924) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2926 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb466] : () -> ()
  ^bb466:
    %2927 = "llvm.mlir.constant"() <{"value" = 1 : i32}> : () -> i32
    "llvm.store"(%2927, %2926) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb467] : () -> ()
  ^bb467:
    %2928 = "llvm.extractvalue"(%2923) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2929 = "llvm.load"(%2926) : (!llvm.ptr) -> i32
    %2930 = "llvm.getelementptr"(%2928, %2929) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<4 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2931 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2932 = "llvm.getelementptr"(%2930, %2931) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2932) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntTupleIterable_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_IntTupleIterator", "types" = []} : () -> ()
  "mini.func"() ({
  ^bb468(%2933 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2934 : !llvm.ptr):
    %2935 = "mini.invariant"(%2934) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2936 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb469] : () -> ()
  ^bb469:
    %2937 = "llvm.mlir.constant"() <{"value" = 1 : i32}> : () -> i32
    "llvm.store"(%2937, %2936) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb470] : () -> ()
  ^bb470:
    %2938 = "llvm.extractvalue"(%2933) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2939 = "llvm.load"(%2936) : (!llvm.ptr) -> i32
    %2940 = "llvm.getelementptr"(%2938, %2939) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2941 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2942 = "llvm.getelementptr"(%2940, %2941) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2942) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntTupleIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_ZipIterable", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
  "mini.getter_def"() {"meth_name" = "ZipIterable_getter_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterable", "parameterization" = "_parameterization_IntIterable"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ZipIterable_setter_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterable", "parameterization" = "_parameterization_IntIterable"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ZipIterable_field_first", "getter_name" = "ZipIterable_getter_first", "setter_name" = "ZipIterable_setter_first"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ZipIterable_getter_second", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterable", "parameterization" = "_parameterization_IntIterable"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ZipIterable_setter_second", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterable", "parameterization" = "_parameterization_IntIterable"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ZipIterable_field_second", "getter_name" = "ZipIterable_getter_second", "setter_name" = "ZipIterable_setter_second"} : () -> ()
  "mini.func"() ({
  ^bb471(%2943 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2944 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2945 : !llvm.ptr, %2946 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2947 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %2948 = "mini.wrap"(%2943) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ZipIterable">
    %2949 = "mini.to_fat_ptr"(%2948) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ZipIterable", "to_typ_name" = "ZipIterable"} : (!mini.fatptr<"ZipIterable">) -> !mini.fatptr<"ZipIterable">
    %2950 = "mini.wrap"(%2946) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %2951 = "mini.to_fat_ptr"(%2950) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %2952 = "mini.to_fat_ptr"(%2951) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    "mini.set_field"(%2949, %2952) {"offset" = 0 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ZipIterable">, !mini.fatptr<"IntIterable">) -> ()
    %2953 = "mini.wrap"(%2947) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %2954 = "mini.to_fat_ptr"(%2953) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %2955 = "mini.to_fat_ptr"(%2954) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    "mini.set_field"(%2949, %2955) {"offset" = 1 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ZipIterable">, !mini.fatptr<"IntIterable">) -> ()
  }) {"func_name" = "ZipIterable_init_firstIntIterable_secondIntIterable", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb472(%2956 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2957 : !llvm.ptr):
    %2958 = "mini.invariant"(%2957) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2959 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb473] : () -> ()
  ^bb474:
    %2960 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
    "llvm.store"(%2960, %2959) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb475] : () -> ()
  ^bb476:
    %2961 = "llvm.getelementptr"(%2957) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2962 = "mini.checkflag"(%2961) {"typ_name" = "IntIterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2963 = "llvm.load"(%2962) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2963) [^bb474, ^bb474] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb473:
    %2964 = "llvm.getelementptr"(%2957) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2965 = "mini.checkflag"(%2964) {"typ_name" = "IntIterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2966 = "llvm.load"(%2965) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2966) [^bb476, ^bb476] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb475:
    %2967 = "llvm.extractvalue"(%2956) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2968 = "llvm.load"(%2959) : (!llvm.ptr) -> i32
    %2969 = "llvm.getelementptr"(%2967, %2968) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<12 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2970 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2971 = "llvm.getelementptr"(%2969, %2970) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2971) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable_B_init_firstIntIterable_secondIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb477(%2972 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2973 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2974 : !llvm.ptr):
    %2975 = "mini.wrap"(%2972) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ZipIterable">
    %2976 = "mini.to_fat_ptr"(%2975) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ZipIterable", "to_typ_name" = "ZipIterable"} : (!mini.fatptr<"ZipIterable">) -> !mini.fatptr<"ZipIterable">
    %2977 = "mini.get_field"(%2976) {"offset" = 0 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterable"} : (!mini.fatptr<"ZipIterable">) -> !mini.fatptr<"IntIterable">
    %2978 = "mini.unwrap"(%2977) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2979 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %2980 = "mini.method_call"(%2979, %2978) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %2981 = "mini.to_fat_ptr"(%2980) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %2982 = "mini.get_field"(%2976) {"offset" = 1 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterable"} : (!mini.fatptr<"ZipIterable">) -> !mini.fatptr<"IntIterable">
    %2983 = "mini.unwrap"(%2982) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2984 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %2985 = "mini.method_call"(%2984, %2983) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %2986 = "mini.to_fat_ptr"(%2985) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %2987 = "mini.unwrap"(%2981) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2988 = "mini.unwrap"(%2986) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2989 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "ZipIterator", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !mini.fatptr<"ZipIterator">
    %2990 = "mini.get_field"(%2976) {"offset" = 0 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterable"} : (!mini.fatptr<"ZipIterable">) -> !mini.fatptr<"IntIterable">
    %2991 = "mini.unwrap"(%2990) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2992 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %2993 = "mini.method_call"(%2992, %2991) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %2994 = "mini.to_fat_ptr"(%2993) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %2995 = "mini.get_field"(%2976) {"offset" = 1 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterable"} : (!mini.fatptr<"ZipIterable">) -> !mini.fatptr<"IntIterable">
    %2996 = "mini.unwrap"(%2995) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2997 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %2998 = "mini.method_call"(%2997, %2996) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %2999 = "mini.to_fat_ptr"(%2998) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %3000 = "mini.to_fat_ptr"(%2994) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %3001 = "mini.unwrap"(%3000) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3002 = "mini.to_fat_ptr"(%2999) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %3003 = "mini.unwrap"(%3002) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3004 = "mini.unwrap"(%2989) : (!mini.fatptr<"ZipIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3005 = "mini.parameterization"() {"id_hierarchy" = ["IntIterator"], "name_hierarchy" = ["IntIterator"]} : () -> !llvm.ptr
    %3006 = "mini.parameterizations_array"(%3005, %3005) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%3006, %3004, %3001, %3003) {"offset" = 2 : i32, "vptrs" = [#none, #none], "vtable_size" = 8 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %3007 = "mini.to_fat_ptr"(%2989) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ZipIterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"ZipIterator">) -> !mini.fatptr<"Iterator">
    "mini.return"(%3007) : (!mini.fatptr<"Iterator">) -> ()
  }) {"func_name" = "ZipIterable_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb478(%3008 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3009 : !llvm.ptr):
    %3010 = "mini.invariant"(%3009) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3011 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb479] : () -> ()
  ^bb479:
    %3012 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%3012, %3011) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb480] : () -> ()
  ^bb480:
    %3013 = "llvm.extractvalue"(%3008) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3014 = "llvm.load"(%3011) : (!llvm.ptr) -> i32
    %3015 = "llvm.getelementptr"(%3013, %3014) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<12 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3016 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3017 = "llvm.getelementptr"(%3015, %3016) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3017) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_ZipIterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
  "mini.getter_def"() {"meth_name" = "ZipIterator_getter_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterator", "parameterization" = "_parameterization_IntIterator"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ZipIterator_setter_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterator", "parameterization" = "_parameterization_IntIterator"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ZipIterator_field_first", "getter_name" = "ZipIterator_getter_first", "setter_name" = "ZipIterator_setter_first"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ZipIterator_getter_second", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterator", "parameterization" = "_parameterization_IntIterator"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ZipIterator_setter_second", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterator", "parameterization" = "_parameterization_IntIterator"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ZipIterator_field_second", "getter_name" = "ZipIterator_getter_second", "setter_name" = "ZipIterator_setter_second"} : () -> ()
  "mini.func"() ({
  ^bb481(%3018 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3019 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3020 : !llvm.ptr, %3021 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3022 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %3023 = "mini.wrap"(%3018) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ZipIterator">
    %3024 = "mini.to_fat_ptr"(%3023) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ZipIterator", "to_typ_name" = "ZipIterator"} : (!mini.fatptr<"ZipIterator">) -> !mini.fatptr<"ZipIterator">
    %3025 = "mini.wrap"(%3021) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterator">
    %3026 = "mini.to_fat_ptr"(%3025) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %3027 = "mini.to_fat_ptr"(%3026) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    "mini.set_field"(%3024, %3027) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ZipIterator">, !mini.fatptr<"IntIterator">) -> ()
    %3028 = "mini.wrap"(%3022) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterator">
    %3029 = "mini.to_fat_ptr"(%3028) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %3030 = "mini.to_fat_ptr"(%3029) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    "mini.set_field"(%3024, %3030) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ZipIterator">, !mini.fatptr<"IntIterator">) -> ()
  }) {"func_name" = "ZipIterator_init_firstIntIterator_secondIntIterator", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb482(%3031 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3032 : !llvm.ptr):
    %3033 = "mini.invariant"(%3032) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3034 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb483] : () -> ()
  ^bb484:
    %3035 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
    "llvm.store"(%3035, %3034) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb485] : () -> ()
  ^bb486:
    %3036 = "llvm.getelementptr"(%3032) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3037 = "mini.checkflag"(%3036) {"typ_name" = "IntIterator"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3038 = "llvm.load"(%3037) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3038) [^bb484, ^bb484] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb483:
    %3039 = "llvm.getelementptr"(%3032) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3040 = "mini.checkflag"(%3039) {"typ_name" = "IntIterator"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3041 = "llvm.load"(%3040) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3041) [^bb486, ^bb486] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb485:
    %3042 = "llvm.extractvalue"(%3031) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3043 = "llvm.load"(%3034) : (!llvm.ptr) -> i32
    %3044 = "llvm.getelementptr"(%3042, %3043) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3045 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3046 = "llvm.getelementptr"(%3044, %3045) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3046) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterator_B_init_firstIntIterator_secondIntIterator", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb487(%3047 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3048 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3049 : !llvm.ptr):
    %3050 = "mini.wrap"(%3047) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ZipIterator">
    %3051 = "mini.to_fat_ptr"(%3050) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ZipIterator", "to_typ_name" = "ZipIterator"} : (!mini.fatptr<"ZipIterator">) -> !mini.fatptr<"ZipIterator">
    %3052 = "mini.get_field"(%3051) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterator"} : (!mini.fatptr<"ZipIterator">) -> !mini.fatptr<"IntIterator">
    %3053 = "mini.unwrap"(%3052) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3054 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %3055 = "mini.method_call"(%3054, %3053) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %3056 = builtin.unrealized_conversion_cast %3055 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %3057 = "mini.get_field"(%3051) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterator"} : (!mini.fatptr<"ZipIterator">) -> !mini.fatptr<"IntIterator">
    %3058 = "mini.unwrap"(%3057) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3059 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %3060 = "mini.method_call"(%3059, %3058) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %3061 = builtin.unrealized_conversion_cast %3060 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %3062 = "mini.checkflag"(%3056) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i1>
    %3063 = "mini.unwrap"(%3062) : (!mini.ptr<i1>) -> i1
    %3064 = builtin.unrealized_conversion_cast %3056 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
    "mini.if"(%3063) ({
      %3065 = "mini.narrow"(%3064) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
      %3066 = "mini.checkflag"(%3061) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i1>
      %3067 = "mini.unwrap"(%3066) : (!mini.ptr<i1>) -> i1
      %3068 = builtin.unrealized_conversion_cast %3061 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      "mini.if"(%3067) ({
        %3069 = "mini.narrow"(%3068) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
        %3070 = "mini.unwrap"(%3065) : (!mini.ptr<i32>) -> i32
        %3071 = "mini.unwrap"(%3069) : (!mini.ptr<i32>) -> i32
        %3072 = "mini.create_tuple"(%3070, %3071) {"typ" = !llvm.struct<(i32, i32)>} : (i32, i32) -> !mini.tuple<[!mini.ptr<i32>, !mini.ptr<i32>]>
        %3073 = "mini.unionize"(%3072) {"from_typ" = !llvm.struct<(i32, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "tuple_typ", "to_typ_name" = "union_typ"} : (!mini.tuple<[!mini.ptr<i32>, !mini.ptr<i32>]>) -> !mini.union<[!mini.tuple<[!mini.ptr<i32>, !mini.ptr<i32>]>, !mini.nil]>
        "mini.return"(%3073) : (!mini.union<[!mini.tuple<[!mini.ptr<i32>, !mini.ptr<i32>]>, !mini.nil]>) -> ()
        "mini.castassign"(%3068, %3069) ({
          %3074 = "mini.unionize"(%3069) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
        }) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.ptr<i32>) -> ()
      }) : (i1) -> ()
      "mini.castassign"(%3064, %3065) ({
        %3075 = "mini.unionize"(%3065) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      }) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.ptr<i32>) -> ()
    }) : (i1) -> ()
    %3076 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
    %3077 = "mini.unionize"(%3076) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.tuple<[!mini.ptr<i32>, !mini.ptr<i32>]>, !mini.nil]>
    "mini.return"(%3077) : (!mini.union<[!mini.tuple<[!mini.ptr<i32>, !mini.ptr<i32>]>, !mini.nil]>) -> ()
  }) {"func_name" = "ZipIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i64)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb488(%3078 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3079 : !llvm.ptr):
    %3080 = "mini.invariant"(%3079) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3081 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb489] : () -> ()
  ^bb489:
    %3082 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%3082, %3081) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb490] : () -> ()
  ^bb490:
    %3083 = "llvm.extractvalue"(%3078) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3084 = "llvm.load"(%3081) : (!llvm.ptr) -> i32
    %3085 = "llvm.getelementptr"(%3083, %3084) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3086 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3087 = "llvm.getelementptr"(%3085, %3086) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3087) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_ProductIterable", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
  "mini.getter_def"() {"meth_name" = "ProductIterable_getter_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterable", "parameterization" = "_parameterization_IntIterable"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ProductIterable_setter_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterable", "parameterization" = "_parameterization_IntIterable"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ProductIterable_field_first", "getter_name" = "ProductIterable_getter_first", "setter_name" = "ProductIterable_setter_first"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ProductIterable_getter_second", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterable", "parameterization" = "_parameterization_IntIterable"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ProductIterable_setter_second", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterable", "parameterization" = "_parameterization_IntIterable"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ProductIterable_field_second", "getter_name" = "ProductIterable_getter_second", "setter_name" = "ProductIterable_setter_second"} : () -> ()
  "mini.func"() ({
  ^bb491(%3088 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3089 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3090 : !llvm.ptr, %3091 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3092 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %3093 = "mini.wrap"(%3088) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ProductIterable">
    %3094 = "mini.to_fat_ptr"(%3093) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ProductIterable", "to_typ_name" = "ProductIterable"} : (!mini.fatptr<"ProductIterable">) -> !mini.fatptr<"ProductIterable">
    %3095 = "mini.wrap"(%3091) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %3096 = "mini.to_fat_ptr"(%3095) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %3097 = "mini.to_fat_ptr"(%3096) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    "mini.set_field"(%3094, %3097) {"offset" = 0 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ProductIterable">, !mini.fatptr<"IntIterable">) -> ()
    %3098 = "mini.wrap"(%3092) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %3099 = "mini.to_fat_ptr"(%3098) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %3100 = "mini.to_fat_ptr"(%3099) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    "mini.set_field"(%3094, %3100) {"offset" = 1 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ProductIterable">, !mini.fatptr<"IntIterable">) -> ()
  }) {"func_name" = "ProductIterable_init_firstIntIterable_secondIntIterable", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb492(%3101 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3102 : !llvm.ptr):
    %3103 = "mini.invariant"(%3102) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3104 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb493] : () -> ()
  ^bb494:
    %3105 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
    "llvm.store"(%3105, %3104) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb495] : () -> ()
  ^bb496:
    %3106 = "llvm.getelementptr"(%3102) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3107 = "mini.checkflag"(%3106) {"typ_name" = "IntIterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3108 = "llvm.load"(%3107) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3108) [^bb494, ^bb494] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb493:
    %3109 = "llvm.getelementptr"(%3102) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3110 = "mini.checkflag"(%3109) {"typ_name" = "IntIterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3111 = "llvm.load"(%3110) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3111) [^bb496, ^bb496] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb495:
    %3112 = "llvm.extractvalue"(%3101) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3113 = "llvm.load"(%3104) : (!llvm.ptr) -> i32
    %3114 = "llvm.getelementptr"(%3112, %3113) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<12 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3115 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3116 = "llvm.getelementptr"(%3114, %3115) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3116) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable_B_init_firstIntIterable_secondIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb497(%3117 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3118 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3119 : !llvm.ptr):
    %3120 = "mini.wrap"(%3117) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ProductIterable">
    %3121 = "mini.to_fat_ptr"(%3120) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ProductIterable", "to_typ_name" = "ProductIterable"} : (!mini.fatptr<"ProductIterable">) -> !mini.fatptr<"ProductIterable">
    %3122 = "mini.get_field"(%3121) {"offset" = 0 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterable"} : (!mini.fatptr<"ProductIterable">) -> !mini.fatptr<"IntIterable">
    %3123 = "mini.get_field"(%3121) {"offset" = 1 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterable"} : (!mini.fatptr<"ProductIterable">) -> !mini.fatptr<"IntIterable">
    %3124 = "mini.unwrap"(%3122) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3125 = "mini.unwrap"(%3123) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3126 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i32)>)>, "class_name" = "ProductIterator", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !mini.fatptr<"ProductIterator">
    %3127 = "mini.get_field"(%3121) {"offset" = 0 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterable"} : (!mini.fatptr<"ProductIterable">) -> !mini.fatptr<"IntIterable">
    %3128 = "mini.get_field"(%3121) {"offset" = 1 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterable"} : (!mini.fatptr<"ProductIterable">) -> !mini.fatptr<"IntIterable">
    %3129 = "mini.to_fat_ptr"(%3127) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %3130 = "mini.unwrap"(%3129) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3131 = "mini.to_fat_ptr"(%3128) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %3132 = "mini.unwrap"(%3131) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3133 = "mini.unwrap"(%3126) : (!mini.fatptr<"ProductIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3134 = "mini.parameterization"() {"id_hierarchy" = ["IntIterable"], "name_hierarchy" = ["IntIterable"]} : () -> !llvm.ptr
    %3135 = "mini.parameterizations_array"(%3134, %3134) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%3135, %3133, %3130, %3132) {"offset" = 4 : i32, "vptrs" = [#none, #none], "vtable_size" = 8 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %3136 = "mini.to_fat_ptr"(%3126) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ProductIterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"ProductIterator">) -> !mini.fatptr<"Iterator">
    "mini.return"(%3136) : (!mini.fatptr<"Iterator">) -> ()
  }) {"func_name" = "ProductIterable_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb498(%3137 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3138 : !llvm.ptr):
    %3139 = "mini.invariant"(%3138) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3140 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb499] : () -> ()
  ^bb499:
    %3141 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%3141, %3140) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb500] : () -> ()
  ^bb500:
    %3142 = "llvm.extractvalue"(%3137) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3143 = "llvm.load"(%3140) : (!llvm.ptr) -> i32
    %3144 = "llvm.getelementptr"(%3142, %3143) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<12 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3145 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3146 = "llvm.getelementptr"(%3144, %3145) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3146) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_ProductIterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i32)>]} : () -> ()
  "mini.getter_def"() {"meth_name" = "ProductIterator_getter_first_iterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterator", "parameterization" = "_parameterization_IntIterator"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ProductIterator_setter_first_iterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterator", "parameterization" = "_parameterization_IntIterator"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ProductIterator_field_first_iterator", "getter_name" = "ProductIterator_getter_first_iterator", "setter_name" = "ProductIterator_setter_first_iterator"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ProductIterator_getter_second_iterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterator", "parameterization" = "_parameterization_IntIterator"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ProductIterator_setter_second_iterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterator", "parameterization" = "_parameterization_IntIterator"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ProductIterator_field_second_iterator", "getter_name" = "ProductIterator_getter_second_iterator", "setter_name" = "ProductIterator_setter_second_iterator"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ProductIterator_getter_second_iterable", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterable", "parameterization" = "_parameterization_IntIterable"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ProductIterator_setter_second_iterable", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterable", "parameterization" = "_parameterization_IntIterable"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ProductIterator_field_second_iterable", "getter_name" = "ProductIterator_getter_second_iterable", "setter_name" = "ProductIterator_setter_second_iterable"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ProductIterator_getter_current_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i32)>, "specialized_name" = "union_typ", "parameterization" = "_parameterization_Ptri32_or_Nil"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ProductIterator_setter_current_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i32)>, "specialized_name" = "union_typ", "parameterization" = "_parameterization_Ptri32_or_Nil"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ProductIterator_field_current_first", "getter_name" = "ProductIterator_getter_current_first", "setter_name" = "ProductIterator_setter_current_first"} : () -> ()
  "mini.func"() ({
  ^bb501(%3147 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3148 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3149 : !llvm.ptr, %3150 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3151 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %3152 = "mini.wrap"(%3147) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ProductIterator">
    %3153 = "mini.to_fat_ptr"(%3152) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ProductIterator", "to_typ_name" = "ProductIterator"} : (!mini.fatptr<"ProductIterator">) -> !mini.fatptr<"ProductIterator">
    %3154 = "mini.wrap"(%3150) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %3155 = "mini.to_fat_ptr"(%3154) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %3156 = "mini.wrap"(%3151) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %3157 = "mini.to_fat_ptr"(%3156) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %3158 = "mini.to_fat_ptr"(%3157) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    "mini.set_field"(%3153, %3158) {"offset" = 2 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ProductIterator">, !mini.fatptr<"IntIterable">) -> ()
    %3159 = "mini.unwrap"(%3155) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3160 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %3161 = "mini.method_call"(%3160, %3159) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %3162 = "mini.to_fat_ptr"(%3161) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %3163 = "mini.to_fat_ptr"(%3162) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    "mini.set_field"(%3153, %3163) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ProductIterator">, !mini.fatptr<"IntIterator">) -> ()
    %3164 = "mini.get_field"(%3153) {"offset" = 2 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterable"} : (!mini.fatptr<"ProductIterator">) -> !mini.fatptr<"IntIterable">
    %3165 = "mini.unwrap"(%3164) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3166 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %3167 = "mini.method_call"(%3166, %3165) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %3168 = "mini.to_fat_ptr"(%3167) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %3169 = "mini.to_fat_ptr"(%3168) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    "mini.set_field"(%3153, %3169) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ProductIterator">, !mini.fatptr<"IntIterator">) -> ()
    %3170 = "mini.get_field"(%3153) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterator"} : (!mini.fatptr<"ProductIterator">) -> !mini.fatptr<"IntIterator">
    %3171 = "mini.unwrap"(%3170) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3172 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %3173 = "mini.method_call"(%3172, %3171) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %3174 = builtin.unrealized_conversion_cast %3173 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %3175 = builtin.unrealized_conversion_cast %3174 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
    "mini.set_field"(%3153, %3175) {"offset" = 3 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i32)>} : (!mini.fatptr<"ProductIterator">, !mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
  }) {"func_name" = "ProductIterator_init_first_iterableIntIterable_second_iterableIntIterable", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb502(%3176 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3177 : !llvm.ptr):
    %3178 = "mini.invariant"(%3177) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3179 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb503] : () -> ()
  ^bb504:
    %3180 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
    "llvm.store"(%3180, %3179) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb505] : () -> ()
  ^bb506:
    %3181 = "llvm.getelementptr"(%3177) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3182 = "mini.checkflag"(%3181) {"typ_name" = "IntIterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3183 = "llvm.load"(%3182) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3183) [^bb504, ^bb504] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb503:
    %3184 = "llvm.getelementptr"(%3177) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3185 = "mini.checkflag"(%3184) {"typ_name" = "IntIterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3186 = "llvm.load"(%3185) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3186) [^bb506, ^bb506] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb505:
    %3187 = "llvm.extractvalue"(%3176) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3188 = "llvm.load"(%3179) : (!llvm.ptr) -> i32
    %3189 = "llvm.getelementptr"(%3187, %3188) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3190 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3191 = "llvm.getelementptr"(%3189, %3190) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3191) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterator_B_init_first_iterableIntIterable_second_iterableIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb507(%3192 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3193 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3194 : !llvm.ptr):
    %3195 = "mini.wrap"(%3192) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ProductIterator">
    %3196 = "mini.to_fat_ptr"(%3195) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ProductIterator", "to_typ_name" = "ProductIterator"} : (!mini.fatptr<"ProductIterator">) -> !mini.fatptr<"ProductIterator">
    %3197 = "mini.get_field"(%3196) {"offset" = 3 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i32)>} : (!mini.fatptr<"ProductIterator">) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %3198 = builtin.unrealized_conversion_cast %3197 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
    "mini.while"() ({
      %3199 = "mini.checkflag"(%3198) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i1>
      %3200 = "mini.unwrap"(%3199) : (!mini.ptr<i1>) -> i1
    }, {
      %3201 = "mini.narrow"(%3198) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
      %3202 = "mini.get_field"(%3196) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterator"} : (!mini.fatptr<"ProductIterator">) -> !mini.fatptr<"IntIterator">
      %3203 = "mini.unwrap"(%3202) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %3204 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %3205 = "mini.method_call"(%3204, %3203) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %3206 = builtin.unrealized_conversion_cast %3205 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %3207 = "mini.checkflag"(%3206) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i1>
      %3208 = "mini.unwrap"(%3207) : (!mini.ptr<i1>) -> i1
      %3209 = builtin.unrealized_conversion_cast %3206 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      "mini.if"(%3208) ({
        %3210 = "mini.narrow"(%3209) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
        %3211 = "mini.unwrap"(%3201) : (!mini.ptr<i32>) -> i32
        %3212 = "mini.unwrap"(%3210) : (!mini.ptr<i32>) -> i32
        %3213 = "mini.create_tuple"(%3211, %3212) {"typ" = !llvm.struct<(i32, i32)>} : (i32, i32) -> !mini.tuple<[!mini.ptr<i32>, !mini.ptr<i32>]>
        %3214 = "mini.unionize"(%3213) {"from_typ" = !llvm.struct<(i32, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "tuple_typ", "to_typ_name" = "union_typ"} : (!mini.tuple<[!mini.ptr<i32>, !mini.ptr<i32>]>) -> !mini.union<[!mini.tuple<[!mini.ptr<i32>, !mini.ptr<i32>]>, !mini.nil]>
        "mini.return"(%3214) : (!mini.union<[!mini.tuple<[!mini.ptr<i32>, !mini.ptr<i32>]>, !mini.nil]>) -> ()
        "mini.castassign"(%3209, %3210) ({
          %3215 = "mini.unionize"(%3210) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
        }) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.ptr<i32>) -> ()
      }) : (i1) -> ()
      %3216 = "mini.get_field"(%3196) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterator"} : (!mini.fatptr<"ProductIterator">) -> !mini.fatptr<"IntIterator">
      %3217 = "mini.unwrap"(%3216) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %3218 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %3219 = "mini.method_call"(%3218, %3217) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %3220 = builtin.unrealized_conversion_cast %3219 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %3221 = builtin.unrealized_conversion_cast %3220 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      "mini.set_field"(%3196, %3221) {"offset" = 3 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i32)>} : (!mini.fatptr<"ProductIterator">, !mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
      %3222 = "mini.get_field"(%3196) {"offset" = 2 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterable"} : (!mini.fatptr<"ProductIterator">) -> !mini.fatptr<"IntIterable">
      %3223 = "mini.unwrap"(%3222) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %3224 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %3225 = "mini.method_call"(%3224, %3223) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
      %3226 = "mini.to_fat_ptr"(%3225) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
      %3227 = "mini.to_fat_ptr"(%3226) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
      "mini.set_field"(%3196, %3227) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ProductIterator">, !mini.fatptr<"IntIterator">) -> ()
      %3228 = "mini.get_field"(%3196) {"offset" = 3 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i32)>} : (!mini.fatptr<"ProductIterator">) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      "mini.castassign"(%3198, %3228) ({
        %3229 = builtin.unrealized_conversion_cast %3228 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
    }) : () -> ()
    %3230 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
    %3231 = "mini.unionize"(%3230) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.tuple<[!mini.ptr<i32>, !mini.ptr<i32>]>, !mini.nil]>
    "mini.return"(%3231) : (!mini.union<[!mini.tuple<[!mini.ptr<i32>, !mini.ptr<i32>]>, !mini.nil]>) -> ()
  }) {"func_name" = "ProductIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i64)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb508(%3232 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3233 : !llvm.ptr):
    %3234 = "mini.invariant"(%3233) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3235 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb509] : () -> ()
  ^bb509:
    %3236 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    "llvm.store"(%3236, %3235) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb510] : () -> ()
  ^bb510:
    %3237 = "llvm.extractvalue"(%3232) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3238 = "llvm.load"(%3235) : (!llvm.ptr) -> i32
    %3239 = "llvm.getelementptr"(%3237, %3238) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3240 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3241 = "llvm.getelementptr"(%3239, %3240) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3241) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_Range", "types" = [i32, i32, i32]} : () -> ()
  "mini.getter_def"() {"meth_name" = "Range_getter_start", "types" = [i32, i32, i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Range_setter_start", "types" = [i32, i32, i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Range_field_start", "getter_name" = "Range_getter_start", "setter_name" = "Range_setter_start"} : () -> ()
  "mini.getter_def"() {"meth_name" = "Range_getter_end", "types" = [i32, i32, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Range_setter_end", "types" = [i32, i32, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Range_field_end", "getter_name" = "Range_getter_end", "setter_name" = "Range_setter_end"} : () -> ()
  "mini.getter_def"() {"meth_name" = "Range_getter_step", "types" = [i32, i32, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Range_setter_step", "types" = [i32, i32, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Range_field_step", "getter_name" = "Range_getter_step", "setter_name" = "Range_setter_step"} : () -> ()
  "mini.func"() ({
  ^bb511(%3242 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3243 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3244 : !llvm.ptr, %3245 : i32):
    %3246 = "mini.wrap"(%3242) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Range">
    %3247 = "mini.to_fat_ptr"(%3246) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Range", "to_typ_name" = "Range"} : (!mini.fatptr<"Range">) -> !mini.fatptr<"Range">
    %3248 = "mini.wrap"(%3245) : (i32) -> !mini.ptr<i32>
    %3249 = builtin.unrealized_conversion_cast %3248 : !mini.ptr<i32> to !mini.ptr<i32>
    %3250 = builtin.unrealized_conversion_cast %3249 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%3247, %3250) {"offset" = 1 : i64, "vtable_bytes" = 456 : i32, "original_type" = i32} : (!mini.fatptr<"Range">, !mini.ptr<i32>) -> ()
    %3251 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3252 = builtin.unrealized_conversion_cast %3251 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%3247, %3252) {"offset" = 0 : i64, "vtable_bytes" = 456 : i32, "original_type" = i32} : (!mini.fatptr<"Range">, !mini.ptr<i32>) -> ()
    %3253 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3254 = builtin.unrealized_conversion_cast %3253 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%3247, %3254) {"offset" = 2 : i64, "vtable_bytes" = 456 : i32, "original_type" = i32} : (!mini.fatptr<"Range">, !mini.ptr<i32>) -> ()
  }) {"func_name" = "Range_init_endPtri32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb512(%3255 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3256 : !llvm.ptr):
    %3257 = "mini.invariant"(%3256) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3258 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb513] : () -> ()
  ^bb514:
    %3259 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
    "llvm.store"(%3259, %3258) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb515] : () -> ()
  ^bb513:
    %3260 = "llvm.getelementptr"(%3256) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3261 = "mini.checkflag"(%3260) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3262 = "llvm.load"(%3261) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3262) [^bb514, ^bb514] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb515:
    %3263 = "llvm.extractvalue"(%3255) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3264 = "llvm.load"(%3258) : (!llvm.ptr) -> i32
    %3265 = "llvm.getelementptr"(%3263, %3264) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3266 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3267 = "llvm.getelementptr"(%3265, %3266) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3267) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_init_endPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb516(%3268 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3269 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3270 : !llvm.ptr, %3271 : i32, %3272 : i32):
    %3273 = "mini.wrap"(%3268) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Range">
    %3274 = "mini.to_fat_ptr"(%3273) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Range", "to_typ_name" = "Range"} : (!mini.fatptr<"Range">) -> !mini.fatptr<"Range">
    %3275 = "mini.wrap"(%3271) : (i32) -> !mini.ptr<i32>
    %3276 = builtin.unrealized_conversion_cast %3275 : !mini.ptr<i32> to !mini.ptr<i32>
    %3277 = builtin.unrealized_conversion_cast %3276 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%3274, %3277) {"offset" = 0 : i64, "vtable_bytes" = 456 : i32, "original_type" = i32} : (!mini.fatptr<"Range">, !mini.ptr<i32>) -> ()
    %3278 = "mini.wrap"(%3272) : (i32) -> !mini.ptr<i32>
    %3279 = builtin.unrealized_conversion_cast %3278 : !mini.ptr<i32> to !mini.ptr<i32>
    %3280 = builtin.unrealized_conversion_cast %3279 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%3274, %3280) {"offset" = 1 : i64, "vtable_bytes" = 456 : i32, "original_type" = i32} : (!mini.fatptr<"Range">, !mini.ptr<i32>) -> ()
    %3281 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3282 = builtin.unrealized_conversion_cast %3281 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%3274, %3282) {"offset" = 2 : i64, "vtable_bytes" = 456 : i32, "original_type" = i32} : (!mini.fatptr<"Range">, !mini.ptr<i32>) -> ()
  }) {"func_name" = "Range_init_startPtri32_endPtri32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb517(%3283 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3284 : !llvm.ptr):
    %3285 = "mini.invariant"(%3284) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3286 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb518] : () -> ()
  ^bb519:
    %3287 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%3287, %3286) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb520] : () -> ()
  ^bb521:
    %3288 = "llvm.getelementptr"(%3284) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3289 = "mini.checkflag"(%3288) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3290 = "llvm.load"(%3289) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3290) [^bb519, ^bb519] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb518:
    %3291 = "llvm.getelementptr"(%3284) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3292 = "mini.checkflag"(%3291) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3293 = "llvm.load"(%3292) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3293) [^bb521, ^bb521] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb520:
    %3294 = "llvm.extractvalue"(%3283) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3295 = "llvm.load"(%3286) : (!llvm.ptr) -> i32
    %3296 = "llvm.getelementptr"(%3294, %3295) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3297 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3298 = "llvm.getelementptr"(%3296, %3297) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3298) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_init_startPtri32_endPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb522(%3299 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3300 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3301 : !llvm.ptr, %3302 : i32):
    %3303 = "mini.wrap"(%3299) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Range">
    %3304 = "mini.to_fat_ptr"(%3303) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Range", "to_typ_name" = "Range"} : (!mini.fatptr<"Range">) -> !mini.fatptr<"Range">
    %3305 = "mini.wrap"(%3302) : (i32) -> !mini.ptr<i32>
    %3306 = builtin.unrealized_conversion_cast %3305 : !mini.ptr<i32> to !mini.ptr<i32>
    %3307 = builtin.unrealized_conversion_cast %3306 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%3304, %3307) {"offset" = 2 : i64, "vtable_bytes" = 456 : i32, "original_type" = i32} : (!mini.fatptr<"Range">, !mini.ptr<i32>) -> ()
    %3308 = "mini.to_fat_ptr"(%3304) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Range", "to_typ_name" = "Range"} : (!mini.fatptr<"Range">) -> !mini.fatptr<"Range">
    "mini.return"(%3308) : (!mini.fatptr<"Range">) -> ()
  }) {"func_name" = "Range_step_stepPtri32", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb523(%3309 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3310 : !llvm.ptr):
    %3311 = "mini.invariant"(%3310) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3312 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb524] : () -> ()
  ^bb525:
    %3313 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
    "llvm.store"(%3313, %3312) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb526] : () -> ()
  ^bb524:
    %3314 = "llvm.getelementptr"(%3310) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3315 = "mini.checkflag"(%3314) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3316 = "llvm.load"(%3315) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3316) [^bb525, ^bb525] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb526:
    %3317 = "llvm.extractvalue"(%3309) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3318 = "llvm.load"(%3312) : (!llvm.ptr) -> i32
    %3319 = "llvm.getelementptr"(%3317, %3318) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3320 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3321 = "llvm.getelementptr"(%3319, %3320) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3321) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_step_stepPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb527(%3322 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3323 : !llvm.ptr):
    %3324 = "mini.invariant"(%3323) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3325 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb528] : () -> ()
  ^bb529:
    %3326 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
    "llvm.store"(%3326, %3325) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb530] : () -> ()
  ^bb528:
    %3327 = "llvm.getelementptr"(%3323) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3328 = "mini.checkflag"(%3327) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3329 = "llvm.load"(%3328) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3329) [^bb529, ^bb529] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb530:
    %3330 = "llvm.extractvalue"(%3322) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3331 = "llvm.load"(%3325) : (!llvm.ptr) -> i32
    %3332 = "llvm.getelementptr"(%3330, %3331) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3333 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3334 = "llvm.getelementptr"(%3332, %3333) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3334) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_each_fFunctionPtri32_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb531(%3335 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3336 : !llvm.ptr):
    %3337 = "mini.invariant"(%3336) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3338 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb532] : () -> ()
  ^bb533:
    %3339 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
    "llvm.store"(%3339, %3338) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb534] : () -> ()
  ^bb535:
    %3340 = "llvm.getelementptr"(%3336) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3341 = "mini.checkflag"(%3340) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3342 = "llvm.load"(%3341) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3342) [^bb533, ^bb533] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb532:
    %3343 = "llvm.getelementptr"(%3336) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3344 = "mini.checkflag"(%3343) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3345 = "llvm.load"(%3344) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3345) [^bb535, ^bb535] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb534:
    %3346 = "llvm.extractvalue"(%3335) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3347 = "llvm.load"(%3338) : (!llvm.ptr) -> i32
    %3348 = "llvm.getelementptr"(%3346, %3347) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3349 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3350 = "llvm.getelementptr"(%3348, %3349) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3350) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb536(%3351 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3352 : !llvm.ptr):
    %3353 = "mini.invariant"(%3352) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3354 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb537] : () -> ()
  ^bb538:
    %3355 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
    "llvm.store"(%3355, %3354) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb539] : () -> ()
  ^bb537:
    %3356 = "llvm.getelementptr"(%3352) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3357 = "mini.checkflag"(%3356) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3358 = "llvm.load"(%3357) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3358) [^bb538, ^bb538] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb539:
    %3359 = "llvm.extractvalue"(%3351) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3360 = "llvm.load"(%3354) : (!llvm.ptr) -> i32
    %3361 = "llvm.getelementptr"(%3359, %3360) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3362 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3363 = "llvm.getelementptr"(%3361, %3362) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3363) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_all_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb540(%3364 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3365 : !llvm.ptr):
    %3366 = "mini.invariant"(%3365) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3367 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb541] : () -> ()
  ^bb542:
    %3368 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
    "llvm.store"(%3368, %3367) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb543] : () -> ()
  ^bb541:
    %3369 = "llvm.getelementptr"(%3365) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3370 = "mini.checkflag"(%3369) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3371 = "llvm.load"(%3370) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3371) [^bb542, ^bb542] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb543:
    %3372 = "llvm.extractvalue"(%3364) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3373 = "llvm.load"(%3367) : (!llvm.ptr) -> i32
    %3374 = "llvm.getelementptr"(%3372, %3373) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3375 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3376 = "llvm.getelementptr"(%3374, %3375) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3376) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_any_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb544(%3377 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3378 : !llvm.ptr):
    %3379 = "mini.invariant"(%3378) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3380 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb545] : () -> ()
  ^bb546:
    %3381 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
    "llvm.store"(%3381, %3380) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb547] : () -> ()
  ^bb545:
    %3382 = "llvm.getelementptr"(%3378) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3383 = "mini.checkflag"(%3382) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3384 = "llvm.load"(%3383) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3384) [^bb546, ^bb546] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb547:
    %3385 = "llvm.extractvalue"(%3377) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3386 = "llvm.load"(%3380) : (!llvm.ptr) -> i32
    %3387 = "llvm.getelementptr"(%3385, %3386) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3388 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3389 = "llvm.getelementptr"(%3387, %3388) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3389) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_map_fFunctionPtri32_to_Ptri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb548(%3390 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3391 : !llvm.ptr):
    %3392 = "mini.invariant"(%3391) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3393 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb549] : () -> ()
  ^bb550:
    %3394 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
    "llvm.store"(%3394, %3393) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb551] : () -> ()
  ^bb549:
    %3395 = "llvm.getelementptr"(%3391) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3396 = "mini.checkflag"(%3395) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3397 = "llvm.load"(%3396) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3397) [^bb550, ^bb550] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb551:
    %3398 = "llvm.extractvalue"(%3390) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3399 = "llvm.load"(%3393) : (!llvm.ptr) -> i32
    %3400 = "llvm.getelementptr"(%3398, %3399) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3401 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3402 = "llvm.getelementptr"(%3400, %3401) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3402) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_filter_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb552(%3403 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3404 : !llvm.ptr):
    %3405 = "mini.invariant"(%3404) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3406 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb553] : () -> ()
  ^bb554:
    %3407 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
    "llvm.store"(%3407, %3406) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb555] : () -> ()
  ^bb553:
    %3408 = "llvm.getelementptr"(%3404) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3409 = "mini.checkflag"(%3408) {"typ_name" = "IntIterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3410 = "llvm.load"(%3409) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3410) [^bb554, ^bb554] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb555:
    %3411 = "llvm.extractvalue"(%3403) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3412 = "llvm.load"(%3406) : (!llvm.ptr) -> i32
    %3413 = "llvm.getelementptr"(%3411, %3412) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3414 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3415 = "llvm.getelementptr"(%3413, %3414) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3415) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_chain_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb556(%3416 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3417 : !llvm.ptr):
    %3418 = "mini.invariant"(%3417) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3419 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb557] : () -> ()
  ^bb558:
    %3420 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
    "llvm.store"(%3420, %3419) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb559] : () -> ()
  ^bb557:
    %3421 = "llvm.getelementptr"(%3417) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3422 = "mini.checkflag"(%3421) {"typ_name" = "IntIterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3423 = "llvm.load"(%3422) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3423) [^bb558, ^bb558] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb559:
    %3424 = "llvm.extractvalue"(%3416) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3425 = "llvm.load"(%3419) : (!llvm.ptr) -> i32
    %3426 = "llvm.getelementptr"(%3424, %3425) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3427 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3428 = "llvm.getelementptr"(%3426, %3427) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3428) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_interleave_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb560(%3429 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3430 : !llvm.ptr):
    %3431 = "mini.invariant"(%3430) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3432 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb561] : () -> ()
  ^bb562:
    %3433 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
    "llvm.store"(%3433, %3432) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb563] : () -> ()
  ^bb561:
    %3434 = "llvm.getelementptr"(%3430) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3435 = "mini.checkflag"(%3434) {"typ_name" = "IntIterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3436 = "llvm.load"(%3435) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3436) [^bb562, ^bb562] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb563:
    %3437 = "llvm.extractvalue"(%3429) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3438 = "llvm.load"(%3432) : (!llvm.ptr) -> i32
    %3439 = "llvm.getelementptr"(%3437, %3438) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3440 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3441 = "llvm.getelementptr"(%3439, %3440) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3441) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_zip_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb564(%3442 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3443 : !llvm.ptr):
    %3444 = "mini.invariant"(%3443) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3445 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb565] : () -> ()
  ^bb566:
    %3446 = "llvm.mlir.constant"() <{"value" = 29 : i32}> : () -> i32
    "llvm.store"(%3446, %3445) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb567] : () -> ()
  ^bb565:
    %3447 = "llvm.getelementptr"(%3443) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3448 = "mini.checkflag"(%3447) {"typ_name" = "IntIterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3449 = "llvm.load"(%3448) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3449) [^bb566, ^bb566] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb567:
    %3450 = "llvm.extractvalue"(%3442) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3451 = "llvm.load"(%3445) : (!llvm.ptr) -> i32
    %3452 = "llvm.getelementptr"(%3450, %3451) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3453 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3454 = "llvm.getelementptr"(%3452, %3453) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3454) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_product_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb568(%3455 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3456 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3457 : !llvm.ptr):
    %3458 = "mini.wrap"(%3455) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Range">
    %3459 = "mini.to_fat_ptr"(%3458) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Range", "to_typ_name" = "Range"} : (!mini.fatptr<"Range">) -> !mini.fatptr<"Range">
    %3460 = "mini.get_field"(%3459) {"offset" = 0 : i64, "vtable_bytes" = 456 : i32, "original_type" = i32} : (!mini.fatptr<"Range">) -> !mini.ptr<i32>
    %3461 = "mini.get_field"(%3459) {"offset" = 1 : i64, "vtable_bytes" = 456 : i32, "original_type" = i32} : (!mini.fatptr<"Range">) -> !mini.ptr<i32>
    %3462 = "mini.get_field"(%3459) {"offset" = 2 : i64, "vtable_bytes" = 456 : i32, "original_type" = i32} : (!mini.fatptr<"Range">) -> !mini.ptr<i32>
    %3463 = "mini.unwrap"(%3460) : (!mini.ptr<i32>) -> i32
    %3464 = "mini.unwrap"(%3461) : (!mini.ptr<i32>) -> i32
    %3465 = "mini.unwrap"(%3462) : (!mini.ptr<i32>) -> i32
    %3466 = "mini.new"() {"typ" = !llvm.struct<(i32, i32, i32)>, "class_name" = "RangeIterator", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"RangeIterator">
    %3467 = "mini.get_field"(%3459) {"offset" = 0 : i64, "vtable_bytes" = 456 : i32, "original_type" = i32} : (!mini.fatptr<"Range">) -> !mini.ptr<i32>
    %3468 = "mini.get_field"(%3459) {"offset" = 1 : i64, "vtable_bytes" = 456 : i32, "original_type" = i32} : (!mini.fatptr<"Range">) -> !mini.ptr<i32>
    %3469 = "mini.get_field"(%3459) {"offset" = 2 : i64, "vtable_bytes" = 456 : i32, "original_type" = i32} : (!mini.fatptr<"Range">) -> !mini.ptr<i32>
    %3470 = builtin.unrealized_conversion_cast %3467 : !mini.ptr<i32> to !mini.ptr<i32>
    %3471 = "mini.unwrap"(%3470) : (!mini.ptr<i32>) -> i32
    %3472 = builtin.unrealized_conversion_cast %3468 : !mini.ptr<i32> to !mini.ptr<i32>
    %3473 = "mini.unwrap"(%3472) : (!mini.ptr<i32>) -> i32
    %3474 = builtin.unrealized_conversion_cast %3469 : !mini.ptr<i32> to !mini.ptr<i32>
    %3475 = "mini.unwrap"(%3474) : (!mini.ptr<i32>) -> i32
    %3476 = "mini.unwrap"(%3466) : (!mini.fatptr<"RangeIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3477 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %3478 = "mini.parameterizations_array"(%3477, %3477, %3477) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%3478, %3476, %3471, %3473, %3475) {"offset" = 3 : i32, "vptrs" = ["i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 9 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32, i32) -> ()
    %3479 = "mini.to_fat_ptr"(%3466) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "RangeIterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"RangeIterator">) -> !mini.fatptr<"Iterator">
    "mini.return"(%3479) : (!mini.fatptr<"Iterator">) -> ()
  }) {"func_name" = "Range_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb569(%3480 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3481 : !llvm.ptr):
    %3482 = "mini.invariant"(%3481) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3483 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb570] : () -> ()
  ^bb570:
    %3484 = "llvm.mlir.constant"() <{"value" = 30 : i32}> : () -> i32
    "llvm.store"(%3484, %3483) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb571] : () -> ()
  ^bb571:
    %3485 = "llvm.extractvalue"(%3480) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3486 = "llvm.load"(%3483) : (!llvm.ptr) -> i32
    %3487 = "llvm.getelementptr"(%3485, %3486) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3488 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3489 = "llvm.getelementptr"(%3487, %3488) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3489) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_RangeIterator", "types" = [i32, i32, i32]} : () -> ()
  "mini.getter_def"() {"meth_name" = "RangeIterator_getter_counter", "types" = [i32, i32, i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "RangeIterator_setter_counter", "types" = [i32, i32, i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "RangeIterator_field_counter", "getter_name" = "RangeIterator_getter_counter", "setter_name" = "RangeIterator_setter_counter"} : () -> ()
  "mini.getter_def"() {"meth_name" = "RangeIterator_getter_end", "types" = [i32, i32, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "RangeIterator_setter_end", "types" = [i32, i32, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "RangeIterator_field_end", "getter_name" = "RangeIterator_getter_end", "setter_name" = "RangeIterator_setter_end"} : () -> ()
  "mini.getter_def"() {"meth_name" = "RangeIterator_getter_step", "types" = [i32, i32, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "RangeIterator_setter_step", "types" = [i32, i32, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "RangeIterator_field_step", "getter_name" = "RangeIterator_getter_step", "setter_name" = "RangeIterator_setter_step"} : () -> ()
  "mini.func"() ({
  ^bb572(%3490 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3491 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3492 : !llvm.ptr, %3493 : i32, %3494 : i32, %3495 : i32):
    %3496 = "mini.wrap"(%3490) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"RangeIterator">
    %3497 = "mini.to_fat_ptr"(%3496) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "RangeIterator", "to_typ_name" = "RangeIterator"} : (!mini.fatptr<"RangeIterator">) -> !mini.fatptr<"RangeIterator">
    %3498 = "mini.wrap"(%3493) : (i32) -> !mini.ptr<i32>
    %3499 = builtin.unrealized_conversion_cast %3498 : !mini.ptr<i32> to !mini.ptr<i32>
    %3500 = builtin.unrealized_conversion_cast %3499 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%3497, %3500) {"offset" = 0 : i64, "vtable_bytes" = 72 : i32, "original_type" = i32} : (!mini.fatptr<"RangeIterator">, !mini.ptr<i32>) -> ()
    %3501 = "mini.wrap"(%3494) : (i32) -> !mini.ptr<i32>
    %3502 = builtin.unrealized_conversion_cast %3501 : !mini.ptr<i32> to !mini.ptr<i32>
    %3503 = builtin.unrealized_conversion_cast %3502 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%3497, %3503) {"offset" = 1 : i64, "vtable_bytes" = 72 : i32, "original_type" = i32} : (!mini.fatptr<"RangeIterator">, !mini.ptr<i32>) -> ()
    %3504 = "mini.wrap"(%3495) : (i32) -> !mini.ptr<i32>
    %3505 = builtin.unrealized_conversion_cast %3504 : !mini.ptr<i32> to !mini.ptr<i32>
    %3506 = builtin.unrealized_conversion_cast %3505 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%3497, %3506) {"offset" = 2 : i64, "vtable_bytes" = 72 : i32, "original_type" = i32} : (!mini.fatptr<"RangeIterator">, !mini.ptr<i32>) -> ()
  }) {"func_name" = "RangeIterator_init_counterPtri32_endPtri32_stepPtri32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb573(%3507 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3508 : !llvm.ptr):
    %3509 = "mini.invariant"(%3508) {"num_bytes" = 24 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3510 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb574] : () -> ()
  ^bb575:
    %3511 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%3511, %3510) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb576] : () -> ()
  ^bb577:
    %3512 = "llvm.getelementptr"(%3508) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3513 = "mini.checkflag"(%3512) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3514 = "llvm.load"(%3513) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3514) [^bb575, ^bb575] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb578:
    %3515 = "llvm.getelementptr"(%3508) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3516 = "mini.checkflag"(%3515) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3517 = "llvm.load"(%3516) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3517) [^bb577, ^bb577] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb574:
    %3518 = "llvm.getelementptr"(%3508) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3519 = "mini.checkflag"(%3518) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3520 = "llvm.load"(%3519) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3520) [^bb578, ^bb578] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb576:
    %3521 = "llvm.extractvalue"(%3507) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3522 = "llvm.load"(%3510) : (!llvm.ptr) -> i32
    %3523 = "llvm.getelementptr"(%3521, %3522) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<9 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3524 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3525 = "llvm.getelementptr"(%3523, %3524) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3525) : (!llvm.ptr) -> ()
  }) {"func_name" = "RangeIterator_B_init_counterPtri32_endPtri32_stepPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb579(%3526 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3527 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3528 : !llvm.ptr):
    %3529 = "mini.wrap"(%3526) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"RangeIterator">
    %3530 = "mini.to_fat_ptr"(%3529) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "RangeIterator", "to_typ_name" = "RangeIterator"} : (!mini.fatptr<"RangeIterator">) -> !mini.fatptr<"RangeIterator">
    %3531 = "mini.get_field"(%3530) {"offset" = 0 : i64, "vtable_bytes" = 72 : i32, "original_type" = i32} : (!mini.fatptr<"RangeIterator">) -> !mini.ptr<i32>
    %3532 = "mini.get_field"(%3530) {"offset" = 1 : i64, "vtable_bytes" = 72 : i32, "original_type" = i32} : (!mini.fatptr<"RangeIterator">) -> !mini.ptr<i32>
    %3533 = "mini.unwrap"(%3531) : (!mini.ptr<i32>) -> i32
    %3534 = "mini.unwrap"(%3532) : (!mini.ptr<i32>) -> i32
    %3535 = "mini.comparison"(%3533, %3534) {"op" = "GT"} : (i32, i32) -> i1
    %3536 = "mini.wrap"(%3535) : (i1) -> !mini.ptr<i32>
    %3537 = "mini.unwrap"(%3536) : (!mini.ptr<i32>) -> i1
    "mini.if"(%3537) ({
      %3538 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
      %3539 = "mini.unionize"(%3538) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      "mini.return"(%3539) : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
    }) : (i1) -> ()
    %3540 = "mini.get_field"(%3530) {"offset" = 0 : i64, "vtable_bytes" = 72 : i32, "original_type" = i32} : (!mini.fatptr<"RangeIterator">) -> !mini.ptr<i32>
    %3541 = "mini.get_field"(%3530) {"offset" = 2 : i64, "vtable_bytes" = 72 : i32, "original_type" = i32} : (!mini.fatptr<"RangeIterator">) -> !mini.ptr<i32>
    %3542 = "mini.unwrap"(%3540) : (!mini.ptr<i32>) -> i32
    %3543 = "mini.unwrap"(%3541) : (!mini.ptr<i32>) -> i32
    %3544 = "mini.arithmetic"(%3542, %3543) {"op" = "ADD"} : (i32, i32) -> i32
    %3545 = "mini.wrap"(%3544) : (i32) -> !mini.ptr<i32>
    %3546 = builtin.unrealized_conversion_cast %3545 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%3530, %3546) {"offset" = 0 : i64, "vtable_bytes" = 72 : i32, "original_type" = i32} : (!mini.fatptr<"RangeIterator">, !mini.ptr<i32>) -> ()
    %3547 = "mini.get_field"(%3530) {"offset" = 0 : i64, "vtable_bytes" = 72 : i32, "original_type" = i32} : (!mini.fatptr<"RangeIterator">) -> !mini.ptr<i32>
    %3548 = "mini.get_field"(%3530) {"offset" = 2 : i64, "vtable_bytes" = 72 : i32, "original_type" = i32} : (!mini.fatptr<"RangeIterator">) -> !mini.ptr<i32>
    %3549 = "mini.unwrap"(%3547) : (!mini.ptr<i32>) -> i32
    %3550 = "mini.unwrap"(%3548) : (!mini.ptr<i32>) -> i32
    %3551 = "mini.arithmetic"(%3549, %3550) {"op" = "SUB"} : (i32, i32) -> i32
    %3552 = "mini.wrap"(%3551) : (i32) -> !mini.ptr<i32>
    %3553 = "mini.unionize"(%3552) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    "mini.return"(%3553) : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
  }) {"func_name" = "RangeIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb580(%3554 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3555 : !llvm.ptr):
    %3556 = "mini.invariant"(%3555) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3557 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb581] : () -> ()
  ^bb581:
    %3558 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
    "llvm.store"(%3558, %3557) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb582] : () -> ()
  ^bb582:
    %3559 = "llvm.extractvalue"(%3554) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3560 = "llvm.load"(%3557) : (!llvm.ptr) -> i32
    %3561 = "llvm.getelementptr"(%3559, %3560) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<9 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3562 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3563 = "llvm.getelementptr"(%3561, %3562) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3563) : (!llvm.ptr) -> ()
  }) {"func_name" = "RangeIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_OutOfBoundsDetails", "types" = [i32, i32]} : () -> ()
  "mini.getter_def"() {"meth_name" = "OutOfBoundsDetails_getter_bounds", "types" = [i32, i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "OutOfBoundsDetails_setter_bounds", "types" = [i32, i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "OutOfBoundsDetails_field_bounds", "getter_name" = "OutOfBoundsDetails_getter_bounds", "setter_name" = "OutOfBoundsDetails_setter_bounds"} : () -> ()
  "mini.getter_def"() {"meth_name" = "OutOfBoundsDetails_getter_index", "types" = [i32, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "OutOfBoundsDetails_setter_index", "types" = [i32, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "OutOfBoundsDetails_field_index", "getter_name" = "OutOfBoundsDetails_getter_index", "setter_name" = "OutOfBoundsDetails_setter_index"} : () -> ()
  "mini.func"() ({
  ^bb583(%3564 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3565 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3566 : !llvm.ptr, %3567 : i32, %3568 : i32):
    %3569 = "mini.wrap"(%3564) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"OutOfBoundsDetails">
    %3570 = "mini.to_fat_ptr"(%3569) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "OutOfBoundsDetails", "to_typ_name" = "OutOfBoundsDetails"} : (!mini.fatptr<"OutOfBoundsDetails">) -> !mini.fatptr<"OutOfBoundsDetails">
    %3571 = "mini.wrap"(%3567) : (i32) -> !mini.ptr<i32>
    %3572 = builtin.unrealized_conversion_cast %3571 : !mini.ptr<i32> to !mini.ptr<i32>
    %3573 = builtin.unrealized_conversion_cast %3572 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%3570, %3573) {"offset" = 0 : i64, "vtable_bytes" = 48 : i32, "original_type" = i32} : (!mini.fatptr<"OutOfBoundsDetails">, !mini.ptr<i32>) -> ()
    %3574 = "mini.wrap"(%3568) : (i32) -> !mini.ptr<i32>
    %3575 = builtin.unrealized_conversion_cast %3574 : !mini.ptr<i32> to !mini.ptr<i32>
    %3576 = builtin.unrealized_conversion_cast %3575 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%3570, %3576) {"offset" = 1 : i64, "vtable_bytes" = 48 : i32, "original_type" = i32} : (!mini.fatptr<"OutOfBoundsDetails">, !mini.ptr<i32>) -> ()
  }) {"func_name" = "OutOfBoundsDetails_init_boundsPtri32_indexPtri32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb584(%3577 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3578 : !llvm.ptr):
    %3579 = "mini.invariant"(%3578) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3580 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb585] : () -> ()
  ^bb586:
    %3581 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
    "llvm.store"(%3581, %3580) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb587] : () -> ()
  ^bb588:
    %3582 = "llvm.getelementptr"(%3578) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3583 = "mini.checkflag"(%3582) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3584 = "llvm.load"(%3583) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3584) [^bb586, ^bb586] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb585:
    %3585 = "llvm.getelementptr"(%3578) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3586 = "mini.checkflag"(%3585) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3587 = "llvm.load"(%3586) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3587) [^bb588, ^bb588] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb587:
    %3588 = "llvm.extractvalue"(%3577) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3589 = "llvm.load"(%3580) : (!llvm.ptr) -> i32
    %3590 = "llvm.getelementptr"(%3588, %3589) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<6 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3591 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3592 = "llvm.getelementptr"(%3590, %3591) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3592) : (!llvm.ptr) -> ()
  }) {"func_name" = "OutOfBoundsDetails_B_init_boundsPtri32_indexPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb589(%3593 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3594 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3595 : !llvm.ptr):
    %3596 = "mini.wrap"(%3593) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"OutOfBoundsDetails">
    %3597 = "mini.to_fat_ptr"(%3596) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "OutOfBoundsDetails", "to_typ_name" = "OutOfBoundsDetails"} : (!mini.fatptr<"OutOfBoundsDetails">) -> !mini.fatptr<"OutOfBoundsDetails">
    %3598 = "mini.literal"() {"value" = 45 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3599 = "mini.create_buffer"(%3598) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %3600 = builtin.unrealized_conversion_cast %3599 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %3601 = "mini.refer"(%3600) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %3602 = "mini.literal"() {"typ" = !llvm.array<44 x i8>, "value" = "The size of the collection being indexed was"} : () -> !llvm.ptr
    %3603 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%3601, %3603, %3602) {"typ" = !llvm.array<44 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %3604 = "mini.literal"() {"value" = 44 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3605 = "mini.literal"() {"value" = 45 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3606 = "mini.unwrap"(%3601) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %3607 = "mini.unwrap"(%3604) : (!mini.ptr<i32>) -> i32
    %3608 = "mini.unwrap"(%3605) : (!mini.ptr<i32>) -> i32
    %3609 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %3610 = "mini.literal"() {"value" = 44 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3611 = "mini.literal"() {"value" = 45 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3612 = builtin.unrealized_conversion_cast %3601 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %3613 = "mini.unwrap"(%3612) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %3614 = builtin.unrealized_conversion_cast %3610 : !mini.ptr<i32> to !mini.ptr<i32>
    %3615 = "mini.unwrap"(%3614) : (!mini.ptr<i32>) -> i32
    %3616 = builtin.unrealized_conversion_cast %3611 : !mini.ptr<i32> to !mini.ptr<i32>
    %3617 = "mini.unwrap"(%3616) : (!mini.ptr<i32>) -> i32
    %3618 = "mini.unwrap"(%3609) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3619 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %3620 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %3621 = "mini.parameterizations_array"(%3619, %3620, %3620) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%3621, %3618, %3613, %3615, %3617) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %3622 = builtin.unrealized_conversion_cast %3609 : !mini.fatptr<"String"> to !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %3623 = "mini.unwrap"(%3622) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %3624 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %3625 = "mini.parameterizations_array"(%3624) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%3625, %3623) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %3626 = "mini.get_field"(%3597) {"offset" = 0 : i64, "vtable_bytes" = 48 : i32, "original_type" = i32} : (!mini.fatptr<"OutOfBoundsDetails">) -> !mini.ptr<i32>
    %3627 = "mini.unionize"(%3626) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %3628 = "mini.unwrap"(%3627) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %3629 = "mini.parameterizations_array"(%3620) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%3629, %3628) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %3630 = "mini.literal"() {"value" = 26 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3631 = "mini.create_buffer"(%3630) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %3632 = builtin.unrealized_conversion_cast %3631 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %3633 = "mini.refer"(%3632) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %3634 = "mini.literal"() {"typ" = !llvm.array<25 x i8>, "value" = "The indexing argument was"} : () -> !llvm.ptr
    %3635 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%3633, %3635, %3634) {"typ" = !llvm.array<25 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %3636 = "mini.literal"() {"value" = 25 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3637 = "mini.literal"() {"value" = 26 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3638 = "mini.unwrap"(%3633) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %3639 = "mini.unwrap"(%3636) : (!mini.ptr<i32>) -> i32
    %3640 = "mini.unwrap"(%3637) : (!mini.ptr<i32>) -> i32
    %3641 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %3642 = "mini.literal"() {"value" = 25 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3643 = "mini.literal"() {"value" = 26 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3644 = builtin.unrealized_conversion_cast %3633 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %3645 = "mini.unwrap"(%3644) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %3646 = builtin.unrealized_conversion_cast %3642 : !mini.ptr<i32> to !mini.ptr<i32>
    %3647 = "mini.unwrap"(%3646) : (!mini.ptr<i32>) -> i32
    %3648 = builtin.unrealized_conversion_cast %3643 : !mini.ptr<i32> to !mini.ptr<i32>
    %3649 = "mini.unwrap"(%3648) : (!mini.ptr<i32>) -> i32
    %3650 = "mini.unwrap"(%3641) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3651 = "mini.parameterizations_array"(%3619, %3620, %3620) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%3651, %3650, %3645, %3647, %3649) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %3652 = builtin.unrealized_conversion_cast %3641 : !mini.fatptr<"String"> to !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %3653 = "mini.unwrap"(%3652) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %3654 = "mini.parameterizations_array"(%3624) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%3654, %3653) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %3655 = "mini.get_field"(%3597) {"offset" = 1 : i64, "vtable_bytes" = 48 : i32, "original_type" = i32} : (!mini.fatptr<"OutOfBoundsDetails">) -> !mini.ptr<i32>
    %3656 = "mini.unionize"(%3655) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %3657 = "mini.unwrap"(%3656) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %3658 = "mini.parameterizations_array"(%3620) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%3658, %3657) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
  }) {"func_name" = "OutOfBoundsDetails_report_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb590(%3659 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3660 : !llvm.ptr):
    %3661 = "mini.invariant"(%3660) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3662 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb591] : () -> ()
  ^bb591:
    %3663 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%3663, %3662) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb592] : () -> ()
  ^bb592:
    %3664 = "llvm.extractvalue"(%3659) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3665 = "llvm.load"(%3662) : (!llvm.ptr) -> i32
    %3666 = "llvm.getelementptr"(%3664, %3665) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<6 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3667 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3668 = "llvm.getelementptr"(%3666, %3667) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3668) : (!llvm.ptr) -> ()
  }) {"func_name" = "OutOfBoundsDetails_B_report_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_OutOfBounds", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
  "mini.getter_def"() {"meth_name" = "OutOfBounds_getter_details", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "union_typ", "parameterization" = "_parameterization_OutOfBoundsDetails_or_Nil"} : () -> ()
  "mini.setter_def"() {"meth_name" = "OutOfBounds_setter_details", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "union_typ", "parameterization" = "_parameterization_OutOfBoundsDetails_or_Nil"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "OutOfBounds_field_details", "getter_name" = "OutOfBounds_getter_details", "setter_name" = "OutOfBounds_setter_details"} : () -> ()
  "mini.getter_def"() {"meth_name" = "OutOfBounds_getter_line_number", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "OutOfBounds_setter_line_number", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "OutOfBounds_field_line_number", "getter_name" = "OutOfBounds_getter_line_number", "setter_name" = "OutOfBounds_setter_line_number"} : () -> ()
  "mini.getter_def"() {"meth_name" = "OutOfBounds_getter_file_name", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
  "mini.setter_def"() {"meth_name" = "OutOfBounds_setter_file_name", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "OutOfBounds_field_file_name", "getter_name" = "OutOfBounds_getter_file_name", "setter_name" = "OutOfBounds_setter_file_name"} : () -> ()
  "mini.getter_def"() {"meth_name" = "OutOfBounds_getter_message", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
  "mini.setter_def"() {"meth_name" = "OutOfBounds_setter_message", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "OutOfBounds_field_message", "getter_name" = "OutOfBounds_getter_message", "setter_name" = "OutOfBounds_setter_message"} : () -> ()
  "mini.func"() ({
  ^bb593(%3669 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3670 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3671 : !llvm.ptr, %3672 : i32, %3673 : i32):
    %3674 = "mini.wrap"(%3669) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"OutOfBounds">
    %3675 = "mini.to_fat_ptr"(%3674) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "OutOfBounds", "to_typ_name" = "OutOfBounds"} : (!mini.fatptr<"OutOfBounds">) -> !mini.fatptr<"OutOfBounds">
    %3676 = "mini.wrap"(%3672) : (i32) -> !mini.ptr<i32>
    %3677 = builtin.unrealized_conversion_cast %3676 : !mini.ptr<i32> to !mini.ptr<i32>
    %3678 = "mini.wrap"(%3673) : (i32) -> !mini.ptr<i32>
    %3679 = builtin.unrealized_conversion_cast %3678 : !mini.ptr<i32> to !mini.ptr<i32>
    %3680 = "mini.unwrap"(%3677) : (!mini.ptr<i32>) -> i32
    %3681 = "mini.unwrap"(%3679) : (!mini.ptr<i32>) -> i32
    %3682 = "mini.new"() {"typ" = !llvm.struct<(i32, i32)>, "class_name" = "OutOfBoundsDetails", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !mini.fatptr<"OutOfBoundsDetails">
    %3683 = builtin.unrealized_conversion_cast %3677 : !mini.ptr<i32> to !mini.ptr<i32>
    %3684 = "mini.unwrap"(%3683) : (!mini.ptr<i32>) -> i32
    %3685 = builtin.unrealized_conversion_cast %3679 : !mini.ptr<i32> to !mini.ptr<i32>
    %3686 = "mini.unwrap"(%3685) : (!mini.ptr<i32>) -> i32
    %3687 = "mini.unwrap"(%3682) : (!mini.fatptr<"OutOfBoundsDetails">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3688 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %3689 = "mini.parameterizations_array"(%3688, %3688) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%3689, %3687, %3684, %3686) {"offset" = 2 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 6 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32) -> ()
    %3690 = builtin.unrealized_conversion_cast %3682 : !mini.fatptr<"OutOfBoundsDetails"> to !mini.union<[!mini.fatptr<"OutOfBoundsDetails">, !mini.nil]>
    "mini.set_field"(%3675, %3690) {"offset" = 0 : i64, "vtable_bytes" = 232 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.fatptr<"OutOfBounds">, !mini.union<[!mini.fatptr<"OutOfBoundsDetails">, !mini.nil]>) -> ()
    %3691 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3692 = builtin.unrealized_conversion_cast %3691 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%3675, %3692) {"offset" = 1 : i64, "vtable_bytes" = 232 : i32, "original_type" = i32} : (!mini.fatptr<"OutOfBounds">, !mini.ptr<i32>) -> ()
    %3693 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3694 = "mini.create_buffer"(%3693) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %3695 = builtin.unrealized_conversion_cast %3694 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %3696 = "mini.refer"(%3695) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %3697 = "mini.literal"() {"typ" = !llvm.array<0 x i8>, "value" = ""} : () -> !llvm.ptr
    %3698 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%3696, %3698, %3697) {"typ" = !llvm.array<0 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %3699 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3700 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3701 = "mini.unwrap"(%3696) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %3702 = "mini.unwrap"(%3699) : (!mini.ptr<i32>) -> i32
    %3703 = "mini.unwrap"(%3700) : (!mini.ptr<i32>) -> i32
    %3704 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %3705 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3706 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3707 = builtin.unrealized_conversion_cast %3696 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %3708 = "mini.unwrap"(%3707) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %3709 = builtin.unrealized_conversion_cast %3705 : !mini.ptr<i32> to !mini.ptr<i32>
    %3710 = "mini.unwrap"(%3709) : (!mini.ptr<i32>) -> i32
    %3711 = builtin.unrealized_conversion_cast %3706 : !mini.ptr<i32> to !mini.ptr<i32>
    %3712 = "mini.unwrap"(%3711) : (!mini.ptr<i32>) -> i32
    %3713 = "mini.unwrap"(%3704) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3714 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %3715 = "mini.parameterizations_array"(%3714, %3688, %3688) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%3715, %3713, %3708, %3710, %3712) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %3716 = "mini.to_fat_ptr"(%3704) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.set_field"(%3675, %3716) {"offset" = 2 : i64, "vtable_bytes" = 232 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"OutOfBounds">, !mini.fatptr<"String">) -> ()
    %3717 = "mini.literal"() {"value" = 66 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3718 = "mini.create_buffer"(%3717) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %3719 = builtin.unrealized_conversion_cast %3718 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %3720 = "mini.refer"(%3719) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %3721 = "mini.literal"() {"typ" = !llvm.array<65 x i8>, "value" = "An out-of-bounds error occurred while indexing into a collection."} : () -> !llvm.ptr
    %3722 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%3720, %3722, %3721) {"typ" = !llvm.array<65 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %3723 = "mini.literal"() {"value" = 65 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3724 = "mini.literal"() {"value" = 66 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3725 = "mini.unwrap"(%3720) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %3726 = "mini.unwrap"(%3723) : (!mini.ptr<i32>) -> i32
    %3727 = "mini.unwrap"(%3724) : (!mini.ptr<i32>) -> i32
    %3728 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %3729 = "mini.literal"() {"value" = 65 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3730 = "mini.literal"() {"value" = 66 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3731 = builtin.unrealized_conversion_cast %3720 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %3732 = "mini.unwrap"(%3731) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %3733 = builtin.unrealized_conversion_cast %3729 : !mini.ptr<i32> to !mini.ptr<i32>
    %3734 = "mini.unwrap"(%3733) : (!mini.ptr<i32>) -> i32
    %3735 = builtin.unrealized_conversion_cast %3730 : !mini.ptr<i32> to !mini.ptr<i32>
    %3736 = "mini.unwrap"(%3735) : (!mini.ptr<i32>) -> i32
    %3737 = "mini.unwrap"(%3728) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3738 = "mini.parameterizations_array"(%3714, %3688, %3688) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%3738, %3737, %3732, %3734, %3736) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %3739 = "mini.to_fat_ptr"(%3728) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.set_field"(%3675, %3739) {"offset" = 3 : i64, "vtable_bytes" = 232 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"OutOfBounds">, !mini.fatptr<"String">) -> ()
  }) {"func_name" = "OutOfBounds_init_boundsPtri32_indexPtri32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb594(%3740 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3741 : !llvm.ptr):
    %3742 = "mini.invariant"(%3741) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3743 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb595] : () -> ()
  ^bb596:
    %3744 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    "llvm.store"(%3744, %3743) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb597] : () -> ()
  ^bb598:
    %3745 = "llvm.getelementptr"(%3741) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3746 = "mini.checkflag"(%3745) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3747 = "llvm.load"(%3746) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3747) [^bb596, ^bb596] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb595:
    %3748 = "llvm.getelementptr"(%3741) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3749 = "mini.checkflag"(%3748) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3750 = "llvm.load"(%3749) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3750) [^bb598, ^bb598] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb597:
    %3751 = "llvm.extractvalue"(%3740) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3752 = "llvm.load"(%3743) : (!llvm.ptr) -> i32
    %3753 = "llvm.getelementptr"(%3751, %3752) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<29 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3754 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3755 = "llvm.getelementptr"(%3753, %3754) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3755) : (!llvm.ptr) -> ()
  }) {"func_name" = "OutOfBounds_B_init_boundsPtri32_indexPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb599(%3756 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3757 : !llvm.ptr):
    %3758 = "mini.invariant"(%3757) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3759 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb600] : () -> ()
  ^bb601:
    %3760 = "llvm.mlir.constant"() <{"value" = 11 : i32}> : () -> i32
    "llvm.store"(%3760, %3759) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb602] : () -> ()
  ^bb600:
    %3761 = "llvm.getelementptr"(%3757) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3762 = "mini.checkflag"(%3761) {"typ_name" = "String"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3763 = "llvm.load"(%3762) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3763) [^bb601, ^bb601] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb602:
    %3764 = "llvm.extractvalue"(%3756) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3765 = "llvm.load"(%3759) : (!llvm.ptr) -> i32
    %3766 = "llvm.getelementptr"(%3764, %3765) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<29 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3767 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3768 = "llvm.getelementptr"(%3766, %3767) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3768) : (!llvm.ptr) -> ()
  }) {"func_name" = "OutOfBounds_B_init_messageString", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb603(%3769 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3770 : !llvm.ptr):
    %3771 = "mini.invariant"(%3770) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3772 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb604] : () -> ()
  ^bb604:
    %3773 = "llvm.mlir.constant"() <{"value" = 12 : i32}> : () -> i32
    "llvm.store"(%3773, %3772) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb605] : () -> ()
  ^bb605:
    %3774 = "llvm.extractvalue"(%3769) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3775 = "llvm.load"(%3772) : (!llvm.ptr) -> i32
    %3776 = "llvm.getelementptr"(%3774, %3775) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<29 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3777 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3778 = "llvm.getelementptr"(%3776, %3777) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3778) : (!llvm.ptr) -> ()
  }) {"func_name" = "OutOfBounds_B_init_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb606(%3779 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3780 : !llvm.ptr):
    %3781 = "mini.invariant"(%3780) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3782 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb607] : () -> ()
  ^bb608:
    %3783 = "llvm.mlir.constant"() <{"value" = 13 : i32}> : () -> i32
    "llvm.store"(%3783, %3782) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb609] : () -> ()
  ^bb610:
    %3784 = "llvm.getelementptr"(%3780) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3785 = "mini.checkflag"(%3784) {"typ_name" = "String"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3786 = "llvm.load"(%3785) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3786) [^bb608, ^bb608] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb607:
    %3787 = "llvm.getelementptr"(%3780) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3788 = "mini.checkflag"(%3787) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3789 = "llvm.load"(%3788) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3789) [^bb610, ^bb610] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb609:
    %3790 = "llvm.extractvalue"(%3779) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3791 = "llvm.load"(%3782) : (!llvm.ptr) -> i32
    %3792 = "llvm.getelementptr"(%3790, %3791) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<29 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3793 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3794 = "llvm.getelementptr"(%3792, %3793) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3794) : (!llvm.ptr) -> ()
  }) {"func_name" = "OutOfBounds_B_set_info_line_numberPtri32_file_nameString", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb611(%3795 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3796 : !llvm.ptr):
    %3797 = "mini.invariant"(%3796) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3798 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb612] : () -> ()
  ^bb612:
    %3799 = "llvm.mlir.constant"() <{"value" = 14 : i32}> : () -> i32
    "llvm.store"(%3799, %3798) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb613] : () -> ()
  ^bb613:
    %3800 = "llvm.extractvalue"(%3795) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3801 = "llvm.load"(%3798) : (!llvm.ptr) -> i32
    %3802 = "llvm.getelementptr"(%3800, %3801) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<29 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3803 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3804 = "llvm.getelementptr"(%3802, %3803) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3804) : (!llvm.ptr) -> ()
  }) {"func_name" = "OutOfBounds_B_report_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb614(%3805 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3806 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3807 : !llvm.ptr):
    %3808 = "mini.wrap"(%3805) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"OutOfBounds">
    %3809 = "mini.to_fat_ptr"(%3808) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "OutOfBounds", "to_typ_name" = "OutOfBounds"} : (!mini.fatptr<"OutOfBounds">) -> !mini.fatptr<"OutOfBounds">
    %3810 = "mini.get_field"(%3809) {"offset" = 3 : i64, "vtable_bytes" = 232 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!mini.fatptr<"OutOfBounds">) -> !mini.fatptr<"String">
    %3811 = builtin.unrealized_conversion_cast %3810 : !mini.fatptr<"String"> to !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %3812 = "mini.unwrap"(%3811) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %3813 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %3814 = "mini.parameterizations_array"(%3813) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%3814, %3812) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %3815 = "mini.get_field"(%3809) {"offset" = 0 : i64, "vtable_bytes" = 232 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.fatptr<"OutOfBounds">) -> !mini.union<[!mini.fatptr<"OutOfBoundsDetails">, !mini.nil]>
    %3816 = "mini.checkflag"(%3815) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.fatptr<"OutOfBoundsDetails">, !mini.nil]>) -> !mini.ptr<i1>
    %3817 = "mini.unwrap"(%3816) : (!mini.ptr<i1>) -> i1
    %3818 = builtin.unrealized_conversion_cast %3815 : !mini.union<[!mini.fatptr<"OutOfBoundsDetails">, !mini.nil]> to !mini.union<[!mini.fatptr<"OutOfBoundsDetails">, !mini.nil]>
    "mini.if"(%3817) ({
      %3819 = "mini.to_fat_ptr"(%3818) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "union_typ", "to_typ_name" = "OutOfBoundsDetails"} : (!mini.union<[!mini.fatptr<"OutOfBoundsDetails">, !mini.nil]>) -> !mini.fatptr<"OutOfBoundsDetails">
      %3820 = "mini.unwrap"(%3819) : (!mini.fatptr<"OutOfBoundsDetails">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %3821 = "mini.parameterizations_array"() : () -> !llvm.ptr
      "mini.method_call"(%3821, %3820) {"offset" = 3 : i32, "vptrs" = [], "vtable_size" = 6 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      "mini.castassign"(%3818, %3819) ({
        %3822 = builtin.unrealized_conversion_cast %3819 : !mini.fatptr<"OutOfBoundsDetails"> to !mini.union<[!mini.fatptr<"OutOfBoundsDetails">, !mini.nil]>
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "OutOfBoundsDetails", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.fatptr<"OutOfBoundsDetails">, !mini.nil]>, !mini.fatptr<"OutOfBoundsDetails">) -> ()
    }) : (i1) -> ()
  }) {"func_name" = "OutOfBounds_print_message_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb615(%3823 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3824 : !llvm.ptr):
    %3825 = "mini.invariant"(%3824) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3826 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb616] : () -> ()
  ^bb616:
    %3827 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
    "llvm.store"(%3827, %3826) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb617] : () -> ()
  ^bb617:
    %3828 = "llvm.extractvalue"(%3823) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3829 = "llvm.load"(%3826) : (!llvm.ptr) -> i32
    %3830 = "llvm.getelementptr"(%3828, %3829) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<29 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3831 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3832 = "llvm.getelementptr"(%3830, %3831) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3832) : (!llvm.ptr) -> ()
  }) {"func_name" = "OutOfBounds_B_print_message_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_IntArray", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32]} : () -> ()
  "mini.getter_def"() {"meth_name" = "IntArray_getter_buffer", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_BufferPtri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "IntArray_setter_buffer", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_BufferPtri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "IntArray_field_buffer", "getter_name" = "IntArray_getter_buffer", "setter_name" = "IntArray_setter_buffer"} : () -> ()
  "mini.getter_def"() {"meth_name" = "IntArray_getter_length", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "IntArray_setter_length", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "IntArray_field_length", "getter_name" = "IntArray_getter_length", "setter_name" = "IntArray_setter_length"} : () -> ()
  "mini.getter_def"() {"meth_name" = "IntArray_getter_capacity", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "IntArray_setter_capacity", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "IntArray_field_capacity", "getter_name" = "IntArray_getter_capacity", "setter_name" = "IntArray_setter_capacity"} : () -> ()
  "mini.func"() ({
  ^bb618(%3833 : !llvm.ptr, %3834 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %3835 = "mini.wrap"(%3834) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %3836 = "mini.to_fat_ptr"(%3835) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %3837 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3838 = "mini.create_buffer"(%3837) {"typ" = i32, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %3839 = builtin.unrealized_conversion_cast %3838 : !llvm.ptr to !mini.buffer<!mini.ptr<i32>>
    %3840 = "mini.refer"(%3839) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    %3841 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3842 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3843 = "mini.unwrap"(%3840) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %3844 = "mini.unwrap"(%3841) : (!mini.ptr<i32>) -> i32
    %3845 = "mini.unwrap"(%3842) : (!mini.ptr<i32>) -> i32
    %3846 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "IntArray", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"IntArray">
    %3847 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3848 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3849 = builtin.unrealized_conversion_cast %3840 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %3850 = "mini.unwrap"(%3849) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %3851 = builtin.unrealized_conversion_cast %3847 : !mini.ptr<i32> to !mini.ptr<i32>
    %3852 = "mini.unwrap"(%3851) : (!mini.ptr<i32>) -> i32
    %3853 = builtin.unrealized_conversion_cast %3848 : !mini.ptr<i32> to !mini.ptr<i32>
    %3854 = "mini.unwrap"(%3853) : (!mini.ptr<i32>) -> i32
    %3855 = "mini.unwrap"(%3846) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3856 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri32"]} : () -> !llvm.ptr
    %3857 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %3858 = "mini.parameterizations_array"(%3856, %3857, %3857) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%3858, %3855, %3850, %3852, %3854) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %3859 = "mini.to_fat_ptr"(%3846) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %3860 = "mini.refer"(%3859) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %3861 = "mini.unwrap"(%3836) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3862 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %3863 = "mini.method_call"(%3862, %3861) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %3864 = "mini.to_fat_ptr"(%3863) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %3865 = "mini.to_fat_ptr"(%3864) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %3866 = "mini.refer"(%3865) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    "mini.while"() ({
      %3867 = "mini.unwrap"(%3866) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %3868 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %3869 = "mini.method_call"(%3868, %3867) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %3870 = builtin.unrealized_conversion_cast %3869 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %3871 = "mini.checkflag"(%3870) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i1>
      %3872 = "mini.unwrap"(%3871) : (!mini.ptr<i1>) -> i1
    }, {
      %3873 = "mini.narrow"(%3870) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
      %3874 = builtin.unrealized_conversion_cast %3873 : !mini.ptr<i32> to !mini.ptr<i32>
      %3875 = "mini.unwrap"(%3874) : (!mini.ptr<i32>) -> i32
      %3876 = "mini.unwrap"(%3860) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %3877 = "mini.parameterizations_array"(%3857) : (!llvm.ptr) -> !llvm.ptr
      %3878 = "mini.method_call"(%3877, %3876, %3875) {"offset" = 9 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !mini.fatptr<"IntArray">
      %3879 = "mini.to_fat_ptr"(%3878) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
      "mini.castassign"(%3870, %3873) ({
        %3880 = builtin.unrealized_conversion_cast %3873 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %3881 = "mini.to_fat_ptr"(%3860) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    "mini.return"(%3881) : (!mini.fatptr<"IntArray">) -> ()
  }) {"func_name" = "IntArray__Self_from_iterable_iterableIntIterable", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb619(%3882 : !llvm.ptr):
    %3883 = "mini.invariant"(%3882) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3884 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb620] : () -> ()
  ^bb621:
    %3885 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
    "llvm.store"(%3885, %3884) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb622] : () -> ()
  ^bb620:
    %3886 = "llvm.getelementptr"(%3882) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3887 = "mini.checkflag"(%3886) {"typ_name" = "IntIterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3888 = "llvm.load"(%3887) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3888) [^bb621, ^bb621] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb622:
    %3889 = "mini.addr_of"() {"global_name" = @IntArray} : () -> !llvm.ptr
    %3890 = "llvm.load"(%3884) : (!llvm.ptr) -> i32
    %3891 = "llvm.getelementptr"(%3889, %3890) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3892 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3893 = "llvm.getelementptr"(%3891, %3892) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3893) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B__Self_from_iterable_iterableIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb623(%3894 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3895 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3896 : !llvm.ptr):
    %3897 = "mini.wrap"(%3894) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArray">
    %3898 = "mini.to_fat_ptr"(%3897) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %3899 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3900 = "mini.create_buffer"(%3899) {"typ" = i32, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %3901 = builtin.unrealized_conversion_cast %3900 : !llvm.ptr to !mini.buffer<!mini.ptr<i32>>
    "mini.set_field"(%3898, %3901) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"IntArray">, !mini.buffer<!mini.ptr<i32>>) -> ()
    %3902 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3903 = builtin.unrealized_conversion_cast %3902 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%3898, %3903) {"offset" = 2 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">, !mini.ptr<i32>) -> ()
    %3904 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3905 = builtin.unrealized_conversion_cast %3904 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%3898, %3905) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">, !mini.ptr<i32>) -> ()
  }) {"func_name" = "IntArray_init_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb624(%3906 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3907 : !llvm.ptr):
    %3908 = "mini.invariant"(%3907) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3909 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb625] : () -> ()
  ^bb625:
    %3910 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
    "llvm.store"(%3910, %3909) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb626] : () -> ()
  ^bb626:
    %3911 = "llvm.extractvalue"(%3906) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3912 = "llvm.load"(%3909) : (!llvm.ptr) -> i32
    %3913 = "llvm.getelementptr"(%3911, %3912) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3914 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3915 = "llvm.getelementptr"(%3913, %3914) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3915) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_init_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb627(%3916 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3917 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3918 : !llvm.ptr, %3919 : !llvm.struct<(!llvm.ptr)>, %3920 : i32, %3921 : i32):
    %3922 = "mini.wrap"(%3916) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArray">
    %3923 = "mini.to_fat_ptr"(%3922) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %3924 = "mini.wrap"(%3919) : (!llvm.struct<(!llvm.ptr)>) -> !mini.buffer<!mini.ptr<i32>>
    %3925 = builtin.unrealized_conversion_cast %3924 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %3926 = builtin.unrealized_conversion_cast %3925 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    "mini.set_field"(%3923, %3926) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"IntArray">, !mini.buffer<!mini.ptr<i32>>) -> ()
    %3927 = "mini.wrap"(%3920) : (i32) -> !mini.ptr<i32>
    %3928 = builtin.unrealized_conversion_cast %3927 : !mini.ptr<i32> to !mini.ptr<i32>
    %3929 = builtin.unrealized_conversion_cast %3928 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%3923, %3929) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">, !mini.ptr<i32>) -> ()
    %3930 = "mini.wrap"(%3921) : (i32) -> !mini.ptr<i32>
    %3931 = builtin.unrealized_conversion_cast %3930 : !mini.ptr<i32> to !mini.ptr<i32>
    %3932 = builtin.unrealized_conversion_cast %3931 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%3923, %3932) {"offset" = 2 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">, !mini.ptr<i32>) -> ()
  }) {"func_name" = "IntArray_init_bufferBufferPtri32_lengthPtri32_capacityPtri32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb628(%3933 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3934 : !llvm.ptr):
    %3935 = "mini.invariant"(%3934) {"num_bytes" = 24 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3936 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb629] : () -> ()
  ^bb630:
    %3937 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
    "llvm.store"(%3937, %3936) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb631] : () -> ()
  ^bb632:
    %3938 = "llvm.getelementptr"(%3934) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3939 = "mini.checkflag"(%3938) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3940 = "llvm.load"(%3939) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3940) [^bb630, ^bb630] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb633:
    %3941 = "llvm.getelementptr"(%3934) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3942 = "mini.checkflag"(%3941) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3943 = "llvm.load"(%3942) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3943) [^bb632, ^bb632] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb629:
    %3944 = "llvm.getelementptr"(%3934) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3945 = "mini.checkflag"(%3944) {"typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3946 = "llvm.load"(%3945) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3946) [^bb633, ^bb633] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb631:
    %3947 = "llvm.extractvalue"(%3933) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3948 = "llvm.load"(%3936) : (!llvm.ptr) -> i32
    %3949 = "llvm.getelementptr"(%3947, %3948) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3950 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3951 = "llvm.getelementptr"(%3949, %3950) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3951) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_init_bufferBufferPtri32_lengthPtri32_capacityPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb634(%3952 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3953 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3954 : !llvm.ptr):
    %3955 = "mini.wrap"(%3952) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArray">
    %3956 = "mini.to_fat_ptr"(%3955) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %3957 = "mini.get_field"(%3956) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %3958 = builtin.unrealized_conversion_cast %3957 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.return"(%3958) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "IntArray_length_", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb635(%3959 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3960 : !llvm.ptr):
    %3961 = "mini.invariant"(%3960) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3962 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb636] : () -> ()
  ^bb636:
    %3963 = "llvm.mlir.constant"() <{"value" = 29 : i32}> : () -> i32
    "llvm.store"(%3963, %3962) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb637] : () -> ()
  ^bb637:
    %3964 = "llvm.extractvalue"(%3959) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3965 = "llvm.load"(%3962) : (!llvm.ptr) -> i32
    %3966 = "llvm.getelementptr"(%3964, %3965) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3967 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3968 = "llvm.getelementptr"(%3966, %3967) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3968) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_length_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb638(%3969 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3970 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3971 : !llvm.ptr):
    %3972 = "mini.wrap"(%3969) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArray">
    %3973 = "mini.to_fat_ptr"(%3972) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %3974 = "mini.get_field"(%3973) {"offset" = 2 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %3975 = builtin.unrealized_conversion_cast %3974 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.return"(%3975) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "IntArray_capacity_", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb639(%3976 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3977 : !llvm.ptr):
    %3978 = "mini.invariant"(%3977) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3979 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb640] : () -> ()
  ^bb640:
    %3980 = "llvm.mlir.constant"() <{"value" = 30 : i32}> : () -> i32
    "llvm.store"(%3980, %3979) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb641] : () -> ()
  ^bb641:
    %3981 = "llvm.extractvalue"(%3976) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3982 = "llvm.load"(%3979) : (!llvm.ptr) -> i32
    %3983 = "llvm.getelementptr"(%3981, %3982) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3984 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3985 = "llvm.getelementptr"(%3983, %3984) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3985) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_capacity_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb642(%3986 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3987 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3988 : !llvm.ptr):
    %3989 = "mini.wrap"(%3986) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArray">
    %3990 = "mini.to_fat_ptr"(%3989) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %3991 = "mini.get_field"(%3990) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"IntArray">) -> !mini.buffer<!mini.ptr<i32>>
    %3992 = builtin.unrealized_conversion_cast %3991 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    "mini.return"(%3992) : (!mini.buffer<!mini.ptr<i32>>) -> ()
  }) {"func_name" = "IntArray_buffer_", "result_type" = !llvm.struct<(!llvm.ptr)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb643(%3993 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3994 : !llvm.ptr):
    %3995 = "mini.invariant"(%3994) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3996 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb644] : () -> ()
  ^bb644:
    %3997 = "llvm.mlir.constant"() <{"value" = 31 : i32}> : () -> i32
    "llvm.store"(%3997, %3996) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb645] : () -> ()
  ^bb645:
    %3998 = "llvm.extractvalue"(%3993) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3999 = "llvm.load"(%3996) : (!llvm.ptr) -> i32
    %4000 = "llvm.getelementptr"(%3998, %3999) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4001 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4002 = "llvm.getelementptr"(%4000, %4001) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4002) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_buffer_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb646(%4003 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4004 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4005 : !llvm.ptr, %4006 : i32):
    %4007 = "mini.wrap"(%4003) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArray">
    %4008 = "mini.to_fat_ptr"(%4007) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %4009 = "mini.wrap"(%4006) : (i32) -> !mini.ptr<i32>
    %4010 = builtin.unrealized_conversion_cast %4009 : !mini.ptr<i32> to !mini.ptr<i32>
    %4011 = "mini.get_field"(%4008) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %4012 = "mini.get_field"(%4008) {"offset" = 2 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %4013 = "mini.unwrap"(%4011) : (!mini.ptr<i32>) -> i32
    %4014 = "mini.unwrap"(%4012) : (!mini.ptr<i32>) -> i32
    %4015 = "mini.comparison"(%4013, %4014) {"op" = "LT"} : (i32, i32) -> i1
    %4016 = "mini.wrap"(%4015) : (i1) -> !mini.ptr<i32>
    %4017 = "mini.unwrap"(%4016) : (!mini.ptr<i32>) -> i1
    "mini.if"(%4017) ({
      %4018 = "mini.get_field"(%4008) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"IntArray">) -> !mini.buffer<!mini.ptr<i32>>
      %4019 = "mini.get_field"(%4008) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
      %4020 = builtin.unrealized_conversion_cast %4010 : !mini.ptr<i32> to !mini.ptr<i32>
      "mini.buffer_set"(%4018, %4019, %4020) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
      %4021 = "mini.get_field"(%4008) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
      %4022 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %4023 = "mini.unwrap"(%4021) : (!mini.ptr<i32>) -> i32
      %4024 = "mini.unwrap"(%4022) : (!mini.ptr<i32>) -> i32
      %4025 = "mini.arithmetic"(%4023, %4024) {"op" = "ADD"} : (i32, i32) -> i32
      %4026 = "mini.wrap"(%4025) : (i32) -> !mini.ptr<i32>
      %4027 = builtin.unrealized_conversion_cast %4026 : !mini.ptr<i32> to !mini.ptr<i32>
      "mini.set_field"(%4008, %4027) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">, !mini.ptr<i32>) -> ()
      %4028 = "mini.to_fat_ptr"(%4008) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
      "mini.return"(%4028) : (!mini.fatptr<"IntArray">) -> ()
    }) : (i1) -> ()
    %4029 = "mini.get_field"(%4008) {"offset" = 2 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %4030 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %4031 = "mini.unwrap"(%4029) : (!mini.ptr<i32>) -> i32
    %4032 = "mini.unwrap"(%4030) : (!mini.ptr<i32>) -> i32
    %4033 = "mini.arithmetic"(%4031, %4032) {"op" = "MUL"} : (i32, i32) -> i32
    %4034 = "mini.wrap"(%4033) : (i32) -> !mini.ptr<i32>
    %4035 = builtin.unrealized_conversion_cast %4034 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%4008, %4035) {"offset" = 2 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">, !mini.ptr<i32>) -> ()
    %4036 = "mini.get_field"(%4008) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"IntArray">) -> !mini.buffer<!mini.ptr<i32>>
    %4037 = builtin.unrealized_conversion_cast %4036 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %4038 = "mini.refer"(%4037) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    %4039 = "mini.get_field"(%4008) {"offset" = 2 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %4040 = "mini.create_buffer"(%4039) {"typ" = i32, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %4041 = builtin.unrealized_conversion_cast %4040 : !llvm.ptr to !mini.buffer<!mini.ptr<i32>>
    "mini.set_field"(%4008, %4041) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"IntArray">, !mini.buffer<!mini.ptr<i32>>) -> ()
    %4042 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    "mini.while"() ({
      %4043 = "mini.get_field"(%4008) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
      %4044 = "mini.unwrap"(%4042) : (!mini.ptr<i32>) -> i32
      %4045 = "mini.unwrap"(%4043) : (!mini.ptr<i32>) -> i32
      %4046 = "mini.comparison"(%4044, %4045) {"op" = "LT"} : (i32, i32) -> i1
      %4047 = "mini.wrap"(%4046) : (i1) -> !mini.ptr<i32>
      %4048 = "mini.unwrap"(%4047) : (!mini.ptr<i32>) -> i1
    }, {
      %4049 = "mini.buffer_get"(%4038, %4042) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
      %4050 = "mini.get_field"(%4008) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"IntArray">) -> !mini.buffer<!mini.ptr<i32>>
      %4051 = builtin.unrealized_conversion_cast %4049 : !mini.ptr<i32> to !mini.ptr<i32>
      "mini.buffer_set"(%4050, %4042, %4051) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
      %4052 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %4053 = "mini.unwrap"(%4042) : (!mini.ptr<i32>) -> i32
      %4054 = "mini.unwrap"(%4052) : (!mini.ptr<i32>) -> i32
      %4055 = "mini.arithmetic"(%4053, %4054) {"op" = "ADD"} : (i32, i32) -> i32
      %4056 = "mini.wrap"(%4055) : (i32) -> !mini.ptr<i32>
      "mini.castassign"(%4042, %4056) ({
        %4057 = builtin.unrealized_conversion_cast %4056 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %4058 = "mini.get_field"(%4008) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"IntArray">) -> !mini.buffer<!mini.ptr<i32>>
    %4059 = "mini.get_field"(%4008) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %4060 = builtin.unrealized_conversion_cast %4010 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.buffer_set"(%4058, %4059, %4060) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %4061 = "mini.get_field"(%4008) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %4062 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %4063 = "mini.unwrap"(%4061) : (!mini.ptr<i32>) -> i32
    %4064 = "mini.unwrap"(%4062) : (!mini.ptr<i32>) -> i32
    %4065 = "mini.arithmetic"(%4063, %4064) {"op" = "ADD"} : (i32, i32) -> i32
    %4066 = "mini.wrap"(%4065) : (i32) -> !mini.ptr<i32>
    %4067 = builtin.unrealized_conversion_cast %4066 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%4008, %4067) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">, !mini.ptr<i32>) -> ()
    %4068 = "mini.to_fat_ptr"(%4008) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    "mini.return"(%4068) : (!mini.fatptr<"IntArray">) -> ()
  }) {"func_name" = "IntArray_append_xPtri32", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb647(%4069 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4070 : !llvm.ptr):
    %4071 = "mini.invariant"(%4070) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4072 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb648] : () -> ()
  ^bb649:
    %4073 = "llvm.mlir.constant"() <{"value" = 32 : i32}> : () -> i32
    "llvm.store"(%4073, %4072) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb650] : () -> ()
  ^bb648:
    %4074 = "llvm.getelementptr"(%4070) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4075 = "mini.checkflag"(%4074) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %4076 = "llvm.load"(%4075) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%4076) [^bb649, ^bb649] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb650:
    %4077 = "llvm.extractvalue"(%4069) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4078 = "llvm.load"(%4072) : (!llvm.ptr) -> i32
    %4079 = "llvm.getelementptr"(%4077, %4078) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4080 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4081 = "llvm.getelementptr"(%4079, %4080) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4081) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_append_xPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb651(%4082 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4083 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4084 : !llvm.ptr, %4085 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %4086 = "mini.wrap"(%4082) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArray">
    %4087 = "mini.to_fat_ptr"(%4086) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %4088 = "mini.wrap"(%4085) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArray">
    %4089 = "mini.to_fat_ptr"(%4088) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %4090 = "mini.unwrap"(%4089) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4091 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %4092 = "mini.method_call"(%4091, %4090) {"offset" = 8 : i32, "vptrs" = [], "vtable_size" = 77 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i32>>
    %4093 = builtin.unrealized_conversion_cast %4092 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %4094 = builtin.unrealized_conversion_cast %4093 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %4095 = "mini.refer"(%4094) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    %4096 = "mini.unwrap"(%4089) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4097 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %4098 = "mini.method_call"(%4097, %4096) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 77 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.ptr<i32>
    %4099 = builtin.unrealized_conversion_cast %4098 : !mini.ptr<i32> to !mini.ptr<i32>
    %4100 = "mini.get_field"(%4087) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %4101 = "mini.unwrap"(%4100) : (!mini.ptr<i32>) -> i32
    %4102 = "mini.unwrap"(%4099) : (!mini.ptr<i32>) -> i32
    %4103 = "mini.arithmetic"(%4101, %4102) {"op" = "ADD"} : (i32, i32) -> i32
    %4104 = "mini.wrap"(%4103) : (i32) -> !mini.ptr<i32>
    %4105 = "mini.get_field"(%4087) {"offset" = 2 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %4106 = "mini.unwrap"(%4104) : (!mini.ptr<i32>) -> i32
    %4107 = "mini.unwrap"(%4105) : (!mini.ptr<i32>) -> i32
    %4108 = "mini.comparison"(%4106, %4107) {"op" = "LT"} : (i32, i32) -> i1
    %4109 = "mini.wrap"(%4108) : (i1) -> !mini.ptr<i32>
    %4110 = "mini.unwrap"(%4109) : (!mini.ptr<i32>) -> i1
    "mini.if"(%4110) ({
      %4111 = "mini.get_field"(%4087) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
      %4112 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      "mini.while"() ({
        %4113 = "mini.get_field"(%4087) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
        %4114 = "mini.unwrap"(%4113) : (!mini.ptr<i32>) -> i32
        %4115 = "mini.unwrap"(%4099) : (!mini.ptr<i32>) -> i32
        %4116 = "mini.arithmetic"(%4114, %4115) {"op" = "ADD"} : (i32, i32) -> i32
        %4117 = "mini.wrap"(%4116) : (i32) -> !mini.ptr<i32>
        %4118 = "mini.unwrap"(%4111) : (!mini.ptr<i32>) -> i32
        %4119 = "mini.unwrap"(%4117) : (!mini.ptr<i32>) -> i32
        %4120 = "mini.comparison"(%4118, %4119) {"op" = "LT"} : (i32, i32) -> i1
        %4121 = "mini.wrap"(%4120) : (i1) -> !mini.ptr<i32>
        %4122 = "mini.unwrap"(%4121) : (!mini.ptr<i32>) -> i1
      }, {
        %4123 = "mini.buffer_get"(%4095, %4112) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
        %4124 = "mini.get_field"(%4087) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"IntArray">) -> !mini.buffer<!mini.ptr<i32>>
        %4125 = builtin.unrealized_conversion_cast %4123 : !mini.ptr<i32> to !mini.ptr<i32>
        "mini.buffer_set"(%4124, %4111, %4125) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
        %4126 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
        %4127 = "mini.unwrap"(%4111) : (!mini.ptr<i32>) -> i32
        %4128 = "mini.unwrap"(%4126) : (!mini.ptr<i32>) -> i32
        %4129 = "mini.arithmetic"(%4127, %4128) {"op" = "ADD"} : (i32, i32) -> i32
        %4130 = "mini.wrap"(%4129) : (i32) -> !mini.ptr<i32>
        "mini.castassign"(%4111, %4130) ({
          %4131 = builtin.unrealized_conversion_cast %4130 : !mini.ptr<i32> to !mini.ptr<i32>
        }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
        %4132 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
        %4133 = "mini.unwrap"(%4112) : (!mini.ptr<i32>) -> i32
        %4134 = "mini.unwrap"(%4132) : (!mini.ptr<i32>) -> i32
        %4135 = "mini.arithmetic"(%4133, %4134) {"op" = "ADD"} : (i32, i32) -> i32
        %4136 = "mini.wrap"(%4135) : (i32) -> !mini.ptr<i32>
        "mini.castassign"(%4112, %4136) ({
          %4137 = builtin.unrealized_conversion_cast %4136 : !mini.ptr<i32> to !mini.ptr<i32>
        }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
      }) : () -> ()
      %4138 = "mini.get_field"(%4087) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
      %4139 = "mini.unwrap"(%4138) : (!mini.ptr<i32>) -> i32
      %4140 = "mini.unwrap"(%4099) : (!mini.ptr<i32>) -> i32
      %4141 = "mini.arithmetic"(%4139, %4140) {"op" = "ADD"} : (i32, i32) -> i32
      %4142 = "mini.wrap"(%4141) : (i32) -> !mini.ptr<i32>
      %4143 = builtin.unrealized_conversion_cast %4142 : !mini.ptr<i32> to !mini.ptr<i32>
      "mini.set_field"(%4087, %4143) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">, !mini.ptr<i32>) -> ()
      %4144 = "mini.to_fat_ptr"(%4087) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
      "mini.return"(%4144) : (!mini.fatptr<"IntArray">) -> ()
    }) : (i1) -> ()
    %4145 = "mini.get_field"(%4087) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %4146 = "mini.unwrap"(%4145) : (!mini.ptr<i32>) -> i32
    %4147 = "mini.unwrap"(%4099) : (!mini.ptr<i32>) -> i32
    %4148 = "mini.arithmetic"(%4146, %4147) {"op" = "ADD"} : (i32, i32) -> i32
    %4149 = "mini.wrap"(%4148) : (i32) -> !mini.ptr<i32>
    %4150 = builtin.unrealized_conversion_cast %4149 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%4087, %4150) {"offset" = 2 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">, !mini.ptr<i32>) -> ()
    %4151 = "mini.get_field"(%4087) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"IntArray">) -> !mini.buffer<!mini.ptr<i32>>
    %4152 = builtin.unrealized_conversion_cast %4151 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %4153 = "mini.refer"(%4152) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    %4154 = "mini.get_field"(%4087) {"offset" = 2 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %4155 = "mini.create_buffer"(%4154) {"typ" = i32, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %4156 = builtin.unrealized_conversion_cast %4155 : !llvm.ptr to !mini.buffer<!mini.ptr<i32>>
    "mini.set_field"(%4087, %4156) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"IntArray">, !mini.buffer<!mini.ptr<i32>>) -> ()
    %4157 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %4158 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    "mini.while"() ({
      %4159 = "mini.get_field"(%4087) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
      %4160 = "mini.unwrap"(%4159) : (!mini.ptr<i32>) -> i32
      %4161 = "mini.unwrap"(%4099) : (!mini.ptr<i32>) -> i32
      %4162 = "mini.arithmetic"(%4160, %4161) {"op" = "ADD"} : (i32, i32) -> i32
      %4163 = "mini.wrap"(%4162) : (i32) -> !mini.ptr<i32>
      %4164 = "mini.unwrap"(%4157) : (!mini.ptr<i32>) -> i32
      %4165 = "mini.unwrap"(%4163) : (!mini.ptr<i32>) -> i32
      %4166 = "mini.comparison"(%4164, %4165) {"op" = "LT"} : (i32, i32) -> i1
      %4167 = "mini.wrap"(%4166) : (i1) -> !mini.ptr<i32>
      %4168 = "mini.unwrap"(%4167) : (!mini.ptr<i32>) -> i1
    }, {
      %4169 = "mini.get_field"(%4087) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
      %4170 = "mini.unwrap"(%4157) : (!mini.ptr<i32>) -> i32
      %4171 = "mini.unwrap"(%4169) : (!mini.ptr<i32>) -> i32
      %4172 = "mini.comparison"(%4170, %4171) {"op" = "LT"} : (i32, i32) -> i1
      %4173 = "mini.wrap"(%4172) : (i1) -> !mini.ptr<i32>
      %4174 = "mini.unwrap"(%4173) : (!mini.ptr<i32>) -> i1
      "mini.if"(%4174) ({
        %4175 = "mini.buffer_get"(%4153, %4157) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
        %4176 = "mini.get_field"(%4087) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"IntArray">) -> !mini.buffer<!mini.ptr<i32>>
        %4177 = builtin.unrealized_conversion_cast %4175 : !mini.ptr<i32> to !mini.ptr<i32>
        "mini.buffer_set"(%4176, %4157, %4177) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
        %4178 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
        %4179 = "mini.unwrap"(%4157) : (!mini.ptr<i32>) -> i32
        %4180 = "mini.unwrap"(%4178) : (!mini.ptr<i32>) -> i32
        %4181 = "mini.arithmetic"(%4179, %4180) {"op" = "ADD"} : (i32, i32) -> i32
        %4182 = "mini.wrap"(%4181) : (i32) -> !mini.ptr<i32>
        "mini.castassign"(%4157, %4182) ({
          %4183 = builtin.unrealized_conversion_cast %4182 : !mini.ptr<i32> to !mini.ptr<i32>
        }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
        "mini.continue"() [^bb652] : () -> ()
      }) : (i1) -> ()
      %4184 = "mini.buffer_get"(%4095, %4158) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
      %4185 = "mini.get_field"(%4087) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"IntArray">) -> !mini.buffer<!mini.ptr<i32>>
      %4186 = builtin.unrealized_conversion_cast %4184 : !mini.ptr<i32> to !mini.ptr<i32>
      "mini.buffer_set"(%4185, %4157, %4186) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
      %4187 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %4188 = "mini.unwrap"(%4157) : (!mini.ptr<i32>) -> i32
      %4189 = "mini.unwrap"(%4187) : (!mini.ptr<i32>) -> i32
      %4190 = "mini.arithmetic"(%4188, %4189) {"op" = "ADD"} : (i32, i32) -> i32
      %4191 = "mini.wrap"(%4190) : (i32) -> !mini.ptr<i32>
      "mini.castassign"(%4157, %4191) ({
        %4192 = builtin.unrealized_conversion_cast %4191 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
      %4193 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %4194 = "mini.unwrap"(%4158) : (!mini.ptr<i32>) -> i32
      %4195 = "mini.unwrap"(%4193) : (!mini.ptr<i32>) -> i32
      %4196 = "mini.arithmetic"(%4194, %4195) {"op" = "ADD"} : (i32, i32) -> i32
      %4197 = "mini.wrap"(%4196) : (i32) -> !mini.ptr<i32>
      "mini.castassign"(%4158, %4197) ({
        %4198 = builtin.unrealized_conversion_cast %4197 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %4199 = "mini.get_field"(%4087) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %4200 = "mini.unwrap"(%4199) : (!mini.ptr<i32>) -> i32
    %4201 = "mini.unwrap"(%4099) : (!mini.ptr<i32>) -> i32
    %4202 = "mini.arithmetic"(%4200, %4201) {"op" = "ADD"} : (i32, i32) -> i32
    %4203 = "mini.wrap"(%4202) : (i32) -> !mini.ptr<i32>
    %4204 = builtin.unrealized_conversion_cast %4203 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%4087, %4204) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">, !mini.ptr<i32>) -> ()
    %4205 = "mini.to_fat_ptr"(%4087) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    "mini.return"(%4205) : (!mini.fatptr<"IntArray">) -> ()
  }) {"func_name" = "IntArray_extend_aryIntArray", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb653(%4206 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4207 : !llvm.ptr):
    %4208 = "mini.invariant"(%4207) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4209 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb654] : () -> ()
  ^bb655:
    %4210 = "llvm.mlir.constant"() <{"value" = 33 : i32}> : () -> i32
    "llvm.store"(%4210, %4209) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb656] : () -> ()
  ^bb654:
    %4211 = "llvm.getelementptr"(%4207) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4212 = "mini.checkflag"(%4211) {"typ_name" = "IntArray"} : (!llvm.ptr) -> !mini.ptr<i1>
    %4213 = "llvm.load"(%4212) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%4213) [^bb655, ^bb655] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb656:
    %4214 = "llvm.extractvalue"(%4206) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4215 = "llvm.load"(%4209) : (!llvm.ptr) -> i32
    %4216 = "llvm.getelementptr"(%4214, %4215) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4217 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4218 = "llvm.getelementptr"(%4216, %4217) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4218) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_extend_aryIntArray", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb657(%4219 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4220 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4221 : !llvm.ptr, %4222 : i32):
    %4223 = "mini.wrap"(%4219) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArray">
    %4224 = "mini.to_fat_ptr"(%4223) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %4225 = "mini.wrap"(%4222) : (i32) -> !mini.ptr<i32>
    %4226 = builtin.unrealized_conversion_cast %4225 : !mini.ptr<i32> to !mini.ptr<i32>
    %4227 = "mini.get_field"(%4224) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %4228 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %4229 = "mini.unwrap"(%4227) : (!mini.ptr<i32>) -> i32
    %4230 = "mini.unwrap"(%4228) : (!mini.ptr<i32>) -> i32
    %4231 = "mini.arithmetic"(%4229, %4230) {"op" = "SUB"} : (i32, i32) -> i32
    %4232 = "mini.wrap"(%4231) : (i32) -> !mini.ptr<i32>
    %4233 = "mini.unwrap"(%4226) : (!mini.ptr<i32>) -> i32
    %4234 = "mini.unwrap"(%4232) : (!mini.ptr<i32>) -> i32
    %4235 = "mini.comparison"(%4233, %4234) {"op" = "GT"} : (i32, i32) -> i1
    %4236 = "mini.wrap"(%4235) : (i1) -> !mini.ptr<i32>
    %4237 = "mini.unwrap"(%4236) : (!mini.ptr<i32>) -> i1
    "mini.if"(%4237) ({
      %4238 = "mini.get_field"(%4224) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
      %4239 = "mini.unwrap"(%4238) : (!mini.ptr<i32>) -> i32
      %4240 = "mini.unwrap"(%4226) : (!mini.ptr<i32>) -> i32
      %4241 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "OutOfBounds", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !mini.fatptr<"OutOfBounds">
      %4242 = "mini.get_field"(%4224) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
      %4243 = builtin.unrealized_conversion_cast %4242 : !mini.ptr<i32> to !mini.ptr<i32>
      %4244 = "mini.unwrap"(%4243) : (!mini.ptr<i32>) -> i32
      %4245 = builtin.unrealized_conversion_cast %4226 : !mini.ptr<i32> to !mini.ptr<i32>
      %4246 = "mini.unwrap"(%4245) : (!mini.ptr<i32>) -> i32
      %4247 = "mini.unwrap"(%4241) : (!mini.fatptr<"OutOfBounds">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %4248 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %4249 = "mini.parameterizations_array"(%4248, %4248) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mini.method_call"(%4249, %4247, %4244, %4246) {"offset" = 4 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 29 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32) -> ()
      %4250 = "mini.literal"() {"value" = 618 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %4251 = "mini.literal"() {"value" = 59 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %4252 = "mini.create_buffer"(%4251) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
      %4253 = builtin.unrealized_conversion_cast %4252 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
      %4254 = "mini.refer"(%4253) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
      %4255 = "mini.literal"() {"typ" = !llvm.array<58 x i8>, "value" = "C:\\Users\\PaulK\\OneDrive\\Documents\\PL\\PyPL\\tmpnjjh5_8x.mini"} : () -> !llvm.ptr
      %4256 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mini.buffer_set"(%4254, %4256, %4255) {"typ" = !llvm.array<58 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
      %4257 = "mini.literal"() {"value" = 58 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %4258 = "mini.literal"() {"value" = 59 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %4259 = "mini.unwrap"(%4254) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
      %4260 = "mini.unwrap"(%4257) : (!mini.ptr<i32>) -> i32
      %4261 = "mini.unwrap"(%4258) : (!mini.ptr<i32>) -> i32
      %4262 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
      %4263 = "mini.literal"() {"value" = 58 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %4264 = "mini.literal"() {"value" = 59 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %4265 = builtin.unrealized_conversion_cast %4254 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
      %4266 = "mini.unwrap"(%4265) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
      %4267 = builtin.unrealized_conversion_cast %4263 : !mini.ptr<i32> to !mini.ptr<i32>
      %4268 = "mini.unwrap"(%4267) : (!mini.ptr<i32>) -> i32
      %4269 = builtin.unrealized_conversion_cast %4264 : !mini.ptr<i32> to !mini.ptr<i32>
      %4270 = "mini.unwrap"(%4269) : (!mini.ptr<i32>) -> i32
      %4271 = "mini.unwrap"(%4262) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %4272 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
      %4273 = "mini.parameterizations_array"(%4272, %4248, %4248) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mini.method_call"(%4273, %4271, %4266, %4268, %4270) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %4274 = builtin.unrealized_conversion_cast %4250 : !mini.ptr<i32> to !mini.ptr<i32>
      %4275 = "mini.unwrap"(%4274) : (!mini.ptr<i32>) -> i32
      %4276 = "mini.to_fat_ptr"(%4262) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
      %4277 = "mini.unwrap"(%4276) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %4278 = "mini.unwrap"(%4241) : (!mini.fatptr<"OutOfBounds">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %4279 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %4280 = "mini.parameterizations_array"(%4248, %4279) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mini.method_call"(%4280, %4278, %4275, %4277) {"offset" = 7 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 29 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %4281 = builtin.unrealized_conversion_cast %4241 : !mini.fatptr<"OutOfBounds"> to !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>
      %4282 = "mini.unwrap"(%4281) : (!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %4283 = "mini.coro_yield"(%4282) : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
      %4284 = "mini.wrap"(%4283) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"OutOfBounds">, !mini.nil]>
    }) : (i1) -> ()
    %4285 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %4286 = "mini.unwrap"(%4226) : (!mini.ptr<i32>) -> i32
    %4287 = "mini.unwrap"(%4285) : (!mini.ptr<i32>) -> i32
    %4288 = "mini.comparison"(%4286, %4287) {"op" = "GE"} : (i32, i32) -> i1
    %4289 = "mini.wrap"(%4288) : (i1) -> !mini.ptr<i32>
    %4290 = "mini.unwrap"(%4289) : (!mini.ptr<i32>) -> i1
    "mini.if"(%4290) ({
      %4291 = "mini.get_field"(%4224) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"IntArray">) -> !mini.buffer<!mini.ptr<i32>>
      %4292 = "mini.buffer_get"(%4291, %4226) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
      %4293 = builtin.unrealized_conversion_cast %4292 : !mini.ptr<i32> to !mini.ptr<i32>
      "mini.return"(%4293) : (!mini.ptr<i32>) -> ()
    }) : (i1) -> ()
    %4294 = "mini.get_field"(%4224) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %4295 = "mini.unwrap"(%4294) : (!mini.ptr<i32>) -> i32
    %4296 = "mini.unwrap"(%4226) : (!mini.ptr<i32>) -> i32
    %4297 = "mini.arithmetic"(%4295, %4296) {"op" = "ADD"} : (i32, i32) -> i32
    %4298 = "mini.wrap"(%4297) : (i32) -> !mini.ptr<i32>
    %4299 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %4300 = "mini.unwrap"(%4298) : (!mini.ptr<i32>) -> i32
    %4301 = "mini.unwrap"(%4299) : (!mini.ptr<i32>) -> i32
    %4302 = "mini.comparison"(%4300, %4301) {"op" = "LT"} : (i32, i32) -> i1
    %4303 = "mini.wrap"(%4302) : (i1) -> !mini.ptr<i32>
    %4304 = "mini.unwrap"(%4303) : (!mini.ptr<i32>) -> i1
    "mini.if"(%4304) ({
      %4305 = "mini.get_field"(%4224) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
      %4306 = "mini.unwrap"(%4305) : (!mini.ptr<i32>) -> i32
      %4307 = "mini.unwrap"(%4226) : (!mini.ptr<i32>) -> i32
      %4308 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "OutOfBounds", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !mini.fatptr<"OutOfBounds">
      %4309 = "mini.get_field"(%4224) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
      %4310 = builtin.unrealized_conversion_cast %4309 : !mini.ptr<i32> to !mini.ptr<i32>
      %4311 = "mini.unwrap"(%4310) : (!mini.ptr<i32>) -> i32
      %4312 = builtin.unrealized_conversion_cast %4226 : !mini.ptr<i32> to !mini.ptr<i32>
      %4313 = "mini.unwrap"(%4312) : (!mini.ptr<i32>) -> i32
      %4314 = "mini.unwrap"(%4308) : (!mini.fatptr<"OutOfBounds">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %4315 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %4316 = "mini.parameterizations_array"(%4315, %4315) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mini.method_call"(%4316, %4314, %4311, %4313) {"offset" = 4 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 29 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32) -> ()
      %4317 = "mini.literal"() {"value" = 620 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %4318 = "mini.literal"() {"value" = 59 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %4319 = "mini.create_buffer"(%4318) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
      %4320 = builtin.unrealized_conversion_cast %4319 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
      %4321 = "mini.refer"(%4320) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
      %4322 = "mini.literal"() {"typ" = !llvm.array<58 x i8>, "value" = "C:\\Users\\PaulK\\OneDrive\\Documents\\PL\\PyPL\\tmpnjjh5_8x.mini"} : () -> !llvm.ptr
      %4323 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mini.buffer_set"(%4321, %4323, %4322) {"typ" = !llvm.array<58 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
      %4324 = "mini.literal"() {"value" = 58 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %4325 = "mini.literal"() {"value" = 59 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %4326 = "mini.unwrap"(%4321) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
      %4327 = "mini.unwrap"(%4324) : (!mini.ptr<i32>) -> i32
      %4328 = "mini.unwrap"(%4325) : (!mini.ptr<i32>) -> i32
      %4329 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
      %4330 = "mini.literal"() {"value" = 58 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %4331 = "mini.literal"() {"value" = 59 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %4332 = builtin.unrealized_conversion_cast %4321 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
      %4333 = "mini.unwrap"(%4332) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
      %4334 = builtin.unrealized_conversion_cast %4330 : !mini.ptr<i32> to !mini.ptr<i32>
      %4335 = "mini.unwrap"(%4334) : (!mini.ptr<i32>) -> i32
      %4336 = builtin.unrealized_conversion_cast %4331 : !mini.ptr<i32> to !mini.ptr<i32>
      %4337 = "mini.unwrap"(%4336) : (!mini.ptr<i32>) -> i32
      %4338 = "mini.unwrap"(%4329) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %4339 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
      %4340 = "mini.parameterizations_array"(%4339, %4315, %4315) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mini.method_call"(%4340, %4338, %4333, %4335, %4337) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %4341 = builtin.unrealized_conversion_cast %4317 : !mini.ptr<i32> to !mini.ptr<i32>
      %4342 = "mini.unwrap"(%4341) : (!mini.ptr<i32>) -> i32
      %4343 = "mini.to_fat_ptr"(%4329) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
      %4344 = "mini.unwrap"(%4343) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %4345 = "mini.unwrap"(%4308) : (!mini.fatptr<"OutOfBounds">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %4346 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %4347 = "mini.parameterizations_array"(%4315, %4346) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mini.method_call"(%4347, %4345, %4342, %4344) {"offset" = 7 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 29 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %4348 = builtin.unrealized_conversion_cast %4308 : !mini.fatptr<"OutOfBounds"> to !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>
      %4349 = "mini.unwrap"(%4348) : (!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %4350 = "mini.coro_yield"(%4349) : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
      %4351 = "mini.wrap"(%4350) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"OutOfBounds">, !mini.nil]>
    }) : (i1) -> ()
    %4352 = "mini.get_field"(%4224) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"IntArray">) -> !mini.buffer<!mini.ptr<i32>>
    %4353 = "mini.get_field"(%4224) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %4354 = "mini.unwrap"(%4353) : (!mini.ptr<i32>) -> i32
    %4355 = "mini.unwrap"(%4226) : (!mini.ptr<i32>) -> i32
    %4356 = "mini.arithmetic"(%4354, %4355) {"op" = "ADD"} : (i32, i32) -> i32
    %4357 = "mini.wrap"(%4356) : (i32) -> !mini.ptr<i32>
    %4358 = "mini.buffer_get"(%4352, %4357) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    %4359 = builtin.unrealized_conversion_cast %4358 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.return"(%4359) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "IntArray__index_xPtri32", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb658(%4360 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4361 : !llvm.ptr):
    %4362 = "mini.invariant"(%4361) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4363 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb659] : () -> ()
  ^bb660:
    %4364 = "llvm.mlir.constant"() <{"value" = 34 : i32}> : () -> i32
    "llvm.store"(%4364, %4363) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb661] : () -> ()
  ^bb659:
    %4365 = "llvm.getelementptr"(%4361) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4366 = "mini.checkflag"(%4365) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %4367 = "llvm.load"(%4366) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%4367) [^bb660, ^bb660] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb661:
    %4368 = "llvm.extractvalue"(%4360) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4369 = "llvm.load"(%4363) : (!llvm.ptr) -> i32
    %4370 = "llvm.getelementptr"(%4368, %4369) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4371 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4372 = "llvm.getelementptr"(%4370, %4371) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4372) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B__index_xPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb662(%4373 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4374 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4375 : !llvm.ptr):
    %4376 = "mini.wrap"(%4373) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArray">
    %4377 = "mini.to_fat_ptr"(%4376) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %4378 = "mini.get_field"(%4377) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %4379 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %4380 = "mini.unwrap"(%4378) : (!mini.ptr<i32>) -> i32
    %4381 = "mini.unwrap"(%4379) : (!mini.ptr<i32>) -> i32
    %4382 = "mini.comparison"(%4380, %4381) {"op" = "EQ"} : (i32, i32) -> i1
    %4383 = "mini.wrap"(%4382) : (i1) -> !mini.ptr<i32>
    %4384 = "mini.unwrap"(%4383) : (!mini.ptr<i32>) -> i1
    "mini.if"(%4384) ({
      %4385 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
      %4386 = "mini.unionize"(%4385) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      "mini.return"(%4386) : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
    }) : (i1) -> ()
    %4387 = "mini.get_field"(%4377) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %4388 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %4389 = "mini.unwrap"(%4387) : (!mini.ptr<i32>) -> i32
    %4390 = "mini.unwrap"(%4388) : (!mini.ptr<i32>) -> i32
    %4391 = "mini.arithmetic"(%4389, %4390) {"op" = "SUB"} : (i32, i32) -> i32
    %4392 = "mini.wrap"(%4391) : (i32) -> !mini.ptr<i32>
    %4393 = builtin.unrealized_conversion_cast %4392 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%4377, %4393) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">, !mini.ptr<i32>) -> ()
    %4394 = "mini.get_field"(%4377) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"IntArray">) -> !mini.buffer<!mini.ptr<i32>>
    %4395 = "mini.get_field"(%4377) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %4396 = "mini.buffer_get"(%4394, %4395) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    %4397 = "mini.unionize"(%4396) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    "mini.return"(%4397) : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
  }) {"func_name" = "IntArray_pop_", "result_type" = !llvm.struct<(!llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb663(%4398 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4399 : !llvm.ptr):
    %4400 = "mini.invariant"(%4399) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4401 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb664] : () -> ()
  ^bb664:
    %4402 = "llvm.mlir.constant"() <{"value" = 35 : i32}> : () -> i32
    "llvm.store"(%4402, %4401) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb665] : () -> ()
  ^bb665:
    %4403 = "llvm.extractvalue"(%4398) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4404 = "llvm.load"(%4401) : (!llvm.ptr) -> i32
    %4405 = "llvm.getelementptr"(%4403, %4404) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4406 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4407 = "llvm.getelementptr"(%4405, %4406) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4407) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_pop_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb666(%4408 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4409 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4410 : !llvm.ptr):
    %4411 = "mini.wrap"(%4408) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArray">
    %4412 = "mini.to_fat_ptr"(%4411) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %4413 = "mini.get_field"(%4412) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %4414 = "mini.create_buffer"(%4413) {"typ" = i32, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %4415 = builtin.unrealized_conversion_cast %4414 : !llvm.ptr to !mini.buffer<!mini.ptr<i32>>
    %4416 = "mini.refer"(%4415) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    %4417 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    "mini.while"() ({
      %4418 = "mini.get_field"(%4412) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
      %4419 = "mini.unwrap"(%4417) : (!mini.ptr<i32>) -> i32
      %4420 = "mini.unwrap"(%4418) : (!mini.ptr<i32>) -> i32
      %4421 = "mini.comparison"(%4419, %4420) {"op" = "LT"} : (i32, i32) -> i1
      %4422 = "mini.wrap"(%4421) : (i1) -> !mini.ptr<i32>
      %4423 = "mini.unwrap"(%4422) : (!mini.ptr<i32>) -> i1
    }, {
      %4424 = "mini.get_field"(%4412) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"IntArray">) -> !mini.buffer<!mini.ptr<i32>>
      %4425 = "mini.buffer_get"(%4424, %4417) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
      %4426 = builtin.unrealized_conversion_cast %4425 : !mini.ptr<i32> to !mini.ptr<i32>
      "mini.buffer_set"(%4416, %4417, %4426) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
      %4427 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %4428 = "mini.unwrap"(%4417) : (!mini.ptr<i32>) -> i32
      %4429 = "mini.unwrap"(%4427) : (!mini.ptr<i32>) -> i32
      %4430 = "mini.arithmetic"(%4428, %4429) {"op" = "ADD"} : (i32, i32) -> i32
      %4431 = "mini.wrap"(%4430) : (i32) -> !mini.ptr<i32>
      "mini.castassign"(%4417, %4431) ({
        %4432 = builtin.unrealized_conversion_cast %4431 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %4433 = "mini.get_field"(%4412) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %4434 = "mini.get_field"(%4412) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %4435 = "mini.unwrap"(%4416) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %4436 = "mini.unwrap"(%4433) : (!mini.ptr<i32>) -> i32
    %4437 = "mini.unwrap"(%4434) : (!mini.ptr<i32>) -> i32
    %4438 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "IntArray", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"IntArray">
    %4439 = "mini.get_field"(%4412) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %4440 = "mini.get_field"(%4412) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %4441 = builtin.unrealized_conversion_cast %4416 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %4442 = "mini.unwrap"(%4441) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %4443 = builtin.unrealized_conversion_cast %4439 : !mini.ptr<i32> to !mini.ptr<i32>
    %4444 = "mini.unwrap"(%4443) : (!mini.ptr<i32>) -> i32
    %4445 = builtin.unrealized_conversion_cast %4440 : !mini.ptr<i32> to !mini.ptr<i32>
    %4446 = "mini.unwrap"(%4445) : (!mini.ptr<i32>) -> i32
    %4447 = "mini.unwrap"(%4438) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4448 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri32"]} : () -> !llvm.ptr
    %4449 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %4450 = "mini.parameterizations_array"(%4448, %4449, %4449) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%4450, %4447, %4442, %4444, %4446) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %4451 = "mini.to_fat_ptr"(%4438) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %4452 = "mini.refer"(%4451) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %4453 = "mini.to_fat_ptr"(%4452) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    "mini.return"(%4453) : (!mini.fatptr<"IntArray">) -> ()
  }) {"func_name" = "IntArray_copy_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb667(%4454 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4455 : !llvm.ptr):
    %4456 = "mini.invariant"(%4455) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4457 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb668] : () -> ()
  ^bb668:
    %4458 = "llvm.mlir.constant"() <{"value" = 36 : i32}> : () -> i32
    "llvm.store"(%4458, %4457) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb669] : () -> ()
  ^bb669:
    %4459 = "llvm.extractvalue"(%4454) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4460 = "llvm.load"(%4457) : (!llvm.ptr) -> i32
    %4461 = "llvm.getelementptr"(%4459, %4460) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4462 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4463 = "llvm.getelementptr"(%4461, %4462) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4463) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_copy_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb670(%4464 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4465 : !llvm.ptr):
    %4466 = "mini.invariant"(%4465) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4467 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb671] : () -> ()
  ^bb672:
    %4468 = "llvm.mlir.constant"() <{"value" = 37 : i32}> : () -> i32
    "llvm.store"(%4468, %4467) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb673] : () -> ()
  ^bb671:
    %4469 = "llvm.getelementptr"(%4465) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4470 = "mini.checkflag"(%4469) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %4471 = "llvm.load"(%4470) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%4471) [^bb672, ^bb672] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb673:
    %4472 = "llvm.extractvalue"(%4464) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4473 = "llvm.load"(%4467) : (!llvm.ptr) -> i32
    %4474 = "llvm.getelementptr"(%4472, %4473) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4475 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4476 = "llvm.getelementptr"(%4474, %4475) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4476) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_each_fFunctionPtri32_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb674(%4477 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4478 : !llvm.ptr):
    %4479 = "mini.invariant"(%4478) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4480 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb675] : () -> ()
  ^bb676:
    %4481 = "llvm.mlir.constant"() <{"value" = 38 : i32}> : () -> i32
    "llvm.store"(%4481, %4480) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb677] : () -> ()
  ^bb678:
    %4482 = "llvm.getelementptr"(%4478) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4483 = "mini.checkflag"(%4482) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %4484 = "llvm.load"(%4483) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%4484) [^bb676, ^bb676] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb675:
    %4485 = "llvm.getelementptr"(%4478) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4486 = "mini.checkflag"(%4485) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %4487 = "llvm.load"(%4486) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%4487) [^bb678, ^bb678] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb677:
    %4488 = "llvm.extractvalue"(%4477) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4489 = "llvm.load"(%4480) : (!llvm.ptr) -> i32
    %4490 = "llvm.getelementptr"(%4488, %4489) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4491 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4492 = "llvm.getelementptr"(%4490, %4491) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4492) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb679(%4493 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4494 : !llvm.ptr):
    %4495 = "mini.invariant"(%4494) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4496 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb680] : () -> ()
  ^bb681:
    %4497 = "llvm.mlir.constant"() <{"value" = 39 : i32}> : () -> i32
    "llvm.store"(%4497, %4496) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb682] : () -> ()
  ^bb680:
    %4498 = "llvm.getelementptr"(%4494) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4499 = "mini.checkflag"(%4498) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %4500 = "llvm.load"(%4499) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%4500) [^bb681, ^bb681] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb682:
    %4501 = "llvm.extractvalue"(%4493) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4502 = "llvm.load"(%4496) : (!llvm.ptr) -> i32
    %4503 = "llvm.getelementptr"(%4501, %4502) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4504 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4505 = "llvm.getelementptr"(%4503, %4504) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4505) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_all_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb683(%4506 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4507 : !llvm.ptr):
    %4508 = "mini.invariant"(%4507) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4509 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb684] : () -> ()
  ^bb685:
    %4510 = "llvm.mlir.constant"() <{"value" = 40 : i32}> : () -> i32
    "llvm.store"(%4510, %4509) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb686] : () -> ()
  ^bb684:
    %4511 = "llvm.getelementptr"(%4507) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4512 = "mini.checkflag"(%4511) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %4513 = "llvm.load"(%4512) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%4513) [^bb685, ^bb685] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb686:
    %4514 = "llvm.extractvalue"(%4506) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4515 = "llvm.load"(%4509) : (!llvm.ptr) -> i32
    %4516 = "llvm.getelementptr"(%4514, %4515) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4517 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4518 = "llvm.getelementptr"(%4516, %4517) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4518) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_any_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb687(%4519 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4520 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4521 : !llvm.ptr, %4522 : !llvm.struct<(!llvm.ptr)>):
    %4523 = "mini.wrap"(%4519) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArray">
    %4524 = "mini.to_fat_ptr"(%4523) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %4525 = "mini.wrap"(%4522) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %4526 = builtin.unrealized_conversion_cast %4525 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %4527 = "mini.get_field"(%4524) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %4528 = "mini.create_buffer"(%4527) {"typ" = i32, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %4529 = builtin.unrealized_conversion_cast %4528 : !llvm.ptr to !mini.buffer<!mini.ptr<i32>>
    %4530 = "mini.refer"(%4529) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    %4531 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    "mini.while"() ({
      %4532 = "mini.get_field"(%4524) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
      %4533 = "mini.unwrap"(%4531) : (!mini.ptr<i32>) -> i32
      %4534 = "mini.unwrap"(%4532) : (!mini.ptr<i32>) -> i32
      %4535 = "mini.comparison"(%4533, %4534) {"op" = "LT"} : (i32, i32) -> i1
      %4536 = "mini.wrap"(%4535) : (i1) -> !mini.ptr<i32>
      %4537 = "mini.unwrap"(%4536) : (!mini.ptr<i32>) -> i1
    }, {
      %4538 = "mini.get_field"(%4524) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"IntArray">) -> !mini.buffer<!mini.ptr<i32>>
      %4539 = "mini.buffer_get"(%4538, %4531) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
      %4540 = builtin.unrealized_conversion_cast %4539 : !mini.ptr<i32> to !mini.ptr<i32>
      %4541 = "mini.unwrap"(%4540) : (!mini.ptr<i32>) -> i32
      %4542 = "mini.unwrap"(%4526) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>) -> !llvm.ptr
      %4543 = "mini.fptr_call"(%4542, %4541) {"ret_type" = i32} : (!llvm.ptr, i32) -> !mini.ptr<i32>
      %4544 = builtin.unrealized_conversion_cast %4543 : !mini.ptr<i32> to !mini.ptr<i32>
      "mini.buffer_set"(%4530, %4531, %4544) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
      %4545 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %4546 = "mini.unwrap"(%4531) : (!mini.ptr<i32>) -> i32
      %4547 = "mini.unwrap"(%4545) : (!mini.ptr<i32>) -> i32
      %4548 = "mini.arithmetic"(%4546, %4547) {"op" = "ADD"} : (i32, i32) -> i32
      %4549 = "mini.wrap"(%4548) : (i32) -> !mini.ptr<i32>
      "mini.castassign"(%4531, %4549) ({
        %4550 = builtin.unrealized_conversion_cast %4549 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %4551 = "mini.get_field"(%4524) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %4552 = "mini.get_field"(%4524) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %4553 = "mini.unwrap"(%4530) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %4554 = "mini.unwrap"(%4551) : (!mini.ptr<i32>) -> i32
    %4555 = "mini.unwrap"(%4552) : (!mini.ptr<i32>) -> i32
    %4556 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "IntArray", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"IntArray">
    %4557 = "mini.get_field"(%4524) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %4558 = "mini.get_field"(%4524) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %4559 = builtin.unrealized_conversion_cast %4530 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %4560 = "mini.unwrap"(%4559) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %4561 = builtin.unrealized_conversion_cast %4557 : !mini.ptr<i32> to !mini.ptr<i32>
    %4562 = "mini.unwrap"(%4561) : (!mini.ptr<i32>) -> i32
    %4563 = builtin.unrealized_conversion_cast %4558 : !mini.ptr<i32> to !mini.ptr<i32>
    %4564 = "mini.unwrap"(%4563) : (!mini.ptr<i32>) -> i32
    %4565 = "mini.unwrap"(%4556) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4566 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri32"]} : () -> !llvm.ptr
    %4567 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %4568 = "mini.parameterizations_array"(%4566, %4567, %4567) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%4568, %4565, %4560, %4562, %4564) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %4569 = "mini.to_fat_ptr"(%4556) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %4570 = "mini.refer"(%4569) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %4571 = "mini.to_fat_ptr"(%4570) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntIterable">
    "mini.return"(%4571) : (!mini.fatptr<"IntIterable">) -> ()
  }) {"func_name" = "IntArray_map_fFunctionPtri32_to_Ptri32", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb688(%4572 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4573 : !llvm.ptr):
    %4574 = "mini.invariant"(%4573) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4575 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb689] : () -> ()
  ^bb690:
    %4576 = "llvm.mlir.constant"() <{"value" = 41 : i32}> : () -> i32
    "llvm.store"(%4576, %4575) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb691] : () -> ()
  ^bb689:
    %4577 = "llvm.getelementptr"(%4573) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4578 = "mini.checkflag"(%4577) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %4579 = "llvm.load"(%4578) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%4579) [^bb690, ^bb690] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb691:
    %4580 = "llvm.extractvalue"(%4572) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4581 = "llvm.load"(%4575) : (!llvm.ptr) -> i32
    %4582 = "llvm.getelementptr"(%4580, %4581) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4583 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4584 = "llvm.getelementptr"(%4582, %4583) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4584) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_map_fFunctionPtri32_to_Ptri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb692(%4585 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4586 : !llvm.ptr):
    %4587 = "mini.invariant"(%4586) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4588 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb693] : () -> ()
  ^bb694:
    %4589 = "llvm.mlir.constant"() <{"value" = 42 : i32}> : () -> i32
    "llvm.store"(%4589, %4588) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb695] : () -> ()
  ^bb693:
    %4590 = "llvm.getelementptr"(%4586) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4591 = "mini.checkflag"(%4590) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %4592 = "llvm.load"(%4591) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%4592) [^bb694, ^bb694] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb695:
    %4593 = "llvm.extractvalue"(%4585) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4594 = "llvm.load"(%4588) : (!llvm.ptr) -> i32
    %4595 = "llvm.getelementptr"(%4593, %4594) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4596 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4597 = "llvm.getelementptr"(%4595, %4596) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4597) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_filter_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb696(%4598 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4599 : !llvm.ptr):
    %4600 = "mini.invariant"(%4599) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4601 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb697] : () -> ()
  ^bb698:
    %4602 = "llvm.mlir.constant"() <{"value" = 43 : i32}> : () -> i32
    "llvm.store"(%4602, %4601) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb699] : () -> ()
  ^bb697:
    %4603 = "llvm.getelementptr"(%4599) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4604 = "mini.checkflag"(%4603) {"typ_name" = "IntIterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %4605 = "llvm.load"(%4604) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%4605) [^bb698, ^bb698] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb699:
    %4606 = "llvm.extractvalue"(%4598) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4607 = "llvm.load"(%4601) : (!llvm.ptr) -> i32
    %4608 = "llvm.getelementptr"(%4606, %4607) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4609 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4610 = "llvm.getelementptr"(%4608, %4609) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4610) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_chain_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb700(%4611 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4612 : !llvm.ptr):
    %4613 = "mini.invariant"(%4612) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4614 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb701] : () -> ()
  ^bb702:
    %4615 = "llvm.mlir.constant"() <{"value" = 44 : i32}> : () -> i32
    "llvm.store"(%4615, %4614) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb703] : () -> ()
  ^bb701:
    %4616 = "llvm.getelementptr"(%4612) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4617 = "mini.checkflag"(%4616) {"typ_name" = "IntIterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %4618 = "llvm.load"(%4617) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%4618) [^bb702, ^bb702] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb703:
    %4619 = "llvm.extractvalue"(%4611) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4620 = "llvm.load"(%4614) : (!llvm.ptr) -> i32
    %4621 = "llvm.getelementptr"(%4619, %4620) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4622 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4623 = "llvm.getelementptr"(%4621, %4622) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4623) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_interleave_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb704(%4624 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4625 : !llvm.ptr):
    %4626 = "mini.invariant"(%4625) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4627 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb705] : () -> ()
  ^bb706:
    %4628 = "llvm.mlir.constant"() <{"value" = 45 : i32}> : () -> i32
    "llvm.store"(%4628, %4627) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb707] : () -> ()
  ^bb705:
    %4629 = "llvm.getelementptr"(%4625) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4630 = "mini.checkflag"(%4629) {"typ_name" = "IntIterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %4631 = "llvm.load"(%4630) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%4631) [^bb706, ^bb706] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb707:
    %4632 = "llvm.extractvalue"(%4624) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4633 = "llvm.load"(%4627) : (!llvm.ptr) -> i32
    %4634 = "llvm.getelementptr"(%4632, %4633) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4635 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4636 = "llvm.getelementptr"(%4634, %4635) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4636) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_zip_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb708(%4637 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4638 : !llvm.ptr):
    %4639 = "mini.invariant"(%4638) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4640 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb709] : () -> ()
  ^bb710:
    %4641 = "llvm.mlir.constant"() <{"value" = 46 : i32}> : () -> i32
    "llvm.store"(%4641, %4640) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb711] : () -> ()
  ^bb709:
    %4642 = "llvm.getelementptr"(%4638) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4643 = "mini.checkflag"(%4642) {"typ_name" = "IntIterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %4644 = "llvm.load"(%4643) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%4644) [^bb710, ^bb710] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb711:
    %4645 = "llvm.extractvalue"(%4637) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4646 = "llvm.load"(%4640) : (!llvm.ptr) -> i32
    %4647 = "llvm.getelementptr"(%4645, %4646) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4648 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4649 = "llvm.getelementptr"(%4647, %4648) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4649) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_product_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb712(%4650 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4651 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4652 : !llvm.ptr):
    %4653 = "mini.wrap"(%4650) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArray">
    %4654 = "mini.to_fat_ptr"(%4653) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %4655 = "mini.unwrap"(%4654) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4656 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32)>, "class_name" = "IntArrayIterator", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !mini.fatptr<"IntArrayIterator">
    %4657 = "mini.to_fat_ptr"(%4654) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %4658 = "mini.unwrap"(%4657) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4659 = "mini.unwrap"(%4656) : (!mini.fatptr<"IntArrayIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4660 = "mini.parameterization"() {"id_hierarchy" = ["IntArray"], "name_hierarchy" = ["IntArray"]} : () -> !llvm.ptr
    %4661 = "mini.parameterizations_array"(%4660) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%4661, %4659, %4658) {"offset" = 2 : i32, "vptrs" = [#none], "vtable_size" = 8 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %4662 = "mini.to_fat_ptr"(%4656) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArrayIterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"IntArrayIterator">) -> !mini.fatptr<"Iterator">
    "mini.return"(%4662) : (!mini.fatptr<"Iterator">) -> ()
  }) {"func_name" = "IntArray_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb713(%4663 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4664 : !llvm.ptr):
    %4665 = "mini.invariant"(%4664) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4666 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb714] : () -> ()
  ^bb714:
    %4667 = "llvm.mlir.constant"() <{"value" = 47 : i32}> : () -> i32
    "llvm.store"(%4667, %4666) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb715] : () -> ()
  ^bb715:
    %4668 = "llvm.extractvalue"(%4663) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4669 = "llvm.load"(%4666) : (!llvm.ptr) -> i32
    %4670 = "llvm.getelementptr"(%4668, %4669) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4671 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4672 = "llvm.getelementptr"(%4670, %4671) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4672) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb716(%4673 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4674 : !llvm.ptr):
    %4675 = "mini.invariant"(%4674) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4676 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb717] : () -> ()
  ^bb717:
    %4677 = "llvm.mlir.constant"() <{"value" = 48 : i32}> : () -> i32
    "llvm.store"(%4677, %4676) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb718] : () -> ()
  ^bb718:
    %4678 = "llvm.extractvalue"(%4673) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4679 = "llvm.load"(%4676) : (!llvm.ptr) -> i32
    %4680 = "llvm.getelementptr"(%4678, %4679) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4681 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4682 = "llvm.getelementptr"(%4680, %4681) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4682) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_repr_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_IntArrayIterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32]} : () -> ()
  "mini.getter_def"() {"meth_name" = "IntArrayIterator_getter_array", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntArray", "parameterization" = "_parameterization_IntArray"} : () -> ()
  "mini.setter_def"() {"meth_name" = "IntArrayIterator_setter_array", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntArray", "parameterization" = "_parameterization_IntArray"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "IntArrayIterator_field_array", "getter_name" = "IntArrayIterator_getter_array", "setter_name" = "IntArrayIterator_setter_array"} : () -> ()
  "mini.getter_def"() {"meth_name" = "IntArrayIterator_getter_index", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "IntArrayIterator_setter_index", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "IntArrayIterator_field_index", "getter_name" = "IntArrayIterator_getter_index", "setter_name" = "IntArrayIterator_setter_index"} : () -> ()
  "mini.func"() ({
  ^bb719(%4683 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4684 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4685 : !llvm.ptr, %4686 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %4687 = "mini.wrap"(%4683) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArrayIterator">
    %4688 = "mini.to_fat_ptr"(%4687) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArrayIterator", "to_typ_name" = "IntArrayIterator"} : (!mini.fatptr<"IntArrayIterator">) -> !mini.fatptr<"IntArrayIterator">
    %4689 = "mini.wrap"(%4686) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArray">
    %4690 = "mini.to_fat_ptr"(%4689) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %4691 = "mini.to_fat_ptr"(%4690) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    "mini.set_field"(%4688, %4691) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"IntArrayIterator">, !mini.fatptr<"IntArray">) -> ()
    %4692 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %4693 = builtin.unrealized_conversion_cast %4692 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%4688, %4693) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32, "original_type" = i32} : (!mini.fatptr<"IntArrayIterator">, !mini.ptr<i32>) -> ()
  }) {"func_name" = "IntArrayIterator_init_arrayIntArray", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb720(%4694 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4695 : !llvm.ptr):
    %4696 = "mini.invariant"(%4695) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4697 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb721] : () -> ()
  ^bb722:
    %4698 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
    "llvm.store"(%4698, %4697) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb723] : () -> ()
  ^bb721:
    %4699 = "llvm.getelementptr"(%4695) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4700 = "mini.checkflag"(%4699) {"typ_name" = "IntArray"} : (!llvm.ptr) -> !mini.ptr<i1>
    %4701 = "llvm.load"(%4700) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%4701) [^bb722, ^bb722] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb723:
    %4702 = "llvm.extractvalue"(%4694) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4703 = "llvm.load"(%4697) : (!llvm.ptr) -> i32
    %4704 = "llvm.getelementptr"(%4702, %4703) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4705 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4706 = "llvm.getelementptr"(%4704, %4705) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4706) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArrayIterator_B_init_arrayIntArray", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb724(%4707 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4708 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4709 : !llvm.ptr):
    %4710 = "mini.wrap"(%4707) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArrayIterator">
    %4711 = "mini.to_fat_ptr"(%4710) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArrayIterator", "to_typ_name" = "IntArrayIterator"} : (!mini.fatptr<"IntArrayIterator">) -> !mini.fatptr<"IntArrayIterator">
    %4712 = "mini.get_field"(%4711) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32, "original_type" = i32} : (!mini.fatptr<"IntArrayIterator">) -> !mini.ptr<i32>
    %4713 = "mini.get_field"(%4711) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntArray"} : (!mini.fatptr<"IntArrayIterator">) -> !mini.fatptr<"IntArray">
    %4714 = "mini.unwrap"(%4713) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4715 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %4716 = "mini.method_call"(%4715, %4714) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 77 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.ptr<i32>
    %4717 = builtin.unrealized_conversion_cast %4716 : !mini.ptr<i32> to !mini.ptr<i32>
    %4718 = "mini.unwrap"(%4712) : (!mini.ptr<i32>) -> i32
    %4719 = "mini.unwrap"(%4717) : (!mini.ptr<i32>) -> i32
    %4720 = "mini.comparison"(%4718, %4719) {"op" = "LT"} : (i32, i32) -> i1
    %4721 = "mini.wrap"(%4720) : (i1) -> !mini.ptr<i32>
    %4722 = "mini.unwrap"(%4721) : (!mini.ptr<i32>) -> i1
    "mini.if"(%4722) ({
      %4723 = "mini.get_field"(%4711) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32, "original_type" = i32} : (!mini.fatptr<"IntArrayIterator">) -> !mini.ptr<i32>
      %4724 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %4725 = "mini.unwrap"(%4723) : (!mini.ptr<i32>) -> i32
      %4726 = "mini.unwrap"(%4724) : (!mini.ptr<i32>) -> i32
      %4727 = "mini.arithmetic"(%4725, %4726) {"op" = "ADD"} : (i32, i32) -> i32
      %4728 = "mini.wrap"(%4727) : (i32) -> !mini.ptr<i32>
      %4729 = builtin.unrealized_conversion_cast %4728 : !mini.ptr<i32> to !mini.ptr<i32>
      "mini.set_field"(%4711, %4729) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32, "original_type" = i32} : (!mini.fatptr<"IntArrayIterator">, !mini.ptr<i32>) -> ()
      %4730 = "mini.get_field"(%4711) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntArray"} : (!mini.fatptr<"IntArrayIterator">) -> !mini.fatptr<"IntArray">
      %4731 = "mini.unwrap"(%4730) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %4732 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %4733 = "mini.method_call"(%4732, %4731) {"offset" = 8 : i32, "vptrs" = [], "vtable_size" = 77 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i32>>
      %4734 = builtin.unrealized_conversion_cast %4733 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
      %4735 = "mini.get_field"(%4711) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32, "original_type" = i32} : (!mini.fatptr<"IntArrayIterator">) -> !mini.ptr<i32>
      %4736 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %4737 = "mini.unwrap"(%4735) : (!mini.ptr<i32>) -> i32
      %4738 = "mini.unwrap"(%4736) : (!mini.ptr<i32>) -> i32
      %4739 = "mini.arithmetic"(%4737, %4738) {"op" = "SUB"} : (i32, i32) -> i32
      %4740 = "mini.wrap"(%4739) : (i32) -> !mini.ptr<i32>
      %4741 = "mini.buffer_get"(%4734, %4740) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
      %4742 = "mini.unionize"(%4741) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      "mini.return"(%4742) : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
    }) : (i1) -> ()
    %4743 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
    %4744 = "mini.unionize"(%4743) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    "mini.return"(%4744) : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
  }) {"func_name" = "IntArrayIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb725(%4745 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4746 : !llvm.ptr):
    %4747 = "mini.invariant"(%4746) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4748 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb726] : () -> ()
  ^bb726:
    %4749 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%4749, %4748) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb727] : () -> ()
  ^bb727:
    %4750 = "llvm.extractvalue"(%4745) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4751 = "llvm.load"(%4748) : (!llvm.ptr) -> i32
    %4752 = "llvm.getelementptr"(%4750, %4751) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4753 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4754 = "llvm.getelementptr"(%4752, %4753) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4754) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArrayIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_Pair", "types" = [!llvm.ptr, !llvm.ptr, 0 : i64, 1 : i64]} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "Pair_field_Pair_0"} : () -> ()
  "mini.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "Pair_field_Pair_1"} : () -> ()
  "mini.getter_def"() {"meth_name" = "Pair_getter_first", "types" = [!llvm.ptr, !llvm.ptr, 0 : i64, 1 : i64], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "any_typ", "box"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Pair_setter_first", "types" = [!llvm.ptr, !llvm.ptr, 0 : i64, 1 : i64], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "any_typ", "unbox"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Pair_field_first", "getter_name" = "Pair_getter_first", "setter_name" = "Pair_setter_first"} : () -> ()
  "mini.getter_def"() {"meth_name" = "Pair_getter_second", "types" = [!llvm.ptr, !llvm.ptr, 0 : i64, 1 : i64], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "any_typ", "box"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Pair_setter_second", "types" = [!llvm.ptr, !llvm.ptr, 0 : i64, 1 : i64], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "any_typ", "unbox"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Pair_field_second", "getter_name" = "Pair_getter_second", "setter_name" = "Pair_setter_second"} : () -> ()
  "mini.func"() ({
  ^bb728(%4755 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4756 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4757 : !llvm.ptr, %4758 : !llvm.struct<(!llvm.ptr, i160)>, %4759 : !llvm.struct<(!llvm.ptr, i160)>):
    %4760 = "mini.wrap"(%4755) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "Pair">, !mini.type_param<"U", !mini.any, "Pair">]>
    %4761 = "mini.to_fat_ptr"(%4760) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Pair", "to_typ_name" = "Pair"} : (!mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "Pair">, !mini.type_param<"U", !mini.any, "Pair">]>) -> !mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "Pair">, !mini.type_param<"U", !mini.any, "Pair">]>
    %4762 = "mini.wrap"(%4758) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.type_param<"T", !mini.any, "Pair">
    %4763 = "mini.to_fat_ptr"(%4762) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Pair">) -> !mini.type_param<"T", !mini.any, "Pair">
    %4764 = "mini.to_fat_ptr"(%4763) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Pair">) -> !mini.type_param<"T", !mini.any, "Pair">
    "mini.set_field"(%4761, %4764) {"offset" = 2 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "Pair">, !mini.type_param<"U", !mini.any, "Pair">]>, !mini.type_param<"T", !mini.any, "Pair">) -> ()
    %4765 = "mini.wrap"(%4759) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.type_param<"U", !mini.any, "Pair">
    %4766 = "mini.to_fat_ptr"(%4765) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"U", !mini.any, "Pair">) -> !mini.type_param<"U", !mini.any, "Pair">
    %4767 = "mini.to_fat_ptr"(%4766) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"U", !mini.any, "Pair">) -> !mini.type_param<"U", !mini.any, "Pair">
    "mini.set_field"(%4761, %4767) {"offset" = 3 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "Pair">, !mini.type_param<"U", !mini.any, "Pair">]>, !mini.type_param<"U", !mini.any, "Pair">) -> ()
  }) {"func_name" = "Pair_init_firstT_secondU", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb729(%4768 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4769 : !llvm.ptr):
    %4770 = "mini.invariant"(%4769) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4771 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb730] : () -> ()
  ^bb731:
    %4772 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    "llvm.store"(%4772, %4771) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb732] : () -> ()
  ^bb733:
    %4773 = "llvm.getelementptr"(%4769) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4774 = "mini.checkflag"(%4773) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %4775 = "llvm.load"(%4774) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%4775) [^bb731, ^bb731] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb730:
    %4776 = "llvm.getelementptr"(%4769) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4777 = "mini.checkflag"(%4776) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %4778 = "llvm.load"(%4777) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%4778) [^bb733, ^bb733] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb732:
    %4779 = "llvm.extractvalue"(%4768) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4780 = "llvm.load"(%4771) : (!llvm.ptr) -> i32
    %4781 = "llvm.getelementptr"(%4779, %4780) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4782 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4783 = "llvm.getelementptr"(%4781, %4782) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4783) : (!llvm.ptr) -> ()
  }) {"func_name" = "Pair_B_init_firstT_secondU", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb734(%4784 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4785 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4786 : !llvm.ptr):
    %4787 = "mini.wrap"(%4784) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "Pair">, !mini.type_param<"U", !mini.any, "Pair">]>
    %4788 = "mini.to_fat_ptr"(%4787) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Pair", "to_typ_name" = "Pair"} : (!mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "Pair">, !mini.type_param<"U", !mini.any, "Pair">]>) -> !mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "Pair">, !mini.type_param<"U", !mini.any, "Pair">]>
    %4789 = "mini.get_field"(%4788) {"offset" = 2 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "Pair">, !mini.type_param<"U", !mini.any, "Pair">]>) -> !mini.type_param<"T", !mini.any, "Pair">
    %4790 = "mini.to_fat_ptr"(%4789) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Pair">) -> !mini.type_param<"T", !mini.any, "Pair">
    %4791 = "mini.to_fat_ptr"(%4790) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Pair">) -> !mini.type_param<"T", !mini.any, "Pair">
    "mini.return"(%4791) : (!mini.type_param<"T", !mini.any, "Pair">) -> ()
  }) {"func_name" = "Pair_first_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb735(%4792 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4793 : !llvm.ptr):
    %4794 = "mini.invariant"(%4793) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4795 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb736] : () -> ()
  ^bb736:
    %4796 = "llvm.mlir.constant"() <{"value" = 8 : i32}> : () -> i32
    "llvm.store"(%4796, %4795) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb737] : () -> ()
  ^bb737:
    %4797 = "llvm.extractvalue"(%4792) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4798 = "llvm.load"(%4795) : (!llvm.ptr) -> i32
    %4799 = "llvm.getelementptr"(%4797, %4798) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4800 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4801 = "llvm.getelementptr"(%4799, %4800) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4801) : (!llvm.ptr) -> ()
  }) {"func_name" = "Pair_B_first_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb738(%4802 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4803 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4804 : !llvm.ptr):
    %4805 = "mini.wrap"(%4802) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "Pair">, !mini.type_param<"U", !mini.any, "Pair">]>
    %4806 = "mini.to_fat_ptr"(%4805) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Pair", "to_typ_name" = "Pair"} : (!mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "Pair">, !mini.type_param<"U", !mini.any, "Pair">]>) -> !mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "Pair">, !mini.type_param<"U", !mini.any, "Pair">]>
    %4807 = "mini.get_field"(%4806) {"offset" = 3 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "Pair">, !mini.type_param<"U", !mini.any, "Pair">]>) -> !mini.type_param<"U", !mini.any, "Pair">
    %4808 = "mini.to_fat_ptr"(%4807) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"U", !mini.any, "Pair">) -> !mini.type_param<"U", !mini.any, "Pair">
    %4809 = "mini.to_fat_ptr"(%4808) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"U", !mini.any, "Pair">) -> !mini.type_param<"U", !mini.any, "Pair">
    "mini.return"(%4809) : (!mini.type_param<"U", !mini.any, "Pair">) -> ()
  }) {"func_name" = "Pair_second_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb739(%4810 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4811 : !llvm.ptr):
    %4812 = "mini.invariant"(%4811) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4813 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb740] : () -> ()
  ^bb740:
    %4814 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    "llvm.store"(%4814, %4813) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb741] : () -> ()
  ^bb741:
    %4815 = "llvm.extractvalue"(%4810) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4816 = "llvm.load"(%4813) : (!llvm.ptr) -> i32
    %4817 = "llvm.getelementptr"(%4815, %4816) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4818 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4819 = "llvm.getelementptr"(%4817, %4818) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4819) : (!llvm.ptr) -> ()
  }) {"func_name" = "Pair_B_second_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_Iterator2", "types" = [!llvm.ptr]} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "Iterator2_field_Iterator2_0"} : () -> ()
  "mini.func"() ({
  ^bb742(%4820 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4821 : !llvm.ptr):
    %4822 = "mini.invariant"(%4821) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4823 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb743] : () -> ()
  ^bb743:
    %4824 = "llvm.mlir.constant"() <{"value" = 2 : i32}> : () -> i32
    "llvm.store"(%4824, %4823) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb744] : () -> ()
  ^bb744:
    %4825 = "llvm.extractvalue"(%4820) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4826 = "llvm.load"(%4823) : (!llvm.ptr) -> i32
    %4827 = "llvm.getelementptr"(%4825, %4826) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<3 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4828 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4829 = "llvm.getelementptr"(%4827, %4828) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4829) : (!llvm.ptr) -> ()
  }) {"func_name" = "Iterator2_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_Iterable2", "types" = [!llvm.ptr]} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "Iterable2_field_Iterable2_0"} : () -> ()
  "mini.func"() ({
  ^bb745(%4830 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4831 : !llvm.ptr):
    %4832 = "mini.invariant"(%4831) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4833 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb746] : () -> ()
  ^bb746:
    %4834 = "llvm.mlir.constant"() <{"value" = 12 : i32}> : () -> i32
    "llvm.store"(%4834, %4833) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb747] : () -> ()
  ^bb747:
    %4835 = "llvm.extractvalue"(%4830) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4836 = "llvm.load"(%4833) : (!llvm.ptr) -> i32
    %4837 = "llvm.getelementptr"(%4835, %4836) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<23 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4838 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4839 = "llvm.getelementptr"(%4837, %4838) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4839) : (!llvm.ptr) -> ()
  }) {"func_name" = "Iterable2_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb748(%4840 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4841 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4842 : !llvm.ptr, %4843 : !llvm.struct<(!llvm.ptr)>):
    %4844 = "mini.wrap"(%4840) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %4845 = "mini.to_fat_ptr"(%4844) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %4846 = "mini.wrap"(%4843) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.type_param<"T", !mini.any, "Iterable2">], !mini.any, !mini.nothing>
    %4847 = builtin.unrealized_conversion_cast %4846 : !mini.function<[!mini.type_param<"T", !mini.any, "Iterable2">], !mini.any, !mini.nothing> to !mini.function<[!mini.type_param<"T", !mini.any, "Iterable2">], !mini.any, !mini.nothing>
    %4848 = "mini.unwrap"(%4845) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4849 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %4850 = "mini.method_call"(%4849, %4848) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %4851 = "mini.to_fat_ptr"(%4850) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %4852 = "mini.to_fat_ptr"(%4851) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %4853 = "mini.refer"(%4852) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    "mini.while"() ({
      %4854 = "mini.unwrap"(%4853) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %4855 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %4856 = "mini.method_call"(%4855, %4854) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]>
      %4857 = builtin.unrealized_conversion_cast %4856 : !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]> to !mini.union<[!mini.type_param<"T", !mini.any, "Iterable2">, !mini.nil]>
      %4858 = "mini.get_type_field"(%4845) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.reified_type
      %4859 = "mini.checkflag"(%4857) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterable2">, !mini.nil]>) -> !mini.ptr<i1>
      %4860 = "mini.unwrap"(%4859) : (!mini.ptr<i1>) -> i1
    }, {
      %4861 = "mini.to_fat_ptr"(%4857) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterable2">, !mini.nil]>) -> !mini.type_param<"T", !mini.any, "Iterable2">
      %4862 = "mini.to_fat_ptr"(%4861) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Iterable2">) -> !mini.type_param<"T", !mini.any, "Iterable2">
      %4863 = "mini.unwrap"(%4862) : (!mini.type_param<"T", !mini.any, "Iterable2">) -> !llvm.struct<(!llvm.ptr, i160)>
      %4864 = "mini.unwrap"(%4847) : (!mini.function<[!mini.type_param<"T", !mini.any, "Iterable2">], !mini.any, !mini.nothing>) -> !llvm.ptr
      "mini.fptr_call"(%4864, %4863) {"ret_type" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      "mini.castassign"(%4857, %4861) ({
        %4865 = "mini.to_fat_ptr"(%4861) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Iterable2">) -> !mini.type_param<"T", !mini.any, "Iterable2">
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterable2">, !mini.nil]>, !mini.type_param<"T", !mini.any, "Iterable2">) -> ()
    }) : () -> ()
  }) {"func_name" = "Iterable2_each_fFunctionT_to_Nothing", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb749(%4866 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4867 : !llvm.ptr):
    %4868 = "mini.invariant"(%4867) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4869 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb750] : () -> ()
  ^bb751:
    %4870 = "llvm.mlir.constant"() <{"value" = 13 : i32}> : () -> i32
    "llvm.store"(%4870, %4869) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb752] : () -> ()
  ^bb750:
    %4871 = "llvm.getelementptr"(%4867) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4872 = "mini.checkflag"(%4871) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %4873 = "llvm.load"(%4872) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%4873) [^bb751, ^bb751] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb752:
    %4874 = "llvm.extractvalue"(%4866) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4875 = "llvm.load"(%4869) : (!llvm.ptr) -> i32
    %4876 = "llvm.getelementptr"(%4874, %4875) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<23 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4877 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4878 = "llvm.getelementptr"(%4876, %4877) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4878) : (!llvm.ptr) -> ()
  }) {"func_name" = "Iterable2_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb753(%4879 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4880 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4881 : !llvm.ptr, %4882 : !llvm.struct<(!llvm.ptr, i160)>, %4883 : !llvm.struct<(!llvm.ptr)>):
    %4884 = "mini.wrap"(%4879) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %4885 = "mini.to_fat_ptr"(%4884) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %4886 = "mini.wrap"(%4882) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.type_param<"T", !mini.any, "Iterable2">
    %4887 = "mini.to_fat_ptr"(%4886) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Iterable2">) -> !mini.type_param<"T", !mini.any, "Iterable2">
    %4888 = "mini.wrap"(%4883) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.type_param<"T", !mini.any, "Iterable2">, !mini.type_param<"T", !mini.any, "Iterable2">], !mini.any, !mini.type_param<"T", !mini.any, "Iterable2">>
    %4889 = builtin.unrealized_conversion_cast %4888 : !mini.function<[!mini.type_param<"T", !mini.any, "Iterable2">, !mini.type_param<"T", !mini.any, "Iterable2">], !mini.any, !mini.type_param<"T", !mini.any, "Iterable2">> to !mini.function<[!mini.type_param<"T", !mini.any, "Iterable2">, !mini.type_param<"T", !mini.any, "Iterable2">], !mini.any, !mini.type_param<"T", !mini.any, "Iterable2">>
    %4890 = "mini.unwrap"(%4885) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4891 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %4892 = "mini.method_call"(%4891, %4890) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %4893 = "mini.to_fat_ptr"(%4892) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %4894 = "mini.to_fat_ptr"(%4893) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %4895 = "mini.refer"(%4894) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    "mini.while"() ({
      %4896 = "mini.unwrap"(%4895) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %4897 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %4898 = "mini.method_call"(%4897, %4896) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]>
      %4899 = builtin.unrealized_conversion_cast %4898 : !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]> to !mini.union<[!mini.type_param<"T", !mini.any, "Iterable2">, !mini.nil]>
      %4900 = "mini.get_type_field"(%4885) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.reified_type
      %4901 = "mini.checkflag"(%4899) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterable2">, !mini.nil]>) -> !mini.ptr<i1>
      %4902 = "mini.unwrap"(%4901) : (!mini.ptr<i1>) -> i1
    }, {
      %4903 = "mini.to_fat_ptr"(%4899) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterable2">, !mini.nil]>) -> !mini.type_param<"T", !mini.any, "Iterable2">
      %4904 = "mini.to_fat_ptr"(%4887) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Iterable2">) -> !mini.type_param<"T", !mini.any, "Iterable2">
      %4905 = "mini.unwrap"(%4904) : (!mini.type_param<"T", !mini.any, "Iterable2">) -> !llvm.struct<(!llvm.ptr, i160)>
      %4906 = "mini.to_fat_ptr"(%4903) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Iterable2">) -> !mini.type_param<"T", !mini.any, "Iterable2">
      %4907 = "mini.unwrap"(%4906) : (!mini.type_param<"T", !mini.any, "Iterable2">) -> !llvm.struct<(!llvm.ptr, i160)>
      %4908 = "mini.unwrap"(%4889) : (!mini.function<[!mini.type_param<"T", !mini.any, "Iterable2">, !mini.type_param<"T", !mini.any, "Iterable2">], !mini.any, !mini.type_param<"T", !mini.any, "Iterable2">>) -> !llvm.ptr
      %4909 = "mini.fptr_call"(%4908, %4905, %4907) {"ret_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> !mini.type_param<"T", !mini.any, "Iterable2">
      "mini.castassign"(%4887, %4909) ({
        %4910 = "mini.to_fat_ptr"(%4909) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Iterable2">) -> !mini.type_param<"T", !mini.any, "Iterable2">
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Iterable2">, !mini.type_param<"T", !mini.any, "Iterable2">) -> ()
      "mini.castassign"(%4899, %4903) ({
        %4911 = "mini.to_fat_ptr"(%4903) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Iterable2">) -> !mini.type_param<"T", !mini.any, "Iterable2">
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterable2">, !mini.nil]>, !mini.type_param<"T", !mini.any, "Iterable2">) -> ()
    }) : () -> ()
    %4912 = "mini.to_fat_ptr"(%4887) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Iterable2">) -> !mini.type_param<"T", !mini.any, "Iterable2">
    "mini.return"(%4912) : (!mini.type_param<"T", !mini.any, "Iterable2">) -> ()
  }) {"func_name" = "Iterable2_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb754(%4913 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4914 : !llvm.ptr):
    %4915 = "mini.invariant"(%4914) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4916 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb755] : () -> ()
  ^bb756:
    %4917 = "llvm.mlir.constant"() <{"value" = 14 : i32}> : () -> i32
    "llvm.store"(%4917, %4916) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb757] : () -> ()
  ^bb758:
    %4918 = "llvm.getelementptr"(%4914) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4919 = "mini.checkflag"(%4918) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %4920 = "llvm.load"(%4919) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%4920) [^bb756, ^bb756] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb755:
    %4921 = "llvm.getelementptr"(%4914) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4922 = "mini.checkflag"(%4921) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %4923 = "llvm.load"(%4922) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%4923) [^bb758, ^bb758] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb757:
    %4924 = "llvm.extractvalue"(%4913) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4925 = "llvm.load"(%4916) : (!llvm.ptr) -> i32
    %4926 = "llvm.getelementptr"(%4924, %4925) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<23 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4927 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4928 = "llvm.getelementptr"(%4926, %4927) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4928) : (!llvm.ptr) -> ()
  }) {"func_name" = "Iterable2_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb759(%4929 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4930 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4931 : !llvm.ptr, %4932 : !llvm.struct<(!llvm.ptr)>):
    %4933 = "mini.wrap"(%4929) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %4934 = "mini.to_fat_ptr"(%4933) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %4935 = "mini.wrap"(%4932) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.type_param<"T", !mini.any, "Iterable2">], !mini.any, !mini.ptr<i1>>
    %4936 = builtin.unrealized_conversion_cast %4935 : !mini.function<[!mini.type_param<"T", !mini.any, "Iterable2">], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.type_param<"T", !mini.any, "Iterable2">], !mini.any, !mini.ptr<i1>>
    %4937 = "mini.unwrap"(%4934) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4938 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %4939 = "mini.method_call"(%4938, %4937) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %4940 = "mini.to_fat_ptr"(%4939) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %4941 = "mini.to_fat_ptr"(%4940) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %4942 = "mini.refer"(%4941) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    "mini.while"() ({
      %4943 = "mini.unwrap"(%4942) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %4944 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %4945 = "mini.method_call"(%4944, %4943) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]>
      %4946 = builtin.unrealized_conversion_cast %4945 : !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]> to !mini.union<[!mini.type_param<"T", !mini.any, "Iterable2">, !mini.nil]>
      %4947 = "mini.get_type_field"(%4934) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.reified_type
      %4948 = "mini.checkflag"(%4946) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterable2">, !mini.nil]>) -> !mini.ptr<i1>
      %4949 = "mini.unwrap"(%4948) : (!mini.ptr<i1>) -> i1
    }, {
      %4950 = "mini.to_fat_ptr"(%4946) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterable2">, !mini.nil]>) -> !mini.type_param<"T", !mini.any, "Iterable2">
      %4951 = "mini.to_fat_ptr"(%4950) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Iterable2">) -> !mini.type_param<"T", !mini.any, "Iterable2">
      %4952 = "mini.unwrap"(%4951) : (!mini.type_param<"T", !mini.any, "Iterable2">) -> !llvm.struct<(!llvm.ptr, i160)>
      %4953 = "mini.unwrap"(%4936) : (!mini.function<[!mini.type_param<"T", !mini.any, "Iterable2">], !mini.any, !mini.ptr<i1>>) -> !llvm.ptr
      %4954 = "mini.fptr_call"(%4953, %4952) {"ret_type" = i1} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> !mini.ptr<i1>
      %4955 = "mini.unwrap"(%4954) : (!mini.ptr<i1>) -> i1
      "mini.if"(%4955) ({
        "mini.continue"() [^bb760] : () -> ()
      }) : (i1) -> ()
      %4956 = "mini.literal"() {"value" = false, "typ" = i1} : () -> !mini.ptr<i1>
      %4957 = builtin.unrealized_conversion_cast %4956 : !mini.ptr<i1> to !mini.ptr<i1>
      "mini.return"(%4957) : (!mini.ptr<i1>) -> ()
      "mini.castassign"(%4946, %4950) ({
        %4958 = "mini.to_fat_ptr"(%4950) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Iterable2">) -> !mini.type_param<"T", !mini.any, "Iterable2">
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterable2">, !mini.nil]>, !mini.type_param<"T", !mini.any, "Iterable2">) -> ()
    }) : () -> ()
    %4959 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
    %4960 = builtin.unrealized_conversion_cast %4959 : !mini.ptr<i1> to !mini.ptr<i1>
    "mini.return"(%4960) : (!mini.ptr<i1>) -> ()
  }) {"func_name" = "Iterable2_all_fFunctionT_to_Ptri1", "result_type" = i1, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb761(%4961 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4962 : !llvm.ptr):
    %4963 = "mini.invariant"(%4962) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4964 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb762] : () -> ()
  ^bb763:
    %4965 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
    "llvm.store"(%4965, %4964) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb764] : () -> ()
  ^bb762:
    %4966 = "llvm.getelementptr"(%4962) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4967 = "mini.checkflag"(%4966) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %4968 = "llvm.load"(%4967) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%4968) [^bb763, ^bb763] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb764:
    %4969 = "llvm.extractvalue"(%4961) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4970 = "llvm.load"(%4964) : (!llvm.ptr) -> i32
    %4971 = "llvm.getelementptr"(%4969, %4970) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<23 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4972 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4973 = "llvm.getelementptr"(%4971, %4972) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4973) : (!llvm.ptr) -> ()
  }) {"func_name" = "Iterable2_B_all_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb765(%4974 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4975 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4976 : !llvm.ptr, %4977 : !llvm.struct<(!llvm.ptr)>):
    %4978 = "mini.wrap"(%4974) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %4979 = "mini.to_fat_ptr"(%4978) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %4980 = "mini.wrap"(%4977) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.type_param<"T", !mini.any, "Iterable2">], !mini.any, !mini.ptr<i1>>
    %4981 = builtin.unrealized_conversion_cast %4980 : !mini.function<[!mini.type_param<"T", !mini.any, "Iterable2">], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.type_param<"T", !mini.any, "Iterable2">], !mini.any, !mini.ptr<i1>>
    %4982 = "mini.unwrap"(%4979) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4983 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %4984 = "mini.method_call"(%4983, %4982) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %4985 = "mini.to_fat_ptr"(%4984) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %4986 = "mini.to_fat_ptr"(%4985) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %4987 = "mini.refer"(%4986) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    "mini.while"() ({
      %4988 = "mini.unwrap"(%4987) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %4989 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %4990 = "mini.method_call"(%4989, %4988) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]>
      %4991 = builtin.unrealized_conversion_cast %4990 : !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]> to !mini.union<[!mini.type_param<"T", !mini.any, "Iterable2">, !mini.nil]>
      %4992 = "mini.get_type_field"(%4979) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.reified_type
      %4993 = "mini.checkflag"(%4991) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterable2">, !mini.nil]>) -> !mini.ptr<i1>
      %4994 = "mini.unwrap"(%4993) : (!mini.ptr<i1>) -> i1
    }, {
      %4995 = "mini.to_fat_ptr"(%4991) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterable2">, !mini.nil]>) -> !mini.type_param<"T", !mini.any, "Iterable2">
      %4996 = "mini.to_fat_ptr"(%4995) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Iterable2">) -> !mini.type_param<"T", !mini.any, "Iterable2">
      %4997 = "mini.unwrap"(%4996) : (!mini.type_param<"T", !mini.any, "Iterable2">) -> !llvm.struct<(!llvm.ptr, i160)>
      %4998 = "mini.unwrap"(%4981) : (!mini.function<[!mini.type_param<"T", !mini.any, "Iterable2">], !mini.any, !mini.ptr<i1>>) -> !llvm.ptr
      %4999 = "mini.fptr_call"(%4998, %4997) {"ret_type" = i1} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> !mini.ptr<i1>
      %5000 = "mini.unwrap"(%4999) : (!mini.ptr<i1>) -> i1
      "mini.if"(%5000) ({
        %5001 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
        %5002 = builtin.unrealized_conversion_cast %5001 : !mini.ptr<i1> to !mini.ptr<i1>
        "mini.return"(%5002) : (!mini.ptr<i1>) -> ()
      }) : (i1) -> ()
      "mini.castassign"(%4991, %4995) ({
        %5003 = "mini.to_fat_ptr"(%4995) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Iterable2">) -> !mini.type_param<"T", !mini.any, "Iterable2">
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterable2">, !mini.nil]>, !mini.type_param<"T", !mini.any, "Iterable2">) -> ()
    }) : () -> ()
    %5004 = "mini.literal"() {"value" = false, "typ" = i1} : () -> !mini.ptr<i1>
    %5005 = builtin.unrealized_conversion_cast %5004 : !mini.ptr<i1> to !mini.ptr<i1>
    "mini.return"(%5005) : (!mini.ptr<i1>) -> ()
  }) {"func_name" = "Iterable2_any_fFunctionT_to_Ptri1", "result_type" = i1, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb766(%5006 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5007 : !llvm.ptr):
    %5008 = "mini.invariant"(%5007) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5009 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb767] : () -> ()
  ^bb768:
    %5010 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
    "llvm.store"(%5010, %5009) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb769] : () -> ()
  ^bb767:
    %5011 = "llvm.getelementptr"(%5007) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5012 = "mini.checkflag"(%5011) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5013 = "llvm.load"(%5012) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5013) [^bb768, ^bb768] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb769:
    %5014 = "llvm.extractvalue"(%5006) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5015 = "llvm.load"(%5009) : (!llvm.ptr) -> i32
    %5016 = "llvm.getelementptr"(%5014, %5015) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<23 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5017 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5018 = "llvm.getelementptr"(%5016, %5017) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5018) : (!llvm.ptr) -> ()
  }) {"func_name" = "Iterable2_B_any_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb770(%5019 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5020 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5021 : !llvm.ptr, %5022 : !llvm.struct<(!llvm.ptr)>):
    %5023 = "mini.wrap"(%5019) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %5024 = "mini.to_fat_ptr"(%5023) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %5025 = "mini.wrap"(%5022) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.type_param<"T", !mini.any, "Iterable2">], !mini.any, !mini.type_param<"U", !mini.any, "Iterable2">>
    %5026 = builtin.unrealized_conversion_cast %5025 : !mini.function<[!mini.type_param<"T", !mini.any, "Iterable2">], !mini.any, !mini.type_param<"U", !mini.any, "Iterable2">> to !mini.function<[!mini.type_param<"T", !mini.any, "Iterable2">], !mini.any, !mini.type_param<"U", !mini.any, "Iterable2">>
    %5027 = "mini.unwrap"(%5024) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5028 = "mini.unwrap"(%5026) : (!mini.function<[!mini.type_param<"T", !mini.any, "Iterable2">], !mini.any, !mini.type_param<"U", !mini.any, "Iterable2">>) -> !llvm.struct<(!llvm.ptr)>
    %5029 = "mini.get_type_field"(%5024) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.reified_type
    %5030 = "llvm.getelementptr"(%5021) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5031 = "llvm.load"(%5030) : (!llvm.ptr) -> !llvm.ptr
    %5032 = "mini.parameterization_indexation"(%5031) {"indices" = [0 : i32]} : (!llvm.ptr) -> !llvm.ptr
    %5033 = "mini.new"(%5029, %5032) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "MapIterable2", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!mini.reified_type, !llvm.ptr) -> !mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.any, "Iterable2">, !mini.type_param<"U", !mini.any, "Iterable2">]>
    %5034 = "mini.to_fat_ptr"(%5024) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">]>
    %5035 = "mini.unwrap"(%5034) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5036 = builtin.unrealized_conversion_cast %5026 : !mini.function<[!mini.type_param<"T", !mini.any, "Iterable2">], !mini.any, !mini.type_param<"U", !mini.any, "Iterable2">> to !mini.function<[!mini.type_param<"T", !mini.any, "MapIterable2">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterable2">>
    %5037 = "mini.unwrap"(%5036) : (!mini.function<[!mini.type_param<"T", !mini.any, "MapIterable2">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterable2">>) -> !llvm.struct<(!llvm.ptr)>
    %5038 = "mini.unwrap"(%5033) : (!mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.any, "Iterable2">, !mini.type_param<"U", !mini.any, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5039 = "mini.parameterization"(%5029) {"id_hierarchy" = ["Iterable2", [0 : i32]], "name_hierarchy" = ["Iterable2Iterable2.T_subtype_Any", ["Iterable2.T_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %5040 = "mini.parameterization"(%5032, %5029) {"id_hierarchy" = ["function_typ", [0 : i32], [1 : i32]], "name_hierarchy" = ["FunctionIterable2.T_subtype_Any_to_Iterable2.U_subtype_Any", ["Iterable2.U_subtype_Any"], ["Iterable2.T_subtype_Any"]]} : (!llvm.ptr, !mini.reified_type) -> !llvm.ptr
    %5041 = "mini.parameterizations_array"(%5039, %5040) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%5041, %5038, %5035, %5037) {"offset" = 4 : i32, "vptrs" = [#none, "function_typ"], "vtable_size" = 51 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
    %5042 = "mini.to_fat_ptr"(%5033) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "MapIterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.any, "Iterable2">, !mini.type_param<"U", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "Iterable2">]>
    "mini.return"(%5042) : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "Iterable2">]>) -> ()
  }) {"func_name" = "Iterable2_map_fFunctionT_to_U", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb771(%5043 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5044 : !llvm.ptr):
    %5045 = "mini.invariant"(%5044) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5046 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb772] : () -> ()
  ^bb773:
    %5047 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
    "llvm.store"(%5047, %5046) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb774] : () -> ()
  ^bb772:
    %5048 = "llvm.getelementptr"(%5044) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5049 = "mini.checkflag"(%5048) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5050 = "llvm.load"(%5049) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5050) [^bb773, ^bb773] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb774:
    %5051 = "llvm.extractvalue"(%5043) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5052 = "llvm.load"(%5046) : (!llvm.ptr) -> i32
    %5053 = "llvm.getelementptr"(%5051, %5052) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<23 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5054 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5055 = "llvm.getelementptr"(%5053, %5054) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5055) : (!llvm.ptr) -> ()
  }) {"func_name" = "Iterable2_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb775(%5056 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5057 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5058 : !llvm.ptr, %5059 : !llvm.struct<(!llvm.ptr)>):
    %5060 = "mini.wrap"(%5056) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %5061 = "mini.to_fat_ptr"(%5060) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %5062 = "mini.wrap"(%5059) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.type_param<"T", !mini.any, "Iterable2">], !mini.any, !mini.ptr<i1>>
    %5063 = builtin.unrealized_conversion_cast %5062 : !mini.function<[!mini.type_param<"T", !mini.any, "Iterable2">], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.type_param<"T", !mini.any, "Iterable2">], !mini.any, !mini.ptr<i1>>
    %5064 = "mini.unwrap"(%5061) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5065 = "mini.unwrap"(%5063) : (!mini.function<[!mini.type_param<"T", !mini.any, "Iterable2">], !mini.any, !mini.ptr<i1>>) -> !llvm.struct<(!llvm.ptr)>
    %5066 = "mini.get_type_field"(%5061) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.reified_type
    %5067 = "mini.new"(%5066) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "FilterIterable2", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!mini.reified_type) -> !mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %5068 = "mini.to_fat_ptr"(%5061) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>
    %5069 = "mini.unwrap"(%5068) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5070 = builtin.unrealized_conversion_cast %5063 : !mini.function<[!mini.type_param<"T", !mini.any, "Iterable2">], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterable2">], !mini.any, !mini.ptr<i1>>
    %5071 = "mini.unwrap"(%5070) : (!mini.function<[!mini.type_param<"T", !mini.any, "FilterIterable2">], !mini.any, !mini.ptr<i1>>) -> !llvm.struct<(!llvm.ptr)>
    %5072 = "mini.unwrap"(%5067) : (!mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5073 = "mini.parameterization"(%5066) {"id_hierarchy" = ["Iterable2", [0 : i32]], "name_hierarchy" = ["Iterable2Iterable2.T_subtype_Any", ["Iterable2.T_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %5074 = "mini.parameterization"(%5066) {"id_hierarchy" = ["function_typ", ["bool_typ"], [0 : i32]], "name_hierarchy" = ["FunctionIterable2.T_subtype_Any_to_Ptri1", ["Ptri1"], ["Iterable2.T_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %5075 = "mini.parameterizations_array"(%5073, %5074) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%5075, %5072, %5069, %5071) {"offset" = 3 : i32, "vptrs" = [#none, "function_typ"], "vtable_size" = 50 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
    %5076 = "mini.to_fat_ptr"(%5067) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "FilterIterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    "mini.return"(%5076) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> ()
  }) {"func_name" = "Iterable2_filter_fFunctionT_to_Ptri1", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb776(%5077 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5078 : !llvm.ptr):
    %5079 = "mini.invariant"(%5078) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5080 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb777] : () -> ()
  ^bb778:
    %5081 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%5081, %5080) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb779] : () -> ()
  ^bb777:
    %5082 = "llvm.getelementptr"(%5078) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5083 = "mini.checkflag"(%5082) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5084 = "llvm.load"(%5083) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5084) [^bb778, ^bb778] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb779:
    %5085 = "llvm.extractvalue"(%5077) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5086 = "llvm.load"(%5080) : (!llvm.ptr) -> i32
    %5087 = "llvm.getelementptr"(%5085, %5086) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<23 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5088 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5089 = "llvm.getelementptr"(%5087, %5088) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5089) : (!llvm.ptr) -> ()
  }) {"func_name" = "Iterable2_B_filter_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb780(%5090 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5091 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5092 : !llvm.ptr, %5093 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %5094 = "mini.wrap"(%5090) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %5095 = "mini.to_fat_ptr"(%5094) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %5096 = "mini.wrap"(%5093) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %5097 = "mini.to_fat_ptr"(%5096) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %5098 = "mini.unwrap"(%5095) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5099 = "mini.unwrap"(%5097) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5100 = "mini.get_type_field"(%5095) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.reified_type
    %5101 = "mini.new"(%5100) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "ChainIterable2", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!mini.reified_type) -> !mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %5102 = "mini.to_fat_ptr"(%5095) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>
    %5103 = "mini.unwrap"(%5102) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5104 = "mini.to_fat_ptr"(%5097) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>
    %5105 = "mini.unwrap"(%5104) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5106 = "mini.unwrap"(%5101) : (!mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5107 = "mini.parameterization"(%5100) {"id_hierarchy" = ["Iterable2", [0 : i32]], "name_hierarchy" = ["Iterable2Iterable2.T_subtype_Any", ["Iterable2.T_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %5108 = "mini.parameterizations_array"(%5107, %5107) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%5108, %5106, %5103, %5105) {"offset" = 3 : i32, "vptrs" = [#none, #none], "vtable_size" = 50 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %5109 = "mini.to_fat_ptr"(%5101) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ChainIterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    "mini.return"(%5109) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> ()
  }) {"func_name" = "Iterable2_chain_otherIterable2T", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb781(%5110 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5111 : !llvm.ptr):
    %5112 = "mini.invariant"(%5111) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5113 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb782] : () -> ()
  ^bb783:
    %5114 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
    "llvm.store"(%5114, %5113) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb784] : () -> ()
  ^bb782:
    %5115 = "llvm.getelementptr"(%5111) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5116 = "mini.checkflag"(%5115) {"typ_name" = "Iterable2"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5117 = "llvm.load"(%5116) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5117) [^bb783, ^bb783] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb784:
    %5118 = "llvm.extractvalue"(%5110) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5119 = "llvm.load"(%5113) : (!llvm.ptr) -> i32
    %5120 = "llvm.getelementptr"(%5118, %5119) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<23 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5121 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5122 = "llvm.getelementptr"(%5120, %5121) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5122) : (!llvm.ptr) -> ()
  }) {"func_name" = "Iterable2_B_chain_otherIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb785(%5123 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5124 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5125 : !llvm.ptr, %5126 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %5127 = "mini.wrap"(%5123) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %5128 = "mini.to_fat_ptr"(%5127) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %5129 = "mini.wrap"(%5126) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %5130 = "mini.to_fat_ptr"(%5129) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %5131 = "mini.unwrap"(%5128) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5132 = "mini.unwrap"(%5130) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5133 = "mini.get_type_field"(%5128) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.reified_type
    %5134 = "mini.new"(%5133) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "InterleaveIterable2", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!mini.reified_type) -> !mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %5135 = "mini.to_fat_ptr"(%5128) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>
    %5136 = "mini.unwrap"(%5135) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5137 = "mini.to_fat_ptr"(%5130) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>
    %5138 = "mini.unwrap"(%5137) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5139 = "mini.unwrap"(%5134) : (!mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5140 = "mini.parameterization"(%5133) {"id_hierarchy" = ["Iterable2", [0 : i32]], "name_hierarchy" = ["Iterable2Iterable2.T_subtype_Any", ["Iterable2.T_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %5141 = "mini.parameterizations_array"(%5140, %5140) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%5141, %5139, %5136, %5138) {"offset" = 3 : i32, "vptrs" = [#none, #none], "vtable_size" = 50 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %5142 = "mini.to_fat_ptr"(%5134) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "InterleaveIterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    "mini.return"(%5142) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> ()
  }) {"func_name" = "Iterable2_interleave_otherIterable2T", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb786(%5143 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5144 : !llvm.ptr):
    %5145 = "mini.invariant"(%5144) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5146 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb787] : () -> ()
  ^bb788:
    %5147 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
    "llvm.store"(%5147, %5146) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb789] : () -> ()
  ^bb787:
    %5148 = "llvm.getelementptr"(%5144) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5149 = "mini.checkflag"(%5148) {"typ_name" = "Iterable2"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5150 = "llvm.load"(%5149) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5150) [^bb788, ^bb788] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb789:
    %5151 = "llvm.extractvalue"(%5143) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5152 = "llvm.load"(%5146) : (!llvm.ptr) -> i32
    %5153 = "llvm.getelementptr"(%5151, %5152) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<23 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5154 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5155 = "llvm.getelementptr"(%5153, %5154) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5155) : (!llvm.ptr) -> ()
  }) {"func_name" = "Iterable2_B_interleave_otherIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb790(%5156 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5157 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5158 : !llvm.ptr, %5159 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %5160 = "mini.wrap"(%5156) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %5161 = "mini.to_fat_ptr"(%5160) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %5162 = "mini.wrap"(%5159) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "Iterable2">]>
    %5163 = "mini.to_fat_ptr"(%5162) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "Iterable2">]>
    %5164 = "mini.unwrap"(%5161) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5165 = "mini.unwrap"(%5163) : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5166 = "mini.get_type_field"(%5161) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.reified_type
    %5167 = "mini.wrap"(%5159) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5168 = "mini.get_type_field"(%5167) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!llvm.ptr) -> !mini.reified_type
    %5169 = "mini.wrap"(%5159) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5170 = "mini.get_type_field"(%5169) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!llvm.ptr) -> !mini.reified_type
    %5171 = "mini.parameterization"(%5166, %5170) {"id_hierarchy" = ["Pair", [0 : i32], [1 : i32]], "name_hierarchy" = ["PairIterable2.T_subtype_Any._Iterable2.U_subtype_Any", ["Iterable2.T_subtype_Any"], ["Iterable2.U_subtype_Any"]]} : (!mini.reified_type, !mini.reified_type) -> !llvm.ptr
    %5172 = "mini.new"(%5166, %5168, %5171) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "ZipIterable2", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!mini.reified_type, !mini.reified_type, !llvm.ptr) -> !mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.any, "Iterable2">, !mini.type_param<"U", !mini.any, "Iterable2">]>
    %5173 = "mini.to_fat_ptr"(%5161) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">]>
    %5174 = "mini.unwrap"(%5173) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5175 = "mini.to_fat_ptr"(%5163) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ZipIterable2">]>
    %5176 = "mini.unwrap"(%5175) : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ZipIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5177 = "mini.unwrap"(%5172) : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.any, "Iterable2">, !mini.type_param<"U", !mini.any, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5178 = "mini.parameterization"(%5166) {"id_hierarchy" = ["Iterable2", [0 : i32]], "name_hierarchy" = ["Iterable2Iterable2.T_subtype_Any", ["Iterable2.T_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %5179 = "mini.wrap"(%5159) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5180 = "mini.get_type_field"(%5179) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!llvm.ptr) -> !mini.reified_type
    %5181 = "mini.parameterization"(%5180) {"id_hierarchy" = ["Iterable2", [0 : i32]], "name_hierarchy" = ["Iterable2Iterable2.U_subtype_Any", ["Iterable2.U_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %5182 = "mini.parameterizations_array"(%5178, %5181) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%5182, %5177, %5174, %5176) {"offset" = 5 : i32, "vptrs" = [#none, #none], "vtable_size" = 52 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %5183 = "mini.to_fat_ptr"(%5172) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ZipIterable2", "to_typ_name" = "ZipIterable2"} : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.any, "Iterable2">, !mini.type_param<"U", !mini.any, "Iterable2">]>) -> !mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.any, "Iterable2">, !mini.type_param<"U", !mini.any, "Iterable2">]>
    "mini.return"(%5183) : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.any, "Iterable2">, !mini.type_param<"U", !mini.any, "Iterable2">]>) -> ()
  }) {"func_name" = "Iterable2_zip_otherIterable2U", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb791(%5184 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5185 : !llvm.ptr):
    %5186 = "mini.invariant"(%5185) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5187 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb792] : () -> ()
  ^bb793:
    %5188 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
    "llvm.store"(%5188, %5187) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb794] : () -> ()
  ^bb792:
    %5189 = "llvm.getelementptr"(%5185) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5190 = "mini.checkflag"(%5189) {"typ_name" = "Iterable2"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5191 = "llvm.load"(%5190) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5191) [^bb793, ^bb793] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb794:
    %5192 = "llvm.extractvalue"(%5184) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5193 = "llvm.load"(%5187) : (!llvm.ptr) -> i32
    %5194 = "llvm.getelementptr"(%5192, %5193) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<23 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5195 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5196 = "llvm.getelementptr"(%5194, %5195) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5196) : (!llvm.ptr) -> ()
  }) {"func_name" = "Iterable2_B_zip_otherIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb795(%5197 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5198 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5199 : !llvm.ptr, %5200 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %5201 = "mini.wrap"(%5197) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %5202 = "mini.to_fat_ptr"(%5201) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %5203 = "mini.wrap"(%5200) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "Iterable2">]>
    %5204 = "mini.to_fat_ptr"(%5203) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "Iterable2">]>
    %5205 = "mini.unwrap"(%5202) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5206 = "mini.unwrap"(%5204) : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5207 = "mini.get_type_field"(%5202) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.reified_type
    %5208 = "mini.wrap"(%5200) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5209 = "mini.get_type_field"(%5208) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!llvm.ptr) -> !mini.reified_type
    %5210 = "mini.wrap"(%5200) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5211 = "mini.get_type_field"(%5210) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!llvm.ptr) -> !mini.reified_type
    %5212 = "mini.parameterization"(%5207, %5211) {"id_hierarchy" = ["Pair", [0 : i32], [1 : i32]], "name_hierarchy" = ["PairIterable2.T_subtype_Any._Iterable2.U_subtype_Any", ["Iterable2.T_subtype_Any"], ["Iterable2.U_subtype_Any"]]} : (!mini.reified_type, !mini.reified_type) -> !llvm.ptr
    %5213 = "mini.new"(%5207, %5209, %5212) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "ProductIterable2", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!mini.reified_type, !mini.reified_type, !llvm.ptr) -> !mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.any, "Iterable2">, !mini.type_param<"U", !mini.any, "Iterable2">]>
    %5214 = "mini.to_fat_ptr"(%5202) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">]>
    %5215 = "mini.unwrap"(%5214) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5216 = "mini.to_fat_ptr"(%5204) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ProductIterable2">]>
    %5217 = "mini.unwrap"(%5216) : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ProductIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5218 = "mini.unwrap"(%5213) : (!mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.any, "Iterable2">, !mini.type_param<"U", !mini.any, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5219 = "mini.parameterization"(%5207) {"id_hierarchy" = ["Iterable2", [0 : i32]], "name_hierarchy" = ["Iterable2Iterable2.T_subtype_Any", ["Iterable2.T_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %5220 = "mini.wrap"(%5200) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5221 = "mini.get_type_field"(%5220) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!llvm.ptr) -> !mini.reified_type
    %5222 = "mini.parameterization"(%5221) {"id_hierarchy" = ["Iterable2", [0 : i32]], "name_hierarchy" = ["Iterable2Iterable2.U_subtype_Any", ["Iterable2.U_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %5223 = "mini.parameterizations_array"(%5219, %5222) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%5223, %5218, %5215, %5217) {"offset" = 5 : i32, "vptrs" = [#none, #none], "vtable_size" = 52 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %5224 = "mini.to_fat_ptr"(%5213) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ProductIterable2", "to_typ_name" = "ProductIterable2"} : (!mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.any, "Iterable2">, !mini.type_param<"U", !mini.any, "Iterable2">]>) -> !mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.any, "Iterable2">, !mini.type_param<"U", !mini.any, "Iterable2">]>
    "mini.return"(%5224) : (!mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.any, "Iterable2">, !mini.type_param<"U", !mini.any, "Iterable2">]>) -> ()
  }) {"func_name" = "Iterable2_product_otherIterable2U", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb796(%5225 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5226 : !llvm.ptr):
    %5227 = "mini.invariant"(%5226) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5228 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb797] : () -> ()
  ^bb798:
    %5229 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
    "llvm.store"(%5229, %5228) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb799] : () -> ()
  ^bb797:
    %5230 = "llvm.getelementptr"(%5226) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5231 = "mini.checkflag"(%5230) {"typ_name" = "Iterable2"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5232 = "llvm.load"(%5231) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5232) [^bb798, ^bb798] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb799:
    %5233 = "llvm.extractvalue"(%5225) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5234 = "llvm.load"(%5228) : (!llvm.ptr) -> i32
    %5235 = "llvm.getelementptr"(%5233, %5234) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<23 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5236 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5237 = "llvm.getelementptr"(%5235, %5236) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5237) : (!llvm.ptr) -> ()
  }) {"func_name" = "Iterable2_B_product_otherIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_Array", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32]} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "Array_field_Array_0"} : () -> ()
  "mini.getter_def"() {"meth_name" = "Array_getter_buffer", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_BufferT"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Array_setter_buffer", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_BufferT"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Array_field_buffer", "getter_name" = "Array_getter_buffer", "setter_name" = "Array_setter_buffer"} : () -> ()
  "mini.getter_def"() {"meth_name" = "Array_getter_length", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Array_setter_length", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Array_field_length", "getter_name" = "Array_getter_length", "setter_name" = "Array_setter_length"} : () -> ()
  "mini.getter_def"() {"meth_name" = "Array_getter_capacity", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 3 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Array_setter_capacity", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 3 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Array_field_capacity", "getter_name" = "Array_getter_capacity", "setter_name" = "Array_setter_capacity"} : () -> ()
  "mini.func"() ({
  ^bb800(%5238 : !llvm.ptr, %5239 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %5240 = "mini.wrap"(%5239) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Array">]>
    %5241 = "mini.to_fat_ptr"(%5240) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Array">]>
    %5242 = "mini.wrap"(%5239) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5243 = "mini.get_type_field"(%5242) {"offset" = 0 : i64, "vtable_bytes" = 552 : i32} : (!llvm.ptr) -> !mini.reified_type
    %5244 = "mini.new"(%5243) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "Array", "num_data_fields" = 3 : i32, "region_id" = "none", "has_type_fields"} : (!mini.reified_type) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %5245 = "mini.unwrap"(%5244) : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5246 = "mini.parameterizations_array"() : () -> !llvm.ptr
    "mini.method_call"(%5246, %5245) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 69 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %5247 = "mini.to_fat_ptr"(%5244) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %5248 = "mini.refer"(%5247) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %5249 = "mini.unwrap"(%5241) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5250 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %5251 = "mini.method_call"(%5250, %5249) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %5252 = "mini.to_fat_ptr"(%5251) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Array">]>
    %5253 = "mini.to_fat_ptr"(%5252) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Array">]>
    %5254 = "mini.refer"(%5253) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Array">]>
    "mini.while"() ({
      %5255 = "mini.unwrap"(%5254) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %5256 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %5257 = "mini.method_call"(%5256, %5255) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]>
      %5258 = builtin.unrealized_conversion_cast %5257 : !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]> to !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Array">]>
      %5259 = "mini.wrap"(%5239) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %5260 = "mini.get_type_field"(%5259) {"offset" = 0 : i64, "vtable_bytes" = 552 : i32} : (!llvm.ptr) -> !mini.reified_type
      %5261 = "mini.checkflag"(%5258) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Array">]>) -> !mini.ptr<i1>
      %5262 = "mini.unwrap"(%5261) : (!mini.ptr<i1>) -> i1
    }, {
      %5263 = "mini.to_fat_ptr"(%5258) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Array">]>) -> !mini.type_param<"T", !mini.any, "Array">
      %5264 = "mini.to_fat_ptr"(%5263) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Array">) -> !mini.type_param<"T", !mini.any, "Array">
      %5265 = "mini.unwrap"(%5264) : (!mini.type_param<"T", !mini.any, "Array">) -> !llvm.struct<(!llvm.ptr, i160)>
      %5266 = "mini.unwrap"(%5248) : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %5267 = "mini.wrap"(%5239) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %5268 = "mini.get_type_field"(%5267) {"offset" = 0 : i64, "vtable_bytes" = 552 : i32} : (!llvm.ptr) -> !mini.reified_type
      %5269 = "mini.parameterizations_array"(%5268) : (!mini.reified_type) -> !llvm.ptr
      %5270 = "mini.method_call"(%5269, %5266, %5265) {"offset" = 9 : i32, "vptrs" = ["any_typ"], "vtable_size" = 69 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
      %5271 = "mini.to_fat_ptr"(%5270) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
      "mini.castassign"(%5258, %5263) ({
        %5272 = "mini.to_fat_ptr"(%5263) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Array">) -> !mini.type_param<"T", !mini.any, "Array">
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Array">]>, !mini.type_param<"T", !mini.any, "Array">) -> ()
    }) : () -> ()
    %5273 = "mini.to_fat_ptr"(%5248) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    "mini.return"(%5273) : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> ()
  }) {"func_name" = "Array__Self_from_iterable_iterableIterable2T", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb801(%5274 : !llvm.ptr):
    %5275 = "mini.invariant"(%5274) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5276 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb802] : () -> ()
  ^bb803:
    %5277 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
    "llvm.store"(%5277, %5276) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb804] : () -> ()
  ^bb802:
    %5278 = "llvm.getelementptr"(%5274) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5279 = "mini.checkflag"(%5278) {"typ_name" = "Iterable2"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5280 = "llvm.load"(%5279) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5280) [^bb803, ^bb803] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb804:
    %5281 = "mini.addr_of"() {"global_name" = @Array} : () -> !llvm.ptr
    %5282 = "llvm.load"(%5276) : (!llvm.ptr) -> i32
    %5283 = "llvm.getelementptr"(%5281, %5282) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5284 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5285 = "llvm.getelementptr"(%5283, %5284) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5285) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B__Self_from_iterable_iterableIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb805(%5286 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5287 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5288 : !llvm.ptr):
    %5289 = "mini.wrap"(%5286) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %5290 = "mini.to_fat_ptr"(%5289) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %5291 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5292 = "mini.get_type_field"(%5290) {"offset" = 0 : i64, "vtable_bytes" = 552 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.reified_type
    %5293 = "mini.create_buffer"(%5291, %5292) {"typ" = !llvm.struct<(!llvm.ptr, i160)>, "region_id" = ""} : (!mini.ptr<i32>, !mini.reified_type) -> !llvm.ptr
    %5294 = builtin.unrealized_conversion_cast %5293 : !llvm.ptr to !mini.buffer<!mini.fatptr<"T">>
    "mini.set_field"(%5290, %5294) {"offset" = 1 : i64, "vtable_bytes" = 552 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, !mini.buffer<!mini.fatptr<"T">>) -> ()
    %5295 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5296 = builtin.unrealized_conversion_cast %5295 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%5290, %5296) {"offset" = 2 : i64, "vtable_bytes" = 552 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, !mini.ptr<i32>) -> ()
    %5297 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5298 = builtin.unrealized_conversion_cast %5297 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%5290, %5298) {"offset" = 3 : i64, "vtable_bytes" = 552 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, !mini.ptr<i32>) -> ()
  }) {"func_name" = "Array_init_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb806(%5299 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5300 : !llvm.ptr):
    %5301 = "mini.invariant"(%5300) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5302 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb807] : () -> ()
  ^bb807:
    %5303 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
    "llvm.store"(%5303, %5302) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb808] : () -> ()
  ^bb808:
    %5304 = "llvm.extractvalue"(%5299) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5305 = "llvm.load"(%5302) : (!llvm.ptr) -> i32
    %5306 = "llvm.getelementptr"(%5304, %5305) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5307 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5308 = "llvm.getelementptr"(%5306, %5307) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5308) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_init_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb809(%5309 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5310 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5311 : !llvm.ptr, %5312 : i32):
    %5313 = "mini.wrap"(%5309) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %5314 = "mini.to_fat_ptr"(%5313) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %5315 = "mini.wrap"(%5312) : (i32) -> !mini.ptr<i32>
    %5316 = builtin.unrealized_conversion_cast %5315 : !mini.ptr<i32> to !mini.ptr<i32>
    %5317 = builtin.unrealized_conversion_cast %5316 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%5314, %5317) {"offset" = 3 : i64, "vtable_bytes" = 552 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, !mini.ptr<i32>) -> ()
    %5318 = "mini.get_field"(%5314) {"offset" = 3 : i64, "vtable_bytes" = 552 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.ptr<i32>
    %5319 = "mini.get_type_field"(%5314) {"offset" = 0 : i64, "vtable_bytes" = 552 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.reified_type
    %5320 = "mini.create_buffer"(%5318, %5319) {"typ" = !llvm.struct<(!llvm.ptr, i160)>, "region_id" = ""} : (!mini.ptr<i32>, !mini.reified_type) -> !llvm.ptr
    %5321 = builtin.unrealized_conversion_cast %5320 : !llvm.ptr to !mini.buffer<!mini.fatptr<"T">>
    "mini.set_field"(%5314, %5321) {"offset" = 1 : i64, "vtable_bytes" = 552 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, !mini.buffer<!mini.fatptr<"T">>) -> ()
    %5322 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5323 = builtin.unrealized_conversion_cast %5322 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%5314, %5323) {"offset" = 2 : i64, "vtable_bytes" = 552 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, !mini.ptr<i32>) -> ()
  }) {"func_name" = "Array_init_capacityPtri32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb810(%5324 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5325 : !llvm.ptr):
    %5326 = "mini.invariant"(%5325) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5327 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb811] : () -> ()
  ^bb812:
    %5328 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
    "llvm.store"(%5328, %5327) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb813] : () -> ()
  ^bb811:
    %5329 = "llvm.getelementptr"(%5325) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5330 = "mini.checkflag"(%5329) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5331 = "llvm.load"(%5330) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5331) [^bb812, ^bb812] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb813:
    %5332 = "llvm.extractvalue"(%5324) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5333 = "llvm.load"(%5327) : (!llvm.ptr) -> i32
    %5334 = "llvm.getelementptr"(%5332, %5333) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5335 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5336 = "llvm.getelementptr"(%5334, %5335) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5336) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_init_capacityPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb814(%5337 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5338 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5339 : !llvm.ptr):
    %5340 = "mini.wrap"(%5337) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %5341 = "mini.to_fat_ptr"(%5340) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %5342 = "mini.get_field"(%5341) {"offset" = 2 : i64, "vtable_bytes" = 552 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.ptr<i32>
    %5343 = builtin.unrealized_conversion_cast %5342 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.return"(%5343) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "Array_length_", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb815(%5344 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5345 : !llvm.ptr):
    %5346 = "mini.invariant"(%5345) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5347 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb816] : () -> ()
  ^bb816:
    %5348 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
    "llvm.store"(%5348, %5347) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb817] : () -> ()
  ^bb817:
    %5349 = "llvm.extractvalue"(%5344) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5350 = "llvm.load"(%5347) : (!llvm.ptr) -> i32
    %5351 = "llvm.getelementptr"(%5349, %5350) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5352 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5353 = "llvm.getelementptr"(%5351, %5352) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5353) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_length_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb818(%5354 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5355 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5356 : !llvm.ptr):
    %5357 = "mini.wrap"(%5354) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %5358 = "mini.to_fat_ptr"(%5357) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %5359 = "mini.get_field"(%5358) {"offset" = 3 : i64, "vtable_bytes" = 552 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.ptr<i32>
    %5360 = builtin.unrealized_conversion_cast %5359 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.return"(%5360) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "Array_capacity_", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb819(%5361 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5362 : !llvm.ptr):
    %5363 = "mini.invariant"(%5362) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5364 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb820] : () -> ()
  ^bb820:
    %5365 = "llvm.mlir.constant"() <{"value" = 29 : i32}> : () -> i32
    "llvm.store"(%5365, %5364) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb821] : () -> ()
  ^bb821:
    %5366 = "llvm.extractvalue"(%5361) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5367 = "llvm.load"(%5364) : (!llvm.ptr) -> i32
    %5368 = "llvm.getelementptr"(%5366, %5367) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5369 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5370 = "llvm.getelementptr"(%5368, %5369) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5370) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_capacity_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb822(%5371 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5372 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5373 : !llvm.ptr, %5374 : !llvm.struct<(!llvm.ptr, i160)>):
    %5375 = "mini.wrap"(%5371) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %5376 = "mini.to_fat_ptr"(%5375) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %5377 = "mini.wrap"(%5374) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.type_param<"T", !mini.any, "Array">
    %5378 = "mini.to_fat_ptr"(%5377) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Array">) -> !mini.type_param<"T", !mini.any, "Array">
    %5379 = "mini.get_field"(%5376) {"offset" = 2 : i64, "vtable_bytes" = 552 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.ptr<i32>
    %5380 = "mini.get_field"(%5376) {"offset" = 3 : i64, "vtable_bytes" = 552 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.ptr<i32>
    %5381 = "mini.unwrap"(%5379) : (!mini.ptr<i32>) -> i32
    %5382 = "mini.unwrap"(%5380) : (!mini.ptr<i32>) -> i32
    %5383 = "mini.comparison"(%5381, %5382) {"op" = "GE"} : (i32, i32) -> i1
    %5384 = "mini.wrap"(%5383) : (i1) -> !mini.ptr<i32>
    %5385 = "mini.unwrap"(%5384) : (!mini.ptr<i32>) -> i1
    "mini.if"(%5385) ({
      %5386 = "mini.unwrap"(%5376) : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %5387 = "mini.parameterizations_array"() : () -> !llvm.ptr
      "mini.method_call"(%5387, %5386) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 69 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    }) : (i1) -> ()
    %5388 = "mini.get_field"(%5376) {"offset" = 1 : i64, "vtable_bytes" = 552 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.buffer<!mini.fatptr<"T">>
    %5389 = "mini.get_field"(%5376) {"offset" = 2 : i64, "vtable_bytes" = 552 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.ptr<i32>
    %5390 = "mini.get_type_field"(%5376) {"offset" = 0 : i64, "vtable_bytes" = 552 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.reified_type
    %5391 = "mini.to_fat_ptr"(%5378) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Array">) -> !mini.type_param<"T", !mini.any, "Array">
    "mini.buffer_set"(%5388, %5389, %5391, %5390) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.buffer<!mini.fatptr<"T">>, !mini.ptr<i32>, !mini.type_param<"T", !mini.any, "Array">, !mini.reified_type) -> ()
    %5392 = "mini.get_field"(%5376) {"offset" = 2 : i64, "vtable_bytes" = 552 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.ptr<i32>
    %5393 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5394 = "mini.unwrap"(%5392) : (!mini.ptr<i32>) -> i32
    %5395 = "mini.unwrap"(%5393) : (!mini.ptr<i32>) -> i32
    %5396 = "mini.arithmetic"(%5394, %5395) {"op" = "ADD"} : (i32, i32) -> i32
    %5397 = "mini.wrap"(%5396) : (i32) -> !mini.ptr<i32>
    %5398 = builtin.unrealized_conversion_cast %5397 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%5376, %5398) {"offset" = 2 : i64, "vtable_bytes" = 552 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, !mini.ptr<i32>) -> ()
    %5399 = "mini.to_fat_ptr"(%5376) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    "mini.return"(%5399) : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> ()
  }) {"func_name" = "Array_append_xT", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb823(%5400 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5401 : !llvm.ptr):
    %5402 = "mini.invariant"(%5401) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5403 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb824] : () -> ()
  ^bb825:
    %5404 = "llvm.mlir.constant"() <{"value" = 30 : i32}> : () -> i32
    "llvm.store"(%5404, %5403) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb826] : () -> ()
  ^bb824:
    %5405 = "llvm.getelementptr"(%5401) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5406 = "mini.checkflag"(%5405) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5407 = "llvm.load"(%5406) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5407) [^bb825, ^bb825] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb826:
    %5408 = "llvm.extractvalue"(%5400) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5409 = "llvm.load"(%5403) : (!llvm.ptr) -> i32
    %5410 = "llvm.getelementptr"(%5408, %5409) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5411 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5412 = "llvm.getelementptr"(%5410, %5411) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5412) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_append_xT", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb827(%5413 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5414 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5415 : !llvm.ptr):
    %5416 = "mini.wrap"(%5413) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %5417 = "mini.to_fat_ptr"(%5416) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %5418 = "mini.get_field"(%5417) {"offset" = 3 : i64, "vtable_bytes" = 552 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.ptr<i32>
    %5419 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5420 = "mini.unwrap"(%5418) : (!mini.ptr<i32>) -> i32
    %5421 = "mini.unwrap"(%5419) : (!mini.ptr<i32>) -> i32
    %5422 = "mini.arithmetic"(%5420, %5421) {"op" = "MUL"} : (i32, i32) -> i32
    %5423 = "mini.wrap"(%5422) : (i32) -> !mini.ptr<i32>
    %5424 = builtin.unrealized_conversion_cast %5423 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%5417, %5424) {"offset" = 3 : i64, "vtable_bytes" = 552 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, !mini.ptr<i32>) -> ()
    %5425 = "mini.get_field"(%5417) {"offset" = 1 : i64, "vtable_bytes" = 552 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.buffer<!mini.fatptr<"T">>
    %5426 = builtin.unrealized_conversion_cast %5425 : !mini.buffer<!mini.fatptr<"T">> to !mini.buffer<!mini.fatptr<"T">>
    %5427 = "mini.refer"(%5426) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.fatptr<"T">>) -> !mini.buffer<!mini.fatptr<"T">>
    %5428 = "mini.get_field"(%5417) {"offset" = 3 : i64, "vtable_bytes" = 552 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.ptr<i32>
    %5429 = "mini.get_type_field"(%5417) {"offset" = 0 : i64, "vtable_bytes" = 552 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.reified_type
    %5430 = "mini.create_buffer"(%5428, %5429) {"typ" = !llvm.struct<(!llvm.ptr, i160)>, "region_id" = ""} : (!mini.ptr<i32>, !mini.reified_type) -> !llvm.ptr
    %5431 = builtin.unrealized_conversion_cast %5430 : !llvm.ptr to !mini.buffer<!mini.fatptr<"T">>
    "mini.set_field"(%5417, %5431) {"offset" = 1 : i64, "vtable_bytes" = 552 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, !mini.buffer<!mini.fatptr<"T">>) -> ()
    %5432 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    "mini.while"() ({
      %5433 = "mini.get_field"(%5417) {"offset" = 2 : i64, "vtable_bytes" = 552 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.ptr<i32>
      %5434 = "mini.unwrap"(%5432) : (!mini.ptr<i32>) -> i32
      %5435 = "mini.unwrap"(%5433) : (!mini.ptr<i32>) -> i32
      %5436 = "mini.comparison"(%5434, %5435) {"op" = "LT"} : (i32, i32) -> i1
      %5437 = "mini.wrap"(%5436) : (i1) -> !mini.ptr<i32>
      %5438 = "mini.unwrap"(%5437) : (!mini.ptr<i32>) -> i1
    }, {
      %5439 = "mini.buffer_get"(%5427, %5432, %5429) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.buffer<!mini.fatptr<"T">>, !mini.ptr<i32>, !mini.reified_type) -> !mini.type_param<"T", !mini.any, "Array">
      %5440 = "mini.get_field"(%5417) {"offset" = 1 : i64, "vtable_bytes" = 552 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.buffer<!mini.fatptr<"T">>
      %5441 = "mini.to_fat_ptr"(%5439) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Array">) -> !mini.type_param<"T", !mini.any, "Array">
      "mini.buffer_set"(%5440, %5432, %5441, %5429) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.buffer<!mini.fatptr<"T">>, !mini.ptr<i32>, !mini.type_param<"T", !mini.any, "Array">, !mini.reified_type) -> ()
      %5442 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %5443 = "mini.unwrap"(%5432) : (!mini.ptr<i32>) -> i32
      %5444 = "mini.unwrap"(%5442) : (!mini.ptr<i32>) -> i32
      %5445 = "mini.arithmetic"(%5443, %5444) {"op" = "ADD"} : (i32, i32) -> i32
      %5446 = "mini.wrap"(%5445) : (i32) -> !mini.ptr<i32>
      "mini.castassign"(%5432, %5446) ({
        %5447 = builtin.unrealized_conversion_cast %5446 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    }) : () -> ()
  }) {"func_name" = "Array_grow_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb828(%5448 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5449 : !llvm.ptr):
    %5450 = "mini.invariant"(%5449) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5451 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb829] : () -> ()
  ^bb829:
    %5452 = "llvm.mlir.constant"() <{"value" = 31 : i32}> : () -> i32
    "llvm.store"(%5452, %5451) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb830] : () -> ()
  ^bb830:
    %5453 = "llvm.extractvalue"(%5448) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5454 = "llvm.load"(%5451) : (!llvm.ptr) -> i32
    %5455 = "llvm.getelementptr"(%5453, %5454) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5456 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5457 = "llvm.getelementptr"(%5455, %5456) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5457) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_grow_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb831(%5458 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5459 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5460 : !llvm.ptr, %5461 : i32):
    %5462 = "mini.wrap"(%5458) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %5463 = "mini.to_fat_ptr"(%5462) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %5464 = "mini.wrap"(%5461) : (i32) -> !mini.ptr<i32>
    %5465 = builtin.unrealized_conversion_cast %5464 : !mini.ptr<i32> to !mini.ptr<i32>
    %5466 = "mini.get_field"(%5463) {"offset" = 2 : i64, "vtable_bytes" = 552 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.ptr<i32>
    %5467 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5468 = "mini.unwrap"(%5466) : (!mini.ptr<i32>) -> i32
    %5469 = "mini.unwrap"(%5467) : (!mini.ptr<i32>) -> i32
    %5470 = "mini.arithmetic"(%5468, %5469) {"op" = "SUB"} : (i32, i32) -> i32
    %5471 = "mini.wrap"(%5470) : (i32) -> !mini.ptr<i32>
    %5472 = "mini.unwrap"(%5465) : (!mini.ptr<i32>) -> i32
    %5473 = "mini.unwrap"(%5471) : (!mini.ptr<i32>) -> i32
    %5474 = "mini.comparison"(%5472, %5473) {"op" = "GT"} : (i32, i32) -> i1
    %5475 = "mini.wrap"(%5474) : (i1) -> !mini.ptr<i32>
    %5476 = "mini.get_field"(%5463) {"offset" = 2 : i64, "vtable_bytes" = 552 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.ptr<i32>
    %5477 = "mini.unwrap"(%5476) : (!mini.ptr<i32>) -> i32
    %5478 = "mini.unwrap"(%5465) : (!mini.ptr<i32>) -> i32
    %5479 = "mini.arithmetic"(%5477, %5478) {"op" = "ADD"} : (i32, i32) -> i32
    %5480 = "mini.wrap"(%5479) : (i32) -> !mini.ptr<i32>
    %5481 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5482 = "mini.unwrap"(%5480) : (!mini.ptr<i32>) -> i32
    %5483 = "mini.unwrap"(%5481) : (!mini.ptr<i32>) -> i32
    %5484 = "mini.comparison"(%5482, %5483) {"op" = "LT"} : (i32, i32) -> i1
    %5485 = "mini.wrap"(%5484) : (i1) -> !mini.ptr<i32>
    %5486 = "mini.unwrap"(%5475) : (!mini.ptr<i32>) -> i1
    %5487 = "mini.logical"(%5486) ({
      func.return %5485 : !mini.ptr<i32>
    }) {"op" = "or"} : (i1) -> i1
    %5488 = "mini.wrap"(%5487) : (i1) -> !mini.ptr<i1>
    %5489 = "mini.unwrap"(%5488) : (!mini.ptr<i1>) -> i1
    "mini.if"(%5489) ({
      %5490 = builtin.unrealized_conversion_cast %5465 : !mini.ptr<i32> to !mini.ptr<i32>
      %5491 = "mini.unwrap"(%5490) : (!mini.ptr<i32>) -> i32
      %5492 = "mini.unwrap"(%5463) : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %5493 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %5494 = "mini.parameterizations_array"(%5493) : (!llvm.ptr) -> !llvm.ptr
      "mini.method_call"(%5494, %5492, %5491) {"offset" = 12 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 69 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
    }) : (i1) -> ()
    %5495 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5496 = "mini.unwrap"(%5465) : (!mini.ptr<i32>) -> i32
    %5497 = "mini.unwrap"(%5495) : (!mini.ptr<i32>) -> i32
    %5498 = "mini.comparison"(%5496, %5497) {"op" = "LT"} : (i32, i32) -> i1
    %5499 = "mini.wrap"(%5498) : (i1) -> !mini.ptr<i32>
    %5500 = "mini.unwrap"(%5499) : (!mini.ptr<i32>) -> i1
    "mini.if"(%5500) ({
      %5501 = "mini.get_field"(%5463) {"offset" = 2 : i64, "vtable_bytes" = 552 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.ptr<i32>
      %5502 = "mini.unwrap"(%5501) : (!mini.ptr<i32>) -> i32
      %5503 = "mini.unwrap"(%5465) : (!mini.ptr<i32>) -> i32
      %5504 = "mini.arithmetic"(%5502, %5503) {"op" = "ADD"} : (i32, i32) -> i32
      %5505 = "mini.wrap"(%5504) : (i32) -> !mini.ptr<i32>
      "mini.castassign"(%5465, %5505) ({
        %5506 = builtin.unrealized_conversion_cast %5505 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    }) : (i1) -> ()
    %5507 = "mini.get_field"(%5463) {"offset" = 1 : i64, "vtable_bytes" = 552 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.buffer<!mini.fatptr<"T">>
    %5508 = "mini.get_type_field"(%5463) {"offset" = 0 : i64, "vtable_bytes" = 552 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.reified_type
    %5509 = "mini.buffer_get"(%5507, %5465, %5508) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.buffer<!mini.fatptr<"T">>, !mini.ptr<i32>, !mini.reified_type) -> !mini.type_param<"T", !mini.any, "Array">
    %5510 = "mini.to_fat_ptr"(%5509) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Array">) -> !mini.type_param<"T", !mini.any, "Array">
    "mini.return"(%5510) : (!mini.type_param<"T", !mini.any, "Array">) -> ()
  }) {"func_name" = "Array__index_xPtri32", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"OutOfBounds">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb832(%5511 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5512 : !llvm.ptr):
    %5513 = "mini.invariant"(%5512) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5514 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb833] : () -> ()
  ^bb834:
    %5515 = "llvm.mlir.constant"() <{"value" = 32 : i32}> : () -> i32
    "llvm.store"(%5515, %5514) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb835] : () -> ()
  ^bb833:
    %5516 = "llvm.getelementptr"(%5512) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5517 = "mini.checkflag"(%5516) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5518 = "llvm.load"(%5517) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5518) [^bb834, ^bb834] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb835:
    %5519 = "llvm.extractvalue"(%5511) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5520 = "llvm.load"(%5514) : (!llvm.ptr) -> i32
    %5521 = "llvm.getelementptr"(%5519, %5520) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5522 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5523 = "llvm.getelementptr"(%5521, %5522) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5523) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B__index_xPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb836(%5524 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5525 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5526 : !llvm.ptr, %5527 : i32):
    %5528 = "mini.wrap"(%5524) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %5529 = "mini.to_fat_ptr"(%5528) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %5530 = "mini.wrap"(%5527) : (i32) -> !mini.ptr<i32>
    %5531 = builtin.unrealized_conversion_cast %5530 : !mini.ptr<i32> to !mini.ptr<i32>
    %5532 = "mini.get_field"(%5529) {"offset" = 2 : i64, "vtable_bytes" = 552 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.ptr<i32>
    %5533 = "mini.unwrap"(%5532) : (!mini.ptr<i32>) -> i32
    %5534 = "mini.unwrap"(%5531) : (!mini.ptr<i32>) -> i32
    %5535 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "OutOfBounds", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !mini.fatptr<"OutOfBounds">
    %5536 = "mini.get_field"(%5529) {"offset" = 2 : i64, "vtable_bytes" = 552 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.ptr<i32>
    %5537 = builtin.unrealized_conversion_cast %5536 : !mini.ptr<i32> to !mini.ptr<i32>
    %5538 = "mini.unwrap"(%5537) : (!mini.ptr<i32>) -> i32
    %5539 = builtin.unrealized_conversion_cast %5531 : !mini.ptr<i32> to !mini.ptr<i32>
    %5540 = "mini.unwrap"(%5539) : (!mini.ptr<i32>) -> i32
    %5541 = "mini.unwrap"(%5535) : (!mini.fatptr<"OutOfBounds">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5542 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %5543 = "mini.parameterizations_array"(%5542, %5542) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%5543, %5541, %5538, %5540) {"offset" = 4 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 29 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32) -> ()
    %5544 = "mini.literal"() {"value" = 774 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5545 = "mini.literal"() {"value" = 59 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5546 = "mini.create_buffer"(%5545) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %5547 = builtin.unrealized_conversion_cast %5546 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %5548 = "mini.refer"(%5547) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %5549 = "mini.literal"() {"typ" = !llvm.array<58 x i8>, "value" = "C:\\Users\\PaulK\\OneDrive\\Documents\\PL\\PyPL\\tmpnjjh5_8x.mini"} : () -> !llvm.ptr
    %5550 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%5548, %5550, %5549) {"typ" = !llvm.array<58 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %5551 = "mini.literal"() {"value" = 58 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5552 = "mini.literal"() {"value" = 59 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5553 = "mini.unwrap"(%5548) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %5554 = "mini.unwrap"(%5551) : (!mini.ptr<i32>) -> i32
    %5555 = "mini.unwrap"(%5552) : (!mini.ptr<i32>) -> i32
    %5556 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %5557 = "mini.literal"() {"value" = 58 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5558 = "mini.literal"() {"value" = 59 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5559 = builtin.unrealized_conversion_cast %5548 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %5560 = "mini.unwrap"(%5559) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %5561 = builtin.unrealized_conversion_cast %5557 : !mini.ptr<i32> to !mini.ptr<i32>
    %5562 = "mini.unwrap"(%5561) : (!mini.ptr<i32>) -> i32
    %5563 = builtin.unrealized_conversion_cast %5558 : !mini.ptr<i32> to !mini.ptr<i32>
    %5564 = "mini.unwrap"(%5563) : (!mini.ptr<i32>) -> i32
    %5565 = "mini.unwrap"(%5556) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5566 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %5567 = "mini.parameterizations_array"(%5566, %5542, %5542) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%5567, %5565, %5560, %5562, %5564) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %5568 = builtin.unrealized_conversion_cast %5544 : !mini.ptr<i32> to !mini.ptr<i32>
    %5569 = "mini.unwrap"(%5568) : (!mini.ptr<i32>) -> i32
    %5570 = "mini.to_fat_ptr"(%5556) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %5571 = "mini.unwrap"(%5570) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5572 = "mini.unwrap"(%5535) : (!mini.fatptr<"OutOfBounds">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5573 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %5574 = "mini.parameterizations_array"(%5542, %5573) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%5574, %5572, %5569, %5571) {"offset" = 7 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 29 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %5575 = builtin.unrealized_conversion_cast %5535 : !mini.fatptr<"OutOfBounds"> to !mini.union<[!mini.fatptr<"OutOfBounds">, !mini.nil]>
    %5576 = "mini.unwrap"(%5575) : (!mini.union<[!mini.fatptr<"OutOfBounds">, !mini.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %5577 = "mini.coro_yield"(%5576) : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
    %5578 = "mini.wrap"(%5577) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"OutOfBounds">, !mini.nil]>
  }) {"func_name" = "Array_throw_oob_xPtri32", "result_type" = !llvm.void, "yield_type" = !mini.fatptr<"OutOfBounds">} : () -> ()
  "mini.func"() ({
  ^bb837(%5579 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5580 : !llvm.ptr):
    %5581 = "mini.invariant"(%5580) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5582 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb838] : () -> ()
  ^bb839:
    %5583 = "llvm.mlir.constant"() <{"value" = 33 : i32}> : () -> i32
    "llvm.store"(%5583, %5582) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb840] : () -> ()
  ^bb838:
    %5584 = "llvm.getelementptr"(%5580) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5585 = "mini.checkflag"(%5584) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5586 = "llvm.load"(%5585) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5586) [^bb839, ^bb839] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb840:
    %5587 = "llvm.extractvalue"(%5579) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5588 = "llvm.load"(%5582) : (!llvm.ptr) -> i32
    %5589 = "llvm.getelementptr"(%5587, %5588) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5590 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5591 = "llvm.getelementptr"(%5589, %5590) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5591) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_throw_oob_xPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb841(%5592 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5593 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5594 : !llvm.ptr, %5595 : i32):
    %5596 = "mini.wrap"(%5592) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %5597 = "mini.to_fat_ptr"(%5596) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %5598 = "mini.wrap"(%5595) : (i32) -> !mini.ptr<i32>
    %5599 = builtin.unrealized_conversion_cast %5598 : !mini.ptr<i32> to !mini.ptr<i32>
    %5600 = "mini.get_field"(%5597) {"offset" = 1 : i64, "vtable_bytes" = 552 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.buffer<!mini.fatptr<"T">>
    %5601 = "mini.get_type_field"(%5597) {"offset" = 0 : i64, "vtable_bytes" = 552 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.reified_type
    %5602 = "mini.buffer_get"(%5600, %5599, %5601) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.buffer<!mini.fatptr<"T">>, !mini.ptr<i32>, !mini.reified_type) -> !mini.type_param<"T", !mini.any, "Array">
    %5603 = "mini.to_fat_ptr"(%5602) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Array">) -> !mini.type_param<"T", !mini.any, "Array">
    "mini.return"(%5603) : (!mini.type_param<"T", !mini.any, "Array">) -> ()
  }) {"func_name" = "Array_unsafe_index_xPtri32", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb842(%5604 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5605 : !llvm.ptr):
    %5606 = "mini.invariant"(%5605) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5607 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb843] : () -> ()
  ^bb844:
    %5608 = "llvm.mlir.constant"() <{"value" = 34 : i32}> : () -> i32
    "llvm.store"(%5608, %5607) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb845] : () -> ()
  ^bb843:
    %5609 = "llvm.getelementptr"(%5605) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5610 = "mini.checkflag"(%5609) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5611 = "llvm.load"(%5610) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5611) [^bb844, ^bb844] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb845:
    %5612 = "llvm.extractvalue"(%5604) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5613 = "llvm.load"(%5607) : (!llvm.ptr) -> i32
    %5614 = "llvm.getelementptr"(%5612, %5613) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5615 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5616 = "llvm.getelementptr"(%5614, %5615) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5616) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_unsafe_index_xPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb846(%5617 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5618 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5619 : !llvm.ptr):
    %5620 = "mini.wrap"(%5617) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %5621 = "mini.to_fat_ptr"(%5620) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %5622 = "mini.unwrap"(%5621) : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5623 = "mini.get_type_field"(%5621) {"offset" = 0 : i64, "vtable_bytes" = 552 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.reified_type
    %5624 = "mini.new"(%5623) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32)>, "class_name" = "ArrayIterator", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!mini.reified_type) -> !mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "Array">]>
    %5625 = "mini.to_fat_ptr"(%5621) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>
    %5626 = "mini.unwrap"(%5625) : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5627 = "mini.unwrap"(%5624) : (!mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5628 = "mini.parameterization"(%5623) {"id_hierarchy" = ["Array", [0 : i32]], "name_hierarchy" = ["ArrayArray.T_subtype_Any", ["Array.T_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %5629 = "mini.parameterizations_array"(%5628) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%5629, %5627, %5626) {"offset" = 3 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %5630 = "mini.to_fat_ptr"(%5624) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ArrayIterator", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    "mini.return"(%5630) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> ()
  }) {"func_name" = "Array_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb847(%5631 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5632 : !llvm.ptr):
    %5633 = "mini.invariant"(%5632) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5634 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb848] : () -> ()
  ^bb848:
    %5635 = "llvm.mlir.constant"() <{"value" = 35 : i32}> : () -> i32
    "llvm.store"(%5635, %5634) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb849] : () -> ()
  ^bb849:
    %5636 = "llvm.extractvalue"(%5631) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5637 = "llvm.load"(%5634) : (!llvm.ptr) -> i32
    %5638 = "llvm.getelementptr"(%5636, %5637) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5639 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5640 = "llvm.getelementptr"(%5638, %5639) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5640) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb850(%5641 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5642 : !llvm.ptr):
    %5643 = "mini.invariant"(%5642) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5644 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb851] : () -> ()
  ^bb852:
    %5645 = "llvm.mlir.constant"() <{"value" = 36 : i32}> : () -> i32
    "llvm.store"(%5645, %5644) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb853] : () -> ()
  ^bb851:
    %5646 = "llvm.getelementptr"(%5642) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5647 = "mini.checkflag"(%5646) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5648 = "llvm.load"(%5647) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5648) [^bb852, ^bb852] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb853:
    %5649 = "llvm.extractvalue"(%5641) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5650 = "llvm.load"(%5644) : (!llvm.ptr) -> i32
    %5651 = "llvm.getelementptr"(%5649, %5650) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5652 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5653 = "llvm.getelementptr"(%5651, %5652) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5653) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb854(%5654 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5655 : !llvm.ptr):
    %5656 = "mini.invariant"(%5655) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5657 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb855] : () -> ()
  ^bb856:
    %5658 = "llvm.mlir.constant"() <{"value" = 37 : i32}> : () -> i32
    "llvm.store"(%5658, %5657) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb857] : () -> ()
  ^bb858:
    %5659 = "llvm.getelementptr"(%5655) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5660 = "mini.checkflag"(%5659) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5661 = "llvm.load"(%5660) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5661) [^bb856, ^bb856] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb855:
    %5662 = "llvm.getelementptr"(%5655) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5663 = "mini.checkflag"(%5662) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5664 = "llvm.load"(%5663) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5664) [^bb858, ^bb858] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb857:
    %5665 = "llvm.extractvalue"(%5654) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5666 = "llvm.load"(%5657) : (!llvm.ptr) -> i32
    %5667 = "llvm.getelementptr"(%5665, %5666) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5668 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5669 = "llvm.getelementptr"(%5667, %5668) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5669) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb859(%5670 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5671 : !llvm.ptr):
    %5672 = "mini.invariant"(%5671) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5673 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb860] : () -> ()
  ^bb861:
    %5674 = "llvm.mlir.constant"() <{"value" = 38 : i32}> : () -> i32
    "llvm.store"(%5674, %5673) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb862] : () -> ()
  ^bb860:
    %5675 = "llvm.getelementptr"(%5671) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5676 = "mini.checkflag"(%5675) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5677 = "llvm.load"(%5676) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5677) [^bb861, ^bb861] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb862:
    %5678 = "llvm.extractvalue"(%5670) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5679 = "llvm.load"(%5673) : (!llvm.ptr) -> i32
    %5680 = "llvm.getelementptr"(%5678, %5679) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5681 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5682 = "llvm.getelementptr"(%5680, %5681) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5682) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_all_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb863(%5683 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5684 : !llvm.ptr):
    %5685 = "mini.invariant"(%5684) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5686 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb864] : () -> ()
  ^bb865:
    %5687 = "llvm.mlir.constant"() <{"value" = 39 : i32}> : () -> i32
    "llvm.store"(%5687, %5686) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb866] : () -> ()
  ^bb864:
    %5688 = "llvm.getelementptr"(%5684) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5689 = "mini.checkflag"(%5688) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5690 = "llvm.load"(%5689) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5690) [^bb865, ^bb865] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb866:
    %5691 = "llvm.extractvalue"(%5683) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5692 = "llvm.load"(%5686) : (!llvm.ptr) -> i32
    %5693 = "llvm.getelementptr"(%5691, %5692) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5694 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5695 = "llvm.getelementptr"(%5693, %5694) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5695) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_any_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb867(%5696 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5697 : !llvm.ptr):
    %5698 = "mini.invariant"(%5697) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5699 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb868] : () -> ()
  ^bb869:
    %5700 = "llvm.mlir.constant"() <{"value" = 40 : i32}> : () -> i32
    "llvm.store"(%5700, %5699) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb870] : () -> ()
  ^bb868:
    %5701 = "llvm.getelementptr"(%5697) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5702 = "mini.checkflag"(%5701) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5703 = "llvm.load"(%5702) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5703) [^bb869, ^bb869] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb870:
    %5704 = "llvm.extractvalue"(%5696) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5705 = "llvm.load"(%5699) : (!llvm.ptr) -> i32
    %5706 = "llvm.getelementptr"(%5704, %5705) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5707 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5708 = "llvm.getelementptr"(%5706, %5707) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5708) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb871(%5709 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5710 : !llvm.ptr):
    %5711 = "mini.invariant"(%5710) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5712 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb872] : () -> ()
  ^bb873:
    %5713 = "llvm.mlir.constant"() <{"value" = 41 : i32}> : () -> i32
    "llvm.store"(%5713, %5712) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb874] : () -> ()
  ^bb872:
    %5714 = "llvm.getelementptr"(%5710) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5715 = "mini.checkflag"(%5714) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5716 = "llvm.load"(%5715) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5716) [^bb873, ^bb873] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb874:
    %5717 = "llvm.extractvalue"(%5709) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5718 = "llvm.load"(%5712) : (!llvm.ptr) -> i32
    %5719 = "llvm.getelementptr"(%5717, %5718) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5720 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5721 = "llvm.getelementptr"(%5719, %5720) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5721) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_filter_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb875(%5722 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5723 : !llvm.ptr):
    %5724 = "mini.invariant"(%5723) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5725 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb876] : () -> ()
  ^bb877:
    %5726 = "llvm.mlir.constant"() <{"value" = 42 : i32}> : () -> i32
    "llvm.store"(%5726, %5725) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb878] : () -> ()
  ^bb876:
    %5727 = "llvm.getelementptr"(%5723) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5728 = "mini.checkflag"(%5727) {"typ_name" = "Iterable2"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5729 = "llvm.load"(%5728) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5729) [^bb877, ^bb877] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb878:
    %5730 = "llvm.extractvalue"(%5722) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5731 = "llvm.load"(%5725) : (!llvm.ptr) -> i32
    %5732 = "llvm.getelementptr"(%5730, %5731) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5733 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5734 = "llvm.getelementptr"(%5732, %5733) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5734) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_chain_otherIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb879(%5735 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5736 : !llvm.ptr):
    %5737 = "mini.invariant"(%5736) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5738 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb880] : () -> ()
  ^bb881:
    %5739 = "llvm.mlir.constant"() <{"value" = 43 : i32}> : () -> i32
    "llvm.store"(%5739, %5738) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb882] : () -> ()
  ^bb880:
    %5740 = "llvm.getelementptr"(%5736) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5741 = "mini.checkflag"(%5740) {"typ_name" = "Iterable2"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5742 = "llvm.load"(%5741) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5742) [^bb881, ^bb881] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb882:
    %5743 = "llvm.extractvalue"(%5735) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5744 = "llvm.load"(%5738) : (!llvm.ptr) -> i32
    %5745 = "llvm.getelementptr"(%5743, %5744) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5746 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5747 = "llvm.getelementptr"(%5745, %5746) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5747) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_interleave_otherIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb883(%5748 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5749 : !llvm.ptr):
    %5750 = "mini.invariant"(%5749) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5751 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb884] : () -> ()
  ^bb885:
    %5752 = "llvm.mlir.constant"() <{"value" = 44 : i32}> : () -> i32
    "llvm.store"(%5752, %5751) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb886] : () -> ()
  ^bb884:
    %5753 = "llvm.getelementptr"(%5749) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5754 = "mini.checkflag"(%5753) {"typ_name" = "Iterable2"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5755 = "llvm.load"(%5754) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5755) [^bb885, ^bb885] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb886:
    %5756 = "llvm.extractvalue"(%5748) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5757 = "llvm.load"(%5751) : (!llvm.ptr) -> i32
    %5758 = "llvm.getelementptr"(%5756, %5757) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5759 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5760 = "llvm.getelementptr"(%5758, %5759) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5760) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_zip_otherIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb887(%5761 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5762 : !llvm.ptr):
    %5763 = "mini.invariant"(%5762) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5764 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb888] : () -> ()
  ^bb889:
    %5765 = "llvm.mlir.constant"() <{"value" = 45 : i32}> : () -> i32
    "llvm.store"(%5765, %5764) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb890] : () -> ()
  ^bb888:
    %5766 = "llvm.getelementptr"(%5762) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5767 = "mini.checkflag"(%5766) {"typ_name" = "Iterable2"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5768 = "llvm.load"(%5767) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5768) [^bb889, ^bb889] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb890:
    %5769 = "llvm.extractvalue"(%5761) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5770 = "llvm.load"(%5764) : (!llvm.ptr) -> i32
    %5771 = "llvm.getelementptr"(%5769, %5770) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5772 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5773 = "llvm.getelementptr"(%5771, %5772) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5773) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_product_otherIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_ArrayIterator", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32]} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "ArrayIterator_field_ArrayIterator_0"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ArrayIterator_getter_array", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Array", "parameterization" = "_parameterization_ArrayArrayIterator.T_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ArrayIterator_setter_array", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Array", "parameterization" = "_parameterization_ArrayArrayIterator.T_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ArrayIterator_field_array", "getter_name" = "ArrayIterator_getter_array", "setter_name" = "ArrayIterator_setter_array"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ArrayIterator_getter_index", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ArrayIterator_setter_index", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ArrayIterator_field_index", "getter_name" = "ArrayIterator_getter_index", "setter_name" = "ArrayIterator_setter_index"} : () -> ()
  "mini.func"() ({
  ^bb891(%5774 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5775 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5776 : !llvm.ptr, %5777 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %5778 = "mini.wrap"(%5774) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>
    %5779 = "mini.to_fat_ptr"(%5778) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ArrayIterator", "to_typ_name" = "ArrayIterator"} : (!mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>) -> !mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>
    %5780 = "mini.wrap"(%5777) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>
    %5781 = "mini.to_fat_ptr"(%5780) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>
    %5782 = "mini.to_fat_ptr"(%5781) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>
    "mini.set_field"(%5779, %5782) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>, !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>) -> ()
    %5783 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5784 = builtin.unrealized_conversion_cast %5783 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%5779, %5784) {"offset" = 2 : i64, "vtable_bytes" = 80 : i32, "original_type" = i32} : (!mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>, !mini.ptr<i32>) -> ()
  }) {"func_name" = "ArrayIterator_init_arrayArrayT", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb892(%5785 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5786 : !llvm.ptr):
    %5787 = "mini.invariant"(%5786) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5788 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb893] : () -> ()
  ^bb894:
    %5789 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%5789, %5788) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb895] : () -> ()
  ^bb893:
    %5790 = "llvm.getelementptr"(%5786) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5791 = "mini.checkflag"(%5790) {"typ_name" = "Array"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5792 = "llvm.load"(%5791) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5792) [^bb894, ^bb894] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb895:
    %5793 = "llvm.extractvalue"(%5785) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5794 = "llvm.load"(%5788) : (!llvm.ptr) -> i32
    %5795 = "llvm.getelementptr"(%5793, %5794) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5796 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5797 = "llvm.getelementptr"(%5795, %5796) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5797) : (!llvm.ptr) -> ()
  }) {"func_name" = "ArrayIterator_B_init_arrayArrayT", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb896(%5798 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5799 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5800 : !llvm.ptr):
    %5801 = "mini.wrap"(%5798) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>
    %5802 = "mini.to_fat_ptr"(%5801) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ArrayIterator", "to_typ_name" = "ArrayIterator"} : (!mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>) -> !mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>
    %5803 = "mini.get_field"(%5802) {"offset" = 2 : i64, "vtable_bytes" = 80 : i32, "original_type" = i32} : (!mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>) -> !mini.ptr<i32>
    %5804 = "mini.get_field"(%5802) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Array"} : (!mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>
    %5805 = "mini.unwrap"(%5804) : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5806 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %5807 = "mini.method_call"(%5806, %5805) {"offset" = 7 : i32, "vptrs" = [], "vtable_size" = 69 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.ptr<i32>
    %5808 = builtin.unrealized_conversion_cast %5807 : !mini.ptr<i32> to !mini.ptr<i32>
    %5809 = "mini.unwrap"(%5803) : (!mini.ptr<i32>) -> i32
    %5810 = "mini.unwrap"(%5808) : (!mini.ptr<i32>) -> i32
    %5811 = "mini.comparison"(%5809, %5810) {"op" = "GE"} : (i32, i32) -> i1
    %5812 = "mini.wrap"(%5811) : (i1) -> !mini.ptr<i32>
    %5813 = "mini.unwrap"(%5812) : (!mini.ptr<i32>) -> i1
    "mini.if"(%5813) ({
      %5814 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
      %5815 = "mini.unionize"(%5814) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]>
      "mini.return"(%5815) : (!mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]>) -> ()
    }) : (i1) -> ()
    %5816 = "mini.get_field"(%5802) {"offset" = 2 : i64, "vtable_bytes" = 80 : i32, "original_type" = i32} : (!mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>) -> !mini.ptr<i32>
    %5817 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5818 = "mini.unwrap"(%5816) : (!mini.ptr<i32>) -> i32
    %5819 = "mini.unwrap"(%5817) : (!mini.ptr<i32>) -> i32
    %5820 = "mini.arithmetic"(%5818, %5819) {"op" = "ADD"} : (i32, i32) -> i32
    %5821 = "mini.wrap"(%5820) : (i32) -> !mini.ptr<i32>
    %5822 = builtin.unrealized_conversion_cast %5821 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%5802, %5822) {"offset" = 2 : i64, "vtable_bytes" = 80 : i32, "original_type" = i32} : (!mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>, !mini.ptr<i32>) -> ()
    %5823 = "mini.get_field"(%5802) {"offset" = 2 : i64, "vtable_bytes" = 80 : i32, "original_type" = i32} : (!mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>) -> !mini.ptr<i32>
    %5824 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5825 = "mini.unwrap"(%5823) : (!mini.ptr<i32>) -> i32
    %5826 = "mini.unwrap"(%5824) : (!mini.ptr<i32>) -> i32
    %5827 = "mini.arithmetic"(%5825, %5826) {"op" = "SUB"} : (i32, i32) -> i32
    %5828 = "mini.wrap"(%5827) : (i32) -> !mini.ptr<i32>
    %5829 = builtin.unrealized_conversion_cast %5828 : !mini.ptr<i32> to !mini.ptr<i32>
    %5830 = "mini.unwrap"(%5829) : (!mini.ptr<i32>) -> i32
    %5831 = "mini.get_field"(%5802) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Array"} : (!mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>
    %5832 = "mini.unwrap"(%5831) : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5833 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %5834 = "mini.parameterizations_array"(%5833) : (!llvm.ptr) -> !llvm.ptr
    %5835 = "mini.method_call"(%5834, %5832, %5830) {"offset" = 13 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 69 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !mini.type_param<"T", !mini.any, "Array">
    %5836 = "mini.to_fat_ptr"(%5835) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Array">) -> !mini.type_param<"T", !mini.any, "ArrayIterator">
    %5837 = builtin.unrealized_conversion_cast %5836 : !mini.type_param<"T", !mini.any, "ArrayIterator"> to !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]>
    "mini.return"(%5837) : (!mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]>) -> ()
  }) {"func_name" = "ArrayIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb897(%5838 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5839 : !llvm.ptr):
    %5840 = "mini.invariant"(%5839) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5841 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb898] : () -> ()
  ^bb898:
    %5842 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
    "llvm.store"(%5842, %5841) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb899] : () -> ()
  ^bb899:
    %5843 = "llvm.extractvalue"(%5838) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5844 = "llvm.load"(%5841) : (!llvm.ptr) -> i32
    %5845 = "llvm.getelementptr"(%5843, %5844) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5846 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5847 = "llvm.getelementptr"(%5845, %5846) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5847) : (!llvm.ptr) -> ()
  }) {"func_name" = "ArrayIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_MapIterable2", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>]} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "MapIterable2_field_MapIterable2_0"} : () -> ()
  "mini.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "MapIterable2_field_MapIterable2_1"} : () -> ()
  "mini.getter_def"() {"meth_name" = "MapIterable2_getter_iterable", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable2", "parameterization" = "_parameterization_Iterable2MapIterable2.T_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "MapIterable2_setter_iterable", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable2", "parameterization" = "_parameterization_Iterable2MapIterable2.T_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "MapIterable2_field_iterable", "getter_name" = "MapIterable2_getter_iterable", "setter_name" = "MapIterable2_setter_iterable"} : () -> ()
  "mini.getter_def"() {"meth_name" = "MapIterable2_getter_f", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionMapIterable2.T_subtype_Any_to_MapIterable2.U_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "MapIterable2_setter_f", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionMapIterable2.T_subtype_Any_to_MapIterable2.U_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "MapIterable2_field_f", "getter_name" = "MapIterable2_getter_f", "setter_name" = "MapIterable2_setter_f"} : () -> ()
  "mini.func"() ({
  ^bb900(%5848 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5849 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5850 : !llvm.ptr, %5851 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5852 : !llvm.struct<(!llvm.ptr)>):
    %5853 = "mini.wrap"(%5848) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">, !mini.type_param<"U", !mini.any, "MapIterable2">]>
    %5854 = "mini.to_fat_ptr"(%5853) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "MapIterable2", "to_typ_name" = "MapIterable2"} : (!mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">, !mini.type_param<"U", !mini.any, "MapIterable2">]>) -> !mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">, !mini.type_param<"U", !mini.any, "MapIterable2">]>
    %5855 = "mini.wrap"(%5851) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">]>
    %5856 = "mini.to_fat_ptr"(%5855) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">]>
    %5857 = "mini.to_fat_ptr"(%5856) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">]>
    "mini.set_field"(%5854, %5857) {"offset" = 2 : i64, "vtable_bytes" = 408 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">, !mini.type_param<"U", !mini.any, "MapIterable2">]>, !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">]>) -> ()
    %5858 = "mini.wrap"(%5852) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.type_param<"T", !mini.any, "MapIterable2">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterable2">>
    %5859 = builtin.unrealized_conversion_cast %5858 : !mini.function<[!mini.type_param<"T", !mini.any, "MapIterable2">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterable2">> to !mini.function<[!mini.type_param<"T", !mini.any, "MapIterable2">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterable2">>
    %5860 = builtin.unrealized_conversion_cast %5859 : !mini.function<[!mini.type_param<"T", !mini.any, "MapIterable2">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterable2">> to !mini.function<[!mini.type_param<"T", !mini.any, "MapIterable2">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterable2">>
    "mini.set_field"(%5854, %5860) {"offset" = 3 : i64, "vtable_bytes" = 408 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">, !mini.type_param<"U", !mini.any, "MapIterable2">]>, !mini.function<[!mini.type_param<"T", !mini.any, "MapIterable2">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterable2">>) -> ()
  }) {"func_name" = "MapIterable2_init_iterableIterable2T_fFunctionT_to_U", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb901(%5861 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5862 : !llvm.ptr):
    %5863 = "mini.invariant"(%5862) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5864 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb902] : () -> ()
  ^bb903:
    %5865 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
    "llvm.store"(%5865, %5864) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb904] : () -> ()
  ^bb905:
    %5866 = "llvm.getelementptr"(%5862) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5867 = "mini.checkflag"(%5866) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5868 = "llvm.load"(%5867) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5868) [^bb903, ^bb903] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb902:
    %5869 = "llvm.getelementptr"(%5862) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5870 = "mini.checkflag"(%5869) {"typ_name" = "Iterable2"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5871 = "llvm.load"(%5870) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5871) [^bb905, ^bb905] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb904:
    %5872 = "llvm.extractvalue"(%5861) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5873 = "llvm.load"(%5864) : (!llvm.ptr) -> i32
    %5874 = "llvm.getelementptr"(%5872, %5873) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<51 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5875 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5876 = "llvm.getelementptr"(%5874, %5875) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5876) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable2_B_init_iterableIterable2T_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb906(%5877 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5878 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5879 : !llvm.ptr):
    %5880 = "mini.wrap"(%5877) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">, !mini.type_param<"U", !mini.any, "MapIterable2">]>
    %5881 = "mini.to_fat_ptr"(%5880) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "MapIterable2", "to_typ_name" = "MapIterable2"} : (!mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">, !mini.type_param<"U", !mini.any, "MapIterable2">]>) -> !mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">, !mini.type_param<"U", !mini.any, "MapIterable2">]>
    %5882 = "mini.get_field"(%5881) {"offset" = 2 : i64, "vtable_bytes" = 408 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable2"} : (!mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">, !mini.type_param<"U", !mini.any, "MapIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">]>
    %5883 = "mini.unwrap"(%5882) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5884 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %5885 = "mini.method_call"(%5884, %5883) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %5886 = "mini.to_fat_ptr"(%5885) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "MapIterable2">]>
    %5887 = "mini.get_field"(%5881) {"offset" = 3 : i64, "vtable_bytes" = 408 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">, !mini.type_param<"U", !mini.any, "MapIterable2">]>) -> !mini.function<[!mini.type_param<"T", !mini.any, "MapIterable2">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterable2">>
    %5888 = "mini.unwrap"(%5886) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "MapIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5889 = "mini.unwrap"(%5887) : (!mini.function<[!mini.type_param<"T", !mini.any, "MapIterable2">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterable2">>) -> !llvm.struct<(!llvm.ptr)>
    %5890 = "mini.get_type_field"(%5881) {"offset" = 0 : i64, "vtable_bytes" = 408 : i32} : (!mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">, !mini.type_param<"U", !mini.any, "MapIterable2">]>) -> !mini.reified_type
    %5891 = "mini.get_type_field"(%5881) {"offset" = 1 : i64, "vtable_bytes" = 408 : i32} : (!mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">, !mini.type_param<"U", !mini.any, "MapIterable2">]>) -> !mini.reified_type
    %5892 = "mini.new"(%5890, %5891) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "MapIterator2", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!mini.reified_type, !mini.reified_type) -> !mini.fatptr<"MapIterator2", [!mini.type_param<"T", !mini.any, "MapIterable2">, !mini.type_param<"U", !mini.any, "MapIterable2">]>
    %5893 = "mini.get_field"(%5881) {"offset" = 2 : i64, "vtable_bytes" = 408 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable2"} : (!mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">, !mini.type_param<"U", !mini.any, "MapIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">]>
    %5894 = "mini.unwrap"(%5893) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5895 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %5896 = "mini.method_call"(%5895, %5894) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %5897 = "mini.to_fat_ptr"(%5896) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "MapIterable2">]>
    %5898 = "mini.get_field"(%5881) {"offset" = 3 : i64, "vtable_bytes" = 408 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">, !mini.type_param<"U", !mini.any, "MapIterable2">]>) -> !mini.function<[!mini.type_param<"T", !mini.any, "MapIterable2">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterable2">>
    %5899 = "mini.to_fat_ptr"(%5897) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "MapIterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "MapIterator2">]>
    %5900 = "mini.unwrap"(%5899) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "MapIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5901 = builtin.unrealized_conversion_cast %5898 : !mini.function<[!mini.type_param<"T", !mini.any, "MapIterable2">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterable2">> to !mini.function<[!mini.type_param<"T", !mini.any, "MapIterator2">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterator2">>
    %5902 = "mini.unwrap"(%5901) : (!mini.function<[!mini.type_param<"T", !mini.any, "MapIterator2">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterator2">>) -> !llvm.struct<(!llvm.ptr)>
    %5903 = "mini.unwrap"(%5892) : (!mini.fatptr<"MapIterator2", [!mini.type_param<"T", !mini.any, "MapIterable2">, !mini.type_param<"U", !mini.any, "MapIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5904 = "mini.parameterization"(%5890) {"id_hierarchy" = ["Iterator2", [0 : i32]], "name_hierarchy" = ["Iterator2MapIterable2.T_subtype_Any", ["MapIterable2.T_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %5905 = "mini.parameterization"(%5891, %5890) {"id_hierarchy" = ["function_typ", [0 : i32], [1 : i32]], "name_hierarchy" = ["FunctionMapIterable2.T_subtype_Any_to_MapIterable2.U_subtype_Any", ["MapIterable2.U_subtype_Any"], ["MapIterable2.T_subtype_Any"]]} : (!mini.reified_type, !mini.reified_type) -> !llvm.ptr
    %5906 = "mini.parameterizations_array"(%5904, %5905) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%5906, %5903, %5900, %5902) {"offset" = 4 : i32, "vptrs" = [#none, "function_typ"], "vtable_size" = 11 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
    %5907 = "mini.to_fat_ptr"(%5892) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "MapIterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"MapIterator2", [!mini.type_param<"T", !mini.any, "MapIterable2">, !mini.type_param<"U", !mini.any, "MapIterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    "mini.return"(%5907) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> ()
  }) {"func_name" = "MapIterable2_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb907(%5908 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5909 : !llvm.ptr):
    %5910 = "mini.invariant"(%5909) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5911 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb908] : () -> ()
  ^bb908:
    %5912 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
    "llvm.store"(%5912, %5911) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb909] : () -> ()
  ^bb909:
    %5913 = "llvm.extractvalue"(%5908) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5914 = "llvm.load"(%5911) : (!llvm.ptr) -> i32
    %5915 = "llvm.getelementptr"(%5913, %5914) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<51 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5916 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5917 = "llvm.getelementptr"(%5915, %5916) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5917) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable2_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb910(%5918 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5919 : !llvm.ptr):
    %5920 = "mini.invariant"(%5919) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5921 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb911] : () -> ()
  ^bb912:
    %5922 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%5922, %5921) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb913] : () -> ()
  ^bb911:
    %5923 = "llvm.getelementptr"(%5919) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5924 = "mini.checkflag"(%5923) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5925 = "llvm.load"(%5924) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5925) [^bb912, ^bb912] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb913:
    %5926 = "llvm.extractvalue"(%5918) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5927 = "llvm.load"(%5921) : (!llvm.ptr) -> i32
    %5928 = "llvm.getelementptr"(%5926, %5927) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<51 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5929 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5930 = "llvm.getelementptr"(%5928, %5929) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5930) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable2_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb914(%5931 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5932 : !llvm.ptr):
    %5933 = "mini.invariant"(%5932) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5934 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb915] : () -> ()
  ^bb916:
    %5935 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
    "llvm.store"(%5935, %5934) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb917] : () -> ()
  ^bb918:
    %5936 = "llvm.getelementptr"(%5932) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5937 = "mini.checkflag"(%5936) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5938 = "llvm.load"(%5937) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5938) [^bb916, ^bb916] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb915:
    %5939 = "llvm.getelementptr"(%5932) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5940 = "mini.checkflag"(%5939) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5941 = "llvm.load"(%5940) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5941) [^bb918, ^bb918] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb917:
    %5942 = "llvm.extractvalue"(%5931) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5943 = "llvm.load"(%5934) : (!llvm.ptr) -> i32
    %5944 = "llvm.getelementptr"(%5942, %5943) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<51 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5945 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5946 = "llvm.getelementptr"(%5944, %5945) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5946) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb919(%5947 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5948 : !llvm.ptr):
    %5949 = "mini.invariant"(%5948) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5950 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb920] : () -> ()
  ^bb921:
    %5951 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
    "llvm.store"(%5951, %5950) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb922] : () -> ()
  ^bb920:
    %5952 = "llvm.getelementptr"(%5948) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5953 = "mini.checkflag"(%5952) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5954 = "llvm.load"(%5953) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5954) [^bb921, ^bb921] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb922:
    %5955 = "llvm.extractvalue"(%5947) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5956 = "llvm.load"(%5950) : (!llvm.ptr) -> i32
    %5957 = "llvm.getelementptr"(%5955, %5956) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<51 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5958 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5959 = "llvm.getelementptr"(%5957, %5958) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5959) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable2_B_all_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb923(%5960 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5961 : !llvm.ptr):
    %5962 = "mini.invariant"(%5961) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5963 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb924] : () -> ()
  ^bb925:
    %5964 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
    "llvm.store"(%5964, %5963) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb926] : () -> ()
  ^bb924:
    %5965 = "llvm.getelementptr"(%5961) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5966 = "mini.checkflag"(%5965) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5967 = "llvm.load"(%5966) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5967) [^bb925, ^bb925] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb926:
    %5968 = "llvm.extractvalue"(%5960) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5969 = "llvm.load"(%5963) : (!llvm.ptr) -> i32
    %5970 = "llvm.getelementptr"(%5968, %5969) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<51 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5971 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5972 = "llvm.getelementptr"(%5970, %5971) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5972) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable2_B_any_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb927(%5973 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5974 : !llvm.ptr):
    %5975 = "mini.invariant"(%5974) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5976 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb928] : () -> ()
  ^bb929:
    %5977 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
    "llvm.store"(%5977, %5976) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb930] : () -> ()
  ^bb928:
    %5978 = "llvm.getelementptr"(%5974) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5979 = "mini.checkflag"(%5978) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5980 = "llvm.load"(%5979) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5980) [^bb929, ^bb929] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb930:
    %5981 = "llvm.extractvalue"(%5973) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5982 = "llvm.load"(%5976) : (!llvm.ptr) -> i32
    %5983 = "llvm.getelementptr"(%5981, %5982) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<51 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5984 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5985 = "llvm.getelementptr"(%5983, %5984) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5985) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable2_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb931(%5986 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5987 : !llvm.ptr):
    %5988 = "mini.invariant"(%5987) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5989 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb932] : () -> ()
  ^bb933:
    %5990 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
    "llvm.store"(%5990, %5989) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb934] : () -> ()
  ^bb932:
    %5991 = "llvm.getelementptr"(%5987) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5992 = "mini.checkflag"(%5991) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5993 = "llvm.load"(%5992) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5993) [^bb933, ^bb933] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb934:
    %5994 = "llvm.extractvalue"(%5986) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5995 = "llvm.load"(%5989) : (!llvm.ptr) -> i32
    %5996 = "llvm.getelementptr"(%5994, %5995) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<51 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5997 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5998 = "llvm.getelementptr"(%5996, %5997) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5998) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable2_B_filter_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb935(%5999 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6000 : !llvm.ptr):
    %6001 = "mini.invariant"(%6000) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6002 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb936] : () -> ()
  ^bb937:
    %6003 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
    "llvm.store"(%6003, %6002) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb938] : () -> ()
  ^bb936:
    %6004 = "llvm.getelementptr"(%6000) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6005 = "mini.checkflag"(%6004) {"typ_name" = "Iterable2"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6006 = "llvm.load"(%6005) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6006) [^bb937, ^bb937] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb938:
    %6007 = "llvm.extractvalue"(%5999) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6008 = "llvm.load"(%6002) : (!llvm.ptr) -> i32
    %6009 = "llvm.getelementptr"(%6007, %6008) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<51 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6010 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6011 = "llvm.getelementptr"(%6009, %6010) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6011) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable2_B_chain_otherIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb939(%6012 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6013 : !llvm.ptr):
    %6014 = "mini.invariant"(%6013) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6015 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb940] : () -> ()
  ^bb941:
    %6016 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
    "llvm.store"(%6016, %6015) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb942] : () -> ()
  ^bb940:
    %6017 = "llvm.getelementptr"(%6013) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6018 = "mini.checkflag"(%6017) {"typ_name" = "Iterable2"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6019 = "llvm.load"(%6018) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6019) [^bb941, ^bb941] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb942:
    %6020 = "llvm.extractvalue"(%6012) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6021 = "llvm.load"(%6015) : (!llvm.ptr) -> i32
    %6022 = "llvm.getelementptr"(%6020, %6021) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<51 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6023 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6024 = "llvm.getelementptr"(%6022, %6023) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6024) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable2_B_interleave_otherIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb943(%6025 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6026 : !llvm.ptr):
    %6027 = "mini.invariant"(%6026) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6028 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb944] : () -> ()
  ^bb945:
    %6029 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
    "llvm.store"(%6029, %6028) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb946] : () -> ()
  ^bb944:
    %6030 = "llvm.getelementptr"(%6026) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6031 = "mini.checkflag"(%6030) {"typ_name" = "Iterable2"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6032 = "llvm.load"(%6031) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6032) [^bb945, ^bb945] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb946:
    %6033 = "llvm.extractvalue"(%6025) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6034 = "llvm.load"(%6028) : (!llvm.ptr) -> i32
    %6035 = "llvm.getelementptr"(%6033, %6034) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<51 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6036 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6037 = "llvm.getelementptr"(%6035, %6036) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6037) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable2_B_zip_otherIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb947(%6038 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6039 : !llvm.ptr):
    %6040 = "mini.invariant"(%6039) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6041 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb948] : () -> ()
  ^bb949:
    %6042 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
    "llvm.store"(%6042, %6041) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb950] : () -> ()
  ^bb948:
    %6043 = "llvm.getelementptr"(%6039) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6044 = "mini.checkflag"(%6043) {"typ_name" = "Iterable2"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6045 = "llvm.load"(%6044) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6045) [^bb949, ^bb949] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb950:
    %6046 = "llvm.extractvalue"(%6038) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6047 = "llvm.load"(%6041) : (!llvm.ptr) -> i32
    %6048 = "llvm.getelementptr"(%6046, %6047) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<51 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6049 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6050 = "llvm.getelementptr"(%6048, %6049) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6050) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable2_B_product_otherIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_MapIterator2", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>]} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "MapIterator2_field_MapIterator2_0"} : () -> ()
  "mini.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "MapIterator2_field_MapIterator2_1"} : () -> ()
  "mini.getter_def"() {"meth_name" = "MapIterator2_getter_iterator", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator2", "parameterization" = "_parameterization_Iterator2MapIterator2.T_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "MapIterator2_setter_iterator", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator2", "parameterization" = "_parameterization_Iterator2MapIterator2.T_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "MapIterator2_field_iterator", "getter_name" = "MapIterator2_getter_iterator", "setter_name" = "MapIterator2_setter_iterator"} : () -> ()
  "mini.getter_def"() {"meth_name" = "MapIterator2_getter_f", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionMapIterator2.T_subtype_Any_to_MapIterator2.U_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "MapIterator2_setter_f", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionMapIterator2.T_subtype_Any_to_MapIterator2.U_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "MapIterator2_field_f", "getter_name" = "MapIterator2_getter_f", "setter_name" = "MapIterator2_setter_f"} : () -> ()
  "mini.func"() ({
  ^bb951(%6051 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6052 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6053 : !llvm.ptr, %6054 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6055 : !llvm.struct<(!llvm.ptr)>):
    %6056 = "mini.wrap"(%6051) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"MapIterator2", [!mini.type_param<"T", !mini.any, "MapIterator2">, !mini.type_param<"U", !mini.any, "MapIterator2">]>
    %6057 = "mini.to_fat_ptr"(%6056) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "MapIterator2", "to_typ_name" = "MapIterator2"} : (!mini.fatptr<"MapIterator2", [!mini.type_param<"T", !mini.any, "MapIterator2">, !mini.type_param<"U", !mini.any, "MapIterator2">]>) -> !mini.fatptr<"MapIterator2", [!mini.type_param<"T", !mini.any, "MapIterator2">, !mini.type_param<"U", !mini.any, "MapIterator2">]>
    %6058 = "mini.wrap"(%6054) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "MapIterator2">]>
    %6059 = "mini.to_fat_ptr"(%6058) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "MapIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "MapIterator2">]>
    %6060 = "mini.to_fat_ptr"(%6059) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "MapIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "MapIterator2">]>
    "mini.set_field"(%6057, %6060) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"MapIterator2", [!mini.type_param<"T", !mini.any, "MapIterator2">, !mini.type_param<"U", !mini.any, "MapIterator2">]>, !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "MapIterator2">]>) -> ()
    %6061 = "mini.wrap"(%6055) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.type_param<"T", !mini.any, "MapIterator2">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterator2">>
    %6062 = builtin.unrealized_conversion_cast %6061 : !mini.function<[!mini.type_param<"T", !mini.any, "MapIterator2">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterator2">> to !mini.function<[!mini.type_param<"T", !mini.any, "MapIterator2">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterator2">>
    %6063 = builtin.unrealized_conversion_cast %6062 : !mini.function<[!mini.type_param<"T", !mini.any, "MapIterator2">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterator2">> to !mini.function<[!mini.type_param<"T", !mini.any, "MapIterator2">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterator2">>
    "mini.set_field"(%6057, %6063) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"MapIterator2", [!mini.type_param<"T", !mini.any, "MapIterator2">, !mini.type_param<"U", !mini.any, "MapIterator2">]>, !mini.function<[!mini.type_param<"T", !mini.any, "MapIterator2">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterator2">>) -> ()
  }) {"func_name" = "MapIterator2_init_iteratorIterator2T_fFunctionT_to_U", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb952(%6064 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6065 : !llvm.ptr):
    %6066 = "mini.invariant"(%6065) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6067 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb953] : () -> ()
  ^bb954:
    %6068 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
    "llvm.store"(%6068, %6067) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb955] : () -> ()
  ^bb956:
    %6069 = "llvm.getelementptr"(%6065) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6070 = "mini.checkflag"(%6069) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6071 = "llvm.load"(%6070) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6071) [^bb954, ^bb954] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb953:
    %6072 = "llvm.getelementptr"(%6065) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6073 = "mini.checkflag"(%6072) {"typ_name" = "Iterator2"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6074 = "llvm.load"(%6073) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6074) [^bb956, ^bb956] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb955:
    %6075 = "llvm.extractvalue"(%6064) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6076 = "llvm.load"(%6067) : (!llvm.ptr) -> i32
    %6077 = "llvm.getelementptr"(%6075, %6076) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6078 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6079 = "llvm.getelementptr"(%6077, %6078) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6079) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterator2_B_init_iteratorIterator2T_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb957(%6080 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6081 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6082 : !llvm.ptr):
    %6083 = "mini.wrap"(%6080) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"MapIterator2", [!mini.type_param<"T", !mini.any, "MapIterator2">, !mini.type_param<"U", !mini.any, "MapIterator2">]>
    %6084 = "mini.to_fat_ptr"(%6083) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "MapIterator2", "to_typ_name" = "MapIterator2"} : (!mini.fatptr<"MapIterator2", [!mini.type_param<"T", !mini.any, "MapIterator2">, !mini.type_param<"U", !mini.any, "MapIterator2">]>) -> !mini.fatptr<"MapIterator2", [!mini.type_param<"T", !mini.any, "MapIterator2">, !mini.type_param<"U", !mini.any, "MapIterator2">]>
    %6085 = "mini.get_field"(%6084) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator2"} : (!mini.fatptr<"MapIterator2", [!mini.type_param<"T", !mini.any, "MapIterator2">, !mini.type_param<"U", !mini.any, "MapIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "MapIterator2">]>
    %6086 = "mini.unwrap"(%6085) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "MapIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6087 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %6088 = "mini.method_call"(%6087, %6086) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]>
    %6089 = builtin.unrealized_conversion_cast %6088 : !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]> to !mini.union<[!mini.type_param<"T", !mini.any, "MapIterator2">, !mini.nil]>
    %6090 = "mini.get_type_field"(%6084) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32} : (!mini.fatptr<"MapIterator2", [!mini.type_param<"T", !mini.any, "MapIterator2">, !mini.type_param<"U", !mini.any, "MapIterator2">]>) -> !mini.reified_type
    %6091 = "mini.checkflag"(%6089) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.type_param<"T", !mini.any, "MapIterator2">, !mini.nil]>) -> !mini.ptr<i1>
    %6092 = "mini.unwrap"(%6091) : (!mini.ptr<i1>) -> i1
    %6093 = builtin.unrealized_conversion_cast %6089 : !mini.union<[!mini.type_param<"T", !mini.any, "MapIterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.any, "MapIterator2">, !mini.nil]>
    "mini.if"(%6092) ({
      %6094 = "mini.to_fat_ptr"(%6093) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "MapIterator2">, !mini.nil]>) -> !mini.type_param<"T", !mini.any, "MapIterator2">
      %6095 = "mini.to_fat_ptr"(%6094) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "MapIterator2">) -> !mini.type_param<"T", !mini.any, "MapIterator2">
      %6096 = "mini.unwrap"(%6095) : (!mini.type_param<"T", !mini.any, "MapIterator2">) -> !llvm.struct<(!llvm.ptr, i160)>
      %6097 = "mini.get_field"(%6084) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"MapIterator2", [!mini.type_param<"T", !mini.any, "MapIterator2">, !mini.type_param<"U", !mini.any, "MapIterator2">]>) -> !mini.function<[!mini.type_param<"T", !mini.any, "MapIterator2">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterator2">>
      %6098 = "mini.unwrap"(%6097) : (!mini.function<[!mini.type_param<"T", !mini.any, "MapIterator2">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterator2">>) -> !llvm.ptr
      %6099 = "mini.fptr_call"(%6098, %6096) {"ret_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> !mini.type_param<"U", !mini.any, "MapIterator2">
      %6100 = builtin.unrealized_conversion_cast %6099 : !mini.type_param<"U", !mini.any, "MapIterator2"> to !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]>
      "mini.return"(%6100) : (!mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]>) -> ()
      "mini.castassign"(%6093, %6094) ({
        %6101 = builtin.unrealized_conversion_cast %6094 : !mini.type_param<"T", !mini.any, "MapIterator2"> to !mini.union<[!mini.type_param<"T", !mini.any, "MapIterator2">, !mini.nil]>
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.type_param<"T", !mini.any, "MapIterator2">, !mini.nil]>, !mini.type_param<"T", !mini.any, "MapIterator2">) -> ()
    }) : (i1) -> ()
    %6102 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
    %6103 = "mini.unionize"(%6102) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]>
    "mini.return"(%6103) : (!mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]>) -> ()
  }) {"func_name" = "MapIterator2_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb958(%6104 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6105 : !llvm.ptr):
    %6106 = "mini.invariant"(%6105) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6107 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb959] : () -> ()
  ^bb959:
    %6108 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    "llvm.store"(%6108, %6107) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb960] : () -> ()
  ^bb960:
    %6109 = "llvm.extractvalue"(%6104) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6110 = "llvm.load"(%6107) : (!llvm.ptr) -> i32
    %6111 = "llvm.getelementptr"(%6109, %6110) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6112 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6113 = "llvm.getelementptr"(%6111, %6112) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6113) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterator2_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_FilterIterable2", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>]} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "FilterIterable2_field_FilterIterable2_0"} : () -> ()
  "mini.getter_def"() {"meth_name" = "FilterIterable2_getter_iterable", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable2", "parameterization" = "_parameterization_Iterable2FilterIterable2.T_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "FilterIterable2_setter_iterable", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable2", "parameterization" = "_parameterization_Iterable2FilterIterable2.T_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "FilterIterable2_field_iterable", "getter_name" = "FilterIterable2_getter_iterable", "setter_name" = "FilterIterable2_setter_iterable"} : () -> ()
  "mini.getter_def"() {"meth_name" = "FilterIterable2_getter_f", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionFilterIterable2.T_subtype_Any_to_Ptri1"} : () -> ()
  "mini.setter_def"() {"meth_name" = "FilterIterable2_setter_f", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionFilterIterable2.T_subtype_Any_to_Ptri1"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "FilterIterable2_field_f", "getter_name" = "FilterIterable2_getter_f", "setter_name" = "FilterIterable2_setter_f"} : () -> ()
  "mini.func"() ({
  ^bb961(%6114 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6115 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6116 : !llvm.ptr, %6117 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6118 : !llvm.struct<(!llvm.ptr)>):
    %6119 = "mini.wrap"(%6114) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>
    %6120 = "mini.to_fat_ptr"(%6119) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "FilterIterable2", "to_typ_name" = "FilterIterable2"} : (!mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>) -> !mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>
    %6121 = "mini.wrap"(%6117) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>
    %6122 = "mini.to_fat_ptr"(%6121) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>
    %6123 = "mini.to_fat_ptr"(%6122) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>
    "mini.set_field"(%6120, %6123) {"offset" = 1 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>, !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>) -> ()
    %6124 = "mini.wrap"(%6118) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterable2">], !mini.any, !mini.ptr<i1>>
    %6125 = builtin.unrealized_conversion_cast %6124 : !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterable2">], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterable2">], !mini.any, !mini.ptr<i1>>
    %6126 = builtin.unrealized_conversion_cast %6125 : !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterable2">], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterable2">], !mini.any, !mini.ptr<i1>>
    "mini.set_field"(%6120, %6126) {"offset" = 2 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>, !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterable2">], !mini.any, !mini.ptr<i1>>) -> ()
  }) {"func_name" = "FilterIterable2_init_iterableIterable2T_fFunctionT_to_Ptri1", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb962(%6127 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6128 : !llvm.ptr):
    %6129 = "mini.invariant"(%6128) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6130 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb963] : () -> ()
  ^bb964:
    %6131 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
    "llvm.store"(%6131, %6130) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb965] : () -> ()
  ^bb966:
    %6132 = "llvm.getelementptr"(%6128) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6133 = "mini.checkflag"(%6132) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6134 = "llvm.load"(%6133) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6134) [^bb964, ^bb964] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb963:
    %6135 = "llvm.getelementptr"(%6128) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6136 = "mini.checkflag"(%6135) {"typ_name" = "Iterable2"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6137 = "llvm.load"(%6136) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6137) [^bb966, ^bb966] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb965:
    %6138 = "llvm.extractvalue"(%6127) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6139 = "llvm.load"(%6130) : (!llvm.ptr) -> i32
    %6140 = "llvm.getelementptr"(%6138, %6139) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6141 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6142 = "llvm.getelementptr"(%6140, %6141) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6142) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable2_B_init_iterableIterable2T_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb967(%6143 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6144 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6145 : !llvm.ptr):
    %6146 = "mini.wrap"(%6143) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>
    %6147 = "mini.to_fat_ptr"(%6146) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "FilterIterable2", "to_typ_name" = "FilterIterable2"} : (!mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>) -> !mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>
    %6148 = "mini.get_field"(%6147) {"offset" = 1 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable2"} : (!mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>
    %6149 = "mini.unwrap"(%6148) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6150 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %6151 = "mini.method_call"(%6150, %6149) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %6152 = "mini.to_fat_ptr"(%6151) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>
    %6153 = "mini.get_field"(%6147) {"offset" = 2 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>) -> !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterable2">], !mini.any, !mini.ptr<i1>>
    %6154 = "mini.unwrap"(%6152) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6155 = "mini.unwrap"(%6153) : (!mini.function<[!mini.type_param<"T", !mini.any, "FilterIterable2">], !mini.any, !mini.ptr<i1>>) -> !llvm.struct<(!llvm.ptr)>
    %6156 = "mini.get_type_field"(%6147) {"offset" = 0 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>) -> !mini.reified_type
    %6157 = "mini.new"(%6156) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "FilterIterator2", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!mini.reified_type) -> !mini.fatptr<"FilterIterator2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>
    %6158 = "mini.get_field"(%6147) {"offset" = 1 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable2"} : (!mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>
    %6159 = "mini.unwrap"(%6158) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6160 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %6161 = "mini.method_call"(%6160, %6159) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %6162 = "mini.to_fat_ptr"(%6161) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>
    %6163 = "mini.get_field"(%6147) {"offset" = 2 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>) -> !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterable2">], !mini.any, !mini.ptr<i1>>
    %6164 = "mini.to_fat_ptr"(%6162) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "FilterIterator2">]>
    %6165 = "mini.unwrap"(%6164) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "FilterIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6166 = builtin.unrealized_conversion_cast %6163 : !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterable2">], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterator2">], !mini.any, !mini.ptr<i1>>
    %6167 = "mini.unwrap"(%6166) : (!mini.function<[!mini.type_param<"T", !mini.any, "FilterIterator2">], !mini.any, !mini.ptr<i1>>) -> !llvm.struct<(!llvm.ptr)>
    %6168 = "mini.unwrap"(%6157) : (!mini.fatptr<"FilterIterator2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6169 = "mini.parameterization"(%6156) {"id_hierarchy" = ["Iterator2", [0 : i32]], "name_hierarchy" = ["Iterator2FilterIterable2.T_subtype_Any", ["FilterIterable2.T_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %6170 = "mini.parameterization"(%6156) {"id_hierarchy" = ["function_typ", ["bool_typ"], [0 : i32]], "name_hierarchy" = ["FunctionFilterIterable2.T_subtype_Any_to_Ptri1", ["Ptri1"], ["FilterIterable2.T_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %6171 = "mini.parameterizations_array"(%6169, %6170) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%6171, %6168, %6165, %6167) {"offset" = 3 : i32, "vptrs" = [#none, "function_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
    %6172 = "mini.to_fat_ptr"(%6157) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "FilterIterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"FilterIterator2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    "mini.return"(%6172) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> ()
  }) {"func_name" = "FilterIterable2_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb968(%6173 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6174 : !llvm.ptr):
    %6175 = "mini.invariant"(%6174) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6176 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb969] : () -> ()
  ^bb969:
    %6177 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
    "llvm.store"(%6177, %6176) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb970] : () -> ()
  ^bb970:
    %6178 = "llvm.extractvalue"(%6173) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6179 = "llvm.load"(%6176) : (!llvm.ptr) -> i32
    %6180 = "llvm.getelementptr"(%6178, %6179) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6181 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6182 = "llvm.getelementptr"(%6180, %6181) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6182) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable2_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb971(%6183 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6184 : !llvm.ptr):
    %6185 = "mini.invariant"(%6184) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6186 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb972] : () -> ()
  ^bb973:
    %6187 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
    "llvm.store"(%6187, %6186) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb974] : () -> ()
  ^bb972:
    %6188 = "llvm.getelementptr"(%6184) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6189 = "mini.checkflag"(%6188) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6190 = "llvm.load"(%6189) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6190) [^bb973, ^bb973] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb974:
    %6191 = "llvm.extractvalue"(%6183) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6192 = "llvm.load"(%6186) : (!llvm.ptr) -> i32
    %6193 = "llvm.getelementptr"(%6191, %6192) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6194 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6195 = "llvm.getelementptr"(%6193, %6194) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6195) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable2_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb975(%6196 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6197 : !llvm.ptr):
    %6198 = "mini.invariant"(%6197) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6199 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb976] : () -> ()
  ^bb977:
    %6200 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%6200, %6199) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb978] : () -> ()
  ^bb979:
    %6201 = "llvm.getelementptr"(%6197) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6202 = "mini.checkflag"(%6201) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6203 = "llvm.load"(%6202) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6203) [^bb977, ^bb977] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb976:
    %6204 = "llvm.getelementptr"(%6197) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6205 = "mini.checkflag"(%6204) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6206 = "llvm.load"(%6205) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6206) [^bb979, ^bb979] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb978:
    %6207 = "llvm.extractvalue"(%6196) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6208 = "llvm.load"(%6199) : (!llvm.ptr) -> i32
    %6209 = "llvm.getelementptr"(%6207, %6208) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6210 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6211 = "llvm.getelementptr"(%6209, %6210) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6211) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb980(%6212 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6213 : !llvm.ptr):
    %6214 = "mini.invariant"(%6213) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6215 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb981] : () -> ()
  ^bb982:
    %6216 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
    "llvm.store"(%6216, %6215) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb983] : () -> ()
  ^bb981:
    %6217 = "llvm.getelementptr"(%6213) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6218 = "mini.checkflag"(%6217) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6219 = "llvm.load"(%6218) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6219) [^bb982, ^bb982] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb983:
    %6220 = "llvm.extractvalue"(%6212) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6221 = "llvm.load"(%6215) : (!llvm.ptr) -> i32
    %6222 = "llvm.getelementptr"(%6220, %6221) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6223 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6224 = "llvm.getelementptr"(%6222, %6223) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6224) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable2_B_all_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb984(%6225 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6226 : !llvm.ptr):
    %6227 = "mini.invariant"(%6226) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6228 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb985] : () -> ()
  ^bb986:
    %6229 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
    "llvm.store"(%6229, %6228) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb987] : () -> ()
  ^bb985:
    %6230 = "llvm.getelementptr"(%6226) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6231 = "mini.checkflag"(%6230) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6232 = "llvm.load"(%6231) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6232) [^bb986, ^bb986] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb987:
    %6233 = "llvm.extractvalue"(%6225) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6234 = "llvm.load"(%6228) : (!llvm.ptr) -> i32
    %6235 = "llvm.getelementptr"(%6233, %6234) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6236 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6237 = "llvm.getelementptr"(%6235, %6236) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6237) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable2_B_any_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb988(%6238 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6239 : !llvm.ptr):
    %6240 = "mini.invariant"(%6239) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6241 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb989] : () -> ()
  ^bb990:
    %6242 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
    "llvm.store"(%6242, %6241) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb991] : () -> ()
  ^bb989:
    %6243 = "llvm.getelementptr"(%6239) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6244 = "mini.checkflag"(%6243) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6245 = "llvm.load"(%6244) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6245) [^bb990, ^bb990] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb991:
    %6246 = "llvm.extractvalue"(%6238) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6247 = "llvm.load"(%6241) : (!llvm.ptr) -> i32
    %6248 = "llvm.getelementptr"(%6246, %6247) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6249 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6250 = "llvm.getelementptr"(%6248, %6249) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6250) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable2_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb992(%6251 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6252 : !llvm.ptr):
    %6253 = "mini.invariant"(%6252) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6254 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb993] : () -> ()
  ^bb994:
    %6255 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
    "llvm.store"(%6255, %6254) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb995] : () -> ()
  ^bb993:
    %6256 = "llvm.getelementptr"(%6252) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6257 = "mini.checkflag"(%6256) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6258 = "llvm.load"(%6257) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6258) [^bb994, ^bb994] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb995:
    %6259 = "llvm.extractvalue"(%6251) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6260 = "llvm.load"(%6254) : (!llvm.ptr) -> i32
    %6261 = "llvm.getelementptr"(%6259, %6260) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6262 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6263 = "llvm.getelementptr"(%6261, %6262) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6263) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable2_B_filter_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb996(%6264 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6265 : !llvm.ptr):
    %6266 = "mini.invariant"(%6265) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6267 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb997] : () -> ()
  ^bb998:
    %6268 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
    "llvm.store"(%6268, %6267) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb999] : () -> ()
  ^bb997:
    %6269 = "llvm.getelementptr"(%6265) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6270 = "mini.checkflag"(%6269) {"typ_name" = "Iterable2"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6271 = "llvm.load"(%6270) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6271) [^bb998, ^bb998] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb999:
    %6272 = "llvm.extractvalue"(%6264) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6273 = "llvm.load"(%6267) : (!llvm.ptr) -> i32
    %6274 = "llvm.getelementptr"(%6272, %6273) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6275 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6276 = "llvm.getelementptr"(%6274, %6275) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6276) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable2_B_chain_otherIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1000(%6277 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6278 : !llvm.ptr):
    %6279 = "mini.invariant"(%6278) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6280 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1001] : () -> ()
  ^bb1002:
    %6281 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
    "llvm.store"(%6281, %6280) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1003] : () -> ()
  ^bb1001:
    %6282 = "llvm.getelementptr"(%6278) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6283 = "mini.checkflag"(%6282) {"typ_name" = "Iterable2"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6284 = "llvm.load"(%6283) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6284) [^bb1002, ^bb1002] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1003:
    %6285 = "llvm.extractvalue"(%6277) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6286 = "llvm.load"(%6280) : (!llvm.ptr) -> i32
    %6287 = "llvm.getelementptr"(%6285, %6286) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6288 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6289 = "llvm.getelementptr"(%6287, %6288) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6289) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable2_B_interleave_otherIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1004(%6290 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6291 : !llvm.ptr):
    %6292 = "mini.invariant"(%6291) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6293 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1005] : () -> ()
  ^bb1006:
    %6294 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
    "llvm.store"(%6294, %6293) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1007] : () -> ()
  ^bb1005:
    %6295 = "llvm.getelementptr"(%6291) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6296 = "mini.checkflag"(%6295) {"typ_name" = "Iterable2"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6297 = "llvm.load"(%6296) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6297) [^bb1006, ^bb1006] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1007:
    %6298 = "llvm.extractvalue"(%6290) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6299 = "llvm.load"(%6293) : (!llvm.ptr) -> i32
    %6300 = "llvm.getelementptr"(%6298, %6299) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6301 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6302 = "llvm.getelementptr"(%6300, %6301) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6302) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable2_B_zip_otherIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1008(%6303 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6304 : !llvm.ptr):
    %6305 = "mini.invariant"(%6304) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6306 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1009] : () -> ()
  ^bb1010:
    %6307 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
    "llvm.store"(%6307, %6306) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1011] : () -> ()
  ^bb1009:
    %6308 = "llvm.getelementptr"(%6304) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6309 = "mini.checkflag"(%6308) {"typ_name" = "Iterable2"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6310 = "llvm.load"(%6309) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6310) [^bb1010, ^bb1010] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1011:
    %6311 = "llvm.extractvalue"(%6303) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6312 = "llvm.load"(%6306) : (!llvm.ptr) -> i32
    %6313 = "llvm.getelementptr"(%6311, %6312) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6314 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6315 = "llvm.getelementptr"(%6313, %6314) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6315) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable2_B_product_otherIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_FilterIterator2", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>]} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "FilterIterator2_field_FilterIterator2_0"} : () -> ()
  "mini.getter_def"() {"meth_name" = "FilterIterator2_getter_iterator", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator2", "parameterization" = "_parameterization_Iterator2FilterIterator2.T_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "FilterIterator2_setter_iterator", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator2", "parameterization" = "_parameterization_Iterator2FilterIterator2.T_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "FilterIterator2_field_iterator", "getter_name" = "FilterIterator2_getter_iterator", "setter_name" = "FilterIterator2_setter_iterator"} : () -> ()
  "mini.getter_def"() {"meth_name" = "FilterIterator2_getter_f", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionFilterIterator2.T_subtype_Any_to_Ptri1"} : () -> ()
  "mini.setter_def"() {"meth_name" = "FilterIterator2_setter_f", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionFilterIterator2.T_subtype_Any_to_Ptri1"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "FilterIterator2_field_f", "getter_name" = "FilterIterator2_getter_f", "setter_name" = "FilterIterator2_setter_f"} : () -> ()
  "mini.func"() ({
  ^bb1012(%6316 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6317 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6318 : !llvm.ptr, %6319 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6320 : !llvm.struct<(!llvm.ptr)>):
    %6321 = "mini.wrap"(%6316) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"FilterIterator2", [!mini.type_param<"T", !mini.any, "FilterIterator2">]>
    %6322 = "mini.to_fat_ptr"(%6321) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "FilterIterator2", "to_typ_name" = "FilterIterator2"} : (!mini.fatptr<"FilterIterator2", [!mini.type_param<"T", !mini.any, "FilterIterator2">]>) -> !mini.fatptr<"FilterIterator2", [!mini.type_param<"T", !mini.any, "FilterIterator2">]>
    %6323 = "mini.wrap"(%6319) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "FilterIterator2">]>
    %6324 = "mini.to_fat_ptr"(%6323) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "FilterIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "FilterIterator2">]>
    %6325 = "mini.to_fat_ptr"(%6324) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "FilterIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "FilterIterator2">]>
    "mini.set_field"(%6322, %6325) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"FilterIterator2", [!mini.type_param<"T", !mini.any, "FilterIterator2">]>, !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "FilterIterator2">]>) -> ()
    %6326 = "mini.wrap"(%6320) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterator2">], !mini.any, !mini.ptr<i1>>
    %6327 = builtin.unrealized_conversion_cast %6326 : !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterator2">], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterator2">], !mini.any, !mini.ptr<i1>>
    %6328 = builtin.unrealized_conversion_cast %6327 : !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterator2">], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterator2">], !mini.any, !mini.ptr<i1>>
    "mini.set_field"(%6322, %6328) {"offset" = 2 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"FilterIterator2", [!mini.type_param<"T", !mini.any, "FilterIterator2">]>, !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterator2">], !mini.any, !mini.ptr<i1>>) -> ()
  }) {"func_name" = "FilterIterator2_init_iteratorIterator2T_fFunctionT_to_Ptri1", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1013(%6329 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6330 : !llvm.ptr):
    %6331 = "mini.invariant"(%6330) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6332 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1014] : () -> ()
  ^bb1015:
    %6333 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%6333, %6332) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1016] : () -> ()
  ^bb1017:
    %6334 = "llvm.getelementptr"(%6330) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6335 = "mini.checkflag"(%6334) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6336 = "llvm.load"(%6335) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6336) [^bb1015, ^bb1015] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1014:
    %6337 = "llvm.getelementptr"(%6330) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6338 = "mini.checkflag"(%6337) {"typ_name" = "Iterator2"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6339 = "llvm.load"(%6338) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6339) [^bb1017, ^bb1017] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1016:
    %6340 = "llvm.extractvalue"(%6329) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6341 = "llvm.load"(%6332) : (!llvm.ptr) -> i32
    %6342 = "llvm.getelementptr"(%6340, %6341) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6343 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6344 = "llvm.getelementptr"(%6342, %6343) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6344) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterator2_B_init_iteratorIterator2T_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1018(%6345 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6346 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6347 : !llvm.ptr):
    %6348 = "mini.wrap"(%6345) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"FilterIterator2", [!mini.type_param<"T", !mini.any, "FilterIterator2">]>
    %6349 = "mini.to_fat_ptr"(%6348) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "FilterIterator2", "to_typ_name" = "FilterIterator2"} : (!mini.fatptr<"FilterIterator2", [!mini.type_param<"T", !mini.any, "FilterIterator2">]>) -> !mini.fatptr<"FilterIterator2", [!mini.type_param<"T", !mini.any, "FilterIterator2">]>
    %6350 = "mini.get_field"(%6349) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator2"} : (!mini.fatptr<"FilterIterator2", [!mini.type_param<"T", !mini.any, "FilterIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "FilterIterator2">]>
    %6351 = "mini.unwrap"(%6350) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "FilterIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6352 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %6353 = "mini.method_call"(%6352, %6351) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]>
    %6354 = builtin.unrealized_conversion_cast %6353 : !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]> to !mini.union<[!mini.type_param<"T", !mini.any, "FilterIterator2">, !mini.nil]>
    %6355 = builtin.unrealized_conversion_cast %6354 : !mini.union<[!mini.type_param<"T", !mini.any, "FilterIterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.any, "FilterIterator2">, !mini.nil]>
    "mini.while"() ({
      %6356 = "mini.get_type_field"(%6349) {"offset" = 0 : i64, "vtable_bytes" = 80 : i32} : (!mini.fatptr<"FilterIterator2", [!mini.type_param<"T", !mini.any, "FilterIterator2">]>) -> !mini.reified_type
      %6357 = "mini.checkflag"(%6355) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.type_param<"T", !mini.any, "FilterIterator2">, !mini.nil]>) -> !mini.ptr<i1>
      %6358 = "mini.unwrap"(%6357) : (!mini.ptr<i1>) -> i1
    }, {
      %6359 = "mini.to_fat_ptr"(%6355) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "FilterIterator2">, !mini.nil]>) -> !mini.type_param<"T", !mini.any, "FilterIterator2">
      %6360 = "mini.to_fat_ptr"(%6359) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "FilterIterator2">) -> !mini.type_param<"T", !mini.any, "FilterIterator2">
      %6361 = "mini.unwrap"(%6360) : (!mini.type_param<"T", !mini.any, "FilterIterator2">) -> !llvm.struct<(!llvm.ptr, i160)>
      %6362 = "mini.get_field"(%6349) {"offset" = 2 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"FilterIterator2", [!mini.type_param<"T", !mini.any, "FilterIterator2">]>) -> !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterator2">], !mini.any, !mini.ptr<i1>>
      %6363 = "mini.unwrap"(%6362) : (!mini.function<[!mini.type_param<"T", !mini.any, "FilterIterator2">], !mini.any, !mini.ptr<i1>>) -> !llvm.ptr
      %6364 = "mini.fptr_call"(%6363, %6361) {"ret_type" = i1} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> !mini.ptr<i1>
      %6365 = "mini.unwrap"(%6364) : (!mini.ptr<i1>) -> i1
      "mini.if"(%6365) ({
        %6366 = builtin.unrealized_conversion_cast %6359 : !mini.type_param<"T", !mini.any, "FilterIterator2"> to !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]>
        "mini.return"(%6366) : (!mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]>) -> ()
      }) : (i1) -> ()
      %6367 = "mini.get_field"(%6349) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator2"} : (!mini.fatptr<"FilterIterator2", [!mini.type_param<"T", !mini.any, "FilterIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "FilterIterator2">]>
      %6368 = "mini.unwrap"(%6367) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "FilterIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %6369 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %6370 = "mini.method_call"(%6369, %6368) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]>
      %6371 = builtin.unrealized_conversion_cast %6370 : !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]> to !mini.union<[!mini.type_param<"T", !mini.any, "FilterIterator2">, !mini.nil]>
      "mini.castassign"(%6355, %6371) ({
        %6372 = builtin.unrealized_conversion_cast %6371 : !mini.union<[!mini.type_param<"T", !mini.any, "FilterIterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.any, "FilterIterator2">, !mini.nil]>
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.type_param<"T", !mini.any, "FilterIterator2">, !mini.nil]>, !mini.union<[!mini.type_param<"T", !mini.any, "FilterIterator2">, !mini.nil]>) -> ()
    }) : () -> ()
    %6373 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
    %6374 = "mini.unionize"(%6373) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]>
    "mini.return"(%6374) : (!mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]>) -> ()
  }) {"func_name" = "FilterIterator2_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1019(%6375 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6376 : !llvm.ptr):
    %6377 = "mini.invariant"(%6376) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6378 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1020] : () -> ()
  ^bb1020:
    %6379 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
    "llvm.store"(%6379, %6378) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1021] : () -> ()
  ^bb1021:
    %6380 = "llvm.extractvalue"(%6375) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6381 = "llvm.load"(%6378) : (!llvm.ptr) -> i32
    %6382 = "llvm.getelementptr"(%6380, %6381) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6383 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6384 = "llvm.getelementptr"(%6382, %6383) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6384) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterator2_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_ChainIterable2", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "ChainIterable2_field_ChainIterable2_0"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ChainIterable2_getter_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable2", "parameterization" = "_parameterization_Iterable2ChainIterable2.T_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ChainIterable2_setter_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable2", "parameterization" = "_parameterization_Iterable2ChainIterable2.T_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ChainIterable2_field_first", "getter_name" = "ChainIterable2_getter_first", "setter_name" = "ChainIterable2_setter_first"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ChainIterable2_getter_second", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable2", "parameterization" = "_parameterization_Iterable2ChainIterable2.T_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ChainIterable2_setter_second", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable2", "parameterization" = "_parameterization_Iterable2ChainIterable2.T_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ChainIterable2_field_second", "getter_name" = "ChainIterable2_getter_second", "setter_name" = "ChainIterable2_setter_second"} : () -> ()
  "mini.func"() ({
  ^bb1022(%6385 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6386 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6387 : !llvm.ptr, %6388 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6389 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %6390 = "mini.wrap"(%6385) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>
    %6391 = "mini.to_fat_ptr"(%6390) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ChainIterable2", "to_typ_name" = "ChainIterable2"} : (!mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> !mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>
    %6392 = "mini.wrap"(%6388) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>
    %6393 = "mini.to_fat_ptr"(%6392) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>
    %6394 = "mini.to_fat_ptr"(%6393) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>
    "mini.set_field"(%6391, %6394) {"offset" = 1 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>, !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> ()
    %6395 = "mini.wrap"(%6389) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>
    %6396 = "mini.to_fat_ptr"(%6395) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>
    %6397 = "mini.to_fat_ptr"(%6396) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>
    "mini.set_field"(%6391, %6397) {"offset" = 2 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>, !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> ()
  }) {"func_name" = "ChainIterable2_init_firstIterable2T_secondIterable2T", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1023(%6398 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6399 : !llvm.ptr):
    %6400 = "mini.invariant"(%6399) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6401 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1024] : () -> ()
  ^bb1025:
    %6402 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
    "llvm.store"(%6402, %6401) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1026] : () -> ()
  ^bb1027:
    %6403 = "llvm.getelementptr"(%6399) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6404 = "mini.checkflag"(%6403) {"typ_name" = "Iterable2"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6405 = "llvm.load"(%6404) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6405) [^bb1025, ^bb1025] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1024:
    %6406 = "llvm.getelementptr"(%6399) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6407 = "mini.checkflag"(%6406) {"typ_name" = "Iterable2"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6408 = "llvm.load"(%6407) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6408) [^bb1027, ^bb1027] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1026:
    %6409 = "llvm.extractvalue"(%6398) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6410 = "llvm.load"(%6401) : (!llvm.ptr) -> i32
    %6411 = "llvm.getelementptr"(%6409, %6410) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6412 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6413 = "llvm.getelementptr"(%6411, %6412) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6413) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable2_B_init_firstIterable2T_secondIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1028(%6414 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6415 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6416 : !llvm.ptr):
    %6417 = "mini.wrap"(%6414) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>
    %6418 = "mini.to_fat_ptr"(%6417) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ChainIterable2", "to_typ_name" = "ChainIterable2"} : (!mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> !mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>
    %6419 = "mini.get_field"(%6418) {"offset" = 1 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable2"} : (!mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>
    %6420 = "mini.unwrap"(%6419) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6421 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %6422 = "mini.method_call"(%6421, %6420) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %6423 = "mini.to_fat_ptr"(%6422) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>
    %6424 = "mini.get_field"(%6418) {"offset" = 2 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable2"} : (!mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>
    %6425 = "mini.unwrap"(%6424) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6426 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %6427 = "mini.method_call"(%6426, %6425) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %6428 = "mini.to_fat_ptr"(%6427) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>
    %6429 = "mini.unwrap"(%6423) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6430 = "mini.unwrap"(%6428) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6431 = "mini.get_type_field"(%6418) {"offset" = 0 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> !mini.reified_type
    %6432 = "mini.new"(%6431) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1)>, "class_name" = "ChainIterator2", "num_data_fields" = 3 : i32, "region_id" = "none", "has_type_fields"} : (!mini.reified_type) -> !mini.fatptr<"ChainIterator2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>
    %6433 = "mini.get_field"(%6418) {"offset" = 1 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable2"} : (!mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>
    %6434 = "mini.unwrap"(%6433) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6435 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %6436 = "mini.method_call"(%6435, %6434) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %6437 = "mini.to_fat_ptr"(%6436) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>
    %6438 = "mini.get_field"(%6418) {"offset" = 2 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable2"} : (!mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>
    %6439 = "mini.unwrap"(%6438) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6440 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %6441 = "mini.method_call"(%6440, %6439) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %6442 = "mini.to_fat_ptr"(%6441) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>
    %6443 = "mini.to_fat_ptr"(%6437) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>
    %6444 = "mini.unwrap"(%6443) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6445 = "mini.to_fat_ptr"(%6442) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>
    %6446 = "mini.unwrap"(%6445) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6447 = "mini.unwrap"(%6432) : (!mini.fatptr<"ChainIterator2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6448 = "mini.parameterization"(%6431) {"id_hierarchy" = ["Iterator2", [0 : i32]], "name_hierarchy" = ["Iterator2ChainIterable2.T_subtype_Any", ["ChainIterable2.T_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %6449 = "mini.parameterizations_array"(%6448, %6448) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%6449, %6447, %6444, %6446) {"offset" = 4 : i32, "vptrs" = [#none, #none], "vtable_size" = 11 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %6450 = "mini.to_fat_ptr"(%6432) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ChainIterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"ChainIterator2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    "mini.return"(%6450) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> ()
  }) {"func_name" = "ChainIterable2_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1029(%6451 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6452 : !llvm.ptr):
    %6453 = "mini.invariant"(%6452) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6454 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1030] : () -> ()
  ^bb1030:
    %6455 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
    "llvm.store"(%6455, %6454) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1031] : () -> ()
  ^bb1031:
    %6456 = "llvm.extractvalue"(%6451) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6457 = "llvm.load"(%6454) : (!llvm.ptr) -> i32
    %6458 = "llvm.getelementptr"(%6456, %6457) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6459 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6460 = "llvm.getelementptr"(%6458, %6459) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6460) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable2_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1032(%6461 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6462 : !llvm.ptr):
    %6463 = "mini.invariant"(%6462) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6464 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1033] : () -> ()
  ^bb1034:
    %6465 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
    "llvm.store"(%6465, %6464) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1035] : () -> ()
  ^bb1033:
    %6466 = "llvm.getelementptr"(%6462) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6467 = "mini.checkflag"(%6466) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6468 = "llvm.load"(%6467) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6468) [^bb1034, ^bb1034] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1035:
    %6469 = "llvm.extractvalue"(%6461) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6470 = "llvm.load"(%6464) : (!llvm.ptr) -> i32
    %6471 = "llvm.getelementptr"(%6469, %6470) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6472 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6473 = "llvm.getelementptr"(%6471, %6472) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6473) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable2_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1036(%6474 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6475 : !llvm.ptr):
    %6476 = "mini.invariant"(%6475) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6477 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1037] : () -> ()
  ^bb1038:
    %6478 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%6478, %6477) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1039] : () -> ()
  ^bb1040:
    %6479 = "llvm.getelementptr"(%6475) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6480 = "mini.checkflag"(%6479) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6481 = "llvm.load"(%6480) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6481) [^bb1038, ^bb1038] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1037:
    %6482 = "llvm.getelementptr"(%6475) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6483 = "mini.checkflag"(%6482) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6484 = "llvm.load"(%6483) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6484) [^bb1040, ^bb1040] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1039:
    %6485 = "llvm.extractvalue"(%6474) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6486 = "llvm.load"(%6477) : (!llvm.ptr) -> i32
    %6487 = "llvm.getelementptr"(%6485, %6486) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6488 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6489 = "llvm.getelementptr"(%6487, %6488) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6489) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1041(%6490 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6491 : !llvm.ptr):
    %6492 = "mini.invariant"(%6491) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6493 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1042] : () -> ()
  ^bb1043:
    %6494 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
    "llvm.store"(%6494, %6493) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1044] : () -> ()
  ^bb1042:
    %6495 = "llvm.getelementptr"(%6491) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6496 = "mini.checkflag"(%6495) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6497 = "llvm.load"(%6496) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6497) [^bb1043, ^bb1043] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1044:
    %6498 = "llvm.extractvalue"(%6490) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6499 = "llvm.load"(%6493) : (!llvm.ptr) -> i32
    %6500 = "llvm.getelementptr"(%6498, %6499) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6501 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6502 = "llvm.getelementptr"(%6500, %6501) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6502) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable2_B_all_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1045(%6503 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6504 : !llvm.ptr):
    %6505 = "mini.invariant"(%6504) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6506 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1046] : () -> ()
  ^bb1047:
    %6507 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
    "llvm.store"(%6507, %6506) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1048] : () -> ()
  ^bb1046:
    %6508 = "llvm.getelementptr"(%6504) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6509 = "mini.checkflag"(%6508) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6510 = "llvm.load"(%6509) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6510) [^bb1047, ^bb1047] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1048:
    %6511 = "llvm.extractvalue"(%6503) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6512 = "llvm.load"(%6506) : (!llvm.ptr) -> i32
    %6513 = "llvm.getelementptr"(%6511, %6512) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6514 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6515 = "llvm.getelementptr"(%6513, %6514) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6515) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable2_B_any_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1049(%6516 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6517 : !llvm.ptr):
    %6518 = "mini.invariant"(%6517) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6519 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1050] : () -> ()
  ^bb1051:
    %6520 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
    "llvm.store"(%6520, %6519) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1052] : () -> ()
  ^bb1050:
    %6521 = "llvm.getelementptr"(%6517) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6522 = "mini.checkflag"(%6521) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6523 = "llvm.load"(%6522) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6523) [^bb1051, ^bb1051] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1052:
    %6524 = "llvm.extractvalue"(%6516) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6525 = "llvm.load"(%6519) : (!llvm.ptr) -> i32
    %6526 = "llvm.getelementptr"(%6524, %6525) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6527 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6528 = "llvm.getelementptr"(%6526, %6527) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6528) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable2_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1053(%6529 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6530 : !llvm.ptr):
    %6531 = "mini.invariant"(%6530) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6532 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1054] : () -> ()
  ^bb1055:
    %6533 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
    "llvm.store"(%6533, %6532) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1056] : () -> ()
  ^bb1054:
    %6534 = "llvm.getelementptr"(%6530) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6535 = "mini.checkflag"(%6534) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6536 = "llvm.load"(%6535) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6536) [^bb1055, ^bb1055] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1056:
    %6537 = "llvm.extractvalue"(%6529) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6538 = "llvm.load"(%6532) : (!llvm.ptr) -> i32
    %6539 = "llvm.getelementptr"(%6537, %6538) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6540 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6541 = "llvm.getelementptr"(%6539, %6540) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6541) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable2_B_filter_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1057(%6542 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6543 : !llvm.ptr):
    %6544 = "mini.invariant"(%6543) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6545 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1058] : () -> ()
  ^bb1059:
    %6546 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
    "llvm.store"(%6546, %6545) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1060] : () -> ()
  ^bb1058:
    %6547 = "llvm.getelementptr"(%6543) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6548 = "mini.checkflag"(%6547) {"typ_name" = "Iterable2"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6549 = "llvm.load"(%6548) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6549) [^bb1059, ^bb1059] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1060:
    %6550 = "llvm.extractvalue"(%6542) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6551 = "llvm.load"(%6545) : (!llvm.ptr) -> i32
    %6552 = "llvm.getelementptr"(%6550, %6551) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6553 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6554 = "llvm.getelementptr"(%6552, %6553) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6554) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable2_B_chain_otherIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1061(%6555 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6556 : !llvm.ptr):
    %6557 = "mini.invariant"(%6556) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6558 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1062] : () -> ()
  ^bb1063:
    %6559 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
    "llvm.store"(%6559, %6558) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1064] : () -> ()
  ^bb1062:
    %6560 = "llvm.getelementptr"(%6556) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6561 = "mini.checkflag"(%6560) {"typ_name" = "Iterable2"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6562 = "llvm.load"(%6561) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6562) [^bb1063, ^bb1063] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1064:
    %6563 = "llvm.extractvalue"(%6555) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6564 = "llvm.load"(%6558) : (!llvm.ptr) -> i32
    %6565 = "llvm.getelementptr"(%6563, %6564) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6566 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6567 = "llvm.getelementptr"(%6565, %6566) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6567) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable2_B_interleave_otherIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1065(%6568 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6569 : !llvm.ptr):
    %6570 = "mini.invariant"(%6569) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6571 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1066] : () -> ()
  ^bb1067:
    %6572 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
    "llvm.store"(%6572, %6571) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1068] : () -> ()
  ^bb1066:
    %6573 = "llvm.getelementptr"(%6569) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6574 = "mini.checkflag"(%6573) {"typ_name" = "Iterable2"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6575 = "llvm.load"(%6574) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6575) [^bb1067, ^bb1067] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1068:
    %6576 = "llvm.extractvalue"(%6568) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6577 = "llvm.load"(%6571) : (!llvm.ptr) -> i32
    %6578 = "llvm.getelementptr"(%6576, %6577) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6579 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6580 = "llvm.getelementptr"(%6578, %6579) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6580) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable2_B_zip_otherIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1069(%6581 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6582 : !llvm.ptr):
    %6583 = "mini.invariant"(%6582) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6584 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1070] : () -> ()
  ^bb1071:
    %6585 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
    "llvm.store"(%6585, %6584) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1072] : () -> ()
  ^bb1070:
    %6586 = "llvm.getelementptr"(%6582) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6587 = "mini.checkflag"(%6586) {"typ_name" = "Iterable2"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6588 = "llvm.load"(%6587) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6588) [^bb1071, ^bb1071] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1072:
    %6589 = "llvm.extractvalue"(%6581) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6590 = "llvm.load"(%6584) : (!llvm.ptr) -> i32
    %6591 = "llvm.getelementptr"(%6589, %6590) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6592 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6593 = "llvm.getelementptr"(%6591, %6592) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6593) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable2_B_product_otherIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_ChainIterator2", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1]} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "ChainIterator2_field_ChainIterator2_0"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ChainIterator2_getter_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator2", "parameterization" = "_parameterization_Iterator2ChainIterator2.T_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ChainIterator2_setter_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator2", "parameterization" = "_parameterization_Iterator2ChainIterator2.T_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ChainIterator2_field_first", "getter_name" = "ChainIterator2_getter_first", "setter_name" = "ChainIterator2_setter_first"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ChainIterator2_getter_second", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator2", "parameterization" = "_parameterization_Iterator2ChainIterator2.T_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ChainIterator2_setter_second", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator2", "parameterization" = "_parameterization_Iterator2ChainIterator2.T_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ChainIterator2_field_second", "getter_name" = "ChainIterator2_getter_second", "setter_name" = "ChainIterator2_setter_second"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ChainIterator2_getter_on_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 3 : i64, "original_type" = i1, "specialized_name" = "bool_typ", "parameterization" = "_parameterization_Ptri1"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ChainIterator2_setter_on_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 3 : i64, "original_type" = i1, "specialized_name" = "bool_typ", "parameterization" = "_parameterization_Ptri1"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ChainIterator2_field_on_first", "getter_name" = "ChainIterator2_getter_on_first", "setter_name" = "ChainIterator2_setter_on_first"} : () -> ()
  "mini.func"() ({
  ^bb1073(%6594 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6595 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6596 : !llvm.ptr, %6597 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6598 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %6599 = "mini.wrap"(%6594) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ChainIterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>
    %6600 = "mini.to_fat_ptr"(%6599) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ChainIterator2", "to_typ_name" = "ChainIterator2"} : (!mini.fatptr<"ChainIterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>) -> !mini.fatptr<"ChainIterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>
    %6601 = "mini.wrap"(%6597) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>
    %6602 = "mini.to_fat_ptr"(%6601) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>
    %6603 = "mini.to_fat_ptr"(%6602) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>
    "mini.set_field"(%6600, %6603) {"offset" = 1 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ChainIterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>, !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>) -> ()
    %6604 = "mini.wrap"(%6598) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>
    %6605 = "mini.to_fat_ptr"(%6604) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>
    %6606 = "mini.to_fat_ptr"(%6605) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>
    "mini.set_field"(%6600, %6606) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ChainIterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>, !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>) -> ()
    %6607 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
    %6608 = builtin.unrealized_conversion_cast %6607 : !mini.ptr<i1> to !mini.ptr<i1>
    "mini.set_field"(%6600, %6608) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = i1} : (!mini.fatptr<"ChainIterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>, !mini.ptr<i1>) -> ()
  }) {"func_name" = "ChainIterator2_init_firstIterator2T_secondIterator2T", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1074(%6609 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6610 : !llvm.ptr):
    %6611 = "mini.invariant"(%6610) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6612 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1075] : () -> ()
  ^bb1076:
    %6613 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
    "llvm.store"(%6613, %6612) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1077] : () -> ()
  ^bb1078:
    %6614 = "llvm.getelementptr"(%6610) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6615 = "mini.checkflag"(%6614) {"typ_name" = "Iterator2"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6616 = "llvm.load"(%6615) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6616) [^bb1076, ^bb1076] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1075:
    %6617 = "llvm.getelementptr"(%6610) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6618 = "mini.checkflag"(%6617) {"typ_name" = "Iterator2"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6619 = "llvm.load"(%6618) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6619) [^bb1078, ^bb1078] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1077:
    %6620 = "llvm.extractvalue"(%6609) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6621 = "llvm.load"(%6612) : (!llvm.ptr) -> i32
    %6622 = "llvm.getelementptr"(%6620, %6621) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6623 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6624 = "llvm.getelementptr"(%6622, %6623) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6624) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterator2_B_init_firstIterator2T_secondIterator2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1079(%6625 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6626 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6627 : !llvm.ptr):
    %6628 = "mini.wrap"(%6625) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ChainIterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>
    %6629 = "mini.to_fat_ptr"(%6628) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ChainIterator2", "to_typ_name" = "ChainIterator2"} : (!mini.fatptr<"ChainIterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>) -> !mini.fatptr<"ChainIterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>
    %6630 = "mini.get_field"(%6629) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = i1} : (!mini.fatptr<"ChainIterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>) -> !mini.ptr<i1>
    %6631 = "mini.unwrap"(%6630) : (!mini.ptr<i1>) -> i1
    "mini.if"(%6631) ({
      %6632 = "mini.get_field"(%6629) {"offset" = 1 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator2"} : (!mini.fatptr<"ChainIterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>
      %6633 = "mini.unwrap"(%6632) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %6634 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %6635 = "mini.method_call"(%6634, %6633) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]>
      %6636 = builtin.unrealized_conversion_cast %6635 : !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]> to !mini.union<[!mini.type_param<"T", !mini.any, "ChainIterator2">, !mini.nil]>
      %6637 = "mini.get_type_field"(%6629) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32} : (!mini.fatptr<"ChainIterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>) -> !mini.reified_type
      %6638 = "mini.checkflag"(%6636) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.type_param<"T", !mini.any, "ChainIterator2">, !mini.nil]>) -> !mini.ptr<i1>
      %6639 = "mini.unwrap"(%6638) : (!mini.ptr<i1>) -> i1
      %6640 = builtin.unrealized_conversion_cast %6636 : !mini.union<[!mini.type_param<"T", !mini.any, "ChainIterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.any, "ChainIterator2">, !mini.nil]>
      "mini.if"(%6639) ({
        %6641 = "mini.to_fat_ptr"(%6640) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "ChainIterator2">, !mini.nil]>) -> !mini.type_param<"T", !mini.any, "ChainIterator2">
        %6642 = builtin.unrealized_conversion_cast %6641 : !mini.type_param<"T", !mini.any, "ChainIterator2"> to !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]>
        "mini.return"(%6642) : (!mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]>) -> ()
        "mini.castassign"(%6640, %6641) ({
          %6643 = builtin.unrealized_conversion_cast %6641 : !mini.type_param<"T", !mini.any, "ChainIterator2"> to !mini.union<[!mini.type_param<"T", !mini.any, "ChainIterator2">, !mini.nil]>
        }) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.type_param<"T", !mini.any, "ChainIterator2">, !mini.nil]>, !mini.type_param<"T", !mini.any, "ChainIterator2">) -> ()
      }) : (i1) -> ()
      %6644 = "mini.literal"() {"value" = false, "typ" = i1} : () -> !mini.ptr<i1>
      %6645 = builtin.unrealized_conversion_cast %6644 : !mini.ptr<i1> to !mini.ptr<i1>
      "mini.set_field"(%6629, %6645) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = i1} : (!mini.fatptr<"ChainIterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>, !mini.ptr<i1>) -> ()
    }) : (i1) -> ()
    %6646 = "mini.get_field"(%6629) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator2"} : (!mini.fatptr<"ChainIterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>
    %6647 = "mini.unwrap"(%6646) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6648 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %6649 = "mini.method_call"(%6648, %6647) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]>
    %6650 = builtin.unrealized_conversion_cast %6649 : !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]> to !mini.union<[!mini.type_param<"T", !mini.any, "ChainIterator2">, !mini.nil]>
    %6651 = builtin.unrealized_conversion_cast %6650 : !mini.union<[!mini.type_param<"T", !mini.any, "ChainIterator2">, !mini.nil]> to !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]>
    "mini.return"(%6651) : (!mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]>) -> ()
  }) {"func_name" = "ChainIterator2_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1080(%6652 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6653 : !llvm.ptr):
    %6654 = "mini.invariant"(%6653) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6655 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1081] : () -> ()
  ^bb1081:
    %6656 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    "llvm.store"(%6656, %6655) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1082] : () -> ()
  ^bb1082:
    %6657 = "llvm.extractvalue"(%6652) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6658 = "llvm.load"(%6655) : (!llvm.ptr) -> i32
    %6659 = "llvm.getelementptr"(%6657, %6658) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6660 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6661 = "llvm.getelementptr"(%6659, %6660) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6661) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterator2_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_InterleaveIterable2", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "InterleaveIterable2_field_InterleaveIterable2_0"} : () -> ()
  "mini.getter_def"() {"meth_name" = "InterleaveIterable2_getter_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable2", "parameterization" = "_parameterization_Iterable2InterleaveIterable2.T_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "InterleaveIterable2_setter_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable2", "parameterization" = "_parameterization_Iterable2InterleaveIterable2.T_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "InterleaveIterable2_field_first", "getter_name" = "InterleaveIterable2_getter_first", "setter_name" = "InterleaveIterable2_setter_first"} : () -> ()
  "mini.getter_def"() {"meth_name" = "InterleaveIterable2_getter_second", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable2", "parameterization" = "_parameterization_Iterable2InterleaveIterable2.T_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "InterleaveIterable2_setter_second", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable2", "parameterization" = "_parameterization_Iterable2InterleaveIterable2.T_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "InterleaveIterable2_field_second", "getter_name" = "InterleaveIterable2_getter_second", "setter_name" = "InterleaveIterable2_setter_second"} : () -> ()
  "mini.func"() ({
  ^bb1083(%6662 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6663 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6664 : !llvm.ptr, %6665 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6666 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %6667 = "mini.wrap"(%6662) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>
    %6668 = "mini.to_fat_ptr"(%6667) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "InterleaveIterable2", "to_typ_name" = "InterleaveIterable2"} : (!mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> !mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>
    %6669 = "mini.wrap"(%6665) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>
    %6670 = "mini.to_fat_ptr"(%6669) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>
    %6671 = "mini.to_fat_ptr"(%6670) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>
    "mini.set_field"(%6668, %6671) {"offset" = 1 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>, !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> ()
    %6672 = "mini.wrap"(%6666) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>
    %6673 = "mini.to_fat_ptr"(%6672) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>
    %6674 = "mini.to_fat_ptr"(%6673) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>
    "mini.set_field"(%6668, %6674) {"offset" = 2 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>, !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> ()
  }) {"func_name" = "InterleaveIterable2_init_firstIterable2T_secondIterable2T", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1084(%6675 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6676 : !llvm.ptr):
    %6677 = "mini.invariant"(%6676) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6678 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1085] : () -> ()
  ^bb1086:
    %6679 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
    "llvm.store"(%6679, %6678) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1087] : () -> ()
  ^bb1088:
    %6680 = "llvm.getelementptr"(%6676) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6681 = "mini.checkflag"(%6680) {"typ_name" = "Iterable2"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6682 = "llvm.load"(%6681) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6682) [^bb1086, ^bb1086] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1085:
    %6683 = "llvm.getelementptr"(%6676) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6684 = "mini.checkflag"(%6683) {"typ_name" = "Iterable2"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6685 = "llvm.load"(%6684) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6685) [^bb1088, ^bb1088] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1087:
    %6686 = "llvm.extractvalue"(%6675) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6687 = "llvm.load"(%6678) : (!llvm.ptr) -> i32
    %6688 = "llvm.getelementptr"(%6686, %6687) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6689 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6690 = "llvm.getelementptr"(%6688, %6689) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6690) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable2_B_init_firstIterable2T_secondIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1089(%6691 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6692 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6693 : !llvm.ptr):
    %6694 = "mini.wrap"(%6691) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>
    %6695 = "mini.to_fat_ptr"(%6694) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "InterleaveIterable2", "to_typ_name" = "InterleaveIterable2"} : (!mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> !mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>
    %6696 = "mini.get_field"(%6695) {"offset" = 1 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable2"} : (!mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>
    %6697 = "mini.unwrap"(%6696) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6698 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %6699 = "mini.method_call"(%6698, %6697) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %6700 = "mini.to_fat_ptr"(%6699) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>
    %6701 = "mini.get_field"(%6695) {"offset" = 2 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable2"} : (!mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>
    %6702 = "mini.unwrap"(%6701) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6703 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %6704 = "mini.method_call"(%6703, %6702) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %6705 = "mini.to_fat_ptr"(%6704) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>
    %6706 = "mini.unwrap"(%6700) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6707 = "mini.unwrap"(%6705) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6708 = "mini.get_type_field"(%6695) {"offset" = 0 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> !mini.reified_type
    %6709 = "mini.new"(%6708) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1)>, "class_name" = "InterleaveIterator2", "num_data_fields" = 3 : i32, "region_id" = "none", "has_type_fields"} : (!mini.reified_type) -> !mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>
    %6710 = "mini.get_field"(%6695) {"offset" = 1 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable2"} : (!mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>
    %6711 = "mini.unwrap"(%6710) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6712 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %6713 = "mini.method_call"(%6712, %6711) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %6714 = "mini.to_fat_ptr"(%6713) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>
    %6715 = "mini.get_field"(%6695) {"offset" = 2 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable2"} : (!mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>
    %6716 = "mini.unwrap"(%6715) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6717 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %6718 = "mini.method_call"(%6717, %6716) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %6719 = "mini.to_fat_ptr"(%6718) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>
    %6720 = "mini.to_fat_ptr"(%6714) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>
    %6721 = "mini.unwrap"(%6720) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6722 = "mini.to_fat_ptr"(%6719) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>
    %6723 = "mini.unwrap"(%6722) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6724 = "mini.unwrap"(%6709) : (!mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6725 = "mini.parameterization"(%6708) {"id_hierarchy" = ["Iterator2", [0 : i32]], "name_hierarchy" = ["Iterator2InterleaveIterable2.T_subtype_Any", ["InterleaveIterable2.T_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %6726 = "mini.parameterizations_array"(%6725, %6725) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%6726, %6724, %6721, %6723) {"offset" = 4 : i32, "vptrs" = [#none, #none], "vtable_size" = 11 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %6727 = "mini.to_fat_ptr"(%6709) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "InterleaveIterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    "mini.return"(%6727) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> ()
  }) {"func_name" = "InterleaveIterable2_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1090(%6728 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6729 : !llvm.ptr):
    %6730 = "mini.invariant"(%6729) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6731 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1091] : () -> ()
  ^bb1091:
    %6732 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
    "llvm.store"(%6732, %6731) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1092] : () -> ()
  ^bb1092:
    %6733 = "llvm.extractvalue"(%6728) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6734 = "llvm.load"(%6731) : (!llvm.ptr) -> i32
    %6735 = "llvm.getelementptr"(%6733, %6734) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6736 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6737 = "llvm.getelementptr"(%6735, %6736) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6737) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable2_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1093(%6738 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6739 : !llvm.ptr):
    %6740 = "mini.invariant"(%6739) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6741 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1094] : () -> ()
  ^bb1095:
    %6742 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
    "llvm.store"(%6742, %6741) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1096] : () -> ()
  ^bb1094:
    %6743 = "llvm.getelementptr"(%6739) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6744 = "mini.checkflag"(%6743) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6745 = "llvm.load"(%6744) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6745) [^bb1095, ^bb1095] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1096:
    %6746 = "llvm.extractvalue"(%6738) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6747 = "llvm.load"(%6741) : (!llvm.ptr) -> i32
    %6748 = "llvm.getelementptr"(%6746, %6747) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6749 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6750 = "llvm.getelementptr"(%6748, %6749) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6750) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable2_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1097(%6751 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6752 : !llvm.ptr):
    %6753 = "mini.invariant"(%6752) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6754 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1098] : () -> ()
  ^bb1099:
    %6755 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%6755, %6754) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1100] : () -> ()
  ^bb1101:
    %6756 = "llvm.getelementptr"(%6752) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6757 = "mini.checkflag"(%6756) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6758 = "llvm.load"(%6757) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6758) [^bb1099, ^bb1099] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1098:
    %6759 = "llvm.getelementptr"(%6752) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6760 = "mini.checkflag"(%6759) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6761 = "llvm.load"(%6760) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6761) [^bb1101, ^bb1101] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1100:
    %6762 = "llvm.extractvalue"(%6751) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6763 = "llvm.load"(%6754) : (!llvm.ptr) -> i32
    %6764 = "llvm.getelementptr"(%6762, %6763) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6765 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6766 = "llvm.getelementptr"(%6764, %6765) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6766) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1102(%6767 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6768 : !llvm.ptr):
    %6769 = "mini.invariant"(%6768) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6770 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1103] : () -> ()
  ^bb1104:
    %6771 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
    "llvm.store"(%6771, %6770) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1105] : () -> ()
  ^bb1103:
    %6772 = "llvm.getelementptr"(%6768) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6773 = "mini.checkflag"(%6772) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6774 = "llvm.load"(%6773) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6774) [^bb1104, ^bb1104] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1105:
    %6775 = "llvm.extractvalue"(%6767) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6776 = "llvm.load"(%6770) : (!llvm.ptr) -> i32
    %6777 = "llvm.getelementptr"(%6775, %6776) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6778 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6779 = "llvm.getelementptr"(%6777, %6778) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6779) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable2_B_all_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1106(%6780 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6781 : !llvm.ptr):
    %6782 = "mini.invariant"(%6781) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6783 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1107] : () -> ()
  ^bb1108:
    %6784 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
    "llvm.store"(%6784, %6783) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1109] : () -> ()
  ^bb1107:
    %6785 = "llvm.getelementptr"(%6781) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6786 = "mini.checkflag"(%6785) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6787 = "llvm.load"(%6786) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6787) [^bb1108, ^bb1108] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1109:
    %6788 = "llvm.extractvalue"(%6780) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6789 = "llvm.load"(%6783) : (!llvm.ptr) -> i32
    %6790 = "llvm.getelementptr"(%6788, %6789) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6791 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6792 = "llvm.getelementptr"(%6790, %6791) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6792) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable2_B_any_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1110(%6793 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6794 : !llvm.ptr):
    %6795 = "mini.invariant"(%6794) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6796 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1111] : () -> ()
  ^bb1112:
    %6797 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
    "llvm.store"(%6797, %6796) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1113] : () -> ()
  ^bb1111:
    %6798 = "llvm.getelementptr"(%6794) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6799 = "mini.checkflag"(%6798) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6800 = "llvm.load"(%6799) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6800) [^bb1112, ^bb1112] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1113:
    %6801 = "llvm.extractvalue"(%6793) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6802 = "llvm.load"(%6796) : (!llvm.ptr) -> i32
    %6803 = "llvm.getelementptr"(%6801, %6802) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6804 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6805 = "llvm.getelementptr"(%6803, %6804) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6805) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable2_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1114(%6806 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6807 : !llvm.ptr):
    %6808 = "mini.invariant"(%6807) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6809 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1115] : () -> ()
  ^bb1116:
    %6810 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
    "llvm.store"(%6810, %6809) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1117] : () -> ()
  ^bb1115:
    %6811 = "llvm.getelementptr"(%6807) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6812 = "mini.checkflag"(%6811) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6813 = "llvm.load"(%6812) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6813) [^bb1116, ^bb1116] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1117:
    %6814 = "llvm.extractvalue"(%6806) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6815 = "llvm.load"(%6809) : (!llvm.ptr) -> i32
    %6816 = "llvm.getelementptr"(%6814, %6815) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6817 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6818 = "llvm.getelementptr"(%6816, %6817) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6818) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable2_B_filter_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1118(%6819 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6820 : !llvm.ptr):
    %6821 = "mini.invariant"(%6820) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6822 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1119] : () -> ()
  ^bb1120:
    %6823 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
    "llvm.store"(%6823, %6822) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1121] : () -> ()
  ^bb1119:
    %6824 = "llvm.getelementptr"(%6820) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6825 = "mini.checkflag"(%6824) {"typ_name" = "Iterable2"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6826 = "llvm.load"(%6825) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6826) [^bb1120, ^bb1120] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1121:
    %6827 = "llvm.extractvalue"(%6819) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6828 = "llvm.load"(%6822) : (!llvm.ptr) -> i32
    %6829 = "llvm.getelementptr"(%6827, %6828) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6830 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6831 = "llvm.getelementptr"(%6829, %6830) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6831) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable2_B_chain_otherIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1122(%6832 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6833 : !llvm.ptr):
    %6834 = "mini.invariant"(%6833) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6835 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1123] : () -> ()
  ^bb1124:
    %6836 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
    "llvm.store"(%6836, %6835) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1125] : () -> ()
  ^bb1123:
    %6837 = "llvm.getelementptr"(%6833) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6838 = "mini.checkflag"(%6837) {"typ_name" = "Iterable2"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6839 = "llvm.load"(%6838) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6839) [^bb1124, ^bb1124] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1125:
    %6840 = "llvm.extractvalue"(%6832) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6841 = "llvm.load"(%6835) : (!llvm.ptr) -> i32
    %6842 = "llvm.getelementptr"(%6840, %6841) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6843 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6844 = "llvm.getelementptr"(%6842, %6843) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6844) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable2_B_interleave_otherIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1126(%6845 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6846 : !llvm.ptr):
    %6847 = "mini.invariant"(%6846) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6848 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1127] : () -> ()
  ^bb1128:
    %6849 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
    "llvm.store"(%6849, %6848) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1129] : () -> ()
  ^bb1127:
    %6850 = "llvm.getelementptr"(%6846) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6851 = "mini.checkflag"(%6850) {"typ_name" = "Iterable2"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6852 = "llvm.load"(%6851) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6852) [^bb1128, ^bb1128] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1129:
    %6853 = "llvm.extractvalue"(%6845) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6854 = "llvm.load"(%6848) : (!llvm.ptr) -> i32
    %6855 = "llvm.getelementptr"(%6853, %6854) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6856 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6857 = "llvm.getelementptr"(%6855, %6856) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6857) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable2_B_zip_otherIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1130(%6858 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6859 : !llvm.ptr):
    %6860 = "mini.invariant"(%6859) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6861 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1131] : () -> ()
  ^bb1132:
    %6862 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
    "llvm.store"(%6862, %6861) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1133] : () -> ()
  ^bb1131:
    %6863 = "llvm.getelementptr"(%6859) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6864 = "mini.checkflag"(%6863) {"typ_name" = "Iterable2"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6865 = "llvm.load"(%6864) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6865) [^bb1132, ^bb1132] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1133:
    %6866 = "llvm.extractvalue"(%6858) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6867 = "llvm.load"(%6861) : (!llvm.ptr) -> i32
    %6868 = "llvm.getelementptr"(%6866, %6867) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6869 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6870 = "llvm.getelementptr"(%6868, %6869) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6870) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable2_B_product_otherIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_InterleaveIterator2", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1]} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "InterleaveIterator2_field_InterleaveIterator2_0"} : () -> ()
  "mini.getter_def"() {"meth_name" = "InterleaveIterator2_getter_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator2", "parameterization" = "_parameterization_Iterator2InterleaveIterator2.T_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "InterleaveIterator2_setter_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator2", "parameterization" = "_parameterization_Iterator2InterleaveIterator2.T_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "InterleaveIterator2_field_first", "getter_name" = "InterleaveIterator2_getter_first", "setter_name" = "InterleaveIterator2_setter_first"} : () -> ()
  "mini.getter_def"() {"meth_name" = "InterleaveIterator2_getter_second", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator2", "parameterization" = "_parameterization_Iterator2InterleaveIterator2.T_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "InterleaveIterator2_setter_second", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator2", "parameterization" = "_parameterization_Iterator2InterleaveIterator2.T_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "InterleaveIterator2_field_second", "getter_name" = "InterleaveIterator2_getter_second", "setter_name" = "InterleaveIterator2_setter_second"} : () -> ()
  "mini.getter_def"() {"meth_name" = "InterleaveIterator2_getter_on_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 3 : i64, "original_type" = i1, "specialized_name" = "bool_typ", "parameterization" = "_parameterization_Ptri1"} : () -> ()
  "mini.setter_def"() {"meth_name" = "InterleaveIterator2_setter_on_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 3 : i64, "original_type" = i1, "specialized_name" = "bool_typ", "parameterization" = "_parameterization_Ptri1"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "InterleaveIterator2_field_on_first", "getter_name" = "InterleaveIterator2_getter_on_first", "setter_name" = "InterleaveIterator2_setter_on_first"} : () -> ()
  "mini.func"() ({
  ^bb1134(%6871 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6872 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6873 : !llvm.ptr, %6874 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6875 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %6876 = "mini.wrap"(%6871) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>
    %6877 = "mini.to_fat_ptr"(%6876) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "InterleaveIterator2", "to_typ_name" = "InterleaveIterator2"} : (!mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>) -> !mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>
    %6878 = "mini.wrap"(%6874) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>
    %6879 = "mini.to_fat_ptr"(%6878) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>
    %6880 = "mini.to_fat_ptr"(%6879) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>
    "mini.set_field"(%6877, %6880) {"offset" = 1 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>, !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>) -> ()
    %6881 = "mini.wrap"(%6875) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>
    %6882 = "mini.to_fat_ptr"(%6881) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>
    %6883 = "mini.to_fat_ptr"(%6882) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>
    "mini.set_field"(%6877, %6883) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>, !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>) -> ()
    %6884 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
    %6885 = builtin.unrealized_conversion_cast %6884 : !mini.ptr<i1> to !mini.ptr<i1>
    "mini.set_field"(%6877, %6885) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = i1} : (!mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>, !mini.ptr<i1>) -> ()
  }) {"func_name" = "InterleaveIterator2_init_firstIterator2T_secondIterator2T", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1135(%6886 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6887 : !llvm.ptr):
    %6888 = "mini.invariant"(%6887) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6889 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1136] : () -> ()
  ^bb1137:
    %6890 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
    "llvm.store"(%6890, %6889) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1138] : () -> ()
  ^bb1139:
    %6891 = "llvm.getelementptr"(%6887) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6892 = "mini.checkflag"(%6891) {"typ_name" = "Iterator2"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6893 = "llvm.load"(%6892) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6893) [^bb1137, ^bb1137] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1136:
    %6894 = "llvm.getelementptr"(%6887) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6895 = "mini.checkflag"(%6894) {"typ_name" = "Iterator2"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6896 = "llvm.load"(%6895) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6896) [^bb1139, ^bb1139] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1138:
    %6897 = "llvm.extractvalue"(%6886) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6898 = "llvm.load"(%6889) : (!llvm.ptr) -> i32
    %6899 = "llvm.getelementptr"(%6897, %6898) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6900 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6901 = "llvm.getelementptr"(%6899, %6900) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6901) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterator2_B_init_firstIterator2T_secondIterator2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1140(%6902 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6903 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6904 : !llvm.ptr):
    %6905 = "mini.wrap"(%6902) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>
    %6906 = "mini.to_fat_ptr"(%6905) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "InterleaveIterator2", "to_typ_name" = "InterleaveIterator2"} : (!mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>) -> !mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>
    %6907 = "mini.get_field"(%6906) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = i1} : (!mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>) -> !mini.ptr<i1>
    %6908 = "mini.unwrap"(%6907) : (!mini.ptr<i1>) -> i1
    "mini.if"(%6908) ({
      %6909 = "mini.literal"() {"value" = false, "typ" = i1} : () -> !mini.ptr<i1>
      %6910 = builtin.unrealized_conversion_cast %6909 : !mini.ptr<i1> to !mini.ptr<i1>
      "mini.set_field"(%6906, %6910) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = i1} : (!mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>, !mini.ptr<i1>) -> ()
      %6911 = "mini.get_field"(%6906) {"offset" = 1 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator2"} : (!mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>
      %6912 = "mini.unwrap"(%6911) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %6913 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %6914 = "mini.method_call"(%6913, %6912) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]>
      %6915 = builtin.unrealized_conversion_cast %6914 : !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]> to !mini.union<[!mini.type_param<"T", !mini.any, "InterleaveIterator2">, !mini.nil]>
      %6916 = builtin.unrealized_conversion_cast %6915 : !mini.union<[!mini.type_param<"T", !mini.any, "InterleaveIterator2">, !mini.nil]> to !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]>
      "mini.return"(%6916) : (!mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]>) -> ()
    }) : (i1) -> ()
    %6917 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
    %6918 = builtin.unrealized_conversion_cast %6917 : !mini.ptr<i1> to !mini.ptr<i1>
    "mini.set_field"(%6906, %6918) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = i1} : (!mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>, !mini.ptr<i1>) -> ()
    %6919 = "mini.get_field"(%6906) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator2"} : (!mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>
    %6920 = "mini.unwrap"(%6919) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6921 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %6922 = "mini.method_call"(%6921, %6920) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]>
    %6923 = builtin.unrealized_conversion_cast %6922 : !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]> to !mini.union<[!mini.type_param<"T", !mini.any, "InterleaveIterator2">, !mini.nil]>
    %6924 = builtin.unrealized_conversion_cast %6923 : !mini.union<[!mini.type_param<"T", !mini.any, "InterleaveIterator2">, !mini.nil]> to !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]>
    "mini.return"(%6924) : (!mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]>) -> ()
  }) {"func_name" = "InterleaveIterator2_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1141(%6925 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6926 : !llvm.ptr):
    %6927 = "mini.invariant"(%6926) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6928 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1142] : () -> ()
  ^bb1142:
    %6929 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    "llvm.store"(%6929, %6928) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1143] : () -> ()
  ^bb1143:
    %6930 = "llvm.extractvalue"(%6925) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6931 = "llvm.load"(%6928) : (!llvm.ptr) -> i32
    %6932 = "llvm.getelementptr"(%6930, %6931) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6933 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6934 = "llvm.getelementptr"(%6932, %6933) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6934) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterator2_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_ZipIterable2", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "ZipIterable2_field_ZipIterable2_0"} : () -> ()
  "mini.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "ZipIterable2_field_ZipIterable2_1"} : () -> ()
  "mini.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "ZipIterable2_field_ZipIterable2_2"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ZipIterable2_getter_first", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable2", "parameterization" = "_parameterization_Iterable2ZipIterable2.T_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ZipIterable2_setter_first", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable2", "parameterization" = "_parameterization_Iterable2ZipIterable2.T_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ZipIterable2_field_first", "getter_name" = "ZipIterable2_getter_first", "setter_name" = "ZipIterable2_setter_first"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ZipIterable2_getter_second", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable2", "parameterization" = "_parameterization_Iterable2ZipIterable2.U_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ZipIterable2_setter_second", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable2", "parameterization" = "_parameterization_Iterable2ZipIterable2.U_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ZipIterable2_field_second", "getter_name" = "ZipIterable2_getter_second", "setter_name" = "ZipIterable2_setter_second"} : () -> ()
  "mini.func"() ({
  ^bb1144(%6935 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6936 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6937 : !llvm.ptr, %6938 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6939 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %6940 = "mini.wrap"(%6935) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">, !mini.type_param<"U", !mini.any, "ZipIterable2">]>
    %6941 = "mini.to_fat_ptr"(%6940) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ZipIterable2", "to_typ_name" = "ZipIterable2"} : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">, !mini.type_param<"U", !mini.any, "ZipIterable2">]>) -> !mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">, !mini.type_param<"U", !mini.any, "ZipIterable2">]>
    %6942 = "mini.wrap"(%6938) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">]>
    %6943 = "mini.to_fat_ptr"(%6942) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">]>
    %6944 = "mini.to_fat_ptr"(%6943) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">]>
    "mini.set_field"(%6941, %6944) {"offset" = 3 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">, !mini.type_param<"U", !mini.any, "ZipIterable2">]>, !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">]>) -> ()
    %6945 = "mini.wrap"(%6939) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ZipIterable2">]>
    %6946 = "mini.to_fat_ptr"(%6945) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ZipIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ZipIterable2">]>
    %6947 = "mini.to_fat_ptr"(%6946) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ZipIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ZipIterable2">]>
    "mini.set_field"(%6941, %6947) {"offset" = 4 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">, !mini.type_param<"U", !mini.any, "ZipIterable2">]>, !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ZipIterable2">]>) -> ()
  }) {"func_name" = "ZipIterable2_init_firstIterable2T_secondIterable2U", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1145(%6948 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6949 : !llvm.ptr):
    %6950 = "mini.invariant"(%6949) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6951 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1146] : () -> ()
  ^bb1147:
    %6952 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
    "llvm.store"(%6952, %6951) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1148] : () -> ()
  ^bb1149:
    %6953 = "llvm.getelementptr"(%6949) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6954 = "mini.checkflag"(%6953) {"typ_name" = "Iterable2"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6955 = "llvm.load"(%6954) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6955) [^bb1147, ^bb1147] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1146:
    %6956 = "llvm.getelementptr"(%6949) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6957 = "mini.checkflag"(%6956) {"typ_name" = "Iterable2"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6958 = "llvm.load"(%6957) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6958) [^bb1149, ^bb1149] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1148:
    %6959 = "llvm.extractvalue"(%6948) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6960 = "llvm.load"(%6951) : (!llvm.ptr) -> i32
    %6961 = "llvm.getelementptr"(%6959, %6960) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6962 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6963 = "llvm.getelementptr"(%6961, %6962) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6963) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable2_B_init_firstIterable2T_secondIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1150(%6964 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6965 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6966 : !llvm.ptr):
    %6967 = "mini.wrap"(%6964) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">, !mini.type_param<"U", !mini.any, "ZipIterable2">]>
    %6968 = "mini.to_fat_ptr"(%6967) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ZipIterable2", "to_typ_name" = "ZipIterable2"} : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">, !mini.type_param<"U", !mini.any, "ZipIterable2">]>) -> !mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">, !mini.type_param<"U", !mini.any, "ZipIterable2">]>
    %6969 = "mini.get_field"(%6968) {"offset" = 3 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable2"} : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">, !mini.type_param<"U", !mini.any, "ZipIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">]>
    %6970 = "mini.unwrap"(%6969) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6971 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %6972 = "mini.method_call"(%6971, %6970) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %6973 = "mini.to_fat_ptr"(%6972) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ZipIterable2">]>
    %6974 = "mini.get_field"(%6968) {"offset" = 4 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable2"} : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">, !mini.type_param<"U", !mini.any, "ZipIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ZipIterable2">]>
    %6975 = "mini.unwrap"(%6974) : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ZipIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6976 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %6977 = "mini.method_call"(%6976, %6975) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %6978 = "mini.to_fat_ptr"(%6977) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.any, "ZipIterable2">]>
    %6979 = "mini.unwrap"(%6973) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ZipIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6980 = "mini.unwrap"(%6978) : (!mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.any, "ZipIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6981 = "mini.get_type_field"(%6968) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">, !mini.type_param<"U", !mini.any, "ZipIterable2">]>) -> !mini.reified_type
    %6982 = "mini.get_type_field"(%6968) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">, !mini.type_param<"U", !mini.any, "ZipIterable2">]>) -> !mini.reified_type
    %6983 = "mini.parameterization"(%6981, %6982) {"id_hierarchy" = ["Pair", [0 : i32], [1 : i32]], "name_hierarchy" = ["PairZipIterable2.T_subtype_Any._ZipIterable2.U_subtype_Any", ["ZipIterable2.T_subtype_Any"], ["ZipIterable2.U_subtype_Any"]]} : (!mini.reified_type, !mini.reified_type) -> !llvm.ptr
    %6984 = "mini.new"(%6981, %6982, %6983) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "ZipIterator2", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!mini.reified_type, !mini.reified_type, !llvm.ptr) -> !mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.any, "ZipIterable2">, !mini.type_param<"U", !mini.any, "ZipIterable2">]>
    %6985 = "mini.get_field"(%6968) {"offset" = 3 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable2"} : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">, !mini.type_param<"U", !mini.any, "ZipIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">]>
    %6986 = "mini.unwrap"(%6985) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6987 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %6988 = "mini.method_call"(%6987, %6986) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %6989 = "mini.to_fat_ptr"(%6988) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ZipIterable2">]>
    %6990 = "mini.get_field"(%6968) {"offset" = 4 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable2"} : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">, !mini.type_param<"U", !mini.any, "ZipIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ZipIterable2">]>
    %6991 = "mini.unwrap"(%6990) : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ZipIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6992 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %6993 = "mini.method_call"(%6992, %6991) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %6994 = "mini.to_fat_ptr"(%6993) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.any, "ZipIterable2">]>
    %6995 = "mini.to_fat_ptr"(%6989) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ZipIterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ZipIterator2">]>
    %6996 = "mini.unwrap"(%6995) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ZipIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6997 = "mini.to_fat_ptr"(%6994) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.any, "ZipIterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.any, "ZipIterator2">]>
    %6998 = "mini.unwrap"(%6997) : (!mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.any, "ZipIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6999 = "mini.unwrap"(%6984) : (!mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.any, "ZipIterable2">, !mini.type_param<"U", !mini.any, "ZipIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7000 = "mini.parameterization"(%6981) {"id_hierarchy" = ["Iterator2", [0 : i32]], "name_hierarchy" = ["Iterator2ZipIterable2.T_subtype_Any", ["ZipIterable2.T_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %7001 = "mini.parameterization"(%6982) {"id_hierarchy" = ["Iterator2", [0 : i32]], "name_hierarchy" = ["Iterator2ZipIterable2.U_subtype_Any", ["ZipIterable2.U_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %7002 = "mini.parameterizations_array"(%7000, %7001) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%7002, %6999, %6996, %6998) {"offset" = 5 : i32, "vptrs" = [#none, #none], "vtable_size" = 12 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %7003 = "mini.to_fat_ptr"(%6984) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ZipIterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.any, "ZipIterable2">, !mini.type_param<"U", !mini.any, "ZipIterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    "mini.return"(%7003) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> ()
  }) {"func_name" = "ZipIterable2_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1151(%7004 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7005 : !llvm.ptr):
    %7006 = "mini.invariant"(%7005) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7007 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1152] : () -> ()
  ^bb1152:
    %7008 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%7008, %7007) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1153] : () -> ()
  ^bb1153:
    %7009 = "llvm.extractvalue"(%7004) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7010 = "llvm.load"(%7007) : (!llvm.ptr) -> i32
    %7011 = "llvm.getelementptr"(%7009, %7010) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7012 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %7013 = "llvm.getelementptr"(%7011, %7012) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7013) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable2_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1154(%7014 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7015 : !llvm.ptr):
    %7016 = "mini.invariant"(%7015) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7017 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1155] : () -> ()
  ^bb1156:
    %7018 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
    "llvm.store"(%7018, %7017) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1157] : () -> ()
  ^bb1155:
    %7019 = "llvm.getelementptr"(%7015) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7020 = "mini.checkflag"(%7019) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7021 = "llvm.load"(%7020) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7021) [^bb1156, ^bb1156] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1157:
    %7022 = "llvm.extractvalue"(%7014) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7023 = "llvm.load"(%7017) : (!llvm.ptr) -> i32
    %7024 = "llvm.getelementptr"(%7022, %7023) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7025 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %7026 = "llvm.getelementptr"(%7024, %7025) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7026) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable2_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1158(%7027 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7028 : !llvm.ptr):
    %7029 = "mini.invariant"(%7028) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7030 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1159] : () -> ()
  ^bb1160:
    %7031 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
    "llvm.store"(%7031, %7030) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1161] : () -> ()
  ^bb1162:
    %7032 = "llvm.getelementptr"(%7028) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7033 = "mini.checkflag"(%7032) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7034 = "llvm.load"(%7033) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7034) [^bb1160, ^bb1160] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1159:
    %7035 = "llvm.getelementptr"(%7028) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7036 = "mini.checkflag"(%7035) {"typ_name" = "Pair"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7037 = "llvm.load"(%7036) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7037) [^bb1162, ^bb1162] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1161:
    %7038 = "llvm.extractvalue"(%7027) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7039 = "llvm.load"(%7030) : (!llvm.ptr) -> i32
    %7040 = "llvm.getelementptr"(%7038, %7039) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7041 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %7042 = "llvm.getelementptr"(%7040, %7041) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7042) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1163(%7043 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7044 : !llvm.ptr):
    %7045 = "mini.invariant"(%7044) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7046 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1164] : () -> ()
  ^bb1165:
    %7047 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
    "llvm.store"(%7047, %7046) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1166] : () -> ()
  ^bb1164:
    %7048 = "llvm.getelementptr"(%7044) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7049 = "mini.checkflag"(%7048) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7050 = "llvm.load"(%7049) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7050) [^bb1165, ^bb1165] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1166:
    %7051 = "llvm.extractvalue"(%7043) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7052 = "llvm.load"(%7046) : (!llvm.ptr) -> i32
    %7053 = "llvm.getelementptr"(%7051, %7052) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7054 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %7055 = "llvm.getelementptr"(%7053, %7054) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7055) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable2_B_all_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1167(%7056 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7057 : !llvm.ptr):
    %7058 = "mini.invariant"(%7057) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7059 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1168] : () -> ()
  ^bb1169:
    %7060 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
    "llvm.store"(%7060, %7059) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1170] : () -> ()
  ^bb1168:
    %7061 = "llvm.getelementptr"(%7057) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7062 = "mini.checkflag"(%7061) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7063 = "llvm.load"(%7062) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7063) [^bb1169, ^bb1169] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1170:
    %7064 = "llvm.extractvalue"(%7056) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7065 = "llvm.load"(%7059) : (!llvm.ptr) -> i32
    %7066 = "llvm.getelementptr"(%7064, %7065) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7067 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %7068 = "llvm.getelementptr"(%7066, %7067) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7068) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable2_B_any_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1171(%7069 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7070 : !llvm.ptr):
    %7071 = "mini.invariant"(%7070) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7072 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1172] : () -> ()
  ^bb1173:
    %7073 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
    "llvm.store"(%7073, %7072) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1174] : () -> ()
  ^bb1172:
    %7074 = "llvm.getelementptr"(%7070) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7075 = "mini.checkflag"(%7074) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7076 = "llvm.load"(%7075) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7076) [^bb1173, ^bb1173] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1174:
    %7077 = "llvm.extractvalue"(%7069) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7078 = "llvm.load"(%7072) : (!llvm.ptr) -> i32
    %7079 = "llvm.getelementptr"(%7077, %7078) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7080 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %7081 = "llvm.getelementptr"(%7079, %7080) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7081) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable2_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1175(%7082 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7083 : !llvm.ptr):
    %7084 = "mini.invariant"(%7083) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7085 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1176] : () -> ()
  ^bb1177:
    %7086 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
    "llvm.store"(%7086, %7085) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1178] : () -> ()
  ^bb1176:
    %7087 = "llvm.getelementptr"(%7083) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7088 = "mini.checkflag"(%7087) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7089 = "llvm.load"(%7088) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7089) [^bb1177, ^bb1177] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1178:
    %7090 = "llvm.extractvalue"(%7082) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7091 = "llvm.load"(%7085) : (!llvm.ptr) -> i32
    %7092 = "llvm.getelementptr"(%7090, %7091) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7093 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %7094 = "llvm.getelementptr"(%7092, %7093) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7094) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable2_B_filter_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1179(%7095 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7096 : !llvm.ptr):
    %7097 = "mini.invariant"(%7096) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7098 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1180] : () -> ()
  ^bb1181:
    %7099 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
    "llvm.store"(%7099, %7098) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1182] : () -> ()
  ^bb1180:
    %7100 = "llvm.getelementptr"(%7096) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7101 = "mini.checkflag"(%7100) {"typ_name" = "Iterable2"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7102 = "llvm.load"(%7101) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7102) [^bb1181, ^bb1181] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1182:
    %7103 = "llvm.extractvalue"(%7095) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7104 = "llvm.load"(%7098) : (!llvm.ptr) -> i32
    %7105 = "llvm.getelementptr"(%7103, %7104) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7106 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %7107 = "llvm.getelementptr"(%7105, %7106) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7107) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable2_B_chain_otherIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1183(%7108 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7109 : !llvm.ptr):
    %7110 = "mini.invariant"(%7109) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7111 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1184] : () -> ()
  ^bb1185:
    %7112 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
    "llvm.store"(%7112, %7111) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1186] : () -> ()
  ^bb1184:
    %7113 = "llvm.getelementptr"(%7109) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7114 = "mini.checkflag"(%7113) {"typ_name" = "Iterable2"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7115 = "llvm.load"(%7114) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7115) [^bb1185, ^bb1185] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1186:
    %7116 = "llvm.extractvalue"(%7108) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7117 = "llvm.load"(%7111) : (!llvm.ptr) -> i32
    %7118 = "llvm.getelementptr"(%7116, %7117) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7119 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %7120 = "llvm.getelementptr"(%7118, %7119) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7120) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable2_B_interleave_otherIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1187(%7121 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7122 : !llvm.ptr):
    %7123 = "mini.invariant"(%7122) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7124 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1188] : () -> ()
  ^bb1189:
    %7125 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
    "llvm.store"(%7125, %7124) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1190] : () -> ()
  ^bb1188:
    %7126 = "llvm.getelementptr"(%7122) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7127 = "mini.checkflag"(%7126) {"typ_name" = "Iterable2"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7128 = "llvm.load"(%7127) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7128) [^bb1189, ^bb1189] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1190:
    %7129 = "llvm.extractvalue"(%7121) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7130 = "llvm.load"(%7124) : (!llvm.ptr) -> i32
    %7131 = "llvm.getelementptr"(%7129, %7130) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7132 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %7133 = "llvm.getelementptr"(%7131, %7132) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7133) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable2_B_zip_otherIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1191(%7134 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7135 : !llvm.ptr):
    %7136 = "mini.invariant"(%7135) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7137 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1192] : () -> ()
  ^bb1193:
    %7138 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
    "llvm.store"(%7138, %7137) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1194] : () -> ()
  ^bb1192:
    %7139 = "llvm.getelementptr"(%7135) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7140 = "mini.checkflag"(%7139) {"typ_name" = "Iterable2"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7141 = "llvm.load"(%7140) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7141) [^bb1193, ^bb1193] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1194:
    %7142 = "llvm.extractvalue"(%7134) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7143 = "llvm.load"(%7137) : (!llvm.ptr) -> i32
    %7144 = "llvm.getelementptr"(%7142, %7143) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7145 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %7146 = "llvm.getelementptr"(%7144, %7145) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7146) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable2_B_product_otherIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_ZipIterator2", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "ZipIterator2_field_ZipIterator2_0"} : () -> ()
  "mini.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "ZipIterator2_field_ZipIterator2_1"} : () -> ()
  "mini.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "ZipIterator2_field_ZipIterator2_2"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ZipIterator2_getter_first", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator2", "parameterization" = "_parameterization_Iterator2ZipIterator2.T_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ZipIterator2_setter_first", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator2", "parameterization" = "_parameterization_Iterator2ZipIterator2.T_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ZipIterator2_field_first", "getter_name" = "ZipIterator2_getter_first", "setter_name" = "ZipIterator2_setter_first"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ZipIterator2_getter_second", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator2", "parameterization" = "_parameterization_Iterator2ZipIterator2.U_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ZipIterator2_setter_second", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator2", "parameterization" = "_parameterization_Iterator2ZipIterator2.U_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ZipIterator2_field_second", "getter_name" = "ZipIterator2_getter_second", "setter_name" = "ZipIterator2_setter_second"} : () -> ()
  "mini.func"() ({
  ^bb1195(%7147 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7148 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7149 : !llvm.ptr, %7150 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7151 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %7152 = "mini.wrap"(%7147) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.any, "ZipIterator2">, !mini.type_param<"U", !mini.any, "ZipIterator2">]>
    %7153 = "mini.to_fat_ptr"(%7152) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ZipIterator2", "to_typ_name" = "ZipIterator2"} : (!mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.any, "ZipIterator2">, !mini.type_param<"U", !mini.any, "ZipIterator2">]>) -> !mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.any, "ZipIterator2">, !mini.type_param<"U", !mini.any, "ZipIterator2">]>
    %7154 = "mini.wrap"(%7150) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ZipIterator2">]>
    %7155 = "mini.to_fat_ptr"(%7154) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ZipIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ZipIterator2">]>
    %7156 = "mini.to_fat_ptr"(%7155) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ZipIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ZipIterator2">]>
    "mini.set_field"(%7153, %7156) {"offset" = 3 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.any, "ZipIterator2">, !mini.type_param<"U", !mini.any, "ZipIterator2">]>, !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ZipIterator2">]>) -> ()
    %7157 = "mini.wrap"(%7151) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.any, "ZipIterator2">]>
    %7158 = "mini.to_fat_ptr"(%7157) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.any, "ZipIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.any, "ZipIterator2">]>
    %7159 = "mini.to_fat_ptr"(%7158) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.any, "ZipIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.any, "ZipIterator2">]>
    "mini.set_field"(%7153, %7159) {"offset" = 4 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.any, "ZipIterator2">, !mini.type_param<"U", !mini.any, "ZipIterator2">]>, !mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.any, "ZipIterator2">]>) -> ()
  }) {"func_name" = "ZipIterator2_init_firstIterator2T_secondIterator2U", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1196(%7160 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7161 : !llvm.ptr):
    %7162 = "mini.invariant"(%7161) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7163 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1197] : () -> ()
  ^bb1198:
    %7164 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    "llvm.store"(%7164, %7163) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1199] : () -> ()
  ^bb1200:
    %7165 = "llvm.getelementptr"(%7161) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7166 = "mini.checkflag"(%7165) {"typ_name" = "Iterator2"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7167 = "llvm.load"(%7166) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7167) [^bb1198, ^bb1198] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1197:
    %7168 = "llvm.getelementptr"(%7161) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7169 = "mini.checkflag"(%7168) {"typ_name" = "Iterator2"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7170 = "llvm.load"(%7169) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7170) [^bb1200, ^bb1200] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1199:
    %7171 = "llvm.extractvalue"(%7160) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7172 = "llvm.load"(%7163) : (!llvm.ptr) -> i32
    %7173 = "llvm.getelementptr"(%7171, %7172) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<12 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7174 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %7175 = "llvm.getelementptr"(%7173, %7174) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7175) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterator2_B_init_firstIterator2T_secondIterator2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1201(%7176 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7177 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7178 : !llvm.ptr):
    %7179 = "mini.wrap"(%7176) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.any, "ZipIterator2">, !mini.type_param<"U", !mini.any, "ZipIterator2">]>
    %7180 = "mini.to_fat_ptr"(%7179) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ZipIterator2", "to_typ_name" = "ZipIterator2"} : (!mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.any, "ZipIterator2">, !mini.type_param<"U", !mini.any, "ZipIterator2">]>) -> !mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.any, "ZipIterator2">, !mini.type_param<"U", !mini.any, "ZipIterator2">]>
    %7181 = "mini.get_field"(%7180) {"offset" = 3 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator2"} : (!mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.any, "ZipIterator2">, !mini.type_param<"U", !mini.any, "ZipIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ZipIterator2">]>
    %7182 = "mini.unwrap"(%7181) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ZipIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7183 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %7184 = "mini.method_call"(%7183, %7182) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]>
    %7185 = builtin.unrealized_conversion_cast %7184 : !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]> to !mini.union<[!mini.type_param<"T", !mini.any, "ZipIterator2">, !mini.nil]>
    %7186 = "mini.get_field"(%7180) {"offset" = 4 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator2"} : (!mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.any, "ZipIterator2">, !mini.type_param<"U", !mini.any, "ZipIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.any, "ZipIterator2">]>
    %7187 = "mini.unwrap"(%7186) : (!mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.any, "ZipIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7188 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %7189 = "mini.method_call"(%7188, %7187) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]>
    %7190 = builtin.unrealized_conversion_cast %7189 : !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]> to !mini.union<[!mini.type_param<"U", !mini.any, "ZipIterator2">, !mini.nil]>
    %7191 = "mini.get_type_field"(%7180) {"offset" = 0 : i64, "vtable_bytes" = 96 : i32} : (!mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.any, "ZipIterator2">, !mini.type_param<"U", !mini.any, "ZipIterator2">]>) -> !mini.reified_type
    %7192 = "mini.checkflag"(%7185) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.type_param<"T", !mini.any, "ZipIterator2">, !mini.nil]>) -> !mini.ptr<i1>
    %7193 = "mini.unwrap"(%7192) : (!mini.ptr<i1>) -> i1
    %7194 = builtin.unrealized_conversion_cast %7185 : !mini.union<[!mini.type_param<"T", !mini.any, "ZipIterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.any, "ZipIterator2">, !mini.nil]>
    "mini.if"(%7193) ({
      %7195 = "mini.to_fat_ptr"(%7194) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "ZipIterator2">, !mini.nil]>) -> !mini.type_param<"T", !mini.any, "ZipIterator2">
      %7196 = "mini.get_type_field"(%7180) {"offset" = 1 : i64, "vtable_bytes" = 96 : i32} : (!mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.any, "ZipIterator2">, !mini.type_param<"U", !mini.any, "ZipIterator2">]>) -> !mini.reified_type
      %7197 = "mini.checkflag"(%7190) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.type_param<"U", !mini.any, "ZipIterator2">, !mini.nil]>) -> !mini.ptr<i1>
      %7198 = "mini.unwrap"(%7197) : (!mini.ptr<i1>) -> i1
      %7199 = builtin.unrealized_conversion_cast %7190 : !mini.union<[!mini.type_param<"U", !mini.any, "ZipIterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"U", !mini.any, "ZipIterator2">, !mini.nil]>
      "mini.if"(%7198) ({
        %7200 = "mini.to_fat_ptr"(%7199) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!mini.union<[!mini.type_param<"U", !mini.any, "ZipIterator2">, !mini.nil]>) -> !mini.type_param<"U", !mini.any, "ZipIterator2">
        %7201 = "mini.unwrap"(%7195) : (!mini.type_param<"T", !mini.any, "ZipIterator2">) -> !llvm.struct<(!llvm.ptr, i160)>
        %7202 = "mini.unwrap"(%7200) : (!mini.type_param<"U", !mini.any, "ZipIterator2">) -> !llvm.struct<(!llvm.ptr, i160)>
        %7203 = "mini.new"(%7191, %7196) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>)>, "class_name" = "Pair", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!mini.reified_type, !mini.reified_type) -> !mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "ZipIterator2">, !mini.type_param<"U", !mini.any, "ZipIterator2">]>
        %7204 = "mini.to_fat_ptr"(%7195) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "ZipIterator2">) -> !mini.type_param<"T", !mini.any, "Pair">
        %7205 = "mini.unwrap"(%7204) : (!mini.type_param<"T", !mini.any, "Pair">) -> !llvm.struct<(!llvm.ptr, i160)>
        %7206 = "mini.to_fat_ptr"(%7200) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"U", !mini.any, "ZipIterator2">) -> !mini.type_param<"U", !mini.any, "Pair">
        %7207 = "mini.unwrap"(%7206) : (!mini.type_param<"U", !mini.any, "Pair">) -> !llvm.struct<(!llvm.ptr, i160)>
        %7208 = "mini.unwrap"(%7203) : (!mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "ZipIterator2">, !mini.type_param<"U", !mini.any, "ZipIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %7209 = "mini.parameterizations_array"(%7191, %7196) : (!mini.reified_type, !mini.reified_type) -> !llvm.ptr
        "mini.method_call"(%7209, %7208, %7205, %7207) {"offset" = 4 : i32, "vptrs" = ["any_typ", "any_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
        %7210 = builtin.unrealized_conversion_cast %7203 : !mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "ZipIterator2">, !mini.type_param<"U", !mini.any, "ZipIterator2">]> to !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]>
        "mini.return"(%7210) : (!mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]>) -> ()
        "mini.castassign"(%7199, %7200) ({
          %7211 = builtin.unrealized_conversion_cast %7200 : !mini.type_param<"U", !mini.any, "ZipIterator2"> to !mini.union<[!mini.type_param<"U", !mini.any, "ZipIterator2">, !mini.nil]>
        }) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.type_param<"U", !mini.any, "ZipIterator2">, !mini.nil]>, !mini.type_param<"U", !mini.any, "ZipIterator2">) -> ()
      }) : (i1) -> ()
      "mini.castassign"(%7194, %7195) ({
        %7212 = builtin.unrealized_conversion_cast %7195 : !mini.type_param<"T", !mini.any, "ZipIterator2"> to !mini.union<[!mini.type_param<"T", !mini.any, "ZipIterator2">, !mini.nil]>
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.type_param<"T", !mini.any, "ZipIterator2">, !mini.nil]>, !mini.type_param<"T", !mini.any, "ZipIterator2">) -> ()
    }) : (i1) -> ()
    %7213 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
    %7214 = "mini.unionize"(%7213) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]>
    "mini.return"(%7214) : (!mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]>) -> ()
  }) {"func_name" = "ZipIterator2_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1202(%7215 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7216 : !llvm.ptr):
    %7217 = "mini.invariant"(%7216) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7218 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1203] : () -> ()
  ^bb1203:
    %7219 = "llvm.mlir.constant"() <{"value" = 8 : i32}> : () -> i32
    "llvm.store"(%7219, %7218) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1204] : () -> ()
  ^bb1204:
    %7220 = "llvm.extractvalue"(%7215) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7221 = "llvm.load"(%7218) : (!llvm.ptr) -> i32
    %7222 = "llvm.getelementptr"(%7220, %7221) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<12 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7223 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %7224 = "llvm.getelementptr"(%7222, %7223) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7224) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterator2_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_ProductIterable2", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "ProductIterable2_field_ProductIterable2_0"} : () -> ()
  "mini.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "ProductIterable2_field_ProductIterable2_1"} : () -> ()
  "mini.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "ProductIterable2_field_ProductIterable2_2"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ProductIterable2_getter_first", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable2", "parameterization" = "_parameterization_Iterable2ProductIterable2.T_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ProductIterable2_setter_first", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable2", "parameterization" = "_parameterization_Iterable2ProductIterable2.T_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ProductIterable2_field_first", "getter_name" = "ProductIterable2_getter_first", "setter_name" = "ProductIterable2_setter_first"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ProductIterable2_getter_second", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable2", "parameterization" = "_parameterization_Iterable2ProductIterable2.U_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ProductIterable2_setter_second", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable2", "parameterization" = "_parameterization_Iterable2ProductIterable2.U_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ProductIterable2_field_second", "getter_name" = "ProductIterable2_getter_second", "setter_name" = "ProductIterable2_setter_second"} : () -> ()
  "mini.func"() ({
  ^bb1205(%7225 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7226 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7227 : !llvm.ptr, %7228 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7229 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %7230 = "mini.wrap"(%7225) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">, !mini.type_param<"U", !mini.any, "ProductIterable2">]>
    %7231 = "mini.to_fat_ptr"(%7230) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ProductIterable2", "to_typ_name" = "ProductIterable2"} : (!mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">, !mini.type_param<"U", !mini.any, "ProductIterable2">]>) -> !mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">, !mini.type_param<"U", !mini.any, "ProductIterable2">]>
    %7232 = "mini.wrap"(%7228) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">]>
    %7233 = "mini.to_fat_ptr"(%7232) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">]>
    %7234 = "mini.to_fat_ptr"(%7233) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">]>
    "mini.set_field"(%7231, %7234) {"offset" = 3 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">, !mini.type_param<"U", !mini.any, "ProductIterable2">]>, !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">]>) -> ()
    %7235 = "mini.wrap"(%7229) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ProductIterable2">]>
    %7236 = "mini.to_fat_ptr"(%7235) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ProductIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ProductIterable2">]>
    %7237 = "mini.to_fat_ptr"(%7236) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ProductIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ProductIterable2">]>
    "mini.set_field"(%7231, %7237) {"offset" = 4 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">, !mini.type_param<"U", !mini.any, "ProductIterable2">]>, !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ProductIterable2">]>) -> ()
  }) {"func_name" = "ProductIterable2_init_firstIterable2T_secondIterable2U", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1206(%7238 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7239 : !llvm.ptr):
    %7240 = "mini.invariant"(%7239) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7241 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1207] : () -> ()
  ^bb1208:
    %7242 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
    "llvm.store"(%7242, %7241) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1209] : () -> ()
  ^bb1210:
    %7243 = "llvm.getelementptr"(%7239) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7244 = "mini.checkflag"(%7243) {"typ_name" = "Iterable2"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7245 = "llvm.load"(%7244) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7245) [^bb1208, ^bb1208] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1207:
    %7246 = "llvm.getelementptr"(%7239) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7247 = "mini.checkflag"(%7246) {"typ_name" = "Iterable2"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7248 = "llvm.load"(%7247) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7248) [^bb1210, ^bb1210] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1209:
    %7249 = "llvm.extractvalue"(%7238) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7250 = "llvm.load"(%7241) : (!llvm.ptr) -> i32
    %7251 = "llvm.getelementptr"(%7249, %7250) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7252 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %7253 = "llvm.getelementptr"(%7251, %7252) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7253) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable2_B_init_firstIterable2T_secondIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1211(%7254 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7255 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7256 : !llvm.ptr):
    %7257 = "mini.wrap"(%7254) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">, !mini.type_param<"U", !mini.any, "ProductIterable2">]>
    %7258 = "mini.to_fat_ptr"(%7257) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ProductIterable2", "to_typ_name" = "ProductIterable2"} : (!mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">, !mini.type_param<"U", !mini.any, "ProductIterable2">]>) -> !mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">, !mini.type_param<"U", !mini.any, "ProductIterable2">]>
    %7259 = "mini.get_field"(%7258) {"offset" = 3 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable2"} : (!mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">, !mini.type_param<"U", !mini.any, "ProductIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">]>
    %7260 = "mini.get_field"(%7258) {"offset" = 4 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable2"} : (!mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">, !mini.type_param<"U", !mini.any, "ProductIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ProductIterable2">]>
    %7261 = "mini.unwrap"(%7259) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7262 = "mini.unwrap"(%7260) : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ProductIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7263 = "mini.get_type_field"(%7258) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">, !mini.type_param<"U", !mini.any, "ProductIterable2">]>) -> !mini.reified_type
    %7264 = "mini.get_type_field"(%7258) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">, !mini.type_param<"U", !mini.any, "ProductIterable2">]>) -> !mini.reified_type
    %7265 = "mini.parameterization"(%7263, %7264) {"id_hierarchy" = ["Pair", [0 : i32], [1 : i32]], "name_hierarchy" = ["PairProductIterable2.T_subtype_Any._ProductIterable2.U_subtype_Any", ["ProductIterable2.T_subtype_Any"], ["ProductIterable2.U_subtype_Any"]]} : (!mini.reified_type, !mini.reified_type) -> !llvm.ptr
    %7266 = "mini.new"(%7263, %7264, %7265) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>)>, "class_name" = "ProductIterator2", "num_data_fields" = 4 : i32, "region_id" = "none", "has_type_fields"} : (!mini.reified_type, !mini.reified_type, !llvm.ptr) -> !mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterable2">, !mini.type_param<"U", !mini.any, "ProductIterable2">]>
    %7267 = "mini.get_field"(%7258) {"offset" = 3 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable2"} : (!mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">, !mini.type_param<"U", !mini.any, "ProductIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">]>
    %7268 = "mini.get_field"(%7258) {"offset" = 4 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable2"} : (!mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">, !mini.type_param<"U", !mini.any, "ProductIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ProductIterable2">]>
    %7269 = "mini.to_fat_ptr"(%7267) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ProductIterator2">]>
    %7270 = "mini.unwrap"(%7269) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ProductIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7271 = "mini.to_fat_ptr"(%7268) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ProductIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ProductIterator2">]>
    %7272 = "mini.unwrap"(%7271) : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7273 = "mini.unwrap"(%7266) : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterable2">, !mini.type_param<"U", !mini.any, "ProductIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7274 = "mini.parameterization"(%7263) {"id_hierarchy" = ["Iterable2", [0 : i32]], "name_hierarchy" = ["Iterable2ProductIterable2.T_subtype_Any", ["ProductIterable2.T_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %7275 = "mini.parameterization"(%7264) {"id_hierarchy" = ["Iterable2", [0 : i32]], "name_hierarchy" = ["Iterable2ProductIterable2.U_subtype_Any", ["ProductIterable2.U_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %7276 = "mini.parameterizations_array"(%7274, %7275) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%7276, %7273, %7270, %7272) {"offset" = 7 : i32, "vptrs" = [#none, #none], "vtable_size" = 14 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %7277 = "mini.to_fat_ptr"(%7266) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ProductIterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterable2">, !mini.type_param<"U", !mini.any, "ProductIterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    "mini.return"(%7277) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> ()
  }) {"func_name" = "ProductIterable2_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1212(%7278 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7279 : !llvm.ptr):
    %7280 = "mini.invariant"(%7279) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7281 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1213] : () -> ()
  ^bb1213:
    %7282 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%7282, %7281) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1214] : () -> ()
  ^bb1214:
    %7283 = "llvm.extractvalue"(%7278) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7284 = "llvm.load"(%7281) : (!llvm.ptr) -> i32
    %7285 = "llvm.getelementptr"(%7283, %7284) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7286 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %7287 = "llvm.getelementptr"(%7285, %7286) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7287) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable2_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1215(%7288 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7289 : !llvm.ptr):
    %7290 = "mini.invariant"(%7289) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7291 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1216] : () -> ()
  ^bb1217:
    %7292 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
    "llvm.store"(%7292, %7291) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1218] : () -> ()
  ^bb1216:
    %7293 = "llvm.getelementptr"(%7289) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7294 = "mini.checkflag"(%7293) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7295 = "llvm.load"(%7294) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7295) [^bb1217, ^bb1217] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1218:
    %7296 = "llvm.extractvalue"(%7288) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7297 = "llvm.load"(%7291) : (!llvm.ptr) -> i32
    %7298 = "llvm.getelementptr"(%7296, %7297) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7299 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %7300 = "llvm.getelementptr"(%7298, %7299) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7300) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable2_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1219(%7301 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7302 : !llvm.ptr):
    %7303 = "mini.invariant"(%7302) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7304 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1220] : () -> ()
  ^bb1221:
    %7305 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
    "llvm.store"(%7305, %7304) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1222] : () -> ()
  ^bb1223:
    %7306 = "llvm.getelementptr"(%7302) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7307 = "mini.checkflag"(%7306) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7308 = "llvm.load"(%7307) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7308) [^bb1221, ^bb1221] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1220:
    %7309 = "llvm.getelementptr"(%7302) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7310 = "mini.checkflag"(%7309) {"typ_name" = "Pair"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7311 = "llvm.load"(%7310) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7311) [^bb1223, ^bb1223] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1222:
    %7312 = "llvm.extractvalue"(%7301) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7313 = "llvm.load"(%7304) : (!llvm.ptr) -> i32
    %7314 = "llvm.getelementptr"(%7312, %7313) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7315 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %7316 = "llvm.getelementptr"(%7314, %7315) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7316) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1224(%7317 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7318 : !llvm.ptr):
    %7319 = "mini.invariant"(%7318) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7320 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1225] : () -> ()
  ^bb1226:
    %7321 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
    "llvm.store"(%7321, %7320) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1227] : () -> ()
  ^bb1225:
    %7322 = "llvm.getelementptr"(%7318) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7323 = "mini.checkflag"(%7322) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7324 = "llvm.load"(%7323) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7324) [^bb1226, ^bb1226] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1227:
    %7325 = "llvm.extractvalue"(%7317) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7326 = "llvm.load"(%7320) : (!llvm.ptr) -> i32
    %7327 = "llvm.getelementptr"(%7325, %7326) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7328 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %7329 = "llvm.getelementptr"(%7327, %7328) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7329) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable2_B_all_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1228(%7330 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7331 : !llvm.ptr):
    %7332 = "mini.invariant"(%7331) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7333 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1229] : () -> ()
  ^bb1230:
    %7334 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
    "llvm.store"(%7334, %7333) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1231] : () -> ()
  ^bb1229:
    %7335 = "llvm.getelementptr"(%7331) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7336 = "mini.checkflag"(%7335) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7337 = "llvm.load"(%7336) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7337) [^bb1230, ^bb1230] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1231:
    %7338 = "llvm.extractvalue"(%7330) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7339 = "llvm.load"(%7333) : (!llvm.ptr) -> i32
    %7340 = "llvm.getelementptr"(%7338, %7339) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7341 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %7342 = "llvm.getelementptr"(%7340, %7341) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7342) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable2_B_any_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1232(%7343 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7344 : !llvm.ptr):
    %7345 = "mini.invariant"(%7344) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7346 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1233] : () -> ()
  ^bb1234:
    %7347 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
    "llvm.store"(%7347, %7346) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1235] : () -> ()
  ^bb1233:
    %7348 = "llvm.getelementptr"(%7344) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7349 = "mini.checkflag"(%7348) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7350 = "llvm.load"(%7349) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7350) [^bb1234, ^bb1234] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1235:
    %7351 = "llvm.extractvalue"(%7343) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7352 = "llvm.load"(%7346) : (!llvm.ptr) -> i32
    %7353 = "llvm.getelementptr"(%7351, %7352) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7354 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %7355 = "llvm.getelementptr"(%7353, %7354) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7355) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable2_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1236(%7356 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7357 : !llvm.ptr):
    %7358 = "mini.invariant"(%7357) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7359 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1237] : () -> ()
  ^bb1238:
    %7360 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
    "llvm.store"(%7360, %7359) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1239] : () -> ()
  ^bb1237:
    %7361 = "llvm.getelementptr"(%7357) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7362 = "mini.checkflag"(%7361) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7363 = "llvm.load"(%7362) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7363) [^bb1238, ^bb1238] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1239:
    %7364 = "llvm.extractvalue"(%7356) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7365 = "llvm.load"(%7359) : (!llvm.ptr) -> i32
    %7366 = "llvm.getelementptr"(%7364, %7365) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7367 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %7368 = "llvm.getelementptr"(%7366, %7367) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7368) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable2_B_filter_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1240(%7369 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7370 : !llvm.ptr):
    %7371 = "mini.invariant"(%7370) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7372 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1241] : () -> ()
  ^bb1242:
    %7373 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
    "llvm.store"(%7373, %7372) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1243] : () -> ()
  ^bb1241:
    %7374 = "llvm.getelementptr"(%7370) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7375 = "mini.checkflag"(%7374) {"typ_name" = "Iterable2"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7376 = "llvm.load"(%7375) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7376) [^bb1242, ^bb1242] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1243:
    %7377 = "llvm.extractvalue"(%7369) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7378 = "llvm.load"(%7372) : (!llvm.ptr) -> i32
    %7379 = "llvm.getelementptr"(%7377, %7378) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7380 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %7381 = "llvm.getelementptr"(%7379, %7380) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7381) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable2_B_chain_otherIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1244(%7382 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7383 : !llvm.ptr):
    %7384 = "mini.invariant"(%7383) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7385 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1245] : () -> ()
  ^bb1246:
    %7386 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
    "llvm.store"(%7386, %7385) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1247] : () -> ()
  ^bb1245:
    %7387 = "llvm.getelementptr"(%7383) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7388 = "mini.checkflag"(%7387) {"typ_name" = "Iterable2"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7389 = "llvm.load"(%7388) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7389) [^bb1246, ^bb1246] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1247:
    %7390 = "llvm.extractvalue"(%7382) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7391 = "llvm.load"(%7385) : (!llvm.ptr) -> i32
    %7392 = "llvm.getelementptr"(%7390, %7391) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7393 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %7394 = "llvm.getelementptr"(%7392, %7393) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7394) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable2_B_interleave_otherIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1248(%7395 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7396 : !llvm.ptr):
    %7397 = "mini.invariant"(%7396) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7398 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1249] : () -> ()
  ^bb1250:
    %7399 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
    "llvm.store"(%7399, %7398) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1251] : () -> ()
  ^bb1249:
    %7400 = "llvm.getelementptr"(%7396) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7401 = "mini.checkflag"(%7400) {"typ_name" = "Iterable2"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7402 = "llvm.load"(%7401) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7402) [^bb1250, ^bb1250] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1251:
    %7403 = "llvm.extractvalue"(%7395) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7404 = "llvm.load"(%7398) : (!llvm.ptr) -> i32
    %7405 = "llvm.getelementptr"(%7403, %7404) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7406 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %7407 = "llvm.getelementptr"(%7405, %7406) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7407) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable2_B_zip_otherIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1252(%7408 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7409 : !llvm.ptr):
    %7410 = "mini.invariant"(%7409) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7411 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1253] : () -> ()
  ^bb1254:
    %7412 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
    "llvm.store"(%7412, %7411) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1255] : () -> ()
  ^bb1253:
    %7413 = "llvm.getelementptr"(%7409) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7414 = "mini.checkflag"(%7413) {"typ_name" = "Iterable2"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7415 = "llvm.load"(%7414) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7415) [^bb1254, ^bb1254] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1255:
    %7416 = "llvm.extractvalue"(%7408) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7417 = "llvm.load"(%7411) : (!llvm.ptr) -> i32
    %7418 = "llvm.getelementptr"(%7416, %7417) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7419 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %7420 = "llvm.getelementptr"(%7418, %7419) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7420) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable2_B_product_otherIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_ProductIterator2", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>]} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "ProductIterator2_field_ProductIterator2_0"} : () -> ()
  "mini.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "ProductIterator2_field_ProductIterator2_1"} : () -> ()
  "mini.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "ProductIterator2_field_ProductIterator2_2"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ProductIterator2_getter_first_iterator", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator2", "parameterization" = "_parameterization_Iterator2ProductIterator2.T_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ProductIterator2_setter_first_iterator", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator2", "parameterization" = "_parameterization_Iterator2ProductIterator2.T_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ProductIterator2_field_first_iterator", "getter_name" = "ProductIterator2_getter_first_iterator", "setter_name" = "ProductIterator2_setter_first_iterator"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ProductIterator2_getter_second_iterator", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator2", "parameterization" = "_parameterization_Iterator2ProductIterator2.U_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ProductIterator2_setter_second_iterator", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator2", "parameterization" = "_parameterization_Iterator2ProductIterator2.U_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ProductIterator2_field_second_iterator", "getter_name" = "ProductIterator2_getter_second_iterator", "setter_name" = "ProductIterator2_setter_second_iterator"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ProductIterator2_getter_second_iterable", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 5 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable2", "parameterization" = "_parameterization_Iterable2ProductIterator2.U_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ProductIterator2_setter_second_iterable", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 5 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable2", "parameterization" = "_parameterization_Iterable2ProductIterator2.U_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ProductIterator2_field_second_iterable", "getter_name" = "ProductIterator2_getter_second_iterable", "setter_name" = "ProductIterator2_setter_second_iterable"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ProductIterator2_getter_current_first", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 6 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "union_typ", "parameterization" = "_parameterization_ProductIterator2.T_subtype_Any_or_Nil"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ProductIterator2_setter_current_first", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 6 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "union_typ", "parameterization" = "_parameterization_ProductIterator2.T_subtype_Any_or_Nil"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ProductIterator2_field_current_first", "getter_name" = "ProductIterator2_getter_current_first", "setter_name" = "ProductIterator2_setter_current_first"} : () -> ()
  "mini.func"() ({
  ^bb1256(%7421 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7422 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7423 : !llvm.ptr, %7424 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7425 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %7426 = "mini.wrap"(%7421) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>
    %7427 = "mini.to_fat_ptr"(%7426) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ProductIterator2", "to_typ_name" = "ProductIterator2"} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>
    %7428 = "mini.wrap"(%7424) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ProductIterator2">]>
    %7429 = "mini.to_fat_ptr"(%7428) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ProductIterator2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ProductIterator2">]>
    %7430 = "mini.wrap"(%7425) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ProductIterator2">]>
    %7431 = "mini.to_fat_ptr"(%7430) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ProductIterator2">]>
    %7432 = "mini.to_fat_ptr"(%7431) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ProductIterator2">]>
    "mini.set_field"(%7427, %7432) {"offset" = 5 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>, !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> ()
    %7433 = "mini.unwrap"(%7429) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ProductIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7434 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %7435 = "mini.method_call"(%7434, %7433) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %7436 = "mini.to_fat_ptr"(%7435) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">]>
    %7437 = "mini.to_fat_ptr"(%7436) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">]>
    "mini.set_field"(%7427, %7437) {"offset" = 3 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>, !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">]>) -> ()
    %7438 = "mini.get_field"(%7427) {"offset" = 5 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable2"} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ProductIterator2">]>
    %7439 = "mini.unwrap"(%7438) : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7440 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %7441 = "mini.method_call"(%7440, %7439) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %7442 = "mini.to_fat_ptr"(%7441) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.any, "ProductIterator2">]>
    %7443 = "mini.to_fat_ptr"(%7442) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.any, "ProductIterator2">]>
    "mini.set_field"(%7427, %7443) {"offset" = 4 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>, !mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> ()
    %7444 = "mini.get_field"(%7427) {"offset" = 3 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator2"} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">]>
    %7445 = "mini.unwrap"(%7444) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7446 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %7447 = "mini.method_call"(%7446, %7445) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]>
    %7448 = builtin.unrealized_conversion_cast %7447 : !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]> to !mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.nil]>
    %7449 = builtin.unrealized_conversion_cast %7448 : !mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.nil]>
    "mini.set_field"(%7427, %7449) {"offset" = 6 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>, !mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.nil]>) -> ()
  }) {"func_name" = "ProductIterator2_init_first_iterableIterable2T_second_iterableIterable2U", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1257(%7450 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7451 : !llvm.ptr):
    %7452 = "mini.invariant"(%7451) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7453 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1258] : () -> ()
  ^bb1259:
    %7454 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    "llvm.store"(%7454, %7453) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1260] : () -> ()
  ^bb1261:
    %7455 = "llvm.getelementptr"(%7451) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7456 = "mini.checkflag"(%7455) {"typ_name" = "Iterable2"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7457 = "llvm.load"(%7456) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7457) [^bb1259, ^bb1259] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1258:
    %7458 = "llvm.getelementptr"(%7451) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7459 = "mini.checkflag"(%7458) {"typ_name" = "Iterable2"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7460 = "llvm.load"(%7459) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7460) [^bb1261, ^bb1261] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1260:
    %7461 = "llvm.extractvalue"(%7450) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7462 = "llvm.load"(%7453) : (!llvm.ptr) -> i32
    %7463 = "llvm.getelementptr"(%7461, %7462) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<14 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7464 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %7465 = "llvm.getelementptr"(%7463, %7464) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7465) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterator2_B_init_first_iterableIterable2T_second_iterableIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1262(%7466 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7467 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7468 : !llvm.ptr):
    %7469 = "mini.wrap"(%7466) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>
    %7470 = "mini.to_fat_ptr"(%7469) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ProductIterator2", "to_typ_name" = "ProductIterator2"} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>
    %7471 = "mini.get_field"(%7470) {"offset" = 6 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.nil]>
    %7472 = builtin.unrealized_conversion_cast %7471 : !mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.nil]>
    "mini.while"() ({
      %7473 = "mini.get_type_field"(%7470) {"offset" = 0 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !mini.reified_type
      %7474 = "mini.checkflag"(%7472) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.nil]>) -> !mini.ptr<i1>
      %7475 = "mini.unwrap"(%7474) : (!mini.ptr<i1>) -> i1
    }, {
      %7476 = "mini.to_fat_ptr"(%7472) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.nil]>) -> !mini.type_param<"T", !mini.any, "ProductIterator2">
      %7477 = "mini.get_field"(%7470) {"offset" = 4 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator2"} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.any, "ProductIterator2">]>
      %7478 = "mini.unwrap"(%7477) : (!mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %7479 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %7480 = "mini.method_call"(%7479, %7478) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]>
      %7481 = builtin.unrealized_conversion_cast %7480 : !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]> to !mini.union<[!mini.type_param<"U", !mini.any, "ProductIterator2">, !mini.nil]>
      %7482 = "mini.get_type_field"(%7470) {"offset" = 1 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !mini.reified_type
      %7483 = "mini.checkflag"(%7481) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.type_param<"U", !mini.any, "ProductIterator2">, !mini.nil]>) -> !mini.ptr<i1>
      %7484 = "mini.unwrap"(%7483) : (!mini.ptr<i1>) -> i1
      %7485 = builtin.unrealized_conversion_cast %7481 : !mini.union<[!mini.type_param<"U", !mini.any, "ProductIterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"U", !mini.any, "ProductIterator2">, !mini.nil]>
      "mini.if"(%7484) ({
        %7486 = "mini.to_fat_ptr"(%7485) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!mini.union<[!mini.type_param<"U", !mini.any, "ProductIterator2">, !mini.nil]>) -> !mini.type_param<"U", !mini.any, "ProductIterator2">
        %7487 = "mini.unwrap"(%7476) : (!mini.type_param<"T", !mini.any, "ProductIterator2">) -> !llvm.struct<(!llvm.ptr, i160)>
        %7488 = "mini.unwrap"(%7486) : (!mini.type_param<"U", !mini.any, "ProductIterator2">) -> !llvm.struct<(!llvm.ptr, i160)>
        %7489 = "mini.get_type_field"(%7470) {"offset" = 0 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !mini.reified_type
        %7490 = "mini.new"(%7489, %7482) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>)>, "class_name" = "Pair", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!mini.reified_type, !mini.reified_type) -> !mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>
        %7491 = "mini.to_fat_ptr"(%7476) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "ProductIterator2">) -> !mini.type_param<"T", !mini.any, "Pair">
        %7492 = "mini.unwrap"(%7491) : (!mini.type_param<"T", !mini.any, "Pair">) -> !llvm.struct<(!llvm.ptr, i160)>
        %7493 = "mini.to_fat_ptr"(%7486) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"U", !mini.any, "ProductIterator2">) -> !mini.type_param<"U", !mini.any, "Pair">
        %7494 = "mini.unwrap"(%7493) : (!mini.type_param<"U", !mini.any, "Pair">) -> !llvm.struct<(!llvm.ptr, i160)>
        %7495 = "mini.unwrap"(%7490) : (!mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %7496 = "mini.parameterizations_array"(%7489, %7482) : (!mini.reified_type, !mini.reified_type) -> !llvm.ptr
        "mini.method_call"(%7496, %7495, %7492, %7494) {"offset" = 4 : i32, "vptrs" = ["any_typ", "any_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
        %7497 = builtin.unrealized_conversion_cast %7490 : !mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]> to !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]>
        "mini.return"(%7497) : (!mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]>) -> ()
        "mini.castassign"(%7485, %7486) ({
          %7498 = builtin.unrealized_conversion_cast %7486 : !mini.type_param<"U", !mini.any, "ProductIterator2"> to !mini.union<[!mini.type_param<"U", !mini.any, "ProductIterator2">, !mini.nil]>
        }) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.type_param<"U", !mini.any, "ProductIterator2">, !mini.nil]>, !mini.type_param<"U", !mini.any, "ProductIterator2">) -> ()
      }) : (i1) -> ()
      %7499 = "mini.get_field"(%7470) {"offset" = 3 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator2"} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">]>
      %7500 = "mini.unwrap"(%7499) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %7501 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %7502 = "mini.method_call"(%7501, %7500) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]>
      %7503 = builtin.unrealized_conversion_cast %7502 : !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]> to !mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.nil]>
      %7504 = builtin.unrealized_conversion_cast %7503 : !mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.nil]>
      "mini.set_field"(%7470, %7504) {"offset" = 6 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>, !mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.nil]>) -> ()
      %7505 = "mini.get_field"(%7470) {"offset" = 5 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable2"} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ProductIterator2">]>
      %7506 = "mini.unwrap"(%7505) : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %7507 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %7508 = "mini.method_call"(%7507, %7506) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
      %7509 = "mini.to_fat_ptr"(%7508) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.any, "ProductIterator2">]>
      %7510 = "mini.to_fat_ptr"(%7509) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.any, "ProductIterator2">]>
      "mini.set_field"(%7470, %7510) {"offset" = 4 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>, !mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> ()
      %7511 = "mini.get_field"(%7470) {"offset" = 6 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.nil]>
      "mini.castassign"(%7472, %7511) ({
        %7512 = builtin.unrealized_conversion_cast %7511 : !mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.nil]>
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.nil]>, !mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.nil]>) -> ()
    }) : () -> ()
    %7513 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
    %7514 = "mini.unionize"(%7513) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]>
    "mini.return"(%7514) : (!mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterator2">]>) -> ()
  }) {"func_name" = "ProductIterator2_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1263(%7515 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7516 : !llvm.ptr):
    %7517 = "mini.invariant"(%7516) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7518 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1264] : () -> ()
  ^bb1264:
    %7519 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    "llvm.store"(%7519, %7518) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1265] : () -> ()
  ^bb1265:
    %7520 = "llvm.extractvalue"(%7515) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7521 = "llvm.load"(%7518) : (!llvm.ptr) -> i32
    %7522 = "llvm.getelementptr"(%7520, %7521) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<14 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7523 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %7524 = "llvm.getelementptr"(%7522, %7523) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7524) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterator2_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_Math", "types" = []} : () -> ()
  "mini.func"() ({
  ^bb1266(%7525 : !llvm.ptr, %7526 : f64):
    %7527 = "mini.wrap"(%7526) : (f64) -> !mini.ptr<f64>
    %7528 = builtin.unrealized_conversion_cast %7527 : !mini.ptr<f64> to !mini.ptr<f64>
    %7529 = "mini.unwrap"(%7528) : (!mini.ptr<f64>) -> f64
    %7530 = "mini.intrinsic"(%7529) {"call_name" = "llvm.sqrt.f64", "num_args" = 1 : i32} : (f64) -> f64
    %7531 = "mini.wrap"(%7530) : (f64) -> !mini.ptr<f64>
    %7532 = builtin.unrealized_conversion_cast %7531 : !mini.ptr<f64> to !mini.ptr<f64>
    "mini.return"(%7532) : (!mini.ptr<f64>) -> ()
  }) {"func_name" = "Math__Self_sqrt_xPtrf64", "result_type" = f64, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1267(%7533 : !llvm.ptr):
    %7534 = "mini.invariant"(%7533) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7535 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1268] : () -> ()
  ^bb1269:
    %7536 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    "llvm.store"(%7536, %7535) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1270] : () -> ()
  ^bb1268:
    %7537 = "llvm.getelementptr"(%7533) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7538 = "mini.checkflag"(%7537) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7539 = "llvm.load"(%7538) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7539) [^bb1269, ^bb1269] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1270:
    %7540 = "mini.addr_of"() {"global_name" = @Math} : () -> !llvm.ptr
    %7541 = "llvm.load"(%7535) : (!llvm.ptr) -> i32
    %7542 = "llvm.getelementptr"(%7540, %7541) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7543 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %7544 = "llvm.getelementptr"(%7542, %7543) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7544) : (!llvm.ptr) -> ()
  }) {"func_name" = "Math_B__Self_sqrt_xPtrf64", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1271(%7545 : !llvm.ptr, %7546 : !llvm.struct<(!llvm.ptr, i64)>):
    %7547 = "mini.wrap"(%7546) : (!llvm.struct<(!llvm.ptr, i64)>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
    %7548 = "mini.narrow"(%7547) {"from_typ" = !llvm.struct<(!llvm.ptr, i64)>, "to_typ" = f64, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> !mini.ptr<f64>
    %7549 = "mini.literal"() {"value" = 0.000000e+00 : f64, "typ" = f64} : () -> !mini.ptr<f64>
    %7550 = "mini.unwrap"(%7548) : (!mini.ptr<f64>) -> f64
    %7551 = "mini.unwrap"(%7549) : (!mini.ptr<f64>) -> f64
    %7552 = "mini.comparison"(%7550, %7551) {"op" = "GE"} : (f64, f64) -> i1
    %7553 = "mini.wrap"(%7552) : (i1) -> !mini.ptr<f64>
    %7554 = "mini.unwrap"(%7553) : (!mini.ptr<f64>) -> i1
    "mini.if"(%7554) ({
      %7555 = "mini.unionize"(%7548) {"from_typ" = f64, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<f64>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
      "mini.return"(%7555) : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> ()
    }) : (i1) -> ()
    %7556 = "mini.literal"() {"value" = 0.000000e+00 : f64, "typ" = f64} : () -> !mini.ptr<f64>
    %7557 = "mini.literal"() {"value" = 1.000000e+00 : f64, "typ" = f64} : () -> !mini.ptr<f64>
    %7558 = "mini.unwrap"(%7556) : (!mini.ptr<f64>) -> f64
    %7559 = "mini.unwrap"(%7557) : (!mini.ptr<f64>) -> f64
    %7560 = "mini.arithmetic"(%7558, %7559) {"op" = "SUB"} : (f64, f64) -> f64
    %7561 = "mini.wrap"(%7560) : (f64) -> !mini.ptr<f64>
    %7562 = "mini.unwrap"(%7561) : (!mini.ptr<f64>) -> f64
    %7563 = "mini.unwrap"(%7548) : (!mini.ptr<f64>) -> f64
    %7564 = "mini.arithmetic"(%7562, %7563) {"op" = "MUL"} : (f64, f64) -> f64
    %7565 = "mini.wrap"(%7564) : (f64) -> !mini.ptr<f64>
    %7566 = "mini.unionize"(%7565) {"from_typ" = f64, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<f64>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
    "mini.return"(%7566) : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> ()
  }) {"func_name" = "Math__Self_abs_xPtrf64", "result_type" = !llvm.struct<(!llvm.ptr, i64)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1272(%7567 : !llvm.ptr, %7568 : !llvm.struct<(!llvm.ptr, i64)>):
    %7569 = "mini.wrap"(%7568) : (!llvm.struct<(!llvm.ptr, i64)>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
    %7570 = "mini.narrow"(%7569) {"from_typ" = !llvm.struct<(!llvm.ptr, i64)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> !mini.ptr<i32>
    %7571 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7572 = "mini.unwrap"(%7570) : (!mini.ptr<i32>) -> i32
    %7573 = "mini.unwrap"(%7571) : (!mini.ptr<i32>) -> i32
    %7574 = "mini.comparison"(%7572, %7573) {"op" = "GE"} : (i32, i32) -> i1
    %7575 = "mini.wrap"(%7574) : (i1) -> !mini.ptr<i32>
    %7576 = "mini.unwrap"(%7575) : (!mini.ptr<i32>) -> i1
    "mini.if"(%7576) ({
      %7577 = "mini.unionize"(%7570) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
      "mini.return"(%7577) : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> ()
    }) : (i1) -> ()
    %7578 = "mini.literal"() {"value" = -1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7579 = "mini.unwrap"(%7578) : (!mini.ptr<i32>) -> i32
    %7580 = "mini.unwrap"(%7570) : (!mini.ptr<i32>) -> i32
    %7581 = "mini.arithmetic"(%7579, %7580) {"op" = "MUL"} : (i32, i32) -> i32
    %7582 = "mini.wrap"(%7581) : (i32) -> !mini.ptr<i32>
    %7583 = "mini.unionize"(%7582) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
    "mini.return"(%7583) : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> ()
  }) {"func_name" = "Math__Self_abs_xPtri32", "result_type" = !llvm.struct<(!llvm.ptr, i64)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1273(%7584 : !llvm.ptr):
    %7585 = "mini.invariant"(%7584) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7586 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1274] : () -> ()
  ^bb1275:
    %7587 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    "llvm.store"(%7587, %7586) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1276] : () -> ()
  ^bb1277:
    %7588 = "llvm.mlir.constant"() <{"value" = 8 : i32}> : () -> i32
    "llvm.store"(%7588, %7586) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1276] : () -> ()
  ^bb1274:
    %7589 = "llvm.getelementptr"(%7584) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7590 = "mini.checkflag"(%7589) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7591 = "llvm.load"(%7590) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7591) [^bb1275, ^bb1278] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1278:
    %7592 = "llvm.getelementptr"(%7584) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7593 = "mini.checkflag"(%7592) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7594 = "llvm.load"(%7593) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7594) [^bb1277, ^bb1277] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1276:
    %7595 = "mini.addr_of"() {"global_name" = @Math} : () -> !llvm.ptr
    %7596 = "llvm.load"(%7586) : (!llvm.ptr) -> i32
    %7597 = "llvm.getelementptr"(%7595, %7596) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7598 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %7599 = "llvm.getelementptr"(%7597, %7598) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7599) : (!llvm.ptr) -> ()
  }) {"func_name" = "Math_B__Self_abs_xPtrf64__Self_abs_xPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1279(%7600 : !llvm.ptr, %7601 : !llvm.struct<(!llvm.ptr, i64)>, %7602 : !llvm.struct<(!llvm.ptr, i64)>):
    %7603 = "mini.wrap"(%7601) : (!llvm.struct<(!llvm.ptr, i64)>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
    %7604 = "mini.narrow"(%7603) {"from_typ" = !llvm.struct<(!llvm.ptr, i64)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> !mini.ptr<i32>
    %7605 = "mini.wrap"(%7602) : (!llvm.struct<(!llvm.ptr, i64)>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
    %7606 = "mini.narrow"(%7605) {"from_typ" = !llvm.struct<(!llvm.ptr, i64)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> !mini.ptr<i32>
    %7607 = "mini.unwrap"(%7604) : (!mini.ptr<i32>) -> i32
    %7608 = "mini.unwrap"(%7606) : (!mini.ptr<i32>) -> i32
    %7609 = "mini.comparison"(%7607, %7608) {"op" = "GT"} : (i32, i32) -> i1
    %7610 = "mini.wrap"(%7609) : (i1) -> !mini.ptr<i32>
    %7611 = "mini.unwrap"(%7610) : (!mini.ptr<i32>) -> i1
    "mini.if"(%7611) ({
      %7612 = "mini.unionize"(%7604) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
      "mini.return"(%7612) : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> ()
    }) : (i1) -> ()
    %7613 = "mini.unionize"(%7606) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
    "mini.return"(%7613) : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> ()
  }) {"func_name" = "Math__Self_max_aPtri32_bPtri32", "result_type" = !llvm.struct<(!llvm.ptr, i64)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1280(%7614 : !llvm.ptr, %7615 : !llvm.struct<(!llvm.ptr, i64)>, %7616 : !llvm.struct<(!llvm.ptr, i64)>):
    %7617 = "mini.wrap"(%7615) : (!llvm.struct<(!llvm.ptr, i64)>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
    %7618 = "mini.narrow"(%7617) {"from_typ" = !llvm.struct<(!llvm.ptr, i64)>, "to_typ" = f64, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> !mini.ptr<f64>
    %7619 = "mini.wrap"(%7616) : (!llvm.struct<(!llvm.ptr, i64)>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
    %7620 = "mini.narrow"(%7619) {"from_typ" = !llvm.struct<(!llvm.ptr, i64)>, "to_typ" = f64, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> !mini.ptr<f64>
    %7621 = "mini.unwrap"(%7618) : (!mini.ptr<f64>) -> f64
    %7622 = "mini.unwrap"(%7620) : (!mini.ptr<f64>) -> f64
    %7623 = "mini.comparison"(%7621, %7622) {"op" = "GT"} : (f64, f64) -> i1
    %7624 = "mini.wrap"(%7623) : (i1) -> !mini.ptr<f64>
    %7625 = "mini.unwrap"(%7624) : (!mini.ptr<f64>) -> i1
    "mini.if"(%7625) ({
      %7626 = "mini.unionize"(%7618) {"from_typ" = f64, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<f64>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
      "mini.return"(%7626) : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> ()
    }) : (i1) -> ()
    %7627 = "mini.unionize"(%7620) {"from_typ" = f64, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<f64>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
    "mini.return"(%7627) : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> ()
  }) {"func_name" = "Math__Self_max_aPtrf64_bPtrf64", "result_type" = !llvm.struct<(!llvm.ptr, i64)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1281(%7628 : !llvm.ptr):
    %7629 = "mini.invariant"(%7628) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7630 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1282] : () -> ()
  ^bb1283:
    %7631 = "llvm.mlir.constant"() <{"value" = 11 : i32}> : () -> i32
    "llvm.store"(%7631, %7630) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1284] : () -> ()
  ^bb1285:
    %7632 = "llvm.getelementptr"(%7628) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7633 = "mini.checkflag"(%7632) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7634 = "llvm.load"(%7633) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7634) [^bb1283, ^bb1283] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1286:
    %7635 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    "llvm.store"(%7635, %7630) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1284] : () -> ()
  ^bb1287:
    %7636 = "llvm.getelementptr"(%7628) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7637 = "mini.checkflag"(%7636) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7638 = "llvm.load"(%7637) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7638) [^bb1286, ^bb1286] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1282:
    %7639 = "llvm.getelementptr"(%7628) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7640 = "mini.checkflag"(%7639) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7641 = "llvm.load"(%7640) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7641) [^bb1285, ^bb1288] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1288:
    %7642 = "llvm.getelementptr"(%7628) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7643 = "mini.checkflag"(%7642) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7644 = "llvm.load"(%7643) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7644) [^bb1287, ^bb1287] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1284:
    %7645 = "mini.addr_of"() {"global_name" = @Math} : () -> !llvm.ptr
    %7646 = "llvm.load"(%7630) : (!llvm.ptr) -> i32
    %7647 = "llvm.getelementptr"(%7645, %7646) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7648 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %7649 = "llvm.getelementptr"(%7647, %7648) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7649) : (!llvm.ptr) -> ()
  }) {"func_name" = "Math_B__Self_max_aPtri32_bPtri32__Self_max_aPtrf64_bPtrf64", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1289(%7650 : !llvm.ptr, %7651 : !llvm.struct<(!llvm.ptr, i64)>, %7652 : !llvm.struct<(!llvm.ptr, i64)>):
    %7653 = "mini.wrap"(%7651) : (!llvm.struct<(!llvm.ptr, i64)>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
    %7654 = "mini.narrow"(%7653) {"from_typ" = !llvm.struct<(!llvm.ptr, i64)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> !mini.ptr<i32>
    %7655 = "mini.wrap"(%7652) : (!llvm.struct<(!llvm.ptr, i64)>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
    %7656 = "mini.narrow"(%7655) {"from_typ" = !llvm.struct<(!llvm.ptr, i64)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> !mini.ptr<i32>
    %7657 = "mini.unwrap"(%7654) : (!mini.ptr<i32>) -> i32
    %7658 = "mini.unwrap"(%7656) : (!mini.ptr<i32>) -> i32
    %7659 = "mini.comparison"(%7657, %7658) {"op" = "LT"} : (i32, i32) -> i1
    %7660 = "mini.wrap"(%7659) : (i1) -> !mini.ptr<i32>
    %7661 = "mini.unwrap"(%7660) : (!mini.ptr<i32>) -> i1
    "mini.if"(%7661) ({
      %7662 = "mini.unionize"(%7654) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
      "mini.return"(%7662) : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> ()
    }) : (i1) -> ()
    %7663 = "mini.unionize"(%7656) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
    "mini.return"(%7663) : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> ()
  }) {"func_name" = "Math__Self_min_aPtri32_bPtri32", "result_type" = !llvm.struct<(!llvm.ptr, i64)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1290(%7664 : !llvm.ptr, %7665 : !llvm.struct<(!llvm.ptr, i64)>, %7666 : !llvm.struct<(!llvm.ptr, i64)>):
    %7667 = "mini.wrap"(%7665) : (!llvm.struct<(!llvm.ptr, i64)>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
    %7668 = "mini.narrow"(%7667) {"from_typ" = !llvm.struct<(!llvm.ptr, i64)>, "to_typ" = f64, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> !mini.ptr<f64>
    %7669 = "mini.wrap"(%7666) : (!llvm.struct<(!llvm.ptr, i64)>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
    %7670 = "mini.narrow"(%7669) {"from_typ" = !llvm.struct<(!llvm.ptr, i64)>, "to_typ" = f64, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> !mini.ptr<f64>
    %7671 = "mini.unwrap"(%7668) : (!mini.ptr<f64>) -> f64
    %7672 = "mini.unwrap"(%7670) : (!mini.ptr<f64>) -> f64
    %7673 = "mini.comparison"(%7671, %7672) {"op" = "LT"} : (f64, f64) -> i1
    %7674 = "mini.wrap"(%7673) : (i1) -> !mini.ptr<f64>
    %7675 = "mini.unwrap"(%7674) : (!mini.ptr<f64>) -> i1
    "mini.if"(%7675) ({
      %7676 = "mini.unionize"(%7668) {"from_typ" = f64, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<f64>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
      "mini.return"(%7676) : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> ()
    }) : (i1) -> ()
    %7677 = "mini.unionize"(%7670) {"from_typ" = f64, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<f64>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
    "mini.return"(%7677) : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> ()
  }) {"func_name" = "Math__Self_min_aPtrf64_bPtrf64", "result_type" = !llvm.struct<(!llvm.ptr, i64)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1291(%7678 : !llvm.ptr):
    %7679 = "mini.invariant"(%7678) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7680 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1292] : () -> ()
  ^bb1293:
    %7681 = "llvm.mlir.constant"() <{"value" = 12 : i32}> : () -> i32
    "llvm.store"(%7681, %7680) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1294] : () -> ()
  ^bb1295:
    %7682 = "llvm.getelementptr"(%7678) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7683 = "mini.checkflag"(%7682) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7684 = "llvm.load"(%7683) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7684) [^bb1293, ^bb1293] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1296:
    %7685 = "llvm.mlir.constant"() <{"value" = 13 : i32}> : () -> i32
    "llvm.store"(%7685, %7680) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1294] : () -> ()
  ^bb1297:
    %7686 = "llvm.getelementptr"(%7678) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7687 = "mini.checkflag"(%7686) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7688 = "llvm.load"(%7687) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7688) [^bb1296, ^bb1296] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1292:
    %7689 = "llvm.getelementptr"(%7678) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7690 = "mini.checkflag"(%7689) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7691 = "llvm.load"(%7690) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7691) [^bb1295, ^bb1298] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1298:
    %7692 = "llvm.getelementptr"(%7678) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7693 = "mini.checkflag"(%7692) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7694 = "llvm.load"(%7693) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7694) [^bb1297, ^bb1297] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1294:
    %7695 = "mini.addr_of"() {"global_name" = @Math} : () -> !llvm.ptr
    %7696 = "llvm.load"(%7680) : (!llvm.ptr) -> i32
    %7697 = "llvm.getelementptr"(%7695, %7696) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7698 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %7699 = "llvm.getelementptr"(%7697, %7698) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7699) : (!llvm.ptr) -> ()
  }) {"func_name" = "Math_B__Self_min_aPtri32_bPtri32__Self_min_aPtrf64_bPtrf64", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1299(%7700 : !llvm.ptr, %7701 : f64):
    %7702 = "mini.wrap"(%7701) : (f64) -> !mini.ptr<f64>
    %7703 = builtin.unrealized_conversion_cast %7702 : !mini.ptr<f64> to !mini.ptr<f64>
    %7704 = "mini.unwrap"(%7703) : (!mini.ptr<f64>) -> f64
    %7705 = "mini.intrinsic"(%7704) {"call_name" = "llvm.round.f64", "num_args" = 1 : i32} : (f64) -> f64
    %7706 = "mini.wrap"(%7705) : (f64) -> !mini.ptr<f64>
    %7707 = builtin.unrealized_conversion_cast %7706 : !mini.ptr<f64> to !mini.ptr<f64>
    "mini.return"(%7707) : (!mini.ptr<f64>) -> ()
  }) {"func_name" = "Math__Self_round_xPtrf64", "result_type" = f64, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1300(%7708 : !llvm.ptr):
    %7709 = "mini.invariant"(%7708) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7710 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1301] : () -> ()
  ^bb1302:
    %7711 = "llvm.mlir.constant"() <{"value" = 14 : i32}> : () -> i32
    "llvm.store"(%7711, %7710) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1303] : () -> ()
  ^bb1301:
    %7712 = "llvm.getelementptr"(%7708) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7713 = "mini.checkflag"(%7712) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7714 = "llvm.load"(%7713) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7714) [^bb1302, ^bb1302] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1303:
    %7715 = "mini.addr_of"() {"global_name" = @Math} : () -> !llvm.ptr
    %7716 = "llvm.load"(%7710) : (!llvm.ptr) -> i32
    %7717 = "llvm.getelementptr"(%7715, %7716) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7718 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %7719 = "llvm.getelementptr"(%7717, %7718) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7719) : (!llvm.ptr) -> ()
  }) {"func_name" = "Math_B__Self_round_xPtrf64", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1304(%7720 : !llvm.ptr, %7721 : f64):
    %7722 = "mini.wrap"(%7721) : (f64) -> !mini.ptr<f64>
    %7723 = builtin.unrealized_conversion_cast %7722 : !mini.ptr<f64> to !mini.ptr<f64>
    %7724 = "mini.unwrap"(%7723) : (!mini.ptr<f64>) -> f64
    %7725 = "mini.intrinsic"(%7724) {"call_name" = "llvm.floor.f64", "num_args" = 1 : i32} : (f64) -> f64
    %7726 = "mini.wrap"(%7725) : (f64) -> !mini.ptr<f64>
    %7727 = builtin.unrealized_conversion_cast %7726 : !mini.ptr<f64> to !mini.ptr<f64>
    "mini.return"(%7727) : (!mini.ptr<f64>) -> ()
  }) {"func_name" = "Math__Self_floor_xPtrf64", "result_type" = f64, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1305(%7728 : !llvm.ptr):
    %7729 = "mini.invariant"(%7728) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7730 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1306] : () -> ()
  ^bb1307:
    %7731 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
    "llvm.store"(%7731, %7730) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1308] : () -> ()
  ^bb1306:
    %7732 = "llvm.getelementptr"(%7728) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7733 = "mini.checkflag"(%7732) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7734 = "llvm.load"(%7733) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7734) [^bb1307, ^bb1307] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1308:
    %7735 = "mini.addr_of"() {"global_name" = @Math} : () -> !llvm.ptr
    %7736 = "llvm.load"(%7730) : (!llvm.ptr) -> i32
    %7737 = "llvm.getelementptr"(%7735, %7736) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7738 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %7739 = "llvm.getelementptr"(%7737, %7738) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7739) : (!llvm.ptr) -> ()
  }) {"func_name" = "Math_B__Self_floor_xPtrf64", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1309(%7740 : !llvm.ptr, %7741 : f64):
    %7742 = "mini.wrap"(%7741) : (f64) -> !mini.ptr<f64>
    %7743 = builtin.unrealized_conversion_cast %7742 : !mini.ptr<f64> to !mini.ptr<f64>
    %7744 = "mini.unwrap"(%7743) : (!mini.ptr<f64>) -> f64
    %7745 = "mini.intrinsic"(%7744) {"call_name" = "llvm.ceil.f64", "num_args" = 1 : i32} : (f64) -> f64
    %7746 = "mini.wrap"(%7745) : (f64) -> !mini.ptr<f64>
    %7747 = builtin.unrealized_conversion_cast %7746 : !mini.ptr<f64> to !mini.ptr<f64>
    "mini.return"(%7747) : (!mini.ptr<f64>) -> ()
  }) {"func_name" = "Math__Self_ceiling_xPtrf64", "result_type" = f64, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1310(%7748 : !llvm.ptr):
    %7749 = "mini.invariant"(%7748) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7750 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1311] : () -> ()
  ^bb1312:
    %7751 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
    "llvm.store"(%7751, %7750) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1313] : () -> ()
  ^bb1311:
    %7752 = "llvm.getelementptr"(%7748) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7753 = "mini.checkflag"(%7752) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7754 = "llvm.load"(%7753) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7754) [^bb1312, ^bb1312] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1313:
    %7755 = "mini.addr_of"() {"global_name" = @Math} : () -> !llvm.ptr
    %7756 = "llvm.load"(%7750) : (!llvm.ptr) -> i32
    %7757 = "llvm.getelementptr"(%7755, %7756) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7758 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %7759 = "llvm.getelementptr"(%7757, %7758) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7759) : (!llvm.ptr) -> ()
  }) {"func_name" = "Math_B__Self_ceiling_xPtrf64", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "llvm.func"() <{"sym_name" = "clock", "function_type" = !llvm.func<i64 ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
  }) : () -> ()
  "llvm.func"() <{"sym_name" = "getchar", "function_type" = !llvm.func<i32 ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
  }) : () -> ()
  "llvm.func"() <{"sym_name" = "fopen", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr)> (!llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
  }) : () -> ()
  "llvm.func"() <{"sym_name" = "fclose", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
  }) : () -> ()
  "llvm.func"() <{"sym_name" = "fgetc", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
  }) : () -> ()
  "llvm.func"() <{"sym_name" = "fprintf", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
  }) : () -> ()
  "llvm.func"() <{"sym_name" = "system", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
  }) : () -> ()
  "mini.func"() ({
  ^bb1314(%7760 : !llvm.struct<(!llvm.ptr, i64)>):
    %7761 = "mini.wrap"(%7760) : (!llvm.struct<(!llvm.ptr, i64)>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
    %7762 = builtin.unrealized_conversion_cast %7761 : !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]> to !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
    %7763 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7764 = "mini.create_buffer"(%7763) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %7765 = builtin.unrealized_conversion_cast %7764 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %7766 = "mini.refer"(%7765) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %7767 = "mini.literal"() {"typ" = !llvm.array<6 x i8>, "value" = "number"} : () -> !llvm.ptr
    %7768 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%7766, %7768, %7767) {"typ" = !llvm.array<6 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %7769 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7770 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7771 = "mini.unwrap"(%7766) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %7772 = "mini.unwrap"(%7769) : (!mini.ptr<i32>) -> i32
    %7773 = "mini.unwrap"(%7770) : (!mini.ptr<i32>) -> i32
    %7774 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %7775 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7776 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7777 = builtin.unrealized_conversion_cast %7766 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %7778 = "mini.unwrap"(%7777) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %7779 = builtin.unrealized_conversion_cast %7775 : !mini.ptr<i32> to !mini.ptr<i32>
    %7780 = "mini.unwrap"(%7779) : (!mini.ptr<i32>) -> i32
    %7781 = builtin.unrealized_conversion_cast %7776 : !mini.ptr<i32> to !mini.ptr<i32>
    %7782 = "mini.unwrap"(%7781) : (!mini.ptr<i32>) -> i32
    %7783 = "mini.unwrap"(%7774) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7784 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %7785 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %7786 = "mini.parameterizations_array"(%7784, %7785, %7785) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%7786, %7783, %7778, %7780, %7782) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %7787 = "mini.print"(%7774) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"String">) -> i32
  }) {"func_name" = "number_taker", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
    %7788 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7789 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7790 = "mini.unwrap"(%7788) : (!mini.ptr<i32>) -> i32
    %7791 = "mini.unwrap"(%7789) : (!mini.ptr<i32>) -> i32
    %7792 = "mini.comparison"(%7790, %7791) {"op" = "GT"} : (i32, i32) -> i1
    %7793 = "mini.wrap"(%7792) : (i1) -> !mini.ptr<i32>
    %7794 = "mini.unwrap"(%7793) : (!mini.ptr<i32>) -> i1
    "mini.if"(%7794) ({
      %7795 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %7796 = builtin.unrealized_conversion_cast %7795 : !mini.ptr<i32> to !mini.ptr<i32>
      "mini.return"(%7796) : (!mini.ptr<i32>) -> ()
    }, {
      %7797 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %7798 = builtin.unrealized_conversion_cast %7797 : !mini.ptr<i32> to !mini.ptr<i32>
      "mini.return"(%7798) : (!mini.ptr<i32>) -> ()
    }) : (i1) -> ()
  }) {"func_name" = "early_return_in_else", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_Integer", "types" = [i32]} : () -> ()
  "mini.getter_def"() {"meth_name" = "Integer_getter_value", "types" = [i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Integer_setter_value", "types" = [i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Integer_field_value", "getter_name" = "Integer_getter_value", "setter_name" = "Integer_setter_value"} : () -> ()
  "mini.func"() ({
  ^bb1315(%7799 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7800 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7801 : !llvm.ptr, %7802 : i32):
    %7803 = "mini.wrap"(%7799) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Integer">
    %7804 = "mini.to_fat_ptr"(%7803) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Integer", "to_typ_name" = "Integer"} : (!mini.fatptr<"Integer">) -> !mini.fatptr<"Integer">
    %7805 = "mini.wrap"(%7802) : (i32) -> !mini.ptr<i32>
    %7806 = builtin.unrealized_conversion_cast %7805 : !mini.ptr<i32> to !mini.ptr<i32>
    %7807 = builtin.unrealized_conversion_cast %7806 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%7804, %7807) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Integer">, !mini.ptr<i32>) -> ()
  }) {"func_name" = "Integer_init_valuePtri32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1316(%7808 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7809 : !llvm.ptr):
    %7810 = "mini.invariant"(%7809) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7811 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1317] : () -> ()
  ^bb1318:
    %7812 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    "llvm.store"(%7812, %7811) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1319] : () -> ()
  ^bb1317:
    %7813 = "llvm.getelementptr"(%7809) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7814 = "mini.checkflag"(%7813) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7815 = "llvm.load"(%7814) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7815) [^bb1318, ^bb1318] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1319:
    %7816 = "llvm.extractvalue"(%7808) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7817 = "llvm.load"(%7811) : (!llvm.ptr) -> i32
    %7818 = "llvm.getelementptr"(%7816, %7817) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7819 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %7820 = "llvm.getelementptr"(%7818, %7819) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7820) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer_B_init_valuePtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1320(%7821 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7822 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7823 : !llvm.ptr, %7824 : i32):
    %7825 = "mini.wrap"(%7821) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Integer">
    %7826 = "mini.to_fat_ptr"(%7825) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Integer", "to_typ_name" = "Integer"} : (!mini.fatptr<"Integer">) -> !mini.fatptr<"Integer">
    %7827 = "mini.wrap"(%7824) : (i32) -> !mini.ptr<i32>
    %7828 = builtin.unrealized_conversion_cast %7827 : !mini.ptr<i32> to !mini.ptr<i32>
    %7829 = "mini.get_field"(%7826) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Integer">) -> !mini.ptr<i32>
    %7830 = "mini.unwrap"(%7829) : (!mini.ptr<i32>) -> i32
    %7831 = "mini.unwrap"(%7828) : (!mini.ptr<i32>) -> i32
    %7832 = "mini.arithmetic"(%7830, %7831) {"op" = "ADD"} : (i32, i32) -> i32
    %7833 = "mini.wrap"(%7832) : (i32) -> !mini.ptr<i32>
    %7834 = "mini.unwrap"(%7833) : (!mini.ptr<i32>) -> i32
    %7835 = "mini.new"() {"typ" = !llvm.struct<(i32)>, "class_name" = "Integer", "num_data_fields" = 1 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Integer">
    %7836 = "mini.get_field"(%7826) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Integer">) -> !mini.ptr<i32>
    %7837 = "mini.unwrap"(%7836) : (!mini.ptr<i32>) -> i32
    %7838 = "mini.unwrap"(%7828) : (!mini.ptr<i32>) -> i32
    %7839 = "mini.arithmetic"(%7837, %7838) {"op" = "ADD"} : (i32, i32) -> i32
    %7840 = "mini.wrap"(%7839) : (i32) -> !mini.ptr<i32>
    %7841 = builtin.unrealized_conversion_cast %7840 : !mini.ptr<i32> to !mini.ptr<i32>
    %7842 = "mini.unwrap"(%7841) : (!mini.ptr<i32>) -> i32
    %7843 = "mini.unwrap"(%7835) : (!mini.fatptr<"Integer">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7844 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %7845 = "mini.parameterizations_array"(%7844) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%7845, %7843, %7842) {"offset" = 1 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
    %7846 = "mini.to_fat_ptr"(%7835) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Integer", "to_typ_name" = "Integer"} : (!mini.fatptr<"Integer">) -> !mini.fatptr<"Integer">
    "mini.return"(%7846) : (!mini.fatptr<"Integer">) -> ()
  }) {"func_name" = "Integer__ADD_otherPtri32", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1321(%7847 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7848 : !llvm.ptr):
    %7849 = "mini.invariant"(%7848) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7850 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1322] : () -> ()
  ^bb1323:
    %7851 = "llvm.mlir.constant"() <{"value" = 8 : i32}> : () -> i32
    "llvm.store"(%7851, %7850) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1324] : () -> ()
  ^bb1322:
    %7852 = "llvm.getelementptr"(%7848) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7853 = "mini.checkflag"(%7852) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7854 = "llvm.load"(%7853) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7854) [^bb1323, ^bb1323] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1324:
    %7855 = "llvm.extractvalue"(%7847) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7856 = "llvm.load"(%7850) : (!llvm.ptr) -> i32
    %7857 = "llvm.getelementptr"(%7855, %7856) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7858 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %7859 = "llvm.getelementptr"(%7857, %7858) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7859) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer_B__ADD_otherPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1325(%7860 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7861 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7862 : !llvm.ptr, %7863 : i32):
    %7864 = "mini.wrap"(%7860) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Integer">
    %7865 = "mini.to_fat_ptr"(%7864) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Integer", "to_typ_name" = "Integer"} : (!mini.fatptr<"Integer">) -> !mini.fatptr<"Integer">
    %7866 = "mini.wrap"(%7863) : (i32) -> !mini.ptr<i32>
    %7867 = builtin.unrealized_conversion_cast %7866 : !mini.ptr<i32> to !mini.ptr<i32>
    %7868 = "mini.get_field"(%7865) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Integer">) -> !mini.ptr<i32>
    %7869 = "mini.unwrap"(%7868) : (!mini.ptr<i32>) -> i32
    %7870 = "mini.unwrap"(%7867) : (!mini.ptr<i32>) -> i32
    %7871 = "mini.arithmetic"(%7869, %7870) {"op" = "SUB"} : (i32, i32) -> i32
    %7872 = "mini.wrap"(%7871) : (i32) -> !mini.ptr<i32>
    %7873 = "mini.unwrap"(%7872) : (!mini.ptr<i32>) -> i32
    %7874 = "mini.new"() {"typ" = !llvm.struct<(i32)>, "class_name" = "Integer", "num_data_fields" = 1 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Integer">
    %7875 = "mini.get_field"(%7865) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Integer">) -> !mini.ptr<i32>
    %7876 = "mini.unwrap"(%7875) : (!mini.ptr<i32>) -> i32
    %7877 = "mini.unwrap"(%7867) : (!mini.ptr<i32>) -> i32
    %7878 = "mini.arithmetic"(%7876, %7877) {"op" = "SUB"} : (i32, i32) -> i32
    %7879 = "mini.wrap"(%7878) : (i32) -> !mini.ptr<i32>
    %7880 = builtin.unrealized_conversion_cast %7879 : !mini.ptr<i32> to !mini.ptr<i32>
    %7881 = "mini.unwrap"(%7880) : (!mini.ptr<i32>) -> i32
    %7882 = "mini.unwrap"(%7874) : (!mini.fatptr<"Integer">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7883 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %7884 = "mini.parameterizations_array"(%7883) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%7884, %7882, %7881) {"offset" = 1 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
    %7885 = "mini.to_fat_ptr"(%7874) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Integer", "to_typ_name" = "Integer"} : (!mini.fatptr<"Integer">) -> !mini.fatptr<"Integer">
    "mini.return"(%7885) : (!mini.fatptr<"Integer">) -> ()
  }) {"func_name" = "Integer__SUB_otherPtri32", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1326(%7886 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7887 : !llvm.ptr):
    %7888 = "mini.invariant"(%7887) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7889 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1327] : () -> ()
  ^bb1328:
    %7890 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    "llvm.store"(%7890, %7889) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1329] : () -> ()
  ^bb1327:
    %7891 = "llvm.getelementptr"(%7887) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7892 = "mini.checkflag"(%7891) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7893 = "llvm.load"(%7892) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7893) [^bb1328, ^bb1328] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1329:
    %7894 = "llvm.extractvalue"(%7886) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7895 = "llvm.load"(%7889) : (!llvm.ptr) -> i32
    %7896 = "llvm.getelementptr"(%7894, %7895) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7897 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %7898 = "llvm.getelementptr"(%7896, %7897) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7898) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer_B__SUB_otherPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1330(%7899 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7900 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7901 : !llvm.ptr, %7902 : i32):
    %7903 = "mini.wrap"(%7899) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Integer">
    %7904 = "mini.to_fat_ptr"(%7903) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Integer", "to_typ_name" = "Integer"} : (!mini.fatptr<"Integer">) -> !mini.fatptr<"Integer">
    %7905 = "mini.wrap"(%7902) : (i32) -> !mini.ptr<i32>
    %7906 = builtin.unrealized_conversion_cast %7905 : !mini.ptr<i32> to !mini.ptr<i32>
    %7907 = "mini.get_field"(%7904) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Integer">) -> !mini.ptr<i32>
    %7908 = "mini.unwrap"(%7907) : (!mini.ptr<i32>) -> i32
    %7909 = "mini.unwrap"(%7906) : (!mini.ptr<i32>) -> i32
    %7910 = "mini.arithmetic"(%7908, %7909) {"op" = "MUL"} : (i32, i32) -> i32
    %7911 = "mini.wrap"(%7910) : (i32) -> !mini.ptr<i32>
    %7912 = "mini.unwrap"(%7911) : (!mini.ptr<i32>) -> i32
    %7913 = "mini.new"() {"typ" = !llvm.struct<(i32)>, "class_name" = "Integer", "num_data_fields" = 1 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Integer">
    %7914 = "mini.get_field"(%7904) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Integer">) -> !mini.ptr<i32>
    %7915 = "mini.unwrap"(%7914) : (!mini.ptr<i32>) -> i32
    %7916 = "mini.unwrap"(%7906) : (!mini.ptr<i32>) -> i32
    %7917 = "mini.arithmetic"(%7915, %7916) {"op" = "MUL"} : (i32, i32) -> i32
    %7918 = "mini.wrap"(%7917) : (i32) -> !mini.ptr<i32>
    %7919 = builtin.unrealized_conversion_cast %7918 : !mini.ptr<i32> to !mini.ptr<i32>
    %7920 = "mini.unwrap"(%7919) : (!mini.ptr<i32>) -> i32
    %7921 = "mini.unwrap"(%7913) : (!mini.fatptr<"Integer">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7922 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %7923 = "mini.parameterizations_array"(%7922) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%7923, %7921, %7920) {"offset" = 1 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
    %7924 = "mini.to_fat_ptr"(%7913) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Integer", "to_typ_name" = "Integer"} : (!mini.fatptr<"Integer">) -> !mini.fatptr<"Integer">
    "mini.return"(%7924) : (!mini.fatptr<"Integer">) -> ()
  }) {"func_name" = "Integer__MUL_otherPtri32", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1331(%7925 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7926 : !llvm.ptr):
    %7927 = "mini.invariant"(%7926) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7928 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1332] : () -> ()
  ^bb1333:
    %7929 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    "llvm.store"(%7929, %7928) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1334] : () -> ()
  ^bb1332:
    %7930 = "llvm.getelementptr"(%7926) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7931 = "mini.checkflag"(%7930) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7932 = "llvm.load"(%7931) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7932) [^bb1333, ^bb1333] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1334:
    %7933 = "llvm.extractvalue"(%7925) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7934 = "llvm.load"(%7928) : (!llvm.ptr) -> i32
    %7935 = "llvm.getelementptr"(%7933, %7934) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7936 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %7937 = "llvm.getelementptr"(%7935, %7936) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7937) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer_B__MUL_otherPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1335(%7938 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7939 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7940 : !llvm.ptr, %7941 : i32):
    %7942 = "mini.wrap"(%7938) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Integer">
    %7943 = "mini.to_fat_ptr"(%7942) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Integer", "to_typ_name" = "Integer"} : (!mini.fatptr<"Integer">) -> !mini.fatptr<"Integer">
    %7944 = "mini.wrap"(%7941) : (i32) -> !mini.ptr<i32>
    %7945 = builtin.unrealized_conversion_cast %7944 : !mini.ptr<i32> to !mini.ptr<i32>
    %7946 = "mini.get_field"(%7943) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Integer">) -> !mini.ptr<i32>
    %7947 = "mini.unwrap"(%7946) : (!mini.ptr<i32>) -> i32
    %7948 = "mini.unwrap"(%7945) : (!mini.ptr<i32>) -> i32
    %7949 = "mini.arithmetic"(%7947, %7948) {"op" = "DIV"} : (i32, i32) -> i32
    %7950 = "mini.wrap"(%7949) : (i32) -> !mini.ptr<i32>
    %7951 = "mini.unwrap"(%7950) : (!mini.ptr<i32>) -> i32
    %7952 = "mini.new"() {"typ" = !llvm.struct<(i32)>, "class_name" = "Integer", "num_data_fields" = 1 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Integer">
    %7953 = "mini.get_field"(%7943) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Integer">) -> !mini.ptr<i32>
    %7954 = "mini.unwrap"(%7953) : (!mini.ptr<i32>) -> i32
    %7955 = "mini.unwrap"(%7945) : (!mini.ptr<i32>) -> i32
    %7956 = "mini.arithmetic"(%7954, %7955) {"op" = "DIV"} : (i32, i32) -> i32
    %7957 = "mini.wrap"(%7956) : (i32) -> !mini.ptr<i32>
    %7958 = builtin.unrealized_conversion_cast %7957 : !mini.ptr<i32> to !mini.ptr<i32>
    %7959 = "mini.unwrap"(%7958) : (!mini.ptr<i32>) -> i32
    %7960 = "mini.unwrap"(%7952) : (!mini.fatptr<"Integer">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7961 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %7962 = "mini.parameterizations_array"(%7961) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%7962, %7960, %7959) {"offset" = 1 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
    %7963 = "mini.to_fat_ptr"(%7952) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Integer", "to_typ_name" = "Integer"} : (!mini.fatptr<"Integer">) -> !mini.fatptr<"Integer">
    "mini.return"(%7963) : (!mini.fatptr<"Integer">) -> ()
  }) {"func_name" = "Integer__DIV_otherPtri32", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1336(%7964 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7965 : !llvm.ptr):
    %7966 = "mini.invariant"(%7965) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7967 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1337] : () -> ()
  ^bb1338:
    %7968 = "llvm.mlir.constant"() <{"value" = 11 : i32}> : () -> i32
    "llvm.store"(%7968, %7967) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1339] : () -> ()
  ^bb1337:
    %7969 = "llvm.getelementptr"(%7965) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7970 = "mini.checkflag"(%7969) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7971 = "llvm.load"(%7970) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7971) [^bb1338, ^bb1338] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1339:
    %7972 = "llvm.extractvalue"(%7964) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7973 = "llvm.load"(%7967) : (!llvm.ptr) -> i32
    %7974 = "llvm.getelementptr"(%7972, %7973) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7975 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %7976 = "llvm.getelementptr"(%7974, %7975) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7976) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer_B__DIV_otherPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1340(%7977 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7978 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7979 : !llvm.ptr):
    %7980 = "mini.wrap"(%7977) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Integer">
    %7981 = "mini.to_fat_ptr"(%7980) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Integer", "to_typ_name" = "Integer"} : (!mini.fatptr<"Integer">) -> !mini.fatptr<"Integer">
    %7982 = "mini.get_field"(%7981) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Integer">) -> !mini.ptr<i32>
    %7983 = "mini.unionize"(%7982) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %7984 = "mini.unwrap"(%7983) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %7985 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %7986 = "mini.parameterizations_array"(%7985) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%7986, %7984) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
  }) {"func_name" = "Integer_print_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1341(%7987 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7988 : !llvm.ptr):
    %7989 = "mini.invariant"(%7988) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7990 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1342] : () -> ()
  ^bb1342:
    %7991 = "llvm.mlir.constant"() <{"value" = 12 : i32}> : () -> i32
    "llvm.store"(%7991, %7990) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1343] : () -> ()
  ^bb1343:
    %7992 = "llvm.extractvalue"(%7987) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7993 = "llvm.load"(%7990) : (!llvm.ptr) -> i32
    %7994 = "llvm.getelementptr"(%7992, %7993) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7995 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %7996 = "llvm.getelementptr"(%7994, %7995) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7996) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer_B_print_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_BigBoy", "types" = []} : () -> ()
  "mini.func"() ({
  ^bb1344(%7997 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7998 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7999 : !llvm.ptr):
    %8000 = "mini.wrap"(%7997) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"BigBoy">
    %8001 = "mini.to_fat_ptr"(%8000) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "BigBoy", "to_typ_name" = "BigBoy"} : (!mini.fatptr<"BigBoy">) -> !mini.fatptr<"BigBoy">
    %8002 = "mini.literal"() {"value" = 11 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8003 = "mini.create_buffer"(%8002) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %8004 = builtin.unrealized_conversion_cast %8003 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %8005 = "mini.refer"(%8004) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %8006 = "mini.literal"() {"typ" = !llvm.array<10 x i8>, "value" = "Here I am!"} : () -> !llvm.ptr
    %8007 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%8005, %8007, %8006) {"typ" = !llvm.array<10 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %8008 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8009 = "mini.literal"() {"value" = 11 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8010 = "mini.unwrap"(%8005) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %8011 = "mini.unwrap"(%8008) : (!mini.ptr<i32>) -> i32
    %8012 = "mini.unwrap"(%8009) : (!mini.ptr<i32>) -> i32
    %8013 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %8014 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8015 = "mini.literal"() {"value" = 11 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8016 = builtin.unrealized_conversion_cast %8005 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %8017 = "mini.unwrap"(%8016) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %8018 = builtin.unrealized_conversion_cast %8014 : !mini.ptr<i32> to !mini.ptr<i32>
    %8019 = "mini.unwrap"(%8018) : (!mini.ptr<i32>) -> i32
    %8020 = builtin.unrealized_conversion_cast %8015 : !mini.ptr<i32> to !mini.ptr<i32>
    %8021 = "mini.unwrap"(%8020) : (!mini.ptr<i32>) -> i32
    %8022 = "mini.unwrap"(%8013) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8023 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %8024 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %8025 = "mini.parameterizations_array"(%8023, %8024, %8024) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%8025, %8022, %8017, %8019, %8021) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %8026 = builtin.unrealized_conversion_cast %8013 : !mini.fatptr<"String"> to !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %8027 = "mini.unwrap"(%8026) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %8028 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %8029 = "mini.parameterizations_array"(%8028) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%8029, %8027) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
  }) {"func_name" = "BigBoy_introduce_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1345(%8030 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8031 : !llvm.ptr):
    %8032 = "mini.invariant"(%8031) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8033 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1346] : () -> ()
  ^bb1346:
    %8034 = "llvm.mlir.constant"() <{"value" = 2 : i32}> : () -> i32
    "llvm.store"(%8034, %8033) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1347] : () -> ()
  ^bb1347:
    %8035 = "llvm.extractvalue"(%8030) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8036 = "llvm.load"(%8033) : (!llvm.ptr) -> i32
    %8037 = "llvm.getelementptr"(%8035, %8036) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<6 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8038 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %8039 = "llvm.getelementptr"(%8037, %8038) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8039) : (!llvm.ptr) -> ()
  }) {"func_name" = "BigBoy_B_introduce_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1348(%8040 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8041 : !llvm.ptr):
    %8042 = "mini.invariant"(%8041) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8043 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1349] : () -> ()
  ^bb1349:
    %8044 = "llvm.mlir.constant"() <{"value" = 3 : i32}> : () -> i32
    "llvm.store"(%8044, %8043) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1350] : () -> ()
  ^bb1350:
    %8045 = "llvm.extractvalue"(%8040) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8046 = "llvm.load"(%8043) : (!llvm.ptr) -> i32
    %8047 = "llvm.getelementptr"(%8045, %8046) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<6 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8048 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %8049 = "llvm.getelementptr"(%8047, %8048) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8049) : (!llvm.ptr) -> ()
  }) {"func_name" = "BigBoy_B_repr_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_Integer2", "types" = [i32]} : () -> ()
  "mini.getter_def"() {"meth_name" = "Integer2_getter_value", "types" = [i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Integer2_setter_value", "types" = [i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Integer2_field_value", "getter_name" = "Integer2_getter_value", "setter_name" = "Integer2_setter_value"} : () -> ()
  "mini.func"() ({
  ^bb1351(%8050 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8051 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8052 : !llvm.ptr):
    %8053 = "mini.wrap"(%8050) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Integer2">
    %8054 = "mini.to_fat_ptr"(%8053) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Integer2", "to_typ_name" = "Integer2"} : (!mini.fatptr<"Integer2">) -> !mini.fatptr<"Integer2">
    %8055 = "mini.get_field"(%8054) {"offset" = 0 : i64, "vtable_bytes" = 320 : i32, "original_type" = i32} : (!mini.fatptr<"Integer2">) -> !mini.ptr<i32>
    %8056 = builtin.unrealized_conversion_cast %8055 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.return"(%8056) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "Integer2_value_", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1352(%8057 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8058 : !llvm.ptr):
    %8059 = "mini.invariant"(%8058) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8060 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1353] : () -> ()
  ^bb1353:
    %8061 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    "llvm.store"(%8061, %8060) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1354] : () -> ()
  ^bb1354:
    %8062 = "llvm.extractvalue"(%8057) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8063 = "llvm.load"(%8060) : (!llvm.ptr) -> i32
    %8064 = "llvm.getelementptr"(%8062, %8063) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<40 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8065 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %8066 = "llvm.getelementptr"(%8064, %8065) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8066) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer2_B_value_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1355(%8067 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8068 : !llvm.ptr):
    %8069 = "mini.invariant"(%8068) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8070 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1356] : () -> ()
  ^bb1357:
    %8071 = "llvm.mlir.constant"() <{"value" = 11 : i32}> : () -> i32
    "llvm.store"(%8071, %8070) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1358] : () -> ()
  ^bb1356:
    %8072 = "llvm.getelementptr"(%8068) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8073 = "mini.checkflag"(%8072) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %8074 = "llvm.load"(%8073) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%8074) [^bb1357, ^bb1357] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1358:
    %8075 = "llvm.extractvalue"(%8067) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8076 = "llvm.load"(%8070) : (!llvm.ptr) -> i32
    %8077 = "llvm.getelementptr"(%8075, %8076) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<40 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8078 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %8079 = "llvm.getelementptr"(%8077, %8078) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8079) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer2_B_init_valuePtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1359(%8080 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8081 : !llvm.ptr):
    %8082 = "mini.invariant"(%8081) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8083 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1360] : () -> ()
  ^bb1361:
    %8084 = "llvm.mlir.constant"() <{"value" = 12 : i32}> : () -> i32
    "llvm.store"(%8084, %8083) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1362] : () -> ()
  ^bb1360:
    %8085 = "llvm.getelementptr"(%8081) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8086 = "mini.checkflag"(%8085) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %8087 = "llvm.load"(%8086) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%8087) [^bb1361, ^bb1361] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1362:
    %8088 = "llvm.extractvalue"(%8080) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8089 = "llvm.load"(%8083) : (!llvm.ptr) -> i32
    %8090 = "llvm.getelementptr"(%8088, %8089) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<40 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8091 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %8092 = "llvm.getelementptr"(%8090, %8091) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8092) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer2_B__ADD_otherPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1363(%8093 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8094 : !llvm.ptr):
    %8095 = "mini.invariant"(%8094) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8096 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1364] : () -> ()
  ^bb1365:
    %8097 = "llvm.mlir.constant"() <{"value" = 13 : i32}> : () -> i32
    "llvm.store"(%8097, %8096) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1366] : () -> ()
  ^bb1364:
    %8098 = "llvm.getelementptr"(%8094) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8099 = "mini.checkflag"(%8098) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %8100 = "llvm.load"(%8099) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%8100) [^bb1365, ^bb1365] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1366:
    %8101 = "llvm.extractvalue"(%8093) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8102 = "llvm.load"(%8096) : (!llvm.ptr) -> i32
    %8103 = "llvm.getelementptr"(%8101, %8102) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<40 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8104 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %8105 = "llvm.getelementptr"(%8103, %8104) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8105) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer2_B__SUB_otherPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1367(%8106 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8107 : !llvm.ptr):
    %8108 = "mini.invariant"(%8107) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8109 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1368] : () -> ()
  ^bb1369:
    %8110 = "llvm.mlir.constant"() <{"value" = 14 : i32}> : () -> i32
    "llvm.store"(%8110, %8109) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1370] : () -> ()
  ^bb1368:
    %8111 = "llvm.getelementptr"(%8107) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8112 = "mini.checkflag"(%8111) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %8113 = "llvm.load"(%8112) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%8113) [^bb1369, ^bb1369] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1370:
    %8114 = "llvm.extractvalue"(%8106) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8115 = "llvm.load"(%8109) : (!llvm.ptr) -> i32
    %8116 = "llvm.getelementptr"(%8114, %8115) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<40 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8117 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %8118 = "llvm.getelementptr"(%8116, %8117) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8118) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer2_B__MUL_otherPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1371(%8119 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8120 : !llvm.ptr):
    %8121 = "mini.invariant"(%8120) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8122 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1372] : () -> ()
  ^bb1373:
    %8123 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
    "llvm.store"(%8123, %8122) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1374] : () -> ()
  ^bb1372:
    %8124 = "llvm.getelementptr"(%8120) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8125 = "mini.checkflag"(%8124) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %8126 = "llvm.load"(%8125) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%8126) [^bb1373, ^bb1373] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1374:
    %8127 = "llvm.extractvalue"(%8119) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8128 = "llvm.load"(%8122) : (!llvm.ptr) -> i32
    %8129 = "llvm.getelementptr"(%8127, %8128) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<40 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8130 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %8131 = "llvm.getelementptr"(%8129, %8130) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8131) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer2_B__DIV_otherPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1375(%8132 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8133 : !llvm.ptr):
    %8134 = "mini.invariant"(%8133) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8135 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1376] : () -> ()
  ^bb1376:
    %8136 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
    "llvm.store"(%8136, %8135) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1377] : () -> ()
  ^bb1377:
    %8137 = "llvm.extractvalue"(%8132) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8138 = "llvm.load"(%8135) : (!llvm.ptr) -> i32
    %8139 = "llvm.getelementptr"(%8137, %8138) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<40 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8140 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %8141 = "llvm.getelementptr"(%8139, %8140) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8141) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer2_B_print_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1378(%8142 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8143 : !llvm.ptr):
    %8144 = "mini.invariant"(%8143) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8145 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1379] : () -> ()
  ^bb1379:
    %8146 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
    "llvm.store"(%8146, %8145) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1380] : () -> ()
  ^bb1380:
    %8147 = "llvm.extractvalue"(%8142) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8148 = "llvm.load"(%8145) : (!llvm.ptr) -> i32
    %8149 = "llvm.getelementptr"(%8147, %8148) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<40 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8150 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %8151 = "llvm.getelementptr"(%8149, %8150) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8151) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer2_B_introduce_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1381(%8152 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8153 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8154 : !llvm.ptr):
    %8155 = "mini.wrap"(%8152) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Integer2">
    %8156 = "mini.to_fat_ptr"(%8155) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Integer2", "to_typ_name" = "Integer2"} : (!mini.fatptr<"Integer2">) -> !mini.fatptr<"Integer2">
    %8157 = "mini.literal"() {"value" = 9 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8158 = "mini.create_buffer"(%8157) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %8159 = builtin.unrealized_conversion_cast %8158 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %8160 = "mini.refer"(%8159) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %8161 = "mini.literal"() {"typ" = !llvm.array<8 x i8>, "value" = "Integer2"} : () -> !llvm.ptr
    %8162 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%8160, %8162, %8161) {"typ" = !llvm.array<8 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %8163 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8164 = "mini.literal"() {"value" = 9 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8165 = "mini.unwrap"(%8160) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %8166 = "mini.unwrap"(%8163) : (!mini.ptr<i32>) -> i32
    %8167 = "mini.unwrap"(%8164) : (!mini.ptr<i32>) -> i32
    %8168 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %8169 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8170 = "mini.literal"() {"value" = 9 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8171 = builtin.unrealized_conversion_cast %8160 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %8172 = "mini.unwrap"(%8171) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %8173 = builtin.unrealized_conversion_cast %8169 : !mini.ptr<i32> to !mini.ptr<i32>
    %8174 = "mini.unwrap"(%8173) : (!mini.ptr<i32>) -> i32
    %8175 = builtin.unrealized_conversion_cast %8170 : !mini.ptr<i32> to !mini.ptr<i32>
    %8176 = "mini.unwrap"(%8175) : (!mini.ptr<i32>) -> i32
    %8177 = "mini.unwrap"(%8168) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8178 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %8179 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %8180 = "mini.parameterizations_array"(%8178, %8179, %8179) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%8180, %8177, %8172, %8174, %8176) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %8181 = "mini.to_fat_ptr"(%8168) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.return"(%8181) : (!mini.fatptr<"String">) -> ()
  }) {"func_name" = "Integer2_repr_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1382(%8182 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8183 : !llvm.ptr):
    %8184 = "mini.invariant"(%8183) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8185 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1383] : () -> ()
  ^bb1383:
    %8186 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%8186, %8185) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1384] : () -> ()
  ^bb1384:
    %8187 = "llvm.extractvalue"(%8182) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8188 = "llvm.load"(%8185) : (!llvm.ptr) -> i32
    %8189 = "llvm.getelementptr"(%8187, %8188) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<40 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8190 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %8191 = "llvm.getelementptr"(%8189, %8190) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8191) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer2_B_repr_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_Animal", "types" = [i32, f64, i32]} : () -> ()
  "mini.getter_def"() {"meth_name" = "Animal_getter_age", "types" = [i32, f64, i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Animal_setter_age", "types" = [i32, f64, i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Animal_field_age", "getter_name" = "Animal_getter_age", "setter_name" = "Animal_setter_age"} : () -> ()
  "mini.getter_def"() {"meth_name" = "Animal_getter_hp", "types" = [i32, f64, i32], "offset" = 1 : i64, "original_type" = f64, "specialized_name" = "f64_typ", "parameterization" = "_parameterization_Ptrf64"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Animal_setter_hp", "types" = [i32, f64, i32], "offset" = 1 : i64, "original_type" = f64, "specialized_name" = "f64_typ", "parameterization" = "_parameterization_Ptrf64"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Animal_field_hp", "getter_name" = "Animal_getter_hp", "setter_name" = "Animal_setter_hp"} : () -> ()
  "mini.getter_def"() {"meth_name" = "Animal_getter_skill", "types" = [i32, f64, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Animal_setter_skill", "types" = [i32, f64, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Animal_field_skill", "getter_name" = "Animal_getter_skill", "setter_name" = "Animal_setter_skill"} : () -> ()
  "mini.func"() ({
  ^bb1385(%8192 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8193 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8194 : !llvm.ptr, %8195 : i32, %8196 : f64, %8197 : i32):
    %8198 = "mini.wrap"(%8192) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Animal">
    %8199 = "mini.to_fat_ptr"(%8198) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Animal", "to_typ_name" = "Animal"} : (!mini.fatptr<"Animal">) -> !mini.fatptr<"Animal">
    %8200 = "mini.wrap"(%8195) : (i32) -> !mini.ptr<i32>
    %8201 = builtin.unrealized_conversion_cast %8200 : !mini.ptr<i32> to !mini.ptr<i32>
    %8202 = builtin.unrealized_conversion_cast %8201 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%8199, %8202) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Animal">, !mini.ptr<i32>) -> ()
    %8203 = "mini.wrap"(%8196) : (f64) -> !mini.ptr<f64>
    %8204 = builtin.unrealized_conversion_cast %8203 : !mini.ptr<f64> to !mini.ptr<f64>
    %8205 = builtin.unrealized_conversion_cast %8204 : !mini.ptr<f64> to !mini.ptr<f64>
    "mini.set_field"(%8199, %8205) {"offset" = 1 : i64, "vtable_bytes" = 104 : i32, "original_type" = f64} : (!mini.fatptr<"Animal">, !mini.ptr<f64>) -> ()
    %8206 = "mini.wrap"(%8197) : (i32) -> !mini.ptr<i32>
    %8207 = builtin.unrealized_conversion_cast %8206 : !mini.ptr<i32> to !mini.ptr<i32>
    %8208 = builtin.unrealized_conversion_cast %8207 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%8199, %8208) {"offset" = 2 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Animal">, !mini.ptr<i32>) -> ()
  }) {"func_name" = "Animal_init_agePtri32_hpPtrf64_skillPtri32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1386(%8209 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8210 : !llvm.ptr):
    %8211 = "mini.invariant"(%8210) {"num_bytes" = 24 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8212 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1387] : () -> ()
  ^bb1388:
    %8213 = "llvm.mlir.constant"() <{"value" = 8 : i32}> : () -> i32
    "llvm.store"(%8213, %8212) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1389] : () -> ()
  ^bb1390:
    %8214 = "llvm.getelementptr"(%8210) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8215 = "mini.checkflag"(%8214) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %8216 = "llvm.load"(%8215) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%8216) [^bb1388, ^bb1388] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1391:
    %8217 = "llvm.getelementptr"(%8210) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8218 = "mini.checkflag"(%8217) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %8219 = "llvm.load"(%8218) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%8219) [^bb1390, ^bb1390] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1387:
    %8220 = "llvm.getelementptr"(%8210) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8221 = "mini.checkflag"(%8220) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %8222 = "llvm.load"(%8221) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%8222) [^bb1391, ^bb1391] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1389:
    %8223 = "llvm.extractvalue"(%8209) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8224 = "llvm.load"(%8212) : (!llvm.ptr) -> i32
    %8225 = "llvm.getelementptr"(%8223, %8224) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8226 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %8227 = "llvm.getelementptr"(%8225, %8226) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8227) : (!llvm.ptr) -> ()
  }) {"func_name" = "Animal_B_init_agePtri32_hpPtrf64_skillPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1392(%8228 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8229 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8230 : !llvm.ptr):
    %8231 = "mini.wrap"(%8228) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Animal">
    %8232 = "mini.to_fat_ptr"(%8231) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Animal", "to_typ_name" = "Animal"} : (!mini.fatptr<"Animal">) -> !mini.fatptr<"Animal">
    %8233 = "mini.get_field"(%8232) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Animal">) -> !mini.ptr<i32>
    %8234 = builtin.unrealized_conversion_cast %8233 : !mini.ptr<i32> to !mini.ptr<i32>
    %8235 = "mini.unwrap"(%8234) : (!mini.ptr<i32>) -> i32
    %8236 = "mini.unwrap"(%8232) : (!mini.fatptr<"Animal">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8237 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %8238 = "mini.parameterizations_array"(%8237) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%8238, %8236, %8235) {"offset" = 6 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
    %8239 = "mini.get_field"(%8232) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Animal">) -> !mini.ptr<i32>
    %8240 = builtin.unrealized_conversion_cast %8239 : !mini.ptr<i32> to !mini.ptr<i32>
    %8241 = "mini.unwrap"(%8240) : (!mini.ptr<i32>) -> i32
    %8242 = "mini.unwrap"(%8232) : (!mini.fatptr<"Animal">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8243 = "mini.parameterizations_array"(%8237) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%8243, %8242, %8241) {"offset" = 6 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
  }) {"func_name" = "Animal_say_age_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1393(%8244 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8245 : !llvm.ptr):
    %8246 = "mini.invariant"(%8245) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8247 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1394] : () -> ()
  ^bb1394:
    %8248 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    "llvm.store"(%8248, %8247) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1395] : () -> ()
  ^bb1395:
    %8249 = "llvm.extractvalue"(%8244) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8250 = "llvm.load"(%8247) : (!llvm.ptr) -> i32
    %8251 = "llvm.getelementptr"(%8249, %8250) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8252 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %8253 = "llvm.getelementptr"(%8251, %8252) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8253) : (!llvm.ptr) -> ()
  }) {"func_name" = "Animal_B_say_age_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1396(%8254 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8255 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8256 : !llvm.ptr):
    %8257 = "mini.wrap"(%8254) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Animal">
    %8258 = "mini.to_fat_ptr"(%8257) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Animal", "to_typ_name" = "Animal"} : (!mini.fatptr<"Animal">) -> !mini.fatptr<"Animal">
    %8259 = "mini.get_field"(%8258) {"offset" = 2 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Animal">) -> !mini.ptr<i32>
    %8260 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
    %8261 = "mini.unwrap"(%8260) : (!mini.ptr<i1>) -> i1
    %8262 = builtin.unrealized_conversion_cast %8259 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.if"(%8261) ({
      %8263 = builtin.unrealized_conversion_cast %8262 : !mini.ptr<i32> to !mini.ptr<i32>
      %8264 = "mini.unionize"(%8263) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
      %8265 = "mini.unwrap"(%8264) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %8266 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %8267 = "mini.parameterizations_array"(%8266) : (!llvm.ptr) -> !llvm.ptr
      "mini.class_method_call"(%8267, %8265) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      "mini.castassign"(%8262, %8263) ({
        %8268 = builtin.unrealized_conversion_cast %8263 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    }) : (i1) -> ()
  }) {"func_name" = "Animal_say_skill_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1397(%8269 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8270 : !llvm.ptr):
    %8271 = "mini.invariant"(%8270) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8272 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1398] : () -> ()
  ^bb1398:
    %8273 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    "llvm.store"(%8273, %8272) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1399] : () -> ()
  ^bb1399:
    %8274 = "llvm.extractvalue"(%8269) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8275 = "llvm.load"(%8272) : (!llvm.ptr) -> i32
    %8276 = "llvm.getelementptr"(%8274, %8275) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8277 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %8278 = "llvm.getelementptr"(%8276, %8277) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8278) : (!llvm.ptr) -> ()
  }) {"func_name" = "Animal_B_say_skill_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1400(%8279 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8280 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8281 : !llvm.ptr, %8282 : i32):
    %8283 = "mini.wrap"(%8279) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Animal">
    %8284 = "mini.to_fat_ptr"(%8283) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Animal", "to_typ_name" = "Animal"} : (!mini.fatptr<"Animal">) -> !mini.fatptr<"Animal">
    %8285 = "mini.wrap"(%8282) : (i32) -> !mini.ptr<i32>
    %8286 = builtin.unrealized_conversion_cast %8285 : !mini.ptr<i32> to !mini.ptr<i32>
    %8287 = "mini.unionize"(%8286) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %8288 = "mini.unwrap"(%8287) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %8289 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %8290 = "mini.parameterizations_array"(%8289) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%8290, %8288) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
  }) {"func_name" = "Animal_say_messagePtri32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1401(%8291 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8292 : !llvm.ptr):
    %8293 = "mini.invariant"(%8292) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8294 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1402] : () -> ()
  ^bb1403:
    %8295 = "llvm.mlir.constant"() <{"value" = 11 : i32}> : () -> i32
    "llvm.store"(%8295, %8294) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1404] : () -> ()
  ^bb1402:
    %8296 = "llvm.getelementptr"(%8292) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8297 = "mini.checkflag"(%8296) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %8298 = "llvm.load"(%8297) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%8298) [^bb1403, ^bb1403] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1404:
    %8299 = "llvm.extractvalue"(%8291) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8300 = "llvm.load"(%8294) : (!llvm.ptr) -> i32
    %8301 = "llvm.getelementptr"(%8299, %8300) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8302 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %8303 = "llvm.getelementptr"(%8301, %8302) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8303) : (!llvm.ptr) -> ()
  }) {"func_name" = "Animal_B_say_messagePtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1405(%8304 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8305 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8306 : !llvm.ptr):
    %8307 = "mini.wrap"(%8304) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Animal">
    %8308 = "mini.to_fat_ptr"(%8307) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Animal", "to_typ_name" = "Animal"} : (!mini.fatptr<"Animal">) -> !mini.fatptr<"Animal">
    %8309 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8310 = "mini.literal"() {"value" = 5.000000e+00 : f64, "typ" = f64} : () -> !mini.ptr<f64>
    %8311 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8312 = "mini.unwrap"(%8309) : (!mini.ptr<i32>) -> i32
    %8313 = "mini.unwrap"(%8310) : (!mini.ptr<f64>) -> f64
    %8314 = "mini.unwrap"(%8311) : (!mini.ptr<i32>) -> i32
    %8315 = "mini.new"() {"typ" = !llvm.struct<(i32, f64, i32)>, "class_name" = "Animal", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Animal">
    %8316 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8317 = "mini.literal"() {"value" = 5.000000e+00 : f64, "typ" = f64} : () -> !mini.ptr<f64>
    %8318 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8319 = builtin.unrealized_conversion_cast %8316 : !mini.ptr<i32> to !mini.ptr<i32>
    %8320 = "mini.unwrap"(%8319) : (!mini.ptr<i32>) -> i32
    %8321 = builtin.unrealized_conversion_cast %8317 : !mini.ptr<f64> to !mini.ptr<f64>
    %8322 = "mini.unwrap"(%8321) : (!mini.ptr<f64>) -> f64
    %8323 = builtin.unrealized_conversion_cast %8318 : !mini.ptr<i32> to !mini.ptr<i32>
    %8324 = "mini.unwrap"(%8323) : (!mini.ptr<i32>) -> i32
    %8325 = "mini.unwrap"(%8315) : (!mini.fatptr<"Animal">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8326 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %8327 = "mini.parameterization"() {"id_hierarchy" = ["f64_typ"], "name_hierarchy" = ["Ptrf64"]} : () -> !llvm.ptr
    %8328 = "mini.parameterizations_array"(%8326, %8327, %8326) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%8328, %8325, %8320, %8322, %8324) {"offset" = 3 : i32, "vptrs" = ["i32_typ", "f64_typ", "i32_typ"], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, f64, i32) -> ()
    %8329 = builtin.unrealized_conversion_cast %8315 : !mini.fatptr<"Animal"> to !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<f64>]>
    "mini.return"(%8329) : (!mini.union<[!mini.fatptr<"Animal">, !mini.ptr<f64>]>) -> ()
  }) {"func_name" = "Animal_do_nothing_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1406(%8330 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8331 : !llvm.ptr):
    %8332 = "mini.invariant"(%8331) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8333 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1407] : () -> ()
  ^bb1407:
    %8334 = "llvm.mlir.constant"() <{"value" = 12 : i32}> : () -> i32
    "llvm.store"(%8334, %8333) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1408] : () -> ()
  ^bb1408:
    %8335 = "llvm.extractvalue"(%8330) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8336 = "llvm.load"(%8333) : (!llvm.ptr) -> i32
    %8337 = "llvm.getelementptr"(%8335, %8336) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8338 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %8339 = "llvm.getelementptr"(%8337, %8338) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8339) : (!llvm.ptr) -> ()
  }) {"func_name" = "Animal_B_do_nothing_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_Beaver", "types" = [i32, f64]} : () -> ()
  "mini.getter_def"() {"meth_name" = "Beaver_getter_color", "types" = [i32, f64], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Beaver_setter_color", "types" = [i32, f64], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Beaver_field_color", "getter_name" = "Beaver_getter_color", "setter_name" = "Beaver_setter_color"} : () -> ()
  "mini.getter_def"() {"meth_name" = "Beaver_getter_name", "types" = [i32, f64], "offset" = 1 : i64, "original_type" = f64, "specialized_name" = "f64_typ", "parameterization" = "_parameterization_Ptrf64"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Beaver_setter_name", "types" = [i32, f64], "offset" = 1 : i64, "original_type" = f64, "specialized_name" = "f64_typ", "parameterization" = "_parameterization_Ptrf64"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Beaver_field_name", "getter_name" = "Beaver_getter_name", "setter_name" = "Beaver_setter_name"} : () -> ()
  "mini.func"() ({
  ^bb1409(%8340 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8341 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8342 : !llvm.ptr, %8343 : i32, %8344 : f64):
    %8345 = "mini.wrap"(%8340) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Beaver">
    %8346 = "mini.to_fat_ptr"(%8345) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Beaver", "to_typ_name" = "Beaver"} : (!mini.fatptr<"Beaver">) -> !mini.fatptr<"Beaver">
    %8347 = "mini.wrap"(%8343) : (i32) -> !mini.ptr<i32>
    %8348 = builtin.unrealized_conversion_cast %8347 : !mini.ptr<i32> to !mini.ptr<i32>
    %8349 = builtin.unrealized_conversion_cast %8348 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%8346, %8349) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32, "original_type" = i32} : (!mini.fatptr<"Beaver">, !mini.ptr<i32>) -> ()
    %8350 = "mini.wrap"(%8344) : (f64) -> !mini.ptr<f64>
    %8351 = builtin.unrealized_conversion_cast %8350 : !mini.ptr<f64> to !mini.ptr<f64>
    %8352 = builtin.unrealized_conversion_cast %8351 : !mini.ptr<f64> to !mini.ptr<f64>
    "mini.set_field"(%8346, %8352) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32, "original_type" = f64} : (!mini.fatptr<"Beaver">, !mini.ptr<f64>) -> ()
  }) {"func_name" = "Beaver_init_colorPtri32_namePtrf64", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1410(%8353 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8354 : !llvm.ptr):
    %8355 = "mini.invariant"(%8354) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8356 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1411] : () -> ()
  ^bb1412:
    %8357 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%8357, %8356) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1413] : () -> ()
  ^bb1414:
    %8358 = "llvm.getelementptr"(%8354) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8359 = "mini.checkflag"(%8358) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %8360 = "llvm.load"(%8359) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%8360) [^bb1412, ^bb1412] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1411:
    %8361 = "llvm.getelementptr"(%8354) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8362 = "mini.checkflag"(%8361) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %8363 = "llvm.load"(%8362) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%8363) [^bb1414, ^bb1414] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1413:
    %8364 = "llvm.extractvalue"(%8353) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8365 = "llvm.load"(%8356) : (!llvm.ptr) -> i32
    %8366 = "llvm.getelementptr"(%8364, %8365) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8367 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %8368 = "llvm.getelementptr"(%8366, %8367) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8368) : (!llvm.ptr) -> ()
  }) {"func_name" = "Beaver_B_init_colorPtri32_namePtrf64", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1415(%8369 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8370 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8371 : !llvm.ptr, %8372 : i32):
    %8373 = "mini.wrap"(%8369) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Beaver">
    %8374 = "mini.to_fat_ptr"(%8373) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Beaver", "to_typ_name" = "Beaver"} : (!mini.fatptr<"Beaver">) -> !mini.fatptr<"Beaver">
    %8375 = "mini.wrap"(%8372) : (i32) -> !mini.ptr<i32>
    %8376 = builtin.unrealized_conversion_cast %8375 : !mini.ptr<i32> to !mini.ptr<i32>
    %8377 = "mini.get_field"(%8374) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32, "original_type" = i32} : (!mini.fatptr<"Beaver">) -> !mini.ptr<i32>
    %8378 = "mini.unwrap"(%8377) : (!mini.ptr<i32>) -> i32
    %8379 = "mini.unwrap"(%8376) : (!mini.ptr<i32>) -> i32
    %8380 = "mini.arithmetic"(%8378, %8379) {"op" = "ADD"} : (i32, i32) -> i32
    %8381 = "mini.wrap"(%8380) : (i32) -> !mini.ptr<i32>
    %8382 = builtin.unrealized_conversion_cast %8381 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%8374, %8382) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32, "original_type" = i32} : (!mini.fatptr<"Beaver">, !mini.ptr<i32>) -> ()
  }) {"func_name" = "Beaver__ADD_xPtri32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1416(%8383 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8384 : !llvm.ptr):
    %8385 = "mini.invariant"(%8384) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8386 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1417] : () -> ()
  ^bb1418:
    %8387 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
    "llvm.store"(%8387, %8386) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1419] : () -> ()
  ^bb1417:
    %8388 = "llvm.getelementptr"(%8384) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8389 = "mini.checkflag"(%8388) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %8390 = "llvm.load"(%8389) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%8390) [^bb1418, ^bb1418] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1419:
    %8391 = "llvm.extractvalue"(%8383) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8392 = "llvm.load"(%8386) : (!llvm.ptr) -> i32
    %8393 = "llvm.getelementptr"(%8391, %8392) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8394 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %8395 = "llvm.getelementptr"(%8393, %8394) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8395) : (!llvm.ptr) -> ()
  }) {"func_name" = "Beaver_B__ADD_xPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1420(%8396 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8397 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8398 : !llvm.ptr):
    %8399 = "mini.wrap"(%8396) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Beaver">
    %8400 = "mini.to_fat_ptr"(%8399) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Beaver", "to_typ_name" = "Beaver"} : (!mini.fatptr<"Beaver">) -> !mini.fatptr<"Beaver">
    %8401 = "mini.get_field"(%8400) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32, "original_type" = i32} : (!mini.fatptr<"Beaver">) -> !mini.ptr<i32>
    %8402 = "mini.unionize"(%8401) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %8403 = "mini.unwrap"(%8402) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %8404 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %8405 = "mini.parameterizations_array"(%8404) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%8405, %8403) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
  }) {"func_name" = "Beaver_say_color_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1421(%8406 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8407 : !llvm.ptr):
    %8408 = "mini.invariant"(%8407) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8409 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1422] : () -> ()
  ^bb1422:
    %8410 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    "llvm.store"(%8410, %8409) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1423] : () -> ()
  ^bb1423:
    %8411 = "llvm.extractvalue"(%8406) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8412 = "llvm.load"(%8409) : (!llvm.ptr) -> i32
    %8413 = "llvm.getelementptr"(%8411, %8412) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8414 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %8415 = "llvm.getelementptr"(%8413, %8414) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8415) : (!llvm.ptr) -> ()
  }) {"func_name" = "Beaver_B_say_color_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_ListNode", "types" = [i32, !llvm.struct<(!llvm.ptr, i160)>]} : () -> ()
  "mini.getter_def"() {"meth_name" = "ListNode_getter_data", "types" = [i32, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ListNode_setter_data", "types" = [i32, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ListNode_field_data", "getter_name" = "ListNode_getter_data", "setter_name" = "ListNode_setter_data"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ListNode_getter_next", "types" = [i32, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "union_typ", "parameterization" = "_parameterization_ListNode_or_Nil"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ListNode_setter_next", "types" = [i32, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "union_typ", "parameterization" = "_parameterization_ListNode_or_Nil"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ListNode_field_next", "getter_name" = "ListNode_getter_next", "setter_name" = "ListNode_setter_next"} : () -> ()
  "mini.func"() ({
  ^bb1424(%8416 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8417 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8418 : !llvm.ptr, %8419 : i32):
    %8420 = "mini.wrap"(%8416) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ListNode">
    %8421 = "mini.to_fat_ptr"(%8420) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %8422 = "mini.wrap"(%8419) : (i32) -> !mini.ptr<i32>
    %8423 = builtin.unrealized_conversion_cast %8422 : !mini.ptr<i32> to !mini.ptr<i32>
    %8424 = builtin.unrealized_conversion_cast %8423 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%8421, %8424) {"offset" = 0 : i64, "vtable_bytes" = 96 : i32, "original_type" = i32} : (!mini.fatptr<"ListNode">, !mini.ptr<i32>) -> ()
    %8425 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
    %8426 = "mini.unionize"(%8425) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.fatptr<"ListNode">, !mini.nil]>
    "mini.set_field"(%8421, %8426) {"offset" = 1 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.fatptr<"ListNode">, !mini.union<[!mini.fatptr<"ListNode">, !mini.nil]>) -> ()
  }) {"func_name" = "ListNode_init_dataPtri32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1425(%8427 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8428 : !llvm.ptr):
    %8429 = "mini.invariant"(%8428) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8430 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1426] : () -> ()
  ^bb1427:
    %8431 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    "llvm.store"(%8431, %8430) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1428] : () -> ()
  ^bb1426:
    %8432 = "llvm.getelementptr"(%8428) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8433 = "mini.checkflag"(%8432) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %8434 = "llvm.load"(%8433) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%8434) [^bb1427, ^bb1427] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1428:
    %8435 = "llvm.extractvalue"(%8427) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8436 = "llvm.load"(%8430) : (!llvm.ptr) -> i32
    %8437 = "llvm.getelementptr"(%8435, %8436) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<12 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8438 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %8439 = "llvm.getelementptr"(%8437, %8438) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8439) : (!llvm.ptr) -> ()
  }) {"func_name" = "ListNode_B_init_dataPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1429(%8440 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8441 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8442 : !llvm.ptr, %8443 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %8444 = "mini.wrap"(%8440) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ListNode">
    %8445 = "mini.to_fat_ptr"(%8444) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %8446 = "mini.wrap"(%8443) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ListNode">
    %8447 = "mini.to_fat_ptr"(%8446) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %8448 = builtin.unrealized_conversion_cast %8447 : !mini.fatptr<"ListNode"> to !mini.union<[!mini.fatptr<"ListNode">, !mini.nil]>
    "mini.set_field"(%8445, %8448) {"offset" = 1 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.fatptr<"ListNode">, !mini.union<[!mini.fatptr<"ListNode">, !mini.nil]>) -> ()
    %8449 = "mini.to_fat_ptr"(%8447) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    "mini.return"(%8449) : (!mini.fatptr<"ListNode">) -> ()
  }) {"func_name" = "ListNode_push_nextListNode", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1430(%8450 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8451 : !llvm.ptr):
    %8452 = "mini.invariant"(%8451) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8453 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1431] : () -> ()
  ^bb1432:
    %8454 = "llvm.mlir.constant"() <{"value" = 8 : i32}> : () -> i32
    "llvm.store"(%8454, %8453) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1433] : () -> ()
  ^bb1431:
    %8455 = "llvm.getelementptr"(%8451) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8456 = "mini.checkflag"(%8455) {"typ_name" = "ListNode"} : (!llvm.ptr) -> !mini.ptr<i1>
    %8457 = "llvm.load"(%8456) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%8457) [^bb1432, ^bb1432] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1433:
    %8458 = "llvm.extractvalue"(%8450) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8459 = "llvm.load"(%8453) : (!llvm.ptr) -> i32
    %8460 = "llvm.getelementptr"(%8458, %8459) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<12 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8461 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %8462 = "llvm.getelementptr"(%8460, %8461) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8462) : (!llvm.ptr) -> ()
  }) {"func_name" = "ListNode_B_push_nextListNode", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1434(%8463 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8464 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8465 : !llvm.ptr):
    %8466 = "mini.wrap"(%8463) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ListNode">
    %8467 = "mini.to_fat_ptr"(%8466) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %8468 = "mini.get_field"(%8467) {"offset" = 1 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.fatptr<"ListNode">) -> !mini.union<[!mini.fatptr<"ListNode">, !mini.nil]>
    %8469 = builtin.unrealized_conversion_cast %8468 : !mini.union<[!mini.fatptr<"ListNode">, !mini.nil]> to !mini.union<[!mini.fatptr<"ListNode">, !mini.nil]>
    "mini.return"(%8469) : (!mini.union<[!mini.fatptr<"ListNode">, !mini.nil]>) -> ()
  }) {"func_name" = "ListNode_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1435(%8470 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8471 : !llvm.ptr):
    %8472 = "mini.invariant"(%8471) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8473 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1436] : () -> ()
  ^bb1436:
    %8474 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    "llvm.store"(%8474, %8473) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1437] : () -> ()
  ^bb1437:
    %8475 = "llvm.extractvalue"(%8470) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8476 = "llvm.load"(%8473) : (!llvm.ptr) -> i32
    %8477 = "llvm.getelementptr"(%8475, %8476) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<12 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8478 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %8479 = "llvm.getelementptr"(%8477, %8478) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8479) : (!llvm.ptr) -> ()
  }) {"func_name" = "ListNode_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1438(%8480 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8481 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8482 : !llvm.ptr):
    %8483 = "mini.wrap"(%8480) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ListNode">
    %8484 = "mini.to_fat_ptr"(%8483) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %8485 = "mini.get_field"(%8484) {"offset" = 0 : i64, "vtable_bytes" = 96 : i32, "original_type" = i32} : (!mini.fatptr<"ListNode">) -> !mini.ptr<i32>
    %8486 = builtin.unrealized_conversion_cast %8485 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.return"(%8486) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "ListNode_data_", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1439(%8487 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8488 : !llvm.ptr):
    %8489 = "mini.invariant"(%8488) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8490 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1440] : () -> ()
  ^bb1440:
    %8491 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    "llvm.store"(%8491, %8490) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1441] : () -> ()
  ^bb1441:
    %8492 = "llvm.extractvalue"(%8487) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8493 = "llvm.load"(%8490) : (!llvm.ptr) -> i32
    %8494 = "llvm.getelementptr"(%8492, %8493) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<12 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8495 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %8496 = "llvm.getelementptr"(%8494, %8495) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8496) : (!llvm.ptr) -> ()
  }) {"func_name" = "ListNode_B_data_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1442(%8497 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8498 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8499 : !llvm.ptr):
    %8500 = "mini.wrap"(%8497) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ListNode">
    %8501 = "mini.to_fat_ptr"(%8500) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %8502 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8503 = "mini.unwrap"(%8502) : (!mini.ptr<i32>) -> i32
    %8504 = "mini.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, i160)>)>, "class_name" = "ListNode", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !mini.fatptr<"ListNode">
    %8505 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8506 = builtin.unrealized_conversion_cast %8505 : !mini.ptr<i32> to !mini.ptr<i32>
    %8507 = "mini.unwrap"(%8506) : (!mini.ptr<i32>) -> i32
    %8508 = "mini.unwrap"(%8504) : (!mini.fatptr<"ListNode">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8509 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %8510 = "mini.parameterizations_array"(%8509) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%8510, %8508, %8507) {"offset" = 2 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 12 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
    %8511 = "mini.to_fat_ptr"(%8504) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %8512 = "mini.refer"(%8511) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %8513 = "mini.to_fat_ptr"(%8501) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %8514 = "mini.unwrap"(%8513) : (!mini.fatptr<"ListNode">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8515 = "mini.unwrap"(%8512) : (!mini.fatptr<"ListNode">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8516 = "mini.parameterization"() {"id_hierarchy" = ["ListNode"], "name_hierarchy" = ["ListNode"]} : () -> !llvm.ptr
    %8517 = "mini.parameterizations_array"(%8516) : (!llvm.ptr) -> !llvm.ptr
    %8518 = "mini.method_call"(%8517, %8515, %8514) {"offset" = 3 : i32, "vptrs" = [#none], "vtable_size" = 12 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ListNode">
    %8519 = "mini.to_fat_ptr"(%8518) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %8520 = "mini.unwrap"(%8512) : (!mini.fatptr<"ListNode">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8521 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "ListIterator", "num_data_fields" = 1 : i32, "region_id" = "none"} : () -> !mini.fatptr<"ListIterator">
    %8522 = "mini.to_fat_ptr"(%8512) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %8523 = "mini.unwrap"(%8522) : (!mini.fatptr<"ListNode">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8524 = "mini.unwrap"(%8521) : (!mini.fatptr<"ListIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8525 = "mini.parameterizations_array"(%8516) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%8525, %8524, %8523) {"offset" = 1 : i32, "vptrs" = [#none], "vtable_size" = 5 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %8526 = "mini.to_fat_ptr"(%8521) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListIterator", "to_typ_name" = "ListIterator"} : (!mini.fatptr<"ListIterator">) -> !mini.fatptr<"ListIterator">
    "mini.return"(%8526) : (!mini.fatptr<"ListIterator">) -> ()
  }) {"func_name" = "ListNode_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1443(%8527 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8528 : !llvm.ptr):
    %8529 = "mini.invariant"(%8528) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8530 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1444] : () -> ()
  ^bb1444:
    %8531 = "llvm.mlir.constant"() <{"value" = 11 : i32}> : () -> i32
    "llvm.store"(%8531, %8530) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1445] : () -> ()
  ^bb1445:
    %8532 = "llvm.extractvalue"(%8527) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8533 = "llvm.load"(%8530) : (!llvm.ptr) -> i32
    %8534 = "llvm.getelementptr"(%8532, %8533) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<12 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8535 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %8536 = "llvm.getelementptr"(%8534, %8535) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8536) : (!llvm.ptr) -> ()
  }) {"func_name" = "ListNode_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_ListIterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
  "mini.getter_def"() {"meth_name" = "ListIterator_getter_node", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "ListNode", "parameterization" = "_parameterization_ListNode"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ListIterator_setter_node", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "ListNode", "parameterization" = "_parameterization_ListNode"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ListIterator_field_node", "getter_name" = "ListIterator_getter_node", "setter_name" = "ListIterator_setter_node"} : () -> ()
  "mini.func"() ({
  ^bb1446(%8537 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8538 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8539 : !llvm.ptr, %8540 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %8541 = "mini.wrap"(%8537) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ListIterator">
    %8542 = "mini.to_fat_ptr"(%8541) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListIterator", "to_typ_name" = "ListIterator"} : (!mini.fatptr<"ListIterator">) -> !mini.fatptr<"ListIterator">
    %8543 = "mini.wrap"(%8540) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ListNode">
    %8544 = "mini.to_fat_ptr"(%8543) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %8545 = "mini.to_fat_ptr"(%8544) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    "mini.set_field"(%8542, %8545) {"offset" = 0 : i64, "vtable_bytes" = 40 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ListIterator">, !mini.fatptr<"ListNode">) -> ()
  }) {"func_name" = "ListIterator_init_nodeListNode", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1447(%8546 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8547 : !llvm.ptr):
    %8548 = "mini.invariant"(%8547) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8549 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1448] : () -> ()
  ^bb1449:
    %8550 = "llvm.mlir.constant"() <{"value" = 3 : i32}> : () -> i32
    "llvm.store"(%8550, %8549) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1450] : () -> ()
  ^bb1448:
    %8551 = "llvm.getelementptr"(%8547) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8552 = "mini.checkflag"(%8551) {"typ_name" = "ListNode"} : (!llvm.ptr) -> !mini.ptr<i1>
    %8553 = "llvm.load"(%8552) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%8553) [^bb1449, ^bb1449] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1450:
    %8554 = "llvm.extractvalue"(%8546) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8555 = "llvm.load"(%8549) : (!llvm.ptr) -> i32
    %8556 = "llvm.getelementptr"(%8554, %8555) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<5 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8557 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %8558 = "llvm.getelementptr"(%8556, %8557) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8558) : (!llvm.ptr) -> ()
  }) {"func_name" = "ListIterator_B_init_nodeListNode", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1451(%8559 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8560 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8561 : !llvm.ptr):
    %8562 = "mini.wrap"(%8559) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ListIterator">
    %8563 = "mini.to_fat_ptr"(%8562) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListIterator", "to_typ_name" = "ListIterator"} : (!mini.fatptr<"ListIterator">) -> !mini.fatptr<"ListIterator">
    %8564 = "mini.get_field"(%8563) {"offset" = 0 : i64, "vtable_bytes" = 40 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "ListNode"} : (!mini.fatptr<"ListIterator">) -> !mini.fatptr<"ListNode">
    %8565 = "mini.unwrap"(%8564) : (!mini.fatptr<"ListNode">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8566 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %8567 = "mini.method_call"(%8566, %8565) {"offset" = 4 : i32, "vptrs" = [], "vtable_size" = 12 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.fatptr<"ListNode">, !mini.nil]>
    %8568 = builtin.unrealized_conversion_cast %8567 : !mini.union<[!mini.fatptr<"ListNode">, !mini.nil]> to !mini.union<[!mini.fatptr<"ListNode">, !mini.nil]>
    %8569 = "mini.checkflag"(%8568) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.fatptr<"ListNode">, !mini.nil]>) -> !mini.ptr<i1>
    %8570 = "mini.unwrap"(%8569) : (!mini.ptr<i1>) -> i1
    %8571 = builtin.unrealized_conversion_cast %8568 : !mini.union<[!mini.fatptr<"ListNode">, !mini.nil]> to !mini.union<[!mini.fatptr<"ListNode">, !mini.nil]>
    "mini.if"(%8570) ({
      %8572 = "mini.to_fat_ptr"(%8571) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "union_typ", "to_typ_name" = "ListNode"} : (!mini.union<[!mini.fatptr<"ListNode">, !mini.nil]>) -> !mini.fatptr<"ListNode">
      %8573 = "mini.to_fat_ptr"(%8572) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
      "mini.set_field"(%8563, %8573) {"offset" = 0 : i64, "vtable_bytes" = 40 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ListIterator">, !mini.fatptr<"ListNode">) -> ()
      %8574 = "mini.get_field"(%8563) {"offset" = 0 : i64, "vtable_bytes" = 40 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "ListNode"} : (!mini.fatptr<"ListIterator">) -> !mini.fatptr<"ListNode">
      %8575 = builtin.unrealized_conversion_cast %8574 : !mini.fatptr<"ListNode"> to !mini.union<[!mini.fatptr<"ListNode">, !mini.nil]>
      "mini.return"(%8575) : (!mini.union<[!mini.fatptr<"ListNode">, !mini.nil]>) -> ()
      "mini.castassign"(%8571, %8572) ({
        %8576 = builtin.unrealized_conversion_cast %8572 : !mini.fatptr<"ListNode"> to !mini.union<[!mini.fatptr<"ListNode">, !mini.nil]>
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "ListNode", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.fatptr<"ListNode">, !mini.nil]>, !mini.fatptr<"ListNode">) -> ()
    }) : (i1) -> ()
    %8577 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
    %8578 = "mini.unionize"(%8577) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.fatptr<"ListNode">, !mini.nil]>
    "mini.return"(%8578) : (!mini.union<[!mini.fatptr<"ListNode">, !mini.nil]>) -> ()
  }) {"func_name" = "ListIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1452(%8579 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8580 : !llvm.ptr):
    %8581 = "mini.invariant"(%8580) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8582 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1453] : () -> ()
  ^bb1453:
    %8583 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
    "llvm.store"(%8583, %8582) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1454] : () -> ()
  ^bb1454:
    %8584 = "llvm.extractvalue"(%8579) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8585 = "llvm.load"(%8582) : (!llvm.ptr) -> i32
    %8586 = "llvm.getelementptr"(%8584, %8585) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<5 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8587 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %8588 = "llvm.getelementptr"(%8586, %8587) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8588) : (!llvm.ptr) -> ()
  }) {"func_name" = "ListIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1455(%8589 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %8590 = "mini.wrap"(%8589) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Animal">
    %8591 = "mini.to_fat_ptr"(%8590) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Animal", "to_typ_name" = "Animal"} : (!mini.fatptr<"Animal">) -> !mini.fatptr<"Animal">
    %8592 = "mini.unwrap"(%8591) : (!mini.fatptr<"Animal">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8593 = "mini.parameterizations_array"() : () -> !llvm.ptr
    "mini.method_call"(%8593, %8592) {"offset" = 4 : i32, "vptrs" = [], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
  }) {"func_name" = "make_em_speak", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1456(%8594 : i32):
    %8595 = "mini.wrap"(%8594) : (i32) -> !mini.ptr<i32>
    %8596 = builtin.unrealized_conversion_cast %8595 : !mini.ptr<i32> to !mini.ptr<i32>
    %8597 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8598 = "mini.unwrap"(%8596) : (!mini.ptr<i32>) -> i32
    %8599 = "mini.unwrap"(%8597) : (!mini.ptr<i32>) -> i32
    %8600 = "mini.comparison"(%8598, %8599) {"op" = "LT"} : (i32, i32) -> i1
    %8601 = "mini.wrap"(%8600) : (i1) -> !mini.ptr<i32>
    %8602 = "mini.unwrap"(%8601) : (!mini.ptr<i32>) -> i1
    "mini.if"(%8602) ({
      %8603 = builtin.unrealized_conversion_cast %8596 : !mini.ptr<i32> to !mini.ptr<i32>
      "mini.return"(%8603) : (!mini.ptr<i32>) -> ()
    }) : (i1) -> ()
    %8604 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8605 = "mini.unwrap"(%8596) : (!mini.ptr<i32>) -> i32
    %8606 = "mini.unwrap"(%8604) : (!mini.ptr<i32>) -> i32
    %8607 = "mini.arithmetic"(%8605, %8606) {"op" = "SUB"} : (i32, i32) -> i32
    %8608 = "mini.wrap"(%8607) : (i32) -> !mini.ptr<i32>
    %8609 = "mini.unwrap"(%8608) : (!mini.ptr<i32>) -> i32
    %8610 = "mini.call"(%8609) {"func_name" = "fibonacci", "ret_type" = i32} : (i32) -> !mini.ptr<i32>
    %8611 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8612 = "mini.unwrap"(%8596) : (!mini.ptr<i32>) -> i32
    %8613 = "mini.unwrap"(%8611) : (!mini.ptr<i32>) -> i32
    %8614 = "mini.arithmetic"(%8612, %8613) {"op" = "SUB"} : (i32, i32) -> i32
    %8615 = "mini.wrap"(%8614) : (i32) -> !mini.ptr<i32>
    %8616 = "mini.unwrap"(%8615) : (!mini.ptr<i32>) -> i32
    %8617 = "mini.call"(%8616) {"func_name" = "fibonacci", "ret_type" = i32} : (i32) -> !mini.ptr<i32>
    %8618 = "mini.unwrap"(%8610) : (!mini.ptr<i32>) -> i32
    %8619 = "mini.unwrap"(%8617) : (!mini.ptr<i32>) -> i32
    %8620 = "mini.arithmetic"(%8618, %8619) {"op" = "ADD"} : (i32, i32) -> i32
    %8621 = "mini.wrap"(%8620) : (i32) -> !mini.ptr<i32>
    %8622 = builtin.unrealized_conversion_cast %8621 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.return"(%8622) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "fibonacci", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1457(%8623 : i32):
    %8624 = "mini.wrap"(%8623) : (i32) -> !mini.ptr<i32>
    %8625 = builtin.unrealized_conversion_cast %8624 : !mini.ptr<i32> to !mini.ptr<i32>
    %8626 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8627 = "mini.unwrap"(%8625) : (!mini.ptr<i32>) -> i32
    %8628 = "mini.unwrap"(%8626) : (!mini.ptr<i32>) -> i32
    %8629 = "mini.comparison"(%8627, %8628) {"op" = "LT"} : (i32, i32) -> i1
    %8630 = "mini.wrap"(%8629) : (i1) -> !mini.ptr<i32>
    %8631 = "mini.unwrap"(%8630) : (!mini.ptr<i32>) -> i1
    "mini.if"(%8631) ({
      %8632 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %8633 = builtin.unrealized_conversion_cast %8632 : !mini.ptr<i32> to !mini.ptr<i32>
      "mini.return"(%8633) : (!mini.ptr<i32>) -> ()
    }) : (i1) -> ()
    %8634 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8635 = "mini.unwrap"(%8625) : (!mini.ptr<i32>) -> i32
    %8636 = "mini.unwrap"(%8634) : (!mini.ptr<i32>) -> i32
    %8637 = "mini.arithmetic"(%8635, %8636) {"op" = "SUB"} : (i32, i32) -> i32
    %8638 = "mini.wrap"(%8637) : (i32) -> !mini.ptr<i32>
    %8639 = "mini.unwrap"(%8638) : (!mini.ptr<i32>) -> i32
    %8640 = "mini.call"(%8639) {"func_name" = "factorial", "ret_type" = i32} : (i32) -> !mini.ptr<i32>
    %8641 = "mini.unwrap"(%8625) : (!mini.ptr<i32>) -> i32
    %8642 = "mini.unwrap"(%8640) : (!mini.ptr<i32>) -> i32
    %8643 = "mini.arithmetic"(%8641, %8642) {"op" = "MUL"} : (i32, i32) -> i32
    %8644 = "mini.wrap"(%8643) : (i32) -> !mini.ptr<i32>
    %8645 = builtin.unrealized_conversion_cast %8644 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.return"(%8645) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "factorial", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_Bard", "types" = []} : () -> ()
  "mini.func"() ({
  ^bb1458(%8646 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8647 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8648 : !llvm.ptr):
    %8649 = "mini.wrap"(%8646) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Bard">
    %8650 = "mini.to_fat_ptr"(%8649) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Bard", "to_typ_name" = "Bard"} : (!mini.fatptr<"Bard">) -> !mini.fatptr<"Bard">
  }) {"func_name" = "Bard_init_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1459(%8651 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8652 : !llvm.ptr):
    %8653 = "mini.invariant"(%8652) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8654 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1460] : () -> ()
  ^bb1460:
    %8655 = "llvm.mlir.constant"() <{"value" = 2 : i32}> : () -> i32
    "llvm.store"(%8655, %8654) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1461] : () -> ()
  ^bb1461:
    %8656 = "llvm.extractvalue"(%8651) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8657 = "llvm.load"(%8654) : (!llvm.ptr) -> i32
    %8658 = "llvm.getelementptr"(%8656, %8657) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<7 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8659 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %8660 = "llvm.getelementptr"(%8658, %8659) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8660) : (!llvm.ptr) -> ()
  }) {"func_name" = "Bard_B_init_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1462(%8661 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8662 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8663 : !llvm.ptr, %8664 : !llvm.struct<(!llvm.ptr, i160)>, %8665 : !llvm.struct<(!llvm.ptr, i160)>):
    %8666 = "mini.wrap"(%8661) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Bard">
    %8667 = "mini.to_fat_ptr"(%8666) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Bard", "to_typ_name" = "Bard"} : (!mini.fatptr<"Bard">) -> !mini.fatptr<"Bard">
    %8668 = "mini.wrap"(%8664) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<f64>, !mini.ptr<i32>]>
    %8669 = "mini.narrow"(%8668) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.fatptr<"Animal">, !mini.ptr<f64>, !mini.ptr<i32>]>) -> !mini.ptr<i32>
    %8670 = "mini.wrap"(%8665) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<i32>, !mini.ptr<f64>]>
    %8671 = "mini.narrow"(%8670) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<i32>, !mini.ptr<f64>]>) -> !mini.ptr<i32>
    %8672 = "mini.unionize"(%8669) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %8673 = "mini.unwrap"(%8672) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %8674 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %8675 = "mini.parameterizations_array"(%8674) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%8675, %8673) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %8676 = "mini.unionize"(%8671) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %8677 = "mini.unwrap"(%8676) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %8678 = "mini.parameterizations_array"(%8674) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%8678, %8677) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
  }) {"func_name" = "Bard_take_aPtri32_bPtri32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1463(%8679 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8680 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8681 : !llvm.ptr, %8682 : !llvm.struct<(!llvm.ptr, i160)>, %8683 : !llvm.struct<(!llvm.ptr, i160)>):
    %8684 = "mini.wrap"(%8679) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Bard">
    %8685 = "mini.to_fat_ptr"(%8684) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Bard", "to_typ_name" = "Bard"} : (!mini.fatptr<"Bard">) -> !mini.fatptr<"Bard">
    %8686 = "mini.wrap"(%8682) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<f64>, !mini.ptr<i32>]>
    %8687 = "mini.to_fat_ptr"(%8686) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "union_typ", "to_typ_name" = "Animal"} : (!mini.union<[!mini.fatptr<"Animal">, !mini.ptr<f64>, !mini.ptr<i32>]>) -> !mini.fatptr<"Animal">
    %8688 = "mini.wrap"(%8683) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<i32>, !mini.ptr<f64>]>
    %8689 = "mini.to_fat_ptr"(%8688) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "union_typ", "to_typ_name" = "Beaver"} : (!mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<i32>, !mini.ptr<f64>]>) -> !mini.fatptr<"Beaver">
    %8690 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8691 = "mini.create_buffer"(%8690) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %8692 = builtin.unrealized_conversion_cast %8691 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %8693 = "mini.refer"(%8692) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %8694 = "mini.literal"() {"typ" = !llvm.array<7 x i8>, "value" = "animal!"} : () -> !llvm.ptr
    %8695 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%8693, %8695, %8694) {"typ" = !llvm.array<7 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %8696 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8697 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8698 = "mini.unwrap"(%8693) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %8699 = "mini.unwrap"(%8696) : (!mini.ptr<i32>) -> i32
    %8700 = "mini.unwrap"(%8697) : (!mini.ptr<i32>) -> i32
    %8701 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %8702 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8703 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8704 = builtin.unrealized_conversion_cast %8693 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %8705 = "mini.unwrap"(%8704) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %8706 = builtin.unrealized_conversion_cast %8702 : !mini.ptr<i32> to !mini.ptr<i32>
    %8707 = "mini.unwrap"(%8706) : (!mini.ptr<i32>) -> i32
    %8708 = builtin.unrealized_conversion_cast %8703 : !mini.ptr<i32> to !mini.ptr<i32>
    %8709 = "mini.unwrap"(%8708) : (!mini.ptr<i32>) -> i32
    %8710 = "mini.unwrap"(%8701) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8711 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %8712 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %8713 = "mini.parameterizations_array"(%8711, %8712, %8712) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%8713, %8710, %8705, %8707, %8709) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %8714 = builtin.unrealized_conversion_cast %8701 : !mini.fatptr<"String"> to !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %8715 = "mini.unwrap"(%8714) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %8716 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %8717 = "mini.parameterizations_array"(%8716) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%8717, %8715) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %8718 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8719 = "mini.create_buffer"(%8718) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %8720 = builtin.unrealized_conversion_cast %8719 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %8721 = "mini.refer"(%8720) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %8722 = "mini.literal"() {"typ" = !llvm.array<7 x i8>, "value" = "beaver!"} : () -> !llvm.ptr
    %8723 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%8721, %8723, %8722) {"typ" = !llvm.array<7 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %8724 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8725 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8726 = "mini.unwrap"(%8721) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %8727 = "mini.unwrap"(%8724) : (!mini.ptr<i32>) -> i32
    %8728 = "mini.unwrap"(%8725) : (!mini.ptr<i32>) -> i32
    %8729 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %8730 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8731 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8732 = builtin.unrealized_conversion_cast %8721 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %8733 = "mini.unwrap"(%8732) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %8734 = builtin.unrealized_conversion_cast %8730 : !mini.ptr<i32> to !mini.ptr<i32>
    %8735 = "mini.unwrap"(%8734) : (!mini.ptr<i32>) -> i32
    %8736 = builtin.unrealized_conversion_cast %8731 : !mini.ptr<i32> to !mini.ptr<i32>
    %8737 = "mini.unwrap"(%8736) : (!mini.ptr<i32>) -> i32
    %8738 = "mini.unwrap"(%8729) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8739 = "mini.parameterizations_array"(%8711, %8712, %8712) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%8739, %8738, %8733, %8735, %8737) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %8740 = builtin.unrealized_conversion_cast %8729 : !mini.fatptr<"String"> to !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %8741 = "mini.unwrap"(%8740) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %8742 = "mini.parameterizations_array"(%8716) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%8742, %8741) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
  }) {"func_name" = "Bard_take_aAnimal_bBeaver", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1464(%8743 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8744 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8745 : !llvm.ptr, %8746 : !llvm.struct<(!llvm.ptr, i160)>, %8747 : !llvm.struct<(!llvm.ptr, i160)>):
    %8748 = "mini.wrap"(%8743) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Bard">
    %8749 = "mini.to_fat_ptr"(%8748) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Bard", "to_typ_name" = "Bard"} : (!mini.fatptr<"Bard">) -> !mini.fatptr<"Bard">
    %8750 = "mini.wrap"(%8746) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<f64>, !mini.ptr<i32>]>
    %8751 = "mini.narrow"(%8750) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = f64, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!mini.union<[!mini.fatptr<"Animal">, !mini.ptr<f64>, !mini.ptr<i32>]>) -> !mini.ptr<f64>
    %8752 = "mini.wrap"(%8747) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<i32>, !mini.ptr<f64>]>
    %8753 = "mini.narrow"(%8752) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = f64, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<i32>, !mini.ptr<f64>]>) -> !mini.ptr<f64>
    %8754 = "mini.unionize"(%8751) {"from_typ" = f64, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<f64>) -> !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %8755 = "mini.unwrap"(%8754) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %8756 = "mini.parameterization"() {"id_hierarchy" = ["f64_typ"], "name_hierarchy" = ["Ptrf64"]} : () -> !llvm.ptr
    %8757 = "mini.parameterizations_array"(%8756) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%8757, %8755) {"offset" = 0 : i32, "vptrs" = ["f64_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %8758 = "mini.unionize"(%8753) {"from_typ" = f64, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<f64>) -> !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %8759 = "mini.unwrap"(%8758) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %8760 = "mini.parameterizations_array"(%8756) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%8760, %8759) {"offset" = 0 : i32, "vptrs" = ["f64_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
  }) {"func_name" = "Bard_take_aPtrf64_bPtrf64", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1465(%8761 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8762 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8763 : !llvm.ptr, %8764 : !llvm.struct<(!llvm.ptr, i160)>, %8765 : !llvm.struct<(!llvm.ptr, i160)>):
    %8766 = "mini.wrap"(%8761) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Bard">
    %8767 = "mini.to_fat_ptr"(%8766) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Bard", "to_typ_name" = "Bard"} : (!mini.fatptr<"Bard">) -> !mini.fatptr<"Bard">
    %8768 = "mini.wrap"(%8764) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<f64>, !mini.ptr<i32>]>
    %8769 = "mini.narrow"(%8768) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.fatptr<"Animal">, !mini.ptr<f64>, !mini.ptr<i32>]>) -> !mini.ptr<i32>
    %8770 = "mini.wrap"(%8765) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<i32>, !mini.ptr<f64>]>
    %8771 = "mini.narrow"(%8770) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = f64, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<i32>, !mini.ptr<f64>]>) -> !mini.ptr<f64>
    %8772 = "mini.unionize"(%8769) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %8773 = "mini.unwrap"(%8772) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %8774 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %8775 = "mini.parameterizations_array"(%8774) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%8775, %8773) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %8776 = "mini.unionize"(%8771) {"from_typ" = f64, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<f64>) -> !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %8777 = "mini.unwrap"(%8776) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %8778 = "mini.parameterization"() {"id_hierarchy" = ["f64_typ"], "name_hierarchy" = ["Ptrf64"]} : () -> !llvm.ptr
    %8779 = "mini.parameterizations_array"(%8778) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%8779, %8777) {"offset" = 0 : i32, "vptrs" = ["f64_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
  }) {"func_name" = "Bard_take_aPtri32_bPtrf64", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1466(%8780 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8781 : !llvm.ptr):
    %8782 = "mini.invariant"(%8781) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8783 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1467] : () -> ()
  ^bb1468:
    %8784 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%8784, %8783) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1469] : () -> ()
  ^bb1470:
    %8785 = "llvm.getelementptr"(%8781) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8786 = "mini.checkflag"(%8785) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %8787 = "llvm.load"(%8786) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%8787) [^bb1468, ^bb1468] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1471:
    %8788 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
    "llvm.store"(%8788, %8783) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1469] : () -> ()
  ^bb1472:
    %8789 = "llvm.mlir.constant"() <{"value" = 3 : i32}> : () -> i32
    "llvm.store"(%8789, %8783) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1469] : () -> ()
  ^bb1473:
    %8790 = "llvm.getelementptr"(%8781) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8791 = "mini.checkflag"(%8790) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %8792 = "llvm.load"(%8791) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%8792) [^bb1471, ^bb1474] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1474:
    %8793 = "llvm.getelementptr"(%8781) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8794 = "mini.checkflag"(%8793) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %8795 = "llvm.load"(%8794) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%8795) [^bb1472, ^bb1472] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1475:
    %8796 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
    "llvm.store"(%8796, %8783) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1469] : () -> ()
  ^bb1476:
    %8797 = "llvm.getelementptr"(%8781) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8798 = "mini.checkflag"(%8797) {"typ_name" = "Beaver"} : (!llvm.ptr) -> !mini.ptr<i1>
    %8799 = "llvm.load"(%8798) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%8799) [^bb1475, ^bb1475] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1467:
    %8800 = "llvm.getelementptr"(%8781) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8801 = "mini.checkflag"(%8800) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %8802 = "llvm.load"(%8801) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%8802) [^bb1470, ^bb1477] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1477:
    %8803 = "llvm.getelementptr"(%8781) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8804 = "mini.checkflag"(%8803) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %8805 = "llvm.load"(%8804) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%8805) [^bb1473, ^bb1478] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1478:
    %8806 = "llvm.getelementptr"(%8781) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8807 = "mini.checkflag"(%8806) {"typ_name" = "Animal"} : (!llvm.ptr) -> !mini.ptr<i1>
    %8808 = "llvm.load"(%8807) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%8808) [^bb1476, ^bb1476] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1469:
    %8809 = "llvm.extractvalue"(%8780) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8810 = "llvm.load"(%8783) : (!llvm.ptr) -> i32
    %8811 = "llvm.getelementptr"(%8809, %8810) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<7 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8812 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %8813 = "llvm.getelementptr"(%8811, %8812) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8813) : (!llvm.ptr) -> ()
  }) {"func_name" = "Bard_B_take_aPtri32_bPtri32_take_aAnimal_bBeaver_take_aPtrf64_bPtrf64_take_aPtri32_bPtrf64", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
    %8814 = "mini.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "Exception", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Exception">
    %8815 = "mini.unwrap"(%8814) : (!mini.fatptr<"Exception">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8816 = "mini.parameterizations_array"() : () -> !llvm.ptr
    "mini.method_call"(%8816, %8815) {"offset" = 4 : i32, "vptrs" = [], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %8817 = "mini.literal"() {"value" = 1205 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8818 = "mini.literal"() {"value" = 59 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8819 = "mini.create_buffer"(%8818) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %8820 = builtin.unrealized_conversion_cast %8819 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %8821 = "mini.refer"(%8820) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %8822 = "mini.literal"() {"typ" = !llvm.array<58 x i8>, "value" = "C:\\Users\\PaulK\\OneDrive\\Documents\\PL\\PyPL\\tmpnjjh5_8x.mini"} : () -> !llvm.ptr
    %8823 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%8821, %8823, %8822) {"typ" = !llvm.array<58 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %8824 = "mini.literal"() {"value" = 58 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8825 = "mini.literal"() {"value" = 59 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8826 = "mini.unwrap"(%8821) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %8827 = "mini.unwrap"(%8824) : (!mini.ptr<i32>) -> i32
    %8828 = "mini.unwrap"(%8825) : (!mini.ptr<i32>) -> i32
    %8829 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %8830 = "mini.literal"() {"value" = 58 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8831 = "mini.literal"() {"value" = 59 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8832 = builtin.unrealized_conversion_cast %8821 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %8833 = "mini.unwrap"(%8832) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %8834 = builtin.unrealized_conversion_cast %8830 : !mini.ptr<i32> to !mini.ptr<i32>
    %8835 = "mini.unwrap"(%8834) : (!mini.ptr<i32>) -> i32
    %8836 = builtin.unrealized_conversion_cast %8831 : !mini.ptr<i32> to !mini.ptr<i32>
    %8837 = "mini.unwrap"(%8836) : (!mini.ptr<i32>) -> i32
    %8838 = "mini.unwrap"(%8829) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8839 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %8840 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %8841 = "mini.parameterizations_array"(%8839, %8840, %8840) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%8841, %8838, %8833, %8835, %8837) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %8842 = builtin.unrealized_conversion_cast %8817 : !mini.ptr<i32> to !mini.ptr<i32>
    %8843 = "mini.unwrap"(%8842) : (!mini.ptr<i32>) -> i32
    %8844 = "mini.to_fat_ptr"(%8829) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %8845 = "mini.unwrap"(%8844) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8846 = "mini.unwrap"(%8814) : (!mini.fatptr<"Exception">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8847 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %8848 = "mini.parameterizations_array"(%8840, %8847) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%8848, %8846, %8843, %8845) {"offset" = 5 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %8849 = builtin.unrealized_conversion_cast %8814 : !mini.fatptr<"Exception"> to !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>
    %8850 = "mini.unwrap"(%8849) : (!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %8851 = "mini.coro_yield"(%8850) : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
    %8852 = "mini.wrap"(%8851) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>
  }) {"func_name" = "throw", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
    %8853 = "mini.literal"() {"value" = 88 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8854 = "mini.unionize"(%8853) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %8855 = "mini.unwrap"(%8854) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %8856 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %8857 = "mini.parameterizations_array"(%8856) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%8857, %8855) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    "mini.coro_yield"() : () -> ()
    %8858 = "mini.literal"() {"value" = 90 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8859 = "mini.unionize"(%8858) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %8860 = "mini.unwrap"(%8859) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %8861 = "mini.parameterizations_array"(%8856) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%8861, %8860) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
  }) {"func_name" = "print88", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.arg_passer"() {"func_name" = "coroutine_dhmcdbolhw_passer", "arg_types" = [], "yield_type" = !llvm.struct<(!llvm.ptr, i160)>} : () -> ()
  "mini.buffer_filler"() {"func_name" = "coroutine_dhmcdbolhw_buffer_filler", "arg_types" = [], "yield_type" = !llvm.struct<(!llvm.ptr, i160)>} : () -> ()
  "mini.func"() ({
    %8862 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8863 = "mini.create_buffer"(%8862) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %8864 = builtin.unrealized_conversion_cast %8863 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %8865 = "mini.refer"(%8864) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %8866 = "mini.literal"() {"typ" = !llvm.array<3 x i8>, "value" = "one"} : () -> !llvm.ptr
    %8867 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%8865, %8867, %8866) {"typ" = !llvm.array<3 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %8868 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8869 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8870 = "mini.unwrap"(%8865) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %8871 = "mini.unwrap"(%8868) : (!mini.ptr<i32>) -> i32
    %8872 = "mini.unwrap"(%8869) : (!mini.ptr<i32>) -> i32
    %8873 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %8874 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8875 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8876 = builtin.unrealized_conversion_cast %8865 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %8877 = "mini.unwrap"(%8876) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %8878 = builtin.unrealized_conversion_cast %8874 : !mini.ptr<i32> to !mini.ptr<i32>
    %8879 = "mini.unwrap"(%8878) : (!mini.ptr<i32>) -> i32
    %8880 = builtin.unrealized_conversion_cast %8875 : !mini.ptr<i32> to !mini.ptr<i32>
    %8881 = "mini.unwrap"(%8880) : (!mini.ptr<i32>) -> i32
    %8882 = "mini.unwrap"(%8873) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8883 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %8884 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %8885 = "mini.parameterizations_array"(%8883, %8884, %8884) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%8885, %8882, %8877, %8879, %8881) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %8886 = builtin.unrealized_conversion_cast %8873 : !mini.fatptr<"String"> to !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %8887 = "mini.unwrap"(%8886) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %8888 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %8889 = "mini.parameterizations_array"(%8888) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%8889, %8887) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    "mini.return"() : () -> ()
    %8890 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8891 = "mini.create_buffer"(%8890) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %8892 = builtin.unrealized_conversion_cast %8891 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %8893 = "mini.refer"(%8892) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %8894 = "mini.literal"() {"typ" = !llvm.array<3 x i8>, "value" = "two"} : () -> !llvm.ptr
    %8895 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%8893, %8895, %8894) {"typ" = !llvm.array<3 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %8896 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8897 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8898 = "mini.unwrap"(%8893) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %8899 = "mini.unwrap"(%8896) : (!mini.ptr<i32>) -> i32
    %8900 = "mini.unwrap"(%8897) : (!mini.ptr<i32>) -> i32
    %8901 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %8902 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8903 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8904 = builtin.unrealized_conversion_cast %8893 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %8905 = "mini.unwrap"(%8904) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %8906 = builtin.unrealized_conversion_cast %8902 : !mini.ptr<i32> to !mini.ptr<i32>
    %8907 = "mini.unwrap"(%8906) : (!mini.ptr<i32>) -> i32
    %8908 = builtin.unrealized_conversion_cast %8903 : !mini.ptr<i32> to !mini.ptr<i32>
    %8909 = "mini.unwrap"(%8908) : (!mini.ptr<i32>) -> i32
    %8910 = "mini.unwrap"(%8901) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8911 = "mini.parameterizations_array"(%8883, %8884, %8884) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%8911, %8910, %8905, %8907, %8909) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %8912 = builtin.unrealized_conversion_cast %8901 : !mini.fatptr<"String"> to !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %8913 = "mini.unwrap"(%8912) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %8914 = "mini.parameterizations_array"(%8888) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%8914, %8913) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    "mini.return"() : () -> ()
  }) {"func_name" = "grabo", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1479(%8915 : i32, %8916 : i32):
    %8917 = "mini.wrap"(%8915) : (i32) -> !mini.ptr<i32>
    %8918 = "mini.wrap"(%8916) : (i32) -> !mini.ptr<i32>
    %8919 = "mini.unwrap"(%8917) : (!mini.ptr<i32>) -> i32
    %8920 = "mini.unwrap"(%8918) : (!mini.ptr<i32>) -> i32
    %8921 = "mini.arithmetic"(%8919, %8920) {"op" = "ADD"} : (i32, i32) -> i32
    %8922 = "mini.wrap"(%8921) : (i32) -> !mini.ptr<i32>
    %8923 = builtin.unrealized_conversion_cast %8922 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.return"(%8923) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "_functionliteral_bhurvujjdr", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1480(%8924 : i32):
    %8925 = "mini.wrap"(%8924) : (i32) -> !mini.ptr<i32>
    %8926 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8927 = "mini.unwrap"(%8925) : (!mini.ptr<i32>) -> i32
    %8928 = "mini.unwrap"(%8926) : (!mini.ptr<i32>) -> i32
    %8929 = "mini.arithmetic"(%8927, %8928) {"op" = "MUL"} : (i32, i32) -> i32
    %8930 = "mini.wrap"(%8929) : (i32) -> !mini.ptr<i32>
    %8931 = builtin.unrealized_conversion_cast %8930 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.return"(%8931) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "_functionliteral_avxssgxxhx", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
    %8932 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8933 = builtin.unrealized_conversion_cast %8932 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.return"(%8933) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "_functionliteral_llsldaffsn", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1481(%8934 : i32):
    %8935 = "mini.wrap"(%8934) : (i32) -> !mini.ptr<i32>
    %8936 = "mini.unionize"(%8935) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %8937 = "mini.unwrap"(%8936) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %8938 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %8939 = "mini.parameterizations_array"(%8938) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%8939, %8937) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    "mini.return"() : () -> ()
  }) {"func_name" = "_functionliteral_efzdvhclja", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1482(%8940 : i32):
    %8941 = "mini.wrap"(%8940) : (i32) -> !mini.ptr<i32>
    %8942 = builtin.unrealized_conversion_cast %8941 : !mini.ptr<i32> to !mini.ptr<i32>
    %8943 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8944 = "mini.literal"() {"value" = 0 : i8, "typ" = i8} : () -> !mini.ptr<i8>
    %8945 = builtin.unrealized_conversion_cast %8944 : !mini.ptr<i8> to !mini.ptr<i8>
    %8946 = "mini.literal"() {"value" = 1 : i8, "typ" = i8} : () -> !mini.ptr<i8>
    %8947 = builtin.unrealized_conversion_cast %8946 : !mini.ptr<i8> to !mini.ptr<i8>
    "mini.while"() ({
      %8948 = "mini.unwrap"(%8943) : (!mini.ptr<i32>) -> i32
      %8949 = "mini.unwrap"(%8942) : (!mini.ptr<i32>) -> i32
      %8950 = "mini.comparison"(%8948, %8949) {"op" = "LT"} : (i32, i32) -> i1
      %8951 = "mini.wrap"(%8950) : (i1) -> !mini.ptr<i32>
      %8952 = "mini.unwrap"(%8951) : (!mini.ptr<i32>) -> i1
    }, {
      %8953 = "mini.unwrap"(%8945) : (!mini.ptr<i8>) -> i8
      %8954 = "mini.unwrap"(%8947) : (!mini.ptr<i8>) -> i8
      %8955 = "mini.arithmetic"(%8953, %8954) {"op" = "ADD"} : (i8, i8) -> i8
      %8956 = "mini.wrap"(%8955) : (i8) -> !mini.ptr<i8>
      "mini.castassign"(%8945, %8956) ({
        %8957 = builtin.unrealized_conversion_cast %8956 : !mini.ptr<i8> to !mini.ptr<i8>
      }) {"from_typ" = i8, "to_typ" = i8, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ", "should_offset"} : (!mini.ptr<i8>, !mini.ptr<i8>) -> ()
      %8958 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %8959 = "mini.unwrap"(%8943) : (!mini.ptr<i32>) -> i32
      %8960 = "mini.unwrap"(%8958) : (!mini.ptr<i32>) -> i32
      %8961 = "mini.arithmetic"(%8959, %8960) {"op" = "ADD"} : (i32, i32) -> i32
      %8962 = "mini.wrap"(%8961) : (i32) -> !mini.ptr<i32>
      "mini.castassign"(%8943, %8962) ({
        %8963 = builtin.unrealized_conversion_cast %8962 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %8964 = builtin.unrealized_conversion_cast %8945 : !mini.ptr<i8> to !mini.ptr<i8>
    "mini.return"(%8964) : (!mini.ptr<i8>) -> ()
  }) {"func_name" = "i32toi8", "result_type" = i8, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1483(%8965 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %8966 = "mini.wrap"(%8965) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %8967 = "mini.to_fat_ptr"(%8966) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %8968 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8969 = "mini.create_buffer"(%8968) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %8970 = builtin.unrealized_conversion_cast %8969 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %8971 = "mini.refer"(%8970) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %8972 = "mini.literal"() {"typ" = !llvm.array<0 x i8>, "value" = ""} : () -> !llvm.ptr
    %8973 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%8971, %8973, %8972) {"typ" = !llvm.array<0 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %8974 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8975 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8976 = "mini.unwrap"(%8971) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %8977 = "mini.unwrap"(%8974) : (!mini.ptr<i32>) -> i32
    %8978 = "mini.unwrap"(%8975) : (!mini.ptr<i32>) -> i32
    %8979 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %8980 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8981 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8982 = builtin.unrealized_conversion_cast %8971 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %8983 = "mini.unwrap"(%8982) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %8984 = builtin.unrealized_conversion_cast %8980 : !mini.ptr<i32> to !mini.ptr<i32>
    %8985 = "mini.unwrap"(%8984) : (!mini.ptr<i32>) -> i32
    %8986 = builtin.unrealized_conversion_cast %8981 : !mini.ptr<i32> to !mini.ptr<i32>
    %8987 = "mini.unwrap"(%8986) : (!mini.ptr<i32>) -> i32
    %8988 = "mini.unwrap"(%8979) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8989 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %8990 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %8991 = "mini.parameterizations_array"(%8989, %8990, %8990) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%8991, %8988, %8983, %8985, %8987) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %8992 = "mini.to_fat_ptr"(%8979) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %8993 = "mini.refer"(%8992) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %8994 = "mini.unwrap"(%8967) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8995 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %8996 = "mini.method_call"(%8995, %8994) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %8997 = builtin.unrealized_conversion_cast %8996 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %8998 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8999 = "mini.create_buffer"(%8998) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %9000 = builtin.unrealized_conversion_cast %8999 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %9001 = "mini.refer"(%9000) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %9002 = "mini.literal"() {"typ" = !llvm.array<1 x i8>, "value" = "r"} : () -> !llvm.ptr
    %9003 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%9001, %9003, %9002) {"typ" = !llvm.array<1 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %9004 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9005 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9006 = "mini.unwrap"(%9001) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %9007 = "mini.unwrap"(%9004) : (!mini.ptr<i32>) -> i32
    %9008 = "mini.unwrap"(%9005) : (!mini.ptr<i32>) -> i32
    %9009 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %9010 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9011 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9012 = builtin.unrealized_conversion_cast %9001 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %9013 = "mini.unwrap"(%9012) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %9014 = builtin.unrealized_conversion_cast %9010 : !mini.ptr<i32> to !mini.ptr<i32>
    %9015 = "mini.unwrap"(%9014) : (!mini.ptr<i32>) -> i32
    %9016 = builtin.unrealized_conversion_cast %9011 : !mini.ptr<i32> to !mini.ptr<i32>
    %9017 = "mini.unwrap"(%9016) : (!mini.ptr<i32>) -> i32
    %9018 = "mini.unwrap"(%9009) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9019 = "mini.parameterizations_array"(%8989, %8990, %8990) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%9019, %9018, %9013, %9015, %9017) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %9020 = "mini.unwrap"(%9009) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9021 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %9022 = "mini.method_call"(%9021, %9020) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %9023 = builtin.unrealized_conversion_cast %9022 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %9024 = "mini.unwrap"(%8997) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %9025 = "mini.unwrap"(%9023) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %9026 = "mini.call"(%9024, %9025) {"func_name" = "fopen", "ret_type" = !llvm.struct<(!llvm.ptr)>} : (!llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>) -> !mini.buffer<!mini.ptr<i32>>
    %9027 = builtin.unrealized_conversion_cast %9026 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %9028 = "mini.refer"(%9027) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    "mini.while"() ({
      %9029 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
      %9030 = "mini.unwrap"(%9029) : (!mini.ptr<i1>) -> i1
    }, {
      %9031 = "mini.unwrap"(%9028) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
      %9032 = "mini.call"(%9031) {"func_name" = "fgetc", "ret_type" = i32} : (!llvm.struct<(!llvm.ptr)>) -> !mini.ptr<i32>
      %9033 = "mini.literal"() {"value" = -1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %9034 = "mini.unwrap"(%9032) : (!mini.ptr<i32>) -> i32
      %9035 = "mini.unwrap"(%9033) : (!mini.ptr<i32>) -> i32
      %9036 = "mini.comparison"(%9034, %9035) {"op" = "EQ"} : (i32, i32) -> i1
      %9037 = "mini.wrap"(%9036) : (i1) -> !mini.ptr<i32>
      %9038 = "mini.unwrap"(%9037) : (!mini.ptr<i32>) -> i1
      "mini.if"(%9038) ({
        "mini.break"() [^bb1484] : () -> ()
      }) : (i1) -> ()
      %9039 = "mini.unwrap"(%9032) : (!mini.ptr<i32>) -> i32
      %9040 = "mini.call"(%9039) {"func_name" = "i32toi8", "ret_type" = i8} : (i32) -> !mini.ptr<i8>
      %9041 = builtin.unrealized_conversion_cast %9040 : !mini.ptr<i8> to !mini.ptr<i8>
      %9042 = "mini.unwrap"(%9041) : (!mini.ptr<i8>) -> i8
      %9043 = "mini.unwrap"(%8993) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %9044 = "mini.parameterization"() {"id_hierarchy" = ["i8_typ"], "name_hierarchy" = ["Ptri8"]} : () -> !llvm.ptr
      %9045 = "mini.parameterizations_array"(%9044) : (!llvm.ptr) -> !llvm.ptr
      %9046 = "mini.method_call"(%9045, %9043, %9042) {"offset" = 8 : i32, "vptrs" = ["i8_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i8) -> !mini.fatptr<"String">
      %9047 = "mini.to_fat_ptr"(%9046) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    }) : () -> ()
    %9048 = "mini.unwrap"(%9028) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %9049 = "mini.call"(%9048) {"func_name" = "fclose", "ret_type" = i32} : (!llvm.struct<(!llvm.ptr)>) -> !mini.ptr<i32>
    %9050 = "mini.to_fat_ptr"(%8993) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.return"(%9050) : (!mini.fatptr<"String">) -> ()
  }) {"func_name" = "read_file", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1485(%9051 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9052 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %9053 = "mini.wrap"(%9051) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %9054 = "mini.to_fat_ptr"(%9053) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %9055 = "mini.wrap"(%9052) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %9056 = "mini.to_fat_ptr"(%9055) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %9057 = "mini.unwrap"(%9054) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9058 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %9059 = "mini.method_call"(%9058, %9057) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %9060 = builtin.unrealized_conversion_cast %9059 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %9061 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9062 = "mini.create_buffer"(%9061) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %9063 = builtin.unrealized_conversion_cast %9062 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %9064 = "mini.refer"(%9063) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %9065 = "mini.literal"() {"typ" = !llvm.array<1 x i8>, "value" = "w"} : () -> !llvm.ptr
    %9066 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%9064, %9066, %9065) {"typ" = !llvm.array<1 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %9067 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9068 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9069 = "mini.unwrap"(%9064) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %9070 = "mini.unwrap"(%9067) : (!mini.ptr<i32>) -> i32
    %9071 = "mini.unwrap"(%9068) : (!mini.ptr<i32>) -> i32
    %9072 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %9073 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9074 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9075 = builtin.unrealized_conversion_cast %9064 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %9076 = "mini.unwrap"(%9075) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %9077 = builtin.unrealized_conversion_cast %9073 : !mini.ptr<i32> to !mini.ptr<i32>
    %9078 = "mini.unwrap"(%9077) : (!mini.ptr<i32>) -> i32
    %9079 = builtin.unrealized_conversion_cast %9074 : !mini.ptr<i32> to !mini.ptr<i32>
    %9080 = "mini.unwrap"(%9079) : (!mini.ptr<i32>) -> i32
    %9081 = "mini.unwrap"(%9072) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9082 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %9083 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %9084 = "mini.parameterizations_array"(%9082, %9083, %9083) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%9084, %9081, %9076, %9078, %9080) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %9085 = "mini.unwrap"(%9072) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9086 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %9087 = "mini.method_call"(%9086, %9085) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %9088 = builtin.unrealized_conversion_cast %9087 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %9089 = "mini.unwrap"(%9060) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %9090 = "mini.unwrap"(%9088) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %9091 = "mini.call"(%9089, %9090) {"func_name" = "fopen", "ret_type" = !llvm.struct<(!llvm.ptr)>} : (!llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>) -> !mini.buffer<!mini.ptr<i32>>
    %9092 = builtin.unrealized_conversion_cast %9091 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %9093 = "mini.refer"(%9092) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    %9094 = "mini.unwrap"(%9056) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9095 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %9096 = "mini.method_call"(%9095, %9094) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %9097 = builtin.unrealized_conversion_cast %9096 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %9098 = "mini.unwrap"(%9093) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %9099 = "mini.unwrap"(%9097) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %9100 = "mini.call"(%9098, %9099) {"func_name" = "fprintf", "ret_type" = i32} : (!llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>) -> !mini.ptr<i32>
    %9101 = "mini.unwrap"(%9093) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %9102 = "mini.call"(%9101) {"func_name" = "fclose", "ret_type" = i32} : (!llvm.struct<(!llvm.ptr)>) -> !mini.ptr<i32>
  }) {"func_name" = "write_file", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1486(%9103 : i32):
    %9104 = "mini.wrap"(%9103) : (i32) -> !mini.ptr<i32>
    %9105 = "mini.unwrap"(%9104) : (!mini.ptr<i32>) -> i32
    %9106 = "mini.unwrap"(%9104) : (!mini.ptr<i32>) -> i32
    %9107 = "mini.arithmetic"(%9105, %9106) {"op" = "MUL"} : (i32, i32) -> i32
    %9108 = "mini.wrap"(%9107) : (i32) -> !mini.ptr<i32>
    %9109 = "mini.unionize"(%9108) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %9110 = "mini.unwrap"(%9109) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %9111 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %9112 = "mini.parameterizations_array"(%9111) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%9112, %9110) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    "mini.return"() : () -> ()
  }) {"func_name" = "_functionliteral_ivemcbsovo", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1487(%9113 : i32, %9114 : i32):
    %9115 = "mini.wrap"(%9113) : (i32) -> !mini.ptr<i32>
    %9116 = "mini.wrap"(%9114) : (i32) -> !mini.ptr<i32>
    %9117 = "mini.unwrap"(%9115) : (!mini.ptr<i32>) -> i32
    %9118 = "mini.unwrap"(%9116) : (!mini.ptr<i32>) -> i32
    %9119 = "mini.arithmetic"(%9117, %9118) {"op" = "ADD"} : (i32, i32) -> i32
    %9120 = "mini.wrap"(%9119) : (i32) -> !mini.ptr<i32>
    %9121 = builtin.unrealized_conversion_cast %9120 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.return"(%9121) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "_functionliteral_ffjfutvhxc", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1488(%9122 : i32, %9123 : i32):
    %9124 = "mini.wrap"(%9122) : (i32) -> !mini.ptr<i32>
    %9125 = "mini.wrap"(%9123) : (i32) -> !mini.ptr<i32>
    %9126 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9127 = "mini.addr_of"() {"global_name" = @_functionliteral_ffjfutvhxc} : () -> !llvm.ptr
    %9128 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "llvm.store"(%9127, %9128) <{"ordering" = 0 : i64}> : (!llvm.ptr, !llvm.ptr) -> ()
    "mini.while"() ({
      %9129 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
      %9130 = "mini.unwrap"(%9129) : (!mini.ptr<i1>) -> i1
    }, {
      %9131 = builtin.unrealized_conversion_cast %9124 : !mini.ptr<i32> to !mini.ptr<i32>
      %9132 = "mini.unwrap"(%9131) : (!mini.ptr<i32>) -> i32
      %9133 = builtin.unrealized_conversion_cast %9125 : !mini.ptr<i32> to !mini.ptr<i32>
      %9134 = "mini.unwrap"(%9133) : (!mini.ptr<i32>) -> i32
      %9135 = "mini.unwrap"(%9128) : (!llvm.ptr) -> !llvm.ptr
      %9136 = "mini.fptr_call"(%9135, %9132, %9134) {"ret_type" = i32} : (!llvm.ptr, i32, i32) -> !mini.ptr<i32>
      %9137 = "mini.unwrap"(%9136) : (!mini.ptr<i32>) -> i32
      %9138 = "mini.unwrap"(%9126) : (!mini.ptr<i32>) -> i32
      %9139 = "mini.arithmetic"(%9137, %9138) {"op" = "ADD"} : (i32, i32) -> i32
      %9140 = "mini.wrap"(%9139) : (i32) -> !mini.ptr<i32>
      %9141 = "mini.unionize"(%9140) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %9142 = "mini.unwrap"(%9141) : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !llvm.struct<(!llvm.ptr, i32)>
      %9143 = "mini.coro_yield"(%9142) : (!llvm.struct<(!llvm.ptr, i32)>) -> !llvm.struct<(!llvm.ptr, i32)>
      %9144 = "mini.wrap"(%9143) : (!llvm.struct<(!llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %9145 = "mini.checkflag"(%9144) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i1>
      %9146 = "mini.unwrap"(%9145) : (!mini.ptr<i1>) -> i1
      %9147 = builtin.unrealized_conversion_cast %9144 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      "mini.if"(%9146) ({
        %9148 = "mini.narrow"(%9147) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
        %9149 = "mini.unwrap"(%9126) : (!mini.ptr<i32>) -> i32
        %9150 = "mini.unwrap"(%9148) : (!mini.ptr<i32>) -> i32
        %9151 = "mini.arithmetic"(%9149, %9150) {"op" = "ADD"} : (i32, i32) -> i32
        %9152 = "mini.wrap"(%9151) : (i32) -> !mini.ptr<i32>
        "mini.castassign"(%9126, %9152) ({
          %9153 = builtin.unrealized_conversion_cast %9152 : !mini.ptr<i32> to !mini.ptr<i32>
        }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
        "mini.castassign"(%9147, %9148) ({
          %9154 = "mini.unionize"(%9148) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
        }) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.ptr<i32>) -> ()
      }) : (i1) -> ()
    }) : () -> ()
    "mini.return"() : () -> ()
  }) {"func_name" = "_functionliteral_nhyvdnbhld", "result_type" = !llvm.void, "yield_type" = !mini.ptr<i32>} : () -> ()
  "mini.arg_passer"() {"func_name" = "coroutine_dowemmegum_passer", "arg_types" = [i32, i32], "yield_type" = !llvm.struct<(!llvm.ptr, i32)>} : () -> ()
  "mini.buffer_filler"() {"func_name" = "coroutine_dowemmegum_buffer_filler", "arg_types" = [i32, i32], "yield_type" = !llvm.struct<(!llvm.ptr, i32)>} : () -> ()
  "mini.arg_passer"() {"func_name" = "coroutine_akfqpqfxun_passer", "arg_types" = [], "ret_type" = i32, "ret_flag" = "i32_typ", "yield_type" = !llvm.struct<(!llvm.ptr, i160)>} : () -> ()
  "mini.buffer_filler"() {"func_name" = "coroutine_akfqpqfxun_buffer_filler", "arg_types" = [], "yield_type" = !llvm.struct<(!llvm.ptr, i160)>} : () -> ()
  "mini.arg_passer"() {"func_name" = "coroutine_bcvlnaxceh_passer", "arg_types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "yield_type" = !llvm.struct<(!llvm.ptr, i160)>} : () -> ()
  "mini.buffer_filler"() {"func_name" = "coroutine_bcvlnaxceh_buffer_filler", "arg_types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "yield_type" = !llvm.struct<(!llvm.ptr, i160)>} : () -> ()
  "mini.func"() ({
  ^bb1489(%9155 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %9156 = "mini.wrap"(%9155) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Channel">
    %9157 = "mini.literal"() {"value" = 88 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9158 = builtin.unrealized_conversion_cast %9157 : !mini.ptr<i32> to !mini.ptr<i32>
    %9159 = "mini.unwrap"(%9158) : (!mini.ptr<i32>) -> i32
    %9160 = "mini.unwrap"(%9156) : (!mini.fatptr<"Channel">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9161 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %9162 = "mini.parameterizations_array"(%9161) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%9162, %9160, %9159) {"offset" = 3 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 7 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
    "mini.return"() : () -> ()
  }) {"func_name" = "_functionliteral_stnvqtrzkz", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1490(%9163 : i32):
    %9164 = "mini.wrap"(%9163) : (i32) -> !mini.ptr<i32>
    %9165 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9166 = "mini.unwrap"(%9164) : (!mini.ptr<i32>) -> i32
    %9167 = "mini.unwrap"(%9165) : (!mini.ptr<i32>) -> i32
    %9168 = "mini.arithmetic"(%9166, %9167) {"op" = "MOD"} : (i32, i32) -> i32
    %9169 = "mini.wrap"(%9168) : (i32) -> !mini.ptr<i32>
    %9170 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9171 = "mini.unwrap"(%9169) : (!mini.ptr<i32>) -> i32
    %9172 = "mini.unwrap"(%9170) : (!mini.ptr<i32>) -> i32
    %9173 = "mini.comparison"(%9171, %9172) {"op" = "EQ"} : (i32, i32) -> i1
    %9174 = "mini.wrap"(%9173) : (i1) -> !mini.ptr<i32>
    %9175 = builtin.unrealized_conversion_cast %9174 : !mini.ptr<i32> to !mini.ptr<i1>
    "mini.return"(%9175) : (!mini.ptr<i1>) -> ()
  }) {"func_name" = "_functionliteral_wdjcpetwqf", "result_type" = i1, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1491(%9176 : i32):
    %9177 = "mini.wrap"(%9176) : (i32) -> !mini.ptr<i32>
    %9178 = "mini.unwrap"(%9177) : (!mini.ptr<i32>) -> i32
    %9179 = "mini.unwrap"(%9177) : (!mini.ptr<i32>) -> i32
    %9180 = "mini.arithmetic"(%9178, %9179) {"op" = "MUL"} : (i32, i32) -> i32
    %9181 = "mini.wrap"(%9180) : (i32) -> !mini.ptr<i32>
    %9182 = builtin.unrealized_conversion_cast %9181 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.return"(%9182) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "_functionliteral_wssjpxcmkl", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.main"() ({
    "cf.br"() [^bb1492] : () -> ()
  ^bb1492:
    "cf.br"() [^bb1493] : () -> ()
  ^bb1493:
    "cf.br"() [^bb1494] : () -> ()
  ^bb1494:
    "cf.br"() [^bb1495] : () -> ()
  ^bb1495:
    "cf.br"() [^bb1496] : () -> ()
  ^bb1496:
    "cf.br"() [^bb1497] : () -> ()
  ^bb1497:
    "cf.br"() [^bb1498] : () -> ()
  ^bb1498:
    "cf.br"() [^bb1499] : () -> ()
  ^bb1499:
    "cf.br"() [^bb1500] : () -> ()
  ^bb1500:
    "cf.br"() [^bb1501] : () -> ()
  ^bb1501:
    "cf.br"() [^bb1502] : () -> ()
  ^bb1502:
    "cf.br"() [^bb1503] : () -> ()
  ^bb1503:
    "cf.br"() [^bb1504] : () -> ()
  ^bb1504:
    "cf.br"() [^bb1505] : () -> ()
  ^bb1505:
    "cf.br"() [^bb1506] : () -> ()
  ^bb1506:
    "cf.br"() [^bb1507] : () -> ()
  ^bb1507:
    "cf.br"() [^bb1508] : () -> ()
  ^bb1508:
    "cf.br"() [^bb1509] : () -> ()
  ^bb1509:
    "cf.br"() [^bb1510] : () -> ()
  ^bb1510:
    "cf.br"() [^bb1511] : () -> ()
  ^bb1511:
    "cf.br"() [^bb1512] : () -> ()
  ^bb1512:
    "cf.br"() [^bb1513] : () -> ()
  ^bb1513:
    "cf.br"() [^bb1514] : () -> ()
  ^bb1514:
    "cf.br"() [^bb1515] : () -> ()
  ^bb1515:
    "cf.br"() [^bb1516] : () -> ()
  ^bb1516:
    "cf.br"() [^bb1517] : () -> ()
  ^bb1517:
    "cf.br"() [^bb1518] : () -> ()
  ^bb1518:
    "cf.br"() [^bb1519] : () -> ()
  ^bb1519:
    "cf.br"() [^bb1520] : () -> ()
  ^bb1520:
    "cf.br"() [^bb1521] : () -> ()
  ^bb1521:
    "cf.br"() [^bb1522] : () -> ()
  ^bb1522:
    "cf.br"() [^bb1523] : () -> ()
  ^bb1523:
    "cf.br"() [^bb1524] : () -> ()
  ^bb1524:
    "cf.br"() [^bb1525] : () -> ()
  ^bb1525:
    "cf.br"() [^bb1526] : () -> ()
  ^bb1526:
    "cf.br"() [^bb1527] : () -> ()
  ^bb1527:
    "cf.br"() [^bb1528] : () -> ()
  ^bb1528:
    "cf.br"() [^bb1529] : () -> ()
  ^bb1529:
    "cf.br"() [^bb1530] : () -> ()
  ^bb1530:
    "cf.br"() [^bb1531] : () -> ()
  ^bb1531:
    "cf.br"() [^bb1532] : () -> ()
  ^bb1532:
    "cf.br"() [^bb1533] : () -> ()
  ^bb1533:
    "cf.br"() [^bb1534] : () -> ()
  ^bb1534:
    "cf.br"() [^bb1535] : () -> ()
  ^bb1535:
    "cf.br"() [^bb1536] : () -> ()
  ^bb1536:
    "cf.br"() [^bb1537] : () -> ()
  ^bb1537:
    "cf.br"() [^bb1538] : () -> ()
  ^bb1538:
    "cf.br"() [^bb1539] : () -> ()
  ^bb1539:
    "cf.br"() [^bb1540] : () -> ()
  ^bb1540:
    "cf.br"() [^bb1541] : () -> ()
  ^bb1541:
    "cf.br"() [^bb1542] : () -> ()
  ^bb1542:
    "cf.br"() [^bb1543] : () -> ()
  ^bb1543:
    "cf.br"() [^bb1544] : () -> ()
  ^bb1544:
    "cf.br"() [^bb1545] : () -> ()
  ^bb1545:
    "cf.br"() [^bb1546] : () -> ()
  ^bb1546:
    "cf.br"() [^bb1547] : () -> ()
  ^bb1547:
    "cf.br"() [^bb1548] : () -> ()
  ^bb1548:
    "cf.br"() [^bb1549] : () -> ()
  ^bb1549:
    "cf.br"() [^bb1550] : () -> ()
  ^bb1550:
    "cf.br"() [^bb1551] : () -> ()
  ^bb1551:
    "cf.br"() [^bb1552] : () -> ()
  ^bb1552:
    "cf.br"() [^bb1553] : () -> ()
  ^bb1553:
    "cf.br"() [^bb1554] : () -> ()
  ^bb1554:
    "cf.br"() [^bb1555] : () -> ()
  ^bb1555:
    "cf.br"() [^bb1556] : () -> ()
  ^bb1556:
    "cf.br"() [^bb1557] : () -> ()
  ^bb1557:
    "cf.br"() [^bb1558] : () -> ()
  ^bb1558:
    "cf.br"() [^bb1559] : () -> ()
  ^bb1559:
    "cf.br"() [^bb1560] : () -> ()
  ^bb1560:
    "cf.br"() [^bb1561] : () -> ()
  ^bb1561:
    "cf.br"() [^bb1562] : () -> ()
  ^bb1562:
    "cf.br"() [^bb1563] : () -> ()
  ^bb1563:
    "cf.br"() [^bb1564] : () -> ()
  ^bb1564:
    "cf.br"() [^bb1565] : () -> ()
  ^bb1565:
    "cf.br"() [^bb1566] : () -> ()
  ^bb1566:
    "cf.br"() [^bb1567] : () -> ()
  ^bb1567:
    "cf.br"() [^bb1568] : () -> ()
  ^bb1568:
    "cf.br"() [^bb1569] : () -> ()
  ^bb1569:
    "cf.br"() [^bb1570] : () -> ()
  ^bb1570:
    "cf.br"() [^bb1571] : () -> ()
  ^bb1571:
    "cf.br"() [^bb1572] : () -> ()
  ^bb1572:
    "cf.br"() [^bb1573] : () -> ()
  ^bb1573:
    "cf.br"() [^bb1574] : () -> ()
  ^bb1574:
    "cf.br"() [^bb1575] : () -> ()
  ^bb1575:
    "cf.br"() [^bb1576] : () -> ()
  ^bb1576:
    "cf.br"() [^bb1577] : () -> ()
  ^bb1577:
    "cf.br"() [^bb1578] : () -> ()
  ^bb1578:
    "cf.br"() [^bb1579] : () -> ()
  ^bb1579:
    "cf.br"() [^bb1580] : () -> ()
  ^bb1580:
    "cf.br"() [^bb1581] : () -> ()
  ^bb1581:
    "cf.br"() [^bb1582] : () -> ()
  ^bb1582:
    "cf.br"() [^bb1583] : () -> ()
  ^bb1583:
    "cf.br"() [^bb1584] : () -> ()
  ^bb1584:
    "cf.br"() [^bb1585] : () -> ()
  ^bb1585:
    "cf.br"() [^bb1586] : () -> ()
  ^bb1586:
    "cf.br"() [^bb1587] : () -> ()
  ^bb1587:
    "cf.br"() [^bb1588] : () -> ()
  ^bb1588:
    "cf.br"() [^bb1589] : () -> ()
  ^bb1589:
    "cf.br"() [^bb1590] : () -> ()
  ^bb1590:
    "cf.br"() [^bb1591] : () -> ()
  ^bb1591:
    "cf.br"() [^bb1592] : () -> ()
  ^bb1592:
    "cf.br"() [^bb1593] : () -> ()
  ^bb1593:
    "cf.br"() [^bb1594] : () -> ()
  ^bb1594:
    "cf.br"() [^bb1595] : () -> ()
  ^bb1595:
    "cf.br"() [^bb1596] : () -> ()
  ^bb1596:
    "cf.br"() [^bb1597] : () -> ()
  ^bb1597:
    "cf.br"() [^bb1598] : () -> ()
  ^bb1598:
    "cf.br"() [^bb1599] : () -> ()
  ^bb1599:
    "cf.br"() [^bb1600] : () -> ()
  ^bb1600:
    "cf.br"() [^bb1601] : () -> ()
  ^bb1601:
    "cf.br"() [^bb1602] : () -> ()
  ^bb1602:
    "cf.br"() [^bb1603] : () -> ()
  ^bb1603:
    "cf.br"() [^bb1604] : () -> ()
  ^bb1604:
    "cf.br"() [^bb1605] : () -> ()
  ^bb1605:
    "cf.br"() [^bb1606] : () -> ()
  ^bb1606:
    "cf.br"() [^bb1607] : () -> ()
  ^bb1607:
    "cf.br"() [^bb1608] : () -> ()
  ^bb1608:
    "cf.br"() [^bb1609] : () -> ()
  ^bb1609:
    "cf.br"() [^bb1610] : () -> ()
  ^bb1610:
    "cf.br"() [^bb1611] : () -> ()
  ^bb1611:
    "cf.br"() [^bb1612] : () -> ()
  ^bb1612:
    "cf.br"() [^bb1613] : () -> ()
  ^bb1613:
    "cf.br"() [^bb1614] : () -> ()
  ^bb1614:
    "cf.br"() [^bb1615] : () -> ()
  ^bb1615:
    "cf.br"() [^bb1616] : () -> ()
  ^bb1616:
    "cf.br"() [^bb1617] : () -> ()
  ^bb1617:
    "cf.br"() [^bb1618] : () -> ()
  ^bb1618:
    "cf.br"() [^bb1619] : () -> ()
  ^bb1619:
    "cf.br"() [^bb1620] : () -> ()
  ^bb1620:
    "cf.br"() [^bb1621] : () -> ()
  ^bb1621:
    "cf.br"() [^bb1622] : () -> ()
  ^bb1622:
    "cf.br"() [^bb1623] : () -> ()
  ^bb1623:
    "cf.br"() [^bb1624] : () -> ()
  ^bb1624:
    "cf.br"() [^bb1625] : () -> ()
  ^bb1625:
    "cf.br"() [^bb1626] : () -> ()
  ^bb1626:
    "cf.br"() [^bb1627] : () -> ()
  ^bb1627:
    "cf.br"() [^bb1628] : () -> ()
  ^bb1628:
    "cf.br"() [^bb1629] : () -> ()
  ^bb1629:
    "cf.br"() [^bb1630] : () -> ()
  ^bb1630:
    "cf.br"() [^bb1631] : () -> ()
  ^bb1631:
    "cf.br"() [^bb1632] : () -> ()
  ^bb1632:
    "cf.br"() [^bb1633] : () -> ()
  ^bb1633:
    "cf.br"() [^bb1634] : () -> ()
  ^bb1634:
    "cf.br"() [^bb1635] : () -> ()
  ^bb1635:
    "cf.br"() [^bb1636] : () -> ()
  ^bb1636:
    "cf.br"() [^bb1637] : () -> ()
  ^bb1637:
    "cf.br"() [^bb1638] : () -> ()
  ^bb1638:
    "cf.br"() [^bb1639] : () -> ()
  ^bb1639:
    "cf.br"() [^bb1640] : () -> ()
  ^bb1640:
    "cf.br"() [^bb1641] : () -> ()
  ^bb1641:
    "cf.br"() [^bb1642] : () -> ()
  ^bb1642:
    "cf.br"() [^bb1643] : () -> ()
  ^bb1643:
    "cf.br"() [^bb1644] : () -> ()
  ^bb1644:
    "cf.br"() [^bb1645] : () -> ()
  ^bb1645:
    "cf.br"() [^bb1646] : () -> ()
  ^bb1646:
    "cf.br"() [^bb1647] : () -> ()
  ^bb1647:
    "cf.br"() [^bb1648] : () -> ()
  ^bb1648:
    "cf.br"() [^bb1649] : () -> ()
  ^bb1649:
    "cf.br"() [^bb1650] : () -> ()
  ^bb1650:
    "cf.br"() [^bb1651] : () -> ()
  ^bb1651:
    "cf.br"() [^bb1652] : () -> ()
  ^bb1652:
    "cf.br"() [^bb1653] : () -> ()
  ^bb1653:
    "cf.br"() [^bb1654] : () -> ()
  ^bb1654:
    "cf.br"() [^bb1655] : () -> ()
  ^bb1655:
    "cf.br"() [^bb1656] : () -> ()
  ^bb1656:
    "cf.br"() [^bb1657] : () -> ()
  ^bb1657:
    "cf.br"() [^bb1658] : () -> ()
  ^bb1658:
    "cf.br"() [^bb1659] : () -> ()
  ^bb1659:
    "cf.br"() [^bb1660] : () -> ()
  ^bb1660:
    "cf.br"() [^bb1661] : () -> ()
  ^bb1661:
    "cf.br"() [^bb1662] : () -> ()
  ^bb1662:
    "cf.br"() [^bb1663] : () -> ()
  ^bb1663:
    "cf.br"() [^bb1664] : () -> ()
  ^bb1664:
    "cf.br"() [^bb1665] : () -> ()
  ^bb1665:
    "cf.br"() [^bb1666] : () -> ()
  ^bb1666:
    "cf.br"() [^bb1667] : () -> ()
  ^bb1667:
    "cf.br"() [^bb1668] : () -> ()
  ^bb1668:
    "cf.br"() [^bb1669] : () -> ()
  ^bb1669:
    "cf.br"() [^bb1670] : () -> ()
  ^bb1670:
    "cf.br"() [^bb1671] : () -> ()
  ^bb1671:
    "cf.br"() [^bb1672] : () -> ()
  ^bb1672:
    "cf.br"() [^bb1673] : () -> ()
  ^bb1673:
    "cf.br"() [^bb1674] : () -> ()
  ^bb1674:
    "cf.br"() [^bb1675] : () -> ()
  ^bb1675:
    "cf.br"() [^bb1676] : () -> ()
  ^bb1676:
    "cf.br"() [^bb1677] : () -> ()
  ^bb1677:
    "cf.br"() [^bb1678] : () -> ()
  ^bb1678:
    "cf.br"() [^bb1679] : () -> ()
  ^bb1679:
    "cf.br"() [^bb1680] : () -> ()
  ^bb1680:
    "cf.br"() [^bb1681] : () -> ()
  ^bb1681:
    "cf.br"() [^bb1682] : () -> ()
  ^bb1682:
    "cf.br"() [^bb1683] : () -> ()
  ^bb1683:
    "cf.br"() [^bb1684] : () -> ()
  ^bb1684:
    "cf.br"() [^bb1685] : () -> ()
  ^bb1685:
    "cf.br"() [^bb1686] : () -> ()
  ^bb1686:
    "cf.br"() [^bb1687] : () -> ()
  ^bb1687:
    "cf.br"() [^bb1688] : () -> ()
  ^bb1688:
    "cf.br"() [^bb1689] : () -> ()
  ^bb1689:
    "cf.br"() [^bb1690] : () -> ()
  ^bb1690:
    "cf.br"() [^bb1691] : () -> ()
  ^bb1691:
    "cf.br"() [^bb1692] : () -> ()
  ^bb1692:
    "cf.br"() [^bb1693] : () -> ()
  ^bb1693:
    "cf.br"() [^bb1694] : () -> ()
  ^bb1694:
    "cf.br"() [^bb1695] : () -> ()
  ^bb1695:
    "cf.br"() [^bb1696] : () -> ()
  ^bb1696:
    "cf.br"() [^bb1697] : () -> ()
  ^bb1697:
    "cf.br"() [^bb1698] : () -> ()
  ^bb1698:
    "cf.br"() [^bb1699] : () -> ()
  ^bb1699:
    "cf.br"() [^bb1700] : () -> ()
  ^bb1700:
    "cf.br"() [^bb1701] : () -> ()
  ^bb1701:
    "cf.br"() [^bb1702] : () -> ()
  ^bb1702:
    "cf.br"() [^bb1703] : () -> ()
  ^bb1703:
    "cf.br"() [^bb1704] : () -> ()
  ^bb1704:
    "cf.br"() [^bb1705] : () -> ()
  ^bb1705:
    "cf.br"() [^bb1706] : () -> ()
  ^bb1706:
    "cf.br"() [^bb1707] : () -> ()
  ^bb1707:
    "cf.br"() [^bb1708] : () -> ()
  ^bb1708:
    "cf.br"() [^bb1709] : () -> ()
  ^bb1709:
    "cf.br"() [^bb1710] : () -> ()
  ^bb1710:
    "cf.br"() [^bb1711] : () -> ()
  ^bb1711:
    "cf.br"() [^bb1712] : () -> ()
  ^bb1712:
    "cf.br"() [^bb1713] : () -> ()
  ^bb1713:
    "cf.br"() [^bb1714] : () -> ()
  ^bb1714:
    "cf.br"() [^bb1715] : () -> ()
  ^bb1715:
    "cf.br"() [^bb1716] : () -> ()
  ^bb1716:
    "cf.br"() [^bb1717] : () -> ()
  ^bb1717:
    "cf.br"() [^bb1718] : () -> ()
  ^bb1718:
    "cf.br"() [^bb1719] : () -> ()
  ^bb1719:
    "cf.br"() [^bb1720] : () -> ()
  ^bb1720:
    "cf.br"() [^bb1721] : () -> ()
  ^bb1721:
    "cf.br"() [^bb1722] : () -> ()
  ^bb1722:
    "cf.br"() [^bb1723] : () -> ()
  ^bb1723:
    "cf.br"() [^bb1724] : () -> ()
  ^bb1724:
    "cf.br"() [^bb1725] : () -> ()
  ^bb1725:
    "cf.br"() [^bb1726] : () -> ()
  ^bb1726:
    "cf.br"() [^bb1727] : () -> ()
  ^bb1727:
    "cf.br"() [^bb1728] : () -> ()
  ^bb1728:
    "cf.br"() [^bb1729] : () -> ()
  ^bb1729:
    "cf.br"() [^bb1730] : () -> ()
  ^bb1730:
    "cf.br"() [^bb1731] : () -> ()
  ^bb1731:
    "cf.br"() [^bb1732] : () -> ()
  ^bb1732:
    "cf.br"() [^bb1733] : () -> ()
  ^bb1733:
    "cf.br"() [^bb1734] : () -> ()
  ^bb1734:
    "cf.br"() [^bb1735] : () -> ()
  ^bb1735:
    "cf.br"() [^bb1736] : () -> ()
  ^bb1736:
    "cf.br"() [^bb1737] : () -> ()
  ^bb1737:
    "cf.br"() [^bb1738] : () -> ()
  ^bb1738:
    "cf.br"() [^bb1739] : () -> ()
  ^bb1739:
    "cf.br"() [^bb1740] : () -> ()
  ^bb1740:
    "cf.br"() [^bb1741] : () -> ()
  ^bb1741:
    "cf.br"() [^bb1742] : () -> ()
  ^bb1742:
    "cf.br"() [^bb1743] : () -> ()
  ^bb1743:
    "cf.br"() [^bb1744] : () -> ()
  ^bb1744:
    "cf.br"() [^bb1745] : () -> ()
  ^bb1745:
    "cf.br"() [^bb1746] : () -> ()
  ^bb1746:
    "cf.br"() [^bb1747] : () -> ()
  ^bb1747:
    "cf.br"() [^bb1748] : () -> ()
  ^bb1748:
    "cf.br"() [^bb1749] : () -> ()
  ^bb1749:
    "cf.br"() [^bb1750] : () -> ()
  ^bb1750:
    "cf.br"() [^bb1751] : () -> ()
  ^bb1751:
    "cf.br"() [^bb1752] : () -> ()
  ^bb1752:
    "cf.br"() [^bb1753] : () -> ()
  ^bb1753:
    "cf.br"() [^bb1754] : () -> ()
  ^bb1754:
    "cf.br"() [^bb1755] : () -> ()
  ^bb1755:
    "cf.br"() [^bb1756] : () -> ()
  ^bb1756:
    "cf.br"() [^bb1757] : () -> ()
  ^bb1757:
    "cf.br"() [^bb1758] : () -> ()
  ^bb1758:
    "cf.br"() [^bb1759] : () -> ()
  ^bb1759:
    "cf.br"() [^bb1760] : () -> ()
  ^bb1760:
    "cf.br"() [^bb1761] : () -> ()
  ^bb1761:
    "cf.br"() [^bb1762] : () -> ()
  ^bb1762:
    "cf.br"() [^bb1763] : () -> ()
  ^bb1763:
    "cf.br"() [^bb1764] : () -> ()
  ^bb1764:
    "cf.br"() [^bb1765] : () -> ()
  ^bb1765:
    "cf.br"() [^bb1766] : () -> ()
  ^bb1766:
    "cf.br"() [^bb1767] : () -> ()
  ^bb1767:
    "cf.br"() [^bb1768] : () -> ()
  ^bb1768:
    "cf.br"() [^bb1769] : () -> ()
  ^bb1769:
    "cf.br"() [^bb1770] : () -> ()
  ^bb1770:
    "cf.br"() [^bb1771] : () -> ()
  ^bb1771:
    "cf.br"() [^bb1772] : () -> ()
  ^bb1772:
    "cf.br"() [^bb1773] : () -> ()
  ^bb1773:
    "cf.br"() [^bb1774] : () -> ()
  ^bb1774:
    "cf.br"() [^bb1775] : () -> ()
  ^bb1775:
    "cf.br"() [^bb1776] : () -> ()
  ^bb1776:
    "cf.br"() [^bb1777] : () -> ()
  ^bb1777:
    "cf.br"() [^bb1778] : () -> ()
  ^bb1778:
    "cf.br"() [^bb1779] : () -> ()
  ^bb1779:
    "cf.br"() [^bb1780] : () -> ()
  ^bb1780:
    "cf.br"() [^bb1781] : () -> ()
  ^bb1781:
    "cf.br"() [^bb1782] : () -> ()
  ^bb1782:
    "cf.br"() [^bb1783] : () -> ()
  ^bb1783:
    "cf.br"() [^bb1784] : () -> ()
  ^bb1784:
    "cf.br"() [^bb1785] : () -> ()
  ^bb1785:
    "cf.br"() [^bb1786] : () -> ()
  ^bb1786:
    "cf.br"() [^bb1787] : () -> ()
  ^bb1787:
    "cf.br"() [^bb1788] : () -> ()
  ^bb1788:
    "cf.br"() [^bb1789] : () -> ()
  ^bb1789:
    "cf.br"() [^bb1790] : () -> ()
  ^bb1790:
    "cf.br"() [^bb1791] : () -> ()
  ^bb1791:
    "cf.br"() [^bb1792] : () -> ()
  ^bb1792:
    "cf.br"() [^bb1793] : () -> ()
  ^bb1793:
    "cf.br"() [^bb1794] : () -> ()
  ^bb1794:
    "cf.br"() [^bb1795] : () -> ()
  ^bb1795:
    "cf.br"() [^bb1796] : () -> ()
  ^bb1796:
    "cf.br"() [^bb1797] : () -> ()
  ^bb1797:
    "cf.br"() [^bb1798] : () -> ()
  ^bb1798:
    "cf.br"() [^bb1799] : () -> ()
  ^bb1799:
    "cf.br"() [^bb1800] : () -> ()
  ^bb1800:
    "cf.br"() [^bb1801] : () -> ()
  ^bb1801:
    "cf.br"() [^bb1802] : () -> ()
  ^bb1802:
    "cf.br"() [^bb1803] : () -> ()
  ^bb1803:
    "cf.br"() [^bb1804] : () -> ()
  ^bb1804:
    "cf.br"() [^bb1805] : () -> ()
  ^bb1805:
    "cf.br"() [^bb1806] : () -> ()
  ^bb1806:
    "cf.br"() [^bb1807] : () -> ()
  ^bb1807:
    "cf.br"() [^bb1808] : () -> ()
  ^bb1808:
    "cf.br"() [^bb1809] : () -> ()
  ^bb1809:
    "cf.br"() [^bb1810] : () -> ()
  ^bb1810:
    "cf.br"() [^bb1811] : () -> ()
  ^bb1811:
    "cf.br"() [^bb1812] : () -> ()
  ^bb1812:
    "cf.br"() [^bb1813] : () -> ()
  ^bb1813:
    "cf.br"() [^bb1814] : () -> ()
  ^bb1814:
    "cf.br"() [^bb1815] : () -> ()
  ^bb1815:
    "cf.br"() [^bb1816] : () -> ()
  ^bb1816:
    "cf.br"() [^bb1817] : () -> ()
  ^bb1817:
    "cf.br"() [^bb1818] : () -> ()
  ^bb1818:
    "cf.br"() [^bb1819] : () -> ()
  ^bb1819:
    "cf.br"() [^bb1820] : () -> ()
  ^bb1820:
    "cf.br"() [^bb1821] : () -> ()
  ^bb1821:
    "cf.br"() [^bb1822] : () -> ()
  ^bb1822:
    "cf.br"() [^bb1823] : () -> ()
  ^bb1823:
    "cf.br"() [^bb1824] : () -> ()
  ^bb1824:
    "cf.br"() [^bb1825] : () -> ()
  ^bb1825:
    "cf.br"() [^bb1826] : () -> ()
  ^bb1826:
    "cf.br"() [^bb1827] : () -> ()
  ^bb1827:
    "cf.br"() [^bb1828] : () -> ()
  ^bb1828:
    %9183 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9184 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9185 = "mini.unwrap"(%9183) : (!mini.ptr<i32>) -> i32
    %9186 = "mini.unwrap"(%9184) : (!mini.ptr<i32>) -> i32
    %9187 = "mini.arithmetic"(%9185, %9186) {"op" = "ADD"} : (i32, i32) -> i32
    %9188 = "mini.wrap"(%9187) : (i32) -> !mini.ptr<i32>
    %9189 = "mini.unionize"(%9188) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %9190 = "mini.unwrap"(%9189) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %9191 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %9192 = "mini.parameterizations_array"(%9191) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%9192, %9190) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %9193 = "mini.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9194 = "mini.create_buffer"(%9193) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %9195 = builtin.unrealized_conversion_cast %9194 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %9196 = "mini.refer"(%9195) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %9197 = "mini.literal"() {"typ" = !llvm.array<13 x i8>, "value" = "Hello, World!"} : () -> !llvm.ptr
    %9198 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%9196, %9198, %9197) {"typ" = !llvm.array<13 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %9199 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9200 = "mini.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9201 = "mini.unwrap"(%9196) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %9202 = "mini.unwrap"(%9199) : (!mini.ptr<i32>) -> i32
    %9203 = "mini.unwrap"(%9200) : (!mini.ptr<i32>) -> i32
    %9204 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %9205 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9206 = "mini.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9207 = builtin.unrealized_conversion_cast %9196 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %9208 = "mini.unwrap"(%9207) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %9209 = builtin.unrealized_conversion_cast %9205 : !mini.ptr<i32> to !mini.ptr<i32>
    %9210 = "mini.unwrap"(%9209) : (!mini.ptr<i32>) -> i32
    %9211 = builtin.unrealized_conversion_cast %9206 : !mini.ptr<i32> to !mini.ptr<i32>
    %9212 = "mini.unwrap"(%9211) : (!mini.ptr<i32>) -> i32
    %9213 = "mini.unwrap"(%9204) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9214 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %9215 = "mini.parameterizations_array"(%9214, %9191, %9191) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%9215, %9213, %9208, %9210, %9212) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %9216 = builtin.unrealized_conversion_cast %9204 : !mini.fatptr<"String"> to !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %9217 = "mini.unwrap"(%9216) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %9218 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %9219 = "mini.parameterizations_array"(%9218) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%9219, %9217) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %9220 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
    %9221 = "mini.unwrap"(%9220) : (!mini.ptr<i1>) -> i1
    %9222 = "mini.logical"(%9221) ({
      %9223 = "mini.literal"() {"value" = false, "typ" = i1} : () -> !mini.ptr<i1>
      func.return %9223 : !mini.ptr<i1>
    }) {"op" = "and"} : (i1) -> i1
    %9224 = "mini.wrap"(%9222) : (i1) -> !mini.ptr<i1>
    %9225 = "mini.unionize"(%9224) {"from_typ" = i1, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "bool_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i1>) -> !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %9226 = "mini.unwrap"(%9225) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %9227 = "mini.parameterization"() {"id_hierarchy" = ["bool_typ"], "name_hierarchy" = ["Ptri1"]} : () -> !llvm.ptr
    %9228 = "mini.parameterizations_array"(%9227) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%9228, %9226) {"offset" = 0 : i32, "vptrs" = ["bool_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    "cf.br"() [^bb1829] : () -> ()
  ^bb1829:
    "cf.br"() [^bb1830] : () -> ()
  ^bb1830:
    "cf.br"() [^bb1831] : () -> ()
  ^bb1831:
    "cf.br"() [^bb1832] : () -> ()
  ^bb1832:
    "cf.br"() [^bb1833] : () -> ()
  ^bb1833:
    "cf.br"() [^bb1834] : () -> ()
  ^bb1834:
    "cf.br"() [^bb1835] : () -> ()
  ^bb1835:
    "cf.br"() [^bb1836] : () -> ()
  ^bb1836:
    "cf.br"() [^bb1837] : () -> ()
  ^bb1837:
    "cf.br"() [^bb1838] : () -> ()
  ^bb1838:
    "cf.br"() [^bb1839] : () -> ()
  ^bb1839:
    "cf.br"() [^bb1840] : () -> ()
  ^bb1840:
    "cf.br"() [^bb1841] : () -> ()
  ^bb1841:
    "cf.br"() [^bb1842] : () -> ()
  ^bb1842:
    "cf.br"() [^bb1843] : () -> ()
  ^bb1843:
    "cf.br"() [^bb1844] : () -> ()
  ^bb1844:
    "cf.br"() [^bb1845] : () -> ()
  ^bb1845:
    "cf.br"() [^bb1846] : () -> ()
  ^bb1846:
    "cf.br"() [^bb1847] : () -> ()
  ^bb1847:
    "cf.br"() [^bb1848] : () -> ()
  ^bb1848:
    "cf.br"() [^bb1849] : () -> ()
  ^bb1849:
    "cf.br"() [^bb1850] : () -> ()
  ^bb1850:
    "cf.br"() [^bb1851] : () -> ()
  ^bb1851:
    "cf.br"() [^bb1852] : () -> ()
  ^bb1852:
    "cf.br"() [^bb1853] : () -> ()
  ^bb1853:
    "cf.br"() [^bb1854] : () -> ()
  ^bb1854:
    "cf.br"() [^bb1855] : () -> ()
  ^bb1855:
    "cf.br"() [^bb1856] : () -> ()
  ^bb1856:
    "cf.br"() [^bb1857] : () -> ()
  ^bb1857:
    "cf.br"() [^bb1858] : () -> ()
  ^bb1858:
    "cf.br"() [^bb1859] : () -> ()
  ^bb1859:
    "cf.br"() [^bb1860] : () -> ()
  ^bb1860:
    "cf.br"() [^bb1861] : () -> ()
  ^bb1861:
    "cf.br"() [^bb1862] : () -> ()
  ^bb1862:
    "cf.br"() [^bb1863] : () -> ()
  ^bb1863:
    "cf.br"() [^bb1864] : () -> ()
  ^bb1864:
    "cf.br"() [^bb1865] : () -> ()
  ^bb1865:
    "cf.br"() [^bb1866] : () -> ()
  ^bb1866:
    "cf.br"() [^bb1867] : () -> ()
  ^bb1867:
    "cf.br"() [^bb1868] : () -> ()
  ^bb1868:
    "cf.br"() [^bb1869] : () -> ()
  ^bb1869:
    "cf.br"() [^bb1870] : () -> ()
  ^bb1870:
    %9229 = "mini.new"() {"typ" = !llvm.struct<()>, "class_name" = "Bard", "num_data_fields" = 0 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Bard">
    %9230 = "mini.unwrap"(%9229) : (!mini.fatptr<"Bard">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9231 = "mini.parameterizations_array"() : () -> !llvm.ptr
    "mini.method_call"(%9231, %9230) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 7 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %9232 = "mini.to_fat_ptr"(%9229) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Bard", "to_typ_name" = "Bard"} : (!mini.fatptr<"Bard">) -> !mini.fatptr<"Bard">
    %9233 = "mini.refer"(%9232) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Bard">) -> !mini.fatptr<"Bard">
    %9234 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9235 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9236 = "mini.unionize"(%9234) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<f64>, !mini.ptr<i32>]>
    %9237 = "mini.unwrap"(%9236) : (!mini.union<[!mini.fatptr<"Animal">, !mini.ptr<f64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %9238 = "mini.unionize"(%9235) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<i32>, !mini.ptr<f64>]>
    %9239 = "mini.unwrap"(%9238) : (!mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<i32>, !mini.ptr<f64>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %9240 = "mini.unwrap"(%9233) : (!mini.fatptr<"Bard">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9241 = "mini.parameterizations_array"(%9191, %9191) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%9241, %9240, %9237, %9239) {"offset" = 1 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 7 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %9242 = "mini.literal"() {"value" = 7.000000e+00 : f64, "typ" = f64} : () -> !mini.ptr<f64>
    %9243 = "mini.unionize"(%9242) {"from_typ" = f64, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<f64>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
    %9244 = "mini.literal"() {"value" = 1.400000e+01 : f64, "typ" = f64} : () -> !mini.ptr<f64>
    %9245 = "mini.reunionize"(%9243) {"from_typ" = !llvm.struct<(!llvm.ptr, i64)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<f64>, !mini.ptr<i32>]>
    %9246 = "mini.unwrap"(%9245) : (!mini.union<[!mini.fatptr<"Animal">, !mini.ptr<f64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %9247 = "mini.unionize"(%9244) {"from_typ" = f64, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<f64>) -> !mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<i32>, !mini.ptr<f64>]>
    %9248 = "mini.unwrap"(%9247) : (!mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<i32>, !mini.ptr<f64>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %9249 = "mini.unwrap"(%9233) : (!mini.fatptr<"Bard">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9250 = "mini.parameterization"() {"id_hierarchy" = ["union_typ", ["f64_typ"], ["i32_typ"]], "name_hierarchy" = ["Ptrf64_or_Ptri32", ["Ptrf64"], ["Ptri32"]]} : () -> !llvm.ptr
    %9251 = "mini.parameterization"() {"id_hierarchy" = ["f64_typ"], "name_hierarchy" = ["Ptrf64"]} : () -> !llvm.ptr
    %9252 = "mini.parameterizations_array"(%9250, %9251) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%9252, %9249, %9246, %9248) {"offset" = 1 : i32, "vptrs" = ["union_typ", "f64_typ"], "vtable_size" = 7 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %9253 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9254 = "mini.create_buffer"(%9253) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %9255 = builtin.unrealized_conversion_cast %9254 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %9256 = "mini.refer"(%9255) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %9257 = "mini.literal"() {"typ" = !llvm.array<5 x i8>, "value" = "start"} : () -> !llvm.ptr
    %9258 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%9256, %9258, %9257) {"typ" = !llvm.array<5 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %9259 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9260 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9261 = "mini.unwrap"(%9256) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %9262 = "mini.unwrap"(%9259) : (!mini.ptr<i32>) -> i32
    %9263 = "mini.unwrap"(%9260) : (!mini.ptr<i32>) -> i32
    %9264 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %9265 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9266 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9267 = builtin.unrealized_conversion_cast %9256 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %9268 = "mini.unwrap"(%9267) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %9269 = builtin.unrealized_conversion_cast %9265 : !mini.ptr<i32> to !mini.ptr<i32>
    %9270 = "mini.unwrap"(%9269) : (!mini.ptr<i32>) -> i32
    %9271 = builtin.unrealized_conversion_cast %9266 : !mini.ptr<i32> to !mini.ptr<i32>
    %9272 = "mini.unwrap"(%9271) : (!mini.ptr<i32>) -> i32
    %9273 = "mini.unwrap"(%9264) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9274 = "mini.parameterizations_array"(%9214, %9191, %9191) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%9274, %9273, %9268, %9270, %9272) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %9275 = builtin.unrealized_conversion_cast %9264 : !mini.fatptr<"String"> to !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %9276 = "mini.unwrap"(%9275) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %9277 = "mini.parameterizations_array"(%9218) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%9277, %9276) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %9278 = "mini.literal"() {"value" = 55 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9279 = "mini.literal"() {"value" = 8.000000e+00 : f64, "typ" = f64} : () -> !mini.ptr<f64>
    %9280 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9281 = "mini.unwrap"(%9278) : (!mini.ptr<i32>) -> i32
    %9282 = "mini.unwrap"(%9279) : (!mini.ptr<f64>) -> f64
    %9283 = "mini.unwrap"(%9280) : (!mini.ptr<i32>) -> i32
    %9284 = "mini.new"() {"typ" = !llvm.struct<(i32, f64, i32)>, "class_name" = "Animal", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Animal">
    %9285 = "mini.literal"() {"value" = 55 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9286 = "mini.literal"() {"value" = 8.000000e+00 : f64, "typ" = f64} : () -> !mini.ptr<f64>
    %9287 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9288 = builtin.unrealized_conversion_cast %9285 : !mini.ptr<i32> to !mini.ptr<i32>
    %9289 = "mini.unwrap"(%9288) : (!mini.ptr<i32>) -> i32
    %9290 = builtin.unrealized_conversion_cast %9286 : !mini.ptr<f64> to !mini.ptr<f64>
    %9291 = "mini.unwrap"(%9290) : (!mini.ptr<f64>) -> f64
    %9292 = builtin.unrealized_conversion_cast %9287 : !mini.ptr<i32> to !mini.ptr<i32>
    %9293 = "mini.unwrap"(%9292) : (!mini.ptr<i32>) -> i32
    %9294 = "mini.unwrap"(%9284) : (!mini.fatptr<"Animal">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9295 = "mini.parameterizations_array"(%9191, %9251, %9191) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%9295, %9294, %9289, %9291, %9293) {"offset" = 3 : i32, "vptrs" = ["i32_typ", "f64_typ", "i32_typ"], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, f64, i32) -> ()
    %9296 = "mini.to_fat_ptr"(%9284) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Animal", "to_typ_name" = "Animal"} : (!mini.fatptr<"Animal">) -> !mini.fatptr<"Animal">
    %9297 = "mini.refer"(%9296) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Animal">) -> !mini.fatptr<"Animal">
    %9298 = "mini.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9299 = "mini.create_buffer"(%9298) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %9300 = builtin.unrealized_conversion_cast %9299 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %9301 = "mini.refer"(%9300) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %9302 = "mini.literal"() {"typ" = !llvm.array<13 x i8>, "value" = "did get here!"} : () -> !llvm.ptr
    %9303 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%9301, %9303, %9302) {"typ" = !llvm.array<13 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %9304 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9305 = "mini.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9306 = "mini.unwrap"(%9301) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %9307 = "mini.unwrap"(%9304) : (!mini.ptr<i32>) -> i32
    %9308 = "mini.unwrap"(%9305) : (!mini.ptr<i32>) -> i32
    %9309 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %9310 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9311 = "mini.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9312 = builtin.unrealized_conversion_cast %9301 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %9313 = "mini.unwrap"(%9312) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %9314 = builtin.unrealized_conversion_cast %9310 : !mini.ptr<i32> to !mini.ptr<i32>
    %9315 = "mini.unwrap"(%9314) : (!mini.ptr<i32>) -> i32
    %9316 = builtin.unrealized_conversion_cast %9311 : !mini.ptr<i32> to !mini.ptr<i32>
    %9317 = "mini.unwrap"(%9316) : (!mini.ptr<i32>) -> i32
    %9318 = "mini.unwrap"(%9309) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9319 = "mini.parameterizations_array"(%9214, %9191, %9191) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%9319, %9318, %9313, %9315, %9317) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %9320 = builtin.unrealized_conversion_cast %9309 : !mini.fatptr<"String"> to !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %9321 = "mini.unwrap"(%9320) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %9322 = "mini.parameterizations_array"(%9218) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%9322, %9321) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %9323 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9324 = "mini.literal"() {"value" = 1.000000e+01 : f64, "typ" = f64} : () -> !mini.ptr<f64>
    %9325 = "mini.unwrap"(%9323) : (!mini.ptr<i32>) -> i32
    %9326 = "mini.unwrap"(%9324) : (!mini.ptr<f64>) -> f64
    %9327 = "mini.new"() {"typ" = !llvm.struct<(i32, f64)>, "class_name" = "Beaver", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Beaver">
    %9328 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9329 = "mini.literal"() {"value" = 1.000000e+01 : f64, "typ" = f64} : () -> !mini.ptr<f64>
    %9330 = builtin.unrealized_conversion_cast %9328 : !mini.ptr<i32> to !mini.ptr<i32>
    %9331 = "mini.unwrap"(%9330) : (!mini.ptr<i32>) -> i32
    %9332 = builtin.unrealized_conversion_cast %9329 : !mini.ptr<f64> to !mini.ptr<f64>
    %9333 = "mini.unwrap"(%9332) : (!mini.ptr<f64>) -> f64
    %9334 = "mini.unwrap"(%9327) : (!mini.fatptr<"Beaver">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9335 = "mini.parameterizations_array"(%9191, %9251) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%9335, %9334, %9331, %9333) {"offset" = 2 : i32, "vptrs" = ["i32_typ", "f64_typ"], "vtable_size" = 8 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, f64) -> ()
    %9336 = "mini.to_fat_ptr"(%9327) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Beaver", "to_typ_name" = "Beaver"} : (!mini.fatptr<"Beaver">) -> !mini.fatptr<"Beaver">
    %9337 = "mini.refer"(%9336) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Beaver">) -> !mini.fatptr<"Beaver">
    %9338 = builtin.unrealized_conversion_cast %9297 : !mini.fatptr<"Animal"> to !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<f64>, !mini.ptr<i32>]>
    %9339 = "mini.unwrap"(%9338) : (!mini.union<[!mini.fatptr<"Animal">, !mini.ptr<f64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %9340 = builtin.unrealized_conversion_cast %9337 : !mini.fatptr<"Beaver"> to !mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<i32>, !mini.ptr<f64>]>
    %9341 = "mini.unwrap"(%9340) : (!mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<i32>, !mini.ptr<f64>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %9342 = "mini.unwrap"(%9233) : (!mini.fatptr<"Bard">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9343 = "mini.parameterization"() {"id_hierarchy" = ["Animal"], "name_hierarchy" = ["Animal"]} : () -> !llvm.ptr
    %9344 = "mini.parameterization"() {"id_hierarchy" = ["Beaver"], "name_hierarchy" = ["Beaver"]} : () -> !llvm.ptr
    %9345 = "mini.parameterizations_array"(%9343, %9344) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%9345, %9342, %9339, %9341) {"offset" = 1 : i32, "vptrs" = [#none, #none], "vtable_size" = 7 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %9346 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9347 = "mini.unionize"(%9346) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<f64>, !mini.ptr<i32>]>
    %9348 = "mini.unwrap"(%9347) : (!mini.union<[!mini.fatptr<"Animal">, !mini.ptr<f64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %9349 = "mini.reunionize"(%9243) {"from_typ" = !llvm.struct<(!llvm.ptr, i64)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> !mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<i32>, !mini.ptr<f64>]>
    %9350 = "mini.unwrap"(%9349) : (!mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<i32>, !mini.ptr<f64>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %9351 = "mini.unwrap"(%9233) : (!mini.fatptr<"Bard">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9352 = "mini.parameterizations_array"(%9191, %9250) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%9352, %9351, %9348, %9350) {"offset" = 1 : i32, "vptrs" = ["i32_typ", "union_typ"], "vtable_size" = 7 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %9353 = "mini.literal"() {"value" = 17 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9354 = "mini.create_buffer"(%9353) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %9355 = builtin.unrealized_conversion_cast %9354 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %9356 = "mini.refer"(%9355) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %9357 = "mini.literal"() {"typ" = !llvm.array<16 x i8>, "value" = "barry's color is"} : () -> !llvm.ptr
    %9358 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%9356, %9358, %9357) {"typ" = !llvm.array<16 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %9359 = "mini.literal"() {"value" = 16 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9360 = "mini.literal"() {"value" = 17 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9361 = "mini.unwrap"(%9356) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %9362 = "mini.unwrap"(%9359) : (!mini.ptr<i32>) -> i32
    %9363 = "mini.unwrap"(%9360) : (!mini.ptr<i32>) -> i32
    %9364 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %9365 = "mini.literal"() {"value" = 16 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9366 = "mini.literal"() {"value" = 17 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9367 = builtin.unrealized_conversion_cast %9356 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %9368 = "mini.unwrap"(%9367) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %9369 = builtin.unrealized_conversion_cast %9365 : !mini.ptr<i32> to !mini.ptr<i32>
    %9370 = "mini.unwrap"(%9369) : (!mini.ptr<i32>) -> i32
    %9371 = builtin.unrealized_conversion_cast %9366 : !mini.ptr<i32> to !mini.ptr<i32>
    %9372 = "mini.unwrap"(%9371) : (!mini.ptr<i32>) -> i32
    %9373 = "mini.unwrap"(%9364) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9374 = "mini.parameterizations_array"(%9214, %9191, %9191) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%9374, %9373, %9368, %9370, %9372) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %9375 = builtin.unrealized_conversion_cast %9364 : !mini.fatptr<"String"> to !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %9376 = "mini.unwrap"(%9375) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %9377 = "mini.parameterizations_array"(%9218) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%9377, %9376) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %9378 = "mini.unwrap"(%9337) : (!mini.fatptr<"Beaver">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9379 = "mini.parameterizations_array"() : () -> !llvm.ptr
    "mini.method_call"(%9379, %9378) {"offset" = 4 : i32, "vptrs" = [], "vtable_size" = 8 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %9380 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9381 = builtin.unrealized_conversion_cast %9380 : !mini.ptr<i32> to !mini.ptr<i32>
    %9382 = "mini.unwrap"(%9381) : (!mini.ptr<i32>) -> i32
    %9383 = "mini.unwrap"(%9337) : (!mini.fatptr<"Beaver">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9384 = "mini.parameterizations_array"(%9191) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%9384, %9383, %9382) {"offset" = 3 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 8 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
    %9385 = "mini.unwrap"(%9337) : (!mini.fatptr<"Beaver">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9386 = "mini.parameterizations_array"() : () -> !llvm.ptr
    "mini.method_call"(%9386, %9385) {"offset" = 4 : i32, "vptrs" = [], "vtable_size" = 8 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %9387 = "mini.literal"() {"value" = 89 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9388 = "mini.unwrap"(%9387) : (!mini.ptr<i32>) -> i32
    %9389 = "mini.new"() {"typ" = !llvm.struct<(i32)>, "class_name" = "Integer", "num_data_fields" = 1 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Integer">
    %9390 = "mini.literal"() {"value" = 89 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9391 = builtin.unrealized_conversion_cast %9390 : !mini.ptr<i32> to !mini.ptr<i32>
    %9392 = "mini.unwrap"(%9391) : (!mini.ptr<i32>) -> i32
    %9393 = "mini.unwrap"(%9389) : (!mini.fatptr<"Integer">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9394 = "mini.parameterizations_array"(%9191) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%9394, %9393, %9392) {"offset" = 1 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
    %9395 = "mini.to_fat_ptr"(%9389) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Integer", "to_typ_name" = "Integer"} : (!mini.fatptr<"Integer">) -> !mini.fatptr<"Integer">
    %9396 = "mini.refer"(%9395) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Integer">) -> !mini.fatptr<"Integer">
    %9397 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9398 = builtin.unrealized_conversion_cast %9397 : !mini.ptr<i32> to !mini.ptr<i32>
    %9399 = "mini.unwrap"(%9398) : (!mini.ptr<i32>) -> i32
    %9400 = "mini.unwrap"(%9396) : (!mini.fatptr<"Integer">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9401 = "mini.parameterizations_array"(%9191) : (!llvm.ptr) -> !llvm.ptr
    %9402 = "mini.method_call"(%9401, %9400, %9399) {"offset" = 3 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 13 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !mini.fatptr<"Integer">
    %9403 = "mini.to_fat_ptr"(%9402) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Integer", "to_typ_name" = "Integer"} : (!mini.fatptr<"Integer">) -> !mini.fatptr<"Integer">
    %9404 = "mini.unwrap"(%9403) : (!mini.fatptr<"Integer">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9405 = "mini.parameterizations_array"() : () -> !llvm.ptr
    "mini.method_call"(%9405, %9404) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %9406 = "mini.literal"() {"value" = 9.000000e+00 : f64, "typ" = f64} : () -> !mini.ptr<f64>
    %9407 = builtin.unrealized_conversion_cast %9406 : !mini.ptr<f64> to !mini.ptr<f64>
    %9408 = "mini.unwrap"(%9407) : (!mini.ptr<f64>) -> f64
    %9409 = "mini.parameterizations_array"(%9251) : (!llvm.ptr) -> !llvm.ptr
    %9410 = "mini.class_method_call"(%9409, %9408) {"offset" = 0 : i32, "vptrs" = ["f64_typ"], "vtable_size" = 17 : i64, "ret_type" = f64, "ret_type_unq" = f64, "class_name" = "Math"} : (!llvm.ptr, f64) -> !mini.ptr<f64>
    %9411 = builtin.unrealized_conversion_cast %9410 : !mini.ptr<f64> to !mini.ptr<f64>
    %9412 = "mini.literal"() {"value" = -9 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9413 = "mini.unionize"(%9412) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
    %9414 = "mini.unwrap"(%9413) : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i64)>
    %9415 = "mini.parameterizations_array"(%9191) : (!llvm.ptr) -> !llvm.ptr
    %9416 = "mini.class_method_call"(%9415, %9414) {"offset" = 1 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 17 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i64)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i64)>, "class_name" = "Math"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i64)>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
    %9417 = "mini.narrow"(%9416) {"from_typ" = !llvm.struct<(!llvm.ptr, i64)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> !mini.ptr<i32>
    %9418 = "mini.unionize"(%9417) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %9419 = "mini.unwrap"(%9418) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %9420 = "mini.parameterizations_array"(%9191) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%9420, %9419) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %9421 = "mini.unionize"(%9411) {"from_typ" = f64, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<f64>) -> !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %9422 = "mini.unwrap"(%9421) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %9423 = "mini.parameterizations_array"(%9251) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%9423, %9422) {"offset" = 0 : i32, "vptrs" = ["f64_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %9424 = "mini.unwrap"(%9297) : (!mini.fatptr<"Animal">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    "mini.call"(%9424) {"func_name" = "make_em_speak", "ret_type" = !llvm.void} : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %9425 = "mini.unwrap"(%9297) : (!mini.fatptr<"Animal">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9426 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %9427 = "mini.method_call"(%9426, %9425) {"offset" = 7 : i32, "vptrs" = [], "vtable_size" = 13 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<f64>]>
    %9428 = builtin.unrealized_conversion_cast %9427 : !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<f64>]> to !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<f64>]>
    %9429 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9430 = "mini.unionize"(%9429) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>
    "mini.while"() ({
      %9431 = "mini.checkflag"(%9430) {"typ_name" = "i32_typ"} : (!mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>) -> !mini.ptr<i1>
      %9432 = "mini.unwrap"(%9431) : (!mini.ptr<i1>) -> i1
    }, {
      %9433 = "mini.narrow"(%9430) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>) -> !mini.ptr<i32>
      %9434 = "mini.unionize"(%9433) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
      %9435 = "mini.unwrap"(%9434) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %9436 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %9437 = "mini.parameterizations_array"(%9436) : (!llvm.ptr) -> !llvm.ptr
      "mini.class_method_call"(%9437, %9435) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %9438 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %9439 = "mini.unwrap"(%9433) : (!mini.ptr<i32>) -> i32
      %9440 = "mini.unwrap"(%9438) : (!mini.ptr<i32>) -> i32
      %9441 = "mini.arithmetic"(%9439, %9440) {"op" = "ADD"} : (i32, i32) -> i32
      %9442 = "mini.wrap"(%9441) : (i32) -> !mini.ptr<i32>
      "mini.castassign"(%9433, %9442) ({
        %9443 = builtin.unrealized_conversion_cast %9442 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
      %9444 = "mini.literal"() {"value" = 9 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %9445 = "mini.unwrap"(%9433) : (!mini.ptr<i32>) -> i32
      %9446 = "mini.unwrap"(%9444) : (!mini.ptr<i32>) -> i32
      %9447 = "mini.comparison"(%9445, %9446) {"op" = "EQ"} : (i32, i32) -> i1
      %9448 = "mini.wrap"(%9447) : (i1) -> !mini.ptr<i32>
      %9449 = "mini.unwrap"(%9448) : (!mini.ptr<i32>) -> i1
      %9450 = "mini.unionize"(%9433) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>
      "mini.if"(%9449) ({
        %9451 = "mini.literal"() {"value" = 65 : i32, "typ" = i32} : () -> !mini.ptr<i32>
        %9452 = "mini.literal"() {"value" = 1.800000e+01 : f64, "typ" = f64} : () -> !mini.ptr<f64>
        %9453 = "mini.literal"() {"value" = 23 : i32, "typ" = i32} : () -> !mini.ptr<i32>
        %9454 = "mini.unwrap"(%9451) : (!mini.ptr<i32>) -> i32
        %9455 = "mini.unwrap"(%9452) : (!mini.ptr<f64>) -> f64
        %9456 = "mini.unwrap"(%9453) : (!mini.ptr<i32>) -> i32
        %9457 = "mini.new"() {"typ" = !llvm.struct<(i32, f64, i32)>, "class_name" = "Animal", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Animal">
        %9458 = "mini.literal"() {"value" = 65 : i32, "typ" = i32} : () -> !mini.ptr<i32>
        %9459 = "mini.literal"() {"value" = 1.800000e+01 : f64, "typ" = f64} : () -> !mini.ptr<f64>
        %9460 = "mini.literal"() {"value" = 23 : i32, "typ" = i32} : () -> !mini.ptr<i32>
        %9461 = builtin.unrealized_conversion_cast %9458 : !mini.ptr<i32> to !mini.ptr<i32>
        %9462 = "mini.unwrap"(%9461) : (!mini.ptr<i32>) -> i32
        %9463 = builtin.unrealized_conversion_cast %9459 : !mini.ptr<f64> to !mini.ptr<f64>
        %9464 = "mini.unwrap"(%9463) : (!mini.ptr<f64>) -> f64
        %9465 = builtin.unrealized_conversion_cast %9460 : !mini.ptr<i32> to !mini.ptr<i32>
        %9466 = "mini.unwrap"(%9465) : (!mini.ptr<i32>) -> i32
        %9467 = "mini.unwrap"(%9457) : (!mini.fatptr<"Animal">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %9468 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
        %9469 = "mini.parameterization"() {"id_hierarchy" = ["f64_typ"], "name_hierarchy" = ["Ptrf64"]} : () -> !llvm.ptr
        %9470 = "mini.parameterizations_array"(%9468, %9469, %9468) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mini.method_call"(%9470, %9467, %9462, %9464, %9466) {"offset" = 3 : i32, "vptrs" = ["i32_typ", "f64_typ", "i32_typ"], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, f64, i32) -> ()
        %9471 = "mini.to_fat_ptr"(%9457) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Animal", "to_typ_name" = "Animal"} : (!mini.fatptr<"Animal">) -> !mini.fatptr<"Animal">
        %9472 = "mini.refer"(%9471) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Animal">) -> !mini.fatptr<"Animal">
        "mini.castassign"(%9450, %9472) ({
          %9473 = builtin.unrealized_conversion_cast %9472 : !mini.fatptr<"Animal"> to !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>
        }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Animal", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>, !mini.fatptr<"Animal">) -> ()
      }) : (i1) -> ()
      "mini.castassign"(%9430, %9450) ({
        %9474 = builtin.unrealized_conversion_cast %9450 : !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]> to !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>, !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>) -> ()
    }) : () -> ()
    %9475 = "mini.checkflag"(%9430) {"typ_name" = "i32_typ"} : (!mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>) -> !mini.ptr<i1>
    %9476 = "mini.unwrap"(%9475) : (!mini.ptr<i1>) -> i1
    %9477 = builtin.unrealized_conversion_cast %9430 : !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]> to !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>
    "mini.if"(%9476) ({
      %9478 = "mini.narrow"(%9477) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>) -> !mini.ptr<i32>
      %9479 = "mini.unionize"(%9478) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
      %9480 = "mini.unwrap"(%9479) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %9481 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %9482 = "mini.parameterizations_array"(%9481) : (!llvm.ptr) -> !llvm.ptr
      "mini.class_method_call"(%9482, %9480) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      "mini.castassign"(%9477, %9478) ({
        %9483 = "mini.unionize"(%9478) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>
      }) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>, !mini.ptr<i32>) -> ()
    }) : (i1) -> ()
    %9484 = "mini.checkflag"(%9477) {"typ_name" = "Animal"} : (!mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>) -> !mini.ptr<i1>
    %9485 = "mini.unwrap"(%9484) : (!mini.ptr<i1>) -> i1
    %9486 = builtin.unrealized_conversion_cast %9477 : !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]> to !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>
    "mini.if"(%9485) ({
      %9487 = "mini.to_fat_ptr"(%9486) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "union_typ", "to_typ_name" = "Animal"} : (!mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>) -> !mini.fatptr<"Animal">
      %9488 = "mini.unwrap"(%9487) : (!mini.fatptr<"Animal">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      "mini.call"(%9488) {"func_name" = "make_em_speak", "ret_type" = !llvm.void} : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      "mini.castassign"(%9486, %9487) ({
        %9489 = builtin.unrealized_conversion_cast %9487 : !mini.fatptr<"Animal"> to !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Animal", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>, !mini.fatptr<"Animal">) -> ()
    }) : (i1) -> ()
    %9490 = "mini.unwrap"(%9297) : (!mini.fatptr<"Animal">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9491 = "mini.parameterizations_array"() : () -> !llvm.ptr
    "mini.method_call"(%9491, %9490) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %9492 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9493 = "mini.unwrap"(%9492) : (!mini.ptr<i32>) -> i32
    %9494 = "mini.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, i160)>)>, "class_name" = "ListNode", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !mini.fatptr<"ListNode">
    %9495 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9496 = builtin.unrealized_conversion_cast %9495 : !mini.ptr<i32> to !mini.ptr<i32>
    %9497 = "mini.unwrap"(%9496) : (!mini.ptr<i32>) -> i32
    %9498 = "mini.unwrap"(%9494) : (!mini.fatptr<"ListNode">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9499 = "mini.parameterizations_array"(%9191) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%9499, %9498, %9497) {"offset" = 2 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 12 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
    %9500 = "mini.to_fat_ptr"(%9494) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %9501 = "mini.refer"(%9500) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %9502 = "mini.to_fat_ptr"(%9501) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %9503 = "mini.refer"(%9502) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %9504 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9505 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9506 = "mini.unwrap"(%9504) : (!mini.ptr<i32>) -> i32
    %9507 = "mini.unwrap"(%9505) : (!mini.ptr<i32>) -> i32
    %9508 = "mini.new"() {"typ" = !llvm.struct<(i32, i32, i32)>, "class_name" = "Range", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Range">
    %9509 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9510 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9511 = builtin.unrealized_conversion_cast %9509 : !mini.ptr<i32> to !mini.ptr<i32>
    %9512 = "mini.unwrap"(%9511) : (!mini.ptr<i32>) -> i32
    %9513 = builtin.unrealized_conversion_cast %9510 : !mini.ptr<i32> to !mini.ptr<i32>
    %9514 = "mini.unwrap"(%9513) : (!mini.ptr<i32>) -> i32
    %9515 = "mini.unwrap"(%9508) : (!mini.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9516 = "mini.parameterizations_array"(%9191, %9191) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%9516, %9515, %9512, %9514) {"offset" = 4 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 57 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32) -> ()
    %9517 = "mini.unwrap"(%9508) : (!mini.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9518 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %9519 = "mini.method_call"(%9518, %9517) {"offset" = 16 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %9520 = "mini.to_fat_ptr"(%9519) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "RangeIterator"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"RangeIterator">
    %9521 = "mini.to_fat_ptr"(%9520) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "RangeIterator", "to_typ_name" = "RangeIterator"} : (!mini.fatptr<"RangeIterator">) -> !mini.fatptr<"RangeIterator">
    %9522 = "mini.refer"(%9521) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"RangeIterator">) -> !mini.fatptr<"RangeIterator">
    "mini.while"() ({
      %9523 = "mini.unwrap"(%9522) : (!mini.fatptr<"RangeIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %9524 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %9525 = "mini.method_call"(%9524, %9523) {"offset" = 4 : i32, "vptrs" = [], "vtable_size" = 9 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %9526 = builtin.unrealized_conversion_cast %9525 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %9527 = "mini.checkflag"(%9526) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i1>
      %9528 = "mini.unwrap"(%9527) : (!mini.ptr<i1>) -> i1
    }, {
      %9529 = "mini.narrow"(%9526) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
      %9530 = "mini.unwrap"(%9529) : (!mini.ptr<i32>) -> i32
      %9531 = "mini.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, i160)>)>, "class_name" = "ListNode", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !mini.fatptr<"ListNode">
      %9532 = builtin.unrealized_conversion_cast %9529 : !mini.ptr<i32> to !mini.ptr<i32>
      %9533 = "mini.unwrap"(%9532) : (!mini.ptr<i32>) -> i32
      %9534 = "mini.unwrap"(%9531) : (!mini.fatptr<"ListNode">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %9535 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %9536 = "mini.parameterizations_array"(%9535) : (!llvm.ptr) -> !llvm.ptr
      "mini.method_call"(%9536, %9534, %9533) {"offset" = 2 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 12 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
      %9537 = "mini.to_fat_ptr"(%9531) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
      %9538 = "mini.unwrap"(%9537) : (!mini.fatptr<"ListNode">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %9539 = "mini.unwrap"(%9503) : (!mini.fatptr<"ListNode">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %9540 = "mini.parameterization"() {"id_hierarchy" = ["ListNode"], "name_hierarchy" = ["ListNode"]} : () -> !llvm.ptr
      %9541 = "mini.parameterizations_array"(%9540) : (!llvm.ptr) -> !llvm.ptr
      %9542 = "mini.method_call"(%9541, %9539, %9538) {"offset" = 3 : i32, "vptrs" = [#none], "vtable_size" = 12 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ListNode">
      %9543 = "mini.to_fat_ptr"(%9542) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
      "mini.castassign"(%9503, %9543) ({
        %9544 = "mini.to_fat_ptr"(%9543) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode", "should_offset"} : (!mini.fatptr<"ListNode">, !mini.fatptr<"ListNode">) -> ()
      "mini.castassign"(%9526, %9529) ({
        %9545 = builtin.unrealized_conversion_cast %9529 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %9546 = "mini.unwrap"(%9501) : (!mini.fatptr<"ListNode">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9547 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %9548 = "mini.method_call"(%9547, %9546) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 12 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.ptr<i32>
    %9549 = builtin.unrealized_conversion_cast %9548 : !mini.ptr<i32> to !mini.ptr<i32>
    %9550 = "mini.unionize"(%9549) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %9551 = "mini.unwrap"(%9550) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %9552 = "mini.parameterizations_array"(%9191) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%9552, %9551) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %9553 = "mini.unwrap"(%9501) : (!mini.fatptr<"ListNode">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9554 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %9555 = "mini.method_call"(%9554, %9553) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 12 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ListIterator">
    %9556 = "mini.to_fat_ptr"(%9555) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListIterator", "to_typ_name" = "ListIterator"} : (!mini.fatptr<"ListIterator">) -> !mini.fatptr<"ListIterator">
    %9557 = "mini.to_fat_ptr"(%9556) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListIterator", "to_typ_name" = "ListIterator"} : (!mini.fatptr<"ListIterator">) -> !mini.fatptr<"ListIterator">
    %9558 = "mini.refer"(%9557) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ListIterator">) -> !mini.fatptr<"ListIterator">
    "mini.while"() ({
      %9559 = "mini.unwrap"(%9558) : (!mini.fatptr<"ListIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %9560 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %9561 = "mini.method_call"(%9560, %9559) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 5 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.fatptr<"ListNode">, !mini.nil]>
      %9562 = builtin.unrealized_conversion_cast %9561 : !mini.union<[!mini.fatptr<"ListNode">, !mini.nil]> to !mini.union<[!mini.fatptr<"ListNode">, !mini.nil]>
      %9563 = "mini.checkflag"(%9562) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.fatptr<"ListNode">, !mini.nil]>) -> !mini.ptr<i1>
      %9564 = "mini.unwrap"(%9563) : (!mini.ptr<i1>) -> i1
    }, {
      %9565 = "mini.to_fat_ptr"(%9562) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "union_typ", "to_typ_name" = "ListNode"} : (!mini.union<[!mini.fatptr<"ListNode">, !mini.nil]>) -> !mini.fatptr<"ListNode">
      %9566 = "mini.unwrap"(%9565) : (!mini.fatptr<"ListNode">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %9567 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %9568 = "mini.method_call"(%9567, %9566) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 12 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.ptr<i32>
      %9569 = builtin.unrealized_conversion_cast %9568 : !mini.ptr<i32> to !mini.ptr<i32>
      %9570 = "mini.unionize"(%9569) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
      %9571 = "mini.unwrap"(%9570) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %9572 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %9573 = "mini.parameterizations_array"(%9572) : (!llvm.ptr) -> !llvm.ptr
      "mini.class_method_call"(%9573, %9571) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      "mini.castassign"(%9562, %9565) ({
        %9574 = "mini.to_fat_ptr"(%9565) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode", "should_offset"} : (!mini.union<[!mini.fatptr<"ListNode">, !mini.nil]>, !mini.fatptr<"ListNode">) -> ()
    }) : () -> ()
    %9575 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    %9576 = "mini.addr_of"() {"global_name" = @print88} : () -> !llvm.ptr
    "llvm.store"(%9576, %9575) <{"ordering" = 0 : i64}> : (!llvm.ptr, !llvm.ptr) -> ()
    %9577 = "mini.coro_create"(%9575) {"arg_passer" = @coroutine_dhmcdbolhw_passer, "buffer_filler" = @coroutine_dhmcdbolhw_buffer_filler} : (!llvm.ptr) -> !mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing>
    %9578 = builtin.unrealized_conversion_cast %9577 : !mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing> to !mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing>
    %9579 = "mini.refer"(%9578) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing>) -> !mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing>
    %9580 = "mini.coro_call"(%9579) : (!mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing>) -> !llvm.struct<(!llvm.ptr, i160)>
    %9581 = "mini.wrap"(%9580) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>
    %9582 = "mini.literal"() {"value" = 89 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9583 = "mini.unionize"(%9582) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %9584 = "mini.unwrap"(%9583) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %9585 = "mini.parameterizations_array"(%9191) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%9585, %9584) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %9586 = "mini.coro_call"(%9579) : (!mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing>) -> !llvm.struct<(!llvm.ptr, i160)>
    %9587 = "mini.wrap"(%9586) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>
    %9588 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9589 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9590 = "mini.unwrap"(%9588) : (!mini.ptr<i32>) -> i32
    %9591 = "mini.unwrap"(%9589) : (!mini.ptr<i32>) -> i32
    %9592 = "mini.new"() {"typ" = !llvm.struct<(i32, i32, i32)>, "class_name" = "Range", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Range">
    %9593 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9594 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9595 = builtin.unrealized_conversion_cast %9593 : !mini.ptr<i32> to !mini.ptr<i32>
    %9596 = "mini.unwrap"(%9595) : (!mini.ptr<i32>) -> i32
    %9597 = builtin.unrealized_conversion_cast %9594 : !mini.ptr<i32> to !mini.ptr<i32>
    %9598 = "mini.unwrap"(%9597) : (!mini.ptr<i32>) -> i32
    %9599 = "mini.unwrap"(%9592) : (!mini.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9600 = "mini.parameterizations_array"(%9191, %9191) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%9600, %9599, %9596, %9598) {"offset" = 4 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 57 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32) -> ()
    %9601 = "mini.unwrap"(%9592) : (!mini.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9602 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %9603 = "mini.method_call"(%9602, %9601) {"offset" = 16 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %9604 = "mini.to_fat_ptr"(%9603) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "RangeIterator"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"RangeIterator">
    %9605 = "mini.to_fat_ptr"(%9604) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "RangeIterator", "to_typ_name" = "RangeIterator"} : (!mini.fatptr<"RangeIterator">) -> !mini.fatptr<"RangeIterator">
    %9606 = "mini.refer"(%9605) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"RangeIterator">) -> !mini.fatptr<"RangeIterator">
    "mini.while"() ({
      %9607 = "mini.unwrap"(%9606) : (!mini.fatptr<"RangeIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %9608 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %9609 = "mini.method_call"(%9608, %9607) {"offset" = 4 : i32, "vptrs" = [], "vtable_size" = 9 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %9610 = builtin.unrealized_conversion_cast %9609 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %9611 = "mini.checkflag"(%9610) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i1>
      %9612 = "mini.unwrap"(%9611) : (!mini.ptr<i1>) -> i1
    }, {
      %9613 = "mini.narrow"(%9610) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
      %9614 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %9615 = "mini.unwrap"(%9613) : (!mini.ptr<i32>) -> i32
      %9616 = "mini.unwrap"(%9614) : (!mini.ptr<i32>) -> i32
      %9617 = "mini.comparison"(%9615, %9616) {"op" = "EQ"} : (i32, i32) -> i1
      %9618 = "mini.wrap"(%9617) : (i1) -> !mini.ptr<i32>
      %9619 = "mini.unwrap"(%9618) : (!mini.ptr<i32>) -> i1
      "mini.if"(%9619) ({
        "mini.break"() [^bb1871] : () -> ()
      }) : (i1) -> ()
      %9620 = "mini.unionize"(%9613) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
      %9621 = "mini.unwrap"(%9620) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %9622 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %9623 = "mini.parameterizations_array"(%9622) : (!llvm.ptr) -> !llvm.ptr
      "mini.class_method_call"(%9623, %9621) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      "mini.castassign"(%9610, %9613) ({
        %9624 = builtin.unrealized_conversion_cast %9613 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %9625 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9626 = "mini.create_buffer"(%9625) {"typ" = i32, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %9627 = builtin.unrealized_conversion_cast %9626 : !llvm.ptr to !mini.buffer<!mini.ptr<i32>>
    %9628 = "mini.refer"(%9627) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    %9629 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9630 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9631 = builtin.unrealized_conversion_cast %9629 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.buffer_set"(%9628, %9630, %9631) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %9632 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9633 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9634 = builtin.unrealized_conversion_cast %9632 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.buffer_set"(%9628, %9633, %9634) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %9635 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9636 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9637 = builtin.unrealized_conversion_cast %9635 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.buffer_set"(%9628, %9636, %9637) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %9638 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9639 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9640 = builtin.unrealized_conversion_cast %9638 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.buffer_set"(%9628, %9639, %9640) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %9641 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9642 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9643 = "mini.unwrap"(%9628) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %9644 = "mini.unwrap"(%9641) : (!mini.ptr<i32>) -> i32
    %9645 = "mini.unwrap"(%9642) : (!mini.ptr<i32>) -> i32
    %9646 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "IntArray", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"IntArray">
    %9647 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9648 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9649 = builtin.unrealized_conversion_cast %9628 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %9650 = "mini.unwrap"(%9649) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %9651 = builtin.unrealized_conversion_cast %9647 : !mini.ptr<i32> to !mini.ptr<i32>
    %9652 = "mini.unwrap"(%9651) : (!mini.ptr<i32>) -> i32
    %9653 = builtin.unrealized_conversion_cast %9648 : !mini.ptr<i32> to !mini.ptr<i32>
    %9654 = "mini.unwrap"(%9653) : (!mini.ptr<i32>) -> i32
    %9655 = "mini.unwrap"(%9646) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9656 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri32"]} : () -> !llvm.ptr
    %9657 = "mini.parameterizations_array"(%9656, %9191, %9191) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%9657, %9655, %9650, %9652, %9654) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %9658 = "mini.to_fat_ptr"(%9646) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %9659 = "mini.refer"(%9658) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %9660 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9661 = "mini.create_buffer"(%9660) {"typ" = i32, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %9662 = builtin.unrealized_conversion_cast %9661 : !llvm.ptr to !mini.buffer<!mini.ptr<i32>>
    %9663 = "mini.refer"(%9662) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    %9664 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9665 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9666 = builtin.unrealized_conversion_cast %9664 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.buffer_set"(%9663, %9665, %9666) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %9667 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9668 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9669 = builtin.unrealized_conversion_cast %9667 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.buffer_set"(%9663, %9668, %9669) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %9670 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9671 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9672 = builtin.unrealized_conversion_cast %9670 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.buffer_set"(%9663, %9671, %9672) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %9673 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9674 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9675 = builtin.unrealized_conversion_cast %9673 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.buffer_set"(%9663, %9674, %9675) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %9676 = "mini.literal"() {"value" = 9 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9677 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9678 = builtin.unrealized_conversion_cast %9676 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.buffer_set"(%9663, %9677, %9678) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %9679 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9680 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9681 = builtin.unrealized_conversion_cast %9679 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.buffer_set"(%9663, %9680, %9681) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %9682 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9683 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9684 = "mini.unwrap"(%9663) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %9685 = "mini.unwrap"(%9682) : (!mini.ptr<i32>) -> i32
    %9686 = "mini.unwrap"(%9683) : (!mini.ptr<i32>) -> i32
    %9687 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "IntArray", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"IntArray">
    %9688 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9689 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9690 = builtin.unrealized_conversion_cast %9663 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %9691 = "mini.unwrap"(%9690) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %9692 = builtin.unrealized_conversion_cast %9688 : !mini.ptr<i32> to !mini.ptr<i32>
    %9693 = "mini.unwrap"(%9692) : (!mini.ptr<i32>) -> i32
    %9694 = builtin.unrealized_conversion_cast %9689 : !mini.ptr<i32> to !mini.ptr<i32>
    %9695 = "mini.unwrap"(%9694) : (!mini.ptr<i32>) -> i32
    %9696 = "mini.unwrap"(%9687) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9697 = "mini.parameterizations_array"(%9656, %9191, %9191) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%9697, %9696, %9691, %9693, %9695) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %9698 = "mini.to_fat_ptr"(%9687) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %9699 = "mini.unwrap"(%9698) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9700 = "mini.unwrap"(%9659) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9701 = "mini.parameterization"() {"id_hierarchy" = ["IntArray"], "name_hierarchy" = ["IntArray"]} : () -> !llvm.ptr
    %9702 = "mini.parameterizations_array"(%9701) : (!llvm.ptr) -> !llvm.ptr
    %9703 = "mini.method_call"(%9702, %9700, %9699) {"offset" = 10 : i32, "vptrs" = [#none], "vtable_size" = 77 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArray">
    %9704 = "mini.to_fat_ptr"(%9703) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %9705 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9706 = builtin.unrealized_conversion_cast %9705 : !mini.ptr<i32> to !mini.ptr<i32>
    %9707 = "mini.unwrap"(%9706) : (!mini.ptr<i32>) -> i32
    %9708 = "mini.unwrap"(%9659) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9709 = "mini.parameterizations_array"(%9191) : (!llvm.ptr) -> !llvm.ptr
    %9710 = "mini.method_call"(%9709, %9708, %9707) {"offset" = 11 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 77 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !mini.ptr<i32>
    %9711 = builtin.unrealized_conversion_cast %9710 : !mini.ptr<i32> to !mini.ptr<i32>
    %9712 = "mini.unionize"(%9711) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %9713 = "mini.unwrap"(%9712) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %9714 = "mini.parameterizations_array"(%9191) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%9714, %9713) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %9715 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9716 = "mini.create_buffer"(%9715) {"typ" = i32, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %9717 = builtin.unrealized_conversion_cast %9716 : !llvm.ptr to !mini.buffer<!mini.ptr<i32>>
    %9718 = "mini.refer"(%9717) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    %9719 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9720 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9721 = "mini.unwrap"(%9718) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %9722 = "mini.unwrap"(%9719) : (!mini.ptr<i32>) -> i32
    %9723 = "mini.unwrap"(%9720) : (!mini.ptr<i32>) -> i32
    %9724 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "IntArray", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"IntArray">
    %9725 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9726 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9727 = builtin.unrealized_conversion_cast %9718 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %9728 = "mini.unwrap"(%9727) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %9729 = builtin.unrealized_conversion_cast %9725 : !mini.ptr<i32> to !mini.ptr<i32>
    %9730 = "mini.unwrap"(%9729) : (!mini.ptr<i32>) -> i32
    %9731 = builtin.unrealized_conversion_cast %9726 : !mini.ptr<i32> to !mini.ptr<i32>
    %9732 = "mini.unwrap"(%9731) : (!mini.ptr<i32>) -> i32
    %9733 = "mini.unwrap"(%9724) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9734 = "mini.parameterizations_array"(%9656, %9191, %9191) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%9734, %9733, %9728, %9730, %9732) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %9735 = "mini.to_fat_ptr"(%9724) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %9736 = "mini.refer"(%9735) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %9737 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9738 = "mini.create_buffer"(%9737) {"typ" = i32, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %9739 = builtin.unrealized_conversion_cast %9738 : !llvm.ptr to !mini.buffer<!mini.ptr<i32>>
    %9740 = "mini.refer"(%9739) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    %9741 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9742 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9743 = builtin.unrealized_conversion_cast %9741 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.buffer_set"(%9740, %9742, %9743) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %9744 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9745 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9746 = builtin.unrealized_conversion_cast %9744 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.buffer_set"(%9740, %9745, %9746) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %9747 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9748 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9749 = builtin.unrealized_conversion_cast %9747 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.buffer_set"(%9740, %9748, %9749) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %9750 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9751 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9752 = builtin.unrealized_conversion_cast %9750 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.buffer_set"(%9740, %9751, %9752) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %9753 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9754 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9755 = "mini.unwrap"(%9740) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %9756 = "mini.unwrap"(%9753) : (!mini.ptr<i32>) -> i32
    %9757 = "mini.unwrap"(%9754) : (!mini.ptr<i32>) -> i32
    %9758 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "IntArray", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"IntArray">
    %9759 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9760 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9761 = builtin.unrealized_conversion_cast %9740 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %9762 = "mini.unwrap"(%9761) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %9763 = builtin.unrealized_conversion_cast %9759 : !mini.ptr<i32> to !mini.ptr<i32>
    %9764 = "mini.unwrap"(%9763) : (!mini.ptr<i32>) -> i32
    %9765 = builtin.unrealized_conversion_cast %9760 : !mini.ptr<i32> to !mini.ptr<i32>
    %9766 = "mini.unwrap"(%9765) : (!mini.ptr<i32>) -> i32
    %9767 = "mini.unwrap"(%9758) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9768 = "mini.parameterizations_array"(%9656, %9191, %9191) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%9768, %9767, %9762, %9764, %9766) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %9769 = "mini.to_fat_ptr"(%9758) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %9770 = "mini.unwrap"(%9769) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9771 = "mini.unwrap"(%9736) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9772 = "mini.parameterizations_array"(%9701) : (!llvm.ptr) -> !llvm.ptr
    %9773 = "mini.method_call"(%9772, %9771, %9770) {"offset" = 10 : i32, "vptrs" = [#none], "vtable_size" = 77 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArray">
    %9774 = "mini.to_fat_ptr"(%9773) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %9775 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9776 = builtin.unrealized_conversion_cast %9775 : !mini.ptr<i32> to !mini.ptr<i32>
    %9777 = "mini.unwrap"(%9776) : (!mini.ptr<i32>) -> i32
    %9778 = "mini.unwrap"(%9736) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9779 = "mini.parameterizations_array"(%9191) : (!llvm.ptr) -> !llvm.ptr
    %9780 = "mini.method_call"(%9779, %9778, %9777) {"offset" = 11 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 77 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !mini.ptr<i32>
    %9781 = builtin.unrealized_conversion_cast %9780 : !mini.ptr<i32> to !mini.ptr<i32>
    %9782 = "mini.unionize"(%9781) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %9783 = "mini.unwrap"(%9782) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %9784 = "mini.parameterizations_array"(%9191) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%9784, %9783) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    "mini.call"() {"func_name" = "grabo", "ret_type" = !llvm.void} : () -> ()
    %9785 = "mini.checkflag"(%9659) {"typ_name" = "IntArray"} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i1>
    %9786 = "mini.unwrap"(%9785) : (!mini.ptr<i1>) -> i1
    %9787 = "mini.logical"(%9786) ({
      %9788 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %9789 = builtin.unrealized_conversion_cast %9788 : !mini.ptr<i32> to !mini.ptr<i32>
      %9790 = "mini.unwrap"(%9789) : (!mini.ptr<i32>) -> i32
      %9791 = "mini.unwrap"(%9659) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %9792 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %9793 = "mini.parameterizations_array"(%9792) : (!llvm.ptr) -> !llvm.ptr
      %9794 = "mini.method_call"(%9793, %9791, %9790) {"offset" = 11 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 77 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !mini.ptr<i32>
      %9795 = builtin.unrealized_conversion_cast %9794 : !mini.ptr<i32> to !mini.ptr<i32>
      %9796 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %9797 = "mini.unwrap"(%9795) : (!mini.ptr<i32>) -> i32
      %9798 = "mini.unwrap"(%9796) : (!mini.ptr<i32>) -> i32
      %9799 = "mini.comparison"(%9797, %9798) {"op" = "EQ"} : (i32, i32) -> i1
      %9800 = "mini.wrap"(%9799) : (i1) -> !mini.ptr<i32>
      func.return %9800 : !mini.ptr<i32>
    }) {"op" = "and"} : (i1) -> i1
    %9801 = "mini.wrap"(%9787) : (i1) -> !mini.ptr<i1>
    %9802 = "mini.unwrap"(%9801) : (!mini.ptr<i1>) -> i1
    "mini.if"(%9802) ({
      %9803 = "mini.literal"() {"value" = 15 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %9804 = "mini.create_buffer"(%9803) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
      %9805 = builtin.unrealized_conversion_cast %9804 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
      %9806 = "mini.refer"(%9805) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
      %9807 = "mini.literal"() {"typ" = !llvm.array<14 x i8>, "value" = "so it is true!"} : () -> !llvm.ptr
      %9808 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mini.buffer_set"(%9806, %9808, %9807) {"typ" = !llvm.array<14 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
      %9809 = "mini.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %9810 = "mini.literal"() {"value" = 15 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %9811 = "mini.unwrap"(%9806) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
      %9812 = "mini.unwrap"(%9809) : (!mini.ptr<i32>) -> i32
      %9813 = "mini.unwrap"(%9810) : (!mini.ptr<i32>) -> i32
      %9814 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
      %9815 = "mini.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %9816 = "mini.literal"() {"value" = 15 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %9817 = builtin.unrealized_conversion_cast %9806 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
      %9818 = "mini.unwrap"(%9817) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
      %9819 = builtin.unrealized_conversion_cast %9815 : !mini.ptr<i32> to !mini.ptr<i32>
      %9820 = "mini.unwrap"(%9819) : (!mini.ptr<i32>) -> i32
      %9821 = builtin.unrealized_conversion_cast %9816 : !mini.ptr<i32> to !mini.ptr<i32>
      %9822 = "mini.unwrap"(%9821) : (!mini.ptr<i32>) -> i32
      %9823 = "mini.unwrap"(%9814) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %9824 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
      %9825 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %9826 = "mini.parameterizations_array"(%9824, %9825, %9825) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mini.method_call"(%9826, %9823, %9818, %9820, %9822) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %9827 = builtin.unrealized_conversion_cast %9814 : !mini.fatptr<"String"> to !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
      %9828 = "mini.unwrap"(%9827) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %9829 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %9830 = "mini.parameterizations_array"(%9829) : (!llvm.ptr) -> !llvm.ptr
      "mini.class_method_call"(%9830, %9828) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    }) : (i1) -> ()
    %9831 = "mini.literal"() {"value" = 5 : i64, "typ" = i64} : () -> !mini.ptr<i64>
    %9832 = builtin.unrealized_conversion_cast %9831 : !mini.ptr<i64> to !mini.ptr<i64>
    %9833 = "mini.unionize"(%9832) {"from_typ" = i64, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i64>) -> !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %9834 = "mini.unwrap"(%9833) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %9835 = "mini.parameterization"() {"id_hierarchy" = ["i64_typ"], "name_hierarchy" = ["Ptri64"]} : () -> !llvm.ptr
    %9836 = "mini.parameterizations_array"(%9835) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%9836, %9834) {"offset" = 0 : i32, "vptrs" = ["i64_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %9837 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9838 = "mini.int_to_float"(%9837) {"from_typ" = i32, "to_typ" = f64, "from_typ_name" = "i32_typ", "to_typ_name" = "f64_typ"} : (!mini.ptr<i32>) -> !mini.ptr<f64>
    %9839 = "mini.unionize"(%9838) {"from_typ" = f64, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<f64>) -> !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %9840 = "mini.unwrap"(%9839) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %9841 = "mini.parameterizations_array"(%9251) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%9841, %9840) {"offset" = 0 : i32, "vptrs" = ["f64_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %9842 = "mini.literal"() {"value" = 11 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9843 = "mini.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9844 = "mini.unwrap"(%9842) : (!mini.ptr<i32>) -> i32
    %9845 = "mini.unwrap"(%9843) : (!mini.ptr<i32>) -> i32
    %9846 = "mini.new"() {"typ" = !llvm.struct<(i32, i32, i32)>, "class_name" = "Range", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Range">
    %9847 = "mini.literal"() {"value" = 11 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9848 = "mini.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9849 = builtin.unrealized_conversion_cast %9847 : !mini.ptr<i32> to !mini.ptr<i32>
    %9850 = "mini.unwrap"(%9849) : (!mini.ptr<i32>) -> i32
    %9851 = builtin.unrealized_conversion_cast %9848 : !mini.ptr<i32> to !mini.ptr<i32>
    %9852 = "mini.unwrap"(%9851) : (!mini.ptr<i32>) -> i32
    %9853 = "mini.unwrap"(%9846) : (!mini.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9854 = "mini.parameterizations_array"(%9191, %9191) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%9854, %9853, %9850, %9852) {"offset" = 4 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 57 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32) -> ()
    %9855 = "mini.unwrap"(%9846) : (!mini.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9856 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %9857 = "mini.method_call"(%9856, %9855) {"offset" = 16 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %9858 = "mini.to_fat_ptr"(%9857) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "RangeIterator"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"RangeIterator">
    %9859 = "mini.to_fat_ptr"(%9858) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "RangeIterator", "to_typ_name" = "RangeIterator"} : (!mini.fatptr<"RangeIterator">) -> !mini.fatptr<"RangeIterator">
    %9860 = "mini.refer"(%9859) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"RangeIterator">) -> !mini.fatptr<"RangeIterator">
    "mini.while"() ({
      %9861 = "mini.unwrap"(%9860) : (!mini.fatptr<"RangeIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %9862 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %9863 = "mini.method_call"(%9862, %9861) {"offset" = 4 : i32, "vptrs" = [], "vtable_size" = 9 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %9864 = builtin.unrealized_conversion_cast %9863 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %9865 = "mini.checkflag"(%9864) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i1>
      %9866 = "mini.unwrap"(%9865) : (!mini.ptr<i1>) -> i1
    }, {
      %9867 = "mini.narrow"(%9864) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
      %9868 = "mini.unionize"(%9867) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
      %9869 = "mini.unwrap"(%9868) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %9870 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %9871 = "mini.parameterizations_array"(%9870) : (!llvm.ptr) -> !llvm.ptr
      "mini.class_method_call"(%9871, %9869) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      "mini.castassign"(%9864, %9867) ({
        %9872 = builtin.unrealized_conversion_cast %9867 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %9873 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9874 = "mini.create_buffer"(%9873) {"typ" = i32, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %9875 = builtin.unrealized_conversion_cast %9874 : !llvm.ptr to !mini.buffer<!mini.ptr<i32>>
    %9876 = "mini.refer"(%9875) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    %9877 = "mini.literal"() {"value" = 44 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9878 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9879 = builtin.unrealized_conversion_cast %9877 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.buffer_set"(%9876, %9878, %9879) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %9880 = "mini.literal"() {"value" = 55 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9881 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9882 = builtin.unrealized_conversion_cast %9880 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.buffer_set"(%9876, %9881, %9882) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %9883 = "mini.literal"() {"value" = 66 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9884 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9885 = builtin.unrealized_conversion_cast %9883 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.buffer_set"(%9876, %9884, %9885) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %9886 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9887 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9888 = "mini.unwrap"(%9876) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %9889 = "mini.unwrap"(%9886) : (!mini.ptr<i32>) -> i32
    %9890 = "mini.unwrap"(%9887) : (!mini.ptr<i32>) -> i32
    %9891 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "IntArray", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"IntArray">
    %9892 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9893 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9894 = builtin.unrealized_conversion_cast %9876 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %9895 = "mini.unwrap"(%9894) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %9896 = builtin.unrealized_conversion_cast %9892 : !mini.ptr<i32> to !mini.ptr<i32>
    %9897 = "mini.unwrap"(%9896) : (!mini.ptr<i32>) -> i32
    %9898 = builtin.unrealized_conversion_cast %9893 : !mini.ptr<i32> to !mini.ptr<i32>
    %9899 = "mini.unwrap"(%9898) : (!mini.ptr<i32>) -> i32
    %9900 = "mini.unwrap"(%9891) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9901 = "mini.parameterizations_array"(%9656, %9191, %9191) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%9901, %9900, %9895, %9897, %9899) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %9902 = "mini.unwrap"(%9891) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9903 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %9904 = "mini.method_call"(%9903, %9902) {"offset" = 24 : i32, "vptrs" = [], "vtable_size" = 77 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %9905 = "mini.to_fat_ptr"(%9904) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntArrayIterator"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntArrayIterator">
    %9906 = "mini.to_fat_ptr"(%9905) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArrayIterator", "to_typ_name" = "IntArrayIterator"} : (!mini.fatptr<"IntArrayIterator">) -> !mini.fatptr<"IntArrayIterator">
    %9907 = "mini.refer"(%9906) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"IntArrayIterator">) -> !mini.fatptr<"IntArrayIterator">
    "mini.while"() ({
      %9908 = "mini.unwrap"(%9907) : (!mini.fatptr<"IntArrayIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %9909 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %9910 = "mini.method_call"(%9909, %9908) {"offset" = 3 : i32, "vptrs" = [], "vtable_size" = 8 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %9911 = builtin.unrealized_conversion_cast %9910 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %9912 = "mini.checkflag"(%9911) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i1>
      %9913 = "mini.unwrap"(%9912) : (!mini.ptr<i1>) -> i1
    }, {
      %9914 = "mini.narrow"(%9911) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
      %9915 = "mini.unionize"(%9914) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
      %9916 = "mini.unwrap"(%9915) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %9917 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %9918 = "mini.parameterizations_array"(%9917) : (!llvm.ptr) -> !llvm.ptr
      "mini.class_method_call"(%9918, %9916) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      "mini.castassign"(%9911, %9914) ({
        %9919 = builtin.unrealized_conversion_cast %9914 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %9920 = "mini.literal"() {"value" = 3 : i8, "typ" = i8} : () -> !mini.ptr<i8>
    %9921 = builtin.unrealized_conversion_cast %9920 : !mini.ptr<i8> to !mini.ptr<i8>
    %9922 = "mini.unionize"(%9921) {"from_typ" = i8, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i8_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i8>) -> !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %9923 = "mini.unwrap"(%9922) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %9924 = "mini.parameterization"() {"id_hierarchy" = ["i8_typ"], "name_hierarchy" = ["Ptri8"]} : () -> !llvm.ptr
    %9925 = "mini.parameterizations_array"(%9924) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%9925, %9923) {"offset" = 0 : i32, "vptrs" = ["i8_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %9926 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9927 = "mini.create_buffer"(%9926) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %9928 = builtin.unrealized_conversion_cast %9927 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %9929 = "mini.refer"(%9928) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %9930 = "mini.literal"() {"typ" = !llvm.array<5 x i8>, "value" = "boom!"} : () -> !llvm.ptr
    %9931 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%9929, %9931, %9930) {"typ" = !llvm.array<5 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %9932 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9933 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9934 = "mini.unwrap"(%9929) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %9935 = "mini.unwrap"(%9932) : (!mini.ptr<i32>) -> i32
    %9936 = "mini.unwrap"(%9933) : (!mini.ptr<i32>) -> i32
    %9937 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %9938 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9939 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9940 = builtin.unrealized_conversion_cast %9929 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %9941 = "mini.unwrap"(%9940) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %9942 = builtin.unrealized_conversion_cast %9938 : !mini.ptr<i32> to !mini.ptr<i32>
    %9943 = "mini.unwrap"(%9942) : (!mini.ptr<i32>) -> i32
    %9944 = builtin.unrealized_conversion_cast %9939 : !mini.ptr<i32> to !mini.ptr<i32>
    %9945 = "mini.unwrap"(%9944) : (!mini.ptr<i32>) -> i32
    %9946 = "mini.unwrap"(%9937) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9947 = "mini.parameterizations_array"(%9214, %9191, %9191) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%9947, %9946, %9941, %9943, %9945) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %9948 = "mini.unwrap"(%9937) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9949 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %9950 = "mini.method_call"(%9949, %9948) {"offset" = 15 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %9951 = "mini.to_fat_ptr"(%9950) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "StringIterator"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"StringIterator">
    %9952 = "mini.to_fat_ptr"(%9951) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "StringIterator", "to_typ_name" = "StringIterator"} : (!mini.fatptr<"StringIterator">) -> !mini.fatptr<"StringIterator">
    %9953 = "mini.refer"(%9952) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"StringIterator">) -> !mini.fatptr<"StringIterator">
    "mini.while"() ({
      %9954 = "mini.unwrap"(%9953) : (!mini.fatptr<"StringIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %9955 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %9956 = "mini.method_call"(%9955, %9954) {"offset" = 3 : i32, "vptrs" = [], "vtable_size" = 6 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.fatptr<"Character">, !mini.nil]>
      %9957 = builtin.unrealized_conversion_cast %9956 : !mini.union<[!mini.fatptr<"Character">, !mini.nil]> to !mini.union<[!mini.fatptr<"Character">, !mini.nil]>
      %9958 = "mini.checkflag"(%9957) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.fatptr<"Character">, !mini.nil]>) -> !mini.ptr<i1>
      %9959 = "mini.unwrap"(%9958) : (!mini.ptr<i1>) -> i1
    }, {
      %9960 = "mini.to_fat_ptr"(%9957) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "union_typ", "to_typ_name" = "Character"} : (!mini.union<[!mini.fatptr<"Character">, !mini.nil]>) -> !mini.fatptr<"Character">
      %9961 = builtin.unrealized_conversion_cast %9960 : !mini.fatptr<"Character"> to !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
      %9962 = "mini.unwrap"(%9961) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %9963 = "mini.parameterization"() {"id_hierarchy" = ["Character"], "name_hierarchy" = ["Character"]} : () -> !llvm.ptr
      %9964 = "mini.parameterizations_array"(%9963) : (!llvm.ptr) -> !llvm.ptr
      "mini.class_method_call"(%9964, %9962) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      "mini.castassign"(%9957, %9960) ({
        %9965 = "mini.to_fat_ptr"(%9960) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Character", "to_typ_name" = "Character"} : (!mini.fatptr<"Character">) -> !mini.fatptr<"Character">
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Character", "to_typ_name" = "Character", "should_offset"} : (!mini.union<[!mini.fatptr<"Character">, !mini.nil]>, !mini.fatptr<"Character">) -> ()
    }) : () -> ()
    %9966 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9967 = "mini.create_buffer"(%9966) {"typ" = i32, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %9968 = builtin.unrealized_conversion_cast %9967 : !llvm.ptr to !mini.buffer<!mini.ptr<i32>>
    %9969 = "mini.refer"(%9968) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    %9970 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9971 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9972 = builtin.unrealized_conversion_cast %9970 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.buffer_set"(%9969, %9971, %9972) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %9973 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9974 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9975 = builtin.unrealized_conversion_cast %9973 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.buffer_set"(%9969, %9974, %9975) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %9976 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9977 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9978 = builtin.unrealized_conversion_cast %9976 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.buffer_set"(%9969, %9977, %9978) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %9979 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9980 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9981 = "mini.unwrap"(%9969) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %9982 = "mini.unwrap"(%9979) : (!mini.ptr<i32>) -> i32
    %9983 = "mini.unwrap"(%9980) : (!mini.ptr<i32>) -> i32
    %9984 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "IntArray", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"IntArray">
    %9985 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9986 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %9987 = builtin.unrealized_conversion_cast %9969 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %9988 = "mini.unwrap"(%9987) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %9989 = builtin.unrealized_conversion_cast %9985 : !mini.ptr<i32> to !mini.ptr<i32>
    %9990 = "mini.unwrap"(%9989) : (!mini.ptr<i32>) -> i32
    %9991 = builtin.unrealized_conversion_cast %9986 : !mini.ptr<i32> to !mini.ptr<i32>
    %9992 = "mini.unwrap"(%9991) : (!mini.ptr<i32>) -> i32
    %9993 = "mini.unwrap"(%9984) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9994 = "mini.parameterizations_array"(%9656, %9191, %9191) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%9994, %9993, %9988, %9990, %9992) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %9995 = "mini.unwrap"(%9984) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9996 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %9997 = "mini.method_call"(%9996, %9995) {"offset" = 25 : i32, "vptrs" = [], "vtable_size" = 77 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %9998 = "mini.to_fat_ptr"(%9997) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %9999 = builtin.unrealized_conversion_cast %9998 : !mini.fatptr<"String"> to !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %10000 = "mini.unwrap"(%9999) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %10001 = "mini.parameterizations_array"(%9218) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%10001, %10000) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %10002 = "mini.literal"() {"value" = 77 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10003 = "mini.unwrap"(%10002) : (!mini.ptr<i32>) -> i32
    %10004 = "mini.new"() {"typ" = !llvm.struct<(i32)>, "class_name" = "Integer2", "num_data_fields" = 1 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Integer2">
    %10005 = "mini.literal"() {"value" = 77 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10006 = builtin.unrealized_conversion_cast %10005 : !mini.ptr<i32> to !mini.ptr<i32>
    %10007 = "mini.unwrap"(%10006) : (!mini.ptr<i32>) -> i32
    %10008 = "mini.unwrap"(%10004) : (!mini.fatptr<"Integer2">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %10009 = "mini.parameterizations_array"(%9191) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%10009, %10008, %10007) {"offset" = 2 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 40 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
    %10010 = "mini.to_fat_ptr"(%10004) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Integer2", "to_typ_name" = "Integer2"} : (!mini.fatptr<"Integer2">) -> !mini.fatptr<"Integer2">
    %10011 = "mini.refer"(%10010) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Integer2">) -> !mini.fatptr<"Integer2">
    %10012 = "mini.unwrap"(%10011) : (!mini.fatptr<"Integer2">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %10013 = "mini.parameterizations_array"() : () -> !llvm.ptr
    "mini.method_call"(%10013, %10012) {"offset" = 7 : i32, "vptrs" = [], "vtable_size" = 40 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %10014 = builtin.unrealized_conversion_cast %10011 : !mini.fatptr<"Integer2"> to !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %10015 = "mini.unwrap"(%10014) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %10016 = "mini.parameterization"() {"id_hierarchy" = ["Integer2"], "name_hierarchy" = ["Integer2"]} : () -> !llvm.ptr
    %10017 = "mini.parameterizations_array"(%10016) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%10017, %10015) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %10018 = "mini.unwrap"(%10011) : (!mini.fatptr<"Integer2">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %10019 = "mini.parameterizations_array"() : () -> !llvm.ptr
    "mini.method_call"(%10019, %10018) {"offset" = 8 : i32, "vptrs" = [], "vtable_size" = 40 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %10020 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10021 = builtin.unrealized_conversion_cast %10020 : !mini.ptr<i32> to !mini.ptr<i32>
    %10022 = "mini.unwrap"(%10021) : (!mini.ptr<i32>) -> i32
    %10023 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10024 = "mini.literal"() {"value" = 25 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10025 = "mini.unwrap"(%10023) : (!mini.ptr<i32>) -> i32
    %10026 = "mini.unwrap"(%10024) : (!mini.ptr<i32>) -> i32
    %10027 = "mini.new"() {"typ" = !llvm.struct<(i32, i32, i32)>, "class_name" = "Range", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Range">
    %10028 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10029 = "mini.literal"() {"value" = 25 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10030 = builtin.unrealized_conversion_cast %10028 : !mini.ptr<i32> to !mini.ptr<i32>
    %10031 = "mini.unwrap"(%10030) : (!mini.ptr<i32>) -> i32
    %10032 = builtin.unrealized_conversion_cast %10029 : !mini.ptr<i32> to !mini.ptr<i32>
    %10033 = "mini.unwrap"(%10032) : (!mini.ptr<i32>) -> i32
    %10034 = "mini.unwrap"(%10027) : (!mini.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %10035 = "mini.parameterizations_array"(%9191, %9191) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%10035, %10034, %10031, %10033) {"offset" = 4 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 57 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32) -> ()
    %10036 = "mini.unwrap"(%10027) : (!mini.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %10037 = "mini.parameterizations_array"(%9191) : (!llvm.ptr) -> !llvm.ptr
    %10038 = "mini.method_call"(%10037, %10036, %10022) {"offset" = 5 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !mini.fatptr<"Range">
    %10039 = "mini.to_fat_ptr"(%10038) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Range", "to_typ_name" = "Range"} : (!mini.fatptr<"Range">) -> !mini.fatptr<"Range">
    %10040 = "mini.unwrap"(%10039) : (!mini.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %10041 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %10042 = "mini.method_call"(%10041, %10040) {"offset" = 16 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %10043 = "mini.to_fat_ptr"(%10042) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "RangeIterator"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"RangeIterator">
    %10044 = "mini.to_fat_ptr"(%10043) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "RangeIterator", "to_typ_name" = "RangeIterator"} : (!mini.fatptr<"RangeIterator">) -> !mini.fatptr<"RangeIterator">
    %10045 = "mini.refer"(%10044) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"RangeIterator">) -> !mini.fatptr<"RangeIterator">
    "mini.while"() ({
      %10046 = "mini.unwrap"(%10045) : (!mini.fatptr<"RangeIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %10047 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %10048 = "mini.method_call"(%10047, %10046) {"offset" = 4 : i32, "vptrs" = [], "vtable_size" = 9 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %10049 = builtin.unrealized_conversion_cast %10048 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %10050 = "mini.checkflag"(%10049) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i1>
      %10051 = "mini.unwrap"(%10050) : (!mini.ptr<i1>) -> i1
    }, {
      %10052 = "mini.narrow"(%10049) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
      %10053 = "mini.unionize"(%10052) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
      %10054 = "mini.unwrap"(%10053) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %10055 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %10056 = "mini.parameterizations_array"(%10055) : (!llvm.ptr) -> !llvm.ptr
      "mini.class_method_call"(%10056, %10054) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      "mini.castassign"(%10049, %10052) ({
        %10057 = builtin.unrealized_conversion_cast %10052 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %10058 = "mini.addr_of"() {"global_name" = @_functionliteral_bhurvujjdr} : () -> !llvm.ptr
    %10059 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "llvm.store"(%10058, %10059) <{"ordering" = 0 : i64}> : (!llvm.ptr, !llvm.ptr) -> ()
    %10060 = "mini.addr_of"() {"global_name" = @_functionliteral_avxssgxxhx} : () -> !llvm.ptr
    %10061 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "llvm.store"(%10060, %10061) <{"ordering" = 0 : i64}> : (!llvm.ptr, !llvm.ptr) -> ()
    %10062 = "mini.addr_of"() {"global_name" = @_functionliteral_llsldaffsn} : () -> !llvm.ptr
    %10063 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "llvm.store"(%10062, %10063) <{"ordering" = 0 : i64}> : (!llvm.ptr, !llvm.ptr) -> ()
    %10064 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10065 = builtin.unrealized_conversion_cast %10064 : !mini.ptr<i32> to !mini.ptr<i32>
    %10066 = "mini.unwrap"(%10065) : (!mini.ptr<i32>) -> i32
    %10067 = builtin.unrealized_conversion_cast %10059 : !llvm.ptr to !mini.function<[!mini.ptr<i32>, !mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %10068 = "mini.unwrap"(%10067) : (!mini.function<[!mini.ptr<i32>, !mini.ptr<i32>], !mini.any, !mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %10069 = builtin.unrealized_conversion_cast %10061 : !llvm.ptr to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %10070 = "mini.unwrap"(%10069) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %10071 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10072 = "mini.create_buffer"(%10071) {"typ" = i32, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %10073 = builtin.unrealized_conversion_cast %10072 : !llvm.ptr to !mini.buffer<!mini.ptr<i32>>
    %10074 = "mini.refer"(%10073) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    %10075 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10076 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10077 = builtin.unrealized_conversion_cast %10075 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.buffer_set"(%10074, %10076, %10077) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %10078 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10079 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10080 = builtin.unrealized_conversion_cast %10078 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.buffer_set"(%10074, %10079, %10080) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %10081 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10082 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10083 = builtin.unrealized_conversion_cast %10081 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.buffer_set"(%10074, %10082, %10083) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %10084 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10085 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10086 = builtin.unrealized_conversion_cast %10084 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.buffer_set"(%10074, %10085, %10086) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %10087 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10088 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10089 = "mini.unwrap"(%10074) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %10090 = "mini.unwrap"(%10087) : (!mini.ptr<i32>) -> i32
    %10091 = "mini.unwrap"(%10088) : (!mini.ptr<i32>) -> i32
    %10092 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "IntArray", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"IntArray">
    %10093 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10094 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10095 = builtin.unrealized_conversion_cast %10074 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %10096 = "mini.unwrap"(%10095) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %10097 = builtin.unrealized_conversion_cast %10093 : !mini.ptr<i32> to !mini.ptr<i32>
    %10098 = "mini.unwrap"(%10097) : (!mini.ptr<i32>) -> i32
    %10099 = builtin.unrealized_conversion_cast %10094 : !mini.ptr<i32> to !mini.ptr<i32>
    %10100 = "mini.unwrap"(%10099) : (!mini.ptr<i32>) -> i32
    %10101 = "mini.unwrap"(%10092) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %10102 = "mini.parameterizations_array"(%9656, %9191, %9191) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%10102, %10101, %10096, %10098, %10100) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %10103 = "mini.unwrap"(%10092) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %10104 = "mini.parameterization"() {"id_hierarchy" = ["function_typ", ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["FunctionPtri32_to_Ptri32", ["Ptri32"], ["Ptri32"]]} : () -> !llvm.ptr
    %10105 = "mini.parameterizations_array"(%10104) : (!llvm.ptr) -> !llvm.ptr
    %10106 = "mini.method_call"(%10105, %10103, %10070) {"offset" = 18 : i32, "vptrs" = ["function_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> !mini.fatptr<"IntIterable">
    %10107 = "mini.to_fat_ptr"(%10106) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntArray"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntArray">
    %10108 = "mini.unwrap"(%10107) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %10109 = "mini.parameterization"() {"id_hierarchy" = ["function_typ", ["i32_typ"], ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["FunctionPtri32._Ptri32_to_Ptri32", ["Ptri32"], ["Ptri32"], ["Ptri32"]]} : () -> !llvm.ptr
    %10110 = "mini.parameterizations_array"(%9191, %10109) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %10111 = "mini.method_call"(%10110, %10108, %10066, %10068) {"offset" = 15 : i32, "vptrs" = ["i32_typ", "function_typ"], "vtable_size" = 77 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr)>) -> !mini.ptr<i32>
    %10112 = builtin.unrealized_conversion_cast %10111 : !mini.ptr<i32> to !mini.ptr<i32>
    %10113 = "mini.unionize"(%10112) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %10114 = "mini.unwrap"(%10113) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %10115 = "mini.parameterizations_array"(%9191) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%10115, %10114) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %10116 = "mini.addr_of"() {"global_name" = @_functionliteral_efzdvhclja} : () -> !llvm.ptr
    %10117 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "llvm.store"(%10116, %10117) <{"ordering" = 0 : i64}> : (!llvm.ptr, !llvm.ptr) -> ()
    %10118 = builtin.unrealized_conversion_cast %10117 : !llvm.ptr to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.nothing>
    %10119 = "mini.unwrap"(%10118) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.nothing>) -> !llvm.struct<(!llvm.ptr)>
    %10120 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10121 = "mini.create_buffer"(%10120) {"typ" = i32, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %10122 = builtin.unrealized_conversion_cast %10121 : !llvm.ptr to !mini.buffer<!mini.ptr<i32>>
    %10123 = "mini.refer"(%10122) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    %10124 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10125 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10126 = builtin.unrealized_conversion_cast %10124 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.buffer_set"(%10123, %10125, %10126) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %10127 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10128 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10129 = builtin.unrealized_conversion_cast %10127 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.buffer_set"(%10123, %10128, %10129) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %10130 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10131 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10132 = builtin.unrealized_conversion_cast %10130 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.buffer_set"(%10123, %10131, %10132) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %10133 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10134 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10135 = builtin.unrealized_conversion_cast %10133 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.buffer_set"(%10123, %10134, %10135) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %10136 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10137 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10138 = "mini.unwrap"(%10123) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %10139 = "mini.unwrap"(%10136) : (!mini.ptr<i32>) -> i32
    %10140 = "mini.unwrap"(%10137) : (!mini.ptr<i32>) -> i32
    %10141 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "IntArray", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"IntArray">
    %10142 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10143 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10144 = builtin.unrealized_conversion_cast %10123 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %10145 = "mini.unwrap"(%10144) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %10146 = builtin.unrealized_conversion_cast %10142 : !mini.ptr<i32> to !mini.ptr<i32>
    %10147 = "mini.unwrap"(%10146) : (!mini.ptr<i32>) -> i32
    %10148 = builtin.unrealized_conversion_cast %10143 : !mini.ptr<i32> to !mini.ptr<i32>
    %10149 = "mini.unwrap"(%10148) : (!mini.ptr<i32>) -> i32
    %10150 = "mini.unwrap"(%10141) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %10151 = "mini.parameterizations_array"(%9656, %9191, %9191) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%10151, %10150, %10145, %10147, %10149) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %10152 = "mini.unwrap"(%10141) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %10153 = "mini.parameterization"() {"id_hierarchy" = ["function_typ", ["nothing_typ"], ["i32_typ"]], "name_hierarchy" = ["FunctionPtri32_to_Nothing", ["Nothing"], ["Ptri32"]]} : () -> !llvm.ptr
    %10154 = "mini.parameterizations_array"(%10153) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%10154, %10152, %10119) {"offset" = 14 : i32, "vptrs" = ["function_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
    %10155 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10156 = "mini.create_buffer"(%10155) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %10157 = builtin.unrealized_conversion_cast %10156 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %10158 = "mini.refer"(%10157) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %10159 = "mini.literal"() {"typ" = !llvm.array<12 x i8>, "value" = "bigtings.txt"} : () -> !llvm.ptr
    %10160 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%10158, %10160, %10159) {"typ" = !llvm.array<12 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %10161 = "mini.literal"() {"value" = 12 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10162 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10163 = "mini.unwrap"(%10158) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %10164 = "mini.unwrap"(%10161) : (!mini.ptr<i32>) -> i32
    %10165 = "mini.unwrap"(%10162) : (!mini.ptr<i32>) -> i32
    %10166 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %10167 = "mini.literal"() {"value" = 12 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10168 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10169 = builtin.unrealized_conversion_cast %10158 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %10170 = "mini.unwrap"(%10169) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %10171 = builtin.unrealized_conversion_cast %10167 : !mini.ptr<i32> to !mini.ptr<i32>
    %10172 = "mini.unwrap"(%10171) : (!mini.ptr<i32>) -> i32
    %10173 = builtin.unrealized_conversion_cast %10168 : !mini.ptr<i32> to !mini.ptr<i32>
    %10174 = "mini.unwrap"(%10173) : (!mini.ptr<i32>) -> i32
    %10175 = "mini.unwrap"(%10166) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %10176 = "mini.parameterizations_array"(%9214, %9191, %9191) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%10176, %10175, %10170, %10172, %10174) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %10177 = "mini.literal"() {"value" = 21 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10178 = "mini.create_buffer"(%10177) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %10179 = builtin.unrealized_conversion_cast %10178 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %10180 = "mini.refer"(%10179) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %10181 = "mini.literal"() {"typ" = !llvm.array<20 x i8>, "value" = "this\nis how\nwe do\nit"} : () -> !llvm.ptr
    %10182 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%10180, %10182, %10181) {"typ" = !llvm.array<20 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %10183 = "mini.literal"() {"value" = 20 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10184 = "mini.literal"() {"value" = 21 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10185 = "mini.unwrap"(%10180) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %10186 = "mini.unwrap"(%10183) : (!mini.ptr<i32>) -> i32
    %10187 = "mini.unwrap"(%10184) : (!mini.ptr<i32>) -> i32
    %10188 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %10189 = "mini.literal"() {"value" = 20 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10190 = "mini.literal"() {"value" = 21 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10191 = builtin.unrealized_conversion_cast %10180 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %10192 = "mini.unwrap"(%10191) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %10193 = builtin.unrealized_conversion_cast %10189 : !mini.ptr<i32> to !mini.ptr<i32>
    %10194 = "mini.unwrap"(%10193) : (!mini.ptr<i32>) -> i32
    %10195 = builtin.unrealized_conversion_cast %10190 : !mini.ptr<i32> to !mini.ptr<i32>
    %10196 = "mini.unwrap"(%10195) : (!mini.ptr<i32>) -> i32
    %10197 = "mini.unwrap"(%10188) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %10198 = "mini.parameterizations_array"(%9214, %9191, %9191) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%10198, %10197, %10192, %10194, %10196) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %10199 = "mini.unwrap"(%10166) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %10200 = "mini.unwrap"(%10188) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    "mini.call"(%10199, %10200) {"func_name" = "write_file", "ret_type" = !llvm.void} : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %10201 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10202 = "mini.create_buffer"(%10201) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %10203 = builtin.unrealized_conversion_cast %10202 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %10204 = "mini.refer"(%10203) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %10205 = "mini.literal"() {"typ" = !llvm.array<12 x i8>, "value" = "bigtings.txt"} : () -> !llvm.ptr
    %10206 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%10204, %10206, %10205) {"typ" = !llvm.array<12 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %10207 = "mini.literal"() {"value" = 12 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10208 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10209 = "mini.unwrap"(%10204) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %10210 = "mini.unwrap"(%10207) : (!mini.ptr<i32>) -> i32
    %10211 = "mini.unwrap"(%10208) : (!mini.ptr<i32>) -> i32
    %10212 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %10213 = "mini.literal"() {"value" = 12 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10214 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10215 = builtin.unrealized_conversion_cast %10204 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %10216 = "mini.unwrap"(%10215) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %10217 = builtin.unrealized_conversion_cast %10213 : !mini.ptr<i32> to !mini.ptr<i32>
    %10218 = "mini.unwrap"(%10217) : (!mini.ptr<i32>) -> i32
    %10219 = builtin.unrealized_conversion_cast %10214 : !mini.ptr<i32> to !mini.ptr<i32>
    %10220 = "mini.unwrap"(%10219) : (!mini.ptr<i32>) -> i32
    %10221 = "mini.unwrap"(%10212) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %10222 = "mini.parameterizations_array"(%9214, %9191, %9191) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%10222, %10221, %10216, %10218, %10220) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %10223 = "mini.unwrap"(%10212) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %10224 = "mini.call"(%10223) {"func_name" = "read_file", "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %10225 = builtin.unrealized_conversion_cast %10224 : !mini.fatptr<"String"> to !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %10226 = "mini.unwrap"(%10225) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %10227 = "mini.parameterizations_array"(%9218) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%10227, %10226) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %10228 = "mini.addr_of"() {"global_name" = @_functionliteral_ivemcbsovo} : () -> !llvm.ptr
    %10229 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "llvm.store"(%10228, %10229) <{"ordering" = 0 : i64}> : (!llvm.ptr, !llvm.ptr) -> ()
    %10230 = builtin.unrealized_conversion_cast %10229 : !llvm.ptr to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.nothing>
    %10231 = "mini.unwrap"(%10230) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.nothing>) -> !llvm.struct<(!llvm.ptr)>
    %10232 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10233 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10234 = "mini.unwrap"(%10232) : (!mini.ptr<i32>) -> i32
    %10235 = "mini.unwrap"(%10233) : (!mini.ptr<i32>) -> i32
    %10236 = "mini.new"() {"typ" = !llvm.struct<(i32, i32, i32)>, "class_name" = "Range", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Range">
    %10237 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10238 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10239 = builtin.unrealized_conversion_cast %10237 : !mini.ptr<i32> to !mini.ptr<i32>
    %10240 = "mini.unwrap"(%10239) : (!mini.ptr<i32>) -> i32
    %10241 = builtin.unrealized_conversion_cast %10238 : !mini.ptr<i32> to !mini.ptr<i32>
    %10242 = "mini.unwrap"(%10241) : (!mini.ptr<i32>) -> i32
    %10243 = "mini.unwrap"(%10236) : (!mini.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %10244 = "mini.parameterizations_array"(%9191, %9191) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%10244, %10243, %10240, %10242) {"offset" = 4 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 57 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32) -> ()
    %10245 = "mini.unwrap"(%10236) : (!mini.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %10246 = "mini.parameterizations_array"(%10153) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%10246, %10245, %10231) {"offset" = 6 : i32, "vptrs" = ["function_typ"], "vtable_size" = 57 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
    %10247 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    %10248 = "mini.addr_of"() {"global_name" = @i32toi8} : () -> !llvm.ptr
    "llvm.store"(%10248, %10247) <{"ordering" = 0 : i64}> : (!llvm.ptr, !llvm.ptr) -> ()
    %10249 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10250 = builtin.unrealized_conversion_cast %10249 : !mini.ptr<i32> to !mini.ptr<i32>
    %10251 = "mini.unwrap"(%10250) : (!mini.ptr<i32>) -> i32
    %10252 = "mini.unwrap"(%10247) : (!llvm.ptr) -> !llvm.ptr
    %10253 = "mini.fptr_call"(%10252, %10251) {"ret_type" = i8} : (!llvm.ptr, i32) -> !mini.ptr<i8>
    %10254 = "mini.unionize"(%10253) {"from_typ" = i8, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i8_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i8>) -> !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %10255 = "mini.unwrap"(%10254) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %10256 = "mini.parameterizations_array"(%9924) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%10256, %10255) {"offset" = 0 : i32, "vptrs" = ["i8_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %10257 = "mini.addr_of"() {"global_name" = @_functionliteral_nhyvdnbhld} : () -> !llvm.ptr
    %10258 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "llvm.store"(%10257, %10258) <{"ordering" = 0 : i64}> : (!llvm.ptr, !llvm.ptr) -> ()
    %10259 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10260 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10261 = "mini.unwrap"(%10259) : (!mini.ptr<i32>) -> i32
    %10262 = "mini.unwrap"(%10260) : (!mini.ptr<i32>) -> i32
    %10263 = "mini.coro_create"(%10258, %10261, %10262) {"arg_passer" = @coroutine_dowemmegum_passer, "buffer_filler" = @coroutine_dowemmegum_buffer_filler} : (!llvm.ptr, i32, i32) -> !mini.coroutine<[!mini.union<[!mini.ptr<i32>, !mini.nil]>], !mini.ptr<i32>, !mini.nothing>
    %10264 = builtin.unrealized_conversion_cast %10263 : !mini.coroutine<[!mini.union<[!mini.ptr<i32>, !mini.nil]>], !mini.ptr<i32>, !mini.nothing> to !mini.coroutine<[!mini.union<[!mini.ptr<i32>, !mini.nil]>], !mini.ptr<i32>, !mini.nothing>
    %10265 = "mini.refer"(%10264) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.coroutine<[!mini.union<[!mini.ptr<i32>, !mini.nil]>], !mini.ptr<i32>, !mini.nothing>) -> !mini.coroutine<[!mini.union<[!mini.ptr<i32>, !mini.nil]>], !mini.ptr<i32>, !mini.nothing>
    %10266 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10267 = "mini.unionize"(%10266) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %10268 = "mini.unwrap"(%10267) : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !llvm.struct<(!llvm.ptr, i32)>
    %10269 = "mini.coro_call"(%10265, %10268) : (!mini.coroutine<[!mini.union<[!mini.ptr<i32>, !mini.nil]>], !mini.ptr<i32>, !mini.nothing>, !llvm.struct<(!llvm.ptr, i32)>) -> !llvm.struct<(!llvm.ptr, i32)>
    %10270 = "mini.wrap"(%10269) : (!llvm.struct<(!llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %10271 = "mini.reunionize"(%10270) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %10272 = "mini.unwrap"(%10271) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %10273 = "mini.parameterization"() {"id_hierarchy" = ["union_typ", ["i32_typ"], ["nil_typ"]], "name_hierarchy" = ["Ptri32_or_Nil", ["Ptri32"], ["Nil"]]} : () -> !llvm.ptr
    %10274 = "mini.parameterizations_array"(%10273) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%10274, %10272) {"offset" = 0 : i32, "vptrs" = ["union_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %10275 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10276 = "mini.unionize"(%10275) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %10277 = "mini.unwrap"(%10276) : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !llvm.struct<(!llvm.ptr, i32)>
    %10278 = "mini.coro_call"(%10265, %10277) : (!mini.coroutine<[!mini.union<[!mini.ptr<i32>, !mini.nil]>], !mini.ptr<i32>, !mini.nothing>, !llvm.struct<(!llvm.ptr, i32)>) -> !llvm.struct<(!llvm.ptr, i32)>
    %10279 = "mini.wrap"(%10278) : (!llvm.struct<(!llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %10280 = "mini.reunionize"(%10279) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %10281 = "mini.unwrap"(%10280) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %10282 = "mini.parameterizations_array"(%10273) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%10282, %10281) {"offset" = 0 : i32, "vptrs" = ["union_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %10283 = "mini.coro_create"(%10063) {"arg_passer" = @coroutine_akfqpqfxun_passer, "buffer_filler" = @coroutine_akfqpqfxun_buffer_filler} : (!llvm.ptr) -> !mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.union<[!mini.ptr<i32>, !mini.nil]>>
    %10284 = builtin.unrealized_conversion_cast %10283 : !mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.union<[!mini.ptr<i32>, !mini.nil]>> to !mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.union<[!mini.ptr<i32>, !mini.nil]>>
    %10285 = "mini.refer"(%10284) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.union<[!mini.ptr<i32>, !mini.nil]>>) -> !mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.union<[!mini.ptr<i32>, !mini.nil]>>
    %10286 = "mini.coro_call"(%10285) : (!mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.union<[!mini.ptr<i32>, !mini.nil]>>) -> !llvm.struct<(!llvm.ptr, i160)>
    %10287 = "mini.wrap"(%10286) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>
    %10288 = "llvm.load"(%10285) : (!mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.union<[!mini.ptr<i32>, !mini.nil]>>) -> !llvm.ptr
    %10289 = "mini.coro_get_result"(%10288) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, i32)>
    %10290 = "mini.wrap"(%10289) : (!llvm.struct<(!llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %10291 = "mini.reunionize"(%10290) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %10292 = "mini.unwrap"(%10291) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %10293 = "mini.parameterizations_array"(%10273) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%10293, %10292) {"offset" = 0 : i32, "vptrs" = ["union_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %10294 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, i32)>)>, "class_name" = "Channel", "num_data_fields" = 1 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Channel">
    %10295 = "mini.unwrap"(%10294) : (!mini.fatptr<"Channel">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %10296 = "mini.parameterizations_array"() : () -> !llvm.ptr
    "mini.method_call"(%10296, %10295) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 7 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %10297 = "mini.to_fat_ptr"(%10294) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Channel", "to_typ_name" = "Channel"} : (!mini.fatptr<"Channel">) -> !mini.fatptr<"Channel">
    %10298 = "mini.refer"(%10297) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Channel">) -> !mini.fatptr<"Channel">
    %10299 = "mini.addr_of"() {"global_name" = @_functionliteral_stnvqtrzkz} : () -> !llvm.ptr
    %10300 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "llvm.store"(%10299, %10300) <{"ordering" = 0 : i64}> : (!llvm.ptr, !llvm.ptr) -> ()
    %10301 = "mini.unwrap"(%10298) : (!mini.fatptr<"Channel">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %10302 = "mini.coro_create"(%10300, %10301) {"arg_passer" = @coroutine_bcvlnaxceh_passer, "buffer_filler" = @coroutine_bcvlnaxceh_buffer_filler} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing>
    %10303 = builtin.unrealized_conversion_cast %10302 : !mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing> to !mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing>
    %10304 = "mini.refer"(%10303) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing>) -> !mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing>
    %10305 = "mini.coro_call"(%10304) : (!mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing>) -> !llvm.struct<(!llvm.ptr, i160)>
    %10306 = "mini.wrap"(%10305) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>
    %10307 = "mini.unwrap"(%10298) : (!mini.fatptr<"Channel">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %10308 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %10309 = "mini.method_call"(%10308, %10307) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 7 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.ptr<i32>
    %10310 = builtin.unrealized_conversion_cast %10309 : !mini.ptr<i32> to !mini.ptr<i32>
    %10311 = "mini.unionize"(%10310) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %10312 = "mini.unwrap"(%10311) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %10313 = "mini.parameterizations_array"(%9191) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%10313, %10312) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %10314 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10315 = builtin.unrealized_conversion_cast %10314 : !mini.ptr<i32> to !mini.ptr<i32>
    %10316 = "mini.unwrap"(%10315) : (!mini.ptr<i32>) -> i32
    %10317 = builtin.unrealized_conversion_cast %10059 : !llvm.ptr to !mini.function<[!mini.ptr<i32>, !mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %10318 = "mini.unwrap"(%10317) : (!mini.function<[!mini.ptr<i32>, !mini.ptr<i32>], !mini.any, !mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %10319 = "mini.addr_of"() {"global_name" = @_functionliteral_wdjcpetwqf} : () -> !llvm.ptr
    %10320 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "llvm.store"(%10319, %10320) <{"ordering" = 0 : i64}> : (!llvm.ptr, !llvm.ptr) -> ()
    %10321 = builtin.unrealized_conversion_cast %10320 : !llvm.ptr to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
    %10322 = "mini.unwrap"(%10321) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>) -> !llvm.struct<(!llvm.ptr)>
    %10323 = "mini.addr_of"() {"global_name" = @_functionliteral_wssjpxcmkl} : () -> !llvm.ptr
    %10324 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "llvm.store"(%10323, %10324) <{"ordering" = 0 : i64}> : (!llvm.ptr, !llvm.ptr) -> ()
    %10325 = builtin.unrealized_conversion_cast %10324 : !llvm.ptr to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %10326 = "mini.unwrap"(%10325) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %10327 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10328 = "mini.literal"() {"value" = 15 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10329 = "mini.unwrap"(%10327) : (!mini.ptr<i32>) -> i32
    %10330 = "mini.unwrap"(%10328) : (!mini.ptr<i32>) -> i32
    %10331 = "mini.new"() {"typ" = !llvm.struct<(i32, i32, i32)>, "class_name" = "Range", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Range">
    %10332 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10333 = "mini.literal"() {"value" = 15 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10334 = builtin.unrealized_conversion_cast %10332 : !mini.ptr<i32> to !mini.ptr<i32>
    %10335 = "mini.unwrap"(%10334) : (!mini.ptr<i32>) -> i32
    %10336 = builtin.unrealized_conversion_cast %10333 : !mini.ptr<i32> to !mini.ptr<i32>
    %10337 = "mini.unwrap"(%10336) : (!mini.ptr<i32>) -> i32
    %10338 = "mini.unwrap"(%10331) : (!mini.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %10339 = "mini.parameterizations_array"(%9191, %9191) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%10339, %10338, %10335, %10337) {"offset" = 4 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 57 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32) -> ()
    %10340 = "mini.unwrap"(%10331) : (!mini.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %10341 = "mini.parameterizations_array"(%10104) : (!llvm.ptr) -> !llvm.ptr
    %10342 = "mini.method_call"(%10341, %10340, %10326) {"offset" = 10 : i32, "vptrs" = ["function_typ"], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> !mini.fatptr<"IntIterable">
    %10343 = "mini.to_fat_ptr"(%10342) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %10344 = "mini.unwrap"(%10343) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %10345 = "mini.parameterization"() {"id_hierarchy" = ["function_typ", ["bool_typ"], ["i32_typ"]], "name_hierarchy" = ["FunctionPtri32_to_Ptri1", ["Ptri1"], ["Ptri32"]]} : () -> !llvm.ptr
    %10346 = "mini.parameterizations_array"(%10345) : (!llvm.ptr) -> !llvm.ptr
    %10347 = "mini.method_call"(%10346, %10344, %10322) {"offset" = 5 : i32, "vptrs" = ["function_typ"], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> !mini.fatptr<"IntIterable">
    %10348 = "mini.to_fat_ptr"(%10347) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %10349 = "mini.unwrap"(%10348) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %10350 = "mini.parameterizations_array"(%9191, %10109) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %10351 = "mini.method_call"(%10350, %10349, %10316, %10318) {"offset" = 1 : i32, "vptrs" = ["i32_typ", "function_typ"], "vtable_size" = 24 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr)>) -> !mini.ptr<i32>
    %10352 = builtin.unrealized_conversion_cast %10351 : !mini.ptr<i32> to !mini.ptr<i32>
    %10353 = "mini.unionize"(%10352) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %10354 = "mini.unwrap"(%10353) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %10355 = "mini.parameterizations_array"(%9191) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%10355, %10354) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %10356 = "mini.literal"() {"value" = 256 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10357 = "mini.unionize"(%10356) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %10358 = "mini.unwrap"(%10357) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %10359 = "mini.parameterizations_array"(%9191) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%10359, %10358) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %10360 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10361 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10362 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10363 = "mini.unwrap"(%10360) : (!mini.ptr<i32>) -> i32
    %10364 = "mini.unwrap"(%10361) : (!mini.ptr<i32>) -> i32
    %10365 = "mini.unwrap"(%10362) : (!mini.ptr<i32>) -> i32
    %10366 = "mini.create_tuple"(%10363, %10364, %10365) {"typ" = !llvm.struct<(i32, i32, i32)>} : (i32, i32, i32) -> !mini.tuple<[!mini.ptr<i32>, !mini.ptr<i32>, !mini.ptr<i32>]>
    %10367 = "mini.tuple_indexation"(%10366) {"typ" = !llvm.struct<(i32, i32, i32)>, "index" = 1 : i32} : (!mini.tuple<[!mini.ptr<i32>, !mini.ptr<i32>, !mini.ptr<i32>]>) -> !mini.ptr<i32>
    %10368 = "mini.unionize"(%10367) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>
    %10369 = "mini.unwrap"(%10368) : (!mini.union<[!mini.ptr<i64>, !mini.fatptr<"Character">, !mini.ptr<i32>, !mini.ptr<f64>, !mini.ptr<i8>, !mini.nil, !mini.ptr<i1>, !mini.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %10370 = "mini.parameterizations_array"(%9191) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%10370, %10369) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
  }) : () -> ()
}
